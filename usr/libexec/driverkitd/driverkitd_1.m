void *sub_100070684(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  v4 = *(void *)(a1 + 16);
  v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    v6 = *(void *)(a1 + 16);
  }
  else {
    v6 = *(void *)(a2 + 16);
  }
  sub_100071D18(0LL, v6, 0);
  v40 = a2;
  v41 = a1;
  v38 = v6;
  v42 = v4;
  v39 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v8 = (uint64_t *)(a2 + 40);
    v9 = v4;
    while (v9)
    {
      if (!v5) {
        goto LABEL_40;
      }
      v10 = *v7;
      if ((*v7 & 0x8000000000000000LL) != 0) {
        goto LABEL_41;
      }
      if (HIDWORD(v10)) {
        goto LABEL_42;
      }
      v11 = *v8;
      v43 = *v8;
      v45 = *(v8 - 1);
      switch(v10 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.error.getter(v14);
          break;
        case 3uLL:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.info.getter(v15);
          break;
        case 7uLL:
          v16 = swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.debug.getter(v16);
          break;
        default:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.default.getter(v12);
          break;
      }

      v17 = v13;
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1) {
        sub_100071D18((char *)(v18 > 1), v19 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[3 * v19];
      *((_BYTE *)v20 + 32) = v17;
      --v5;
      v20[5] = v45;
      v20[6] = v43;
      --v9;
      v8 += 2;
      ++v7;
      if (!--v6) {
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    JUMPOUT(0x1000709ACLL);
  }

  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
LABEL_20:
  if (v42 > v39)
  {
    v21 = 0LL;
    if (v38 <= v39) {
      v22 = v39;
    }
    else {
      v22 = v38;
    }
    v44 = v22 - v38;
    v23 = v42 - v38;
    v24 = (void *)(v40 + 16 * v38 + 40);
    while (v23 != v21)
    {
      if (v39 - v38 == v21) {
        goto LABEL_38;
      }
      if (v44 == v21) {
        goto LABEL_44;
      }
      v25 = *(void *)(v41 + 8 * v38 + 32 + 8 * v21);
      if ((v25 & 0x8000000000000000LL) != 0) {
        goto LABEL_45;
      }
      if (HIDWORD(v25)) {
        goto LABEL_46;
      }
      v27 = *(v24 - 1);
      v26 = *v24;
      switch(v25 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.error.getter(v30);
          break;
        case 3uLL:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.info.getter(v31);
          break;
        case 7uLL:
          v32 = swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.debug.getter(v32);
          break;
        default:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.default.getter(v28);
          break;
      }

      v33 = v29;
      v35 = _swiftEmptyArrayStorage[2];
      v34 = _swiftEmptyArrayStorage[3];
      if (v35 >= v34 >> 1) {
        sub_100071D18((char *)(v34 > 1), v35 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v35 + 1;
      v36 = &_swiftEmptyArrayStorage[3 * v35];
      *((_BYTE *)v36 + 32) = v33;
      v36[5] = v27;
      v36[6] = v26;
      ++v21;
      v24 += 2;
      if (v23 == v21) {
        goto LABEL_38;
      }
    }

    goto LABEL_43;
  }

const char *sub_1000709E4()
{
  mach_port_t v0 = sub_1000D7FF4();
  io_registry_entry_t RootEntry = IORegistryGetRootEntry(v0);
  if (RootEntry)
  {
    io_registry_entry_t v2 = RootEntry;
    v3 = (__CFString *)String._bridgeToObjectiveC()();
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

    if (CFProperty)
    {
      CFTypeID v6 = CFGetTypeID(CFProperty);
      if (v6 == CFNumberGetTypeID())
      {
        v7 = (__CFString *)String._bridgeToObjectiveC()();
        CFTypeRef v8 = IORegistryEntryCreateCFProperty(v2, v7, kCFAllocatorDefault, 0);

        if (v8)
        {
          CFTypeID v10 = CFGetTypeID(v8);
          if (v10 == CFNumberGetTypeID())
          {
            swift_unknownObjectRetain(CFProperty);
            uint64_t v11 = objc_opt_self(&OBJC_CLASS___NSNumber);
            uint64_t v12 = swift_dynamicCastObjCClass(CFProperty, v11);
            if (v12)
            {
              cpu_type_t v33 = 0;
              char v34 = 1;
              static Int32._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v33);
              swift_unknownObjectRelease(CFProperty);
              if ((v34 & 1) == 0)
              {
                cpu_type_t v13 = v33;
                swift_unknownObjectRetain(v8);
                uint64_t v14 = objc_opt_self(&OBJC_CLASS___NSNumber);
                uint64_t v15 = swift_dynamicCastObjCClass(v8, v14);
                if (v15)
                {
                  cpu_subtype_t v31 = 0;
                  char v32 = 1;
                  static Int32._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v31);
                  swift_unknownObjectRelease(v8);
                  if ((v32 & 1) == 0)
                  {
                    cpu_subtype_t v16 = v31;
                    v17 = sub_1000D41E0(v13, v31);
                    v18 = v17;
                    if (v19 == 1)
                    {
                      uint64_t v20 = static os_log_type_t.error.getter(v17);
                      uint64_t v21 = sub_100005FB4((uint64_t *)&unk_1001596B0);
                      uint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
                      *(_OWORD *)(v22 + 16) = xmmword_10010F440;
                      *(void *)(v22 + 56) = &type metadata for Int32;
                      *(void *)(v22 + 64) = &protocol witness table for Int32;
                      *(_DWORD *)(v22 + 32) = v13;
                      *(void *)(v22 + 96) = &type metadata for Int32;
                      *(void *)(v22 + 104) = &protocol witness table for Int32;
                      *(_DWORD *)(v22 + 72) = v16;
                      uint64_t v23 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
                      v24 = (void *)static OS_os_log.default.getter(v23);
                      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v24,  "Unknown CPU type %d with subtype %d",  v31,  v33);
                      swift_unknownObjectRelease(CFProperty);
                      swift_unknownObjectRelease(v8);
                      swift_bridgeObjectRelease(v22);
                    }

                    else
                    {
                      swift_unknownObjectRelease(CFProperty);
                      swift_unknownObjectRelease(v8);
                    }

                    goto LABEL_19;
                  }
                }

                else
                {
                  swift_unknownObjectRelease(CFProperty);
                  CFTypeRef CFProperty = v8;
                }
              }
            }

            else
            {
              swift_unknownObjectRelease(CFProperty);
            }

            swift_unknownObjectRelease(CFProperty);
            swift_unknownObjectRelease(v8);
LABEL_18:
            v18 = 0LL;
LABEL_19:
            IOObjectRelease(v2);
            return v18;
          }

          uint64_t v9 = swift_unknownObjectRelease(v8);
        }

        uint64_t v28 = static os_log_type_t.error.getter(v9);
        uint64_t v29 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        v27 = (void *)static OS_os_log.default.getter(v29);
        os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v27,  "CPU Subtype is not a number?",  28LL,  2LL,  _swiftEmptyArrayStorage);
        swift_unknownObjectRelease(CFProperty);
LABEL_17:

        goto LABEL_18;
      }

      uint64_t v5 = swift_unknownObjectRelease(CFProperty);
    }

    uint64_t v25 = static os_log_type_t.error.getter(v5);
    uint64_t v26 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    v27 = (void *)static OS_os_log.default.getter(v26);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v27,  "CPU Type is not a number?",  25LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_17;
  }

  return 0LL;
}

uint64_t sub_100070DA8()
{
  mach_port_t v0 = sub_1000D7FF4();
  uint64_t v1 = IORegistryEntryFromPath(v0, "IODeviceTree:/chosen");
  if (!(_DWORD)v1)
  {
    uint64_t v8 = static os_log_type_t.error.getter(v1);
    uint64_t v9 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    CFTypeID v10 = (void *)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v10,  "No IOEntry found for IODeviceTree:/chosen",  41LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_9;
  }

  io_registry_entry_t v2 = v1;
  v3 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
LABEL_8:
    uint64_t v11 = static os_log_type_t.error.getter(v5);
    uint64_t v12 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    CFTypeID v10 = (void *)static OS_os_log.default.getter(v12);
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v10,  "ecid read from IORegistry is not CFData",  39LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_9;
  }

  CFTypeID v6 = CFGetTypeID(CFProperty);
  if (v6 != CFDataGetTypeID())
  {
    uint64_t v5 = swift_unknownObjectRelease(CFProperty);
    goto LABEL_8;
  }

  CFTypeRef v17 = CFProperty;
  swift_unknownObjectRetain(CFProperty);
  uint64_t v7 = swift_dynamicCast(v16, &v17, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6LL);
  if ((_DWORD)v7) {
    __asm { BR              X10 }
  }

  uint64_t v14 = static os_log_type_t.error.getter(v7);
  uint64_t v15 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  CFTypeID v10 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v10,  "could not convert ecid to Data",  30LL,  2LL,  _swiftEmptyArrayStorage);
  swift_unknownObjectRelease(CFProperty);
LABEL_9:

  return 0LL;
}

driverkitd::ApprovalState sub_10007110C()
{
  uint64_t v2 = v1;
  v3 = (uint64_t *)sub_10008FAF0();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  CFTypeID v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v0 + 592LL);
  __n128 v7 = swift_bridgeObjectRetain(v5);
  Swift::Int v8 = v6(v4, v5, v7);
  driverkitd::ApprovalState result = swift_bridgeObjectRelease(v5);
  if (!v2)
  {
    driverkitd::ApprovalState result = j___s10driverkitd13ApprovalStateO8rawValueACSgSi_tcfC(v8).value;
    if (result == driverkitd_ApprovalState_unknownDefault)
    {
      _StringGuts.grow(_:)(37LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      unint64_t v12 = sub_100012624();
      uint64_t v13 = swift_allocError(&type metadata for KMError, v12, 0LL, 0LL);
      *(void *)uint64_t v14 = 0xD000000000000023LL;
      *(void *)(v14 + 8) = 0x8000000100124020LL;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(void *)(v14 + 64) = 0LL;
      *(_BYTE *)(v14 + 72) = 9;
      return swift_willThrow(v13);
    }
  }

  return result;
}

uint64_t sub_10007123C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640LL))();
}

uint64_t sub_100071248()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

double sub_10007128C()
{
  uint64_t v1 = swift_allocObject(v0, 120LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100111D80;
  *(void *)(v1 + 32) = 1LL;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 48) = 0LL;
  *(void *)(v1 + 56) = 0LL;
  *(void *)(v1 + 64) = 1LL;
  *(_DWORD *)(v1 + 72) = 514;
  *(_WORD *)(v1 + 76) = 513;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 112) = 0LL;
  return result;
}

uint64_t sub_1000712E4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232LL))() & 1;
}

uint64_t sub_100071310()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256LL))() & 1;
}

uint64_t sub_10007133C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280LL))() & 1;
}

uint64_t sub_100071368()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304LL))() & 1;
}

uint64_t sub_100071394()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376LL))() & 1;
}

uint64_t sub_1000713C0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328LL))() & 1;
}

uint64_t sub_1000713EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352LL))() & 1;
}

uint64_t sub_100071418()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))() & 1;
}

uint64_t sub_100071444()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 424LL))();
}

uint64_t sub_10007146C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400LL))();
}

uint64_t sub_100071494()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 448LL))();
}

uint64_t sub_1000714BC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 472LL))() & 1;
}

uint64_t sub_1000714E8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 496LL))() & 1;
}

uint64_t sub_100071514()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 520LL))() & 0x1FF;
}

uint64_t sub_100071548()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 544LL))() & 1;
}

uint64_t sub_100071574()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 568LL))();
}

uint64_t sub_10007159C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 632LL))();
}

uint64_t sub_1000715C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 592LL))();
}

uint64_t sub_1000715EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 600LL))();
}

uint64_t sub_100071614()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 608LL))();
}

uint64_t sub_10007163C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 616LL))();
}

uint64_t sub_100071664(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(**(void **)v3 + 624LL))(a1, a2, a3 & 1);
}

uint64_t sub_100071690()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 640LL))();
}

uint64_t sub_1000716B8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 664LL))();
}

uint64_t sub_1000716E0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 648LL))();
}

uint64_t sub_10007170C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 656LL))();
}

uint64_t sub_100071734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  CFTypeID v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_1000717AC(v10, v7, v8);
}

uint64_t sub_1000717AC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100159860);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_100071818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159860);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

Swift::Int sub_100071864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100159CA0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v12) {
      break;
    }
    uint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v15);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v15 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v15);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v27;
      }
    }

void sub_100071B70()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100159CA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

char *sub_100071D18(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100071D50(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_100071D34(char *a1, int64_t a2, char a3)
{
  Swift::Int result = sub_100071E68(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_100071D50(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100159C98);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13);
  }

  swift_release(a4);
  return v11;
}

char *sub_100071E68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100159C88);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_release(a4);
  return v11;
}

unsigned __int8 *sub_100071F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  unint64_t v7 = sub_100073404();
  __n128 v8 = swift_bridgeObjectRetain(a4);
  uint64_t v9 = String.init<A>(_:)(&v19, &type metadata for Substring, &protocol witness table for Substring, v7, v8);
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if ((v10 & 0x1000000000000000LL) == 0)
  {
    if ((v10 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v14 = HIBYTE(v12) & 0xF;
    uint64_t v19 = v11;
    uint64_t v20 = v12 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = (unsigned __int8 *)&v19;
    goto LABEL_7;
  }

  uint64_t v11 = sub_100014314(v9, v10);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease(v12);
  unint64_t v12 = v16;
  if ((v16 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    uint64_t v13 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v12);
  }

LABEL_7:
  unint64_t v17 = sub_100072134(v13, v14, a5);
  swift_bridgeObjectRelease(v12);
  return v17;
}

  uint64_t v13 = sub_100072134(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

  __break(1u);
LABEL_9:
  uint64_t v11 = static os_log_type_t.error.getter(v6);
  unint64_t v12 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_10010F440;
  unint64_t v15 = v4[4];
  uint64_t v14 = v4[5];
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v16 = sub_100026B64();
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v14;
  *(void *)(v13 + 96) = &type metadata for UInt64;
  *(void *)(v13 + 104) = &protocol witness table for UInt64;
  *(void *)(v13 + 64) = v16;
  *(void *)(v13 + 72) = v3;
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(v14);
  uint64_t v18 = (void *)static OS_os_log.default.getter(v17);
  os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v18,  "XPC Event %{public}s: Unexpected reply from previously pending subscriber %llx",  78LL,  2LL,  v13);
LABEL_40:

  return swift_bridgeObjectRelease(v13);
}

  uint64_t v13 = sub_1000845E8(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

  swift_bridgeObjectRetain(v19);
  int64_t v24 = (uint64_t *)sub_1000DF6D4();
  uint64_t v25 = *v24;
  uint64_t v19 = v24[1];
  v123 = v19;
  v124 = v25;
LABEL_8:
  swift_bridgeObjectRetain(v19);
  unint64_t v26 = v16;
  int64_t v27 = v128;
  if ((void)v128)
  {
    char v28 = v17;
    unint64_t v29 = v128;
  }

  else
  {
    swift_bridgeObjectRetain(v16);
    BOOL v30 = (uint64_t *)sub_1000DF6E0();
    char v28 = *v30;
    unint64_t v26 = v30[1];
    unint64_t v29 = v26;
  }

  swift_bridgeObjectRetain(v26);
  v157 = v120;
  v158 = v119;
  v159 = v118;
  v160 = v117;
  v161 = v116;
  v162 = v115;
  v163 = v114;
  v164 = v113;
  v165 = v112;
  v166 = v111;
  v168 = v110;
  v169 = v109;
  v167 = v108;
  v170 = v107;
  v171 = v106;
  v172 = v105;
  v173 = v104;
  v174 = v103;
  v175 = v102;
  v176 = v101;
  v177 = v18;
  v178 = v15;
  v179 = v127;
  v180 = v16;
  v181 = v17;
  v182 = v128;
  type metadata accessor for ActivationStateManager();
  uint64_t v31 = (void *)v4[8];
  uint64_t v32 = v125;
  sub_100005F70((uint64_t)v125, (uint64_t)&v129);
  swift_bridgeObjectRetain(v27);
  cpu_type_t v33 = v31;
  v4[15] = sub_1000A1820((uint64_t)v33, &v129);
  type metadata accessor for ApplicationManager();
  uint64_t v34 = v33;
  URL.init(fileURLWithPath:)(v28, v29);
  swift_bridgeObjectRelease(v29);
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  v4[9] = sub_10001C744((uint64_t)v34, (uint64_t)v11, &v129);
  type metadata accessor for KernelStateManager();
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  uint64_t v35 = (id)v4[8];
  v4[10] = sub_100006D44(&v157, &v129, v35);
  type metadata accessor for DriverBinManager(0LL);
  uint64_t v36 = v35;
  v37 = v121;
  URL.init(fileURLWithPath:)(v122, v121);
  swift_bridgeObjectRelease(v37);
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  v4[11] = sub_1000409F0((uint64_t)v36, (uint64_t)v11, &v129);
  type metadata accessor for ApprovalManager(0LL);
  uint64_t v38 = (id)v4[8];
  char v39 = v123;
  URL.init(fileURLWithPath:)(v124, v123);
  swift_bridgeObjectRelease(v39);
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  v4[12] = sub_100092B90((uint64_t)v38, (uint64_t)v11, &v129);
  type metadata accessor for ApprovalSettingsStateManager();
  __int128 v40 = (void *)v4[8];
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  v41 = v40;
  v4[13] = sub_1000FDCC4(v41, &v129);
  type metadata accessor for ActiveDriversStateManager();
  sub_100005F70((uint64_t)v32, (uint64_t)&v129);
  v4[14] = (uint64_t)sub_100022E44((uint64_t)v41, &v129);
  v42 = v4[10];
  v130 = v126;
  v131 = &off_10014B480;
  *(void *)&v129 = v4;
  v43 = *(void (**)(__int128 *))(*(void *)v42 + 400LL);
  swift_retain(v4);
  v43(&v129);
  sub_100006034(&v129);
  v44 = v4[9];
  v45 = v4[15];
  v46 = *(void (**)(uint64_t))(*(void *)v44 + 288LL);
  swift_retain(v44);
  v47 = swift_retain(v45);
  v46(v47);
  swift_release(v44);
  swift_release(v45);
  v48 = v4[11];
  v49 = v4[9];
  v50 = *(void (**)(uint64_t))(*(void *)v48 + 264LL);
  swift_retain(v48);
  v51 = swift_retain(v49);
  v50(v51);
  swift_release(v48);
  swift_release(v49);
  v52 = v4[11];
  v53 = v4[14];
  v54 = *(void (**)(uint64_t))(*(void *)v52 + 272LL);
  swift_retain(v52);
  v55 = swift_retain(v53);
  v54(v55);
  swift_release(v52);
  swift_release(v53);
  v57 = v4[11];
  v56 = v4[12];
  v58 = *(void (**)(uint64_t))(*(void *)v56 + 280LL);
  swift_retain(v56);
  v59 = swift_retain(v57);
  v58(v59);
  swift_release(v56);
  swift_release(v57);
  v60 = v4[12];
  v61 = v4[10];
  v62 = *(void (**)(uint64_t))(*(void *)v60 + 288LL);
  swift_retain(v60);
  v63 = swift_retain(v61);
  v62(v63);
  swift_release(v60);
  swift_release(v61);
  v64 = v4[12];
  v65 = v4[9];
  v66 = *(void (**)(uint64_t))(*(void *)v64 + 296LL);
  swift_retain(v64);
  v67 = swift_retain(v65);
  v66(v67);
  swift_release(v64);
  swift_release(v65);
  v68 = v4[10];
  v69 = v4[15];
  v70 = *(void (**)(uint64_t))(*(void *)v68 + 392LL);
  swift_retain(v68);
  v71 = swift_retain(v69);
  v70(v71);
  swift_release(v68);
  swift_release(v69);
  v73 = v4[9];
  v72 = v4[10];
  v74 = *(void (**)(uint64_t))(*(void *)v72 + 376LL);
  swift_retain(v72);
  v75 = swift_retain(v73);
  v74(v75);
  swift_release(v72);
  swift_release(v73);
  v76 = v4[10];
  v77 = v4[12];
  v78 = *(void (**)(uint64_t))(*(void *)v76 + 360LL);
  swift_retain(v76);
  v79 = swift_retain(v77);
  v78(v79);
  swift_release(v76);
  swift_release(v77);
  v80 = v4[10];
  v81 = v4[11];
  v82 = *(void (**)(uint64_t))(*(void *)v80 + 368LL);
  swift_retain(v80);
  v83 = swift_retain(v81);
  v82(v83);
  swift_release(v80);
  swift_release(v81);
  v84 = v4[10];
  v85 = v4[14];
  v86 = *(void (**)(uint64_t))(*(void *)v84 + 384LL);
  swift_retain(v84);
  v87 = swift_retain(v85);
  v86(v87);
  swift_release(v84);
  swift_release(v85);
  v88 = v4[13];
  v89 = v4[11];
  v90 = *(void (**)(uint64_t))(*(void *)v88 + 304LL);
  swift_retain(v88);
  v91 = swift_retain(v89);
  v90(v91);
  swift_release(v88);
  swift_release(v89);
  v93 = v4[12];
  v92 = v4[13];
  v94 = *(void (**)(uint64_t))(*(void *)v92 + 320LL);
  swift_retain(v92);
  v95 = swift_retain(v93);
  v94(v95);
  swift_release(v92);
  swift_release(v93);
  v96 = v4[13];
  v97 = v4[10];
  v98 = *(void (**)(uint64_t))(*(void *)v96 + 312LL);
  swift_retain(v96);
  v99 = swift_retain(v97);
  v98(v99);
  swift_release(v96);
  swift_release(v97);
  (*(void (**)(uint64_t))(*(void *)v4[13] + 328LL))(v4[9]);
  sub_100006034(v32);
  return v4;
}

    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }

  if (v9 < 0xFFFFFFFF)
  {
    swift_release(*(void *)(v7 + 8));
    goto LABEL_7;
  }

  unint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  swift_retain(v10);
  swift_release(v11);
LABEL_8:
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }

  if (v9 < 0xFFFFFFFF)
  {
    swift_release(*(void *)(v7 + 8));
    goto LABEL_7;
  }

  unint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  swift_release(v11);
LABEL_8:
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

  Swift::Int result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, a1, a2, a5, a6, a7, a8, 0);
  __break(1u);
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  if (v12 == (_DWORD)a4)
  {
    *(void *)a6 = 0LL;
    *(void *)(a6 + 8) = a5;
    *(_BYTE *)(a6 + 16) = 1;
  }

  else
  {
    uint64_t v13 = sub_1000D41E0(v12, v11);
    if (v14 == 1
      || (unint64_t v15 = (uint64_t)v13, v16 = v14,
                              unint64_t v17 = sub_1000D406C((uint64_t)v13, v14),
                              uint64_t v19 = v18,
                              sub_10007285C(v15, v16),
                              !v19))
    {
      swift_bridgeObjectRelease(0LL);
      uint64_t v19 = (void *)0xE700000000000000LL;
      unint64_t v17 = 0x6E776F6E6B6E75LL;
    }

    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    strcpy((char *)v28, "Binary is for ");
    HIBYTE(v28[1]) = -18;
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v21._object = (void *)0x800000010012C860LL;
    v21._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v21);
    v22._countAndFlagsBits = sub_1000D409C(a2, a3, a4);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    int64_t v24 = v28[1];
    uint64_t v25 = sub_100012624();
    unint64_t v26 = swift_allocError(&type metadata for KMError, v25, 0LL, 0LL);
    *(void *)int64_t v27 = v28[0];
    *(void *)(v27 + 8) = v24;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(void *)(v27 + 64) = 0LL;
    *(_BYTE *)(v27 + 72) = 16;
    return swift_willThrow(v26);
  }

  return result;
}

unsigned __int8 *sub_100072050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  __n128 v4 = swift_bridgeObjectRetain(a2);
  uint64_t v5 = String.init<A>(_:)( &v15,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v4);
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_100014314(v5, v6);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v8);
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }

unsigned __int8 *sub_100072134(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v14 = v9 * a3;
              uint64_t v9 = v14 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }

      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }

      if (result)
      {
        uint64_t v26 = 0LL;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0LL;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v29 = v26 * a3;
          uint64_t v26 = v29 + (v27 + v28);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }

  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0LL;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }

      else
      {
        char v21 = -55;
      }
    }

    else
    {
      char v21 = -48;
    }

    uint64_t v22 = v9 * a3;
    uint64_t v9 = v22 + (v20 + v21);
    ++v19;
    --v15;
  }

  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000723B0( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  uint64_t result = sub_1000728CC((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t sub_100072480()
{
  if (qword_100162110 != -1) {
LABEL_21:
  }
    swift_once(&qword_100162110, sub_10006B278);
  uint64_t v0 = qword_1001753B0;
  swift_bridgeObjectRetain(qword_1001753B0);
  uint64_t v1 = (void *)sub_10006ADD8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v2 = *(void *)(v0 + 16);
  if (!v2)
  {
LABEL_18:
    swift_bridgeObjectRelease(v0);
    return (uint64_t)v1;
  }

  swift_bridgeObjectRetain(v0);
  uint64_t v3 = 0LL;
  while (1)
  {
    __int128 v21 = *(_OWORD *)(v0 + 16 * v3 + 32);
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v0 + 16 * v3 + 40) + 8LL))();
    uint64_t v6 = v5;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    unint64_t v9 = sub_100006114(v4, v6);
    uint64_t v10 = v1[2];
    BOOL v11 = (v8 & 1) == 0;
    uint64_t v12 = v10 + v11;
    if (__OFADD__(v10, v11))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    char v13 = v8;
    if (v1[3] < v12) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v8 & 1) != 0) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_100071B70();
      if ((v13 & 1) != 0)
      {
LABEL_4:
        *(_OWORD *)(v1[7] + 16 * v9) = v21;
        goto LABEL_5;
      }
    }

void *sub_100072694(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

unint64_t sub_1000726C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001484A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100072710()
{
  unint64_t result = qword_100159830;
  if (!qword_100159830)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113578, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_100159830);
  }

  return result;
}

void type metadata accessor for CFData(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

unint64_t sub_10007277C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    unint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v5, a2, a3);
    if ((v6 & 1) != 0) {
      unint64_t result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_100072818()
{
  unint64_t result = qword_100159840;
  if (!qword_100159840)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100159840);
  }

  return result;
}

uint64_t sub_10007285C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100072870(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100072884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000728CC( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t result = sub_1000147D0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)(15LL, a2, a4, a5);
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_1000147D0(v10, a4, a5);
    unint64_t v10 = result;
  }

LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_100072CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    uint64_t v12 = sub_100014314(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v23 = v17;
    uint64_t v8 = swift_bridgeObjectRelease(v11);
    uint64_t v11 = v23;
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v11;
    if ((v11 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v21 = v12;
    uint64_t v22 = v11 & 0xFFFFFFFFFFFFFFLL;
    v20[0] = a2;
    v20[1] = a3;
    static String.Encoding.utf8.getter(v8);
    unint64_t v18 = sub_10002657C();
    StringProtocol.lengthOfBytes(using:)(v10, &type metadata for String, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    mach_port_t v15 = sub_1000D7FF4();
    unint64_t v16 = (char *)&v21;
    return IOCatalogueModuleLoaded(v15, v16);
  }

  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v12 & 0x1000000000000000LL) != 0)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(v12, v11);
    uint64_t v13 = v8;
    if (!v8) {
      return 4LL;
    }
  }

  uint64_t v21 = a2;
  uint64_t v22 = a3;
  static String.Encoding.utf8.getter(v8);
  unint64_t v14 = sub_10002657C();
  StringProtocol.lengthOfBytes(using:)(v10, &type metadata for String, v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  mach_port_t v15 = sub_1000D7FF4();
  unint64_t v16 = (char *)v13;
  return IOCatalogueModuleLoaded(v15, v16);
}

unint64_t sub_100072E6C()
{
  unint64_t result = qword_100159880;
  if (!qword_100159880)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111DD0, &type metadata for KernelRequests.GetLoaded.LoadedOption);
    atomic_store(result, (unint64_t *)&qword_100159880);
  }

  return result;
}

uint64_t sub_100072EB0()
{
  return sub_100012B78(&qword_100159888, &qword_100159890, (uint64_t)&protocol conformance descriptor for [A]);
}

ValueMetadata *type metadata accessor for KernelRequests()
{
  return &type metadata for KernelRequests;
}

uint64_t *initializeBufferWithCopyOfBuffer for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

void *initializeWithTake for VariantKind(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t *assignWithTake for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for KernelRequests.GetRequests()
{
  return &type metadata for KernelRequests.GetRequests;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded()
{
  return &type metadata for KernelRequests.GetLoaded;
}

uint64_t storeEnumTagSinglePayload for KernelRequests.GetLoaded.LoadedOption( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100073000 + 4 * byte_100111DA3[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100073034 + 4 * byte_100111D9E[v4]))();
}

uint64_t sub_100073034(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007303C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100073044LL);
  }
  return result;
}

uint64_t sub_100073050(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100073058LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10007305C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100073064(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded.LoadedOption()
{
  return &type metadata for KernelRequests.GetLoaded.LoadedOption;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadExtension()
{
  return &type metadata for KernelRequests.LoadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadExtension()
{
  return &type metadata for KernelRequests.UnloadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.SendResource()
{
  return &type metadata for KernelRequests.SendResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadFileset()
{
  return &type metadata for KernelRequests.LoadFileset;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadCodeless()
{
  return &type metadata for KernelRequests.LoadCodeless;
}

ValueMetadata *type metadata accessor for KernelRequests.DextLaunch()
{
  return &type metadata for KernelRequests.DextLaunch;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestResource()
{
  return &type metadata for KernelRequests.RequestResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadRequest()
{
  return &type metadata for KernelRequests.LoadRequest;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadNotification()
{
  return &type metadata for KernelRequests.LoadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadNotification()
{
  return &type metadata for KernelRequests.UnloadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestExit()
{
  return &type metadata for KernelRequests.RequestExit;
}

ValueMetadata *type metadata accessor for KernelRequests.MissingAuxKCBundles()
{
  return &type metadata for KernelRequests.MissingAuxKCBundles;
}

ValueMetadata *type metadata accessor for KernelRequests.AuxKCBundleAvailable()
{
  return &type metadata for KernelRequests.AuxKCBundleAvailable;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDaemonActive()
{
  return &type metadata for KernelRequests.GetDaemonActive;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDrivers()
{
  return &type metadata for KernelRequests.GetDrivers;
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.DextUpdateNotification()
{
  return &type metadata for KernelRequests.DextUpdateNotification;
}

uint64_t sub_100073230(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelLogMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelLogMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KernelLogMessage()
{
  return &type metadata for KernelLogMessage;
}

ValueMetadata *type metadata accessor for IOTerminationAction()
{
  return &type metadata for IOTerminationAction;
}

uint64_t type metadata accessor for RealKernelClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd16RealKernelClient);
}

void type metadata accessor for OSLogType(uint64_t a1)
{
}

void sub_1000733C0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

unint64_t sub_100073404()
{
  unint64_t result = qword_100159C90;
  if (!qword_100159C90)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100159C90);
  }

  return result;
}

uint64_t sub_100073460(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100073470(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100073478@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  uint64_t v5 = type metadata accessor for Optional(0LL, *(void *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a1, v4, v5);
}

uint64_t sub_1000734E8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  swift_beginAccess(v4, v7, 33LL, 0LL);
  uint64_t v5 = type metadata accessor for Optional(0LL, *(void *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
  return swift_endAccess(v7);
}

uint64_t (*sub_100073560(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000735A4()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 104LL));
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_1000735EC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 104LL));
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_unknownObjectRelease(v4);
}

uint64_t (*sub_10007363C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100073680(int a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000736BC(a1);
  return v3;
}

uint64_t sub_1000736BC(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 56LL))( &v2[*(void *)(v4 + 96)],  1LL,  1LL);
  *(void *)&v2[*(void *)(*(void *)v2 + 104LL)] = 0LL;
  if (a1)
  {
    *(_DWORD *)&v2[*(void *)(*(void *)v2 + 120LL)] = a1;
    sub_100006094(0LL, (unint64_t *)&qword_100159CB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    static DispatchQoS.userInitiated.getter();
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v14 = sub_100012860( (unint64_t *)&qword_100159CB8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v15 = sub_100005FB4(&qword_100159CC0);
    uint64_t v16 = sub_1000778A4((unint64_t *)&qword_100159CC8, &qword_100159CC0);
    dispatch thunk of SetAlgebra.init<A>(_:)(v10, &v19, v15, v16, v8, v14);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v18);
    *(void *)&v2[*(void *)(*(void *)v2 + 112LL)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002CLL,  0x80000001001242E0LL,  v13,  v10,  v7,  0LL);
    return (uint64_t)v2;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000019LL,  0x8000000100124330LL,  "driverkitd/DaemonSupport.swift",  30LL,  2LL,  77LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10007392C()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___OS_dispatch_source);
    uint64_t v4 = swift_dynamicCastObjCClassUnconditional(v2, v3, 0LL, 0LL, 0LL);
    dispatch_mig_server(v4, 36LL, sub_100073AF0);
    return swift_unknownObjectRelease(v2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000739A0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.info.getter(a1);
  uint64_t v5 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = (void *)static OS_os_log.default.getter(v5);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Received MIG message", 20LL, 2LL, _swiftEmptyArrayStorage);

  uint64_t v7 = sub_100004F6C(a1, a2);
  int v8 = v7;
  if (!(_DWORD)v7)
  {
    unsigned int v9 = a1[5] - 64;
    uint64_t v10 = static os_log_type_t.error.getter(v7);
    uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
    if (v9 > 0xC) {
      os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  v11,  "Unknown MIG message received.",  29LL,  2LL,  _swiftEmptyArrayStorage);
    }
    else {
      os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  v11,  "Failed to process MIG message.",  30LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

  sub_100006094(0LL, (unint64_t *)&unk_100159E90, &OBJC_CLASS___NSNumber_ptr);
  Class isa = NSNumber.init(BOOLeanLiteral:)(v8 != 0).super.super.isa;
  uint64_t v13 = Int32.init(truncating:)();

  return v13;
}

void sub_100073AF4()
{
  uint64_t v1 = v0;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100006094(0LL, &qword_100159CD0, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v9 = static OS_dispatch_source.makeMachReceiveSource(port:queue:)( *(unsigned int *)(v1 + *(void *)(*(void *)v1 + 120LL)),  *(void *)(v1 + *(void *)(*(void *)v1 + 112LL)));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 160LL))(v9);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 152LL);
  uint64_t v12 = v11(v10);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t ObjectType = swift_getObjectType(v12);
    unsigned __int8 v32 = sub_100073DC8;
    uint64_t v33 = v1;
    aBlock = _NSConcreteStackBlock;
    uint64_t v29 = 1107296256LL;
    uint64_t v30 = sub_10000B750;
    unsigned __int8 v31 = &unk_100149540;
    uint64_t v15 = _Block_copy(&aBlock);
    uint64_t v16 = swift_retain(v1);
    static DispatchQoS.unspecified.getter(v16);
    sub_100073DEC(v4);
    OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v8, v4, v15, ObjectType);
    _Block_release(v15);
    swift_unknownObjectRelease(v13);
    uint64_t v17 = *(void (**)(void *, uint64_t))(v2 + 8);
    v17(v4, v27);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = v5;
    v18(v8, v5);
    uint64_t v19 = swift_release(v33);
    uint64_t v20 = v11(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = swift_getObjectType(v20);
      swift_retain(v1);
      unsigned __int8 v32 = sub_10000C778;
      uint64_t v33 = v1;
      aBlock = _NSConcreteStackBlock;
      uint64_t v29 = 1107296256LL;
      uint64_t v30 = sub_10000B750;
      unsigned __int8 v31 = &unk_100149568;
      uint64_t v23 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter(v23);
      sub_100073DEC(v4);
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v8, v4, v23, v22);
      _Block_release(v23);
      swift_unknownObjectRelease(v21);
      v17(v4, v27);
      v18(v8, v26);
      swift_release(v33);
      unsigned __int8 v32 = sub_100073E98;
      uint64_t v33 = v1;
      aBlock = _NSConcreteStackBlock;
      uint64_t v29 = 1107296256LL;
      uint64_t v30 = sub_10000B750;
      unsigned __int8 v31 = &unk_100149590;
      uint64_t v24 = _Block_copy(&aBlock);
      uint64_t v25 = v33;
      swift_retain(v1);
      swift_release(v25);
      sub_100004D44(v24);
      _Block_release(v24);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100073DC8()
{
  return mach_port_mod_refs(mach_task_self_, *(_DWORD *)(v0 + *(void *)(*(void *)v0 + 120LL)), 1u, -1);
}

void *sub_100073DEC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v3 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_100159E80);
  uint64_t v5 = sub_1000778A4((unint64_t *)&qword_10015ABB0, (uint64_t *)&unk_100159E80);
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, &v7, v4, v5, v2, v3);
}

uint64_t sub_100073E98()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t sub_100073EA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = type metadata accessor for Optional(0LL, v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - v5, a1, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0LL, 1LL, v3);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v1 + 136LL))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 192LL))(v8);
}

uint64_t sub_100073F5C()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  if (result)
  {
    uint64_t v2 = result;
    swift_getObjectType();
    OS_dispatch_source.activate()();
    return swift_unknownObjectRelease(v2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100073F98()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for Optional(0LL, v2);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v12 - v6;
  (*(void (**)(uint64_t))(v1 + 128))(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v7, 1LL, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_6:
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    return sub_100012824((uint64_t)&v12, &qword_100159CD8);
  }

  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_100159CE0);
  if (*((void *)&v13 + 1))
  {
    sub_100005158(&v12, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    sub_100005110(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    return sub_100006034(v15);
  }

  return sub_100012824((uint64_t)&v12, &qword_100159CD8);
}

uint64_t sub_1000740D0()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, *(void *)(*(void *)v0 + 80LL));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 104LL)));

  return v0;
}

uint64_t sub_100074138()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10007415C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t sub_100074184()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))();
}

uint64_t sub_1000741AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)(swift_isaMask & *v1);
  uint64_t v4 = (char *)v1 + v3[12];
  swift_beginAccess(v4, v8, 0LL, 0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3[11],  v3[10],  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t v6 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v4, v6);
}

uint64_t sub_100074244(uint64_t a1)
{
  uint64_t v3 = (void *)(swift_isaMask & *v1);
  uint64_t v4 = (char *)v1 + v3[12];
  swift_beginAccess(v4, v8, 33LL, 0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3[11],  v3[10],  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t v6 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
  return swift_endAccess(v8);
}

uint64_t (*sub_1000742E4(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100074338(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)((swift_isaMask & *v1) + 0x58LL),  *(void *)((swift_isaMask & *v1) + 0x50LL),  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t v4 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0LL, 1LL, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *))((swift_isaMask & *v1) + 0x88LL))(v6);
}

id sub_100074414()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static os_signpost_type_t.event.getter(v3);
  id v7 = (id)*sub_1000D30EC();
  static OSSignpostID.exclusive.getter(v7);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, "activate()", 10LL, 2LL, v5);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return [*(id *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68)) resume];
}

void *sub_1000744FC(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100074544(a1, a2, a3);
}

void *sub_100074544(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  unsigned __int8 v40 = a1;
  uint64_t v4 = (void *)(swift_isaMask & *v3);
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v37);
  uint64_t v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  __int128 v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = v4[11];
  uint64_t v15 = (char *)v3 + v4[12];
  uint64_t v16 = v4[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v14,  v16,  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v15,  1LL,  1LL,  AssociatedTypeWitness);
  uint64_t v36 = sub_100006094(0LL, (unint64_t *)&qword_100159CB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v10);
  uint64_t v18 = v3;
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100012860( (unint64_t *)&qword_100159CB8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100005FB4(&qword_100159CC0);
  uint64_t v21 = sub_1000778A4((unint64_t *)&qword_100159CC8, &qword_100159CC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v6, &v42, v20, v21, v37, v19);
  *(void *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x70LL)) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( v38,  v39,  v9,  v6,  v13,  0LL);
  uint64_t v22 = v40;
  *(void *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x68LL)) = v40;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  id v24 = v22;
  uint64_t v25 = (void *)v23(v16, v14);
  id v26 = [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:v25];

  *(void *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x78LL)) = v26;
  char v28 = (objc_class *)type metadata accessor for NSXPCRequestSource(0LL, v16, v14, v27);
  v41.receiver = v18;
  v41.super_class = v28;
  uint64_t v29 = objc_msgSendSuper2(&v41, "init");
  uint64_t v30 = *(void **)((char *)v29 + *(void *)((swift_isaMask & *v29) + 0x68LL));
  unsigned __int8 v31 = v29;
  [v30 setDelegate:v31];
  unsigned __int8 v32 = *(void **)((char *)v31 + *(void *)((swift_isaMask & *v31) + 0x70LL));
  id v33 = v30;
  id v34 = v32;
  [v33 _setQueue:v34];

  return v31;
}

uint64_t type metadata accessor for NSXPCRequestSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSXPCRequestSource);
}

uint64_t sub_1000748A0(uint64_t a1, void *a2)
{
  return sub_1000769B4(a2);
}

uint64_t sub_1000748A8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = sub_1000769B4(v7);

  return v9 & 1;
}

void sub_100074904()
{
}

id sub_100074920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (objc_class *)type metadata accessor for NSXPCRequestSource( 0LL,  *(void *)((swift_isaMask & *v4) + 0x50LL),  *(void *)((swift_isaMask & *v4) + 0x58LL),  a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10007496C(void *a1)
{
  uint64_t v2 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x60LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)((swift_isaMask & *a1) + 0x58LL),  *(void *)((swift_isaMask & *a1) + 0x50LL),  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t v4 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
}

uint64_t sub_100074A28()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98LL))();
}

uint64_t sub_100074A60()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xA0LL))();
}

uint64_t sub_100074A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  objc_super v7 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v24 = a1;
  id v8 = (void *)v7(a1, a2);
  uint64_t v9 = *((void *)sub_100090188() + 1);
  swift_bridgeObjectRetain(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  id v11 = [v8 valueForEntitlement:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(v26, v11);
    swift_unknownObjectRelease(v11);
  }

  else
  {
    memset(v26, 0, sizeof(v26));
  }

  sub_100077268((uint64_t)v26, (uint64_t)v27);
  if (!v28)
  {
    uint64_t result = sub_100012824((uint64_t)v27, &qword_100157FF8);
LABEL_9:
    uint64_t v13 = static os_log_type_t.error.getter(result);
    uint64_t v14 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_10010F110;
    uint64_t v16 = (void *)v7(v24, a2);
    unsigned int v17 = [v16 processIdentifier];

    *(void *)(v15 + 56) = &type metadata for Int32;
    *(void *)(v15 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v15 + 32) = v17;
    uint64_t v18 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v19 = (void *)static OS_os_log.default.getter(v18);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v19, "Attempt by unentitled pid %d to access interface", v24);
    swift_bridgeObjectRelease(v15);

    v27[0] = 1;
    unint64_t v20 = sub_10006A420((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = sub_100012860( (unint64_t *)&qword_100159CF0,  (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError,  (uint64_t)&protocol conformance descriptor for POSIXError);
    uint64_t v22 = _BridgedStoredNSError.init(_:userInfo:)(v27, v20, v4, v21);
    POSIXError._nsError.getter(v22);
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v4);
    return swift_willThrow(v23);
  }

  uint64_t result = swift_dynamicCast(&v29, v27, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  if (!(_DWORD)result || (v29 & 1) == 0) {
    goto LABEL_9;
  }
  return result;
}

void *sub_100074D44@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005110(a1, v6);
  sub_100071818(v6, v7);
  uint64_t v8 = __src[3];
  uint64_t v9 = __src[4];
  sub_100005110(__src, __src[3]);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v8, v9);
  uint64_t v12 = v11;
  sub_100006034(__src);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  v152 = a1;
  sub_100005110(a1, v13);
  sub_100071818(v13, v14);
  uint64_t v15 = __src[3];
  uint64_t v16 = __src[4];
  sub_100005110(__src, __src[3]);
  unsigned int v17 = (uint64_t *)sub_10008FACC();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v16 + 152);
  __n128 v21 = swift_bridgeObjectRetain(v19);
  uint64_t v22 = v20(v18, v19, v15, v16, v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(v19);
  sub_100006034(__src);
  uint64_t v25 = sub_100090450(v22, v24, v10, v12);
  unint64_t v26 = (unint64_t)v25;
  if (v25 == (void *)5) {
    uint64_t v27 = 0LL;
  }
  else {
    uint64_t v27 = v25;
  }
  uint64_t KeyPath = swift_getKeyPath(&unk_100112510);
  uint64_t v144 = sub_100075C98(v27, KeyPath, (__int128 *)a2, v152);
  uint64_t v147 = v29;
  swift_release(KeyPath);
  uint64_t v30 = swift_getKeyPath(&unk_100112530);
  sub_100037B00((unint64_t)v27);
  uint64_t v143 = sub_100075C98(v27, v30, (__int128 *)a2, v152);
  uint64_t v146 = v31;
  sub_100039418(v26);
  swift_release(v30);
  uint64_t v32 = v152[3];
  uint64_t v33 = v152[4];
  sub_100005110(v152, v32);
  sub_100071818(v32, v33);
  uint64_t v34 = v164;
  uint64_t v35 = v165;
  sub_100005110(v163, v164);
  LOBYTE(v32) = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  sub_100005F70((uint64_t)v152, (uint64_t)v160);
  unint64_t v148 = v26;
  if ((v32 & 1) != 0)
  {
    sub_100006034(v160);
    sub_100006034(v163);
  }

  else
  {
    uint64_t v36 = v161;
    uint64_t v37 = v162;
    sub_100005110(v160, v161);
    sub_100071818(v36, v37);
    uint64_t v38 = __src[3];
    uint64_t v39 = __src[4];
    sub_100005110(__src, __src[3]);
    LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
    sub_100006034(__src);
    sub_100006034(v160);
    sub_100006034(v163);
    if ((v36 & 1) == 0)
    {
      uint64_t v47 = swift_getKeyPath(&unk_100112550);
      sub_100037B00((unint64_t)v27);
      uint64_t v141 = sub_100075C98(v27, v47, (__int128 *)a2, v152);
      uint64_t v142 = v48;
      sub_100039418(v26);
      swift_release(v47);
      goto LABEL_12;
    }
  }

  uint64_t v40 = v152[3];
  uint64_t v41 = v152[4];
  sub_100005110(v152, v40);
  sub_100071818(v40, v41);
  uint64_t v42 = __src[3];
  uint64_t v43 = __src[4];
  sub_100005110(__src, __src[3]);
  LOBYTE(v40) = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 32))(v42, v43);
  sub_100006034(__src);
  if ((v40 & 1) != 0) {
    char v44 = &unk_100112590;
  }
  else {
    char v44 = &unk_100112570;
  }
  uint64_t v45 = swift_getKeyPath(v44);
  sub_100037B00((unint64_t)v27);
  uint64_t v141 = sub_100075C98(v27, v45, (__int128 *)a2, v152);
  uint64_t v142 = v46;
  swift_release(v45);
  sub_100039418(v26);
LABEL_12:
  uint64_t v150 = sub_100005FB4(&qword_100157EF8);
  uint64_t v49 = swift_allocObject(v150, 48LL, 7LL);
  *(_OWORD *)(v49 + 16) = xmmword_100112500;
  *(_DWORD *)(v49 + 32) = *sub_1000A4644();
  *(_DWORD *)(v49 + 36) = *sub_1000A4784();
  *(_DWORD *)(v49 + 40) = *(_DWORD *)sub_1000A47D4();
  *(_DWORD *)(v49 + 44) = *sub_1000A4694();
  __src[0] = v49;
  unint64_t v50 = sub_100012B34();
  uint64_t v51 = sub_100005FB4(&qword_100157F00);
  uint64_t v52 = sub_1000778A4(&qword_100159D10, &qword_100157F00);
  dispatch thunk of SetAlgebra.init<A>(_:)( v170,  __src,  v51,  v52,  &type metadata for ExtensionManager.Settings.Flags,  v50);
  int v53 = v170[0];
  LODWORD(v170[0]) = a3;
  sub_1000772B0();
  dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
  unint64_t v54 = sub_1000772F4();
  dispatch thunk of OptionSet.init(rawValue:)(v171, &type metadata for ExtensionManager.Settings.Flags, v54);
  LODWORD(v171[0]) = v53;
  dispatch thunk of SetAlgebra.formUnion(_:)(v171, &type metadata for ExtensionManager.Settings.Flags, v50);
  int v159 = __src[0];
  uint64_t v55 = v152[3];
  uint64_t v56 = v152[4];
  sub_100005110(v152, v55);
  sub_100026D98(v55, v56);
  uint64_t v57 = __src[3];
  uint64_t v58 = __src[4];
  sub_100005110(__src, __src[3]);
  LOBYTE(v55) = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 24))(v57, v58);
  sub_100006034(__src);
  if ((v55 & 1) == 0)
  {
    uint64_t v59 = swift_allocObject(v150, 40LL, 7LL);
    *(_OWORD *)(v59 + 16) = xmmword_10010F440;
    *(_DWORD *)(v59 + 32) = *(_DWORD *)sub_1000A44B4();
    *(_DWORD *)(v59 + 36) = *(_DWORD *)sub_1000A4554();
    __src[0] = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)( v170,  __src,  v51,  v52,  &type metadata for ExtensionManager.Settings.Flags,  v50);
    LODWORD(__src[0]) = v170[0];
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(v156, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(v170[0]) = LODWORD(v156[0]) | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(v170, &type metadata for ExtensionManager.Settings.Flags, v54);
  }

  v145 = v27;
  uint64_t v60 = v152[3];
  uint64_t v61 = v152[4];
  sub_100005110(v152, v60);
  sub_100071818(v60, v61);
  uint64_t v62 = __src[3];
  uint64_t v63 = __src[4];
  sub_100005110(__src, __src[3]);
  LOBYTE(v60) = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 48))(v62, v63);
  sub_100006034(__src);
  if ((v60 & 1) != 0)
  {
    uint64_t v64 = swift_allocObject(v150, 44LL, 7LL);
    *(_OWORD *)(v64 + 16) = xmmword_100111D70;
    *(_DWORD *)(v64 + 32) = *(_DWORD *)sub_1000A44B4();
    *(_DWORD *)(v64 + 36) = *(_DWORD *)sub_1000A45A4();
    *(_DWORD *)(v64 + 40) = *(_DWORD *)sub_1000A4554();
    __src[0] = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)( v170,  __src,  v51,  v52,  &type metadata for ExtensionManager.Settings.Flags,  v50);
    LODWORD(__src[0]) = v170[0];
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(v156, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(v170[0]) = LODWORD(v156[0]) | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(v170, &type metadata for ExtensionManager.Settings.Flags, v54);
  }

  uint64_t v65 = v152[3];
  uint64_t v66 = v152[4];
  sub_100005110(v152, v65);
  sub_100071818(v65, v66);
  uint64_t v67 = v157;
  uint64_t v68 = v158;
  sub_100005110(v156, v157);
  LOBYTE(v65) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 16))(v67, v68);
  sub_100005F70((uint64_t)v152, (uint64_t)v153);
  if ((v65 & 1) != 0)
  {
    sub_100006034(v153);
    sub_100006034(v156);
LABEL_19:
    uint64_t v73 = swift_allocObject(v150, 44LL, 7LL);
    *(_OWORD *)(v73 + 16) = xmmword_100111D70;
    *(_DWORD *)(v73 + 32) = *(_DWORD *)sub_1000A45A4();
    *(_DWORD *)(v73 + 36) = *(_DWORD *)sub_1000A4554();
    *(_DWORD *)(v73 + 40) = *(_DWORD *)sub_1000A4974();
    __src[0] = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)( v170,  __src,  v51,  v52,  &type metadata for ExtensionManager.Settings.Flags,  v50);
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(&v168, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(__src[0]) = v168 | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(__src, &type metadata for ExtensionManager.Settings.Flags, v54);
    goto LABEL_20;
  }

  uint64_t v69 = v154;
  uint64_t v70 = v155;
  sub_100005110(v153, v154);
  sub_100071818(v69, v70);
  uint64_t v71 = __src[3];
  uint64_t v72 = __src[4];
  sub_100005110(__src, __src[3]);
  LOBYTE(v69) = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);
  sub_100006034(__src);
  sub_100006034(v153);
  sub_100006034(v156);
  if ((v69 & 1) != 0) {
    goto LABEL_19;
  }
LABEL_20:
  if ((sub_1000D8050() & 1) != 0)
  {
    uint64_t v74 = swift_allocObject(v150, 36LL, 7LL);
    *(_OWORD *)(v74 + 16) = xmmword_10010F110;
    *(_DWORD *)(v74 + 32) = *(_DWORD *)sub_1000A4A78();
    __src[0] = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)( v170,  __src,  v51,  v52,  &type metadata for ExtensionManager.Settings.Flags,  v50);
    LODWORD(v171[0]) = v159;
    dispatch thunk of SetAlgebra.intersection(_:)(__src, v170, &type metadata for ExtensionManager.Settings.Flags, v50);
    if ((dispatch thunk of SetAlgebra.isEmpty.getter(&type metadata for ExtensionManager.Settings.Flags, v50) & 1) == 0) {
      dispatch thunk of SetAlgebra.subtract(_:)(v170, &type metadata for ExtensionManager.Settings.Flags, v50);
    }
  }

  v75 = *(void **)(a2 + 112);
  v169 = v75;
  __int128 v76 = *(_OWORD *)(a2 + 144);
  __int128 v167 = *(_OWORD *)(a2 + 176);
  __int128 v168 = v76;
  int64_t v77 = v75[2];
  int64_t v78 = v77 + 2;
  if (__OFADD__(v77, 2LL))
  {
    __break(1u);
LABEL_46:
    v75 = sub_10000C82C((void *)(v54 > 1), v77, 1, v75);
    goto LABEL_31;
  }

  sub_100066F7C((uint64_t)&v168);
  sub_100066F7C((uint64_t)&v167);
  sub_10005C82C(&v169);
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(v75);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v78 > v75[3] >> 1)
  {
    if (v77 <= v78) {
      int64_t v80 = v77 + 2;
    }
    else {
      int64_t v80 = v77;
    }
    v75 = sub_10000C82C(isUniquelyReferenced_nonNull_native, v80, 1, v75);
  }

  int64_t v78 = v75[2];
  unint64_t v54 = v75[3];
  int64_t v77 = v78 + 1;
  swift_bridgeObjectRetain(*((void *)&v168 + 1));
  if (v78 >= v54 >> 1) {
    goto LABEL_46;
  }
LABEL_31:
  uint64_t v81 = *((void *)&v167 + 1);
  v75[2] = v77;
  *(_OWORD *)&v75[2 * v78 + 4] = v168;
  unint64_t v82 = v75[3];
  int64_t v83 = v78 + 2;
  swift_bridgeObjectRetain(v81);
  v75[2] = v83;
  *(_OWORD *)&v75[2 * v77 + 4] = v167;
  sub_100077338((uint64_t)&v167);
  sub_100077338((uint64_t)&v168);
  uint64_t v84 = v152[3];
  uint64_t v85 = v152[4];
  sub_100005110(v152, v84);
  sub_100071818(v84, v85);
  uint64_t v86 = __src[3];
  uint64_t v87 = __src[4];
  sub_100005110(__src, __src[3]);
  uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 184))(v86, v87);
  if (v89 == 1)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    sub_100006034(__src);
LABEL_49:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000030LL,  0x80000001001243A0LL,  "driverkitd/DaemonSupport.swift",  30LL,  2LL,  362LL,  0);
LABEL_53:
    __break(1u);
    return result;
  }

  uint64_t v90 = v88;
  uint64_t v91 = v89;
  uint64_t v92 = sub_1000D406C(v88, v89);
  uint64_t v94 = v93;
  sub_10007285C(v90, v91);
  sub_100006034(__src);
  if (!v94)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    goto LABEL_49;
  }

  uint64_t v95 = v152[3];
  uint64_t v96 = v152[4];
  sub_100005110(v152, v95);
  sub_100071818(v95, v96);
  uint64_t v97 = __src[3];
  uint64_t v98 = __src[4];
  sub_100005110(__src, __src[3]);
  uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 192))(v97, v98);
  if (v100 == 1)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    sub_100006034(__src);
LABEL_52:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001001243E0LL,  "driverkitd/DaemonSupport.swift",  30LL,  2LL,  364LL,  0);
    goto LABEL_53;
  }

  uint64_t v101 = v99;
  uint64_t v102 = v100;
  uint64_t v103 = sub_1000D406C(v99, v100);
  uint64_t v105 = v104;
  sub_10007285C(v101, v102);
  sub_100006034(__src);
  if (!v105)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    goto LABEL_52;
  }

  uint64_t v139 = v103;
  uint64_t v140 = v94;
  uint64_t v138 = v105;
  if (v92 == 0x34365F363878LL && v94 == 0xE600000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, 0x34365F363878LL, 0xE600000000000000LL, 0LL) & 1) != 0)
  {
    v106 = sub_100026E18();
    uint64_t v107 = *v106;
    uint64_t v108 = *(void *)(*v106 + 16);
    if (v108)
    {
      swift_bridgeObjectRetain(*v106);
      v109 = (uint64_t *)(v107 + 40);
      do
      {
        uint64_t v110 = *(v109 - 1);
        uint64_t v111 = *v109;
        swift_bridgeObjectRetain(*v109);
        sub_100075F38(__src, v110, v111);
        swift_bridgeObjectRelease(__src[1]);
        v109 += 2;
        --v108;
      }

      while (v108);
      swift_bridgeObjectRelease(v107);
    }
  }

  uint64_t v112 = v152[3];
  uint64_t v113 = v152[4];
  sub_100005110(v152, v112);
  sub_10010AAE0(v112, v113);
  uint64_t v114 = __src[3];
  uint64_t v115 = __src[4];
  sub_100005110(__src, __src[3]);
  uint64_t v116 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v115 + 8))( 47LL,  0xE100000000000000LL,  v114,  v115);
  uint64_t v134 = v117;
  uint64_t v135 = v116;
  sub_100006034(__src);
  char v132 = sub_1000DF6EC((uint64_t)v152);
  uint64_t v118 = *(void *)(a2 + 72);
  uint64_t v136 = *(void *)a2;
  uint64_t v137 = *(void *)(a2 + 64);
  uint64_t v133 = v118;
  uint64_t v119 = *(void *)(a2 + 136);
  uint64_t v120 = *(void *)(a2 + 240);
  memset(v170, 0, sizeof(v170));
  memset(v171, 0, 40);
  LODWORD(v115) = v159;
  sub_100037AF0(v148);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v119);
  sub_100012A18((void *)a2);
  swift_bridgeObjectRetain(v120);
  uint64_t v121 = sub_1000A5120();
  uint64_t v123 = v122;
  swift_bridgeObjectRetain(v146);
  *(void *)&__int128 v131 = _swiftEmptyArrayStorage;
  *((void *)&v131 + 1) = _swiftEmptyArrayStorage;
  *(void *)&__int128 v130 = 47LL;
  *((void *)&v130 + 1) = 0xE100000000000000LL;
  *(void *)&__int128 v129 = v138;
  *((void *)&v129 + 1) = v145;
  *(void *)&__int128 v128 = v140;
  *((void *)&v128 + 1) = v139;
  *(void *)&__int128 v127 = v119;
  *((void *)&v127 + 1) = v92;
  *(void *)&__int128 v126 = &_swiftEmptySetSingleton;
  *((void *)&v126 + 1) = &_swiftEmptySetSingleton;
  *(void *)&__int128 v125 = v133;
  *((void *)&v125 + 1) = v75;
  sub_1000A512C( v136,  v144,  v147,  v141,  v142,  v143,  v146,  v137,  (uint64_t)__src,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v135,  v134,  a2,  v120,  (uint64_t)v170,  v121,  v123,  (uint64_t)v171,  v115,  v132);
  sub_100039418(v148);
  sub_100010E6C((void *)a2);
  swift_bridgeObjectRelease(v146);
  swift_bridgeObjectRelease(v142);
  swift_bridgeObjectRelease(v147);
  sub_100006034(v152);
  return memcpy(a4, __src, 0x24DuLL);
}

uint64_t sub_100075C98(void *a1, uint64_t a2, __int128 *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v43 - v12;
  __int128 v14 = a3[13];
  __int128 v61 = a3[12];
  __int128 v62 = v14;
  __int128 v63 = a3[14];
  uint64_t v64 = *((void *)a3 + 30);
  __int128 v15 = a3[9];
  __int128 v57 = a3[8];
  __int128 v58 = v15;
  __int128 v16 = a3[11];
  __int128 v59 = a3[10];
  __int128 v60 = v16;
  __int128 v17 = a3[5];
  __int128 v53 = a3[4];
  __int128 v54 = v17;
  __int128 v18 = a3[7];
  __int128 v55 = a3[6];
  __int128 v56 = v18;
  __int128 v19 = a3[1];
  __int128 v49 = *a3;
  __int128 v50 = v19;
  __int128 v20 = a3[3];
  __int128 v51 = a3[2];
  __int128 v52 = v20;
  sub_100012A18(a3);
  swift_getAtKeyPath(&v49, a2);
  sub_100010E6C(a3);
  uint64_t v21 = v47;
  uint64_t v22 = v48;
  if ((unint64_t)a1 >= 5)
  {
    uint64_t v44 = a2;
    unint64_t v26 = a4;
    unint64_t v27 = a1[2];
    uint64_t v28 = a1[3];
    uint64_t v29 = a1[4];
    unint64_t v45 = v27;
    sub_100037B00(v27);
    swift_bridgeObjectRetain(v29);
    URL.init(fileURLWithPath:)(v21, v22);
    swift_bridgeObjectRelease(v22);
    uint64_t v30 = v28;
    uint64_t v31 = v26;
    URL.appendingPathExtension(_:)(v30, v29);
    swift_bridgeObjectRelease(v29);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    uint64_t v33 = v32(v11, v8);
    uint64_t v25 = URL.path.getter(v33);
    uint64_t v35 = v34;
    v32(v13, v8);
    uint64_t v36 = v31[3];
    uint64_t v37 = v31[4];
    sub_100005110(v31, v36);
    sub_1001073DC(v36, v37);
    uint64_t v38 = *((void *)&v50 + 1);
    uint64_t v39 = v51;
    sub_100005110(&v49, *((uint64_t *)&v50 + 1));
    LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v39 + 136))( v25,  v35,  0LL,  v38,  v39);
    sub_100006034(&v49);
    if ((v36 & 1) != 0)
    {
      unint64_t v40 = v45;
    }

    else
    {
      swift_bridgeObjectRelease(v35);
      unint64_t v41 = v45;
      uint64_t v25 = sub_100075C98(v45, v44, a3, v31);
      unint64_t v40 = v41;
    }

    sub_100039428(v40);
  }

  else
  {
    URL.init(fileURLWithPath:)(v47, v48);
    swift_bridgeObjectRelease(v22);
    sub_1000D46CC((uint64_t)a1, (uint64_t)v13);
    unint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    uint64_t v24 = v23(v11, v8);
    uint64_t v25 = URL.path.getter(v24);
    v23(v13, v8);
  }

  return v25;
}

uint64_t sub_100075F38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      __int128 v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      __int128 v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000763C0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int sub_1000760E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_100159E28);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

void sub_1000763C0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000760E4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_100076558();
      goto LABEL_22;
    }

    sub_100076708(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    unint64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_100076558()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100159E28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_100076708(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_100159E28);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000769B4(void *a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v101 = (void (*)(char *, char *, uint64_t))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v99 = *((void *)v101 - 1);
  __chkstk_darwin(v101);
  uint64_t v100 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = type metadata accessor for OS_dispatch_workloop.Attributes(0LL);
  __chkstk_darwin(v97);
  uint64_t v98 = (uint64_t *)((char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v105 = *(void *)(v3 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v105,  v6,  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t v92 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v8 = __chkstk_darwin(v92);
  uint64_t v94 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v103 = (char *)&v91 - v11;
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v102 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = v13;
  __chkstk_darwin(v12);
  v106 = (char *)&v91 - v14;
  uint64_t v15 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = static os_signpost_type_t.event.getter(v17);
  unint64_t v21 = (void *)*sub_1000D30EC();
  uint64_t v22 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_10010F110;
  id v24 = v21;
  id v25 = [a1 processIdentifier];
  *(void *)(v23 + 56) = &type metadata for Int32;
  *(void *)(v23 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v23 + 32) = (_DWORD)v25;
  static OSSignpostID.exclusive.getter(v25);
  os_signpost(_:dso:log:name:signpostID:_:_:)( v20,  &_mh_execute_header,  v24,  "listener(_:shouldAcceptNewConnection:)",  38LL,  2LL,  v19,  "Pid: %d",  7);

  uint64_t v26 = v23;
  char v27 = a1;
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  unint64_t v28 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x78LL));
  id v29 = [a1 setExportedInterface:v28];
  uint64_t v30 = *(void (**)(id))((swift_isaMask & *v1) + 0x80LL);
  uint64_t v31 = v103;
  uint64_t v93 = v1;
  v30(v29);
  int64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL);
  uint64_t v95 = AssociatedTypeWitness;
  uint64_t result = v32(v31, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v34 = v105;
  uint64_t v35 = *(void (**)(char *, id, uint64_t, uint64_t))(v105 + 40);
  id v36 = v27;
  uint64_t v37 = v106;
  v35(v31, v36, v6, v34);
  uint64_t v38 = v6;
  uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)(v37, v6);
  unint64_t v40 = v36;
  [v36 setExportedObject:v39];
  uint64_t v41 = swift_unknownObjectRelease(v39);
  uint64_t v42 = v94;
  v30((id)v41);
  uint64_t v43 = v95;
  if (v32(v42, 1LL, v95) == 1)
  {
    (*(void (**)(char *, uint64_t))(v91 + 8))(v42, v92);
    p_ivar_lyt = &ApprovalSettingsStateManager.ivar_lyt;
LABEL_7:
    uint64_t v115 = 0LL;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    uint64_t v47 = v38;
    goto LABEL_8;
  }

  uint64_t v45 = sub_100005FB4((uint64_t *)&unk_100159E70);
  int v46 = swift_dynamicCast(&v113, v42, v43, v45, 6LL);
  p_ivar_lyt = (void **)(&ApprovalSettingsStateManager + 16);
  if (!v46) {
    goto LABEL_7;
  }
  uint64_t v47 = v38;
  if (!*((void *)&v114 + 1))
  {
LABEL_8:
    sub_100012824((uint64_t)&v113, &qword_100157C50);
    uint64_t v50 = 0xD00000000000001ALL;
    unint64_t v52 = 0x80000001001244D0LL;
    goto LABEL_9;
  }

  sub_100005158(&v113, (uint64_t)&aBlock);
  uint64_t v48 = v110;
  __int128 v49 = sub_100005110(&aBlock, (uint64_t)v110);
  swift_getDynamicType(v49, v48, 1LL);
  uint64_t v50 = (*((uint64_t (**)(void))v111 + 4))();
  unint64_t v52 = v51;
  sub_100006034(&aBlock);
LABEL_9:
  sub_100006094(0LL, &qword_100159E50, &OBJC_CLASS___OS_dispatch_workloop_ptr);
  aBlock = 0LL;
  unint64_t v108 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(v108);
  aBlock = (void **)v50;
  unint64_t v108 = v52;
  v53._object = (void *)0x80000001001244F0LL;
  v53._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v53);
  __int128 v54 = v40;
  LODWORD(v113) = objc_msgSend(v40, (SEL)p_ivar_lyt[154]);
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(object);
  __int128 v57 = aBlock;
  unint64_t v58 = v108;
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v59 = sub_100012860( &qword_100159E58,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_workloop.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_workloop.Attributes);
  uint64_t v60 = sub_100005FB4(&qword_100159E60);
  uint64_t v61 = sub_1000778A4(&qword_100159E68, &qword_100159E60);
  __int128 v62 = v98;
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, &aBlock, v60, v61, v97, v59);
  __int128 v63 = v100;
  (*(void (**)(char *, void, void *))(v99 + 104))( v100,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v101);
  uint64_t v103 = (char *)OS_dispatch_workloop.init(label:attributes:autoreleaseFrequency:osWorkgroup:)(v57, v58, v62, v63, 0LL);
  objc_msgSend(v54, "_setQueue:");
  uint64_t v64 = v104;
  uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  uint64_t v65 = v102;
  v101(v102, v106, v47);
  uint64_t v66 = *(unsigned __int8 *)(v64 + 80);
  uint64_t v67 = (v66 + 40) & ~v66;
  uint64_t v99 = v66 | 7;
  uint64_t v100 = (char *)(v67 + v96);
  uint64_t v68 = (char *)swift_allocObject(&unk_1001497E0, v67 + v96, v66 | 7);
  *((void *)v68 + 2) = v47;
  uint64_t v69 = v47;
  uint64_t v70 = v105;
  *((void *)v68 + 3) = v105;
  *((void *)v68 + 4) = v54;
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v71(&v68[v67], v65, v69);
  uint64_t v111 = sub_10007762C;
  uint64_t v112 = v68;
  aBlock = _NSConcreteStackBlock;
  unint64_t v108 = 1107296256LL;
  v109 = sub_10000B750;
  uint64_t v110 = &unk_1001497F8;
  uint64_t v72 = _Block_copy(&aBlock);
  uint64_t v73 = v112;
  id v74 = v54;
  v75 = v73;
  uint64_t v76 = v70;
  uint64_t v77 = v69;
  swift_release((char *)v75);
  [v74 setInterruptionHandler:v72];
  _Block_release(v72);
  v101(v65, v106, v69);
  int64_t v78 = (char *)swift_allocObject(&unk_100149830, v100, v99);
  *((void *)v78 + 2) = v69;
  *((void *)v78 + 3) = v76;
  *((void *)v78 + 4) = v74;
  v71(&v78[v67], v65, v69);
  v79 = v106;
  uint64_t v111 = sub_1000777A0;
  uint64_t v112 = v78;
  aBlock = _NSConcreteStackBlock;
  unint64_t v108 = 1107296256LL;
  v109 = sub_10000B750;
  uint64_t v110 = &unk_100149848;
  int64_t v80 = _Block_copy(&aBlock);
  uint64_t v81 = v112;
  id v82 = v74;
  swift_release(v81);
  [v82 setInvalidationHandler:v80];
  _Block_release(v80);
  uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 48))(v77, v76);
  uint64_t v84 = v83;
  uint64_t v85 = *(void *)(v83 + 16);
  if (v85)
  {
    uint64_t v86 = (unsigned __int8 *)(v83 + 56);
    do
    {
      uint64_t v87 = *((void *)v86 - 3);
      uint64_t v88 = *((void *)v86 - 2);
      uint64_t v89 = *((void *)v86 - 1);
      unsigned int v90 = *v86;
      v86 += 32;
      [v28 setInterface:v87 forSelector:v88 argumentIndex:v89 ofReply:v90];
      --v85;
    }

    while (v85);
  }

  swift_bridgeObjectRelease(v84);
  (*(void (**)(void *, uint64_t, uint64_t))(v76 + 72))(v28, v77, v76);
  [v82 resume];

  (*(void (**)(char *, uint64_t))(v104 + 8))(v79, v77);
  return 1LL;
}

void sub_10007723C()
{
}

uint64_t sub_100077268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157FF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000772B0()
{
  unint64_t result = qword_100159D18;
  if (!qword_100159D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100114398, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D18);
  }

  return result;
}

unint64_t sub_1000772F4()
{
  unint64_t result = qword_100159D20;
  if (!qword_100159D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100114298, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D20);
  }

  return result;
}

uint64_t sub_100077338(uint64_t a1)
{
  return a1;
}

uint64_t sub_100077360(uint64_t a1)
{
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for KernelRequestSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KernelRequestSource);
}

uint64_t sub_100077400(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  *(void *)(a1 + 88),  *(void *)(a1 + 80),  &protocol descriptor for NSXPCRequestDelegate.NumRequirements,  &unk_1001337EC);
  uint64_t result = type metadata accessor for Optional(319LL, AssociatedTypeWitness);
  if (v4 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v5, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void destroy for NSXPCRequestDelegateInterface(id *a1)
{
}

uint64_t initializeWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSXPCRequestDelegateInterface()
{
  return &type metadata for NSXPCRequestDelegateInterface;
}

uint64_t sub_10007762C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  unint64_t v3 = (void *)v0[4];
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_10010F110;
  unsigned int v6 = [v3 processIdentifier];
  *(void *)(v5 + 56) = &type metadata for Int32;
  *(void *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = v6;
  uint64_t v7 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("Connection with client pid %d interrupted.", v10);

  swift_bridgeObjectRelease(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_100077734()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000777A0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_10010F110;
  unsigned int v6 = [v3 processIdentifier];
  *(void *)(v5 + 56) = &type metadata for Int32;
  *(void *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = v6;
  uint64_t v7 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("Connection with client pid %d invalidated.", v10);

  swift_bridgeObjectRelease(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t sub_1000778A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100012010(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10007790C()
{
  unint64_t v0 = sub_100079BFC();
  unint64_t v1 = sub_10003A640();
  return sub_1000D3840(1LL, (uint64_t)&type metadata for XPCEventSubscriberFlags, v0, v1, (uint64_t)&qword_1001754E8);
}

uint64_t *sub_100077954()
{
  if (qword_1001626F0 != -1) {
    swift_once(&qword_1001626F0, sub_10007790C);
  }
  return &qword_1001754E8;
}

uint64_t sub_100077994(uint64_t a1)
{
  if (qword_1001626F0 != -1) {
    swift_once(&qword_1001626F0, sub_10007790C);
  }
  if ((qword_1001754E8 & ~a1) != 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v2 = sub_10000C82C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    uint64_t v5 = &v2[2 * v4];
    void v5[4] = 0x64656C7469746E65LL;
    v5[5] = 0xE800000000000000LL;
  }

  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  uint64_t v7 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v6, v7);
  swift_bridgeObjectRelease(v2);
  return v8;
}

uint64_t sub_100077AD0()
{
  return sub_100077994(*v0);
}

uint64_t sub_100077AD8()
{
  uint64_t v1 = sub_100005FB4(&qword_100159F00);
  OS_dispatch_queue.sync<A>(execute:)(&v3, sub_100078370, v0, v1);
  return v3;
}

uint64_t sub_100077B34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 64LL, 7LL);
  sub_100077B98(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_100077B98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  id v36 = a2;
  uint64_t v38 = a1;
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v6 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100006094(0LL, (unint64_t *)&qword_100159CB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v15);
  aBlock = (void **)_swiftEmptyArrayStorage;
  unint64_t v16 = sub_1000783BC();
  uint64_t v17 = sub_100005FB4(&qword_100159CC0);
  uint64_t v18 = v36;
  uint64_t v19 = sub_100012B78( (unint64_t *)&qword_100159CC8,  &qword_100159CC0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v11, &aBlock, v17, v19, v9, v16);
  uint64_t v20 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v21 = v38;
  v20(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  uint64_t v22 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v39, v40, v14, v11, v8, 0LL);
  v5[3] = v22;
  uint64_t v23 = String.utf8CString.getter(v21);
  id v24 = v22;
  id v25 = (id)xpc_event_publisher_create(v23 + 32, v24);

  swift_release(v23);
  if (v25)
  {
    void v5[4] = v21;
    v5[5] = v18;
    v5[2] = v25;
    v5[6] = _swiftEmptyArrayStorage;
    v5[7] = sub_100078D74((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v45 = sub_100078E48;
    int v46 = v5;
    aBlock = _NSConcreteStackBlock;
    unint64_t v42 = 1107296256LL;
    uint64_t v43 = sub_1000780A0;
    uint64_t v44 = &unk_100149870;
    uint64_t v26 = _Block_copy(&aBlock);
    char v27 = v46;
    id v28 = v25;
    swift_retain(v5);
    swift_release(v27);
    xpc_event_publisher_set_handler(v28, v26);
    _Block_release(v26);

    id v29 = (void *)v5[2];
    uint64_t v45 = sub_1000792BC;
    int v46 = v5;
    aBlock = _NSConcreteStackBlock;
    unint64_t v42 = 1107296256LL;
    uint64_t v43 = sub_100078108;
    uint64_t v44 = &unk_100149898;
    uint64_t v30 = _Block_copy(&aBlock);
    uint64_t v31 = v46;
    swift_retain(v5);
    id v32 = v29;
    swift_release(v31);
    xpc_event_publisher_set_error_handler(v32, v30);
    _Block_release(v30);

    return (uint64_t)v5;
  }

  else
  {
    aBlock = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease(v42);
    aBlock = (void **)0xD000000000000025LL;
    unint64_t v42 = 0x8000000100124600LL;
    v34._countAndFlagsBits = v21;
    v34._object = v18;
    String.append(_:)(v34);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v42,  "driverkitd/XPCEventPublisher.swift",  34LL,  2LL,  69LL,  0);
    __break(1u);
  }

  return result;
}

unint64_t sub_100077F2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015A038);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007803C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 5LL; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1LL)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000780A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  swift_unknownObjectRetain(a4);
  v8(a2, a3, a4);
  swift_release(v7);
  return swift_unknownObjectRelease(a4);
}

uint64_t sub_100078108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100078144(uint64_t a1)
{
  uint64_t v3 = sub_100005FB4(&qword_100159F08);
  uint64_t inited = swift_initStackObject(v3, v13);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  uint64_t v5 = v1[5];
  *(void *)(inited + 32) = v1[4];
  *(void *)(inited + 40) = v5;
  *(_BYTE *)(inited + 48) = 1;
  swift_bridgeObjectRetain(v5);
  unint64_t v6 = sub_100077F2C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = _CFXPCCreateXPCObjectFromCFObject(isa);

  if (v8)
  {
    xpc_event_publisher_fire(v1[2], a1, v8);
    return swift_unknownObjectRelease(v8);
  }

  else
  {
    unint64_t v10 = sub_100012624();
    uint64_t v11 = swift_allocError(&type metadata for KMError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 0xD000000000000025LL;
    *(void *)(v12 + 8) = 0x8000000100124660LL;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(void *)(v12 + 64) = 0LL;
    *(_BYTE *)(v12 + 72) = 50;
    return swift_willThrow(v11);
  }

uint64_t sub_100078270()
{
  return xpc_event_publisher_activate(*(void *)(v0 + 16));
}

uint64_t sub_100078278()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return v0;
}

uint64_t sub_1000782B4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_1000782F8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t sub_100078320()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))();
}

uint64_t sub_100078348()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t sub_100078370@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

unint64_t sub_1000783BC()
{
  unint64_t result = qword_100159CB8;
  if (!qword_100159CB8)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100159CB8);
  }

  return result;
}

char *sub_100078404(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015A048);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  BOOL v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_1000784FC(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10007852C(a1, v3);
}

unint64_t sub_10007852C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000785C8(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1000784FC(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v7 = *v1;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100078AA8();
    uint64_t v7 = v11;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_100078914(v5, v7);
  uint64_t v9 = *v2;
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_100078670(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015A040);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v36 = a2;
    uint64_t v35 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v20 >= v14) {
          goto LABEL_34;
        }
        unint64_t v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v21 = v10[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                unint64_t v3 = v35;
                goto LABEL_41;
              }

              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v33;
              }
              unint64_t v3 = v35;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v21 = v10[v9];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

unint64_t sub_100078914(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            int64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *int64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *unint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void *sub_100078AA8()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015A040);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

uint64_t sub_100078C34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000784FC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100078AA8();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }

char *sub_100078D60(uint64_t a1)
{
  return sub_100078404(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_100078D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4(&qword_10015A040);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1000784FC(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1LL);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t sub_100078E48(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v5 = (char *)v2[6];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3[6]);
    v3[6] = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_40;
  }

  uint64_t v23 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v24 = swift_allocObject(v23, 112LL, 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_10010F440;
  uint64_t v26 = v2[4];
  uint64_t v25 = v2[5];
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v27 = sub_100026B64();
  *(void *)(v24 + 32) = v26;
  *(void *)(v24 + 40) = v25;
  *(void *)(v24 + 96) = &type metadata for UInt64;
  *(void *)(v24 + 104) = &protocol witness table for UInt64;
  *(void *)(v24 + 64) = v27;
  *(void *)(v24 + 72) = a2;
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(v25);
  char v29 = (void *)static OS_os_log.default.getter(v28);
  uint64_t v30 = static os_log_type_t.default.getter(v29);
  os_log(_:dso:log:type:_:)( "XPC Event %{public}s: Removing subscriber %llx",  46LL,  2LL,  &_mh_execute_header,  v29,  v30,  v24);

  unint64_t result = swift_bridgeObjectRelease(v24);
  uint64_t v5 = (char *)(v3 + 6);
  BOOL v31 = (char *)v3[6];
  unint64_t v32 = *((void *)v31 + 2);
  if (!v32) {
    goto LABEL_14;
  }
  if (*((void *)v31 + 4) == a2)
  {
    unint64_t v33 = 0LL;
  }

  else
  {
    if (v32 == 1)
    {
      unint64_t v33 = 1LL;
      goto LABEL_34;
    }

    uint64_t v41 = 5LL;
    while (1)
    {
      unint64_t v33 = v41 - 4;
      if (*(void *)&v31[8 * v41] == a2) {
        break;
      }
      uint64_t v42 = v41 - 3;
      if (__OFADD__(v33, 1LL)) {
        goto LABEL_38;
      }
      ++v41;
      if (v42 == v32)
      {
        unint64_t v33 = *((void *)v31 + 2);
        goto LABEL_34;
      }
    }
  }

  unint64_t v34 = v33 + 1;
  if (__OFADD__(v33, 1LL))
  {
    __break(1u);
    goto LABEL_42;
  }

  if (v34 == v32)
  {
LABEL_12:
    if ((uint64_t)v32 >= (uint64_t)v33)
    {
LABEL_34:
      sub_1000794FC(v33, v32);
      swift_beginAccess(v3 + 7, v43, 33LL, 0LL);
      sub_1000785C8(a2);
      return swift_endAccess(v43);
    }

    __break(1u);
LABEL_14:
    unint64_t v33 = 0LL;
    goto LABEL_34;
  }

  if ((v34 & 0x8000000000000000LL) != 0)
  {
LABEL_42:
    __break(1u);
    return result;
  }

  unint64_t v35 = v33 + 5;
  while (v35 - 4 < v32)
  {
    uint64_t v38 = *(void *)&v31[8 * v35];
    if (v38 != a2)
    {
      if (v35 - 4 != v33)
      {
        if (v33 >= v32) {
          goto LABEL_39;
        }
        uint64_t v39 = *(void *)&v31[8 * v33 + 32];
        char v40 = swift_isUniquelyReferenced_nonNull_native(v31);
        *(void *)uint64_t v5 = v31;
        if ((v40 & 1) == 0)
        {
          BOOL v31 = sub_100078D60((uint64_t)v31);
          *(void *)uint64_t v5 = v31;
        }

        *(void *)&v31[8 * v33 + 32] = v38;
        *(void *)(*(void *)v5 + 8 * v35) = v39;
        BOOL v31 = *(char **)v5;
      }

      if (__OFADD__(v33++, 1LL)) {
        goto LABEL_37;
      }
      unint64_t v32 = *((void *)v31 + 2);
    }

    unint64_t v37 = v35 - 3;
    ++v35;
    if (v37 == v32) {
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t v5 = sub_100078404(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
  v3[6] = v5;
LABEL_4:
  unint64_t v8 = *((void *)v5 + 2);
  unint64_t v7 = *((void *)v5 + 3);
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = sub_100078404((char *)(v7 > 1), v8 + 1, 1, v5);
    v3[6] = v5;
  }

  *((void *)v5 + 2) = v8 + 1;
  *(void *)&v5[8 * v8 + 32] = a2;
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_10010F440;
  uint64_t v12 = v3[4];
  uint64_t v11 = v3[5];
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v13 = sub_100026B64();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 96) = &type metadata for UInt64;
  *(void *)(v10 + 104) = &protocol witness table for UInt64;
  *(void *)(v10 + 64) = v13;
  *(void *)(v10 + 72) = a2;
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(v11);
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)( "XPC Event %{public}s: Pending subscriber %llx",  45LL,  2LL,  &_mh_execute_header,  v15,  v16,  v10);

  swift_bridgeObjectRelease(v10);
  xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v18 = v3[2];
  uint64_t v19 = v3[3];
  uint64_t v20 = swift_allocObject(&unk_100149918, 32LL, 7LL);
  *(void *)(v20 + 16) = v3;
  *(void *)(v20 + 24) = a2;
  v43[4] = sub_100079624;
  uint64_t v44 = v20;
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 1107296256LL;
  v43[2] = sub_10006AB00;
  v43[3] = &unk_100149930;
  uint64_t v21 = _Block_copy(v43);
  uint64_t v22 = v44;
  swift_unknownObjectRetain(v17);
  swift_retain(v3);
  swift_release(v22);
  xpc_event_publisher_fire_with_reply(v18, a2, v17, v19, v21);
  _Block_release(v21);
  return swift_unknownObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000792A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000792B4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000792BC(uint64_t a1)
{
  int v2 = a1;
  uint64_t v3 = static os_log_type_t.error.getter(a1);
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v5 = swift_allocObject(v4, 112LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_10010F440;
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_100026B64();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 96) = &type metadata for Int32;
  *(void *)(v5 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 72) = v2;
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(v6);
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v9, "XPC Event Handler %{public}s error: %d", 38LL, 2LL, v5);

  return swift_bridgeObjectRelease(v5);
}

unint64_t sub_1000793B0()
{
  unint64_t result = qword_100159F10;
  if (!qword_100159F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100112868, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F10);
  }

  return result;
}

unint64_t sub_1000793F8()
{
  unint64_t result = qword_100159F18;
  if (!qword_100159F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001127A0, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F18);
  }

  return result;
}

unint64_t sub_100079440()
{
  unint64_t result = qword_100159F20;
  if (!qword_100159F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001128A0, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F20);
  }

  return result;
}

unint64_t sub_100079488()
{
  unint64_t result = qword_100159F28;
  if (!qword_100159F28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001128C8, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F28);
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCEventSubscriberFlags()
{
  return &type metadata for XPCEventSubscriberFlags;
}

uint64_t type metadata accessor for RealXPCEventPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd21RealXPCEventPublisher);
}

unint64_t sub_1000794FC(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  unint64_t result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    unint64_t result = (unint64_t)sub_100078404((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }

  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  unint64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *int v2 = v4;
    return result;
  }

uint64_t sub_100079600()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100079624(void *a1)
{
  unint64_t v4 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  int64_t v5 = v4 + 6;
  uint64_t v6 = sub_10007803C(v3, v4[6]);
  if ((v6 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v7 = *v5;
  unint64_t v8 = *(void *)(*v5 + 16);
  if (!v8)
  {
    unint64_t v9 = 0LL;
    goto LABEL_30;
  }

  if (*(void *)(v7 + 32) == v3)
  {
    unint64_t v9 = 0LL;
    goto LABEL_5;
  }

  if (v8 == 1)
  {
    unint64_t v9 = 1LL;
LABEL_30:
    sub_1000794FC(v9, v8);
    uint64_t ObjectType = swift_getObjectType(a1);
    if (!sub_1000D795C(ObjectType))
    {
      unint64_t v32 = sub_1000D7A40();
      if (v33)
      {
        unint64_t v34 = v32;
        uint64_t v35 = v33;
        uint64_t v36 = static os_log_type_t.error.getter(v32);
        uint64_t v37 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v13 = swift_allocObject(v37, 152LL, 7LL);
        *(_OWORD *)(v13 + 16) = xmmword_100111D70;
        uint64_t v39 = v4[4];
        uint64_t v38 = v4[5];
        *(void *)(v13 + 56) = &type metadata for String;
        unint64_t v40 = sub_100026B64();
        *(void *)(v13 + 32) = v39;
        *(void *)(v13 + 40) = v38;
        *(void *)(v13 + 96) = &type metadata for UInt64;
        *(void *)(v13 + 104) = &protocol witness table for UInt64;
        *(void *)(v13 + 64) = v40;
        *(void *)(v13 + 72) = v3;
        *(void *)(v13 + 136) = &type metadata for String;
        *(void *)(v13 + 144) = v40;
        *(void *)(v13 + 112) = v34;
        *(void *)(v13 + 120) = v35;
        sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        swift_bridgeObjectRetain(v38);
        uint64_t v18 = (void *)static OS_os_log.default.getter(v41);
        os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  v18,  "XPC Event %{public}s: Pending subscriber %llx replied with error %{public}s",  75LL,  2LL,  v13);
      }

      else
      {
        type = xpc_get_type(a1);
        name = xpc_type_get_name(type);
        uint64_t v57 = String.init(cString:)(name);
        uint64_t v59 = v58;
        uint64_t v60 = static os_log_type_t.error.getter(v57);
        uint64_t v61 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v13 = swift_allocObject(v61, 152LL, 7LL);
        *(_OWORD *)(v13 + 16) = xmmword_100111D70;
        uint64_t v63 = v4[4];
        uint64_t v62 = v4[5];
        *(void *)(v13 + 56) = &type metadata for String;
        unint64_t v64 = sub_100026B64();
        *(void *)(v13 + 32) = v63;
        *(void *)(v13 + 40) = v62;
        *(void *)(v13 + 96) = &type metadata for UInt64;
        *(void *)(v13 + 104) = &protocol witness table for UInt64;
        *(void *)(v13 + 64) = v64;
        *(void *)(v13 + 72) = v3;
        *(void *)(v13 + 136) = &type metadata for String;
        *(void *)(v13 + 144) = v64;
        *(void *)(v13 + 112) = v57;
        *(void *)(v13 + 120) = v59;
        sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        swift_bridgeObjectRetain(v62);
        uint64_t v18 = (void *)static OS_os_log.default.getter(v65);
        os_log(_:dso:log:_:_:)( v60,  &_mh_execute_header,  v18,  "XPC Event %{public}s: Pending subscriber %llx replied with unexpected type %{public}s",  85LL,  2LL,  v13);
      }

      goto LABEL_40;
    }

    memset(v68, 0, sizeof(v68));
    xpc_dictionary_get_audit_token(a1, v68);
    unint64_t v27 = sub_100090188();
    uint64_t v28 = String.utf8CString.getter(*v27);
    char v29 = (void *)xpc_copy_entitlement_for_token(v28 + 32, v68);
    swift_release(v28);
    if (!v29 || (BOOL value = xpc_BOOL_get_value(v29), swift_unknownObjectRelease(v29), !value))
    {
      uint64_t v31 = 0LL;
      goto LABEL_38;
    }

    if (qword_1001626F0 == -1)
    {
LABEL_34:
      uint64_t v31 = qword_1001754E8;
LABEL_38:
      swift_beginAccess(v4 + 7, v67, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4[7]);
      uint64_t v66 = v4[7];
      v4[7] = 0x8000000000000000LL;
      sub_100078C34(v31, v3, isUniquelyReferenced_nonNull_native);
      uint64_t v43 = v4[7];
      v4[7] = v66;
      swift_bridgeObjectRelease(v43);
      swift_endAccess(v67);
      uint64_t v44 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v45 = swift_allocObject(v44, 152LL, 7LL);
      *(_OWORD *)(v45 + 16) = xmmword_100111D70;
      uint64_t v47 = v4[4];
      uint64_t v46 = v4[5];
      *(void *)(v45 + 56) = &type metadata for String;
      unint64_t v48 = sub_100026B64();
      *(void *)(v45 + 32) = v47;
      *(void *)(v45 + 40) = v46;
      *(void *)(v45 + 96) = &type metadata for UInt64;
      *(void *)(v45 + 104) = &protocol witness table for UInt64;
      *(void *)(v45 + 64) = v48;
      *(void *)(v45 + 72) = v3;
      swift_bridgeObjectRetain(v46);
      uint64_t v49 = sub_100077994(v31);
      *(void *)(v45 + 136) = &type metadata for String;
      *(void *)(v45 + 144) = v48;
      *(void *)(v45 + 112) = v49;
      *(void *)(v45 + 120) = v50;
      uint64_t v51 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
      unint64_t v52 = (void *)static OS_os_log.default.getter(v51);
      uint64_t v53 = static os_log_type_t.default.getter(v52);
      os_log(_:dso:log:type:_:)( "XPC Event %{public}s: Added new subscriber %llx (%{public}s)",  60LL,  2LL,  &_mh_execute_header,  v52,  v53,  v45);

      return swift_bridgeObjectRelease(v45);
    }

unint64_t sub_100079BFC()
{
  unint64_t result = qword_10015A050;
  if (!qword_10015A050)
  {
    unint64_t result = swift_getWitnessTable(&unk_100112768, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_10015A050);
  }

  return result;
}

void sub_100079C40()
{
}

uint64_t (*sub_100079C68(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100079CA4(uint64_t a1)
{
  return sub_10007A54C( a1,  "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient returning approvals for:",  87LL);
}

void sub_100079CC4(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (void *)*sub_1000D3054();
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v36 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_10010F110;
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v35 = v1;
    uint64_t v43 = _swiftEmptyArrayStorage;
    unint64_t v34 = v6;
    id v9 = v6;
    sub_10000CC84(0, v8, 0);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v38 = *(void *)(v3 + 72);
    uint64_t v39 = v3;
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      uint64_t v11 = v40;
      uint64_t v12 = v37(v5, v10, v40);
      uint64_t v41 = 2314LL;
      unint64_t v42 = 0xE200000000000000LL;
      v13._countAndFlagsBits = URL.path.getter(v12);
      object = v13._object;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(object);
      uint64_t v16 = v41;
      unint64_t v15 = v42;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v11);
      uint64_t v17 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10000CC84(0, v17[2] + 1LL, 1);
        uint64_t v17 = v43;
      }

      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1)
      {
        sub_10000CC84(v18 > 1, v19 + 1, 1);
        uint64_t v17 = v43;
      }

      v17[2] = v19 + 1;
      unint64_t v20 = &v17[2 * v19];
      v20[4] = v16;
      v20[5] = v15;
      v10 += v38;
      --v8;
    }

    while (v8);
    uint64_t v6 = v34;
  }

  else
  {
    id v21 = v6;
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  uint64_t v41 = (uint64_t)v17;
  uint64_t v22 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v23 = sub_100013F74();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v22, v23);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v17);
  unint64_t v27 = (void *)v36;
  *(void *)(v36 + 56) = &type metadata for String;
  unint64_t v28 = sub_100026B64();
  v27[8] = v28;
  v27[4] = v24;
  v27[5] = v26;
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("gathering approvals for: %{public}s", 35LL, 2LL, &_mh_execute_header, v6, v29, v27);

  swift_bridgeObjectRelease(v27);
  unint64_t v30 = sub_100026BA8();
  uint64_t v31 = (void *)static OS_os_log.default.getter(v30);
  uint64_t v32 = static os_log_type_t.default.getter(v31);
  os_log(_:dso:log:type:_:)( "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot gather approvals from user",  96LL,  2LL,  &_mh_execute_header,  v31,  v32,  _swiftEmptyArrayStorage);
}

void sub_100079F94(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  int64_t v8 = (void *)v7;
  *(_OWORD *)(v7 + 16) = xmmword_10010F110;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v30[0] = v7;
    v30[1] = v1;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10000CC84(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v32 = v12;
    uint64_t v33 = v3;
    do
    {
      uint64_t v13 = v34;
      uint64_t v14 = v31(v5, v11, v34);
      uint64_t v35 = 2314LL;
      unint64_t v36 = 0xE200000000000000LL;
      v15._countAndFlagsBits = URL.path.getter(v14);
      object = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object);
      uint64_t v18 = v35;
      unint64_t v17 = v36;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v13);
      uint64_t v10 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_10000CC84(0, v10[2] + 1LL, 1);
        uint64_t v10 = v37;
      }

      unint64_t v20 = v10[2];
      unint64_t v19 = v10[3];
      if (v20 >= v19 >> 1)
      {
        sub_10000CC84(v19 > 1, v20 + 1, 1);
        uint64_t v10 = v37;
      }

      v10[2] = v20 + 1;
      id v21 = &v10[2 * v20];
      v21[4] = v18;
      v21[5] = v17;
      uint64_t v3 = v33;
      v11 += v32;
      --v9;
    }

    while (v9);
    int64_t v8 = (void *)v30[0];
  }

  uint64_t v35 = (uint64_t)v10;
  uint64_t v22 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v23 = sub_100013F74();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v22, v23);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v10);
  v8[7] = &type metadata for String;
  v8[8] = sub_100026B64();
  v8[4] = v24;
  v8[5] = v26;
  unint64_t v27 = sub_100026BA8();
  unint64_t v28 = (void *)static OS_os_log.default.getter(v27);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)( "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot trigger rebuild for: %{public}s",  101LL,  2LL,  &_mh_execute_header,  v28,  v29,  v8);
  swift_bridgeObjectRelease(v8);
}

void sub_10007A208(uint64_t a1)
{
}

uint64_t sub_10007A228()
{
  return sub_10007B658("SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient returning a nil UAKL hash", 88LL);
}

uint64_t sub_10007A248(uint64_t a1)
{
  return sub_10007B6F4( a1,  "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot find bundled kexts for: %{public}s",  104LL);
}

void sub_10007A268()
{
}

void sub_10007A288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10007A2A8(uint64_t a1)
{
}

void *sub_10007A2CC()
{
  unint64_t result = (void *)swift_allocObject(v0, 40LL, 7LL);
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10007A2FC()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 16LL));
}

uint64_t sub_10007A308()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t sub_10007A330()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t sub_10007A358()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t sub_10007A380()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

uint64_t sub_10007A3A8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t sub_10007A3D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t sub_10007A3F8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160LL))();
}

uint64_t sub_10007A420()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t sub_10007A448()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t sub_10007A470(uint64_t a1)
{
  return sub_10007AB20(a1, type metadata accessor for NullSystemPolicyClient, (uint64_t)&off_100149A80);
}

uint64_t sub_10007A484(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015A068);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t (*sub_10007A4F0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10007A52C(uint64_t a1)
{
  return sub_10007A54C( a1,  "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient returning approvals for:",  91LL);
}

uint64_t sub_10007A54C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015A058);
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*sub_1000D3054();
  uint64_t v12 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  uint64_t v56 = a1;
  uint64_t v57 = (void *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_10010F110;
  int64_t v14 = *(void *)(a1 + 16);
  uint64_t v66 = v9;
  if (v14)
  {
    __int128 v54 = a2;
    uint64_t v55 = a3;
    uint64_t v69 = _swiftEmptyArrayStorage;
    uint64_t v53 = v11;
    id v15 = v11;
    sub_10000CC84(0, v14, 0);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v61 = v17;
    int64_t v18 = v14;
    uint64_t v62 = v8;
    do
    {
      unint64_t v19 = v65;
      uint64_t v20 = v60(v65, v16, v8);
      uint64_t v67 = 2314LL;
      unint64_t v68 = 0xE200000000000000LL;
      v21._countAndFlagsBits = URL.path.getter(v20);
      object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      uint64_t v23 = v67;
      unint64_t v24 = v68;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v8);
      uint64_t v25 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
      {
        sub_10000CC84(0, v25[2] + 1LL, 1);
        uint64_t v25 = v69;
      }

      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_10000CC84(v26 > 1, v27 + 1, 1);
        uint64_t v25 = v69;
      }

      v25[2] = v27 + 1;
      unint64_t v28 = &v25[2 * v27];
      v28[4] = v23;
      v28[5] = v24;
      uint64_t v8 = v62;
      v16 += v61;
      --v18;
    }

    while (v18);
    uint64_t v9 = v66;
    uint64_t v29 = v54;
    a3 = v55;
    uint64_t v11 = v53;
  }

  else
  {
    id v30 = v11;
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v29 = a2;
  }

  uint64_t v67 = (uint64_t)v25;
  uint64_t v31 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v32 = sub_100013F74();
  uint64_t v33 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v31, v32);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease(v25);
  unint64_t v36 = v57;
  v57[7] = &type metadata for String;
  unint64_t v37 = sub_100026B64();
  v36[8] = v37;
  v36[4] = v33;
  v36[5] = v35;
  uint64_t v38 = static os_log_type_t.default.getter(v37);
  os_log(_:dso:log:type:_:)(v29, a3, 2LL, &_mh_execute_header, v11, v38, v36);

  swift_bridgeObjectRelease(v36);
  uint64_t v39 = _swiftEmptyArrayStorage;
  if (v14)
  {
    uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007C82C(0LL, v14, 0);
    uint64_t v40 = v56 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v41 = *(void *)(v9 + 72);
    unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v43 = (uint64_t)v59;
    do
    {
      uint64_t v44 = v65;
      v42(v65, v40, v8);
      uint64_t v45 = *(int *)(v64 + 48);
      v42((char *)v43, (uint64_t)v44, v8);
      *(_BYTE *)(v43 + v45) = 1;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v44, v8);
      uint64_t v39 = (void *)v67;
      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
      {
        sub_10007C82C(0LL, v39[2] + 1LL, 1);
        uint64_t v43 = (uint64_t)v59;
        uint64_t v39 = (void *)v67;
      }

      unint64_t v47 = v39[2];
      unint64_t v46 = v39[3];
      if (v47 >= v46 >> 1)
      {
        sub_10007C82C(v46 > 1, v47 + 1, 1);
        uint64_t v43 = (uint64_t)v59;
        uint64_t v39 = (void *)v67;
      }

      v39[2] = v47 + 1;
      sub_10007C848( v43,  (uint64_t)v39 + ((*(unsigned __int8 *)(v63 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))
      + *(void *)(v63 + 72) * v47);
      v40 += v41;
      --v14;
      uint64_t v9 = v66;
    }

    while (v14);
  }

  uint64_t v48 = v39[2];
  if (v48)
  {
    sub_100005FB4(&qword_10015A060);
    uint64_t v49 = (void *)static _DictionaryStorage.allocate(capacity:)(v48);
  }

  else
  {
    uint64_t v49 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v67 = (uint64_t)v49;
  swift_bridgeObjectRetain(v39);
  uint64_t v50 = v58;
  sub_10007BDEC(v51, 1, &v67);
  if (v50)
  {
    uint64_t result = swift_unexpectedError(v50, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v39);
    return v67;
  }

  return result;
}

uint64_t sub_10007A9D8(uint64_t a1)
{
  return sub_10007B0A0(a1, 0xD000000000000064LL, 0x8000000100124D20LL);
}

uint64_t sub_10007AA04(uint64_t a1, uint64_t a2)
{
  return sub_10007B3A4(a1, a2, 97LL, 0xD00000000000005FLL, (void *)0x8000000100124D90LL);
}

void sub_10007AA34(uint64_t a1)
{
}

uint64_t sub_10007AA54()
{
  return sub_10007B658( "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient returning a nil UAKL hash",  92LL);
}

uint64_t sub_10007AA74(uint64_t a1)
{
  return sub_10007B6F4( a1,  "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot find bundled kexts for: %{public}s",  108LL);
}

void sub_10007AA94()
{
}

void sub_10007AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10007AAD4(uint64_t a1)
{
}

uint64_t sub_10007AAF4()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_10007AB20(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  v9[3] = a2();
  v9[4] = a3;
  v9[0] = v3;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  sub_100005F48(a1, v6);
  swift_retain(v3);
  return sub_10007A484(v9, v6, v7);
}

uint64_t sub_10007AB8C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t sub_10007ABD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_10007AC24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 40;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10001A148(v3, a1, &qword_10015A070);
}

uint64_t sub_10007AC74(uint64_t a1)
{
  uint64_t v3 = v1 + 40;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_10007C8D0(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_10007ACC4(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10007AD00(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v49 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)*sub_1000D3054();
  uint64_t v10 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v45 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v45 + 16) = xmmword_10010F110;
  int64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v43 = v2;
    uint64_t v44 = v1;
    unint64_t v52 = _swiftEmptyArrayStorage;
    uint64_t v41 = v9;
    id v12 = v9;
    sub_10000CC84(0, v11, 0);
    uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v42 = a1;
    uint64_t v14 = a1 + ((v13 + 32) & ~v13);
    uint64_t v47 = *(void *)(v6 + 72);
    uint64_t v48 = v6;
    unint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      uint64_t v15 = v49;
      uint64_t v16 = v46(v8, v14, v49);
      uint64_t v50 = 2314LL;
      unint64_t v51 = 0xE200000000000000LL;
      v17._countAndFlagsBits = URL.path.getter(v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      uint64_t v20 = v50;
      unint64_t v19 = v51;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v15);
      Swift::String v21 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      {
        sub_10000CC84(0, v21[2] + 1LL, 1);
        Swift::String v21 = v52;
      }

      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1)
      {
        sub_10000CC84(v22 > 1, v23 + 1, 1);
        Swift::String v21 = v52;
      }

      v21[2] = v23 + 1;
      unint64_t v24 = &v21[2 * v23];
      v24[4] = v20;
      v24[5] = v19;
      v14 += v47;
      --v11;
    }

    while (v11);
    uint64_t v3 = v43;
    uint64_t v4 = v44;
    uint64_t v9 = v41;
    a1 = v42;
  }

  else
  {
    id v25 = v9;
    Swift::String v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v50 = (uint64_t)v21;
  uint64_t v26 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v27 = sub_100013F74();
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v26, v27);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v21);
  uint64_t v31 = (void *)v45;
  *(void *)(v45 + 56) = &type metadata for String;
  unint64_t v32 = sub_100026B64();
  v31[8] = v32;
  v31[4] = v28;
  v31[5] = v30;
  uint64_t v33 = static os_log_type_t.default.getter(v32);
  os_log(_:dso:log:type:_:)( "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient returning approvals for all kexts in the ARV: %{public}s",  127LL,  2LL,  &_mh_execute_header,  v9,  v33,  v31);

  swift_bridgeObjectRelease(v31);
  swift_retain(v4);
  uint64_t v34 = sub_10007CA94(a1, v4);
  uint64_t result = swift_release(v4);
  if (!v3)
  {
    swift_retain(v4);
    unint64_t v36 = sub_10007CD48((uint64_t)v34, v4);
    swift_bridgeObjectRelease(v34);
    swift_release(v4);
    uint64_t v37 = v36[2];
    if (v37)
    {
      sub_100005FB4(&qword_10015A060);
      uint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)(v37);
    }

    else
    {
      uint64_t v38 = &_swiftEmptyDictionarySingleton;
    }

    uint64_t v50 = (uint64_t)v38;
    swift_bridgeObjectRetain(v36);
    sub_10007BDEC(v39, 1, &v50);
    swift_bridgeObjectRelease(v36);
    return v50;
  }

  return result;
}

uint64_t sub_10007B074(uint64_t a1)
{
  return sub_10007B0A0(a1, 0xD000000000000068LL, 0x8000000100125110LL);
}

uint64_t sub_10007B0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)*sub_1000D3054();
  uint64_t v10 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  id v12 = (void *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_10010F110;
  int64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v38 = (void *)v11;
    uint64_t v40 = a2;
    uint64_t v41 = a3;
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v39 = v9;
    id v14 = v9;
    sub_10000CC84(0, v13, 0);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v43 = *(void *)(v6 + 72);
    uint64_t v44 = v6;
    uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      uint64_t v16 = v45;
      uint64_t v17 = v42(v8, v15, v45);
      uint64_t v46 = 2314LL;
      unint64_t v47 = 0xE200000000000000LL;
      v18._countAndFlagsBits = URL.path.getter(v17);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      uint64_t v21 = v46;
      unint64_t v20 = v47;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v16);
      unint64_t v22 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        sub_10000CC84(0, v22[2] + 1LL, 1);
        unint64_t v22 = v48;
      }

      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_10000CC84(v23 > 1, v24 + 1, 1);
        unint64_t v22 = v48;
      }

      v22[2] = v24 + 1;
      id v25 = &v22[2 * v24];
      v25[4] = v21;
      v25[5] = v20;
      v15 += v43;
      --v13;
    }

    while (v13);
    a2 = v40;
    a3 = v41;
    id v12 = v38;
    uint64_t v9 = v39;
  }

  else
  {
    id v26 = v9;
    unint64_t v22 = _swiftEmptyArrayStorage;
  }

  uint64_t v46 = (uint64_t)v22;
  uint64_t v27 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v28 = sub_100013F74();
  uint64_t v29 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v27, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease(v22);
  v12[7] = &type metadata for String;
  unint64_t v32 = sub_100026B64();
  v12[8] = v32;
  v12[4] = v29;
  v12[5] = v31;
  uint64_t v33 = static os_log_type_t.default.getter(v32);
  os_log(_:dso:log:type:_:)("gathering approvals for: %{public}s", 35LL, 2LL, &_mh_execute_header, v9, v33, v12);

  swift_bridgeObjectRelease(v12);
  unint64_t v34 = sub_100012624();
  uint64_t v35 = swift_allocError(&type metadata for KMError, v34, 0LL, 0LL);
  *(void *)uint64_t v36 = a2;
  *(void *)(v36 + 8) = a3;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(void *)(v36 + 64) = 0LL;
  *(_BYTE *)(v36 + 72) = 28;
  return swift_willThrow(v35);
}

uint64_t sub_10007B374(uint64_t a1, uint64_t a2)
{
  return sub_10007B3A4(a1, a2, 101LL, 0xD000000000000063LL, (void *)0x8000000100125180LL);
}

uint64_t sub_10007B3A4(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  uint64_t v40 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = 0LL;
  unint64_t v44 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(a3);
  v12._countAndFlagsBits = a4;
  v12._object = a5;
  String.append(_:)(v12);
  int64_t v13 = *(void *)(a1 + 16);
  id v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_10000CC84(0, v13, 0);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v38 = *(void *)(v9 + 72);
    uint64_t v39 = v9;
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    do
    {
      uint64_t v16 = v40;
      uint64_t v17 = v37(v11, v15, v40);
      uint64_t v41 = 2314LL;
      unint64_t v42 = 0xE200000000000000LL;
      v18._countAndFlagsBits = URL.path.getter(v17);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      uint64_t v21 = v41;
      unint64_t v20 = v42;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v16);
      id v14 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
      {
        sub_10000CC84(0, v14[2] + 1LL, 1);
        id v14 = v45;
      }

      unint64_t v23 = v14[2];
      unint64_t v22 = v14[3];
      if (v23 >= v22 >> 1)
      {
        sub_10000CC84(v22 > 1, v23 + 1, 1);
        id v14 = v45;
      }

      void v14[2] = v23 + 1;
      unint64_t v24 = &v14[2 * v23];
      v24[4] = v21;
      v24[5] = v20;
      v15 += v38;
      --v13;
    }

    while (v13);
  }

  uint64_t v41 = (uint64_t)v14;
  uint64_t v25 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v26 = sub_100013F74();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v25, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease(v14);
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  uint64_t v31 = v43;
  unint64_t v32 = v44;
  unint64_t v33 = sub_100012624();
  uint64_t v34 = swift_allocError(&type metadata for KMError, v33, 0LL, 0LL);
  *(void *)uint64_t v35 = v31;
  *(void *)(v35 + 8) = v32;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(void *)(v35 + 64) = 0LL;
  *(_BYTE *)(v35 + 72) = 28;
  return swift_willThrow(v34);
}

void sub_10007B618(uint64_t a1)
{
}

uint64_t sub_10007B638()
{
  return sub_10007B658( "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient returning a nil UAKL hash",  96LL);
}

uint64_t sub_10007B658(const char *a1, uint64_t a2)
{
  unint64_t v4 = sub_100026BA8();
  uint64_t v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)(a1, a2, 2LL, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  return 0LL;
}

uint64_t sub_10007B6D4(uint64_t a1)
{
  return sub_10007B6F4( a1,  "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot find bundled kexts for: %{public}s",  112LL);
}

uint64_t sub_10007B6F4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_10010F110;
  uint64_t v8 = URL.path.getter(v7);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100026B64();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  unint64_t v11 = sub_100026BA8();
  Swift::String v12 = (void *)static OS_os_log.default.getter(v11);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)(a2, a3, 2LL, &_mh_execute_header, v12, v13, v7);
  swift_bridgeObjectRelease(v7);

  uint64_t v14 = sub_100005FB4(&qword_10015BB10);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v14, v18 + *(void *)(v16 + 72), v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010F110;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v19 + v18, a1, v15);
  return v19;
}

void sub_10007B840()
{
}

void sub_10007B860(const char *a1, uint64_t a2)
{
  unint64_t v4 = sub_100026BA8();
  uint64_t v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)(a1, a2, 2LL, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);
}

void sub_10007B8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10007B8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v10 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_10010F110;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_100026B64();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  sub_100026BA8();
  swift_bridgeObjectRetain(a2);
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)(a5, a6, 2LL, &_mh_execute_header, v13, v14, v11);
  swift_bridgeObjectRelease(v11);
}

void sub_10007B9C8(uint64_t a1)
{
}

void sub_10007B9E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v38 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v33 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_10010F110;
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v32[0] = a3;
    v32[1] = v3;
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_10000CC84(0, v10, 0);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v13 = *(void *)(v6 + 72);
    uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v36 = v13;
    uint64_t v37 = v6;
    do
    {
      uint64_t v14 = v38;
      uint64_t v15 = v35(v8, v12, v38);
      uint64_t v39 = 2314LL;
      unint64_t v40 = 0xE200000000000000LL;
      v16._countAndFlagsBits = URL.path.getter(v15);
      object = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object);
      uint64_t v19 = v39;
      unint64_t v18 = v40;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
      uint64_t v11 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_10000CC84(0, v11[2] + 1LL, 1);
        uint64_t v11 = v41;
      }

      unint64_t v21 = v11[2];
      unint64_t v20 = v11[3];
      if (v21 >= v20 >> 1)
      {
        sub_10000CC84(v20 > 1, v21 + 1, 1);
        uint64_t v11 = v41;
      }

      v11[2] = v21 + 1;
      unint64_t v22 = &v11[2 * v21];
      v22[4] = v19;
      v22[5] = v18;
      uint64_t v6 = v37;
      v12 += v36;
      --v10;
    }

    while (v10);
    a3 = v32[0];
  }

  uint64_t v39 = (uint64_t)v11;
  uint64_t v23 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v24 = sub_100013F74();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v23, v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v11);
  unint64_t v28 = (void *)v33;
  *(void *)(v33 + 56) = &type metadata for String;
  v28[8] = sub_100026B64();
  v28[4] = v25;
  v28[5] = v27;
  unint64_t v29 = sub_100026BA8();
  Swift::String v30 = (void *)static OS_os_log.default.getter(v29);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  os_log(_:dso:log:type:_:)(v34, a3, 2LL, &_mh_execute_header, v30, v31, v28);
  swift_bridgeObjectRelease(v28);
}

uint64_t sub_10007BC64()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

double sub_10007BC98()
{
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(void *)(v1 + 16) = &_swiftEmptyArrayStorage;
  double result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + sub_10007CFB4(v0 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(void *)(v1 + 72) = 0LL;
  return result;
}

uint64_t sub_10007BCD8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t sub_10007BD00()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t sub_10007BD28()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t sub_10007BD50()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))();
}

uint64_t sub_10007BD78()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216LL))();
}

uint64_t sub_10007BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015A068);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_10007BDEC(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_10015A058);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease(a1);
  }
  LODWORD(v62) = a2;
  uint64_t v59 = v3;
  uint64_t v17 = *(int *)(v12 + 48);
  unint64_t v58 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v58;
  uint64_t v64 = *(void *)(v13 + 72);
  uint64_t v61 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10001A148(v18, (uint64_t)v15, &qword_10015A058);
  uint64_t v60 = v8;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v65 = v7;
  uint64_t v66 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v63 = v17;
  char v20 = v15[v17];
  unint64_t v21 = (void *)*a3;
  unint64_t v23 = sub_100054A3C((uint64_t)v10);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v62 & 1) != 0)
    {
      if ((v22 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_10007C27C();
      if ((v27 & 1) != 0) {
        goto LABEL_10;
      }
    }

void *sub_10007C27C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_10015A060);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    *unint64_t v23 = v7;
    return result;
  }

  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v25) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }

uint64_t sub_10007C49C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100005FB4(&qword_10015A060);
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t v41 = v10;
LABEL_44:
    uint64_t result = swift_release(v41);
    uint64_t *v3 = v12;
    return result;
  }

  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  BOOL v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v45 = v3;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  int v17 = a2;
  uint64_t v18 = v11 + 64;
  uint64_t v49 = v10;
  uint64_t result = swift_retain(v10);
  int64_t v20 = 0LL;
  HIDWORD(v44) = v17;
  uint64_t v21 = 16LL;
  if ((v17 & 1) != 0) {
    uint64_t v21 = 32LL;
  }
  uint64_t v48 = v21;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_26;
    }

    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v25 >= v46)
    {
      uint64_t v42 = v49;
      swift_release(v49);
      uint64_t v3 = v45;
      uint64_t v26 = v47;
      if ((v44 & 0x100000000LL) != 0)
      {
LABEL_39:
        uint64_t v43 = 1LL << *(_BYTE *)(v42 + 32);
        if (v43 >= 64) {
          bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v26 = -1LL << v43;
        }
        *(void *)(v42 + 16) = 0LL;
      }

size_t sub_10007C82C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10007C918(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

uint64_t sub_10007C848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015A058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NullSystemPolicyClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd22NullSystemPolicyClient);
}

uint64_t type metadata accessor for AllowAllSystemPolicyClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd26AllowAllSystemPolicyClient);
}

uint64_t sub_10007C8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015A070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

size_t sub_10007C918(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_10015A3B0);
  uint64_t v11 = *(void *)(sub_100005FB4(&qword_10015A058) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = sub_100005FB4(&qword_10015A058);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  int64_t v20 = (char *)v15 + v19;
  uint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20);
  }

  swift_release(a4);
  return (size_t)v15;
}

char *sub_10007CA94(uint64_t a1, uint64_t a2)
{
  void (*v37)(void *__return_ptr, size_t);
  char *v38;
  int64_t v39;
  char *v40;
  void v41[5];
  void v42[5];
  char *v43;
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v40 = (char *)v34 - v11;
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  if (v12)
  {
    uint64_t v43 = (char *)_swiftEmptyArrayStorage;
    size_t v14 = sub_10003DFCC(0LL, v12, 0);
    unint64_t v36 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v15 = a1 + v36;
    char v37 = *(void (**)(void *__return_ptr, size_t))(*(void *)a2 + 128LL);
    unint64_t v38 = v10;
    uint64_t v16 = *(void *)(v7 + 72);
    v34[1] = a2;
    uint64_t v35 = v16;
    while (1)
    {
      v37(v42, v14);
      BOOL v39 = v12;
      if (!v42[3]) {
        break;
      }
      sub_100005F70((uint64_t)v42, (uint64_t)v41);
      sub_10007CFB4((uint64_t)v42);
      uint64_t v17 = v3;
      uint64_t v18 = v41[4];
      unint64_t v19 = (char *)sub_100005110(v41, v41[3]);
      uint64_t v20 = URL.path.getter(v19);
      uint64_t v22 = v21;
      uint64_t v13 = v19;
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(v18 + 152))(v20);
      uint64_t v3 = v17;
      if (v17)
      {
        swift_bridgeObjectRelease(v22);
        sub_100006034(v41);
        swift_release(v43);
        return v13;
      }

      uint64_t v25 = v23;
      uint64_t v26 = v24;
      swift_bridgeObjectRelease(v22);
      sub_100006034(v41);
      uint64_t v10 = v38;
      uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v38, v15, v6);
      if (!v26) {
        goto LABEL_8;
      }
LABEL_9:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      URL.init(fileURLWithPath:)(v25, v26);
      swift_bridgeObjectRelease(v26);
      uint64_t v13 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10003DFCC(0LL, *((void *)v13 + 2) + 1LL, 1);
        uint64_t v13 = v43;
      }

      int64_t v29 = v39;
      unint64_t v31 = *((void *)v13 + 2);
      unint64_t v30 = *((void *)v13 + 3);
      if (v31 >= v30 >> 1)
      {
        sub_10003DFCC(v30 > 1, v31 + 1, 1);
        uint64_t v13 = v43;
      }

      *((void *)v13 + 2) = v31 + 1;
      uint64_t v32 = v35;
      size_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(&v13[v36 + v31 * v35], v40, v6);
      uint64_t v43 = v13;
      v15 += v32;
      int64_t v12 = v29 - 1;
      uint64_t v10 = v38;
      if (!v12) {
        return v13;
      }
    }

    sub_10007CFB4((uint64_t)v42);
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v15, v6);
LABEL_8:
    uint64_t v25 = URL.path.getter(v27);
    uint64_t v26 = v28;
    goto LABEL_9;
  }

  return v13;
}

void *sub_10007CD48(uint64_t a1, uint64_t a2)
{
  void (*v13)(void *__return_ptr);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *__return_ptr);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void v34[3];
  uint64_t v35;
  uint64_t v36;
  void v37[5];
  void *v38;
  uint64_t v5 = sub_100005FB4(&qword_10015A058);
  unint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v33 = v2;
    unint64_t v38 = _swiftEmptyArrayStorage;
    sub_10007C82C(0LL, v8, 0);
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void (**)(void *__return_ptr))(*(void *)a2 + 128LL);
    int64_t v29 = v10;
    unint64_t v30 = v13;
    uint64_t v27 = *(void *)(v11 + 72);
    uint64_t v28 = v11;
    do
    {
      size_t v14 = URL.path.getter(v10);
      uint64_t v16 = v15;
      v30(v37);
      if (v37[3])
      {
        sub_100005F70((uint64_t)v37, (uint64_t)v34);
        sub_10007CFB4((uint64_t)v37);
        uint64_t v17 = v35;
        uint64_t v18 = v36;
        uint64_t v9 = sub_100005110(v34, v35);
        unint64_t v19 = v33;
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 224))(v14, v16, v17, v18);
        if (v19)
        {
          swift_bridgeObjectRelease(v16);
          sub_100006034(v34);
          swift_release(v38);
          return v9;
        }

        uint64_t v21 = v20;
        uint64_t v33 = 0LL;
        swift_bridgeObjectRelease(v16);
        sub_100006034(v34);
      }

      else
      {
        swift_bridgeObjectRelease(v16);
        sub_10007CFB4((uint64_t)v37);
        uint64_t v21 = 0;
      }

      uint64_t v22 = *(int *)(v32 + 48);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v12, v29);
      v7[v22] = v21 & 1;
      uint64_t v9 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_10007C82C(0LL, v9[2] + 1LL, 1);
        uint64_t v9 = v38;
      }

      uint64_t v24 = v9[2];
      uint64_t v23 = v9[3];
      if (v24 >= v23 >> 1)
      {
        sub_10007C82C(v23 > 1, v24 + 1, 1);
        uint64_t v9 = v38;
      }

      v9[2] = v24 + 1;
      uint64_t v10 = sub_10007C848( (uint64_t)v7,  (uint64_t)v9 + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
            + *(void *)(v31 + 72) * v24);
      v12 += v27;
      --v8;
    }

    while (v8);
  }

  return v9;
}

uint64_t sub_10007CFB4(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_10015A070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AllowARVOnlySystemPolicyClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd30AllowARVOnlySystemPolicyClient);
}

uint64_t sub_10007D014(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for URL(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10007D054()
{
  return sub_10007A380();
}

uint64_t sub_10007D06C()
{
  return sub_10007A330();
}

uint64_t sub_10007D080()
{
  return sub_10007A358();
}

uint64_t sub_10007D094()
{
  return sub_10007A3A8();
}

uint64_t sub_10007D0A8()
{
  return sub_10007A3F8();
}

uint64_t sub_10007D0BC()
{
  return sub_100078320();
}

uint64_t sub_10007D0D0()
{
  return sub_10007A448();
}

uint64_t sub_10007D0EC()
{
  return sub_10007A3D0();
}

uint64_t sub_10007D100()
{
  return sub_10007A420();
}

unint64_t sub_10007D114()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10007D130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10007DE40(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10007D15C(uint64_t a1)
{
  unint64_t v2 = sub_10007FF90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D184(uint64_t a1)
{
  unint64_t v2 = sub_10007FF90();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10007D1AC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10007DEC4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10007D1D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v6 = [v5 executablePath];

  if (!v6)
  {
    unint64_t v44 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v44, 0LL, 0LL);
    *(void *)uint64_t v46 = 0xD000000000000026LL;
    *(void *)(v46 + 8) = 0x80000001001255A0LL;
LABEL_17:
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(void *)(v46 + 64) = 0LL;
    *(_BYTE *)(v46 + 72) = 33;
    return swift_willThrow(v45);
  }

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100005110(a1, v10);
  sub_1001073DC(v10, v11);
  uint64_t v12 = *((void *)&v100 + 1);
  uint64_t v13 = v101;
  sub_100005110(&v99, *((uint64_t *)&v100 + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 112))( &v116,  v7,  v9,  1LL,  v12,  v13);
  swift_bridgeObjectRelease(v9);
  if (!v117)
  {
    sub_100012824((uint64_t)&v116, &qword_100158910);
    sub_100006034(&v99);
    unint64_t v47 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v47, 0LL, 0LL);
    *(void *)uint64_t v46 = 0xD00000000000002ALL;
    *(void *)(v46 + 8) = 0x80000001001255D0LL;
    goto LABEL_17;
  }

  uint64_t v121 = v2;
  uint64_t v96 = a2;
  sub_100005158(&v116, (uint64_t)v118);
  sub_100006034(&v99);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100005110(a1, v14);
  sub_100071818(v14, v15);
  uint64_t v16 = *((void *)&v100 + 1);
  uint64_t v17 = v101;
  sub_100005110(&v99, *((uint64_t *)&v100 + 1));
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 192))(v16, v17);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_100006034(&v99);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100005110(a1, v23);
  sub_100071818(v23, v24);
  uint64_t v25 = *((void *)&v100 + 1);
  uint64_t v26 = v101;
  sub_100005110(&v99, *((uint64_t *)&v100 + 1));
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 184))(v25, v26);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_100006034(&v99);
  uint64_t v32 = sub_100005FB4(&qword_10015A3C0);
  uint64_t inited = swift_initStackObject(v32, v115);
  *(_OWORD *)(inited + 16) = xmmword_10010F440;
  *(void *)(inited + 32) = v18;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v20;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 56) = v27;
  *(void *)(inited + 64) = v29;
  *(void *)(inited + 72) = v31;
  uint64_t v34 = (char *)_swiftEmptyArrayStorage;
  if (v20 != 1)
  {
    swift_bridgeObjectRetain(v20);
    uint64_t v34 = sub_10007DD28(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v36 = *((void *)v34 + 2);
    unint64_t v35 = *((void *)v34 + 3);
    if (v36 >= v35 >> 1) {
      uint64_t v34 = sub_10007DD28((char *)(v35 > 1), v36 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v36 + 1;
    char v37 = &v34[24 * v36];
    *((void *)v37 + 4) = v18;
    *((void *)v37 + 5) = v20;
    *((void *)v37 + 6) = v22;
  }

  if (v29 != 1)
  {
    swift_bridgeObjectRetain(v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
      uint64_t v34 = sub_10007DD28(0LL, *((void *)v34 + 2) + 1LL, 1, v34);
    }
    unint64_t v39 = *((void *)v34 + 2);
    unint64_t v38 = *((void *)v34 + 3);
    if (v39 >= v38 >> 1) {
      uint64_t v34 = sub_10007DD28((char *)(v38 > 1), v39 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v39 + 1;
    uint64_t v40 = &v34[24 * v39];
    *((void *)v40 + 4) = v27;
    *((void *)v40 + 5) = v29;
    *((void *)v40 + 6) = v31;
  }

  swift_release(inited);
  if (sub_1000D26D0())
  {
    swift_bridgeObjectRelease(v34);
    unint64_t v41 = sub_100012624();
    uint64_t v42 = swift_allocError(&type metadata for KMError, v41, 0LL, 0LL);
    *(void *)uint64_t v43 = 0xD000000000000029LL;
    *(void *)(v43 + 8) = 0x8000000100125650LL;
LABEL_34:
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = 0u;
    *(_OWORD *)(v43 + 48) = 0u;
    *(void *)(v43 + 64) = 0LL;
    *(_BYTE *)(v43 + 72) = 33;
    swift_willThrow(v42);
    return sub_100006034(v118);
  }

  uint64_t v49 = *((void *)v34 + 2);
  if (!v49)
  {
LABEL_26:
    *(void *)&__int128 v99 = 0LL;
    *((void *)&v99 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(77LL);
    v65._countAndFlagsBits = 0xD00000000000004ALL;
    v65._object = (void *)0x8000000100125600LL;
    String.append(_:)(v65);
    int64_t v66 = *((void *)v34 + 2);
    if (v66)
    {
      *(void *)&__int128 v116 = _swiftEmptyArrayStorage;
      sub_10000CC84(0, v66, 0);
      uint64_t v67 = (void *)v116;
      unint64_t v68 = v34;
      uint64_t v69 = v34 + 52;
      do
      {
        uint64_t v70 = *(void *)(v69 - 20);
        uint64_t v71 = *(void *)(v69 - 12);
        unint64_t v72 = *(void *)(v69 - 4);
        swift_bridgeObjectRetain(v71);
        uint64_t v73 = sub_1000D409C(v70, v71, v72);
        uint64_t v75 = v74;
        swift_bridgeObjectRelease(v71);
        *(void *)&__int128 v116 = v67;
        unint64_t v77 = v67[2];
        unint64_t v76 = v67[3];
        if (v77 >= v76 >> 1)
        {
          sub_10000CC84(v76 > 1, v77 + 1, 1);
          uint64_t v67 = (void *)v116;
        }

        v69 += 24;
        v67[2] = v77 + 1;
        int64_t v78 = &v67[2 * v77];
        v78[4] = v73;
        v78[5] = v75;
        --v66;
      }

      while (v66);
      swift_bridgeObjectRelease(v68);
    }

    else
    {
      swift_bridgeObjectRelease(v34);
      uint64_t v67 = _swiftEmptyArrayStorage;
    }

    v79._countAndFlagsBits = Array.description.getter(v67, &type metadata for String);
    object = v79._object;
    String.append(_:)(v79);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(object);
    v81._countAndFlagsBits = 46LL;
    v81._object = (void *)0xE100000000000000LL;
    String.append(_:)(v81);
    __int128 v82 = v99;
    unint64_t v83 = sub_100012624();
    uint64_t v42 = swift_allocError(&type metadata for KMError, v83, 0LL, 0LL);
    *(_OWORD *)uint64_t v43 = v82;
    goto LABEL_34;
  }

  swift_bridgeObjectRetain(v34);
  uint64_t v95 = v34;
  unint64_t v50 = v34 + 52;
  while (1)
  {
    uint64_t v51 = *(void *)(v50 - 12);
    uint64_t v53 = v119;
    uint64_t v52 = v120;
    uint64_t v97 = *(void *)(v50 - 4);
    uint64_t v98 = *(void *)(v50 - 20);
    sub_100005110(v118, v119);
    swift_bridgeObjectRetain(v51);
    uint64_t v54 = sub_10008FB50();
    uint64_t v55 = *v54;
    uint64_t v56 = v54[1];
    uint64_t v57 = v54[2];
    uint64_t v58 = v54[3];
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v58);
    uint64_t v59 = v55;
    uint64_t v60 = v121;
    uint64_t v61 = sub_1000E10E0(v59, v56, v57, v58, v98, v51, v97, v53, v52);
    if (!v60) {
      break;
    }
    swift_errorRelease(v60);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v51);
    uint64_t v121 = 0LL;
LABEL_21:
    v50 += 24;
    if (!--v49)
    {
      uint64_t v34 = v95;
      swift_bridgeObjectRelease(v95);
      goto LABEL_26;
    }
  }

  uint64_t v63 = v61;
  unint64_t v64 = v62;
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v51);
  if (v64 >> 60 == 15)
  {
    uint64_t v121 = 0LL;
    goto LABEL_21;
  }

  swift_bridgeObjectRelease_n(v95, 2LL);
  uint64_t v84 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  uint64_t v86 = PropertyListDecoder.init()(v85);
  unint64_t v87 = sub_10007DFF0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v99,  &type metadata for KernelManagementConfiguration,  v63,  v64,  &type metadata for KernelManagementConfiguration,  v87);
  sub_10002193C(v63, v64);
  swift_release(v86);
  __int128 v88 = v112;
  *(_OWORD *)(v96 + 192) = v111;
  *(_OWORD *)(v96 + 208) = v88;
  *(_OWORD *)(v96 + 224) = v113;
  *(void *)(v96 + 2sub_10007CFB4(v0 + 40) = v114;
  __int128 v89 = v108;
  *(_OWORD *)(v96 + 128) = v107;
  *(_OWORD *)(v96 + 144) = v89;
  __int128 v90 = v110;
  *(_OWORD *)(v96 + 160) = v109;
  *(_OWORD *)(v96 + 176) = v90;
  __int128 v91 = v104;
  *(_OWORD *)(v96 + 64) = v103;
  *(_OWORD *)(v96 + 80) = v91;
  __int128 v92 = v106;
  *(_OWORD *)(v96 + 96) = v105;
  *(_OWORD *)(v96 + 112) = v92;
  __int128 v93 = v100;
  *(_OWORD *)uint64_t v96 = v99;
  *(_OWORD *)(v96 + 16) = v93;
  __int128 v94 = v102;
  *(_OWORD *)(v96 + 32) = v101;
  *(_OWORD *)(v96 + 48) = v94;
  return sub_100006034(v118);
}

uint64_t sub_10007DA08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007DA48 + 4 * aP[a1]))( 0x56726567616E614DLL,  0xEE006E6F69737265LL);
}

uint64_t sub_10007DA48()
{
  return 0x61506C656E72654BLL;
}

uint64_t sub_10007DA64()
{
  return 0x6365746968637241LL;
}

unint64_t sub_10007DA88()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10007DBEC()
{
  return 0x6F69747065637845LL;
}

uint64_t sub_10007DC0C()
{
  return sub_10007DA08(*v0);
}

uint64_t sub_10007DC14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007E034(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007DC38(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10007DC44(uint64_t a1)
{
  unint64_t v2 = sub_10007FEAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007DC6C(uint64_t a1)
{
  unint64_t v2 = sub_10007FEAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10007DC94@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v5;
    *(_OWORD *)(a2 + 224) = v25;
    *(void *)(a2 + 2sub_10007CFB4(v0 + 40) = v26;
    __int128 v6 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v6;
    __int128 v7 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v7;
    __int128 v8 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v8;
    __int128 v9 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v9;
    __int128 v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    double result = *(double *)&v13;
    __int128 v11 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v11;
  }

  return result;
}

char *sub_10007DD28(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015A3D8);
    __int128 v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    __int128 v11 = (char *)_swiftEmptyArrayStorage;
  }

  __int128 v13 = v11 + 32;
  __int128 v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10007DE40(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100125890LL)
  {
    swift_bridgeObjectRelease(0x8000000100125890LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100125890LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

void *sub_10007DEC4(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_10015A3E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100005110(a1, v7);
  unint64_t v10 = sub_10007FF90();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    uint64_t v11 = sub_100005FB4(&qword_10015A3E8);
    unint64_t v12 = sub_10007FFD4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = (void *)v15[1];
    sub_100006034(a1);
  }

  return v9;
}

unint64_t sub_10007DFF0()
{
  unint64_t result = qword_10015A3B8;
  if (!qword_10015A3B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100112B10, &type metadata for KernelManagementConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015A3B8);
  }

  return result;
}

uint64_t sub_10007E034(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x56726567616E614DLL && a2 == 0xEE006E6F69737265LL)
  {
    unint64_t v5 = 0xEE006E6F69737265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x56726567616E614DLL, 0xEE006E6F69737265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x61506C656E72654BLL && a2 == 0xEA00000000006874LL)
  {
    unint64_t v7 = 0xEA00000000006874LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61506C656E72654BLL, 0xEA00000000006874LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6365746968637241LL && a2 == 0xED00007365727574LL)
  {
    unint64_t v8 = 0xED00007365727574LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6365746968637241LL, 0xED00007365727574LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v9 = 0x8000000100125680LL;
    if (a2 == 0x8000000100125680LL) {
      goto LABEL_25;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100125680LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v10 = 0x80000001001256A0LL;
    if (a2 == 0x80000001001256A0LL) {
      goto LABEL_30;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001001256A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x80000001001256C0LL)
  {
    unint64_t v11 = 0x80000001001256C0LL;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x80000001001256C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_36;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001256E0LL)
  {
    unint64_t v12 = 0x80000001001256E0LL;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001256E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_42;
  }

  if (a1 == 0xD000000000000022LL && a2 == 0x8000000100125700LL)
  {
    unint64_t v13 = 0x8000000100125700LL;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x8000000100125700LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_48;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v14 = 0x8000000100125730LL;
    if (a2 == 0x8000000100125730LL) {
      goto LABEL_53;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100125730LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v15 = 0x8000000100125750LL;
    if (a2 == 0x8000000100125750LL) {
      goto LABEL_58;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000100125750LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100125770LL)
  {
    unint64_t v16 = 0x8000000100125770LL;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100125770LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_64;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x8000000100125790LL)
  {
    unint64_t v17 = 0x8000000100125790LL;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000100125790LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_70;
  }

  if (a1 == 0xD000000000000021LL && a2 == 0x80000001001257B0LL)
  {
    unint64_t v18 = 0x80000001001257B0LL;
LABEL_76:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x80000001001257B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_76;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v19 = 0x80000001001257E0LL;
    if (a2 == 0x80000001001257E0LL) {
      goto LABEL_81;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000001001257E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_81:
    swift_bridgeObjectRelease(v19);
    return 13LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v20 = 0x8000000100125800LL;
    if (a2 == 0x8000000100125800LL) {
      goto LABEL_86;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100125800LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v20);
    return 14LL;
  }

  if (a1 == 0xD000000000000023LL && a2 == 0x8000000100125820LL)
  {
    unint64_t v21 = 0x8000000100125820LL;
LABEL_92:
    swift_bridgeObjectRelease(v21);
    return 15LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x8000000100125820LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
    goto LABEL_92;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100125850LL)
  {
    unint64_t v22 = 0x8000000100125850LL;
LABEL_98:
    swift_bridgeObjectRelease(v22);
    return 16LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100125850LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
    goto LABEL_98;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v23 = 0x8000000100125870LL;
    if (a2 == 0x8000000100125870LL) {
      goto LABEL_103;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100125870LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_103:
    swift_bridgeObjectRelease(v23);
    return 17LL;
  }

  if (a1 == 0x6F69747065637845LL && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000736ELL);
    return 18LL;
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69747065637845LL, 0xEA0000000000736ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0) {
      return 18LL;
    }
    else {
      return 19LL;
    }
  }

void *sub_10007E758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_10015A3C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v95 = a1;
  sub_100005110(a1, v9);
  unint64_t v11 = sub_10007FEAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KernelManagementConfiguration.CodingKeys,  &type metadata for KernelManagementConfiguration.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)sub_100006034(v95);
  }
  uint64_t v82 = a2;
  LOBYTE(v112[0]) = 0;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5, v12);
  LOBYTE(v112[0]) = 1;
  uint64_t v80 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v81 = v13;
  uint64_t v15 = v14;
  uint64_t v16 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  LOBYTE(v96) = 2;
  unint64_t v17 = sub_10007FEF0();
  swift_bridgeObjectRetain(v15);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v17);
  uint64_t v94 = v15;
  unint64_t v87 = v17;
  uint64_t v18 = v112[0];
  LOBYTE(v112[0]) = 3;
  swift_bridgeObjectRetain(v18);
  uint64_t v78 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v79 = v18;
  LOBYTE(v112[0]) = 4;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v93 = v20;
  uint64_t v77 = v21;
  LOBYTE(v112[0]) = 5;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain(v22);
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v92 = v23;
  uint64_t v76 = v24;
  LOBYTE(v112[0]) = 6;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v91 = v26;
  uint64_t v75 = v27;
  LOBYTE(v112[0]) = 7;
  uint64_t v29 = v28;
  swift_bridgeObjectRetain(v28);
  uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v90 = v29;
  uint64_t v74 = v30;
  LOBYTE(v96) = 8;
  uint64_t v32 = v31;
  swift_bridgeObjectRetain(v31);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  uint64_t v89 = v32;
  LOBYTE(v96) = 9;
  uint64_t v73 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  LOBYTE(v96) = 10;
  uint64_t v33 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  LOBYTE(v96) = 11;
  uint64_t v88 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  unint64_t v34 = v112[0];
  LOBYTE(v112[0]) = 12;
  unint64_t v87 = v34;
  swift_bridgeObjectRetain(v34);
  uint64_t v72 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v86 = v35;
  LOBYTE(v112[0]) = 13;
  swift_bridgeObjectRetain(v35);
  uint64_t v71 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v85 = v36;
  LOBYTE(v112[0]) = 14;
  swift_bridgeObjectRetain(v36);
  uint64_t v70 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  uint64_t v84 = v37;
  LOBYTE(v112[0]) = 15;
  swift_bridgeObjectRetain(v37);
  uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  uint64_t v83 = v39;
  uint64_t v40 = v38;
  LOBYTE(v112[0]) = 16;
  swift_bridgeObjectRetain(v39);
  uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  uint64_t v42 = v41;
  LOBYTE(v112[0]) = 17;
  swift_bridgeObjectRetain(v41);
  *(void *)&__int128 v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  *((void *)&v68 + 1) = v43;
  v113[0] = 18;
  unint64_t v44 = sub_10007FF4C();
  swift_bridgeObjectRetain(*((void *)&v68 + 1));
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for KernelManagementConfiguration.ExceptionsConfiguration,  v113,  v5,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration,  v44);
  uint64_t v67 = v33;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v65 = v114;
  *(void *)&__int128 v96 = v81;
  *((void *)&v96 + 1) = v80;
  uint64_t v45 = v94;
  *(void *)&__int128 v97 = v94;
  *((void *)&v97 + 1) = v79;
  uint64_t v46 = v92;
  *(void *)&__int128 v98 = v78;
  *((void *)&v98 + 1) = v93;
  *(void *)&__int128 v99 = v77;
  *((void *)&v99 + 1) = v92;
  uint64_t v47 = v90;
  *(void *)&__int128 v100 = v76;
  *((void *)&v100 + 1) = v91;
  *(void *)&__int128 v101 = v75;
  *((void *)&v101 + 1) = v90;
  *(void *)&__int128 v102 = v74;
  *((void *)&v102 + 1) = v89;
  *(void *)&__int128 v103 = v73;
  *((void *)&v103 + 1) = v33;
  uint64_t v48 = v33;
  *(void *)&__int128 v104 = v88;
  *((void *)&v104 + 1) = v87;
  *(void *)&__int128 v105 = v72;
  *((void *)&v105 + 1) = v86;
  *(void *)&__int128 v106 = v71;
  *((void *)&v106 + 1) = v85;
  *(void *)&__int128 v107 = v70;
  *((void *)&v107 + 1) = v84;
  uint64_t v66 = v40;
  *(void *)&__int128 v108 = v40;
  *((void *)&v108 + 1) = v83;
  *(void *)&__int128 v109 = v69;
  *((void *)&v109 + 1) = v42;
  uint64_t v49 = v42;
  uint64_t v50 = *((void *)&v68 + 1);
  __int128 v110 = v68;
  uint64_t v111 = v114;
  sub_100012A18(&v96);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v88);
  unint64_t v51 = v87;
  swift_bridgeObjectRelease(v87);
  uint64_t v52 = v86;
  swift_bridgeObjectRelease(v86);
  uint64_t v53 = v85;
  swift_bridgeObjectRelease(v85);
  uint64_t v54 = v84;
  swift_bridgeObjectRelease(v84);
  uint64_t v55 = v83;
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v50);
  sub_100006034(v95);
  v112[0] = v81;
  v112[1] = v80;
  v112[2] = v94;
  v112[3] = v79;
  v112[4] = v78;
  v112[5] = v93;
  v112[6] = v77;
  v112[7] = v92;
  v112[8] = v76;
  v112[9] = v91;
  v112[10] = v75;
  v112[11] = v90;
  v112[12] = v74;
  v112[13] = v89;
  v112[14] = v73;
  v112[15] = v67;
  v112[16] = v88;
  v112[17] = v51;
  v112[18] = v72;
  v112[19] = v52;
  v112[20] = v71;
  v112[21] = v53;
  v112[22] = v70;
  v112[23] = v54;
  v112[24] = v66;
  v112[25] = v55;
  v112[26] = v69;
  v112[27] = v49;
  v112[28] = v68;
  v112[29] = v50;
  v112[30] = v65;
  unint64_t result = sub_100010E6C(v112);
  __int128 v57 = v109;
  uint64_t v58 = v82;
  *(_OWORD *)(v82 + 192) = v108;
  *(_OWORD *)(v58 + 208) = v57;
  *(_OWORD *)(v58 + 224) = v110;
  *(void *)(v58 + 2sub_10007CFB4(v0 + 40) = v111;
  __int128 v59 = v105;
  *(_OWORD *)(v58 + 128) = v104;
  *(_OWORD *)(v58 + 144) = v59;
  __int128 v60 = v107;
  *(_OWORD *)(v58 + 160) = v106;
  *(_OWORD *)(v58 + 176) = v60;
  __int128 v61 = v101;
  *(_OWORD *)(v58 + 64) = v100;
  *(_OWORD *)(v58 + 80) = v61;
  __int128 v62 = v103;
  *(_OWORD *)(v58 + 96) = v102;
  *(_OWORD *)(v58 + 112) = v62;
  __int128 v63 = v97;
  *(_OWORD *)uint64_t v58 = v96;
  *(_OWORD *)(v58 + 16) = v63;
  __int128 v64 = v99;
  *(_OWORD *)(v58 + 32) = v98;
  *(_OWORD *)(v58 + 48) = v64;
  return result;
}

uint64_t destroy for KernelManagementConfiguration(void *a1)
{
  return swift_bridgeObjectRelease(a1[30]);
}

uint64_t initializeWithCopy for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = v10;
  uint64_t v12 = *(void *)(a2 + 128);
  uint64_t v20 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v20;
  uint64_t v19 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v19;
  uint64_t v18 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v18;
  uint64_t v17 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v17;
  uint64_t v16 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v16;
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  uint64_t v14 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v14;
  uint64_t v21 = *(void *)(a2 + 240);
  *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = v21;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v21);
  return a1;
}

void *assignWithCopy for KernelManagementConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[14];
  uint64_t v19 = a1[14];
  a1[14] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a2[15];
  uint64_t v21 = a1[15];
  a1[15] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a2[16];
  uint64_t v23 = a1[16];
  a1[16] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[17];
  uint64_t v25 = a1[17];
  a1[17] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[18] = a2[18];
  uint64_t v26 = a2[19];
  uint64_t v27 = a1[19];
  a1[19] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[20] = a2[20];
  uint64_t v28 = a2[21];
  uint64_t v29 = a1[21];
  a1[21] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  a1[22] = a2[22];
  uint64_t v30 = a2[23];
  uint64_t v31 = a1[23];
  a1[23] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  a1[24] = a2[24];
  uint64_t v32 = a2[25];
  uint64_t v33 = a1[25];
  a1[25] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  a1[26] = a2[26];
  uint64_t v34 = a2[27];
  uint64_t v35 = a1[27];
  a1[27] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  a1[28] = a2[28];
  uint64_t v36 = a2[29];
  uint64_t v37 = a1[29];
  a1[29] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = a1[30];
  uint64_t v39 = a2[30];
  a1[30] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v38);
  return a1;
}

__n128 initializeWithTake for KernelManagementConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  __int128 v12 = a2[13];
  __int128 v13 = a2[14];
  *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(*(void *)(a1 + 104));
  uint64_t v13 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(*(void *)(a1 + 120));
  uint64_t v14 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 152);
  uint64_t v17 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 168);
  uint64_t v19 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 184);
  uint64_t v21 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 200);
  uint64_t v23 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 216);
  uint64_t v25 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v24;
  swift_bridgeObjectRelease(v25);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease(*(void *)(a1 + 232));
  uint64_t v26 = *(void *)(a1 + 240);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 248) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration()
{
  return &type metadata for KernelManagementConfiguration;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration;
}

unint64_t sub_10007FEAC()
{
  unint64_t result = qword_100162B00;
  if (!qword_100162B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100112D44, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162B00);
  }

  return result;
}

unint64_t sub_10007FEF0()
{
  unint64_t result = qword_100158030;
  if (!qword_100158030)
  {
    uint64_t v1 = sub_100012010((uint64_t *)&unk_10015A5A0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100158030);
  }

  return result;
}

unint64_t sub_10007FF4C()
{
  unint64_t result = qword_10015A3D0;
  if (!qword_10015A3D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100112AE8,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015A3D0);
  }

  return result;
}

unint64_t sub_10007FF90()
{
  unint64_t result = qword_100162B08[0];
  if (!qword_100162B08[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100112CF4,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162B08);
  }

  return result;
}

unint64_t sub_10007FFD4()
{
  unint64_t result = qword_10015A3F0;
  if (!qword_10015A3F0)
  {
    uint64_t v1 = sub_100012010(&qword_10015A3E8);
    sub_10007FEF0();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015A3F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100080080 + 4 * byte_100112AD3[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000800A0 + 4 * byte_100112AD8[v4]))();
  }
}

_BYTE *sub_100080080(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000800A0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000800A8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000800B0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000800B8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000800C0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_1000801B8 + 4 * byte_100112AE2[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1000801EC + 4 * byte_100112ADD[v4]))();
}

uint64_t sub_1000801EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000801F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000801FCLL);
  }
  return result;
}

uint64_t sub_100080208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100080210LL);
  }
  *(_BYTE *)unint64_t result = a2 + 18;
  return result;
}

uint64_t sub_100080214(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008021C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.CodingKeys;
}

unint64_t sub_10008023C()
{
  unint64_t result = qword_100162C10[0];
  if (!qword_100162C10[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100112C14, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, qword_100162C10);
  }

  return result;
}

unint64_t sub_100080284()
{
  unint64_t result = qword_100162E20[0];
  if (!qword_100162E20[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100112CCC,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162E20);
  }

  return result;
}

unint64_t sub_1000802CC()
{
  unint64_t result = qword_100162F30;
  if (!qword_100162F30)
  {
    unint64_t result = swift_getWitnessTable( &unk_100112C3C,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162F30);
  }

  return result;
}

unint64_t sub_100080314()
{
  unint64_t result = qword_100162F38[0];
  if (!qword_100162F38[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100112C64,  &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162F38);
  }

  return result;
}

unint64_t sub_10008035C()
{
  unint64_t result = qword_100162FC0;
  if (!qword_100162FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100112B84, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162FC0);
  }

  return result;
}

unint64_t sub_1000803A4()
{
  unint64_t result = qword_100162FC8[0];
  if (!qword_100162FC8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100112BAC, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, qword_100162FC8);
  }

  return result;
}

uint64_t sub_1000803E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  uint64_t v55 = v3;
  __chkstk_darwin(v2);
  uint64_t v53 = (void *)((char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v0 + 24);
  aBlock = *(void ***)(v0 + 16);
  uint64_t v58 = v14;
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = 47LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  uint64_t v16 = aBlock;
  uint64_t v17 = v58;
  aBlock = (void **)*(unsigned __int8 *)(v0
                                       + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context);
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v20 = v19;
  aBlock = v16;
  uint64_t v58 = v17;
  swift_bridgeObjectRetain(v17);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v20);
  uint64_t v22 = (uint64_t)aBlock;
  unint64_t v23 = v58;
  v48[1] = sub_1000807B4();
  unint64_t v24 = sub_100080F4C(0x3CuLL, v22, v23);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v23);
  uint64_t v31 = static String._fromSubstring(_:)(v24, v26, v28, v30);
  uint64_t v33 = v32;
  uint64_t v34 = swift_bridgeObjectRelease(v30);
  static DispatchQoS.unspecified.getter(v34);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v35 = sub_100012860( (unint64_t *)&qword_100159CB8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v36 = sub_100005FB4(&qword_100159CC0);
  uint64_t v37 = sub_1000778A4((unint64_t *)&qword_100159CC8, &qword_100159CC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v10, &aBlock, v36, v37, v8, v35);
  (*(void (**)(char *, void, uint64_t))(v49 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v50);
  uint64_t v38 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v31, v33, v13, v10, v7, 0LL);
  __int128 v61 = sub_100080FF4;
  uint64_t v62 = v1;
  aBlock = _NSConcreteStackBlock;
  uint64_t v58 = 1107296256LL;
  __int128 v59 = sub_10000B750;
  __int128 v60 = &unk_100149E50;
  uint64_t v39 = _Block_copy(&aBlock);
  uint64_t v40 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v40);
  uint64_t v56 = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v42 = sub_100005FB4((uint64_t *)&unk_100159E80);
  uint64_t v43 = sub_1000778A4((unint64_t *)&qword_10015ABB0, (uint64_t *)&unk_100159E80);
  unint64_t v44 = v53;
  uint64_t v45 = v42;
  uint64_t v46 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(v53, &v56, v45, v43, v54, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v44, v39);
  _Block_release(v39);

  (*(void (**)(void *, uint64_t))(v55 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v52);
  return swift_release(v62);
}

unint64_t sub_1000807B4()
{
  unint64_t result = qword_100159CB0;
  if (!qword_100159CB0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100159CB0);
  }

  return result;
}

Swift::Int sub_1000807F0()
{
  return OS_dispatch_semaphore.signal()();
}

void *sub_100080818@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100080838(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  static Date.now.getter(v7);
  *(void *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0LL);
  *(_BYTE *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v6;
  return v7;
}

uint64_t sub_1000808B0()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_timeInfo;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_100080918()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136LL))();
}

uint64_t sub_100080940()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t sub_100080968()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t sub_100080990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

uint64_t sub_1000809BC()
{
  uint64_t v0 = type metadata accessor for DextLaunchThreadManager();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  if (os_variant_allows_internal_security_policies("kernelmanagerd"))
  {
    uint64_t v2 = sub_100005FB4(&qword_10015A3F8);
    uint64_t v4 = sub_10005083C(8);
    uint64_t result = sub_1000063BC((uint64_t)&v4, v2);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(void *)(v1 + 16) = result;
  qword_1001754F0 = v1;
  return result;
}

uint64_t *sub_100080A3C()
{
  if (qword_100163050 != -1) {
    swift_once(&qword_100163050, sub_1000809BC);
  }
  return &qword_1001754F0;
}

uint64_t sub_100080A7C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = a3 & 1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12)
  {
    __chkstk_darwin(v9);
    v20[-4] = a1;
    v20[-3] = a2;
    LOBYTE(v20[-2]) = v6;
    swift_retain(v12);
    sub_100005FB4(&qword_10015A3F8);
    sub_100006260((void (*)(uint64_t))sub_100081034, (uint64_t)&v20[-6], v12);
    return swift_release(v12);
  }

  else
  {
    uint64_t v14 = sub_1000D349C();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);
    uint64_t v15 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      v20[0] = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v20[0];
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain(a2);
      uint64_t v21 = sub_1000058CC(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v18 + 12) = 2048;
      uint64_t v21 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 14, v18 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Skipping addBreadcrumbForDextWithIdentifier for %s %ld",  (uint8_t *)v18,  0x16u);
      uint64_t v19 = v20[0];
      swift_arrayDestroy(v20[0], 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

uint64_t sub_100080CE4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v2 + 16);
  if (v10)
  {
    __chkstk_darwin(v7);
    v18[-2] = a1;
    v18[-1] = a2;
    swift_retain(v10);
    sub_100005FB4(&qword_10015A3F8);
    sub_100006260((void (*)(uint64_t))sub_1000810F0, (uint64_t)&v18[-4], v10);
    return swift_release(v10);
  }

  else
  {
    uint64_t v12 = sub_1000D349C();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
    uint64_t v13 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.info.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v18[0] = v16 + 4;
      swift_bridgeObjectRetain(a2);
      uint64_t v19 = sub_1000058CC(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v18[0], v16 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Skipping removeBreadcrumbForDextWithIdentifier for %s",  v16,  0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

uint64_t sub_100080F28()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

unint64_t sub_100080F4C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    uint64_t result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15LL, a2, a3);
    if ((v5 & 1) != 0) {
      uint64_t result = 15LL;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

void sub_100080FF4()
{
}

uint64_t sub_10008101C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008102C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100081034(uint64_t *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  char v5 = *(_BYTE *)(v1 + 32);
  uint64_t v6 = type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(0LL);
  uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  static Date.now.getter(v8);
  *(void *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0LL);
  *(_BYTE *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v5;
  uint64_t v9 = *a1;
  uint64_t v11 = v7;
  (*(void (**)(uint64_t *))(*(void *)v9 + 184LL))(&v11);
  return swift_release(v7);
}

uint64_t sub_1000810F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)a1 + 192LL))( *(void *)(v1 + 16),  *(void *)(v1 + 24));
}

unint64_t sub_10008112C()
{
  unint64_t result = qword_10015A400;
  if (!qword_10015A400)
  {
    unint64_t result = swift_getWitnessTable( &unk_100112DAC,  &type metadata for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context);
    atomic_store(result, (unint64_t *)&qword_10015A400);
  }

  return result;
}

uint64_t sub_100081170(uint64_t a1)
{
  uint64_t result = sub_100012860( &qword_10015A408,  type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata,  (uint64_t)&unk_100112E68);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(uint64_t a1)
{
  uint64_t result = qword_1001632E0;
  if (!qword_1001632E0) {
    return swift_getSingletonMetadata( a1,  &nominal type descriptor for DextLaunchThreadManager.DextLaunchDebuggingMetadata);
  }
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd23DextLaunchThreadManager);
}

uint64_t sub_100081208()
{
  return type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(0LL);
}

uint64_t sub_100081210(uint64_t a1)
{
  v4[0] = &unk_100112EE0;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_100112EF8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000812EC + 4 * byte_100112DA5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100081320 + 4 * byte_100112DA0[v4]))();
}

uint64_t sub_100081320(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100081330LL);
  }
  return result;
}

uint64_t sub_10008133C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100081344LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100081348(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081350(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context()
{
  return &type metadata for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context;
}

uint64_t sub_10008136C()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t sub_1000813A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  return swift_release(v3);
}

uint64_t sub_1000813E4(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 96LL);
  uint64_t v2 = swift_retain(a1);
  return v4(v2);
}

uint64_t sub_100081410()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 88LL);
  uint64_t result = v2();
  if (result)
  {
    uint64_t v4 = result;
    char v5 = (void *)(result + 16);
    swift_beginAccess(result + 16, v16, 32LL, 0LL);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v7 = *(void *)(v4 + 48);
    sub_100005110(v5, v6);
    sub_10006AC44(v6, v7);
    swift_endAccess(v16);
    swift_release(v4);
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    sub_100005110(v13, v14);
    uint64_t result = v2();
    if (result)
    {
      uint64_t v10 = result;
      id v11 = *(id *)(result + 64);
      swift_release(v10);
      uint64_t v12 = *(void (**)(id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 8);
      swift_retain(v1);
      v12(v11, sub_10008152C, v1, v8, v9);

      swift_release(v1);
      return sub_100006034(v13);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10008152C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

void sub_100081538(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for XPCUtil();
  if (!sub_1000D7910(a1))
  {
    type = xpc_get_type(a1);
    name = xpc_type_get_name(type);
    uint64_t v30 = String.init(cString:)(name);
    uint64_t v32 = v31;
    uint64_t v33 = static os_log_type_t.error.getter(v30);
    uint64_t v34 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_10010F110;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_100026B64();
    *(void *)(v35 + 32) = v30;
    *(void *)(v35 + sub_10007CFB4(v0 + 40) = v32;
    unint64_t v36 = sub_100026BA8();
    uint64_t v66 = (void *)static OS_os_log.default.getter(v36);
      102LL,
      2LL,
      v35);
    swift_bridgeObjectRelease(v35);

    return;
  }

  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_10010F110;
  unint64_t v68 = 0LL;
  unint64_t v69 = 0xE000000000000000LL;
  uint64_t v67 = a1;
  uint64_t v6 = sub_100005FB4(&qword_10015A598);
  _print_unlocked<A, B>(_:_:)( &v67,  &v68,  v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  unint64_t v7 = v68;
  unint64_t v8 = v69;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_100026B64();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + sub_10007CFB4(v0 + 40) = v8;
  unint64_t v10 = sub_100026BA8();
  id v11 = (void *)static OS_os_log.default.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)( "distnoted event, dictionary contents:\n%{public}s",  48LL,  2LL,  &_mh_execute_header,  v11,  v12,  v5);
  swift_bridgeObjectRelease(v5);

  uint64_t v13 = (void *)swift_unknownObjectRetain(a1);
  BOOL v14 = sub_1000D7CD0(v13);
  if (!v15)
  {
    uint64_t v37 = (void *)swift_unknownObjectRetain(a1);
    BOOL v38 = sub_1000D7CDC(v37);
    if (!v39)
    {
      __int128 v60 = (void *)static OS_os_log.default.getter(v38);
      uint64_t v61 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:type:_:)( "distnoted event, could not make info object",  43LL,  2LL,  &_mh_execute_header,  v60,  v61,  _swiftEmptyArrayStorage);

      return;
    }

    uint64_t v16 = v39;
    if (!v38)
    {
      uint64_t v40 = *(void *)(v39 + 16);
      if (v40)
      {
        uint64_t v65 = v2;
        swift_bridgeObjectRetain(v39);
        uint64_t v63 = v16;
        uint64_t v41 = (uint64_t *)(v16 + 40);
        do
        {
          uint64_t v42 = *(v41 - 1);
          uint64_t v43 = *v41;
          uint64_t v44 = swift_allocObject(v4, 72LL, 7LL);
          *(_OWORD *)(v44 + 16) = xmmword_10010F110;
          *(void *)(v44 + 56) = &type metadata for String;
          *(void *)(v44 + 64) = v9;
          *(void *)(v44 + 32) = v42;
          *(void *)(v44 + sub_10007CFB4(v0 + 40) = v43;
          swift_bridgeObjectRetain(v43);
          uint64_t v46 = (void *)static OS_os_log.default.getter(v45);
          uint64_t v47 = static os_log_type_t.default.getter(v46);
          os_log(_:dso:log:type:_:)( "distnoted app uninstallation event, processing bundle: %{public}s",  65LL,  2LL,  &_mh_execute_header,  v46,  v47,  v44);
          swift_bridgeObjectRelease(v44);

          v41 += 2;
          --v40;
        }

        while (v40);
        uint64_t v16 = v63;
        swift_bridgeObjectRelease(v63);
        uint64_t v2 = v65;
      }

      uint64_t v48 = (*(uint64_t (**)(void))(*(void *)v2 + 88LL))();
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v27 = *(void *)(v48 + 72);
        swift_retain(v27);
        swift_release(v49);
        unint64_t v68 = 0LL;
        unint64_t v69 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease(v69);
        unint64_t v68 = 0xD00000000000001ALL;
        unint64_t v69 = 0x8000000100125AB0LL;
        goto LABEL_19;
      }

uint64_t sub_100081A74()
{
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_100081A98(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 112LL))(*a1);
}

uint64_t type metadata accessor for ApplicationRequestSource()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd24ApplicationRequestSource);
}

uint64_t sub_100081AE4(uint64_t a1, void *a2)
{
  uint64_t v5 = swift_allocObject(v2, 32LL, 7LL);
  sub_100081B30(a1, a2);
  return v5;
}

uint64_t sub_100081B30(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_10010F110;
  swift_retain(a1);
  id v8 = a2;
  unsigned int v9 = [v8 processIdentifier];
  *(void *)(v7 + 56) = &type metadata for Int32;
  *(void *)(v7 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v7 + 32) = v9;
  uint64_t v10 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  id v11 = (void *)static OS_os_log.default.getter(v10);
  static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("incoming connection from pid %d", v13);
  swift_bridgeObjectRelease(v7);

  swift_release(a1);
  return v3;
}

uint64_t sub_100081C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v13 = *(void **)(*(void *)(v3 + 16) + 64LL);
  BOOL v14 = (void *)swift_allocObject(&unk_100149FC0, 40LL, 7LL);
  void v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_100082044;
  uint64_t v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000B750;
  aBlock[3] = &unk_100149FD8;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v13;
  swift_retain(v3);
  uint64_t v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  unint64_t v23 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_100082068();
  uint64_t v19 = sub_100005FB4((uint64_t *)&unk_100159E80);
  unint64_t v20 = sub_1000820B0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v8, &v23, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(void *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v25);
}

uint64_t sub_100081E10(uint64_t a1, void (*a2)(unint64_t))
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = static os_signpost_type_t.event.getter(v6);
  uint64_t v10 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
  static OSSignpostID.exclusive.getter(v11);
  os_signpost(_:dso:log:name:signpostID:)(v9, &_mh_execute_header, v11, "dumpState(withReplyBlock:)", 26LL, 2LL, v8);

  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v20 = a1;
  uint64_t v12 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v12, &off_10015A6C0, v13, v14);
  uint64_t v20 = a1;
  sub_100074A98(v12, (uint64_t)&off_10015A6C0);
  unint64_t v15 = sub_1000996A4();
  uint64_t v17 = v16;
  a2(v15);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_100082018()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100082044()
{
  return sub_100081E10(*(void *)(v0 + 16), *(void (**)(unint64_t))(v0 + 24));
}

uint64_t sub_100082050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100082060(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100082068()
{
  unint64_t result = qword_10015ABA0;
  if (!qword_10015ABA0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10015ABA0);
  }

  return result;
}

unint64_t sub_1000820B0()
{
  unint64_t result = qword_10015ABB0;
  if (!qword_10015ABB0)
  {
    uint64_t v1 = sub_100012010((uint64_t *)&unk_100159E80);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015ABB0);
  }

  return result;
}

void sub_10008216C(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  id v5 = a2;
  (*(void (**)(uint64_t))(a4 + 16))(a4);
}

uint64_t sub_1000821B8(void (*a1)(uint64_t, unint64_t, void))
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  id v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)( "Incoming request for approval state",  35LL,  2LL,  &_mh_execute_header,  v5,  v6,  _swiftEmptyArrayStorage);

  uint64_t v7 = *(void *)(*(void *)(v2 + 16) + 104LL);
  id v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 336LL);
  uint64_t v9 = swift_retain(v7);
  uint64_t v10 = v8(v9);
  swift_release(v7);
  uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListEncoder.init()();
  uint64_t v19 = v10;
  unint64_t v13 = sub_10008267C();
  uint64_t v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v19, &type metadata for ApprovalSettingsState, v13, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v10);
  swift_release(v12);
  sub_1000125E0(v15, v17);
  a1(v15, v17, 0LL);
  sub_10001226C(v15, v17);
  return sub_10001226C(v15, v17);
}

unint64_t sub_10008267C()
{
  unint64_t result = qword_10015A6A0;
  if (!qword_10015A6A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsState,  &type metadata for ApprovalSettingsState);
    atomic_store(result, (unint64_t *)&qword_10015A6A0);
  }

  return result;
}

unint64_t sub_1000826C0()
{
  unint64_t result = qword_10015A6A8;
  if (!qword_10015A6A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110F60, &type metadata for ApprovalsError);
    atomic_store(result, (unint64_t *)&qword_10015A6A8);
  }

  return result;
}

unint64_t sub_100082704()
{
  unint64_t result = qword_10015A6B0;
  if (!qword_10015A6B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100114A48, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015A6B0);
  }

  return result;
}

uint64_t sub_100082748(uint64_t a1)
{
  return a1;
}

void *sub_1000827E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = PropertyListDecoder.init()();
  unint64_t v12 = sub_100069C18();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v17,  &type metadata for ApprovalDBEntry,  a1,  a2,  &type metadata for ApprovalDBEntry,  v12);
  swift_release(v11);
  v19[0] = v17[0];
  v19[1] = v17[1];
  char v20 = v18;
  uint64_t v13 = *(void *)(*(void *)(v5 + 16) + 96LL);
  type metadata accessor for ApprovalStateUpdateRequest(0LL);
  uint64_t v14 = swift_allocObject(&unk_10014A010, 32LL, 7LL);
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  swift_retain(v13);
  sub_100067618(v19);
  swift_retain(a4);
  uint64_t v15 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v19, (uint64_t)sub_100082BD8, v14);
  (*(void (**)(void))(*(void *)v13 + 304LL))();
  swift_release(v13);
  swift_release(v15);
  return sub_10006769C(v19);
}

uint64_t sub_100082A68(uint64_t a1, char a2, void (*a3)(void))
{
  if ((a2 & 1) == 0) {
    return ((uint64_t (*)(void))a3)(0LL);
  }
  uint64_t v6 = swift_errorRetain(a1);
  uint64_t v7 = static os_log_type_t.error.getter(v6);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_10010F110;
  uint64_t v17 = a1;
  swift_errorRetain(a1);
  uint64_t v10 = sub_100005FB4(&qword_10015AB20);
  uint64_t v11 = String.init<A>(describing:)(&v17, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_100026B64();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + sub_10007CFB4(v0 + 40) = v13;
  uint64_t v14 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v15,  "Error while enqueuing update to approval state: %{public}s",  58LL,  2LL,  v9);
  swift_bridgeObjectRelease(v9);

  unint64_t v16 = (void *)_convertErrorToNSError(_:)(a1);
  a3();

  return sub_100086120(a1, 1);
}

uint64_t sub_100082BB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100082BD8(uint64_t a1, char a2)
{
  return sub_100082A68(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

uint64_t sub_100082C80( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, void (*a7)(void, void, id), uint64_t a8)
{
  void (*v45)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(void, void, id);
  uint64_t v73;
  id v74;
  uint64_t v75;
  void *v76;
  Swift::String v78;
  Swift::String v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  void *v103;
  void *v104;
  Swift::String v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  BOOL v116;
  char v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  unsigned int v127;
  Swift::String v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  Swift::String v141;
  void *object;
  Swift::String v143;
  uint64_t v144;
  Swift::String v145;
  void *v146;
  Swift::String v147;
  Swift::String v148;
  void *v149;
  Swift::String v150;
  uint64_t v151;
  Swift::String v152;
  Swift::String v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  char v159;
  char v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  __int128 v169;
  uint64_t v170;
  void (*v171)(void, void, id);
  uint64_t v172[10];
  uint64_t v173;
  uint64_t v174[7];
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  v170 = a8;
  v171 = a7;
  __int128 v168 = a6;
  *(void *)&v169 = a5;
  uint64_t v13 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)&v175 = v8;
  uint64_t v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10015A6C0, v17, v18);
  uint64_t v164 = v13;
  uint64_t v165 = v15;
  __int128 v167 = a1;
  v166 = a2;
  uint64_t v19 = v169;
  *(void *)&v175 = v8;
  sub_100074A98(v16, (uint64_t)&off_10015A6C0);
  char v20 = *(void **)(v8 + 16);
  swift_beginAccess(v20 + 2, v172, 32LL, 0LL);
  uint64_t v21 = v20[5];
  uint64_t v22 = v20[6];
  sub_100005110(v20 + 2, v21);
  sub_100071818(v21, v22);
  uint64_t v23 = *((void *)&v176 + 1);
  uint64_t v24 = v177;
  sub_100005110(&v175, *((uint64_t *)&v176 + 1));
  swift_endAccess(v172);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_100006034(&v175);
    goto LABEL_21;
  }

  uint64_t v27 = v25;
  unint64_t v28 = v26;
  sub_100006034(&v175);
  uint64_t v29 = sub_100090450(v27, v28, 0LL, 0LL);
  if (!v29)
  {
    uint64_t v70 = sub_100012624();
    uint64_t v66 = swift_allocError(&type metadata for KMError, v70, 0LL, 0LL);
    unint64_t v68 = v66;
    *(void *)uint64_t v67 = 0xD00000000000002DLL;
    *(void *)(v67 + 8) = 0x8000000100125E10LL;
    *(_OWORD *)(v67 + 16) = 0u;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(void *)(v67 + 64) = 0LL;
    unint64_t v69 = 9;
    goto LABEL_23;
  }

  unint64_t v30 = (unint64_t)v29;
  if (v29 == (void *)5)
  {
LABEL_21:
    uint64_t v65 = sub_100012624();
    uint64_t v66 = swift_allocError(&type metadata for KMError, v65, 0LL, 0LL);
    unint64_t v68 = v66;
    *(void *)uint64_t v67 = 0xD000000000000017LL;
    *(void *)(v67 + 8) = 0x8000000100125CB0LL;
    *(_OWORD *)(v67 + 16) = 0u;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(void *)(v67 + 64) = 0LL;
    unint64_t v69 = 2;
LABEL_23:
    *(_BYTE *)(v67 + 72) = v69;
    swift_willThrow(v66);
    uint64_t v71 = v68;
    goto LABEL_24;
  }

  v163 = (uint64_t)v20;
  uint64_t v31 = sub_100097D80();
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 144LL))(v31);
  swift_release(v31);
  sub_1000548C0(v32, (uint64_t)v174);
  swift_release(v32);
  uint64_t v33 = v167;
  uint64_t v34 = (uint64_t)v165;
  uint64_t v35 = v166;
  *uint64_t v165 = v167;
  *(void *)(v34 + 8) = v35;
  swift_storeEnumTagMultiPayload(v34, v164, 0LL);
  swift_bridgeObjectRetain(v35);
  unint64_t v36 = (uint64_t *)sub_1000542A4(v34);
  sub_100010F94(v174);
  sub_10005ADE0(v34);
  if (!v36)
  {
    *(void *)&v175 = 0LL;
    *((void *)&v175 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(*((void *)&v175 + 1));
    *(void *)&v175 = 0xD000000000000029LL;
    *((void *)&v175 + 1) = 0x8000000100125CD0LL;
    v78._countAndFlagsBits = v33;
    v78._object = v35;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 46LL;
    v79._object = (void *)0xE100000000000000LL;
    String.append(_:)(v79);
    uint64_t v80 = v175;
    uint64_t v81 = sub_100012624();
    uint64_t v82 = swift_allocError(&type metadata for KMError, v81, 0LL, 0LL);
    *(_OWORD *)uint64_t v83 = v80;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(_OWORD *)(v83 + 48) = 0u;
    *(void *)(v83 + 64) = 0LL;
    *(_BYTE *)(v83 + 72) = 10;
    swift_willThrow(v82);
    uint64_t v71 = v82;
LABEL_31:
    sub_100039418(v30);
    goto LABEL_24;
  }

  uint64_t v37 = v36[3];
  uint64_t v38 = type metadata accessor for DriverExtension(0LL);
  uint64_t v39 = (void *)swift_dynamicCastClass(v37, v38);
  if (!v39)
  {
    *(void *)&v175 = 0LL;
    *((void *)&v175 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease(*((void *)&v175 + 1));
    *(void *)&v175 = 0x6F696E7365747845LL;
    *((void *)&v175 + 1) = 0xEA0000000000206ELL;
    v84._countAndFlagsBits = v167;
    v84._object = v35;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 0xD00000000000001BLL;
    v85._object = (void *)0x8000000100125D00LL;
    String.append(_:)(v85);
    uint64_t v86 = v175;
    unint64_t v87 = sub_100012624();
    uint64_t v88 = swift_allocError(&type metadata for KMError, v87, 0LL, 0LL);
    *(_OWORD *)uint64_t v89 = v86;
    *(_OWORD *)(v89 + 16) = 0u;
    *(_OWORD *)(v89 + 32) = 0u;
    *(_OWORD *)(v89 + 48) = 0u;
    *(void *)(v89 + 64) = 0LL;
    *(_BYTE *)(v89 + 72) = 9;
    swift_willThrow(v88);
    uint64_t v71 = v88;
    swift_release(v36);
    goto LABEL_31;
  }

  uint64_t v161 = v39;
  uint64_t v162 = v30;
  uint64_t v164 = v37;
  swift_retain(v37);
  uint64_t v40 = sub_100097D80();
  uint64_t v41 = *(void *)(v40 + 184);
  uint64_t v165 = *(uint64_t **)(v40 + 176);
  swift_bridgeObjectRetain(v41);
  swift_release(v40);
  uint64_t v42 = (uint64_t *)sub_10008F418();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  uint64_t v45 = *(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, __n128))(*v36 + 312);
  uint64_t v46 = swift_bridgeObjectRetain(v44);
  uint64_t v47 = v165;
  uint64_t v165 = v36;
  v45(&v175, v47, v41, v43, v44, v46);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v44);
  if (!*((void *)&v176 + 1))
  {
    sub_100012824((uint64_t)&v175, &qword_100157FF8);
    goto LABEL_33;
  }

  uint64_t v48 = sub_100005FB4(&qword_100158900);
  if ((swift_dynamicCast(v172, &v175, (char *)&type metadata for Any + 8, v48, 6LL) & 1) == 0)
  {
LABEL_33:
    uint64_t v72 = v171;
    uint64_t v90 = v162;
    uint64_t v91 = v165;
    *(void *)&v175 = 0LL;
    *((void *)&v175 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v92._countAndFlagsBits = 0x6F69736E65747845LL;
    v92._object = (void *)0xEA0000000000206ELL;
    String.append(_:)(v92);
    v93._countAndFlagsBits = v167;
    v93._object = v166;
    String.append(_:)(v93);
    v94._countAndFlagsBits = 0xD000000000000028LL;
    v94._object = (void *)0x8000000100125D20LL;
    String.append(_:)(v94);
    uint64_t v95 = v175;
    __int128 v96 = sub_100012624();
    __int128 v97 = swift_allocError(&type metadata for KMError, v96, 0LL, 0LL);
    *(_OWORD *)__int128 v98 = v95;
    *(_OWORD *)(v98 + 16) = 0u;
    *(_OWORD *)(v98 + 32) = 0u;
    *(_OWORD *)(v98 + 48) = 0u;
    *(void *)(v98 + 64) = 0LL;
    *(_BYTE *)(v98 + 72) = 9;
    swift_willThrow(v97);
    uint64_t v71 = v97;
    swift_release(v91);
    swift_release(v164);
    sub_100039418(v90);
    goto LABEL_25;
  }

  uint64_t v49 = v172[0];
  sub_100083C70(v172[0]);
  unint64_t v51 = v50;
  swift_bridgeObjectRelease(v49);
  uint64_t v52 = sub_100084FE8(v51);
  swift_bridgeObjectRelease(v51);
  uint64_t v53 = (void *)a3;
  uint64_t v54 = a4;
  Swift::String v55 = sub_100083F1C(a3, (uint64_t)a4, v52);
  uint64_t v56 = v162;
  if ((v55 & 1) != 0)
  {
    swift_bridgeObjectRelease(v52);
    __int128 v57 = (void *)v168;
    if (!v168)
    {
      *(void *)&v175 = 0LL;
      swift_stdlib_random(&v175, 8LL);
      __int128 v110 = v175;
LABEL_76:
      v124 = v163;
      v172[0] = v163;
      v177 = 0LL;
      v175 = 0u;
      v176 = 0u;
      __int128 v125 = type metadata accessor for DriverKitDaemon();
      swift_retain(v124);
      __int128 v126 = v161;
      __int128 v127 = sub_1000CB3A8( v161,  v53,  (unint64_t)v54,  (uint64_t (*)(void))v110,  0,  0,  (uint64_t)&v175,  v125,  (uint64_t)&off_10014B480);
      sub_100012824((uint64_t)&v175, &qword_100157FF0);
      swift_release(v172[0]);
      *(void *)&v175 = 0LL;
      *((void *)&v175 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(76LL);
      v128._countAndFlagsBits = 0x646568636E75614CLL;
      v128._object = (void *)0xEE00207478656420LL;
      String.append(_:)(v128);
      __int128 v129 = *(uint64_t (**)(uint64_t))(*v126 + 144LL);
      __int128 v130 = v164;
      __int128 v131 = swift_retain(v164);
      char v132 = v129(v131);
      uint64_t v134 = v133;
      swift_release(v130);
      v135._countAndFlagsBits = v132;
      v135._object = v134;
      String.append(_:)(v135);
      swift_bridgeObjectRelease(v134);
      v136._object = (void *)0x8000000100125DB0LL;
      v136._countAndFlagsBits = 0xD000000000000017LL;
      String.append(_:)(v136);
      v137._countAndFlagsBits = (uint64_t)v53;
      v137._object = v54;
      String.append(_:)(v137);
      v138._countAndFlagsBits = 0x20676174202CLL;
      v138._object = (void *)0xE600000000000000LL;
      String.append(_:)(v138);
      uint64_t v139 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v140 = swift_allocObject(v139, 72LL, 7LL);
      v169 = xmmword_10010F110;
      *(_OWORD *)(v140 + 16) = xmmword_10010F110;
      *(void *)(v140 + 56) = &type metadata for UInt64;
      *(void *)(v140 + 64) = &protocol witness table for UInt64;
      *(void *)(v140 + 32) = v110;
      v141._countAndFlagsBits = String.init(format:_:)(0x583230257830LL, 0xE600000000000000LL, v140);
      object = v141._object;
      String.append(_:)(v141);
      swift_bridgeObjectRelease(object);
      v143._countAndFlagsBits = 0xD000000000000010LL;
      v143._object = (void *)0x8000000100125DD0LL;
      String.append(_:)(v143);
      uint64_t v144 = swift_allocObject(v139, 72LL, 7LL);
      *(_OWORD *)(v144 + 16) = v169;
      *(void *)(v144 + 56) = &type metadata for UInt32;
      *(void *)(v144 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v144 + 32) = 0;
      v145._countAndFlagsBits = String.init(format:_:)(0x583230257830LL, 0xE600000000000000LL, v144);
      uint64_t v146 = v145._object;
      String.append(_:)(v145);
      swift_bridgeObjectRelease(v146);
      v147._countAndFlagsBits = 0x20646970203ALL;
      v147._object = (void *)0xE600000000000000LL;
      String.append(_:)(v147);
      LODWORD(v172[0]) = v127;
      v148._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      v149 = v148._object;
      String.append(_:)(v148);
      swift_bridgeObjectRelease(v149);
      v150._countAndFlagsBits = 10LL;
      v150._object = (void *)0xE100000000000000LL;
      String.append(_:)(v150);
      v151 = *((void *)&v175 + 1);
      v171(v175, *((void *)&v175 + 1), 0LL);
      sub_100039418(v162);
      swift_bridgeObjectRelease(v151);
      swift_release(v165);
      return swift_release(v130);
    }

    uint64_t v58 = HIBYTE(v168) & 0xF;
    __int128 v59 = v19;
    __int128 v60 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v168 & 0x2000000000000000LL) != 0) {
      uint64_t v61 = HIBYTE(v168) & 0xF;
    }
    else {
      uint64_t v61 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (!v61)
    {
LABEL_74:
      swift_bridgeObjectRetain(v57);
      uint64_t v63 = sub_100084050(v59, (unint64_t)v57, 0x10uLL);
      if ((v123 & 1) == 0)
      {
LABEL_75:
        __int128 v110 = v63;
        goto LABEL_76;
      }

      *(void *)&v175 = 0LL;
      *((void *)&v175 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(*((void *)&v175 + 1));
      *(void *)&v175 = 543646036LL;
      *((void *)&v175 + 1) = 0xE400000000000000LL;
      v152._countAndFlagsBits = v59;
      v152._object = v57;
      String.append(_:)(v152);
      v153._countAndFlagsBits = 0xD00000000000001ALL;
      v153._object = (void *)0x8000000100125DF0LL;
      String.append(_:)(v153);
      uint64_t v154 = v175;
      uint64_t v155 = sub_100012624();
      v156 = swift_allocError(&type metadata for KMError, v155, 0LL, 0LL);
      *(_OWORD *)uint64_t v157 = v154;
      *(_OWORD *)(v157 + 16) = 0u;
      *(_OWORD *)(v157 + 32) = 0u;
      *(_OWORD *)(v157 + 48) = 0u;
      *(void *)(v157 + 64) = 0LL;
      *(_BYTE *)(v157 + 72) = 9;
      swift_willThrow(v156);
      uint64_t v71 = v156;
      sub_100039418(v162);
      swift_release(v165);
      swift_release(v164);
      goto LABEL_24;
    }

    if ((v168 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain(v168);
      uint64_t v158 = sub_100084504(v19, (uint64_t)v57, 10LL);
      v160 = v159;
      swift_bridgeObjectRelease(v57);
      uint64_t v54 = a4;
      uint64_t v53 = (void *)a3;
      if ((v160 & 1) == 0)
      {
        __int128 v110 = (uint64_t)v158;
        goto LABEL_76;
      }

      __int128 v57 = (void *)v168;
      __int128 v59 = v19;
      goto LABEL_74;
    }

    if ((v168 & 0x2000000000000000LL) == 0)
    {
      if ((v19 & 0x1000000000000000LL) != 0) {
        uint64_t v62 = (unsigned __int8 *)((v168 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v62 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19, v168);
      }
      uint64_t v63 = (uint64_t)sub_1000845E8(v62, v60, 10LL);
      if ((v64 & 1) == 0) {
        goto LABEL_75;
      }
      goto LABEL_74;
    }

    *(void *)&v175 = v19;
    *((void *)&v175 + 1) = v168 & 0xFFFFFFFFFFFFFFLL;
    if (v19 == 43)
    {
      if (!v58) {
        goto LABEL_85;
      }
      uint64_t v111 = (BYTE1(v19) - 48);
      __int128 v113 = v58 - 2;
      if (v58 == 2) {
        goto LABEL_58;
      }
      uint64_t v114 = (unsigned __int8 *)&v175 + 2;
      while (1)
      {
        uint64_t v115 = *v114 - 48;
        if (v115 > 9) {
          break;
        }
        if (!is_mul_ok(v111, 0xAuLL)
          || (v116 = __CFADD__(10 * v111, v115), uint64_t v111 = 10 * v111 + v115, v116))
        {
LABEL_78:
          uint64_t v54 = a4;
          uint64_t v53 = (void *)a3;
          __int128 v57 = (void *)v168;
          __int128 v59 = v19;
          goto LABEL_74;
        }

        uint64_t v117 = 0;
        ++v114;
        --v113;
        uint64_t v54 = a4;
        uint64_t v53 = (void *)a3;
        __int128 v57 = (void *)v168;
        __int128 v59 = v19;
        if (!v113) {
          goto LABEL_73;
        }
      }
    }

    else
    {
      if (v19 == 45)
      {
        if (v58)
        {
          uint64_t v111 = -(uint64_t)(BYTE1(v19) - 48);
          if (BYTE1(v19) == 48)
          {
            __int128 v112 = v58 - 2;
            if (v58 == 2)
            {
              uint64_t v54 = a4;
              uint64_t v53 = (void *)a3;
              __int128 v110 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_76;
            }

            uint64_t v121 = (unsigned __int8 *)&v175 + 2;
            uint64_t v54 = a4;
            uint64_t v53 = (void *)a3;
            __int128 v57 = (void *)v168;
            __int128 v59 = v19;
            while (1)
            {
              uint64_t v122 = *v121 - 48;
              if (v122 > 9) {
                goto LABEL_72;
              }
              if (!is_mul_ok(v111, 0xAuLL)) {
                goto LABEL_78;
              }
              __int128 v116 = 10 * v111 >= v122;
              uint64_t v111 = 10 * v111 - v122;
              if (!v116) {
                goto LABEL_78;
              }
              uint64_t v117 = 0;
              ++v121;
              --v112;
              uint64_t v54 = a4;
              uint64_t v53 = (void *)a3;
              __int128 v57 = (void *)v168;
              __int128 v59 = v19;
              if (!v112) {
                goto LABEL_73;
              }
            }
          }

          goto LABEL_86;
        }

        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        uint64_t v54 = a4;
        uint64_t v53 = (void *)a3;
        __int128 v57 = (void *)v168;
        __int128 v59 = v19;
        goto LABEL_74;
      }

      uint64_t v111 = (v19 - 48);
      uint64_t v118 = v58 - 1;
      if (v58 == 1)
      {
LABEL_58:
        __int128 v110 = v111;
        goto LABEL_76;
      }

      uint64_t v119 = (unsigned __int8 *)&v175 + 1;
      while (1)
      {
        uint64_t v120 = *v119 - 48;
        if (v120 > 9) {
          break;
        }
        if (!is_mul_ok(v111, 0xAuLL)) {
          goto LABEL_78;
        }
        __int128 v116 = __CFADD__(10 * v111, v120);
        uint64_t v111 = 10 * v111 + v120;
        if (v116) {
          goto LABEL_78;
        }
        uint64_t v117 = 0;
        ++v119;
        --v118;
        uint64_t v54 = a4;
        uint64_t v53 = (void *)a3;
        __int128 v57 = (void *)v168;
        __int128 v59 = v19;
        if (!v118) {
          goto LABEL_73;
        }
      }
    }

void sub_100083C70(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v5) {
    goto LABEL_10;
  }
LABEL_16:
  if (!__OFADD__(v7++, 1LL))
  {
    if (v7 >= v6) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v2 + 8 * v7);
    if (v20)
    {
LABEL_28:
      unint64_t v5 = (v20 - 1) & v20;
      for (unint64_t i = __clz(__rbit64(v20)) + (v7 << 6); ; unint64_t i = v10 | (v7 << 6))
      {
        uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
        swift_bridgeObjectRetain(v22);
        uint64_t v23 = (uint64_t *)sub_10008F598();
        if (!*(void *)(v22 + 16)) {
          break;
        }
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        swift_bridgeObjectRetain(v25);
        unint64_t v26 = sub_100006114(v24, v25);
        if ((v27 & 1) != 0)
        {
          sub_100006054(*(void *)(v22 + 56) + 32 * v26, (uint64_t)&v28);
        }

        else
        {
          __int128 v28 = 0u;
          __int128 v29 = 0u;
        }

        swift_bridgeObjectRelease(v25);
        if (!*((void *)&v29 + 1)) {
          goto LABEL_6;
        }
LABEL_8:
        swift_bridgeObjectRelease(v22);
        uint64_t v9 = v31;
        if (v31)
        {
          uint64_t v12 = v30;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
          uint64_t v32 = v12;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v8 = sub_10000C82C(0LL, v8[2] + 1LL, 1, v8);
          }
          uint64_t v14 = v8;
          unint64_t v15 = v8[2];
          uint64_t v16 = v14;
          unint64_t v17 = v14[3];
          if (v15 >= v17 >> 1) {
            uint64_t v16 = sub_10000C82C((void *)(v17 > 1), v15 + 1, 1, v16);
          }
          void v16[2] = v15 + 1;
          uint64_t v18 = &v16[2 * v15];
          uint64_t v8 = v16;
          v18[4] = v32;
          v18[5] = v9;
          if (!v5) {
            goto LABEL_16;
          }
        }

        else if (!v5)
        {
          goto LABEL_16;
        }

uint64_t sub_100083F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          unint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100084050(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_75:
    swift_bridgeObjectRelease(v3);
    return 0LL;
  }

  uint64_t v3 = a2;
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    goto LABEL_75;
  }
  if ((v3 & 0x1000000000000000LL) == 0)
  {
    if ((v3 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        unint64_t v8 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v3);
      }
      uint64_t v9 = sub_1000845E8(v8, v5, a3);
      char v11 = v10 & 1;
      goto LABEL_11;
    }

    v41[0] = result;
    v41[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (v4)
      {
        uint64_t v23 = v4 - 1;
        if (v23)
        {
          unint64_t v13 = 0LL;
          unsigned __int8 v24 = a3 + 48;
          unsigned __int8 v25 = a3 + 55;
          unsigned __int8 v26 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v24 = 58;
          }

          else
          {
            unsigned __int8 v26 = 97;
            unsigned __int8 v25 = 65;
          }

          char v27 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          do
          {
            unsigned int v28 = *v27;
            if (v28 < 0x30 || v28 >= v24)
            {
              if (v28 < 0x41 || v28 >= v25)
              {
                uint64_t v9 = 0LL;
                if (v28 < 0x61 || v28 >= v26) {
                  goto LABEL_11;
                }
                char v29 = -87;
              }

              else
              {
                char v29 = -55;
              }
            }

            else
            {
              char v29 = -48;
            }

            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v30 = v13 * a3;
            unsigned __int8 v31 = v28 + v29;
            BOOL v22 = __CFADD__(v30, v31);
            unint64_t v13 = v30 + v31;
            if (v22) {
              goto LABEL_73;
            }
            ++v27;
            --v23;
          }

          while (v23);
LABEL_72:
          char v11 = 0;
          uint64_t v9 = (unsigned __int8 *)v13;
          goto LABEL_11;
        }

        goto LABEL_73;
      }
    }

    else
    {
      if (result != 45)
      {
        if (v4)
        {
          unint64_t v13 = 0LL;
          unsigned __int8 v32 = a3 + 48;
          unsigned __int8 v33 = a3 + 55;
          unsigned __int8 v34 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v32 = 58;
          }

          else
          {
            unsigned __int8 v34 = 97;
            unsigned __int8 v33 = 65;
          }

          uint64_t v35 = (unsigned __int8 *)v41;
          char v11 = 1;
          while (1)
          {
            unsigned int v36 = *v35;
            if (v36 < 0x30 || v36 >= v32)
            {
              if (v36 < 0x41 || v36 >= v33)
              {
                uint64_t v9 = 0LL;
                if (v36 < 0x61 || v36 >= v34) {
                  goto LABEL_11;
                }
                char v37 = -87;
              }

              else
              {
                char v37 = -55;
              }
            }

            else
            {
              char v37 = -48;
            }

            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v38 = v13 * a3;
            unsigned __int8 v39 = v36 + v37;
            BOOL v22 = __CFADD__(v38, v39);
            unint64_t v13 = v38 + v39;
            if (v22) {
              goto LABEL_73;
            }
            ++v35;
            if (!--v4) {
              goto LABEL_72;
            }
          }
        }

        goto LABEL_73;
      }

      if (v4)
      {
        uint64_t v12 = v4 - 1;
        if (v12)
        {
          unint64_t v13 = 0LL;
          unsigned __int8 v14 = a3 + 48;
          unsigned __int8 v15 = a3 + 55;
          unsigned __int8 v16 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v14 = 58;
          }

          else
          {
            unsigned __int8 v16 = 97;
            unsigned __int8 v15 = 65;
          }

          unint64_t v17 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          while (1)
          {
            unsigned int v18 = *v17;
            if (v18 < 0x30 || v18 >= v14)
            {
              if (v18 < 0x41 || v18 >= v15)
              {
                uint64_t v9 = 0LL;
                if (v18 < 0x61 || v18 >= v16) {
                  goto LABEL_11;
                }
                char v19 = -87;
              }

              else
              {
                char v19 = -55;
              }
            }

            else
            {
              char v19 = -48;
            }

            if (!is_mul_ok(v13, a3)) {
              break;
            }
            unint64_t v20 = v13 * a3;
            unsigned __int8 v21 = v18 + v19;
            BOOL v22 = v20 >= v21;
            unint64_t v13 = v20 - v21;
            if (!v22) {
              break;
            }
            ++v17;
            if (!--v12) {
              goto LABEL_72;
            }
          }
        }

uint64_t sub_100084460()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10008448C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
  *a1 = v2;
  return swift_retain(v2);
}

id sub_10008449C()
{
  return *(id *)(*(void *)v0 + 24LL);
}

__objc2_prot *sub_1000844A8()
{
  return &OBJC_PROTOCOL____TtP10driverkitd29DriverKitDaemonClientProtocol_;
}

uint64_t sub_1000844B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 96))(*a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DriverKitDaemonXPCRequestDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd33DriverKitDaemonXPCRequestDelegate);
}

unsigned __int8 *sub_100084504(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  __n128 v4 = swift_bridgeObjectRetain(a2);
  uint64_t v5 = String.init<A>(_:)( &v15,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v4);
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_100014314(v5, v6);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v8);
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }

unsigned __int8 *sub_1000845E8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_67;
    }

    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }

      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }

      if (result)
      {
        unint64_t v29 = 0LL;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0LL;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }

            else
            {
              char v31 = -55;
            }
          }

          else
          {
            char v31 = -48;
          }

          if (!is_mul_ok(v29, a3)) {
            return 0LL;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v29;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }

  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }

  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0LL;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }

      else
      {
        char v23 = -55;
      }
    }

    else
    {
      char v23 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0LL;
    }
    ++v21;
    --v17;
  }

  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100084864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)( "Incoming request for approval state",  35LL,  2LL,  &_mh_execute_header,  v5,  v6,  _swiftEmptyArrayStorage);

  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 104LL);
  unsigned __int8 v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 336LL);
  uint64_t v9 = swift_retain(v7);
  uint64_t v10 = v8(v9);
  swift_release(v7);
  uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListEncoder.init()();
  uint64_t v20 = v10;
  unint64_t v13 = sub_10008267C();
  uint64_t v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v20, &type metadata for ApprovalSettingsState, v13, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v10);
  swift_release(v12);
  sub_1000125E0(v15, v17);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a2 + 16))(a2, isa, 0LL);

  sub_10001226C(v15, v17);
  return sub_10001226C(v15, v17);
}

uint64_t sub_100084D3C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = swift_allocObject(&unk_10014A038, 24LL, 7LL);
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = _Block_copy(a4);
  uint64_t v11 = PropertyListDecoder.init()(v10);
  unint64_t v12 = sub_100069C18();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v17,  &type metadata for ApprovalDBEntry,  a1,  a2,  &type metadata for ApprovalDBEntry,  v12);
  swift_release(v11);
  v19[0] = v17[0];
  v19[1] = v17[1];
  char v20 = v18;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) + 96LL);
  type metadata accessor for ApprovalStateUpdateRequest(0LL);
  uint64_t v14 = swift_allocObject(&unk_10014A060, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1000860E4;
  *(void *)(v14 + 24) = v8;
  swift_retain(v13);
  sub_100067618(v19);
  swift_retain(v8);
  uint64_t v15 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v19, (uint64_t)sub_100086134, v14);
  (*(void (**)(void))(*(void *)v13 + 304LL))();
  swift_release(v13);
  swift_release(v15);
  sub_10006769C(v19);
  return swift_release(v8);
}

uint64_t sub_100084FE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100075F38(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

void sub_10008507C( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v47)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  void (**v66)(void, void, void);
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  Swift::String v79;
  Swift::String v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  Swift::String v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  void *v104;
  void *v105;
  Swift::String v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unsigned int v129;
  uint64_t *v130;
  unsigned int v131;
  Swift::String v132;
  uint64_t (*v133)(uint64_t);
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  Swift::String v139;
  Swift::String v140;
  Swift::String v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  void *v146;
  Swift::String v147;
  uint64_t v148;
  Swift::String v149;
  void *v150;
  Swift::String v151;
  Swift::String v152;
  void *v153;
  Swift::String v154;
  uint64_t v155;
  NSString v156;
  Swift::String v157;
  Swift::String v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  char v165;
  char v166;
  void *v167;
  void *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  Swift::String v173;
  uint64_t v174;
  unint64_t v175;
  __int128 v176;
  uint64_t v177[10];
  uint64_t v178;
  uint64_t v179[7];
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  *(void *)&v176 = a8;
  v175 = a6;
  v174 = a5;
  uint64_t v13 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)&v180 = a7;
  uint64_t v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10015A6C0, v17, v18);
  v171 = v13;
  v172 = v15;
  v173._uint64_t countAndFlagsBits = a1;
  v173._object = a2;
  unint64_t v19 = v175;
  *(void *)&v180 = a7;
  sub_100074A98(v16, (uint64_t)&off_10015A6C0);
  v170 = 0LL;
  char v20 = *(void **)(a7 + 16);
  swift_beginAccess(v20 + 2, v177, 32LL, 0LL);
  uint64_t v21 = v20[5];
  uint64_t v22 = v20[6];
  sub_100005110(v20 + 2, v21);
  sub_100071818(v21, v22);
  uint64_t v23 = *((void *)&v181 + 1);
  uint64_t v24 = v182;
  sub_100005110(&v180, *((uint64_t *)&v181 + 1));
  swift_endAccess(v177);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_100006034(&v180);
    goto LABEL_22;
  }

  uint64_t v27 = v25;
  unint64_t v28 = v26;
  sub_100006034(&v180);
  unint64_t v29 = sub_100090450(v27, v28, 0LL, 0LL);
  if (!v29)
  {
    uint64_t v74 = sub_100012624();
    uint64_t v70 = swift_allocError(&type metadata for KMError, v74, 0LL, 0LL);
    uint64_t v72 = v70;
    *(void *)uint64_t v71 = 0xD00000000000002DLL;
    *(void *)(v71 + 8) = 0x8000000100125E10LL;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(void *)(v71 + 64) = 0LL;
    uint64_t v73 = 9;
    goto LABEL_24;
  }

  unint64_t v30 = (unint64_t)v29;
  if (v29 == (void *)5)
  {
LABEL_22:
    unint64_t v69 = sub_100012624();
    uint64_t v70 = swift_allocError(&type metadata for KMError, v69, 0LL, 0LL);
    uint64_t v72 = v70;
    *(void *)uint64_t v71 = 0xD000000000000017LL;
    *(void *)(v71 + 8) = 0x8000000100125CB0LL;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(void *)(v71 + 64) = 0LL;
    uint64_t v73 = 2;
LABEL_24:
    *(_BYTE *)(v71 + 72) = v73;
    swift_willThrow(v70);
    uint64_t v53 = v72;
    goto LABEL_25;
  }

  uint64_t v31 = sub_100097D80();
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 144LL))(v31);
  swift_release(v31);
  sub_1000548C0(v32, (uint64_t)v179);
  swift_release(v32);
  uint64_t countAndFlagsBits = v173._countAndFlagsBits;
  uint64_t v34 = (uint64_t)v172;
  object = v173._object;
  *v172 = v173._countAndFlagsBits;
  *(void *)(v34 + 8) = object;
  swift_storeEnumTagMultiPayload(v34, v171, 0LL);
  swift_bridgeObjectRetain(object);
  unsigned int v36 = (void *)sub_1000542A4(v34);
  sub_100010F94(v179);
  sub_10005ADE0(v34);
  if (v36)
  {
    char v37 = (uint64_t *)v36[3];
    uint64_t v38 = type metadata accessor for DriverExtension(0LL);
    unsigned __int8 v39 = (void *)swift_dynamicCastClass(v37, v38);
    if (v39)
    {
      __int128 v168 = v39;
      v169 = v30;
      v172 = v37;
      swift_retain(v37);
      v171 = (uint64_t)v20;
      uint64_t v40 = sub_100097D80();
      uint64_t v41 = *(void *)(v40 + 176);
      uint64_t v42 = *(void *)(v40 + 184);
      swift_bridgeObjectRetain(v42);
      swift_release(v40);
      uint64_t v43 = (uint64_t *)sub_10008F418();
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      uint64_t v46 = v36;
      uint64_t v47 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*v36 + 312LL);
      uint64_t v48 = swift_bridgeObjectRetain(v44);
      uint64_t v49 = v45;
      uint64_t v50 = v46;
      v47(&v180, v41, v42, v49, v44, v48);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v44);
      if (*((void *)&v181 + 1))
      {
        unint64_t v51 = sub_100005FB4(&qword_100158900);
        if ((swift_dynamicCast(v177, &v180, (char *)&type metadata for Any + 8, v51, 6LL) & 1) != 0)
        {
          uint64_t v52 = v177[0];
          uint64_t v53 = v170;
          sub_100083C70(v177[0]);
          Swift::String v55 = v54;
          swift_bridgeObjectRelease(v52);
          uint64_t v56 = sub_100084FE8(v55);
          swift_bridgeObjectRelease(v55);
          __int128 v57 = (void *)a3;
          uint64_t v58 = a4;
          if ((sub_100083F1C(a3, (uint64_t)a4, v56) & 1) != 0)
          {
            swift_bridgeObjectRelease(v56);
            __int128 v167 = v50;
            if (!v19)
            {
              *(void *)&v180 = 0LL;
              swift_stdlib_random(&v180, 8LL);
              __int128 v112 = v180;
              uint64_t v66 = (void (**)(void, void, void))v176;
LABEL_78:
              __int128 v126 = v171;
              v177[0] = v171;
              v182 = 0LL;
              v180 = 0u;
              v181 = 0u;
              __int128 v127 = type metadata accessor for DriverKitDaemon();
              swift_retain(v126);
              __int128 v128 = v168;
              __int128 v129 = sub_1000CB3A8( v168,  v57,  (unint64_t)v58,  (uint64_t (*)(void))v112,  0,  0,  (uint64_t)&v180,  v127,  (uint64_t)&off_10014B480);
              if (!v53)
              {
                __int128 v131 = v129;
                sub_100012824((uint64_t)&v180, &qword_100157FF0);
                swift_release(v177[0]);
                *(void *)&v180 = 0LL;
                *((void *)&v180 + 1) = 0xE000000000000000LL;
                _StringGuts.grow(_:)(76LL);
                v132._uint64_t countAndFlagsBits = 0x646568636E75614CLL;
                v132._object = (void *)0xEE00207478656420LL;
                String.append(_:)(v132);
                uint64_t v133 = *(uint64_t (**)(uint64_t))(*v128 + 144LL);
                uint64_t v134 = v172;
                uint64_t v135 = swift_retain(v172);
                uint64_t v136 = v133(v135);
                uint64_t v138 = v137;
                swift_release(v134);
                v139._uint64_t countAndFlagsBits = v136;
                v139._object = v138;
                String.append(_:)(v139);
                swift_bridgeObjectRelease(v138);
                v140._object = (void *)0x8000000100125DB0LL;
                v140._uint64_t countAndFlagsBits = 0xD000000000000017LL;
                String.append(_:)(v140);
                v141._uint64_t countAndFlagsBits = (uint64_t)v57;
                v141._object = v58;
                String.append(_:)(v141);
                v142._uint64_t countAndFlagsBits = 0x20676174202CLL;
                v142._object = (void *)0xE600000000000000LL;
                String.append(_:)(v142);
                uint64_t v143 = sub_100005FB4((uint64_t *)&unk_1001596B0);
                uint64_t v144 = swift_allocObject(v143, 72LL, 7LL);
                v176 = xmmword_10010F110;
                *(_OWORD *)(v144 + 16) = xmmword_10010F110;
                *(void *)(v144 + 56) = &type metadata for UInt64;
                *(void *)(v144 + 64) = &protocol witness table for UInt64;
                *(void *)(v144 + 32) = v112;
                v145._uint64_t countAndFlagsBits = String.init(format:_:)(0x583230257830LL, 0xE600000000000000LL, v144);
                uint64_t v146 = v145._object;
                String.append(_:)(v145);
                swift_bridgeObjectRelease(v146);
                v147._uint64_t countAndFlagsBits = 0xD000000000000010LL;
                v147._object = (void *)0x8000000100125DD0LL;
                String.append(_:)(v147);
                unint64_t v148 = swift_allocObject(v143, 72LL, 7LL);
                *(_OWORD *)(v148 + 16) = v176;
                *(void *)(v148 + 56) = &type metadata for UInt32;
                *(void *)(v148 + 64) = &protocol witness table for UInt32;
                *(_DWORD *)(v148 + 32) = 0;
                v149._uint64_t countAndFlagsBits = String.init(format:_:)(0x583230257830LL, 0xE600000000000000LL, v148);
                uint64_t v150 = v149._object;
                String.append(_:)(v149);
                swift_bridgeObjectRelease(v150);
                v151._uint64_t countAndFlagsBits = 0x20646970203ALL;
                v151._object = (void *)0xE600000000000000LL;
                String.append(_:)(v151);
                LODWORD(v177[0]) = v131;
                v152._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
                v153 = v152._object;
                String.append(_:)(v152);
                swift_bridgeObjectRelease(v153);
                v154._uint64_t countAndFlagsBits = 10LL;
                v154._object = (void *)0xE100000000000000LL;
                String.append(_:)(v154);
                uint64_t v155 = *((void *)&v180 + 1);
                v156 = String._bridgeToObjectiveC()();
                ((void (**)(void, NSString, void))v66)[2](v66, v156, 0LL);

                sub_100039418(v169);
                swift_bridgeObjectRelease(v155);
                swift_release(v167);
                swift_release(v134);
                return;
              }

              swift_release(v172);
              swift_release(v167);
              sub_100039418(v169);
              sub_100012824((uint64_t)&v180, &qword_100157FF0);
              __int128 v130 = &v184;
              goto LABEL_82;
            }

            __int128 v59 = (void *)v19;
            __int128 v60 = HIBYTE(v19) & 0xF;
            uint64_t v61 = v174;
            uint64_t v62 = v174 & 0xFFFFFFFFFFFFLL;
            if ((v19 & 0x2000000000000000LL) != 0) {
              uint64_t v63 = HIBYTE(v19) & 0xF;
            }
            else {
              uint64_t v63 = v174 & 0xFFFFFFFFFFFFLL;
            }
            if (!v63)
            {
              uint64_t v65 = v169;
              uint64_t v66 = (void (**)(void, void, void))v176;
              goto LABEL_76;
            }

            if ((v19 & 0x1000000000000000LL) != 0)
            {
              swift_bridgeObjectRetain(v19);
              uint64_t v164 = sub_100084504(v61, v19, 10LL);
              v166 = v165;
              swift_bridgeObjectRelease(v19);
              if ((v166 & 1) == 0)
              {
                uint64_t v58 = a4;
                uint64_t v66 = (void (**)(void, void, void))v176;
                __int128 v57 = (void *)a3;
                __int128 v112 = (uint64_t)v164;
                goto LABEL_78;
              }

              goto LABEL_92;
            }

            if ((v19 & 0x2000000000000000LL) == 0)
            {
              if ((v174 & 0x1000000000000000LL) != 0) {
                uint64_t v64 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else {
                uint64_t v64 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v174, v19);
              }
              uint64_t v65 = v169;
              uint64_t v66 = (void (**)(void, void, void))v176;
              uint64_t v67 = (uint64_t)sub_1000845E8(v64, v62, 10LL);
              if (v53)
              {
                _Block_release(v66);
                __break(1u);
                return;
              }

              if ((v68 & 1) == 0)
              {
LABEL_77:
                __int128 v112 = v67;
                goto LABEL_78;
              }

LABEL_76:
              swift_bridgeObjectRetain(v59);
              uint64_t v67 = sub_100084050(v61, (unint64_t)v59, 0x10uLL);
              if ((v125 & 1) != 0)
              {
                *(void *)&v180 = 0LL;
                *((void *)&v180 + 1) = 0xE000000000000000LL;
                _StringGuts.grow(_:)(32LL);
                swift_bridgeObjectRelease(*((void *)&v180 + 1));
                *(void *)&v180 = 543646036LL;
                *((void *)&v180 + 1) = 0xE400000000000000LL;
                v157._uint64_t countAndFlagsBits = v61;
                v157._object = v59;
                String.append(_:)(v157);
                v158._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
                v158._object = (void *)0x8000000100125DF0LL;
                String.append(_:)(v158);
                v160 = *((void *)&v180 + 1);
                int v159 = v180;
                uint64_t v161 = sub_100012624();
                uint64_t v162 = swift_allocError(&type metadata for KMError, v161, 0LL, 0LL);
                *(_OWORD *)v163 = __PAIR128__(v160, v159);
                *(_OWORD *)(v163 + 16) = 0u;
                *(_OWORD *)(v163 + 32) = 0u;
                *(_OWORD *)(v163 + 48) = 0u;
                *(void *)(v163 + 64) = 0LL;
                *(_BYTE *)(v163 + 72) = 9;
                swift_willThrow(v162);
                uint64_t v53 = v162;
                sub_100039418(v65);
                swift_release(v167);
                __int128 v130 = (uint64_t *)&v183;
LABEL_82:
                swift_release(*(v130 - 32));
                goto LABEL_26;
              }

              goto LABEL_77;
            }

            *(void *)&v180 = v174;
            *((void *)&v180 + 1) = v19 & 0xFFFFFFFFFFFFFFLL;
            if (v174 == 43)
            {
              if (!v60) {
                goto LABEL_91;
              }
              __int128 v113 = (BYTE1(v174) - 48);
              uint64_t v115 = v60 - 2;
              if (v60 != 2)
              {
                __int128 v116 = (unsigned __int8 *)&v180 + 2;
                while (1)
                {
                  uint64_t v117 = *v116 - 48;
                  if (v117 > 9) {
                    goto LABEL_74;
                  }
                  if (!is_mul_ok(v113, 0xAuLL)
                    || (uint64_t v118 = __CFADD__(10 * v113, v117),
                        __int128 v113 = 10 * v113 + v117,
                        v118))
                  {
LABEL_83:
                    __int128 v113 = 0LL;
                    uint64_t v119 = 1;
                    uint64_t v58 = a4;
                    __int128 v57 = (void *)a3;
                    __int128 v59 = (void *)v19;
                    uint64_t v61 = v174;
                    goto LABEL_75;
                  }

                  uint64_t v119 = 0;
                  ++v116;
                  --v115;
                  uint64_t v58 = a4;
                  __int128 v57 = (void *)a3;
                  __int128 v59 = (void *)v19;
                  uint64_t v61 = v174;
                  if (!v115) {
                    goto LABEL_75;
                  }
                }
              }
            }

            else
            {
              if (v174 == 45)
              {
                if (v60)
                {
                  if (v60 != 1 && (BYTE1(v174) - 48) <= 9u)
                  {
                    __int128 v113 = -(uint64_t)(BYTE1(v174) - 48);
                    if (BYTE1(v174) == 48)
                    {
                      uint64_t v114 = v60 - 2;
                      if (v60 == 2)
                      {
                        uint64_t v58 = a4;
                        uint64_t v66 = (void (**)(void, void, void))v176;
                        __int128 v57 = (void *)a3;
                        __int128 v112 = -(uint64_t)(BYTE1(v174) - 48);
                        goto LABEL_78;
                      }

                      uint64_t v123 = (unsigned __int8 *)&v180 + 2;
                      uint64_t v58 = a4;
                      __int128 v57 = (void *)a3;
                      __int128 v59 = (void *)v19;
                      uint64_t v61 = v174;
                      while (1)
                      {
                        v124 = *v123 - 48;
                        if (v124 > 9) {
                          break;
                        }
                        if (!is_mul_ok(v113, 0xAuLL)) {
                          goto LABEL_83;
                        }
                        uint64_t v118 = 10 * v113 >= v124;
                        __int128 v113 = 10 * v113 - v124;
                        if (!v118) {
                          goto LABEL_83;
                        }
                        uint64_t v119 = 0;
                        ++v123;
                        --v114;
                        uint64_t v58 = a4;
                        __int128 v57 = (void *)a3;
                        __int128 v59 = (void *)v19;
                        uint64_t v61 = v174;
                        if (!v114) {
                          goto LABEL_75;
                        }
                      }

uint64_t sub_1000860E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1000860F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100086118(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_100086120(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100086138()
{
  id v1 = [*v0 bundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10008619C()
{
  id v1 = [*v0 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000861E8(uint64_t a1, uint64_t a2)
{
  return sub_100086200(a1, a2, (SEL *)&selRef_uniqueInstallIdentifier);
}

uint64_t sub_1000861F4(uint64_t a1, uint64_t a2)
{
  return sub_100086200(a1, a2, (SEL *)&selRef_installSessionIdentifier);
}

uint64_t sub_100086200(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_100086260()
{
  id v1 = [*v0 localizedName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_1000862B4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = URL.pathComponents.getter(v7);
  uint64_t v11 = URL.pathComponents.getter(v10);
  unint64_t v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease(v11);
  if (v12)
  {
    if (*(void *)(v10 + 16) >= v12)
    {
      if (qword_1001632F0 == -1) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_12:
  swift_once(&qword_1001632F0, sub_100086AC0);
LABEL_4:
  uint64_t v13 = sub_100086AD4(v2, (uint64_t)qword_100175510);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v13, v2);
  unint64_t v14 = v12 - 1;
  if (v12 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(a1, v9, v2);
  }

  else
  {
    swift_bridgeObjectRetain(v10);
    uint64_t v15 = (void *)(v10 + 56);
    do
    {
      uint64_t v16 = *(v15 - 1);
      uint64_t v17 = *v15;
      swift_bridgeObjectRetain(*v15);
      URL.appendingPathComponent(_:isDirectory:)(v16, v17, 1LL);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v18(v9, v6, v2);
      swift_bridgeObjectRelease(v17);
      v15 += 2;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(v10);
    v18(a1, v9, v2);
  }

  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100086458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t *)sub_1000901AC();
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain(v4);
  sub_1000D4780(v3, v4, a1);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000864A0(void *a1)
{
  unint64_t v68 = *(void (**)(void))(*a1 + 168LL);
  uint64_t v2 = ((uint64_t (*)(void *))v68)(a1);
  uint64_t v3 = sub_100005FB4(&qword_100158BE8);
  uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_10010F440;
  uint64_t v5 = sub_10002C0D8();
  *(void *)(v4 + 32) = *v5;
  *(void *)(v4 + sub_10007CFB4(v0 + 40) = *sub_10002C198();
  uint64_t v73 = v4;
  unint64_t v6 = sub_100039F14();
  uint64_t v7 = sub_100005FB4(&qword_10015A7F8);
  unint64_t v8 = sub_1000899A8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v71, &v73, v7, v8, &type metadata for RealizedInfo.Flags, v6);
  uint64_t v73 = v2;
  uint64_t result = dispatch thunk of SetAlgebra.isSubset(of:)(&v73, &type metadata for RealizedInfo.Flags, v6);
  if ((result & 1) == 0)
  {
    v68();
    uint64_t v10 = swift_allocObject(v3, 48LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_10010F440;
    *(void *)(v10 + 32) = *sub_10002C2F8();
    *(void *)(v10 + sub_10007CFB4(v0 + 40) = *sub_10002C4A8();
    uint64_t v73 = v10;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v71, &v73, v7, v8, &type metadata for RealizedInfo.Flags, v6);
    sub_100039ECC();
    dispatch thunk of RawRepresentable.rawValue.getter(&v79, &type metadata for RealizedInfo.Flags);
    unint64_t v11 = sub_100039E40();
    dispatch thunk of OptionSet.init(rawValue:)(&v79, &type metadata for RealizedInfo.Flags, v11);
    dispatch thunk of SetAlgebra.formIntersection(_:)(&v71, &type metadata for RealizedInfo.Flags, v6);
    uint64_t v12 = v73;
    dispatch thunk of SetAlgebra.init()(&v71, &type metadata for RealizedInfo.Flags, v6);
    unint64_t v13 = sub_100039F5C();
    unint64_t v14 = a1;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v73, &v71, &type metadata for RealizedInfo.Flags, v13) & 1) != 0)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(*a1 + 240LL))();
      uint64_t v73 = 0LL;
      unint64_t v74 = 0xE000000000000000LL;
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        uint64_t v67 = v14;
        uint64_t v70 = v15 + 32;
        uint64_t v66 = v15;
        swift_bridgeObjectRetain(v15);
        uint64_t v17 = 0LL;
        uint64_t v18 = v5;
        uint64_t v69 = v16;
        do
        {
          sub_1000516A8(v70 + 80 * v17, (uint64_t)v76);
          uint64_t v25 = *(void *)(v70 + 80 * v17);
          sub_1000516A8((uint64_t)v76, (uint64_t)v77);
          if (v78)
          {
            sub_100089A3C( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
            sub_1000B48B4();
            object = v19._object;
            uint64_t v71 = 10LL;
            unint64_t v72 = 0xE100000000000000LL;
            String.append(_:)(v19);
            uint64_t v21 = object;
            uint64_t v18 = v5;
            swift_bridgeObjectRelease(v21);
            uint64_t v22 = v71;
            unint64_t v23 = v72;
          }

          else
          {
            uint64_t v71 = 0LL;
            unint64_t v72 = 0xE000000000000000LL;
            uint64_t v26 = *(void *)(v77[0] + 16);
            if (v26)
            {
              uint64_t v27 = v77[0] + 32;
              sub_100089A3C( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
              swift_bridgeObjectRetain(v25);
              do
              {
                sub_1000516A8(v27, (uint64_t)v75);
                sub_100089A3C( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
                sub_1000B48B4();
                unint64_t v29 = v28._object;
                String.append(_:)(v28);
                swift_bridgeObjectRelease(v29);
                v30._uint64_t countAndFlagsBits = 10LL;
                v30._object = (void *)0xE100000000000000LL;
                String.append(_:)(v30);
                swift_bridgeObjectRelease(0xE100000000000000LL);
                sub_100089A3C( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
                v27 += 80LL;
                --v26;
              }

              while (v26);
              sub_100089A3C( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
              uint64_t v22 = v71;
              unint64_t v23 = v72;
              uint64_t v18 = v5;
              uint64_t v16 = v69;
            }

            else
            {
              swift_bridgeObjectRetain(v25);
              uint64_t v22 = 0LL;
              unint64_t v23 = 0xE000000000000000LL;
              uint64_t v16 = v69;
            }
          }

          unint64_t v24 = v23;
          String.append(_:)(*(Swift::String *)&v22);
          ++v17;
          swift_bridgeObjectRelease(v23);
          sub_100089A3C( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
        }

        while (v17 != v16);
        uint64_t v47 = swift_bridgeObjectRelease_n(v66, 2LL);
        uint64_t v49 = v73;
        uint64_t v48 = (void *)v74;
        unint64_t v14 = v67;
        uint64_t v50 = ((uint64_t (*)(uint64_t))v68)(v47);
      }

      else
      {
        uint64_t v51 = swift_bridgeObjectRelease(v15);
        uint64_t v49 = 0LL;
        uint64_t v48 = (void *)0xE000000000000000LL;
        uint64_t v18 = v5;
        uint64_t v50 = ((uint64_t (*)(uint64_t))v68)(v51);
      }

      uint64_t v73 = *v18;
      uint64_t v71 = v50;
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v73, &type metadata for RealizedInfo.Flags, v6) & 1) != 0)
      {
        uint64_t v71 = v14[3];
        uint64_t v52 = type metadata accessor for OSExtension(0LL);
        unint64_t v53 = sub_1000899F4();
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
        unint64_t v74 = v54;
        v55._uint64_t countAndFlagsBits = 2618LL;
        v55._object = (void *)0xE200000000000000LL;
        String.append(_:)(v55);
        v56._uint64_t countAndFlagsBits = v49;
        v56._object = v48;
        String.append(_:)(v56);
        swift_bridgeObjectRelease(v48);
        uint64_t v57 = v73;
        unint64_t v41 = v74;
        unint64_t v58 = sub_100012624();
        uint64_t v44 = swift_allocError(&type metadata for KMError, v58, 0LL, 0LL);
        *(void *)uint64_t v45 = v57;
        char v46 = 31;
      }

      else
      {
        uint64_t v71 = v14[3];
        uint64_t v59 = type metadata accessor for OSExtension(0LL);
        unint64_t v60 = sub_1000899F4();
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
        unint64_t v74 = v61;
        v62._uint64_t countAndFlagsBits = 2618LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        v63._uint64_t countAndFlagsBits = v49;
        v63._object = v48;
        String.append(_:)(v63);
        swift_bridgeObjectRelease(v48);
        uint64_t v64 = v73;
        unint64_t v41 = v74;
        unint64_t v65 = sub_100012624();
        uint64_t v44 = swift_allocError(&type metadata for KMError, v65, 0LL, 0LL);
        *(void *)uint64_t v45 = v64;
        char v46 = 17;
      }
    }

    else
    {
      uint64_t v73 = 0LL;
      unint64_t v74 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(25LL);
      unint64_t v31 = v74;
      uint64_t v71 = a1[3];
      uint64_t v32 = v71;
      uint64_t v33 = type metadata accessor for OSExtension(0LL);
      unint64_t v34 = sub_1000899F4();
      swift_retain(v32);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
      unint64_t v37 = v36;
      swift_release(v32);
      swift_bridgeObjectRelease(v31);
      uint64_t v73 = v35;
      unint64_t v74 = v37;
      v38._object = (void *)0x8000000100126510LL;
      v38._uint64_t countAndFlagsBits = 0xD000000000000015LL;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = sub_10002C54C(v12);
      uint64_t v40 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v40);
      uint64_t v42 = v73;
      unint64_t v41 = v74;
      unint64_t v43 = sub_100012624();
      uint64_t v44 = swift_allocError(&type metadata for KMError, v43, 0LL, 0LL);
      *(void *)uint64_t v45 = v42;
      char v46 = 54;
    }

    *(void *)(v45 + 8) = v41;
    *(_OWORD *)(v45 + 16) = 0u;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_OWORD *)(v45 + 48) = 0u;
    *(void *)(v45 + 64) = 0LL;
    *(_BYTE *)(v45 + 72) = v46;
    return swift_willThrow(v44);
  }

  return result;
}

uint64_t sub_100086AC0(uint64_t a1)
{
  return sub_100086B00(a1, qword_100175510, (uint64_t (*)(void))sub_1000901AC);
}

uint64_t sub_100086AD4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100086AEC(uint64_t a1)
{
  return sub_100086B00(a1, qword_100175528, (uint64_t (*)(void))sub_1000901B8);
}

uint64_t sub_100086B00(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  sub_100089A8C(v5, a2);
  sub_100086AD4(v5, (uint64_t)a2);
  unint64_t v6 = (uint64_t *)a3();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  URL.init(fileURLWithPath:)(v7, v8);
  return swift_bridgeObjectRelease(v8);
}

void *sub_100086B70(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = v4;
  unint64_t v6 = (void *)v3;
  int v60 = a3;
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v58 = (uint64_t)&v55 - v12;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v17 = *(_DWORD *)(v3 + 640);
  LODWORD(v66[0]) = *(_DWORD *)sub_1000A4554();
  LODWORD(v63[0]) = v17;
  unint64_t v18 = sub_100012B34();
  LOBYTE(v17) = dispatch thunk of SetAlgebra.isSuperset(of:)( v66,  &type metadata for ExtensionManager.Settings.Flags,  v18);
  sub_100005F70((uint64_t)a1, (uint64_t)v66);
  uint64_t v69 = v6;
  if ((v17 & 1) != 0)
  {
    sub_100006034(v66);
    sub_100005F70((uint64_t)a1, (uint64_t)v63);
LABEL_4:
    sub_100006034(v63);
    goto LABEL_5;
  }

  uint64_t v19 = v6[5];
  uint64_t v20 = v6[6];
  sub_100005110(v6 + 2, v19);
  sub_100026D98(v19, v20);
  uint64_t v57 = v4;
  uint64_t v21 = v64;
  uint64_t v22 = v65;
  Swift::String v55 = sub_100005110(v63, v64);
  uint64_t v56 = a2;
  uint64_t v23 = v14;
  uint64_t v24 = v67;
  uint64_t v25 = v68;
  sub_100005110(v66, v67);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 64);
  uint64_t v27 = v25;
  uint64_t v14 = v23;
  uint64_t v28 = v26(v24, v27);
  uint64_t v29 = URL.path.getter(v28);
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v13);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v33 = v22;
  uint64_t v5 = v57;
  LOBYTE(v29) = v32(v29, v31, v21, v33);
  uint64_t v34 = v31;
  a2 = v56;
  swift_bridgeObjectRelease(v34);
  sub_100006034(v63);
  sub_100006034(v66);
  sub_100005F70((uint64_t)a1, (uint64_t)v63);
  if ((v29 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v46 = v64;
  uint64_t v47 = v65;
  sub_100005110(v63, v64);
  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 16))(v46, v47);
  unint64_t v50 = v49;
  v62[0] = v48;
  v62[1] = v49;
  __int128 v61 = xmmword_100113010;
  unint64_t v51 = sub_100086F60();
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v62, &v61, &type metadata for PackageType, v51);
  sub_10003783C(v48, v50);
  sub_100006034(v63);
  if ((v52 & 1) != 0)
  {
LABEL_5:
    uint64_t v35 = a1[3];
    uint64_t v36 = a1[4];
    sub_100005110(a1, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v35, v36);
    unint64_t v37 = (uint64_t *)sub_1000901AC();
    uint64_t v38 = *v37;
    Swift::String v39 = (void *)v37[1];
    swift_bridgeObjectRetain(v39);
    uint64_t v40 = v14;
    uint64_t v41 = v58;
    sub_1000D4780(v38, v39, v58);
    swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v42(v41, 0LL, 1LL, v13);
    uint64_t v43 = (uint64_t)v59;
    v42((uint64_t)v59, 1LL, 1LL, v13);
    char v44 = sub_100026BEC();
    uint64_t v45 = (void *)sub_10002FDE0(a1, v44 & 1, v41, v43, a2, v60 & 1);
    sub_100012824(v43, (uint64_t *)&unk_10015BA30);
    sub_100012824(v41, (uint64_t *)&unk_10015BA30);
    if (!v5) {
      sub_1000864A0(v45);
    }
    return v45;
  }

  uint64_t v45 = v69;
  id v53 = sub_100086FA4(a1, a2, v60 & 1);
  if (!v5) {
    return v53;
  }
  return v45;
}

unint64_t sub_100086F60()
{
  unint64_t result = qword_10015A7F0;
  if (!qword_10015A7F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A400, &type metadata for PackageType);
    atomic_store(result, (unint64_t *)&qword_10015A7F0);
  }

  return result;
}

id sub_100086FA4(void *a1, uint64_t a2, int a3)
{
  int v80 = a3;
  uint64_t v81 = a2;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v82 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)&v74 - v7;
  uint64_t v93 = type metadata accessor for URL(0LL);
  uint64_t v95 = *(void *)(v93 - 8);
  uint64_t v8 = __chkstk_darwin(v93);
  uint64_t v79 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v94 = (char *)&v74 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v74 - v12;
  uint64_t v14 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v91 = *(void *)(v14 - 8);
  uint64_t v92 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v76 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v74 - v17;
  uint64_t v19 = sub_1000D30EC();
  uint64_t v20 = OSSignpostID.init(log:)((id)*v19);
  LODWORD(v88) = static os_signpost_type_t.event.getter(v20);
  uint64_t v90 = (id *)v19;
  id v87 = (id)*v19;
  uint64_t v21 = sub_100090248();
  uint64_t v22 = *v21;
  uint64_t v85 = v21[1];
  uint64_t v86 = v22;
  unsigned int v84 = *((unsigned __int8 *)v21 + 16);
  uint64_t v75 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v23 = swift_allocObject(v75, 72LL, 7LL);
  __int128 v78 = xmmword_10010F110;
  *(_OWORD *)(v23 + 16) = xmmword_10010F110;
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  sub_100005110(a1, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 64))(v24, v25);
  uint64_t v27 = URL.path.getter(v26);
  uint64_t v29 = v28;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v95 + 8);
  uint64_t v31 = v93;
  v30(v13, v93);
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v77 = sub_100026B64();
  *(void *)(v23 + 64) = v77;
  *(void *)(v23 + 32) = v27;
  *(void *)(v23 + sub_10007CFB4(v0 + 40) = v29;
  uint64_t v32 = v87;
  os_signpost(_:dso:log:name:signpostID:_:_:)( v88,  &_mh_execute_header,  v87,  v86,  v85,  v84,  v18,  "%{public}s",  10LL,  2,  v23);

  uint64_t v33 = v23;
  uint64_t v34 = v31;
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[4];
  sub_100005110(a1, v35);
  uint64_t v37 = v35;
  uint64_t v38 = v94;
  (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v37, v36);
  sub_1000862B4(v38);
  v30(v13, v34);
  Swift::String v39 = v89;
  sub_100087948(a1, (uint64_t)v97);
  if (v39)
  {
    uint64_t v40 = ((uint64_t (*)(char *, uint64_t))v30)(v38, v34);
    uint64_t v41 = static os_signpost_type_t.end.getter(v40);
    uint64_t v42 = *v21;
    uint64_t v43 = v21[1];
    uint64_t v44 = *((unsigned __int8 *)v21 + 16);
    id v45 = *v90;
    os_signpost(_:dso:log:name:signpostID:)(v41, &_mh_execute_header, v45, v42, v43, v44, v18);
  }

  else
  {
    id v87 = v13;
    uint64_t v88 = (void (*)(uint64_t, uint64_t))v30;
    uint64_t v89 = v21;
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    sub_100005110(a1, v46);
    uint64_t v48 = (uint64_t)v83;
    (*(void (**)(uint64_t, uint64_t))(v47 + 64))(v46, v47);
    unint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v49(v48, 0LL, 1LL, v34);
    uint64_t v50 = (uint64_t)v82;
    v49((uint64_t)v82, 1LL, 1LL, v34);
    char v51 = sub_100026BEC();
    char v52 = (unsigned __int8 *)sub_10002FDE0(v97, v51 & 1, v48, v50, v81, v80 & 1);
    sub_100012824(v50, (uint64_t *)&unk_10015BA30);
    sub_100012824(v48, (uint64_t *)&unk_10015BA30);
    id v53 = (void *)swift_retain(v52);
    sub_1000864A0(v53);
    uint64_t v54 = (uint64_t)v94;
    sub_100088964(v97, (uint64_t)v94, (uint64_t)v96);
    type metadata accessor for OSExtension(0LL);
    uint64_t v61 = sub_1000F46C0(v96);
    Swift::String v62 = v88;
    if (v61)
    {
      uint64_t v63 = v61;
      type metadata accessor for RealizedInfo(0LL);
      id v45 = (id)sub_1000897EC(v63, v52);
      swift_release(v52);
      sub_100006034(v96);
      swift_release(v52);
      v62(v54, v34);
      uint64_t v64 = sub_100006034(v97);
      uint64_t v65 = static os_signpost_type_t.end.getter(v64);
      uint64_t v66 = *v89;
      uint64_t v67 = v89[1];
      uint64_t v68 = *((unsigned __int8 *)v89 + 16);
      uint64_t v69 = v18;
      id v70 = *v90;
      os_signpost(_:dso:log:name:signpostID:)(v65, &_mh_execute_header, v70, v66, v67, v68, v69);

      (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v92);
      return v45;
    }

    swift_release(v52);
    unint64_t v71 = sub_100012624();
    uint64_t v72 = swift_allocError(&type metadata for KMError, v71, 0LL, 0LL);
    *(void *)uint64_t v73 = 0xD00000000000002DLL;
    *(void *)(v73 + 8) = 0x8000000100126050LL;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(void *)(v73 + 64) = 0LL;
    *(_BYTE *)(v73 + 72) = 27;
    swift_willThrow(v72);
    sub_100006034(v96);
    swift_release(v52);
    v62(v54, v34);
    uint64_t v55 = sub_100006034(v97);
    uint64_t v56 = static os_signpost_type_t.end.getter(v55);
    uint64_t v57 = *v89;
    uint64_t v58 = v89[1];
    uint64_t v59 = *((unsigned __int8 *)v89 + 16);
    id v45 = *v90;
    os_signpost(_:dso:log:name:signpostID:)(v56, &_mh_execute_header, v45, v57, v58, v59, v18);
  }

  (*(void (**)(char *, uint64_t))(v91 + 8))(v18, v92);
  return v45;
}

uint64_t sub_100087948@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v167 = a2;
  uint64_t v170 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v169 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  __int128 v168 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  v178 = *(uint64_t (**)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  v171 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  v172 = (char *)&v165 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v179 = (uint64_t *)((char *)&v165 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  v177 = (char *)&v165 - v14;
  __chkstk_darwin(v13);
  v173 = (char *)&v165 - v15;
  LOBYTE(v184) = 0;
  uint64_t v16 = v2 + 2;
  uint64_t v17 = v2[5];
  uint64_t v18 = v2[6];
  v183 = v16;
  sub_100005110(v16, v17);
  sub_1001073DC(v17, v18);
  uint64_t v19 = v189;
  sub_100005110(&v186, v188);
  if (qword_1001632F8 != -1) {
    swift_once(&qword_1001632F8, sub_100086AEC);
  }
  uint64_t v20 = sub_100086AD4(v6, (uint64_t)qword_100175528);
  uint64_t v21 = URL.path.getter(v20);
  uint64_t v23 = v22;
  char v24 = (*(uint64_t (**)(uint64_t))(v19 + 136))(v21);
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = sub_100006034(&v186);
  v181 = v3;
  v182 = a1;
  if ((v24 & 1) == 0)
  {
    uint64_t v26 = v183;
    if ((v184 & 1) != 0)
    {
      uint64_t v180 = v6;
LABEL_9:
      uint64_t v34 = static os_log_type_t.error.getter(v25);
      uint64_t v174 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v35 = swift_allocObject(v174, 72LL, 7LL);
      *(_OWORD *)(v35 + 16) = xmmword_10010F110;
      uint64_t v36 = URL.path.getter(v35);
      uint64_t v38 = v37;
      *(void *)(v35 + 56) = &type metadata for String;
      *(void *)(v35 + 64) = sub_100026B64();
      *(void *)(v35 + 32) = v36;
      *(void *)(v35 + sub_10007CFB4(v0 + 40) = v38;
      unint64_t v175 = sub_100026BA8();
      uint64_t v39 = static OS_os_log.default.getter(v175);
      os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v39,  "Staging directory at %{public}s does not exist, attempting to create.",  69LL,  2LL,  v35);

      uint64_t v40 = swift_bridgeObjectRelease(v35);
      LODWORD(v39) = S_IRWXU.getter(v40);
      LODWORD(v34) = S_IRGRP.getter() | v39;
      LODWORD(v39) = S_IXGRP.getter();
      LODWORD(v39) = v34 | v39 | S_IROTH.getter();
      uint64_t v41 = v39 | S_IXOTH.getter();
      uint64_t v42 = v3[5];
      uint64_t v43 = v3[6];
      sub_100005110(v26, v42);
      sub_1001073DC(v42, v43);
      uint64_t v44 = v188;
      uint64_t v45 = v189;
      sub_100005110(&v186, v188);
      uint64_t v46 = (uint64_t *)sub_1000901A0();
      uint64_t v47 = *v46;
      uint64_t v48 = v46[1];
      unint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
      swift_bridgeObjectRetain(v48);
      v49(v20, v41, v47, v48, v44, v45);
      swift_bridgeObjectRelease(v48);
      sub_100006034(&v186);
      uint64_t v6 = v180;
      uint64_t v3 = v181;
      a1 = v182;
      uint64_t v26 = v183;
      goto LABEL_10;
    }

void sub_100088964(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v125 = a3;
  uint64_t v138 = (void *)type metadata accessor for OSSignpostID(0LL);
  uint64_t v133 = (_BYTE *)*(v138 - 1);
  __chkstk_darwin(v138);
  uint64_t v6 = &v122[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v136 = *(void *)(v7 - 8);
  uint64_t v137 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v126 = &v122[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v122[-v11];
  __chkstk_darwin(v10);
  uint64_t v14 = &v122[-v13];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100005110(a1, v15);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  uint64_t v135 = v14;
  uint64_t v18 = v17(v15, v16);
  uint64_t v130 = a2;
  uint64_t Path = URL.deletingLastPathComponent()(v18);
  LODWORD(v132) = static os_signpost_type_t.event.getter(Path);
  uint64_t v129 = sub_1000D30EC();
  id v20 = (id)*v129;
  uint64_t v21 = sub_100090248();
  uint64_t v22 = v21[1];
  uint64_t v131 = *v21;
  uint64_t v23 = *((unsigned __int8 *)v21 + 16);
  uint64_t v127 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v24 = swift_allocObject(v127, 72LL, 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_10010F110;
  uint64_t v25 = URL.path.getter(v24);
  uint64_t v27 = v26;
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v28 = sub_100026B64();
  unint64_t v128 = v28;
  *(void *)(v24 + 64) = v28;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + sub_10007CFB4(v0 + 40) = v27;
  static OSSignpostID.exclusive.getter(v28);
  uint64_t v29 = v23;
  uint64_t v30 = v139;
  os_signpost(_:dso:log:name:signpostID:_:_:)( v132,  &_mh_execute_header,  v20,  v131,  v22,  v29,  v6,  "Ensuring parent directory %{public}s exists",  43LL,  2,  v24);

  swift_bridgeObjectRelease(v24);
  uint64_t v31 = (void (*)(_BYTE *, void *))*((void *)v133 + 1);
  uint64_t v133 = v6;
  v31(v6, v138);
  uint64_t v32 = v30[5];
  uint64_t v33 = v30[6];
  sub_100005110(v30 + 2, v32);
  sub_1001073DC(v32, v33);
  uint64_t v34 = v144;
  uint64_t v35 = v145;
  sub_100005110(&v142, v144);
  uint64_t v36 = v134;
  (*(void (**)(_BYTE *, uint64_t, void, uint64_t, uint64_t))(v35 + 48))(v12, 1LL, 0LL, v34, v35);
  if (v36)
  {
    sub_100006034(&v142);
    unint64_t v142 = 0LL;
    unint64_t v143 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(v143);
    unint64_t v142 = 0xD000000000000022LL;
    unint64_t v143 = 0x80000001001260B0LL;
    *(void *)&__int128 v140 = v36;
    swift_errorRetain(v36);
    uint64_t v37 = sub_100005FB4(&qword_10015AB20);
    v38._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v140, v37);
    object = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    unint64_t v40 = v142;
    unint64_t v41 = v143;
    unint64_t v42 = sub_100012624();
    uint64_t v43 = swift_allocError(&type metadata for KMError, v42, 0LL, 0LL);
    *(void *)uint64_t v44 = v40;
    *(void *)(v44 + 8) = v41;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(void *)(v44 + 64) = 0LL;
    *(_BYTE *)(v44 + 72) = 27;
    swift_willThrow(v43);
    swift_errorRelease(v36);
    uint64_t v45 = v137;
    uint64_t v46 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
    v46(v12, v137);
    uint64_t v47 = (uint64_t)v135;
    sub_10008946C((uint64_t)v135, v30);
    uint64_t v48 = v47;
    uint64_t v49 = v45;
LABEL_3:
    v46((_BYTE *)v48, v49);
    return;
  }

  v124 = v12;
  uint64_t v50 = sub_100006034(&v142);
  unsigned int v123 = static os_signpost_type_t.event.getter(v50);
  id v51 = (id)*v129;
  char v132 = *v21;
  uint64_t v131 = v21[1];
  LODWORD(v129) = *((unsigned __int8 *)v21 + 16);
  uint64_t v52 = swift_allocObject(v127, 112LL, 7LL);
  uint64_t v134 = v30 + 2;
  id v53 = (void *)v52;
  *(_OWORD *)(v52 + 16) = xmmword_10010F440;
  id v54 = v51;
  uint64_t v55 = (uint64_t)v135;
  uint64_t v56 = URL.path.getter(v54);
  unint64_t v57 = v128;
  v53[7] = &type metadata for String;
  v53[8] = v57;
  v53[4] = v56;
  v53[5] = v58;
  uint64_t v59 = v130;
  uint64_t v60 = URL.path.getter(v56);
  v53[12] = &type metadata for String;
  v53[13] = v57;
  v53[9] = v60;
  v53[10] = v61;
  uint64_t v62 = v133;
  static OSSignpostID.exclusive.getter(v60);
  LOBYTE(v121) = 2;
  uint64_t v63 = v139;
  os_signpost(_:dso:log:name:signpostID:_:_:)( v123,  &_mh_execute_header,  v54,  v132,  v131,  v129,  v62,  "Moving %{public}s to final location at %{public}s",  49LL,  v121,  v53);

  char v64 = v53;
  uint64_t v65 = v63;
  swift_bridgeObjectRelease(v64);
  v31(v62, v138);
  uint64_t v66 = v63[5];
  uint64_t v67 = v63[6];
  sub_100005110(v134, v66);
  sub_1001073DC(v66, v67);
  uint64_t v68 = v144;
  uint64_t v69 = v145;
  sub_100005110(&v142, v144);
  *(void *)&__int128 v140 = 0LL;
  (*(void (**)(uint64_t, uint64_t, void, void, void, __int128 *, uint64_t, uint64_t))(v69 + 88))( v59,  v55,  0LL,  0LL,  0LL,  &v140,  v68,  v69);
  uint64_t v70 = v55;
  unint64_t v71 = v65;
  Swift::String v72 = (id)v140;
  sub_100006034(&v142);
  Swift::String v73 = v124;
  uint64_t v74 = v136;
  if (!v72)
  {
    unint64_t v142 = 0LL;
    unint64_t v143 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(59LL);
    v83._uint64_t countAndFlagsBits = 0xD000000000000033LL;
    v83._object = (void *)0x8000000100126150LL;
    String.append(_:)(v83);
    v85._uint64_t countAndFlagsBits = URL.path.getter(v84);
    id v86 = v85._object;
    String.append(_:)(v85);
    swift_bridgeObjectRelease(v86);
    v87._uint64_t countAndFlagsBits = 544175136LL;
    v87._object = (void *)0xE400000000000000LL;
    String.append(_:)(v87);
    v89._uint64_t countAndFlagsBits = URL.path.getter(v88);
    uint64_t v90 = v89._object;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(v90);
    unint64_t v91 = v142;
    unint64_t v92 = v143;
    unint64_t v93 = sub_100012624();
    uint64_t v94 = swift_allocError(&type metadata for KMError, v93, 0LL, 0LL);
    *(void *)uint64_t v95 = v91;
    *(void *)(v95 + 8) = v92;
    *(_OWORD *)(v95 + 16) = 0u;
    *(_OWORD *)(v95 + 32) = 0u;
    *(_OWORD *)(v95 + 48) = 0u;
    *(void *)(v95 + 64) = 0LL;
    *(_BYTE *)(v95 + 72) = 27;
    swift_willThrow(v94);
    uint64_t v46 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
    uint64_t v96 = v137;
    v46(v73, v137);
    sub_10008946C(v70, v71);
    uint64_t v48 = v70;
    uint64_t v49 = v96;
    goto LABEL_3;
  }

  uint64_t v138 = v72;
  uint64_t v75 = static URL._unconditionallyBridgeFromObjectiveC(_:)(v72);
  uint64_t v76 = URL.path.getter(v75);
  uint64_t v78 = v77;
  uint64_t v80 = URL.path.getter(v76);
  uint64_t v81 = v79;
  uint64_t v82 = v137;
  if (v76 == v80 && v78 == v79)
  {
    swift_bridgeObjectRelease_n(v78, 2LL);
  }

  else
  {
    char v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v80, v79, 0LL);
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v81);
    if ((v97 & 1) == 0)
    {
      uint64_t v106 = v71[5];
      uint64_t v107 = v71[6];
      sub_100005110(v134, v106);
      sub_1001073DC(v106, v107);
      uint64_t v108 = v144;
      uint64_t v109 = v145;
      sub_100005110(&v142, v144);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v109 + 104))(v126, v108, v109);
      sub_100006034(&v142);
      unint64_t v142 = 0LL;
      unint64_t v143 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(55LL);
      v110._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      v110._object = (void *)0x8000000100126190LL;
      String.append(_:)(v110);
      uint64_t v111 = v126;
      v113._uint64_t countAndFlagsBits = URL.path.getter(v112);
      uint64_t v114 = v113._object;
      String.append(_:)(v113);
      swift_bridgeObjectRelease(v114);
      v115._uint64_t countAndFlagsBits = 0x6974656C6544202ELL;
      v115._object = (void *)0xEB000000002E676ELL;
      String.append(_:)(v115);
      unint64_t v116 = v142;
      unint64_t v117 = v143;
      unint64_t v118 = sub_100012624();
      uint64_t v119 = swift_allocError(&type metadata for KMError, v118, 0LL, 0LL);
      *(void *)uint64_t v120 = v116;
      *(void *)(v120 + 8) = v117;
      *(_OWORD *)(v120 + 16) = 0u;
      *(_OWORD *)(v120 + 32) = 0u;
      *(_OWORD *)(v120 + 48) = 0u;
      *(void *)(v120 + 64) = 0LL;
      *(_BYTE *)(v120 + 72) = 27;
      swift_willThrow(v119);
      uint64_t v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v102(v111, v82);
      goto LABEL_14;
    }
  }

  uint64_t v98 = v71[5];
  uint64_t v99 = v71[6];
  sub_100005110(v134, v98);
  sub_10009C2CC(v98, v99);
  uint64_t v100 = v144;
  uint64_t v101 = v145;
  sub_100005110(&v142, v144);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v101 + 24))(&v140, v59, v100, v101);
  if (!v141)
  {
    sub_100012824((uint64_t)&v140, &qword_100157C58);
    sub_100006034(&v142);
    unint64_t v103 = sub_100012624();
    uint64_t v104 = swift_allocError(&type metadata for KMError, v103, 0LL, 0LL);
    *(void *)uint64_t v105 = 0xD000000000000028LL;
    *(void *)(v105 + 8) = 0x80000001001261C0LL;
    *(_OWORD *)(v105 + 16) = 0u;
    *(_OWORD *)(v105 + 32) = 0u;
    *(_OWORD *)(v105 + 48) = 0u;
    *(void *)(v105 + 64) = 0LL;
    *(_BYTE *)(v105 + 72) = 27;
    swift_willThrow(v104);
    uint64_t v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
    v102(v126, v82);
LABEL_14:
    v102(v124, v82);
    goto LABEL_15;
  }

  uint64_t v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
  v102(v126, v82);
  v102(v124, v82);
  sub_100005158(&v140, v125);
  sub_100006034(&v142);
LABEL_15:
  sub_10008946C(v70, v71);
  v102((_BYTE *)v70, v82);
}

uint64_t sub_10008946C(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.deletingLastPathComponent()(v8);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v39 = a2 + 2;
  sub_100005110(a2 + 2, v11);
  sub_1001073DC(v11, v12);
  uint64_t v13 = v44;
  uint64_t v14 = sub_100005110(v42, v43);
  uint64_t v15 = URL.path.getter(v14);
  uint64_t v17 = v16;
  LOBYTE(v11) = (*(uint64_t (**)(uint64_t))(v13 + 136))(v15);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = sub_100006034(v42);
  if ((v11 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v37 = v7;
  uint64_t v38 = v6;
  unsigned int v36 = static os_signpost_type_t.event.getter(v18);
  id v19 = (id)*sub_1000D30EC();
  id v20 = sub_100090248();
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  unsigned int v35 = *((unsigned __int8 *)v20 + 16);
  uint64_t v34 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v23 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_10010F110;
  uint64_t v24 = URL.path.getter(v23);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v27 = sub_100026B64();
  *(void *)(v23 + 64) = v27;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + sub_10007CFB4(v0 + 40) = v26;
  static OSSignpostID.exclusive.getter(v27);
  os_signpost(_:dso:log:name:signpostID:_:_:)( v36,  &_mh_execute_header,  v19,  v22,  v21,  v35,  v5,  "Removing temporary bundle at %{public}s",  39LL,  2,  v23);

  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v41);
  uint64_t v28 = a2[5];
  uint64_t v29 = a2[6];
  sub_100005110(v39, v28);
  sub_1001073DC(v28, v29);
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  sub_100005110(v42, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v10, v30, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  return sub_100006034(v42);
}

uint64_t sub_1000897EC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v26 = a1;
  uint64_t v3 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v3);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_10001A148((uint64_t)(a2 + 32), (uint64_t)v28, &qword_100157FF0);
  unsigned int v24 = a2[72];
  uint64_t v10 = (*(void *(**)(void *__return_ptr, uint64_t))(*(void *)a2 + 192LL))(v27, v9);
  uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)a2 + 216LL))(v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  sub_10001A148( (uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL],  (uint64_t)v8,  (uint64_t *)&unk_10015BA30);
  uint64_t v16 = *(void *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex];
  unsigned __int8 v17 = a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8];
  sub_10001A148((uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid], (uint64_t)v5, &qword_1001588F8);
  uint64_t v18 = *(void *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches];
  id v19 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 168LL);
  uint64_t v20 = swift_bridgeObjectRetain(v18);
  uint64_t v21 = v19(v20);
  return (*(uint64_t (**)(uint64_t, _BYTE *, void, void *, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, unsigned __int8, _BYTE *, uint64_t, uint64_t))(v25 + 264))( v26,  v28,  v24,  v27,  v11,  v13,  v15,  v8,  v16,  v17,  v5,  v18,  v21);
}

unint64_t sub_1000899A8()
{
  unint64_t result = qword_10015A800;
  if (!qword_10015A800)
  {
    uint64_t v1 = sub_100012010(&qword_10015A7F8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015A800);
  }

  return result;
}

unint64_t sub_1000899F4()
{
  unint64_t result = qword_100157C70;
  if (!qword_100157C70)
  {
    uint64_t v1 = type metadata accessor for OSExtension(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10011B528, v1);
    atomic_store(result, (unint64_t *)&qword_100157C70);
  }

  return result;
}

uint64_t sub_100089A3C( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 72);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  v4);
  return a1;
}

uint64_t *sub_100089A8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100089ACC(void *a1)
{
  uint64_t v2 = (uint64_t *)v1;
  int v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v89[0]) = *(_DWORD *)sub_1000A4504();
  LODWORD(v86[0]) = v4;
  unint64_t v5 = sub_100012B34();
  char v6 = dispatch thunk of SetAlgebra.isSuperset(of:)(v89, &type metadata for ExtensionManager.Settings.Flags, v5);
  uint64_t v7 = (void *)*a1;
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = *sub_10002C0D8();
    uint64_t v9 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v7 + 184LL))(v89);
    v86[0] = v8;
    v87[0] = *v10;
    unint64_t v11 = sub_100039F14();
    dispatch thunk of SetAlgebra.intersection(_:)(v85, v86, &type metadata for RealizedInfo.Flags, v11);
    unint64_t v12 = sub_100039F5C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v85, v86, &type metadata for RealizedInfo.Flags, v12) & 1) == 0)
    {
      v87[0] = v8;
      dispatch thunk of SetAlgebra.formUnion(_:)(v87, &type metadata for RealizedInfo.Flags, v11);
    }

    v9(v89, 0LL);
    return 1LL;
  }

  uint64_t v14 = v7[3];
  uint64_t v15 = type metadata accessor for KernelExtension(0LL);
  if (swift_dynamicCastClass(v14, v15))
  {
    swift_retain(v14);
    uint64_t v16 = *sub_1000F6160();
    swift_bridgeObjectRetain(v16);
    swift_release(v14);
    unsigned __int8 v17 = v2 + 20;
    uint64_t v18 = v2 + 21;
    goto LABEL_10;
  }

  uint64_t v19 = type metadata accessor for DriverExtension(0LL);
  if (swift_dynamicCastClass(v14, v19))
  {
    swift_retain(v14);
    uint64_t v16 = *sub_1000F669C();
    swift_bridgeObjectRetain(v16);
    swift_release(v14);
    unsigned __int8 v17 = v2 + 22;
    uint64_t v18 = v2 + 23;
LABEL_10:
    uint64_t v20 = *v18;
    uint64_t v21 = *v17;
    swift_bridgeObjectRetain(*v18);
    uint64_t v22 = sub_100005FB4(&qword_10015A808);
    uint64_t inited = swift_initStackObject(v22, v88);
    *(_OWORD *)(inited + 16) = xmmword_10010F110;
    unsigned int v24 = sub_10008FAC0();
    uint64_t v26 = *(void *)v24;
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)(inited + 32) = v26;
    *(void *)(inited + sub_10007CFB4(v0 + 40) = v25;
    *(void *)(inited + 48) = v21;
    *(void *)(inited + 56) = v20;
    swift_bridgeObjectRetain(v25);
    unint64_t v27 = sub_10002F8A4(inited);
    sub_100005FB4(&qword_10015A810);
    v89[3] = type metadata accessor for RealizedInfo(0LL);
    v89[4] = &off_100146F00;
    v89[0] = v7;
    swift_retain(v7);
    unint64_t v28 = sub_10008A840(v27);
    swift_bridgeObjectRelease(v27);
    uint64_t v30 = sub_1000F9C0C((uint64_t)v89, v16, v28, v29);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v28);
    sub_100006034(v89);
    if (!v30)
    {
      sub_10008ABA8((uint64_t)a1);
      uint64_t v65 = (void *)*a1;
      uint64_t v66 = *sub_10002C0D8();
      uint64_t v67 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v65 + 184LL))(v89);
      v86[0] = v66;
      v87[0] = *v68;
      unint64_t v69 = sub_100039F14();
      dispatch thunk of SetAlgebra.intersection(_:)(v85, v86, &type metadata for RealizedInfo.Flags, v69);
      unint64_t v70 = sub_100039F5C();
      char v71 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v86, &type metadata for RealizedInfo.Flags, v70);
      if ((v71 & 1) == 0)
      {
        v87[0] = v66;
        dispatch thunk of SetAlgebra.formUnion(_:)(v87, &type metadata for RealizedInfo.Flags, v69);
      }

      v67(v89, 0LL);
      sub_10008A468(a1);
      return 1LL;
    }

    uint64_t v31 = (void *)*a1;
    uint64_t v32 = *(void *)(*a1 + 24LL);
    uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v32 + 144LL);
    uint64_t v34 = swift_retain(v32);
    unsigned int v35 = (void *)v33(v34);
    uint64_t v37 = v36;
    swift_release(v32);
    if ((unint64_t)v30 >> 62)
    {
      if (v30 >= 0) {
        uint64_t v72 = v30 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v72 = v30;
      }
      swift_bridgeObjectRetain(v30);
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v30);
      if (v38) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v38 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      if (v38)
      {
LABEL_13:
        v89[0] = _swiftEmptyArrayStorage;
        sub_10000CC84(0, v38 & ~(v38 >> 63), 0);
        if (v38 < 0)
        {
          __break(1u);
          uint64_t v81 = sub_10008ECFC(0LL, v2[2] + 1, 1, v2);
          *unsigned int v35 = v81;
          unint64_t v48 = v81[2];
          unint64_t v47 = v81[3];
          if (v48 >= v47 >> 1)
          {
            uint64_t v81 = sub_10008ECFC((void *)(v47 > 1), v48 + 1, 1, v81);
            *unsigned int v35 = v81;
          }

          v81[2] = v48 + 1;
          sub_1000516A8((uint64_t)v89, (uint64_t)&v81[10 * v48 + 4]);
          uint64_t v49 = ((uint64_t (*)(void *, void))v89[0])(v85, 0LL);
          uint64_t v50 = static os_log_type_t.error.getter(v49);
          uint64_t v51 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v52 = swift_allocObject(v51, 72LL, 7LL);
          *(_OWORD *)(v52 + 16) = xmmword_10010F110;
          sub_1000B48B4();
          uint64_t v54 = v53;
          uint64_t v56 = v55;
          *(void *)(v52 + 56) = &type metadata for String;
          *(void *)(v52 + 64) = sub_100026B64();
          *(void *)(v52 + 32) = v54;
          *(void *)(v52 + sub_10007CFB4(v0 + 40) = v56;
          unint64_t v57 = sub_100026BA8();
          uint64_t v58 = (void *)static OS_os_log.default.getter(v57);
          os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v58, "Validation Error: %{public}s", 28LL, 2LL, v52);
          sub_100089A3C( (uint64_t)v89,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
          swift_bridgeObjectRelease(v52);

          swift_errorRelease(v87[0]);
          goto LABEL_42;
        }

        uint64_t v82 = v37;
        Swift::String v83 = v35;
        uint64_t v84 = a1;
        uint64_t v39 = (void *)v89[0];
        if ((v30 & 0xC000000000000001LL) != 0)
        {
          uint64_t v40 = 0LL;
          do
          {
            uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v30);
            uint64_t v42 = *(void *)(v41 + 16);
            uint64_t v43 = *(void *)(v41 + 24);
            swift_bridgeObjectRetain(v43);
            swift_unknownObjectRelease(v41);
            v89[0] = v39;
            unint64_t v45 = v39[2];
            unint64_t v44 = v39[3];
            if (v45 >= v44 >> 1)
            {
              sub_10000CC84(v44 > 1, v45 + 1, 1);
              uint64_t v39 = (void *)v89[0];
            }

            ++v40;
            v39[2] = v45 + 1;
            uint64_t v46 = &v39[2 * v45];
            v46[4] = v42;
            v46[5] = v43;
          }

          while (v38 != v40);
        }

        else
        {
          uint64_t v59 = v30 + 32;
          do
          {
            uint64_t v60 = *(void *)(*(void *)v59 + 16LL);
            uint64_t v61 = *(void *)(*(void *)v59 + 24LL);
            v89[0] = v39;
            unint64_t v62 = v39[2];
            unint64_t v63 = v39[3];
            swift_bridgeObjectRetain(v61);
            if (v62 >= v63 >> 1)
            {
              sub_10000CC84(v63 > 1, v62 + 1, 1);
              uint64_t v39 = (void *)v89[0];
            }

            v39[2] = v62 + 1;
            char v64 = &v39[2 * v62];
            v64[4] = v60;
            v64[5] = v61;
            v59 += 8LL;
            --v38;
          }

          while (v38);
        }

        swift_bridgeObjectRelease(v30);
        unsigned int v35 = v83;
        a1 = v84;
        uint64_t v37 = v82;
LABEL_37:
        Swift::String v73 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v31 + 256LL))(v89);
        uint64_t v75 = v74;
        uint64_t v76 = (void *)*v74;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v74);
        void *v75 = v76;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v76 = sub_10008ECFC(0LL, v76[2] + 1LL, 1, v76);
          void *v75 = v76;
        }

        unint64_t v79 = v76[2];
        unint64_t v78 = v76[3];
        if (v79 >= v78 >> 1)
        {
          uint64_t v76 = sub_10008ECFC((void *)(v78 > 1), v79 + 1, 1, v76);
          void *v75 = v76;
        }

        v76[2] = v79 + 1;
        uint64_t v80 = &v76[10 * v79];
        v80[4] = v35;
        v80[5] = v37;
        v80[6] = v39;
        *(_OWORD *)(v80 + 7) = 0u;
        *(_OWORD *)(v80 + 9) = 0u;
        *(_OWORD *)(v80 + 11) = 0u;
        *((_BYTE *)v80 + 104) = 18;
        v73(v89, 0LL);
LABEL_42:
        sub_10008A468(a1);
        return 0LL;
      }
    }

    swift_bridgeObjectRelease(v30);
    uint64_t v39 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002ALL,  0x8000000100126550LL,  "driverkitd/Validation.swift",  27LL,  2LL,  43LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10008A468(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  uint64_t v48 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  swift_retain(*a1);
  uint64_t v12 = *sub_10002C128();
  uint64_t v13 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v11 + 184LL))(v54);
  uint64_t v53 = v12;
  uint64_t v51 = *v14;
  unint64_t v15 = sub_100039F14();
  dispatch thunk of SetAlgebra.intersection(_:)(&v52, &v53, &type metadata for RealizedInfo.Flags, v15);
  unint64_t v16 = sub_100039F5C();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v52, &v53, &type metadata for RealizedInfo.Flags, v16) & 1) == 0)
  {
    uint64_t v51 = v12;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v51, &type metadata for RealizedInfo.Flags, v15);
  }

  v13(v54, 0LL);
  swift_release(v11);
  uint64_t v17 = *(void *)(*a1 + 24LL);
  uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 144LL);
  uint64_t v19 = swift_retain(v17);
  uint64_t v45 = v18(v19);
  unint64_t v21 = v20;
  swift_release(v17);
  uint64_t v22 = sub_1000D3540();
  uint64_t v24 = v49;
  uint64_t v23 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v10, v22, v50);
  uint64_t v25 = sub_10009026C();
  uint64_t v26 = *v25;
  char v27 = *((_BYTE *)v25 + 16);
  uint64_t v28 = swift_bridgeObjectRetain(v21);
  uint64_t v29 = v7;
  uint64_t v30 = static OSSignpostID.exclusive.getter(v28);
  uint64_t v31 = (void *)OSSignposter.logHandle.getter(v30);
  int v32 = static os_signpost_type_t.event.getter(v31);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_7;
  }
  int v44 = v32;
  if ((v27 & 1) == 0)
  {
    if (!v26)
    {
      swift_bridgeObjectRelease_n(v21, 2LL);
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease_n(v21, 2LL);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v47);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v23);
    }

    goto LABEL_12;
  }

  if ((unint64_t)v26 >> 32)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (v26 >> 11 == 27)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  if (v26 >> 16 > 0x10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v26 = &v55;
LABEL_12:
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  unsigned int v35 = v46;
  uint64_t v36 = v29;
  uint64_t v43 = v29;
  uint64_t v37 = v47;
  v34(v46, v36, v47);
  uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v39 = swift_slowAlloc(32LL, -1LL);
  v54[0] = v39;
  *(_DWORD *)uint64_t v38 = 136315138;
  swift_bridgeObjectRetain(v21);
  uint64_t v53 = sub_1000058CC(v45, v21, v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v38 + 4, v38 + 12);
  uint64_t v40 = swift_bridgeObjectRelease_n(v21, 3LL);
  os_signpost_id_t v41 = OSSignpostID.rawValue.getter(v40);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v31,  (os_signpost_type_t)v44,  v41,  v26,  "Validated: %s",  v38,  0xCu);
  swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v39, -1LL, -1LL);
  swift_slowDealloc(v38, -1LL, -1LL);

  uint64_t v42 = *(void (**)(char *, uint64_t))(v48 + 8);
  v42(v43, v37);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v50);
  return ((uint64_t (*)(char *, uint64_t))v42)(v35, v37);
}

unint64_t sub_10008A840(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100005FB4(&qword_100158228);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v47;
  uint64_t v8 = &v49;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  uint64_t v12 = &type metadata for String;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v21 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v21 >= v40) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v41 + 8 * v21);
  int64_t v23 = i + 1;
  if (!v22)
  {
    int64_t v23 = i + 2;
    if (i + 2 >= v40) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v41 + 8 * v23);
    if (!v22)
    {
      int64_t v23 = i + 3;
      if (i + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = i + 4;
        if (i + 4 >= v40) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v41 + 8 * v23);
        if (!v22)
        {
          int64_t v24 = i + 5;
          if (i + 5 < v40)
          {
            unint64_t v22 = *(void *)(v41 + 8 * v24);
            if (v22)
            {
              int64_t v23 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v23 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_36;
              }
              if (v23 >= v40) {
                break;
              }
              unint64_t v22 = *(void *)(v41 + 8 * v23);
              ++v24;
              if (v22) {
                goto LABEL_26;
              }
            }
          }

void sub_10008ABA8(uint64_t a1)
{
  void (*v37)(__int128 *__return_ptr, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  Swift::String v60;
  Swift::Bool v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t inited;
  NSString *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  Swift::String v96;
  Swift::String v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  Swift::String v104;
  Swift::Bool v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v110;
  void *v111;
  Swift::String v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  void *v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  Swift::String v140;
  Swift::Bool v141;
  Swift::String v142;
  Swift::String v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  Swift::String v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  void *v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  Swift::Int v169;
  uint64_t v170;
  void *v171;
  void *v172;
  Swift::String v173;
  __int128 v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  uint64_t v217;
  Swift::String v218;
  Swift::Bool v219;
  Swift::String v220;
  Swift::String v221;
  uint64_t v222;
  Swift::String v223;
  Swift::String v224;
  Swift::String v225;
  Swift::String v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  void *v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  __int128 v250;
  void v251[2];
  char v252;
  char v253[40];
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  v249 = (char *)&v241 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  *(void *)&v250 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  v248 = (char *)&v241 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v241 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v241 - v14;
  int v16 = *(_DWORD *)(v1 + 640);
  LODWORD(v261) = *(_DWORD *)sub_1000A4914();
  LODWORD(v258) = v16;
  unint64_t v17 = sub_100012B34();
  uint64_t v18 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v261, &type metadata for ExtensionManager.Settings.Flags, v17);
  if ((v18 & 1) == 0)
  {
    v247 = v8;
    sub_10003A50C((uint64_t *)(*(void *)(*(void *)a1 + 24LL) + 24LL), (uint64_t)&v261);
    if (v265 == 1)
    {
      swift_release(v261);
      v261 = 0LL;
      v262 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(56LL);
      v26._uint64_t countAndFlagsBits = 0xD000000000000036LL;
      v26._object = (void *)0x80000001001269B0LL;
      String.append(_:)(v26);
LABEL_9:
      unint64_t v27 = sub_100039DFC();
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for OSExtension.Location,  v27);
      object = v28._object;
      String.append(_:)(v28);
      uint64_t v30 = swift_bridgeObjectRelease(object);
      unint64_t v32 = v261;
      unint64_t v31 = v262;
      uint64_t v33 = static os_log_type_t.info.getter(v30);
      uint64_t v34 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v21 = swift_allocObject(v34, 72LL, 7LL);
      *(_OWORD *)(v21 + 16) = xmmword_10010F110;
      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_100026B64();
      *(void *)(v21 + 32) = v32;
      *(void *)(v21 + sub_10007CFB4(v0 + 40) = v31;
      sub_100026BA8();
      uint64_t v35 = swift_bridgeObjectRetain(v31);
      uint64_t v25 = (void *)static OS_os_log.default.getter(v35);
      os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  v25,  "Finished extension FS validation with result: %{public}",  55LL,  2LL,  v21);
      swift_bridgeObjectRelease(v31);
      goto LABEL_10;
    }

    sub_10003A584(&v261);
    sub_10003A50C((uint64_t *)(*(void *)(*(void *)a1 + 24LL) + 24LL), (uint64_t)&v261);
    if (v265 == 2)
    {
      v261 = 0LL;
      v262 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(34LL);
      swift_bridgeObjectRelease(v262);
      v261 = 0xD000000000000020LL;
      v262 = 0x8000000100126980LL;
      goto LABEL_9;
    }

    sub_10003A584(&v261);
    uint64_t v36 = *(void *)(*(void *)a1 + 24LL);
    uint64_t v37 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v36 + 112LL);
    BOOL v38 = swift_retain(v36);
    v37(&v258, v38);
    swift_release(v36);
    if (!v259)
    {
      sub_100012824((uint64_t)&v258, &qword_100157C58);
      unint64_t v79 = sub_100012624();
      uint64_t v80 = swift_allocError(&type metadata for KMError, v79, 0LL, 0LL);
      *(void *)uint64_t v81 = 0xD000000000000020LL;
      *(void *)(v81 + 8) = 0x80000001001265F0LL;
      *(_OWORD *)(v81 + 16) = 0u;
      *(_OWORD *)(v81 + 32) = 0u;
      *(_OWORD *)(v81 + 48) = 0u;
      *(void *)(v81 + 64) = 0LL;
      *(_BYTE *)(v81 + 72) = 19;
      uint64_t v82 = swift_willThrow(v80);
LABEL_56:
      uint64_t v19 = static os_log_type_t.info.getter(v82);
      id v176 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v77 = swift_allocObject(v176, 72LL, 7LL);
      uint64_t v21 = v77;
      unint64_t v78 = xmmword_10010F110;
      goto LABEL_57;
    }

    sub_100005158(&v258, (uint64_t)&v261);
    uint64_t v39 = v263;
    int64_t v40 = v264;
    sub_100005110(&v261, v263);
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v39, v40);
    v246 = URL.path.getter(v41);
    *(void *)&v245 = v42;
    v243 = *(void (**)(char *, uint64_t))(v250 + 8);
    v243(v15, v247);
    LODWORD(v258) = *(_DWORD *)sub_1000A4554();
    LODWORD(v254) = v16;
    uint64_t v43 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v258, &type metadata for ExtensionManager.Settings.Flags, v17);
    v244 = v3;
    if ((v43 & 1) == 0)
    {
      int v44 = sub_100005FB4((uint64_t *)&unk_100159E30);
      uint64_t v45 = swift_allocObject(v44, 80LL, 7LL);
      *(_OWORD *)(v45 + 16) = xmmword_100111D70;
      uint64_t v46 = v4[50];
      *(void *)(v45 + 32) = v4[49];
      *(void *)(v45 + sub_10007CFB4(v0 + 40) = v46;
      uint64_t v47 = v4[52];
      *(void *)(v45 + 48) = v4[51];
      *(void *)(v45 + 56) = v47;
      __int128 v48 = v4[54];
      *(void *)(v45 + 64) = v4[53];
      *(void *)(v45 + 72) = v48;
      v242 = (void *)v45;
      uint64_t v50 = v263;
      uint64_t v49 = v264;
      sub_100005110(&v261, v263);
      *(void *)&v241 = *(void *)(v49 + 16);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      uint64_t v51 = ((uint64_t (*)(uint64_t, uint64_t))v241)(v50, v49);
      if (v52 == 1)
      {
        uint64_t v98 = v242;
        uint64_t v99 = v242[2];
        uint64_t v100 = v245;
        if (v99)
        {
          swift_bridgeObjectRetain(v242);
          uint64_t v101 = v98 + 5;
          do
          {
            unint64_t v103 = *(v101 - 1);
            uint64_t v102 = (void *)*v101;
            swift_bridgeObjectRetain(*v101);
            v104._uint64_t countAndFlagsBits = v103;
            v104._object = v102;
            uint64_t v105 = String.hasPrefix(_:)(v104);
            swift_bridgeObjectRelease(v102);
            if (v105)
            {
LABEL_19:
              char v55 = v242;
              swift_bridgeObjectRelease(v242);
              goto LABEL_20;
            }

            v101 += 2;
            --v99;
          }

          while (v99);
          swift_bridgeObjectRelease(v100);
          uint64_t v98 = v242;
          uint64_t v106 = v242;
        }

        else
        {
          uint64_t v106 = (void *)v245;
        }

        swift_bridgeObjectRelease(v106);
        *(void *)&v258 = 0LL;
        *((void *)&v258 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(112LL);
        v121._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v121._object = (void *)0x8000000100126690LL;
        String.append(_:)(v121);
        uint64_t v122 = v263;
        unsigned int v123 = v264;
        sub_100005110(&v261, v263);
        v124._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( v122,  *(void *)(v123 + 8));
        uint64_t v125 = v124._object;
        String.append(_:)(v124);
        swift_bridgeObjectRelease(v125);
        v126._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
        v126._object = (void *)0x80000001001266B0LL;
        String.append(_:)(v126);
        v254 = (unint64_t)v98;
        uint64_t v127 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
        unint64_t v128 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v129 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v127, v128);
        uint64_t v131 = v130;
        char v132 = v98;
        goto LABEL_52;
      }

      uint64_t v53 = v52;
      uint64_t v54 = v245;
      if (v52)
      {
        uint64_t v107 = v51;
        swift_bridgeObjectRelease(v242);
        swift_bridgeObjectRelease(v54);
        sub_10003783C(v107, v53);
        *(void *)&v258 = 0LL;
        *((void *)&v258 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(45LL);
        swift_bridgeObjectRelease(*((void *)&v258 + 1));
        *(void *)&v258 = 0x20656C646E7542LL;
        *((void *)&v258 + 1) = 0xE700000000000000LL;
        uint64_t v108 = v263;
        uint64_t v109 = v264;
        sub_100005110(&v261, v263);
        v110._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( v108,  *(void *)(v109 + 8));
        uint64_t v111 = v110._object;
        String.append(_:)(v110);
        swift_bridgeObjectRelease(v111);
        v112._uint64_t countAndFlagsBits = 0xD000000000000024LL;
        v112._object = (void *)0x8000000100126660LL;
        String.append(_:)(v112);
        Swift::String v113 = v258;
        uint64_t v114 = sub_100012624();
        Swift::String v115 = swift_allocError(&type metadata for KMError, v114, 0LL, 0LL);
        *(_OWORD *)unint64_t v116 = v113;
        *(_OWORD *)(v116 + 16) = 0u;
        *(_OWORD *)(v116 + 32) = 0u;
        *(_OWORD *)(v116 + 48) = 0u;
        *(void *)(v116 + 64) = 0LL;
        unint64_t v117 = 9;
LABEL_54:
        *(_BYTE *)(v116 + 72) = v117;
        swift_willThrow(v115);
LABEL_55:
        uint64_t v82 = sub_100006034(&v261);
        goto LABEL_56;
      }

      char v55 = v242;
      uint64_t v56 = v242[2];
      if (v56)
      {
        swift_bridgeObjectRetain(v242);
        unint64_t v57 = v55 + 5;
        while (1)
        {
          uint64_t v59 = *(v57 - 1);
          uint64_t v58 = (void *)*v57;
          swift_bridgeObjectRetain(*v57);
          v60._uint64_t countAndFlagsBits = v59;
          v60._object = v58;
          uint64_t v61 = String.hasPrefix(_:)(v60);
          swift_bridgeObjectRelease(v58);
          if (v61) {
            break;
          }
          v57 += 2;
          if (!--v56) {
            goto LABEL_19;
          }
        }

        swift_bridgeObjectRelease(v54);
        int v159 = v242;
        swift_bridgeObjectRelease(v242);
        *(void *)&v258 = 0LL;
        *((void *)&v258 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(111LL);
        v160._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v160._object = (void *)0x8000000100126690LL;
        String.append(_:)(v160);
        unint64_t v161 = v263;
        unint64_t v162 = v264;
        sub_100005110(&v261, v263);
        v163._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( v161,  *(void *)(v162 + 8));
        uint64_t v164 = v163._object;
        String.append(_:)(v163);
        swift_bridgeObjectRelease(v164);
        v165._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
        v165._object = (void *)0x8000000100126930LL;
        String.append(_:)(v165);
        v254 = (unint64_t)v159;
        unint64_t v166 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
        uint64_t v167 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v129 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v166, v167);
        uint64_t v131 = v168;
        char v132 = v159;
LABEL_52:
        swift_bridgeObjectRelease(v132);
        uint64_t v169 = sub_100026BE4();
        uint64_t v170 = sub_1000D189C(v169, v129, v131);
        v172 = v171;
        swift_bridgeObjectRelease(v131);
        v173._uint64_t countAndFlagsBits = v170;
        v173._object = v172;
        String.append(_:)(v173);
        swift_bridgeObjectRelease(v172);
LABEL_53:
        uint64_t v174 = v258;
        unint64_t v175 = sub_100012624();
        Swift::String v115 = swift_allocError(&type metadata for KMError, v175, 0LL, 0LL);
        *(_OWORD *)unint64_t v116 = v174;
        *(_OWORD *)(v116 + 16) = 0u;
        *(_OWORD *)(v116 + 32) = 0u;
        *(_OWORD *)(v116 + 48) = 0u;
        *(void *)(v116 + 64) = 0LL;
        unint64_t v117 = 19;
        goto LABEL_54;
      }

LABEL_70:
      v254 = 0LL;
      v255 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(96LL);
      v220._uint64_t countAndFlagsBits = 0x5520656C646E7542LL;
      v220._object = (void *)0xEB00000000204C52LL;
      String.append(_:)(v220);
      v221._uint64_t countAndFlagsBits = v246;
      v222 = v245;
      v221._object = (void *)v245;
      String.append(_:)(v221);
      swift_bridgeObjectRelease(v222);
      v223._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      v223._object = (void *)0x8000000100126880LL;
      String.append(_:)(v223);
      v224._uint64_t countAndFlagsBits = v212;
      v224._object = v211;
      String.append(_:)(v224);
      swift_bridgeObjectRelease(v211);
      v225._uint64_t countAndFlagsBits = 0xD000000000000040LL;
      v225._object = (void *)0x80000001001268A0LL;
      String.append(_:)(v225);
    }

    else
    {
      sub_100006034(&v254);
      v254 = 0LL;
      v255 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(v255);
      v254 = 0xD000000000000026LL;
      v255 = 0x8000000100126850LL;
      v226._uint64_t countAndFlagsBits = v246;
      v227 = v245;
      v226._object = (void *)v245;
      String.append(_:)(v226);
      swift_bridgeObjectRelease(v227);
    }

    v228 = v254;
    v229 = v255;
    v230 = sub_100012624();
    v231 = swift_allocError(&type metadata for KMError, v230, 0LL, 0LL);
    *(void *)v232 = v228;
    *(void *)(v232 + 8) = v229;
    *(_OWORD *)(v232 + 16) = 0u;
    *(_OWORD *)(v232 + 32) = 0u;
    *(_OWORD *)(v232 + 48) = 0u;
    *(void *)(v232 + 64) = 0LL;
    *(_BYTE *)(v232 + 72) = 19;
    swift_willThrow(v231);
    uint64_t v74 = &v258;
    goto LABEL_24;
  }

  uint64_t v19 = static os_log_type_t.info.getter(v18);
  uint64_t v20 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_10010F110;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_100026B64();
  unint64_t v22 = 0xD000000000000015LL;
  unint64_t v23 = 0x80000001001269F0LL;
LABEL_3:
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + sub_10007CFB4(v0 + 40) = v23;
  unint64_t v24 = sub_100026BA8();
LABEL_4:
  uint64_t v25 = (void *)static OS_os_log.default.getter(v24);
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v25,  "Finished extension FS validation with result: %{public}",  55LL,  2LL,  v21);
LABEL_10:
  swift_bridgeObjectRelease(v21);
}

uint64_t sub_10008C2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v79 - v8;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  int v16 = (char *)&v79 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v79 - v17;
  sub_10001A148(a2, (uint64_t)v9, (uint64_t *)&unk_10015BA30);
  uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v89 = a1;
  unint64_t v91 = v19;
  v19(v16, a1, v10);
  uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v90(v9, 1LL, v10) == 1)
  {
    Swift::String v87 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v87(v18, v16, v10);
    uint64_t v20 = sub_100012824((uint64_t)v9, (uint64_t *)&unk_10015BA30);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    Swift::String v87 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v20 = ((uint64_t (*)(char *, char *, uint64_t))v87)(v18, v9, v10);
  }

  uint64_t v104 = _swiftEmptyArrayStorage;
  uint64_t v21 = URL.path.getter(v20);
  unint64_t v23 = v22;
  unint64_t v24 = v92;
  uint64_t v25 = v86;
  sub_10008C9B4(v21, v22);
  if (v25)
  {
    swift_bridgeObjectRelease(v23);
    uint64_t v103 = v25;
    swift_errorRetain(v25);
    uint64_t v26 = sub_100005FB4(&qword_10015AB20);
    if (swift_dynamicCast(&v93, &v103, v26, &type metadata for KMError, 0LL))
    {
      uint64_t v27 = v93;
      uint64_t v29 = v99;
      uint64_t v28 = v100;
      uint64_t v30 = v101;
      if (v102 == 19)
      {
        uint64_t v79 = v94;
        uint64_t v80 = v95;
        uint64_t v81 = v96;
        unint64_t v82 = v97;
        uint64_t v86 = v98;
        swift_errorRelease(v25);
        unint64_t v31 = v104;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
        uint64_t v83 = v29;
        uint64_t v84 = (void *)v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v31 = sub_10008ECFC(0LL, v31[2] + 1LL, 1, v31);
        }
        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        uint64_t v35 = v86;
        if (v34 >= v33 >> 1)
        {
          unint64_t v78 = sub_10008ECFC((void *)(v33 > 1), v34 + 1, 1, v31);
          uint64_t v35 = v86;
          unint64_t v31 = v78;
        }

        Swift::String v85 = v18;
        uint64_t v86 = v11;
        v31[2] = v34 + 1;
        uint64_t v36 = &v31[10 * v34];
        uint64_t v37 = v79;
        v36[4] = v27;
        v36[5] = v37;
        uint64_t v38 = v81;
        v36[6] = v80;
        v36[7] = v38;
        v36[8] = v82;
        v36[9] = v35;
        uint64_t v39 = v84;
        v36[10] = v83;
        v36[11] = v39;
        v36[12] = v30;
        *((_BYTE *)v36 + 104) = 19;
        uint64_t v104 = v31;
        swift_errorRelease(v103);
        unint64_t v24 = v92;
        goto LABEL_13;
      }

      sub_100039508(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102);
    }

    uint64_t v58 = swift_errorRelease(v103);
    goto LABEL_20;
  }

  Swift::String v85 = v18;
  uint64_t v86 = v11;
  swift_bridgeObjectRelease(v23);
LABEL_13:
  uint64_t v41 = v24[5];
  uint64_t v40 = v24[6];
  sub_100005110(v24 + 2, v41);
  sub_1001073DC(v41, v40);
  uint64_t v42 = v96;
  unint64_t v43 = v97;
  uint64_t v84 = sub_100005110(&v93, v96);
  uint64_t v44 = sub_100005FB4(&qword_10015A818);
  uint64_t v45 = swift_allocObject(v44, 56LL, 7LL);
  *(_OWORD *)(v45 + 16) = xmmword_100111D70;
  *(void *)(v45 + 32) = NSURLPathKey;
  *(void *)(v45 + sub_10007CFB4(v0 + 40) = NSURLIsDirectoryKey;
  *(void *)(v45 + 48) = NSURLIsSymbolicLinkKey;
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t))(v43 + 24);
  uint64_t v47 = NSURLPathKey;
  __int128 v48 = NSURLIsDirectoryKey;
  uint64_t v49 = NSURLIsSymbolicLinkKey;
  uint64_t v50 = v85;
  uint64_t v51 = v46(v85, v45, 1LL, v42, v43);
  Swift::String v85 = v50;
  swift_bridgeObjectRelease(v45);
  sub_100006034(&v93);
  uint64_t v52 = *(void *)(v51 + 16);
  uint64_t v11 = v86;
  if (v52)
  {
    unint64_t v53 = v51 + ((*(unsigned __int8 *)(v86 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
    uint64_t v54 = (void *)v51;
    uint64_t v55 = *(void *)(v86 + 72);
    uint64_t v84 = v54;
    swift_bridgeObjectRetain(v54);
    uint64_t v56 = (uint64_t)v88;
    while (1)
    {
      v91(v7, v53, v10);
      unint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v57(v7, 0LL, 1LL, v10);
      if (v90(v7, 1LL, v10) == 1) {
        break;
      }
      v87((char *)v56, v7, v10);
      sub_10008CE34(v56, v92, v89, (uint64_t *)&v104);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v56, v10);
      v53 += v55;
      if (!--v52)
      {
        uint64_t v51 = (uint64_t)v84;
        goto LABEL_24;
      }
    }

    uint64_t v51 = (uint64_t)v84;
    uint64_t v18 = v85;
  }

  else
  {
    unint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
    swift_bridgeObjectRetain(v51);
LABEL_24:
    v57(v7, 1LL, 1LL, v10);
    uint64_t v18 = v85;
  }

  swift_bridgeObjectRelease_n(v51, 2LL);
  uint64_t v60 = v104;
  swift_bridgeObjectRetain(v104);
  BOOL v61 = sub_1000D26D0();
  swift_bridgeObjectRelease(v60);
  if (v61) {
    goto LABEL_21;
  }
  if (v60[2] == 1LL)
  {
    uint64_t v62 = v60[4];
    uint64_t v63 = v60[5];
    char v64 = (void *)v60[6];
    uint64_t v65 = v60[7];
    unint64_t v66 = v60[8];
    uint64_t v67 = v60[9];
    unint64_t v91 = (void (*)(char *, unint64_t, uint64_t))v60[10];
    unint64_t v92 = v64;
    uint64_t v90 = (unsigned int (*)(char *, uint64_t, uint64_t))v60[11];
    uint64_t v86 = v11;
    uint64_t v68 = v60[12];
    char v69 = *((_BYTE *)v60 + 104);
    unint64_t v70 = sub_100012624();
    swift_allocError(&type metadata for KMError, v70, 0LL, 0LL);
    *(void *)uint64_t v71 = v62;
    *(void *)(v71 + 8) = v63;
    uint64_t v73 = (uint64_t)v91;
    uint64_t v72 = v92;
    *(void *)(v71 + 16) = v92;
    *(void *)(v71 + 24) = v65;
    *(void *)(v71 + 32) = v66;
    *(void *)(v71 + sub_10007CFB4(v0 + 40) = v67;
    uint64_t v74 = (uint64_t)v90;
    *(void *)(v71 + 48) = v73;
    *(void *)(v71 + 56) = v74;
    *(void *)(v71 + 64) = v68;
    *(_BYTE *)(v71 + 72) = v69;
    uint64_t v75 = sub_1000516E4(v62, v63, (uint64_t)v72, v65, v66, v67, v73, v74, v68, v69);
    swift_willThrow(v75);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v10);
    return swift_bridgeObjectRelease(v104);
  }

  unint64_t v76 = sub_100012624();
  swift_allocError(&type metadata for KMError, v76, 0LL, 0LL);
  *(void *)uint64_t v77 = v60;
  *(_OWORD *)(v77 + 8) = 0u;
  *(_OWORD *)(v77 + 24) = 0u;
  *(_OWORD *)(v77 + sub_10007CFB4(v0 + 40) = 0u;
  *(_OWORD *)(v77 + 56) = 0u;
  *(_BYTE *)(v77 + 72) = 0;
  uint64_t v58 = swift_bridgeObjectRetain(v60);
LABEL_20:
  swift_willThrow(v58);
LABEL_21:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  return swift_bridgeObjectRelease(v104);
}

uint64_t sub_10008C9B4(uint64_t a1, void *a2)
{
  uint64_t v6 = v2 + 2;
  uint64_t v8 = v2[5];
  uint64_t v7 = v2[6];
  sub_100005110(v6, v8);
  sub_1001073DC(v8, v7);
  uint64_t v9 = *((void *)&v45 + 1);
  uint64_t v10 = v46;
  sub_100005110(&v44, *((uint64_t *)&v45 + 1));
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 72))(a1, a2, v9, v10);
  uint64_t result = sub_100006034(&v44);
  if (v3) {
    return result;
  }
  if (!*(void *)(v11 + 16)) {
    goto LABEL_11;
  }
  uint64_t v13 = NSFileOwnerAccountID;
  unint64_t v14 = sub_10002011C((uint64_t)v13);
  if ((v15 & 1) != 0)
  {
    sub_100006054(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v44);
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
  }

  if (!*((void *)&v45 + 1)) {
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0)
  {
LABEL_20:
    swift_bridgeObjectRelease(v11);
    goto LABEL_21;
  }

  if (!*(void *)(v11 + 16))
  {
LABEL_11:
    __int128 v44 = 0u;
    __int128 v45 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(v11);
LABEL_13:
    sub_100012824((uint64_t)&v44, &qword_100157FF8);
LABEL_21:
    *(void *)&__int128 v44 = 0LL;
    *((void *)&v44 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(*((void *)&v44 + 1));
    *(void *)&__int128 v44 = 0xD000000000000026LL;
    *((void *)&v44 + 1) = 0x8000000100126A10LL;
LABEL_22:
    unint64_t v24 = a1;
    unint64_t v25 = (unint64_t)a2;
LABEL_23:
    String.append(_:)(*(Swift::String *)&v24);
    __int128 v26 = v44;
    unint64_t v27 = sub_100012624();
    uint64_t v28 = swift_allocError(&type metadata for KMError, v27, 0LL, 0LL);
    *(_OWORD *)uint64_t v29 = v26;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(void *)(v29 + 64) = 0LL;
    *(_BYTE *)(v29 + 72) = 19;
    return swift_willThrow(v28);
  }

  uint64_t v16 = v43;
  uint64_t v17 = NSFileGroupOwnerAccountID;
  unint64_t v18 = sub_10002011C((uint64_t)v17);
  if ((v19 & 1) != 0)
  {
    sub_100006054(*(void *)(v11 + 56) + 32 * v18, (uint64_t)&v44);
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
  }

  if (!*((void *)&v45 + 1)) {
    goto LABEL_12;
  }
  uint64_t v20 = v43;
  if (*(void *)(v11 + 16))
  {
    uint64_t v21 = NSFilePosixPermissions;
    unint64_t v22 = sub_10002011C((uint64_t)v21);
    if ((v23 & 1) != 0)
    {
      sub_100006054(*(void *)(v11 + 56) + 32 * v22, (uint64_t)&v44);
    }

    else
    {
      __int128 v44 = 0u;
      __int128 v45 = 0u;
    }
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
  }

  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v45 + 1)) {
    goto LABEL_13;
  }
  if (v16 | v20)
  {
    *(void *)&__int128 v44 = 0LL;
    *((void *)&v44 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(*((void *)&v44 + 1));
    *(void *)&__int128 v44 = 0xD000000000000013LL;
    *((void *)&v44 + 1) = 0x8000000100126A40LL;
    uint64_t v43 = v16;
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39._uint64_t countAndFlagsBits = 58LL;
    v39._object = (void *)0xE100000000000000LL;
    String.append(_:)(v39);
    uint64_t v43 = v20;
    v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    v42._object = (void *)0x8000000100126A60LL;
    String.append(_:)(v42);
    goto LABEL_22;
  }

  int v30 = (unsigned __int16)v43;
  if ((S_IWOTH.getter() & v30) != 0 || (uint64_t result = S_IWGRP.getter(), (result & v30) != 0))
  {
    *(void *)&__int128 v44 = 0LL;
    *((void *)&v44 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(64LL);
    v31._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    v31._object = (void *)0x8000000100126A80LL;
    String.append(_:)(v31);
    LOWORD(v43) = v30;
    unint64_t v32 = sub_10008F18C();
    v33._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v43, 8LL, 1LL, &type metadata for UInt16, v32);
    unint64_t v34 = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    v35._uint64_t countAndFlagsBits = 544108320LL;
    v35._object = (void *)0xE400000000000000LL;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = a1;
    v36._object = a2;
    String.append(_:)(v36);
    unint64_t v24 = 0xD000000000000024LL;
    unint64_t v25 = 0x8000000100126AA0LL;
    goto LABEL_23;
  }

  return result;
}

uint64_t sub_10008CE34(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v86 = a4;
  uint64_t v88 = a3;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  unint64_t v87 = (unint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  sub_100005110(a2 + 2, v8);
  sub_1001073DC(v8, v9);
  uint64_t v10 = v93;
  unint64_t v11 = v94;
  sub_100005110(&v90, v93);
  uint64_t v12 = sub_100005FB4(&qword_10015A818);
  uint64_t inited = swift_initStackObject(v12, v100);
  *(_OWORD *)(inited + 16) = xmmword_10010F440;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = NSURLIsSymbolicLinkKey;
  unint64_t v14 = NSURLIsDirectoryKey;
  char v15 = NSURLIsSymbolicLinkKey;
  uint64_t v16 = sub_10008EF0C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 2LL, v17);
  uint64_t v18 = v89;
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, unint64_t))(v11 + 192))( v101,  a1,  v16,  v10,  v11);
  swift_bridgeObjectRelease(v16);
  uint64_t result = sub_100006034(&v90);
  if (!v18)
  {
    uint64_t v20 = v87;
    uint64_t v21 = v88;
    uint64_t v22 = v102;
    uint64_t v23 = v103;
    sub_100005110(v101, v102);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23) & 1) == 0)
    {
      uint64_t v24 = v102;
      uint64_t v25 = v103;
      sub_100005110(v101, v102);
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
      if ((v26 & 1) != 0)
      {
        URL.absoluteURL.getter();
        uint64_t v37 = type metadata accessor for URL(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v20, 0LL, 1LL, v37);
        sub_10008C2AC(v21, v20);
        sub_100012824(v20, (uint64_t *)&unk_10015BA30);
        return sub_100006034(v101);
      }

      uint64_t v27 = URL.path.getter(v26);
      uint64_t v29 = v28;
      sub_10008C9B4(v27, v28);
LABEL_9:
      swift_bridgeObjectRelease(v29);
      return sub_100006034(v101);
    }

    uint64_t v30 = a2[5];
    uint64_t v31 = a2[6];
    sub_100005110(a2 + 2, v30);
    sub_1001073DC(v30, v31);
    unint64_t v32 = v94;
    Swift::String v33 = sub_100005110(&v90, v93);
    uint64_t v34 = URL.path.getter(v33);
    uint64_t v36 = v35;
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(v32 + 152))(v34);
    uint64_t v29 = v39;
    swift_bridgeObjectRelease(v36);
    if (v29)
    {
      uint64_t v40 = sub_100006034(&v90);
      v41._uint64_t countAndFlagsBits = URL.path.getter(v40);
      object = v41._object;
      Swift::Bool v43 = String.hasPrefix(_:)(v41);
      swift_bridgeObjectRelease(object);
      if (v43) {
        goto LABEL_9;
      }
      uint64_t v90 = 0LL;
      uint64_t v91 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(103LL);
      v45._uint64_t countAndFlagsBits = 0xD000000000000034LL;
      v45._object = (void *)0x8000000100126C20LL;
      String.append(_:)(v45);
      v47._uint64_t countAndFlagsBits = URL.path.getter(v46);
      __int128 v48 = v47._object;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v48);
      v49._uint64_t countAndFlagsBits = 0x2073746E696F7020LL;
      v49._object = (void *)0xEB00000000206F74LL;
      String.append(_:)(v49);
      v50._uint64_t countAndFlagsBits = v38;
      v50._object = v29;
      String.append(_:)(v50);
      swift_bridgeObjectRelease(v29);
      v51._object = (void *)0x8000000100126C60LL;
      v51._uint64_t countAndFlagsBits = 0xD000000000000022LL;
      String.append(_:)(v51);
    }

    else
    {
      sub_100006034(&v90);
      uint64_t v90 = 0LL;
      uint64_t v91 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      uint64_t v44 = swift_bridgeObjectRelease(v91);
      uint64_t v90 = 0xD000000000000026LL;
      uint64_t v91 = 0x8000000100126850LL;
    }

    v52._uint64_t countAndFlagsBits = URL.path.getter(v44);
    unint64_t v53 = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v53);
    uint64_t v54 = v90;
    uint64_t v55 = v91;
    unint64_t v56 = sub_100012624();
    uint64_t v57 = swift_allocError(&type metadata for KMError, v56, 0LL, 0LL);
    *(void *)uint64_t v58 = v54;
    *(void *)(v58 + 8) = v55;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(void *)(v58 + 64) = 0LL;
    *(_BYTE *)(v58 + 72) = 19;
    swift_willThrow(v57);
    uint64_t v104 = v57;
    swift_errorRetain(v57);
    uint64_t v59 = sub_100005FB4(&qword_10015AB20);
    if (swift_dynamicCast(&v90, &v104, v59, &type metadata for KMError, 0LL))
    {
      uint64_t v61 = v90;
      uint64_t v60 = v91;
      uint64_t v63 = v92;
      uint64_t v62 = v93;
      uint64_t v64 = v96;
      uint64_t v89 = v97;
      uint64_t v65 = v98;
      if (!v99)
      {
        uint64_t v88 = v95;
        unint64_t v87 = v94;
        swift_errorRelease(v57);
        uint64_t v85 = v64;
        unint64_t v76 = v86;
        uint64_t v77 = *v86;
        swift_bridgeObjectRetain(*v86);
        uint64_t v78 = sub_1000D25EC(v61, v77);
        sub_100039508(v61, v60, v63, v62, v87, v88, v85, v89, v65, 0);
        swift_bridgeObjectRelease(v77);
        uint64_t v79 = *v76;
        *unint64_t v76 = v78;
        swift_bridgeObjectRelease(v79);
LABEL_21:
        swift_errorRelease(v104);
        return sub_100006034(v101);
      }

      if (v99 == 19)
      {
        unint64_t v87 = v94;
        uint64_t v88 = v95;
        swift_errorRelease(v57);
        unint64_t v66 = v86;
        uint64_t v67 = (void *)*v86;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v86);
        *unint64_t v66 = (uint64_t)v67;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          char v69 = v66;
        }

        else
        {
          uint64_t v81 = sub_10008ECFC(0LL, v67[2] + 1LL, 1, v67);
          char v69 = v86;
          uint64_t v67 = v81;
          *uint64_t v86 = (uint64_t)v81;
        }

        unint64_t v71 = v67[2];
        unint64_t v70 = v67[3];
        uint64_t v72 = (uint64_t *)(v71 + 1);
        if (v71 >= v70 >> 1)
        {
          uint64_t v86 = (uint64_t *)(v71 + 1);
          uint64_t v85 = v64;
          unint64_t v82 = v69;
          uint64_t v83 = sub_10008ECFC((void *)(v70 > 1), v71 + 1, 1, v67);
          uint64_t v72 = v86;
          uint64_t v67 = v83;
          *unint64_t v82 = (uint64_t)v83;
          uint64_t v64 = v85;
        }

        v67[2] = v72;
        uint64_t v73 = &v67[10 * v71];
        v73[4] = v61;
        v73[5] = v60;
        v73[6] = v63;
        v73[7] = v62;
        uint64_t v74 = v88;
        v73[8] = v87;
        v73[9] = v74;
        uint64_t v75 = v89;
        v73[10] = v64;
        v73[11] = v75;
        v73[12] = v65;
        *((_BYTE *)v73 + 104) = 19;
        goto LABEL_21;
      }

      sub_100039508(v90, v91, v92, v93, v94, v95, v96, v89, v98, v99);
    }

    uint64_t v80 = swift_errorRelease(v104);
    swift_willThrow(v80);
    return sub_100006034(v101);
  }

  return result;
}

uint64_t sub_10008D568(void *a1)
{
  uint64_t v3 = swift_allocObject(&unk_10014A0F0, 32LL, 7LL);
  int v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v80[0]) = *(_DWORD *)sub_1000A44B4();
  LODWORD(v78) = v4;
  unint64_t v5 = sub_100012B34();
  char v6 = dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for ExtensionManager.Settings.Flags, v5);
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)*a1 + 168LL);
  uint64_t v9 = v8();
  uint64_t v10 = sub_10002C2F8();
  if ((v6 & 1) != 0)
  {
    v80[0] = *v10;
    *(void *)&__int128 v78 = v9;
    unint64_t v11 = sub_100039F14();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v11) & 1) != 0
      || (uint64_t v12 = v8(),
          v80[0] = *sub_10002C4A8(),
          *(void *)&__int128 v78 = v12,
          (dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v11) & 1) != 0))
    {
      *(void *)(v3 + 16) = 0xD000000000000018LL;
      *(void *)(v3 + 24) = 0x8000000100126BA0LL;
      sub_10008DED4((uint64_t)a1, v3);
      swift_release(v3);
      return 0LL;
    }

    else
    {
      uint64_t v34 = *sub_10002C198();
      uint64_t v35 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v7 + 184LL))(v80);
      *(void *)&__int128 v78 = v34;
      uint64_t v84 = *v36;
      dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v11);
      unint64_t v37 = sub_100039F5C();
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v37) & 1) == 0)
      {
        uint64_t v84 = v34;
        dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v11);
      }

      v35(v80, 0LL);
      *(void *)(v3 + 16) = 0xD000000000000022LL;
      *(void *)(v3 + 24) = 0x8000000100126BC0LL;
      sub_10008DED4((uint64_t)a1, v3);
      swift_release(v3);
      return 1LL;
    }
  }

  v80[0] = *v10;
  *(void *)&__int128 v78 = v9;
  unint64_t v14 = sub_100039F14();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
  {
    uint64_t v15 = v8();
    v80[0] = *sub_10002C4A8();
    *(void *)&__int128 v78 = v15;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
    {
      LODWORD(v80[0]) = *(_DWORD *)sub_1000A4734();
      LODWORD(v78) = v4;
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for ExtensionManager.Settings.Flags, v5) & 1) != 0)
      {
        uint64_t v38 = v7[3];
        Swift::String v39 = *(uint64_t (**)(uint64_t))(*(void *)v38 + 208LL);
        uint64_t v40 = swift_retain(v38);
        LOBYTE(v39) = v39(v40);
        swift_release(v38);
        if ((v39 & 1) != 0)
        {
          uint64_t v41 = *sub_10002C3E8();
          Swift::String v42 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v7 + 184LL))(v80);
          *(void *)&__int128 v78 = v41;
          uint64_t v84 = *v43;
          dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
          unint64_t v44 = sub_100039F5C();
          if ((dispatch thunk of static Equatable.== infix(_:_:)( &v85,  &v78,  &type metadata for RealizedInfo.Flags,  v44) & 1) == 0)
          {
            uint64_t v84 = v41;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
          }

          v42(v80, 0LL);
          unint64_t v45 = 0xD000000000000014LL;
          uint64_t v46 = "Apple prefix trusted";
LABEL_31:
          *(void *)(v3 + 16) = v45;
          *(void *)(v3 + 24) = (unint64_t)(v46 - 32) | 0x8000000000000000LL;
LABEL_46:
          uint64_t v72 = *a1;
          uint64_t v73 = *sub_10002C198();
          uint64_t v74 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v72 + 184LL))(v80);
          *(void *)&__int128 v78 = v73;
          uint64_t v84 = *v75;
          dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
          unint64_t v76 = sub_100039F5C();
          if ((dispatch thunk of static Equatable.== infix(_:_:)( &v85,  &v78,  &type metadata for RealizedInfo.Flags,  v76) & 1) == 0)
          {
            uint64_t v84 = v73;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
          }

          v74(v80, 0LL);
          uint64_t v13 = 1LL;
          goto LABEL_14;
        }
      }

      sub_10003A50C((uint64_t *)(v7[3] + 24LL), (uint64_t)v80);
      if (v83 == 1)
      {
        swift_release(v80[0]);
        uint64_t v47 = v7[3];
        __int128 v48 = *(uint64_t (**)(uint64_t))(*(void *)v47 + 208LL);
        uint64_t v49 = swift_retain(v47);
        LOBYTE(v48) = v48(v49);
        swift_release(v47);
        if ((v48 & 1) == 0)
        {
          unint64_t v16 = 0xD00000000000001ELL;
          uint64_t v17 = "Third-party kext in collection";
          goto LABEL_8;
        }

        uint64_t v50 = *sub_10002C3E8();
        Swift::String v51 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v7 + 184LL))(v80);
        *(void *)&__int128 v78 = v50;
        uint64_t v84 = *v52;
        dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
        unint64_t v53 = sub_100039F5C();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v53) & 1) == 0)
        {
          uint64_t v84 = v50;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
        }

        v51(v80, 0LL);
        unint64_t v45 = 0xD000000000000020LL;
        uint64_t v46 = "Trusted Apple kext in collection";
        goto LABEL_31;
      }

      sub_10003A584(v80);
      uint64_t v54 = *a1;
      sub_10001A148(*a1 + 32LL, (uint64_t)&v78, &qword_100157FF0);
      if (!v79)
      {
        unint64_t v16 = 0xD000000000000012LL;
        sub_100012824((uint64_t)&v78, &qword_100157FF0);
        uint64_t v17 = "Bad code signature";
        goto LABEL_8;
      }

      sub_100005158(&v78, (uint64_t)v80);
      uint64_t v55 = v81;
      uint64_t v56 = v82;
      sub_100005110(v80, v81);
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
      if (v58)
      {
        uint64_t v59 = v58;
        if (v58 != (void *)1)
        {
          uint64_t v70 = v57;
          *(void *)&__int128 v78 = 0LL;
          *((void *)&v78 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(17LL);
          swift_bridgeObjectRelease(*((void *)&v78 + 1));
          *(void *)&__int128 v78 = 0x204449206D616554LL;
          *((void *)&v78 + 1) = 0xEF203A64696C6176LL;
          v71._uint64_t countAndFlagsBits = v70;
          v71._object = v59;
          String.append(_:)(v71);
          sub_10001777C(v70, (unint64_t)v59);
          unint64_t v69 = *((void *)&v78 + 1);
          unint64_t v63 = v78;
          goto LABEL_45;
        }

        uint64_t v60 = *(uint64_t (**)(void))(*(void *)v54 + 168LL);
        uint64_t v61 = ((uint64_t (*)(uint64_t))v60)(v57);
        *(void *)&__int128 v78 = *sub_10002C348();
        uint64_t v85 = v61;
        if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v78, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
        {
          uint64_t v62 = v60();
          *(void *)&__int128 v78 = *sub_10002C398();
          uint64_t v85 = v62;
          if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v78, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
          {
            *(void *)(v3 + 16) = 0xD000000000000012LL;
            *(void *)(v3 + 24) = 0x8000000100126AD0LL;
            sub_100006034(v80);
            unint64_t v16 = *(void *)(v3 + 16);
            unint64_t v18 = *(void *)(v3 + 24);
            goto LABEL_9;
          }
        }

        unint64_t v63 = 0xD000000000000016LL;
        uint64_t v64 = "Exception list trusted";
      }

      else
      {
        uint64_t v65 = *sub_10002C3E8();
        unint64_t v66 = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*(void *)v54 + 184LL))(&v78);
        uint64_t v85 = v65;
        uint64_t v77 = *v67;
        dispatch thunk of SetAlgebra.intersection(_:)(&v84, &v85, &type metadata for RealizedInfo.Flags, v14);
        unint64_t v68 = sub_100039F5C();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v84, &v85, &type metadata for RealizedInfo.Flags, v68) & 1) == 0)
        {
          uint64_t v77 = v65;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v77, &type metadata for RealizedInfo.Flags, v14);
        }

        v66(&v78, 0LL);
        unint64_t v63 = 0xD000000000000017LL;
        uint64_t v64 = "Platform binary trusted";
      }

      unint64_t v69 = (unint64_t)(v64 - 32) | 0x8000000000000000LL;
LABEL_45:
      *(void *)(v3 + 16) = v63;
      *(void *)(v3 + 24) = v69;
      sub_100006034(v80);
      goto LABEL_46;
    }
  }

  unint64_t v16 = 0xD000000000000018LL;
  uint64_t v17 = "Rejected by exclude list";
LABEL_8:
  unint64_t v18 = (unint64_t)(v17 - 32) | 0x8000000000000000LL;
  *(void *)(v3 + 16) = v16;
  *(void *)(v3 + 24) = v18;
LABEL_9:
  char v19 = *(uint64_t (**)(void *))(*(void *)*a1 + 256LL);
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = (void (*)(void *, void))v19(v80);
  uint64_t v22 = v21;
  uint64_t v23 = (void *)*v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
  *uint64_t v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = sub_10008ECFC(0LL, v23[2] + 1LL, 1, v23);
    *uint64_t v22 = v23;
  }

  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = sub_10008ECFC((void *)(v25 > 1), v26 + 1, 1, v23);
    *uint64_t v22 = v23;
  }

  v23[2] = v26 + 1;
  uint64_t v27 = &v23[10 * v26];
  v27[4] = v16;
  void v27[5] = v18;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  *((_OWORD *)v27 + 5) = 0u;
  v27[12] = 0LL;
  *((_BYTE *)v27 + 104) = 31;
  v20(v80, 0LL);
  uint64_t v13 = 0LL;
LABEL_14:
  uint64_t v28 = *a1;
  swift_retain(*a1);
  uint64_t v29 = *sub_10002C1E8();
  uint64_t v30 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v28 + 184LL))(v80);
  *(void *)&__int128 v78 = v29;
  uint64_t v84 = *v31;
  dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
  unint64_t v32 = sub_100039F5C();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v32) & 1) == 0)
  {
    uint64_t v84 = v29;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
  }

  v30(v80, 0LL);
  swift_release(v28);
  sub_10008DED4((uint64_t)a1, v3);
  swift_release(v3);
  return v13;
}

uint64_t sub_10008DED4(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v48 - 8);
  uint64_t v5 = __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - v7;
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(*(void *)a1 + 24LL);
  unint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 144LL);
  uint64_t v15 = swift_retain(v13);
  uint64_t v45 = v14(v15);
  unint64_t v17 = v16;
  swift_release(v13);
  uint64_t v18 = sub_1000D3540();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  char v19 = sub_100090278();
  uint64_t v20 = *v19;
  char v21 = *((_BYTE *)v19 + 16);
  swift_retain_n(a2, 2LL);
  uint64_t v22 = swift_bridgeObjectRetain(v17);
  uint64_t v23 = static OSSignpostID.exclusive.getter(v22);
  uint64_t v24 = (void *)OSSignposter.logHandle.getter(v23);
  int v46 = static os_signpost_type_t.event.getter(v24);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease_n(v17, 2LL);
    swift_release_n(a2, 2LL);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  os_log_t v42 = (os_log_t)v24;
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  if ((v21 & 1) != 0)
  {
    if ((unint64_t)v20 >> 32)
    {
      __break(1u);
    }

    else
    {
      if (v20 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }

      if (v20 >> 16 <= 0x10)
      {
        uint64_t v40 = &v53;
        goto LABEL_10;
      }
    }

    __break(1u);
    goto LABEL_14;
  }

  if (!v20)
  {
LABEL_15:
    swift_bridgeObjectRelease_n(v17, 2LL);
    uint64_t result = swift_release_n(a2, 2LL);
    __break(1u);
    return result;
  }

  uint64_t v40 = v20;
LABEL_10:
  uint64_t v27 = v47;
  uint64_t v26 = v48;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v47, v8, v48);
  uint64_t v28 = swift_slowAlloc(22LL, -1LL);
  uint64_t v41 = v4;
  uint64_t v29 = v28;
  uint64_t v30 = v8;
  uint64_t v31 = swift_slowAlloc(64LL, -1LL);
  uint64_t v52 = v31;
  *(_DWORD *)uint64_t v29 = 136315394;
  swift_bridgeObjectRetain(v17);
  uint64_t v50 = sub_1000058CC(v45, v17, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v29 + 4, v29 + 12);
  swift_bridgeObjectRelease_n(v17, 3LL);
  *(_WORD *)(v29 + 12) = 2080;
  swift_beginAccess(a2 + 16, &v50, 0LL, 0LL);
  uint64_t v32 = v26;
  uint64_t v34 = *(void *)(a2 + 16);
  unint64_t v33 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v33);
  uint64_t v49 = sub_1000058CC(v34, v33, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v29 + 14, v29 + 22);
  swift_release_n(a2, 2LL);
  uint64_t v35 = swift_bridgeObjectRelease(v33);
  os_signpost_id_t v36 = OSSignpostID.rawValue.getter(v35);
  os_log_t v37 = v42;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  (os_signpost_type_t)v46,  v36,  v40,  "Authenticated: %s with result: %s",  (uint8_t *)v29,  0x16u);
  swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v31, -1LL, -1LL);
  swift_slowDealloc(v29, -1LL, -1LL);

  uint64_t v38 = *(void (**)(char *, uint64_t))(v41 + 8);
  v38(v30, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  return ((uint64_t (*)(char *, uint64_t))v38)(v27, v32);
}

uint64_t sub_10008E288(uint64_t *a1)
{
  int v3 = *(_DWORD *)(v1 + 640);
  LODWORD(v23[0]) = *(_DWORD *)sub_1000A45A4();
  LODWORD(v22) = v3;
  unint64_t v4 = sub_100012B34();
  char v5 = dispatch thunk of SetAlgebra.isSuperset(of:)(v23, &type metadata for ExtensionManager.Settings.Flags, v4);
  uint64_t v6 = *a1;
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *sub_10002C258();
    uint64_t v8 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v6 + 184LL))(v23);
    uint64_t v22 = v7;
    uint64_t v20 = *v9;
    unint64_t v10 = sub_100039F14();
    dispatch thunk of SetAlgebra.intersection(_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v10);
    unint64_t v11 = sub_100039F5C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v11) & 1) == 0)
    {
      uint64_t v20 = v7;
      dispatch thunk of SetAlgebra.formUnion(_:)(&v20, &type metadata for RealizedInfo.Flags, v10);
    }

    v8(v23, 0LL);
  }

  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)v6 + 192LL))(v23);
    uint64_t v12 = v23[3];
    sub_100012824((uint64_t)v23, &qword_1001588F0);
    if (!v12)
    {
      sub_10008E480(a1);
      return 0LL;
    }

    uint64_t v13 = *a1;
    uint64_t v14 = *sub_10002C258();
    uint64_t v15 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v13 + 184LL))(v23);
    uint64_t v22 = v14;
    uint64_t v20 = *v16;
    unint64_t v17 = sub_100039F14();
    dispatch thunk of SetAlgebra.intersection(_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v17);
    unint64_t v18 = sub_100039F5C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v18) & 1) == 0)
    {
      uint64_t v20 = v14;
      dispatch thunk of SetAlgebra.formUnion(_:)(&v20, &type metadata for RealizedInfo.Flags, v17);
    }

    v15(v23, 0LL);
    sub_10008E480(a1);
  }

  return 1LL;
}

uint64_t sub_10008E480(void *a1)
{
  uint64_t v1 = *a1;
  swift_retain(*a1);
  uint64_t v2 = *sub_10002C2A8();
  int v3 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)v1 + 184LL))(v11);
  uint64_t v10 = v2;
  uint64_t v8 = *v4;
  unint64_t v5 = sub_100039F14();
  dispatch thunk of SetAlgebra.intersection(_:)(&v9, &v10, &type metadata for RealizedInfo.Flags, v5);
  unint64_t v6 = sub_100039F5C();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v10, &type metadata for RealizedInfo.Flags, v6) & 1) == 0)
  {
    uint64_t v8 = v2;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v8, &type metadata for RealizedInfo.Flags, v5);
  }

  v3(v11, 0LL);
  return swift_release(v1);
}

BOOL sub_10008E56C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005FB4(&qword_100158BE8);
  uint64_t v5 = swift_allocObject(v4, 64LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100112500;
  uint64_t v81 = sub_10002C2F8();
  *(void *)(v5 + 32) = *v81;
  uint64_t v80 = sub_10002C348();
  *(void *)(v5 + sub_10007CFB4(v0 + 40) = *v80;
  uint64_t v79 = sub_10002C398();
  *(void *)(v5 + 48) = *v79;
  uint64_t v75 = sub_10002C4A8();
  *(void *)(v5 + 56) = *v75;
  v90[0] = v5;
  unint64_t v6 = sub_100039F14();
  uint64_t v7 = sub_100005FB4(&qword_10015A7F8);
  uint64_t v8 = sub_100012B78( (unint64_t *)&qword_10015A800,  &qword_10015A7F8,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v9 = dispatch thunk of SetAlgebra.init<A>(_:)(v87, v90, v7, v8, &type metadata for RealizedInfo.Flags, v6);
  uint64_t v10 = v87[0];
  unint64_t v11 = (void *)*a1;
  uint64_t v89 = (*(uint64_t (**)(void *))(*v11 + 168LL))(v9);
  v90[0] = v10;
  sub_100039ECC();
  dispatch thunk of RawRepresentable.rawValue.getter(&v88, &type metadata for RealizedInfo.Flags);
  unint64_t v77 = sub_100039E40();
  dispatch thunk of OptionSet.init(rawValue:)(&v88, &type metadata for RealizedInfo.Flags, v77);
  unint64_t v85 = v6;
  dispatch thunk of SetAlgebra.formIntersection(_:)(v90, &type metadata for RealizedInfo.Flags, v6);
  uint64_t v76 = v87[0];
  uint64_t v86 = v11;
  uint64_t v84 = *(uint64_t (**)(void *))(*v11 + 184LL);
  uint64_t v12 = (void (*)(void *, void))v84(v87);
  uint64_t v78 = v10;
  sub_10008EBF0(v10);
  v12(v87, 0LL);
  uint64_t v82 = sub_100026E70();
  uint64_t v13 = (char *)v82[2];
  if (v13)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*v1 + 168LL);
    uint64_t v15 = (unsigned __int8 *)(v82 + 4);
    char v83 = v1;
    do
    {
      int v17 = *v15++;
      int v16 = v17;
      uint64_t v18 = v14();
      if (*(void *)(v18 + 16) && (unint64_t v19 = sub_1000357A4(v16), (v20 & 1) != 0))
      {
        uint64_t v21 = *(void *)(v18 + 56) + 24 * v19;
        uint64_t v22 = *(void *)(v21 + 8);
        char v23 = *(_BYTE *)v21;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRelease(v18);
        char v24 = sub_1000277DC((uint64_t)v86, v23, v22);
        uint64_t v25 = swift_bridgeObjectRelease(v22);
        if ((v24 & 1) != 0)
        {
          uint64_t v26 = static os_log_type_t.info.getter(v25);
          uint64_t v27 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
          *(_OWORD *)(v28 + 16) = xmmword_10010F440;
          uint64_t v29 = v86[3];
          uint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 200LL);
          uint64_t v31 = swift_retain(v29);
          uint64_t v32 = v30(v31);
          uint64_t v34 = v33;
          swift_release(v29);
          *(void *)(v28 + 56) = &type metadata for String;
          unint64_t v35 = sub_100026B64();
          *(void *)(v28 + 64) = v35;
          *(void *)(v28 + 32) = v32;
          *(void *)(v28 + sub_10007CFB4(v0 + 40) = v34;
          unint64_t v36 = sub_100026E7C(v16);
          *(void *)(v28 + 96) = &type metadata for String;
          *(void *)(v28 + 104) = v35;
          *(void *)(v28 + 72) = v36;
          *(void *)(v28 + 80) = v37;
          unint64_t v38 = sub_100026BA8();
          uint64_t v39 = (void *)static OS_os_log.default.getter(v38);
          os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v39, "%{public}s matches %{public}s.", 30LL, 2LL, v28);
          swift_bridgeObjectRelease(v28);

          if (v16)
          {
            if (v16 == 1) {
              uint64_t v40 = v80;
            }
            else {
              uint64_t v40 = v79;
            }
          }

          else
          {
            uint64_t v40 = v81;
          }

          uint64_t v41 = *v40;
          os_log_t v42 = (void (*)(void *, void))v84(v87);
          v90[0] = v41;
          uint64_t v88 = *v43;
          dispatch thunk of SetAlgebra.intersection(_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v85);
          unint64_t v44 = sub_100039F5C();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v44) & 1) == 0)
          {
            uint64_t v88 = v41;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v88, &type metadata for RealizedInfo.Flags, v85);
          }

          v42(v87, 0LL);
          uint64_t v2 = v83;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v18);
      }

      --v13;
    }

    while (v13);
  }

  uint64_t v45 = swift_bridgeObjectRelease(v82);
  uint64_t v46 = v2[62];
  if (v46 && *(void *)(v46 + 16))
  {
    uint64_t v48 = v2[20];
    uint64_t v47 = v2[21];
    swift_bridgeObjectRetain(v47);
    unint64_t v49 = sub_100006114(v48, v47);
    if ((v50 & 1) != 0)
    {
      uint64_t v51 = *(void **)(*(void *)(v46 + 56) + 8 * v49);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v47);
      uint64_t v52 = v86[3];
      char v53 = *(uint64_t (**)(uint64_t))(*(void *)v52 + 144LL);
      uint64_t v54 = swift_retain(v52);
      uint64_t v55 = v53(v54);
      uint64_t v57 = v56;
      swift_release(v52);
      LOBYTE(v52) = sub_10003464C(v55, v57, v51);
      swift_bridgeObjectRelease(v51);
      uint64_t v45 = swift_bridgeObjectRelease(v57);
      if ((v52 & 1) != 0)
      {
        uint64_t v58 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v59 = swift_allocObject(v58, 72LL, 7LL);
        *(_OWORD *)(v59 + 16) = xmmword_10010F110;
        uint64_t v60 = v86[3];
        uint64_t v61 = *(uint64_t (**)(uint64_t))(*(void *)v60 + 200LL);
        uint64_t v62 = swift_retain(v60);
        uint64_t v63 = v61(v62);
        uint64_t v65 = v64;
        swift_release(v60);
        *(void *)(v59 + 56) = &type metadata for String;
        *(void *)(v59 + 64) = sub_100026B64();
        *(void *)(v59 + 32) = v63;
        *(void *)(v59 + sub_10007CFB4(v0 + 40) = v65;
        unint64_t v66 = sub_100026BA8();
        uint64_t v67 = (void *)static OS_os_log.default.getter(v66);
        uint64_t v68 = static os_log_type_t.default.getter(v67);
        os_log(_:dso:log:type:_:)( "%{public}s found in built-in deny list",  38LL,  2LL,  &_mh_execute_header,  v67,  v68,  v59);
        swift_bridgeObjectRelease(v59);

        uint64_t v69 = *v75;
        uint64_t v70 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*v86 + 184LL))(v87);
        v90[0] = v69;
        uint64_t v88 = *v71;
        dispatch thunk of SetAlgebra.intersection(_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v85);
        unint64_t v72 = sub_100039F5C();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v72) & 1) == 0)
        {
          uint64_t v88 = v69;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v88, &type metadata for RealizedInfo.Flags, v85);
        }

        uint64_t v45 = v70(v87, 0LL);
      }
    }

    else
    {
      uint64_t v45 = swift_bridgeObjectRelease(v47);
    }
  }

  uint64_t v89 = (*(uint64_t (**)(uint64_t))(*v86 + 168LL))(v45);
  v90[0] = v78;
  dispatch thunk of RawRepresentable.rawValue.getter(&v88, &type metadata for RealizedInfo.Flags);
  dispatch thunk of OptionSet.init(rawValue:)(&v88, &type metadata for RealizedInfo.Flags, v77);
  dispatch thunk of SetAlgebra.formIntersection(_:)(v90, &type metadata for RealizedInfo.Flags, v85);
  v90[0] = v76;
  unint64_t v73 = sub_100039F5C();
  return (dispatch thunk of static Equatable.== infix(_:_:)(v87, v90, &type metadata for RealizedInfo.Flags, v73) & 1) == 0;
}

uint64_t sub_10008EBF0(uint64_t a1)
{
  uint64_t v4 = a1;
  unint64_t v1 = sub_100039F14();
  dispatch thunk of SetAlgebra.intersection(_:)(&v3, &v4, &type metadata for RealizedInfo.Flags, v1);
  if ((dispatch thunk of SetAlgebra.isEmpty.getter(&type metadata for RealizedInfo.Flags, v1) & 1) != 0) {
    return 0LL;
  }
  dispatch thunk of SetAlgebra.subtract(_:)(&v4, &type metadata for RealizedInfo.Flags, v1);
  return v3;
}

uint64_t sub_10008EC90(uint64_t a1)
{
  uint64_t v2 = sub_10008F260(&qword_10015A848, (uint64_t)&unk_10011C0C0);
  uint64_t v3 = sub_10008F260(&qword_10015A850, (uint64_t)&unk_10011C080);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void *sub_10008ECFC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_1001593E8);
      unint64_t v11 = (void *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4]) {
          memmove(v13, a4 + 4, 80 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10008EE18(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10008EE18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 80 * a1 + 32;
  unint64_t v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10008EF0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4(&qword_10015A858);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v38 = v1;
    uint64_t v39 = a1 + 32;
    while (1)
    {
      unint64_t v6 = *(void **)(v39 + 8 * v4);
      uint64_t v7 = *(void *)(v3 + 40);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v10 = v9;
      Hasher.init(_seed:)(v40, v7);
      id v11 = v6;
      String.hash(into:)(v40, v8, v10);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease(v10);
      uint64_t v14 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v15 = v12 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v19 == v22 && v21 == v23)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_4:

          goto LABEL_5;
        }

        uint64_t v25 = v23;
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
        swift_bridgeObjectRelease(v21);
        uint64_t result = (void *)swift_bridgeObjectRelease(v25);
        if ((v26 & 1) != 0) {
          goto LABEL_4;
        }
        uint64_t v27 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v27;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
          uint64_t v21 = v29;
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v28 == v30 && v21 == v31) {
            goto LABEL_3;
          }
          uint64_t v33 = v31;
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v30, v31, 0LL);
          swift_bridgeObjectRelease(v21);
          uint64_t result = (void *)swift_bridgeObjectRelease(v33);
          if ((v34 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      *(void *)(v5 + 8 * v16) = v18 | v17;
      *(void *)(*(void *)(v3 + 48) + 8 * v15) = v11;
      uint64_t v35 = *(void *)(v3 + 16);
      BOOL v36 = __OFADD__(v35, 1LL);
      uint64_t v37 = v35 + 1;
      if (v36)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v37;
LABEL_5:
      if (++v4 == v38) {
        return (void *)v3;
      }
    }
  }

  return &_swiftEmptySetSingleton;
}

void type metadata accessor for URLResourceKey()
{
  if (!qword_10015A828)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10014A118);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015A828);
    }
  }

unint64_t sub_10008F18C()
{
  unint64_t result = qword_10015A820;
  if (!qword_10015A820)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_10015A820);
  }

  return result;
}

uint64_t sub_10008F1D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008F1F4()
{
  return sub_10008F260(&qword_10015A830, (uint64_t)&unk_10011307C);
}

uint64_t sub_10008F218()
{
  return sub_10008F260(&qword_10015A838, (uint64_t)&unk_100113050);
}

uint64_t sub_10008F23C()
{
  return sub_10008F260(&qword_10015A840, (uint64_t)&unk_1001130BC);
}

uint64_t sub_10008F260(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URLResourceKey();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10008F2A0(uint64_t a1)
{
  return sub_10008F4C4(a1, (uint64_t *)&kCFBundleIdentifierKey, &qword_100175540, &qword_100175548);
}

uint64_t *sub_10008F2B8()
{
  if (qword_100163500 != -1) {
    swift_once(&qword_100163500, sub_10008F2A0);
  }
  return &qword_100175540;
}

uint64_t sub_10008F2F8(uint64_t a1)
{
  return sub_10008F4C4(a1, (uint64_t *)&kCFBundleExecutableKey, &qword_100175550, &qword_100175558);
}

uint64_t *sub_10008F310()
{
  if (qword_100163508 != -1) {
    swift_once(&qword_100163508, sub_10008F2F8);
  }
  return &qword_100175550;
}

uint64_t sub_10008F350(uint64_t a1)
{
  return sub_10008F4C4(a1, &_kCFBundlePackageTypeKey, &qword_100175560, &qword_100175568);
}

uint64_t *sub_10008F368()
{
  if (qword_100163510 != -1) {
    swift_once(&qword_100163510, sub_10008F350);
  }
  return &qword_100175560;
}

void *sub_10008F3A8()
{
  return &unk_10014A1A0;
}

uint64_t sub_10008F3B4(uint64_t a1)
{
  return sub_10008F4C4(a1, (uint64_t *)&kCFBundleNameKey, &qword_100175570, &qword_100175578);
}

uint64_t *sub_10008F3CC()
{
  if (qword_100163518 != -1) {
    swift_once(&qword_100163518, sub_10008F3B4);
  }
  return &qword_100175570;
}

void *sub_10008F40C()
{
  return &unk_10014A1B0;
}

void *sub_10008F418()
{
  return &unk_10014A1C0;
}

void *sub_10008F424()
{
  return &unk_10014A1D0;
}

void *sub_10008F430()
{
  return &unk_10014A1E0;
}

void *sub_10008F43C()
{
  return &unk_10014A1F0;
}

void *sub_10008F448()
{
  return &unk_10014A200;
}

void *sub_10008F454()
{
  return &unk_10014A210;
}

void *sub_10008F460()
{
  return &unk_10014A220;
}

uint64_t sub_10008F46C(uint64_t a1)
{
  return sub_10008F4C4(a1, (uint64_t *)&kCFBundleVersionKey, &qword_100175580, &qword_100175588);
}

uint64_t *sub_10008F484()
{
  if (qword_100163520 != -1) {
    swift_once(&qword_100163520, sub_10008F46C);
  }
  return &qword_100175580;
}

uint64_t sub_10008F4C4(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    *a3 = result;
    *a4 = v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_10008F4FC()
{
  return &unk_10014A230;
}

void *sub_10008F508()
{
  return &unk_10014A240;
}

void *sub_10008F514()
{
  return &unk_10014A250;
}

void *sub_10008F520()
{
  return &unk_10014A260;
}

const char *sub_10008F52C()
{
  return "OSBundleUUID";
}

void *sub_10008F538()
{
  return &unk_10014A270;
}

void *sub_10008F544()
{
  return &unk_10014A280;
}

void *sub_10008F550()
{
  return &unk_10014A290;
}

void *sub_10008F55C()
{
  return &unk_10014A2A0;
}

void *sub_10008F568()
{
  return &unk_10014A2B0;
}

void *sub_10008F574()
{
  return &unk_10014A2C0;
}

void *sub_10008F580()
{
  return &unk_10014A2D0;
}

void *sub_10008F58C()
{
  return &unk_100113188;
}

void *sub_10008F598()
{
  return &unk_10014A2E0;
}

void *sub_10008F5A4()
{
  return &unk_10014A2F0;
}

void *sub_10008F5B0()
{
  return &unk_10014A300;
}

const char *sub_10008F5BC()
{
  return "None";
}

const char *sub_10008F5C8()
{
  return "Apple";
}

void *sub_10008F5D4()
{
  return &unk_10014A310;
}

void *sub_10008F5E0()
{
  return &unk_1001131B8;
}

void *sub_10008F5EC()
{
  return &unk_10014A320;
}

const char *sub_10008F5F8()
{
  return "OSBundlePath";
}

void *sub_10008F604()
{
  return &unk_1001131D8;
}

void *sub_10008F610()
{
  return &unk_10014A330;
}

void *sub_10008F61C()
{
  return &unk_10014A340;
}

void *sub_10008F628()
{
  return &unk_10014A350;
}

void *sub_10008F634()
{
  return &unk_10014A360;
}

void *sub_10008F640()
{
  return &unk_10014A370;
}

void *sub_10008F64C()
{
  return &unk_10014A380;
}

void *sub_10008F658()
{
  return &unk_10014A390;
}

void *sub_10008F664()
{
  return &unk_10014A3A0;
}

void *sub_10008F670()
{
  return &unk_10014A3B0;
}

void *sub_10008F67C()
{
  return &unk_10014A3C0;
}

void *sub_10008F688()
{
  return &unk_10014A3D0;
}

void *sub_10008F694()
{
  return &unk_10014A3E0;
}

void *sub_10008F6A0()
{
  return &unk_10014A3F0;
}

const char *sub_10008F6AC()
{
  return "Send Resource";
}

void *sub_10008F6B8()
{
  return &unk_10014A400;
}

void *sub_10008F6C4()
{
  return &unk_10014A410;
}

void *sub_10008F6D0()
{
  return &unk_10014A420;
}

void *sub_10008F6DC()
{
  return &unk_10014A430;
}

void *sub_10008F6E8()
{
  return &unk_10014A440;
}

void *sub_10008F6F4()
{
  return &unk_10014A450;
}

void *sub_10008F700()
{
  return &unk_10014A460;
}

const char *sub_10008F70C()
{
  return "Check In Token";
}

void *sub_10008F718()
{
  return &unk_10014A470;
}

const char *sub_10008F724()
{
  return "Unload";
}

void *sub_10008F730()
{
  return &unk_10014A480;
}

const char *sub_10008F73C()
{
  return "PageableKCName";
}

const char *sub_10008F748()
{
  return "AuxKCName";
}

const char *sub_10008F754()
{
  return "loadfilesetkc";
}

void *sub_10008F760()
{
  return &unk_10014A490;
}

void *sub_10008F76C()
{
  return &unk_10014A4A0;
}

void *sub_10008F778()
{
  return &unk_10014A4B0;
}

void *sub_10008F784()
{
  return &unk_10014A4C0;
}

const char *sub_10008F790()
{
  return "LoadFromKC";
}

void *sub_10008F79C()
{
  return &unk_10014A4D0;
}

void *sub_10008F7A8()
{
  return &unk_100113260;
}

void *sub_10008F7B4()
{
  return &unk_100113270;
}

const char *sub_10008F7C0()
{
  return "Auxiliary";
}

const char *sub_10008F7CC()
{
  return "System";
}

const char *sub_10008F7D8()
{
  return "Primary";
}

const char *sub_10008F7E4()
{
  return "Codeless";
}

const char *sub_10008F7F0()
{
  return "Loaded State";
}

void *sub_10008F7FC()
{
  return &unk_10014A4E0;
}

const char *sub_10008F808()
{
  return "DaemonReady";
}

void *sub_10008F814()
{
  return &unk_10014A4F0;
}

void *sub_10008F820()
{
  return &unk_10014A500;
}

void *sub_10008F82C()
{
  return &unk_10014A510;
}

const char *sub_10008F838()
{
  return "Get Dexts";
}

void *sub_10008F844()
{
  return &unk_10014A520;
}

_DWORD *sub_10008F850@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10008F85C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10008F864@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10008F878@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10008F88C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10008F8A0(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10008F8D0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10008F8FC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10008F920(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10008F934(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_10008F948(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_10008F95C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10008F970(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10008F984(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10008F998(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10008F9AC()
{
  return *v0 == 0;
}

_DWORD *sub_10008F9BC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10008F9D0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10008F9E0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10008F9EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10008FA00@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4 = sub_100091B04(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void *sub_10008FA3C()
{
  return &unk_10014A530;
}

void *sub_10008FA48()
{
  return &unk_10014A540;
}

void *sub_10008FA54()
{
  return &unk_10014A550;
}

const char *sub_10008FA60()
{
  return "IOMatchDefer";
}

void *sub_10008FA6C()
{
  return &unk_10014A560;
}

void *sub_10008FA78()
{
  return &unk_10014A570;
}

void *sub_10008FA84()
{
  return &unk_10014A580;
}

const char *sub_10008FA90()
{
  return "_BootKCID";
}

const char *sub_10008FA9C()
{
  return "_PageableKCID";
}

const char *sub_10008FAA8()
{
  return "_PrelinkKCID";
}

const char *sub_10008FAB4()
{
  return "ManagerVersion";
}

const char *sub_10008FAC0()
{
  return "arch";
}

void *sub_10008FACC()
{
  return &unk_10014A590;
}

const char *sub_10008FAD8()
{
  return "kern.bootargs";
}

const char *sub_10008FAE4()
{
  return "kern.safeboot";
}

void *sub_10008FAF0()
{
  return &unk_10014A5A0;
}

uint64_t sub_10008FAFC()
{
  uint64_t result = nullsub_1(0x545845545F5FLL, 0xE600000000000000LL, 0x6769666E6F635F5FLL, 0xEE007473696C705FLL);
  qword_100175590 = result;
  *(void *)algn_100175598 = v1;
  qword_1001755A0 = v2;
  unk_1001755A8 = v3;
  return result;
}

uint64_t *sub_10008FB50()
{
  if (qword_100163530 != -1) {
    swift_once(&qword_100163530, sub_10008FAFC);
  }
  return &qword_100175590;
}

uint64_t sub_10008FB90()
{
  uint64_t result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, 0x6F666E695F5FLL, 0xE600000000000000LL);
  qword_1001755B0 = result;
  *(void *)algn_1001755B8 = v1;
  qword_1001755C0 = v2;
  unk_1001755C8 = v3;
  return result;
}

uint64_t *sub_10008FBE4()
{
  if (qword_100163538 != -1) {
    swift_once(&qword_100163538, sub_10008FB90);
  }
  return &qword_1001755B0;
}

uint64_t sub_10008FC24()
{
  uint64_t result = nullsub_1(0x4E494B4E494C5F5FLL, 0xEA00000000004F46LL, 0x6C6F626D79735F5FLL, 0xEC00000073746573LL);
  qword_1001755D0 = result;
  *(void *)algn_1001755D8 = v1;
  qword_1001755E0 = v2;
  unk_1001755E8 = v3;
  return result;
}

uint64_t *sub_10008FC7C()
{
  if (qword_100163548 != -1) {
    swift_once(&qword_100163548, sub_10008FC24);
  }
  return &qword_1001755D0;
}

uint64_t sub_10008FCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x545845545F5FLL, 0xE600000000000000LL, a3, a4);
  qword_1001755F0 = result;
  *(void *)algn_1001755F8 = v5;
  return result;
}

uint64_t *sub_10008FCEC()
{
  if (qword_100163550 != -1) {
    swift_once(&qword_100163550, sub_10008FCBC);
  }
  return &qword_1001755F0;
}

uint64_t sub_10008FD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x455F545845545F5FLL, 0xEB00000000434558LL, a3, a4);
  qword_100175600 = result;
  *(void *)algn_100175608 = v5;
  return result;
}

uint64_t *sub_10008FD68()
{
  if (qword_100163558 != -1) {
    swift_once(&qword_100163558, sub_10008FD2C);
  }
  return &qword_100175600;
}

uint64_t sub_10008FDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0xD000000000000010LL, 0x8000000100127C30LL, a3, a4);
  qword_100175610 = result;
  *(void *)algn_100175618 = v5;
  return result;
}

uint64_t *sub_10008FDE0()
{
  if (qword_100163560 != -1) {
    swift_once(&qword_100163560, sub_10008FDA8);
  }
  return &qword_100175610;
}

uint64_t sub_10008FE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x535F415441445F5FLL, 0xEB000000004D5450LL, a3, a4);
  qword_100175620 = result;
  *(void *)algn_100175628 = v5;
  return result;
}

uint64_t *sub_10008FE5C()
{
  if (qword_100163568 != -1) {
    swift_once(&qword_100163568, sub_10008FE20);
  }
  return &qword_100175620;
}

uint64_t sub_10008FE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, a3, a4);
  qword_100175630 = result;
  *(void *)algn_100175638 = v5;
  return result;
}

uint64_t *sub_10008FEDC()
{
  if (qword_100163570 != -1) {
    swift_once(&qword_100163570, sub_10008FE9C);
  }
  return &qword_100175630;
}

uint64_t sub_10008FF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x44454B4E494C5F5FLL, 0xEA00000000005449LL, a3, a4);
  qword_100175640 = result;
  *(void *)algn_100175648 = v5;
  return result;
}

uint64_t *sub_10008FF54()
{
  if (qword_100163578 != -1) {
    swift_once(&qword_100163578, sub_10008FF1C);
  }
  return &qword_100175640;
}

uint64_t sub_10008FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(0x5049454345525F5FLL, 0xEE004F464E495F54LL, a3, a4);
  qword_100175650 = result;
  *(void *)algn_100175658 = v5;
  return result;
}

uint64_t *sub_10008FFD4()
{
  if (qword_100163580 != -1) {
    swift_once(&qword_100163580, sub_10008FF94);
  }
  return &qword_100175650;
}

void sub_100090014()
{
  qword_100175660 = (uint64_t)&off_10014A8D0;
}

uint64_t *sub_100090028()
{
  if (qword_100163588 != -1) {
    swift_once(&qword_100163588, sub_100090014);
  }
  return &qword_100175660;
}

void *sub_100090068()
{
  return &unk_100113370;
}

void *sub_100090074()
{
  return &unk_100113374;
}

void *sub_100090080()
{
  return &unk_100113378;
}

void *sub_10009008C()
{
  return &unk_10011337C;
}

void *sub_100090098()
{
  return &unk_100113380;
}

const char *sub_1000900A4()
{
  return "SymbolsSets";
}

const char *sub_1000900B0()
{
  return "Symbols";
}

const char *sub_1000900BC()
{
  return "SymbolName";
}

const char *sub_1000900C8()
{
  return "SymbolPrefix";
}

const char *sub_1000900D4()
{
  return "AliasTarget";
}

const char *sub_1000900E0()
{
  return "com.apple";
}

const char *sub_1000900EC()
{
  return "com.apple.kpi.";
}

void *sub_1000900F8()
{
  return &unk_10014A5B0;
}

void *sub_100090104()
{
  return &unk_10014A5C0;
}

const char *sub_100090110()
{
  return "__kernel__";
}

const char *sub_10009011C()
{
  return "com.apple.txm";
}

const char *sub_100090128()
{
  return "com.apple.sptm";
}

void *sub_100090134()
{
  return &unk_10014A5D0;
}

void *sub_100090140()
{
  return &unk_10014A5E0;
}

void *sub_10009014C()
{
  return &unk_10014A5F0;
}

void *sub_100090158()
{
  return &unk_10014A600;
}

void *sub_100090164()
{
  return &unk_10014A610;
}

const char *sub_100090170()
{
  return "get-task-allow";
}

void *sub_10009017C()
{
  return &unk_10014A620;
}

void *sub_100090188()
{
  return &unk_10014A630;
}

void *sub_100090194()
{
  return &unk_10014A640;
}

void *sub_1000901A0()
{
  return &unk_10014A650;
}

void *sub_1000901AC()
{
  return &unk_10014A660;
}

void *sub_1000901B8()
{
  return &unk_10014A670;
}

void *sub_1000901C4()
{
  return &unk_10014A680;
}

void *sub_1000901D0()
{
  return &unk_10014A690;
}

void *sub_1000901DC()
{
  return &unk_10014A6A0;
}

void *sub_1000901E8()
{
  return &unk_10014A6B0;
}

void *sub_1000901F4()
{
  return &unk_10014A6C0;
}

void *sub_100090200()
{
  return &unk_10014A6D0;
}

void *sub_10009020C()
{
  return &unk_10014A6E0;
}

void *sub_100090218()
{
  return &unk_10014A6F0;
}

void *sub_100090224()
{
  return &unk_10014A700;
}

void *sub_100090230()
{
  return &unk_100113440;
}

const char *sub_10009023C()
{
  return "-restore";
}

char **sub_100090248()
{
  return &off_10014A710;
}

char **sub_100090254()
{
  return &off_10014A728;
}

char **sub_100090260()
{
  return &off_10014A740;
}

char **sub_10009026C()
{
  return &off_10014A758;
}

char **sub_100090278()
{
  return &off_10014A770;
}

char **sub_100090284()
{
  return &off_10014A788;
}

char **sub_100090290()
{
  return &off_10014A7A0;
}

char **sub_10009029C()
{
  return &off_10014A7B8;
}

char **sub_1000902A8()
{
  return &off_10014A7D0;
}

char **sub_1000902B4()
{
  return &off_10014A7E8;
}

char **sub_1000902C0()
{
  return &off_10014A800;
}

char **sub_1000902CC()
{
  return &off_10014A818;
}

char **sub_1000902D8()
{
  return &off_10014A830;
}

char **sub_1000902E4()
{
  return &off_10014A848;
}

void *sub_1000902F0()
{
  return &unk_10014A860;
}

void *sub_1000902FC()
{
  return &unk_10014A870;
}

void *sub_100090308()
{
  return &unk_10014A880;
}

void *sub_100090314()
{
  return &unk_10014A890;
}

void *sub_100090320()
{
  return &unk_10014A8A0;
}

const char *sub_10009032C()
{
  return "Name";
}

const char *sub_100090338()
{
  return "UserInfo";
}

const char *sub_100090344()
{
  return "isPlaceholder";
}

const char *sub_100090350()
{
  return "bundleIDs";
}

void sub_10009035C()
{
  qword_100175668 = (uint64_t)&off_10014A900;
}

uint64_t sub_100090370@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091950(&qword_100163590, &qword_100175668, (uint64_t)sub_10009035C, a1);
}

void sub_10009038C()
{
  qword_100175670 = (uint64_t)&off_10014A928;
}

uint64_t *sub_1000903A0()
{
  if (qword_100163598 != -1) {
    swift_once(&qword_100163598, sub_10009038C);
  }
  return &qword_100175670;
}

uint64_t sub_1000903E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091950(&qword_100163598, &qword_100175670, (uint64_t)sub_10009038C, a1);
}

void sub_1000903FC()
{
  qword_100175678 = (uint64_t)&off_10014A950;
}

uint64_t *sub_100090410()
{
  if (qword_1001635A0 != -1) {
    swift_once(&qword_1001635A0, sub_1000903FC);
  }
  return &qword_100175678;
}

void *sub_100090450(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 0x657361656C6572LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v9 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x657361656C6572LL, 0xE700000000000000LL, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a4);
    return 0LL;
  }

  uint64_t v10 = sub_100091B3C(a1, a2);
  if (v10 == 5)
  {
    swift_bridgeObjectRelease(a4);
  }

  else if (a4)
  {
    Swift::Int v12 = (void *)swift_allocObject(&unk_10014AA38, 40LL, 7LL);
    _OWORD v12[2] = v10;
    v12[3] = a3;
    v12[4] = a4;
    return v12;
  }

  return (void *)v10;
}

uint64_t sub_10009052C(uint64_t a1)
{
  uint64_t v1 = 0x657361656C6572LL;
  switch(a1)
  {
    case 0LL:
      return v1;
    case 1LL:
      uint64_t v1 = 0x6D706F6C65766564LL;
      break;
    case 2LL:
      uint64_t v1 = 0x6775626564LL;
      break;
    case 3LL:
      uint64_t v1 = 0x6E6173616BLL;
      break;
    case 4LL:
      uint64_t v1 = 0x6863726165736572LL;
      break;
    default:
      uint64_t v1 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain(*(void *)(a1 + 32));
      break;
  }

  return v1;
}

uint64_t sub_1000905EC(uint64_t a1)
{
  uint64_t v1 = a1;
  switch(a1)
  {
    case 0LL:
      return v1;
    case 1LL:
      uint64_t v1 = 0x706F6C657665645FLL;
      break;
    case 2LL:
      uint64_t v1 = 0x67756265645FLL;
      break;
    case 3LL:
      uint64_t v1 = 0x6E6173616B5FLL;
      break;
    case 4LL:
      uint64_t v1 = 0x637261657365725FLL;
      break;
    default:
      unint64_t v2 = *(void *)(a1 + 16);
      sub_100037B00(v2);
      uint64_t v1 = sub_1000905EC(v2);
      sub_100039428(v2);
      break;
  }

  return v1;
}

uint64_t sub_1000906C4(uint64_t result)
{
  switch(result)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x6D706F6C65766564LL;
      break;
    case 2LL:
      uint64_t result = 0x6775626564LL;
      break;
    case 3LL:
      uint64_t result = 0x6E6173616BLL;
      break;
    case 4LL:
      uint64_t result = 0x6863726165736572LL;
      break;
    default:
      uint64_t v1 = *(void *)(result + 24);
      swift_bridgeObjectRetain(*(void *)(result + 32));
      uint64_t result = v1;
      break;
  }

  return result;
}

BOOL sub_100090774(void *a1, void *a2)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      if (!a2) {
        return 0LL;
      }
      unint64_t v2 = 0LL;
      goto LABEL_14;
    case 1uLL:
      if (a2 == (void *)1) {
        return 0LL;
      }
      unint64_t v2 = 1LL;
      goto LABEL_14;
    case 2uLL:
      if (a2 == (void *)2) {
        return 0LL;
      }
      unint64_t v2 = 2LL;
      goto LABEL_14;
    case 3uLL:
      if (a2 == (void *)3) {
        return 0LL;
      }
      unint64_t v2 = 3LL;
      goto LABEL_14;
    case 4uLL:
      if (a2 == (void *)4) {
        return 0LL;
      }
      unint64_t v2 = 4LL;
      goto LABEL_14;
    default:
      if ((unint64_t)a2 >= 5)
      {
        uint64_t v5 = (void *)a1[2];
        uint64_t v6 = a1[3];
        uint64_t v7 = a1[4];
        uint64_t v8 = (void *)a2[2];
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        sub_100037B00((unint64_t)v5);
        sub_100037B00((unint64_t)v8);
        if ((sub_1000908E0(v5, v8) & 1) != 0)
        {
          if (v6 == v9 && v7 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0LL) & 1) != 0)
          {
            sub_100039428((unint64_t)v8);
            sub_100039428((unint64_t)v5);
            return 0LL;
          }

          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 1LL);
        }

        else
        {
          char v11 = sub_100090774(v5, v8);
        }

        char v12 = v11;
        sub_100039428((unint64_t)v8);
        sub_100039428((unint64_t)v5);
        return v12 & 1;
      }

      unint64_t v2 = 5LL;
LABEL_14:
      unint64_t v3 = 5LL;
      return v2 < v3;
  }

uint64_t sub_1000908E0(void *a1, void *a2)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      if (a2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 1uLL:
      if (a2 != (void *)1) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 2uLL:
      if (a2 != (void *)2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 3uLL:
      if (a2 != (void *)3) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 4uLL:
      if (a2 != (void *)4) {
        goto LABEL_18;
      }
LABEL_16:
      uint64_t result = 1LL;
      break;
    default:
      unint64_t v2 = a1[2];
      uint64_t v3 = a1[3];
      uint64_t v4 = a1[4];
      unint64_t v5 = a2[2];
      uint64_t v6 = a2[3];
      uint64_t v7 = a2[4];
      sub_100037B00(v2);
      sub_100037B00(v5);
      if ((sub_1000908E0(v2, v5) & 1) != 0)
      {
        if (v3 == v6 && v4 == v7)
        {
          sub_100039428(v5);
          sub_100039428(v2);
          uint64_t result = 1LL;
        }

        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0LL);
          sub_100039428(v5);
          sub_100039428(v2);
          uint64_t result = v9 & 1;
        }
      }

      else
      {
        sub_100039428(v5);
        sub_100039428(v2);
LABEL_18:
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

BOOL sub_100090A0C(void **a1, void **a2)
{
  return sub_100090774(*a1, *a2);
}

BOOL sub_100090A18(void **a1, void **a2)
{
  return !sub_100090774(*a2, *a1);
}

BOOL sub_100090A40(void **a1, void **a2)
{
  return !sub_100090774(*a1, *a2);
}

BOOL sub_100090A64(void **a1, void **a2)
{
  return sub_100090774(*a2, *a1);
}

double sub_100090A74@<D0>(void *a1@<X8>)
{
  if (qword_1001635A0 != -1) {
    swift_once(&qword_1001635A0, sub_1000903FC);
  }
  uint64_t v2 = qword_100175678;
  *a1 = qword_100175678;
  *(void *)&double result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100090AC4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = 0x657361656C6572LL;
  switch(v1)
  {
    case 0LL:
      return v2;
    case 1LL:
      uint64_t v2 = 0x6D706F6C65766564LL;
      break;
    case 2LL:
      uint64_t v2 = 0x6775626564LL;
      break;
    case 3LL:
      uint64_t v2 = 0x6E6173616BLL;
      break;
    case 4LL:
      uint64_t v2 = 0x6863726165736572LL;
      break;
    default:
      uint64_t v2 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain(*(void *)(v1 + 32));
      break;
  }

  return v2;
}

uint64_t sub_100090B88(void **a1, void **a2)
{
  return sub_1000908E0(*a1, *a2);
}

Swift::Int sub_100090B94()
{
  return Hasher._finalize()();
}

uint64_t sub_100090BE0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E6567636BLL, 0xE500000000000000LL);
}

Swift::Int sub_100090BF4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100090C3C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (*a1 == 0x6E6567636BLL && v3 == 0xE500000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE500000000000000LL);
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6567636BLL, 0xE500000000000000LL, *a1, v3, 0LL);
    uint64_t result = swift_bridgeObjectRelease(v3);
    char v7 = v5 ^ 1;
  }

  *a2 = v7 & 1;
  return result;
}

void sub_100090CC4(void *a1@<X8>)
{
  *a1 = 0x6E6567636BLL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t sub_100090CDC()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(0LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100175680);
}

uint64_t sub_100090D24()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(1LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100175688);
}

uint64_t sub_100090D6C()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(3LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100175690);
}

uint64_t sub_100090DB4()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(4LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100175698);
}

uint64_t sub_100090DFC()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(5LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756A0);
}

uint64_t sub_100090E44()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(6LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756A8);
}

uint64_t sub_100090E8C()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(7LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756B0);
}

uint64_t sub_100090ED4()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(8LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756B8);
}

uint64_t sub_100090F1C()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(9LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756C0);
}

uint64_t sub_100090F64()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(10LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756C8);
}

uint64_t sub_100090FAC()
{
  unint64_t v0 = sub_100092858();
  unint64_t v1 = sub_10009289C();
  return sub_1000D3840(11LL, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756D0);
}

uint64_t sub_100090FF4(uint64_t a1)
{
  if (qword_1001635A8 != -1) {
    swift_once(&qword_1001635A8, sub_100090CDC);
  }
  if ((qword_100175680 & ~a1) != 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v2 = sub_10000C82C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    char v5 = (char *)&v2[2 * v4];
    strcpy(v5 + 32, "kcgen enabled");
    *((_WORD *)v5 + 23) = -4864;
  }

  if (qword_1001635B0 != -1) {
    swift_once(&qword_1001635B0, sub_100090D24);
  }
  if ((qword_100175688 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000021LL;
    v8[5] = 0x8000000100127C00LL;
  }

  if (qword_1001635B8 != -1) {
    swift_once(&qword_1001635B8, sub_100090D6C);
  }
  if ((qword_100175690 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    char v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000014LL;
    v11[5] = 0x8000000100127BE0LL;
  }

  if (qword_1001635C0 != -1) {
    swift_once(&qword_1001635C0, sub_100090DB4);
  }
  if ((qword_100175698 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000021LL;
    v14[5] = 0x8000000100127BB0LL;
  }

  if (qword_1001635C8 != -1) {
    swift_once(&qword_1001635C8, sub_100090DFC);
  }
  if ((qword_1001756A0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v16 = v2[2];
    unint64_t v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    uint64_t v17 = &v2[2 * v16];
    v17[4] = 0xD000000000000024LL;
    v17[5] = 0x8000000100127B80LL;
  }

  if (qword_1001635D0 != -1) {
    swift_once(&qword_1001635D0, sub_100090E44);
  }
  if ((qword_1001756A8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v19 + 1;
    uint64_t v20 = &v2[2 * v19];
    v20[4] = 0xD00000000000001BLL;
    v20[5] = 0x8000000100127B60LL;
  }

  if (qword_1001635D8 != -1) {
    swift_once(&qword_1001635D8, sub_100090E8C);
  }
  if ((qword_1001756B0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v22 = v2[2];
    unint64_t v21 = v2[3];
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v21 > 1), v22 + 1, 1, v2);
    }
    v2[2] = v22 + 1;
    uint64_t v23 = &v2[2 * v22];
    v23[4] = 0xD000000000000037LL;
    void v23[5] = 0x8000000100127B20LL;
  }

  if (qword_1001635E0 != -1) {
    swift_once(&qword_1001635E0, sub_100090ED4);
  }
  if ((qword_1001756B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v25 = v2[2];
    unint64_t v24 = v2[3];
    if (v25 >= v24 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v24 > 1), v25 + 1, 1, v2);
    }
    v2[2] = v25 + 1;
    char v26 = &v2[2 * v25];
    v26[4] = 0xD000000000000027LL;
    v26[5] = 0x8000000100127AF0LL;
  }

  if (qword_1001635E8 != -1) {
    swift_once(&qword_1001635E8, sub_100090F1C);
  }
  if ((qword_1001756C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v28 = v2[2];
    unint64_t v27 = v2[3];
    if (v28 >= v27 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v27 > 1), v28 + 1, 1, v2);
    }
    v2[2] = v28 + 1;
    uint64_t v29 = &v2[2 * v28];
    v29[4] = 0xD00000000000002CLL;
    v29[5] = 0x8000000100127AC0LL;
  }

  if (qword_1001635F0 != -1) {
    swift_once(&qword_1001635F0, sub_100090F64);
  }
  if ((qword_1001756C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v31 = v2[2];
    unint64_t v30 = v2[3];
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v30 > 1), v31 + 1, 1, v2);
    }
    v2[2] = v31 + 1;
    uint64_t v32 = &v2[2 * v31];
    v32[4] = 0xD000000000000027LL;
    v32[5] = 0x8000000100127A90LL;
  }

  if (qword_1001635F8 != -1) {
    swift_once(&qword_1001635F8, sub_100090FAC);
  }
  if ((qword_1001756D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v34 = v2[2];
    unint64_t v33 = v2[3];
    if (v34 >= v33 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v33 > 1), v34 + 1, 1, v2);
    }
    v2[2] = v34 + 1;
    uint64_t v35 = &v2[2 * v34];
    v35[4] = 0xD000000000000026LL;
    v35[5] = 0x8000000100127A60LL;
  }

  uint64_t v36 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  uint64_t v37 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v36, v37);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease(v2);
  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v40);
  v42._uint64_t countAndFlagsBits = 93LL;
  v42._object = (void *)0xE100000000000000LL;
  String.append(_:)(v42);
  return 91LL;
}

uint64_t sub_10009187C()
{
  return sub_100090FF4(*v0);
}

const char *sub_100091884()
{
  return "Copyright © ";
}

void *sub_100091890()
{
  return &unk_10014A8B0;
}

const char *sub_10009189C()
{
  return "^[0-9]{4}$";
}

void *sub_1000918A8()
{
  return &unk_10014A8C0;
}

void sub_1000918B4()
{
  qword_1001756D8 = (uint64_t)&off_10014A998;
}

const char *sub_1000918C8()
{
  return "Root";
}

const char *sub_1000918D4()
{
  return "Console";
}

const char *sub_1000918E0()
{
  return "Local-Root";
}

const char *sub_1000918EC()
{
  return "Network-Root";
}

const char *sub_1000918F8()
{
  return "DriverKit";
}

const char *sub_100091904()
{
  return "Safe Boot";
}

const char *sub_100091910()
{
  return "Auxiliary";
}

void *sub_10009191C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_100091928@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100091934@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091950(qword_100163608, &qword_1001756D8, (uint64_t)sub_1000918B4, a1);
}

uint64_t sub_100091950@<X0>(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  swift_beginAccess(a2, v8, 0LL, 0LL);
  uint64_t v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000919B4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
  }
}

Swift::Int sub_1000919E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100091A3C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100091A80(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void *sub_100091AD4()
{
  return &unk_100113530;
}

void *sub_100091AE0()
{
  return &unk_100113534;
}

void *sub_100091AEC()
{
  return &unk_100113538;
}

void *sub_100091AF8()
{
  return &unk_10011353C;
}

uint64_t sub_100091B04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_100091B3C(uint64_t a1, unint64_t a2)
{
  if (!a1 && a2 == 0xE000000000000000LL)
  {
    unint64_t v4 = 0xE000000000000000LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0LL, 0xE000000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x6D706F6C65766564LL && a2 == 0xEB00000000746E65LL)
  {
    unint64_t v6 = 0xEB00000000746E65LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D706F6C65766564LL, 0xEB00000000746E65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x6775626564LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6775626564LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x6E6173616BLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6173616BLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_24;
  }

  if (a1 == 0x6863726165736572LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6863726165736572LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100091D44()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >= 5) {
    swift_release(v1);
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

unint64_t sub_100091D7C()
{
  unint64_t result = qword_10015A860;
  if (!qword_10015A860)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113640, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A860);
  }

  return result;
}

unint64_t sub_100091DC8()
{
  unint64_t result = qword_10015A868;
  if (!qword_10015A868)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113678, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A868);
  }

  return result;
}

unint64_t sub_100091E10()
{
  unint64_t result = qword_10015A870;
  if (!qword_10015A870)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001136A0, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A870);
  }

  return result;
}

unint64_t sub_100091E58()
{
  unint64_t result = qword_10015A878;
  if (!qword_10015A878)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001136D0, &type metadata for PageProtectionType);
    atomic_store(result, (unint64_t *)&qword_10015A878);
  }

  return result;
}

uint64_t sub_100091E9C()
{
  return sub_100012B78(&qword_10015A880, &qword_10015A888, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_100091EC8()
{
  return sub_100012B78(&qword_10015A890, &qword_10015A898, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100091EF8()
{
  unint64_t result = qword_10015A8A0;
  if (!qword_10015A8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113888, &type metadata for VariantKind);
    atomic_store(result, (unint64_t *)&qword_10015A8A0);
  }

  return result;
}

uint64_t sub_100091F3C()
{
  return sub_100012B78(&qword_10015A8A8, &qword_10015A8B0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100091F6C()
{
  unint64_t result = qword_10015A8B8;
  if (!qword_10015A8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001138B0, &type metadata for SecureBootPolicy);
    atomic_store(result, (unint64_t *)&qword_10015A8B8);
  }

  return result;
}

unint64_t sub_100091FB4()
{
  unint64_t result = qword_10015A8C0;
  if (!qword_10015A8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113918, &type metadata for BootEnvironment);
    atomic_store(result, (unint64_t *)&qword_10015A8C0);
  }

  return result;
}

unint64_t sub_100091FFC()
{
  unint64_t result = qword_10015A8C8;
  if (!qword_10015A8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113AE0, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A8C8);
  }

  return result;
}

unint64_t sub_100092044()
{
  unint64_t result = qword_10015A8D0;
  if (!qword_10015A8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113A18, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A8D0);
  }

  return result;
}

unint64_t sub_10009208C()
{
  unint64_t result = qword_10015A8D8;
  if (!qword_10015A8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113B18, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A8D8);
  }

  return result;
}

unint64_t sub_1000920D4()
{
  unint64_t result = qword_10015A8E0;
  if (!qword_10015A8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113B40, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A8E0);
  }

  return result;
}

uint64_t sub_100092118()
{
  return sub_100012B78(&qword_10015A8E8, &qword_10015A8F0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100092148()
{
  unint64_t result = qword_10015A8F8;
  if (!qword_10015A8F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100113BE0, &type metadata for OSBundleRequiredValue);
    atomic_store(result, (unint64_t *)&qword_10015A8F8);
  }

  return result;
}

ValueMetadata *type metadata accessor for InfoKeys()
{
  return &type metadata for InfoKeys;
}

ValueMetadata *type metadata accessor for DriverTeamIdentifierConstants()
{
  return &type metadata for DriverTeamIdentifierConstants;
}

ValueMetadata *type metadata accessor for MKextKeys()
{
  return &type metadata for MKextKeys;
}

ValueMetadata *type metadata accessor for LoadInfoKeys()
{
  return &type metadata for LoadInfoKeys;
}

ValueMetadata *type metadata accessor for KextRequestKeys()
{
  return &type metadata for KextRequestKeys;
}

ValueMetadata *type metadata accessor for KextRequestFlags()
{
  return &type metadata for KextRequestFlags;
}

ValueMetadata *type metadata accessor for PersonalityKeys()
{
  return &type metadata for PersonalityKeys;
}

ValueMetadata *type metadata accessor for PersonalityValues()
{
  return &type metadata for PersonalityValues;
}

ValueMetadata *type metadata accessor for CollectionKeys()
{
  return &type metadata for CollectionKeys;
}

ValueMetadata *type metadata accessor for ContextKeys()
{
  return &type metadata for ContextKeys;
}

ValueMetadata *type metadata accessor for EnvKeys()
{
  return &type metadata for EnvKeys;
}

ValueMetadata *type metadata accessor for PageProtectionType()
{
  return &type metadata for PageProtectionType;
}

ValueMetadata *type metadata accessor for SysctlKeys()
{
  return &type metadata for SysctlKeys;
}

ValueMetadata *type metadata accessor for MachO()
{
  return &type metadata for MachO;
}

ValueMetadata *type metadata accessor for SymbolSetKeys()
{
  return &type metadata for SymbolSetKeys;
}

ValueMetadata *type metadata accessor for KernelResourceIdentifier()
{
  return &type metadata for KernelResourceIdentifier;
}

ValueMetadata *type metadata accessor for KextExcludeListKeys()
{
  return &type metadata for KextExcludeListKeys;
}

ValueMetadata *type metadata accessor for EntitlementKeys()
{
  return &type metadata for EntitlementKeys;
}

ValueMetadata *type metadata accessor for StagingConstants()
{
  return &type metadata for StagingConstants;
}

ValueMetadata *type metadata accessor for PrebootStashingConstants()
{
  return &type metadata for PrebootStashingConstants;
}

ValueMetadata *type metadata accessor for MountedVolumeConstants()
{
  return &type metadata for MountedVolumeConstants;
}

ValueMetadata *type metadata accessor for DataStashingConstants()
{
  return &type metadata for DataStashingConstants;
}

ValueMetadata *type metadata accessor for DeveloperKitConstants()
{
  return &type metadata for DeveloperKitConstants;
}

ValueMetadata *type metadata accessor for MaxLengthConstants()
{
  return &type metadata for MaxLengthConstants;
}

ValueMetadata *type metadata accessor for TimeoutConstants()
{
  return &type metadata for TimeoutConstants;
}

ValueMetadata *type metadata accessor for NVRAMKeys()
{
  return &type metadata for NVRAMKeys;
}

ValueMetadata *type metadata accessor for LogSignposts()
{
  return &type metadata for LogSignposts;
}

ValueMetadata *type metadata accessor for LifeCycleLogSignPosts()
{
  return &type metadata for LifeCycleLogSignPosts;
}

ValueMetadata *type metadata accessor for ExtendedAttributeConstants()
{
  return &type metadata for ExtendedAttributeConstants;
}

ValueMetadata *type metadata accessor for DistNoteConstants()
{
  return &type metadata for DistNoteConstants;
}

uint64_t *initializeBufferWithCopyOfBuffer for VariantKind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for VariantKind(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }

  return a1;
}

unint64_t *assignWithTake for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for VariantKind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for VariantKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 4;
    }
  }

  return result;
}

uint64_t sub_100092558(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_100092570(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for VariantKind()
{
  return &type metadata for VariantKind;
}

uint64_t _s10driverkitd18PageProtectionTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000925EC + 4 * byte_100113163[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100092620 + 4 * byte_10011315E[v4]))();
}

uint64_t sub_100092620(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100092630LL);
  }
  return result;
}

uint64_t sub_10009263C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100092644LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100092648(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092650(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureBootPolicy()
{
  return &type metadata for SecureBootPolicy;
}

uint64_t storeEnumTagSinglePayload for BootEnvironment(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000926AC + 4 * byte_100113168[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000926CC + 4 * byte_10011316D[v4]))();
  }
}

_BYTE *sub_1000926AC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000926CC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000926D4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000926DC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000926E4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000926EC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BootEnvironment()
{
  return &type metadata for BootEnvironment;
}

ValueMetadata *type metadata accessor for KcgenModeOptions()
{
  return &type metadata for KcgenModeOptions;
}

ValueMetadata *type metadata accessor for AppleCopyright()
{
  return &type metadata for AppleCopyright;
}

void *initializeBufferWithCopyOfBuffer for OSBundleRequiredValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for OSBundleRequiredValue(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for OSBundleRequiredValue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSBundleRequiredValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSBundleRequiredValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OSBundleRequiredValue()
{
  return &type metadata for OSBundleRequiredValue;
}

unint64_t sub_100092858()
{
  unint64_t result = qword_10015A900;
  if (!qword_10015A900)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001139B8, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A900);
  }

  return result;
}

unint64_t sub_10009289C()
{
  unint64_t result = qword_10015A908;
  if (!qword_10015A908)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10015A908);
  }

  return result;
}

unint64_t sub_1000928E0()
{
  unint64_t result = qword_10015A910;
  if (!qword_10015A910)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10015A910);
  }

  return result;
}

uint64_t sub_100092934()
{
  return sub_100092AB0(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests);
}

uint64_t sub_100092940(uint64_t a1)
{
  return sub_100092B00(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests);
}

uint64_t (*sub_10009294C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100092990()
{
  return sub_100040834(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager);
}

uint64_t sub_10009299C(uint64_t a1)
{
  return sub_100040884(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager);
}

uint64_t (*sub_1000929A8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000929EC()
{
  return sub_100040834(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager);
}

uint64_t sub_1000929F8(uint64_t a1)
{
  return sub_100040884(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager);
}

uint64_t (*sub_100092A04(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100092A48()
{
  return sub_100040834(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager);
}

uint64_t sub_100092A54(uint64_t a1)
{
  return sub_100040884(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager);
}

uint64_t (*sub_100092A60(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100092AA4()
{
  return sub_100092AB0(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers);
}

uint64_t sub_100092AB0(void *a1)
{
  unint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_100092AF4(uint64_t a1)
{
  return sub_100092B00(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers);
}

uint64_t sub_100092B00(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*sub_100092B4C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100092B90(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_100092BE4(a1, a2, a3);
  return v7;
}

uint64_t sub_100092BE4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers) = _swiftEmptyArrayStorage;
  unint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  *unint64_t v6 = 0LL;
  v6[1] = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue) = a1;
  uint64_t v7 = v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  sub_100005158(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests) = _swiftEmptyArrayStorage;
  return v3;
}

uint64_t sub_100092CCC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 184LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for DriverBinManager(0LL);
    sub_1000CD2E8(v1, (uint64_t)&off_10014B318, v7, (uint64_t)&off_100147548);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100092D38(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 208LL);
  uint64_t v2 = swift_retain(a1);
  return v4(v2);
}

uint64_t sub_100092D64(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 224LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApplicationManager();
    sub_1000CD2E8(v1, (uint64_t)&off_10014B318, v7, (uint64_t)&off_1001463D0);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100092DD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
  uint64_t v11 = swift_allocObject(&unk_10014B2B0, 32LL, 7LL);
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_100092FC4;
  uint64_t v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000B750;
  aBlock[3] = &unk_10014B2C8;
  unint64_t v12 = _Block_copy(aBlock);
  swift_retain(v1);
  uint64_t v13 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v13);
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100005FB4((uint64_t *)&unk_100159E80);
  unint64_t v16 = sub_1000820B0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v6, &v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

uint64_t sub_100092FB8()
{
  return sub_1000968C8((void (*)(void))&_swift_release);
}

uint64_t sub_100092FC4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(uint64_t (**)(_BYTE *))(**(void **)(v0 + 16) + 168LL);
  swift_retain(v1);
  uint64_t v3 = (void (*)(_BYTE *, void))v2(v11);
  uint64_t v5 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  unint64_t v7 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v6 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v7 >= v6 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1LL);
  }
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v1);
  specialized Array._endMutation()(v8);
  v3(v11, 0LL);
  uint64_t v9 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApprovalManager(0LL);
  return sub_1000CDE2C(0xD00000000000001BLL, (char *)0x8000000100127E60LL, v9, (uint64_t)&off_10014B318);
}

uint64_t sub_10009309C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000930AC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000930B4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 152LL))(result);
    (*(void (**)(void *))(*(void *)v0 + 160LL))(&_swiftEmptyArrayStorage);
    return v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_100093194()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v66 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v14 = *(void *)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  if (v14)
  {
    uint64_t v15 = *(void **)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
LABEL_15:
    swift_bridgeObjectRetain(v14);
    return (char *)v15;
  }

  uint64_t v74 = v11;
  uint64_t v67 = (void *)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  uint64_t v16 = sub_1000D32BC();
  uint64_t v17 = *(void (**)(void))(v3 + 16);
  uint64_t v72 = v16;
  unint64_t v73 = (uint64_t (*)(void (*)(void, void), uint64_t, uint64_t))v17;
  v17(v13);
  uint64_t v18 = swift_retain_n(v0, 2LL);
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v70 = v6;
  Swift::String v71 = v9;
  if (v21)
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v2;
    uint64_t v24 = v23;
    v76[0] = v23;
    uint64_t v69 = 0LL;
    *(_DWORD *)unint64_t v22 = 136315138;
    uint64_t v25 = URL.path.getter(v23);
    unint64_t v27 = v26;
    uint64_t v75 = sub_1000058CC(v25, v26, v76);
    uint64_t v14 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v22 + 4, v22 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Loading approvals database from %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    unint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v29 = v68;
    v28(v13, v68);
  }

  else
  {

    swift_release_n(v0, 2LL);
    unint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v13, v2);
    uint64_t v29 = v2;
  }

  uint64_t v30 = v1[5];
  uint64_t v31 = v1[6];
  sub_100005110(v1 + 2, v30);
  sub_1001073DC(v30, v31);
  uint64_t v32 = v76[4];
  unint64_t v33 = sub_100005110(v76, v76[3]);
  uint64_t v34 = URL.path.getter(v33);
  uint64_t v36 = v35;
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(v32 + 16))(v34);
  unint64_t v39 = v38;
  swift_bridgeObjectRelease(v36);
  uint64_t v40 = sub_100006034(v76);
  if (v39 >> 60 != 15)
  {
    uint64_t v55 = v73((void (*)(void, void))v74, v72, v29);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Loading approvals database, decoding data", v58, 2u);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    v28((char *)v74, v29);
    uint64_t v59 = type metadata accessor for PropertyListDecoder(0LL);
    uint64_t v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    uint64_t v61 = PropertyListDecoder.init()(v60);
    unint64_t v62 = sub_100096624();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v76,  &type metadata for ApprovalDB,  v37,  v39,  &type metadata for ApprovalDB,  v62);
    sub_10002193C(v37, v39);
    swift_release(v61);
    uint64_t v15 = (void *)v76[0];
    uint64_t v63 = v76[1];
    uint64_t v64 = v67;
    uint64_t v65 = *v67;
    *uint64_t v67 = v76[0];
    v64[1] = v63;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRelease(v65);
    goto LABEL_15;
  }

  int v41 = errno.getter(v40);
  uint64_t result = strerror(v41);
  if (result)
  {
    uint64_t v43 = String.init(cString:)(result);
    unint64_t v45 = v44;
    uint64_t v46 = v71;
    v73((void (*)(void, void))v71, v72, v29);
    swift_bridgeObjectRetain(v45);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = v28;
      uint64_t v51 = v14;
      uint64_t v52 = (uint8_t *)v50;
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      swift_bridgeObjectRetain(v45);
      uint64_t v75 = sub_1000058CC(v43, v45, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease_n(v45, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "contentsOfFile failed to read approvals database: %s",  v52,  0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      uint64_t v54 = v52;
      uint64_t v14 = v51;
      swift_slowDealloc(v54, -1LL, -1LL);

      v74(v71, v29);
    }

    else
    {

      swift_bridgeObjectRelease_n(v45, 2LL);
      v28(v46, v29);
    }

    uint64_t v15 = sub_10005E3C0();
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

char *sub_1000938EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005FB4(&qword_100157ED0);
  __chkstk_darwin(v2);
  v426 = (char *)&v389 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v429 = type metadata accessor for DriverBinEntry(0LL);
  *(void *)&__int128 v428 = *(void *)(v429 - 8);
  uint64_t v4 = __chkstk_darwin(v429);
  v431 = (char *)&v389 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v427 = (uint64_t)&v389 - v6;
  uint64_t v435 = type metadata accessor for Logger(0LL);
  uint64_t v438 = *(void *)(v435 - 8);
  uint64_t v7 = __chkstk_darwin(v435);
  v392 = (char *)&v389 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (unint64_t)&v389 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  v389 = (char *)&v389 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v390 = (char *)&v389 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v393 = (char *)&v389 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v425 = (char *)&v389 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v22 = (unint64_t)&v389 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  v402 = (char *)&v389 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v409 = (char *)&v389 - v26;
  __chkstk_darwin(v25);
  v404 = (char *)&v389 - v27;
  uint64_t v28 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v28);
  v405 = (char *)&v389 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v439 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void **)(v439 - 8);
  uint64_t v31 = __chkstk_darwin(v439);
  v391 = (char *)&v389 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  v419 = (char *)&v389 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v407 = (char *)&v389 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v401 = (char *)&v389 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v408 = (char *)&v389 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v433 = (char *)&v389 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v403 = (char *)&v389 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v418 = (char *)&v389 - v46;
  __chkstk_darwin(v45);
  v436 = (char *)&v389 - v47;
  uint64_t v48 = type metadata accessor for LookupSpec(0LL);
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v51 = (char *)&v389 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = (*(uint64_t (**)(uint64_t))(*v0 + 344LL))(v49);
  uint64_t v415 = v53;
  uint64_t v416 = v52;
  v449 = sub_10005E3C0();
  unint64_t v450 = v54;
  v396 = *(uint64_t (**)(void))(*v0 + 176LL);
  uint64_t result = (char *)v396();
  if (!result) {
    goto LABEL_158;
  }
  uint64_t v56 = result;
  uint64_t v57 = (*(uint64_t (**)(char *))(*(void *)result + 360LL))(result);
  uint64_t v437 = v58;
  int64_t v60 = v59;
  uint64_t v61 = swift_release(v56);
  unint64_t v62 = *(uint64_t (**)(uint64_t))(*v1 + 200LL);
  v434 = (char *)v1;
  uint64_t result = (char *)v62(v61);
  if (result)
  {
    uint64_t v63 = result;
    uint64_t v64 = *((void *)result + 7);
    swift_retain(v64);
    uint64_t v65 = swift_release(v63);
    uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 144LL))(v65);
    swift_release(v64);
    sub_1000548C0(v66, (uint64_t)v451);
    swift_release(v66);
    swift_storeEnumTagMultiPayload(v51, v48, 4LL);
    sub_10005350C((uint64_t)v51);
    uint64_t v68 = v67;
    sub_100010F94(v451);
    sub_1000127BC((uint64_t)v51, type metadata accessor for LookupSpec);
    if (v68) {
      unint64_t v69 = (unint64_t)v68;
    }
    else {
      unint64_t v69 = (unint64_t)_swiftEmptyArrayStorage;
    }
    unint64_t v430 = v57;
    int64_t v423 = v60;
    uint64_t v70 = sub_10003ADC4(v57);
    uint64_t v410 = sub_100012054(v70);
    swift_bridgeObjectRelease(v70);
    uint64_t v72 = v69;
    v422 = (void *)v69;
    if (v69 >> 62) {
      goto LABEL_147;
    }
    uint64_t v73 = *(void *)((v69 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (1)
    {
      uint64_t v74 = v435;
      uint64_t v75 = (char *)v439;
      uint64_t v76 = v431;
      uint64_t v77 = (uint64_t)v405;
      unint64_t v414 = v11;
      v432 = v30;
      unint64_t v406 = v22;
      int64_t v78 = v423;
      if (!v73)
      {
        v424 = _swiftEmptyArrayStorage;
LABEL_36:
        uint64_t v130 = v72;
        swift_bridgeObjectRelease(v410);
        swift_bridgeObjectRelease(v130);
        swift_bridgeObjectRelease(v78);
        uint64_t v132 = 0LL;
        uint64_t v133 = *(void *)(v430 + 64);
        v422 = (void *)(v430 + 64);
        uint64_t v134 = 1LL << *(_BYTE *)(v430 + 32);
        uint64_t v135 = -1LL;
        if (v134 < 64) {
          uint64_t v135 = ~(-1LL << v134);
        }
        unint64_t v11 = v135 & v133;
        v421 = v434 + 16;
        int64_t v423 = (unint64_t)(v134 + 63) >> 6;
        *(void *)&__int128 v131 = 136315138LL;
        __int128 v420 = v131;
        v418 = (char *)&type metadata for Any + 8;
        v411 = (void *)0x8000000100127C70LL;
        v412 = (char *)0x8000000100127D30LL;
        v417 = (void (*)(unint64_t, char *))((char *)&type metadata for () + 8);
        v413 = (void *)0x8000000100127D00LL;
        uint64_t v136 = v429;
        unint64_t v22 = (unint64_t)v433;
        if ((v135 & v133) != 0)
        {
LABEL_39:
          unint64_t v137 = __clz(__rbit64(v11));
          uint64_t v138 = (v11 - 1) & v11;
          unint64_t v139 = v137 | (v132 << 6);
          goto LABEL_58;
        }

LABEL_124:
                  swift_bridgeObjectRetain(v30);
                  BOOL v300 = sub_1000D26D0();
                  swift_bridgeObjectRelease(v30);
                  if (v300)
                  {
                    uint64_t v301 = v437;
                    sub_100095F74(0LL, (uint64_t)v434, v437);
                    swift_bridgeObjectRelease(v11);
                    swift_release(v301);
                    v302 = 0LL;
LABEL_143:
                    swift_bridgeObjectRelease(v30);
                    return (char *)v302;
                  }

                  uint64_t v303 = sub_1000D32BC();
                  v436 = *(char **)(v246 + 16);
                  uint64_t v304 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v393, v303, v74);
                  v305 = (os_log_s *)Logger.logObject.getter(v304);
                  os_log_type_t v306 = static os_log_type_t.default.getter(v305);
                  if (os_log_type_enabled(v305, v306))
                  {
                    v307 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)v307 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v305, v306, "Saving appproval db, encoding", v307, 2u);
                    swift_slowDealloc(v307, -1LL, -1LL);
                  }

                  uint64_t v438 = *(void *)(v246 + 8);
                  ((void (*)(char *, uint64_t))v438)(v393, v74);
                  uint64_t v308 = type metadata accessor for PropertyListEncoder(0LL);
                  swift_allocObject(v308, *(unsigned int *)(v308 + 48), *(unsigned __int16 *)(v308 + 52));
                  uint64_t v309 = PropertyListEncoder.init()();
                  uint64_t v310 = v74;
                  v311 = v449;
                  uint64_t v445 = (uint64_t)v449;
                  unint64_t v446 = v450;
                  unint64_t v312 = sub_100096788();
                  __n128 v313 = swift_bridgeObjectRetain(v311);
                  uint64_t v314 = dispatch thunk of PropertyListEncoder.encode<A>(_:)( &v445,  &type metadata for ApprovalDB,  v312,  v313);
                  uint64_t v316 = (uint64_t)v75;
                  if (v75)
                  {
                    swift_release(v309);
                    swift_bridgeObjectRelease(v311);
                    goto LABEL_138;
                  }

                  v431 = (char *)v314;
                  v433 = (char *)v315;
                  v424 = v30;
                  swift_release(v309);
                  swift_bridgeObjectRelease(v311);
                  v317 = v390;
                  unint64_t v430 = v303;
                  uint64_t v318 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v390, v303, v310);
                  v319 = (os_log_s *)Logger.logObject.getter(v318);
                  uint64_t v320 = static os_log_type_t.default.getter(v319);
                  if (os_log_type_enabled(v319, (os_log_type_t)v320))
                  {
                    v321 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)v321 = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v319,  (os_log_type_t)v320,  "Writing new approval db contents",  v321,  2u);
                    swift_slowDealloc(v321, -1LL, -1LL);
                  }

                  ((void (*)(char *, uint64_t))v438)(v317, v310);
                  v322 = v434;
                  uint64_t v429 = (uint64_t)&v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath];
                  URL.appendingPathExtension(_:)(7824750LL, 0xE300000000000000LL);
                  uint64_t v323 = v322[5];
                  uint64_t v324 = v322[6];
                  sub_100005110(v76, v323);
                  sub_1001073DC(v323, v324);
                  uint64_t v325 = v447;
                  uint64_t v326 = v448;
                  v327 = sub_100005110(&v445, v447);
                  uint64_t v328 = URL.path.getter(v327);
                  uint64_t v330 = v329;
                  uint64_t v331 = (uint64_t)v431;
                  unint64_t v332 = (unint64_t)v433;
                  sub_1000125E0((uint64_t)v431, (unint64_t)v433);
                  unint64_t v333 = sub_10001BD10((uint64_t)_swiftEmptyArrayStorage);
                  LOBYTE(v328) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v326 + 40))( v328,  v330,  v331,  v332,  v333,  v325,  v326);
                  swift_bridgeObjectRelease(v333);
                  sub_10001226C(v331, v332);
                  swift_bridgeObjectRelease(v330);
                  uint64_t v334 = sub_100006034(&v445);
                  if ((v328 & 1) != 0)
                  {
                    v335 = v389;
                    uint64_t v336 = ((uint64_t (*)(char *, unint64_t, uint64_t))v436)(v389, v430, v435);
                    v337 = (os_log_s *)Logger.logObject.getter(v336);
                    os_log_type_t v338 = static os_log_type_t.info.getter(v337);
                    if (os_log_type_enabled(v337, v338))
                    {
                      v339 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                      *(_WORD *)v339 = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v337,  v338,  "Replacing old approval db contents",  v339,  2u);
                      swift_slowDealloc(v339, -1LL, -1LL);
                    }

                    ((void (*)(char *, uint64_t))v438)(v335, v435);
                    v340 = v434;
                    uint64_t v341 = *((void *)v434 + 5);
                    uint64_t v342 = *((void *)v434 + 6);
                    v343 = v421;
                    sub_100005110(v421, v341);
                    sub_1001073DC(v341, v342);
                    uint64_t v344 = v447;
                    uint64_t v345 = v448;
                    sub_100005110(&v445, v447);
                    v346 = v391;
                    (*(void (**)(uint64_t, char *, void, void, void, void, uint64_t, uint64_t))(v345 + 88))( v429,  v391,  0LL,  0LL,  0LL,  0LL,  v344,  v345);
                    sub_100006034(&v445);
                    uint64_t v375 = v340[5];
                    uint64_t v376 = v340[6];
                    sub_100005110(v343, v375);
                    sub_1001073DC(v375, v376);
                    uint64_t v377 = v447;
                    uint64_t v378 = v448;
                    sub_100005110(&v445, v447);
                    (*(void (**)(char *, uint64_t, uint64_t))(v378 + 104))(v346, v377, v378);
                    v379 = v432;
                    v380 = v424;
                    sub_100006034(&v445);
                    v381 = v449;
                    unint64_t v382 = v450;
                    v383 = v434;
                    v384 = &v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB];
                    uint64_t v385 = *(void *)&v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB];
                    char *v384 = v449;
                    v384[1] = v382;
                    swift_bridgeObjectRetain(v381);
                    swift_bridgeObjectRelease(v385);
                    uint64_t v386 = v437;
                    sub_100095F74(0LL, (uint64_t)v383, v437);
                    sub_10001226C((uint64_t)v431, (unint64_t)v433);
                    ((void (*)(char *, uint64_t))v379[1])(v346, v439);
                    swift_release(v386);
                    v302 = v380;
                  }

                  else
                  {
                    int v347 = errno.getter(v334);
                    uint64_t result = strerror(v347);
                    uint64_t v303 = v430;
                    if (!result) {
                      goto LABEL_160;
                    }
                    uint64_t v348 = String.init(cString:)(result);
                    v350 = v349;
                    uint64_t v445 = 0LL;
                    unint64_t v446 = 0xE000000000000000LL;
                    _StringGuts.grow(_:)(30LL);
                    swift_bridgeObjectRelease(v446);
                    uint64_t v445 = 0x6946657461657263LL;
                    unint64_t v446 = 0xEB0000000020656CLL;
                    uint64_t v351 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
                    v352 = v391;
                    uint64_t v353 = v439;
                    v354._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v439, v351);
                    v355 = v354._object;
                    String.append(_:)(v354);
                    swift_bridgeObjectRelease(v355);
                    v356._uint64_t countAndFlagsBits = 0x3A64656C69616620LL;
                    v356._object = (void *)0xEF206F6E72726520LL;
                    String.append(_:)(v356);
                    v357._uint64_t countAndFlagsBits = v348;
                    v357._object = v350;
                    String.append(_:)(v357);
                    swift_bridgeObjectRelease(v350);
                    uint64_t v358 = v445;
                    unint64_t v359 = v446;
                    unint64_t v360 = sub_100012624();
                    uint64_t v316 = swift_allocError(&type metadata for KMError, v360, 0LL, 0LL);
                    *(void *)uint64_t v361 = v358;
                    *(void *)(v361 + 8) = v359;
                    *(_OWORD *)(v361 + 16) = 0u;
                    *(_OWORD *)(v361 + 32) = 0u;
                    *(_OWORD *)(v361 + 48) = 0u;
                    *(void *)(v361 + 64) = 0LL;
                    *(_BYTE *)(v361 + 72) = 19;
                    swift_willThrow(v316);
                    sub_10001226C((uint64_t)v431, (unint64_t)v433);
                    ((void (*)(char *, uint64_t))v432[1])(v352, v353);
                    uint64_t v310 = v435;
                    uint64_t v30 = v424;
LABEL_138:
                    v362 = v392;
                    ((void (*)(char *, uint64_t, uint64_t))v436)(v392, v303, v310);
                    swift_errorRetain(v316);
                    uint64_t v363 = swift_errorRetain(v316);
                    v364 = (os_log_s *)Logger.logObject.getter(v363);
                    os_log_type_t v365 = static os_log_type_t.error.getter(v364);
                    if (os_log_type_enabled(v364, v365))
                    {
                      v424 = v30;
                      v366 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                      uint64_t v367 = swift_slowAlloc(32LL, -1LL);
                      uint64_t v445 = v367;
                      *(_DWORD *)v366 = v420;
                      *(void *)&__int128 v440 = v316;
                      swift_errorRetain(v316);
                      uint64_t v368 = sub_100005FB4(&qword_10015AB20);
                      uint64_t v369 = String.init<A>(describing:)(&v440, v368);
                      unint64_t v371 = v370;
                      *(void *)&__int128 v440 = sub_1000058CC(v369, v370, &v445);
                      uint64_t v30 = v424;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, (char *)&v440 + 8, v366 + 4, v366 + 12);
                      swift_bridgeObjectRelease(v371);
                      swift_errorRelease(v316);
                      swift_errorRelease(v316);
                      _os_log_impl( (void *)&_mh_execute_header,  v364,  v365,  "Failed to write approval database during state update: %s",  v366,  0xCu);
                      swift_arrayDestroy(v367, 1LL, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v367, -1LL, -1LL);
                      swift_slowDealloc(v366, -1LL, -1LL);

                      v372 = v392;
                      uint64_t v373 = v435;
                    }

                    else
                    {
                      swift_errorRelease(v316);
                      swift_errorRelease(v316);

                      v372 = v362;
                      uint64_t v373 = v310;
                    }

                    ((void (*)(char *, uint64_t))v438)(v372, v373);
                    swift_errorRetain(v316);
                    uint64_t v374 = v437;
                    sub_100095F74(v316, (uint64_t)v434, v437);
                    swift_errorRelease(v316);
                    swift_errorRelease(v316);
                    swift_release(v374);
                    swift_bridgeObjectRelease(v30);
                    v302 = 0LL;
                  }

                  uint64_t v30 = v449;
                  goto LABEL_143;
                }

                unint64_t v142 = v422[v143];
                if (!v142)
                {
                  while (1)
                  {
                    uint64_t v132 = v143 + 1;
                    if (__OFADD__(v143, 1LL)) {
                      goto LABEL_146;
                    }
                    if (v132 >= v423) {
                      goto LABEL_90;
                    }
                    unint64_t v142 = v422[v132];
                    ++v143;
                    if (v142) {
                      goto LABEL_57;
                    }
                  }
                }

                uint64_t v132 = v143;
              }
            }
          }
        }

uint64_t sub_100095F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_10014B360, 32LL, 7LL);
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_100096900;
  uint64_t v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000B750;
  aBlock[3] = &unk_10014B378;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain(a3);
  uint64_t v14 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100005FB4((uint64_t *)&unk_100159E80);
  unint64_t v17 = sub_1000820B0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v7, &v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v22);
}

uint64_t sub_100096164()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
  unint64_t v3 = sub_100060BB8(v2);
  swift_bridgeObjectRelease(v2);
  unint64_t v22 = v3;
  _StringGuts.grow(_:)(20LL);
  uint64_t v4 = swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 152LL);
  uint64_t v6 = v5(v4);
  uint64_t v7 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0) {
      v6 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    _CocoaArrayWrapper.endIndex.getter(v6);
  }

  swift_bridgeObjectRelease(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._uint64_t countAndFlagsBits = 58LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v11._object = (void *)0x8000000100127DD0LL;
  String.append(_:)(v11);
  uint64_t v12 = swift_bridgeObjectRelease(0x8000000100127DD0LL);
  uint64_t result = v5(v12);
  uint64_t v14 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15)
    {
LABEL_16:
      swift_bridgeObjectRelease(v14);
      return v22;
    }
  }

  if (v15 >= 1)
  {
    uint64_t v16 = 0LL;
    do
    {
      if ((v14 & 0xC000000000000001LL) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
      }

      else
      {
        uint64_t v17 = *(void *)(v14 + 8 * v16 + 32);
        swift_retain(v17);
      }

      ++v16;
      uint64_t updated = type metadata accessor for ApprovalStateUpdateRequest(0LL);
      uint64_t v19 = sub_100012860( &qword_10015A938,  type metadata accessor for ApprovalStateUpdateRequest,  (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
      v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(updated, v19);
      uint64_t v21 = v20._object;
      String.append(_:)(v20);
      swift_release(v17);
      swift_bridgeObjectRelease(v21);
    }

    while (v15 != v16);
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_100096398()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests));

  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB));
  return v0;
}

uint64_t sub_100096454()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

id sub_100096478()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
}

uint64_t sub_100096488()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t sub_100096494()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

void (*sub_1000964A0(void *a1))(void *a1)
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 264LL))();
  return sub_10000C7E8;
}

uint64_t sub_1000964EC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t sub_1000964F8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

void *sub_100096504(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_10015AAF0);
      Swift::String v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      Swift::String v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100096A40(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

unint64_t sub_100096624()
{
  unint64_t result = qword_10015A918;
  if (!qword_10015A918)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A918);
  }

  return result;
}

unint64_t sub_100096668()
{
  unint64_t result = qword_10015A920;
  if (!qword_10015A920)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_10015A920);
  }

  return result;
}

uint64_t sub_1000966AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_1000966F0()
{
  return sub_10005EF60(*(void **)(v0 + 24));
}

uint64_t sub_100096714()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100096738(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_100096744()
{
  unint64_t result = qword_10015A928;
  if (!qword_10015A928)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A928);
  }

  return result;
}

unint64_t sub_100096788()
{
  unint64_t result = qword_10015A930;
  if (!qword_10015A930)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A930);
  }

  return result;
}

uint64_t sub_1000967CC()
{
  return type metadata accessor for ApprovalManager(0LL);
}

uint64_t type metadata accessor for ApprovalManager(uint64_t a1)
{
  uint64_t result = qword_100164498;
  if (!qword_100164498) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApprovalManager);
  }
  return result;
}

uint64_t sub_100096810(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = &unk_100113FC0;
    v4[5] = &unk_100113FC0;
    v4[6] = &unk_100113FC0;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = &unk_100113FD8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000968BC()
{
  return sub_1000968C8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1000968C8(void (*a1)(void))
{
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_100096900()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = swift_beginAccess(v2 + 16, v13, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    for (int64_t i = (unsigned __int8 *)(v4 + 48); ; i += 24)
    {
      uint64_t v8 = *((void *)i - 2);
      uint64_t v9 = *((void *)i - 1);
      int v10 = *i;
      size_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
      uint64_t v11 = *(void *)(v8 + 64);
      swift_retain(v8);
      if (v10 == 1)
      {
        sub_100096738(v9, 1);
        swift_retain(v11);
        v12(v9, 1LL);
        sub_100086120(v9, 1);
        swift_release(v11);
        uint64_t v7 = v8;
      }

      else
      {
        if (v1)
        {
          swift_errorRetain(v1);
          swift_retain(v11);
          v12(v1, 1LL);
          swift_release(v11);
          swift_release(v8);
          swift_errorRelease(v1);
          goto LABEL_5;
        }

        swift_retain(v11);
        v12(v9, 0LL);
        swift_release(v8);
        uint64_t v7 = v11;
      }

      swift_release(v7);
LABEL_5:
      if (!--v5) {
        return swift_bridgeObjectRelease(v4);
      }
    }
  }

  return result;
}

uint64_t sub_100096A40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100005FB4(&qword_10015AAF8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100096B4C()
{
  return sub_1000966F0();
}

uint64_t sub_100096B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = URL.pathExtension.getter(v12);
  uint64_t v17 = v16;
  if (v15 == 0x6775626564LL && v16 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v14, a1, v4);
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x6775626564LL, 0xE500000000000000LL, 0LL);
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v14, a1, v4);
    if ((v19 & 1) == 0)
    {
      uint64_t v21 = URL.pathExtension.getter(v20);
      if (v21 != 0x6D706F6C65766564LL || v22 != 0xEB00000000746E65LL)
      {
        uint64_t v24 = v22;
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x6D706F6C65766564LL, 0xEB00000000746E65LL, 0LL);
        swift_bridgeObjectRelease(v24);
        goto LABEL_12;
      }

      swift_bridgeObjectRelease(0xEB00000000746E65LL);
    }
  }

  char v25 = 1;
LABEL_12:
  uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v14, v4);
  uint64_t v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v11, a1, v4);
  if ((v25 & 1) != 0)
  {
LABEL_20:
    uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v26)(v11, v4);
    goto LABEL_21;
  }

  uint64_t v28 = URL.pathExtension.getter(v27);
  if (v28 == 0x6E6173616BLL && v29 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    goto LABEL_20;
  }

  uint64_t v31 = v29;
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 0x6E6173616BLL, 0xE500000000000000LL, 0LL);
  swift_bridgeObjectRelease(v31);
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v26)(v11, v4);
  if ((v32 & 1) != 0)
  {
LABEL_21:
    URL.deletingPathExtension()(v33);
    URL.appendingPathExtension(_:)(0x736564696C65LL, 0xE600000000000000LL);
    v26(v8, v4);
    uint64_t v34 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v34, 1LL, v4);
  }

  uint64_t v34 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v34, 1LL, v4);
}

uint64_t sub_100096E0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v83 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v82 = a1;
  URL.appendingPathExtension(_:)(0x736564696C65LL, 0xE600000000000000LL);
  uint64_t v12 = v2 + 2;
  uint64_t v13 = v2[5];
  uint64_t v14 = v2[6];
  sub_100005110(v2 + 2, v13);
  sub_1001073DC(v13, v14);
  uint64_t v15 = v87;
  uint64_t v16 = sub_100005110(v85, v86);
  uint64_t v17 = URL.path.getter(v16);
  uint64_t v19 = v18;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v15 + 16))(v17);
  unint64_t v22 = v21;
  swift_bridgeObjectRelease(v19);
  if (v22 >> 60 == 15)
  {
    uint64_t v23 = v2;
    uint64_t v24 = v83;
    uint64_t v25 = (uint64_t)v84;
    uint64_t v81 = v11;
    uint64_t v26 = v7;
    uint64_t v27 = sub_100006034(v85);
    uint64_t v28 = errno.getter(v27);
    if ((_DWORD)v28 != 2)
    {
      int v29 = v28;
      uint64_t v30 = static os_log_type_t.error.getter(v28);
      uint64_t v31 = (void *)*sub_1000D2DD4();
      uint64_t v32 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v33 = swift_allocObject(v32, 112LL, 7LL);
      *(_OWORD *)(v33 + 16) = xmmword_10010F440;
      id v34 = v31;
      uint64_t v35 = v81;
      uint64_t v36 = URL.path.getter(v34);
      uint64_t v38 = v37;
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 64) = sub_100026B64();
      *(void *)(v33 + 32) = v36;
      *(void *)(v33 + sub_10007CFB4(v0 + 40) = v38;
      *(void *)(v33 + 96) = &type metadata for Int32;
      *(void *)(v33 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v33 + 72) = v29;

      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v6);
      return 0LL;
    }

    sub_100096B68(v82, v25);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, 1LL, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v81, v6);
      sub_100097760(v25);
      return 0LL;
    }

    uint64_t v80 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v24, v25, v6);
    uint64_t v84 = (char *)v6;
    uint64_t v39 = v23[5];
    uint64_t v40 = v23[6];
    sub_100005110(v12, v39);
    sub_1001073DC(v39, v40);
    uint64_t v41 = v87;
    uint64_t v42 = sub_100005110(v85, v86);
    uint64_t v43 = URL.path.getter(v42);
    uint64_t v45 = v44;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(v41 + 16))(v43);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v45);
    uint64_t v48 = sub_100006034(v85);
    uint64_t v49 = v81;
    if (v47 >> 60 == 15)
    {
      uint64_t v50 = errno.getter(v48);
      int v78 = v50;
      unsigned int v79 = static os_log_type_t.error.getter(v50);
      uint64_t v51 = (void *)*sub_1000D2DD4();
      uint64_t v52 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v53 = swift_allocObject(v52, 152LL, 7LL);
      *(_OWORD *)(v53 + 16) = xmmword_100111D70;
      id v54 = v51;
      uint64_t v55 = URL.path.getter(v54);
      uint64_t v57 = v56;
      *(void *)(v53 + 56) = &type metadata for String;
      unint64_t v58 = sub_100026B64();
      *(void *)(v53 + 64) = v58;
      *(void *)(v53 + 32) = v55;
      *(void *)(v53 + sub_10007CFB4(v0 + 40) = v57;
      uint64_t v59 = URL.path.getter(v58);
      *(void *)(v53 + 96) = &type metadata for String;
      *(void *)(v53 + 104) = v58;
      *(void *)(v53 + 72) = v59;
      *(void *)(v53 + 80) = v60;
      *(void *)(v53 + 136) = &type metadata for Int32;
      *(void *)(v53 + 144) = &protocol witness table for Int32;
      uint64_t v61 = v79;
      *(_DWORD *)(v53 + 112) = v78;

      uint64_t v62 = v53;
    }

    else
    {
      unsigned int v79 = static os_log_type_t.default.getter(v48);
      uint64_t v63 = (void *)*sub_1000D2DD4();
      uint64_t v64 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v65 = swift_allocObject(v64, 112LL, 7LL);
      *(_OWORD *)(v65 + 16) = xmmword_10010F440;
      id v66 = v63;
      uint64_t v67 = URL.path.getter(v66);
      uint64_t v69 = v68;
      *(void *)(v65 + 56) = &type metadata for String;
      unint64_t v70 = sub_100026B64();
      *(void *)(v65 + 64) = v70;
      *(void *)(v65 + 32) = v67;
      *(void *)(v65 + sub_10007CFB4(v0 + 40) = v69;
      uint64_t v71 = URL.path.getter(v70);
      *(void *)(v65 + 96) = &type metadata for String;
      *(void *)(v65 + 104) = v70;
      *(void *)(v65 + 72) = v71;
      *(void *)(v65 + 80) = v72;

      uint64_t v62 = v65;
    }

    swift_bridgeObjectRelease(v62);
    uint64_t v73 = v24;
    uint64_t v74 = *(void (**)(char *, char *))(v80 + 8);
    uint64_t v75 = v84;
    v74(v73, v84);
    v74(v49, v75);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    sub_100006034(v85);
  }

  return v20;
}

void *sub_100097334(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacterSet(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100096E0C(a1);
  if (v10 >> 60 == 15)
  {
    uint64_t v11 = static os_log_type_t.default.getter(v9);
    uint64_t v12 = (void *)*sub_1000D2DD4();
    uint64_t v13 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + 16) = xmmword_10010F110;
    id v15 = v12;
    uint64_t v16 = URL.path.getter(v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_100026B64();
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + sub_10007CFB4(v0 + 40) = v18;

    uint64_t v19 = v14;
LABEL_3:
    swift_bridgeObjectRelease(v19);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v20 = v9;
  unint64_t v21 = v10;
  uint64_t v55 = v9;
  unint64_t v56 = v10;
  static String.Encoding.utf8.getter(v9);
  unint64_t v22 = sub_10009771C();
  uint64_t v23 = String.init<A>(bytes:encoding:)(&v55, v8, &type metadata for Data, v22);
  if (!v24)
  {
    uint64_t v45 = static os_log_type_t.error.getter(v23);
    unint64_t v46 = (void *)*sub_1000D2DD4();
    uint64_t v47 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v48 + 16) = xmmword_10010F110;
    id v49 = v46;
    uint64_t v50 = URL.path.getter(v49);
    uint64_t v52 = v51;
    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 64) = sub_100026B64();
    *(void *)(v48 + 32) = v50;
    *(void *)(v48 + sub_10007CFB4(v0 + 40) = v52;

    swift_bridgeObjectRelease(v48);
    sub_10002193C(v20, v21);
    return _swiftEmptyArrayStorage;
  }

  unint64_t v25 = v24;
  uint64_t v55 = v23;
  unint64_t v56 = v24;
  static CharacterSet.whitespacesAndNewlines.getter();
  unint64_t v26 = sub_10002657C();
  uint64_t v27 = StringProtocol.trimmingCharacters(in:)(v5, &type metadata for String, v26);
  unint64_t v29 = v28;
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v30 = swift_bridgeObjectRelease(v25);
  uint64_t v55 = 32LL;
  unint64_t v56 = 0xE100000000000000LL;
  __chkstk_darwin(v30);
  *(void *)&v54[-16] = &v55;
  swift_bridgeObjectRetain(v29);
  uint64_t v31 = sub_1000293A4(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002C040, (uint64_t)&v54[-32], v27, v29);
  swift_bridgeObjectRelease(v29);
  int64_t v32 = *((void *)v31 + 2);
  if (!v32)
  {
    sub_10002193C(v20, v21);
    uint64_t v19 = (uint64_t)v31;
    goto LABEL_3;
  }

  uint64_t v55 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000CC84(0, v32, 0);
  uint64_t v33 = v55;
  id v34 = v31 + 56;
  do
  {
    uint64_t v35 = *(v34 - 3);
    uint64_t v36 = *(v34 - 2);
    uint64_t v37 = *(v34 - 1);
    uint64_t v38 = *v34;
    swift_bridgeObjectRetain(*v34);
    uint64_t v39 = static String._fromSubstring(_:)(v35, v36, v37, v38);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v38);
    uint64_t v55 = v33;
    unint64_t v43 = *(void *)(v33 + 16);
    unint64_t v42 = *(void *)(v33 + 24);
    if (v43 >= v42 >> 1)
    {
      sub_10000CC84(v42 > 1, v43 + 1, 1);
      uint64_t v33 = v55;
    }

    *(void *)(v33 + 16) = v43 + 1;
    unint64_t v44 = v33 + 16 * v43;
    *(void *)(v44 + 32) = v39;
    *(void *)(v44 + sub_10007CFB4(v0 + 40) = v41;
    v34 += 4;
    --v32;
  }

  while (v32);
  sub_10002193C(v20, v21);
  swift_bridgeObjectRelease(v31);
  return (void *)v33;
}

unint64_t sub_10009771C()
{
  unint64_t result = qword_10015AB00;
  if (!qword_10015AB00)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10015AB00);
  }

  return result;
}

uint64_t sub_100097760(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000977A0()
{
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  sub_1000977D4();
  return v1;
}

uint64_t sub_1000977D4()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = sub_100099CD8((uint64_t)_swiftEmptyArrayStorage);
  v39[3] = type metadata accessor for DriverKitDaemonSideEffects();
  v39[4] = &off_10014B420;
  v39[0] = v0;
  uint64_t v2 = type metadata accessor for RealBundleResolver();
  swift_retain(v0);
  uint64_t v36 = sub_1000055EC();
  sub_10009C1E8((uint64_t)v39, v2, (uint64_t)&off_10014B598);
  swift_release(v36);
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSFileManager);
  id v4 = objc_msgSend(v3, "init", v36, v39[0]);
  uint64_t v5 = sub_100006094(0LL, &qword_10015AB10, &OBJC_CLASS___NSFileManager_ptr);
  sub_1001072F8((uint64_t)v39, v5, (uint64_t)&off_100150948);

  uint64_t v6 = type metadata accessor for RealKernelClient();
  sub_10007128C();
  uint64_t v8 = v7;
  sub_100071734((uint64_t)v39, v6, (uint64_t)&off_100148898);
  swift_release(v8);
  uint64_t v9 = type metadata accessor for RealDaemonLauncher();
  uint64_t v10 = sub_1000055EC();
  sub_10006A2F0((uint64_t)v39, v9, (uint64_t)&off_100148430);
  swift_release(v10);
  type metadata accessor for RealCodeSigningResolver();
  sub_1000DEA70();
  uint64_t v12 = v11;
  sub_1000DEB88((uint64_t)v39);
  swift_release(v12);
  type metadata accessor for NullSystemPolicyClient();
  uint64_t v13 = sub_10007A2CC();
  sub_10007A470((uint64_t)v39);
  swift_release(v13);
  uint64_t v14 = type metadata accessor for EmbeddedSIPStatus();
  uint64_t v15 = sub_1000055EC();
  sub_100026CB4((uint64_t)v39, v14, (uint64_t)&off_100146910);
  swift_release(v15);
  uint64_t v16 = type metadata accessor for RealDistNote();
  uint64_t v17 = sub_1000055EC();
  sub_10006AB60((uint64_t)v39, v16, (uint64_t)&off_100148490);
  swift_release(v17);
  type metadata accessor for MinimalDeveloperKitClient();
  sub_10010AF8C();
  uint64_t v19 = v18;
  sub_10010AA34((uint64_t)v39);
  swift_release(v19);
  uint64_t v20 = type metadata accessor for RealApprovalsXPCPublisher();
  uint64_t v21 = sub_10010B13C();
  sub_10010AF94((uint64_t)v39, v20, (uint64_t)&off_100150FC0);
  swift_release(v21);
  uint64_t v22 = type metadata accessor for RealDeviceProperties();
  uint64_t v23 = sub_1000055EC();
  sub_100104EC0((uint64_t)v39, v22, (uint64_t)&off_1001508F0);
  swift_release(v23);
  uint64_t v24 = type metadata accessor for RealCoreAnalyticsClient();
  uint64_t v37 = sub_1000055EC();
  sub_10000579C((uint64_t)v39, v24, (uint64_t)&off_100145CD0);
  swift_release(v37);
  if ((sub_1000D8050() & 1) != 0)
  {
    uint64_t v25 = type metadata accessor for RestoreOSFeatureFlagsClient();
    uint64_t v26 = sub_1000055EC();
    sub_10003A980((uint64_t)v39, v25, (uint64_t)&off_100147248);
    swift_release(v26);
    uint64_t v27 = type metadata accessor for NullRunningBoardSupport();
    uint64_t v28 = sub_1000055EC();
    sub_100013644((uint64_t)v39, v27, (uint64_t)&off_100145F80);
    swift_release(v28);
    uint64_t v29 = type metadata accessor for NullLaunchServices();
    uint64_t v30 = sub_1000055EC();
    uint64_t v31 = &off_1001471F0;
  }

  else
  {
    uint64_t v32 = type metadata accessor for RealFeatureFlagsClient();
    uint64_t v38 = sub_1000055EC();
    sub_10003A980((uint64_t)v39, v32, (uint64_t)&off_100147220);
    swift_release(v38);
    id v33 = objc_msgSend(objc_allocWithZone((Class)RunningBoardSupport), "init", v38);
    uint64_t v34 = sub_100006094(0LL, &qword_10015AB18, &off_100145470);
    sub_100013644((uint64_t)v39, v34, (uint64_t)&off_100145F60);

    uint64_t v29 = type metadata accessor for RealLaunchServices();
    uint64_t v30 = sub_1000055EC();
    uint64_t v31 = &off_100147208;
  }

  sub_10003A688((uint64_t)v39, v29, (uint64_t)v31);
  swift_release(v30);
  sub_100006034(v39);
  return v1;
}

uint64_t sub_100097C50()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_100097C74()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

void (*sub_100097C9C(void *a1))(void *)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 104LL))();
  return sub_100012C1C;
}

uint64_t sub_100097CEC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000D4EC8(a1, a3, a2, a4, a5);
}

uint64_t sub_100097CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D50DC(a1, a2, a4, a3, a5);
}

void (*sub_100097D0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *)
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[4] = sub_1000D5118(v10, a2, a4, a3, a5);
  return sub_100012C1C;
}

uint64_t sub_100097D80()
{
  return swift_retain(*(void *)(*(void *)(v0 + 80) + 56LL));
}

uint64_t sub_100097D8C()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t *sub_100097DC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = sub_100099DF8(a1, a2, a3);

  return v7;
}

unint64_t sub_100097E20()
{
  return 0xD000000000000014LL;
}

uint64_t sub_100097E3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = os_transaction_create("com.apple.driverkitd.kernel-requests");
  uint64_t v10 = sub_10006B854();
  uint64_t v3 = (void *)(v0 + 16);
  swift_beginAccess(v3, v9, 32LL, 0LL);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  sub_100005110(v3, v4);
  sub_100071818(v4, v5);
  swift_endAccess(v9);
  sub_10006B104(v8, (uint64_t)&type metadata for KernelRequests.GetRequests, (uint64_t)&off_100159868, (uint64_t)&v11);
  sub_100006034(v8);
  swift_bridgeObjectRelease(v10);
  uint64_t v6 = v11;
  sub_100098014(v11, v2);
  swift_bridgeObjectRelease(v6);
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_100098014(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = a2;
  uint64_t v101 = *v2;
  uint64_t v100 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v98 = (uint64_t *)((char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v97 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  Swift::String v95 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v106 = _swiftEmptyArrayStorage;
  uint64_t v6 = &unk_10010F000;
  *(void *)&__int128 v105 = *(void *)(a1 + 16);
  if ((void)v105)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = 0LL;
    __int128 v104 = xmmword_10010F440;
    *(void *)&__int128 v103 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
      swift_bridgeObjectRetain(v8);
      sub_10006B408(v9, &v115);
      swift_bridgeObjectRelease(v8);
      if (v116)
      {
        sub_100005158(&v115, (uint64_t)&aBlock);
        sub_100005158(&aBlock, (uint64_t)&v115);
        uint64_t v10 = (void *)v106;
        if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
        {
          uint64_t v10 = sub_100099B1C(0LL, v10[2] + 1LL, 1, v10, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)&__int128 v106 = v10;
        }

        unint64_t v12 = v10[2];
        unint64_t v11 = v10[3];
        if (v12 >= v11 >> 1) {
          *(void *)&__int128 v106 = sub_100099B1C( (void *)(v11 > 1),  v12 + 1,  1,  v10,  &qword_10015AD88,  (uint64_t *)&unk_10015AB30);
        }
        uint64_t v13 = v116;
        uint64_t v14 = v117;
        uint64_t v15 = sub_100005F48((uint64_t)&v115, v116);
        __chkstk_darwin(v15);
        uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v18 + 16))(v17);
        sub_100099C54( v12,  (uint64_t)v17,  (uint64_t *)&v106,  v13,  v14,  (uint64_t (*)(void *, uint64_t))sub_100005158);
        sub_100006034(&v115);
        uint64_t v6 = (_OWORD *)&unk_10010F000;
      }

      else
      {
        sub_100012824((uint64_t)&v115, &qword_10015AB28);
        uint64_t v6 = (_OWORD *)&unk_10010F000;
      }

      ++v7;
    }

    while ((void)v105 != v7);
    swift_bridgeObjectRelease(a1);
    uint64_t v19 = (void *)v106;
  }

  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  *(void *)&__int128 v104 = swift_allocObject(&unk_10014B3B8, 24LL, 7LL);
  *(void *)(v104 + 16) = _swiftEmptyArrayStorage;
  uint64_t v20 = v19[2];
  uint64_t v21 = v102;
  if (!v20)
  {
    uint64_t v77 = v19;
    goto LABEL_45;
  }

  Swift::String v93 = v19;
  uint64_t v22 = (uint64_t)(v19 + 4);
  __int128 v105 = v6[68];
  __int128 v103 = xmmword_10010F110;
  uint64_t v92 = (void *)0x8000000100128070LL;
  do
  {
    sub_100005F70(v22, (uint64_t)&aBlock);
    sub_100005F70((uint64_t)&aBlock, (uint64_t)&v115);
    uint64_t v24 = sub_100005FB4((uint64_t *)&unk_10015AB30);
    if (swift_dynamicCast(&v106, &v115, v24, &type metadata for KernelRequests.DextLaunch, 0LL))
    {
      uint64_t v25 = v106;
      uint64_t v26 = sub_100098F5C(v106);
      uint64_t v28 = v27;
      v114[0] = v21;
      sub_1000A2528(v25, v26, v27, v101, (uint64_t)&off_10014B468);
      swift_bridgeObjectRelease(v28);
      sub_100006034(&aBlock);
      swift_bridgeObjectRelease(v25);
      sub_100006034(&v115);
    }

    else
    {
      if (swift_dynamicCast(v114, &v115, v24, &type metadata for KernelRequests.RequestExit, 0LL))
      {
        uint64_t v42 = v114[0];
        uint64_t v43 = v104;
        unint64_t v44 = *(void **)(v104 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
        *(void *)(v43 + 16) = v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v44 = sub_100099B1C(0LL, v44[2] + 1LL, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        unint64_t v47 = v44[2];
        unint64_t v46 = v44[3];
        unint64_t v48 = v47 + 1;
        if (v47 >= v46 >> 1)
        {
          unint64_t v44 = sub_100099B1C((void *)(v46 > 1), v47 + 1, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        char v108 = &off_100148798;
        uint64_t v23 = &type metadata for KernelRequests.RequestExit;
        goto LABEL_16;
      }

      if (swift_dynamicCast(&v106, &v115, v24, &type metadata for KernelRequests.LoadNotification, 0LL))
      {
        uint64_t v49 = v106;
        v114[0] = v106;
        uint64_t v50 = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.LoadNotification, (uint64_t)&off_100148718);
        if (v51)
        {
          uint64_t v53 = v50;
          uint64_t v54 = v51;
          uint64_t v55 = sub_100080A3C();
          uint64_t v56 = *v55;
          uint64_t v57 = *(void (**)(uint64_t, uint64_t))(*(void *)*v55 + 104LL);
          swift_retain(*v55);
          v57(v53, v54);
          swift_bridgeObjectRelease(v54);
          swift_release(v56);
        }

        uint64_t v58 = static os_log_type_t.debug.getter(v52);
        uint64_t v59 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v60 = swift_allocObject(v59, 72LL, 7LL);
        *(_OWORD *)(v60 + 16) = v103;
        v114[0] = v49;
        uint64_t v61 = String.init<A>(describing:)(v114, &type metadata for KernelRequests.LoadNotification);
        uint64_t v63 = v62;
        *(void *)(v60 + 56) = &type metadata for String;
        *(void *)(v60 + 64) = sub_100026B64();
        *(void *)(v60 + 32) = v61;
        *(void *)(v60 + sub_10007CFB4(v0 + 40) = v63;
        uint64_t v64 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v65 = (void *)static OS_os_log.default.getter(v64);
        os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v65, "Ignoring load notification: %{public}s", 38LL, 2LL, v60);
        swift_bridgeObjectRelease(v60);

        goto LABEL_17;
      }

      if (swift_dynamicCast(v114, &v115, v24, &type metadata for KernelRequests.UnloadNotification, 0LL))
      {
        uint64_t v42 = v114[0];
        uint64_t v66 = v104;
        unint64_t v44 = *(void **)(v104 + 16);
        char v67 = swift_isUniquelyReferenced_nonNull_native(v44);
        *(void *)(v66 + 16) = v44;
        if ((v67 & 1) == 0)
        {
          unint64_t v44 = sub_100099B1C(0LL, v44[2] + 1LL, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        unint64_t v47 = v44[2];
        unint64_t v68 = v44[3];
        unint64_t v48 = v47 + 1;
        if (v47 >= v68 >> 1)
        {
          unint64_t v44 = sub_100099B1C((void *)(v68 > 1), v47 + 1, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        char v108 = &off_100148748;
        uint64_t v23 = &type metadata for KernelRequests.UnloadNotification;
LABEL_16:
        uint64_t v107 = v23;
        *(void *)&__int128 v106 = v42;
        void v44[2] = v48;
        sub_100005158(&v106, (uint64_t)&v44[5 * v47 + 4]);
LABEL_17:
        sub_100006034(&aBlock);
        sub_100006034(&v115);
        goto LABEL_18;
      }

      if (swift_dynamicCast( v114,  &v115,  v24,  &type metadata for KernelRequests.DextUpdateNotification,  0LL))
      {
        uint64_t v42 = v114[0];
        uint64_t v69 = v104;
        unint64_t v44 = *(void **)(v104 + 16);
        char v70 = swift_isUniquelyReferenced_nonNull_native(v44);
        *(void *)(v69 + 16) = v44;
        if ((v70 & 1) == 0)
        {
          unint64_t v44 = sub_100099B1C(0LL, v44[2] + 1LL, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        unint64_t v47 = v44[2];
        unint64_t v71 = v44[3];
        unint64_t v48 = v47 + 1;
        if (v47 >= v71 >> 1)
        {
          unint64_t v44 = sub_100099B1C((void *)(v71 > 1), v47 + 1, 1, v44, &qword_10015AD88, (uint64_t *)&unk_10015AB30);
          *(void *)(v104 + 16) = v44;
        }

        char v108 = &off_100148848;
        uint64_t v23 = &type metadata for KernelRequests.DextUpdateNotification;
        goto LABEL_16;
      }

      *(void *)&__int128 v106 = 0LL;
      *((void *)&v106 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(21LL);
      v72._uint64_t countAndFlagsBits = 0xD000000000000013LL;
      v72._object = v92;
      String.append(_:)(v72);
      _print_unlocked<A, B>(_:_:)( &aBlock,  &v106,  v24,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      __int128 v73 = v106;
      unint64_t v74 = sub_100012624();
      uint64_t v75 = swift_allocError(&type metadata for KMError, v74, 0LL, 0LL);
      *(_OWORD *)uint64_t v76 = v73;
      *(_OWORD *)(v76 + 16) = 0u;
      *(_OWORD *)(v76 + 32) = 0u;
      *(_OWORD *)(v76 + 48) = 0u;
      *(void *)(v76 + 64) = 0LL;
      *(_BYTE *)(v76 + 72) = 9;
      swift_willThrow(v75);
      uint64_t v29 = sub_100006034(&v115);
      uint64_t v30 = static os_log_type_t.error.getter(v29);
      uint64_t v31 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v32 = swift_allocObject(v31, 112LL, 7LL);
      *(_OWORD *)(v32 + 16) = v105;
      sub_100005F70((uint64_t)&aBlock, (uint64_t)&v115);
      uint64_t v33 = String.init<A>(describing:)(&v115, v24);
      uint64_t v35 = v34;
      *(void *)(v32 + 56) = &type metadata for String;
      unint64_t v36 = sub_100026B64();
      *(void *)(v32 + 64) = v36;
      *(void *)(v32 + 32) = v33;
      *(void *)(v32 + sub_10007CFB4(v0 + 40) = v35;
      *(void *)&__int128 v115 = v75;
      swift_errorRetain(v75);
      uint64_t v37 = sub_100005FB4(&qword_10015AB20);
      uint64_t v38 = String.init<A>(describing:)(&v115, v37);
      *(void *)(v32 + 96) = &type metadata for String;
      *(void *)(v32 + 104) = v36;
      *(void *)(v32 + 72) = v38;
      *(void *)(v32 + 80) = v39;
      uint64_t v40 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v41 = (void *)static OS_os_log.default.getter(v40);
      os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  v41,  "Error occurred while handling request %{public}s: %{public}s",  62LL,  2LL,  v32);
      swift_bridgeObjectRelease(v32);

      swift_errorRelease(v75);
      sub_100006034(&aBlock);
      uint64_t v21 = v102;
    }

uint64_t sub_100098CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  unint64_t v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23[-1] - v12;
  v23[0] = v4;
  (*(void (**)(void *))(v14 + 24))(v23);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15(v13, a1, a2);
  uint64_t v16 = (uint64_t *)(v4 + 56);
  swift_beginAccess(v4 + 56, v23, 1LL, 0LL);
  uint64_t v17 = *(void **)(v4 + 56);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(void *)(v4 + 56) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = sub_100099B1C(0LL, v17[2] + 1LL, 1, v17, &qword_10015AD78, &qword_10015AD80);
    *uint64_t v16 = (uint64_t)v17;
  }

  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1) {
    *uint64_t v16 = (uint64_t)sub_100099B1C((void *)(v19 > 1), v20 + 1, 1, v17, &qword_10015AD78, &qword_10015AD80);
  }
  v15(v11, (uint64_t)v13, a2);
  sub_100099C54( v20,  (uint64_t)v11,  v16,  a2,  *(void *)(a3 + 8),  (uint64_t (*)(void *, uint64_t))sub_100005158);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a2);
}

uint64_t sub_100098E3C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain(*(void *)(v0 + 56));
    do
    {
      sub_100005F70(v3, (uint64_t)v9);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      sub_100005110(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_100006034(v9);
      v3 += 40LL;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

  uint64_t v6 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for KernelStateManager();
  sub_1000CDE2C(0xD000000000000011LL, (char *)0x8000000100128100LL, v6, (uint64_t)&off_100145E70);
  uint64_t v7 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActivationStateManager();
  return sub_1000CDE2C(0xD000000000000014LL, (char *)0x8000000100128120LL, v7, (uint64_t)&off_10014B648);
}

uint64_t sub_100098F5C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for ApplicationRecord(0LL);
  __chkstk_darwin(v5);
  uint64_t v64 = (void *)((char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v71 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4(&qword_100157ED8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v63 - v13;
  v76[0] = a1;
  uint64_t v15 = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (!v16)
  {
    unint64_t v58 = sub_100012624();
    uint64_t v59 = swift_allocError(&type metadata for KMError, v58, 0LL, 0LL);
    *(void *)uint64_t v60 = 0xD00000000000002FLL;
    *(void *)(v60 + 8) = 0x8000000100128140LL;
    *(_OWORD *)(v60 + 16) = 0u;
    *(_OWORD *)(v60 + 32) = 0u;
    *(_OWORD *)(v60 + 48) = 0u;
    *(void *)(v60 + 64) = 0LL;
    *(_BYTE *)(v60 + 72) = 9;
    swift_willThrow(v59);
    return a1;
  }

  uint64_t v17 = v16;
  v63[1] = v2;
  uint64_t v18 = v15;
  uint64_t v19 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_10010F110;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_100026B64();
  uint64_t v66 = v18;
  *(void *)(v20 + 32) = v18;
  *(void *)(v20 + sub_10007CFB4(v0 + 40) = v17;
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v70 = v17;
  swift_bridgeObjectRetain(v17);
  uint64_t v22 = (void *)static OS_os_log.default.getter(v21);
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Figuring out dext launch context: %{public}s",  44LL,  2LL,  &_mh_execute_header,  v22,  v23,  v20);
  swift_bridgeObjectRelease(v20);

  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(v3 + 88) + 360LL))();
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v65 = v24 + 64;
  uint64_t v69 = v24;
  uint64_t v26 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t result = swift_bridgeObjectRelease(v27);
  int64_t v77 = 0LL;
  uint64_t v29 = -1LL;
  if (v26 < 64) {
    uint64_t v29 = ~(-1LL << v26);
  }
  unint64_t v30 = v29 & v25;
  uint64_t v31 = (void *)(v3 + 16);
  int64_t v67 = (unint64_t)(v26 + 63) >> 6;
  v63[0] = v67 - 1;
  while (1)
  {
    if (v30)
    {
      unint64_t v34 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      unint64_t v35 = v34 | (v77 << 6);
LABEL_9:
      uint64_t v36 = v69;
      uint64_t v37 = *(void *)(v69 + 48);
      uint64_t v38 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v38 - 8) + 16LL))( v12,  v37 + *(void *)(*(void *)(v38 - 8) + 72LL) * v35,  v38);
      uint64_t v39 = *(void *)(v36 + 56) + *(void *)(v68 + 72) * v35;
      uint64_t v40 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
      sub_100012734(v39, (uint64_t)&v12[*(int *)(v40 + 48)], type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v12, 0LL, 1LL, v40);
      goto LABEL_28;
    }

    int64_t v41 = v77 + 1;
    if (__OFADD__(v77, 1LL))
    {
      __break(1u);
      goto LABEL_42;
    }

    if (v41 < v67)
    {
      unint64_t v42 = *(void *)(v65 + 8 * v41);
      if (v42) {
        goto LABEL_13;
      }
      int64_t v43 = v77 + 2;
      ++v77;
      if (v41 + 1 < v67)
      {
        unint64_t v42 = *(void *)(v65 + 8 * v43);
        if (v42) {
          goto LABEL_16;
        }
        int64_t v77 = v41 + 1;
        if (v41 + 2 < v67)
        {
          unint64_t v42 = *(void *)(v65 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2LL;
            goto LABEL_13;
          }

          int64_t v43 = v41 + 3;
          int64_t v77 = v41 + 2;
          if (v41 + 3 < v67) {
            break;
          }
        }
      }
    }

unint64_t sub_1000996A4()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v39 = 0xD00000000000001ELL;
  unint64_t v40 = 0x80000001001281A0LL;
  static Date.now.getter(v3);
  uint64_t v6 = sub_100012860( (unint64_t *)&qword_10015ABD0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v9._uint64_t countAndFlagsBits = 10LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v0[9] + 304LL))();
  v38._object = v10;
  v11._uint64_t countAndFlagsBits = 10LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  uint64_t v12 = v38._object;
  String.append(_:)(v38);
  uint64_t v13 = swift_bridgeObjectRelease(v12);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[11] + 384LL))(v13);
  v38._object = v14;
  v15._uint64_t countAndFlagsBits = 10LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  uint64_t v16 = v38._object;
  String.append(_:)(v38);
  uint64_t v17 = swift_bridgeObjectRelease(v16);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[12] + 360LL))(v17);
  v38._object = v18;
  v19._uint64_t countAndFlagsBits = 10LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  uint64_t v20 = v38._object;
  String.append(_:)(v38);
  uint64_t v21 = swift_bridgeObjectRelease(v20);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[10] + 424LL))(v21);
  v38._object = v22;
  v23._uint64_t countAndFlagsBits = 10LL;
  v23._object = (void *)0xE100000000000000LL;
  String.append(_:)(v23);
  uint64_t v24 = v38._object;
  String.append(_:)(v38);
  uint64_t v25 = swift_bridgeObjectRelease(v24);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[13] + 352LL))(v25);
  v38._object = v26;
  v27._uint64_t countAndFlagsBits = 10LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  uint64_t v28 = v38._object;
  String.append(_:)(v38);
  uint64_t v29 = swift_bridgeObjectRelease(v28);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[14] + 200LL))(v29);
  v38._object = v30;
  v31._uint64_t countAndFlagsBits = 10LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  char v32 = v38._object;
  String.append(_:)(v38);
  uint64_t v33 = swift_bridgeObjectRelease(v32);
  v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[15] + 192LL))(v33);
  v38._object = v34;
  v35._uint64_t countAndFlagsBits = 10LL;
  v35._object = (void *)0xE100000000000000LL;
  String.append(_:)(v35);
  uint64_t v36 = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v36);
  return v39;
}

uint64_t sub_100099944()
{
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));
  swift_release(*(void *)(v0 + 112));
  swift_release(*(void *)(v0 + 120));
  return v0;
}

uint64_t sub_1000999A8()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t sub_1000999C8()
{
  return sub_100097E3C();
}

uint64_t sub_1000999E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16LL;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100005F70(v3, a1);
}

uint64_t sub_100099A34()
{
  return swift_retain(*(void *)(*(void *)(*(void *)v0 + 80LL) + 56LL));
}

id sub_100099A44()
{
  return *(id *)(*(void *)v0 + 64LL);
}

unint64_t sub_100099A50(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100099A80(a1, v3);
}

unint64_t sub_100099A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

void *sub_100099B1C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100005FB4(a5);
    uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    void v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[5 * v11 + 4]) {
      memmove(v14 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100005FB4(a6);
    swift_arrayInitWithCopy(v14 + 4);
  }

  swift_bridgeObjectRelease(a4);
  return v14;
}

uint64_t sub_100099C54( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t))
{
  v14[3] = a4;
  v14[4] = a5;
  uint64_t v11 = sub_100005F0C(v14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v11, a2, a4);
  uint64_t v12 = *a3;
  *(void *)(v12 + 16) = a1 + 1;
  return a6(v14, v12 + 40 * a1 + 32);
}

unint64_t sub_100099CD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4((uint64_t *)&unk_10015BB20);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = a1 + 32; ; i += 40LL)
    {
      sub_10001A148(i, (uint64_t)&v11, (uint64_t *)&unk_10015ADA0);
      uint64_t v5 = v11;
      unint64_t result = sub_100099A50(v11);
      if ((v7 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = (unint64_t)sub_100017790(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1LL);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t type metadata accessor for DriverKitDaemonSideEffects()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd26DriverKitDaemonSideEffects);
}

uint64_t *sub_100099DF8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v4[7] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100005F70(a1, (uint64_t)(v4 + 2));
  v4[8] = (uint64_t)a2;
  sub_1000263D8(a3, (uint64_t)v132, (uint64_t *)&unk_10015AD90);
  uint64_t v12 = sub_10009AD7C((uint64_t)v132);
  uint64_t v125 = (void *)a1;
  uint64_t v126 = v8;
  if ((_DWORD)v12 == 1)
  {
    __chkstk_darwin(v12);
    id v13 = a2;
    sub_1000BC9C4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/DriverKitDaemon.swift",  99LL,  2LL,  66LL,  a1,  0xD00000000000001BLL,  0x8000000100128480LL,  (void (*)(__n128))sub_10009AD94);
    __int128 v119 = v158;
    __int128 v120 = v157;
    uint64_t v117 = v160;
    uint64_t v118 = v159;
    uint64_t v115 = v162;
    uint64_t v116 = v161;
    uint64_t v113 = v164;
    uint64_t v114 = v163;
    uint64_t v111 = v166;
    uint64_t v112 = v165;
    __int128 v109 = v169;
    __int128 v110 = v168;
    uint64_t v107 = v170;
    uint64_t v108 = v167;
    uint64_t v105 = v172;
    uint64_t v106 = v171;
    uint64_t v103 = v174;
    uint64_t v104 = v173;
    uint64_t v101 = v176;
    uint64_t v102 = v175;
    uint64_t v14 = v177;
    uint64_t v15 = v178;
    uint64_t v127 = v179;
    uint64_t v16 = v180;
    uint64_t v17 = v181;
    __int128 v128 = v182;
    if (v178) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v18 = v14;
    uint64_t v22 = (uint64_t *)sub_1000DF6C8();
    uint64_t v23 = *v22;
    uint64_t v121 = v22[1];
    uint64_t v122 = v23;
    swift_bridgeObjectRetain(v121);
    uint64_t v19 = v15;
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  __int128 v119 = v132[1];
  __int128 v120 = v132[0];
  uint64_t v117 = v134;
  uint64_t v118 = v133;
  uint64_t v115 = v136;
  uint64_t v116 = v135;
  uint64_t v113 = v138;
  uint64_t v114 = v137;
  uint64_t v111 = v140;
  uint64_t v112 = v139;
  __int128 v109 = v143;
  __int128 v110 = v142;
  uint64_t v107 = v144;
  uint64_t v108 = v141;
  uint64_t v105 = v146;
  uint64_t v106 = v145;
  uint64_t v103 = v148;
  uint64_t v104 = v147;
  uint64_t v14 = v151;
  uint64_t v101 = v150;
  uint64_t v102 = v149;
  uint64_t v15 = v152;
  uint64_t v127 = v153;
  uint64_t v16 = v154;
  uint64_t v20 = v155;
  __int128 v128 = v156;
  id v21 = a2;
  uint64_t v17 = v20;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v18 = v14;
  uint64_t v121 = v15;
  uint64_t v122 = v14;
  uint64_t v19 = v15;
  if (v16)
  {
LABEL_4:
    uint64_t v123 = v16;
    uint64_t v124 = v127;
    goto LABEL_8;
  }

uint64_t sub_10009A698()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009A6BC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10009A6F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_beginAccess(v1 + 16, v67, 0LL, 0LL);
  uint64_t result = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 32;
    uint64_t v60 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain(result);
    char v61 = 0;
    uint64_t v5 = &type metadata for String;
    do
    {
      sub_100005F70(v4, (uint64_t)v66);
      sub_100005F70((uint64_t)v66, (uint64_t)v65);
      uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015AB30);
      if ((swift_dynamicCast(&v62, v65, v6, &type metadata for KernelRequests.RequestExit, 0LL) & 1) != 0)
      {
        sub_100006034(v66);
        swift_bridgeObjectRelease(v62);
        char v61 = 1;
      }

      else if (swift_dynamicCast( &v64,  v65,  v6,  &type metadata for KernelRequests.DextUpdateNotification,  0LL))
      {
        uint64_t v7 = v64;
        uint64_t v8 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
        *(_OWORD *)(v9 + 16) = xmmword_10010F440;
        uint64_t v10 = sub_10006CC7C(v7);
        if (!v11)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRelease(v7);
          __break(1u);
LABEL_28:
          uint64_t v53 = sub_1000D8050();
          if ((v53 & 1) != 0)
          {
            uint64_t v54 = static os_log_type_t.error.getter(v53);
            uint64_t v55 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
            uint64_t v56 = (void *)static OS_os_log.default.getter(v55);
            os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  v56,  "(NOT AN ERROR) Kernel requested shutdown. Goodbye!",  50LL,  2LL,  _swiftEmptyArrayStorage);
          }

          else
          {
            uint64_t v57 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
            uint64_t v56 = (void *)static OS_os_log.default.getter(v57);
            uint64_t v58 = static os_log_type_t.default.getter(v56);
            os_log(_:dso:log:type:_:)( "Kernel requested shutdown. Goodbye!",  35LL,  2LL,  &_mh_execute_header,  v56,  v58,  _swiftEmptyArrayStorage);
          }

          exit(0);
        }

        uint64_t v12 = v10;
        uint64_t v13 = v11;
        *(void *)(v9 + 56) = v5;
        unint64_t v14 = sub_100026B64();
        *(void *)(v9 + 64) = v14;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + sub_10007CFB4(v0 + 40) = v13;
        uint64_t v15 = sub_10006CC88(v7);
        if (v16 >> 60 == 15) {
          goto LABEL_26;
        }
        uint64_t v17 = v15;
        unint64_t v18 = v16;
        uint64_t v19 = sub_100013B60(v15, v16);
        uint64_t v21 = v20;
        sub_10002193C(v17, v18);
        uint64_t v22 = v5;
        *(void *)(v9 + 96) = v5;
        *(void *)(v9 + 104) = v14;
        *(void *)(v9 + 72) = v19;
        *(void *)(v9 + 80) = v21;
        uint64_t v23 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v24 = (void *)static OS_os_log.default.getter(v23);
        uint64_t v25 = static os_log_type_t.default.getter(v24);
        os_log(_:dso:log:type:_:)( "Received update notification for bundle ID %{public}s, unique ID %{public}s",  75LL,  2LL,  &_mh_execute_header,  v24,  v25,  v9);
        swift_bridgeObjectRelease(v9);

        unint64_t v62 = 0LL;
        unint64_t v63 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease(v63);
        unint64_t v62 = 0xD000000000000021LL;
        unint64_t v63 = 0x80000001001283E0LL;
        uint64_t v26 = sub_10006CC7C(v7);
        unint64_t v28 = v27;
        swift_bridgeObjectRelease(v7);
        if (v28) {
          uint64_t v29 = v26;
        }
        else {
          uint64_t v29 = 0x296C696E28LL;
        }
        if (!v28) {
          unint64_t v28 = 0xE500000000000000LL;
        }
        unint64_t v30 = v28;
        String.append(_:)(*(Swift::String *)&v29);
        swift_bridgeObjectRelease(v28);
        uint64_t v31 = v62;
        char v32 = (char *)v63;
        active = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
        sub_1000CDE2C(v31, v32, active, (uint64_t)&off_100146758);
        swift_bridgeObjectRelease(v32);
        sub_100006034(v66);
        uint64_t v5 = v22;
      }

      else
      {
        if (!swift_dynamicCast(&v64, v65, v6, &type metadata for KernelRequests.UnloadNotification, 0LL))
        {
          unint64_t v62 = 0LL;
          unint64_t v63 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(34LL);
          v59._uint64_t countAndFlagsBits = 0xD000000000000020LL;
          v59._object = (void *)0x8000000100128280LL;
          String.append(_:)(v59);
          _print_unlocked<A, B>(_:_:)( v66,  &v62,  v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v62,  v63,  "driverkitd/DriverKitDaemon.swift",  32LL,  2LL,  214LL,  0);
          __break(1u);
          return result;
        }

        uint64_t v7 = v64;
        uint64_t v34 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
        *(_OWORD *)(v35 + 16) = xmmword_10010F110;
        unint64_t v62 = v7;
        uint64_t v36 = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_100148768);
        if (!v37) {
          goto LABEL_27;
        }
        uint64_t v38 = v36;
        uint64_t v39 = v37;
        *(void *)(v35 + 56) = v5;
        *(void *)(v35 + 64) = sub_100026B64();
        *(void *)(v35 + 32) = v38;
        *(void *)(v35 + sub_10007CFB4(v0 + 40) = v39;
        uint64_t v40 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        id v41 = (void *)static OS_os_log.default.getter(v40);
        uint64_t v42 = static os_log_type_t.default.getter(v41);
        os_log(_:dso:log:type:_:)( "Received unload notification for bundle ID %{public}s",  53LL,  2LL,  &_mh_execute_header,  v41,  v42,  v35);
        swift_bridgeObjectRelease(v35);

        unint64_t v62 = 0LL;
        unint64_t v63 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease(v63);
        unint64_t v62 = 0xD000000000000021LL;
        unint64_t v63 = 0x80000001001282F0LL;
        uint64_t v43 = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_100148768);
        uint64_t v44 = v5;
        unint64_t v46 = v45;
        swift_bridgeObjectRelease(v7);
        if (v46) {
          uint64_t v47 = v43;
        }
        else {
          uint64_t v47 = 0x296C696E28LL;
        }
        if (!v46) {
          unint64_t v46 = 0xE500000000000000LL;
        }
        unint64_t v48 = v46;
        String.append(_:)(*(Swift::String *)&v47);
        swift_bridgeObjectRelease(v46);
        uint64_t v49 = v62;
        uint64_t v50 = (char *)v63;
        uint64_t v51 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
        sub_1000CDE2C(v49, v50, v51, (uint64_t)&off_100146758);
        uint64_t v52 = v50;
        uint64_t v5 = v44;
        swift_bridgeObjectRelease(v52);
        sub_100006034(v66);
      }

      sub_100006034(v65);
      v4 += 40LL;
      --v3;
    }

    while (v3);
    uint64_t result = swift_bridgeObjectRelease(v60);
    if ((v61 & 1) != 0) {
      goto LABEL_28;
    }
  }

  return result;
}

uint64_t sub_10009AD44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009AD54(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for DriverKitDaemon()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd15DriverKitDaemon);
}

uint64_t sub_10009AD7C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_10009AD94@<D0>(uint64_t a1@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v5;
    *(_OWORD *)(a1 + 224) = v25;
    *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = v26;
    __int128 v6 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v6;
    __int128 v7 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v7;
    __int128 v8 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v8;
    __int128 v9 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v9;
    __int128 v10 = v12[1];
    *(_OWORD *)a1 = v12[0];
    *(_OWORD *)(a1 + 16) = v10;
    double result = *(double *)&v13;
    __int128 v11 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v11;
  }

  return result;
}

uint64_t sub_10009AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 32))();
  if (result) {
    return sub_1000D528C(result);
  }
  return result;
}

uint64_t sub_10009AE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int128 v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(v8);
  if (v9) {
    uint64_t v10 = 0x6261747563657865LL;
  }
  else {
    uint64_t v10 = 0x7373656C65646F63LL;
  }
  if (v9) {
    unint64_t v11 = 0xEA0000000000656CLL;
  }
  else {
    unint64_t v11 = 0xE800000000000000LL;
  }
  uint64_t v32 = 0LL;
  unint64_t v33 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(v33);
  uint64_t v32 = v10;
  unint64_t v33 = v11;
  v12._uint64_t countAndFlagsBits = 32LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  unint64_t v15 = v14;
  v31[0] = v13;
  v31[1] = v14;
  unint64_t v16 = sub_10009C318();
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for PackageType,  v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  sub_10003783C(v13, v15);
  v19._uint64_t countAndFlagsBits = 0x20656C646E756220LL;
  v19._object = (void *)0xE800000000000000LL;
  String.append(_:)(v19);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v21)
  {
    unint64_t v22 = v21;
  }

  else
  {
    uint64_t v20 = 0x296C696E28LL;
    unint64_t v22 = 0xE500000000000000LL;
  }

  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v22);
  v24._uint64_t countAndFlagsBits = 544497952LL;
  v24._object = (void *)0xE400000000000000LL;
  String.append(_:)(v24);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  uint64_t v26 = URL.path.getter(v25);
  unint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  return v32;
}

void sub_10009B074()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [v1 _cfBundle];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = (void *)_CFBundleCopyInfoPlistURL();

    if (v8)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

      uint64_t v9 = Data.init(contentsOf:options:)(v5, 0LL);
      unint64_t v11 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_1000D1474(v9, v11);
      sub_10001226C(v9, v11);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_10009B1A0()
{
  id v1 = [v0 _cfBundle];
  if (v1)
  {
    id v2 = v1;
    id v3 = (id)_CFBundleCopyInfoPlistURL();

    if (v3)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10009B214(uint64_t a1, uint64_t a2)
{
  return sub_10009B22C(a1, a2, (SEL *)&selRef_infoDictionary);
}

uint64_t sub_10009B220(uint64_t a1, uint64_t a2)
{
  return sub_10009B22C(a1, a2, (SEL *)&selRef_localizedInfoDictionary);
}

uint64_t sub_10009B22C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v6;
}

void sub_10009B294()
{
}

uint64_t sub_10009B2B4(uint64_t a1, uint64_t a2)
{
  return sub_100013274(a1, a2, (SEL *)&selRef_executablePath);
}

void sub_10009B2C0()
{
  id v1 = [*v0 bundleURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v1);
}

void sub_10009B30C()
{
}

uint64_t sub_10009B32C@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 builtInPlugInsURL];
  if (v3)
  {
    id v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = type metadata accessor for URL(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for URL(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 1LL;
  }

  return v6(v7, v8, 1LL, v5);
}

uint64_t sub_10009B3B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10009B3D0(a1, a2, a3, a4);
}

uint64_t sub_10009B3D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = a4;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v6 = 0LL;
  if (a4) {
LABEL_3:
  }
    NSString v5 = String._bridgeToObjectiveC()();
LABEL_4:
  id v7 = [v4 pathForResource:v6 ofType:v5];

  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t sub_10009B47C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = a4;
  NSString v6 = *v4;
  if (!a2)
  {
    NSString v7 = 0LL;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  if (v5) {
LABEL_3:
  }
    NSString v5 = String._bridgeToObjectiveC()();
LABEL_4:
  id v8 = [v6 pathsForResourcesOfType:v7 inDirectory:v5];

  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String);
  return v9;
}

uint64_t sub_10009B51C@<X0>(uint64_t a1@<X8>)
{
  CFURLRef v3 = CFBundleCopyBuiltInPlugInsURL(*(CFBundleRef *)(v1 + 16));
  if (v3)
  {
    CFURLRef v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = type metadata accessor for URL(0LL);
    NSString v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for URL(0LL);
    NSString v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 1LL;
  }

  return v6(v7, v8, 1LL, v5);
}

uint64_t sub_10009B594(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(__CFBundle **)(v4 + 16);
  if (a2) {
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  }
  if (a4) {
    unint64_t v14 = (__CFString *)String._bridgeToObjectiveC()();
  }
  else {
    unint64_t v14 = 0LL;
  }
  CFURLRef v15 = CFBundleCopyResourceURL(v13, a2, v14, 0LL);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v16 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v10, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v16 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v10, 1LL, 1LL, v16);
  }

  sub_10009C444((uint64_t)v10, (uint64_t)v12);
  type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1LL, v16);
  if ((_DWORD)v18 == 1)
  {

    sub_100012824((uint64_t)v12, (uint64_t *)&unk_10015BA30);
    return 0LL;
  }

  else
  {
    uint64_t v19 = URL.path.getter(v18);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }

  return v19;
}

void *sub_10009B758(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v35 - v13;
  (*(void (**)(uint64_t))(*(void *)v4 + 168LL))(v12);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v8 + 8);
  v37(v14, v7);
  if (a2) {
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  }
  if (a4) {
    uint64_t v18 = (__CFString *)String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v18 = 0LL;
  }
  CFArrayRef v19 = CFBundleCopyResourceURLsOfTypeInDirectory(v17, a2, v18);

  if (!v19) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v38 = 0LL;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v19, &v38, v7);

  uint64_t v20 = v38;
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (v38)
  {
    int64_t v22 = v38[2];
    if (v22)
    {
      uint64_t v38 = _swiftEmptyArrayStorage;
      sub_10000CC84(0, v22, 0);
      unint64_t v23 = (char *)v20 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v24 = *(void *)(v8 + 72);
      uint64_t v35 = v20;
      uint64_t v36 = v24;
      uint64_t v25 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
      do
      {
        uint64_t v26 = v25(v11, v23, v7);
        uint64_t v27 = URL.path.getter(v26);
        uint64_t v29 = v28;
        v37(v11, v7);
        uint64_t v21 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        {
          sub_10000CC84(0, v21[2] + 1LL, 1);
          uint64_t v21 = v38;
        }

        unint64_t v31 = v21[2];
        unint64_t v30 = v21[3];
        if (v31 >= v30 >> 1)
        {
          sub_10000CC84(v30 > 1, v31 + 1, 1);
          uint64_t v21 = v38;
        }

        v21[2] = v31 + 1;
        uint64_t v32 = &v21[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
        v23 += v36;
        --v22;
      }

      while (v22);
      unint64_t v33 = v35;
    }

    else
    {
      unint64_t v33 = v38;
    }

    swift_bridgeObjectRelease(v33);
  }

  return v21;
}

CFStringRef sub_10009B9B0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
  if (!v1)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_12;
  }

  uint64_t v2 = v1;
  CFStringRef result = kCFBundleIdentifierKey;
  if (!kCFBundleIdentifierKey)
  {
    __break(1u);
    return result;
  }

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleIdentifierKey);
  uint64_t v6 = v5;
  if (!*(void *)(v2 + 16) || (unint64_t v7 = sub_100006114(v4, v5), (v8 & 1) == 0))
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v2);
    goto LABEL_12;
  }

  sub_100006054(*(void *)(v2 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  if (!*((void *)&v11 + 1))
  {
LABEL_12:
    sub_100012824((uint64_t)&v10, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

id sub_10009BAB0()
{
  return sub_10009BAC8((uint64_t (*)(void))&CFBundleGetInfoDictionary);
}

id sub_10009BABC()
{
  return sub_10009BAC8((uint64_t (*)(void))&CFBundleGetLocalInfoDictionary);
}

id sub_10009BAC8(uint64_t (*a1)(void))
{
  id result = (id)a1(*(void *)(v1 + 16));
  if (result)
  {
    CFURLRef v3 = result;
    uint64_t v4 = 0LL;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( result,  &v4,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    return (id)v4;
  }

  return result;
}

uint64_t sub_10009BB34()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)v0 + 152LL))();
  uint64_t v6 = Data.init(contentsOf:options:)(v4, 0LL);
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v9 = sub_1000D1474(v6, v8);
  sub_10001226C(v6, v8);
  objc_autoreleasePoolPop(v5);
  return v9;
}

void sub_10009BC3C()
{
}

uint64_t sub_10009BC48()
{
  uint64_t v1 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - v5;
  CFURLRef v7 = CFBundleCopyExecutableURL(*(CFBundleRef *)(v0 + 16));
  if (v7)
  {
    CFURLRef v8 = v7;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);

    uint64_t v9 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 0LL, 1LL, v9);
  }

  else
  {
    uint64_t v9 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 1LL, 1LL, v9);
  }

  sub_10009C444((uint64_t)v4, (uint64_t)v6);
  type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1LL, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100012824((uint64_t)v6, (uint64_t *)&unk_10015BA30);
    return 0LL;
  }

  else
  {
    uint64_t v12 = URL.path.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  }

  return v12;
}

void sub_10009BDA0()
{
}

void sub_10009BDAC(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(*(void *)(v1 + 16));
  if (v2)
  {
    id v3 = (id)v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10009BDF4()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_10009BE18()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t sub_10009BE40()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))();
}

uint64_t sub_10009BE68()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160LL))();
}

uint64_t sub_10009BE90()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t sub_10009BEB8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

uint64_t sub_10009BEE0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t sub_10009BF08(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001140E8, a1);
  return sub_10009AE58(a1, WitnessTable);
}

double sub_10009BF3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  uint64_t v8 = sub_10009C35C((uint64_t)v6);
  if (v8)
  {
    uint64_t v9 = v8;
    *(void *)(a2 + 24) = type metadata accessor for UncachedBundle();
    *(void *)(a2 + 32) = sub_10009C544( &qword_10015ADB8,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle,  (uint64_t)&unk_1001140E8);
    *(void *)a2 = v9;
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

double sub_10009BFFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a2);
  URL.init(fileURLWithPath:)(a1, a2);
  swift_bridgeObjectRelease(a2);
  uint64_t v9 = sub_10009C35C((uint64_t)v8);
  if (v9)
  {
    uint64_t v10 = v9;
    *(void *)(a3 + 24) = type metadata accessor for UncachedBundle();
    *(void *)(a3 + 32) = sub_10009C544( &qword_10015ADB8,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle,  (uint64_t)&unk_1001140E8);
    *(void *)a3 = v10;
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

double sub_10009C0CC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  id v5 = [(id)objc_opt_self(NSBundle) bundleWithIdentifier:v4];

  if (v5)
  {
    *(void *)(a2 + 24) = sub_10009C48C();
    *(void *)(a2 + 32) = sub_10009C544( &qword_10015ADC8,  255LL,  (uint64_t (*)(uint64_t))sub_10009C48C,  (uint64_t)&unk_1001140CC);
    *(void *)a2 = v5;
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10009C18C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t sub_10009C1B4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t sub_10009C1DC(uint64_t a1, uint64_t a2)
{
  return sub_10009C1E8(a1, a2, (uint64_t)&off_10014B598);
}

uint64_t sub_10009C1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10009C260(v10, v7, v8);
}

uint64_t sub_10009C260(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015ADD0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10009C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015ADD0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

unint64_t sub_10009C318()
{
  unint64_t result = qword_10015ADB0;
  if (!qword_10015ADB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A428, &type metadata for PackageType);
    atomic_store(result, (unint64_t *)&qword_10015ADB0);
  }

  return result;
}

uint64_t sub_10009C35C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UncachedBundle();
  uint64_t v3 = swift_allocObject(v2, 24LL, 7LL);
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  Unique = (void *)_CFBundleCreateUnique(0LL, v5);

  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  if (Unique)
  {
    id v10 = Unique;
    v9(a1, v8);

    *(void *)(v3 + 16) = v10;
  }

  else
  {
    v9(a1, v8);
    swift_deallocPartialClassInstance(v3, v2, 24LL, 7LL);
    return 0LL;
  }

  return v3;
}

uint64_t type metadata accessor for UncachedBundle()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd14UncachedBundle);
}

uint64_t sub_10009C444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009C48C()
{
  unint64_t result = qword_10015ADC0;
  if (!qword_10015ADC0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSBundle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015ADC0);
  }

  return result;
}

uint64_t sub_10009C4C8(uint64_t a1)
{
  uint64_t result = sub_10009C544( &qword_10015ADD8,  255LL,  (uint64_t (*)(uint64_t))sub_10009C48C,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009C508(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10009C544( &qword_10015ADE0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle,  (uint64_t)&unk_100114104);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009C544(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for RealBundleResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18RealBundleResolver);
}

void type metadata accessor for CFBundle()
{
  if (!qword_10015AF88)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10014B5E0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015AF88);
    }
  }

uint64_t sub_10009C5F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v4;
  uint64_t v112 = a2;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v110 = v3;
  uint64_t v111 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(uint64_t **)(a1 + 24);
  int v12 = *(_DWORD *)(v3 + 640);
  LODWORD(v113[0]) = *sub_1000A49D4();
  LODWORD(v117) = v12;
  unint64_t v13 = sub_100012B34();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v113, &type metadata for ExtensionManager.Settings.Flags, v13) & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v14 = type metadata accessor for DriverExtension(0LL);
      if (!swift_dynamicCastClass(v11, v14))
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*v11 + 144))();
        uint64_t v17 = v16;
        uint64_t v18 = sub_100026E58();
        uint64_t v19 = v18[1];
        if (v15 == *v18 && v17 == v19)
        {
          swift_bridgeObjectRelease(v17);
        }

        else
        {
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, *v18, v19, 0LL);
          swift_bridgeObjectRelease(v17);
          if ((v21 & 1) == 0)
          {
            uint64_t v22 = type metadata accessor for KernelExtension(0LL);
            if (!swift_dynamicCastClass(v11, v22)
              || ((*(uint64_t (**)(void))(*v11 + 216))() & 1) == 0
              || ((*(uint64_t (**)(void))(*v11 + 136))() & 1) == 0)
            {
              if (!swift_dynamicCastClass(v11, v22)) {
                goto LABEL_54;
              }
              sub_10003A50C(v11 + 3, (uint64_t)v113);
              if (v116 != 2)
              {
                sub_10003A584(v113);
                goto LABEL_54;
              }

              if (LOBYTE(v113[0]) == 4
                || (LOBYTE(v117) = 2,
                    unint64_t v23 = sub_1000265DC(),
                    (dispatch thunk of static Equatable.== infix(_:_:)( v113,  &v117,  &type metadata for CollectionKind,  v23) & 1) != 0))
              {
LABEL_54:
                if (swift_dynamicCastClass(v11, v22))
                {
                  uint64_t v86 = (*(uint64_t (**)(void))(*v11 + 216))();
                  char v87 = v86;
                  uint64_t v88 = static os_log_type_t.error.getter(v86);
                  uint64_t v89 = sub_100005FB4((uint64_t *)&unk_1001596B0);
                  uint64_t v90 = swift_allocObject(v89, 72LL, 7LL);
                  *(_OWORD *)(v90 + 16) = xmmword_10010F110;
                  uint64_t v91 = (*(uint64_t (**)(void))(*v11 + 200))();
                  uint64_t v93 = v92;
                  *(void *)(v90 + 56) = &type metadata for String;
                  *(void *)(v90 + 64) = sub_100026B64();
                  *(void *)(v90 + 32) = v91;
                  *(void *)(v90 + sub_10007CFB4(v0 + 40) = v93;
                  unint64_t v94 = sub_100026BA8();
                  uint64_t v95 = (void *)static OS_os_log.default.getter(v94);
                  if ((v87 & 1) != 0) {
                    os_log(_:dso:log:_:_:)( v88,  &_mh_execute_header,  v95,  "error: tried to insert an invalid codeless kext in restricted lookup table: %{public}s",  86LL,  2LL,  v90);
                  }
                  else {
                    os_log(_:dso:log:_:_:)( v88,  &_mh_execute_header,  v95,  "error: tried to insert an invalid codeful kernel extension in the restricted lookup table: %{public}s",  101LL,  2LL,  v90);
                  }
                }

                else
                {
                  uint64_t v96 = static os_log_type_t.error.getter(0LL);
                  uint64_t v97 = sub_100005FB4((uint64_t *)&unk_1001596B0);
                  uint64_t v90 = swift_allocObject(v97, 72LL, 7LL);
                  *(_OWORD *)(v90 + 16) = xmmword_10010F110;
                  uint64_t v98 = (*(uint64_t (**)(void))(*v11 + 200))();
                  uint64_t v100 = v99;
                  *(void *)(v90 + 56) = &type metadata for String;
                  *(void *)(v90 + 64) = sub_100026B64();
                  *(void *)(v90 + 32) = v98;
                  *(void *)(v90 + sub_10007CFB4(v0 + 40) = v100;
                  unint64_t v101 = sub_100026BA8();
                  uint64_t v95 = (void *)static OS_os_log.default.getter(v101);
                  os_log(_:dso:log:_:_:)( v96,  &_mh_execute_header,  v95,  "error: tried to insert an invalid ext in restricted lookup table: %{public}s",  76LL,  2LL,  v90);
                }

                swift_bridgeObjectRelease(v90);

                v113[0] = 0LL;
                v113[1] = 0xE000000000000000LL;
                _StringGuts.grow(_:)(47LL);
                swift_bridgeObjectRelease(v113[1]);
                strcpy((char *)v113, "Cannot insert ");
                HIBYTE(v113[1]) = -18;
                uint64_t v117 = v11;
                uint64_t v102 = type metadata accessor for OSExtension(0LL);
                uint64_t v103 = sub_100012860( (unint64_t *)&qword_100157C70,  type metadata accessor for OSExtension,  (uint64_t)&unk_10011B528);
                v104._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v102, v103);
                object = v104._object;
                String.append(_:)(v104);
                swift_bridgeObjectRelease(object);
                v106._object = (void *)0x8000000100128590LL;
                v106._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
                String.append(_:)(v106);
                uint64_t v107 = v113[0];
                unint64_t v84 = v113[1];
                unint64_t v108 = sub_100012624();
                uint64_t v82 = swift_allocError(&type metadata for KMError, v108, 0LL, 0LL);
                *(void *)uint64_t v83 = v107;
                char v85 = 68;
                goto LABEL_60;
              }
            }
          }
        }
      }
    }

    uint64_t v24 = type metadata accessor for DriverExtension(0LL);
    uint64_t v25 = swift_dynamicCastClass(v11, v24);
    if (v25)
    {
      uint64_t v26 = static os_log_type_t.info.getter(v25);
      uint64_t v109 = v9;
      uint64_t v27 = v26;
      uint64_t v28 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
      *(_OWORD *)(v29 + 16) = xmmword_10010F110;
      uint64_t v30 = (*(uint64_t (**)(void))(*v11 + 200))();
      uint64_t v32 = v31;
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = sub_100026B64();
      *(void *)(v29 + 32) = v30;
      *(void *)(v29 + sub_10007CFB4(v0 + 40) = v32;
      unint64_t v33 = sub_100026BA8();
      uint64_t v34 = (void *)static OS_os_log.default.getter(v33);
      uint64_t v35 = v27;
      uint64_t v5 = v4;
      uint64_t v9 = v109;
      os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v34,  "trying to insert a dext in KernelManagerDaemonLoadableExtTable: %{public}s",  74LL,  2LL,  v29);
    }

    else
    {
      uint64_t v109 = v4;
      uint64_t v36 = type metadata accessor for KernelExtension(0LL);
      if (swift_dynamicCastClass(v11, v36))
      {
        char v37 = (*(uint64_t (**)(void))(*v11 + 216))();
        uint64_t v38 = static os_log_type_t.debug.getter();
        uint64_t v39 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v29 = swift_allocObject(v39, 72LL, 7LL);
        *(_OWORD *)(v29 + 16) = xmmword_10010F110;
        uint64_t v40 = (*(uint64_t (**)(void))(*v11 + 200))();
        uint64_t v42 = v41;
        *(void *)(v29 + 56) = &type metadata for String;
        *(void *)(v29 + 64) = sub_100026B64();
        *(void *)(v29 + 32) = v40;
        *(void *)(v29 + sub_10007CFB4(v0 + 40) = v42;
        unint64_t v43 = sub_100026BA8();
        uint64_t v34 = (void *)static OS_os_log.default.getter(v43);
        if ((v37 & 1) != 0) {
          os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  v34,  "inserting a valid codeless kext in restricted lookup table: %{public}s",  70LL,  2LL,  v29);
        }
        else {
          os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  v34,  "inserting a valid codeful kernel extension in restricted lookup table: %{public}s",  81LL,  2LL,  v29);
        }
      }

      else
      {
        uint64_t v44 = static os_log_type_t.debug.getter();
        uint64_t v45 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v29 = swift_allocObject(v45, 72LL, 7LL);
        *(_OWORD *)(v29 + 16) = xmmword_10010F110;
        uint64_t v46 = (*(uint64_t (**)(void))(*v11 + 200))();
        uint64_t v48 = v47;
        *(void *)(v29 + 56) = &type metadata for String;
        *(void *)(v29 + 64) = sub_100026B64();
        *(void *)(v29 + 32) = v46;
        *(void *)(v29 + sub_10007CFB4(v0 + 40) = v48;
        unint64_t v49 = sub_100026BA8();
        uint64_t v34 = (void *)static OS_os_log.default.getter(v49);
        os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  v34,  "inserting to insert an unknown but valid extension into restricted lookup table: %{public}s",  91LL,  2LL,  v29);
      }

      uint64_t v5 = v109;
    }

    swift_bridgeObjectRelease(v29);
  }

  uint64_t v50 = (*(uint64_t (**)(void))(*v11 + 144))();
  uint64_t v52 = v51;
  uint64_t v53 = sub_100026E58();
  uint64_t v54 = v53[1];
  if (v50 == *v53 && v52 == v54)
  {
    uint64_t v57 = swift_bridgeObjectRelease(v52);
  }

  else
  {
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, *v53, v54, 0LL);
    uint64_t v57 = swift_bridgeObjectRelease(v52);
    if ((v56 & 1) == 0) {
      return sub_100052500(a1);
    }
  }

  (*(void (**)(void *__return_ptr, uint64_t))(*v11 + 112))(v113, v57);
  uint64_t v58 = v114;
  if (!v114)
  {
    sub_100012824((uint64_t)v113, &qword_100157C58);
    sub_100026E64();
    return sub_100052500(a1);
  }

  uint64_t v59 = v115;
  sub_100005110(v113, v114);
  uint64_t v60 = v111;
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 64))(v58, v59);
  uint64_t v62 = URL.path.getter(v61);
  uint64_t v64 = v63;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v60, v8);
  sub_100006034(v113);
  uint64_t v65 = sub_100026E64();
  if (!v64) {
    return sub_100052500(a1);
  }
  uint64_t v66 = v65[1];
  if (v62 == *v65 && v64 == v66)
  {
    uint64_t v67 = swift_bridgeObjectRelease(v64);
  }

  else
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, *v65, v66, 0LL);
    uint64_t v67 = swift_bridgeObjectRelease(v64);
    if ((v68 & 1) == 0) {
      return sub_100052500(a1);
    }
  }

  uint64_t v69 = (*(uint64_t (**)(uint64_t))(*v11 + 192))(v67);
  uint64_t v70 = (*(uint64_t (**)(void))(*(void *)v110 + 168LL))();
  sub_10009CEF4(v70);
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  uint64_t v75 = swift_bridgeObjectRelease(v70);
  if (!v72)
  {
    if (v69 >= 1) {
      goto LABEL_46;
    }
    return sub_100052500(a1);
  }

  uint64_t v75 = swift_bridgeObjectRelease(v72);
  if (v74 >= v69) {
    return sub_100052500(a1);
  }
LABEL_46:
  uint64_t v77 = type metadata accessor for KernelExtension(0LL);
  uint64_t v78 = swift_dynamicCastClass(v11, v77);
  if (!v78)
  {
    unint64_t v81 = sub_100012624();
    uint64_t v82 = swift_allocError(&type metadata for KMError, v81, 0LL, 0LL);
    *(void *)uint64_t v83 = 0xD00000000000003ELL;
    unint64_t v84 = 0x8000000100128500LL;
    char v85 = 44;
LABEL_60:
    *(void *)(v83 + 8) = v84;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(_OWORD *)(v83 + 48) = 0u;
    *(void *)(v83 + 64) = 0LL;
    *(_BYTE *)(v83 + 72) = v85;
    return swift_willThrow(v82);
  }

  uint64_t v79 = v78;
  swift_retain(v11);
  uint64_t v80 = sub_10009CF84(v79, v112);
  uint64_t result = swift_release(v11);
  if (!v5)
  {
    swift_bridgeObjectRelease(v80);
    return sub_100052500(a1);
  }

  return result;
}

uint64_t sub_10009CEF4(uint64_t a1)
{
  uint64_t result = sub_100010D14(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v5 = sub_1000A0E44(result, v3, 0LL, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_10009CF84(uint64_t a1, uint64_t a2)
{
  char v4 = v2;
  uint64_t v7 = static os_log_type_t.info.getter(a1);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_10010F110;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a1 + 200LL))();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_100026B64();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + sub_10007CFB4(v0 + 40) = v12;
  unint64_t v13 = sub_100026BA8();
  uint64_t v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v14, "Reading exclude list from %{public}s", 36LL, 2LL, v9);
  swift_bridgeObjectRelease(v9);

  uint64_t v15 = sub_100026E70();
  swift_retain(a1);
  uint64_t v16 = sub_1000A0EA4((uint64_t)v15, a1);
  swift_bridgeObjectRelease(v15);
  uint64_t result = swift_release(a1);
  if (v3) {
    return result;
  }
  char v85 = v4;
  uint64_t v18 = v16[2];
  if (v18)
  {
    sub_100005FB4(&qword_10015AF90);
    uint64_t v19 = (void *)static _DictionaryStorage.allocate(capacity:)(v18);
  }

  else
  {
    uint64_t v19 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v20 = v4;
  v89[0] = (uint64_t)v19;
  uint64_t v21 = swift_bridgeObjectRetain(v16);
  sub_10009EE00(v21, 1, v89);
  uint64_t v80 = v8;
  swift_bridgeObjectRelease(v16);
  uint64_t v22 = *(void (**)(void))(*v4 + 176LL);
  uint64_t v81 = swift_retain(v89[0]);
  v22();
  uint64_t v92 = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v23 = *(void *)(a2 + 24);
  if ((v23 & 0xC000000000000001LL) != 0)
  {
    if (v23 < 0) {
      uint64_t v24 = *(void *)(a2 + 24);
    }
    else {
      uint64_t v24 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v84 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    unint64_t v27 = __CocoaDictionary.makeIterator()(v24) | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v28 = -1LL << *(_BYTE *)(v23 + 32);
    uint64_t v25 = ~v28;
    uint64_t v84 = v23 + 64;
    uint64_t v29 = -v28;
    if (v29 < 64) {
      uint64_t v30 = ~(-1LL << v29);
    }
    else {
      uint64_t v30 = -1LL;
    }
    unint64_t v26 = v30 & *(void *)(v23 + 64);
    unint64_t v27 = *(void *)(a2 + 24);
  }

  uint64_t v31 = swift_bridgeObjectRetain(v23);
  uint64_t v32 = 0LL;
  int64_t v83 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v82 = (char *)&type metadata for Swift.AnyObject + 8;
  while ((v27 & 0x8000000000000000LL) != 0)
  {
    uint64_t v37 = __CocoaDictionary.Iterator.next()(v31);
    if (!v37)
    {
      uint64_t v20 = v85;
      goto LABEL_44;
    }

    uint64_t v39 = v37;
    uint64_t v40 = v38;
    uint64_t v88 = v37;
    uint64_t v41 = type metadata accessor for OSExtension(0LL);
    swift_unknownObjectRetain(v39);
    swift_dynamicCast(v89, &v88, v82, v41, 7LL);
    uint64_t v42 = v89[0];
    swift_unknownObjectRelease(v39);
    uint64_t v88 = v40;
    uint64_t v25 = type metadata accessor for RealizedInfo(0LL);
    swift_unknownObjectRetain(v40);
    swift_dynamicCast(v89, &v88, v82, v25, 7LL);
    uint64_t v43 = v89[0];
    swift_unknownObjectRelease(v40);
    uint64_t v36 = v32;
    uint64_t v34 = v26;
    uint64_t v20 = v85;
    if (!v42) {
      goto LABEL_44;
    }
LABEL_38:
    swift_release(v42);
    uint64_t v88 = v43;
    BOOL v48 = sub_10008E56C(&v88);
    uint64_t v49 = v88;
    if (!v48) {
      goto LABEL_15;
    }
    uint64_t v25 = *(void *)(*(void *)v88 + 168LL);
    uint64_t v50 = swift_retain(v88);
    uint64_t v51 = ((uint64_t (*)(uint64_t))v25)(v50);
    swift_release(v49);
    uint64_t v52 = sub_100005FB4(&qword_100158BE8);
    uint64_t v53 = swift_allocObject(v52, 48LL, 7LL);
    *(_OWORD *)(v53 + 16) = xmmword_10010F440;
    *(void *)(v53 + 32) = *sub_10002C2F8();
    *(void *)(v53 + sub_10007CFB4(v0 + 40) = *sub_10002C4A8();
    uint64_t v87 = v53;
    unint64_t v54 = sub_100039F14();
    uint64_t v55 = sub_100005FB4(&qword_10015A7F8);
    unint64_t v56 = sub_1000899A8();
    dispatch thunk of SetAlgebra.init<A>(_:)(v89, &v87, v55, v56, &type metadata for RealizedInfo.Flags, v54);
    v86[1] = v51;
    uint64_t v87 = v89[0];
    uint64_t v20 = v85;
    sub_100039ECC();
    dispatch thunk of RawRepresentable.rawValue.getter(v86, &type metadata for RealizedInfo.Flags);
    unint64_t v57 = sub_100039E40();
    dispatch thunk of OptionSet.init(rawValue:)(v86, &type metadata for RealizedInfo.Flags, v57);
    dispatch thunk of SetAlgebra.formIntersection(_:)(&v87, &type metadata for RealizedInfo.Flags, v54);
    dispatch thunk of SetAlgebra.init()(&v87, &type metadata for RealizedInfo.Flags, v54);
    unint64_t v58 = sub_100039F5C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v89, &v87, &type metadata for RealizedInfo.Flags, v58) & 1) != 0) {
      goto LABEL_15;
    }
    uint64_t v59 = *(void *)(v49 + 24);
    uint64_t v25 = *(void *)(*(void *)v59 + 112LL);
    uint64_t v60 = swift_retain(v59);
    ((void (*)(uint64_t *__return_ptr, uint64_t))v25)(v89, v60);
    swift_release(v59);
    uint64_t v61 = v90;
    sub_100012824((uint64_t)v89, &qword_100157C58);
    if (v61)
    {
      uint64_t v25 = *(void *)(v49 + 24);
      swift_retain(v25);
      sub_10009F180(v89, v25);
      uint64_t v62 = v89[0];
      swift_release(v49);
      uint64_t v33 = v62;
    }

    else
    {
LABEL_15:
      uint64_t v33 = v49;
    }

    uint64_t v31 = swift_release(v33);
    uint64_t v32 = v36;
    unint64_t v26 = v34;
  }

  if (v26)
  {
    uint64_t v34 = (v26 - 1) & v26;
    unint64_t v35 = __clz(__rbit64(v26)) | (v32 << 6);
    uint64_t v36 = v32;
    goto LABEL_37;
  }

  int64_t v44 = v32 + 1;
  if (__OFADD__(v32, 1LL))
  {
    __break(1u);
    uint64_t result = swift_unexpectedError(v25, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
    __break(1u);
    return result;
  }

  if (v44 >= v83) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v84 + 8 * v44);
  uint64_t v36 = v32 + 1;
  if (v45) {
    goto LABEL_36;
  }
  uint64_t v36 = v32 + 2;
  if (v32 + 2 >= v83) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v84 + 8 * v36);
  if (v45) {
    goto LABEL_36;
  }
  uint64_t v36 = v32 + 3;
  if (v32 + 3 >= v83) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v84 + 8 * v36);
  if (v45) {
    goto LABEL_36;
  }
  uint64_t v36 = v32 + 4;
  if (v32 + 4 >= v83) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v84 + 8 * v36);
  if (v45)
  {
LABEL_36:
    uint64_t v34 = (v45 - 1) & v45;
    unint64_t v35 = __clz(__rbit64(v45)) + (v36 << 6);
LABEL_37:
    uint64_t v47 = 8 * v35;
    uint64_t v42 = *(void *)(*(void *)(v27 + 48) + v47);
    uint64_t v43 = *(void *)(*(void *)(v27 + 56) + v47);
    swift_retain(v42);
    swift_retain(v43);
    if (!v42) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }

  uint64_t v46 = v32 + 5;
  while (v83 != v46)
  {
    unint64_t v45 = *(void *)(v84 + 8 * v46++);
    if (v45)
    {
      uint64_t v36 = v46 - 1;
      goto LABEL_36;
    }
  }

uint64_t sub_10009D754(uint64_t a1, uint64_t a2)
{
  char v4 = v2;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  __int128 v45 = *(_OWORD *)a2;
  __int128 v46 = v7;
  __int128 v47 = *(_OWORD *)(a2 + 32);
  uint64_t v48 = *(void *)(a2 + 48);
  uint64_t v8 = (void *)*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  uint64_t v9 = sub_100051FA0(v8);
  swift_release(v9);
  if (v9)
  {
    unint64_t v10 = sub_100012624();
    uint64_t v11 = swift_allocError(&type metadata for KMError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 0xD00000000000003BLL;
    *(void *)(v12 + 8) = 0x8000000100128860LL;
LABEL_5:
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(void *)(v12 + 64) = 0LL;
    *(_BYTE *)(v12 + 72) = 9;
    return swift_willThrow(v11);
  }

  uint64_t v13 = *(void *)a2;
  swift_retain(a1);
  swift_bridgeObjectRetain(v13);
  char v15 = sub_1000A0FC0(v14, a1);
  swift_bridgeObjectRelease(v13);
  swift_release(a1);
  if ((v15 & 1) != 0)
  {
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v16 = type metadata accessor for URL(0LL);
    uint64_t v17 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    v20._object = (void *)0x80000001001288C0LL;
    String.append(_:)(v20);
    unint64_t v21 = sub_100012624();
    uint64_t v11 = swift_allocError(&type metadata for KMError, v21, 0LL, 0LL);
    *(void *)uint64_t v12 = 0xD000000000000016LL;
    *(void *)(v12 + 8) = 0x80000001001288A0LL;
    goto LABEL_5;
  }

  uint64_t result = sub_1000330FC(a1);
  if (!v3)
  {
    uint64_t v23 = result;
    uint64_t v24 = sub_100097334(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path);
    int v25 = v4[160];
    LODWORD(v43) = *(_DWORD *)sub_1000A4824();
    LODWORD(v44[0]) = v25;
    unint64_t v26 = sub_100012B34();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v43, &type metadata for ExtensionManager.Settings.Flags, v26) & 1) == 0) {
      __asm { BR              X9 }
    }

    uint64_t v27 = swift_retain(v23);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
    unint64_t v29 = *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v28 = *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v29 >= v28 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1LL);
    }
    uint64_t v42 = v23;
    uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v23);
    specialized Array._endMutation()(v30);
    uint64_t v31 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v4 + 256LL))(&v43);
    uint64_t v32 = v24[2];
    if (v32)
    {
      uint64_t v33 = v24 + 5;
      do
      {
        uint64_t v34 = *(v33 - 1);
        uint64_t v35 = *v33;
        swift_bridgeObjectRetain(*v33);
        sub_100075F38(v44, v34, v35);
        swift_bridgeObjectRelease(v44[1]);
        v33 += 2;
        --v32;
      }

      while (v32);
    }

    swift_bridgeObjectRelease(v24);
    v31(&v43, 0LL);
    uint64_t v36 = *(void *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
    if ((unint64_t)v36 >> 62)
    {
      if (v36 < 0) {
        uint64_t v40 = *(void *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
      }
      else {
        uint64_t v40 = v36 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n( *(void *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions),  2LL);
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v36);
    }

    else
    {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(*(void *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
    }

    if (v37)
    {
      if (v37 < 1)
      {
        __break(1u);
        uint64_t v41 = type metadata accessor for OSExtension(0LL);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v41);
        __break(1u);
        JUMPOUT(0x10009DF7CLL);
      }

      uint64_t v38 = 0LL;
      unint64_t v49 = v36 & 0xC000000000000001LL;
      do
      {
        if (v49)
        {
          uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
        }

        else
        {
          uint64_t v39 = *(void *)(v36 + 8 * v38 + 32);
          swift_retain(v39);
        }

        sub_10009C5F8(v39, a2, 0);
        swift_release(v39);
        ++v38;
      }

      while (v37 != v38);
    }

    swift_bridgeObjectRelease(v36);
    return v42;
  }

  return result;
}

uint64_t sub_10009DF8C(void *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v5;
  void v18[2] = *(_OWORD *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 48);
  sub_10005A870(v18);
  uint64_t v6 = sub_100051FA0(a1);
  sub_100010F94((uint64_t *)v18);
  uint64_t result = swift_release(v6);
  if (v6)
  {
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    char v20 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    unint64_t v8 = sub_10004FA08();
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CollectionKind,  v8);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._uint64_t countAndFlagsBits = 0x20726574666120LL;
    v11._object = (void *)0xE700000000000000LL;
    String.append(_:)(v11);
    char v20 = (char)a1;
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CollectionKind,  v8);
    uint64_t v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14._uint64_t countAndFlagsBits = 46LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    unint64_t v15 = sub_100012624();
    uint64_t v16 = swift_allocError(&type metadata for KMError, v15, 0LL, 0LL);
    *(void *)uint64_t v17 = 0x6120746F6E6E6143LL;
    *(void *)(v17 + 8) = 0xEB00000000206464LL;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(void *)(v17 + 64) = 0LL;
    *(_BYTE *)(v17 + 72) = 9;
    return swift_willThrow(v16);
  }

  return result;
}

uint64_t *sub_10009E130(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v77 = a5;
  uint64_t v9 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v9);
  Swift::String v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v16 = *(_OWORD *)(a4 + 16);
  v80[0] = *(_OWORD *)a4;
  v80[1] = v16;
  v80[2] = *(_OWORD *)(a4 + 32);
  uint64_t v81 = *(void *)(a4 + 48);
  sub_10005A870(v80);
  uint64_t v17 = sub_100051FA0(a2);
  uint64_t result = sub_100010F94((uint64_t *)v80);
  if (v17)
  {
    sub_10004DC4C(a1, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_100012824((uint64_t)v11, &qword_1001588F8);
      uint64_t v19 = v77;
      uint64_t v20 = sub_1000D42D4(*((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      uint64_t v22 = v21;
      uint64_t v78 = 0LL;
      unint64_t v79 = 0xE000000000000000LL;
      uint64_t v23 = v17;
      _StringGuts.grow(_:)(30LL);
      unint64_t v24 = v79;
      uint64_t v82 = v19;
      uint64_t v25 = type metadata accessor for KernelCollection(0LL);
      uint64_t v26 = sub_100012860(&qword_100158908, type metadata accessor for KernelCollection, (uint64_t)&unk_1001109C0);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease(v24);
      uint64_t v78 = v27;
      unint64_t v79 = v29;
      v30._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v30._object = (void *)0x80000001001288E0LL;
      String.append(_:)(v30);
      uint64_t v31 = v78;
      unint64_t v32 = v79;
      unint64_t v33 = sub_100012624();
      uint64_t v34 = swift_allocError(&type metadata for KMError, v33, 0LL, 0LL);
      *(void *)uint64_t v35 = v20;
      *(void *)(v35 + 8) = v22;
      *(void *)(v35 + 16) = v31;
      *(void *)(v35 + 24) = v32;
      *(_OWORD *)(v35 + 32) = 0u;
      *(_OWORD *)(v35 + 48) = 0u;
      *(void *)(v35 + 64) = 0LL;
      *(_BYTE *)(v35 + 72) = 6;
      swift_willThrow(v34);
      return (uint64_t *)swift_release(v23);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      if ((static UUID.== infix(_:_:)(v15, (char *)v17 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        return (uint64_t *)swift_release(v17);
      }

      else
      {
        uint64_t v48 = v77;
        uint64_t v76 = sub_1000D42D4(*((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
        uint64_t v50 = v49;
        uint64_t v78 = 0LL;
        unint64_t v79 = 0xE000000000000000LL;
        uint64_t v51 = v17;
        _StringGuts.grow(_:)(52LL);
        v52._uint64_t countAndFlagsBits = 0x6120746F6E6E6143LL;
        v52._object = (void *)0xEB00000000206464LL;
        String.append(_:)(v52);
        uint64_t v82 = v48;
        uint64_t v53 = type metadata accessor for KernelCollection(0LL);
        uint64_t v54 = sub_100012860(&qword_100158908, type metadata accessor for KernelCollection, (uint64_t)&unk_1001109C0);
        v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
        object = v55._object;
        String.append(_:)(v55);
        swift_bridgeObjectRelease(object);
        v57._object = (void *)0x8000000100128900LL;
        v57._uint64_t countAndFlagsBits = 0xD000000000000010LL;
        String.append(_:)(v57);
        v59._uint64_t countAndFlagsBits = UUID.uuidString.getter(v58);
        uint64_t v60 = v59._object;
        String.append(_:)(v59);
        swift_bridgeObjectRelease(v60);
        v61._uint64_t countAndFlagsBits = 0x207361202CLL;
        v61._object = (void *)0xE500000000000000LL;
        String.append(_:)(v61);
        uint64_t v82 = v17;
        uint64_t v62 = type metadata accessor for RealizedKernelCollection(0LL);
        uint64_t v63 = sub_100012860( &qword_10015AF98,  type metadata accessor for RealizedKernelCollection,  (uint64_t)&unk_100110194);
        v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v62, v63);
        uint64_t v65 = v64._object;
        String.append(_:)(v64);
        swift_bridgeObjectRelease(v65);
        v66._uint64_t countAndFlagsBits = 0x4955552073616820LL;
        v66._object = (void *)0xEA00000000002044LL;
        String.append(_:)(v66);
        v68._uint64_t countAndFlagsBits = UUID.uuidString.getter(v67);
        uint64_t v69 = v68._object;
        String.append(_:)(v68);
        swift_bridgeObjectRelease(v69);
        v70._uint64_t countAndFlagsBits = 10530LL;
        v70._object = (void *)0xE200000000000000LL;
        String.append(_:)(v70);
        uint64_t v71 = v78;
        unint64_t v72 = v79;
        unint64_t v73 = sub_100012624();
        uint64_t v74 = swift_allocError(&type metadata for KMError, v73, 0LL, 0LL);
        *(void *)uint64_t v75 = v76;
        *(void *)(v75 + 8) = v50;
        *(void *)(v75 + 16) = v71;
        *(void *)(v75 + 24) = v72;
        *(_OWORD *)(v75 + 32) = 0u;
        *(_OWORD *)(v75 + 48) = 0u;
        *(void *)(v75 + 64) = 0LL;
        *(_BYTE *)(v75 + 72) = 6;
        swift_willThrow(v74);
        swift_release(v51);
        return (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }
    }
  }

  else if ((a3 & 1) == 0)
  {
    uint64_t v78 = 0LL;
    unint64_t v79 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(v79);
    uint64_t v78 = 0x6120746F6E6E6143LL;
    unint64_t v79 = 0xEB00000000206464LL;
    LOBYTE(v82) = *((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    unint64_t v36 = sub_10004FA08();
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CollectionKind,  v36);
    uint64_t v38 = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(v38);
    v39._uint64_t countAndFlagsBits = 0x74756F6874697720LL;
    v39._object = (void *)0xE900000000000020LL;
    String.append(_:)(v39);
    LOBYTE(v82) = (_BYTE)a2;
    v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CollectionKind,  v36);
    uint64_t v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._uint64_t countAndFlagsBits = 46LL;
    v42._object = (void *)0xE100000000000000LL;
    String.append(_:)(v42);
    uint64_t v43 = v78;
    unint64_t v44 = v79;
    unint64_t v45 = sub_100012624();
    uint64_t v46 = swift_allocError(&type metadata for KMError, v45, 0LL, 0LL);
    *(void *)uint64_t v47 = v43;
    *(void *)(v47 + 8) = v44;
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    *(_OWORD *)(v47 + 48) = 0u;
    *(void *)(v47 + 64) = 0LL;
    *(_BYTE *)(v47 + 72) = 9;
    return (uint64_t *)swift_willThrow(v46);
  }

  return result;
}

void *sub_10009E6E0(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v9 = sub_100086B70(a1, a2, a3);
  uint64_t v10 = v9;
  if (v5)
  {
    uint64_t v19 = v5;
    swift_errorRetain(v5);
    uint64_t v11 = sub_100005FB4(&qword_10015AB20);
    uint64_t v12 = swift_dynamicCast(v18, &v19, v11, &type metadata for KMError, 6LL);
    if ((v12 & 1) != 0)
    {
      sub_1000516A8((uint64_t)v18, (uint64_t)v20);
      type metadata accessor for OSExtension(0LL);
      uint64_t v13 = sub_1000F46C0(a1);
      if (!v13)
      {
        swift_willThrow(0LL);
        sub_100089A3C( (uint64_t)v20,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
        return v10;
      }

      uint64_t v14 = v13;
      swift_retain(v13);
      sub_100089A3C( (uint64_t)v20,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a5 + 8));
      v18[0] = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = 0x8000000000000000LL;
      sub_1000A0B88((uint64_t)v20, v14, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = *(void *)(a5 + 8);
      *(void *)(a5 + 8) = v18[0];
      swift_release_n(v14, 2LL);
      swift_bridgeObjectRelease(v16);
      uint64_t v12 = sub_100089A3C( (uint64_t)v20,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
    }

    swift_willThrow(v12);
  }

  else
  {
    sub_10009C5F8((uint64_t)v9, a5, a4 & 1);
  }

  return v10;
}

void *sub_10009E84C(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v2);
  char v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  Swift::String v52 = (char *)&v51 - v8;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = __CocoaSet.makeIterator()(v9);
    uint64_t v11 = type metadata accessor for OSExtension(0LL);
    uint64_t v12 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    uint64_t result = Set.Iterator.init(_cocoa:)(v66, v10, v11, v12);
    a1 = v66[0];
    uint64_t v59 = v66[1];
    uint64_t v14 = v66[2];
    uint64_t v15 = v66[3];
    unint64_t v16 = v66[4];
  }

  else
  {
    uint64_t v17 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v59 = a1 + 56;
    uint64_t v14 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1LL << v19);
    }
    else {
      uint64_t v20 = -1LL;
    }
    unint64_t v16 = v20 & v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v15 = 0LL;
  }

  uint64_t v61 = v5;
  uint64_t v57 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v53 = v14;
  Swift::String v55 = _swiftEmptyArrayStorage;
  int64_t v58 = (unint64_t)(v14 + 64) >> 6;
  __int128 v60 = xmmword_10010F110;
  unint64_t v56 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v21 = v15;
    if ((a1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v24 = __CocoaSet.Iterator.next()(result);
    if (!v24) {
      goto LABEL_44;
    }
    uint64_t v25 = v24;
    uint64_t v67 = v24;
    uint64_t v26 = type metadata accessor for OSExtension(0LL);
    swift_unknownObjectRetain(v25);
    swift_dynamicCast(v63, &v67, v56, v26, 7LL);
    uint64_t v27 = v63[0];
    uint64_t v28 = swift_unknownObjectRelease(v25);
    if (!v27) {
      goto LABEL_44;
    }
LABEL_34:
    uint64_t v32 = a1;
    uint64_t v33 = static os_log_type_t.info.getter(v28);
    uint64_t v34 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v35 + 16) = v60;
    uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v27 + 200LL))();
    uint64_t v38 = v37;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_100026B64();
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + sub_10007CFB4(v0 + 40) = v38;
    unint64_t v39 = sub_100026BA8();
    Swift::String v40 = (void *)static OS_os_log.default.getter(v39);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v40, "\t%{public}s", 11LL, 2LL, v35);
    swift_bridgeObjectRelease(v35);

    (*(void (**)(void *__return_ptr))(*(void *)v27 + 112LL))(v63);
    uint64_t v41 = v64;
    if (v64)
    {
      uint64_t v42 = v65;
      sub_100005110(v63, v64);
      (*(void (**)(uint64_t, uint64_t))(v42 + 64))(v41, v42);
      uint64_t v44 = v61;
      uint64_t v43 = v62;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v4, 0LL, 1LL, v61);
      sub_100006034(v63);
    }

    else
    {
      sub_100012824((uint64_t)v63, &qword_100157C58);
      uint64_t v44 = v61;
      uint64_t v43 = v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v4, 1LL, 1LL, v61);
    }

    swift_release(v27);
    a1 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v4, 1LL, v44) == 1)
    {
      uint64_t result = (void *)sub_100012824((uint64_t)v4, (uint64_t *)&unk_10015BA30);
    }

    else
    {
      unint64_t v45 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      uint64_t v46 = v52;
      v45(v52, v4, v44);
      v45(v54, v46, v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0) {
        Swift::String v55 = (void *)sub_10000C938(0, v55[2] + 1LL, 1, (unint64_t)v55);
      }
      unint64_t v48 = v55[2];
      unint64_t v47 = v55[3];
      if (v48 >= v47 >> 1) {
        Swift::String v55 = (void *)sub_10000C938(v47 > 1, v48 + 1, 1, (unint64_t)v55);
      }
      uint64_t v49 = v54;
      uint64_t v50 = v55;
      v55[2] = v48 + 1;
      uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v45)( (char *)v50 + ((*(unsigned __int8 *)(v62 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))
                         + *(void *)(v62 + 72) * v48,
                           v49,
                           v44);
    }
  }

  if (v16)
  {
    unint64_t v22 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v23 = v22 | (v15 << 6);
LABEL_33:
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8 * v23);
    uint64_t v28 = swift_retain(v27);
    if (!v27) {
      goto LABEL_44;
    }
    goto LABEL_34;
  }

  int64_t v29 = v15 + 1;
  if (!__OFADD__(v15, 1LL))
  {
    if (v29 >= v58) {
      goto LABEL_44;
    }
    unint64_t v30 = *(void *)(v59 + 8 * v29);
    ++v15;
    if (!v30)
    {
      uint64_t v15 = v21 + 2;
      if (v21 + 2 >= v58) {
        goto LABEL_44;
      }
      unint64_t v30 = *(void *)(v59 + 8 * v15);
      if (!v30)
      {
        uint64_t v15 = v21 + 3;
        if (v21 + 3 >= v58) {
          goto LABEL_44;
        }
        unint64_t v30 = *(void *)(v59 + 8 * v15);
        if (!v30)
        {
          uint64_t v15 = v21 + 4;
          if (v21 + 4 >= v58) {
            goto LABEL_44;
          }
          unint64_t v30 = *(void *)(v59 + 8 * v15);
          if (!v30)
          {
            uint64_t v15 = v21 + 5;
            if (v21 + 5 >= v58) {
              goto LABEL_44;
            }
            unint64_t v30 = *(void *)(v59 + 8 * v15);
            if (!v30)
            {
              uint64_t v31 = v21 + 6;
              while (v58 != v31)
              {
                unint64_t v30 = *(void *)(v59 + 8 * v31++);
                if (v30)
                {
                  uint64_t v15 = v31 - 1;
                  goto LABEL_32;
                }
              }

uint64_t sub_10009EE00(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  char v6 = *(_BYTE *)(a1 + 32);
  char v7 = *(_BYTE *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v45 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain(a1);
  char v50 = v6;
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain(v8);
  unint64_t v11 = sub_1000357A4(v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000A0078();
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_10009F180(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain(a2);
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v30 = v9;
      uint64_t v10 = type metadata accessor for OSExtension(0LL);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v24 = sub_10009F448(v7, result + 1);
    uint64_t v31 = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v28 = v25 + 1;
      swift_retain(a2);
      sub_10009F668(v28);
      uint64_t v26 = v31;
    }

    else
    {
      uint64_t v26 = v24;
      swift_retain(a2);
    }

    sub_10009F978(a2, v26);
    uint64_t v29 = *v3;
    uint64_t *v3 = v26;
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
    return 1LL;
  }

  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = type metadata accessor for OSExtension(0LL);
  uint64_t v14 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
  swift_bridgeObjectRetain(v6);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v21 = v32;
    uint64_t v31 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v22 = swift_retain(v21);
    sub_10009FA44(v22, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = *v2;
    *uint64_t v2 = v31;
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1LL;
  }

  uint64_t v18 = ~v16;
  uint64_t v19 = sub_100012860(&qword_1001593F8, type metadata accessor for OSExtension, (uint64_t)&unk_10011B550);
  while (1)
  {
    uint64_t v31 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v32, v13, v19) & 1) != 0) {
      break;
    }
    unint64_t v17 = (v17 + 1) & v18;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  uint64_t v27 = *(void *)(*(void *)(*v2 + 48) + 8 * v17);
  *a1 = v27;
  swift_retain(v27);
  return 0LL;
}

uint64_t sub_10009F448(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005FB4(&qword_10015AFA0);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v25 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for OSExtension(0LL);
      do
      {
        uint64_t v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v25;
        unint64_t v18 = *(void *)(v25 + 16);
        if (*(void *)(v25 + 24) <= v18)
        {
          sub_10009F668(v18 + 1);
          uint64_t v4 = v25;
        }

        uint64_t v9 = v24;
        uint64_t v23 = v24;
        uint64_t v10 = *(void *)(v4 + 40);
        uint64_t v11 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        uint64_t v13 = v4 + 56;
        uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v15 = result & ~v14;
        unint64_t v16 = v15 >> 6;
        if (((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v19 = 0;
          unint64_t v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v21 = v16 == v20;
            if (v16 == v20) {
              unint64_t v16 = 0LL;
            }
            v19 |= v21;
            uint64_t v22 = *(void *)(v13 + 8 * v16);
          }

          while (v22 == -1);
          unint64_t v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }

        *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
        *(void *)(*(void *)(v4 + 48) + 8 * v17) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  return v4;
}

uint64_t sub_10009F668(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_10015AFA0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v31 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain(v3);
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }

      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_36;
          }
          unint64_t v17 = v32[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v31) {
              goto LABEL_36;
            }
            unint64_t v17 = v32[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v32 = -1LL << v30;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v32[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v18;
            }
          }
        }

unint64_t sub_10009F978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for OSExtension(0LL);
  uint64_t v6 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_10009FA44(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v6 = result;
  uint64_t v21 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10009F668(v9);
  }

  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_10009FBEC();
      goto LABEL_12;
    }

    sub_10009FD94(v9);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for OSExtension(0LL);
  uint64_t v12 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v13 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = ~v13;
    uint64_t v15 = sub_100012860(&qword_1001593F8, type metadata accessor for OSExtension, (uint64_t)&unk_10011B550);
    do
    {
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_10009FBEC()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015AFA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_10009FD94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_10015AFA0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v30 = v2;
  uint64_t v31 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v32) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1000A0078()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015AF90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_1000A022C()
{
  char v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v31 = v1;
    uint64_t v32 = v3;
    uint64_t result = (void *)swift_release(v31);
    *char v33 = v32;
    return result;
  }

  uint64_t result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  BOOL v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  uint64_t v37 = v3;
  if (v6)
  {
    uint64_t result = memmove(result, __src, 8 * v5);
    uint64_t v3 = v37;
  }

  int64_t v7 = 0LL;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v36 = v1;
  while (1)
  {
    if (v10)
    {
      uint64_t v38 = (v10 - 1) & v10;
      int64_t v39 = v7;
      unint64_t v11 = __clz(__rbit64(v10)) | (v7 << 6);
      uint64_t v1 = v36;
      uint64_t v3 = v37;
      goto LABEL_12;
    }

    int64_t v27 = v7 + 1;
    uint64_t v1 = v36;
    uint64_t v3 = v37;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v27 >= v35) {
      goto LABEL_26;
    }
    unint64_t v28 = *((void *)__src + v27);
    int64_t v29 = v7 + 1;
    if (!v28)
    {
      int64_t v29 = v7 + 2;
      if (v7 + 2 >= v35) {
        goto LABEL_26;
      }
      unint64_t v28 = *((void *)__src + v29);
      if (!v28) {
        break;
      }
    }

uint64_t sub_1000A0480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015AF90);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v39 = v3;
  int64_t v40 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v40) {
      break;
    }
    char v25 = v41;
    unint64_t v26 = v41[v24];
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v26 = v41[v14];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v40) {
              goto LABEL_36;
            }
            unint64_t v26 = v41[v14];
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_1000A07A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001593F0);
  char v55 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v53 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v51 = v3;
  int64_t v52 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  uint64_t v54 = v5;
  while (1)
  {
    if (v11)
    {
      unint64_t v28 = __clz(__rbit64(v11));
      uint64_t v29 = (v11 - 1) & v11;
      int64_t v56 = v14;
      unint64_t v30 = v28 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v31 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v31 >= v52) {
      break;
    }
    uint64_t v32 = v53;
    unint64_t v33 = v53[v31];
    int64_t v34 = v14 + 1;
    if (!v33)
    {
      int64_t v34 = v14 + 2;
      if (v14 + 2 >= v52) {
        goto LABEL_36;
      }
      unint64_t v33 = v53[v34];
      if (!v33)
      {
        uint64_t v35 = v14 + 3;
        if (v14 + 3 >= v52)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v51;
          if ((v55 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v33 = v53[v35];
        if (!v33)
        {
          while (1)
          {
            int64_t v34 = v35 + 1;
            if (__OFADD__(v35, 1LL)) {
              goto LABEL_45;
            }
            if (v34 >= v52) {
              goto LABEL_36;
            }
            unint64_t v33 = v53[v34];
            ++v35;
            if (v33) {
              goto LABEL_33;
            }
          }
        }

        int64_t v34 = v14 + 3;
      }
    }

uint64_t sub_1000A0B88(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000549AC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        return sub_1000A10F4(a1, v16[7] + 80 * v10);
      }
      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000A022C();
      goto LABEL_7;
    }

    sub_1000A07A4(v13, a3 & 1);
    unint64_t v18 = sub_1000549AC(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      unint64_t v10 = v18;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        return sub_1000A10F4(a1, v16[7] + 80 * v10);
      }
LABEL_11:
      sub_1000A0CA0(v10, a2, a1, v16);
      return swift_retain(a2);
    }
  }

  uint64_t v20 = type metadata accessor for OSExtension(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1000A0CA0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1000516A8(a3, a4[7] + 80 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1000A0D08(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000A0D24(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

void *sub_1000A0D24(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015AFA8);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100005FB4(&qword_10015AFB0);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_1000A0E44(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(unsigned __int8 *)(*(void *)(a4 + 56) + 24 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1000A0EA4(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1000A0D08(0LL, v3, 0);
    unint64_t v6 = (unsigned __int8 *)(a1 + 32);
    uint64_t v20 = *(void *)(a2 + 16);
    while (1)
    {
      unsigned int v8 = *v6++;
      char v7 = v8;
      uint64_t v9 = swift_bridgeObjectRetain(v20);
      char v10 = sub_1000281D8(v9, v8);
      if (v2) {
        break;
      }
      char v13 = v10;
      uint64_t v14 = v11;
      uint64_t v15 = v12;
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        sub_1000A0D08((void *)(v16 > 1), v17 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      unint64_t v18 = &_swiftEmptyArrayStorage[4 * v17];
      *((_BYTE *)v18 + 32) = v7;
      *((_BYTE *)v18 + sub_10007CFB4(v0 + 40) = v13;
      v18[6] = v14;
      v18[7] = v15;
      if (!--v3) {
        return _swiftEmptyArrayStorage;
      }
    }

    swift_release(_swiftEmptyArrayStorage);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A0FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
    uint64_t v5 = 4LL;
    while (1)
    {
      uint64_t v6 = v5 - 4;
      if ((a1 & 0xC000000000000001LL) == 0) {
        break;
      }
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_12;
      }
LABEL_9:
      char v9 = static URL.== infix(_:_:)( *(void *)(v7 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)
           + OBJC_IVAR____TtC10driverkitd16KernelCollection_path,
             a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }

      goto LABEL_18;
    }

    uint64_t v7 = *(void *)(a1 + 8 * v5);
    swift_retain(v7);
    uint64_t v8 = v5 - 3;
    if (!__OFADD__(v6, 1LL)) {
      goto LABEL_9;
    }
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }

  char v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

uint64_t sub_1000A10F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*sub_1000A1130(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000A116C()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    char v2 = sub_1000A11A0();
    *(_BYTE *)(v0 + 72) = v2 & 1;
  }

  else
  {
    char v2 = v1 & 1;
  }

  return v2 & 1;
}

uint64_t sub_1000A11A0()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  uint64_t v9 = sub_10006B854();
  int64_t v3 = v0 + 2;
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  sub_100005110(v3, v5);
  sub_100071818(v5, v4);
  sub_10006B104(&v8, (uint64_t)&type metadata for KernelRequests.GetDaemonActive, (uint64_t)&off_100159958, v6);
  sub_100006034(&v8);
  swift_bridgeObjectRelease(v9);
  return 1LL;
}

uint64_t sub_1000A1820(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, 73LL, 7LL);
  *(_BYTE *)(v5 + 72) = 2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = _swiftEmptyArrayStorage;
  sub_100005158(a2, v5 + 16);
  return v5;
}

_UNKNOWN **sub_1000A1880()
{
  char v1 = sub_1000A11A0();
  int v2 = *(unsigned __int8 *)(v0 + 72);
  BOOL v5 = v2 == 2;
  int v3 = v2 & 1;
  int v4 = v1 & 1;
  BOOL v5 = !v5 && v4 == v3;
  if (v5) {
    return 0LL;
  }
  *(_BYTE *)(v0 + 72) = v4;
  return &off_10014B618;
}

unint64_t sub_1000A18C4()
{
  char v1 = (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
  BOOL v2 = (v1 & 1) == 0;
  if ((v1 & 1) != 0) {
    uint64_t v3 = 0x6574617669746361LL;
  }
  else {
    uint64_t v3 = 0x6974636120746F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xED00006465746176LL;
  }
  else {
    unint64_t v4 = 0xE900000000000064LL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._uint64_t countAndFlagsBits = 0x68206E6F6D656144LL;
  v6._object = (void *)0xEB00000000207361LL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xEB00000000207361LL);
  return 0xD00000000000001CLL;
}

uint64_t sub_1000A19A0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

uint64_t type metadata accessor for ActivationStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd22ActivationStateManager);
}

void sub_1000A19F4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a7 + 8) + 16LL))(a6);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 144LL))(v11);
  swift_release(v11);
  sub_1000548C0(v12, (uint64_t)v114);
  swift_release(v12);
  uint64_t v13 = (uint64_t)v114;
  int64_t v14 = sub_100053318(a1, (uint64_t)a2);
  sub_100010F94(v114);
  if (!v14) {
    goto LABEL_59;
  }
  char v106 = a5;
  uint64_t v108 = a1;
  uint64_t v115 = _swiftEmptyArrayStorage;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 >= 0) {
      uint64_t v25 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v25 = v14;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v14);
    uint64_t v107 = a3;
    if (v15) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v107 = a3;
    if (v15)
    {
LABEL_4:
      if (v15 >= 1)
      {
        uint64_t v105 = a2;
        uint64_t v16 = 0LL;
        while (1)
        {
          if ((v14 & 0xC000000000000001LL) != 0)
          {
            uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
          }

          else
          {
            uint64_t v17 = *(void *)(v14 + 8 * v16 + 32);
            swift_retain(v17);
          }

          (*(void (**)(uint64_t *__return_ptr))(**(void **)(v17 + 24) + 112LL))(&v110);
          uint64_t v18 = v112;
          if (v112)
          {
            uint64_t v19 = v113;
            sub_100005110(&v110, v112);
            (*(void (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
            uint64_t v21 = v20;
            sub_100006034(&v110);
            uint64_t v22 = swift_bridgeObjectRelease(v21);
            if (v21)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
              uint64_t v23 = v115[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
              uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v17);
              specialized ContiguousArray._endMutation()(v24);
              goto LABEL_8;
            }
          }

          else
          {
            sub_100012824((uint64_t)&v110, &qword_100157C58);
          }

          swift_release(v17);
LABEL_8:
          if (v15 == ++v16)
          {
            swift_bridgeObjectRelease(v14);
            int64_t v14 = (int64_t)v115;
            a2 = v105;
            goto LABEL_21;
          }
        }
      }

      __break(1u);
      goto LABEL_62;
    }
  }

  swift_bridgeObjectRelease(v14);
  int64_t v14 = (int64_t)_swiftEmptyArrayStorage;
LABEL_21:
  BOOL v26 = v14 < 0 || (v14 & 0x4000000000000000LL) != 0;
  if (!v26)
  {
    uint64_t v27 = *(void *)(v14 + 16);
    if (v27 > 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }

  swift_bridgeObjectRetain(v14);
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v93);
  swift_release(v14);
  if (v27 <= 0)
  {
LABEL_58:
    swift_release(v14);
    a1 = v108;
LABEL_59:
    uint64_t v110 = 0LL;
    unint64_t v111 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(62LL);
    v94._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v94._object = (void *)0x80000001001289A0LL;
    String.append(_:)(v94);
    swift_bridgeObjectRetain(a2);
    v95._uint64_t countAndFlagsBits = a1;
    v95._object = a2;
    String.append(_:)(v95);
    swift_bridgeObjectRelease(a2);
    v96._object = (void *)0x80000001001289D0LL;
    v96._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    String.append(_:)(v96);
    uint64_t v97 = v110;
    unint64_t v98 = v111;
    unint64_t v99 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v99, 0LL, 0LL);
    *(void *)uint64_t v46 = v97;
    *(void *)(v46 + 8) = v98;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(void *)(v46 + 64) = 0LL;
    char v47 = 10;
    goto LABEL_60;
  }

LABEL_62:
  if (v13 < 0) {
    uint64_t v100 = v13;
  }
  else {
    uint64_t v100 = v13 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter(v100);
LABEL_31:
  uint64_t v28 = v101;
  unint64_t v31 = v103;
  if (v54)
  {
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      char v55 = a2;
      uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
      swift_bridgeObjectRelease(v13);
      uint64_t v57 = v107;
      goto LABEL_35;
    }

    if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      char v55 = a2;
      uint64_t v56 = *(void *)(v13 + 32);
      swift_retain(v56);
      swift_bridgeObjectRelease(v13);
      uint64_t v57 = v107;
LABEL_35:
      sub_10002193C(v57, a4);
LABEL_45:
      swift_release(v14);
LABEL_46:
      uint64_t v80 = swift_allocObject(v28, 112LL, 7LL);
      *(_OWORD *)(v80 + 16) = v104;
      *(void *)(v80 + 56) = &type metadata for String;
      *(void *)(v80 + 64) = v31;
      *(void *)(v80 + 32) = v108;
      *(void *)(v80 + sub_10007CFB4(v0 + 40) = v55;
      uint64_t v81 = *(uint64_t (**)(uint64_t))(**(void **)(v56 + 24) + 200LL);
      swift_bridgeObjectRetain(v55);
      uint64_t v82 = swift_retain(v56);
      uint64_t v83 = v81(v82);
      *(void *)(v80 + 96) = &type metadata for String;
      *(void *)(v80 + 104) = v31;
      *(void *)(v80 + 72) = v83;
      *(void *)(v80 + 80) = v84;
      char v85 = (void *)static OS_os_log.default.getter(v83);
      uint64_t v86 = static os_log_type_t.default.getter(v85);
      os_log(_:dso:log:type:_:)( "Picked matching dext for bundle identifier %{public}s: %{public}s",  65LL,  2LL,  &_mh_execute_header,  v85,  v86,  v80);
      swift_release(v56);
      swift_bridgeObjectRelease(v80);

      return;
    }

    __break(1u);
LABEL_68:
    char v55 = a2;
    uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v14);
    swift_release(v14);
    unint64_t v31 = v103;
    goto LABEL_46;
  }

  uint64_t v64 = swift_bridgeObjectRelease(v13);
  uint64_t v65 = static os_log_type_t.error.getter(v64);
  uint64_t v66 = swift_allocObject(v101, 112LL, 7LL);
  *(_OWORD *)(v66 + 16) = v104;
  *(void *)(v66 + 56) = &type metadata for String;
  *(void *)(v66 + 64) = v103;
  *(void *)(v66 + 32) = v108;
  *(void *)(v66 + sub_10007CFB4(v0 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v67 = sub_100013B60(v107, a4);
  *(void *)(v66 + 96) = &type metadata for String;
  *(void *)(v66 + 104) = v103;
  *(void *)(v66 + 72) = v67;
  *(void *)(v66 + 80) = v68;
  uint64_t v69 = (void *)static OS_os_log.default.getter(v67);
  os_log(_:dso:log:_:_:)( v65,  &_mh_execute_header,  v69,  "No dexts with bundle identifier %{public}s matched unique id %{public}s",  71LL,  2LL,  v66);
  swift_bridgeObjectRelease(v66);

  if ((v106 & 1) != 0)
  {
    swift_release(v14);
    uint64_t v110 = 0LL;
    unint64_t v111 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(68LL);
    v70._uint64_t countAndFlagsBits = 0xD000000000000029LL;
    v70._object = (void *)0x8000000100128C30LL;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = v108;
    v71._object = a2;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    v72._object = (void *)0x8000000100128C60LL;
    String.append(_:)(v72);
    v73._uint64_t countAndFlagsBits = sub_100013B60(v107, a4);
    object = v73._object;
    String.append(_:)(v73);
    swift_bridgeObjectRelease(object);
    uint64_t v75 = v110;
    unint64_t v76 = v111;
    unint64_t v77 = sub_100012624();
    uint64_t v78 = swift_allocError(&type metadata for KMError, v77, 0LL, 0LL);
    *(void *)uint64_t v79 = v75;
    *(void *)(v79 + 8) = v76;
    *(_OWORD *)(v79 + 16) = 0u;
    *(_OWORD *)(v79 + 32) = 0u;
    *(_OWORD *)(v79 + 48) = 0u;
    *(void *)(v79 + 64) = 0LL;
    *(_BYTE *)(v79 + 72) = 10;
    swift_willThrow(v78);
    sub_10002193C(v107, a4);
    return;
  }

  uint64_t v87 = swift_allocObject(v101, 72LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_10010F110;
  *(void *)(v87 + 56) = &type metadata for String;
  *(void *)(v87 + 64) = v103;
  *(void *)(v87 + 32) = v108;
  *(void *)(v87 + sub_10007CFB4(v0 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v89 = (void *)static OS_os_log.default.getter(v88);
  uint64_t v90 = static os_log_type_t.default.getter(v89);
  os_log(_:dso:log:type:_:)( "Arbitrarily picking first dext with bundle idenfier %{public}s",  62LL,  2LL,  &_mh_execute_header,  v89,  v90,  v87);
  swift_bridgeObjectRelease(v87);

  if (v102)
  {
    swift_bridgeObjectRetain(v14);
    uint64_t v92 = _CocoaArrayWrapper.endIndex.getter(v91);
    swift_release(v14);
  }

  else
  {
    uint64_t v92 = *(void *)(v14 + 16);
  }

  uint64_t v60 = (void *)a4;
  unint64_t v30 = (void *)v107;
  if (!v92)
  {
    sub_10002193C(v107, a4);
    goto LABEL_56;
  }

  if ((v14 & 0xC000000000000001LL) != 0)
  {
LABEL_70:
    char v55 = a2;
    uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v14);
    goto LABEL_54;
  }

  if (*(void *)(v14 + 16))
  {
    char v55 = a2;
    uint64_t v56 = *(void *)(v14 + 32);
    swift_retain(v56);
LABEL_54:
    sub_10002193C((uint64_t)v30, (unint64_t)v60);
    swift_release(v14);
    goto LABEL_46;
  }

  __break(1u);
}

            uint64_t v153 = 0LL;
            unint64_t v244 = v30 & 0xC000000000000001LL;
            Swift::String v232 = v30 & 0xFFFFFFFFFFFFFF8LL;
            unint64_t v231 = v30 + 32;
            unint64_t v237 = v30;
            __int128 v243 = v152;
            while (1)
            {
              if (v244)
              {
                uint64_t v21 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v153, v30);
                Swift::String v73 = __OFADD__(v153++, 1LL);
                if (v73) {
                  goto LABEL_92;
                }
              }

              else
              {
                if (v153 >= *(void *)(v232 + 16)) {
                  goto LABEL_93;
                }
                uint64_t v21 = *(uint64_t **)(v231 + 8 * v153);
                swift_retain(v21);
                Swift::String v73 = __OFADD__(v153++, 1LL);
                if (v73)
                {
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
LABEL_94:
                  __break(1u);
LABEL_95:
                  __break(1u);
LABEL_96:
                  __break(1u);
                  goto LABEL_97;
                }
              }

              uint64_t v154 = v249;
              if ((v249 & 0xC000000000000001LL) != 0)
              {
                if (v249 < 0) {
                  uint64_t v155 = v249;
                }
                else {
                  uint64_t v155 = v249 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v249);
                __int128 v156 = swift_retain(v21);
                __int128 v157 = __CocoaSet.contains(_:)(v156, v155);
                swift_bridgeObjectRelease(v154);
                swift_release(v21);
                if ((v157 & 1) == 0)
                {
LABEL_82:
                  v241(v151, v240, v50);
                  uint64_t v27 = v238;
                  swift_bridgeObjectRetain_n(v238, 2LL);
                  swift_bridgeObjectRetain_n(v20, 2LL);
                  swift_unknownObjectRetain_n(v28, 2LL);
                  uint64_t v162 = swift_retain_n(v21, 2LL);
                  uint64_t v163 = (os_log_s *)Logger.logObject.getter(v162);
                  uint64_t v164 = v151;
                  uint64_t v165 = static os_log_type_t.default.getter(v163);
                  if (os_log_type_enabled(v163, v165))
                  {
                    uint64_t v166 = swift_slowAlloc(42LL, -1LL);
                    uint64_t v167 = (unint64_t)v27;
                    uint64_t v27 = (char *)swift_slowAlloc(128LL, -1LL);
                    uint64_t v246 = (uint64_t)v27;
                    *(_DWORD *)uint64_t v166 = v229;
                    swift_bridgeObjectRetain(v167);
                    *(void *)(v166 + 4) = sub_1000058CC(v233, v167, &v246);
                    swift_bridgeObjectRelease_n(v167, 3LL);
                    *(_WORD *)(v166 + 12) = 2080;
                    swift_bridgeObjectRetain(v20);
                    *(void *)(v166 + 14) = sub_1000058CC(v234, (unint64_t)v20, &v246);
                    swift_bridgeObjectRelease_n(v20, 3LL);
                    *(_WORD *)(v166 + 22) = 2080;
                    __int128 v168 = sub_1000CD2A4(v235);
                    uint64_t v170 = v169;
                    *(void *)(v166 + 24) = sub_1000058CC(v168, v169, &v246);
                    swift_unknownObjectRelease_n(v242, 2LL);
                    swift_bridgeObjectRelease(v170);
                    *(_WORD *)(v166 + 32) = 2080;
                    uint64_t v28 = v242;
                    uint64_t v171 = swift_getObjectType(v21[2]);
                    uint64_t v172 = sub_1000CD2A4(v171);
                    uint64_t v174 = v173;
                    *(void *)(v166 + 34) = sub_1000058CC(v172, v173, &v246);
                    swift_release_n(v21, 2LL);
                    swift_bridgeObjectRelease(v174);
                    _os_log_impl( (void *)&_mh_execute_header,  v163,  v165,  "State refresh (id: %s, reason: %s): %s updated state, will notify subscriber: %s",  (uint8_t *)v166,  0x2Au);
                    swift_arrayDestroy(v27, 4LL, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v27, -1LL, -1LL);
                    uint64_t v175 = v166;
                    uint64_t v50 = v230;
                    swift_slowDealloc(v175, -1LL, -1LL);
                  }

                  else
                  {

                    swift_release_n(v21, 2LL);
                    swift_unknownObjectRelease_n(v28, 2LL);
                    swift_bridgeObjectRelease_n(v20, 2LL);
                    swift_bridgeObjectRelease_n(v27, 2LL);
                  }

                  ((void (*)(char *, uint64_t))v239)(v164, v50);
                  uint64_t v151 = v164;
                  sub_1000CF918(&v246, (uint64_t)v21);
                  swift_release(v246);
                  unint64_t v30 = v237;
                  goto LABEL_64;
                }
              }

              else
              {
                if (!*(void *)(v249 + 16)) {
                  goto LABEL_82;
                }
                Hasher.init(_seed:)(&v246, *(void *)(v249 + 40));
                uint64_t v27 = (char *)v21[2];
                Hasher._combine(_:)((Swift::UInt)v27);
                __int128 v158 = Hasher._finalize()();
                uint64_t v159 = -1LL << *(_BYTE *)(v154 + 32);
                uint64_t v160 = v158 & ~v159;
                if (((*(void *)(v154 + 56 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v160) & 1) == 0) {
                  goto LABEL_82;
                }
                uint64_t v161 = ~v159;
                while (*(char **)(*(void *)(*(void *)(v154 + 48) + 8 * v160) + 16LL) != v27)
                {
                  uint64_t v160 = (v160 + 1) & v161;
                  if (((*(void *)(v154 + 56 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v160) & 1) == 0) {
                    goto LABEL_82;
                  }
                }
              }

              swift_release(v21);
LABEL_64:
              if ((os_log_t)v153 == v243) {
                goto LABEL_90;
              }
            }
          }

          uint64_t v133 = v77;
        }

        else
        {
          uint64_t v133 = v30;
        }

        swift_release(v133);
LABEL_91:
        Swift::String v72 = (unint64_t)v236;
        goto LABEL_16;
      }
    }

uint64_t sub_1000A2528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v183 = a3;
  uint64_t v186 = a4;
  uint64_t v182 = a2;
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v196 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_10015B0C0);
  uint64_t inited = swift_initStackObject(v11, &v195);
  *(_OWORD *)(inited + 16) = xmmword_10010FF10;
  unint64_t v191 = a1;
  uint64_t v13 = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (v14)
  {
    uint64_t v15 = &type metadata for String;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
    *(void *)(inited + 48) = 0LL;
  }

  *(void *)(inited + 32) = v13;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v14;
  *(void *)(inited + 56) = v15;
  uint64_t v16 = sub_10006C448(a1);
  if (v17)
  {
    uint64_t v18 = &type metadata for String;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
    *(void *)(inited + 80) = 0LL;
  }

  *(void *)(inited + 64) = v16;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 88) = v18;
  uint64_t v19 = sub_10006C454(a1);
  uint64_t v187 = v5;
  if ((v20 & 1) != 0)
  {
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
    *(void *)(inited + 104) = 0LL;
    *(void *)(inited + 112) = 0LL;
  }

  else
  {
    uint64_t v21 = &type metadata for UInt64;
  }

  uint64_t v22 = inited + 32;
  *(void *)(inited + 120) = v21;
  *(void *)(inited + 96) = v19;
  uint64_t v23 = (void *)(inited + 128);
  char v24 = sub_10006C468(a1);
  uint64_t v185 = a5;
  if (v24 == 2)
  {
    uint64_t v25 = 0LL;
    *uint64_t v23 = 0LL;
    *(void *)(inited + 136) = 0LL;
    *(void *)(inited + 144) = 0LL;
  }

  else
  {
    *(_BYTE *)uint64_t v23 = v24 & 1;
    uint64_t v25 = &type metadata for Bool;
  }

  *(void *)(inited + 152) = v25;
  BOOL v26 = (void *)(inited + 160);
  unint64_t v27 = sub_10006C548(a1);
  if ((v27 & 0x100000000LL) != 0)
  {
    uint64_t v28 = 0LL;
    *BOOL v26 = 0LL;
    *(void *)(inited + 168) = 0LL;
    *(void *)(inited + 176) = 0LL;
  }

  else
  {
    *(_DWORD *)BOOL v26 = v27;
    uint64_t v28 = &type metadata for UInt32;
  }

  *(void *)(inited + 184) = v28;
  swift_bridgeObjectRetain(inited);
  sub_1000A3840(inited + 32, (uint64_t)&v191);
  if (!v193) {
    goto LABEL_26;
  }
  sub_100012824((uint64_t)&v191, &qword_100157FF8);
  sub_1000A3840(inited + 64, (uint64_t)&v191);
  if (!v193
    || (sub_100012824((uint64_t)&v191, &qword_100157FF8), sub_1000A3840(inited + 96, (uint64_t)&v191), !v193)
    || (sub_100012824((uint64_t)&v191, &qword_100157FF8), sub_1000A3840(inited + 128, (uint64_t)&v191), !v193)
    || (sub_100012824((uint64_t)&v191, &qword_100157FF8), sub_1000A3840(inited + 160, (uint64_t)&v191), !v193))
  {
LABEL_26:
    swift_bridgeObjectRelease(inited);
    unint64_t v46 = sub_100012624();
    uint64_t v47 = swift_allocError(&type metadata for KMError, v46, 0LL, 0LL);
    *(_OWORD *)uint64_t v48 = xmmword_100114230;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)(v48 + 48) = 0u;
    *(void *)(v48 + 64) = 0LL;
    *(_BYTE *)(v48 + 72) = 9;
    swift_willThrow(v47);
    sub_100012824((uint64_t)&v191, &qword_100157FF8);
    swift_setDeallocating(inited);
    uint64_t v49 = *(void *)(inited + 16);
    uint64_t v50 = sub_100005FB4(&qword_100157FF8);
    return swift_arrayDestroy(inited + 32, v49, v50);
  }

  sub_100012824((uint64_t)&v191, &qword_100157FF8);
  swift_bridgeObjectRelease(inited);
  swift_setDeallocating(inited);
  uint64_t v29 = *(void *)(inited + 16);
  uint64_t v30 = sub_100005FB4(&qword_100157FF8);
  uint64_t v31 = swift_arrayDestroy(v22, v29, v30);
  LODWORD(v179) = static os_signpost_type_t.event.getter(v31);
  id v180 = (id)*sub_1000D30EC();
  uint64_t v32 = sub_100090290();
  unint64_t v33 = *v32;
  uint64_t v177 = v32[1];
  uint64_t v178 = v33;
  unsigned int v176 = *((unsigned __int8 *)v32 + 16);
  uint64_t v175 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v34 = swift_allocObject(v175, 192LL, 7LL);
  __int128 v174 = xmmword_100112500;
  *(_OWORD *)(v34 + 16) = xmmword_100112500;
  unint64_t v191 = a1;
  uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (!v36)
  {
    __break(1u);
    goto LABEL_86;
  }

  uint64_t v37 = result;
  uint64_t v38 = v36;
  *(void *)(v34 + 56) = &type metadata for String;
  unint64_t v39 = sub_100026B64();
  *(void *)(v34 + 64) = v39;
  *(void *)(v34 + 32) = v37;
  *(void *)(v34 + sub_10007CFB4(v0 + 40) = v38;
  uint64_t result = sub_10006C448(a1);
  if (!v40)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  *(void *)(v34 + 96) = &type metadata for String;
  *(void *)(v34 + 104) = v39;
  unint64_t v181 = v39;
  *(void *)(v34 + 72) = result;
  *(void *)(v34 + 80) = v40;
  uint64_t result = sub_10006C454(a1);
  if ((v41 & 1) != 0)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  *(void *)(v34 + 136) = &type metadata for UInt64;
  *(void *)(v34 + 144) = &protocol witness table for UInt64;
  *(void *)(v34 + 112) = result;
  uint64_t v42 = sub_10006C638(a1);
  if (v43 >> 60 == 15)
  {
    unint64_t v44 = (uint64_t *)(v34 + 152);
    unint64_t v45 = v181;
    *(void *)(v34 + 176) = &type metadata for String;
    *(void *)(v34 + 184) = v45;
  }

  else
  {
    uint64_t v51 = v42;
    unint64_t v52 = v43;
    uint64_t v173 = sub_100013B60(v42, v43);
    unint64_t v54 = v53;
    uint64_t v42 = sub_10002193C(v51, v52);
    unint64_t v44 = (uint64_t *)(v34 + 152);
    unint64_t v55 = v181;
    *(void *)(v34 + 176) = &type metadata for String;
    *(void *)(v34 + 184) = v55;
    if (v54)
    {
      *unint64_t v44 = v173;
      uint64_t v56 = v196;
      uint64_t v57 = v180;
      uint64_t v58 = v179;
      goto LABEL_30;
    }
  }

  uint64_t v56 = v196;
  uint64_t v57 = v180;
  uint64_t v58 = v179;
  *unint64_t v44 = 0x7571696E75206F6ELL;
  unint64_t v54 = 0xEC00000044492065LL;
LABEL_30:
  *(void *)(v34 + 160) = v54;
  static OSSignpostID.exclusive.getter(v42);
  os_signpost(_:dso:log:name:signpostID:_:_:)( v58,  &_mh_execute_header,  v57,  v178,  v177,  v176,  v10,  "%{public}s %{public}s 0x%llx %{public}s",  39LL,  2,  v34);

  swift_bridgeObjectRelease(v34);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
  uint64_t result = sub_10006C548(a1);
  if ((result & 0x100000000LL) != 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  uint64_t v59 = result;
  if (*(_DWORD *)sub_1000D4EBC() == (_DWORD)result || *(_DWORD *)sub_1000D4EB0() == (_DWORD)v59)
  {
    unint64_t v191 = 0LL;
    unint64_t v192 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(v192);
    unint64_t v191 = 0xD00000000000001DLL;
    unint64_t v192 = 0x8000000100128D60LL;
    LODWORD(v188[0]) = v59;
    v60._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    object = v60._object;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(object);
    unint64_t v62 = v191;
    unint64_t v63 = v192;
    unint64_t v64 = sub_100012624();
    uint64_t v65 = swift_allocError(&type metadata for KMError, v64, 0LL, 0LL);
    *(void *)uint64_t v66 = v62;
    *(void *)(v66 + 8) = v63;
    *(_OWORD *)(v66 + 16) = 0u;
    *(_OWORD *)(v66 + 32) = 0u;
    *(_OWORD *)(v66 + 48) = 0u;
    *(void *)(v66 + 64) = 0LL;
    *(_BYTE *)(v66 + 72) = 9;
    return swift_willThrow(v65);
  }

  unint64_t v191 = a1;
  uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (!v67) {
    goto LABEL_89;
  }
  uint64_t v68 = result;
  uint64_t v69 = v67;
  uint64_t v70 = sub_10006C638(a1);
  unint64_t v72 = v71;
  Swift::String v73 = v184;
  sub_1000A19F4(v68, v69, v70, v71, 0, v186, v185);
  if (v73)
  {
    sub_10002193C(v70, v72);
    swift_bridgeObjectRelease(v69);
    return mach_port_deallocate(mach_task_self_, v59);
  }

  uint64_t v75 = v74;
  sub_10002193C(v70, v72);
  swift_bridgeObjectRelease(v69);
  if (!v75)
  {
    unint64_t v191 = 0LL;
    unint64_t v192 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(62LL);
    v90._object = (void *)0x80000001001289A0LL;
    v90._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    String.append(_:)(v90);
    v188[0] = a1;
    uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
    if (v91)
    {
      uint64_t v92 = v91;
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease(v92);
      v93._uint64_t countAndFlagsBits = 0xD000000000000015LL;
      v93._object = (void *)0x80000001001289D0LL;
      String.append(_:)(v93);
      unint64_t v94 = v191;
      unint64_t v95 = v192;
      unint64_t v96 = sub_100012624();
      uint64_t v97 = swift_allocError(&type metadata for KMError, v96, 0LL, 0LL);
      *(void *)uint64_t v98 = v94;
      *(void *)(v98 + 8) = v95;
      *(_OWORD *)(v98 + 16) = 0u;
      *(_OWORD *)(v98 + 32) = 0u;
      *(_OWORD *)(v98 + 48) = 0u;
      *(void *)(v98 + 64) = 0LL;
      *(_BYTE *)(v98 + 72) = 10;
      swift_willThrow(v97);
      return mach_port_deallocate(mach_task_self_, v59);
    }

    goto LABEL_91;
  }

  unint64_t v76 = *(void **)(v75 + 24);
  uint64_t v77 = type metadata accessor for DriverExtension(0LL);
  uint64_t v78 = swift_dynamicCastClass(v76, v77);
  if (!v78)
  {
    unint64_t v191 = 0LL;
    unint64_t v192 = 0xE000000000000000LL;
    swift_retain(v75);
    uint64_t v99 = v75;
    _StringGuts.grow(_:)(67LL);
    v100._object = (void *)0x80000001001289A0LL;
    v100._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    String.append(_:)(v100);
    v188[0] = a1;
    uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
    if (v101)
    {
      uint64_t v102 = v101;
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease(v102);
      v103._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v103._object = (void *)0x8000000100128CB0LL;
      String.append(_:)(v103);
      unint64_t v104 = v191;
      unint64_t v105 = v192;
      unint64_t v106 = sub_100012624();
      uint64_t v107 = swift_allocError(&type metadata for KMError, v106, 0LL, 0LL);
      *(void *)uint64_t v108 = v104;
      *(void *)(v108 + 8) = v105;
      *(_OWORD *)(v108 + 16) = 0u;
      *(_OWORD *)(v108 + 32) = 0u;
      *(_OWORD *)(v108 + 48) = 0u;
      *(void *)(v108 + 64) = 0LL;
      *(_BYTE *)(v108 + 72) = 10;
      swift_willThrow(v107);
      swift_release_n(v99, 2LL);
      return mach_port_deallocate(mach_task_self_, v59);
    }

    goto LABEL_92;
  }

  uint64_t v79 = (void *)v78;
  uint64_t v196 = v75;
  swift_retain(v75);
  swift_retain(v76);
  uint64_t v80 = sub_1000D8050();
  id v180 = v76;
  uint64_t v184 = v79;
  if ((v80 & 1) == 0)
  {
    uint64_t v81 = swift_allocObject(v175, 192LL, 7LL);
    *(_OWORD *)(v81 + 16) = v174;
    unint64_t v191 = a1;
    uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
    if (!v109)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }

    unint64_t v110 = v181;
    *(void *)(v81 + 56) = &type metadata for String;
    *(void *)(v81 + 64) = v110;
    *(void *)(v81 + 32) = result;
    *(void *)(v81 + sub_10007CFB4(v0 + 40) = v109;
    uint64_t result = sub_10006C448(a1);
    if (!v111)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }

    *(void *)(v81 + 96) = &type metadata for String;
    *(void *)(v81 + 104) = v110;
    *(void *)(v81 + 72) = result;
    *(void *)(v81 + 80) = v111;
    uint64_t result = sub_10006C454(a1);
    if ((v112 & 1) != 0)
    {
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }

    *(void *)(v81 + 136) = &type metadata for UInt64;
    *(void *)(v81 + 144) = &protocol witness table for UInt64;
    *(void *)(v81 + 112) = result;
    uint64_t v113 = sub_10006C638(a1);
    if (v114 >> 60 == 15)
    {
      uint64_t v115 = (uint64_t *)(v81 + 152);
      unint64_t v116 = v181;
      *(void *)(v81 + 176) = &type metadata for String;
      *(void *)(v81 + 184) = v116;
    }

    else
    {
      uint64_t v124 = v113;
      unint64_t v125 = v114;
      uint64_t v126 = sub_100013B60(v113, v114);
      unint64_t v128 = v127;
      sub_10002193C(v124, v125);
      uint64_t v115 = (uint64_t *)(v81 + 152);
      unint64_t v129 = v181;
      *(void *)(v81 + 176) = &type metadata for String;
      *(void *)(v81 + 184) = v129;
      if (v128)
      {
        *uint64_t v115 = v126;
LABEL_60:
        *(void *)(v81 + 160) = v128;
        unint64_t v130 = sub_100026BA8();
        __int128 v131 = (void *)static OS_os_log.default.getter(v130);
        uint64_t v132 = static os_log_type_t.default.getter(v131);
        os_log(_:dso:log:type:_:)( "Launching dext %{public}s %{public}s 0x%llx %{public}s",  54LL,  2LL,  &_mh_execute_header,  v131,  v132,  v81);
        goto LABEL_64;
      }
    }

    *uint64_t v115 = 0x7571696E75206F6ELL;
    unint64_t v128 = 0xEC00000044492065LL;
    goto LABEL_60;
  }

  LODWORD(v179) = static os_log_type_t.error.getter(v80);
  uint64_t v81 = swift_allocObject(v175, 192LL, 7LL);
  *(_OWORD *)(v81 + 16) = v174;
  unint64_t v191 = a1;
  uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (!v82)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  unint64_t v83 = v181;
  *(void *)(v81 + 56) = &type metadata for String;
  *(void *)(v81 + 64) = v83;
  *(void *)(v81 + 32) = result;
  *(void *)(v81 + sub_10007CFB4(v0 + 40) = v82;
  uint64_t result = sub_10006C448(a1);
  if (!v84)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  *(void *)(v81 + 96) = &type metadata for String;
  *(void *)(v81 + 104) = v83;
  *(void *)(v81 + 72) = result;
  *(void *)(v81 + 80) = v84;
  uint64_t result = sub_10006C454(a1);
  if ((v85 & 1) != 0)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }

  *(void *)(v81 + 136) = &type metadata for UInt64;
  *(void *)(v81 + 144) = &protocol witness table for UInt64;
  *(void *)(v81 + 112) = result;
  uint64_t v86 = sub_10006C638(a1);
  if (v87 >> 60 == 15)
  {
    uint64_t v88 = (uint64_t *)(v81 + 152);
    unint64_t v89 = v181;
    *(void *)(v81 + 176) = &type metadata for String;
    *(void *)(v81 + 184) = v89;
LABEL_62:
    *uint64_t v88 = 0x7571696E75206F6ELL;
    unint64_t v122 = 0xEC00000044492065LL;
    goto LABEL_63;
  }

  uint64_t v117 = v86;
  unint64_t v118 = v87;
  uint64_t v119 = v59;
  uint64_t v120 = sub_100013B60(v86, v87);
  unint64_t v122 = v121;
  sub_10002193C(v117, v118);
  uint64_t v88 = (uint64_t *)(v81 + 152);
  unint64_t v123 = v181;
  *(void *)(v81 + 176) = &type metadata for String;
  *(void *)(v81 + 184) = v123;
  if (!v122)
  {
    uint64_t v59 = v119;
    goto LABEL_62;
  }

  *uint64_t v88 = v120;
  uint64_t v59 = v119;
LABEL_63:
  *(void *)(v81 + 160) = v122;
  unint64_t v133 = sub_100026BA8();
  __int128 v131 = (void *)static OS_os_log.default.getter(v133);
  os_log(_:dso:log:_:_:)( v179,  &_mh_execute_header,  v131,  "(NOT AN ERROR) Launching dext %{public}s %{public}s 0x%llx %{public}s",  69LL,  2LL,  v81);
LABEL_64:
  swift_bridgeObjectRelease(v81);

  uint64_t v134 = sub_100080A3C();
  uint64_t v135 = *v134;
  unint64_t v191 = a1;
  swift_retain(v135);
  uint64_t result = sub_10006AFF8((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148628);
  if (!v136)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v137 = v136;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v135 + 96LL))(result, v136, 0LL);
  swift_release(v135);
  swift_bridgeObjectRelease(v137);
  uint64_t v138 = *(void *)(v185 + 8);
  uint64_t v139 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 16);
  uint64_t v140 = v139(v186, v138);
  int v141 = *(_DWORD *)(v140 + 640);
  swift_release(v140);
  LODWORD(v191) = *(_DWORD *)sub_1000A4A78();
  LODWORD(v188[0]) = v141;
  unint64_t v142 = sub_100012B34();
  char v143 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v191, &type metadata for ExtensionManager.Settings.Flags, v142);
  unint64_t v181 = (unint64_t)v134;
  if ((v143 & 1) == 0 || v183 == 1)
  {
    uint64_t result = sub_10006C448(a1);
    if (v157)
    {
      __int128 v158 = (void *)result;
      unint64_t v159 = v157;
      uint64_t v185 = v59;
      uint64_t result = sub_10006C454(a1);
      if ((v160 & 1) == 0)
      {
        uint64_t v161 = (uint64_t (*)(void))result;
        uint64_t result = sub_10006C468(a1);
        if (result != 2)
        {
          char v162 = result;
          uint64_t result = sub_10006C548(a1);
          if ((result & 0x100000000LL) == 0)
          {
            uint64_t v163 = v196;
            sub_1000CB3A8(v184, v158, v159, v161, v162 & 1, result, v196 + 32, v186, v138);
            swift_bridgeObjectRelease(v159);
            swift_release(v180);
            swift_release_n(v163, 2LL);
            goto LABEL_83;
          }

          goto LABEL_102;
        }

LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }

      uint64_t v88 = *v3;
      while (1)
      {
        unint64_t v89 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_133;
        }
        if (!v88) {
          goto LABEL_146;
        }
        Swift::String v103 = (uint64_t)v10;
        Swift::String v90 = *(void *)&v10[16 * v89 + 32];
        uint64_t v91 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = sub_1000AF1AC((_BYTE *)(v88 + v90), (_BYTE *)(v88 + *(void *)&v10[16 * v11 + 16]), v88 + v91, v100);
        if (v2) {
          goto LABEL_99;
        }
        if (v91 < v90) {
          goto LABEL_134;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v103);
        if ((result & 1) != 0)
        {
          uint64_t v92 = (char *)v103;
        }

        else
        {
          uint64_t result = (uint64_t)sub_1000594BC(v103);
          uint64_t v92 = (char *)result;
        }

        if (v89 >= *((void *)v92 + 2)) {
          goto LABEL_135;
        }
        Swift::String v93 = &v92[16 * v89 + 32];
        *(void *)Swift::String v93 = v90;
        *((void *)v93 + 1) = v91;
        unint64_t v94 = *((void *)v92 + 2);
        if (v11 > v94) {
          goto LABEL_136;
        }
        uint64_t result = (uint64_t)memmove(&v92[16 * v11 + 16], &v92[16 * v11 + 32], 16 * (v94 - v11));
        uint64_t v10 = v92;
        *((void *)v92 + 2) = v94 - 1;
        uint64_t v11 = v94 - 1;
        if (v94 <= 2) {
          goto LABEL_114;
        }
      }
    }
  }

LABEL_100:
      __break(1u);
      goto LABEL_101;
    }

LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }

LABEL_104:
      __break(1u);
      goto LABEL_105;
    }

LABEL_110:
  __break(1u);
  return result;
}

void *sub_1000A3594(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  unint64_t v33 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_27;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = 0LL;
      uint64_t v28 = v5 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v29 = v5 & 0xC000000000000001LL;
      uint64_t v27 = v5;
      while (v29)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        unint64_t v9 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_24:
          __break(1u);
          return v33;
        }

uint64_t sub_1000A3840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157FF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DextLaunchContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DextLaunchContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t sub_1000A392C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000A3944(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for DextLaunchContext()
{
  return &type metadata for DextLaunchContext;
}

int main(int argc, const char **argv, const char **envp)
{
}

uint64_t sub_1000A39AC()
{
  uint64_t v0 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sched_param v89 = 0LL;
  uint64_t v4 = pthread_self();
  int v88 = 4;
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0);
  pthread_getschedparam(v4, &v88, &v89);
  int v88 = 4;
  v89.sched_priority = 50;
  uint64_t v5 = pthread_setschedparam(v4, 4, &v89);
  uint64_t v6 = static os_signpost_type_t.begin.getter(v5);
  uint64_t v82 = sub_1000D2FB0();
  id v7 = (id)*v82;
  uint64_t v8 = sub_1000902D8();
  unint64_t v9 = *v8;
  char v10 = v8[1];
  uint64_t v11 = *((unsigned __int8 *)v8 + 16);
  static OSSignpostID.exclusive.getter(v8);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, v9, v10, v11, v3);

  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  unint64_t v83 = v3;
  char v85 = v12;
  v12(v3, v0);
  uint64_t v13 = type metadata accessor for DriverKitDaemonSideEffects();
  uint64_t v14 = sub_1000977A0();
  v93[0] = v14;
  sub_100071818(v13, (uint64_t)&off_10014B420);
  unint64_t v15 = v95;
  char v16 = v96;
  sub_100005110(v94, (uint64_t)v95);
  __int16 v17 = (*((uint64_t (**)(void *, void (*)))v16 + 14))(v15, v16);
  sub_100006034(v94);
  if ((v17 & 0x100) == 0)
  {
    *(void *)&__int128 v90 = v14;
    sub_1001073DC(v13, (uint64_t)&off_10014B420);
    uint64_t v18 = v95;
    unint64_t v19 = v96;
    sub_100005110(v94, (uint64_t)v95);
    (*((void (**)(__int128 *__return_ptr, uint64_t, unint64_t, void *, void (*)))v19
     + 21))( &v90,  0x6E6F632F7665642FLL,  0xEC000000656C6F73LL,  v18,  v19);
    if (v91)
    {
      sub_100005158(&v90, (uint64_t)v93);
      sub_100006034(v94);
      sub_100005F70((uint64_t)v93, (uint64_t)&v90);
      uint64_t v20 = swift_allocObject(&unk_10014B728, 56LL, 7LL);
      sub_100005158(&v90, v20 + 16);
      unint64_t v96 = sub_1000A43B0;
      uint64_t v97 = v20;
      v94[0] = _NSConcreteStackBlock;
      v94[1] = 1107296256LL;
      v94[2] = sub_1000A4444;
      unint64_t v95 = &unk_10014B740;
      char v21 = _Block_copy(v94);
      swift_release(v97);
      id v22 = (id)os_log_set_hook(v17, v21);
      _Block_release(v21);
      sub_100006034(v93);
      if (v22) {
        _Block_release(v22);
      }
    }

    else
    {
      sub_1000A434C((uint64_t)&v90);
      sub_100006034(v94);
    }
  }

  uint64_t v23 = sub_1000D8050();
  if ((v23 & 1) != 0)
  {
    uint64_t v24 = static os_log_type_t.error.getter(v23);
    uint64_t v25 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + 16) = xmmword_10010F110;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_100026B64();
    *(void *)(v26 + 32) = 0xD000000000000025LL;
    *(void *)(v26 + sub_10007CFB4(v0 + 40) = 0x8000000100122520LL;
    unint64_t v27 = sub_100026BA8();
    uint64_t v28 = (void *)static OS_os_log.default.getter(v27);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v28,  "(NOT AN ERROR) Starting driverkitd (%{public}s)",  47LL,  2LL,  v26);
  }

  else
  {
    uint64_t v29 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v26 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v26 + 16) = xmmword_10010F110;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_100026B64();
    *(void *)(v26 + 32) = 0xD000000000000025LL;
    *(void *)(v26 + sub_10007CFB4(v0 + 40) = 0x8000000100122520LL;
    unint64_t v30 = sub_100026BA8();
    uint64_t v28 = (void *)static OS_os_log.default.getter(v30);
    uint64_t v31 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:type:_:)("Starting driverkitd (%{public}s)", 32LL, 2LL, &_mh_execute_header, v28, v31, v26);
  }

  swift_bridgeObjectRelease(v26);

  type metadata accessor for DriverKitDaemon();
  unint64_t v32 = sub_100097E20();
  uint64_t v34 = v33;
  uint64_t v35 = String.utf8CString.getter(v32);
  swift_bridgeObjectRelease(v34);
  LODWORD(v34) = _set_user_dir_suffix(v35 + 32);
  swift_release(v35);
  if ((_DWORD)v34)
  {
    uint64_t v84 = v0;
    uint64_t v91 = v13;
    uint64_t v92 = &off_10014B420;
    *(void *)&__int128 v90 = v14;
    sub_1000A42D8((uint64_t)v93);
    sub_1000A4304((uint64_t)v93, (uint64_t)v94);
    swift_retain(v14);
    uint64_t v36 = (void *)sub_100097D8C();
    uint64_t v37 = sub_100097DC4((uint64_t)&v90, v36, (uint64_t)v94);
    int v87 = *(_DWORD *)sub_1000D4EBC();
    uint64_t v38 = bootstrap_check_in(bootstrap_port, "com.apple.KernelManagementPingServer", (mach_port_t *)&v87);
    uint64_t v81 = v14;
    if (!(_DWORD)v38)
    {
      uint64_t v39 = sub_100005FB4(&qword_10015B0C8);
      uint64_t v40 = sub_100073680(v87);
      *(void *)&__int128 v90 = v40;
      uint64_t v41 = sub_100012B78(&qword_10015B0D0, &qword_10015B0C8, (uint64_t)&unk_1001125AC);
      sub_100098CA4((uint64_t)&v90, v39, v41);
      swift_release(v40);
      uint64_t v42 = type metadata accessor for ApplicationRequestSource();
      uint64_t v43 = sub_100081A74();
      *(void *)&__int128 v90 = v43;
      sub_100098CA4((uint64_t)&v90, v42, (uint64_t)&off_10015A5B0);
      uint64_t v44 = swift_release(v43);
      uint64_t v45 = static os_signpost_type_t.event.getter(v44);
      unint64_t v46 = sub_100026BA8();
      uint64_t v47 = (void *)static OS_os_log.default.getter(v46);
      uint64_t v48 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
      *(_OWORD *)(v49 + 16) = xmmword_10010F110;
      uint64_t v50 = (uint64_t *)DriverKitDaemonXPC.serverName.unsafeMutableAddressor();
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = sub_100026B64();
      *(void *)(v49 + 32) = v51;
      *(void *)(v49 + sub_10007CFB4(v0 + 40) = v52;
      swift_bridgeObjectRetain(v52);
      unint64_t v53 = v83;
      static OSSignpostID.exclusive.getter(v54);
      os_signpost(_:dso:log:name:signpostID:_:_:)( v45,  &_mh_execute_header,  v47,  "daemonInit()",  12LL,  2LL,  v53,  "Server name: %{public}s",  23LL,  2,  v49);

      swift_bridgeObjectRelease(v49);
      v85(v53, v84);
      uint64_t v55 = sub_100005FB4(&qword_10015B0D8);
      uint64_t v56 = v50[1];
      id v57 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
      swift_bridgeObjectRetain(v56);
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v56);
      id v59 = [v57 initWithMachServiceName:v58];

      uint64_t v80 = sub_1000744FC(v59, 0xD000000000000027LL, 0x8000000100128E90LL);
      *(void *)&__int128 v90 = v80;
      uint64_t v60 = sub_100012B78(&qword_10015B0E0, &qword_10015B0D8, (uint64_t)&unk_1001125D8);
      sub_100098CA4((uint64_t)&v90, v55, v60);
      uint64_t v61 = v81;
      uint64_t v86 = v81;
      sub_10010B078(v13, (uint64_t)&off_10014B420);
      uint64_t v62 = sub_100005FB4(&qword_10015B0E8);
      uint64_t v63 = type metadata accessor for RealApprovalsXPCPublisher();
      swift_dynamicCast(&v86, &v90, v62, v63, 7LL);
      uint64_t v64 = v86;
      *(void *)&__int128 v90 = v86;
      sub_100098CA4((uint64_t)&v90, v63, (uint64_t)&off_10015C8D8);
      uint64_t v65 = sub_100098E3C();
      uint64_t v66 = static os_signpost_type_t.end.getter(v65);
      id v67 = (id)*v82;
      uint64_t v68 = sub_1000902E4();
      uint64_t v69 = *v68;
      uint64_t v70 = v68[1];
      uint64_t v71 = *((unsigned __int8 *)v68 + 16);
      static OSSignpostID.exclusive.getter(v68);
      os_signpost(_:dso:log:name:signpostID:)(v66, &_mh_execute_header, v67, v69, v70, v71, v53);
      swift_release(v61);
      swift_release(v37);

      swift_release(v64);
      return ((uint64_t (*)(char *, uint64_t))v85)(v53, v84);
    }

    uint64_t v73 = v38;
    *(void *)&__int128 v90 = 0LL;
    *((void *)&v90 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(*((void *)&v90 + 1));
    *(void *)&__int128 v90 = 0xD00000000000001BLL;
    *((void *)&v90 + 1) = 0x8000000100128E40LL;
    LODWORD(v86) = v73;
    v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(object);
    v76._uint64_t countAndFlagsBits = 10272LL;
    v76._object = (void *)0xE200000000000000LL;
    String.append(_:)(v76);
    v77._uint64_t countAndFlagsBits = sub_1000D13E0(v73);
    uint64_t v78 = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v78);
    v79._uint64_t countAndFlagsBits = 41LL;
    v79._object = (void *)0xE100000000000000LL;
    String.append(_:)(v79);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v90,  *((void *)&v90 + 1),  "driverkitd/main.swift",  21LL,  2LL,  61LL,  0);
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001CLL,  0x8000000100128DF0LL,  "driverkitd/main.swift",  21LL,  2LL,  53LL,  0);
  }

  __break(1u);
  return result;
}

double sub_1000A42D8(uint64_t a1)
{
  *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000A4304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015AD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A434C(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_10015B0F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000A438C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000A43B0(unsigned __int8 a1)
{
  uint64_t v2 = os_log_copy_decorated_message(a1);
  if (v2)
  {
    unint64_t v3 = (void *)v2;
    uint64_t v4 = v1 + 2;
    uint64_t v5 = String.init(cString:)(v2);
    uint64_t v7 = v6;
    uint64_t v9 = v1[5];
    uint64_t v8 = v1[6];
    sub_100005110(v4, v9);
    sub_100105494(v5, v7, v9, v8);
    swift_bridgeObjectRelease(v7);
    free(v3);
  }

uint64_t sub_1000A4444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_1000A448C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A449C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A44A4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175718, 0LL);
}

void *sub_1000A44B4()
{
  if (qword_100164630 != -1) {
    swift_once(&qword_100164630, sub_1000A44A4);
  }
  return &unk_100175718;
}

uint64_t sub_1000A44F4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_10017571C, 1LL);
}

void *sub_1000A4504()
{
  if (qword_100164638 != -1) {
    swift_once(&qword_100164638, sub_1000A44F4);
  }
  return &unk_10017571C;
}

uint64_t sub_1000A4544(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175720, 2LL);
}

void *sub_1000A4554()
{
  if (qword_100164640 != -1) {
    swift_once(&qword_100164640, sub_1000A4544);
  }
  return &unk_100175720;
}

uint64_t sub_1000A4594(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175724, 3LL);
}

void *sub_1000A45A4()
{
  if (qword_100164648 != -1) {
    swift_once(&qword_100164648, sub_1000A4594);
  }
  return &unk_100175724;
}

uint64_t sub_1000A45E4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175728, 4LL);
}

int *sub_1000A45F4()
{
  if (qword_100164650 != -1) {
    swift_once(&qword_100164650, sub_1000A45E4);
  }
  return &dword_100175728;
}

uint64_t sub_1000A4634(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_10017572C, 5LL);
}

int *sub_1000A4644()
{
  if (qword_100164658 != -1) {
    swift_once(&qword_100164658, sub_1000A4634);
  }
  return &dword_10017572C;
}

uint64_t sub_1000A4684(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175730, 6LL);
}

int *sub_1000A4694()
{
  if (qword_100164660 != -1) {
    swift_once(&qword_100164660, sub_1000A4684);
  }
  return &dword_100175730;
}

uint64_t sub_1000A46D4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175734, 7LL);
}

int *sub_1000A46E4()
{
  if (qword_100164668 != -1) {
    swift_once(&qword_100164668, sub_1000A46D4);
  }
  return &dword_100175734;
}

uint64_t sub_1000A4724(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175738, 8LL);
}

void *sub_1000A4734()
{
  if (qword_100164670 != -1) {
    swift_once(&qword_100164670, sub_1000A4724);
  }
  return &unk_100175738;
}

uint64_t sub_1000A4774(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_10017573C, 9LL);
}

int *sub_1000A4784()
{
  if (qword_100164678 != -1) {
    swift_once(&qword_100164678, sub_1000A4774);
  }
  return &dword_10017573C;
}

uint64_t sub_1000A47C4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175740, 10LL);
}

void *sub_1000A47D4()
{
  if (qword_100164680 != -1) {
    swift_once(&qword_100164680, sub_1000A47C4);
  }
  return &unk_100175740;
}

uint64_t sub_1000A4814(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175744, 11LL);
}

void *sub_1000A4824()
{
  if (qword_100164688 != -1) {
    swift_once(&qword_100164688, sub_1000A4814);
  }
  return &unk_100175744;
}

uint64_t sub_1000A4864(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175748, 12LL);
}

void *sub_1000A4874()
{
  if (qword_100164690 != -1) {
    swift_once(&qword_100164690, sub_1000A4864);
  }
  return &unk_100175748;
}

uint64_t sub_1000A48B4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175750, 14LL);
}

int *sub_1000A48C4()
{
  if (qword_1001646A0 != -1) {
    swift_once(&qword_1001646A0, sub_1000A48B4);
  }
  return &dword_100175750;
}

uint64_t sub_1000A4904(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175754, 15LL);
}

void *sub_1000A4914()
{
  if (qword_1001646A8 != -1) {
    swift_once(&qword_1001646A8, sub_1000A4904);
  }
  return &unk_100175754;
}

uint64_t sub_1000A4954(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175758, 16LL);
}

uint64_t sub_1000A4964(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_100175760, 18LL);
}

void *sub_1000A4974()
{
  if (qword_1001646C0 != -1) {
    swift_once(&qword_1001646C0, sub_1000A4964);
  }
  return &unk_100175760;
}

uint64_t sub_1000A49B4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175764, 19LL);
}

uint64_t sub_1000A49C4(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&dword_100175768, 20LL);
}

int *sub_1000A49D4()
{
  if (qword_1001646D0 != -1) {
    swift_once(&qword_1001646D0, sub_1000A49C4);
  }
  return &dword_100175768;
}

uint64_t sub_1000A4A14(uint64_t a1)
{
  return sub_1000A4A24(a1, (uint64_t)&unk_10017576C, 21LL);
}

uint64_t sub_1000A4A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_1000772F4();
  unint64_t v6 = sub_1000928E0();
  return sub_1000D3840(a3, (uint64_t)&type metadata for ExtensionManager.Settings.Flags, v5, v6, a2);
}

void *sub_1000A4A78()
{
  if (qword_1001646D8 != -1) {
    swift_once(&qword_1001646D8, sub_1000A4A14);
  }
  return &unk_10017576C;
}

uint64_t sub_1000A4AB8()
{
  v1._uint64_t countAndFlagsBits = 0x203A686372610A5BLL;
  v1._object = (void *)0xE800000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  unint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 0x6E61697261760A2CLL;
  v5._object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._uint64_t countAndFlagsBits = 0x6C656E72656B0A2CLL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  uint64_t v10 = v0[4];
  uint64_t v11 = (void *)v0[5];
  swift_bridgeObjectRetain(v11);
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._object = (void *)0x8000000100128F40LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = Array.description.getter(v0[6], &type metadata for String);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v16._object = (void *)0x8000000100128F60LL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = Array.description.getter(v0[7], &type metadata for String);
  uint64_t v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._object = (void *)0x8000000100128F80LL;
  v19._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = Array.description.getter(v0[8], &type metadata for String);
  char v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  v22._object = (void *)0x8000000100128FA0LL;
  v22._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = Array.description.getter(v0[9], &type metadata for String);
  uint64_t v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._uint64_t countAndFlagsBits = 6097452LL;
  v25._object = (void *)0xE300000000000000LL;
  String.append(_:)(v25);
  return 0LL;
}

uint64_t sub_1000A4CF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A4D24
                                                            + 4 * asc_100114260[a1]))( 1751347809LL,  0xE400000000000000LL);
}

uint64_t sub_1000A4D24()
{
  return 0x746E6169726176LL;
}

uint64_t sub_1000A4D3C()
{
  return 0x6C656E72656BLL;
}

unint64_t sub_1000A4D50()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000A4DA8()
{
  return sub_1000A4CF8(*v0);
}

uint64_t sub_1000A4DB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000B1024(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A4DD4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1000A4DE0(uint64_t a1)
{
  unint64_t v2 = sub_1000A507C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A4E08(uint64_t a1)
{
  unint64_t v2 = sub_1000A507C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A4E30(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_10015B100);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000A507C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    uint64_t v22 = v3[6];
    HIBYTE(v21) = 3;
    uint64_t v18 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    uint64_t v19 = sub_100017ED0( &qword_100158018,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    uint64_t v22 = v3[7];
    HIBYTE(v21) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    uint64_t v22 = v3[8];
    HIBYTE(v21) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    uint64_t v22 = v3[9];
    HIBYTE(v21) = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000A507C()
{
  unint64_t result = qword_1001646E8[0];
  if (!qword_1001646E8[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_1001146C8,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_1001646E8);
  }

  return result;
}

__n128 sub_1000A50C0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_1000A5108(void *a1)
{
  return sub_1000A4E30(a1);
}

uint64_t sub_1000A5120()
{
  return 0LL;
}

__n128 sub_1000A512C@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, char a26)
{
  __n128 v46 = (__n128)v53[1];
  __int128 v47 = v53[0];
  uint64_t v31 = v54;
  sub_1000263D8(a21, (uint64_t)v52, &qword_10015B108);
  __int128 v32 = *(_OWORD *)(a19 + 208);
  *(_OWORD *)(a9 + 384) = *(_OWORD *)(a19 + 192);
  *(_OWORD *)(a9 + 400) = v32;
  *(_OWORD *)(a9 + 416) = *(_OWORD *)(a19 + 224);
  uint64_t v33 = *(void *)(a19 + 240);
  __int128 v34 = *(_OWORD *)(a19 + 144);
  *(_OWORD *)(a9 + 320) = *(_OWORD *)(a19 + 128);
  *(_OWORD *)(a9 + 336) = v34;
  __int128 v35 = *(_OWORD *)(a19 + 176);
  *(_OWORD *)(a9 + 352) = *(_OWORD *)(a19 + 160);
  *(_OWORD *)(a9 + 368) = v35;
  __int128 v36 = *(_OWORD *)(a19 + 80);
  *(_OWORD *)(a9 + 256) = *(_OWORD *)(a19 + 64);
  *(_OWORD *)(a9 + 272) = v36;
  __int128 v37 = *(_OWORD *)(a19 + 112);
  *(_OWORD *)(a9 + 288) = *(_OWORD *)(a19 + 96);
  *(_OWORD *)(a9 + 304) = v37;
  __int128 v38 = *(_OWORD *)(a19 + 16);
  *(_OWORD *)(a9 + 192) = *(_OWORD *)a19;
  *(_OWORD *)(a9 + 208) = v38;
  __int128 v39 = *(_OWORD *)(a19 + 48);
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(a19 + 32);
  *(_OWORD *)(a9 + 2sub_10007CFB4(v0 + 40) = v39;
  __int128 v40 = v52[0];
  __int128 v41 = v52[1];
  __int128 v42 = v52[2];
  __int128 v43 = v52[3];
  __int128 v44 = v52[4];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + sub_10007CFB4(v0 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(_OWORD *)(a9 + 128) = a14;
  *(_OWORD *)(a9 + 144) = a15;
  *(_OWORD *)(a9 + 160) = a16;
  *(void *)(a9 + 176) = a17;
  *(void *)(a9 + 184) = a18;
  *(void *)(a9 + 432) = v33;
  *(void *)(a9 + 4sub_10007CFB4(v0 + 40) = a20;
  *(_OWORD *)(a9 + 448) = v40;
  *(_OWORD *)(a9 + 464) = v41;
  *(_OWORD *)(a9 + 480) = v42;
  *(_OWORD *)(a9 + 496) = v43;
  *(_OWORD *)(a9 + 512) = v44;
  *(void *)(a9 + 528) = a22;
  *(void *)(a9 + 536) = a23;
  __n128 result = v46;
  *(_OWORD *)(a9 + 544) = v47;
  *(__n128 *)(a9 + 560) = v46;
  *(void *)(a9 + 576) = v31;
  *(_DWORD *)(a9 + 584) = a25;
  *(_BYTE *)(a9 + 588) = a26;
  return result;
}

uint64_t sub_1000A5310()
{
  return swift_retain(*(void *)(v0 + 648));
}

uint64_t sub_1000A5344(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 648);
  *(void *)(v1 + 648) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000A5388(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

unint64_t sub_1000A53C4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    Swift::String v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015AF90);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  Swift::String v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v17 = v1;
  uint64_t v6 = (void *)(v1 + 56);
  while (1)
  {
    char v7 = *((_BYTE *)v6 - 24);
    char v8 = *((_BYTE *)v6 - 16);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_1000AE2B0( v7,  (uint64_t (*)(void))sub_10003A5B8,  (uint64_t)&type metadata for ExceptionList.ExceptionType,  (uint64_t (*)(void))sub_10002B838);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v4[6] + result) = v7;
    uint64_t v13 = v4[7] + 24 * result;
    *(_BYTE *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v10;
    *(void *)(v13 + 16) = v9;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v16;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v17;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5508(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  char v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_100006114(v8, v9);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    *(void *)(v5[7] + 8 * result) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A561C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015B3C8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void *)(a1 + 40);
  while (1)
  {
    char v7 = *((_BYTE *)v6 - 8);
    uint64_t v8 = *v6;
    swift_retain(*v6);
    unint64_t result = sub_1000AE2B0( v7,  (uint64_t (*)(void))sub_10004FA4C,  (uint64_t)&type metadata for CollectionKind,  (uint64_t (*)(void))sub_1000265DC);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(void *)(v4[7] + 8 * result) = v8;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A5758()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 656));
}

uint64_t sub_1000A578C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 656);
  *(void *)(v1 + 656) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A57D0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A580C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 664));
}

uint64_t sub_1000A5840(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 664);
  *(void *)(v1 + 664) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A5884(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000A58C0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 696));
}

uint64_t sub_1000A58F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 696);
  *(void *)(v1 + 696) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A5938(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A5974()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 728));
}

uint64_t sub_1000A59A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 728);
  *(void *)(v1 + 728) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A59EC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A5A28()
{
  return *(unsigned __int8 *)(v0 + 736);
}

uint64_t sub_1000A5A58(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 736, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 736) = a1;
  return result;
}

uint64_t (*sub_1000A5A94(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000A5AD0(void *a1, _DWORD *a2)
{
  uint64_t v5 = swift_allocObject(v2, 737LL, 7LL);
  sub_1000A5B24(a1, a2);
  return v5;
}

uint64_t sub_1000A5B24(void *a1, _DWORD *a2)
{
  uint64_t v3 = (char **)v2;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v218 = *(void *)(v6 - 8);
  uint64_t v219 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v214 = (char *)&v214 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v216 = (char *)&v214 - v9;
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v227 = *(void *)(v10 - 8);
  uint64_t v228 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v215 = (char *)&v214 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  Swift::String v226 = (char *)&v214 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v223 = (char *)&v214 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v229 = (char *)&v214 - v18;
  __chkstk_darwin(v17);
  Swift::String v230 = (char *)&v214 - v19;
  uint64_t v236 = type metadata accessor for OSSignposter(0LL);
  uint64_t v232 = *(void *)(v236 - 8);
  uint64_t v20 = __chkstk_darwin(v236);
  uint64_t v217 = (char *)&v214 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  char v225 = (char *)&v214 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v222 = (char *)&v214 - v25;
  __chkstk_darwin(v24);
  unint64_t v231 = (char *)&v214 - v26;
  uint64_t v27 = type metadata accessor for URL(0LL);
  uint64_t v234 = *(void *)(v27 - 8);
  uint64_t v235 = v27;
  __chkstk_darwin(v27);
  v233 = (char *)&v214 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 656) = sub_1000A53C4((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + 664) = sub_1000A5508((uint64_t)_swiftEmptyArrayStorage, &qword_10015B3B8);
  *(void *)(v2 + 680) = 0LL;
  *(void *)(v2 + 672) = 0LL;
  *(_BYTE *)(v2 + 688) = 0;
  *(void *)(v2 + 696) = sub_1000A5508((uint64_t)_swiftEmptyArrayStorage, &qword_100158C18);
  *(void *)(v2 + 712) = 0LL;
  *(void *)(v2 + 704) = 0LL;
  *(_BYTE *)(v2 + 720) = 0;
  *(void *)(v2 + 728) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v2 + 736) = 0;
  uint64_t v238 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v29 = swift_allocObject(v238, 72LL, 7LL);
  __int128 v246 = xmmword_10010F110;
  *(_OWORD *)(v29 + 16) = xmmword_10010F110;
  uint64_t v30 = sub_1000A729C();
  uint64_t v32 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v245 = sub_100026B64();
  *(void *)(v29 + 64) = v245;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + sub_10007CFB4(v0 + 40) = v32;
  uint64_t v244 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v33 = (void *)static OS_os_log.default.getter(v244);
  uint64_t v34 = static os_log_type_t.default.getter(v33);
  os_log(_:dso:log:type:_:)("Initializing with settings: %{private}s", 39LL, 2LL, &_mh_execute_header, v33, v34, v29);
  swift_bridgeObjectRelease(v29);

  uint64_t v241 = a1;
  sub_100005F70((uint64_t)a1, (uint64_t)(v3 + 2));
  memcpy(v3 + 7, a2, 0x24DuLL);
  sub_100037850(a2);
  __int128 v35 = sub_1000518D0();
  unint64_t v44 = sub_1000518DC();
  __int128 v36 = sub_100051F50();
  unint64_t v37 = sub_100051F5C();
  unint64_t v38 = sub_100051F68();
  unint64_t v39 = sub_100051F74();
  unint64_t v40 = sub_100051F80();
  uint64_t v41 = v39;
  __int128 v42 = a2;
  sub_100051F8C((uint64_t)v35, v44, (uint64_t)v36, v37, v38, v41, v40, v258);
  __int128 v43 = (uint64_t (*)(char *, uint64_t, uint64_t))(v3 + 81);
  v3[81] = (char *)sub_1000063BC((uint64_t)v258, (uint64_t)&type metadata for LookupTable);
  LODWORD(v44) = a2[146];
  if (qword_100164658 != -1) {
    goto LABEL_102;
  }
  while (1)
  {
    unint64_t v237 = v3;
    v239 = v42;
    int v224 = v44;
    unint64_t v221 = v43;
    if ((dword_10017572C & ~(_DWORD)v44) == 0) {
      break;
    }
    uint64_t v45 = sub_1000903A0();
    swift_beginAccess(v45, v260, 0LL, 0LL);
    uint64_t v46 = *v45;
    *(void *)&v258[0] = v46;
    swift_bridgeObjectRetain_n(v46, 2LL);
    uint64_t v47 = v243;
    sub_1000AE89C((char **)v258);
    uint64_t v243 = v47;
    uint64_t v48 = v238;
    if (v47) {
      goto LABEL_120;
    }
    swift_bridgeObjectRelease(v46);
    uint64_t v242 = *(void *)&v258[0];
    v240 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v258[0] + 16LL);
    if (!v240)
    {
LABEL_24:
      swift_release(v242);
      break;
    }

    swift_beginAccess(v43, v259, 0LL, 0LL);
    __int128 v43 = 0LL;
    while (1)
    {
      char v54 = *((_BYTE *)v43 + v242 + 32);
      unint64_t v44 = swift_allocObject(v48, 72LL, 7LL);
      *(_OWORD *)(v44 + 16) = v246;
      uint64_t v55 = sub_1000D42D4(v54);
      unint64_t v56 = v245;
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = v56;
      *(void *)(v44 + 32) = v55;
      *(void *)(v44 + sub_10007CFB4(v0 + 40) = v57;
      NSString v58 = (void *)static OS_os_log.default.getter(v55);
      uint64_t v59 = static os_log_type_t.default.getter(v58);
      os_log(_:dso:log:type:_:)("Looking for the %{public}s", 26LL, 2LL, &_mh_execute_header, v58, v59, v44);
      swift_bridgeObjectRelease(v44);

      if (qword_1001646E0 != -1) {
        swift_once(&qword_1001646E0, sub_1000AE1E0);
      }
      uint64_t v60 = qword_100175770;
      if (!*(void *)(qword_100175770 + 16)) {
        break;
      }
      unint64_t v61 = sub_1000AE2B0( v54,  (uint64_t (*)(void))sub_10004FA4C,  (uint64_t)&type metadata for CollectionKind,  (uint64_t (*)(void))sub_1000265DC);
      if ((v62 & 1) == 0) {
        goto LABEL_101;
      }
      uint64_t v63 = *(char ***)(*(void *)(v60 + 56) + 8 * v61);
      memcpy(v258, v42, 0x24DuLL);
      sub_100037850(v42);
      swift_retain(v63);
      swift_getAtKeyPath(v258, v63);
      sub_10003916C(v42);
      uint64_t v64 = v255;
      if (v255)
      {
        uint64_t v65 = v254;
        uint64_t v66 = v241[3];
        uint64_t v67 = v241[4];
        sub_100005110(v241, v66);
        sub_1001073DC(v66, v67);
        uint64_t v68 = v256;
        uint64_t v69 = v257;
        sub_100005110(&v254, v256);
        (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v69 + 112))( &v251,  v65,  v64,  1LL,  v68,  v69);
        if (v252)
        {
          sub_100005158(&v251, (uint64_t)v258);
          sub_100006034(&v254);
          uint64_t v70 = *((void *)&v258[1] + 1);
          uint64_t v71 = *(void *)&v258[2];
          sub_100005110(v258, *((uint64_t *)&v258[1] + 1));
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v71 + 80))(&v249, v70, v71);
          sub_100005F70((uint64_t)v258, (uint64_t)v248);
          if (v250)
          {
            sub_100006034(v248);
            sub_100005158(&v249, (uint64_t)&v251);
          }

          else
          {
            sub_100005158(v248, (uint64_t)&v251);
            sub_100012824((uint64_t)&v249, &qword_100158910);
          }

          uint64_t v78 = v252;
          uint64_t v79 = v253;
          sub_100005110(&v251, v252);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v79 + 72))(&v254, v78, v79);
          sub_100006034(&v251);
          uint64_t v80 = v233;
          URL.init(fileURLWithPath:)(v65, v64);
          uint64_t v81 = v64;
          uint64_t v82 = v80;
          uint64_t v83 = swift_bridgeObjectRelease(v81);
          uint64_t v84 = (uint64_t)v237[81];
          __chkstk_darwin(v83);
          uint64_t v3 = &v214 - 8;
          __int128 v42 = v239;
          *(&v214 - 6) = v85;
          *(&v214 - 5) = (char *)v42;
          *(&v214 - 4) = v82;
          *((_BYTE *)&v214 - 24) = v54;
          *(&v214 - 2) = (char *)&v254;
          type metadata accessor for RealizedKernelCollection(0LL);
          swift_retain(v84);
          uint64_t v86 = v243;
          sub_100006260((void (*)(uint64_t))sub_1000B1E84, (uint64_t)(&v214 - 8), v84);
          uint64_t v243 = v86;
          if (v86)
          {
            swift_release(v63);
            sub_10003916C(v42);
            __int128 v90 = v237;
            swift_release(v237);
            swift_release(v242);
            swift_release(v84);
            (*(void (**)(char *, uint64_t))(v234 + 8))(v82, v235);
            sub_100006034(&v254);
            goto LABEL_38;
          }

          swift_release(v84);
          swift_release(v63);
          swift_release(v247);
          (*(void (**)(char *, uint64_t))(v234 + 8))(v82, v235);
          sub_100006034(&v254);
          sub_100006034(v258);
          uint64_t v48 = v238;
        }

        else
        {
          sub_100012824((uint64_t)&v251, &qword_100158910);
          sub_100006034(&v254);
          BOOL v72 = sub_1000265C0(v54, 2);
          uint64_t v48 = v238;
          if (!v72)
          {
            if (qword_100164650 != -1) {
              swift_once(&qword_100164650, sub_1000A45E4);
            }
            if ((dword_100175728 & ~v224) != 0)
            {
              swift_release(v242);
              __int128 v90 = v237;
              swift_release(v237);
              *(void *)&v258[0] = 0LL;
              *((void *)&v258[0] + 1) = 0xE000000000000000LL;
              _StringGuts.grow(_:)(37LL);
              swift_bridgeObjectRelease(*((void *)&v258[0] + 1));
              *(void *)&v258[0] = 0xD000000000000023LL;
              *((void *)&v258[0] + 1) = 0x8000000100129090LL;
              v208._uint64_t countAndFlagsBits = v65;
              v208._object = v64;
              String.append(_:)(v208);
              swift_bridgeObjectRelease(v64);
              __int128 v209 = v258[0];
              unint64_t v210 = sub_100012624();
              uint64_t v211 = swift_allocError(&type metadata for KMError, v210, 0LL, 0LL);
              *(_OWORD *)uint64_t v212 = v209;
              *(_OWORD *)(v212 + 16) = 0u;
              *(_OWORD *)(v212 + 32) = 0u;
              *(_OWORD *)(v212 + 48) = 0u;
              *(void *)(v212 + 64) = 0LL;
              *(_BYTE *)(v212 + 72) = 9;
              swift_willThrow(v211);
              sub_10003916C(v239);
              goto LABEL_96;
            }
          }

          swift_bridgeObjectRelease(v64);
          uint64_t v3 = (char **)swift_allocObject(v48, 72LL, 7LL);
          *((_OWORD *)v3 + 1) = v246;
          uint64_t v73 = sub_1000D42D4(v54);
          unint64_t v74 = v245;
          v3[7] = (char *)&type metadata for String;
          v3[8] = (char *)v74;
          v3[4] = (char *)v73;
          v3[5] = v75;
          Swift::String v76 = (void *)static OS_os_log.default.getter(v73);
          uint64_t v77 = static os_log_type_t.default.getter(v76);
          os_log(_:dso:log:type:_:)("Skipping %{public}s, cannot map", 31LL, 2LL, &_mh_execute_header, v76, v77, v3);
          swift_release(v63);
          swift_bridgeObjectRelease(v3);

          __int128 v42 = v239;
        }
      }

      else
      {
        uint64_t v3 = (char **)swift_allocObject(v48, 72LL, 7LL);
        *((_OWORD *)v3 + 1) = v246;
        uint64_t v49 = sub_1000D42D4(v54);
        unint64_t v50 = v245;
        v3[7] = (char *)&type metadata for String;
        v3[8] = (char *)v50;
        v3[4] = (char *)v49;
        v3[5] = v51;
        uint64_t v52 = (void *)static OS_os_log.default.getter(v49);
        uint64_t v53 = static os_log_type_t.default.getter(v52);
        os_log(_:dso:log:type:_:)( "Skipping %{public}s, manager settings does not contain a path to it",  67LL,  2LL,  &_mh_execute_header,  v52,  v53,  v3);
        swift_release(v63);
        swift_bridgeObjectRelease(v3);
      }

      __int128 v43 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v43 + 1);
      if (v240 == v43) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    swift_once(&qword_100164658, sub_1000A4634);
  }

  int v87 = v230;
  uint64_t v88 = sub_1000D3540();
  sched_param v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v232 + 16);
  uint64_t v235 = v88;
  v240 = v89;
  ((void (*)(char *))v89)(v231);
  __int128 v90 = sub_1000902A8();
  uint64_t v91 = *v90;
  char v92 = *((_BYTE *)v90 + 16);
  uint64_t v93 = static OSSignpostID.exclusive.getter(v90);
  uint64_t v63 = (char **)OSSignposter.logHandle.getter(v93);
  os_signpost_type_t v94 = static os_signpost_type_t.begin.getter(v63);
  unint64_t v95 = v63;
  char v96 = OS_os_log.signpostsEnabled.getter();
  uint64_t v220 = v90;
  if ((v96 & 1) == 0) {
    goto LABEL_29;
  }
  if ((v92 & 1) != 0)
  {
    if ((unint64_t)v91 >> 32)
    {
      __break(1u);
    }

    else
    {
      if (v91 >> 11 == 27)
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }

      if (v91 >> 16 <= 0x10)
      {
        uint64_t v91 = &v261;
        goto LABEL_34;
      }
    }

    __break(1u);
LABEL_105:
    swift_once(&qword_1001646A0, sub_1000A48B4);
LABEL_81:
    if ((dword_100175750 & ~(_DWORD)v87) != 0)
    {
      uint64_t v199 = v243;
      (*((void (**)(void))*v90 + 50))();
      if (v199)
      {
        sub_10003916C(v239);
        swift_release(v90);
        swift_release(v242);
LABEL_96:
        uint64_t v176 = (uint64_t)v63;
        goto LABEL_97;
      }

      LODWORD(v91) = (_DWORD)v87;
      uint64_t v243 = 0LL;
    }

    else
    {
      LODWORD(v91) = (_DWORD)v87;
    }

    unint64_t v95 = v90 + 87;
    sub_100005F70((uint64_t)v241, (uint64_t)v258);
    uint64_t v200 = swift_allocObject(&unk_10014B778, 56LL, 7LL);
    sub_100005158(v258, v200 + 16);
    swift_beginAccess(v90 + 83, &v254, 1LL, 0LL);
    uint64_t v201 = (uint64_t)v90[84];
    uint64_t v202 = (uint64_t)v90[85];
    v90[84] = (char *)sub_1000B1884;
    v90[85] = (char *)v200;
    *((_BYTE *)v90 + 688) = 1;
    sub_1000B1E74(v201, v202);
    if (qword_100164660 != -1) {
      swift_once(&qword_100164660, sub_1000A4684);
    }
    if ((dword_100175730 & ~(_DWORD)v91) == 0)
    {
      BOOL v203 = 1;
LABEL_92:
      sub_100005F70((uint64_t)v241, (uint64_t)v258);
      uint64_t v204 = swift_allocObject(&unk_10014B7A0, 648LL, 7LL);
      os_log_type_t v205 = v239;
      memcpy((void *)(v204 + 16), v239, 0x24DuLL);
      sub_100005158(v258, v204 + 608);
      swift_beginAccess(v95, v258, 33LL, 0LL);
      uint64_t v206 = (uint64_t)v90[88];
      uint64_t v207 = (uint64_t)v90[89];
      sub_100037850(v205);
      swift_retain(v204);
      sub_1000B1E74(v206, v207);
      v90[88] = (char *)sub_1000B1C74;
      v90[89] = (char *)v204;
      if (v203) {
        *((_BYTE *)v90 + 720) = 1;
      }
      swift_endAccess(v258);
      sub_10003916C(v239);
      swift_release(v242);
      swift_release(v246);
      swift_release(v204);
      sub_100006034(v241);
      return (uint64_t)v90;
    }

    if (qword_100164668 == -1)
    {
LABEL_91:
      BOOL v203 = (dword_100175734 & ~(_DWORD)v91) == 0;
      goto LABEL_92;
    }

LABEL_34:
  uint64_t v98 = v228;
  uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v227 + 16);
  uint64_t v102 = v229;
  v101(v229, v230, v228);
  Swift::String v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)Swift::String v103 = 0;
  os_signpost_id_t v104 = OSSignpostID.rawValue.getter(v103);
  os_signpost_type_t v105 = v94;
  Swift::String v100 = v102;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v63, v105, v104, v91, "", v103, 2u);
  uint64_t v99 = (char *)v101;
  swift_slowDealloc(v103, -1LL, -1LL);

  uint64_t v97 = v227;
  int v87 = v230;
  (*(void (**)(char *, uint64_t))(v227 + 8))(v100, v98);
LABEL_35:
  Swift::String v230 = v99;
  ((void (*)(char *, char *, uint64_t))v99)(v100, v87, v98);
  uint64_t v106 = type metadata accessor for OSSignpostIntervalState(0LL);
  uint64_t v107 = *(unsigned int *)(v106 + 48);
  uint64_t v108 = *(unsigned __int16 *)(v106 + 52);
  uint64_t v227 = v106;
  swift_allocObject(v106, v107, v108);
  uint64_t v242 = OSSignpostIntervalState.init(id:isOpen:)(v100, 1LL);
  uint64_t v234 = *(void *)(v97 + 8);
  ((void (*)(char *, uint64_t))v234)(v87, v98);
  uint64_t v109 = *(void (**)(char *, uint64_t))(v232 + 8);
  v109(v231, v236);
  uint64_t v111 = v42[18];
  uint64_t v110 = v42[19];
  char v112 = (uint64_t *)sub_100026E64();
  uint64_t v113 = *v112;
  unint64_t v114 = v112[1];
  swift_bridgeObjectRetain(v114);
  uint64_t v115 = sub_1000D1CA4(v113, v114);
  uint64_t v117 = v116;
  swift_bridgeObjectRelease(v114);
  *(void *)&v258[0] = v111;
  *((void *)&v258[0] + 1) = v110;
  swift_bridgeObjectRetain(v110);
  v118._uint64_t countAndFlagsBits = v115;
  v118._object = v117;
  String.append(_:)(v118);
  swift_bridgeObjectRelease(v117);
  __int128 v119 = v258[0];
  uint64_t v120 = v241[3];
  uint64_t v121 = v241[4];
  sub_100005110(v241, v120);
  sub_10009C2CC(v120, v121);
  uint64_t v122 = v256;
  uint64_t v123 = v257;
  sub_100005110(&v254, v256);
  (*(void (**)(__int128 *__return_ptr, void, void, uint64_t, uint64_t))(v123 + 16))( &v251,  v119,  *((void *)&v119 + 1),  v122,  v123);
  swift_bridgeObjectRelease(*((void *)&v119 + 1));
  uint64_t v124 = v223;
  if (v252)
  {
    sub_100005158(&v251, (uint64_t)v258);
    sub_100006034(&v254);
    uint64_t v125 = swift_beginAccess(v221, &v251, 0LL, 0LL);
    __int128 v90 = v237;
    uint64_t v126 = (uint64_t)v237[81];
    __chkstk_darwin(v125);
    *(&v214 - 2) = (char *)v90;
    *(&v214 - 1) = (char *)v258;
    type metadata accessor for RealizedInfo(0LL);
    swift_retain(v126);
    uint64_t v127 = v243;
    sub_100006260((void (*)(uint64_t))sub_1000B48A0, (uint64_t)(&v214 - 4), v126);
    uint64_t v243 = v127;
    if (v127)
    {
      sub_10003916C(v239);
      swift_release(v90);
      swift_release(v242);
      swift_release(v126);
LABEL_38:
      sub_100006034(v258);
      goto LABEL_98;
    }

    v233 = (char *)v109;
    swift_release(v126);
    swift_release(v254);
    sub_100006034(v258);
  }

  else
  {
    v233 = (char *)v109;
    sub_100012824((uint64_t)&v251, &qword_100157C58);
    sub_100006034(&v254);
    uint64_t v128 = sub_100005FB4(&qword_10015B118);
    uint64_t v129 = swift_allocObject(v128, 64LL, 7LL);
    *(_OWORD *)(v129 + 16) = v246;
    *(void *)&v258[0] = 0LL;
    *((void *)&v258[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(*((void *)&v258[0] + 1));
    *(void *)&v258[0] = 0x3A676E696E726157LL;
    *((void *)&v258[0] + 1) = 0xE900000000000020LL;
    unint64_t v130 = (uint64_t *)sub_100026E58();
    uint64_t v131 = *v130;
    uint64_t v132 = (void *)v130[1];
    swift_bridgeObjectRetain(v132);
    v133._uint64_t countAndFlagsBits = v131;
    v133._object = v132;
    String.append(_:)(v133);
    swift_bridgeObjectRelease(v132);
    v134._uint64_t countAndFlagsBits = 0x746F6E2073617720LL;
    v134._object = (void *)0xEF21646E756F6620LL;
    String.append(_:)(v134);
    __int128 v135 = v258[0];
    *(void *)(v129 + 56) = &type metadata for String;
    *(_OWORD *)(v129 + 32) = v135;
    print(_:separator:terminator:)(v129, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    uint64_t v136 = swift_bridgeObjectRelease(v129);
    uint64_t v137 = static os_log_type_t.error.getter(v136);
    uint64_t v138 = swift_allocObject(v238, 72LL, 7LL);
    *(_OWORD *)(v138 + 16) = v246;
    uint64_t v140 = *v130;
    uint64_t v139 = v130[1];
    unint64_t v141 = v245;
    *(void *)(v138 + 56) = &type metadata for String;
    *(void *)(v138 + 64) = v141;
    *(void *)(v138 + 32) = v140;
    *(void *)(v138 + sub_10007CFB4(v0 + 40) = v139;
    swift_bridgeObjectRetain(v139);
    char v143 = (void *)static OS_os_log.default.getter(v142);
    os_log(_:dso:log:_:_:)(v137, &_mh_execute_header, v143, "Warning: %{public}s was not found!", 34LL, 2LL, v138);
    swift_bridgeObjectRelease(v138);
  }

  uint64_t v144 = v222;
  __int128 v90 = (char **)v236;
  uint64_t v145 = v240(v222, v235, v236);
  char v146 = *v220;
  char v147 = *((_BYTE *)v220 + 16);
  char v148 = (char **)OSSignposter.logHandle.getter(v145);
  uint64_t v149 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v246) = static os_signpost_type_t.end.getter(v149);
  unint64_t v95 = v148;
  char v150 = OS_os_log.signpostsEnabled.getter();
  uint64_t v151 = v228;
  if ((v150 & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v234)(v124, v151);
    ((void (*)(char *, char **))v233)(v144, v90);
    goto LABEL_54;
  }

  if ((v147 & 1) != 0)
  {
    uint64_t v91 = (char *)v216;
    if (!((unint64_t)v146 >> 32))
    {
      uint64_t v152 = v218;
      unint64_t v95 = (char **)v219;
      if (v146 >> 11 == 27)
      {
        __break(1u);
        goto LABEL_115;
      }

      if (v146 >> 16 > 0x10)
      {
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }

      char v146 = &v262;
      goto LABEL_50;
    }

    mach_port_name_t v167 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v81 = swift_allocObject(v167, 72LL, 7LL);
    unint64_t v166 = v46[17];
    uint64_t v161 = (char *)v81;
    *(_OWORD *)(v81 + 16) = v166;
    uint64_t v82 = *(void *)(v22 + 16);
    uint64_t v83 = _swiftEmptyArrayStorage;
    if (v82)
    {
      v173[0] = _swiftEmptyArrayStorage;
      sub_10000CC84(0, v82, 0);
      uint64_t v84 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      os_signpost_id_t v169 = *(void *)(v9 + 72);
      char v85 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
      do
      {
        uint64_t v86 = v170;
        int v87 = v85(v170, v84, v8);
        uint64_t v175 = 2314LL;
        uint64_t v176 = 0xE200000000000000LL;
        v88._uint64_t countAndFlagsBits = URL.path.getter(v87);
        object = v88._object;
        String.append(_:)(v88);
        swift_bridgeObjectRelease(object);
        __int128 v90 = v175;
        uint64_t v9 = v176;
        (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v86, v8);
        uint64_t v83 = (void *)v173[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v173[0]) & 1) == 0)
        {
          sub_10000CC84(0, v83[2] + 1LL, 1);
          uint64_t v83 = (void *)v173[0];
        }

        char v92 = v83[2];
        uint64_t v91 = v83[3];
        if (v92 >= v91 >> 1)
        {
          sub_10000CC84(v91 > 1, v92 + 1, 1);
          uint64_t v83 = (void *)v173[0];
        }

        v83[2] = v92 + 1;
        uint64_t v93 = &v83[2 * v92];
        v93[4] = v90;
        v93[5] = v9;
        v84 += v169;
        --v82;
        uint64_t v8 = v171;
      }

      while (v82);
      uint64_t v29 = v163;
      uint64_t v34 = v164;
    }

    uint64_t v175 = (uint64_t)v83;
    os_signpost_type_t v94 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    unint64_t v95 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
    char v160 = v94;
    unint64_t v159 = v95;
    char v96 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v94, v95);
    uint64_t v98 = v97;
    swift_bridgeObjectRelease(v83);
    uint64_t v99 = v161;
    *((void *)v161 + 7) = &type metadata for String;
    os_signpost_id_t v158 = sub_100026B64();
    v99[8] = v158;
    v99[4] = v96;
    v99[5] = v98;
    unint64_t v157 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    Swift::String v100 = (void *)static OS_os_log.default.getter(v157);
    uint64_t v101 = static os_log_type_t.default.getter(v100);
    os_log(_:dso:log:type:_:)( "finding bundles in repositories: %{public}s",  43LL,  2LL,  &_mh_execute_header,  v100,  v101,  v99);
    swift_bridgeObjectRelease(v99);

    uint64_t v161 = (char *)swift_allocObject(v167, 72LL, 7LL);
    *((_OWORD *)v161 + 1) = v166;
    uint64_t v102 = v179;
    __int128 v36 = *(void *)(v179 + 16);
    uint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v36) {
      break;
    }
    v173[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v179);
    sub_10000CC84(0, v36, 0);
    uint64_t v29 = sub_100045DBC(v102);
    uint64_t v34 = v103;
    mach_port_name_t v167 = v102 + 56;
    os_signpost_type_t v105 = v104 & 1;
    uint64_t v30 = v172;
    *(void *)&unint64_t v166 = v102;
    while ((v29 & 0x8000000000000000LL) == 0 && v29 < 1LL << *(_BYTE *)(v102 + 32))
    {
      if (*(_DWORD *)(v102 + 36) != (_DWORD)v34) {
        goto LABEL_67;
      }
      LODWORD(v169) = v105;
      uint64_t v106 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))( v170,  *(void *)(v102 + 48) + *(void *)(v30 + 72) * v29,  v8);
      uint64_t v107 = v168;
      uint64_t v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 32))(v168, v106, v8);
      uint64_t v175 = 2314LL;
      uint64_t v176 = 0xE200000000000000LL;
      v109._uint64_t countAndFlagsBits = URL.path.getter(v108);
      uint64_t v110 = v109._object;
      String.append(_:)(v109);
      swift_bridgeObjectRelease(v110);
      uint64_t v111 = v8;
      uint64_t v113 = v175;
      char v112 = v176;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v107, v111);
      uint64_t v22 = v173[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v173[0]) & 1) == 0)
      {
        sub_10000CC84(0, *(void *)(v22 + 16) + 1LL, 1);
        uint64_t v22 = v173[0];
      }

      uint64_t v115 = *(void *)(v22 + 16);
      unint64_t v114 = *(void *)(v22 + 24);
      uint64_t v9 = v115 + 1;
      if (v115 >= v114 >> 1)
      {
        sub_10000CC84(v114 > 1, v115 + 1, 1);
        uint64_t v22 = v173[0];
      }

      *(void *)(v22 + 16) = v9;
      unint64_t v116 = v22 + 16 * v115;
      *(void *)(v116 + 32) = v113;
      *(void *)(v116 + sub_10007CFB4(v0 + 40) = v112;
      uint64_t v102 = v166;
      uint64_t v117 = sub_100045E5C(v29, (int)v34, v169 & 1, v166);
      uint64_t v29 = v117;
      uint64_t v34 = (char *)v118;
      os_signpost_type_t v105 = v119 & 1;
      --v36;
      uint64_t v8 = v171;
      uint64_t v30 = v172;
      if (!v36)
      {
        sub_10004B058(v117, v118, v105);
        swift_bridgeObjectRelease(v102);
        uint64_t v29 = v163;
        uint64_t v34 = v164;
        goto LABEL_55;
      }
    }

LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  uint64_t v91 = (char *)v216;
  if (!v146)
  {
    __break(1u);
    goto LABEL_107;
  }

  uint64_t v152 = v218;
  unint64_t v95 = (char **)v219;
LABEL_50:
  uint64_t v153 = v242;
  uint64_t v154 = swift_retain(v242);
  checkForErrorAndConsumeState(state:)(v154);
  swift_release(v153);
  if ((*(unsigned int (**)(char *, char **))(v152 + 88))(v91, v95) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v155 = "[Error] Interval already ended";
  }

  else
  {
    (*(void (**)(char *, char **))(v152 + 8))(v91, v95);
    uint64_t v155 = "";
  }

  uint64_t v156 = v229;
  ((void (*)(char *, char *, uint64_t))v230)(v229, v124, v151);
  unint64_t v157 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)unint64_t v157 = 0;
  os_signpost_id_t v158 = OSSignpostID.rawValue.getter(v157);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v148,  (os_signpost_type_t)v246,  v158,  v146,  v155,  v157,  2u);
  swift_slowDealloc(v157, -1LL, -1LL);

  unint64_t v159 = (void (*)(char *, uint64_t))v234;
  ((void (*)(char *, uint64_t))v234)(v124, v151);
  __int128 v90 = (char **)v236;
  ((void (*)(char *, uint64_t))v233)(v222, v236);
  v159(v156, v151);
LABEL_54:
  v240(v225, v235, (uint64_t)v90);
  char v160 = sub_1000902C0();
  uint64_t v161 = *v160;
  char v162 = *((_BYTE *)v160 + 16);
  uint64_t v163 = static OSSignpostID.exclusive.getter(v160);
  unint64_t v164 = (char **)OSSignposter.logHandle.getter(v163);
  LODWORD(v91) = static os_signpost_type_t.begin.getter(v164);
  unint64_t v95 = v164;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    uint64_t v165 = v229;
    __int128 v90 = (char **)v230;
    uint64_t v91 = (char *)v226;
    unint64_t v166 = (void (*)(char *, uint64_t))v234;
    goto LABEL_64;
  }

  LODWORD(v246) = (_DWORD)v91;
  if ((v162 & 1) != 0)
  {
    if ((unint64_t)v161 >> 32)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }

    uint64_t v91 = (char *)v226;
    __int128 v90 = (char **)v230;
    if (v161 >> 11 != 27)
    {
      if (v161 >> 16 <= 0x10)
      {
        uint64_t v161 = &v263;
        goto LABEL_63;
      }

      goto LABEL_111;
    }

LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }

  __int128 v90 = (char **)v230;
  if (!v161)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }

  uint64_t v91 = (char *)v226;
LABEL_63:
  mach_port_name_t v167 = v229;
  ((void (*)(char *, char *, uint64_t))v90)(v229, v91, v151);
  char v168 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)char v168 = 0;
  os_signpost_id_t v169 = OSSignpostID.rawValue.getter(v168);
  char v170 = v161;
  uint64_t v165 = v167;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v164,  (os_signpost_type_t)v246,  v169,  v170,  "",  v168,  2u);
  swift_slowDealloc(v168, -1LL, -1LL);

  unint64_t v166 = (void (*)(char *, uint64_t))v234;
  ((void (*)(char *, uint64_t))v234)(v167, v151);
LABEL_64:
  uint64_t v171 = v227;
  ((void (*)(char *, char *, uint64_t))v90)(v165, v91, v151);
  swift_allocObject(v171, *(unsigned int *)(v171 + 48), *(unsigned __int16 *)(v171 + 52));
  uint64_t v172 = OSSignpostIntervalState.init(id:isOpen:)(v165, 1LL);
  v166(v91, v151);
  uint64_t v173 = v236;
  __int128 v174 = v233;
  ((void (*)(char *, uint64_t))v233)(v225, v236);
  __int128 v90 = v237;
  uint64_t v175 = v243;
  (*((void (**)(void, uint64_t))*v237 + 49))(0LL, 1LL);
  if (v175)
  {
    sub_10003916C(v239);
    swift_release(v90);
    swift_release(v242);
    uint64_t v176 = v172;
LABEL_97:
    swift_release(v176);
LABEL_98:
    sub_100006034(v241);
    return (uint64_t)v90;
  }

  v233 = v174;
  uint64_t v243 = 0LL;
  int v87 = v217;
  uint64_t v177 = v240(v217, v235, v173);
  unint64_t v245 = (unint64_t)*v160;
  char v178 = *((_BYTE *)v160 + 16);
  uint64_t v179 = OSSignposter.logHandle.getter(v177);
  id v180 = v215;
  *(void *)&__int128 v246 = v172;
  unint64_t v181 = (void *)v179;
  uint64_t v182 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v244) = static os_signpost_type_t.end.getter(v182);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v234)(v180, v228);
    ((void (*)(char *, uint64_t))v233)(v87, v173);
    LODWORD(v87) = v224;
    goto LABEL_80;
  }

  if ((v178 & 1) == 0)
  {
    uint64_t v183 = v217;
    if (v245)
    {
      uint64_t v184 = (os_log_s *)v181;
      uint64_t v186 = v218;
      uint64_t v185 = v219;
      uint64_t v187 = v214;
LABEL_76:
      uint64_t v188 = v246;
      uint64_t v189 = swift_retain(v246);
      checkForErrorAndConsumeState(state:)(v189);
      swift_release(v188);
      if ((*(unsigned int (**)(char *, uint64_t))(v186 + 88))(v187, v185) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v190 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v186 + 8))(v187, v185);
        unint64_t v190 = "";
      }

      LODWORD(v87) = v224;
      unint64_t v191 = v165;
      unint64_t v192 = v180;
      uint64_t v193 = v165;
      uint64_t v194 = v180;
      uint64_t v195 = v228;
      ((void (*)(char *, char *, uint64_t))v230)(v191, v192, v228);
      uint64_t v196 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v196 = 0;
      os_signpost_id_t v197 = OSSignpostID.rawValue.getter(v196);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v184,  (os_signpost_type_t)v244,  v197,  (const char *)v245,  v190,  v196,  2u);
      swift_slowDealloc(v196, -1LL, -1LL);

      os_log_type_t v198 = (void (*)(char *, uint64_t))v234;
      ((void (*)(char *, uint64_t))v234)(v194, v195);
      ((void (*)(char *, uint64_t))v233)(v183, v236);
      v198(v193, v195);
      __int128 v90 = v237;
LABEL_80:
      uint64_t v63 = (char **)v246;
      if (qword_1001646A0 == -1) {
        goto LABEL_81;
      }
      goto LABEL_105;
    }

    goto LABEL_116;
  }

  uint64_t v183 = v217;
  if (HIDWORD(v245))
  {
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }

  uint64_t v184 = (os_log_s *)v181;
  uint64_t v186 = v218;
  uint64_t v185 = v219;
  uint64_t v187 = v214;
  if (v245 >> 11 != 27)
  {
    if (WORD1(v245) <= 0x10u)
    {
      unint64_t v245 = (unint64_t)&v264;
      goto LABEL_76;
    }

    goto LABEL_118;
  }

LABEL_119:
  __break(1u);
LABEL_120:
  uint64_t result = swift_release(*(void *)&v258[0]);
  __break(1u);
  return result;
}

uint64_t sub_1000A729C()
{
  uint64_t v1 = v0;
  v134[0] = 0LL;
  v134[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(270LL);
  v2._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v2._object = (void *)0x80000001001290E0LL;
  String.append(_:)(v2);
  uint64_t v3 = v0[2];
  if (v3)
  {
    uint64_t v4 = v0[1];
    uint64_t v5 = (void *)v0[2];
  }

  else
  {
    uint64_t v5 = (void *)0xE500000000000000LL;
    uint64_t v4 = 0x296C696E28LL;
  }

  swift_bridgeObjectRetain(v3);
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._uint64_t countAndFlagsBits = 0x3A6D65747379530ALL;
  v7._object = (void *)0xE900000000000020LL;
  String.append(_:)(v7);
  uint64_t v8 = v0[4];
  if (v8)
  {
    uint64_t v9 = v0[3];
    uint64_t v10 = (void *)v0[4];
  }

  else
  {
    uint64_t v10 = (void *)0xE500000000000000LL;
    uint64_t v9 = 0x296C696E28LL;
  }

  swift_bridgeObjectRetain(v8);
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._uint64_t countAndFlagsBits = 0x61696C697875410ALL;
  v12._object = (void *)0xEC000000203A7972LL;
  String.append(_:)(v12);
  uint64_t v13 = v0[6];
  if (v13)
  {
    uint64_t v14 = v0[5];
    uint64_t v15 = (void *)v0[6];
  }

  else
  {
    uint64_t v15 = (void *)0xE500000000000000LL;
    uint64_t v14 = 0x296C696E28LL;
  }

  swift_bridgeObjectRetain(v13);
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v17._object = (void *)0x8000000100129100LL;
  String.append(_:)(v17);
  uint64_t v126 = v0[9];
  v134[0] = v126;
  swift_bridgeObjectRetain(v126);
  uint64_t v18 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  uint64_t v19 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v20 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v18, v19);
  uint64_t v22 = v21;
  sub_10005C854(&v126);
  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._uint64_t countAndFlagsBits = 0x20656C646E75420ALL;
  v24._object = (void *)0xEF203A7368746150LL;
  String.append(_:)(v24);
  uint64_t v125 = v0[10];
  v134[0] = v125;
  swift_bridgeObjectRetain(v125);
  uint64_t v25 = sub_100005FB4(&qword_10015B120);
  uint64_t v26 = sub_100012B78(&qword_10015B128, &qword_10015B120, (uint64_t)&protocol conformance descriptor for Set<A>);
  unint64_t v27 = sub_10002657C();
  uint64_t v28 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v25, v26, v27);
  uint64_t v30 = v29;
  sub_10005C854(&v125);
  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v32._object = (void *)0x8000000100129120LL;
  String.append(_:)(v32);
  uint64_t v124 = v0[11];
  v134[0] = v124;
  swift_bridgeObjectRetain(v124);
  uint64_t v33 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v25, v26, v27);
  __int128 v35 = v34;
  sub_10005C854(&v124);
  v36._uint64_t countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v35);
  v37._object = (void *)0x8000000100129140LL;
  v37._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v37);
  uint64_t v123 = v0[12];
  v134[0] = v123;
  swift_bridgeObjectRetain(v123);
  uint64_t v119 = v19;
  uint64_t v120 = v18;
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v18, v19);
  unint64_t v40 = v39;
  sub_10005C854(&v123);
  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v40);
  v42._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v42._object = (void *)0x8000000100129160LL;
  String.append(_:)(v42);
  uint64_t v43 = v0[13];
  unint64_t v44 = (void *)v0[14];
  swift_bridgeObjectRetain(v44);
  v45._uint64_t countAndFlagsBits = v43;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  v46._object = (void *)0x8000000100129180LL;
  v46._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v46);
  uint64_t v47 = v0[15];
  uint64_t v48 = (void *)v0[16];
  swift_bridgeObjectRetain(v48);
  v49._uint64_t countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._uint64_t countAndFlagsBits = 0x746E61697261560ALL;
  v50._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v50);
  sub_1000263D8((uint64_t)(v0 + 17), (uint64_t)v122, &qword_10015B130);
  sub_1000263D8((uint64_t)v122, (uint64_t)&v127, &qword_10015B130);
  if (v127 == 5)
  {
    unint64_t v51 = 0xE500000000000000LL;
    uint64_t v52 = 0x296C696E28LL;
  }

  else
  {
    uint64_t v52 = sub_10009052C(v127);
    unint64_t v51 = v53;
  }

  unint64_t v54 = v51;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease(v51);
  v55._uint64_t countAndFlagsBits = 0x7265746C69460A0ALL;
  v55._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v55);
  sub_1000263D8((uint64_t)(v0 + 68), (uint64_t)v121, &qword_10015B110);
  sub_1000263D8((uint64_t)v121, (uint64_t)v134, &qword_10015B110);
  if (!v134[0])
  {
    uint64_t v70 = (void *)0xE500000000000000LL;
    uint64_t v71 = 0x296C696E28LL;
    goto LABEL_32;
  }

  uint64_t v56 = v135;
  uint64_t v136 = v135;
  if ((unint64_t)v135 >> 62)
  {
    if (v135 >= 0) {
      uint64_t v72 = v135 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v72 = v135;
    }
    swift_bridgeObjectRetain(v135);
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter(v72);
    if (v57) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v57 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v135);
    if (v57)
    {
LABEL_16:
      uint64_t v132 = _swiftEmptyArrayStorage;
      uint64_t result = sub_10000CC84(0, v57 & ~(v57 >> 63), 0);
      if (v57 < 0)
      {
        __break(1u);
        goto LABEL_59;
      }

      uint64_t v113 = v26;
      uint64_t v115 = v25;
      uint64_t v117 = v1;
      uint64_t v59 = 0LL;
      uint64_t v60 = v132;
      do
      {
        if ((v56 & 0xC000000000000001LL) != 0) {
          id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v56);
        }
        else {
          id v61 = *(id *)(v56 + 8 * v59 + 32);
        }
        char v62 = v61;
        id v63 = [v61 predicateFormat];
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        uint64_t v66 = v65;

        uint64_t v132 = v60;
        unint64_t v68 = v60[2];
        unint64_t v67 = v60[3];
        if (v68 >= v67 >> 1)
        {
          sub_10000CC84(v67 > 1, v68 + 1, 1);
          uint64_t v60 = v132;
        }

        ++v59;
        v60[2] = v68 + 1;
        uint64_t v69 = &v60[2 * v68];
        v69[4] = v64;
        v69[5] = v66;
      }

      while (v57 != v59);
      sub_10005C854(&v136);
      uint64_t v25 = v115;
      uint64_t v1 = v117;
      uint64_t v26 = v113;
      goto LABEL_31;
    }
  }

  sub_10005C854(&v136);
  uint64_t v60 = _swiftEmptyArrayStorage;
LABEL_31:
  uint64_t v132 = v60;
  uint64_t v71 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v120, v119);
  uint64_t v70 = v73;
  swift_bridgeObjectRelease(v60);
LABEL_32:
  v74._uint64_t countAndFlagsBits = v71;
  v74._object = v70;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(v70);
  v75._uint64_t countAndFlagsBits = 0x207265746C69460ALL;
  v75._object = (void *)0xED0000203A6C6C41LL;
  String.append(_:)(v75);
  sub_1000263D8((uint64_t)v121, (uint64_t)&v132, &qword_10015B110);
  if (v132)
  {
    uint64_t v76 = v133;
    uint64_t v137 = v133;
    if ((unint64_t)v133 >> 62)
    {
      if (v133 >= 0) {
        uint64_t v91 = v133 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v91 = v133;
      }
      swift_bridgeObjectRetain(v133);
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter(v91);
      if (v77)
      {
LABEL_35:
        unint64_t v130 = _swiftEmptyArrayStorage;
        uint64_t result = sub_10000CC84(0, v77 & ~(v77 >> 63), 0);
        if ((v77 & 0x8000000000000000LL) == 0)
        {
          uint64_t v114 = v26;
          uint64_t v116 = v25;
          Swift::String v118 = v1;
          uint64_t v78 = 0LL;
          uint64_t v79 = v130;
          do
          {
            if ((v76 & 0xC000000000000001LL) != 0) {
              id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
            }
            else {
              id v80 = *(id *)(v76 + 8 * v78 + 32);
            }
            uint64_t v81 = v80;
            id v82 = [v80 predicateFormat];
            uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            uint64_t v85 = v84;

            unint64_t v130 = v79;
            unint64_t v87 = v79[2];
            unint64_t v86 = v79[3];
            if (v87 >= v86 >> 1)
            {
              sub_10000CC84(v86 > 1, v87 + 1, 1);
              uint64_t v79 = v130;
            }

            ++v78;
            v79[2] = v87 + 1;
            uint64_t v88 = &v79[2 * v87];
            v88[4] = v83;
            v88[5] = v85;
          }

          while (v77 != v78);
          sub_10005C854(&v137);
          uint64_t v25 = v116;
          uint64_t v1 = v118;
          uint64_t v26 = v114;
          goto LABEL_50;
        }

uint64_t sub_1000A7D18@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v22 = a7;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for KernelCollection(0LL);
  uint64_t v15 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v16 = a3[13];
  uint64_t v17 = a3[14];
  sub_100005F70(a6, (uint64_t)v25);
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = sub_10004D754(v15, (uint64_t)v14, v16, v17, a5, v25);
  uint64_t v19 = v26;
  uint64_t v20 = sub_10009D754(v18, v23);
  uint64_t result = swift_release(v18);
  if (!v19) {
    *uint64_t v22 = v20;
  }
  return result;
}

void (*sub_1000A7E34(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  Swift::String v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  _OWORD v6[5] = sub_1000AF3F4(v6, a2, a3);
  return sub_10002936C;
}

uint64_t sub_1000A7EA0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100005110(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t sub_1000A7EE8()
{
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 664;
  swift_beginAccess(v3, v12, 33LL, 0LL);
  uint64_t v4 = *(void (**)(uint64_t))(v2 + 672);
  if (v4)
  {
    if ((*(_BYTE *)(v2 + 688) & 1) != 0)
    {
      uint64_t v5 = *(void *)(v2 + 680);
      swift_retain(v5);
      uint64_t v6 = v3;
      uint64_t v7 = v5;
      v4(v6);
      if (v1)
      {
        swift_endAccess(v12);
        sub_1000B1E74((uint64_t)v4, v5);
        return v7;
      }

      sub_1000B1E74((uint64_t)v4, v5);
    }

    uint64_t v8 = swift_endAccess(v12);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192LL))(v8);
    sub_1000A8034(v9);
    uint64_t v7 = v10;
    swift_bridgeObjectRelease(v9);
    return v7;
  }

  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000020LL,  0x80000001001291C0LL,  "driverkitd/Manager.swift",  24LL,  2LL,  695LL,  0);
  __break(1u);
  return result;
}

void sub_1000A8034(uint64_t a1)
{
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  __int128 v35 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & v3;
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    if (*(void *)(v12 + 16))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = v17[1];
      uint64_t v32 = *v17;
      sub_100005F70(v12 + 32, (uint64_t)v34);
      unint64_t v19 = v2[2];
      if (v2[3] <= v19)
      {
        uint64_t v20 = v19 + 1;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v12);
        sub_1000AFB24(v20, 1LL);
        uint64_t v2 = v35;
      }

      else
      {
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v12);
      }

      Hasher.init(_seed:)(v33, v2[5]);
      String.hash(into:)(v33, v32, v18);
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = v2 + 8;
      uint64_t v23 = -1LL << *((_BYTE *)v2 + 32);
      unint64_t v24 = v21 & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~v2[(v24 >> 6) + 8]) == 0)
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = v22[v25];
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_37;
          }
        }

        goto LABEL_41;
      }

      unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~v2[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_37:
      *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
      Swift::String v31 = (void *)(v2[6] + 16 * v26);
      *Swift::String v31 = v32;
      v31[1] = v18;
      sub_100005158(v34, v2[7] + 40 * v26);
      ++v2[2];
      swift_bridgeObjectRelease(v12);
      if (v7) {
        goto LABEL_5;
      }
    }

    else if (v7)
    {
      goto LABEL_5;
    }

uint64_t sub_1000A8344()
{
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 704);
  if (v2)
  {
    if ((*(_BYTE *)(v0 + 720) & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0 + 712);
      swift_retain(v3);
      v2(v0 + 696);
      if (v1)
      {
        swift_endAccess(v5);
        return sub_1000B1E74((uint64_t)v2, v3);
      }

      sub_1000B1E74((uint64_t)v2, v3);
    }

    return swift_endAccess(v5);
  }

  else
  {
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000020LL,  0x80000001001291C0LL,  "driverkitd/Manager.swift",  24LL,  2LL,  695LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1000A845C(char a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v13 = v4 + 2;
  uint64_t v14 = v4[5];
  uint64_t v15 = v5[6];
  sub_100005110(v13, v14);
  sub_1001073DC(v14, v15);
  uint64_t v17 = v52;
  uint64_t v16 = v53;
  sub_100005110(&v51, v52);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v16 + 112))( &v48,  a2,  a3,  1LL,  v17,  v16);
  if (v49)
  {
    sub_100005158(&v48, (uint64_t)&v54);
    sub_100006034(&v51);
    if ((a4 & 1) != 0)
    {
      uint64_t v18 = v56;
      uint64_t v19 = v57;
      sub_100005110(&v54, v56);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 80))(&v51, v18, v19);
      sub_100005F70((uint64_t)&v54, (uint64_t)v47);
      if (v52)
      {
        sub_100006034(v47);
        sub_100005158(&v51, (uint64_t)&v48);
      }

      else
      {
        sub_100005158(v47, (uint64_t)&v48);
        sub_100012824((uint64_t)&v51, &qword_100158910);
      }

      uint64_t v30 = v49;
      uint64_t v31 = v50;
      sub_100005110(&v48, v49);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v31 + 72))(&v51, v30, v31);
      sub_100006034(&v48);
    }

    else
    {
      sub_100005F70((uint64_t)&v54, (uint64_t)&v51);
    }

    uint64_t v32 = type metadata accessor for KernelCollection(0LL);
    uint64_t v33 = v5[7];
    URL.init(fileURLWithPath:)(a2, a3);
    uint64_t v34 = v5[20];
    uint64_t v35 = v5[21];
    sub_100005F70((uint64_t)&v51, (uint64_t)&v48);
    swift_bridgeObjectRetain(v35);
    uint64_t v26 = sub_10004D754(v33, (uint64_t)v12, v34, v35, a1, &v48);
    uint64_t v36 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + 16) = xmmword_10010F110;
    *(void *)&__int128 v48 = v26;
    uint64_t v38 = sub_100012860(&qword_100158908, type metadata accessor for KernelCollection, (uint64_t)&unk_1001109C0);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v32, v38);
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_100026B64();
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + sub_10007CFB4(v0 + 40) = v41;
    uint64_t v42 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v43 = (void *)static OS_os_log.default.getter(v42);
    uint64_t v44 = static os_log_type_t.default.getter(v43);
    os_log(_:dso:log:type:_:)("loaded collection: %{public}s", 29LL, 2LL, &_mh_execute_header, v43, v44, v37);
    swift_bridgeObjectRelease(v37);

    sub_100006034(&v51);
    sub_100006034(&v54);
  }

  else
  {
    sub_100012824((uint64_t)&v48, &qword_100158910);
    sub_100006034(&v51);
    unint64_t v54 = 0LL;
    unint64_t v55 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    swift_bridgeObjectRelease(v55);
    unint64_t v54 = 0xD00000000000001ALL;
    unint64_t v55 = 0x80000001001291F0LL;
    LOBYTE(v51) = a1;
    unint64_t v20 = sub_10004FA08();
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for CollectionKind,  v20);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23._uint64_t countAndFlagsBits = 0x7463656C6C6F6320LL;
    v23._object = (void *)0xEF207461206E6F69LL;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = a2;
    v24._object = a3;
    String.append(_:)(v24);
    unint64_t v25 = v54;
    uint64_t v26 = v55;
    unint64_t v27 = sub_100012624();
    uint64_t v28 = swift_allocError(&type metadata for KMError, v27, 0LL, 0LL);
    *(void *)uint64_t v29 = v25;
    *(void *)(v29 + 8) = v26;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(void *)(v29 + 64) = 0LL;
    *(_BYTE *)(v29 + 72) = 10;
    swift_willThrow(v28);
  }

  return v26;
}

uint64_t sub_1000A8864()
{
  return sub_1000A88F4(0, 0xD00000000000002FLL, 0x8000000100129230LL);
}

uint64_t sub_1000A8894()
{
  return sub_1000A88F4(1u, 0xD000000000000028LL, 0x8000000100129260LL);
}

uint64_t sub_1000A88C4()
{
  return sub_1000A88F4(2u, 0xD000000000000031LL, 0x8000000100129290LL);
}

uint64_t sub_1000A88F4(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000D42D4(a1);
  uint64_t v7 = v6;
  unint64_t v8 = sub_100012624();
  uint64_t v9 = swift_allocError(&type metadata for KMError, v8, 0LL, 0LL);
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = v7;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(void *)(v10 + 64) = 0LL;
  *(_BYTE *)(v10 + 72) = 6;
  return swift_willThrow(v9);
}

uint64_t sub_1000A8978()
{
  uint64_t v0 = sub_1000D42D4(0);
  uint64_t v2 = v1;
  unint64_t v3 = sub_100012624();
  uint64_t v4 = swift_allocError(&type metadata for KMError, v3, 0LL, 0LL);
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = v2;
  *(void *)(v5 + 16) = 0xD00000000000002FLL;
  *(void *)(v5 + 24) = 0x8000000100129230LL;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 64) = 0LL;
  *(_BYTE *)(v5 + 72) = 6;
  return swift_willThrow(v4);
}

void *sub_1000A8A08()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  sub_100005110(v2, v3);
  sub_100071818(v3, v4);
  uint64_t v5 = v21;
  uint64_t v6 = v22;
  sub_100005110(v20, v21);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v5, v6);
  if (v8)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    sub_100006034(v20);
    uint64_t result = sub_100090450(v9, v10, 0LL, 0LL);
    if (result != (void *)5) {
      return result;
    }
  }

  else
  {
    sub_100006034(v20);
  }

  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  sub_100005110(v2, v12);
  sub_100071818(v12, v13);
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  sub_100005110(v20, v21);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 80))(v14, v15);
  if (!v17)
  {
    sub_100006034(v20);
    return 0LL;
  }

  uint64_t v18 = v16;
  unint64_t v19 = v17;
  sub_100006034(v20);
  uint64_t result = sub_100090450(v18, v19, 0LL, 0LL);
  if (result == (void *)5) {
    return 0LL;
  }
  return result;
}

void *sub_1000A8B58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v28 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v28 - v14;
  URL.init(fileURLWithPath:)(a1, a2);
  uint64_t v16 = v3[14];
  uint64_t v29 = v3[15];
  uint64_t v30 = v16;
  URL.appendingPathComponent(_:)(v16, v29);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v18 = v17(v10, v6);
  URL.deletingLastPathComponent()(v18);
  v17(v13, v6);
  uint64_t v19 = v3[5];
  uint64_t v20 = v3[6];
  sub_100005110(v3 + 2, v19);
  sub_1001073DC(v19, v20);
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  Swift::String v23 = sub_100005110(v31, v32);
  uint64_t v24 = v34;
  (*(void (**)(char *, uint64_t, void, uint64_t, uint64_t))(v22 + 48))(v15, 1LL, 0LL, v21, v22);
  if (v24)
  {
    v17(v15, v6);
    sub_100006034(v31);
  }

  else
  {
    sub_100006034(v31);
    unint64_t v25 = sub_1000A8A08();
    URL.init(fileURLWithPath:)(v30, v29);
    sub_100037B00((unint64_t)v25);
    sub_1000D46CC((uint64_t)v25, (uint64_t)v13);
    sub_100039428((unint64_t)v25);
    uint64_t v26 = v17(v10, v6);
    Swift::String v23 = (void *)URL.path.getter(v26);
    sub_100039428((unint64_t)v25);
    v17(v13, v6);
    v17(v15, v6);
  }

  return v23;
}

uint64_t sub_1000A8D68(uint64_t a1, unint64_t a2)
{
  unint64_t v156 = a2;
  uint64_t v155 = a1;
  uint64_t v153 = sub_100005FB4(&qword_10015B140);
  __chkstk_darwin(v153);
  uint64_t v154 = (uint64_t)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v164 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  *(void *)&__int128 v166 = (char *)&v152 - v7;
  uint64_t v8 = type metadata accessor for URL(0LL);
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  char v168 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v170 = (uint64_t)&v152 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v161 = (char *)&v152 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  int64_t v169 = (int64_t)&v152 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v152 - v18;
  uint64_t v163 = v2;
  uint64_t v20 = *(void *)(v2 + 128);
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
  if (v21)
  {
    uint64_t v175 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v20);
    sub_10003DFCC(0LL, v21, 0);
    uint64_t v22 = v175;
    Swift::String v23 = (void *)(v20 + 40);
    do
    {
      uint64_t v25 = *(v23 - 1);
      uint64_t v24 = *v23;
      swift_bridgeObjectRetain(*v23);
      URL.init(fileURLWithPath:)(v25, v24);
      swift_bridgeObjectRelease(v24);
      uint64_t v175 = v22;
      unint64_t v27 = *(void *)(v22 + 16);
      unint64_t v26 = *(void *)(v22 + 24);
      uint64_t v28 = v22;
      if (v27 >= v26 >> 1)
      {
        sub_10003DFCC(v26 > 1, v27 + 1, 1);
        uint64_t v28 = v175;
      }

      v23 += 2;
      *(void *)(v28 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))( v28 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v27,
        v19,
        v8);
      --v21;
      uint64_t v22 = v28;
    }

    while (v21);
    swift_bridgeObjectRelease(v20);
  }

  uint64_t v29 = *(void *)(v163 + 136);
  int64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v171 = v8;
  int64_t v172 = v9;
  uint64_t v162 = v22;
  if (v30)
  {
    uint64_t v175 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v29);
    sub_10003DFCC(0LL, v30, 0);
    uint64_t v31 = (void *)v175;
    int64_t v32 = sub_100045DBC(v29);
    uint64_t v34 = v33;
    uint64_t v22 = v35 & 1;
    uint64_t v167 = v29 + 56;
    int64_t v36 = v169;
    do
    {
      if (v32 < 0 || v32 >= 1LL << *(_BYTE *)(v29 + 32))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }

      if (*(_DWORD *)(v29 + 36) != (_DWORD)v34) {
        goto LABEL_64;
      }
      uint64_t v37 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v32);
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      swift_bridgeObjectRetain(v39);
      URL.init(fileURLWithPath:)(v38, v39);
      swift_bridgeObjectRelease(v39);
      uint64_t v175 = (uint64_t)v31;
      unint64_t v41 = v31[2];
      unint64_t v40 = v31[3];
      if (v41 >= v40 >> 1)
      {
        sub_10003DFCC(v40 > 1, v41 + 1, 1);
        uint64_t v31 = (void *)v175;
      }

      void v31[2] = v41 + 1;
      unint64_t v9 = v172;
      unint64_t v42 = (unint64_t)v31
      uint64_t v8 = v171;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v172 + 32))(v42, v36, v171);
      int64_t v43 = sub_100045E5C(v32, (int)v34, v22 & 1, v29);
      int64_t v32 = v43;
      uint64_t v34 = (char *)v44;
      uint64_t v22 = v45 & 1;
      --v30;
    }

    while (v30);
    sub_10004B058(v43, v44, v45 & 1);
    swift_bridgeObjectRelease(v29);
    uint64_t v22 = v162;
  }

  int64_t v36 = sub_100012054((uint64_t)v31);
  swift_bridgeObjectRelease(v31);
  uint64_t v179 = v36;
  uint64_t v29 = v163;
  LODWORD(v36) = *(_DWORD *)(v163 + 640);
  uint64_t v34 = v164;
  int64_t v30 = v166;
  if (qword_1001646B0 != -1) {
    goto LABEL_68;
  }
  while (1)
  {
    uint64_t v46 = &unk_10010F000;
    if ((dword_100175758 & ~(_DWORD)v36) != 0)
    {
      uint64_t v47 = *(void *)(v29 + 40);
      uint64_t v48 = *(void *)(v29 + 48);
      sub_100005110((void *)(v29 + 16), v47);
      sub_100071818(v47, v48);
      uint64_t v49 = v177;
      uint64_t v50 = v178;
      sub_100005110(&v175, v177);
      __int128 v51 = sub_10006B998();
      swift_bridgeObjectRetain(*v51);
      sub_10006BE1C(2);
      v173[3] = &type metadata for KernelRequests.GetLoaded;
      v173[4] = &off_100148548;
      v173[0] = v52;
      uint64_t v53 = sub_100005FB4(&qword_100158900);
      uint64_t v54 = v165;
      sub_10006B1D0(v173, v53, v49, v53, v50, (uint64_t)&v174);
      if (v54)
      {
        sub_100006034(v173);
        sub_100006034(&v175);
        uint64_t v55 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v56 = swift_allocObject(v55, 72LL, 7LL);
        *(_OWORD *)(v56 + 16) = xmmword_10010F110;
        uint64_t v175 = v54;
        swift_errorRetain(v54);
        uint64_t v57 = sub_100005FB4(&qword_10015AB20);
        uint64_t v58 = String.init<A>(describing:)(&v175, v57);
        uint64_t v60 = v59;
        *(void *)(v56 + 56) = &type metadata for String;
        *(void *)(v56 + 64) = sub_100026B64();
        *(void *)(v56 + 32) = v58;
        *(void *)(v56 + sub_10007CFB4(v0 + 40) = v60;
        uint64_t v61 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        char v62 = (void *)static OS_os_log.default.getter(v61);
        uint64_t v63 = static os_log_type_t.default.getter(v62);
        os_log(_:dso:log:type:_:)( "Could not search for bundles in auxKC: %{public}s",  49LL,  2LL,  &_mh_execute_header,  v62,  v63,  v56);
        swift_bridgeObjectRelease(v56);

        swift_errorRelease(v54);
        uint64_t v165 = 0LL;
      }

      else
      {
        sub_100006034(v173);
        uint64_t v64 = v174;
        sub_100006034(&v175);
        sub_1000A9CBC(v64);
        uint64_t v66 = v65;
        uint64_t v165 = 0LL;
        swift_bridgeObjectRelease(v64);
        uint64_t v67 = *(void *)(v66 + 16);
        if (v67)
        {
          unint64_t v68 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          uint64_t v160 = v66;
          unint64_t v69 = v66 + v68;
          uint64_t v167 = *(void *)(v9 + 72);
          int64_t v169 = *(void *)(v9 + 16);
          unint64_t v9 = v172;
          uint64_t v70 = v161;
          ((void (*)(int64_t, unint64_t, uint64_t))v169)(v30, v69, v8);
          while (1)
          {
            Swift::String v75 = *(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
            v75(v30, 0LL, 1LL, v8);
            if ((*(unsigned int (**)(int64_t, uint64_t, uint64_t))(v9 + 48))(v30, 1LL, v8) == 1)
            {
              swift_bridgeObjectRelease(v160);
              uint64_t v29 = v163;
              uint64_t v22 = v162;
              uint64_t v46 = (_OWORD *)&unk_10010F000;
              goto LABEL_34;
            }

            uint64_t v76 = (*(uint64_t (**)(char *, int64_t, uint64_t))(v9 + 32))(v70, v30, v8);
            __chkstk_darwin(v76);
            *(&v152 - 2) = (uint64_t)v70;
            uint64_t v77 = v162;
            swift_bridgeObjectRetain(v162);
            uint64_t v78 = v165;
            uint64_t v79 = sub_1000AA12C((uint64_t (*)(char *))sub_1000B240C, (uint64_t)(&v152 - 4), v77);
            uint64_t v165 = v78;
            BOOL v80 = sub_1000D26D0();
            swift_bridgeObjectRelease(v79);
            if (v80)
            {
              uint64_t v71 = v168;
              ((void (*)(char *, char *, uint64_t))v169)(v168, v70, v8);
              uint64_t v72 = v170;
              sub_10000E390(v170, v71);
              uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
              uint64_t v74 = v72;
              int64_t v30 = v166;
              v73(v74, v8);
              v73((uint64_t)v70, v8);
            }

            else
            {
              (*(void (**)(char *, uint64_t))(v9 + 8))(v70, v8);
            }

            v69 += v167;
            --v67;
            uint64_t v34 = v164;
            if (!v67) {
              break;
            }
            ((void (*)(int64_t, unint64_t, uint64_t))v169)(v30, v69, v8);
          }

          unint64_t v9 = v172;
          uint64_t v22 = v162;
          uint64_t v46 = &unk_10010F000;
          uint64_t v66 = v160;
          v75(v30, 1LL, 1LL, v8);
        }

        else
        {
          uint64_t v46 = (_OWORD *)&unk_10010F000;
          (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v30, 1LL, 1LL, v8);
        }

        swift_bridgeObjectRelease(v66);
      }

      uint64_t v29 = v163;
    }

void sub_1000A9CBC(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v40 = (char *)&v39 - v8;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v45 = a1 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v46 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  unint64_t v42 = (char *)_swiftEmptyArrayStorage;
  int64_t v43 = (char *)&type metadata for Any + 8;
  uint64_t v44 = a1;
  if (v12) {
    goto LABEL_10;
  }
LABEL_16:
  int64_t v24 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v24 < v46)
    {
      unint64_t v25 = *(void *)(v45 + 8 * v24);
      ++v13;
      if (v25) {
        goto LABEL_31;
      }
      int64_t v13 = v24 + 1;
      if (v24 + 1 >= v46) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v45 + 8 * v13);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v13 = v24 + 2;
      if (v24 + 2 >= v46) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v45 + 8 * v13);
      if (v25) {
        goto LABEL_31;
      }
      int64_t v13 = v24 + 3;
      if (v24 + 3 >= v46) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v45 + 8 * v13);
      if (v25)
      {
LABEL_31:
        unint64_t v12 = (v25 - 1) & v25;
        for (unint64_t i = __clz(__rbit64(v25)) + (v13 << 6); ; unint64_t i = v16 | (v13 << 6))
        {
          uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 16 * i + 8);
          uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8 * i);
          type metadata accessor for OSExtension(0LL);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v28);
          uint64_t v30 = sub_1000F4CE4(v29);
          if (!v30) {
            goto LABEL_7;
          }
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)(v30 + 16);
          uint64_t v33 = (uint64_t *)sub_10008F5F8();
          if (!*(void *)(v32 + 16)) {
            break;
          }
          uint64_t v34 = *v33;
          uint64_t v35 = v33[1];
          swift_bridgeObjectRetain(v35);
          unint64_t v36 = sub_100006114(v34, v35);
          if ((v37 & 1) != 0)
          {
            sub_100006054(*(void *)(v32 + 56) + 32 * v36, (uint64_t)&v49);
          }

          else
          {
            __int128 v49 = 0u;
            __int128 v50 = 0u;
          }

          swift_bridgeObjectRelease(v35);
          a1 = v44;
          if (!*((void *)&v50 + 1)) {
            goto LABEL_6;
          }
          if (!swift_dynamicCast(&v47, &v49, v43, &type metadata for String, 6LL))
          {
            swift_release(v31);
            goto LABEL_7;
          }

          uint64_t v38 = v48;
          URL.init(fileURLWithPath:)(v47, v48);
          swift_release(v31);
          swift_bridgeObjectRelease(v38);
          uint64_t v14 = 0LL;
LABEL_8:
          uint64_t v15 = v51;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v4, v14, 1LL, v5);
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v27);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1LL, v5) == 1)
          {
            sub_100012824((uint64_t)v4, (uint64_t *)&unk_10015BA30);
            if (!v12) {
              goto LABEL_16;
            }
          }

          else
          {
            uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
            uint64_t v19 = v40;
            v18(v40, v4, v5);
            v18(v41, v19, v5);
            if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0) {
              unint64_t v42 = (char *)sub_10000C938(0, *((void *)v42 + 2) + 1LL, 1, (unint64_t)v42);
            }
            unint64_t v21 = *((void *)v42 + 2);
            unint64_t v20 = *((void *)v42 + 3);
            if (v21 >= v20 >> 1) {
              unint64_t v42 = (char *)sub_10000C938(v20 > 1, v21 + 1, 1, (unint64_t)v42);
            }
            uint64_t v22 = v41;
            Swift::String v23 = v42;
            *((void *)v42 + 2) = v21 + 1;
            v18( &v23[((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
                 + *(void *)(v51 + 72) * v21],
              v22,
              v5);
            a1 = v44;
            if (!v12) {
              goto LABEL_16;
            }
          }

uint64_t sub_1000AA12C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v35 = (char *)&v26 - v14;
  unint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a3 + 16);
  if (v32)
  {
    unint64_t v15 = 0LL;
    uint64_t v30 = a3;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v17 = *(void *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0LL, 1LL, v9);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      uint64_t v19 = v35;
      v18(v35, v8, v9);
      char v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease(v30);
        return swift_release(v36);
      }

      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        unint64_t v21 = v36;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        uint64_t v28 = 0LL;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10003DFCC(0LL, v21[2] + 1LL, 1);
          unint64_t v21 = v36;
        }

        unint64_t v24 = v21[2];
        unint64_t v23 = v21[3];
        unint64_t v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          unint64_t v27 = v24 + 1;
          sub_10003DFCC(v23 > 1, v24 + 1, 1);
          unint64_t v25 = v27;
          unint64_t v21 = v36;
        }

        v21[2] = v25;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v18)((char *)v21 + v16 + v24 * v17, v31, v9);
        unint64_t v36 = v21;
        uint64_t v4 = v28;
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }

      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1LL, 1LL, v9);
        goto LABEL_17;
      }
    }

    __break(1u);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
LABEL_17:
    swift_bridgeObjectRelease(a3);
    sub_100012824((uint64_t)v8, (uint64_t *)&unk_10015BA30);
    return (uint64_t)v36;
  }

  return result;
}

uint64_t sub_1000AA3F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v66 = a3;
  uint64_t v85 = a1;
  uint64_t v71 = sub_100005FB4(&qword_10015B158);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v73 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for URL(0LL);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100005FB4(&qword_10015B380);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v69 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v59 - v14;
  uint64_t v16 = *(int *)(v13 + 48);
  sub_10001A148(a2, (uint64_t)&v59 - v14, (uint64_t *)&unk_10015BA30);
  uint64_t v17 = *(void *)(a2 + v16);
  *(void *)&v15[v16] = v17;
  swift_bridgeObjectRetain(v17);
  sub_100012824((uint64_t)v15, (uint64_t *)&unk_10015BA30);
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v67 = a5 + 2;
    uint64_t v60 = v17;
    uint64_t v19 = v17 + 32;
    uint64_t v62 = a4;
    uint64_t v61 = a2;
    while (1)
    {
      sub_100005F70(v19, (uint64_t)v82);
      if (a4 == 3) {
        goto LABEL_7;
      }
      uint64_t v20 = v83;
      uint64_t v21 = v84;
      sub_100005110(v82, v83);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
      unint64_t v24 = v23;
      *(void *)&__int128 v79 = v22;
      *((void *)&v79 + 1) = v23;
      v76[0] = v66;
      v76[1] = a4;
      unint64_t v25 = sub_100086F60();
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)(&v79, v76, &type metadata for PackageType, v25);
      sub_10003783C(v22, v24);
      if ((v26 & 1) != 0)
      {
LABEL_7:
        uint64_t v27 = v83;
        uint64_t v28 = v84;
        sub_100005110(v82, v83);
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
        if (v30 == 1)
        {
          uint64_t v31 = a5[5];
          uint64_t v32 = a5[6];
          uint64_t v33 = a5;
          sub_100005110(v67, v31);
          sub_1001073DC(v31, v32);
          uint64_t v34 = v80;
          uint64_t v35 = v81;
          unint64_t v68 = sub_100005110(&v79, v80);
          uint64_t v36 = v83;
          uint64_t v37 = v84;
          sub_100005110(v82, v83);
          uint64_t v38 = v63;
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 64))(v36, v37);
          uint64_t v40 = URL.path.getter(v39);
          uint64_t v42 = v41;
          (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v65);
          uint64_t v43 = v72;
          uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 152))(v40, v42, v34, v35);
          uint64_t v72 = v43;
          if (v43)
          {
            swift_bridgeObjectRelease(v42);
            swift_bridgeObjectRelease(v60);
            sub_100006034(&v79);
            return sub_100006034(v82);
          }

          uint64_t v46 = v44;
          uint64_t v47 = v45;
          swift_bridgeObjectRelease(v42);
          if (v47)
          {
            sub_100006034(&v79);
            a5 = v33;
            uint64_t v48 = v33[5];
            uint64_t v49 = v33[6];
            sub_100005110(v67, v48);
            sub_10009C2CC(v48, v49);
            uint64_t v50 = v77;
            uint64_t v51 = v78;
            sub_100005110(v76, v77);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 16))( &v74,  v46,  v47,  v50,  v51);
            swift_bridgeObjectRelease(v47);
            if (v75)
            {
              sub_100005158(&v74, (uint64_t)&v79);
              sub_100006034(v76);
              sub_100006034(v82);
              sub_100005158(&v79, (uint64_t)v82);
            }

            else
            {
              sub_100012824((uint64_t)&v74, &qword_100157C58);
              sub_100006034(v76);
            }
          }

          else
          {
            sub_100006034(&v79);
            a5 = v33;
          }

          a4 = v62;
          a2 = v61;
        }

        else
        {
          sub_10003783C(v29, v30);
        }

        uint64_t v52 = v69;
        sub_10001A148(a2, v69, (uint64_t *)&unk_10015BA30);
        uint64_t v53 = v73 + *(int *)(v71 + 48);
        sub_1000263D8(v52, v73, (uint64_t *)&unk_10015BA30);
        sub_100005F70((uint64_t)v82, v53);
        uint64_t v54 = (void *)*v85;
        if ((swift_isUniquelyReferenced_nonNull_native(*v85) & 1) == 0) {
          uint64_t v54 = (void *)sub_1000B0B44(0LL, v54[2] + 1LL, 1, v54);
        }
        unint64_t v56 = v54[2];
        unint64_t v55 = v54[3];
        if (v56 >= v55 >> 1) {
          uint64_t v54 = (void *)sub_1000B0B44(v55 > 1, v56 + 1, 1, v54);
        }
        v54[2] = v56 + 1;
        sub_1000263D8( v73,  (uint64_t)v54 + ((*(unsigned __int8 *)(v70 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))
        + *(void *)(v70 + 72) * v56,
          &qword_10015B158);
        *uint64_t v85 = v54;
      }

      sub_100006034(v82);
      v19 += 40LL;
      if (!--v18)
      {
        uint64_t v57 = v60;
        return swift_bridgeObjectRelease(v57);
      }
    }
  }

  uint64_t v57 = v17;
  return swift_bridgeObjectRelease(v57);
}

uint64_t sub_1000AA978()
{
  uint64_t v2 = v0;
  uint64_t result = (*(uint64_t (**)(void))(*v0 + 296LL))();
  if (v1) {
    return result;
  }
  int64_t v4 = 0LL;
  uint64_t v57 = result;
  uint64_t v6 = *(void *)(result + 64);
  result += 64LL;
  uint64_t v5 = v6;
  uint64_t v53 = result;
  uint64_t v7 = 1LL << *(_BYTE *)(result - 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v5;
  uint64_t v59 = v0 + 2;
  unint64_t v56 = &v67;
  uint64_t v58 = (__int128 *)&v72;
  int64_t v54 = (unint64_t)(v7 + 63) >> 6;
  int64_t v52 = v54 - 1;
  __int128 v55 = xmmword_10010F440;
  while (1)
  {
    if (v9)
    {
      unint64_t v29 = __clz(__rbit64(v9));
      uint64_t v30 = (v9 - 1) & v9;
      unint64_t v31 = v29 | (v4 << 6);
      goto LABEL_9;
    }

    int64_t v35 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v35 < v54)
    {
      unint64_t v36 = *(void *)(v53 + 8 * v35);
      if (v36) {
        goto LABEL_13;
      }
      v4 += 2LL;
      if (v35 + 1 >= v54)
      {
        int64_t v4 = v35;
        goto LABEL_18;
      }

      unint64_t v36 = *(void *)(v53 + 8 * v4);
      if (v36)
      {
        ++v35;
        goto LABEL_13;
      }

      if (v35 + 2 < v54) {
        break;
      }
    }

uint64_t sub_1000AAF7C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  char v11 = sub_100026BEC();
  char v12 = sub_100026BEC();
  uint64_t v13 = sub_10009E6E0(a2, (uint64_t)v9, v11 & 1, v12 & 1, a1);
  uint64_t result = sub_100012824((uint64_t)v9, (uint64_t *)&unk_10015BA30);
  if (!v3) {
    *a3 = v13;
  }
  return result;
}

uint64_t sub_1000AB070(uint64_t a1, char *a2)
{
  uint64_t v38 = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_10015B158);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v39;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 376LL))(a1, v38);
  if (!v15)
  {
    uint64_t v38 = v14;
    uint64_t v33 = v7;
    uint64_t v34 = v5;
    uint64_t v17 = *(void *)(result + 16);
    if (v17)
    {
      uint64_t v32 = v4;
      uint64_t v18 = *(int *)(v11 + 48);
      uint64_t v19 = (uint64_t)v38;
      uint64_t v37 = (__int128 *)&v38[v18];
      unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v27 = result;
      uint64_t v21 = result + v20;
      uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 144LL);
      uint64_t v35 = *(void *)(v12 + 72);
      unint64_t v36 = v22;
      __int128 v30 = xmmword_10010F440;
      __int128 v28 = xmmword_10010F110;
      unint64_t v31 = v10;
      uint64_t v29 = v2;
      do
      {
        sub_10001A148(v21, v19, &qword_10015B158);
        sub_1000263D8(v19, (uint64_t)v10, (uint64_t *)&unk_10015BA30);
        uint64_t v23 = sub_100005158(v37, (uint64_t)v40);
        uint64_t v24 = v36(v23);
        __chkstk_darwin(v24);
        *(&v26 - 4) = v2;
        *(&v26 - 3) = (uint64_t)v40;
        uint64_t v25 = v10;
        type metadata accessor for RealizedInfo(0LL);
        sub_100006260((void (*)(uint64_t))sub_1000B2498, (uint64_t)(&v26 - 6), v24);
        swift_release(v24);
        swift_release(v40[7]);
        sub_100012824((uint64_t)v10, (uint64_t *)&unk_10015BA30);
        uint64_t v19 = (uint64_t)v38;
        sub_100006034(v40);
        v21 += v35;
        --v17;
      }

      while (v17);
      uint64_t result = v27;
    }

    return swift_bridgeObjectRelease(result);
  }

  return result;
}

uint64_t sub_1000AB788()
{
  uint64_t v70 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v61 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v75 = type metadata accessor for OSSignposter(0LL);
  uint64_t v12 = *(void *)(v75 - 8);
  uint64_t v13 = __chkstk_darwin(v75);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v61 - v15;
  int v17 = *(_DWORD *)(v0 + 640);
  if (qword_1001646D0 != -1)
  {
    uint64_t v67 = v14;
    swift_once(&qword_1001646D0, sub_1000A49C4);
    uint64_t v14 = v67;
  }

  if ((dword_100175768 & ~v17) == 0)
  {
    unint64_t v18 = sub_100012624();
    uint64_t v19 = swift_allocError(&type metadata for KMError, v18, 0LL, 0LL);
    *(void *)uint64_t v20 = 0xD000000000000096LL;
    *(void *)(v20 + 8) = 0x8000000100129430LL;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(void *)(v20 + 64) = 0LL;
    *(_BYTE *)(v20 + 72) = 50;
    return swift_willThrow(v19);
  }

  uint64_t v67 = v14;
  __int128 v68 = v9;
  uint64_t v73 = v2;
  uint64_t v69 = v0;
  uint64_t v22 = sub_1000D3540();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  uint64_t v62 = v22;
  uint64_t v63 = v23;
  ((void (*)(char *))v23)(v16);
  uint64_t v24 = sub_1000902CC();
  uint64_t v25 = *v24;
  int64_t v61 = v24;
  char v26 = *((_BYTE *)v24 + 16);
  uint64_t v27 = static OSSignpostID.exclusive.getter(v24);
  __int128 v28 = (void *)OSSignposter.logHandle.getter(v27);
  LODWORD(v64) = static os_signpost_type_t.begin.getter(v28);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  __int128 v66 = v6;
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  if ((v26 & 1) != 0)
  {
    if ((unint64_t)v25 >> 32)
    {
      __break(1u);
    }

    else
    {
      if (v25 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

      if (v25 >> 16 <= 0x10)
      {
        uint64_t v25 = &v76;
        goto LABEL_14;
      }
    }

    __break(1u);
    goto LABEL_33;
  }

  if (!v25)
  {
    __break(1u);
LABEL_9:

    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v30 = v73;
    unint64_t v31 = v68;
    v29(v68, v11, v73);
    goto LABEL_15;
  }

LABEL_14:
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v32 = v68;
  uint64_t v33 = v73;
  v65(v68, v11, v73);
  uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v34 = 0;
  os_signpost_id_t v35 = OSSignpostID.rawValue.getter(v34);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  (os_signpost_type_t)v64,  v35,  v25,  "",  v34,  2u);
  swift_slowDealloc(v34, -1LL, -1LL);

  unint64_t v31 = v32;
  uint64_t v30 = v33;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v33);
  uint64_t v29 = v65;
  v65(v32, v11, v33);
LABEL_15:
  uint64_t v36 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  uint64_t v37 = OSSignpostIntervalState.init(id:isOpen:)(v31, 1LL);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v3 + 8);
  v38(v11, v30);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v40 = v16;
  uint64_t v41 = v75;
  v39(v40, v75);
  uint64_t v42 = v69;
  uint64_t v43 = v74;
  (*(void (**)(void, uint64_t))(*(void *)v69 + 392LL))(0LL, 3LL);
  if (v43) {
    return swift_release(v37);
  }
  uint64_t v64 = (void (*)(uint64_t, uint64_t))v39;
  uint64_t v65 = v29;
  uint64_t v44 = v67;
  uint64_t v45 = v63(v67, v62, v41);
  __int128 v74 = *v61;
  char v46 = *((_BYTE *)v61 + 16);
  uint64_t v47 = (void *)OSSignposter.logHandle.getter(v45);
  uint64_t v48 = v66;
  uint64_t v49 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v63) = static os_signpost_type_t.end.getter(v49);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    v38(v48, v73);
    v64(v44, v75);
LABEL_29:
    (*(void (**)(uint64_t))(*(void *)v42 + 272LL))(1LL);
    return swift_release(v37);
  }

  if ((v46 & 1) == 0)
  {
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    int64_t v52 = v66;
    if (v74)
    {
      uint64_t v53 = v70;
LABEL_25:
      uint64_t v54 = swift_retain(v37);
      checkForErrorAndConsumeState(state:)(v54);
      swift_release(v37);
      uint64_t v55 = v37;
      if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v51, v53) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v56 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v53);
        unint64_t v56 = "";
      }

      uint64_t v57 = v68;
      uint64_t v58 = v73;
      v65(v68, v52, v73);
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      os_signpost_id_t v60 = OSSignpostID.rawValue.getter(v59);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v47,  (os_signpost_type_t)v63,  v60,  v74,  v56,  v59,  2u);
      swift_slowDealloc(v59, -1LL, -1LL);

      v38(v52, v58);
      v64(v67, v75);
      v38(v57, v58);
      uint64_t v42 = v69;
      uint64_t v37 = v55;
      goto LABEL_29;
    }

    goto LABEL_34;
  }

  uint64_t v51 = v71;
  uint64_t v50 = v72;
  int64_t v52 = v66;
  if ((unint64_t)v74 >> 32)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v53 = v70;
  if (v74 >> 11 != 27)
  {
    if (v74 >> 16 <= 0x10)
    {
      __int128 v74 = &v77;
      goto LABEL_25;
    }

    goto LABEL_36;
  }

            char v26 = v28;
            goto LABEL_21;
          }

uint64_t sub_1000ABD4C()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
  if ((result & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
  }
  return result;
}

uint64_t sub_1000ABD90()
{
  uint64_t v1 = v0;
  uint64_t v102 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v104 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  Swift::String v103 = (char *)&v99 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for OSSignpostID(0LL);
  Swift::String v109 = *(void (**)(char *, char *, uint64_t))(v111 - 8);
  uint64_t v3 = __chkstk_darwin(v111);
  Swift::String v107 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v99 - v6;
  __chkstk_darwin(v5);
  uint64_t v110 = (char *)&v99 - v8;
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v113 = *(void (**)(char *, uint64_t))(v9 - 8);
  uint64_t v114 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v106 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v112 = (char *)&v99 - v13;
  uint64_t v14 = static os_log_type_t.info.getter(v12);
  uint64_t v15 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v16 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v16, "AKEL has been updated", 21LL, 2LL, _swiftEmptyArrayStorage);

  uint64_t v17 = (uint64_t)v1[25];
  unint64_t v18 = (unint64_t)v1[26];
  uint64_t v19 = (uint64_t *)sub_100026E64();
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  uint64_t v22 = sub_1000D1CA4(v20, v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  uint64_t v121 = v17;
  unint64_t v122 = v18;
  swift_bridgeObjectRetain(v18);
  v25._uint64_t countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  uint64_t v26 = v121;
  unint64_t v27 = v122;
  uint64_t v28 = (uint64_t)v1[5];
  uint64_t v29 = (uint64_t)v1[6];
  sub_100005110(v1 + 2, v28);
  sub_10009C2CC(v28, v29);
  uint64_t v31 = v119;
  uint64_t v30 = v120;
  sub_100005110(v118, v119);
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v30 + 16))( &v116,  v26,  v27,  v31,  v30);
  swift_bridgeObjectRelease(v27);
  if (v117)
  {
    sub_100005158(&v116, (uint64_t)&v121);
    uint64_t v32 = sub_100006034(v118);
    uint64_t v33 = (*((uint64_t (**)(uint64_t))*v1 + 18))(v32);
    __chkstk_darwin(v33);
    *(&v99 - 2) = v1;
    *(&v99 - 1) = (char **)&v121;
    type metadata accessor for RealizedInfo(0LL);
    uint64_t v34 = v115;
    sub_100006260((void (*)(uint64_t))sub_1000B2510, (uint64_t)(&v99 - 4), v33);
    uint64_t v35 = v34;
    if (v34)
    {
      sub_100006034(&v121);
      return swift_release(v33);
    }

    uint64_t v108 = v7;
    swift_release(v33);
    swift_release(v118[0]);
    sub_100006034(&v121);
  }

  else
  {
    uint64_t v108 = v7;
    sub_100012824((uint64_t)&v116, &qword_100157C58);
    sub_100006034(v118);
    uint64_t v37 = sub_100005FB4(&qword_10015B118);
    uint64_t v38 = swift_allocObject(v37, 64LL, 7LL);
    __int128 v101 = xmmword_10010F110;
    *(_OWORD *)(v38 + 16) = xmmword_10010F110;
    uint64_t v121 = 0LL;
    unint64_t v122 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(v122);
    uint64_t v121 = 0x3A676E696E726157LL;
    unint64_t v122 = 0xE900000000000020LL;
    uint64_t v39 = (uint64_t *)sub_100026E58();
    uint64_t v41 = *v39;
    uint64_t v40 = (void *)v39[1];
    swift_bridgeObjectRetain(v40);
    v42._uint64_t countAndFlagsBits = v41;
    v42._object = v40;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v40);
    v43._uint64_t countAndFlagsBits = 0x746F6E2073617720LL;
    v43._object = (void *)0xEF21646E756F6620LL;
    String.append(_:)(v43);
    uint64_t v44 = v121;
    unint64_t v45 = v122;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 32) = v44;
    *(void *)(v38 + sub_10007CFB4(v0 + 40) = v45;
    print(_:separator:terminator:)(v38, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    uint64_t v46 = swift_bridgeObjectRelease(v38);
    uint64_t v47 = static os_log_type_t.error.getter(v46);
    uint64_t v48 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
    *(_OWORD *)(v49 + 16) = v101;
    uint64_t v51 = *v39;
    uint64_t v50 = v39[1];
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = sub_100026B64();
    *(void *)(v49 + 32) = v51;
    *(void *)(v49 + sub_10007CFB4(v0 + 40) = v50;
    swift_bridgeObjectRetain(v50);
    uint64_t v53 = (void *)static OS_os_log.default.getter(v52);
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v53, "Warning: %{public}s was not found!", 34LL, 2LL, v49);
    swift_bridgeObjectRelease(v49);

    uint64_t v35 = v115;
  }

  uint64_t v54 = sub_1000D3540();
  uint64_t v55 = (void (*)(char *, uint64_t, uint64_t))*((void *)v113 + 2);
  v55(v112, v54, v114);
  unint64_t v56 = sub_1000902B4();
  uint64_t v57 = *v56;
  Swift::String v99 = v56;
  char v58 = *((_BYTE *)v56 + 16);
  uint64_t v59 = v110;
  uint64_t v60 = static OSSignpostID.exclusive.getter(v56);
  int64_t v61 = (void *)OSSignposter.logHandle.getter(v60);
  LODWORD(v115) = static os_signpost_type_t.begin.getter(v61);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  int v105 = v1;
  *(void *)&__int128 v101 = v55;
  uint64_t v100 = v54;
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  if ((v58 & 1) != 0)
  {
    if ((unint64_t)v57 >> 32)
    {
      __break(1u);
    }

    else
    {
      if (v57 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      if (v57 >> 16 <= 0x10)
      {
        uint64_t v57 = &v123;
        goto LABEL_15;
      }
    }

    __break(1u);
    goto LABEL_33;
  }

  if (!v57)
  {
    __break(1u);
LABEL_10:

    uint64_t v62 = v109;
    uint64_t v63 = (void (*)(char *, char *, uint64_t))*((void *)v109 + 2);
    uint64_t v64 = v111;
    uint64_t v65 = v108;
    v63(v108, v59, v111);
    goto LABEL_16;
  }

uint64_t sub_1000AC6F0@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  char v11 = sub_100026BEC();
  uint64_t v12 = sub_10009E6E0(a2, (uint64_t)v9, 1, v11 & 1, a1);
  uint64_t result = sub_100012824((uint64_t)v9, (uint64_t *)&unk_10015BA30);
  if (!v3) {
    *a3 = v12;
  }
  return result;
}

void sub_1000AC7DC(char a1)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v8[13] = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100005FB4(&qword_100158BD0);
  __chkstk_darwin(v3);
  char v11 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005FB4(&qword_1001588F8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  __asm { BR              X10 }

uint64_t sub_1000AC93C()
{
  *(void *)(v8 - 336) = v6;
  uint64_t result = (*(uint64_t (**)(void))(*v2 + 320LL))();
  if (!v4)
  {
    uint64_t v10 = result;
    *(void *)(v8 - 352) = v3;
    uint64_t v11 = v5;
    *(void *)(v8 - 328) = 0LL;
    sub_100005F70(result + OBJC_IVAR____TtC10driverkitd16KernelCollection_data, v8 - 136);
    swift_release(v10);
    *(_BYTE *)(v8 - 273) = 0;
    uint64_t v12 = v2[5];
    uint64_t v13 = v2[6];
    *(void *)(v8 - 320) = v2 + 2;
    sub_100005110(v2 + 2, v12);
    sub_1001073DC(v12, v13);
    uint64_t v14 = *(void *)(v7 + 32);
    uint64_t v15 = sub_100005110((void *)(v8 - 176), *(void *)(v8 - 152));
    uint64_t v16 = URL.path.getter(v15);
    uint64_t v18 = v17;
    LOBYTE(v12) = (*(uint64_t (**)(uint64_t))(v14 + 136))(v16);
    swift_bridgeObjectRelease(v18);
    sub_100006034((void *)(v8 - 176));
    if ((v12 & 1) == 0)
    {
      uint64_t v20 = v11;
      unint64_t v21 = *(void **)(v8 - 320);
LABEL_19:
      uint64_t v86 = v2[5];
      uint64_t v87 = v2[6];
      sub_100005110(v21, v86);
      sub_1001073DC(v86, v87);
      uint64_t v88 = *(void *)(v8 - 144);
      sched_param v89 = sub_100005110((void *)(v8 - 176), *(void *)(v8 - 152));
      uint64_t v90 = URL.path.getter(v89);
      uint64_t v92 = v91;
      (*(void (**)(uint64_t))(v88 + 40))(v90);
      swift_bridgeObjectRelease(v92);
      sub_100006034((void *)(v8 - 176));
      uint64_t v93 = v2[5];
      uint64_t v94 = v2[6];
      sub_100005110(v21, v93);
      sub_1001073DC(v93, v94);
      uint64_t v95 = *(void *)(v8 - 184);
      uint64_t v96 = sub_100005110((void *)(v8 - 216), *(void *)(v8 - 192));
      uint64_t v97 = URL.path.getter(v96);
      uint64_t v99 = v98;
      (*(void (**)(uint64_t))(v95 + 168))(v97);
      swift_bridgeObjectRelease(v99);
      if (*(void *)(v8 - 232))
      {
        *(void *)(v8 - 344) = v20;
        sub_100005158((__int128 *)(v8 - 256), v8 - 176);
        sub_100006034((void *)(v8 - 216));
        uint64_t v100 = *(void *)(v8 - 152);
        uint64_t v101 = *(void *)(v8 - 144);
        sub_100005110((void *)(v8 - 176), v100);
        sub_100005F70(v8 - 136, v8 - 216);
        uint64_t v102 = sub_100005FB4(&qword_10015B160);
        swift_dynamicCast(v8 - 256, v8 - 216, v102, &type metadata for Data, 7LL);
        uint64_t v103 = *(void *)(v8 - 256);
        unint64_t v104 = *(void *)(v8 - 248);
        *(void *)(v8 - 272) = v103;
        *(void *)(v8 - 264) = v104;
        int v105 = *(void (**)(uint64_t, void *, unint64_t, uint64_t, uint64_t))(v101 + 56);
        unint64_t v106 = sub_1000B2528();
        v105(v8 - 272, &type metadata for Data, v106, v100, v101);
        sub_10001226C(v103, v104);
        uint64_t v107 = *(void *)(v8 - 152);
        uint64_t v108 = *(void *)(v8 - 144);
        sub_100005110((void *)(v8 - 176), v107);
        (*(void (**)(uint64_t, uint64_t))(v108 + 64))(v107, v108);
        uint64_t v109 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v110 = swift_allocObject(v109, 72LL, 7LL);
        *(_OWORD *)(v110 + 16) = xmmword_10010F110;
        uint64_t v111 = URL.path.getter(v110);
        uint64_t v113 = v112;
        *(void *)(v110 + 56) = &type metadata for String;
        *(void *)(v110 + 64) = sub_100026B64();
        *(void *)(v110 + 32) = v111;
        *(void *)(v110 + sub_10007CFB4(v0 + 40) = v113;
        uint64_t v114 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v115 = (void *)static OS_os_log.default.getter(v114);
        uint64_t v116 = static os_log_type_t.default.getter(v115);
        os_log(_:dso:log:type:_:)( "wrote unwrapped kernel collection to %{public}s",  47LL,  2LL,  &_mh_execute_header,  v115,  v116,  v110);
        swift_bridgeObjectRelease(v110);

        goto LABEL_21;
      }

      sub_100012824(v8 - 256, &qword_10015B0F0);
      sub_100006034((void *)(v8 - 216));
      *(void *)(v8 - 176) = 0LL;
      *(void *)(v8 - 168) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(45LL);
      uint64_t v118 = swift_bridgeObjectRelease(*(void *)(v8 - 168));
      *(void *)(v8 - 176) = 0xD00000000000002BLL;
      *(void *)(v8 - 168) = 0x8000000100129530LL;
      v119._uint64_t countAndFlagsBits = URL.path.getter(v118);
      object = v119._object;
      String.append(_:)(v119);
      swift_bridgeObjectRelease(object);
      uint64_t v121 = *(void *)(v8 - 176);
      uint64_t v122 = *(void *)(v8 - 168);
      unint64_t v123 = sub_100012624();
      uint64_t v59 = swift_allocError(&type metadata for KMError, v123, 0LL, 0LL);
      *(void *)uint64_t v60 = v121;
      *(void *)(v60 + 8) = v122;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)(v60 + 48) = 0u;
      *(void *)(v60 + 64) = 0LL;
      char v61 = 19;
LABEL_23:
      *(_BYTE *)(v60 + 72) = v61;
      swift_willThrow(v59);
      uint64_t v117 = (void *)(v8 - 136);
      return sub_100006034(v117);
    }

    if ((*(_BYTE *)(v8 - 273) & 1) != 0)
    {
      uint64_t v19 = *(void *)(v8 - 328);
      uint64_t v20 = v11;
      unint64_t v21 = *(void **)(v8 - 320);
LABEL_17:
      uint64_t v82 = v2[5];
      uint64_t v83 = v2[6];
      sub_100005110(v21, v82);
      sub_1001073DC(v82, v83);
      uint64_t v84 = *(void *)(v8 - 152);
      uint64_t v85 = *(void *)(v8 - 144);
      sub_100005110((void *)(v8 - 176), v84);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 104))(v20, v84, v85);
      if (v19)
      {
LABEL_21:
        sub_100006034((void *)(v8 - 136));
        uint64_t v117 = (void *)(v8 - 176);
        return sub_100006034(v117);
      }

      sub_100006034((void *)(v8 - 176));
      goto LABEL_19;
    }

    uint64_t v22 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    *(void *)(v8 - 360) = v22;
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v8 - 384) = xmmword_10010F110;
    *(_OWORD *)(v23 + 16) = xmmword_10010F110;
    uint64_t v24 = v11;
    uint64_t v25 = URL.path.getter(v23);
    uint64_t v27 = v26;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v28 = sub_100026B64();
    *(void *)(v8 - 400) = v28;
    *(void *)(v23 + 64) = v28;
    *(void *)(v23 + 32) = v25;
    *(void *)(v23 + sub_10007CFB4(v0 + 40) = v27;
    uint64_t v29 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    *(void *)(v8 - 392) = v29;
    uint64_t v30 = (void *)static OS_os_log.default.getter(v29);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)( "unwrapped kernel collection already present at %{public}s",  57LL,  2LL,  &_mh_execute_header,  v30,  v31,  v23);
    swift_bridgeObjectRelease(v23);

    uint64_t v32 = v2[5];
    uint64_t v33 = v2[6];
    unint64_t v21 = *(void **)(v8 - 320);
    sub_100005110(v21, v32);
    sub_1001073DC(v32, v33);
    uint64_t v34 = *(void *)(v8 - 184);
    uint64_t v35 = sub_100005110((void *)(v8 - 216), *(void *)(v8 - 192));
    *(void *)(v8 - 344) = v24;
    uint64_t v36 = URL.path.getter(v35);
    uint64_t v38 = v37;
    (*(void (**)(uint64_t))(v34 + 112))(v36);
    swift_bridgeObjectRelease(v38);
    if (!*(void *)(v8 - 232))
    {
      sub_100012824(v8 - 256, &qword_100158910);
      sub_100006034((void *)(v8 - 216));
      *(void *)(v8 - 176) = 0LL;
      *(void *)(v8 - 168) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(*(void *)(v8 - 168));
      *(void *)(v8 - 176) = 0xD000000000000026LL;
      *(void *)(v8 - 168) = 0x80000001001295D0LL;
      uint64_t v52 = type metadata accessor for URL(0LL);
      uint64_t v53 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      uint64_t v55 = v54._object;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v55);
      uint64_t v56 = *(void *)(v8 - 176);
      uint64_t v57 = *(void *)(v8 - 168);
      unint64_t v58 = sub_100012624();
      uint64_t v59 = swift_allocError(&type metadata for KMError, v58, 0LL, 0LL);
      *(void *)uint64_t v60 = v56;
      *(void *)(v60 + 8) = v57;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)(v60 + 48) = 0u;
      *(void *)(v60 + 64) = 0LL;
      char v61 = 58;
      goto LABEL_23;
    }

    sub_100005158((__int128 *)(v8 - 256), v8 - 176);
    sub_100006034((void *)(v8 - 216));
    uint64_t v39 = v2[5];
    uint64_t v40 = v2[6];
    sub_100005110(v21, v39);
    sub_100071818(v39, v40);
    uint64_t v41 = *(void *)(v8 - 192);
    uint64_t v42 = *(void *)(v8 - 184);
    sub_100005110((void *)(v8 - 216), v41);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 184))(v41, v42);
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    sub_100006034((void *)(v8 - 216));
    uint64_t v20 = *(void *)(v8 - 344);
    if (v45 == 1)
    {
      unint64_t v48 = sub_100012624();
      uint64_t v49 = swift_allocError(&type metadata for KMError, v48, 0LL, 0LL);
      *(void *)uint64_t v50 = 0xD000000000000027LL;
      *(void *)(v50 + 8) = 0x8000000100129600LL;
      *(_OWORD *)(v50 + 16) = 0u;
      *(_OWORD *)(v50 + 32) = 0u;
      *(_OWORD *)(v50 + 48) = 0u;
      *(void *)(v50 + 64) = 0LL;
      *(_BYTE *)(v50 + 72) = 16;
      uint64_t v51 = swift_willThrow(v49);
      uint64_t v19 = 0LL;
LABEL_15:
      uint64_t v69 = static os_log_type_t.error.getter(v51);
      uint64_t v70 = swift_allocObject(*(void *)(v8 - 360), 72LL, 7LL);
      *(_OWORD *)(v70 + 16) = *(_OWORD *)(v8 - 384);
      *(void *)(v8 - 216) = v49;
      swift_errorRetain(v49);
      uint64_t v71 = sub_100005FB4(&qword_10015AB20);
      uint64_t v72 = String.init<A>(describing:)(v8 - 216, v71);
      uint64_t v73 = *(void *)(v8 - 400);
      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = v73;
      *(void *)(v70 + 32) = v72;
      *(void *)(v70 + sub_10007CFB4(v0 + 40) = v74;
      uint64_t v75 = v49;
      uint64_t v76 = (void *)static OS_os_log.default.getter(v72);
      os_log(_:dso:log:_:_:)( v69,  &_mh_execute_header,  v76,  "Unable to determine if pre-existing unwrapped kernelcollection has unchanged: %{public}s",  88LL,  2LL,  v70);
      swift_bridgeObjectRelease(v70);

      swift_errorRelease(v75);
LABEL_16:
      uint64_t v77 = swift_allocObject(*(void *)(v8 - 360), 72LL, 7LL);
      *(_OWORD *)(v77 + 16) = *(_OWORD *)(v8 - 384);
      uint64_t v78 = URL.path.getter(v77);
      *(void *)(v77 + 56) = &type metadata for String;
      *(void *)(v77 + 64) = v73;
      *(void *)(v77 + 32) = v78;
      *(void *)(v77 + sub_10007CFB4(v0 + 40) = v79;
      char v80 = (void *)static OS_os_log.default.getter(v78);
      uint64_t v81 = static os_log_type_t.default.getter(v80);
      os_log(_:dso:log:type:_:)( "removing pre-existing unwrapped kernelcollection at %{public}s",  62LL,  2LL,  &_mh_execute_header,  v80,  v81,  v77);
      swift_bridgeObjectRelease(v77);

      sub_100006034((void *)(v8 - 176));
      goto LABEL_17;
    }

    uint64_t v62 = *(void *)(v8 - 152);
    uint64_t v63 = *(void *)(v8 - 144);
    sub_100005110((void *)(v8 - 176), v62);
    uint64_t v64 = *(void *)(v8 - 328);
    sub_1000E2530(v43, v45, v47, v62, v63, *(void *)(v8 - 352));
    uint64_t v49 = v64;
    if (v64)
    {
      uint64_t v51 = sub_10007285C(v43, v45);
LABEL_14:
      uint64_t v19 = 0LL;
      uint64_t v20 = *(void *)(v8 - 344);
      unint64_t v21 = *(void **)(v8 - 320);
      goto LABEL_15;
    }

    *(void *)(v8 - 416) = 0LL;
    uint64_t v65 = *(void *)(v8 - 112);
    uint64_t v66 = *(void *)(v8 - 104);
    sub_100005110((void *)(v8 - 136), v65);
    uint64_t v67 = *(void *)(v8 - 336);
    *(void *)(v8 - 408) = v43;
    *(void *)(v8 - 328) = v47;
    uint64_t v68 = *(void *)(v8 - 416);
    sub_1000E2530(v43, v45, v47, v65, v66, v67);
    uint64_t v19 = v68;
    if (v68)
    {
      sub_100012824(*(void *)(v8 - 352), &qword_1001588F8);
      uint64_t v51 = sub_10007285C(*(void *)(v8 - 408), v45);
      uint64_t v49 = v68;
      goto LABEL_14;
    }

    sub_10007285C(*(void *)(v8 - 408), v45);
    uint64_t v124 = *(int *)(v0 + 48);
    uint64_t v125 = *(void *)(v8 - 288);
    uint64_t v126 = v125 + v124;
    sub_10001A148(*(void *)(v8 - 352), v125, &qword_1001588F8);
    *(void *)(v8 - 336) = v67;
    sub_10001A148(v67, v126, &qword_1001588F8);
    uint64_t v127 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 296) + 48LL);
    uint64_t v128 = *(void *)(v8 - 304);
    int v129 = v127(v125, 1LL, v128);
    uint64_t v20 = *(void *)(v8 - 344);
    unint64_t v21 = *(void **)(v8 - 320);
    if (v129 == 1)
    {
      int v130 = v127(v126, 1LL, v128);
      uint64_t v131 = *(void *)(v8 - 360);
      if (v130 == 1)
      {
        sub_100012824(*(void *)(v8 - 288), &qword_1001588F8);
LABEL_34:
        uint64_t v141 = swift_allocObject(v131, 72LL, 7LL);
        *(_OWORD *)(v141 + 16) = *(_OWORD *)(v8 - 384);
        uint64_t v142 = URL.path.getter(v141);
        uint64_t v143 = *(void *)(v8 - 400);
        *(void *)(v141 + 56) = &type metadata for String;
        *(void *)(v141 + 64) = v143;
        *(void *)(v141 + 32) = v142;
        *(void *)(v141 + sub_10007CFB4(v0 + 40) = v144;
        uint64_t v145 = (void *)static OS_os_log.default.getter(v142);
        uint64_t v146 = static os_log_type_t.default.getter(v145);
        os_log(_:dso:log:type:_:)( "pre-existing unwrapped kernelcollection at %{public}s is still valid",  68LL,  2LL,  &_mh_execute_header,  v145,  v146,  v141);
        swift_bridgeObjectRelease(v141);

        sub_100012824(*(void *)(v8 - 336), &qword_1001588F8);
        sub_100012824(*(void *)(v8 - 352), &qword_1001588F8);
        goto LABEL_21;
      }
    }

    else
    {
      sub_10001A148(v125, v1, &qword_1001588F8);
      *(void *)(v8 - 328) = v126;
      if (v127(v126, 1LL, v128) != 1)
      {
        uint64_t v138 = *(void *)(v8 - 312);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 296) + 32LL))( v138,  *(void *)(v8 - 328),  v128);
        uint64_t v139 = sub_100012860( &qword_100158BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        *(_DWORD *)(v8 - 328) = dispatch thunk of static Equatable.== infix(_:_:)(v1, v138, v128, v139);
        uint64_t v140 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 296) + 8LL);
        v140(v138, v128);
        v140(v1, v128);
        sub_100012824(v125, &qword_1001588F8);
        uint64_t v131 = *(void *)(v8 - 360);
        if ((*(_DWORD *)(v8 - 328) & 1) != 0) {
          goto LABEL_34;
        }
LABEL_32:
        uint64_t v132 = swift_allocObject(v131, 72LL, 7LL);
        *(_OWORD *)(v132 + 16) = *(_OWORD *)(v8 - 384);
        uint64_t v133 = URL.path.getter(v132);
        uint64_t v134 = *(void *)(v8 - 400);
        *(void *)(v132 + 56) = &type metadata for String;
        *(void *)(v132 + 64) = v134;
        *(void *)(v132 + 32) = v133;
        *(void *)(v132 + sub_10007CFB4(v0 + 40) = v135;
        uint64_t v136 = (void *)static OS_os_log.default.getter(v133);
        uint64_t v137 = static os_log_type_t.default.getter(v136);
        os_log(_:dso:log:type:_:)( "pre-existing unwrapped kernelcollection at %{public}s is stale",  62LL,  2LL,  &_mh_execute_header,  v136,  v137,  v132);
        swift_bridgeObjectRelease(v132);

        uint64_t v73 = v134;
        sub_100012824(*(void *)(v8 - 336), &qword_1001588F8);
        sub_100012824(*(void *)(v8 - 352), &qword_1001588F8);
        goto LABEL_16;
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 296) + 8LL))(v1, v128);
      uint64_t v131 = *(void *)(v8 - 360);
    }

    sub_100012824(*(void *)(v8 - 288), &qword_100158BD0);
    goto LABEL_32;
  }

  return result;
}

uint64_t sub_1000ADA44(uint64_t a1)
{
  v10[3] = a1;
  uint64_t v2 = type metadata accessor for URL(0LL);
  v10[7] = *(void *)(v2 - 8);
  v10[8] = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  void v10[5] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  v10[6] = (char *)v10 - v5;
  uint64_t v6 = sub_1000903A0();
  uint64_t result = swift_beginAccess(v6, v12, 0LL, 0LL);
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9)
  {
    v10[9] = v1;
    swift_bridgeObjectRetain(v8);
    int v13 = 0;
    v10[2] = v9 - 1;
    __int128 v11 = xmmword_10010F110;
    if (*(void *)(v8 + 16)) {
      __asm { BR              X8 }
    }

    __break(1u);
    JUMPOUT(0x1000ADD88LL);
  }

  return result;
}

BOOL sub_1000ADD98()
{
  int v1 = *(_DWORD *)(v0 + 640);
  if (qword_1001646C8 != -1) {
    swift_once(&qword_1001646C8, sub_1000A49B4);
  }
  int v2 = *(unsigned __int8 *)(v0 + 644);
  if (v2 == 2) {
    return 0LL;
  }
  BOOL v4 = (v2 & 1) == 0;
  return (dword_100175764 & ~v1) != 0 && v4;
}

void *sub_1000ADE08()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[85];
  swift_bridgeObjectRelease(v0[83]);
  sub_1000B1E74(v1, v2);
  uint64_t v3 = v0[88];
  uint64_t v4 = v0[89];
  swift_bridgeObjectRelease(v0[87]);
  sub_1000B1E74(v3, v4);
  swift_bridgeObjectRelease(v0[91]);
  return v0;
}

uint64_t sub_1000ADEA4()
{
  return swift_deallocClassInstance(v0, 737LL, 7LL);
}

uint64_t sub_1000ADEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    goto LABEL_13;
  }
  uint64_t v6 = v3[4];
  sub_100006094(0LL, &qword_10015B0F8, &OBJC_CLASS___NSPredicate_ptr);
  if (sub_1000D26D0()) {
    goto LABEL_13;
  }
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = v3;
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v6);
  if (v7) {
    goto LABEL_5;
  }
  do
  {
LABEL_12:
    swift_bridgeObjectRelease(v6);
    a2 = v29;
    uint64_t v3 = v30;
    a1 = v28;
LABEL_13:
    uint64_t v14 = v3[2];
    if (*(void *)(v14 + 16) && (sub_100083F1C(a1, a2, v14) & 1) != 0) {
      return 0LL;
    }
    if (*(void *)(*v3 + 16)) {
      return (sub_100083F1C(a1, a2, *v3) & 1) == 0;
    }
    uint64_t v16 = v3[1];
    if (*(void *)(v16 + 16))
    {
      char v17 = sub_100083F1C(a1, a2, v16);
      if ((v17 & 1) != 0) {
        uint64_t result = 1LL;
      }
      else {
        uint64_t result = 2LL;
      }
      if (!a3 || (v17 & 1) != 0) {
        return result;
      }
    }

    else if (!a3)
    {
      return 2LL;
    }

    uint64_t v19 = v3[3];
    sub_100006094(0LL, &qword_10015B0F8, &OBJC_CLASS___NSPredicate_ptr);
    if (sub_1000D26D0()) {
      return 2LL;
    }
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0) {
        uint64_t v27 = v19;
      }
      else {
        uint64_t v27 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v19);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v27);
      if (!v20)
      {
LABEL_38:
        swift_bridgeObjectRelease(v19);
        return 2LL;
      }
    }

    else
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v19);
      if (!v20) {
        goto LABEL_38;
      }
    }

    uint64_t v6 = 4LL;
    while (1)
    {
      id v21 = (v19 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v19)
          : *(id *)(v19 + 8 * v6);
      uint64_t v22 = v21;
      uint64_t v23 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      unsigned int v25 = [v22 evaluateWithObject:isa];

      if (!v25)
      {
        uint64_t v18 = v19;
        goto LABEL_26;
      }

      ++v6;
      if (v23 == v20) {
        goto LABEL_38;
      }
    }

unint64_t sub_1000AE1E0()
{
  uint64_t v0 = sub_100005FB4(&qword_10015B3C0);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_100111D70;
  *(_BYTE *)(inited + 3sub_100006034(v0 + 2) = 0;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = swift_getKeyPath(&unk_100114740);
  *(_BYTE *)(inited + 48) = 1;
  *(void *)(inited + 56) = swift_getKeyPath(&unk_100114760);
  *(_BYTE *)(inited + 64) = 2;
  *(void *)(inited + 7sub_100006034(v0 + 2) = swift_getKeyPath(&unk_100114780);
  unint64_t result = sub_1000A561C(inited);
  qword_100175770 = result;
  return result;
}

uint64_t sub_1000AE278()
{
  return sub_1000A729C();
}

unint64_t sub_1000AE2B0(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = *(void *)(v4 + 40);
  uint64_t v9 = a2();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, a3, v9);
  return sub_1000AE4A4(a1, v10, a4, a3);
}

unint64_t sub_1000AE32C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v15, *(void *)(v2 + 40));
  sub_10001A148(a1, (uint64_t)v10, (uint64_t *)&unk_10015BA30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    uint64_t v11 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  Swift::Int v12 = Hasher._finalize()();
  return sub_1000AE570(a1, v12);
}

unint64_t sub_1000AE4A4(char a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  char v12 = a1;
  uint64_t v5 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v6 = a2 & ~v5;
  if (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v8 = ~v5;
    uint64_t v9 = a3();
    do
    {
      char v11 = *(_BYTE *)(*(void *)(v4 + 48) + v6);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, a4, v9) & 1) != 0) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v8;
    }

    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

unint64_t sub_1000AE570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v35 = a1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4(&qword_1001593E0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = v3 + 64;
  uint64_t v36 = v3;
  uint64_t v18 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v19 = a2 & ~v18;
  if (((*(void *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
  {
    uint64_t v32 = v14;
    uint64_t v33 = ~v18;
    uint64_t v34 = *(void *)(v13 + 72);
    uint64_t v29 = v8;
    uint64_t v31 = v3 + 64;
    while (1)
    {
      sub_10001A148(*(void *)(v36 + 48) + v34 * v19, (uint64_t)v16, (uint64_t *)&unk_10015BA30);
      uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_10001A148((uint64_t)v16, (uint64_t)v10, (uint64_t *)&unk_10015BA30);
      sub_10001A148(v35, v20, (uint64_t *)&unk_10015BA30);
      id v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v21(v10, 1LL, v5) == 1) {
        break;
      }
      uint64_t v22 = v32;
      sub_10001A148((uint64_t)v10, v32, (uint64_t *)&unk_10015BA30);
      if (v21((char *)v20, 1LL, v5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v5);
        uint64_t v17 = v31;
LABEL_4:
        sub_100012824((uint64_t)v10, &qword_1001593E0);
        sub_100012824((uint64_t)v16, (uint64_t *)&unk_10015BA30);
        goto LABEL_5;
      }

      uint64_t v23 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v30, v20, v5);
      uint64_t v24 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v5, v24);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v27 = v23;
      uint64_t v8 = v29;
      v26(v27, v5);
      v26((char *)v22, v5);
      sub_100012824((uint64_t)v10, (uint64_t *)&unk_10015BA30);
      sub_100012824((uint64_t)v16, (uint64_t *)&unk_10015BA30);
      uint64_t v17 = v31;
      if ((v25 & 1) != 0) {
        return v19;
      }
LABEL_5:
      unint64_t v19 = (v19 + 1) & v33;
      if (((*(void *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
        return v19;
      }
    }

    if (v21((char *)v20, 1LL, v5) == 1)
    {
      sub_100012824((uint64_t)v10, (uint64_t *)&unk_10015BA30);
      sub_100012824((uint64_t)v16, (uint64_t *)&unk_10015BA30);
      return v19;
    }

    goto LABEL_4;
  }

  return v19;
}

uint64_t sub_1000AE89C(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1000B1010((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1000AE9FC(v5);
  *a1 = v2;
  return result;
}

void *sub_1000AE904(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005FB4(&qword_10015BB10);
  uint64_t v4 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = sub_1000B0CC0(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_10000610C(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000AE9FC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_139;
    }
    if (v4) {
      return sub_1000AF0CC(0LL, v4, 1LL, v3);
    }
    return result;
  }

  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_138;
  }
  uint64_t v98 = result;
  if (v4 <= 1)
  {
    uint64_t v100 = &_swiftEmptyArrayStorage[4];
    uint64_t v97 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
      if (v11 < 2) {
        goto LABEL_114;
      }
      goto LABEL_101;
    }
  }

  else
  {
    uint64_t v7 = v6 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for CollectionKind);
    *(void *)(result + 16) = v7;
    uint64_t v97 = (void *)result;
    uint64_t v100 = (_BYTE *)(result + 32);
  }

  Swift::Int v8 = 0LL;
  uint64_t v9 = *v3;
  uint64_t v95 = v3;
  Swift::Int v96 = v4 - 2;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v99 = v4;
  while (1)
  {
    Swift::Int v12 = v8++;
    if (v8 < v4)
    {
      Swift::Int v13 = v4;
      uint64_t v14 = v10;
      char v15 = *(_BYTE *)(v9 + v12);
      char v107 = *(_BYTE *)(v9 + v8);
      char v106 = v15;
      unint64_t v16 = sub_1000B485C();
      uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)(&v107, &v106, &type metadata for CollectionKind, v16);
      int v17 = result;
      Swift::Int v8 = v12 + 2;
      if (v12 + 2 >= v13)
      {
LABEL_21:
        uint64_t v10 = v14;
        if ((v17 & 1) == 0) {
          goto LABEL_31;
        }
      }

      else
      {
        Swift::Int v18 = v12;
        while (1)
        {
          char v19 = *(_BYTE *)(v9 + v18 + 1);
          char v105 = *(_BYTE *)(v9 + v18 + 2);
          char v104 = v19;
          uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)( &v105,  &v104,  &type metadata for CollectionKind,  v16);
          if (v96 == ++v18)
          {
            Swift::Int v8 = v99;
            goto LABEL_21;
          }
        }

        Swift::Int v8 = v18 + 2;
        uint64_t v10 = v14;
        if ((v17 & 1) == 0)
        {
LABEL_31:
          Swift::Int v4 = v99;
          goto LABEL_32;
        }
      }

      Swift::Int v4 = v99;
      if (v8 < v12) {
        goto LABEL_140;
      }
      if (v12 < v8)
      {
        Swift::Int v20 = v8 - 1;
        Swift::Int v21 = v12;
        do
        {
          if (v21 != v20)
          {
            if (!v9) {
              goto LABEL_145;
            }
            char v22 = *(_BYTE *)(v9 + v21);
            *(_BYTE *)(v9 + v21) = *(_BYTE *)(v9 + v20);
            *(_BYTE *)(v9 + v20) = v22;
          }

          BOOL v64 = ++v21 < v20--;
        }

        while (v64);
      }
    }

LABEL_48:
    if (v8 < v12) {
      goto LABEL_132;
    }
LABEL_49:
    uint64_t v31 = v10;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) != 0)
    {
      uint64_t v10 = v31;
    }

    else
    {
      uint64_t result = (uint64_t)sub_1000593C4(0LL, *((void *)v31 + 2) + 1LL, 1, v31);
      uint64_t v10 = (char *)result;
    }

    unint64_t v33 = *((void *)v10 + 2);
    unint64_t v32 = *((void *)v10 + 3);
    unint64_t v11 = v33 + 1;
    uint64_t v101 = v23;
    if (v33 >= v32 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000593C4((char *)(v32 > 1), v33 + 1, 1, v10);
      uint64_t v10 = (char *)result;
    }

    *((void *)v10 + sub_100006034(v0 + 2) = v11;
    uint64_t v34 = v10 + 32;
    uint64_t v35 = (Swift::Int *)&v10[16 * v33 + 32];
    *uint64_t v35 = v12;
    v35[1] = v8;
    if (v33)
    {
      uint64_t v103 = (uint64_t)v10;
      while (1)
      {
        unint64_t v36 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v41 = &v34[2 * v11];
          uint64_t v42 = *(v41 - 8);
          uint64_t v43 = *(v41 - 7);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_121;
          }
          uint64_t v46 = *(v41 - 6);
          uint64_t v45 = *(v41 - 5);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_122;
          }
          unint64_t v48 = v11 - 2;
          uint64_t v49 = &v34[2 * v11 - 4];
          uint64_t v51 = *v49;
          uint64_t v50 = v49[1];
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_123;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_125;
          }
          if (v53 >= v44)
          {
            uint64_t v71 = &v34[2 * v36];
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_131;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_86;
          }
        }

        else
        {
          if (v11 != 3)
          {
            uint64_t v65 = *((void *)v10 + 4);
            uint64_t v66 = *((void *)v10 + 5);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_80;
          }

          uint64_t v38 = *((void *)v10 + 4);
          uint64_t v37 = *((void *)v10 + 5);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }

        if ((v40 & 1) != 0) {
          goto LABEL_124;
        }
        unint64_t v48 = v11 - 2;
        Swift::String v54 = &v34[2 * v11 - 4];
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_126;
        }
        uint64_t v60 = &v34[2 * v36];
        uint64_t v62 = *v60;
        uint64_t v61 = v60[1];
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_128;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_130;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_86:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_88;
        }

LABEL_80:
        if ((v59 & 1) != 0) {
          goto LABEL_127;
        }
        uint64_t v67 = &v34[2 * v36];
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_129;
        }
        if (v70 < v58) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v11)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }

        if (!v9) {
          goto LABEL_144;
        }
        Swift::Int v76 = v8;
        uint64_t v77 = v9;
        uint64_t v78 = &v34[2 * v75];
        uint64_t v79 = v34;
        uint64_t v80 = *v78;
        uint64_t v81 = v79;
        unint64_t v82 = v36;
        uint64_t v83 = &v79[2 * v36];
        uint64_t v84 = v83[1];
        uint64_t v85 = v77;
        uint64_t result = sub_1000AF1AC((_BYTE *)(v77 + *v78), (_BYTE *)(v77 + *v83), v77 + v84, v100);
        if (v101)
        {
LABEL_99:
          uint64_t v87 = (char *)v103;
          goto LABEL_115;
        }

        if (v84 < v80) {
          goto LABEL_118;
        }
        if (v82 > *(void *)(v103 + 16)) {
          goto LABEL_119;
        }
        *uint64_t v78 = v80;
        v81[2 * v75 + 1] = v84;
        unint64_t v86 = *(void *)(v103 + 16);
        if (v82 >= v86) {
          goto LABEL_120;
        }
        uint64_t v34 = v81;
        unint64_t v11 = v86 - 1;
        uint64_t result = (uint64_t)memmove(v83, v83 + 2, 16 * (v86 - 1 - v82));
        uint64_t v10 = (char *)v103;
        *(void *)(v103 + 16) = v86 - 1;
        uint64_t v9 = v85;
        Swift::Int v8 = v76;
        if (v86 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v11 = 1LL;
LABEL_14:
    Swift::Int v4 = v99;
    uint64_t v2 = v101;
    if (v8 >= v99)
    {
      uint64_t v3 = v95;
      if (v11 < 2)
      {
LABEL_114:
        uint64_t v87 = v10;
LABEL_115:
        swift_bridgeObjectRelease(v87);
        v97[2] = 0LL;
        return swift_bridgeObjectRelease(v97);
      }

    if ((v73 & 1) != 0) {
      goto LABEL_124;
    }
    uint64_t v81 = &v48[2 * v50];
    uint64_t v83 = *v81;
    unint64_t v82 = v81[1];
    uint64_t v61 = __OFSUB__(v82, v83);
    uint64_t v84 = v82 - v83;
    if (v61) {
      goto LABEL_126;
    }
    if (v84 < v72) {
      goto LABEL_15;
    }
LABEL_88:
    unint64_t v89 = v50 - 1;
    if (v50 - 1 >= v11)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }

    if (!v9) {
      goto LABEL_141;
    }
    uint64_t v90 = v8;
    uint64_t v91 = v10;
    uint64_t v92 = v48;
    uint64_t v93 = &v48[2 * v89];
    unint64_t v94 = *v93;
    uint64_t v95 = v92;
    Swift::Int v96 = v50;
    uint64_t v97 = &v92[2 * v50];
    uint64_t v98 = v97[1];
    uint64_t result = sub_1000D94D8((char *)(v9 + 16 * *v93), (char *)(v9 + 16LL * *v97), v9 + 16 * v98, v115);
    if (v116) {
      break;
    }
    if (v98 < v94) {
      goto LABEL_115;
    }
    if (v96 > *((void *)v91 + 2)) {
      goto LABEL_116;
    }
    Swift::Int v99 = v96;
    *uint64_t v93 = v94;
    v95[2 * v89 + 1] = v98;
    uint64_t v100 = *((void *)v91 + 2);
    if (v96 >= v100) {
      goto LABEL_117;
    }
    unint64_t v48 = v95;
    uint64_t v10 = v91;
    uint64_t v116 = 0LL;
    unint64_t v11 = v100 - 1;
    uint64_t result = (uint64_t)memmove(v97, v97 + 2, 16 * (v100 - 1 - v99));
    *((void *)v91 + sub_100006034(v0 + 2) = v100 - 1;
    uint64_t v9 = v117;
    Swift::Int v8 = v90;
    if (v100 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v10 = v91;
LABEL_97:
  swift_bridgeObjectRelease(v10);
  v110[2] = 0LL;
  return swift_bridgeObjectRelease(v110);
}

LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
  return result;
}

uint64_t sub_1000AF0CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    unint64_t v8 = sub_1000B485C();
    uint64_t v9 = (char *)(v7 + v4);
LABEL_5:
    char v10 = *(_BYTE *)(v7 + v4);
    uint64_t v11 = v6;
    Swift::Int v12 = v9;
    while (1)
    {
      char v13 = *(v12 - 1);
      char v15 = v10;
      char v14 = v13;
      uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)(&v15, &v14, &type metadata for CollectionKind, v8);
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        ++v9;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      char v10 = *v12;
      *Swift::Int v12 = *(v12 - 1);
      *(v12 - 1) = v10;
      ++v11;
      --v12;
      if (v4 == v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000AF1AC(_BYTE *__dst, _BYTE *__src, unint64_t a3, _BYTE *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst < (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __dst || __src <= a4) {
      memmove(a4, __dst, v8);
    }
    char v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_16:
      uint64_t v6 = v7;
      if (v7 != v4) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

    unint64_t v11 = sub_1000B485C();
    while (1)
    {
      char v12 = *v4;
      char v23 = *v6;
      char v22 = v12;
      if ((dispatch thunk of static Comparable.< infix(_:_:)(&v23, &v22, &type metadata for CollectionKind, v11) & 1) == 0) {
        break;
      }
      char v13 = v6;
      BOOL v14 = v7 == v6++;
      if (!v14) {
        goto LABEL_13;
      }
LABEL_14:
      ++v7;
    }

    char v13 = v4;
    BOOL v14 = v7 == v4++;
    if (v14) {
      goto LABEL_14;
    }
LABEL_13:
    _BYTE *v7 = *v13;
    goto LABEL_14;
  }

  char v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_38:
    if (v6 != v4) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }

  unint64_t v21 = sub_1000B485C();
  char v15 = (_BYTE *)(a3 - 1);
  while (1)
  {
    int v17 = v6 - 1;
    char v16 = *(v6 - 1);
    Swift::Int v18 = v15 + 1;
    char v25 = *(v10 - 1);
    char v24 = v16;
    if ((dispatch thunk of static Comparable.< infix(_:_:)(&v25, &v24, &type metadata for CollectionKind, v21) & 1) != 0)
    {
      if (v18 == v6)
      {
        BOOL v19 = v15 >= v6--;
        if (v19) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }

      --v6;
LABEL_35:
      *char v15 = *v17;
      goto LABEL_36;
    }

    int v17 = v10 - 1;
    if (v18 != v10)
    {
      --v10;
      goto LABEL_35;
    }

    BOOL v19 = v15 >= v10--;
    if (v19) {
      goto LABEL_35;
    }
LABEL_36:
    if (v6 <= v7) {
      break;
    }
    --v15;
    if (v10 <= v4) {
      goto LABEL_38;
    }
  }

  if (v6 != v4)
  {
LABEL_40:
    memmove(v6, v4, v10 - v4);
    return 1LL;
  }

void (*sub_1000AF3F4(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10002ADD0(v7);
  v7[10] = sub_1000AF484(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100029A58;
}

void (*sub_1000AF484(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100006114(a2, a3);
  *((_BYTE *)v10 + sub_10007CFB4(v0 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *char v10 = v19;
        return sub_10002AD94;
      }

uint64_t sub_1000AF5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100005FB4(&qword_10015B148);
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(void *)(v10 + 16))
  {
    Swift::Int v28 = v3;
    uint64_t v12 = 1LL << *(_BYTE *)(v10 + 32);
    unint64_t v13 = (void *)(v10 + 64);
    uint64_t v14 = -1LL;
    if (v12 < 64) {
      uint64_t v14 = ~(-1LL << v12);
    }
    unint64_t v15 = v14 & *(void *)(v10 + 64);
    int64_t v16 = (unint64_t)(v12 + 63) >> 6;
    uint64_t result = swift_retain(v10);
    int64_t v18 = 0LL;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }

      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1LL))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }

        if (v22 >= v16) {
          goto LABEL_25;
        }
        unint64_t v23 = v13[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v16) {
            goto LABEL_25;
          }
          unint64_t v23 = v13[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v16)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v10);
                uint64_t v3 = v28;
                goto LABEL_32;
              }

              uint64_t v26 = 1LL << *(_BYTE *)(v10 + 32);
              if (v26 >= 64) {
                bzero((void *)(v10 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v13 = -1LL << v26;
              }
              uint64_t v3 = v28;
              *(void *)(v10 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v13[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_34;
                }
                if (v18 >= v16) {
                  goto LABEL_25;
                }
                unint64_t v23 = v13[v18];
                ++v24;
                if (v23) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v18 = v24;
          }
        }

Swift::Int sub_1000AF810(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015B3B8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_1000AFB24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015B398);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

uint64_t sub_1000AFE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v19, *(void *)(a3 + 40));
  sub_10001A148(a1, (uint64_t)v13, (uint64_t *)&unk_10015BA30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    uint64_t v14 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  Swift::Int v15 = Hasher._finalize()();
  unint64_t v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
  uint64_t result = sub_1000263D8(a1, *(void *)(a3 + 48) + *(void *)(v11 + 72) * v16, (uint64_t *)&unk_10015BA30);
  *(void *)(*(void *)(a3 + 56) + 8 * v16) = a2;
  ++*(void *)(a3 + 16);
  return result;
}

void sub_1000B0028()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_10015B148);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release(v5);
LABEL_25:
    *uint64_t v1 = v7;
    return;
  }

  uint64_t v24 = v1;
  uint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }

    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }

void sub_1000B0268()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015B3B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1000B041C(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_10015B140);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v62 = a1;
  uint64_t v63 = v8;
  char v17 = a2;
  uint64_t v61 = v3;
  uint64_t v18 = *(int *)(v12 + 48);
  unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v59 = v7;
  unint64_t v60 = v19;
  uint64_t v20 = a1 + v19;
  uint64_t v65 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain(a1);
  sub_10001A148(v20, (uint64_t)v15, &qword_10015B140);
  sub_1000263D8((uint64_t)v15, (uint64_t)v10, (uint64_t *)&unk_10015BA30);
  uint64_t v64 = v18;
  uint64_t v21 = *(void *)&v15[v18];
  uint64_t v66 = a3;
  uint64_t v22 = *a3;
  unint64_t v24 = sub_1000AE32C((uint64_t)v10);
  uint64_t v25 = *(void *)(v22 + 16);
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_24;
  }
  char v28 = v23;
  if (*(void *)(v22 + 24) >= v27)
  {
    if ((v17 & 1) != 0)
    {
      uint64_t v31 = v63;
      if ((v23 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000B0028();
      uint64_t v31 = v63;
      if ((v28 & 1) != 0) {
        goto LABEL_10;
      }
    }

size_t sub_1000B08C4(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000B08E0(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

size_t sub_1000B08E0(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_10015B390);
  uint64_t v11 = *(void *)(sub_100005FB4(&qword_10015B140) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  void v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = sub_100005FB4(&qword_10015B140);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)v15 + v19;
  uint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20);
  }

  swift_release(a4);
  return (size_t)v15;
}

char *sub_1000B0A5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015B3D8);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v8);
  }

  swift_release(a4);
  return v11;
}

size_t sub_1000B0B44(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_10015B388);
  uint64_t v11 = *(void *)(sub_100005FB4(&qword_10015B158) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  void v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = sub_100005FB4(&qword_10015B158);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)v15 + v19;
  uint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20);
  }

  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

uint64_t sub_1000B0CC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v16 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v35 = a1;
  uint64_t v36 = v16;
  uint64_t v17 = -v16;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
LABEL_39:
    uint64_t v31 = v35;
    uint64_t v32 = ~v36;
    *uint64_t v35 = v42;
    v31[1] = v15;
    void v31[2] = v32;
    void v31[3] = v20;
    v31[4] = v19;
    return v21;
  }

  if (!a3)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v37 = a4 + 56;
  int64_t v38 = (unint64_t)(63 - v36) >> 6;
  int64_t v34 = v38 - 1;
  uint64_t v39 = a3;
  uint64_t v22 = v40;
  uint64_t v23 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v25 = v24 | (v20 << 6);
  while (1)
  {
    uint64_t v29 = *(void *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(void *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v10, 0LL, 1LL, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1LL, v11) == 1)
    {
      uint64_t v15 = v37;
      goto LABEL_38;
    }

    ++v21;
    char v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      uint64_t v21 = v39;
      uint64_t v15 = v37;
      goto LABEL_39;
    }

    a2 += v29;
    uint64_t v23 = v41;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    uint64_t v15 = v37;
    if (v26 >= v38) {
      goto LABEL_37;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27)
    {
      int64_t v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * v28);
      if (v27) {
        goto LABEL_14;
      }
      int64_t v20 = v26 + 1;
      if (v26 + 2 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2LL;
      }

      else
      {
        int64_t v20 = v26 + 2;
        if (v26 + 3 >= v38) {
          goto LABEL_37;
        }
        unint64_t v27 = *(void *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          int64_t v28 = v26 + 4;
          int64_t v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            unint64_t v27 = *(void *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v26 = v28 + 1;
                if (__OFADD__(v28, 1LL)) {
                  goto LABEL_42;
                }
                if (v26 >= v38)
                {
                  int64_t v20 = v34;
                  goto LABEL_37;
                }

                unint64_t v27 = *(void *)(v37 + 8 * v26);
                ++v28;
                if (v27) {
                  goto LABEL_21;
                }
              }
            }

char *sub_1000B1010(uint64_t a1)
{
  return sub_1000B0A5C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000B1024(uint64_t a1, unint64_t a2)
{
  if (a1 == 1751347809 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1751347809LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x746E6169726176LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6169726176LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6C656E72656BLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656E72656BLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v9 = 0x8000000100129890LL;
    if (a2 == 0x8000000100129890LL) {
      goto LABEL_25;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100129890LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0x6465726975716572LL && a2 == 0xED00007368746150LL)
  {
    unint64_t v10 = 0xED00007368746150LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572LL, 0xED00007368746150LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v11 = 0x80000001001298B0LL;
    if (a2 == 0x80000001001298B0LL) {
      goto LABEL_36;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001298B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001001298D0LL)
  {
    swift_bridgeObjectRelease(0x80000001001298D0LL);
    return 6LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001001298D0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t sub_1000B12F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_10015B3E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000A507C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100006034(a1);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    return swift_bridgeObjectRelease(0xE600000000000000LL);
  }

  else
  {
    LOBYTE(v41) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    uint64_t v14 = v13;
    LOBYTE(v41) = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    uint64_t v39 = v14;
    LOBYTE(v41) = 2;
    uint64_t v16 = v15;
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    uint64_t v38 = v18;
    uint64_t v33 = v17;
    uint64_t v36 = v16;
    uint64_t v19 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    char v40 = 3;
    uint64_t v20 = sub_100017ED0( (unint64_t *)&qword_100158030,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v38);
    uint64_t v34 = v20;
    uint64_t v35 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &v40, v5, v19, v20);
    uint64_t v21 = v41;
    char v40 = 4;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    uint64_t v32 = a2;
    uint64_t v22 = v41;
    char v40 = 5;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    uint64_t v31 = v12;
    uint64_t v23 = v41;
    char v40 = 6;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v24 = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_100006034(a1);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v22);
    uint64_t v25 = v21;
    swift_bridgeObjectRelease(v21);
    uint64_t v26 = v38;
    swift_bridgeObjectRelease(v38);
    uint64_t v27 = v36;
    swift_bridgeObjectRelease(v36);
    uint64_t v28 = v39;
    uint64_t result = swift_bridgeObjectRelease(v39);
    char v30 = v32;
    *uint64_t v32 = v31;
    v30[1] = v28;
    void v30[2] = v37;
    v30[3] = v27;
    v30[4] = v33;
    v30[5] = v26;
    v30[6] = v25;
    v30[7] = v22;
    v30[8] = v23;
    v30[9] = v24;
  }

  return result;
}

uint64_t type metadata accessor for Updatable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Updatable);
}

uint64_t sub_1000B1860()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000B1884(void *a1)
{
  uint64_t v3 = v1 + 2;
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  sub_100005110(v3, v4);
  sub_10007BDA0(v4, v5);
  uint64_t v6 = v37;
  uint64_t v7 = v38;
  sub_100005110(v36, v37);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v9 = v8;
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v39 = &_swiftEmptyDictionarySingleton;
  uint64_t v11 = *(void *)(v8 + 16);
  if (v11)
  {
    uint64_t v31 = a1;
    uint64_t v12 = v8 + 32;
    uint64_t v30 = v8;
    swift_bridgeObjectRetain(v8);
    do
    {
      sub_100005F70(v12, (uint64_t)v33);
      uint64_t v13 = v34;
      uint64_t v14 = v35;
      sub_100005110(v33, v34);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
      uint64_t v17 = v16;
      v32[0] = v15;
      v32[1] = v16;
      uint64_t v18 = sub_100005FB4(&qword_10015B3A0);
      sub_1000D5610( (uint64_t)v32,  (uint64_t)&v39,  (uint64_t)&type metadata for String,  v18,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease(v17);
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      sub_100005110(v33, v34);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
      uint64_t v23 = v22;
      uint64_t v24 = sub_1000A7E34(v32, v21, v22);
      if (*v25)
      {
        uint64_t KeyPath = swift_getKeyPath(&unk_100114718);
        uint64_t v27 = sub_100005FB4(&qword_10015B3A8);
        uint64_t v28 = sub_100012860( &qword_10015B3B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        sub_1000D1E50(1, KeyPath, (uint64_t)v33, v27, v28);
        swift_release(KeyPath);
      }

      ((void (*)(void *, void))v24)(v32, 0LL);
      swift_bridgeObjectRelease(v23);
      sub_100006034(v33);
      v12 += 40LL;
      --v11;
    }

    while (v11);
    uint64_t v9 = v30;
    swift_bridgeObjectRelease(v30);
    uint64_t v10 = v39;
    a1 = v31;
  }

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(v9);
  uint64_t result = sub_100006034(v36);
  *a1 = v10;
  return result;
}

uint64_t sub_1000B1AC8()
{
  unint64_t v1 = v0[19];
  if (v1 >= 6) {
    swift_release(v1);
  }
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[22]);
  swift_bridgeObjectRelease(v0[23]);
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[28]);
  swift_bridgeObjectRelease(v0[29]);
  swift_bridgeObjectRelease(v0[31]);
  swift_bridgeObjectRelease(v0[33]);
  swift_bridgeObjectRelease(v0[35]);
  swift_bridgeObjectRelease(v0[37]);
  swift_bridgeObjectRelease(v0[39]);
  swift_bridgeObjectRelease(v0[40]);
  swift_bridgeObjectRelease(v0[41]);
  swift_bridgeObjectRelease(v0[42]);
  swift_bridgeObjectRelease(v0[43]);
  swift_bridgeObjectRelease(v0[45]);
  swift_bridgeObjectRelease(v0[47]);
  swift_bridgeObjectRelease(v0[49]);
  swift_bridgeObjectRelease(v0[51]);
  swift_bridgeObjectRelease(v0[53]);
  swift_bridgeObjectRelease(v0[55]);
  swift_bridgeObjectRelease(v0[56]);
  swift_bridgeObjectRelease(v0[57]);
  uint64_t v2 = v0[59];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v0[61]);
    swift_bridgeObjectRelease(v0[63]);
    swift_bridgeObjectRelease(v0[64]);
    swift_bridgeObjectRelease(v0[65]);
    swift_bridgeObjectRelease(v0[66]);
    swift_bridgeObjectRelease(v0[67]);
  }

  swift_bridgeObjectRelease(v0[69]);
  uint64_t v3 = v0[70];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v0[71]);
    swift_bridgeObjectRelease(v0[72]);
    swift_bridgeObjectRelease(v0[73]);
    swift_bridgeObjectRelease(v0[74]);
  }

  sub_100006034(v0 + 76);
  return swift_deallocObject(v0, 648LL, 7LL);
}

uint64_t sub_1000B1C74(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)(v1 + 608);
  uint64_t v6 = *sub_10006B998();
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = *sub_10006BAAC();
  int v8 = *(_DWORD *)(v1 + 600);
  uint64_t v9 = qword_100164668;
  swift_bridgeObjectRetain(v7);
  if (v9 != -1) {
    swift_once(&qword_100164668, sub_1000A46D4);
  }
  sub_1000D26B0(v7, (dword_100175734 & ~v8) == 0, v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  sub_100026BEC();
  sub_10006BE1C(4);
  uint64_t v23 = v10;
  uint64_t v11 = *(void *)(v1 + 632);
  uint64_t v12 = *(void *)(v1 + 640);
  sub_100005110(v5, v11);
  sub_100071818(v11, v12);
  sub_10006B104(v22, (uint64_t)&type metadata for KernelRequests.GetLoaded, (uint64_t)&off_100159898, (uint64_t)&v24);
  sub_100006034(v22);
  uint64_t result = swift_bridgeObjectRelease(v23);
  if (!v3)
  {
    swift_bridgeObjectRelease(*a1);
    uint64_t v14 = v24;
    *a1 = v24;
    uint64_t v16 = static os_log_type_t.debug.getter(v15);
    uint64_t v17 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_10010F110;
    uint64_t v19 = *(void *)(v14 + 16);
    *(void *)(v18 + 56) = &type metadata for Int;
    *(void *)(v18 + 64) = &protocol witness table for Int;
    *(void *)(v18 + 3sub_100006034(v0 + 2) = v19;
    uint64_t v20 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v21, "Updated loaded info for %d extensions.", LODWORD(v22[0]));

    return swift_bridgeObjectRelease(v18);
  }

  return result;
}

uint64_t sub_1000B1E74(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000B1E84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A7D18( a1,  *(void *)(v2 + 16),  *(uint64_t **)(v2 + 24),  *(void *)(v2 + 32),  *(_BYTE *)(v2 + 40),  *(void *)(v2 + 48),  a2);
}

unint64_t sub_1000B1EA8()
{
  unint64_t result = qword_10015B138;
  if (!qword_10015B138)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10015B138);
  }

  return result;
}

void *sub_1000B1EEC(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100005FB4(&qword_10015B140);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
    sub_1000B08C4(0LL, v8, 0);
    uint64_t v9 = v36;
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = a2 + 2;
    uint64_t v14 = a2[53];
    uint64_t v15 = a2[54];
    uint64_t v35 = v14;
    uint64_t v28 = *(void *)(v11 + 72);
    uint64_t v31 = v11;
    uint64_t v32 = v10;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v30 = v13;
    while (1)
    {
      uint64_t v16 = v32;
      v29(v7, v12, v32);
      char v17 = 1;
      uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v7, 0LL, 1LL, v16);
      uint64_t v19 = URL.path.getter(v18);
      uint64_t v21 = v20;
      if (v19 != v35 || (uint64_t v22 = v15, v21 != v15))
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v35, v15, 0LL);
        uint64_t v22 = v21;
      }

      swift_bridgeObjectRelease(v22);
      uint64_t v23 = sub_100026BE4();
      uint64_t v24 = sub_1000D5E2C(v30, v12, v23, (v17 & 1) == 0);
      if (v2) {
        break;
      }
      *(void *)&v7[*(int *)(v34 + 48)] = v24;
      uint64_t v36 = v9;
      unint64_t v26 = v9[2];
      unint64_t v25 = v9[3];
      if (v26 >= v25 >> 1)
      {
        sub_1000B08C4(v25 > 1, v26 + 1, 1);
        uint64_t v9 = v36;
      }

      v9[2] = v26 + 1;
      sub_1000263D8( (uint64_t)v7,  (uint64_t)v9 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
      + *(void *)(v33 + 72) * v26,
        &qword_10015B140);
      v12 += v28;
      if (!--v8) {
        return v9;
      }
    }

    sub_100012824((uint64_t)v7, (uint64_t *)&unk_10015BA30);
    swift_release(v36);
  }

  return v9;
}

void sub_1000B2128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v29 = a3;
  uint64_t v28 = sub_100005FB4(&qword_10015B380);
  uint64_t v8 = __chkstk_darwin(v28);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v32 = a1;
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v26 = a2 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v17 = 0LL;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = sub_100005FB4((uint64_t *)&unk_10015BA30);
    sub_10001A148(v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * i, (uint64_t)v12, (uint64_t *)&unk_10015BA30);
    uint64_t v25 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    *(void *)&v12[*(int *)(v28 + 48)] = v25;
    sub_1000263D8((uint64_t)v12, (uint64_t)v10, &qword_10015B380);
    swift_bridgeObjectRetain(v25);
    sub_1000AA3F8(&v32, (uint64_t)v10, v29, v30, v31);
    if (v5)
    {
      swift_bridgeObjectRelease(v32);
      sub_100012824((uint64_t)v10, &qword_10015B380);
      swift_release(a2);
      return;
    }

    sub_100012824((uint64_t)v10, &qword_10015B380);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v27) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v21 - 1) & v21;
  }

  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v27) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_26:
    swift_release(a2);
    return;
  }

  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v27) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }

uint64_t sub_1000B23D8(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return sub_1000B23E8(a1, a2);
  }
  return a1;
}

uint64_t sub_1000B23E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000B23FC(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return sub_10003783C(a1, a2);
  }
  return a1;
}

uint64_t sub_1000B240C(uint64_t a1)
{
  uint64_t v1 = URL.path.getter(a1);
  uint64_t v3 = v2;
  uint64_t v4 = URL.path.getter(v1);
  uint64_t v6 = v5;
  char v7 = sub_100032F98(v4, v5, v1, v3);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v7 & 1;
}

uint64_t sub_1000B2480@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000AAF7C(a1, *(void **)(v2 + 24), a2);
}

void *sub_1000B2498@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *(void **)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  char v8 = sub_100026BEC();
  char v9 = sub_100026BEC();
  uint64_t result = sub_10009E6E0(v6, v7, v8 & 1, v9 & 1, a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000B2510@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000AC6F0(a1, *(void **)(v2 + 24), a2);
}

unint64_t sub_1000B2528()
{
  unint64_t result = qword_10015B168;
  if (!qword_10015B168)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10015B168);
  }

  return result;
}

unint64_t sub_1000B2578()
{
  unint64_t result = qword_10015B170;
  if (!qword_10015B170)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001143D0, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_10015B170);
  }

  return result;
}

unint64_t sub_1000B25C0()
{
  unint64_t result = qword_10015B178;
  if (!qword_10015B178)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001143F8, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_10015B178);
  }

  return result;
}

uint64_t type metadata accessor for ExtensionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd16ExtensionManager);
}

uint64_t destroy for ExtensionManager.Settings(void *a1)
{
  unint64_t v2 = a1[17];
  if (v2 >= 6) {
    swift_release(v2);
  }
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[38]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[40]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[43]);
  swift_bridgeObjectRelease(a1[45]);
  swift_bridgeObjectRelease(a1[47]);
  swift_bridgeObjectRelease(a1[49]);
  swift_bridgeObjectRelease(a1[51]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[54]);
  swift_bridgeObjectRelease(a1[55]);
  uint64_t v3 = a1[57];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[59]);
    swift_bridgeObjectRelease(a1[61]);
    swift_bridgeObjectRelease(a1[62]);
    swift_bridgeObjectRelease(a1[63]);
    swift_bridgeObjectRelease(a1[64]);
    swift_bridgeObjectRelease(a1[65]);
  }

  swift_bridgeObjectRelease(a1[67]);
  uint64_t result = a1[68];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[69]);
    swift_bridgeObjectRelease(a1[70]);
    swift_bridgeObjectRelease(a1[71]);
    return swift_bridgeObjectRelease(a1[72]);
  }

  return result;
}

uint64_t initializeWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v6;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 7sub_100006034(v0 + 2) = v11;
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v14;
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100006034(v0 + 2) = v17;
  *(void *)(a1 + 120) = v16;
  uint64_t v56 = *(void *)(a2 + 128);
  unint64_t v58 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v56;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v56);
  if (v58 >= 5)
  {
    if (v58 == 5)
    {
      *(void *)(a1 + 136) = 5LL;
    }

    else
    {
      *(void *)(a1 + 136) = v58;
      swift_retain(v58);
    }
  }

  else
  {
    *(void *)(a1 + 136) = v58;
  }

  uint64_t v18 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100006034(v0 + 2) = v18;
  uint64_t v20 = *(void *)(a2 + 160);
  uint64_t v19 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 168) = v19;
  uint64_t v21 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v21;
  *(_OWORD *)(a1 + 19sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 192);
  uint64_t v22 = *(void *)(a2 + 208);
  uint64_t v44 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = v22;
  *(void *)(a1 + 216) = v44;
  uint64_t v23 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 23sub_100006034(v0 + 2) = v23;
  uint64_t v24 = *(void *)(a2 + 248);
  *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v24;
  uint64_t v25 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v25;
  uint64_t v26 = *(void *)(a2 + 280);
  *(void *)(a1 + 27sub_100006034(v0 + 2) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v26;
  uint64_t v43 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v43;
  uint64_t v45 = *(void *)(a2 + 304);
  uint64_t v46 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = v45;
  *(void *)(a1 + 31sub_100006034(v0 + 2) = v46;
  uint64_t v47 = *(void *)(a2 + 320);
  uint64_t v54 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = v47;
  *(void *)(a1 + 328) = v54;
  uint64_t v53 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v53;
  uint64_t v52 = *(void *)(a2 + 360);
  *(void *)(a1 + 35sub_100006034(v0 + 2) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v52;
  uint64_t v51 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v51;
  uint64_t v50 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 39sub_100006034(v0 + 2) = v50;
  uint64_t v49 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v49;
  uint64_t v48 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v48;
  uint64_t v55 = *(void *)(a2 + 432);
  uint64_t v57 = *(void *)(a2 + 440);
  *(void *)(a1 + 43sub_100006034(v0 + 2) = v55;
  *(void *)(a1 + 4sub_10007CFB4(v0 + 40) = v57;
  uint64_t v59 = *(void *)(a2 + 456);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  if (v59)
  {
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    *(void *)(a1 + 456) = v59;
    uint64_t v27 = *(void *)(a2 + 472);
    *(void *)(a1 + 464) = *(void *)(a2 + 464);
    *(void *)(a1 + 47sub_100006034(v0 + 2) = v27;
    uint64_t v28 = *(void *)(a2 + 488);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(void *)(a1 + 488) = v28;
    uint64_t v29 = *(void *)(a2 + 496);
    uint64_t v30 = *(void *)(a2 + 504);
    *(void *)(a1 + 496) = v29;
    *(void *)(a1 + 504) = v30;
    uint64_t v31 = *(void *)(a2 + 512);
    *(void *)(a1 + 51sub_100006034(v0 + 2) = v31;
    uint64_t v32 = *(void *)(a2 + 520);
    *(void *)(a1 + 520) = v32;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
  }

  else
  {
    __int128 v33 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v33;
    *(_OWORD *)(a1 + 51sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 512);
    __int128 v34 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v34;
  }

  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v35 = *(void *)(a2 + 536);
  *(void *)(a1 + 536) = v35;
  uint64_t v36 = *(void *)(a2 + 544);
  swift_bridgeObjectRetain(v35);
  if (v36)
  {
    *(void *)(a1 + 544) = v36;
    uint64_t v37 = *(void *)(a2 + 552);
    *(void *)(a1 + 55sub_100006034(v0 + 2) = v37;
    uint64_t v38 = *(void *)(a2 + 560);
    *(void *)(a1 + 560) = v38;
    uint64_t v39 = *(void *)(a2 + 568);
    *(void *)(a1 + 568) = v39;
    uint64_t v40 = *(void *)(a2 + 576);
    *(void *)(a1 + 576) = v40;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
  }

  else
  {
    __int128 v41 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v41;
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
  }

  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

uint64_t assignWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100006034(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v20 = *(void *)(a2 + 112);
  uint64_t v21 = *(void *)(a1 + 112);
  *(void *)(a1 + 11sub_100006034(v0 + 2) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v22 = *(void *)(a2 + 128);
  uint64_t v23 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = (void *)(a1 + 136);
  unint64_t v25 = *(void *)(a1 + 136);
  unint64_t v26 = *(void *)(a2 + 136);
  if (v25 == 5)
  {
    if (v26 < 5)
    {
LABEL_3:
      void *v24 = v26;
      goto LABEL_16;
    }

    if (v26 == 5)
    {
      uint64_t v27 = 5LL;
LABEL_15:
      void *v24 = v27;
      goto LABEL_16;
    }

unint64_t *sub_1000B32FC(unint64_t *a1)
{
  return a1;
}

void *sub_1000B3330(void *a1)
{
  return a1;
}

void *sub_1000B3354(void *a1)
{
  return a1;
}

void *initializeWithTake for ExtensionManager.Settings(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x24DuLL);
}

uint64_t assignWithTake for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100006034(v0 + 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100006034(v0 + 2) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 128);
  uint64_t v18 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v20 = (unint64_t *)(a1 + 136);
  unint64_t v19 = *(void *)(a1 + 136);
  unint64_t v21 = *(void *)(a2 + 136);
  if (v19 == 5)
  {
    if (v21 == 5) {
      unint64_t v21 = 5LL;
    }
    goto LABEL_10;
  }

  if (v21 == 5)
  {
    sub_1000B32FC((unint64_t *)(a1 + 136));
LABEL_9:
    unint64_t v21 = *(void *)(a2 + 136);
    goto LABEL_10;
  }

  if (v19 < 5)
  {
LABEL_10:
    *uint64_t v20 = v21;
    goto LABEL_11;
  }

  if (v21 < 5)
  {
    swift_release(v19);
    goto LABEL_9;
  }

  *uint64_t v20 = v21;
  swift_release(v19);
LABEL_11:
  uint64_t v22 = *(void *)(a2 + 152);
  uint64_t v23 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100006034(v0 + 2) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(void *)(a2 + 184);
  uint64_t v27 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v26;
  swift_bridgeObjectRelease(v27);
  *(_OWORD *)(a1 + 19sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 192);
  uint64_t v28 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = *(void *)(a2 + 232);
  uint64_t v31 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 23sub_100006034(v0 + 2) = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(a2 + 248);
  uint64_t v33 = *(void *)(a1 + 248);
  *(void *)(a1 + 2sub_10007CFB4(v0 + 40) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v32;
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = *(void *)(a2 + 264);
  uint64_t v35 = *(void *)(a1 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v34;
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = *(void *)(a2 + 280);
  uint64_t v37 = *(void *)(a1 + 280);
  *(void *)(a1 + 27sub_100006034(v0 + 2) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v36;
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = *(void *)(a2 + 296);
  uint64_t v39 = *(void *)(a1 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v38;
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = *(void *)(a1 + 312);
  *(void *)(a1 + 31sub_100006034(v0 + 2) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = *(void *)(a2 + 344);
  uint64_t v45 = *(void *)(a1 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v44;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = *(void *)(a2 + 360);
  uint64_t v47 = *(void *)(a1 + 360);
  *(void *)(a1 + 35sub_100006034(v0 + 2) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v46;
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = *(void *)(a2 + 376);
  uint64_t v49 = *(void *)(a1 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v48;
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = *(void *)(a2 + 392);
  uint64_t v51 = *(void *)(a1 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 39sub_100006034(v0 + 2) = v50;
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = *(void *)(a2 + 408);
  uint64_t v53 = *(void *)(a1 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v52;
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = *(void *)(a2 + 424);
  uint64_t v55 = *(void *)(a1 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v54;
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = *(void *)(a1 + 432);
  *(void *)(a1 + 43sub_100006034(v0 + 2) = *(void *)(a2 + 432);
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = *(void *)(a1 + 440);
  *(void *)(a1 + 4sub_10007CFB4(v0 + 40) = *(void *)(a2 + 440);
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = *(void *)(a1 + 456);
  if (v58)
  {
    uint64_t v59 = *(void *)(a2 + 456);
    if (v59)
    {
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      *(void *)(a1 + 456) = v59;
      swift_bridgeObjectRelease(v58);
      uint64_t v60 = *(void *)(a2 + 472);
      uint64_t v61 = *(void *)(a1 + 472);
      *(void *)(a1 + 464) = *(void *)(a2 + 464);
      *(void *)(a1 + 47sub_100006034(v0 + 2) = v60;
      swift_bridgeObjectRelease(v61);
      uint64_t v62 = *(void *)(a2 + 488);
      uint64_t v63 = *(void *)(a1 + 488);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      *(void *)(a1 + 488) = v62;
      swift_bridgeObjectRelease(v63);
      uint64_t v64 = *(void *)(a1 + 496);
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      swift_bridgeObjectRelease(v64);
      uint64_t v65 = *(void *)(a1 + 504);
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      swift_bridgeObjectRelease(v65);
      uint64_t v66 = *(void *)(a1 + 512);
      *(void *)(a1 + 51sub_100006034(v0 + 2) = *(void *)(a2 + 512);
      swift_bridgeObjectRelease(v66);
      uint64_t v67 = *(void *)(a1 + 520);
      *(void *)(a1 + 520) = *(void *)(a2 + 520);
      swift_bridgeObjectRelease(v67);
      goto LABEL_16;
    }

    sub_1000B3330((void *)(a1 + 448));
  }

  __int128 v68 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v68;
  *(_OWORD *)(a1 + 51sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 512);
  __int128 v69 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v69;
LABEL_16:
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v70 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease(v70);
  uint64_t v71 = *(void *)(a1 + 544);
  if (!v71)
  {
LABEL_20:
    __int128 v77 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v77;
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    goto LABEL_21;
  }

  uint64_t v72 = *(void *)(a2 + 544);
  if (!v72)
  {
    sub_1000B3354((void *)(a1 + 544));
    goto LABEL_20;
  }

  *(void *)(a1 + 544) = v72;
  swift_bridgeObjectRelease(v71);
  uint64_t v73 = *(void *)(a1 + 552);
  *(void *)(a1 + 55sub_100006034(v0 + 2) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease(v73);
  uint64_t v74 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease(v74);
  uint64_t v75 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRelease(v75);
  uint64_t v76 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  swift_bridgeObjectRelease(v76);
LABEL_21:
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 589)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 588) = 0;
    *(_DWORD *)(result + 584) = 0;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 55sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 47sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 4sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 39sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 31sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 589) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 589) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings()
{
  return &type metadata for ExtensionManager.Settings;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.Flags()
{
  return &type metadata for ExtensionManager.Settings.Flags;
}

uint64_t destroy for ExtensionManager.Settings.ExtensionFilter(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *initializeWithCopy for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *assignWithTake for ExtensionManager.Settings.ExtensionFilter(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[4];
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter;
}

uint64_t destroy for ExtensionManager.Settings.BuildManifest(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

void *initializeWithCopy for ExtensionManager.Settings.BuildManifest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  uint64_t v8 = a2[8];
  uint64_t v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *assignWithCopy for ExtensionManager.Settings.BuildManifest(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[8];
  uint64_t v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[9];
  uint64_t v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.BuildManifest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v3;
  return result;
}

void *assignWithTake for ExtensionManager.Settings.BuildManifest(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a1[7]);
  uint64_t v9 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[9];
  a1[9] = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7sub_100006034(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest;
}

uint64_t sub_1000B3E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_1000B3E4C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1001145B8;
    v4[2] = &unk_1001145D0;
    swift_initStructMetadata(a1, 0LL, 3LL, v4, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000B3ECC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain(v12);
    }

    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  }

  return v4;
}

uint64_t sub_1000B3FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  uint64_t result = (*(uint64_t (**)(void))(v3 + 8))();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v5 >= 0xFFFFFFFFuLL) {
    return swift_release(v5[1]);
  }
  return result;
}

uint64_t sub_1000B4000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain(v9);
  }

  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B4084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = *(void *)v8;
  if (*(void *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v12 = *(void *)(v8 + 8);
      *(void *)unint64_t v7 = v9;
      *(void *)(v7 + 8) = v12;
      swift_retain(v12);
      goto LABEL_8;
    }

uint64_t sub_1000B4148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }

  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B41C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = *(void *)v8;
  if (*(void *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v12 = *(void *)(v8 + 8);
      *(void *)unint64_t v7 = v9;
      *(void *)(v7 + 8) = v12;
      goto LABEL_8;
    }

uint64_t sub_1000B4280(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v14 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v14 >= 0xFFFFFFFF) {
        LODWORD(v14) = -1;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    unsigned int v8 = ((v7 + 7) & 0xFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1000B4308 + 4 * byte_100114274[v12]))();
  }

void sub_1000B43A4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  size_t v7 = ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 17;
  if (v6 >= a3)
  {
    int v10 = 0;
    if (v6 >= a2) {
      goto LABEL_17;
    }
  }

  else
  {
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v9 = 1;
    }
    if (v8 >= 2) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v6 >= a2) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  else {
    unsigned int v11 = (~(_BYTE)v6 + a2);
  }
  bzero(a1, v7);
  if ((_DWORD)v7 == 1) {
    *a1 = v11;
  }
  else {
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }

void sub_1000B44C0()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4544LL);
}

void sub_1000B44C8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x1000B44D0LL);
  }
  JUMPOUT(0x1000B4544LL);
}

void sub_1000B4518()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4544LL);
}

void sub_1000B4520()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4544LL);
}

uint64_t sub_1000B4528(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE) {
      JUMPOUT(0x1000B4534LL);
    }
    *(void *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) = a2;
LABEL_6:
    JUMPOUT(0x1000B4544LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter.FilterMatch( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000B45A8 + 4 * byte_100114288[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B45DC + 4 * byte_100114283[v4]))();
}

uint64_t sub_1000B45DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B45E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B45ECLL);
  }
  return result;
}

uint64_t sub_1000B45F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B4600LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000B4604(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B460C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter.FilterMatch()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000B4704 + 4 * byte_100114292[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000B4738 + 4 * byte_10011428D[v4]))();
}

uint64_t sub_1000B4738(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B4748LL);
  }
  return result;
}

uint64_t sub_1000B4754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B475CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000B4760(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4768(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest.CodingKeys()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys;
}

unint64_t sub_1000B4788()
{
  unint64_t result = qword_100164DF0[0];
  if (!qword_100164DF0[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_1001146A0,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_100164DF0);
  }

  return result;
}

unint64_t sub_1000B47D0()
{
  unint64_t result = qword_100164F00;
  if (!qword_100164F00)
  {
    unint64_t result = swift_getWitnessTable( &unk_100114610,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164F00);
  }

  return result;
}

unint64_t sub_1000B4818()
{
  unint64_t result = qword_100164F08[0];
  if (!qword_100164F08[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100114638,  &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_100164F08);
  }

  return result;
}

unint64_t sub_1000B485C()
{
  unint64_t result = qword_10015B3D0;
  if (!qword_10015B3D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A390, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_10015B3D0);
  }

  return result;
}

uint64_t sub_1000B48A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000B2510(a1, a2);
}

void sub_1000B48B4()
{
  __asm { BR              X10 }

uint64_t sub_1000B4918( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, OSStatus status, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  return v52 + 19;
}

void sub_1000B59DC()
{
}

void sub_1000B5A00()
{
}

void sub_1000B5A20()
{
}

void sub_1000B5A40()
{
}

id sub_1000B61B8()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v3, &v16);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v5;
  sub_100089A3C( v0,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
  sub_1000B48B4();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_100089A3C( v0,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
  *(void *)(inited + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v9;
  unint64_t v10 = sub_100015D14(inited);
  id v11 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  id v14 = [v11 initWithDomain:v12 code:5 userInfo:isa];

  return v14;
}

uint64_t sub_1000B6300()
{
  return 12383LL;
}

uint64_t sub_1000B6310(uint64_t a1)
{
  unint64_t v2 = sub_1000BCDEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6338(uint64_t a1)
{
  unint64_t v2 = sub_1000BCDEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6360(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B6394 + 4 * word_1001147D0[a1]))( 0x656C7069746C756DLL,  0xE800000000000000LL);
}

uint64_t sub_1000B6394()
{
  return 0x6C61697265736564LL;
}

unint64_t sub_1000B63B8()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000B6B00()
{
  return 0x5264696C61766E69LL;
}

uint64_t sub_1000B6B40()
{
  return 0x74754F64656D6974LL;
}

uint64_t sub_1000B6B54()
{
  return 2037609826LL;
}

uint64_t sub_1000B6B64()
{
  return 0x74656D6874697261LL;
}

uint64_t sub_1000B6B84(uint64_t a1)
{
  unint64_t v2 = sub_1000BD8D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6BAC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD8D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6BD4(uint64_t a1)
{
  unint64_t v2 = sub_1000BDB34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6BFC(uint64_t a1)
{
  unint64_t v2 = sub_1000BDB34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6C24(uint64_t a1)
{
  unint64_t v2 = sub_1000BD5A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6C4C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD5A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6C74(uint64_t a1)
{
  unint64_t v2 = sub_1000BCF40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6C9C(uint64_t a1)
{
  unint64_t v2 = sub_1000BCF40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6CC4(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6CEC(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6D14()
{
  if (*v0) {
    return 0x746E656449726570LL;
  }
  else {
    return 12383LL;
  }
}

uint64_t sub_1000B6D50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000BE2A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B6D74(uint64_t a1)
{
  unint64_t v2 = sub_1000BDA24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6D9C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDA24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6DC4()
{
  if (*v0) {
    return 12639LL;
  }
  else {
    return 12383LL;
  }
}

uint64_t sub_1000B6DE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C05E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B6E04(uint64_t a1)
{
  unint64_t v2 = sub_1000BD518();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6E2C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD518();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6E54()
{
  return sub_1000B6360(*v0);
}

uint64_t sub_1000B6E5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000BE3A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B6E80(_BYTE *a1@<X8>)
{
  *a1 = 74;
}

uint64_t sub_1000B6E8C(uint64_t a1)
{
  unint64_t v2 = sub_1000BCDA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6EB4(uint64_t a1)
{
  unint64_t v2 = sub_1000BCDA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6EDC(uint64_t a1)
{
  unint64_t v2 = sub_1000BE040();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6F04(uint64_t a1)
{
  unint64_t v2 = sub_1000BE040();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6F2C(uint64_t a1)
{
  unint64_t v2 = sub_1000BE084();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6F54(uint64_t a1)
{
  unint64_t v2 = sub_1000BE084();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6F7C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD848();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6FA4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD848();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6FCC(uint64_t a1)
{
  unint64_t v2 = sub_1000BCEB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6FF4(uint64_t a1)
{
  unint64_t v2 = sub_1000BCEB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B701C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD490();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7044(uint64_t a1)
{
  unint64_t v2 = sub_1000BD490();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B706C()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 1953066351LL;
  }
}

uint64_t sub_1000B70A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C026C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B70C8(uint64_t a1)
{
  unint64_t v2 = sub_1000BDE20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B70F0(uint64_t a1)
{
  unint64_t v2 = sub_1000BDE20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7118(uint64_t a1)
{
  unint64_t v2 = sub_1000BE1D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7140(uint64_t a1)
{
  unint64_t v2 = sub_1000BE1D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7168(uint64_t a1)
{
  unint64_t v2 = sub_1000BD1E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7190(uint64_t a1)
{
  unint64_t v2 = sub_1000BD1E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B71B8(uint64_t a1)
{
  unint64_t v2 = sub_1000BD050();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B71E0(uint64_t a1)
{
  unint64_t v2 = sub_1000BD050();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7208(uint64_t a1)
{
  unint64_t v2 = sub_1000BD5E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7230(uint64_t a1)
{
  unint64_t v2 = sub_1000BD5E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7258(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7280(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B72A8(uint64_t a1)
{
  unint64_t v2 = sub_1000BE10C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B72D0(uint64_t a1)
{
  unint64_t v2 = sub_1000BE10C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B72F8(uint64_t a1)
{
  unint64_t v2 = sub_1000BD628();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7320(uint64_t a1)
{
  unint64_t v2 = sub_1000BD628();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7348(uint64_t a1)
{
  unint64_t v2 = sub_1000BD2F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7370(uint64_t a1)
{
  unint64_t v2 = sub_1000BD2F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7398(uint64_t a1)
{
  unint64_t v2 = sub_1000BD55C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B73C0(uint64_t a1)
{
  unint64_t v2 = sub_1000BD55C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B73E8(uint64_t a1)
{
  unint64_t v2 = sub_1000BE0C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7410(uint64_t a1)
{
  unint64_t v2 = sub_1000BE0C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7438(uint64_t a1)
{
  unint64_t v2 = sub_1000BD1A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7460(uint64_t a1)
{
  unint64_t v2 = sub_1000BD1A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7488(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B74B0(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B74D8(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7500(uint64_t a1)
{
  unint64_t v2 = sub_1000BDC00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7528(uint64_t a1)
{
  unint64_t v2 = sub_1000BDAF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7550(uint64_t a1)
{
  unint64_t v2 = sub_1000BDAF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7578(uint64_t a1)
{
  unint64_t v2 = sub_1000BD408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B75A0(uint64_t a1)
{
  unint64_t v2 = sub_1000BD408();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B75C8(uint64_t a1)
{
  unint64_t v2 = sub_1000BD2B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B75F0(uint64_t a1)
{
  unint64_t v2 = sub_1000BD2B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7618(uint64_t a1)
{
  unint64_t v2 = sub_1000BD33C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7640(uint64_t a1)
{
  unint64_t v2 = sub_1000BD33C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7668(uint64_t a1)
{
  unint64_t v2 = sub_1000BD44C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7690(uint64_t a1)
{
  unint64_t v2 = sub_1000BD44C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B76B8(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B76E0(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7708()
{
  uint64_t v1 = 0x5664657269736564LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x65566C6175746361LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t sub_1000B7780@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C0348(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B77A4(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B77CC(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B77F4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD77C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B781C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD77C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7844(uint64_t a1)
{
  unint64_t v2 = sub_1000BD3C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B786C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD3C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7894(uint64_t a1)
{
  unint64_t v2 = sub_1000BDF74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B78BC(uint64_t a1)
{
  unint64_t v2 = sub_1000BDF74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B78E4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD738();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B790C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD738();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7934(uint64_t a1)
{
  unint64_t v2 = sub_1000BDCCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B795C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDCCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7984(uint64_t a1)
{
  unint64_t v2 = sub_1000BCEFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B79AC(uint64_t a1)
{
  unint64_t v2 = sub_1000BCEFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B79D4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD11C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B79FC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD11C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7A24(uint64_t a1)
{
  unint64_t v2 = sub_1000BDEEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7A4C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDEEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7A74(uint64_t a1)
{
  unint64_t v2 = sub_1000BE194();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7A9C(uint64_t a1)
{
  unint64_t v2 = sub_1000BE194();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7AC4(uint64_t a1)
{
  unint64_t v2 = sub_1000BE150();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7AEC(uint64_t a1)
{
  unint64_t v2 = sub_1000BE150();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7B14(uint64_t a1)
{
  unint64_t v2 = sub_1000BD0D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7B3C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD0D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7B64(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7B8C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7BB4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD804();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7BDC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD804();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7C04(uint64_t a1)
{
  unint64_t v2 = sub_1000BD270();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7C2C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD270();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7C54()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t sub_1000B7C98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C04F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B7CBC(uint64_t a1)
{
  unint64_t v2 = sub_1000BDDDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7CE4(uint64_t a1)
{
  unint64_t v2 = sub_1000BDDDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7D0C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD160();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7D34(uint64_t a1)
{
  unint64_t v2 = sub_1000BD160();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7D5C()
{
  return 0x73726F727265LL;
}

uint64_t sub_1000B7D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73726F727265LL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE600000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73726F727265LL, 0xE600000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000B7DFC(uint64_t a1)
{
  unint64_t v2 = sub_1000BE21C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7E24(uint64_t a1)
{
  unint64_t v2 = sub_1000BE21C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7E4C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDF30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7E74(uint64_t a1)
{
  unint64_t v2 = sub_1000BDF30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7E9C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDB78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7EC4(uint64_t a1)
{
  unint64_t v2 = sub_1000BDB78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7EEC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD094();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7F14(uint64_t a1)
{
  unint64_t v2 = sub_1000BD094();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7F3C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDEA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7F64(uint64_t a1)
{
  unint64_t v2 = sub_1000BDEA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7F8C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDBBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7FB4(uint64_t a1)
{
  unint64_t v2 = sub_1000BDBBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7FDC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8004(uint64_t a1)
{
  unint64_t v2 = sub_1000BD380();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B802C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDFFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8054(uint64_t a1)
{
  unint64_t v2 = sub_1000BDFFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B807C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD66C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B80A4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD66C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B80CC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD88C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B80F4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD88C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B811C(uint64_t a1)
{
  unint64_t v2 = sub_1000BDFB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8144(uint64_t a1)
{
  unint64_t v2 = sub_1000BDFB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B816C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD9E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8194(uint64_t a1)
{
  unint64_t v2 = sub_1000BD9E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B81BC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD7C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B81E4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD7C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B820C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD00C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8234(uint64_t a1)
{
  unint64_t v2 = sub_1000BD00C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B825C(uint64_t a1)
{
  unint64_t v2 = sub_1000BCFC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8284(uint64_t a1)
{
  unint64_t v2 = sub_1000BCFC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B82AC(uint64_t a1)
{
  unint64_t v2 = sub_1000BCF84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B82D4(uint64_t a1)
{
  unint64_t v2 = sub_1000BCF84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B82FC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD99C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8324(uint64_t a1)
{
  unint64_t v2 = sub_1000BD99C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B834C(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8374(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B839C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD4D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B83C4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD4D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B83EC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD958();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8414(uint64_t a1)
{
  unint64_t v2 = sub_1000BD958();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B843C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8464(uint64_t a1)
{
  unint64_t v2 = sub_1000BD914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B848C(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B84B4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B84DC(uint64_t a1)
{
  unint64_t v2 = sub_1000BD22C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8504(uint64_t a1)
{
  unint64_t v2 = sub_1000BD22C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B852C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE200000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000B85A8(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B85D0(uint64_t a1)
{
  unint64_t v2 = sub_1000BDD10();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B85F8(void *a1)
{
  uint64_t v226 = sub_100005FB4(&qword_10015B3E8);
  v80[70] = *(void *)(v226 - 8);
  __chkstk_darwin(v226);
  char v225 = (char *)v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v224 = sub_100005FB4(&qword_10015B3F0);
  v80[69] = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v223 = (char *)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v222 = sub_100005FB4(&qword_10015B3F8);
  v80[68] = *(void *)(v222 - 8);
  __chkstk_darwin(v222);
  unint64_t v221 = (char *)v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v220 = sub_100005FB4(&qword_10015B400);
  v80[67] = *(void *)(v220 - 8);
  __chkstk_darwin(v220);
  uint64_t v219 = (char *)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v218 = sub_100005FB4(&qword_10015B408);
  v80[66] = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  uint64_t v217 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = sub_100005FB4(&qword_10015B410);
  v80[65] = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v215 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v214 = sub_100005FB4(&qword_10015B418);
  v80[64] = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  unint64_t v213 = (char *)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v212 = sub_100005FB4(&qword_10015B420);
  v80[63] = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v211 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v210 = sub_100005FB4(&qword_10015B428);
  v80[62] = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  __int128 v209 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v208 = sub_100005FB4(&qword_10015B430);
  v80[61] = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v207 = (char *)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v206 = sub_100005FB4(&qword_10015B438);
  v80[60] = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  os_log_type_t v205 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v204 = sub_100005FB4(&qword_10015B440);
  v80[59] = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  BOOL v203 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v202 = sub_100005FB4(&qword_10015B448);
  v80[58] = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  uint64_t v201 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v200 = sub_100005FB4(&qword_10015B450);
  v80[57] = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t v199 = (char *)v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = sub_100005FB4(&qword_10015B458);
  v80[56] = *(void *)(v198 - 8);
  __chkstk_darwin(v198);
  os_signpost_id_t v197 = (char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = sub_100005FB4(&qword_10015B460);
  v80[55] = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v195 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v194 = sub_100005FB4(&qword_10015B468);
  v80[54] = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v193 = (char *)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v192 = sub_100005FB4(&qword_10015B470);
  v80[53] = *(void *)(v192 - 8);
  __chkstk_darwin(v192);
  unint64_t v191 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = sub_100005FB4(&qword_10015B478);
  v80[52] = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  uint64_t v189 = (char *)v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = sub_100005FB4(&qword_10015B480);
  v80[51] = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  uint64_t v187 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_100005FB4(&qword_10015B488);
  v80[50] = *(void *)(v186 - 8);
  __chkstk_darwin(v186);
  uint64_t v184 = (char *)v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v185 = sub_100005FB4(&qword_10015B490);
  v80[49] = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v183 = (char *)v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v182 = sub_100005FB4(&qword_10015B498);
  v80[48] = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  unint64_t v181 = (char *)v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v180 = sub_100005FB4(&qword_10015B4A0);
  v80[47] = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  uint64_t v179 = (char *)v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = sub_100005FB4(&qword_10015B4A8);
  v80[46] = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v177 = (char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = sub_100005FB4(&qword_10015B4B0);
  v80[45] = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v174 = (char *)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v173 = sub_100005FB4(&qword_10015B4B8);
  v80[43] = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v171 = (char *)v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v175 = sub_100005FB4(&qword_10015B4C0);
  v80[44] = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  int64_t v172 = (char *)v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = sub_100005FB4(&qword_10015B4C8);
  v80[42] = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  char v168 = (char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v167 = sub_100005FB4(&qword_10015B4D0);
  v80[40] = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v165 = (char *)v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = sub_100005FB4(&qword_10015B4D8);
  v80[41] = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  __int128 v166 = (char *)v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = sub_100005FB4(&qword_10015B4E0);
  v80[39] = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = (char *)v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v162 = sub_100005FB4(&qword_10015B4E8);
  v80[38] = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  uint64_t v161 = (char *)v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v160 = sub_100005FB4(&qword_10015B4F0);
  v80[37] = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v159 = (char *)v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = sub_100005FB4(&qword_10015B4F8);
  v80[36] = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = sub_100005FB4(&qword_10015B500);
  v80[35] = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v155 = (char *)v80 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v154 = sub_100005FB4(&qword_10015B508);
  v80[34] = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v153 = (char *)v80 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = sub_100005FB4(&qword_10015B510);
  v80[33] = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v151 = (char *)v80 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = sub_100005FB4(&qword_10015B518);
  v80[32] = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  unint64_t v149 = (char *)v80 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = sub_100005FB4(&qword_10015B520);
  v80[31] = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  char v147 = (char *)v80 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v146 = sub_100005FB4(&qword_10015B528);
  v80[30] = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v145 = (char *)v80 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v144 = sub_100005FB4(&qword_10015B530);
  v80[29] = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = (char *)v80 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = sub_100005FB4(&qword_10015B538);
  v80[28] = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v141 = (char *)v80 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = sub_100005FB4(&qword_10015B540);
  v80[27] = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v138 = (char *)v80 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = sub_100005FB4(&qword_10015B548);
  v80[25] = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v135 = (char *)v80 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = sub_100005FB4(&qword_10015B550);
  v80[24] = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v133 = (char *)v80 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v140 = sub_100005FB4(&qword_10015B558);
  v80[26] = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v137 = (char *)v80 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = sub_100005FB4(&qword_10015B560);
  v80[23] = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v131 = (char *)v80 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = sub_100005FB4(&qword_10015B568);
  v80[22] = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  int v129 = (char *)v80 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = sub_100005FB4(&qword_10015B570);
  v80[21] = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v127 = (char *)v80 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = sub_100005FB4(&qword_10015B578);
  v80[20] = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  __int128 v125 = (char *)v80 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = sub_100005FB4(&qword_10015B580);
  v80[19] = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v122 = (char *)v80 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = sub_100005FB4(&qword_10015B588);
  v80[17] = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (char *)v80 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = sub_100005FB4(&qword_10015B590);
  v80[16] = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v117 = (char *)v80 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = sub_100005FB4(&qword_10015B598);
  v80[18] = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v120 = (char *)v80 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = sub_100005FB4(&qword_10015B5A0);
  v80[13] = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)v80 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = sub_100005FB4(&qword_10015B5A8);
  v80[12] = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (char *)v80 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = sub_100005FB4(&qword_10015B5B0);
  v80[15] = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v114 = (char *)v80 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = sub_100005FB4(&qword_10015B5B8);
  v80[11] = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  char v107 = (char *)v80 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_100005FB4(&qword_10015B5C0);
  v80[14] = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v112 = (char *)v80 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_100005FB4(&qword_10015B5C8);
  v80[10] = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v105 = (char *)v80 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = sub_100005FB4(&qword_10015B5D0);
  v80[9] = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  __int128 v103 = (char *)v80 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_100005FB4(&qword_10015B5D8);
  v80[8] = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  __int128 v101 = (char *)v80 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = sub_100005FB4(&qword_10015B5E0);
  v80[7] = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  __int128 v98 = (char *)v80 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = sub_100005FB4(&qword_10015B5E8);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v93 = (char *)v80 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = sub_100005FB4(&qword_10015B5F0);
  v80[6] = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v97 = (char *)v80 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = sub_100005FB4(&qword_10015B5F8);
  v80[4] = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)v80 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = sub_100005FB4(&qword_10015B600);
  v80[5] = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v91 = (char *)v80 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = sub_100005FB4(&qword_10015B608);
  v80[2] = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v86 = (char *)v80 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = sub_100005FB4(&qword_10015B610);
  v80[1] = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v84 = (char *)v80 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = sub_100005FB4(&qword_10015B618);
  _OWORD v80[3] = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v87 = (char *)v80 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = sub_100005FB4(&qword_10015B620);
  v80[0] = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)v80 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = sub_100005FB4(&qword_10015B628);
  __chkstk_darwin(v81);
  uint64_t v74 = sub_100005FB4(&qword_10015B630);
  __chkstk_darwin(v74);
  uint64_t v229 = sub_100005FB4(&qword_10015B638);
  uint64_t v227 = *(void *)(v229 - 8);
  __chkstk_darwin(v229);
  uint64_t v76 = (char *)v80 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = a1[3];
  uint64_t v77 = a1[4];
  sub_100005110(a1, v78);
  unint64_t v79 = sub_1000BCDA8();
  Swift::String v230 = v76;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KMError.CodingKeys,  &type metadata for KMError.CodingKeys,  v79,  v78,  v77);
  sub_1000516A8(v228, (uint64_t)v231);
  __asm { BR              X10 }

uint64_t sub_1000B9DC4()
{
  uint64_t v4 = *(void *)(v3 - 168);
  *(_BYTE *)(v3 - 224) = 0;
  unint64_t v5 = sub_1000BE21C();
  uint64_t v6 = *(void *)(v3 - 240);
  uint64_t v7 = *(void *)(v3 - 232);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for KMError.MultipleCodingKeys,  v3 - 224,  v6,  &type metadata for KMError.MultipleCodingKeys,  v5);
  *(void *)(v3 - 224) = v4;
  uint64_t v8 = sub_100005FB4(&qword_10015B658);
  uint64_t v9 = sub_1000CB2F4( &qword_10015B660,  (void (*)(void))sub_1000BE260,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 224, v10, v2, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 264) + 8LL))(v7, v6);
}

uint64_t sub_1000BC350@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000C06A8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000516A8((uint64_t)v5, a2);
  }
  return result;
}

void sub_1000BC394(void *a1)
{
}

void sub_1000BC3E0()
{
}

uint64_t sub_1000BC414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000B48B4();
  uint64_t v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    char v10 = 1;
    uint64_t v9 = v6;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000B48B4();
  uint64_t v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    char v10 = 0;
    uint64_t v9 = v6;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000B48B4();
  uint64_t v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);
    char v10 = 1;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1LL);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    char v10 = v11 ^ 1;
  }

  return v10 & 1;
}

uint64_t sub_1000BC618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000B48B4();
  uint64_t v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);
    char v10 = 1;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1LL);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    char v10 = v11 ^ 1;
  }

  return v10 & 1;
}

uint64_t sub_1000BC6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000B48B4();
  uint64_t v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    char v10 = 0;
    uint64_t v9 = v6;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (!v38) {
    goto LABEL_6;
  }
  sub_100005158(&v37, (uint64_t)v40);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  uint64_t v14 = v13;
  uint64_t v15 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v15, v36);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v17;
  sub_100089A3C( a3,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_1000516E4);
  sub_1000B48B4();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_100089A3C( a3,  (void (*)(void, void, void, void, void, void, void, void, void, char))sub_100039508);
  *(void *)(inited + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v19;
  *(void *)(inited + 56) = v21;
  unint64_t v22 = sub_100015D14(inited);
  id v23 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  id v26 = [v23 initWithDomain:v24 code:5 userInfo:isa];

  unint64_t v27 = (unint64_t)[v26 code];
  if ((v27 & 0x8000000000000000LL) != 0)
  {
LABEL_5:
    __break(1u);
LABEL_6:
    sub_1000C6780((uint64_t)&v37);
    goto LABEL_7;
  }

  uint64_t v28 = v41;
  uint64_t v29 = v42;
  sub_100005110(v40, v41);
  sub_100071818(v28, v29);
  uint64_t v30 = v38;
  uint64_t v31 = v39;
  sub_100005110(&v37, v38);
  LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v30, v31);
  sub_100006034(&v37);
  if ((v30 & 1) != 0)
  {
    uint64_t v32 = String.utf8CString.getter(a1);
    abort_with_reason(5LL, v27, v32 + 32, 0LL);
    goto LABEL_5;
  }

uint64_t sub_1000BC9C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void (*a8)(__n128))
{
  if (a7) {
    unint64_t v9 = a7;
  }
  else {
    unint64_t v9 = 0x800000010012A390LL;
  }
  __n128 v10 = swift_bridgeObjectRetain(a7);
  a8(v10);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000BCBB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for POSIXError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __n128 v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = errno.getter(v8);
  uint64_t result = POSIXErrorCode.init(rawValue:)(v11);
  if ((result & 0x100000000LL) != 0 && (uint64_t result = POSIXErrorCode.init(rawValue:)(106LL), (result & 0x100000000LL) != 0))
  {
    __break(1u);
  }

  else
  {
    int v26 = result;
    unint64_t v13 = sub_10006A420((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v14 = sub_10006A7E4();
    uint64_t v15 = _BridgedStoredNSError.init(_:userInfo:)(&v26, v13, v6, v14);
    uint64_t v16 = static os_signpost_type_t.event.getter(v15);
    uint64_t v17 = (void *)*sub_1000D2E78();
    uint64_t v18 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_10010F110;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    id v20 = v17;
    uint64_t v21 = String.init<A>(describing:)(v10, v6);
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_100026B64();
    *(void *)(v19 + 3sub_100006034(v0 + 2) = v21;
    *(void *)(v19 + sub_10007CFB4(v0 + 40) = v23;
    static OSSignpostID.exclusive.getter();
    char v24 = 2;
    os_signpost(_:dso:log:name:signpostID:_:_:)( v16,  &_mh_execute_header,  v20,  "globalError",  11LL,  2LL,  v5,  "Encountered error: %{public}s",  29LL,  v24,  v19);

    swift_bridgeObjectRelease(v19);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }

  return result;
}

unint64_t sub_1000BCDA8()
{
  unint64_t result = qword_100164FB0;
  if (!qword_100164FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A148, &type metadata for KMError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FB0);
  }

  return result;
}

unint64_t sub_1000BCDEC()
{
  unint64_t result = qword_100164FB8;
  if (!qword_100164FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A0F8, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FB8);
  }

  return result;
}

unint64_t sub_1000BCE30()
{
  unint64_t result = qword_100164FC0;
  if (!qword_100164FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A0A8, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FC0);
  }

  return result;
}

unint64_t sub_1000BCE74()
{
  unint64_t result = qword_100164FC8;
  if (!qword_100164FC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A058, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FC8);
  }

  return result;
}

unint64_t sub_1000BCEB8()
{
  unint64_t result = qword_100164FD0;
  if (!qword_100164FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A008, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FD0);
  }

  return result;
}

unint64_t sub_1000BCEFC()
{
  unint64_t result = qword_100164FD8;
  if (!qword_100164FD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119FB8, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FD8);
  }

  return result;
}

unint64_t sub_1000BCF40()
{
  unint64_t result = qword_100164FE0;
  if (!qword_100164FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119F68, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FE0);
  }

  return result;
}

unint64_t sub_1000BCF84()
{
  unint64_t result = qword_100164FE8;
  if (!qword_100164FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119F18, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FE8);
  }

  return result;
}

unint64_t sub_1000BCFC8()
{
  unint64_t result = qword_100164FF0;
  if (!qword_100164FF0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100119EC8,  &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FF0);
  }

  return result;
}

unint64_t sub_1000BD00C()
{
  unint64_t result = qword_100164FF8;
  if (!qword_100164FF8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100119E78,  &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FF8);
  }

  return result;
}

unint64_t sub_1000BD050()
{
  unint64_t result = qword_100165000;
  if (!qword_100165000)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119E28, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165000);
  }

  return result;
}

unint64_t sub_1000BD094()
{
  unint64_t result = qword_100165008;
  if (!qword_100165008)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119DD8, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165008);
  }

  return result;
}

unint64_t sub_1000BD0D8()
{
  unint64_t result = qword_100165010;
  if (!qword_100165010)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119D88, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165010);
  }

  return result;
}

unint64_t sub_1000BD11C()
{
  unint64_t result = qword_100165018;
  if (!qword_100165018)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119D38, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165018);
  }

  return result;
}

unint64_t sub_1000BD160()
{
  unint64_t result = qword_100165020;
  if (!qword_100165020)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119CE8, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165020);
  }

  return result;
}

unint64_t sub_1000BD1A4()
{
  unint64_t result = qword_100165028;
  if (!qword_100165028)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119C98, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165028);
  }

  return result;
}

unint64_t sub_1000BD1E8()
{
  unint64_t result = qword_100165030;
  if (!qword_100165030)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119C48, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165030);
  }

  return result;
}

unint64_t sub_1000BD22C()
{
  unint64_t result = qword_100165038;
  if (!qword_100165038)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119BF8, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165038);
  }

  return result;
}

unint64_t sub_1000BD270()
{
  unint64_t result = qword_100165040;
  if (!qword_100165040)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119BA8, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165040);
  }

  return result;
}

unint64_t sub_1000BD2B4()
{
  unint64_t result = qword_100165048;
  if (!qword_100165048)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119B58, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165048);
  }

  return result;
}

unint64_t sub_1000BD2F8()
{
  unint64_t result = qword_100165050;
  if (!qword_100165050)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119B08, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165050);
  }

  return result;
}

unint64_t sub_1000BD33C()
{
  unint64_t result = qword_100165058;
  if (!qword_100165058)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119AB8, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165058);
  }

  return result;
}

unint64_t sub_1000BD380()
{
  unint64_t result = qword_100165060;
  if (!qword_100165060)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119A68, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165060);
  }

  return result;
}

unint64_t sub_1000BD3C4()
{
  unint64_t result = qword_100165068;
  if (!qword_100165068)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119A18, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165068);
  }

  return result;
}

unint64_t sub_1000BD408()
{
  unint64_t result = qword_100165070;
  if (!qword_100165070)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001199C8, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165070);
  }

  return result;
}

unint64_t sub_1000BD44C()
{
  unint64_t result = qword_100165078;
  if (!qword_100165078)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119978, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165078);
  }

  return result;
}

unint64_t sub_1000BD490()
{
  unint64_t result = qword_100165080;
  if (!qword_100165080)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119928, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165080);
  }

  return result;
}

unint64_t sub_1000BD4D4()
{
  unint64_t result = qword_100165088;
  if (!qword_100165088)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001198D8, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165088);
  }

  return result;
}

unint64_t sub_1000BD518()
{
  unint64_t result = qword_100165090;
  if (!qword_100165090)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119888, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165090);
  }

  return result;
}

unint64_t sub_1000BD55C()
{
  unint64_t result = qword_100165098;
  if (!qword_100165098)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119838, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165098);
  }

  return result;
}

unint64_t sub_1000BD5A0()
{
  unint64_t result = qword_1001650A0;
  if (!qword_1001650A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001197E8, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650A0);
  }

  return result;
}

unint64_t sub_1000BD5E4()
{
  unint64_t result = qword_1001650A8;
  if (!qword_1001650A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119798, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650A8);
  }

  return result;
}

unint64_t sub_1000BD628()
{
  unint64_t result = qword_1001650B0;
  if (!qword_1001650B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119748, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650B0);
  }

  return result;
}

unint64_t sub_1000BD66C()
{
  unint64_t result = qword_1001650B8;
  if (!qword_1001650B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001196F8, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650B8);
  }

  return result;
}

unint64_t sub_1000BD6B0()
{
  unint64_t result = qword_1001650C0;
  if (!qword_1001650C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001196A8, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650C0);
  }

  return result;
}

unint64_t sub_1000BD6F4()
{
  unint64_t result = qword_1001650C8;
  if (!qword_1001650C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119658, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650C8);
  }

  return result;
}

unint64_t sub_1000BD738()
{
  unint64_t result = qword_1001650D0;
  if (!qword_1001650D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119608, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650D0);
  }

  return result;
}

unint64_t sub_1000BD77C()
{
  unint64_t result = qword_1001650D8;
  if (!qword_1001650D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001195B8, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650D8);
  }

  return result;
}

unint64_t sub_1000BD7C0()
{
  unint64_t result = qword_1001650E0;
  if (!qword_1001650E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119568, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650E0);
  }

  return result;
}

unint64_t sub_1000BD804()
{
  unint64_t result = qword_1001650E8;
  if (!qword_1001650E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119518, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650E8);
  }

  return result;
}

unint64_t sub_1000BD848()
{
  unint64_t result = qword_1001650F0;
  if (!qword_1001650F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001194C8, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650F0);
  }

  return result;
}

unint64_t sub_1000BD88C()
{
  unint64_t result = qword_1001650F8;
  if (!qword_1001650F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119478, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650F8);
  }

  return result;
}

unint64_t sub_1000BD8D0()
{
  unint64_t result = qword_100165100;
  if (!qword_100165100)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119428, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165100);
  }

  return result;
}

unint64_t sub_1000BD914()
{
  unint64_t result = qword_100165108;
  if (!qword_100165108)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001193D8, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165108);
  }

  return result;
}

unint64_t sub_1000BD958()
{
  unint64_t result = qword_100165110;
  if (!qword_100165110)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119388, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165110);
  }

  return result;
}

unint64_t sub_1000BD99C()
{
  unint64_t result = qword_100165118;
  if (!qword_100165118)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119338, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165118);
  }

  return result;
}

unint64_t sub_1000BD9E0()
{
  unint64_t result = qword_100165120;
  if (!qword_100165120)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001192E8, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165120);
  }

  return result;
}

unint64_t sub_1000BDA24()
{
  unint64_t result = qword_100165128;
  if (!qword_100165128)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119298, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165128);
  }

  return result;
}

unint64_t sub_1000BDA68()
{
  unint64_t result = qword_10015B648;
  if (!qword_10015B648)
  {
    uint64_t v1 = sub_100012010(&qword_10015A3E8);
    sub_1000CB254( &qword_100158018,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015B648);
  }

  return result;
}

unint64_t sub_1000BDAF0()
{
  unint64_t result = qword_100165130;
  if (!qword_100165130)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119248, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165130);
  }

  return result;
}

unint64_t sub_1000BDB34()
{
  unint64_t result = qword_100165138;
  if (!qword_100165138)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001191F8, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165138);
  }

  return result;
}

unint64_t sub_1000BDB78()
{
  unint64_t result = qword_100165140;
  if (!qword_100165140)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001191A8, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165140);
  }

  return result;
}

unint64_t sub_1000BDBBC()
{
  unint64_t result = qword_100165148;
  if (!qword_100165148)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119158, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165148);
  }

  return result;
}

unint64_t sub_1000BDC00()
{
  unint64_t result = qword_100165150;
  if (!qword_100165150)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119108, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165150);
  }

  return result;
}

unint64_t sub_1000BDC44()
{
  unint64_t result = qword_100165158;
  if (!qword_100165158)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001190B8, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165158);
  }

  return result;
}

unint64_t sub_1000BDC88()
{
  unint64_t result = qword_100165160;
  if (!qword_100165160)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119068, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165160);
  }

  return result;
}

unint64_t sub_1000BDCCC()
{
  unint64_t result = qword_100165168;
  if (!qword_100165168)
  {
    unint64_t result = swift_getWitnessTable(&unk_100119018, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165168);
  }

  return result;
}

unint64_t sub_1000BDD10()
{
  unint64_t result = qword_100165170;
  if (!qword_100165170)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118FC8, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165170);
  }

  return result;
}

unint64_t sub_1000BDD54()
{
  unint64_t result = qword_100165178;
  if (!qword_100165178)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118F78, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165178);
  }

  return result;
}

unint64_t sub_1000BDD98()
{
  unint64_t result = qword_100165180;
  if (!qword_100165180)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118F28, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165180);
  }

  return result;
}

unint64_t sub_1000BDDDC()
{
  unint64_t result = qword_100165188;
  if (!qword_100165188)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118ED8, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165188);
  }

  return result;
}

unint64_t sub_1000BDE20()
{
  unint64_t result = qword_100165190;
  if (!qword_100165190)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118E88, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165190);
  }

  return result;
}

unint64_t sub_1000BDE64()
{
  unint64_t result = qword_10015B650;
  if (!qword_10015B650)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B470, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015B650);
  }

  return result;
}

unint64_t sub_1000BDEA8()
{
  unint64_t result = qword_100165198;
  if (!qword_100165198)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118E38, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165198);
  }

  return result;
}

unint64_t sub_1000BDEEC()
{
  unint64_t result = qword_1001651A0;
  if (!qword_1001651A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118DE8, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651A0);
  }

  return result;
}

unint64_t sub_1000BDF30()
{
  unint64_t result = qword_1001651A8;
  if (!qword_1001651A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118D98, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651A8);
  }

  return result;
}

unint64_t sub_1000BDF74()
{
  unint64_t result = qword_1001651B0;
  if (!qword_1001651B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118D48, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651B0);
  }

  return result;
}

unint64_t sub_1000BDFB8()
{
  unint64_t result = qword_1001651B8;
  if (!qword_1001651B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118CF8, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651B8);
  }

  return result;
}

unint64_t sub_1000BDFFC()
{
  unint64_t result = qword_1001651C0;
  if (!qword_1001651C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118CA8, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651C0);
  }

  return result;
}

unint64_t sub_1000BE040()
{
  unint64_t result = qword_1001651C8;
  if (!qword_1001651C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118C58, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651C8);
  }

  return result;
}

unint64_t sub_1000BE084()
{
  unint64_t result = qword_1001651D0;
  if (!qword_1001651D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118C08, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651D0);
  }

  return result;
}

unint64_t sub_1000BE0C8()
{
  unint64_t result = qword_1001651D8;
  if (!qword_1001651D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118BB8, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651D8);
  }

  return result;
}

unint64_t sub_1000BE10C()
{
  unint64_t result = qword_1001651E0;
  if (!qword_1001651E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118B68, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651E0);
  }

  return result;
}

unint64_t sub_1000BE150()
{
  unint64_t result = qword_1001651E8;
  if (!qword_1001651E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118B18, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651E8);
  }

  return result;
}

unint64_t sub_1000BE194()
{
  unint64_t result = qword_1001651F0;
  if (!qword_1001651F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118AC8, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651F0);
  }

  return result;
}

unint64_t sub_1000BE1D8()
{
  unint64_t result = qword_1001651F8;
  if (!qword_1001651F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118A78, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651F8);
  }

  return result;
}

unint64_t sub_1000BE21C()
{
  unint64_t result = qword_100165200[0];
  if (!qword_100165200[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118A28, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_100165200);
  }

  return result;
}

unint64_t sub_1000BE260()
{
  unint64_t result = qword_10015B668;
  if (!qword_10015B668)
  {
    unint64_t result = swift_getWitnessTable(&unk_100114A20, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B668);
  }

  return result;
}

uint64_t sub_1000BE2A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x746E656449726570LL && a2 == 0xED00007265696669LL)
  {
    swift_bridgeObjectRelease(0xED00007265696669LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E656449726570LL, 0xED00007265696669LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000BE3A0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656C7069746C756DLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C7069746C756DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C61697265736564LL && a2 == 0xEF6E6F6974617A69LL)
  {
    unint64_t v7 = 0xEF6E6F6974617A69LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61697265736564LL, 0xEF6E6F6974617A69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v8 = 0x800000010012A440LL;
    if (a2 == 0x800000010012A440LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012A440LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x65526C656E72656BLL && a2 == 0xED00007473657571LL)
  {
    unint64_t v9 = 0xED00007473657571LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65526C656E72656BLL, 0xED00007473657571LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x694B726576697264LL && a2 == 0xEF68636E75614C74LL)
  {
    unint64_t v10 = 0xEF68636E75614C74LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694B726576697264LL, 0xEF68636E75614C74LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x6F69736E65747865LL && a2 == 0xED000064616F4C6ELL)
  {
    unint64_t v11 = 0xED000064616F4C6ELL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69736E65747865LL, 0xED000064616F4C6ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x697463656C6C6F63LL && a2 == 0xEE0064616F4C6E6FLL)
  {
    unint64_t v12 = 0xEE0064616F4C6E6FLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63LL, 0xEE0064616F4C6E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v13 = 0x800000010012A460LL;
    if (a2 == 0x800000010012A460LL) {
      goto LABEL_48;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010012A460LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if (a1 == 0x656372756F736572LL && a2 == 0xEC00000064616F4CLL)
  {
    unint64_t v14 = 0xEC00000064616F4CLL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F736572LL, 0xEC00000064616F4CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_54;
  }

  if (a1 == 0x7A696C6169726573LL && a2 == 0xED00006E6F697461LL)
  {
    unint64_t v15 = 0xED00006E6F697461LL;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7A696C6169726573LL, 0xED00006E6F697461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_60;
  }

  if (a1 == 0x4164696C61766E69LL && a2 == 0xEF746E656D756772LL)
  {
    unint64_t v16 = 0xEF746E656D756772LL;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164696C61766E69LL, 0xEF746E656D756772LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_66;
  }

  if (a1 == 0x646E756F46746F6ELL && a2 == 0xE800000000000000LL)
  {
    unint64_t v17 = 0xE800000000000000LL;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F46746F6ELL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_72;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v18 = 0x800000010012A480LL;
    if (a2 == 0x800000010012A480LL) {
      goto LABEL_77;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010012A480LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if (a1 == 0x6E697A696C616572LL && a2 == 0xE900000000000067LL)
  {
    unint64_t v19 = 0xE900000000000067LL;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E697A696C616572LL, 0xE900000000000067LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
    goto LABEL_83;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000010012A4A0LL)
  {
    unint64_t v20 = 0x800000010012A4A0LL;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010012A4A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_89;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v21 = 0x800000010012A4C0LL;
    if (a2 == 0x800000010012A4C0LL) {
      goto LABEL_94;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010012A4C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v22 = 0x800000010012A4E0LL;
    if (a2 == 0x800000010012A4E0LL) {
      goto LABEL_99;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012A4E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 16LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v23 = 0x800000010012A500LL;
    if (a2 == 0x800000010012A500LL) {
      goto LABEL_104;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010012A500LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_104:
    swift_bridgeObjectRelease(v23);
    return 17LL;
  }

  if (a1 == 0x69746164696C6176LL && a2 == 0xEA00000000006E6FLL)
  {
    unint64_t v24 = 0xEA00000000006E6FLL;
LABEL_110:
    swift_bridgeObjectRelease(v24);
    return 18LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746164696C6176LL, 0xEA00000000006E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
    goto LABEL_110;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v25 = 0x800000010012A520LL;
    if (a2 == 0x800000010012A520LL) {
      goto LABEL_115;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010012A520LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v25);
    return 19LL;
  }

  if (a1 == 0x74737973656C6966LL && a2 == 0xEA00000000006D65LL)
  {
    unint64_t v26 = 0xEA00000000006D65LL;
LABEL_121:
    swift_bridgeObjectRelease(v26);
    return 20LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74737973656C6966LL, 0xEA00000000006D65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
    goto LABEL_121;
  }

  if (a1 == 0x656363416B736964LL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v27 = 0xEA00000000007373LL;
LABEL_127:
    swift_bridgeObjectRelease(v27);
    return 21LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656363416B736964LL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
    goto LABEL_127;
  }

  if (a1 == 0x65636341776F6C66LL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v28 = 0xEA00000000007373LL;
LABEL_133:
    swift_bridgeObjectRelease(v28);
    return 22LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636341776F6C66LL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
    goto LABEL_133;
  }

  if (a1 == 0x797265766F636572LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v29 = 0xE800000000000000LL;
LABEL_139:
    swift_bridgeObjectRelease(v29);
    return 23LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797265766F636572LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
    goto LABEL_139;
  }

  if (a1 == 0x6363416D6172766ELL && a2 == 0xEB00000000737365LL)
  {
    unint64_t v30 = 0xEB00000000737365LL;
LABEL_145:
    swift_bridgeObjectRelease(v30);
    return 24LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6363416D6172766ELL, 0xEB00000000737365LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
    goto LABEL_145;
  }

  if (a1 == 0x61507972616E6962LL && a2 == 0xED0000676E697372LL)
  {
    unint64_t v31 = 0xED0000676E697372LL;
LABEL_151:
    swift_bridgeObjectRelease(v31);
    return 25LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61507972616E6962LL, 0xED0000676E697372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
    goto LABEL_151;
  }

  if (a1 == 0x6556657275747566LL && a2 == 0xED00006E6F697372LL)
  {
    unint64_t v32 = 0xED00006E6F697372LL;
LABEL_157:
    swift_bridgeObjectRelease(v32);
    return 26LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556657275747566LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v32 = a2;
    goto LABEL_157;
  }

  if (a1 == 0x6975426568636163LL && a2 == 0xED0000676E69646CLL)
  {
    unint64_t v33 = 0xED0000676E69646CLL;
LABEL_163:
    swift_bridgeObjectRelease(v33);
    return 27LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6975426568636163LL, 0xED0000676E69646CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v33 = a2;
    goto LABEL_163;
  }

  if (a1 == 0x676E6967617473LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v34 = 0xE700000000000000LL;
LABEL_169:
    swift_bridgeObjectRelease(v34);
    return 28LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6967617473LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v34 = a2;
    goto LABEL_169;
  }

  if (a1 == 0x6F506D6574737973LL && a2 == 0xEC0000007963696CLL)
  {
    unint64_t v35 = 0xEC0000007963696CLL;
LABEL_175:
    swift_bridgeObjectRelease(v35);
    return 29LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F506D6574737973LL, 0xEC0000007963696CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v35 = a2;
    goto LABEL_175;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v36 = 0x800000010012A540LL;
    if (a2 == 0x800000010012A540LL) {
      goto LABEL_180;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A540LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v36 = a2;
LABEL_180:
    swift_bridgeObjectRelease(v36);
    return 30LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v37 = 0x800000010012A560LL;
    if (a2 == 0x800000010012A560LL) {
      goto LABEL_185;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010012A560LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
LABEL_185:
    swift_bridgeObjectRelease(v37);
    return 31LL;
  }

  if (a1 == 0x69746E6568747561LL && a2 == 0xEE006E6F69746163LL)
  {
    unint64_t v38 = 0xEE006E6F69746163LL;
LABEL_191:
    swift_bridgeObjectRelease(v38);
    return 32LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6568747561LL, 0xEE006E6F69746163LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v38 = a2;
    goto LABEL_191;
  }

  if (a1 == 0x786F62646E6173LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v39 = 0xE700000000000000LL;
LABEL_197:
    swift_bridgeObjectRelease(v39);
    return 33LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x786F62646E6173LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v39 = a2;
    goto LABEL_197;
  }

  if (a1 == 0x72756769666E6F63LL && a2 == 0xED00006E6F697461LL)
  {
    unint64_t v40 = 0xED00006E6F697461LL;
LABEL_203:
    swift_bridgeObjectRelease(v40);
    return 34LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63LL, 0xED00006E6F697461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v40 = a2;
    goto LABEL_203;
  }

  if (a1 == 0x45676E6967676F6CLL && a2 == 0xEC000000726F7272LL)
  {
    unint64_t v41 = 0xEC000000726F7272LL;
LABEL_209:
    swift_bridgeObjectRelease(v41);
    return 35LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45676E6967676F6CLL, 0xEC000000726F7272LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v41 = a2;
    goto LABEL_209;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v42 = 0x800000010012A580LL;
    if (a2 == 0x800000010012A580LL) {
      goto LABEL_214;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A580LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v42 = a2;
LABEL_214:
    swift_bridgeObjectRelease(v42);
    return 36LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x800000010012A5A0LL)
  {
    unint64_t v43 = 0x800000010012A5A0LL;
LABEL_220:
    swift_bridgeObjectRelease(v43);
    return 37LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010012A5A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v43 = a2;
    goto LABEL_220;
  }

  if (a1 == 0x4B64696C61766E69LL && a2 == 0xEA00000000007965LL)
  {
    unint64_t v44 = 0xEA00000000007965LL;
LABEL_226:
    swift_bridgeObjectRelease(v44);
    return 38LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B64696C61766E69LL, 0xEA00000000007965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v44 = a2;
    goto LABEL_226;
  }

  if (a1 == 0x64616F6C6E75LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v45 = 0xE600000000000000LL;
LABEL_232:
    swift_bridgeObjectRelease(v45);
    return 39LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E75LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v45 = a2;
    goto LABEL_232;
  }

  if (a1 == 0x6F7272457473696CLL && a2 == 0xE900000000000072LL)
  {
    unint64_t v46 = 0xE900000000000072LL;
LABEL_238:
    swift_bridgeObjectRelease(v46);
    return 40LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F7272457473696CLL, 0xE900000000000072LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v46 = a2;
    goto LABEL_238;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v47 = 0x800000010012A5C0LL;
    if (a2 == 0x800000010012A5C0LL) {
      goto LABEL_243;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A5C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v47 = a2;
LABEL_243:
    swift_bridgeObjectRelease(v47);
    return 41LL;
  }

  if (a1 == 0x74617473706D7564LL && a2 == 0xEE00726F72724565LL)
  {
    unint64_t v48 = 0xEE00726F72724565LL;
LABEL_249:
    swift_bridgeObjectRelease(v48);
    return 42LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617473706D7564LL, 0xEE00726F72724565LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v48 = a2;
    goto LABEL_249;
  }

  if (a1 == 0x65736F6E67616964LL && a2 == 0xED0000726F727245LL)
  {
    unint64_t v49 = 0xED0000726F727245LL;
LABEL_255:
    swift_bridgeObjectRelease(v49);
    return 43LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736F6E67616964LL, 0xED0000726F727245LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v49 = a2;
    goto LABEL_255;
  }

  if (a1 == 0x696C6F50746F6F62LL && a2 == 0xEA00000000007963LL)
  {
    unint64_t v50 = 0xEA00000000007963LL;
LABEL_261:
    swift_bridgeObjectRelease(v50);
    return 44LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F50746F6F62LL, 0xEA00000000007963LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v50 = a2;
    goto LABEL_261;
  }

  if (a1 == 0x6F69747065637865LL && a2 == 0xED00007473694C6ELL)
  {
    unint64_t v51 = 0xED00007473694C6ELL;
LABEL_267:
    swift_bridgeObjectRelease(v51);
    return 45LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69747065637865LL, 0xED00007473694C6ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v51 = a2;
    goto LABEL_267;
  }

  if (a1 == 0x6E67695365646F63LL && a2 == 0xEB00000000676E69LL)
  {
    unint64_t v52 = 0xEB00000000676E69LL;
LABEL_273:
    swift_bridgeObjectRelease(v52);
    return 46LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E67695365646F63LL, 0xEB00000000676E69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v52 = a2;
    goto LABEL_273;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v53 = 0x800000010012A5E0LL;
    if (a2 == 0x800000010012A5E0LL) {
      goto LABEL_278;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010012A5E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v53 = a2;
LABEL_278:
    swift_bridgeObjectRelease(v53);
    return 47LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v54 = 0x800000010012A600LL;
    if (a2 == 0x800000010012A600LL) {
      goto LABEL_283;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A600LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v54 = a2;
LABEL_283:
    swift_bridgeObjectRelease(v54);
    return 48LL;
  }

  if (a1 == 0x6F42656661536E69LL && a2 == 0xEA0000000000746FLL)
  {
    unint64_t v55 = 0xEA0000000000746FLL;
LABEL_289:
    swift_bridgeObjectRelease(v55);
    return 49LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F42656661536E69LL, 0xEA0000000000746FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v55 = a2;
    goto LABEL_289;
  }

  if (a1 == 0x6E69777261446E69LL && a2 == 0xEA0000000000534FLL)
  {
    unint64_t v56 = 0xEA0000000000534FLL;
LABEL_295:
    swift_bridgeObjectRelease(v56);
    return 50LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69777261446E69LL, 0xEA0000000000534FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v56 = a2;
    goto LABEL_295;
  }

  if (a1 == 0x6C616E7265746E69LL && a2 == 0xED0000726F727245LL)
  {
    unint64_t v57 = 0xED0000726F727245LL;
LABEL_301:
    swift_bridgeObjectRelease(v57);
    return 51LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E7265746E69LL, 0xED0000726F727245LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v57 = a2;
    goto LABEL_301;
  }

  if (a1 == 0x7365726975716572LL && a2 == 0xEE00746F6F626552LL)
  {
    unint64_t v58 = 0xEE00746F6F626552LL;
LABEL_307:
    swift_bridgeObjectRelease(v58);
    return 52LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365726975716572LL, 0xEE00746F6F626552LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v58 = a2;
    goto LABEL_307;
  }

  if (a1 == 0x4F6E6567634B6E69LL && a2 == 0xE900000000000053LL)
  {
    unint64_t v59 = 0xE900000000000053LL;
LABEL_313:
    swift_bridgeObjectRelease(v59);
    return 53LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4F6E6567634B6E69LL, 0xE900000000000053LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v59 = a2;
    goto LABEL_313;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010012A620LL)
  {
    unint64_t v60 = 0x800000010012A620LL;
LABEL_319:
    swift_bridgeObjectRelease(v60);
    return 54LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010012A620LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v60 = a2;
    goto LABEL_319;
  }

  if (a1 == 0x64756C6378456E69LL && a2 == 0xED00007473694C65LL)
  {
    unint64_t v61 = 0xED00007473694C65LL;
LABEL_325:
    swift_bridgeObjectRelease(v61);
    return 55LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64756C6378456E69LL, 0xED00007473694C65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v61 = a2;
    goto LABEL_325;
  }

  if (a1 == 0x6F6974617267696DLL && a2 == 0xEE00726F7272456ELL)
  {
    unint64_t v62 = 0xEE00726F7272456ELL;
LABEL_331:
    swift_bridgeObjectRelease(v62);
    return 56LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6974617267696DLL, 0xEE00726F7272456ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v62 = a2;
    goto LABEL_331;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v63 = 0x800000010012A640LL;
    if (a2 == 0x800000010012A640LL) {
      goto LABEL_336;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A640LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v63 = a2;
LABEL_336:
    swift_bridgeObjectRelease(v63);
    return 57LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v64 = 0x800000010012A660LL;
    if (a2 == 0x800000010012A660LL) {
      goto LABEL_341;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012A660LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v64 = a2;
LABEL_341:
    swift_bridgeObjectRelease(v64);
    return 58LL;
  }

  if (a1 == 0x45746573656C6966LL && a2 == 0xEC000000726F7272LL)
  {
    unint64_t v65 = 0xEC000000726F7272LL;
LABEL_347:
    swift_bridgeObjectRelease(v65);
    return 59LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45746573656C6966LL, 0xEC000000726F7272LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v65 = a2;
    goto LABEL_347;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v66 = 0x800000010012A680LL;
    if (a2 == 0x800000010012A680LL) {
      goto LABEL_352;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012A680LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v66 = a2;
LABEL_352:
    swift_bridgeObjectRelease(v66);
    return 60LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v67 = 0x800000010012A6A0LL;
    if (a2 == 0x800000010012A6A0LL) {
      goto LABEL_357;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010012A6A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v67 = a2;
LABEL_357:
    swift_bridgeObjectRelease(v67);
    return 61LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v68 = 0x800000010012A6C0LL;
    if (a2 == 0x800000010012A6C0LL) {
      goto LABEL_362;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012A6C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v68 = a2;
LABEL_362:
    swift_bridgeObjectRelease(v68);
    return 62LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v69 = 0x800000010012A6E0LL;
    if (a2 == 0x800000010012A6E0LL) {
      goto LABEL_367;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010012A6E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v69 = a2;
LABEL_367:
    swift_bridgeObjectRelease(v69);
    return 63LL;
  }

  if (a1 == 0x6F63655274786564LL && a2 == 0xEF726F7272456472LL)
  {
    unint64_t v70 = 0xEF726F7272456472LL;
LABEL_373:
    swift_bridgeObjectRelease(v70);
    return 64LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F63655274786564LL, 0xEF726F7272456472LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v70 = a2;
    goto LABEL_373;
  }

  if (a1 == 0xD000000000000021LL && a2 == 0x800000010012A700LL)
  {
    unint64_t v71 = 0x800000010012A700LL;
LABEL_379:
    swift_bridgeObjectRelease(v71);
    return 65LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010012A700LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v71 = a2;
    goto LABEL_379;
  }

  if (a1 == 0xD00000000000002ALL && a2 == 0x800000010012A730LL)
  {
    unint64_t v72 = 0x800000010012A730LL;
LABEL_385:
    swift_bridgeObjectRelease(v72);
    return 66LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010012A730LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v72 = a2;
    goto LABEL_385;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v73 = 0x800000010012A760LL;
    if (a2 == 0x800000010012A760LL) {
      goto LABEL_390;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010012A760LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v73 = a2;
LABEL_390:
    swift_bridgeObjectRelease(v73);
    return 67LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010012A780LL)
  {
    unint64_t v74 = 0x800000010012A780LL;
LABEL_396:
    swift_bridgeObjectRelease(v74);
    return 68LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010012A780LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v74 = a2;
    goto LABEL_396;
  }

  if (a1 == 0x5264696C61766E69LL && a2 == 0xEE00747365757165LL)
  {
    unint64_t v75 = 0xEE00747365757165LL;
LABEL_402:
    swift_bridgeObjectRelease(v75);
    return 69LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5264696C61766E69LL, 0xEE00747365757165LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v75 = a2;
    goto LABEL_402;
  }

  if (a1 == 0x697463656E6E6F63LL && a2 == 0xEA00000000006E6FLL)
  {
    unint64_t v76 = 0xEA00000000006E6FLL;
LABEL_408:
    swift_bridgeObjectRelease(v76);
    return 70LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656E6E6F63LL, 0xEA00000000006E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v76 = a2;
    goto LABEL_408;
  }

  if (a1 == 0x74754F64656D6974LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v77 = 0xE800000000000000LL;
LABEL_414:
    swift_bridgeObjectRelease(v77);
    return 71LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74754F64656D6974LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v77 = a2;
    goto LABEL_414;
  }

  if (a1 == 2037609826 && a2 == 0xE400000000000000LL)
  {
    unint64_t v78 = 0xE400000000000000LL;
LABEL_420:
    swift_bridgeObjectRelease(v78);
    return 72LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2037609826LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v78 = a2;
    goto LABEL_420;
  }

  if (a1 == 0x74656D6874697261LL && a2 == 0xEA00000000006369LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006369LL);
    return 73LL;
  }

  else
  {
    char v79 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74656D6874697261LL, 0xEA00000000006369LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v79 & 1) != 0) {
      return 73LL;
    }
    else {
      return 74LL;
    }
  }

uint64_t sub_1000C026C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1953066351 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953066351LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010012A7A0LL)
  {
    swift_bridgeObjectRelease(0x800000010012A7A0LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A7A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000C0348(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x5664657269736564LL && a2 == 0xEE006E6F69737265LL)
  {
    unint64_t v7 = 0xEE006E6F69737265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5664657269736564LL, 0xEE006E6F69737265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x65566C6175746361LL && a2 == 0xED00006E6F697372LL)
  {
    swift_bridgeObjectRelease(0xED00006E6F697372LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566C6175746361LL, 0xED00006E6F697372LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1000C04F0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010012A7A0LL)
  {
    swift_bridgeObjectRelease(0x800000010012A7A0LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010012A7A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000C05E8(uint64_t a1, unint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 12639 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(12639LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000C06A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v316 = a2;
  uint64_t v245 = sub_100005FB4(&qword_10015B680);
  uint64_t v172 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v314 = (char *)v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v246 = sub_100005FB4(&qword_10015B688);
  uint64_t v171 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  unint64_t v298 = (char *)v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v244 = sub_100005FB4(&qword_10015B690);
  uint64_t v170 = *(void *)(v244 - 8);
  __chkstk_darwin(v244);
  unint64_t v315 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v243 = sub_100005FB4(&qword_10015B698);
  uint64_t v169 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  unint64_t v294 = (char *)v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v242 = sub_100005FB4(&qword_10015B6A0);
  uint64_t v168 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  __n128 v313 = (char *)v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v241 = sub_100005FB4(&qword_10015B6A8);
  uint64_t v167 = *(void *)(v241 - 8);
  __chkstk_darwin(v241);
  unint64_t v312 = (char *)v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v240 = sub_100005FB4(&qword_10015B6B0);
  uint64_t v166 = *(void *)(v240 - 8);
  __chkstk_darwin(v240);
  v311 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v239 = sub_100005FB4(&qword_10015B6B8);
  uint64_t v165 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v310 = (char *)v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v238 = sub_100005FB4(&qword_10015B6C0);
  uint64_t v164 = *(void *)(v238 - 8);
  __chkstk_darwin(v238);
  uint64_t v309 = (char *)v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v237 = sub_100005FB4(&qword_10015B6C8);
  uint64_t v163 = *(void *)(v237 - 8);
  __chkstk_darwin(v237);
  uint64_t v308 = (char *)v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v236 = sub_100005FB4(&qword_10015B6D0);
  uint64_t v162 = *(void *)(v236 - 8);
  __chkstk_darwin(v236);
  v307 = (char *)v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v235 = sub_100005FB4(&qword_10015B6D8);
  uint64_t v161 = *(void *)(v235 - 8);
  __chkstk_darwin(v235);
  os_log_type_t v306 = (char *)v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v234 = sub_100005FB4(&qword_10015B6E0);
  uint64_t v160 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  v305 = (char *)v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v233 = sub_100005FB4(&qword_10015B6E8);
  uint64_t v159 = *(void *)(v233 - 8);
  __chkstk_darwin(v233);
  uint64_t v304 = (char *)v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = sub_100005FB4(&qword_10015B6F0);
  uint64_t v158 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  uint64_t v303 = (char *)v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v231 = sub_100005FB4(&qword_10015B6F8);
  uint64_t v157 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v302 = (char *)v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v230 = sub_100005FB4(&qword_10015B700);
  uint64_t v156 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  uint64_t v301 = (char *)v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v229 = sub_100005FB4(&qword_10015B708);
  uint64_t v155 = *(void *)(v229 - 8);
  __chkstk_darwin(v229);
  BOOL v300 = (char *)v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v228 = sub_100005FB4(&qword_10015B710);
  uint64_t v154 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  v299 = (char *)v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v227 = sub_100005FB4(&qword_10015B718);
  uint64_t v153 = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  unint64_t v297 = (char *)v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v226 = sub_100005FB4(&qword_10015B720);
  uint64_t v152 = *(void *)(v226 - 8);
  __chkstk_darwin(v226);
  BOOL v296 = (char *)v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v225 = sub_100005FB4(&qword_10015B728);
  uint64_t v151 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  char v295 = (char *)v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v224 = sub_100005FB4(&qword_10015B730);
  uint64_t v150 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v293 = (char *)v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = sub_100005FB4(&qword_10015B738);
  uint64_t v149 = *(void *)(v223 - 8);
  __chkstk_darwin(v223);
  v292 = (char *)v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v222 = sub_100005FB4(&qword_10015B740);
  uint64_t v148 = *(void *)(v222 - 8);
  __chkstk_darwin(v222);
  unint64_t v291 = (char *)v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v221 = sub_100005FB4(&qword_10015B748);
  uint64_t v147 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  unint64_t v290 = (char *)v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v219 = sub_100005FB4(&qword_10015B750);
  uint64_t v145 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  v288 = (char *)v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v220 = sub_100005FB4(&qword_10015B758);
  uint64_t v146 = *(void *)(v220 - 8);
  __chkstk_darwin(v220);
  uint64_t v289 = (char *)v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v218 = sub_100005FB4(&qword_10015B760);
  uint64_t v144 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  v287 = (char *)v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = sub_100005FB4(&qword_10015B768);
  uint64_t v143 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  v321 = (char *)v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v217 = sub_100005FB4(&qword_10015B770);
  uint64_t v320 = *(void *)(v217 - 8);
  __chkstk_darwin(v217);
  uint64_t v286 = (char *)v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v215 = sub_100005FB4(&qword_10015B778);
  uint64_t v142 = *(void *)(v215 - 8);
  __chkstk_darwin(v215);
  v285 = (char *)v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v214 = sub_100005FB4(&qword_10015B780);
  uint64_t v141 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  v284 = (char *)v99 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v213 = sub_100005FB4(&qword_10015B788);
  uint64_t v140 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  uint64_t v283 = (char *)v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v212 = sub_100005FB4(&qword_10015B790);
  uint64_t v139 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  unint64_t v282 = (char *)v99 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = sub_100005FB4(&qword_10015B798);
  uint64_t v138 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  unint64_t v281 = (char *)v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v210 = sub_100005FB4(&qword_10015B7A0);
  uint64_t v137 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  unint64_t v280 = (char *)v99 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v209 = sub_100005FB4(&qword_10015B7A8);
  uint64_t v136 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  uint64_t v279 = (char *)v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v208 = sub_100005FB4(&qword_10015B7B0);
  uint64_t v135 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  Swift::String v278 = (char *)v99 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v207 = sub_100005FB4(&qword_10015B7B8);
  uint64_t v134 = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  v277 = (char *)v99 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v206 = sub_100005FB4(&qword_10015B7C0);
  uint64_t v133 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  Swift::String v276 = (char *)v99 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v205 = sub_100005FB4(&qword_10015B7C8);
  uint64_t v132 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v275 = (char *)v99 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v204 = sub_100005FB4(&qword_10015B7D0);
  uint64_t v131 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  uint64_t v274 = (char *)v99 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v202 = sub_100005FB4(&qword_10015B7D8);
  uint64_t v129 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  uint64_t v272 = (char *)v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = sub_100005FB4(&qword_10015B7E0);
  uint64_t v128 = *(void *)(v201 - 8);
  __chkstk_darwin(v201);
  char v271 = (char *)v99 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v200 = sub_100005FB4(&qword_10015B7E8);
  uint64_t v127 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t v270 = (char *)v99 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v203 = sub_100005FB4(&qword_10015B7F0);
  uint64_t v130 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  Swift::String v273 = (char *)v99 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = sub_100005FB4(&qword_10015B7F8);
  uint64_t v126 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  uint64_t v269 = (char *)v99 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = sub_100005FB4(&qword_10015B800);
  uint64_t v125 = *(void *)(v198 - 8);
  __chkstk_darwin(v198);
  uint64_t v268 = (char *)v99 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v197 = sub_100005FB4(&qword_10015B808);
  uint64_t v124 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  uint64_t v267 = (char *)v99 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = sub_100005FB4(&qword_10015B810);
  uint64_t v123 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  v319 = (char *)v99 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = sub_100005FB4(&qword_10015B818);
  uint64_t v121 = *(void *)(v195 - 8);
  __chkstk_darwin(v195);
  unint64_t v266 = (char *)v99 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v194 = sub_100005FB4(&qword_10015B820);
  uint64_t v120 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  unint64_t v265 = (char *)v99 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v193 = sub_100005FB4(&qword_10015B828);
  uint64_t v119 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  char v264 = (char *)v99 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v192 = sub_100005FB4(&qword_10015B830);
  uint64_t v122 = *(void *)(v192 - 8);
  __chkstk_darwin(v192);
  uint64_t v260 = (char *)v99 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = sub_100005FB4(&qword_10015B838);
  uint64_t v117 = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  char v263 = (char *)v99 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = sub_100005FB4(&qword_10015B840);
  uint64_t v115 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  char v261 = (char *)v99 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = sub_100005FB4(&qword_10015B848);
  uint64_t v118 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v318 = (char *)v99 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v187 = sub_100005FB4(&qword_10015B850);
  uint64_t v114 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  v317 = (char *)v99 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v189 = sub_100005FB4(&qword_10015B858);
  uint64_t v116 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  char v262 = (char *)v99 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_100005FB4(&qword_10015B860);
  uint64_t v113 = *(void *)(v186 - 8);
  __chkstk_darwin(v186);
  uint64_t v259 = (char *)v99 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v185 = sub_100005FB4(&qword_10015B868);
  uint64_t v112 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v258 = (char *)v99 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v184 = sub_100005FB4(&qword_10015B870);
  uint64_t v111 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v257 = (char *)v99 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = sub_100005FB4(&qword_10015B878);
  uint64_t v110 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v256 = (char *)v99 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v180 = sub_100005FB4(&qword_10015B880);
  uint64_t v179 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  uint64_t v253 = (char *)v99 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v182 = sub_100005FB4(&qword_10015B888);
  uint64_t v109 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  os_log_type_t v255 = (char *)v99 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = sub_100005FB4(&qword_10015B890);
  uint64_t v107 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v252 = (char *)v99 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v181 = sub_100005FB4(&qword_10015B898);
  uint64_t v108 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v254 = (char *)v99 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = sub_100005FB4(&qword_10015B8A0);
  uint64_t v105 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v250 = (char *)v99 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v175 = sub_100005FB4(&qword_10015B8A8);
  uint64_t v104 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  __int128 v249 = (char *)v99 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = sub_100005FB4(&qword_10015B8B0);
  uint64_t v106 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  __int128 v251 = (char *)v99 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v174 = sub_100005FB4(&qword_10015B8B8);
  uint64_t v103 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v248 = (char *)v99 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v173 = sub_100005FB4(&qword_10015B8C0);
  uint64_t v102 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v247 = (char *)v99 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = sub_100005FB4(&qword_10015B8C8);
  uint64_t v77 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  char v79 = (char *)v99 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100005FB4(&qword_10015B8D0);
  uint64_t v81 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v83 = (char *)v99 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = a1[3];
  uint64_t v85 = a1[4];
  v322 = a1;
  sub_100005110(a1, v84);
  unint64_t v86 = sub_1000BCDA8();
  uint64_t v87 = v323;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KMError.CodingKeys,  &type metadata for KMError.CodingKeys,  v86,  v84,  v85);
  uint64_t v323 = v87;
  if (!v87)
  {
    v99[2] = v79;
    v99[0] = v77;
    v99[1] = v76;
    uint64_t v100 = v81;
    uint64_t v101 = v80;
    uint64_t v88 = KeyedDecodingContainer.allKeys.getter(v80);
    uint64_t v89 = v88;
    if (*(void *)(v88 + 16) == 1LL)
    {
      uint64_t v90 = *(unsigned __int8 *)(v88 + 32);
      if ((_DWORD)v90 != 74) {
        __asm { BR              X10 }
      }
    }

    uint64_t v91 = type metadata accessor for DecodingError(0LL);
    uint64_t v92 = swift_allocError(v91, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v94 = v93;
    sub_100005FB4(&qword_1001595F8);
    *uint64_t v94 = &type metadata for KMError;
    uint64_t v95 = v101;
    uint64_t v96 = KeyedDecodingContainer.codingPath.getter(v101);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v96,  0xD00000000000002BLL,  0x8000000100123B50LL,  0LL);
    uint64_t v97 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v91 - 8) + 104LL))( v94,  enum case for DecodingError.typeMismatch(_:),  v91);
    uint64_t v323 = v92;
    swift_willThrow(v97);
    swift_unknownObjectRelease(v89);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v83, v95);
  }

  return sub_100006034(v322);
}

void sub_1000C4558()
{
  *(_BYTE *)(v2 - 15sub_100006034(v0 + 2) = 73;
  unint64_t v3 = sub_1000BCDEC();
  uint64_t v4 = *(void *)(v2 - 232);
  uint64_t v5 = *(void *)(v2 - 1936);
  uint64_t v6 = *(void *)(v2 - 160);
  uint64_t v7 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for KMError.ArithmeticCodingKeys,  v2 - 152,  v5,  &type metadata for KMError.ArithmeticCodingKeys,  v3);
  if (v6)
  {
    swift_unknownObjectRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 1944) + 8LL))(v0, v5);
    *(void *)(v2 - 160) = v6;
    JUMPOUT(0x1000C452CLL);
  }

  uint64_t v8 = *(void *)(v2 - 784);
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(v7, v8);
  uint64_t v10 = *(void *)(v2 - 1944);
  *(void *)(v2 - 160) = 0LL;
  *(void *)(v2 - 384) = v9;
  *(void *)(v2 - 51sub_100006034(v0 + 2) = v11;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 1368) + 8LL))(v4, v8);
  swift_unknownObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v5);
  JUMPOUT(0x1000C66F0LL);
}

uint64_t sub_1000C6780(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_10015B670);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000C67C4()
{
  unint64_t result = qword_10015B678;
  if (!qword_10015B678)
  {
    unint64_t result = swift_getWitnessTable(&unk_100114A70, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B678);
  }

  return result;
}

uint64_t destroy for KMError(uint64_t a1)
{
  return sub_100039508( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_1000516E4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 7sub_100006034(v0 + 2) = v13;
  return a1;
}

uint64_t assignWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_1000516E4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 72);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 7sub_100006034(v0 + 2) = v23;
  sub_100039508(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

__n128 initializeWithTake for KMError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  char v4 = *(_BYTE *)(a2 + 72);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(_BYTE *)(a1 + 72);
  __int128 v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  __int128 v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 7sub_100006034(v0 + 2) = v4;
  sub_100039508(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for KMError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xB7 && *(_BYTE *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 183);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0x49) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KMError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB6)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 7sub_100006034(v0 + 2) = 0;
    *(void *)__n128 result = a2 - 183;
    if (a3 >= 0xB7) {
      *(_BYTE *)(result + 73) = 1;
    }
  }

  else
  {
    if (a3 >= 0xB7) {
      *(_BYTE *)(result + 73) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7sub_100006034(v0 + 2) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000C6AF8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 73);
  }
}

uint64_t sub_1000C6B10(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x49)
  {
    *(void *)__n128 result = a2 - 73;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(asub_100006034(v0 + 2) = 73;
  }

  *(_BYTE *)(result + 7sub_100006034(v0 + 2) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KMError()
{
  return &type metadata for KMError;
}

uint64_t getEnumTagSinglePayload for KMError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xB7) {
    goto LABEL_17;
  }
  if (a2 + 73 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 73) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 73;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }

uint64_t storeEnumTagSinglePayload for KMError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 73 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 73) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xB7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xB6) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6C28 + 4 * byte_100114993[v4]))();
  }
  *a1 = a2 + 73;
  return ((uint64_t (*)(void))((char *)sub_1000C6C5C + 4 * byte_10011498E[v4]))();
}

uint64_t sub_1000C6C5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6C64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6C6CLL);
  }
  return result;
}

uint64_t sub_1000C6C78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6C80LL);
  }
  *(_BYTE *)__n128 result = a2 + 73;
  return result;
}

uint64_t sub_1000C6C84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6C8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodingKeys()
{
  return &type metadata for KMError.CodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MultipleCodingKeys()
{
  return &type metadata for KMError.MultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeserializationCodingKeys()
{
  return &type metadata for KMError.DeserializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCommunicationCodingKeys()
{
  return &type metadata for KMError.KernelCommunicationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelRequestCodingKeys()
{
  return &type metadata for KMError.KernelRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DriverKitLaunchCodingKeys()
{
  return &type metadata for KMError.DriverKitLaunchCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExtensionLoadCodingKeys()
{
  return &type metadata for KMError.ExtensionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLoadCodingKeys()
{
  return &type metadata for KMError.CollectionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLinkageCodingKeys()
{
  return &type metadata for KMError.CollectionLinkageCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ResourceLoadCodingKeys()
{
  return &type metadata for KMError.ResourceLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SerializationCodingKeys()
{
  return &type metadata for KMError.SerializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidArgumentCodingKeys()
{
  return &type metadata for KMError.InvalidArgumentCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NotFoundCodingKeys()
{
  return &type metadata for KMError.NotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCollectionBuildCodingKeys()
{
  return &type metadata for KMError.KernelCollectionBuildCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RealizingCodingKeys()
{
  return &type metadata for KMError.RealizingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DependencyResolutionCodingKeys()
{
  return &type metadata for KMError.DependencyResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDependencyRequestCodingKeys()
{
  return &type metadata for KMError.MissingDependencyRequestCodingKeys;
}

uint64_t storeEnumTagSinglePayload for KMError.IncompatibleVersionCodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6DFC + 4 * byte_10011499D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C6E30 + 4 * byte_100114998[v4]))();
}

uint64_t sub_1000C6E30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6E40LL);
  }
  return result;
}

uint64_t sub_1000C6E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6E54LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_1000C6E58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6E60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleVersionCodingKeys()
{
  return &type metadata for KMError.IncompatibleVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleArchitectureCodingKeys()
{
  return &type metadata for KMError.IncompatibleArchitectureCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ValidationCodingKeys()
{
  return &type metadata for KMError.ValidationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidPropertiesCodingKeys()
{
  return &type metadata for KMError.InvalidPropertiesCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesystemCodingKeys()
{
  return &type metadata for KMError.FilesystemCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiskAccessCodingKeys()
{
  return &type metadata for KMError.DiskAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FlowAccessCodingKeys()
{
  return &type metadata for KMError.FlowAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RecoveryCodingKeys()
{
  return &type metadata for KMError.RecoveryCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NvramAccessCodingKeys()
{
  return &type metadata for KMError.NvramAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BinaryParsingCodingKeys()
{
  return &type metadata for KMError.BinaryParsingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FutureVersionCodingKeys()
{
  return &type metadata for KMError.FutureVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CacheBuildingCodingKeys()
{
  return &type metadata for KMError.CacheBuildingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.StagingCodingKeys()
{
  return &type metadata for KMError.StagingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemPolicyCodingKeys()
{
  return &type metadata for KMError.SystemPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadMultipleCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.AuthenticationCodingKeys()
{
  return &type metadata for KMError.AuthenticationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SandboxCodingKeys()
{
  return &type metadata for KMError.SandboxCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConfigurationCodingKeys()
{
  return &type metadata for KMError.ConfigurationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.LoggingErrorCodingKeys()
{
  return &type metadata for KMError.LoggingErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SubprocessFailedCodingKeys()
{
  return &type metadata for KMError.SubprocessFailedCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InsufficientPermissionsCodingKeys()
{
  return &type metadata for KMError.InsufficientPermissionsCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidKeyCodingKeys()
{
  return &type metadata for KMError.InvalidKeyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnloadCodingKeys()
{
  return &type metadata for KMError.UnloadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ListErrorCodingKeys()
{
  return &type metadata for KMError.ListErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RunninglistErrorCodingKeys()
{
  return &type metadata for KMError.RunninglistErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DumpstateErrorCodingKeys()
{
  return &type metadata for KMError.DumpstateErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiagnoseErrorCodingKeys()
{
  return &type metadata for KMError.DiagnoseErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BootPolicyCodingKeys()
{
  return &type metadata for KMError.BootPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExceptionListCodingKeys()
{
  return &type metadata for KMError.ExceptionListCodingKeys;
}

uint64_t _s10driverkitd7KMErrorO23KernelRequestCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000C7098 + 4 * byte_1001149A7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C70CC + 4 * byte_1001149A2[v4]))();
}

uint64_t sub_1000C70CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C70D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C70DCLL);
  }
  return result;
}

uint64_t sub_1000C70E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C70F0LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1000C70F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C70FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodeSigningCodingKeys()
{
  return &type metadata for KMError.CodeSigningCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TriggerPanicMedicCodingKeys()
{
  return &type metadata for KMError.TriggerPanicMedicCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConsistencyCheckCodingKeys()
{
  return &type metadata for KMError.ConsistencyCheckCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InSafeBootCodingKeys()
{
  return &type metadata for KMError.InSafeBootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InDarwinOSCodingKeys()
{
  return &type metadata for KMError.InDarwinOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InternalErrorCodingKeys()
{
  return &type metadata for KMError.InternalErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RequiresRebootCodingKeys()
{
  return &type metadata for KMError.RequiresRebootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InKcgenOSCodingKeys()
{
  return &type metadata for KMError.InKcgenOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DuplicateExtensionCodingKeys()
{
  return &type metadata for KMError.DuplicateExtensionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InExcludeListCodingKeys()
{
  return &type metadata for KMError.InExcludeListCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MigrationErrorCodingKeys()
{
  return &type metadata for KMError.MigrationErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnsupportedErrorCodingKeys()
{
  return &type metadata for KMError.UnsupportedErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeveloperToolsErrorCodingKeys()
{
  return &type metadata for KMError.DeveloperToolsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesetErrorCodingKeys()
{
  return &type metadata for KMError.FilesetErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDeveloperKitCodingKeys()
{
  return &type metadata for KMError.MissingDeveloperKitCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KdkInstallerErrorCodingKeys()
{
  return &type metadata for KMError.KdkInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KnoxDownloaderErrorCodingKeys()
{
  return &type metadata for KMError.KnoxDownloaderErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.PackageInstallerErrorCodingKeys()
{
  return &type metadata for KMError.PackageInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DextRecordErrorCodingKeys()
{
  return &type metadata for KMError.DextRecordErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionsErrorCodingKeys()
{
  return &type metadata for KMError.SystemExtensionsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BuildManifestNotFoundErrorCodingKeys()
{
  return &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidRequestCodingKeys()
{
  return &type metadata for KMError.InvalidRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConnectionCodingKeys()
{
  return &type metadata for KMError.ConnectionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TimedOutCodingKeys()
{
  return &type metadata for KMError.TimedOutCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BusyCodingKeys()
{
  return &type metadata for KMError.BusyCodingKeys;
}

uint64_t _s10driverkitd7KMErrorO18MultipleCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000C72F8 + 4 * byte_1001149AC[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000C7318 + 4 * byte_1001149B1[v4]))();
  }
}

_BYTE *sub_1000C72F8(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_1000C7318(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_1000C7320(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_1000C7328(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_1000C7330(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_1000C7338(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KMError.ArithmeticCodingKeys()
{
  return &type metadata for KMError.ArithmeticCodingKeys;
}

unint64_t sub_1000C7358()
{
  unint64_t result = qword_100165610[0];
  if (!qword_100165610[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115538, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, qword_100165610);
  }

  return result;
}

unint64_t sub_1000C73A0()
{
  unint64_t result = qword_100165820[0];
  if (!qword_100165820[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001155F0, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, qword_100165820);
  }

  return result;
}

unint64_t sub_1000C73E8()
{
  unint64_t result = qword_100165A30[0];
  if (!qword_100165A30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001156A8, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, qword_100165A30);
  }

  return result;
}

unint64_t sub_1000C7430()
{
  unint64_t result = qword_100165C40[0];
  if (!qword_100165C40[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115760, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, qword_100165C40);
  }

  return result;
}

unint64_t sub_1000C7478()
{
  unint64_t result = qword_100165E50[0];
  if (!qword_100165E50[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115818, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, qword_100165E50);
  }

  return result;
}

unint64_t sub_1000C74C0()
{
  unint64_t result = qword_100166060[0];
  if (!qword_100166060[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001158D0, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, qword_100166060);
  }

  return result;
}

unint64_t sub_1000C7508()
{
  unint64_t result = qword_100166270[0];
  if (!qword_100166270[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115988, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, qword_100166270);
  }

  return result;
}

unint64_t sub_1000C7550()
{
  unint64_t result = qword_100166480[0];
  if (!qword_100166480[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100115A40,  &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, qword_100166480);
  }

  return result;
}

unint64_t sub_1000C7598()
{
  unint64_t result = qword_100166690[0];
  if (!qword_100166690[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100115AF8,  &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, qword_100166690);
  }

  return result;
}

unint64_t sub_1000C75E0()
{
  unint64_t result = qword_1001668A0[0];
  if (!qword_1001668A0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115BB0, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, qword_1001668A0);
  }

  return result;
}

unint64_t sub_1000C7628()
{
  unint64_t result = qword_100166AB0[0];
  if (!qword_100166AB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115C68, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, qword_100166AB0);
  }

  return result;
}

unint64_t sub_1000C7670()
{
  unint64_t result = qword_100166CC0[0];
  if (!qword_100166CC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115D20, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, qword_100166CC0);
  }

  return result;
}

unint64_t sub_1000C76B8()
{
  unint64_t result = qword_100166ED0[0];
  if (!qword_100166ED0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115DD8, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, qword_100166ED0);
  }

  return result;
}

unint64_t sub_1000C7700()
{
  unint64_t result = qword_1001670E0[0];
  if (!qword_1001670E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115E90, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, qword_1001670E0);
  }

  return result;
}

unint64_t sub_1000C7748()
{
  unint64_t result = qword_1001672F0[0];
  if (!qword_1001672F0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115F48, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, qword_1001672F0);
  }

  return result;
}

unint64_t sub_1000C7790()
{
  unint64_t result = qword_100167500[0];
  if (!qword_100167500[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116000, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, qword_100167500);
  }

  return result;
}

unint64_t sub_1000C77D8()
{
  unint64_t result = qword_100167710[0];
  if (!qword_100167710[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001160B8, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, qword_100167710);
  }

  return result;
}

unint64_t sub_1000C7820()
{
  unint64_t result = qword_100167920[0];
  if (!qword_100167920[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116170, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, qword_100167920);
  }

  return result;
}

unint64_t sub_1000C7868()
{
  unint64_t result = qword_100167B30[0];
  if (!qword_100167B30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116228, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, qword_100167B30);
  }

  return result;
}

unint64_t sub_1000C78B0()
{
  unint64_t result = qword_100167D40[0];
  if (!qword_100167D40[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001162E0, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, qword_100167D40);
  }

  return result;
}

unint64_t sub_1000C78F8()
{
  unint64_t result = qword_100167F50[0];
  if (!qword_100167F50[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116398, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, qword_100167F50);
  }

  return result;
}

unint64_t sub_1000C7940()
{
  unint64_t result = qword_100168160[0];
  if (!qword_100168160[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116450, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, qword_100168160);
  }

  return result;
}

unint64_t sub_1000C7988()
{
  unint64_t result = qword_100168370[0];
  if (!qword_100168370[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116508, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, qword_100168370);
  }

  return result;
}

unint64_t sub_1000C79D0()
{
  unint64_t result = qword_100168580[0];
  if (!qword_100168580[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001165C0, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, qword_100168580);
  }

  return result;
}

unint64_t sub_1000C7A18()
{
  unint64_t result = qword_100168790[0];
  if (!qword_100168790[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116678, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, qword_100168790);
  }

  return result;
}

unint64_t sub_1000C7A60()
{
  unint64_t result = qword_1001689A0[0];
  if (!qword_1001689A0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116730, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, qword_1001689A0);
  }

  return result;
}

unint64_t sub_1000C7AA8()
{
  unint64_t result = qword_100168BB0[0];
  if (!qword_100168BB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001167E8, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, qword_100168BB0);
  }

  return result;
}

unint64_t sub_1000C7AF0()
{
  unint64_t result = qword_100168DC0[0];
  if (!qword_100168DC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001168A0, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, qword_100168DC0);
  }

  return result;
}

unint64_t sub_1000C7B38()
{
  unint64_t result = qword_100168FD0[0];
  if (!qword_100168FD0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116958, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, qword_100168FD0);
  }

  return result;
}

unint64_t sub_1000C7B80()
{
  unint64_t result = qword_1001691E0[0];
  if (!qword_1001691E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116A10, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, qword_1001691E0);
  }

  return result;
}

unint64_t sub_1000C7BC8()
{
  unint64_t result = qword_1001693F0[0];
  if (!qword_1001693F0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116AC8, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, qword_1001693F0);
  }

  return result;
}

unint64_t sub_1000C7C10()
{
  unint64_t result = qword_100169600[0];
  if (!qword_100169600[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116B80, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, qword_100169600);
  }

  return result;
}

unint64_t sub_1000C7C58()
{
  unint64_t result = qword_100169810[0];
  if (!qword_100169810[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116C38, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, qword_100169810);
  }

  return result;
}

unint64_t sub_1000C7CA0()
{
  unint64_t result = qword_100169A20[0];
  if (!qword_100169A20[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116CF0, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, qword_100169A20);
  }

  return result;
}

unint64_t sub_1000C7CE8()
{
  unint64_t result = qword_100169C30[0];
  if (!qword_100169C30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116DA8, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, qword_100169C30);
  }

  return result;
}

unint64_t sub_1000C7D30()
{
  unint64_t result = qword_100169E40[0];
  if (!qword_100169E40[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116E60, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, qword_100169E40);
  }

  return result;
}

unint64_t sub_1000C7D78()
{
  unint64_t result = qword_10016A050[0];
  if (!qword_10016A050[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116F18, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, qword_10016A050);
  }

  return result;
}

unint64_t sub_1000C7DC0()
{
  unint64_t result = qword_10016A260[0];
  if (!qword_10016A260[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116FD0, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, qword_10016A260);
  }

  return result;
}

unint64_t sub_1000C7E08()
{
  unint64_t result = qword_10016A470[0];
  if (!qword_10016A470[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117088, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, qword_10016A470);
  }

  return result;
}

unint64_t sub_1000C7E50()
{
  unint64_t result = qword_10016A680[0];
  if (!qword_10016A680[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117140, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, qword_10016A680);
  }

  return result;
}

unint64_t sub_1000C7E98()
{
  unint64_t result = qword_10016A890[0];
  if (!qword_10016A890[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001171F8, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, qword_10016A890);
  }

  return result;
}

unint64_t sub_1000C7EE0()
{
  unint64_t result = qword_10016AAA0[0];
  if (!qword_10016AAA0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001172B0, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, qword_10016AAA0);
  }

  return result;
}

unint64_t sub_1000C7F28()
{
  unint64_t result = qword_10016ACB0[0];
  if (!qword_10016ACB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117368, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, qword_10016ACB0);
  }

  return result;
}

unint64_t sub_1000C7F70()
{
  unint64_t result = qword_10016AEC0[0];
  if (!qword_10016AEC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117420, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, qword_10016AEC0);
  }

  return result;
}

unint64_t sub_1000C7FB8()
{
  unint64_t result = qword_10016B0D0[0];
  if (!qword_10016B0D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001174D8, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, qword_10016B0D0);
  }

  return result;
}

unint64_t sub_1000C8000()
{
  unint64_t result = qword_10016B2E0[0];
  if (!qword_10016B2E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117590, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, qword_10016B2E0);
  }

  return result;
}

unint64_t sub_1000C8048()
{
  unint64_t result = qword_10016B4F0[0];
  if (!qword_10016B4F0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117648, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, qword_10016B4F0);
  }

  return result;
}

unint64_t sub_1000C8090()
{
  unint64_t result = qword_10016B700[0];
  if (!qword_10016B700[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117700, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, qword_10016B700);
  }

  return result;
}

unint64_t sub_1000C80D8()
{
  unint64_t result = qword_10016B910[0];
  if (!qword_10016B910[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001177B8, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, qword_10016B910);
  }

  return result;
}

unint64_t sub_1000C8120()
{
  unint64_t result = qword_10016BB20[0];
  if (!qword_10016BB20[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117870, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, qword_10016BB20);
  }

  return result;
}

unint64_t sub_1000C8168()
{
  unint64_t result = qword_10016BD30[0];
  if (!qword_10016BD30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117928, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, qword_10016BD30);
  }

  return result;
}

unint64_t sub_1000C81B0()
{
  unint64_t result = qword_10016BF40[0];
  if (!qword_10016BF40[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001179E0, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, qword_10016BF40);
  }

  return result;
}

unint64_t sub_1000C81F8()
{
  unint64_t result = qword_10016C150[0];
  if (!qword_10016C150[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117A98, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, qword_10016C150);
  }

  return result;
}

unint64_t sub_1000C8240()
{
  unint64_t result = qword_10016C360[0];
  if (!qword_10016C360[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117B50, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, qword_10016C360);
  }

  return result;
}

unint64_t sub_1000C8288()
{
  unint64_t result = qword_10016C570[0];
  if (!qword_10016C570[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117C08, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, qword_10016C570);
  }

  return result;
}

unint64_t sub_1000C82D0()
{
  unint64_t result = qword_10016C780[0];
  if (!qword_10016C780[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117CC0, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, qword_10016C780);
  }

  return result;
}

unint64_t sub_1000C8318()
{
  unint64_t result = qword_10016C990[0];
  if (!qword_10016C990[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117D78, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, qword_10016C990);
  }

  return result;
}

unint64_t sub_1000C8360()
{
  unint64_t result = qword_10016CBA0[0];
  if (!qword_10016CBA0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117E30, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, qword_10016CBA0);
  }

  return result;
}

unint64_t sub_1000C83A8()
{
  unint64_t result = qword_10016CDB0[0];
  if (!qword_10016CDB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117EE8, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, qword_10016CDB0);
  }

  return result;
}

unint64_t sub_1000C83F0()
{
  unint64_t result = qword_10016CFC0[0];
  if (!qword_10016CFC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117FA0, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, qword_10016CFC0);
  }

  return result;
}

unint64_t sub_1000C8438()
{
  unint64_t result = qword_10016D1D0[0];
  if (!qword_10016D1D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118058, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, qword_10016D1D0);
  }

  return result;
}

unint64_t sub_1000C8480()
{
  unint64_t result = qword_10016D3E0[0];
  if (!qword_10016D3E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118110, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, qword_10016D3E0);
  }

  return result;
}

unint64_t sub_1000C84C8()
{
  unint64_t result = qword_10016D5F0;
  if (!qword_10016D5F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001181C8, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016D5F0);
  }

  return result;
}

unint64_t sub_1000C8510()
{
  unint64_t result = qword_10016D800[0];
  if (!qword_10016D800[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118280, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, qword_10016D800);
  }

  return result;
}

unint64_t sub_1000C8558()
{
  unint64_t result = qword_10016DB10[0];
  if (!qword_10016DB10[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118388, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, qword_10016DB10);
  }

  return result;
}

unint64_t sub_1000C85A0()
{
  unint64_t result = qword_10016DD20[0];
  if (!qword_10016DD20[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118440, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, qword_10016DD20);
  }

  return result;
}

unint64_t sub_1000C85E8()
{
  unint64_t result = qword_10016DF30[0];
  if (!qword_10016DF30[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001184F8, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, qword_10016DF30);
  }

  return result;
}

unint64_t sub_1000C8630()
{
  unint64_t result = qword_10016E140[0];
  if (!qword_10016E140[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001185B0, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, qword_10016E140);
  }

  return result;
}

unint64_t sub_1000C8678()
{
  unint64_t result = qword_10016E350[0];
  if (!qword_10016E350[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118668, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, qword_10016E350);
  }

  return result;
}

unint64_t sub_1000C86C0()
{
  unint64_t result = qword_10016E560[0];
  if (!qword_10016E560[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118720, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, qword_10016E560);
  }

  return result;
}

unint64_t sub_1000C8708()
{
  unint64_t result = qword_10016E770[0];
  if (!qword_10016E770[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001187D8, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, qword_10016E770);
  }

  return result;
}

unint64_t sub_1000C8750()
{
  unint64_t result = qword_10016E980[0];
  if (!qword_10016E980[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118890, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, qword_10016E980);
  }

  return result;
}

unint64_t sub_1000C8798()
{
  unint64_t result = qword_10016EB90[0];
  if (!qword_10016EB90[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118948, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_10016EB90);
  }

  return result;
}

unint64_t sub_1000C87E0()
{
  unint64_t result = qword_10016EDA0[0];
  if (!qword_10016EDA0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118A00, &type metadata for KMError.CodingKeys);
    atomic_store(result, qword_10016EDA0);
  }

  return result;
}

unint64_t sub_1000C8828()
{
  unint64_t result = qword_10016EEB0;
  if (!qword_10016EEB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001188B8, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EEB0);
  }

  return result;
}

unint64_t sub_1000C8870()
{
  unint64_t result = qword_10016EEB8[0];
  if (!qword_10016EEB8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001188E0, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_10016EEB8);
  }

  return result;
}

unint64_t sub_1000C88B8()
{
  unint64_t result = qword_10016EF40;
  if (!qword_10016EF40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118800, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EF40);
  }

  return result;
}

unint64_t sub_1000C8900()
{
  unint64_t result = qword_10016EF48[0];
  if (!qword_10016EF48[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118828, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, qword_10016EF48);
  }

  return result;
}

unint64_t sub_1000C8948()
{
  unint64_t result = qword_10016EFD0;
  if (!qword_10016EFD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118748, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EFD0);
  }

  return result;
}

unint64_t sub_1000C8990()
{
  unint64_t result = qword_10016EFD8[0];
  if (!qword_10016EFD8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118770, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, qword_10016EFD8);
  }

  return result;
}

unint64_t sub_1000C89D8()
{
  unint64_t result = qword_10016F060;
  if (!qword_10016F060)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118690, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F060);
  }

  return result;
}

unint64_t sub_1000C8A20()
{
  unint64_t result = qword_10016F068[0];
  if (!qword_10016F068[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001186B8, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, qword_10016F068);
  }

  return result;
}

unint64_t sub_1000C8A68()
{
  unint64_t result = qword_10016F0F0;
  if (!qword_10016F0F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001185D8, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F0F0);
  }

  return result;
}

unint64_t sub_1000C8AB0()
{
  unint64_t result = qword_10016F0F8[0];
  if (!qword_10016F0F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118600, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, qword_10016F0F8);
  }

  return result;
}

unint64_t sub_1000C8AF8()
{
  unint64_t result = qword_10016F180;
  if (!qword_10016F180)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118520, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F180);
  }

  return result;
}

unint64_t sub_1000C8B40()
{
  unint64_t result = qword_10016F188[0];
  if (!qword_10016F188[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118548, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, qword_10016F188);
  }

  return result;
}

unint64_t sub_1000C8B88()
{
  unint64_t result = qword_10016F210;
  if (!qword_10016F210)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118468, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F210);
  }

  return result;
}

unint64_t sub_1000C8BD0()
{
  unint64_t result = qword_10016F218[0];
  if (!qword_10016F218[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118490, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, qword_10016F218);
  }

  return result;
}

unint64_t sub_1000C8C18()
{
  unint64_t result = qword_10016F2A0;
  if (!qword_10016F2A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001183B0, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F2A0);
  }

  return result;
}

unint64_t sub_1000C8C60()
{
  unint64_t result = qword_10016F2A8[0];
  if (!qword_10016F2A8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001183D8, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, qword_10016F2A8);
  }

  return result;
}

unint64_t sub_1000C8CA8()
{
  unint64_t result = qword_10016F330;
  if (!qword_10016F330)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001182F8, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F330);
  }

  return result;
}

unint64_t sub_1000C8CF0()
{
  unint64_t result = qword_10016F338[0];
  if (!qword_10016F338[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118320, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, qword_10016F338);
  }

  return result;
}

unint64_t sub_1000C8D38()
{
  unint64_t result = qword_10016F3C0;
  if (!qword_10016F3C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001182A8, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F3C0);
  }

  return result;
}

unint64_t sub_1000C8D80()
{
  unint64_t result = qword_10016F3C8[0];
  if (!qword_10016F3C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001182D0, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, qword_10016F3C8);
  }

  return result;
}

unint64_t sub_1000C8DC8()
{
  unint64_t result = qword_10016F450;
  if (!qword_10016F450)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001181F0, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F450);
  }

  return result;
}

unint64_t sub_1000C8E10()
{
  unint64_t result = qword_10016F458[0];
  if (!qword_10016F458[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118218, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, qword_10016F458);
  }

  return result;
}

unint64_t sub_1000C8E58()
{
  unint64_t result = qword_10016F4E0;
  if (!qword_10016F4E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118138, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F4E0);
  }

  return result;
}

unint64_t sub_1000C8EA0()
{
  unint64_t result = qword_10016F4E8[0];
  if (!qword_10016F4E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118160, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, qword_10016F4E8);
  }

  return result;
}

unint64_t sub_1000C8EE8()
{
  unint64_t result = qword_10016F570;
  if (!qword_10016F570)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118080, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F570);
  }

  return result;
}

unint64_t sub_1000C8F30()
{
  unint64_t result = qword_10016F578;
  if (!qword_10016F578)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001180A8, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F578);
  }

  return result;
}

unint64_t sub_1000C8F78()
{
  unint64_t result = qword_10016F600;
  if (!qword_10016F600)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117FC8, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F600);
  }

  return result;
}

unint64_t sub_1000C8FC0()
{
  unint64_t result = qword_10016F608[0];
  if (!qword_10016F608[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117FF0, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, qword_10016F608);
  }

  return result;
}

unint64_t sub_1000C9008()
{
  unint64_t result = qword_10016F690;
  if (!qword_10016F690)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117F10, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F690);
  }

  return result;
}

unint64_t sub_1000C9050()
{
  unint64_t result = qword_10016F698[0];
  if (!qword_10016F698[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117F38, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, qword_10016F698);
  }

  return result;
}

unint64_t sub_1000C9098()
{
  unint64_t result = qword_10016F720;
  if (!qword_10016F720)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117E58, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F720);
  }

  return result;
}

unint64_t sub_1000C90E0()
{
  unint64_t result = qword_10016F728[0];
  if (!qword_10016F728[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117E80, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, qword_10016F728);
  }

  return result;
}

unint64_t sub_1000C9128()
{
  unint64_t result = qword_10016F7B0;
  if (!qword_10016F7B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117DA0, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F7B0);
  }

  return result;
}

unint64_t sub_1000C9170()
{
  unint64_t result = qword_10016F7B8[0];
  if (!qword_10016F7B8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117DC8, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, qword_10016F7B8);
  }

  return result;
}

unint64_t sub_1000C91B8()
{
  unint64_t result = qword_10016F840;
  if (!qword_10016F840)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117CE8, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F840);
  }

  return result;
}

unint64_t sub_1000C9200()
{
  unint64_t result = qword_10016F848[0];
  if (!qword_10016F848[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117D10, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, qword_10016F848);
  }

  return result;
}

unint64_t sub_1000C9248()
{
  unint64_t result = qword_10016F8D0;
  if (!qword_10016F8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117C30, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F8D0);
  }

  return result;
}

unint64_t sub_1000C9290()
{
  unint64_t result = qword_10016F8D8[0];
  if (!qword_10016F8D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117C58, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, qword_10016F8D8);
  }

  return result;
}

unint64_t sub_1000C92D8()
{
  unint64_t result = qword_10016F960;
  if (!qword_10016F960)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117B78, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F960);
  }

  return result;
}

unint64_t sub_1000C9320()
{
  unint64_t result = qword_10016F968[0];
  if (!qword_10016F968[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117BA0, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, qword_10016F968);
  }

  return result;
}

unint64_t sub_1000C9368()
{
  unint64_t result = qword_10016F9F0;
  if (!qword_10016F9F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117AC0, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F9F0);
  }

  return result;
}

unint64_t sub_1000C93B0()
{
  unint64_t result = qword_10016F9F8[0];
  if (!qword_10016F9F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117AE8, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, qword_10016F9F8);
  }

  return result;
}

unint64_t sub_1000C93F8()
{
  unint64_t result = qword_10016FA80;
  if (!qword_10016FA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117A08, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FA80);
  }

  return result;
}

unint64_t sub_1000C9440()
{
  unint64_t result = qword_10016FA88[0];
  if (!qword_10016FA88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117A30, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, qword_10016FA88);
  }

  return result;
}

unint64_t sub_1000C9488()
{
  unint64_t result = qword_10016FB10;
  if (!qword_10016FB10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117950, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FB10);
  }

  return result;
}

unint64_t sub_1000C94D0()
{
  unint64_t result = qword_10016FB18[0];
  if (!qword_10016FB18[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117978, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, qword_10016FB18);
  }

  return result;
}

unint64_t sub_1000C9518()
{
  unint64_t result = qword_10016FBA0;
  if (!qword_10016FBA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117898, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FBA0);
  }

  return result;
}

unint64_t sub_1000C9560()
{
  unint64_t result = qword_10016FBA8[0];
  if (!qword_10016FBA8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001178C0, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, qword_10016FBA8);
  }

  return result;
}

unint64_t sub_1000C95A8()
{
  unint64_t result = qword_10016FC30;
  if (!qword_10016FC30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001177E0, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FC30);
  }

  return result;
}

unint64_t sub_1000C95F0()
{
  unint64_t result = qword_10016FC38[0];
  if (!qword_10016FC38[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117808, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, qword_10016FC38);
  }

  return result;
}

unint64_t sub_1000C9638()
{
  unint64_t result = qword_10016FCC0;
  if (!qword_10016FCC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117728, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FCC0);
  }

  return result;
}

unint64_t sub_1000C9680()
{
  unint64_t result = qword_10016FCC8[0];
  if (!qword_10016FCC8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117750, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, qword_10016FCC8);
  }

  return result;
}

unint64_t sub_1000C96C8()
{
  unint64_t result = qword_10016FD50;
  if (!qword_10016FD50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117670, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FD50);
  }

  return result;
}

unint64_t sub_1000C9710()
{
  unint64_t result = qword_10016FD58[0];
  if (!qword_10016FD58[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117698, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, qword_10016FD58);
  }

  return result;
}

unint64_t sub_1000C9758()
{
  unint64_t result = qword_10016FDE0;
  if (!qword_10016FDE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001175B8, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FDE0);
  }

  return result;
}

unint64_t sub_1000C97A0()
{
  unint64_t result = qword_10016FDE8[0];
  if (!qword_10016FDE8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001175E0, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, qword_10016FDE8);
  }

  return result;
}

unint64_t sub_1000C97E8()
{
  unint64_t result = qword_10016FE70;
  if (!qword_10016FE70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117500, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FE70);
  }

  return result;
}

unint64_t sub_1000C9830()
{
  unint64_t result = qword_10016FE78;
  if (!qword_10016FE78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117528, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FE78);
  }

  return result;
}

unint64_t sub_1000C9878()
{
  unint64_t result = qword_10016FF00;
  if (!qword_10016FF00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117448, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FF00);
  }

  return result;
}

unint64_t sub_1000C98C0()
{
  unint64_t result = qword_10016FF08[0];
  if (!qword_10016FF08[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117470, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, qword_10016FF08);
  }

  return result;
}

unint64_t sub_1000C9908()
{
  unint64_t result = qword_10016FF90;
  if (!qword_10016FF90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117390, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FF90);
  }

  return result;
}

unint64_t sub_1000C9950()
{
  unint64_t result = qword_10016FF98[0];
  if (!qword_10016FF98[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001173B8, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, qword_10016FF98);
  }

  return result;
}

unint64_t sub_1000C9998()
{
  unint64_t result = qword_100170020;
  if (!qword_100170020)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001172D8, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170020);
  }

  return result;
}

unint64_t sub_1000C99E0()
{
  unint64_t result = qword_100170028[0];
  if (!qword_100170028[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117300, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, qword_100170028);
  }

  return result;
}

unint64_t sub_1000C9A28()
{
  unint64_t result = qword_1001700B0;
  if (!qword_1001700B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117220, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001700B0);
  }

  return result;
}

unint64_t sub_1000C9A70()
{
  unint64_t result = qword_1001700B8[0];
  if (!qword_1001700B8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117248, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, qword_1001700B8);
  }

  return result;
}

unint64_t sub_1000C9AB8()
{
  unint64_t result = qword_100170140;
  if (!qword_100170140)
  {
    unint64_t result = swift_getWitnessTable(&unk_100117168, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170140);
  }

  return result;
}

unint64_t sub_1000C9B00()
{
  unint64_t result = qword_100170148[0];
  if (!qword_100170148[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117190, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, qword_100170148);
  }

  return result;
}

unint64_t sub_1000C9B48()
{
  unint64_t result = qword_1001701D0;
  if (!qword_1001701D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001170B0, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001701D0);
  }

  return result;
}

unint64_t sub_1000C9B90()
{
  unint64_t result = qword_1001701D8[0];
  if (!qword_1001701D8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001170D8, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, qword_1001701D8);
  }

  return result;
}

unint64_t sub_1000C9BD8()
{
  unint64_t result = qword_100170260;
  if (!qword_100170260)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116FF8, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170260);
  }

  return result;
}

unint64_t sub_1000C9C20()
{
  unint64_t result = qword_100170268[0];
  if (!qword_100170268[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100117020, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, qword_100170268);
  }

  return result;
}

unint64_t sub_1000C9C68()
{
  unint64_t result = qword_1001702F0;
  if (!qword_1001702F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116F40, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001702F0);
  }

  return result;
}

unint64_t sub_1000C9CB0()
{
  unint64_t result = qword_1001702F8[0];
  if (!qword_1001702F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116F68, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, qword_1001702F8);
  }

  return result;
}

unint64_t sub_1000C9CF8()
{
  unint64_t result = qword_100170380;
  if (!qword_100170380)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116E88, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170380);
  }

  return result;
}

unint64_t sub_1000C9D40()
{
  unint64_t result = qword_100170388[0];
  if (!qword_100170388[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116EB0, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, qword_100170388);
  }

  return result;
}

unint64_t sub_1000C9D88()
{
  unint64_t result = qword_100170410;
  if (!qword_100170410)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116DD0, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170410);
  }

  return result;
}

unint64_t sub_1000C9DD0()
{
  unint64_t result = qword_100170418[0];
  if (!qword_100170418[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116DF8, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, qword_100170418);
  }

  return result;
}

unint64_t sub_1000C9E18()
{
  unint64_t result = qword_1001704A0;
  if (!qword_1001704A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116D18, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001704A0);
  }

  return result;
}

unint64_t sub_1000C9E60()
{
  unint64_t result = qword_1001704A8[0];
  if (!qword_1001704A8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116D40, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, qword_1001704A8);
  }

  return result;
}

unint64_t sub_1000C9EA8()
{
  unint64_t result = qword_100170530;
  if (!qword_100170530)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116C60, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170530);
  }

  return result;
}

unint64_t sub_1000C9EF0()
{
  unint64_t result = qword_100170538[0];
  if (!qword_100170538[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116C88, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, qword_100170538);
  }

  return result;
}

unint64_t sub_1000C9F38()
{
  unint64_t result = qword_1001705C0;
  if (!qword_1001705C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116BA8, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001705C0);
  }

  return result;
}

unint64_t sub_1000C9F80()
{
  unint64_t result = qword_1001705C8[0];
  if (!qword_1001705C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116BD0, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, qword_1001705C8);
  }

  return result;
}

unint64_t sub_1000C9FC8()
{
  unint64_t result = qword_100170650;
  if (!qword_100170650)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116AF0, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170650);
  }

  return result;
}

unint64_t sub_1000CA010()
{
  unint64_t result = qword_100170658[0];
  if (!qword_100170658[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116B18, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, qword_100170658);
  }

  return result;
}

unint64_t sub_1000CA058()
{
  unint64_t result = qword_1001706E0;
  if (!qword_1001706E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116A38, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001706E0);
  }

  return result;
}

unint64_t sub_1000CA0A0()
{
  unint64_t result = qword_1001706E8[0];
  if (!qword_1001706E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116A60, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, qword_1001706E8);
  }

  return result;
}

unint64_t sub_1000CA0E8()
{
  unint64_t result = qword_100170770;
  if (!qword_100170770)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116980, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170770);
  }

  return result;
}

unint64_t sub_1000CA130()
{
  unint64_t result = qword_100170778;
  if (!qword_100170778)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001169A8, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170778);
  }

  return result;
}

unint64_t sub_1000CA178()
{
  unint64_t result = qword_100170800;
  if (!qword_100170800)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001168C8, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170800);
  }

  return result;
}

unint64_t sub_1000CA1C0()
{
  unint64_t result = qword_100170808[0];
  if (!qword_100170808[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001168F0, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, qword_100170808);
  }

  return result;
}

unint64_t sub_1000CA208()
{
  unint64_t result = qword_100170890;
  if (!qword_100170890)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116810, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170890);
  }

  return result;
}

unint64_t sub_1000CA250()
{
  unint64_t result = qword_100170898[0];
  if (!qword_100170898[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116838, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, qword_100170898);
  }

  return result;
}

unint64_t sub_1000CA298()
{
  unint64_t result = qword_100170920;
  if (!qword_100170920)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116758, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170920);
  }

  return result;
}

unint64_t sub_1000CA2E0()
{
  unint64_t result = qword_100170928[0];
  if (!qword_100170928[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116780, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, qword_100170928);
  }

  return result;
}

unint64_t sub_1000CA328()
{
  unint64_t result = qword_1001709B0;
  if (!qword_1001709B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001166A0, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001709B0);
  }

  return result;
}

unint64_t sub_1000CA370()
{
  unint64_t result = qword_1001709B8[0];
  if (!qword_1001709B8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001166C8, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, qword_1001709B8);
  }

  return result;
}

unint64_t sub_1000CA3B8()
{
  unint64_t result = qword_100170A40;
  if (!qword_100170A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001165E8, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170A40);
  }

  return result;
}

unint64_t sub_1000CA400()
{
  unint64_t result = qword_100170A48[0];
  if (!qword_100170A48[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116610, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, qword_100170A48);
  }

  return result;
}

unint64_t sub_1000CA448()
{
  unint64_t result = qword_100170AD0;
  if (!qword_100170AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116530, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170AD0);
  }

  return result;
}

unint64_t sub_1000CA490()
{
  unint64_t result = qword_100170AD8[0];
  if (!qword_100170AD8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116558, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, qword_100170AD8);
  }

  return result;
}

unint64_t sub_1000CA4D8()
{
  unint64_t result = qword_100170B60;
  if (!qword_100170B60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116478, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170B60);
  }

  return result;
}

unint64_t sub_1000CA520()
{
  unint64_t result = qword_100170B68[0];
  if (!qword_100170B68[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001164A0, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, qword_100170B68);
  }

  return result;
}

unint64_t sub_1000CA568()
{
  unint64_t result = qword_100170BF0;
  if (!qword_100170BF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001163C0, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170BF0);
  }

  return result;
}

unint64_t sub_1000CA5B0()
{
  unint64_t result = qword_100170BF8[0];
  if (!qword_100170BF8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001163E8, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, qword_100170BF8);
  }

  return result;
}

unint64_t sub_1000CA5F8()
{
  unint64_t result = qword_100170C80;
  if (!qword_100170C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116308, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170C80);
  }

  return result;
}

unint64_t sub_1000CA640()
{
  unint64_t result = qword_100170C88[0];
  if (!qword_100170C88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116330, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, qword_100170C88);
  }

  return result;
}

unint64_t sub_1000CA688()
{
  unint64_t result = qword_100170D10;
  if (!qword_100170D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116250, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170D10);
  }

  return result;
}

unint64_t sub_1000CA6D0()
{
  unint64_t result = qword_100170D18[0];
  if (!qword_100170D18[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116278, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, qword_100170D18);
  }

  return result;
}

unint64_t sub_1000CA718()
{
  unint64_t result = qword_100170DA0;
  if (!qword_100170DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116198, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170DA0);
  }

  return result;
}

unint64_t sub_1000CA760()
{
  unint64_t result = qword_100170DA8[0];
  if (!qword_100170DA8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001161C0, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, qword_100170DA8);
  }

  return result;
}

unint64_t sub_1000CA7A8()
{
  unint64_t result = qword_100170E30;
  if (!qword_100170E30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001160E0, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170E30);
  }

  return result;
}

unint64_t sub_1000CA7F0()
{
  unint64_t result = qword_100170E38[0];
  if (!qword_100170E38[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116108, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, qword_100170E38);
  }

  return result;
}

unint64_t sub_1000CA838()
{
  unint64_t result = qword_100170EC0;
  if (!qword_100170EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100116028, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170EC0);
  }

  return result;
}

unint64_t sub_1000CA880()
{
  unint64_t result = qword_100170EC8[0];
  if (!qword_100170EC8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100116050, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, qword_100170EC8);
  }

  return result;
}

unint64_t sub_1000CA8C8()
{
  unint64_t result = qword_100170F50;
  if (!qword_100170F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115F70, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170F50);
  }

  return result;
}

unint64_t sub_1000CA910()
{
  unint64_t result = qword_100170F58[0];
  if (!qword_100170F58[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115F98, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, qword_100170F58);
  }

  return result;
}

unint64_t sub_1000CA958()
{
  unint64_t result = qword_100170FE0;
  if (!qword_100170FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115EB8, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170FE0);
  }

  return result;
}

unint64_t sub_1000CA9A0()
{
  unint64_t result = qword_100170FE8[0];
  if (!qword_100170FE8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115EE0, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, qword_100170FE8);
  }

  return result;
}

unint64_t sub_1000CA9E8()
{
  unint64_t result = qword_100171070;
  if (!qword_100171070)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115E00, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171070);
  }

  return result;
}

unint64_t sub_1000CAA30()
{
  unint64_t result = qword_100171078;
  if (!qword_100171078)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115E28, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171078);
  }

  return result;
}

unint64_t sub_1000CAA78()
{
  unint64_t result = qword_100171100;
  if (!qword_100171100)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115D48, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171100);
  }

  return result;
}

unint64_t sub_1000CAAC0()
{
  unint64_t result = qword_100171108[0];
  if (!qword_100171108[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115D70, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, qword_100171108);
  }

  return result;
}

unint64_t sub_1000CAB08()
{
  unint64_t result = qword_100171190;
  if (!qword_100171190)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115C90, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171190);
  }

  return result;
}

unint64_t sub_1000CAB50()
{
  unint64_t result = qword_100171198[0];
  if (!qword_100171198[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115CB8, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, qword_100171198);
  }

  return result;
}

unint64_t sub_1000CAB98()
{
  unint64_t result = qword_100171220;
  if (!qword_100171220)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115BD8, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171220);
  }

  return result;
}

unint64_t sub_1000CABE0()
{
  unint64_t result = qword_100171228[0];
  if (!qword_100171228[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115C00, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, qword_100171228);
  }

  return result;
}

unint64_t sub_1000CAC28()
{
  unint64_t result = qword_1001712B0;
  if (!qword_1001712B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115B20, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001712B0);
  }

  return result;
}

unint64_t sub_1000CAC70()
{
  unint64_t result = qword_1001712B8[0];
  if (!qword_1001712B8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115B48, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, qword_1001712B8);
  }

  return result;
}

unint64_t sub_1000CACB8()
{
  unint64_t result = qword_100171340;
  if (!qword_100171340)
  {
    unint64_t result = swift_getWitnessTable( &unk_100115A68,  &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171340);
  }

  return result;
}

unint64_t sub_1000CAD00()
{
  unint64_t result = qword_100171348[0];
  if (!qword_100171348[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_100115A90,  &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, qword_100171348);
  }

  return result;
}

unint64_t sub_1000CAD48()
{
  unint64_t result = qword_1001713D0;
  if (!qword_1001713D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001159B0,  &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001713D0);
  }

  return result;
}

unint64_t sub_1000CAD90()
{
  unint64_t result = qword_1001713D8[0];
  if (!qword_1001713D8[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_1001159D8,  &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, qword_1001713D8);
  }

  return result;
}

unint64_t sub_1000CADD8()
{
  unint64_t result = qword_100171460;
  if (!qword_100171460)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001158F8, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171460);
  }

  return result;
}

unint64_t sub_1000CAE20()
{
  unint64_t result = qword_100171468[0];
  if (!qword_100171468[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115920, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, qword_100171468);
  }

  return result;
}

unint64_t sub_1000CAE68()
{
  unint64_t result = qword_1001714F0;
  if (!qword_1001714F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115840, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001714F0);
  }

  return result;
}

unint64_t sub_1000CAEB0()
{
  unint64_t result = qword_1001714F8[0];
  if (!qword_1001714F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115868, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, qword_1001714F8);
  }

  return result;
}

unint64_t sub_1000CAEF8()
{
  unint64_t result = qword_100171580;
  if (!qword_100171580)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115788, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171580);
  }

  return result;
}

unint64_t sub_1000CAF40()
{
  unint64_t result = qword_100171588[0];
  if (!qword_100171588[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001157B0, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, qword_100171588);
  }

  return result;
}

unint64_t sub_1000CAF88()
{
  unint64_t result = qword_100171610;
  if (!qword_100171610)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001156D0, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171610);
  }

  return result;
}

unint64_t sub_1000CAFD0()
{
  unint64_t result = qword_100171618[0];
  if (!qword_100171618[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001156F8, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, qword_100171618);
  }

  return result;
}

unint64_t sub_1000CB018()
{
  unint64_t result = qword_1001716A0;
  if (!qword_1001716A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115618, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001716A0);
  }

  return result;
}

unint64_t sub_1000CB060()
{
  unint64_t result = qword_1001716A8[0];
  if (!qword_1001716A8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115640, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, qword_1001716A8);
  }

  return result;
}

unint64_t sub_1000CB0A8()
{
  unint64_t result = qword_100171730;
  if (!qword_100171730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100115560, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171730);
  }

  return result;
}

unint64_t sub_1000CB0F0()
{
  unint64_t result = qword_100171738[0];
  if (!qword_100171738[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100115588, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, qword_100171738);
  }

  return result;
}

unint64_t sub_1000CB138()
{
  unint64_t result = qword_1001717C0;
  if (!qword_1001717C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001154A8, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001717C0);
  }

  return result;
}

unint64_t sub_1000CB180()
{
  unint64_t result = qword_1001717C8[0];
  if (!qword_1001717C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001154D0, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, qword_1001717C8);
  }

  return result;
}

unint64_t sub_1000CB1C8()
{
  unint64_t result = qword_100171850;
  if (!qword_100171850)
  {
    unint64_t result = swift_getWitnessTable(&unk_100118970, &type metadata for KMError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171850);
  }

  return result;
}

unint64_t sub_1000CB210()
{
  unint64_t result = qword_100171858[0];
  if (!qword_100171858[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100118998, &type metadata for KMError.CodingKeys);
    atomic_store(result, qword_100171858);
  }

  return result;
}

uint64_t sub_1000CB254(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100012010(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000CB2B0()
{
  unint64_t result = qword_10015B8E0;
  if (!qword_10015B8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B448, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015B8E0);
  }

  return result;
}

uint64_t sub_1000CB2F4(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100012010(&qword_10015B658);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000CB35C()
{
  unint64_t result = qword_10015B8F0;
  if (!qword_10015B8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001149F8, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B8F0);
  }

  return result;
}

void *sub_1000CB3A8( void *a1, void *a2, unint64_t a3, uint64_t (*a4)(void), int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v26)(void **__return_ptr);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(__n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(void **__return_ptr, uint64_t, uint64_t);
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void **__return_ptr, uint64_t, uint64_t);
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t (*v128)(void);
  int v129;
  int v130;
  char *v131;
  uint64_t v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  _OWORD v136[2];
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  void *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v135 = a8;
  uint64_t v130 = a6;
  uint64_t v129 = a5;
  uint64_t v128 = a4;
  uint64_t v133 = a2;
  uint64_t v134 = a3;
  uint64_t v132 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v132 - 8);
  uint64_t v12 = __chkstk_darwin(v132);
  char v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v131 = (char *)&v119 - v15;
  uint64_t v16 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  uint64_t v127 = xmmword_10010F110;
  *(_OWORD *)(v17 + 16) = xmmword_10010F110;
  uint64_t v140 = a1;
  uint64_t v18 = type metadata accessor for DriverExtension(0LL);
  unint64_t v19 = sub_1000CC15C();
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
  uint64_t v22 = v21;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_100026B64();
  *(void *)(v17 + 3sub_100006034(v0 + 2) = v20;
  *(void *)(v17 + sub_10007CFB4(v0 + 40) = v22;
  unint64_t v23 = sub_100026BA8();
  uint64_t v24 = (void *)static OS_os_log.default.getter(v23);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:type:_:)("Launching driver extension: %{public}s", 38LL, 2LL, &_mh_execute_header, v24, v25, v17);
  swift_bridgeObjectRelease(v17);

  uint64_t v26 = *(void (**)(void **__return_ptr))(*a1 + 112LL);
  v26(&v140);
  uint64_t v27 = v142;
  if (!v142)
  {
    sub_100012824((uint64_t)&v140, &qword_100157C58);
LABEL_13:
    uint64_t v140 = 0LL;
    uint64_t v141 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    uint64_t v74 = swift_bridgeObjectRelease(v141);
    *(void *)&uint64_t v137 = 0xD000000000000010LL;
    *((void *)&v137 + 1) = 0x800000010012A7F0LL;
    ((void (*)(void **__return_ptr, uint64_t))v26)(&v140, v74);
    uint64_t v75 = v142;
    if (v142)
    {
      uint64_t v76 = v143;
      sub_100005110(&v140, v142);
      uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 24))(v75, v76);
      char v79 = v78;
      sub_100006034(&v140);
      if (v79)
      {
LABEL_18:
        v80._uint64_t countAndFlagsBits = v77;
        v80._object = v79;
        String.append(_:)(v80);
        swift_bridgeObjectRelease(v79);
        v81._uint64_t countAndFlagsBits = 0xD000000000000018LL;
        v81._object = (void *)0x800000010012A810LL;
        String.append(_:)(v81);
        uint64_t v83 = *((void *)&v137 + 1);
        uint64_t v82 = (void *)v137;
        uint64_t v84 = sub_100012624();
        uint64_t v85 = swift_allocError(&type metadata for KMError, v84, 0LL, 0LL);
        *(void *)unint64_t v86 = v82;
        *(void *)(v86 + 8) = v83;
        *(_OWORD *)(v86 + 16) = 0u;
        *(_OWORD *)(v86 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v86 + 48) = 0u;
        *(void *)(v86 + 64) = 0LL;
        *(_BYTE *)(v86 + 7sub_100006034(v0 + 2) = 4;
        swift_willThrow(v85);
        return v82;
      }
    }

    else
    {
      sub_100012824((uint64_t)&v140, &qword_100157C58);
    }

    swift_bridgeObjectRelease(0LL);
    char v79 = (void *)0xE600000000000000LL;
    uint64_t v77 = 0x296C6C756E28LL;
    goto LABEL_18;
  }

  uint64_t v28 = v143;
  sub_100005110(&v140, v142);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  uint64_t v31 = v30;
  sub_100006034(&v140);
  if (!v31) {
    goto LABEL_13;
  }
  uint64_t v125 = a7;
  URL.init(fileURLWithPath:)(v29, v31);
  uint64_t v32 = swift_bridgeObjectRelease(v31);
  URL.absoluteURL.getter(v32);
  uint64_t v122 = *(void (**)(char *, uint64_t))(v11 + 8);
  v122(v14, v132);
  uint64_t v33 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v33 + 16) = v127;
  *(void *)(v33 + 56) = &type metadata for UInt64;
  *(void *)(v33 + 64) = &protocol witness table for UInt64;
  *(void *)(v33 + 3sub_100006034(v0 + 2) = v128;
  uint64_t v34 = String.init(format:_:)(0x786C6C257830LL, 0xE600000000000000LL, v33);
  uint64_t v123 = v34;
  uint64_t v36 = v35;
  uint64_t v37 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v38 = swift_allocObject(v37, 96LL, 7LL);
  *(_OWORD *)(v38 + 16) = xmmword_100112500;
  *(void *)(v38 + 3sub_100006034(v0 + 2) = URL.path.getter(v38);
  *(void *)(v38 + sub_10007CFB4(v0 + 40) = v39;
  uint64_t v40 = v134;
  *(void *)(v38 + 48) = v133;
  *(void *)(v38 + 56) = v40;
  *(void *)(v38 + 64) = v34;
  *(void *)(v38 + 7sub_100006034(v0 + 2) = v36;
  uint64_t v128 = *(uint64_t (**)(void))(*a1 + 144LL);
  uint64_t v41 = (uint64_t (*)(__n128))v128;
  swift_bridgeObjectRetain(v40);
  uint64_t v42 = swift_bridgeObjectRetain(v36);
  *(void *)(v38 + 80) = v41(v42);
  *(void *)(v38 + 88) = v43;
  uint64_t v44 = v135;
  uint64_t v121 = *(void (**)(void **__return_ptr, uint64_t, uint64_t))(a9 + 8);
  v121(&v140, v135, a9);
  uint64_t v45 = v142;
  uint64_t v46 = v143;
  sub_100005110(&v140, v142);
  sub_100071818(v45, v46);
  uint64_t v47 = *((void *)&v138 + 1);
  uint64_t v48 = v139;
  sub_100005110(&v137, *((uint64_t *)&v138 + 1));
  uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 120))(v47, v48);
  sub_100006034(&v137);
  sub_100006034(&v140);
  uint64_t v50 = 0xD000000000000013LL;
  if ((v49 & 1) == 0) {
    uint64_t v50 = 0x6C7070612E6D6F63LL;
  }
  *(void *)&uint64_t v127 = v50;
  uint64_t v51 = 0x800000010012A930LL;
  if ((v49 & 1) == 0) {
    uint64_t v51 = 0xEE00747865642E65LL;
  }
  uint64_t v124 = v51;
  uint64_t v52 = sub_100005FB4(&qword_100158210);
  uint64_t v53 = swift_allocObject(v52, 704LL, 7LL);
  *(_OWORD *)(v53 + 16) = xmmword_10011A1A0;
  *(void *)(v53 + 3sub_100006034(v0 + 2) = 0x646567616E614D5FLL;
  *(void *)(v53 + sub_10007CFB4(v0 + 40) = 0xEA00000000007942LL;
  uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 32);
  uint64_t v120 = a9;
  *(void *)(v53 + 48) = v54(v44, a9);
  *(void *)(v53 + 56) = v55;
  *(void *)(v53 + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(v53 + 80) = 0x6C6562614CLL;
  *(void *)(v53 + 88) = 0xE500000000000000LL;
  uint64_t v56 = v133;
  uint64_t v140 = v133;
  uint64_t v141 = v40;
  swift_bridgeObjectRetain(v40);
  v57._uint64_t countAndFlagsBits = 45LL;
  v57._object = (void *)0xE100000000000000LL;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = v123;
  v58._object = v36;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v36);
  uint64_t v59 = v141;
  *(void *)(v53 + 96) = v140;
  *(void *)(v53 + 104) = v59;
  *(void *)(v53 + 120) = &type metadata for String;
  *(void *)(v53 + 128) = 0xD000000000000010LL;
  *(void *)(v53 + 136) = 0x800000010012A830LL;
  uint64_t v60 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  *(void *)(v53 + 144) = v38;
  *(void *)(v53 + 168) = v60;
  *(void *)(v53 + 176) = 0x54737365636F7250LL;
  *(void *)(v53 + 184) = 0xEB00000000657079LL;
  *(void *)(v53 + 19sub_100006034(v0 + 2) = 0x726576697244LL;
  *(void *)(v53 + 200) = 0xE600000000000000LL;
  *(void *)(v53 + 216) = &type metadata for String;
  *(void *)(v53 + 224) = 0x616F4C74416E7552LL;
  *(void *)(v53 + 23sub_100006034(v0 + 2) = 0xE900000000000064LL;
  *(_BYTE *)(v53 + 2sub_10007CFB4(v0 + 40) = 1;
  *(void *)(v53 + 264) = &type metadata for Bool;
  strcpy((char *)(v53 + 272), "LaunchOnlyOnce");
  *(_BYTE *)(v53 + 287) = -18;
  *(_BYTE *)(v53 + 288) = 1;
  *(void *)(v53 + 31sub_100006034(v0 + 2) = &type metadata for Bool;
  *(void *)(v53 + 320) = 0x656D614E72657355LL;
  *(void *)(v53 + 328) = 0xE800000000000000LL;
  *(void *)(v53 + 336) = 0x6B7265766972645FLL;
  *(void *)(v53 + 344) = 0xEA00000000007469LL;
  *(void *)(v53 + 360) = &type metadata for String;
  *(void *)(v53 + 368) = 0xD000000000000012LL;
  *(void *)(v53 + 376) = 0x800000010012A850LL;
  *(_BYTE *)(v53 + 384) = v129 & 1;
  *(void *)(v53 + 408) = &type metadata for Bool;
  *(void *)(v53 + 416) = 0xD000000000000016LL;
  *(void *)(v53 + 424) = 0x800000010012A870LL;
  *(void *)(v53 + 43sub_100006034(v0 + 2) = 0x6D6574737953LL;
  *(void *)(v53 + 4sub_10007CFB4(v0 + 40) = 0xE600000000000000LL;
  *(void *)(v53 + 456) = &type metadata for String;
  *(void *)(v53 + 464) = 0xD000000000000012LL;
  *(void *)(v53 + 47sub_100006034(v0 + 2) = 0x8000000100127180LL;
  *(void *)(v53 + 480) = v128();
  *(void *)(v53 + 488) = v61;
  *(void *)(v53 + 504) = &type metadata for String;
  strcpy((char *)(v53 + 512), "SandboxProfile");
  *(_BYTE *)(v53 + 527) = -18;
  *(void *)(v53 + 55sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(v53 + 528) = v127;
  *(void *)(v53 + 536) = v124;
  *(void *)(v53 + 560) = 0xD000000000000012LL;
  *(void *)(v53 + 568) = 0x800000010012A890LL;
  *(void *)(v53 + 600) = &type metadata for Bool;
  *(_BYTE *)(v53 + 576) = 1;
  *(void *)(v53 + 608) = 0xD00000000000001BLL;
  *(void *)(v53 + 616) = 0x800000010012A8B0LL;
  *(void *)(v53 + 648) = &type metadata for String;
  *(void *)(v53 + 624) = v56;
  uint64_t v62 = v134;
  *(void *)(v53 + 63sub_100006034(v0 + 2) = v134;
  *(void *)(v53 + 656) = 0xD000000000000010LL;
  *(void *)(v53 + 664) = 0x8000000100123B80LL;
  *(void *)(v53 + 696) = &type metadata for UInt32;
  *(_DWORD *)(v53 + 67sub_100006034(v0 + 2) = v130;
  swift_bridgeObjectRetain(v62);
  uint64_t v63 = sub_100015D14(v53);
  sub_10001A148(v125, (uint64_t)&v137, &qword_100157FF0);
  if (*((void *)&v138 + 1))
  {
    sub_100005158(&v137, (uint64_t)&v140);
    uint64_t v64 = v142;
    uint64_t v65 = v143;
    sub_100005110(&v140, v142);
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v64, v65);
    uint64_t v67 = sub_1000CC2B4(v66);
    swift_bridgeObjectRelease(v66);
    if ((v67 & 1) == 0)
    {
      uint64_t v87 = v126;
      uint64_t v88 = v122;
      uint64_t v89 = v120;
      uint64_t v90 = v121;
      goto LABEL_37;
    }

    uint64_t v68 = a1[2];
    uint64_t v69 = (uint64_t *)sub_10008F580();
    if (*(void *)(v68 + 16))
    {
      uint64_t v70 = *v69;
      uint64_t v71 = v69[1];
      swift_bridgeObjectRetain(v71);
      uint64_t v72 = sub_100006114(v70, v71);
      if ((v73 & 1) != 0)
      {
        sub_100006054(*(void *)(v68 + 56) + 32 * v72, (uint64_t)&v137);
      }

      else
      {
        uint64_t v137 = 0u;
        uint64_t v138 = 0u;
      }

      uint64_t v87 = v126;
      uint64_t v88 = v122;
      uint64_t v89 = v120;
      uint64_t v90 = v121;
      swift_bridgeObjectRelease(v71);
      if (*((void *)&v138 + 1))
      {
        uint64_t v91 = sub_100005FB4(&qword_100158898);
        if ((swift_dynamicCast(v136, &v137, (char *)&type metadata for Any + 8, v91, 6LL) & 1) != 0)
        {
          *((void *)&v138 + 1) = v91;
          *(void *)&uint64_t v137 = *(void *)&v136[0];
          sub_100017790(&v137, v136);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
          uint64_t v144 = v63;
          sub_100017090(v136, 0xD000000000000014LL, 0x8000000100126F20LL, isUniquelyReferenced_nonNull_native);
          uint64_t v63 = v144;
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v137 = 0u;
      uint64_t v138 = 0u;
      uint64_t v87 = v126;
      uint64_t v88 = v122;
      uint64_t v89 = v120;
      uint64_t v90 = v121;
    }

    sub_100012824((uint64_t)&v137, &qword_100157FF8);
LABEL_27:
    uint64_t v93 = (uint64_t *)sub_10008F58C();
    if (*(void *)(v68 + 16))
    {
      uint64_t v94 = *v93;
      uint64_t v95 = v93[1];
      swift_bridgeObjectRetain(v95);
      uint64_t v96 = sub_100006114(v94, v95);
      if ((v97 & 1) != 0)
      {
        sub_100006054(*(void *)(v68 + 56) + 32 * v96, (uint64_t)&v137);
      }

      else
      {
        uint64_t v137 = 0u;
        uint64_t v138 = 0u;
      }

      swift_bridgeObjectRelease(v95);
      if (*((void *)&v138 + 1))
      {
        if (swift_dynamicCast( v136,  &v137,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL)
          && (v136[0] & 1) != 0)
        {
          __int128 v98 = sub_1000CC1A4((uint64_t)&off_10014E870);
          uint64_t v99 = sub_100005FB4(&qword_10015B900);
          *((void *)&v138 + 1) = v99;
          *(void *)&uint64_t v137 = v98;
          sub_100017790(&v137, v136);
          uint64_t v100 = swift_isUniquelyReferenced_nonNull_native(v63);
          uint64_t v144 = v63;
          sub_100017090(v136, 0xD000000000000012LL, 0x800000010012A8F0LL, v100);
          uint64_t v101 = v144;
          swift_bridgeObjectRelease(0x8000000000000000LL);
          uint64_t v102 = sub_1000CC1A4((uint64_t)&off_10014E8A8);
          *((void *)&v138 + 1) = v99;
          *(void *)&uint64_t v137 = v102;
          sub_100017790(&v137, v136);
          uint64_t v103 = swift_isUniquelyReferenced_nonNull_native(v101);
          uint64_t v144 = v101;
          sub_100017090(v136, 0xD000000000000012LL, 0x800000010012A910LL, v103);
          uint64_t v63 = v144;
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v137 = 0u;
      uint64_t v138 = 0u;
    }

    sub_100012824((uint64_t)&v137, &qword_100157FF8);
LABEL_37:
    uint64_t v104 = v142;
    uint64_t v105 = v143;
    sub_100005110(&v140, v142);
    uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 16))(v104, v105);
    uint64_t v107 = (uint64_t *)sub_100090194();
    if (*(void *)(v106 + 16))
    {
      uint64_t v109 = *v107;
      uint64_t v108 = v107[1];
      swift_bridgeObjectRetain(v108);
      uint64_t v110 = sub_100006114(v109, v108);
      if ((v111 & 1) != 0)
      {
        sub_100006054(*(void *)(v106 + 56) + 32 * v110, (uint64_t)&v137);
      }

      else
      {
        uint64_t v137 = 0u;
        uint64_t v138 = 0u;
      }

      swift_bridgeObjectRelease(v108);
    }

    else
    {
      uint64_t v137 = 0u;
      uint64_t v138 = 0u;
    }

    swift_bridgeObjectRelease(v106);
    if (*((void *)&v138 + 1))
    {
      if (swift_dynamicCast( v136,  &v137,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL)
        && (v136[0] & 1) != 0)
      {
        *((void *)&v138 + 1) = &type metadata for Bool;
        LOBYTE(v137) = 1;
        sub_100017790(&v137, v136);
        uint64_t v112 = swift_isUniquelyReferenced_nonNull_native(v63);
        uint64_t v144 = v63;
        sub_100017090(v136, 0xD000000000000017LL, 0x800000010012A8D0LL, v112);
        uint64_t v63 = v144;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }
    }

    else
    {
      sub_100012824((uint64_t)&v137, &qword_100157FF8);
    }

    sub_100006034(&v140);
    v90(&v140, v135, v89);
    goto LABEL_49;
  }

  sub_100012824((uint64_t)&v137, &qword_100157FF0);
  uint64_t v87 = v126;
  uint64_t v88 = v122;
  v121(&v140, v135, v120);
LABEL_49:
  uint64_t v113 = v142;
  uint64_t v114 = v143;
  sub_100005110(&v140, v142);
  sub_10006A3D4(v113, v114);
  uint64_t v115 = *((void *)&v138 + 1);
  uint64_t v116 = v139;
  uint64_t v82 = sub_100005110(&v137, *((uint64_t *)&v138 + 1));
  uint64_t v117 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v116 + 8))(v63, v115, v116);
  if (!v87) {
    uint64_t v82 = (void *)v117;
  }
  v88(v131, v132);
  swift_bridgeObjectRelease(v63);
  sub_100006034(&v137);
  sub_100006034(&v140);
  return v82;
}

unint64_t sub_1000CC15C()
{
  unint64_t result = qword_10015B8F8;
  if (!qword_10015B8F8)
  {
    uint64_t v1 = type metadata accessor for DriverExtension(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10011B528, v1);
    atomic_store(result, (unint64_t *)&qword_10015B8F8);
  }

  return result;
}

unint64_t sub_1000CC1A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015B908);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unsigned int v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000CC2B4(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_100090158();
  if (!*(void *)(a1 + 16))
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    goto LABEL_9;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_9;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v24);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v25 + 1))
  {
LABEL_9:
    sub_100012824((uint64_t)&v24, &qword_100157FF8);
    goto LABEL_10;
  }

  if (swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL)
    && (v23 & 1) != 0)
  {
    return 1LL;
  }

uint64_t sub_1000CC578( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (*v23)(unint64_t *__return_ptr);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(__n128);
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v140;
  void v141[3];
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  void v150[3];
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v14 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_10010F110;
  uint64_t v153 = (unint64_t)a1;
  uint64_t v16 = type metadata accessor for DriverExtension(0LL);
  uint64_t v131 = sub_1000CC15C();
  uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v16, v131);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  uint64_t v130 = sub_100026B64();
  *(void *)(v15 + 64) = v130;
  *(void *)(v15 + 3sub_100006034(v0 + 2) = v17;
  *(void *)(v15 + sub_10007CFB4(v0 + 40) = v19;
  unint64_t v20 = sub_100026BA8();
  unint64_t v21 = (void *)static OS_os_log.default.getter(v20);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  os_log(_:dso:log:type:_:)( "Launching driver extension via running board: %{public}s",  56LL,  2LL,  &_mh_execute_header,  v21,  v22,  v15);
  swift_bridgeObjectRelease(v15);

  unsigned __int8 v23 = *(void (**)(unint64_t *__return_ptr))(*a1 + 112LL);
  v23(&v153);
  __int128 v24 = v155;
  if (v155)
  {
    uint64_t v128 = v16;
    __int128 v25 = v156;
    sub_100005110(&v153, v155);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
    uint64_t v28 = v27;
    uint64_t v29 = sub_100006034(&v153);
    if (v28)
    {
      uint64_t v126 = v26;
      uint64_t v127 = a1;
      uint64_t v129 = v28;
      uint64_t v30 = swift_allocObject(v14, 72LL, 7LL);
      *(_OWORD *)(v30 + 16) = xmmword_10010F110;
      *(void *)(v30 + 56) = &type metadata for UInt64;
      *(void *)(v30 + 64) = &protocol witness table for UInt64;
      *(void *)(v30 + 3sub_100006034(v0 + 2) = a4;
      uint64_t v31 = String.init(format:_:)(0x786C6C257830LL, 0xE600000000000000LL, v30);
      uint64_t v135 = v14;
      uint64_t v32 = a8;
      uint64_t v34 = v33;
      uint64_t v35 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a11 + 8);
      uint64_t v36 = v32;
      v35((__int128 *)v150, a10, a11);
      uint64_t v37 = v151;
      uint64_t v38 = v152;
      sub_100005110(v150, v151);
      sub_10001358C(v37, v38);
      uint64_t v39 = *((void *)&v148 + 1);
      uint64_t v40 = v149;
      sub_100005110(&v147, *((uint64_t *)&v148 + 1));
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8))( &v153,  a2,  a3,  v31,  v34,  v36,  a9,  v39,  v40);
      if (v136)
      {
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v129);
LABEL_5:
        sub_100006034(&v147);
        return sub_100006034(v150);
      }

      uint64_t v123 = v36;
      uint64_t v124 = v31;
      uint64_t v125 = v34;
      uint64_t v53 = a10;
      sub_100006034(&v147);
      sub_100006034(v150);
      uint64_t v54 = sub_10002F8A4((uint64_t)_swiftEmptyArrayStorage);
      if ((a5 & 1) != 0) {
        uint64_t v55 = 32LL;
      }
      else {
        uint64_t v55 = 0LL;
      }
      sub_10001A148(a7, (uint64_t)&v147, &qword_100157FF0);
      uint64_t v137 = v54;
      if (!*((void *)&v148 + 1))
      {
        sub_100012824((uint64_t)&v147, &qword_100157FF0);
        uint64_t v65 = a3;
        uint64_t v66 = v35;
        uint64_t v67 = v125;
        v66(&v147, a10, a11);
LABEL_52:
        uint64_t v90 = *((void *)&v148 + 1);
        uint64_t v91 = v149;
        sub_100005110(&v147, *((uint64_t *)&v148 + 1));
        sub_10001358C(v90, v91);
        uint64_t v92 = v145;
        uint64_t v93 = v146;
        sub_100005110(&v144, v145);
        (*(void (**)(void *__return_ptr, unint64_t *, uint64_t, uint64_t))(v93 + 16))( v150,  &v153,  v92,  v93);
        sub_100006034(&v144);
        sub_100006034(&v147);
        uint64_t v95 = v151;
        uint64_t v96 = v152;
        sub_100005F48((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 16))(v126, v129, v95, v96);
        uint64_t v97 = v151;
        __int128 v98 = v152;
        sub_100005F48((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 40))(v55, v97, v98);
        uint64_t v99 = sub_100005FB4((uint64_t *)&unk_100159E30);
        uint64_t v100 = swift_allocObject(v99, 80LL, 7LL);
        *(_OWORD *)(v100 + 16) = xmmword_100111D70;
        *(void *)(v100 + 3sub_100006034(v0 + 2) = a2;
        *(void *)(v100 + sub_10007CFB4(v0 + 40) = v65;
        *(void *)(v100 + 48) = v124;
        *(void *)(v100 + 56) = v67;
        uint64_t v101 = *(uint64_t (**)(__n128))(*v127 + 144LL);
        uint64_t v102 = swift_bridgeObjectRetain(v65);
        *(void *)(v100 + 64) = v101(v102);
        *(void *)(v100 + 7sub_100006034(v0 + 2) = v103;
        uint64_t v104 = v151;
        uint64_t v105 = v152;
        sub_100005F48((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 64))(v100, v104, v105);
        uint64_t v106 = sub_10008A840(v137);
        swift_bridgeObjectRelease(v137);
        uint64_t v107 = v151;
        uint64_t v108 = v152;
        sub_100005F48((uint64_t)v150, v151);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v108 + 88))(v106, v107, v108);
        uint64_t v109 = v151;
        uint64_t v110 = v152;
        sub_100005F48((uint64_t)v150, v151);
        uint64_t v111 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v110 + 112))(a6, v109, v110);
        uint64_t v112 = ((uint64_t (*)(uint64_t))v101)(v111);
        uint64_t v114 = v113;
        uint64_t v115 = v151;
        uint64_t v116 = v152;
        sub_100005F48((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 136))(v112, v114, v115, v116);
        v66(&v144, a10, a11);
        uint64_t v117 = v145;
        uint64_t v118 = v146;
        sub_100005110(&v144, v145);
        sub_10001358C(v117, v118);
        uint64_t v119 = v142;
        uint64_t v120 = v143;
        sub_100005110(v141, v142);
        (*(void (**)(__int128 *__return_ptr, void *, uint64_t, uint64_t))(v120 + 24))( &v147,  v150,  v119,  v120);
        sub_100006034(v141);
        sub_100006034(&v144);
        uint64_t v121 = *((void *)&v148 + 1);
        uint64_t v122 = v149;
        sub_100005110(&v147, *((uint64_t *)&v148 + 1));
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v122);
        sub_100006034(&v153);
        goto LABEL_5;
      }

      sub_100005158(&v147, (uint64_t)v150);
      uint64_t v56 = v151;
      uint64_t v57 = v152;
      sub_100005110(v150, v151);
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
      LOBYTE(v56) = sub_1000CC2B4(v58);
      swift_bridgeObjectRelease(v58);
      if ((v56 & 1) == 0)
      {
        uint64_t v68 = a11;
        goto LABEL_40;
      }

      uint64_t v59 = v127[2];
      uint64_t v60 = (uint64_t *)sub_10008F580();
      if (*(void *)(v59 + 16))
      {
        uint64_t v61 = *v60;
        uint64_t v62 = v60[1];
        swift_bridgeObjectRetain(v62);
        uint64_t v63 = sub_100006114(v61, v62);
        if ((v64 & 1) != 0)
        {
          sub_100006054(*(void *)(v59 + 56) + 32 * v63, (uint64_t)&v147);
        }

        else
        {
          uint64_t v147 = 0u;
          uint64_t v148 = 0u;
        }

        uint64_t v68 = a11;
        swift_bridgeObjectRelease(v62);
        if (*((void *)&v148 + 1))
        {
          uint64_t v69 = sub_100005FB4(&qword_100158898);
          if ((swift_dynamicCast(&v144, &v147, (char *)&type metadata for Any + 8, v69, 6LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(v137);
            uint64_t v137 = v144;
          }

          goto LABEL_29;
        }
      }

      else
      {
        uint64_t v147 = 0u;
        uint64_t v148 = 0u;
        uint64_t v68 = a11;
      }

      sub_100012824((uint64_t)&v147, &qword_100157FF8);
LABEL_29:
      uint64_t v70 = (uint64_t *)sub_10008F58C();
      if (*(void *)(v59 + 16))
      {
        uint64_t v71 = *v70;
        uint64_t v72 = v70[1];
        swift_bridgeObjectRetain(v72);
        uint64_t v73 = sub_100006114(v71, v72);
        if ((v74 & 1) != 0)
        {
          sub_100006054(*(void *)(v59 + 56) + 32 * v73, (uint64_t)&v147);
        }

        else
        {
          uint64_t v147 = 0u;
          uint64_t v148 = 0u;
        }

        swift_bridgeObjectRelease(v72);
        if (*((void *)&v148 + 1))
        {
          if (swift_dynamicCast( &v144,  &v147,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL)
            && (_BYTE)v144)
          {
            v55 |= 0x40uLL;
          }

          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v147 = 0u;
        uint64_t v148 = 0u;
      }

      sub_100012824((uint64_t)&v147, &qword_100157FF8);
LABEL_40:
      uint64_t v75 = v151;
      uint64_t v76 = v152;
      sub_100005110(v150, v151);
      uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 16))(v75, v76);
      uint64_t v78 = (uint64_t *)sub_100090194();
      if (*(void *)(v77 + 16))
      {
        char v79 = *v78;
        uint64_t v80 = v78[1];
        swift_bridgeObjectRetain(v80);
        uint64_t v81 = sub_100006114(v79, v80);
        uint64_t v65 = a3;
        if ((v82 & 1) != 0)
        {
          sub_100006054(*(void *)(v77 + 56) + 32 * v81, (uint64_t)&v147);
        }

        else
        {
          uint64_t v147 = 0u;
          uint64_t v148 = 0u;
        }

        swift_bridgeObjectRelease(v80);
      }

      else
      {
        uint64_t v147 = 0u;
        uint64_t v148 = 0u;
        uint64_t v65 = a3;
      }

      swift_bridgeObjectRelease(v77);
      if (*((void *)&v148 + 1))
      {
        uint64_t v83 = swift_dynamicCast(&v144, &v147, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
        if ((_DWORD)v83)
        {
          if ((v144 & 1) != 0)
          {
            uint64_t v140 = static os_log_type_t.info.getter(v83);
            uint64_t v84 = swift_allocObject(v135, 112LL, 7LL);
            *(_OWORD *)(v84 + 16) = xmmword_10010F440;
            *(void *)&uint64_t v147 = v127;
            uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v128, v131);
            *(void *)(v84 + 56) = &type metadata for String;
            *(void *)(v84 + 64) = v130;
            *(void *)(v84 + 3sub_100006034(v0 + 2) = v85;
            *(void *)(v84 + sub_10007CFB4(v0 + 40) = v86;
            *(void *)(v84 + 96) = &type metadata for String;
            *(void *)(v84 + 104) = v130;
            *(void *)(v84 + 7sub_100006034(v0 + 2) = v123;
            *(void *)(v84 + 80) = a9;
            swift_bridgeObjectRetain(a9);
            uint64_t v88 = (void *)static OS_os_log.default.getter(v87);
            os_log(_:dso:log:_:_:)( v140,  &_mh_execute_header,  v88,  "Driver extension %{public}s cannot use the system thread group because it is associated with application %{public}s",  115LL,  2LL,  v84);
            uint64_t v89 = v84;
            uint64_t v53 = a10;
            swift_bridgeObjectRelease(v89);
          }
        }
      }

      else
      {
        sub_100012824((uint64_t)&v147, &qword_100157FF8);
      }

      sub_100006034(v150);
      uint64_t v66 = v35;
      uint64_t v67 = v125;
      v66(&v147, v53, v68);
      goto LABEL_52;
    }
  }

  else
  {
    uint64_t v29 = sub_100012824((uint64_t)&v153, &qword_100157C58);
  }

  ((void (*)(unint64_t *__return_ptr, uint64_t))v23)(&v153, v29);
  uint64_t v41 = v155;
  if (!v155)
  {
    sub_100012824((uint64_t)&v153, &qword_100157C58);
LABEL_11:
    swift_bridgeObjectRelease(0LL);
    uint64_t v45 = (void *)0xE300000000000000LL;
    uint64_t v43 = 4079420LL;
    goto LABEL_12;
  }

  uint64_t v42 = v156;
  sub_100005110(&v153, v155);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
  uint64_t v45 = v44;
  sub_100006034(&v153);
  if (!v45) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v153 = 0LL;
  uint64_t v154 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease(v154);
  uint64_t v153 = 0xD000000000000010LL;
  uint64_t v154 = 0x800000010012A7F0LL;
  v46._uint64_t countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  v47._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v47._object = (void *)0x800000010012A990LL;
  String.append(_:)(v47);
  uint64_t v48 = v153;
  uint64_t v49 = v154;
  uint64_t v50 = sub_100012624();
  uint64_t v51 = swift_allocError(&type metadata for KMError, v50, 0LL, 0LL);
  *(void *)uint64_t v52 = v48;
  *(void *)(v52 + 8) = v49;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_OWORD *)(v52 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v52 + 48) = 0u;
  *(void *)(v52 + 64) = 0LL;
  *(_BYTE *)(v52 + 7sub_100006034(v0 + 2) = 4;
  return swift_willThrow(v51);
}

void *DriverKitDaemonXPC.serverName.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.serverName;
}

unint64_t static DriverKitDaemonXPC.serverName.getter()
{
  return 0xD000000000000022LL;
}

void *DriverKitDaemonXPC.NotificationType.approvalsChanged.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.NotificationType.approvalsChanged;
}

unint64_t static DriverKitDaemonXPC.NotificationType.approvalsChanged.getter()
{
  return 0xD00000000000002BLL;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC()
{
  return &type metadata for DriverKitDaemonXPC;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC.NotificationType()
{
  return &type metadata for DriverKitDaemonXPC.NotificationType;
}

uint64_t sub_1000CD0B0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sub_100016CD0((void *)v2, (void *)v3);
  }
}

uint64_t sub_1000CD0DC()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100089A8C(v0, qword_1001718E8);
  sub_100086AD4(v0, (uint64_t)qword_1001718E8);
  return OSSignposter.init()();
}

uint64_t sub_1000CD124()
{
  uint64_t v0 = type metadata accessor for OSSignpostID(0LL);
  sub_100089A8C(v0, qword_100171908);
  sub_100086AD4(v0, (uint64_t)qword_100171908);
  if (qword_1001718E0 != -1) {
    swift_once(&qword_1001718E0, sub_1000CD0DC);
  }
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  uint64_t v2 = sub_100086AD4(v1, (uint64_t)qword_1001718E8);
  uint64_t v3 = OSSignposter.logHandle.getter(v2);
  return OSSignpostID.init(log:)(v3);
}

uint64_t sub_1000CD1B4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

BOOL sub_1000CD1D8(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16LL) == *(void *)(*(void *)a2 + 16LL);
}

Swift::Int sub_1000CD1F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(*(void *)(v1 + 16));
  return Hasher._finalize()();
}

void sub_1000CD238()
{
}

Swift::Int sub_1000CD264(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000CD2A4(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&ObjectType, MetatypeMetadata);
}

uint64_t sub_1000CD2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v13 = (void *)(v10 + 32);
    while (*v13 != a1)
    {
      v13 += 2;
      if (!--v11) {
        goto LABEL_5;
      }
    }

    swift_unknownObjectRetain(a1);
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v47 = 0xD000000000000019LL;
    unint64_t v48 = 0x800000010012AB50LL;
    v30._uint64_t countAndFlagsBits = sub_1000CD2A4(ObjectType);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._uint64_t countAndFlagsBits = 544175136LL;
    v32._object = (void *)0xE400000000000000LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = sub_1000CD2A4(a3);
    uint64_t v34 = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    unint64_t v35 = 0xD000000000000019LL;
    unint64_t v36 = 0x800000010012AB50LL;
    uint64_t v37 = 84LL;
LABEL_14:
    uint64_t v46 = v37;
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v35,  v36,  "driverkitd/StateManagement.swift",  32LL,  2LL,  v46,  0);
      __break(1u);
LABEL_16:
      unint64_t v35 = 0xD00000000000001DLL;
      uint64_t v46 = 88LL;
      uint64_t v38 = "Cannot add self as subscriber";
LABEL_18:
      unint64_t v36 = (unint64_t)(v38 - 32) | 0x8000000000000000LL;
    }
  }

uint64_t sub_1000CD6A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject(&unk_10014E9E0, 24LL, 7LL);
  *(void *)(v4 + 16) = _swiftEmptyArrayStorage;
  uint64_t v5 = (void *)(v4 + 16);
  uint64_t v6 = swift_allocObject(&unk_10014EA08, 24LL, 7LL);
  *(void *)(v6 + 16) = &_swiftEmptySetSingleton;
  uint64_t v7 = swift_allocObject(&unk_10014EA08, 24LL, 7LL);
  *(void *)(v7 + 16) = &_swiftEmptySetSingleton;
  uint64_t v8 = type metadata accessor for StateManagerWrapper();
  uint64_t v9 = swift_allocObject(v8, 32LL, 7LL);
  *(void *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = a1;
  swift_unknownObjectRetain(v2);
  LOBYTE(vsub_100006034(v0 + 2) = sub_1000CD7E4(v9, v6, v7, v4);
  swift_release(v9);
  if ((v2 & 1) != 0)
  {
    swift_beginAccess(v5, v13, 0LL, 0LL);
    unint64_t v10 = swift_bridgeObjectRetain(*v5);
    uint64_t v11 = sub_1000CDC10(v10);
    swift_release(v6);
    swift_release(v7);
  }

  else
  {
    swift_release(v6);
    swift_release(v7);
    uint64_t v11 = 0LL;
  }

  swift_release(v4);
  return v11;
}

uint64_t sub_1000CD7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v36, 0LL, 0LL);
  uint64_t v8 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain(v8);
  BOOL v9 = sub_1000CDB14(a1, v8);
  swift_bridgeObjectRelease(v8);
  if (!v9)
  {
    swift_beginAccess(a3 + 16, v35, 0LL, 0LL);
    uint64_t v10 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain(v10);
    BOOL v11 = sub_1000CDB14(a1, v10);
    swift_bridgeObjectRelease(v10);
    if (v11) {
      return 0LL;
    }
    uint64_t v31 = v7;
    swift_beginAccess(a3 + 16, v33, 33LL, 0LL);
    swift_retain(a1);
    sub_1000CF918(&v34, a1);
    swift_endAccess(v33);
    swift_release(v34);
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 16));
    v33[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
    sub_1000D0900();
    uint64_t v15 = v33[0];
    uint64_t v16 = *(void *)(v33[0] + 16LL);
    if (v16)
    {
      uint64_t v17 = type metadata accessor for StateManagerWrapper();
      uint64_t v18 = swift_allocObject(v17, 32LL, 7LL);
      __int128 v19 = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v18 + 16) = v19;
      uint64_t v20 = v19;
      swift_unknownObjectRetain_n(v19, 2LL);
      unint64_t v21 = sub_1000CD7E4(v18, a2, a3, a4);
      swift_release(v18);
      swift_unknownObjectRelease(v20);
      if ((v21 & 1) == 0)
      {
LABEL_10:
        swift_release(v15);
        return 0LL;
      }

      uint64_t v22 = 0LL;
      uint64_t v23 = v16 - 1;
      while (v23 != v22)
      {
        unint64_t v24 = v22 + 1;
        if ((unint64_t)(v22 + 1) >= *(void *)(v15 + 16))
        {
          __break(1u);
          goto LABEL_16;
        }

        unint64_t v21 = swift_allocObject(v17, 32LL, 7LL);
        __int128 v25 = *(_OWORD *)(v15 + 16 * v22 + 48);
        *(_OWORD *)(v21 + 16) = v25;
        uint64_t v26 = v25;
        swift_unknownObjectRetain_n(v25, 2LL);
        char v27 = sub_1000CD7E4(v21, a2, a3, a4);
        swift_release(v21);
        swift_unknownObjectRelease(v26);
        ++v22;
        if ((v27 & 1) == 0) {
          goto LABEL_10;
        }
      }
    }

    swift_release(v15);
    swift_beginAccess(a3 + 16, v33, 33LL, 0LL);
    unint64_t v28 = sub_1000CFB5C(a1);
    swift_endAccess(v33);
    swift_release(v28);
    swift_beginAccess(v31, v33, 33LL, 0LL);
    swift_retain(a1);
    sub_1000CF918(&v34, a1);
    swift_endAccess(v33);
    swift_release(v34);
    swift_beginAccess(a4 + 16, v33, 33LL, 0LL);
    uint64_t v29 = swift_retain(a1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    unint64_t v21 = *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v24 = *(void *)((*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v21 >= v24 >> 1) {
LABEL_16:
    }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v21 + 1, 1LL);
    uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, a1);
    specialized Array._endMutation()(v30);
    swift_endAccess(v33);
  }

  return 1LL;
}

BOOL sub_1000CDB14(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v5 = swift_retain(a1);
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    return v6 & 1;
  }

  else if (*(void *)(a2 + 16) {
         && (Hasher.init(_seed:)(v14, *(void *)(a2 + 40)),
  }
             Swift::UInt v8 = *(void *)(a1 + 16),
             Hasher._combine(_:)(v8),
             Swift::Int v9 = Hasher._finalize()(),
             uint64_t v10 = -1LL << *(_BYTE *)(a2 + 32),
             unint64_t v11 = v9 & ~v10,
             ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    do
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a2 + 48) + 8 * v11) + 16LL);
      BOOL result = v13 == v8;
      if (v13 == v8) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1000CDC10(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000LL) != 0 || (a1 & 0x4000000000000000LL) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRetain(a1);
  uint64_t v19 = v1 & 0xFFFFFFFFFFFFFF8LL;
LABEL_4:
  if ((v2 & 0x4000000000000000LL) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }

  while (1)
  {
    uint64_t v17 = swift_retain(v2);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    uint64_t v18 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v18 >> 1;
LABEL_6:
    unint64_t v5 = 0LL;
    while (1)
    {
      unint64_t v8 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v9 = v19;
        if ((v19 & 0xC000000000000001LL) != 0)
        {
          uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v19);
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v19);
        }

        else
        {
          if ((v5 & 0x8000000000000000LL) != 0) {
            goto LABEL_33;
          }
          unint64_t v10 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          if (v5 >= v10) {
            goto LABEL_34;
          }
          uint64_t v11 = *(void *)(v19 + 8 * v5 + 32);
          swift_retain(v11);
          if ((v1 & 0x8000000000000000LL) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v10) {
            goto LABEL_37;
          }
          uint64_t v12 = *(void *)(v19 + 32 + 8 * v1);
          swift_retain(v12);
        }

        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000LL) != 0)
        {
          uint64_t v9 = sub_100059C38(v19);
          uint64_t v19 = v9;
        }

        uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFF8LL) + 8 * v5;
        uint64_t v14 = swift_release(*(void *)(v13 + 32));
        *(void *)(v13 + 3sub_100006034(v0 + 2) = v12;
        specialized Array._endMutation()(v14);
        uint64_t v15 = v19;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000LL) != 0)
        {
          uint64_t v15 = sub_100059C38(v19);
          uint64_t v19 = v15;
        }

        if ((v1 & 0x8000000000000000LL) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8LL) + 8 * v1;
        uint64_t v7 = swift_release(*(void *)(v6 + 32));
        *(void *)(v6 + 3sub_100006034(v0 + 2) = v11;
        specialized Array._endMutation()(v7);
      }

      unint64_t v5 = v8;
      if (v4 == v8) {
        return v19;
      }
    }

    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_1000D0A80(v1);
    uint64_t v19 = v2;
    if ((v2 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
  }

uint64_t sub_1000CDE2C(uint64_t a1, char *a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v241 = a3;
  uint64_t v216 = a2;
  uint64_t v234 = a1;
  uint64_t v204 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v210 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  uint64_t v209 = (char *)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v230 = type metadata accessor for Logger(0LL);
  uint64_t v242 = *(void *)(v230 - 8);
  uint64_t v7 = __chkstk_darwin(v230);
  uint64_t v211 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v214 = (uint64_t *)((char *)&v202 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v219 = (char *)&v202 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v221 = (char *)&v202 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v225 = (char *)&v202 - v16;
  __chkstk_darwin(v15);
  uint64_t v236 = (char *)&v202 - v17;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v239 = *(void *)(v18 - 8);
  uint64_t v240 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v202 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v213 = type metadata accessor for OSSignpostID(0LL);
  unint64_t v21 = *(uint64_t **)(v213 - 8);
  uint64_t v22 = __chkstk_darwin(v213);
  uint64_t v208 = (char *)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v212 = (char *)&v202 - v25;
  __chkstk_darwin(v24);
  char v27 = (char *)&v202 - v26;
  uint64_t v28 = type metadata accessor for OSSignposter(0LL);
  unint64_t v244 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  int64_t v30 = (int64_t)&v202 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (uint64_t *)((char *)&v202 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v35 = *(uint64_t (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(a4 + 8);
  os_log_t v243 = v4;
  uint64_t v237 = a4;
  *uint64_t v34 = v35(v241, a4);
  (*(void (**)(void *, void, uint64_t))(v32 + 104))(v34, enum case for DispatchPredicate.onQueue(_:), v31);
  char v36 = _dispatchPreconditionTest(_:)(v34);
  (*(void (**)(void *, uint64_t))(v32 + 8))(v34, v31);
  if ((v36 & 1) == 0) {
    goto LABEL_96;
  }
  if (qword_1001718E0 != -1) {
LABEL_97:
  }
    swift_once(&qword_1001718E0, sub_1000CD0DC);
  uint64_t v37 = sub_100086AD4(v28, (uint64_t)qword_1001718E8);
  uint64_t v38 = *(void (**)(int64_t))(v244 + 16);
  uint64_t v206 = v37;
  v38(v30);
  uint64_t v39 = v213;
  if (qword_100171900 != -1) {
    swift_once(&qword_100171900, sub_1000CD124);
  }
  uint64_t v40 = sub_100086AD4(v39, (uint64_t)qword_100171908);
  uint64_t v41 = (uint64_t (*)(char *, uint64_t, uint64_t))v21[2];
  uint64_t v42 = v41(v27, v40, v39);
  Swift::String v43 = (os_log_s *)OSSignposter.logHandle.getter(v42);
  os_signpost_type_t v44 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    Swift::String v45 = v212;
    v41(v212, (uint64_t)v27, v39);
    uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v46 = 0;
    os_signpost_id_t v47 = OSSignpostID.rawValue.getter(v46);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, v44, v47, "State refresh", "", v46, 2u);
    unint64_t v48 = v46;
    uint64_t v39 = v213;
    swift_slowDealloc(v48, -1LL, -1LL);

    uint64_t v49 = v45;
    ((void (*)(char *, uint64_t))v21[1])(v45, v39);
  }

  else
  {

    uint64_t v49 = v212;
  }

  uint64_t v50 = v230;
  uint64_t v203 = (void (*)(char *, char *, uint64_t))v41;
  v41(v49, (uint64_t)v27, v39);
  uint64_t v51 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  uint64_t v207 = OSSignpostIntervalState.init(id:isOpen:)(v49, 1LL);
  uint64_t v52 = (void (*)(char *, uint64_t))v21[1];
  v52(v27, v39);
  uint64_t v53 = (*(uint64_t (**)(int64_t, uint64_t))(v244 + 8))(v30, v28);
  uint64_t v54 = UUID.init()(v53);
  uint64_t v233 = UUID.uuidString.getter(v54);
  char v27 = v55;
  (*(void (**)(char *, uint64_t))(v239 + 8))(v20, v240);
  int64_t v30 = v237;
  uint64_t result = sub_1000CD6A0(v237);
  uint64_t v224 = result;
  if (result)
  {
    uint64_t v249 = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v57 = sub_1000D3158();
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v242 + 16);
    uint64_t v28 = (uint64_t)v236;
    uint64_t v240 = v57;
    uint64_t v241 = v58;
    ((void (*)(char *))v58)(v236);
    swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v20 = v216;
    uint64_t v59 = swift_bridgeObjectRetain_n(v216, 2LL);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.default.getter(v60);
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v238 = v27;
    uint64_t v205 = v52;
    if (v62)
    {
      uint64_t v63 = swift_slowAlloc(22LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      uint64_t v246 = v64;
      *(_DWORD *)uint64_t v63 = 136315394;
      swift_bridgeObjectRetain(v238);
      uint64_t v248 = sub_1000058CC(v233, (unint64_t)v238, &v246);
      unint64_t v21 = &v249;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease_n(v238, 3LL);
      *(_WORD *)(v63 + 1sub_100006034(v0 + 2) = 2080;
      swift_bridgeObjectRetain(v20);
      uint64_t v248 = sub_1000058CC(v234, (unint64_t)v20, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "State refresh (id: %s, reason: %s): starting",  (uint8_t *)v63,  0x16u);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v65 = v64;
      char v27 = v238;
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v66 = v63;
      int64_t v30 = v237;
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
      swift_bridgeObjectRelease_n(v27, 2LL);
    }

    uint64_t v239 = *(void *)(v242 + 8);
    ((void (*)(uint64_t, uint64_t))v239)(v28, v50);
    uint64_t v218 = type metadata accessor for StateManagerWrapper();
    uint64_t v67 = swift_allocObject(v218, 32LL, 7LL);
    os_log_t v68 = v243;
    *(void *)(v67 + 16) = v243;
    *(void *)(v67 + 24) = v30;
    swift_unknownObjectRetain(v68);
    sub_1000CF918(&v246, v67);
    swift_release(v246);
    uint64_t v70 = v224 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v228 = v224 & 0xFFFFFFFFFFFFFF8LL;
    if ((unint64_t)v224 >> 62)
    {
      uint64_t v177 = v224;
      if (v224 >= 0) {
        uint64_t v178 = v224 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v178 = v224;
      }
      swift_bridgeObjectRetain(v224);
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v178);
      swift_bridgeObjectRelease(v177);
      uint64_t v70 = v228;
      if (v71) {
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v71 = *(void *)((v224 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      if (v71)
      {
LABEL_14:
        unint64_t v227 = v224 & 0xC000000000000001LL;
        uint64_t v222 = v224 + 32;
        uint64_t v217 = &v247;
        *(void *)&__int128 v69 = 136315650LL;
        __int128 v220 = v69;
        uint64_t v215 = (char *)&type metadata for Any + 8;
        *(void *)&__int128 v69 = 136315906LL;
        __int128 v229 = v69;
        uint64_t v226 = v71;
        unint64_t v72 = 0LL;
        while (1)
        {
          if (v227)
          {
            int64_t v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v224);
            BOOL v73 = __OFADD__(v72, 1LL);
            uint64_t v74 = (char *)(v72 + 1);
            if (v73) {
              goto LABEL_94;
            }
          }

          else
          {
            if (v72 >= *(void *)(v70 + 16)) {
              goto LABEL_95;
            }
            int64_t v30 = *(void *)(v222 + 8 * v72);
            swift_retain(v30);
            BOOL v73 = __OFADD__(v72, 1LL);
            uint64_t v74 = (char *)(v72 + 1);
            if (v73) {
              goto LABEL_94;
            }
          }

          uint64_t v236 = v74;
          uint64_t v75 = v249;
          if ((v249 & 0xC000000000000001LL) == 0) {
            break;
          }
          if (v249 < 0) {
            uint64_t v76 = v249;
          }
          else {
            uint64_t v76 = v249 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v249);
          int64_t v77 = v30;
          char v78 = __CocoaSet.contains(_:)(v30, v76);
          swift_bridgeObjectRelease(v75);
          char v79 = v225;
          unint64_t v72 = (unint64_t)v236;
          if ((v78 & 1) != 0) {
            goto LABEL_28;
          }
LABEL_15:
          swift_release(v77);
LABEL_16:
          uint64_t v70 = v228;
          if (v72 == v226) {
            goto LABEL_102;
          }
        }

        if (*(void *)(v249 + 16))
        {
          int64_t v77 = v30;
          Hasher.init(_seed:)(&v246, *(void *)(v249 + 40));
          int64_t v30 = *(void *)(v30 + 16);
          Hasher._combine(_:)(v30);
          Swift::Int v92 = Hasher._finalize()();
          uint64_t v93 = -1LL << *(_BYTE *)(v75 + 32);
          unint64_t v94 = v92 & ~v93;
          uint64_t v95 = v75 + 56;
          if (((*(void *)(v75 + 56 + ((v94 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v94) & 1) != 0)
          {
            uint64_t v96 = ~v93;
            uint64_t v97 = *(void *)(v75 + 48);
            char v79 = v225;
            unint64_t v72 = (unint64_t)v236;
            while (*(void *)(*(void *)(v97 + 8 * v94) + 16LL) != v30)
            {
              unint64_t v94 = (v94 + 1) & v96;
              if (((*(void *)(v95 + ((v94 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v94) & 1) == 0) {
                goto LABEL_15;
              }
            }

LABEL_102:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v249);
    uint64_t v179 = v211;
    v241(v211, v240, v50);
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_bridgeObjectRetain(v27);
    uint64_t v181 = (os_log_s *)Logger.logObject.getter(v180);
    os_log_type_t v182 = static os_log_type_t.default.getter(v181);
    if (os_log_type_enabled(v181, v182))
    {
      uint64_t v183 = swift_slowAlloc(22LL, -1LL);
      uint64_t v184 = swift_slowAlloc(64LL, -1LL);
      uint64_t v246 = v184;
      *(_DWORD *)uint64_t v183 = 136315394;
      swift_bridgeObjectRetain(v27);
      uint64_t v248 = sub_1000058CC(v233, (unint64_t)v27, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v183 + 4, v183 + 12);
      swift_bridgeObjectRelease_n(v27, 3LL);
      *(_WORD *)(v183 + 1sub_100006034(v0 + 2) = 2080;
      swift_bridgeObjectRetain(v20);
      uint64_t v248 = sub_1000058CC(v234, (unint64_t)v20, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v183 + 14, v183 + 22);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v181,  v182,  "State refresh (id: %s, reason: %s): completed",  (uint8_t *)v183,  0x16u);
      swift_arrayDestroy(v184, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v184, -1LL, -1LL);
      swift_slowDealloc(v183, -1LL, -1LL);

      uint64_t v185 = v211;
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
      swift_bridgeObjectRelease_n(v27, 2LL);
      uint64_t v185 = v179;
    }

    uint64_t v186 = ((uint64_t (*)(char *, uint64_t))v239)(v185, v50);
    uint64_t v187 = v210;
    uint64_t v188 = v209;
    uint64_t v189 = v208;
    uint64_t v190 = (os_log_s *)OSSignposter.logHandle.getter(v186);
    uint64_t v191 = v207;
    uint64_t v192 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v193 = static os_signpost_type_t.end.getter(v192);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v194 = swift_retain(v191);
      checkForErrorAndConsumeState(state:)(v194);
      swift_release(v191);
      uint64_t v195 = v204;
      if ((*(unsigned int (**)(char *, uint64_t))(v187 + 88))(v188, v204) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v196 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v187 + 8))(v188, v195);
        uint64_t v196 = "";
      }

      uint64_t v197 = v212;
      uint64_t v198 = v213;
      v203(v212, v189, v213);
      uint64_t v199 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v199 = 0;
      os_signpost_id_t v200 = OSSignpostID.rawValue.getter(v199);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v190, v193, v200, "State refresh", v196, v199, 2u);
      swift_slowDealloc(v199, -1LL, -1LL);

      uint64_t v201 = (uint64_t (*)(char *, uint64_t))v205;
      v205(v189, v198);
      swift_release(v191);
      return v201(v197, v198);
    }

    else
    {

      v205(v189, v213);
      return swift_release(v191);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_1000CF80C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_10015B9B8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000D12D4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000CF918(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    uint64_t v8 = __CocoaSet.member(for:)(a2, v7);
    swift_release(a2);
    if (v8)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v25 = v8;
      uint64_t v9 = type metadata accessor for StateManagerWrapper();
      swift_unknownObjectRetain(v8);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
      *a1 = v24[0];
      swift_unknownObjectRelease(v8);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v19 = sub_1000D0660(v7, result + 1);
    v24[0] = v19;
    unint64_t v20 = *(void *)(v19 + 16);
    if (*(void *)(v19 + 24) <= v20)
    {
      uint64_t v23 = v20 + 1;
      swift_retain(a2);
      sub_1000D0210(v23);
      uint64_t v21 = v24[0];
    }

    else
    {
      uint64_t v21 = v19;
      swift_retain(a2);
    }

    sub_1000D0860(a2, v21);
    uint64_t v18 = *v3;
    uint64_t *v3 = v21;
    goto LABEL_18;
  }

  Hasher.init(_seed:)(v24, *(void *)(v6 + 40));
  Swift::UInt v11 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v11);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0)
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v17 = swift_retain(a2);
    sub_1000D0B74(v17, v14, isUniquelyReferenced_nonNull_native);
    uint64_t v18 = *v2;
    *uint64_t v2 = v24[0];
LABEL_18:
    swift_bridgeObjectRelease(v18);
    *a1 = a2;
    return 1LL;
  }

  uint64_t v15 = ~v13;
  while (*(void *)(*(void *)(*(void *)(v6 + 48) + 8 * v14) + 16LL) != v11)
  {
    unint64_t v14 = (v14 + 1) & v15;
    if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release(a2);
  uint64_t v22 = *(void *)(*(void *)(*v2 + 48) + 8 * v14);
  *a1 = v22;
  swift_retain(v22);
  return 0LL;
}

unint64_t sub_1000CFB5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v2;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v6 = swift_retain(a1);
    char v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      unint64_t v8 = sub_1000CFCDC(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  Hasher.init(_seed:)(v18, *(void *)(v4 + 40));
  Swift::UInt v9 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v9);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    return 0LL;
  }
  uint64_t v13 = ~v11;
  while (*(void *)(*(void *)(*(void *)(v4 + 48) + 8 * v12) + 16LL) != v9)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
      return 0LL;
    }
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v16 = *v2;
  v18[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CFDE8();
    uint64_t v16 = v18[0];
  }

  unint64_t v8 = *(void *)(*(void *)(v16 + 48) + 8 * v12);
  sub_1000D04B8(v12);
  uint64_t v17 = *v2;
  *uint64_t v2 = v18[0];
  swift_bridgeObjectRelease(v17);
  return v8;
}

unint64_t sub_1000CFCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1000D0660(v7, v6);
  Swift::Int v18 = v8;
  Hasher.init(_seed:)(v17, *(void *)(v8 + 40));
  Swift::UInt v9 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v9);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t result = v10 & ~v11;
  Swift::Int v13 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v14 = ~v11;
    uint64_t v15 = *(void *)(v8 + 48);
    while (1)
    {
      uint64_t v16 = *(void *)(v15 + 8 * result);
      if (*(void *)(v16 + 16) == v9) {
        break;
      }
      unint64_t result = (result + 1) & v14;
      if (((*(void *)(v13 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) == 0)
      {
        __break(1u);
        break;
      }
    }

    unint64_t result = sub_1000D04B8(result);
    if (v9 == *(void *)(v16 + 16))
    {
      Swift::Int *v3 = v18;
      return v16;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1000CFDE8()
{
  unint64_t v1 = v0;
  sub_100005FB4(&qword_10015B9B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *unint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1000CFF90(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_10015B9B0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1000D0210(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_10015B9B0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    Swift::Int v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *Swift::Int v8 = -1LL << v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

unint64_t sub_1000D04B8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18, *(void *)(v3 + 40));
        Hasher._combine(_:)(*(void *)(v10 + 16));
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          Swift::Int v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *Swift::Int v13 = *v14;
            int64_t v2 = v6;
          }
        }

Swift::Int sub_1000D0660(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005FB4(&qword_10015B9B0);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for StateManagerWrapper();
      do
      {
        v21[0] = v7;
        swift_dynamicCast(&v22, v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_1000D0210(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Hasher.init(_seed:)(v21, *(void *)(v4 + 40));
        Hasher._combine(_:)(*(void *)(v9 + 16));
        Swift::Int result = Hasher._finalize()();
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()();
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

unint64_t sub_1000D0860(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1000D0900()
{
  unint64_t v1 = *(void **)v0;
  unint64_t v2 = *(void *)(*(void *)v0 + 16LL);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v4 = 0LL;
    while (1)
    {
      unint64_t v15 = 0LL;
      swift_stdlib_random(&v15, 8LL);
      uint64_t v6 = (v15 * (unsigned __int128)v2) >> 64;
      if (v2 > v15 * v2)
      {
        unint64_t v7 = -(uint64_t)v2 % v2;
        if (v7 > v15 * v2)
        {
          do
          {
            unint64_t v15 = 0LL;
            swift_stdlib_random(&v15, 8LL);
          }

          while (v7 > v15 * v2);
          uint64_t v6 = (v15 * (unsigned __int128)v2) >> 64;
        }
      }

      unint64_t v8 = v4 + v6;
      if (__OFADD__(v4, v6)) {
        break;
      }
      if (v4 != v8)
      {
        unint64_t v9 = v1[2];
        if (v4 >= v9) {
          goto LABEL_19;
        }
        if (v8 >= v9) {
          goto LABEL_20;
        }
        __int128 v13 = *(_OWORD *)&v1[2 * v4 + 4];
        __int128 v14 = *(_OWORD *)&v1[2 * v8 + 4];
        swift_unknownObjectRetain(v1[2 * v4 + 4]);
        swift_unknownObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0) {
          unint64_t v1 = (void *)sub_1000D12C0(v1);
        }
        if (v4 >= v1[2]) {
          goto LABEL_21;
        }
        uint64_t v10 = v1 + 4;
        uint64_t v11 = v1[2 * v4 + 4];
        *(_OWORD *)&v1[2 * v4 + 4] = v14;
        swift_unknownObjectRelease(v11);
        if (v8 >= v1[2]) {
          goto LABEL_22;
        }
        uint64_t v12 = v10[2 * v8];
        *(_OWORD *)&v10[2 * v8] = v13;
        swift_unknownObjectRelease(v12);
        *(void *)uint64_t v0 = v1;
      }

      --v2;
      if (v4++ == v3) {
        return;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

void *sub_1000D0A80(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      unint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100005FB4(&qword_10015BB40);
      unint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = sub_1000D10B8((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

uint64_t sub_1000D0B74(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000D0210(v8);
  }

  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000CFDE8();
      goto LABEL_12;
    }

    sub_1000CFF90(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v17, *(void *)(*v3 + 40));
  Swift::UInt v10 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v10);
  unint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    unint64_t result = type metadata accessor for StateManagerWrapper();
    while (*(void *)(*(void *)(*(void *)(v9 + 48) + 8 * a2) + 16LL) != v10)
    {
      a2 = (a2 + 1) & v12;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }

    goto LABEL_15;
  }

uint64_t sub_1000D0CC0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015B9B8);
    uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100005FB4(&qword_10015B9C0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

void (*sub_1000D0E48(uint64_t **a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000D0E9C(v6, a2, a3);
  return sub_10000C7E8;
}

uint64_t *sub_1000D0E9C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
LABEL_5:
    uint64_t *v3 = v4;
    return (uint64_t *)sub_1000D0F08;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D0F08(void *a1)
{
  return swift_release(*a1);
}

uint64_t type metadata accessor for StateManagerWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitdP33_622D3D8EFA33E5821DB6E6A2F22719EA19StateManagerWrapper);
}

uint64_t *assignWithCopy for StateUpdateResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for StateUpdateResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateUpdateResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for StateUpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StateUpdateResult()
{
  return &type metadata for StateUpdateResult;
}

unint64_t sub_1000D1050()
{
  unint64_t result = qword_1001719A0[0];
  if (!qword_1001719A0[0])
  {
    uint64_t v1 = type metadata accessor for StateManagerWrapper();
    unint64_t result = swift_getWitnessTable(&unk_10011A2A4, v1);
    atomic_store(result, qword_1001719A0);
  }

  return result;
}

uint64_t sub_1000D1094()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D10B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012B78( (unint64_t *)&unk_10015B9D0,  &qword_10015B9C8,  (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100005FB4(&qword_10015B9C8);
          uint64_t v13 = sub_1000D0E48(v18, i, a3);
          uint64_t v15 = *v14;
          swift_retain(*v14);
          ((void (*)(uint64_t **, void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000D12C0(void *a1)
{
  return sub_1000D0CC0(0, a1[2], 0, a1);
}

uint64_t sub_1000D12D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100005FB4(&qword_10015B9C0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D13E0(uint64_t a1)
{
  return sub_1000D13EC(a1, (uint64_t (*)(void))&mach_error_string);
}

uint64_t sub_1000D13EC(uint64_t a1, uint64_t (*a2)(void))
{
  if (a2()) {
    return String.init(cString:)();
  }
  else {
    return 0x6E776F6E6B6E7528LL;
  }
}

uint64_t sub_1000D1428(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  sub_10001226C(a1, a2);
  return v5;
}

uint64_t sub_1000D1474(uint64_t a1, unint64_t a2)
{
  return sub_1000D148C(a1, a2, 32LL, COERCE_DOUBLE(0x2000000000LL));
}

uint64_t sub_1000D148C(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  double v10 = a4;
  uint64_t v11 = __DataStorage.init(length:)(a3);
  sub_1000D8190((int *)&v10, 0);
  v11 |= 0x4000000000000000uLL;
  sub_1000125E0(a1, a2);
  sub_1000D9AE0((uint64_t)&v10);
  sub_10001226C(a1, a2);
  return *(void *)&v10;
}

void sub_1000D1550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_1000D15B8()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_1000D17C0((uint64_t)&v5, v2, v3);
  if (v0)
  {
    sub_10001226C(v2, v3);
    __break(1u);
    JUMPOUT(0x1000D1790LL);
  }

  uint64_t result = sub_10001226C(v2, v3);
  *uint64_t v1 = v11;
  return result;
}

void sub_1000D17C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }

uint64_t sub_1000D17F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, uint64_t))
{
  uint64_t result = a5(a1, BYTE6(a3), a4);
  *uint64_t v5 = result;
  return result;
}

id sub_1000D1860()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [v0 UTF8String];
  id v2 = v0;
  return v1;
}

uint64_t sub_1000D189C(Swift::Int count, uint64_t a2, void *a3)
{
  v6._uint64_t countAndFlagsBits = 9LL;
  v6._object = (void *)0xE100000000000000LL;
  Swift::String v7 = String.init(repeating:count:)(v6, count);
  uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  uint64_t v18 = a2;
  BOOL v19 = a3;
  v17[0] = 10LL;
  v17[1] = 0xE100000000000000LL;
  v16[0] = 10LL;
  v16[1] = 0xE100000000000000LL;
  String.append(_:)(v7);
  unint64_t v10 = sub_10002657C();
  uint64_t v11 = ((uint64_t (*)(void *, void *, void, void, void, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))( v17,  v16,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v10,  v10,  v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(0xE100000000000000LL);
  uint64_t v18 = countAndFlagsBits;
  BOOL v19 = object;
  swift_bridgeObjectRetain(object);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v13);
  return v18;
}

uint64_t sub_1000D1988(uint64_t a1, uint64_t a2)
{
  return sub_1000D19A0(a1, a2, 32LL, COERCE_DOUBLE(0x2000000000LL));
}

uint64_t sub_1000D19A0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v10);
  uint64_t v13 = String.data(using:allowLossyConversion:)(v12, 0LL, a1, a2);
  unint64_t v15 = v14;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v15 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    uint64_t v18 = __DataStorage.init(length:)(a3);
    double v20 = a4;
    uint64_t v21 = v18;
    sub_1000D8190((int *)&v20, 0);
    v21 |= 0x4000000000000000uLL;
    sub_1000125E0(v13, v15);
    sub_1000D9AE0((uint64_t)&v20);
    sub_10002193C(v13, v15);
    sub_10002193C(v13, v15);
    return *(void *)&v20;
  }

  return result;
}

uint64_t sub_1000D1AF4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 == 47 && a2 == 0xE100000000000000LL) {
    goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 47LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = sub_1000D1C2C(v3, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (!v6) {
    goto LABEL_10;
  }
  if (v4 != 47 || v6 != 0xE100000000000000LL)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 47LL, 0xE100000000000000LL, 0LL);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    swift_bridgeObjectRetain(a2);
    return v3;
  }

  swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_9:
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = sub_1000D9EBC(1LL, v3, a2);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(a2);
  uint64_t v3 = static String._fromSubstring(_:)(v8, v10, v12, v14);
  swift_bridgeObjectRelease(v14);
  return v3;
}

uint64_t sub_1000D1C2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  uint64_t v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t sub_1000D1CA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000D1DC4(a1, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (!v6) {
    goto LABEL_7;
  }
  if (v4 != 47 || v6 != 0xE100000000000000LL)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 47LL, 0xE100000000000000LL, 0LL);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) != 0) {
      goto LABEL_6;
    }
LABEL_7:
    swift_bridgeObjectRetain(a2);
    return a1;
  }

  swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_6:
  unint64_t v8 = String.index(_:offsetBy:)(15LL, 1LL, a1, a2);
  swift_bridgeObjectRetain(a2);
  unint64_t v9 = sub_1000D1E04(v8, a1, a2);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(a2);
  a1 = static String._fromSubstring(_:)(v9, v11, v13, v15);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1000D1DC4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter(15LL, a1, a2);
  }
  else {
    return 0LL;
  }
}

unint64_t sub_1000D1E04(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D1E50(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a5;
  v6[3] = a2;
  return sub_1000D1F88(a1 & 1, a3, (uint64_t)sub_1000D9F74, (uint64_t)v6, a4);
}

uint64_t sub_1000D1E90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(class metadata base offset for KeyPath + *a3 + 8LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v18 - v13;
  swift_getAtKeyPath(v12, v15);
  swift_getAtKeyPath(a2, a3);
  LOBYTE(a4) = dispatch thunk of static Comparable.< infix(_:_:)(v14, v11, v7, a4);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v14, v7);
  return a4 & 1;
}

uint64_t sub_1000D1F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((v10 & 1) != 0)
  {
    __chkstk_darwin(v10);
    *(&v21 - 4) = v8;
    *(&v21 - 3) = v18;
    *(&v21 - sub_100006034(v0 + 2) = v19;
    uint64_t v15 = sub_1000D20AC((uint64_t)sub_1000D9F7C, (uint64_t)(&v21 - 6), v5, a2, v8);
    if ((v20 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v15 = sub_1000D20AC(v11, v12, v5, a2, v8);
    if ((v16 & 1) != 0)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
      return Array.append(_:)(v14, a5);
    }
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
  return Array.insert(_:at:)(v14, v15, a5);
}

uint64_t sub_1000D20AC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a3;
  v8[2] = a5;
  v8[3] = a1;
  v8[4] = a2;
  void v8[5] = a4;
  uint64_t v5 = type metadata accessor for Array(0LL, a5);
  swift_bridgeObjectRetain(v9);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  Collection.firstIndex(where:)(&v10, sub_1000DB1E4, v8, v5, WitnessTable);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_1000D2140( void *a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v45 = a2;
  uint64_t v46 = a3;
  uint64_t v50 = a1;
  uint64_t v7 = *(void *)(*a1 + class metadata base offset for KeyPath + 8LL);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  os_signpost_type_t v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v14 = *v13;
  uint64_t v53 = *(void *)(*v13 - 8);
  uint64_t v15 = __chkstk_darwin(v10);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v42 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v7, &type metadata for Int, 0LL, 0LL);
  uint64_t v21 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  uint64_t v22 = Dictionary.init(dictionaryLiteral:)(v21, v7, &type metadata for Int, a5);
  uint64_t v57 = v22;
  uint64_t v23 = static Array._allocateUninitialized(_:)(0LL, v14);
  uint64_t v56 = v23;
  uint64_t v51 = a4;
  uint64_t result = Array.endIndex.getter(a4, v14);
  uint64_t v52 = result;
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    if (v52)
    {
      uint64_t v25 = 0LL;
      os_signpost_id_t v47 = v19;
      uint64_t v48 = a5;
      Swift::String v43 = v17;
      do
      {
        Array.subscript.getter(v25, v51, v14);
        swift_getAtKeyPath(v19, v50);
        Dictionary.subscript.getter(&v54, v12, v57, v7, &type metadata for Int, a5);
        if ((v55 & 1) != 0)
        {
          uint64_t v26 = v49;
          uint64_t v27 = v44;
          (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v44, v12, v7);
          uint64_t v28 = v56;
          uint64_t v29 = swift_bridgeObjectRetain(v56);
          uint64_t v30 = Array.endIndex.getter(v29, v14);
          swift_bridgeObjectRelease(v28);
          unint64_t v54 = v30;
          char v55 = 0;
          uint64_t v31 = type metadata accessor for Dictionary(0LL, v7, &type metadata for Int, a5);
          uint64_t v32 = v27;
          uint64_t v33 = v53;
          uint64_t v17 = v43;
          Dictionary.subscript.setter(&v54, v32, v31);
          (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v17, v47, v14);
          uint64_t v34 = type metadata accessor for Array(0LL, v14);
          Array.append(_:)(v17, v34);
          unint64_t v35 = *(void (**)(char *, uint64_t))(v26 + 8);
          uint64_t v19 = v47;
          v35(v12, v7);
          char v36 = *(void (**)(char *, uint64_t))(v33 + 8);
        }

        else
        {
          unint64_t v37 = v54;
          Array.subscript.getter(v54, v56, v14);
          char v38 = v45(v19, v17);
          char v36 = *(void (**)(char *, uint64_t))(v53 + 8);
          v36(v17, v14);
          if ((v38 & 1) != 0)
          {
            type metadata accessor for Array(0LL, v14);
            Array._makeMutableAndUnique()();
            uint64_t v39 = v56;
            sub_1000D8488(v37, v56, v14);
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(v14, v14);
            uint64_t v41 = v39 & 0xFFFFFFFFFFFFFF8LL;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v41 = v39;
            }
            (*(void (**)(unint64_t, char *, uint64_t))(v53 + 24))( v41 + ((*(unsigned __int8 *)(v53 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
            + *(void *)(v53 + 72) * v37,
              v19,
              v14);
          }

          (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v7);
        }

        ++v25;
        v36(v19, v14);
        a5 = v48;
      }

      while (v52 != v25);
      uint64_t v23 = v56;
      uint64_t v22 = v57;
    }

    swift_bridgeObjectRelease(v22);
    return v23;
  }

  return result;
}

uint64_t sub_1000D24DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_100017790((_OWORD *)a1, v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v14 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_1000D892C(v16, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v6 = *v2;
    *uint64_t v2 = v14;
    return swift_bridgeObjectRelease(v6);
  }

  else
  {
    sub_100012824(a1, &qword_100157FF8);
    unint64_t v8 = sub_100099A50(a2);
    if ((v9 & 1) != 0)
    {
      unint64_t v10 = v8;
      char v11 = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v12 = *v2;
      uint64_t v15 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if ((v11 & 1) == 0)
      {
        sub_1000D8AA8();
        uint64_t v12 = v15;
      }

      sub_100017790((_OWORD *)(*(void *)(v12 + 56) + 32 * v10), v16);
      sub_1000D8798(v10, v12);
      uint64_t v13 = *v3;
      uint64_t *v3 = v12;
      swift_bridgeObjectRelease(v13);
    }

    else
    {
      memset(v16, 0, sizeof(v16));
    }

    return sub_100012824((uint64_t)v16, &qword_100157FF8);
  }

uint64_t sub_1000D25EC(uint64_t a1, uint64_t a2)
{
  return static Array.+ infix(_:_:)(a2, a1);
}

uint64_t sub_1000D25FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D843C(a3, a3);
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v7 + 80) + (unint64_t)*(unsigned int *)(v6 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + *(void *)(v7 + 72),
         *(unsigned __int8 *)(v7 + 80) | (unint64_t)*(unsigned __int16 *)(v6 + 52));
  uint64_t v9 = static Array._adoptStorage(_:count:)(v8, 1LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a1, a3);
  type metadata accessor for Array(0LL, a3);
  uint64_t v11 = static Array.+ infix(_:_:)(a2, v9);
  swift_bridgeObjectRelease(v9);
  return v11;
}

uint64_t sub_1000D26B0(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0) {
    return static Array.+ infix(_:_:)(a3, a1);
  }
  else {
    return swift_bridgeObjectRetain(a3);
  }
}

BOOL sub_1000D26D0()
{
  return Array.count.getter() == 0;
}

uint64_t sub_1000D26EC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = a4;
  uint64_t v8 = v6;
  return sub_1000D1F88(a1 & 1, a2, (uint64_t)sub_1000D9FA4, (uint64_t)&v5, a3);
}

void sub_1000D2728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100005FB4(&qword_1001588F8);
  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }

uint64_t sub_1000D27D4@<X0>(int a1@<W8>)
{
  if (BYTE6(v3) != 16LL)
  {
    sub_10001226C(v4, v3);
LABEL_18:
    uint64_t v17 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))( v1,  1LL,  1LL,  v17);
  }

  if (a1)
  {
    if (a1 == 1)
    {
      if ((int)v4 <= (uint64_t)v4 >> 32)
      {
        uint64_t v6 = sub_1000125E0(v4, v3);
        uint64_t v7 = (unsigned __int8 *)((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
        if (!v7)
        {
LABEL_8:
          __DataStorage._length.getter();
          sub_1000D2A5C(v7, v5);
          sub_10001226C(v4, v3);
          goto LABEL_16;
        }

        uint64_t v8 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v4, v8))
        {
          v7 += (int)v4 - v8;
          goto LABEL_8;
        }

        goto LABEL_22;
      }

      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }

    uint64_t v10 = *(void *)(v4 + 16);
    uint64_t v11 = *(void *)(v4 + 24);
    swift_retain(v4);
    uint64_t v12 = swift_retain(v3 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v13 = (unsigned __int8 *)((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v12);
    if (v13)
    {
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v14)) {
        goto LABEL_23;
      }
      v13 += v10 - v14;
    }

    if (__OFSUB__(v11, v10)) {
      goto LABEL_21;
    }
    __DataStorage._length.getter();
    sub_1000D2A5C(v13, v5);
    swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
    swift_release(v4);
  }

  else
  {
    LOWORD(v19) = v3;
    BYTE5(v19) = BYTE5(v3);
    BYTE4(v19) = BYTE4(v3);
    BYTE3(v19) = BYTE3(v3);
    BYTE2(v19) = BYTE2(v3);
    UUID.init(uuid:)(v4, v4 >> 8, v4 >> 16, v4 >> 24, HIDWORD(v4), v4 >> 40, HIWORD(v4), HIBYTE(v4), v19);
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 0LL, 1LL, v9);
  }

uint64_t sub_1000D2A5C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    UUID.init(uuid:)(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], *((void *)a1 + 1));
    uint64_t v3 = type metadata accessor for UUID(0LL);
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
    uint64_t v5 = a2;
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v3 = ((uint64_t (*)(void))type metadata accessor for UUID)();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
    uint64_t v5 = a2;
    uint64_t v6 = 1LL;
  }

  return v4(v5, v6, 1LL, v3);
}

uint64_t sub_1000D2AF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 >> 60 == 15) {
    goto LABEL_4;
  }
  sub_1000D2728(a1, a2);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    sub_100012824((uint64_t)v8, &qword_1001588F8);
LABEL_4:
    uint64_t v11 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( a3,  1LL,  1LL,  v11);
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a3, 0LL, 1LL, v9);
}

uint64_t sub_1000D2BFC()
{
  uint64_t __src = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return sub_1000DA1A8(&__src, 16LL);
}

uint64_t sub_1000D2CC8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x696C615674786544LL,  0xEE006E6F69746164LL);
  qword_100175778 = result;
  return result;
}

uint64_t *sub_1000D2D30()
{
  if (qword_100171AB8 != -1) {
    swift_once(&qword_100171AB8, sub_1000D2CC8);
  }
  return &qword_100175778;
}

uint64_t sub_1000D2D70()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x4C6E6F6973696C45LL,  0xEB00000000747369LL);
  qword_100175780 = result;
  return result;
}

uint64_t *sub_1000D2DD4()
{
  if (qword_100171AC0 != -1) {
    swift_once(&qword_100171AC0, sub_1000D2D70);
  }
  return &qword_100175780;
}

uint64_t sub_1000D2E14()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x6D754E726F727245LL,  0xEB00000000726562LL);
  qword_100175788 = result;
  return result;
}

uint64_t *sub_1000D2E78()
{
  if (qword_100171AC8 != -1) {
    swift_once(&qword_100171AC8, sub_1000D2E14);
  }
  return &qword_100175788;
}

uint64_t sub_1000D2EB8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x6C656E72654BLL,  0xE600000000000000LL);
  qword_100175790 = result;
  return result;
}

uint64_t *sub_1000D2F10()
{
  if (qword_100171AD8 != -1) {
    swift_once(&qword_100171AD8, sub_1000D2EB8);
  }
  return &qword_100175790;
}

uint64_t sub_1000D2F50()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x6C6379636566694CLL,  0xE900000000000065LL);
  qword_100175798 = result;
  return result;
}

uint64_t *sub_1000D2FB0()
{
  if (qword_100171AE8 != -1) {
    swift_once(&qword_100171AE8, sub_1000D2F50);
  }
  return &qword_100175798;
}

uint64_t sub_1000D2FF0()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0xD000000000000015LL,  0x800000010012AEF0LL);
  qword_1001757A0 = result;
  return result;
}

uint64_t *sub_1000D3054()
{
  if (qword_100171AF0 != -1) {
    swift_once(&qword_100171AF0, sub_1000D2FF0);
  }
  return &qword_1001757A0;
}

uint64_t sub_1000D3094()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000020LL,  0x800000010012ABE0LL,  0x6465657053LL,  0xE500000000000000LL);
  qword_1001757A8 = result;
  return result;
}

uint64_t *sub_1000D30EC()
{
  if (qword_100171AF8 != -1) {
    swift_once(&qword_100171AF8, sub_1000D3094);
  }
  return &qword_1001757A8;
}

uint64_t sub_1000D312C(uint64_t a1)
{
  return sub_1000D3424(a1, qword_1001757B0, 0x6E614D6574617453LL, 0xEF746E656D656761LL);
}

uint64_t sub_1000D3158()
{
  return sub_1000D317C( &qword_100171B00,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_1001757B0,  (uint64_t)sub_1000D312C);
}

uint64_t sub_1000D317C(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = a2(0LL);
  return sub_100086AD4(v6, a3);
}

uint64_t sub_1000D31C0(uint64_t a1)
{
  return sub_1000D3424(a1, qword_1001757C8, 0xD000000000000012LL, 0x800000010012AED0LL);
}

uint64_t sub_1000D31E4()
{
  return sub_1000D317C( &qword_100171B08,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_1001757C8,  (uint64_t)sub_1000D31C0);
}

uint64_t sub_1000D3208(uint64_t a1)
{
  return sub_1000D3424(a1, qword_1001757E0, 0xD000000000000012LL, 0x800000010012AEB0LL);
}

uint64_t sub_1000D322C()
{
  return sub_1000D317C( &qword_100171B10,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_1001757E0,  (uint64_t)sub_1000D3208);
}

uint64_t sub_1000D3250(uint64_t a1)
{
  return sub_1000D3424(a1, qword_1001757F8, 0xD000000000000010LL, 0x800000010012AE90LL);
}

uint64_t sub_1000D3274()
{
  return sub_1000D317C( &qword_100171B18,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_1001757F8,  (uint64_t)sub_1000D3250);
}

uint64_t sub_1000D3298(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175810, 0xD000000000000010LL, 0x800000010012AE70LL);
}

uint64_t sub_1000D32BC()
{
  return sub_1000D317C( &qword_100171B20,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175810,  (uint64_t)sub_1000D3298);
}

uint64_t sub_1000D32E0(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175828, 0xD00000000000001CLL, 0x800000010012AE50LL);
}

uint64_t sub_1000D3304()
{
  return sub_1000D317C( &qword_100171B28,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175828,  (uint64_t)sub_1000D32E0);
}

uint64_t sub_1000D3328(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175840, 0xD000000000000019LL, 0x800000010012AE30LL);
}

uint64_t sub_1000D334C()
{
  return sub_1000D317C( &qword_100171B30,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175840,  (uint64_t)sub_1000D3328);
}

uint64_t sub_1000D3370(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175858, 0xD000000000000016LL, 0x800000010012AE10LL);
}

uint64_t sub_1000D3394()
{
  return sub_1000D317C( &qword_100171B38,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175858,  (uint64_t)sub_1000D3370);
}

uint64_t sub_1000D33B8(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175870, 0xD000000000000010LL, 0x800000010012ADF0LL);
}

uint64_t sub_1000D33DC()
{
  return sub_1000D317C( &qword_100171B40,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175870,  (uint64_t)sub_1000D33B8);
}

uint64_t sub_1000D3400(uint64_t a1)
{
  return sub_1000D3424(a1, qword_100175888, 0x6E75614C74786544LL, 0xEA00000000006863LL);
}

uint64_t sub_1000D3424(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100089A8C(v7, a2);
  sub_100086AD4(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xEC0000006D6B2E65LL, a3, a4);
}

uint64_t sub_1000D349C()
{
  return sub_1000D317C( &qword_100171B48,  (uint64_t (*)(void))&type metadata accessor for Logger,  (uint64_t)qword_100175888,  (uint64_t)sub_1000D3400);
}

uint64_t sub_1000D34C0()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100089A8C(v0, qword_1001758A0);
  sub_100086AD4(v0, (uint64_t)qword_1001758A0);
  if (qword_100171AF8 != -1) {
    swift_once(&qword_100171AF8, sub_1000D3094);
  }
  return OSSignposter.init(logHandle:)((id)qword_1001757A8);
}

uint64_t sub_1000D3540()
{
  return sub_1000D317C( &qword_100171B50,  (uint64_t (*)(void))&type metadata accessor for OSSignposter,  (uint64_t)qword_1001758A0,  (uint64_t)sub_1000D34C0);
}

uint64_t sub_1000D3564@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1000D356C(a1, a2, a3);
}

uint64_t sub_1000D356C@<X0>(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  CFStringRef errorString = 0LL;
  CFTypeRef v5 = IOCFUnserialize(a1, kCFAllocatorDefault, 0LL, &errorString);
  CFTypeRef v6 = v5;
  uint64_t v7 = (__CFString *)errorString;
  if (errorString)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(errorString);
    uint64_t v10 = v9;

    uint64_t v12 = static os_log_type_t.error.getter(v11);
    uint64_t v13 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + 16) = xmmword_10010F110;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_100026B64();
    *(void *)(v14 + 3sub_100006034(v0 + 2) = v8;
    *(void *)(v14 + sub_10007CFB4(v0 + 40) = v10;
    unint64_t v15 = sub_100026BA8();
    char v16 = (void *)static OS_os_log.default.getter(v15);
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v16,  "Error encountered while deserializing: %{public}s",  49LL,  2LL,  v14);
    swift_bridgeObjectRelease(v14);

    swift_unknownObjectRelease(v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a3,  1LL,  1LL,  a2);
  }

  else
  {
    CFTypeRef v20 = v5;
    uint64_t v18 = sub_100005FB4((uint64_t *)&unk_10015B9F0);
    int v19 = swift_dynamicCast(a3, &v20, v18, a2, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a3,  v19 ^ 1u,  1LL,  a2);
  }

uint64_t sub_1000D3704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  uint64_t v6 = type metadata accessor for Optional(0LL, a4);
  return Data.withUnsafeBytes<A>(_:)(sub_1000DA254, v8, a1, a2, v6);
}

CFDataRef sub_1000D3770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v10 = v4;
  uint64_t v5 = type metadata accessor for Optional(0LL, a3);
  uint64_t v6 = (const void *)Optional._bridgeToObjectiveC()(v5);
  swift_unknownObjectRelease(v4);
  CFDataRef v7 = IOCFSerialize(v6, 0LL);
  swift_unknownObjectRelease(v6);
  if (v7)
  {
    uint64_t v8 = v7;
    CFDataRef v7 = (CFDataRef)static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  }

  return v7;
}

uint64_t sub_1000D3840@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a3;
  v24[1] = a5;
  v24[0] = *(void *)(a4 + 8);
  uint64_t v8 = *(void *)(*(void *)(v24[0] + 24LL) + 16LL);
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v25 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v9,  a2,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v11 = swift_getAssociatedTypeWitness( 0LL,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v24 - v20;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v14, a4);
    if (result > a1)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v8,  v14,  v11,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_10011A2D8,  512LL,  v11,  AssociatedConformanceWitness);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, v14, v8);
      uint64_t v27 = a1;
      unint64_t v23 = sub_1000DA2F0();
      dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v18, &v27, &type metadata for Int, v23, v14, v24[0]);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return dispatch thunk of OptionSet.init(rawValue:)(v21, v25, v26);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D3A38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[3] + 16LL);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v7,  a1,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v62 = v6;
  uint64_t v61 = swift_getAssociatedTypeWitness( 0LL,  v6,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(v61);
  uint64_t v60 = (char *)&v50 - v9;
  uint64_t v10 = swift_checkMetadataState(0LL, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  char v55 = (char *)&v50 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v54 = (char *)&v50 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v57 = a1;
  uint64_t v58 = v3;
  uint64_t v56 = v7;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v50 - v21), a1);
  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3);
  uint64_t v52 = v11;
  char v24 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v63 = v22;
  uint64_t result = v24(v22, v10);
  if (v23 < 0)
  {
    __break(1u);
  }

  else
  {
    if (v23)
    {
      uint64_t v26 = 0LL;
      uint64_t v64 = (char *)_swiftEmptyArrayStorage;
      uint64_t v53 = v23;
      while (1)
      {
        uint64_t v28 = v63;
        dispatch thunk of RawRepresentable.rawValue.getter(v63, v57);
        uint64_t v30 = v61;
        uint64_t v29 = v62;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v62,  v10,  v61,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v32 = v60;
        uint64_t v59 = AssociatedConformanceWitness;
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_10011A2D8,  512LL,  v30,  AssociatedConformanceWitness);
        uint64_t v33 = v20;
        uint64_t v34 = v55;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, v10, v29);
        uint64_t v65 = v26;
        unint64_t v35 = sub_1000DA2F0();
        char v36 = v54;
        dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v34, &v65, &type metadata for Int, v35, v10, a3);
        unint64_t v37 = v34;
        uint64_t v20 = v33;
        v24(v37, v10);
        dispatch thunk of static BinaryInteger.& infix(_:_:)(v28, v36, v10, a3);
        v24(v36, v10);
        v24(v28, v10);
        if ((dispatch thunk of static BinaryInteger.isSigned.getter(v10, a3) & 1) != 0)
        {
          if (dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3) < 64) {
            goto LABEL_14;
          }
        }

        else
        {
          char v38 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, a3);
          uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3);
          if ((v38 & 1) != 0)
          {
            if (v39 <= 64)
            {
              uint64_t v40 = v60;
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_10011A2E0,  256LL,  v61,  v59);
              uint64_t v41 = v63;
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v40, v10, v62);
              LOBYTE(vsub_10007CFB4(v0 + 40) = dispatch thunk of static Comparable.>= infix(_:_:)(v33, v41, v10, *(void *)(a3[4] + 8LL));
              v24(v41, v10);
              uint64_t v42 = v51;
              (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v33, v10);
              if ((v40 & 1) == 0)
              {
                v24(v42, v10);
                v24(v33, v10);
LABEL_18:
                if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0) {
                  uint64_t v64 = sub_1000D8210(0LL, *((void *)v64 + 2) + 1LL, 1, v64);
                }
                unint64_t v47 = *((void *)v64 + 2);
                unint64_t v46 = *((void *)v64 + 3);
                if (v47 >= v46 >> 1) {
                  uint64_t v64 = sub_1000D8210((char *)(v46 > 1), v47 + 1, 1, v64);
                }
                uint64_t v27 = v64;
                *((void *)v64 + sub_100006034(v0 + 2) = v47 + 1;
                *(void *)&v27[8 * v47 + 32] = v26;
                goto LABEL_5;
              }

              uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter(v10, a3);
              v24(v42, v10);
              goto LABEL_15;
            }
          }

          else if (v39 < 64)
          {
LABEL_14:
            uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter(v10, a3);
LABEL_15:
            v24(v33, v10);
            if (v43) {
              goto LABEL_18;
            }
            goto LABEL_5;
          }
        }

        uint64_t v65 = 0LL;
        os_signpost_type_t v44 = v63;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v65, &type metadata for Int, v35, v10, a3);
        char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v44, v10, *(void *)(a3[2] + 8LL));
        v24(v44, v10);
        v24(v33, v10);
        if ((v45 & 1) == 0) {
          goto LABEL_18;
        }
LABEL_5:
        if (v53 == ++v26) {
          goto LABEL_24;
        }
      }
    }

    uint64_t v64 = (char *)_swiftEmptyArrayStorage;
LABEL_24:
    uint64_t v48 = v64;
    uint64_t v49 = Array.description.getter(v64, &type metadata for Int);
    swift_bridgeObjectRelease(v48);
    return v49;
  }

  return result;
}

uint64_t sub_1000D3F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  if ((v15 & 1) == 0) {
    return v14(a4, v11, a2);
  }
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v14((char *)&v17 - v13, v11, a2);
  v18(v10, a1, a2);
  return dispatch thunk of SetAlgebra.union(_:)(v10, a2, *(void *)(a3 + 16));
}

uint64_t sub_1000D406C(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1000D409C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    int v5 = a3;
    unint64_t v6 = HIDWORD(a3);
    uint64_t v7 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_10010F440;
    *(void *)(v8 + 56) = &type metadata for Int32;
    *(void *)(v8 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 3sub_100006034(v0 + 2) = v5;
    *(void *)(v8 + 96) = &type metadata for Int32;
    *(void *)(v8 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 7sub_100006034(v0 + 2) = v6;
    a1 = String.init(format:_:)(0x7823252F782325LL, 0xE700000000000000LL, v8);
  }

  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_1000D4150(uint64_t a1)
{
  *(void *)type = 0LL;
  uint64_t v2 = String.utf8CString.getter(a1);
  macho_cpu_type_for_arch_name((const char *)(v2 + 32), &type[1], type);
  swift_release(v2);
  return a1;
}

const char *sub_1000D41E0(cpu_type_t a1, cpu_subtype_t a2)
{
  uint64_t result = macho_arch_name_for_cpu_type(a1, a2);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  return result;
}

void sub_1000D4220()
{
  qword_1001758B8 = (uint64_t)&off_10014EA58;
}

uint64_t sub_1000D4238(char a1, uint64_t a2)
{
  char v8 = a1;
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = a2 + 32;
  unint64_t v4 = sub_1000265DC();
  uint64_t v5 = 0LL;
  while (1)
  {
    char v7 = *(_BYTE *)(v3 + v5);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v7, &v8, &type metadata for CollectionKind, v4) & 1) != 0) {
      break;
    }
    if (v2 == ++v5) {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_1000D42D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000D430C + 4 * byte_10011A300[a1]))( 0xD000000000000016LL,  0x800000010012ACB0LL);
}

  ;
}

BOOL sub_1000D4340(char *a1, char *a2)
{
  return sub_1000D9FCC(*a1, *a2);
}

BOOL sub_1000D434C(char *a1, char *a2)
{
  return sub_1000D4358(*a1, *a2);
}

BOOL sub_1000D4358(char a1, char a2)
{
  if (qword_100171B58 != -1) {
    swift_once(&qword_100171B58, sub_1000D4220);
  }
  uint64_t v4 = qword_1001758B8;
  char v14 = a2;
  uint64_t v5 = *(void *)(qword_1001758B8 + 16);
  if (!v5) {
    return 1LL;
  }
  unint64_t v6 = sub_1000265DC();
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = 0LL;
  while (1)
  {
    char v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0) {
      break;
    }
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 1LL;
    }
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v9 = qword_1001758B8;
  swift_bridgeObjectRetain(qword_1001758B8);
  uint64_t v10 = sub_1000D4238(a1, v9);
  char v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) == 0 && v7 >= v10;
}

BOOL sub_1000D4474(char *a1, char *a2)
{
  return sub_1000D4480(*a1, *a2);
}

BOOL sub_1000D4480(char a1, char a2)
{
  if (qword_100171B58 != -1) {
    swift_once(&qword_100171B58, sub_1000D4220);
  }
  uint64_t v4 = qword_1001758B8;
  char v14 = a1;
  uint64_t v5 = *(void *)(qword_1001758B8 + 16);
  if (!v5) {
    return 1LL;
  }
  unint64_t v6 = sub_1000265DC();
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = 0LL;
  while (1)
  {
    char v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0) {
      break;
    }
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 1LL;
    }
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v9 = qword_1001758B8;
  swift_bridgeObjectRetain(qword_1001758B8);
  uint64_t v10 = sub_1000D4238(a2, v9);
  char v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) == 0 && v7 >= v10;
}

BOOL sub_1000D459C(char *a1, char *a2)
{
  return sub_1000D45A8(*a1, *a2);
}

BOOL sub_1000D45A8(char a1, char a2)
{
  if (qword_100171B58 != -1) {
    swift_once(&qword_100171B58, sub_1000D4220);
  }
  uint64_t v4 = qword_1001758B8;
  char v14 = a2;
  uint64_t v5 = *(void *)(qword_1001758B8 + 16);
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = sub_1000265DC();
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = 0LL;
  while (1)
  {
    char v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0) {
      break;
    }
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v9 = qword_1001758B8;
  swift_bridgeObjectRetain(qword_1001758B8);
  uint64_t v10 = sub_1000D4238(a1, v9);
  char v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) != 0 || v7 < v10;
}

uint64_t sub_1000D46C4()
{
  return sub_1000D42D4(*v0);
}

uint64_t sub_1000D46CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 == 5) {
    goto LABEL_8;
  }
  uint64_t v4 = sub_1000906C4(a1);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if (!v4 && v5 == 0xE000000000000000LL)
  {
    unint64_t v8 = 0xE000000000000000LL;
LABEL_7:
    swift_bridgeObjectRelease(v8);
LABEL_8:
    uint64_t v9 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(a2, v2, v9);
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0LL, 0xE000000000000000LL, 0LL) & 1) != 0)
  {
    unint64_t v8 = v7;
    goto LABEL_7;
  }

  URL.appendingPathExtension(_:)(v6, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1000D4780@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = URL.isFileURL.getter();
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = URL.path.getter(v8);
    uint64_t v11 = v10;
    uint64_t v22 = v10;
    swift_bridgeObjectRetain(v10);
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    Swift::Bool v13 = String.hasPrefix(_:)(v12);
    swift_bridgeObjectRelease(v11);
    if (v13)
    {
      uint64_t v14 = String.count.getter(a1, a2);
      sub_1000D48DC(v14);
      uint64_t v11 = v22;
    }

    swift_bridgeObjectRetain(v11);
    v15._uint64_t countAndFlagsBits = 47LL;
    v15._object = (void *)0xE100000000000000LL;
    Swift::Bool v16 = String.hasPrefix(_:)(v15);
    uint64_t v17 = swift_bridgeObjectRelease(v11);
    if (v16)
    {
      char v18 = URL.hasDirectoryPath.getter(v17);
      URL.init(fileURLWithPath:isDirectory:)(v9, v11, v18 & 1);
      return swift_bridgeObjectRelease(v11);
    }

    else
    {
      swift_bridgeObjectRelease(v11);
      uint64_t v21 = type metadata accessor for URL(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(a3, v4, v21);
    }
  }

  else
  {
    uint64_t v20 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(a3, v3, v20);
  }

uint64_t sub_1000D48DC(uint64_t result)
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v2 = *v1;
      unint64_t v3 = v1[1];
      uint64_t v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000LL) == 0) {
        uint64_t v4 = *v1;
      }
      uint64_t v5 = 7LL;
      if (((v3 >> 60) & ((v2 & 0x800000000000000LL) == 0)) != 0) {
        uint64_t v5 = 11LL;
      }
      uint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v5 | (v4 << 16), v2, v3);
      if ((v6 & 1) == 0) {
        return String.removeSubrange(_:)(15LL, result);
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000D4950@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v63 = _swiftEmptyArrayStorage;
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v8 = sub_10000C82C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v12 = v8[2];
    unint64_t v11 = v8[3];
    if (v12 >= v11 >> 1) {
      uint64_t v8 = sub_10000C82C((void *)(v11 > 1), v12 + 1, 1, v8);
    }
    v8[2] = v12 + 1;
    Swift::Bool v13 = &v8[2 * v12];
    v13[4] = a1;
    v13[5] = a2;
    uint64_t v63 = v8;
    uint64_t v5 = v60;
  }

  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v58 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      uint64_t v8 = sub_10000C82C(0LL, v8[2] + 1LL, 1, v8);
    }
    Swift::String v15 = (void *)(a3 + 40);
    do
    {
      uint64_t v17 = *(v15 - 1);
      uint64_t v16 = *v15;
      unint64_t v18 = v8[2];
      unint64_t v19 = v8[3];
      swift_bridgeObjectRetain(*v15);
      if (v18 >= v19 >> 1) {
        uint64_t v8 = sub_10000C82C((void *)(v19 > 1), v18 + 1, 1, v8);
      }
      v15 += 2;
      v8[2] = v18 + 1;
      uint64_t v20 = &v8[2 * v18];
      v20[4] = v17;
      v20[5] = v16;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(a3);
    uint64_t v63 = v8;
    uint64_t v5 = v60;
    a4 = v58;
  }

  uint64_t v21 = *(void *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain(a4);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      uint64_t v8 = sub_10000C82C(0LL, v8[2] + 1LL, 1, v8);
    }
    uint64_t v22 = (void *)(a4 + 40);
    do
    {
      uint64_t v24 = *(v22 - 1);
      uint64_t v23 = *v22;
      unint64_t v25 = v8[2];
      unint64_t v26 = v8[3];
      swift_bridgeObjectRetain(*v22);
      if (v25 >= v26 >> 1) {
        uint64_t v8 = sub_10000C82C((void *)(v26 > 1), v25 + 1, 1, v8);
      }
      v22 += 2;
      v8[2] = v25 + 1;
      uint64_t v27 = &v8[2 * v25];
      v27[4] = v24;
      void v27[5] = v23;
      --v21;
    }

    while (v21);
    swift_bridgeObjectRelease(a4);
    uint64_t v63 = v8;
    uint64_t v5 = v60;
  }

  if (!v8[2])
  {
    os_signpost_type_t v44 = v8;
    goto LABEL_39;
  }

  sub_1000D4D98(&v63);
  uint64_t v28 = v63;
  uint64_t v29 = v63[2];
  if (!v29)
  {
LABEL_37:
    os_signpost_type_t v44 = v28;
LABEL_39:
    swift_bridgeObjectRelease(v44);
    uint64_t v45 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16LL))(a5, v5, v45);
  }

  uint64_t v30 = v63 + 5;
  while (1)
  {
    uint64_t v32 = *(v30 - 1);
    uint64_t v31 = (void *)*v30;
    BOOL v33 = v32 == 47 && v31 == (void *)0xE100000000000000LL;
    if (v33
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(v30 - 1), *v30, 47LL, 0xE100000000000000LL, 0LL) & 1) != 0)
    {
      goto LABEL_25;
    }

    uint64_t v34 = swift_bridgeObjectRetain(v31);
    URL.path.getter(v34);
    uint64_t v36 = v35;
    v37._uint64_t countAndFlagsBits = v32;
    v37._object = v31;
    Swift::Bool v38 = String.hasPrefix(_:)(v37);
    swift_bridgeObjectRelease(v36);
    if (v38) {
      break;
    }
    swift_bridgeObjectRelease(v31);
LABEL_25:
    v30 += 2;
    if (!--v29) {
      goto LABEL_37;
    }
  }

  uint64_t v39 = swift_bridgeObjectRelease(v28);
  uint64_t v61 = URL.path.getter(v39);
  uint64_t v62 = v40;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 47LL, 0xE100000000000000LL, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRetain(v31);
    uint64_t v41 = sub_1000D1C2C(v32, (unint64_t)v31);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease(v31);
    if (v43)
    {
      if (v41 == 47 && v43 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
        goto LABEL_41;
      }

      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, 47LL, 0xE100000000000000LL, 0LL);
      swift_bridgeObjectRelease(v43);
      if ((v47 & 1) != 0)
      {
LABEL_41:
        swift_bridgeObjectRetain(v31);
        uint64_t v48 = sub_1000D9EBC(1LL, v32, (unint64_t)v31);
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        uint64_t v54 = v53;
        swift_bridgeObjectRelease(v31);
        uint64_t v32 = static String._fromSubstring(_:)(v48, v50, v52, v54);
        uint64_t v56 = v55;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v54);
        uint64_t v31 = v56;
      }
    }
  }

  uint64_t v57 = String.count.getter(v32, v31);
  swift_bridgeObjectRelease(v31);
  sub_1000D48DC(v57);
  URL.init(fileURLWithPath:)(v61, v62);
  return swift_bridgeObjectRelease(v62);
}

uint64_t sub_1000D4D98(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1000D8C68(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_1000D8C7C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000D4E04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease(a2);
  uint64_t v4 = OSKextParseVersionString(v3 + 32);
  swift_release(v3);
  return v4 & ~(v4 >> 63);
}

uint64_t sub_1000D4E50(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease(a2);
  uint64_t v4 = OSKextParseVersionString(v3 + 32);
  swift_release(v3);
  if (v4 <= 0) {
    return 0LL;
  }
  return v4;
}

void *sub_1000D4EB0()
{
  return &unk_10011A31C;
}

void *sub_1000D4EBC()
{
  return &unk_10011A320;
}

uint64_t sub_1000D4EC8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::Bool v13 = (char *)&v26 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  if (*(void *)(v14 + 16) && (unint64_t v15 = sub_100099A50(a1), (v16 & 1) != 0)) {
    sub_100006054(*(void *)(v14 + 56) + 32 * v15, (uint64_t)v28);
  }
  else {
    memset(v28, 0, sizeof(v28));
  }
  swift_bridgeObjectRelease(v14);
  uint64_t v17 = sub_100005FB4(&qword_100157FF8);
  char v18 = swift_dynamicCast(v13, v28, v17, a3, 6LL);
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if ((v18 & 1) != 0)
  {
    v20(v13, 0LL, 1LL, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v13, a3);
  }

  else
  {
    v20(v13, 1LL, 1LL, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(void *)&v28[0] = 0LL;
    *((void *)&v28[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease(*((void *)&v28[0] + 1));
    *(void *)&v28[0] = 0xD000000000000016LL;
    *((void *)&v28[0] + 1) = 0x800000010012ACF0LL;
    uint64_t v27 = a1;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a3);
    v23._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v27, MetatypeMetadata);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._object = (void *)0x800000010012AD10LL;
    v25._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v25);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)&v28[0],  *((void *)&v28[0] + 1),  "driverkitd/Utilities.swift",  26LL,  2LL,  596LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D50DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a1, a4);
}

void (*sub_1000D5118( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[2] = a4;
  v11[3] = a5;
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = *(void *)(a4 - 8);
  v11[4] = v5;
  v11[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v11[6] = malloc(v13);
  uint64_t v14 = malloc(v13);
  v11[7] = v14;
  sub_1000D4EC8(a2, a3, a4, a5, (uint64_t)v14);
  return sub_1000D51C0;
}

void sub_1000D51C0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (*a1)[2];
  uint64_t v7 = (*a1)[3];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[6], v4, v6);
    sub_1000DA334((uint64_t)v3, v9, v8, v6, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v5 + 8);
    v10(v3, v6);
  }

  else
  {
    sub_1000DA334((*a1)[7], v9, v8, v6, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v5 + 8);
  }

  v10(v4, v6);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1000D528C(uint64_t a1)
{
  uint64_t v2 = sub_10008F368();
  if (!*(void *)(a1 + 16))
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
LABEL_10:
    swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v13);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v14 + 1))
  {
LABEL_11:
    sub_100012824((uint64_t)&v13, &qword_100157FF8);
    return 0LL;
  }

  uint64_t v7 = v11;
  unint64_t v8 = v12;
  if (v11 == 1415071051 && v12 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
  }

  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(1415071051LL, 0xE400000000000000LL, v11, v12, 0LL) & 1) != 0)
  {
    unint64_t v9 = v8;
  }

  else if (v7 == 1415071044 && v8 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
  }

  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(1415071044LL, 0xE400000000000000LL, v7, v8, 0LL) & 1) == 0) {
      return v7;
    }
    unint64_t v9 = v8;
  }

  swift_bridgeObjectRelease(v9);
  return 0LL;
}

uint64_t sub_1000D541C(uint64_t a1, void *a2)
{
  uint64_t result = 1954047332LL;
  if (!a2) {
    return 1954047339LL;
  }
  if (a2 != (void *)1)
  {
    if (a2 == (void *)2)
    {
      strcpy((char *)v11, "(missing ");
      WORD1(v11[1]) = 0;
      HIDWORD(v11[1]) = -385875968;
      unint64_t v5 = sub_10008F368();
      uint64_t v6 = *v5;
      uint64_t v7 = (void *)v5[1];
      swift_bridgeObjectRetain(v7);
      v8._uint64_t countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v7);
    }

    else
    {
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      strcpy((char *)v11, "Unsupported (");
      HIWORD(v11[1]) = -4864;
      v9._uint64_t countAndFlagsBits = a1;
      v9._object = a2;
      String.append(_:)(v9);
    }

    v10._uint64_t countAndFlagsBits = 41LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    return v11[0];
  }

  return result;
}

uint64_t sub_1000D5520(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0LL:
      return !a4;
    case 1LL:
      return a4 == 1;
    case 2LL:
      return a4 == 2;
  }

  if (a4 < 3) {
    return 0LL;
  }
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

uint64_t sub_1000D5590(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0LL:
      return !v4;
    case 1LL:
      return v4 == 1;
    case 2LL:
      return v4 == 2;
  }

  if (v4 < 3) {
    return 0LL;
  }
  uint64_t v6 = *a1;
  if (v6 == *a2 && v3 == v4) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0LL);
}

uint64_t sub_1000D5608()
{
  return sub_1000D541C(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1000D5610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v12;
  uint64_t v15 = type metadata accessor for Array(0LL, v14);
  Dictionary.subscript.getter(&v20, a1, v13, a3, v15, a5);
  uint64_t v16 = v20;
  uint64_t result = swift_bridgeObjectRelease(v20);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
    uint64_t v20 = static Array._allocateUninitialized(_:)(0LL, a4);
    uint64_t v18 = type metadata accessor for Dictionary(0LL, a3, v15, a5);
    return Dictionary.subscript.setter(&v20, v11, v18);
  }

  return result;
}

uint64_t sub_1000D5718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v14;
  uint64_t v18 = type metadata accessor for Set(0LL, v16, v17);
  Dictionary.subscript.getter(&v25, a1, v15, a3, v18, a5);
  uint64_t v19 = v25;
  uint64_t result = swift_bridgeObjectRelease(v25);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a3);
    uint64_t v21 = static Array._allocateUninitialized(_:)(0LL, a4);
    if (Array._getCount()()) {
      uint64_t v22 = (void *)sub_1000DA500(v21, a4, a6);
    }
    else {
      uint64_t v22 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease(v21);
    Swift::String v25 = v22;
    uint64_t v23 = type metadata accessor for Dictionary(0LL, a3, v18, a5);
    return Dictionary.subscript.setter(&v25, v13, v23);
  }

  return result;
}

uint64_t sub_1000D5860(unint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  sub_100005110(a2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
  uint64_t v9 = v8;
  if (v8 && a1 != 5)
  {
    sub_100037B00(a1);
    uint64_t v10 = sub_1000905EC(a1);
    uint64_t v12 = v11;
    swift_bridgeObjectRetain(v9);
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v12);
    uint64_t v14 = a3[3];
    uint64_t v15 = a3[4];
    sub_100005110(a3, v14);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v15 + 136))(v7, v9, 0LL, v14, v15);
    sub_100039418(a1);
    swift_bridgeObjectRelease(v9);
  }

  return v7;
}

uint64_t sub_1000D5984(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100005110(a1, v3);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_100090410();
    uint64_t v8 = *v7;
    uint64_t v9 = *(void *)(*v7 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain(*v7);
      uint64_t v10 = 0LL;
      uint64_t v11 = v9 - 1;
      do
      {
        unint64_t v12 = *(void *)(v8 + 8 * v10 + 32);
        sub_100037B00(v12);
        uint64_t v13 = sub_1000905EC(v12);
        uint64_t v15 = v14;
        swift_bridgeObjectRetain(v6);
        v16._uint64_t countAndFlagsBits = v13;
        v16._object = v15;
        String.append(_:)(v16);
        swift_bridgeObjectRelease(v15);
        uint64_t v17 = a2[3];
        uint64_t v18 = a2[4];
        sub_100005110(a2, v17);
        LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v18 + 136))( v21,  v6,  0LL,  v17,  v18);
        sub_100039428(v12);
        swift_bridgeObjectRelease(v6);
        if ((v9 & 1) != 0) {
          break;
        }
      }

      while (v11 != v10++);
      swift_bridgeObjectRelease(v6);
    }

    else
    {
      uint64_t v8 = v6;
    }

    swift_bridgeObjectRelease(v8);
  }

  else
  {
    LOBYTE(v9) = 0;
  }

  return v9 & 1;
}

void *sub_1000D5AE0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100005110(a1, v12);
  sub_10009C2CC(v12, v13);
  uint64_t v15 = v43;
  uint64_t v14 = v44;
  sub_100005110(v42, v43);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v14 + 24))(&v40, a2, v15, v14);
  if (!v41)
  {
    sub_100012824((uint64_t)&v40, &qword_100157C58);
    sub_100006034(v42);
    return _swiftEmptyArrayStorage;
  }

  sub_100005158(&v40, (uint64_t)v45);
  sub_100006034(v42);
  uint64_t v16 = sub_100005FB4(&qword_10015BA40);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_10010F110;
  sub_100005F70((uint64_t)v45, v17 + 32);
  *(void *)&__int128 v40 = v17;
  char v39 = 0;
  BOOL v18 = a3 < 1;
  uint64_t v19 = a3 - 1;
  if (v18)
  {
LABEL_12:
    uint64_t v22 = (void *)v40;
    sub_100006034(v45);
    return v22;
  }

  uint64_t v20 = v46;
  uint64_t v21 = v47;
  sub_100005110(v45, v46);
  (*(void (**)(uint64_t, uint64_t))(v21 + 80))(v20, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_100012824((uint64_t)v8, (uint64_t *)&unk_10015BA30);
    goto LABEL_12;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v37, v8, v9);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100005110(a1, v23);
  sub_1001073DC(v23, v24);
  uint64_t v25 = v44;
  uint64_t v26 = sub_100005110(v42, v43);
  uint64_t v27 = URL.path.getter(v26);
  uint64_t v29 = v28;
  uint64_t v22 = v26;
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t))(v25 + 136))(v27);
  swift_bridgeObjectRelease(v29);
  if ((v23 & 1) == 0)
  {
    sub_100006034(v42);
    goto LABEL_11;
  }

  char v30 = v39;
  sub_100006034(v42);
  if ((v30 & 1) == 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v37, v9);
    goto LABEL_12;
  }

  uint64_t v31 = a1;
  BOOL v33 = v37;
  uint64_t v32 = v38;
  uint64_t v34 = (void *)sub_1000D5E2C(v31, v37, v19, 1LL);
  if (!v32)
  {
    sub_1000D62E4(v34);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
    goto LABEL_12;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
  swift_bridgeObjectRelease(v40);
  sub_100006034(v45);
  return v22;
}

uint64_t sub_1000D5E2C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v58) = a4;
  uint64_t v55 = a3;
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v59 = v10;
  uint64_t v60 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v65 = (char *)v54 - v14;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100005110(a1, v15);
  sub_1001073DC(v15, v16);
  uint64_t v17 = v64;
  BOOL v18 = sub_100005110(v62, v63);
  uint64_t v19 = URL.path.getter(v18);
  uint64_t v21 = v20;
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t))(v17 + 136))(v19);
  swift_bridgeObjectRelease(v21);
  sub_100006034(v62);
  uint64_t v22 = _swiftEmptyArrayStorage;
  if ((v15 & 1) == 0) {
    return (uint64_t)v22;
  }
  uint64_t v24 = a1[3];
  uint64_t v23 = a1[4];
  sub_100005110(a1, v24);
  if ((v58 & 1) != 0)
  {
    sub_1001073DC(v24, v23);
    uint64_t v25 = v63;
    uint64_t v26 = v64;
    sub_100005110(v62, v63);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v26 + 24))( a2,  _swiftEmptyArrayStorage,  1LL,  v25,  v26);
  }

  else
  {
    sub_1001073DC(v24, v23);
    uint64_t v28 = v63;
    uint64_t v29 = v64;
    sub_100005110(v62, v63);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(v29 + 32))( a2,  _swiftEmptyArrayStorage,  0LL,  v28,  v29);
  }

  uint64_t v30 = v27;
  uint64_t result = sub_100006034(v62);
  if (v4) {
    return (uint64_t)v22;
  }
  uint64_t v32 = v60;
  v62[0] = _swiftEmptyArrayStorage;
  uint64_t v58 = *(void *)(v30 + 16);
  if (!v58)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v9, 1LL, 1LL, v59);
LABEL_27:
    uint64_t v51 = v55;
LABEL_28:
    swift_bridgeObjectRelease(v30);
    uint64_t v52 = sub_100012824((uint64_t)v9, (uint64_t *)&unk_10015BA30);
    uint64_t v53 = v62[0];
    __chkstk_darwin(v52);
    v54[-2] = a1;
    v54[-1] = v51;
    uint64_t v22 = sub_1000D6414((void (*)(uint64_t *__return_ptr, char *))sub_1000DA808, (uint64_t)&v54[-4], v53);
    swift_release(v53);
    return (uint64_t)v22;
  }

  v54[0] = a1;
  v54[1] = 0LL;
  unint64_t v33 = 0LL;
  uint64_t v56 = v9;
  uint64_t v57 = v30;
  uint64_t v34 = v59;
  while (v33 < *(void *)(v30 + 16))
  {
    unint64_t v35 = (*(unsigned __int8 *)(v32 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    uint64_t v36 = *(void *)(v32 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v9, v30 + v35 + v36 * v33, v34);
    Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v37(v9, 0LL, 1LL, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1LL, v34) == 1)
    {
      uint64_t v51 = v55;
      a1 = (void *)v54[0];
      goto LABEL_28;
    }

    uint64_t v38 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 32);
    uint64_t v39 = v38(v65, v9, v34);
    uint64_t v40 = URL.pathExtension.getter(v39);
    uint64_t v42 = v41;
    uint64_t v43 = sub_1000F55B4();
    uint64_t v44 = *((void *)v43 + 1);
    if (v40 == *(void *)v43 && v42 == v44
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, *(void *)v43, v44, 0LL) & 1) != 0
      || (uint64_t v45 = sub_1000F61A4(), v46 = *((void *)v45 + 1), v40 == *(void *)v45) && v42 == v46)
    {
      swift_bridgeObjectRelease(v42);
LABEL_16:
      v38(v61, v65, v34);
      uint64_t v47 = v62[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v62[0]) & 1) == 0)
      {
        sub_10003DFCC(0LL, *(void *)(v47 + 16) + 1LL, 1);
        uint64_t v47 = v62[0];
      }

      unint64_t v49 = *(void *)(v47 + 16);
      unint64_t v48 = *(void *)(v47 + 24);
      uint64_t v30 = v57;
      if (v49 >= v48 >> 1)
      {
        sub_10003DFCC(v48 > 1, v49 + 1, 1);
        uint64_t v30 = v57;
        uint64_t v47 = v62[0];
      }

      *(void *)(v47 + 16) = v49 + 1;
      uint64_t v34 = v59;
      uint64_t result = v38((char *)(v47 + v35 + v49 * v36), v61, v59);
      v62[0] = v47;
      uint64_t v9 = v56;
      uint64_t v32 = v60;
      goto LABEL_21;
    }

    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, *(void *)v45, v46, 0LL);
    swift_bridgeObjectRelease(v42);
    if ((v50 & 1) != 0) {
      goto LABEL_16;
    }
    uint64_t v32 = v60;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v65, v34);
    uint64_t v30 = v57;
LABEL_21:
    if (v58 == ++v33)
    {
      a1 = (void *)v54[0];
      v37(v9, 1LL, 1LL, v34);
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

void *sub_1000D62E4(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v12 = v4 + v2;
  }
  else {
    int64_t v12 = v4;
  }
  uint64_t result = sub_1000D8308(result, v12, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

void *sub_1000D63E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a1;
  void v4[3] = a3;
  return sub_1000D6414((void (*)(uint64_t *__return_ptr, char *))sub_1000DA808, (uint64_t)v4, a2);
}

void *sub_1000D6414(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  void (*v43)(uint64_t *__return_ptr, char *);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v4 = v3;
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    uint64_t v39 = *(void *)(v7 + 72);
    uint64_t v40 = v14;
    uint64_t v37 = a3;
    __n128 v15 = swift_bridgeObjectRetain(a3);
    uint64_t v45 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v44 = v12;
      v40(v11, v13, v6, v15);
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v16)(v11, 0LL, 1LL, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1LL, v6) == 1)
      {
        a3 = v37;
        goto LABEL_23;
      }

      uint64_t v17 = v41;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v41, v11, v6);
      v43(&v46, v17);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
        swift_bridgeObjectRelease(v45);
        return (void *)swift_bridgeObjectRelease(v37);
      }

      uint64_t v38 = v16;
      uint64_t v18 = v7;
      uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
      uint64_t v20 = v6;
      v19(v17, v6);
      uint64_t v21 = v46;
      uint64_t v22 = *(void *)(v46 + 16);
      uint64_t result = v45;
      int64_t v24 = v45[2];
      int64_t v25 = v24 + v22;
      if (__OFADD__(v24, v22)) {
        break;
      }
      uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(v45);
      uint64_t v26 = v45;
      if (!(_DWORD)result || v25 > v45[3] >> 1)
      {
        if (v24 <= v25) {
          int64_t v27 = v24 + v22;
        }
        else {
          int64_t v27 = v24;
        }
        uint64_t result = sub_1000D8308(result, v27, 1, v45);
        uint64_t v26 = result;
      }

      uint64_t v28 = *(void *)(v21 + 16);
      uint64_t v45 = v26;
      if (v28)
      {
        uint64_t v29 = v26[2];
        if ((v26[3] >> 1) - v29 < v22) {
          goto LABEL_26;
        }
        uint64_t v30 = (uint64_t)&v26[5 * v29 + 4];
        sub_100005FB4(&qword_10015BB18);
        uint64_t result = (void *)swift_arrayInitWithCopy(v30);
        if (v22)
        {
          uint64_t v31 = v45[2];
          BOOL v32 = __OFADD__(v31, v22);
          uint64_t v33 = v31 + v22;
          if (v32) {
            goto LABEL_27;
          }
          v45[2] = v33;
        }
      }

      else if (v22)
      {
        goto LABEL_25;
      }

      swift_bridgeObjectRelease(v21);
      v13 += v39;
      uint64_t v12 = v44 - 1;
      uint64_t v4 = 0LL;
      uint64_t v6 = v20;
      uint64_t v7 = v18;
      if (v44 == 1)
      {
        a3 = v37;
        v38(v11, 1LL, 1LL, v6, v15);
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    __n128 v35 = swift_bridgeObjectRetain(a3);
    uint64_t v45 = _swiftEmptyArrayStorage;
    v34(v11, 1LL, 1LL, v6, v35);
LABEL_23:
    swift_bridgeObjectRelease(a3);
    return v45;
  }

  return result;
}

uint64_t sub_1000D6718(void *a1, uint64_t a2)
{
  return v4;
}

uint64_t sub_1000D679C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v14 = __chkstk_darwin(a5);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v17(v14, v16);
  if (v11) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  }
  return result;
}

uint64_t sub_1000D681C(uint64_t a1)
{
  if (!swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for Bool, 0LL))
  {
    if (swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for Int, 0LL))
    {
      uint64_t v24 = v22;
      unint64_t v3 = sub_1000DA2F0();
      uint64_t v4 = BinaryInteger.description.getter(&type metadata for Int, v3);
LABEL_7:
      uint64_t v2 = v4;
      goto LABEL_15;
    }

    if (!swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for String, 0LL))
    {
      uint64_t v5 = sub_100005FB4(&qword_10015BA48);
      if (swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v5, 0LL))
      {
        uint64_t v6 = v24;
        uint64_t v22 = 91LL;
        unint64_t v23 = 0xE100000000000000LL;
        uint64_t v7 = sub_1000D6AD4(v24);
        swift_bridgeObjectRelease(v6);
        uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
        uint64_t v9 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v10 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v8, v9);
        uint64_t v12 = v11;
        swift_bridgeObjectRelease(v7);
      }

      else
      {
        uint64_t v13 = sub_100005FB4((uint64_t *)&unk_10015BA50);
        if (!swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v13, 0LL))
        {
          sub_100006054(a1, (uint64_t)&v22);
          uint64_t v4 = String.init<A>(describing:)(&v22, (char *)&type metadata for Any + 8);
          goto LABEL_7;
        }

        uint64_t v14 = v24;
        uint64_t v15 = sub_1000D6BAC(v24);
        swift_bridgeObjectRelease(v14);
        uint64_t v22 = v15;
        uint64_t v16 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
        uint64_t v17 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v10 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v16, v17);
        uint64_t v12 = v18;
        swift_bridgeObjectRelease(v15);
        uint64_t v22 = 91LL;
        unint64_t v23 = 0xE100000000000000LL;
      }

      v19._uint64_t countAndFlagsBits = v10;
      v19._object = v12;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v12);
      v20._uint64_t countAndFlagsBits = 93LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
    }

    uint64_t v2 = v22;
    goto LABEL_15;
  }

  if ((_BYTE)v22) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
LABEL_15:
  sub_100006034(v25);
  return v2;
}

void *sub_1000D6AD4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000CC84(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      uint64_t v4 = sub_1000D681C(v3);
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10000CC84(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      void v9[5] = v6;
      v3 += 32LL;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000D6BAC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  uint64_t v3 = a1;
  uint64_t v38 = _swiftEmptyArrayStorage;
  sub_10000CC84(0, v1, 0);
  uint64_t result = sub_100010D14(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  uint64_t v8 = v3 + 64;
  uint64_t v29 = v3 + 64;
  uint64_t v26 = v3 + 80;
  int64_t v27 = v1;
  uint64_t v30 = v3;
  int v28 = v5;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v3 + 56);
    uint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_100006054(v12 + 32 * v6, (uint64_t)v37);
    v36[0] = v15;
    v36[1] = v14;
    *(void *)&__int128 v34 = v15;
    *((void *)&v34 + 1) = v14;
    sub_100006054((uint64_t)v37, (uint64_t)v35);
    __int128 v32 = v34;
    v33[0] = v35[0];
    v33[1] = v35[1];
    swift_bridgeObjectRetain_n(v14, 2LL);
    sub_100012824((uint64_t)v36, &qword_100157C40);
    __int128 v31 = v32;
    swift_bridgeObjectRetain(*((void *)&v32 + 1));
    v16._uint64_t countAndFlagsBits = 8250LL;
    v16._object = (void *)0xE200000000000000LL;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = sub_1000D681C(v33);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    sub_100012824((uint64_t)&v32, &qword_100157C40);
    uint64_t v2 = v38;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v38);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000CC84(0, v2[2] + 1LL, 1);
      uint64_t v2 = v38;
    }

    unint64_t v20 = v2[2];
    unint64_t v19 = v2[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t result = sub_10000CC84(v19 > 1, v20 + 1, 1);
      uint64_t v2 = v38;
    }

    v2[2] = v20 + 1;
    *(_OWORD *)&v2[2 * v20 + 4] = v31;
    uint64_t v3 = v30;
    int64_t v9 = 1LL << *(_BYTE *)(v30 + 32);
    if (v6 >= v9) {
      goto LABEL_27;
    }
    uint64_t v8 = v29;
    uint64_t v21 = *(void *)(v29 + 8 * v11);
    if ((v21 & (1LL << v6)) == 0) {
      goto LABEL_28;
    }
    int v5 = v28;
    if (*(_DWORD *)(v30 + 36) != v28) {
      goto LABEL_29;
    }
    unint64_t v22 = v21 & (-2LL << (v6 & 0x3F));
    if (v22)
    {
      int64_t v9 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v10 = v27;
    }

    else
    {
      unint64_t v23 = v11 + 1;
      unint64_t v24 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v27;
      if (v11 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v29 + 8 * v23);
        if (v25)
        {
LABEL_22:
          int64_t v9 = __clz(__rbit64(v25)) + (v23 << 6);
        }

        else
        {
          while (v24 - 2 != v11)
          {
            unint64_t v25 = *(void *)(v26 + 8 * v11++);
            if (v25)
            {
              unint64_t v23 = v11 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return (uint64_t)v2;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000D6E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
}

uint64_t sub_1000D6EF4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess(v4, v6, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 40LL))(v4, a1);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000D6F60(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000D6FA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v35 - v10);
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  sub_100005110(v12, v13);
  sub_1001073DC(v13, v14);
  uint64_t v15 = v42;
  uint64_t v16 = v43;
  sub_100005110(&v40, v42);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(v16 + 16))(a1, a2, 0LL, v15, v16);
  unint64_t v19 = v18;
  sub_100006034(&v40);
  if (v19 >> 60 == 15)
  {
    unint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease(v41);
    unint64_t v40 = 0xD000000000000015LL;
    unint64_t v41 = 0x800000010012AD30LL;
    v20._uint64_t countAndFlagsBits = a1;
    v20._object = a2;
    String.append(_:)(v20);
    uint64_t v21 = v40;
    unint64_t v22 = v41;
    unint64_t v23 = sub_100012624();
    uint64_t v24 = swift_allocError(&type metadata for KMError, v23, 0LL, 0LL);
    *(void *)uint64_t v25 = v21;
    *(void *)(v25 + 8) = v22;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_OWORD *)(v25 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(void *)(v25 + 64) = 0LL;
    *(_BYTE *)(v25 + 7sub_100006034(v0 + 2) = 10;
    swift_willThrow(v24);
  }

  else
  {
    uint64_t v35 = a1;
    uint64_t v36 = a2;
    uint64_t v26 = type metadata accessor for PropertyListDecoder(0LL);
    uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    uint64_t v28 = PropertyListDecoder.init()(v27);
    uint64_t v21 = v28;
    uint64_t v29 = v39;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v7, v17, v19, v7, *(void *)(v44 + 88));
    if (v29)
    {
      swift_release(v28);
      sub_10002193C(v17, v19);
    }

    else
    {
      uint64_t v30 = v37;
      (*(void (**)(char *, void *, uint64_t))(v38 + 16))(v37, v11, v7);
      sub_100005F70(a3, (uint64_t)&v40);
      __int128 v31 = *(uint64_t (**)(uint64_t, void *, char *, unint64_t *, __n128))(v44 + 160);
      __int128 v32 = v36;
      __n128 v33 = swift_bridgeObjectRetain(v36);
      uint64_t v21 = v31(v35, v32, v30, &v40, v33);
      swift_release(v28);
      sub_10002193C(v17, v19);
      (*(void (**)(void *, uint64_t))(v38 + 8))(v11, v7);
    }
  }

  return v21;
}

char *sub_1000D7238(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v9 = (char *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(*(void *)v9 + 80LL) - 8LL) + 32LL))( &v9[*(void *)(*(void *)v9 + 120LL)],  a3);
  *((void *)v9 + sub_100006034(v0 + 2) = a1;
  *((void *)v9 + 3) = a2;
  sub_100005158(a4, (uint64_t)(v9 + 32));
  return v9;
}

uint64_t sub_1000D72B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = *v1;
  unint64_t v54 = *(void *)(v52 + 80);
  uint64_t v51 = *(void *)(v54 - 8);
  __chkstk_darwin(a1);
  uint64_t v53 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  unint64_t v11 = (void *)v2[3];
  uint64_t v50 = v2[2];
  uint64_t v12 = URL.init(fileURLWithPath:)(v50, v11);
  URL.deletingLastPathComponent()(v12);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  uint64_t v14 = v2[7];
  uint64_t v15 = v2[8];
  sub_100005110(v2 + 4, v14);
  sub_1001073DC(v14, v15);
  uint64_t v17 = v57;
  uint64_t v16 = v58;
  sub_100005110(&v55, v57);
  uint64_t v18 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 64))(v10, v17, v16);
  if (v18)
  {
    v13(v10, v4);
    return sub_100006034(&v55);
  }

  else
  {
    uint64_t v46 = v2 + 4;
    uint64_t v47 = v11;
    unint64_t v48 = v10;
    unint64_t v49 = v13;
    uint64_t v59 = v4;
    sub_100006034(&v55);
    uint64_t v20 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    uint64_t v21 = PropertyListEncoder.init()();
    uint64_t v22 = dispatch thunk of PropertyListEncoder.outputFormat.setter(100LL);
    uint64_t v23 = v53;
    v24.n128_f64[0] = (*(double (**)(uint64_t))(*v2 + 128LL))(v22);
    unint64_t v25 = v54;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v23, v54, *(void *)(v52 + 96), v24);
    unint64_t v28 = v27;
    uint64_t v52 = v21;
    (*(void (**)(uint64_t, unint64_t))(v51 + 8))(v23, v25);
    uint64_t v29 = v2[7];
    uint64_t v30 = v2[8];
    sub_100005110(v46, v29);
    sub_1001073DC(v29, v30);
    uint64_t v31 = v57;
    uint64_t v32 = v58;
    sub_100005110(&v55, v57);
    __n128 v33 = *(uint64_t (**)(uint64_t, void *, uint64_t, unint64_t, void, uint64_t, uint64_t))(v32 + 40);
    sub_1000125E0(v26, v28);
    uint64_t v34 = v50;
    unint64_t v35 = v28;
    uint64_t v36 = v47;
    LOBYTE(v31) = v33(v50, v47, v26, v35, 0LL, v31, v32);
    uint64_t v53 = v26;
    unint64_t v54 = v35;
    sub_10001226C(v26, v35);
    sub_100006034(&v55);
    uint64_t v37 = v59;
    uint64_t v39 = v48;
    uint64_t v38 = (uint64_t (*)(char *, uint64_t))v49;
    if ((v31 & 1) != 0)
    {
      v49(v48, v59);
      sub_10001226C(v53, v54);
      return swift_release(v52);
    }

    else
    {
      unint64_t v55 = 0LL;
      unint64_t v56 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(33LL);
      swift_bridgeObjectRelease(v56);
      unint64_t v55 = 0xD00000000000001FLL;
      unint64_t v56 = 0x800000010012AD50LL;
      swift_bridgeObjectRetain(v36);
      v40._uint64_t countAndFlagsBits = v34;
      v40._object = v36;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v36);
      unint64_t v41 = v55;
      unint64_t v42 = v56;
      unint64_t v43 = sub_100012624();
      uint64_t v44 = swift_allocError(&type metadata for KMError, v43, 0LL, 0LL);
      *(void *)uint64_t v45 = v41;
      *(void *)(v45 + 8) = v42;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v45 + 48) = 0u;
      *(void *)(v45 + 64) = 0LL;
      *(_BYTE *)(v45 + 7sub_100006034(v0 + 2) = 20;
      swift_willThrow(v44);
      swift_release(v52);
      sub_10001226C(v53, v54);
      return v38(v39, v37);
    }
  }

uint64_t sub_1000D7684()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 4;
  uint64_t v3 = v0[7];
  uint64_t v4 = v1[8];
  sub_100005110(v2, v3);
  sub_1001073DC(v3, v4);
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  sub_100005110(v14, v15);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 136))(v7, v8, 0LL, v5, v6);
  uint64_t result = sub_100006034(v14);
  if ((v3 & 1) != 0)
  {
    uint64_t v10 = v1[7];
    uint64_t v11 = v1[8];
    sub_100005110(v2, v10);
    sub_1001073DC(v10, v11);
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    sub_100005110(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(v7, v8, v12, v13);
    return sub_100006034(v14);
  }

  return result;
}

char *sub_1000D77A0()
{
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRelease(*((void *)v0 + 3));
  sub_100006034((void *)v0 + 4);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 120LL)]);
  return v0;
}

uint64_t sub_1000D77EC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000D7810()
{
  xpc_object_t v0 = xpc_array_create(0LL, 0LL);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease(v0);
  qword_1001758C0 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D7850()
{
  xpc_object_t v0 = xpc_BOOL_create(0);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease(v0);
  qword_1001758C8 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D788C()
{
  xpc_object_t v0 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease(v0);
  qword_1001758D0 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D78D0()
{
  xpc_object_t v0 = xpc_string_create("");
  xpc_type_t type = xpc_get_type(v0);
  uint64_t result = swift_unknownObjectRelease(v0);
  qword_1001758D8 = (uint64_t)type;
  return result;
}

BOOL sub_1000D7910(void *a1)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  return sub_1000D9918(a1, v1, ObjectType, &qword_100171B70, (xpc_type_t *)&qword_1001758D0, (uint64_t)sub_1000D788C);
}

BOOL sub_1000D795C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  return sub_1000D9918(v1, v3, a1, &qword_100171B70, (xpc_type_t *)&qword_1001758D0, (uint64_t)sub_1000D788C);
}

xpc_object_t sub_1000D79A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for XPCUtil();
  uint64_t v7 = String.utf8CString.getter(a1);
  xpc_object_t v8 = xpc_dictionary_get_value(v3, (const char *)(v7 + 32));
  swift_release(v7);
  return v8;
}

const char *sub_1000D7A40()
{
  uint64_t result = xpc_dictionary_get_string(v0, _xpc_error_key_description);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  return result;
}

const char *sub_1000D7A78(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  uint64_t result = xpc_string_get_string_ptr(v1);
  if (result) {
    return (const char *)String.init(cString:)(result);
  }
  return result;
}

uint64_t sub_1000D7AE0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCUtil();
  char v15 = 1;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v4 = swift_allocObject(&unk_10014EA90, 32LL, 7LL);
  *(void *)(v4 + 16) = &v15;
  *(void *)(v4 + 24) = &v14;
  uint64_t v5 = swift_allocObject(&unk_10014EAB8, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000DA8C4;
  *(void *)(v5 + 24) = v4;
  v12[4] = sub_1000DA9A8;
  uint64_t v13 = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  _OWORD v12[2] = sub_1000D7C80;
  v12[3] = &unk_10014EAD0;
  uint64_t v6 = _Block_copy(v12);
  uint64_t v7 = v13;
  swift_retain(v5);
  swift_release(v7);
  xpc_array_apply(v1, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 87LL, 957LL, 31LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v10 = v14;
    if (v15 == 1)
    {
      swift_bridgeObjectRetain(v14);
      uint64_t v11 = v10;
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    swift_release(v4);
    swift_bridgeObjectRelease(v10);
    return (uint64_t)v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D7C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

BOOL sub_1000D7CD0(void *a1)
{
  return sub_1000D7CE8(a1, (uint64_t (*)(void))sub_100090314);
}

BOOL sub_1000D7CDC(void *a1)
{
  return sub_1000D7CE8(a1, (uint64_t (*)(void))sub_100090320);
}

BOOL sub_1000D7CE8(void *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for XPCUtil();
  uint64_t ObjectType = swift_getObjectType(a1);
  char v6 = (uint64_t *)sub_10009032C();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  xpc_object_t v9 = sub_1000D79A8(v7, v8, ObjectType);
  swift_bridgeObjectRelease(v8);
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v10 = swift_getObjectType(v9);
  uint64_t v11 = sub_1000D7A78(v10);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  char v15 = (void *)a2();
  uint64_t v16 = v15[1];
  if (v13 == (const char *)*v15 && v14 == v16)
  {
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0LL);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
LABEL_18:
      xpc_object_t v36 = v9;
LABEL_19:
      swift_unknownObjectRelease(v36);
LABEL_20:
      swift_unknownObjectRelease(a1);
      return 0LL;
    }
  }

  uint64_t v18 = (uint64_t *)sub_100090338();
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  xpc_object_t v21 = sub_1000D79A8(v19, v20, ObjectType);
  swift_bridgeObjectRelease(v20);
  if (!v21) {
    goto LABEL_18;
  }
  uint64_t v22 = swift_getObjectType(v21);
  if (!sub_1000D9918(v21, v4, v22, &qword_100171B70, (xpc_type_t *)&qword_1001758D0, (uint64_t)sub_1000D788C)
    || (uint64_t v23 = (uint64_t *)sub_100090344(),
        uint64_t v24 = *v23,
        uint64_t v25 = v23[1],
        swift_bridgeObjectRetain(v25),
        xpc_object_t v26 = sub_1000D79A8(v24, v25, v22),
        swift_bridgeObjectRelease(v25),
        !v26))
  {
    swift_unknownObjectRelease(v21);
    goto LABEL_18;
  }

  uint64_t v27 = swift_getObjectType(v26);
  if (!sub_1000D9918(v26, v4, v27, &qword_100171B68, (xpc_type_t *)&qword_1001758C8, (uint64_t)sub_1000D7850))
  {
    swift_unknownObjectRelease(v26);
    swift_unknownObjectRelease(v9);
    xpc_object_t v36 = v21;
    goto LABEL_19;
  }

  BOOL value = xpc_BOOL_get_value(v26);
  uint64_t v29 = (uint64_t *)sub_100090350();
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  swift_bridgeObjectRetain(v31);
  xpc_object_t v32 = sub_1000D79A8(v30, v31, v22);
  swift_bridgeObjectRelease(v31);
  if (!v32)
  {
    swift_unknownObjectRelease(v21);
    xpc_object_t v37 = v9;
LABEL_24:
    swift_unknownObjectRelease(v37);
    xpc_object_t v36 = v26;
    goto LABEL_19;
  }

  uint64_t v33 = swift_getObjectType(v32);
  if (!sub_1000D9918(v32, v4, v33, &qword_100171B60, (xpc_type_t *)&qword_1001758C0, (uint64_t)sub_1000D7810))
  {
    swift_unknownObjectRelease(v32);
    swift_unknownObjectRelease(v9);
    xpc_object_t v37 = v21;
    goto LABEL_24;
  }

  uint64_t v34 = sub_1000D7AE0(v33);
  swift_unknownObjectRelease(v9);
  swift_unknownObjectRelease(v21);
  swift_unknownObjectRelease(v26);
  swift_unknownObjectRelease(v32);
  swift_unknownObjectRelease(a1);
  return v34 && value;
}

uint64_t sub_1000D7FF4()
{
  return kIOMainPortDefault;
}

uint64_t sub_1000D8004(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = String.utf8CString.getter(a1);
  uint64_t v5 = os_transaction_create(v4 + 32);
  uint64_t v6 = swift_release(v4);
  a3(v6);
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_1000D8050()
{
  if (qword_100171B80 != -1) {
    swift_once(&qword_100171B80, sub_1000D8090);
  }
  return byte_100171B88;
}

uint64_t sub_1000D8090()
{
  xpc_object_t v0 = (uint64_t *)sub_10009023C();
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = (uint64_t *)sub_10008FAD8();
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  uint64_t v6 = sub_10006F3DC(v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v4);
  v13[2] = v6;
  void v13[3] = v8;
  v13[0] = 32LL;
  v13[1] = 0xE100000000000000LL;
  unint64_t v9 = sub_10002657C();
  uint64_t v10 = (void *)StringProtocol.components<A>(separatedBy:)( v13,  &type metadata for String,  &type metadata for String,  v9,  v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v11 = sub_10003464C(v2, v1, v10);
  swift_bridgeObjectRelease(v1);
  uint64_t result = swift_bridgeObjectRelease(v10);
  byte_100171B88 = v11 & 1;
  return result;
}

void sub_1000D8190(int *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  memset((void *)(v7 + v9), a2, v12);
}

char *sub_1000D8210(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100159C88);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  char v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000D8308(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BA40);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100005FB4(&qword_10015BB18);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000D843C(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = 0LL;
  }
  if (v3) {
    return sub_100005FB4(&qword_10015BB40);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage(0LL, a2);
  }
}

uint64_t sub_1000D8488(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = a2 & 0xFFFFFFFFFFFFF8LL;
  if ((result & 1) == 0) {
    uint64_t v6 = a2;
  }
  if (*(void *)(v6 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1000D84D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4((uint64_t *)&unk_10015BB20);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    xpc_object_t v32 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_37;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_37;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v32;
                goto LABEL_44;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v31;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_46;
                }
                if (v9 >= v14) {
                  goto LABEL_37;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

unint64_t sub_1000D8798(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v11);
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            unint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              __int128 v9 = v18[1];
              _OWORD *v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1LL << result) - 1;
  }

  *int64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

_OWORD *sub_1000D892C(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100099A50(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        unint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_100006034(v17);
        return sub_100017790(a1, v17);
      }

      return sub_1000D8A44(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000D8AA8();
      goto LABEL_7;
    }

    sub_1000D84D8(v13, a3 & 1);
    unint64_t v19 = sub_100099A50(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_1000D8A44(v10, a2, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
  return result;
}

_OWORD *sub_1000D8A44(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100017790(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1000D8AA8()
{
  uint64_t v1 = v0;
  sub_100005FB4((uint64_t *)&unk_10015BB20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_1000D8C68(void *a1)
{
  return sub_10000C82C(0LL, a1[2], 0, a1);
}

uint64_t sub_1000D8C7C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_1000D93D4(0LL, v3, 1LL, a1);
      }
      return result;
    }

    goto LABEL_136;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_135;
  }
  Swift::Int v114 = v3;
  uint64_t v111 = result;
  uint64_t v116 = v1;
  uint64_t v107 = a1;
  if (v3 <= 1)
  {
    unint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v115 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_100;
    }

    uint64_t v110 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(void *)(result + 16) = v6;
    Swift::Int v3 = v114;
    uint64_t v110 = (void *)result;
    uint64_t v115 = (char *)(result + 32);
  }

  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v108 = *a1 + 24;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v117 = *a1;
  while (1)
  {
    Swift::Int v12 = v8++;
    Swift::Int v113 = v12;
    if (v8 < v3)
    {
      int64_t v13 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      uint64_t v16 = (uint64_t *)(v9 + 16 * v12);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v17);
      uint64_t v19 = String.count.getter(v15, v14);
      uint64_t v20 = String.count.getter(v18, v17);
      swift_bridgeObjectRelease(v14);
      uint64_t result = swift_bridgeObjectRelease(v17);
      Swift::Int v8 = v12 + 2;
      if (v12 + 2 < v3)
      {
        int64_t v21 = (void *)(v108 + 16 * v12);
        uint64_t v22 = v21;
        while (1)
        {
          uint64_t v23 = v22[2];
          v22 += 2;
          uint64_t v24 = *(v21 - 1);
          uint64_t v25 = *v21;
          uint64_t v26 = v21[1];
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v25);
          uint64_t v27 = String.count.getter(v26, v23);
          uint64_t v28 = String.count.getter(v24, v25);
          swift_bridgeObjectRelease(v23);
          uint64_t result = swift_bridgeObjectRelease(v25);
          if (v20 < v19 == v28 >= v27) {
            break;
          }
          ++v8;
          int64_t v21 = v22;
          Swift::Int v3 = v114;
          if (v114 == v8)
          {
            Swift::Int v8 = v114;
            goto LABEL_23;
          }
        }

        Swift::Int v3 = v114;
LABEL_23:
        Swift::Int v12 = v113;
      }

      uint64_t v9 = v117;
      if (v20 < v19)
      {
        if (v8 < v12) {
          goto LABEL_137;
        }
        if (v12 < v8)
        {
          uint64_t v29 = 16 * v8;
          uint64_t v30 = 16 * v12;
          Swift::Int v31 = v8;
          Swift::Int v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v117) {
                goto LABEL_142;
              }
              uint64_t v33 = v117 + v29;
              uint64_t v34 = *(void *)(v117 + v30);
              uint64_t v35 = *(void *)(v117 + v30 + 8);
              *(_OWORD *)(v117 + v30) = *(_OWORD *)(v117 + v29 - 16);
              *(void *)(v33 - 16) = v34;
              *(void *)(v33 - 8) = v35;
            }

            ++v32;
            v29 -= 16LL;
            v30 += 16LL;
          }

          while (v32 < v31);
        }
      }
    }

    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_134;
      }
      if (v8 - v12 < v111)
      {
        Swift::Int v36 = v12 + v111;
        if (__OFADD__(v12, v111)) {
          goto LABEL_138;
        }
        if (v36 >= v3) {
          Swift::Int v36 = v3;
        }
        if (v36 < v12) {
          goto LABEL_139;
        }
        if (v8 != v36)
        {
          uint64_t v109 = v10;
          xpc_object_t v37 = (void *)(v9 + 16 * v8);
          Swift::Int v112 = v36;
          do
          {
            uint64_t v38 = (uint64_t *)(v9 + 16 * v8);
            uint64_t v39 = *v38;
            uint64_t v40 = v38[1];
            unint64_t v41 = v37;
            while (1)
            {
              uint64_t v42 = *(v41 - 2);
              uint64_t v43 = *(v41 - 1);
              swift_bridgeObjectRetain(v40);
              swift_bridgeObjectRetain(v43);
              uint64_t v44 = String.count.getter(v39, v40);
              uint64_t v45 = String.count.getter(v42, v43);
              swift_bridgeObjectRelease(v40);
              uint64_t result = swift_bridgeObjectRelease(v43);
              if (v45 >= v44) {
                break;
              }
              uint64_t v9 = v117;
              if (!v117) {
                goto LABEL_140;
              }
              uint64_t v39 = *v41;
              uint64_t v40 = v41[1];
              *(_OWORD *)unint64_t v41 = *((_OWORD *)v41 - 1);
              *(v41 - 1) = v40;
              *(v41 - sub_100006034(v0 + 2) = v39;
              v41 -= 2;
              if (v8 == ++v12) {
                goto LABEL_42;
              }
            }

            uint64_t v9 = v117;
LABEL_42:
            ++v8;
            v37 += 2;
            Swift::Int v12 = v113;
          }

          while (v8 != v112);
          Swift::Int v8 = v112;
          uint64_t v10 = v109;
        }
      }
    }

    if (v8 < v12)
    {
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000593C4(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
      uint64_t v10 = (char *)result;
    }

    unint64_t v47 = *((void *)v10 + 2);
    unint64_t v46 = *((void *)v10 + 3);
    unint64_t v11 = v47 + 1;
    uint64_t v9 = v117;
    if (v47 >= v46 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000593C4((char *)(v46 > 1), v47 + 1, 1, v10);
      uint64_t v9 = v117;
      uint64_t v10 = (char *)result;
    }

    *((void *)v10 + sub_100006034(v0 + 2) = v11;
    unint64_t v48 = v10 + 32;
    unint64_t v49 = &v10[16 * v47 + 32];
    *(void *)unint64_t v49 = v12;
    *((void *)v49 + 1) = v8;
    if (v47) {
      break;
    }
    unint64_t v11 = 1LL;
LABEL_15:
    Swift::Int v3 = v114;
    if (v8 >= v114)
    {
      unint64_t v7 = v110;
LABEL_100:
      uint64_t v110 = v7;
      if (v11 < 2)
      {
LABEL_111:
        swift_bridgeObjectRelease(v10);
        v110[2] = 0LL;
        return swift_bridgeObjectRelease(v110);
      }

      uint64_t v101 = *v107;
      while (1)
      {
        unint64_t v102 = v11 - 2;
        if (v11 < 2) {
          break;
        }
        if (!v101) {
          goto LABEL_143;
        }
        uint64_t v103 = *(void *)&v10[16 * v102 + 32];
        uint64_t v104 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = sub_1000D94D8( (char *)(v101 + 16 * v103),  (char *)(v101 + 16LL * *(void *)&v10[16 * v11 + 16]),  v101 + 16 * v104,  v115);
        if (v116) {
          goto LABEL_97;
        }
        if (v104 < v103) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000594BC((uint64_t)v10);
          uint64_t v10 = (char *)result;
        }

        if (v102 >= *((void *)v10 + 2)) {
          goto LABEL_132;
        }
        int v105 = &v10[16 * v102 + 32];
        *(void *)int v105 = v103;
        *((void *)v105 + 1) = v104;
        unint64_t v106 = *((void *)v10 + 2);
        if (v11 > v106) {
          goto LABEL_133;
        }
        uint64_t result = (uint64_t)memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v106 - v11));
        *((void *)v10 + sub_100006034(v0 + 2) = v106 - 1;
        unint64_t v11 = v106 - 1;
        if (v106 <= 2) {
          goto LABEL_111;
        }
      }

uint64_t sub_1000D93D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 16 * a3);
LABEL_5:
    unint64_t v7 = (uint64_t *)(v5 + 16 * v4);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = v16;
    uint64_t v17 = v6;
    while (1)
    {
      uint64_t v11 = *(v6 - 2);
      uint64_t v12 = *(v6 - 1);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = String.count.getter(v8, v9);
      uint64_t v14 = String.count.getter(v11, v12);
      swift_bridgeObjectRelease(v9);
      uint64_t result = swift_bridgeObjectRelease(v12);
      if (v14 >= v13)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v17 + 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v5) {
        break;
      }
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      *(_OWORD *)uint64_t v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v9;
      *(v6 - sub_100006034(v0 + 2) = v8;
      v6 -= 2;
      if (v4 == ++v10) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000D94D8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v6 = __src;
  unint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    uint64_t v15 = a4;
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    if (v7 >= v6 || v11 < 16)
    {
      uint64_t v14 = &v15[16 * v13];
      goto LABEL_43;
    }

    uint64_t v25 = (char *)(a3 - 16);
    uint64_t v14 = &a4[16 * v13];
    Swift::Int v36 = v7;
    xpc_object_t v37 = a4;
    while (1)
    {
      uint64_t v26 = *((void *)v14 - 2);
      uint64_t v27 = *((void *)v14 - 1);
      uint64_t v38 = v25 + 16;
      uint64_t v29 = *((void *)v6 - 2);
      uint64_t v30 = *((void *)v6 - 1);
      uint64_t v28 = v6 - 16;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v30);
      uint64_t v31 = String.count.getter(v26, v27);
      uint64_t v32 = String.count.getter(v29, v30);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      if (v32 >= v31)
      {
        unint64_t v33 = (unint64_t)v36;
        uint64_t v28 = v14 - 16;
        if (v38 != v14)
        {
          v14 -= 16;
          goto LABEL_37;
        }

        BOOL v34 = v25 >= v14;
        v14 -= 16;
        uint64_t v15 = v37;
        if (v34) {
          goto LABEL_38;
        }
      }

      else
      {
        unint64_t v33 = (unint64_t)v36;
        if (v38 != v6)
        {
          v6 -= 16;
LABEL_37:
          uint64_t v15 = v37;
LABEL_38:
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v28;
          goto LABEL_39;
        }

        BOOL v34 = v25 >= v6;
        v6 -= 16;
        uint64_t v15 = v37;
        if (v34) {
          goto LABEL_38;
        }
      }

void sub_1000D97B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

void *sub_1000D982C()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_100005FB4(&qword_100157C28);
    uint64_t v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    void v4[3] = 2 * v7 - 64;
    sub_1000125E0(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_10001226C(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000D9900LL);
    }
  }

  return v4;
}

BOOL sub_1000D9918(void *a1, uint64_t a2, uint64_t a3, void *a4, xpc_type_t *a5, uint64_t a6)
{
  xpc_type_t type = xpc_get_type(a1);
  if (*a4 != -1LL) {
    swift_once(a4, a6);
  }
  return type == *a5;
}

void sub_1000D9974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    uint64_t v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10)) {
      goto LABEL_7;
    }
    v9 += a1 - v10;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000D17C0(v9, a4, a5);
    return;
  }

  __break(1u);
LABEL_7:
  __break(1u);
}

void sub_1000D9A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __DataStorage._bytes.getter();
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  uint64_t v11 = __DataStorage._offset.getter();
  uint64_t v12 = a1 - v11;
  if (__OFSUB__(a1, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  BOOL v13 = __OFSUB__(a2, a1);
  uint64_t v14 = a2 - a1;
  if (v13)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v15 = __DataStorage._length.getter();
  if (v15 >= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  sub_1000D1550(v10 + v12, v10 + v12 + v16, a4, a5);
}

void sub_1000D9AE0(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1000D9B44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v9 = v5;
  LOWORD(v10) = a1;
  BYTE2(v10) = BYTE2(a1);
  HIBYTE(v10) = BYTE3(a1);
  unsigned __int8 v11 = BYTE4(a1);
  unsigned __int8 v12 = BYTE5(a1);
  unsigned __int8 v13 = BYTE6(a1);
  sub_1000D1550((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a1), v3, v2);
  if (!v6) {
    uint64_t v4 = v14;
  }
  unint64_t v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *uint64_t v1 = v9;
  v1[1] = v7;
  return v4;
}

uint64_t sub_1000D9EBC(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v5 = result;
  uint64_t result = String.count.getter(a2, a3);
  if (__OFSUB__(result, v5))
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v6 = (result - v5) & ~((result - v5) >> 63);
  uint64_t v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a2;
  }
  uint64_t v8 = v7 << 16;
  if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
    unsigned __int16 v9 = 11;
  }
  else {
    unsigned __int16 v9 = 7;
  }
  uint64_t v10 = String.index(_:offsetBy:limitedBy:)(15LL, v6, v9 | (unint64_t)(v7 << 16), a2, a3);
  uint64_t v12 = v8 | 0xB;
  if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) == 0) {
    uint64_t v12 = v8 | 7;
  }
  if ((v11 & 1) != 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v10;
  }
  return String.subscript.getter(15LL, v13, a2, a3);
}

uint64_t sub_1000D9F74(uint64_t a1, uint64_t a2)
{
  return sub_1000D1E90(a1, a2, *(void **)(v2 + 24), *(void *)(v2 + 16));
}

BOOL sub_1000D9F7C()
{
  return ((*(uint64_t (**)(void))(v0 + 24))() & 1) == 0;
}

uint64_t sub_1000D9FA4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

BOOL sub_1000D9FCC(char a1, char a2)
{
  if (qword_100171B58 != -1) {
    swift_once(&qword_100171B58, sub_1000D4220);
  }
  uint64_t v4 = qword_1001758B8;
  char v14 = a1;
  uint64_t v5 = *(void *)(qword_1001758B8 + 16);
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = sub_1000265DC();
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = 0LL;
  while (1)
  {
    char v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0) {
      break;
    }
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v9 = qword_1001758B8;
  swift_bridgeObjectRetain(qword_1001758B8);
  uint64_t v10 = sub_1000D4238(a2, v9);
  char v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) != 0 || v7 < v10;
}

uint64_t sub_1000DA0E8(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000DA1A8(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_1000DA0E8(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000DA254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1) {
    __asm { BR              X12 }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8LL) + 56LL))( a2,  1LL,  1LL);
}

unint64_t sub_1000DA2F0()
{
  unint64_t result = qword_10015BA10;
  if (!qword_10015BA10)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10015BA10);
  }

  return result;
}

uint64_t sub_1000DA334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  if (!*(void *)(v10 + 16) || (unint64_t v11 = sub_100099A50(a2), (v12 & 1) == 0))
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    swift_bridgeObjectRelease(v10);
    goto LABEL_6;
  }

  sub_100006054(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v26);
  swift_bridgeObjectRelease(v10);
  if (!*((void *)&v27 + 1))
  {
LABEL_6:
    sub_100012824((uint64_t)&v26, &qword_100157FF8);
    goto LABEL_7;
  }

  uint64_t v13 = sub_100012824((uint64_t)&v26, &qword_100157FF8);
  uint64_t v14 = static os_log_type_t.error.getter(v13);
  uint64_t v15 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_10010F110;
  uint64_t v17 = ObjectIdentifier.debugDescription.getter(a2);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_100026B64();
  *(void *)(v16 + 3sub_100006034(v0 + 2) = v17;
  *(void *)(v16 + sub_10007CFB4(v0 + 40) = v19;
  unint64_t v20 = sub_100026BA8();
  uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v21, "Warning: %s is already attached", v25[0]);
  swift_bridgeObjectRelease(v16);

LABEL_7:
  *((void *)&v27 + 1) = a4;
  uint64_t v22 = sub_100005F0C(&v26);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v22, a1, a4);
  uint64_t v23 = (uint64_t (*)(const char **, void))(*(uint64_t (**)(const char **, uint64_t, uint64_t))(a5 + 24))( v25,  a3,  a5);
  sub_1000D24DC((uint64_t)&v26, a2);
  return v23(v25, 0LL);
}

uint64_t sub_1000DA500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v48 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v47 = (char *)&v40 - v10;
  uint64_t v40 = v11;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = Array.count.getter(v12);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for _SetStorage(0LL, a2, a3);
    uint64_t v17 = (void *)static _SetStorage.allocate(capacity:)(v16);
  }

  else
  {
    uint64_t v17 = &_swiftEmptySetSingleton;
  }

  Swift::Int v43 = Array._getCount()();
  if (!v43) {
    return (uint64_t)v17;
  }
  uint64_t v18 = 0LL;
  unint64_t v46 = (char *)(v17 + 7);
  unint64_t v41 = v14;
  uint64_t v42 = v5;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v18, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20( v14,  v5 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
      + *(void *)(v48 + 72) * v18,
        a2);
      BOOL v21 = __OFADD__(v18, 1LL);
      uint64_t v22 = v18 + 1;
      if (v21) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v18, v5, a2);
      if (v40 != 8) {
        goto LABEL_23;
      }
      uint64_t v39 = result;
      uint64_t v49 = result;
      unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20(v14, (unint64_t)&v49, a2);
      swift_unknownObjectRelease(v39);
      BOOL v21 = __OFADD__(v18, 1LL);
      uint64_t v22 = v18 + 1;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v17;
      }
    }

    uint64_t v23 = v48;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
    uint64_t v45 = v22;
    v44(v47, v14, a2);
    uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v17[5], a2, a3);
    uint64_t v25 = -1LL << *((_BYTE *)v17 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    uint64_t v28 = *(void *)&v46[8 * (v26 >> 6)];
    uint64_t v29 = 1LL << v26;
    uint64_t v30 = *(void *)(v23 + 72);
    if (((1LL << v26) & v28) != 0)
    {
      uint64_t v31 = ~v25;
      do
      {
        v20(v8, v17[6] + v30 * v26, a2);
        uint64_t v32 = a3;
        char v33 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v47, a2, *(void *)(a3 + 8));
        BOOL v34 = *(void (**)(char *, uint64_t))(v48 + 8);
        v34(v8, a2);
        if ((v33 & 1) != 0)
        {
          v34(v47, a2);
          a3 = v32;
          uint64_t v14 = v41;
          uint64_t v5 = v42;
          goto LABEL_7;
        }

        unint64_t v26 = (v26 + 1) & v31;
        unint64_t v27 = v26 >> 6;
        uint64_t v28 = *(void *)&v46[8 * (v26 >> 6)];
        uint64_t v29 = 1LL << v26;
        a3 = v32;
      }

      while ((v28 & (1LL << v26)) != 0);
      uint64_t v14 = v41;
      uint64_t v5 = v42;
    }

    uint64_t v35 = v47;
    *(void *)&v46[8 * v27] = v29 | v28;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v17[6] + v30 * v26, v35, a2);
    uint64_t v37 = v17[2];
    BOOL v21 = __OFADD__(v37, 1LL);
    uint64_t v38 = v37 + 1;
    if (v21) {
      break;
    }
    void v17[2] = v38;
LABEL_7:
    uint64_t v18 = v45;
    if (v45 == v43) {
      return (uint64_t)v17;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void *sub_1000DA808@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000DA81C(a1, a2);
}

void *sub_1000DA81C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000D5AE0(*(void **)(v2 + 16), a1, *(void *)(v2 + 24));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000DA84C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = String.init(cString:)(a1 + result);
    *a2 = result;
    a2[1] = v6;
  }

  return result;
}

uint64_t type metadata accessor for XPCUtil()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd7XPCUtil);
}

uint64_t sub_1000DA8B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

BOOL sub_1000DA8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_BYTE **)(v2 + 16);
  uint64_t v4 = *(void **)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v6 = sub_1000D7A78(ObjectType);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = v6;
    uint64_t v10 = (void *)*v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    *uint64_t v4 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = sub_10000C82C(0LL, v10[2] + 1LL, 1, v10);
      *uint64_t v4 = v10;
    }

    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = sub_10000C82C((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v4 = v10;
    }

    v10[2] = v13 + 1;
    uint64_t v14 = &v10[2 * v13];
    v14[4] = v9;
    void v14[5] = v8;
  }

  else
  {
    _BYTE *v3 = 0;
  }

  return v8 != 0;
}

uint64_t sub_1000DA998()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000DA9A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000DA9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DA9DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000DA9E4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10011A328, a1);
}

uint64_t sub_1000DA9F8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DAA44 + 4 * byte_10011A30F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DAA78 + 4 * byte_10011A30A[v4]))();
}

uint64_t sub_1000DAA78(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DAA80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DAA88LL);
  }
  return result;
}

uint64_t sub_1000DAA94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DAA9CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000DAAA0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DAAA8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s18OrderSpecificationOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&_s18OrderSpecificationOMn);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

ValueMetadata *type metadata accessor for Signposters()
{
  return &type metadata for Signposters;
}

ValueMetadata *type metadata accessor for IOKitSerialization()
{
  return &type metadata for IOKitSerialization;
}

void *sub_1000DAAF4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ArchInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

void *assignWithTake for ArchInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ArchInfo()
{
  return &type metadata for ArchInfo;
}

unint64_t destroy for PackageType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s10driverkitd11PackageTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for PackageType(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for PackageType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PackageType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for PackageType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PackageType()
{
  return &type metadata for PackageType;
}

uint64_t sub_1000DAEA0(uint64_t a1)
{
  v4[0] = &unk_10011A4F8;
  v4[1] = &unk_10011A510;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for PropertyListManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListManager);
}

uint64_t initializeBufferWithCopyOfBuffer for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithTake for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for RegisteredApplicationNotification()
{
  return &type metadata for RegisteredApplicationNotification;
}

uint64_t destroy for processResults(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for processResults(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for processResults(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for processResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_DWORD *)(result + 3sub_100006034(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 36) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for processResults()
{
  return &type metadata for processResults;
}

uint64_t _s10driverkitd33RegisteredApplicationNotificationVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for UnregisteredApplicationNotification()
{
  return &type metadata for UnregisteredApplicationNotification;
}

BOOL sub_1000DB1E4(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t, void))(v1 + 24))(a1, *(void *)(v1 + 40)) & 1) == 0;
}

uint64_t sub_1000DB228(uint64_t a1, unint64_t a2)
{
  if (a2 < 2) {
    return 0LL;
  }
  uint64_t v2 = a1;
  swift_bridgeObjectRetain(a2);
  return v2;
}

uint64_t sub_1000DB26C(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0LL;
  }
  uint64_t v6 = *a1;
  if (v6 == *a2 && v3 == v4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0LL);
  }
}

Swift::Int sub_1000DB2D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v5, 0LL);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0LL);
      String.hash(into:)(v5, v1, v2);
      return Hasher._finalize()();
    }

    Swift::UInt v3 = 2LL;
  }

  else
  {
    Swift::UInt v3 = 1LL;
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000DB34C(uint64_t a1)
{
  uint64_t v3 = v1[1];
  if (!v3)
  {
    Swift::UInt v4 = 1LL;
    goto LABEL_5;
  }

  if (v3 == 1)
  {
    Swift::UInt v4 = 2LL;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }

  uint64_t v5 = *v1;
  Hasher._combine(_:)(0LL);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_1000DB3C0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(0LL);
      String.hash(into:)(v6, v2, v3);
      return Hasher._finalize()();
    }

    Swift::UInt v4 = 2LL;
  }

  else
  {
    Swift::UInt v4 = 1LL;
  }

  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000DB438()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 0x656C70706140LL;
  }
  if (v1 == 1) {
    return 0x656E6F6E40LL;
  }
  uint64_t v3 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v4._uint64_t countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x286D61657440LL;
}

__n128 sub_1000DB4C4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000DB4D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1000125E0(v2, v3);
}

Swift::Int sub_1000DB4DC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  sub_1000125E0(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_10001226C(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000DB53C(uint64_t a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  sub_1000125E0(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_10001226C(v4, v3);
}

Swift::Int sub_1000DB588(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_1000125E0(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_10001226C(v2, v3);
  return Hasher._finalize()();
}

void sub_1000DB5E4(uint64_t *a1)
{
}

void sub_1000DB5F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_1000DB654()
{
  return ((uint64_t (*)(void))((char *)&loc_1000DB694 + *((int *)qword_1000DBBE0 + (v0 >> 62))))();
}

uint64_t sub_1000DBC00(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_100013FC0(a1, a2);
  unint64_t v5 = v4;
  swift_bridgeObjectRelease(a2);
  if (v5 >> 60 == 15) {
    return 0LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000DBC50()
{
  return sub_100013B60(*v0, v0[1]);
}

uint64_t sub_1000DBC58(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t (**)(void))(a2 + 16);
  uint64_t v5 = v4();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease(v5);
  unint64_t v7 = 0xE000000000000000LL;
  if (v6)
  {
    unint64_t v36 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v38 = 0x656C7469746E6520LL;
    unint64_t v39 = 0xEF203A73746E656DLL;
    uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
    uint64_t v37 = sub_100005FB4((uint64_t *)&unk_10015BA50);
    uint64_t v35 = v8;
    uint64_t v9 = sub_1000D681C((uint64_t)&v35);
    uint64_t v11 = v10;
    sub_100006034(&v35);
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    uint64_t v13 = v38;
    unint64_t v7 = v39;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v15)
  {
    unint64_t v16 = v15;
    if (v15 == 1)
    {
      unint64_t v17 = 0xE500000000000000LL;
      uint64_t v18 = 0x656E6F6E40LL;
    }

    else
    {
      uint64_t v19 = v14;
      uint64_t v35 = 0x286D61657440LL;
      unint64_t v36 = 0xE600000000000000LL;
      String.append(_:)(*(Swift::String *)&v14);
      v20._uint64_t countAndFlagsBits = 41LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      sub_10001777C(v19, v16);
      uint64_t v18 = v35;
      unint64_t v17 = v36;
    }
  }

  else
  {
    unint64_t v17 = 0xE600000000000000LL;
    uint64_t v18 = 0x656C70706140LL;
  }

  uint64_t v35 = v18;
  unint64_t v36 = v17;
  v21._uint64_t countAndFlagsBits = 10272LL;
  v21._object = (void *)0xE200000000000000LL;
  String.append(_:)(v21);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  unint64_t v24 = v23;
  uint64_t v25 = sub_100013B60(v22, v23);
  unint64_t v27 = v26;
  sub_10001226C(v22, v24);
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._uint64_t countAndFlagsBits = 41LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  uint64_t v30 = v35;
  unint64_t v31 = v36;
  uint64_t v35 = v13;
  unint64_t v36 = v7;
  uint64_t v38 = v30;
  unint64_t v39 = v31;
  __n128 v32 = swift_bridgeObjectRetain(v31);
  uint64_t v38 = String.init<A>(_:)( &v38,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v32);
  unint64_t v39 = v33;
  String.append<A>(contentsOf:)(&v35, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v31);
  return v38;
}

uint64_t sub_1000DBEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(a4 + 16))( a1,  a2,  0LL,  0LL,  a3,  a4);
}

uint64_t sub_1000DBEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void v68[9];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  if (a3 == 3)
  {
    unint64_t v8 = sub_100012624();
    uint64_t v9 = swift_allocError(&type metadata for KMError, v8, 0LL, 0LL);
    *(void *)uint64_t v10 = 0xD000000000000041LL;
    *(void *)(v10 + 8) = 0x800000010012B0B0LL;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(void *)(v10 + 64) = 0LL;
    *(_BYTE *)(v10 + 7sub_100006034(v0 + 2) = 9;
    swift_willThrow(v9);
    return v11 & 1;
  }

  uint64_t v67 = (void *)a1;
  unint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16);
  v17(&v70, a2, a3, 0LL, 0LL, a6, a7);
  if (!v7)
  {
    sub_1000263D8((uint64_t)&v70, (uint64_t)v67, &qword_100157FF0);
    char v11 = 1;
    return v11 & 1;
  }

  uint64_t v80 = v7;
  swift_errorRetain(v7);
  uint64_t v18 = sub_100005FB4(&qword_10015AB20);
  if (!swift_dynamicCast(&v70, &v80, v18, &type metadata for KMError, 0LL))
  {
LABEL_9:
    swift_errorRelease(v80);
    return v11 & 1;
  }

  if (v79 != 45)
  {
    sub_100039508(v70, v71, v72, v73, v74, v75, v76, v77, v78, v79);
    goto LABEL_9;
  }

  uint64_t v52 = v18;
  uint64_t v60 = v70;
  uint64_t v65 = v77;
  uint64_t v64 = v76;
  uint64_t v63 = v75;
  unint64_t v62 = v74;
  BOOL v61 = v73;
  uint64_t v59 = v72;
  uint64_t v58 = v71;
  char v54 = v78;
  uint64_t v19 = swift_errorRelease(v7);
  uint64_t v56 = static os_log_type_t.info.getter(v19);
  uint64_t v57 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  Swift::String v20 = swift_allocObject(v57, 112LL, 7LL);
  uint64_t v51 = xmmword_10010F440;
  *(_OWORD *)(v20 + 16) = xmmword_10010F440;
  unint64_t v50 = *(uint64_t (**)(void))(*(void *)a2 + 200LL);
  Swift::String v21 = v50();
  unint64_t v55 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  uint64_t v66 = sub_100026B64();
  *(void *)(v20 + 64) = v66;
  uint64_t v23 = v55;
  *(void *)(v20 + 3sub_100006034(v0 + 2) = v21;
  *(void *)(v20 + sub_10007CFB4(v0 + 40) = v23;
  v68[0] = v60;
  v68[1] = v58;
  _OWORD v68[2] = v59;
  v68[3] = v61;
  v68[4] = v62;
  v68[5] = v63;
  v68[6] = v64;
  v68[7] = v65;
  unint64_t v55 = a5;
  v68[8] = v54;
  uint64_t v69 = 45;
  unint64_t v24 = sub_100082704();
  uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KMError, v24);
  uint64_t v53 = v26;
  sub_100039508(v60, v58, v59, v61, v62, v63, v64, v65, v54, 45);
  unint64_t v27 = v66;
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v27;
  Swift::String v28 = v53;
  *(void *)(v20 + 7sub_100006034(v0 + 2) = v25;
  *(void *)(v20 + 80) = v28;
  uint64_t v65 = sub_100026BA8();
  Swift::String v29 = (void *)static OS_os_log.default.getter(v65);
  os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  v29,  "Unable to determine signature for %{public}s, generating adhoc signature... (%{public}s)",  88LL,  2LL,  v20);
  swift_bridgeObjectRelease(v20);

  v17(v68, a2, 3LL, a4, v55, a6, a7);
  uint64_t v30 = v66;
  unint64_t v31 = v67;
  __n128 v32 = sub_1000263D8((uint64_t)v68, (uint64_t)v67, &qword_100157FF0);
  LODWORD(v64) = static os_log_type_t.info.getter(v32);
  __n128 result = swift_allocObject(v57, 72LL, 7LL);
  *(_OWORD *)(result + 16) = xmmword_10010F110;
  BOOL v34 = v31[3];
  if (v34)
  {
    uint64_t v35 = (void *)result;
    unint64_t v36 = v31[4];
    uint64_t v37 = sub_100005110(v31, v31[3]);
    uint64_t v38 = *(void *)(v34 - 8);
    __chkstk_darwin(v37);
    uint64_t v40 = (char *)&v49 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v38 + 16))(v40);
    unint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 32))(v34, v36);
    Swift::Int v43 = v42;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v34);
    uint64_t v44 = sub_100013B60(v41, v43);
    unint64_t v46 = v45;
    unint64_t v47 = sub_10001226C(v41, v43);
    v35[7] = &type metadata for String;
    v35[8] = v30;
    v35[4] = v44;
    v35[5] = v46;
    uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v48, "Adhoc cdhash: %{public}s", 24LL, 2LL, v35);
    swift_bridgeObjectRelease(v35);

    swift_errorRelease(v80);
    char v11 = 0;
    return v11 & 1;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000DC52C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 3sub_100006034(v0 + 2) = a3;
  *(void *)(v19 + sub_10007CFB4(v0 + 40) = a4;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + 64) = a7;
  *(void *)(v19 + 7sub_100006034(v0 + 2) = a8;
  *(_OWORD *)(v19 + 80) = a9;
  *(void *)(v19 + 96) = a10;
  sub_1000263D8(a11, v19 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_100157FE8);
  return v19;
}

uint64_t sub_1000DC5EC()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_1000DC654()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  sub_1000DEEBC(v1, *(void *)(*(void *)v0 + 32LL));
  return v1;
}

uint64_t sub_1000DC688()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  sub_1000125E0(v1, *(void *)(*(void *)v0 + 48LL));
  return v1;
}

uint64_t sub_1000DC6BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 64LL));
  return v1;
}

uint64_t sub_1000DC6EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 80LL));
  return v1;
}

uint64_t sub_1000DC71C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 96LL));
  return v1;
}

uint64_t sub_1000DC74C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A148(*v1 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, a1, &qword_100157FE8);
}

uint64_t sub_1000DC77C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011A800, a1);
  return sub_1000DBC58(a1, WitnessTable);
}

uint64_t sub_1000DC7B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10001A148(v3, a1, &qword_10015B670);
}

uint64_t sub_1000DC800(uint64_t a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1000DEED0(a1, v3);
  return swift_endAccess(v5);
}

unint64_t sub_1000DC850(const __SecCode *a1, int a2)
{
  uint64_t v3 = v2;
  int v98 = a2;
  uint64_t v5 = sub_100005FB4(&qword_100157FE8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v100 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v99 = (char *)&v93 - v8;
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v101 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  CFDictionaryRef information = 0LL;
  unint64_t v15 = SecCodeCopySigningInformation(a1, 6u, &information);
  if ((_DWORD)v15) {
    goto LABEL_7;
  }
  CFDictionaryRef v16 = information;
  if (!information) {
    goto LABEL_7;
  }
  *(void *)&__int128 v106 = 0LL;
  type metadata accessor for CFString();
  uint64_t v18 = v17;
  uint64_t v19 = sub_100012860( &qword_10015BB50,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA54);
  Swift::String v20 = v16;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v20,  &v106,  v18,  (char *)&type metadata for Any + 8,  v19);

  unint64_t v21 = v106;
  if (!(void)v106)
  {
LABEL_7:
    unint64_t v15 = v15;
    unint64_t v25 = sub_100012624();
    uint64_t v26 = swift_allocError(&type metadata for KMError, v25, 0LL, 0LL);
    *(void *)uint64_t v27 = 0xD000000000000022LL;
    *(void *)(v27 + 8) = 0x800000010012B280LL;
    *(void *)(v27 + 16) = v15;
LABEL_18:
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_BYTE *)(v27 + 7sub_100006034(v0 + 2) = 45;
    swift_willThrow(v26);
LABEL_19:

    return v15;
  }

  if (!*(void *)(v106 + 16))
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
LABEL_15:
    swift_bridgeObjectRelease(v21);
    sub_100012824((uint64_t)&v106, &qword_100157FF8);
LABEL_17:
    unint64_t v34 = sub_100012624();
    uint64_t v26 = swift_allocError(&type metadata for KMError, v34, 0LL, 0LL);
    *(void *)uint64_t v27 = 0xD00000000000002CLL;
    *(void *)(v27 + 8) = 0x800000010012B2B0LL;
    *(void *)(v27 + 16) = &_mh_execute_header;
    goto LABEL_18;
  }

  uint64_t v22 = (id)kSecCodeInfoUnique;
  unint64_t v15 = v21;
  unint64_t v23 = sub_1000DEF6C((uint64_t)v22);
  if ((v24 & 1) != 0)
  {
    sub_100006054(*(void *)(v21 + 56) + 32 * v23, (uint64_t)&v106);
  }

  else
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  if (!*((void *)&v107 + 1)) {
    goto LABEL_15;
  }
  if ((swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_17;
  }

  uint64_t v28 = v102;
  uint64_t v29 = *(void *)(v21 + 16);
  unint64_t v97 = v103;
  if (v29)
  {
    uint64_t v30 = v102;
    sub_1000125E0(v102, v103);
    unint64_t v31 = (id)kSecCodeInfoMainExecutable;
    unint64_t v32 = sub_1000DEF6C((uint64_t)v31);
    if ((v33 & 1) != 0)
    {
      sub_100006054(*(void *)(v21 + 56) + 32 * v32, (uint64_t)&v106);
    }

    else
    {
      __int128 v106 = 0u;
      __int128 v107 = 0u;
    }

    uint64_t v28 = v30;
  }

  else
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
    sub_1000125E0(v102, v103);
  }

  if (!*((void *)&v107 + 1))
  {
    sub_100012824((uint64_t)&v106, &qword_100157FF8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
    goto LABEL_30;
  }

  int v36 = swift_dynamicCast(v11, &v106, (char *)&type metadata for Any + 8, v12, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, v36 ^ 1u, 1LL, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
LABEL_30:
    swift_bridgeObjectRelease(v21);
    sub_100012824((uint64_t)v11, (uint64_t *)&unk_10015BA30);
    unint64_t v40 = sub_100012624();
    uint64_t v41 = swift_allocError(&type metadata for KMError, v40, 0LL, 0LL);
    *(void *)uint64_t v42 = 0xD000000000000035LL;
    *(void *)(v42 + 8) = 0x800000010012B2E0LL;
    *(void *)(v42 + 16) = &_mh_execute_header;
    *(_OWORD *)(v42 + 24) = 0u;
    *(_OWORD *)(v42 + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(v42 + 56) = 0u;
    *(_BYTE *)(v42 + 7sub_100006034(v0 + 2) = 45;
    swift_willThrow(v41);
    unint64_t v15 = v97;
    sub_10001226C(v28, v97);
    sub_10001226C(v28, v15);
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v101, v11, v12);
  if (!*(void *)(v21 + 16))
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
LABEL_37:
    swift_bridgeObjectRelease(v21);
    sub_100012824((uint64_t)&v106, &qword_100157FF8);
LABEL_39:
    unint64_t v47 = sub_100012624();
    uint64_t v48 = swift_allocError(&type metadata for KMError, v47, 0LL, 0LL);
    *(void *)uint64_t v49 = 0xD000000000000038LL;
    *(void *)(v49 + 8) = 0x800000010012B320LL;
    *(void *)(v49 + 16) = &_mh_execute_header;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_OWORD *)(v49 + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(v49 + 56) = 0u;
    *(_BYTE *)(v49 + 7sub_100006034(v0 + 2) = 45;
    swift_willThrow(v48);
    unint64_t v15 = v97;
    sub_10001226C(v28, v97);
    sub_10001226C(v28, v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v101, v12);
    goto LABEL_19;
  }

  uint64_t v37 = (id)kSecCodeInfoIdentifier;
  unint64_t v38 = sub_1000DEF6C((uint64_t)v37);
  if ((v39 & 1) != 0)
  {
    sub_100006054(*(void *)(v21 + 56) + 32 * v38, (uint64_t)&v106);
  }

  else
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  if (!*((void *)&v107 + 1)) {
    goto LABEL_37;
  }
  if ((swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_39;
  }

  uint64_t v96 = v102;
  uint64_t v94 = v28;
  unint64_t v95 = v103;
  (*(void (**)(__int128 *__return_ptr))(*(void *)v3 + 88LL))(&v106);
  uint64_t v43 = *((void *)&v107 + 1);
  if (*((void *)&v107 + 1))
  {
    uint64_t v44 = v108;
    sub_100005110(&v106, *((uint64_t *)&v107 + 1));
    sub_1001073DC(v43, v44);
    sub_100012824((uint64_t)&v106, &qword_10015B670);
    uint64_t v45 = v104;
    uint64_t v46 = v105;
    sub_100005110(&v102, v104);
    LOBYTE(v43) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 208))(v101, v45, v46);
    sub_100006034(&v102);
  }

  else
  {
    sub_100012824((uint64_t)&v106, &qword_10015B670);
  }

  unint64_t v50 = (uint64_t *)sub_1000900E0();
  uint64_t v51 = *v50;
  uint64_t v52 = (void *)v50[1];
  swift_bridgeObjectRetain(v52);
  v53._uint64_t countAndFlagsBits = v51;
  v53._object = v52;
  Swift::Bool v54 = String.hasPrefix(_:)(v53);
  uint64_t v55 = swift_bridgeObjectRelease(v52);
  if (v54 && (v43 & 1) != 0)
  {
    uint64_t v56 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v57 = swift_allocObject(v56, 72LL, 7LL);
    *(_OWORD *)(v57 + 16) = xmmword_10010F110;
    *(void *)(v57 + 56) = &type metadata for String;
    *(void *)(v57 + 64) = sub_100026B64();
    unint64_t v58 = v95;
    *(void *)(v57 + 3sub_100006034(v0 + 2) = v96;
    *(void *)(v57 + sub_10007CFB4(v0 + 40) = v58;
    sub_100026BA8();
    swift_bridgeObjectRetain(v58);
    uint64_t v60 = (void *)static OS_os_log.default.getter(v59);
    uint64_t v61 = static os_log_type_t.default.getter(v60);
    os_log(_:dso:log:type:_:)( "allowing Apple-prefixed bundle '%{public}s' installed from a root",  65LL,  2LL,  &_mh_execute_header,  v60,  v61,  v57);
    swift_bridgeObjectRelease(v57);

LABEL_47:
    uint64_t v69 = 0LL;
    unint64_t v70 = 0LL;
    goto LABEL_59;
  }

  if (v98 != 3)
  {
    uint64_t v66 = *v50;
    uint64_t v65 = (void *)v50[1];
    swift_bridgeObjectRetain(v65);
    v67._uint64_t countAndFlagsBits = v66;
    v67._object = v65;
    Swift::Bool v68 = String.hasPrefix(_:)(v67);
    swift_bridgeObjectRelease(v65);
    if (v68) {
      goto LABEL_47;
    }
    if (*(void *)(v21 + 16))
    {
      BOOL v71 = (id)kSecCodeInfoTeamIdentifier;
      unint64_t v72 = sub_1000DEF6C((uint64_t)v71);
      if ((v73 & 1) != 0)
      {
        sub_100006054(*(void *)(v21 + 56) + 32 * v72, (uint64_t)&v106);
      }

      else
      {
        __int128 v106 = 0u;
        __int128 v107 = 0u;
      }

      if (*((void *)&v107 + 1))
      {
        uint64_t v74 = swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
        if ((v74 & 1) != 0)
        {
          uint64_t v69 = v102;
          unint64_t v70 = v103;
          goto LABEL_59;
        }

        goto LABEL_57;
      }
    }

    else
    {
      __int128 v106 = 0u;
      __int128 v107 = 0u;
    }

    uint64_t v74 = sub_100012824((uint64_t)&v106, &qword_100157FF8);
LABEL_57:
    uint64_t v75 = static os_log_type_t.info.getter(v74);
    unint64_t v76 = sub_100026BA8();
    uint64_t v64 = (void *)static OS_os_log.default.getter(v76);
    os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  v64,  "No team ID in signing dict and no Apple-prefix in signing identifier.",  69LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_58;
  }

  uint64_t v62 = static os_log_type_t.info.getter(v55);
  unint64_t v63 = sub_100026BA8();
  uint64_t v64 = (void *)static OS_os_log.default.getter(v63);
  os_log(_:dso:log:_:_:)( v62,  &_mh_execute_header,  v64,  "Adhoc signature; forcing no team ID",
    35LL,
    2LL,
    _swiftEmptyArrayStorage);
LABEL_58:

  uint64_t v69 = 0LL;
  unint64_t v70 = 1LL;
LABEL_59:
  if (!*(void *)(v21 + 16))
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
LABEL_67:
    sub_100012824((uint64_t)&v106, &qword_100157FF8);
    goto LABEL_68;
  }

  uint64_t v77 = (id)kSecCodeInfoEntitlementsDict;
  unint64_t v78 = sub_1000DEF6C((uint64_t)v77);
  if ((v79 & 1) != 0)
  {
    sub_100006054(*(void *)(v21 + 56) + 32 * v78, (uint64_t)&v106);
  }

  else
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
  }

  if (!*((void *)&v107 + 1)) {
    goto LABEL_67;
  }
  uint64_t v80 = sub_100005FB4((uint64_t *)&unk_10015BA50);
  if (!swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, v80, 6LL))
  {
LABEL_68:
    unint64_t v81 = sub_100015D14((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_69;
  }

  unint64_t v81 = v102;
LABEL_69:
  if (*(void *)(v21 + 16))
  {
    unint64_t v82 = sub_1000DEF6C((uint64_t)(id)kSecCodeInfoTimestamp);
    if ((v83 & 1) != 0)
    {
      sub_100006054(*(void *)(v21 + 56) + 32 * v82, (uint64_t)&v106);
    }

    else
    {
      __int128 v106 = 0u;
      __int128 v107 = 0u;
    }
  }

  else
  {
    __int128 v106 = 0u;
    __int128 v107 = 0u;
    uint64_t v84 = (id)kSecCodeInfoTimestamp;
  }

  swift_bridgeObjectRelease(v21);
  sub_10001226C(v94, v97);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v101, v12);
  if (*((void *)&v107 + 1))
  {
    uint64_t v85 = type metadata accessor for Date(0LL);
    uint64_t v86 = (uint64_t)v99;
    int v87 = swift_dynamicCast(v99, &v106, (char *)&type metadata for Any + 8, v85, 6LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL))(v86, v87 ^ 1u, 1LL, v85);
  }

  else
  {
    sub_100012824((uint64_t)&v106, &qword_100157FF8);
    uint64_t v88 = type metadata accessor for Date(0LL);
    uint64_t v86 = (uint64_t)v99;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56LL))(v99, 1LL, 1LL, v88);
  }

  uint64_t v89 = v100;
  sub_10001A148(v86, v100, &qword_100157FE8);
  uint64_t v90 = type metadata accessor for RealCodeSigningInfo(0LL);
  unint64_t v15 = swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
  *(void *)(v15 + 16) = v81;
  *(void *)(v15 + 24) = v69;
  uint64_t v91 = v94;
  *(void *)(v15 + 3sub_100006034(v0 + 2) = v70;
  *(void *)(v15 + sub_10007CFB4(v0 + 40) = v91;
  uint64_t v92 = v96;
  *(void *)(v15 + 48) = v97;
  *(void *)(v15 + 56) = v92;
  *(void *)(v15 + 64) = v95;
  *(_OWORD *)(v15 + 7sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  sub_1000263D8(v89, v15 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_100157FE8);
  sub_100012824(v86, &qword_100157FE8);

  return v15;
}

unint64_t sub_1000DD3B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015BD48);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 1);
    uint64_t v8 = *v6;
    id v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_1000DEF6C((uint64_t)v9);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v9;
    uint64_t v12 = (void *)(v4[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000DD4C8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DD4F8(a1, a2, a3, a4, 0, a5);
}

uint64_t sub_1000DD4E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DD4F8(a1, a2, a3, a4, 1, a5);
}

uint64_t sub_1000DD4F8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  void (*v23)(SecStaticCodeRef *__return_ptr);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, __n128);
  __n128 v44;
  NSURL *v45;
  CFURLRef v46;
  CFURLRef v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t inited;
  CFStringRef v53;
  unint64_t v54;
  CFDictionaryRef isa;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  NSURL *v63;
  CFURLRef v64;
  CFURLRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  void *object;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(__int128 *__return_ptr);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void v85[3];
  uint64_t v86;
  uint64_t v87;
  SecStaticCodeRef v88[3];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void v95[3];
  uint64_t v96;
  uint64_t v97;
  void v98[5];
  uint64_t v80 = a2;
  unint64_t v82 = a4;
  char v79 = a6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  char v83 = *(void *)(v9 - 8);
  uint64_t v84 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v76 - v17;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 112LL))(v98, v16);
  sub_10001A148((uint64_t)v98, (uint64_t)v95, &qword_100157C58);
  uint64_t v19 = v96;
  uint64_t v20 = sub_100012824((uint64_t)v95, &qword_100157C58);
  if (!v19 && (a5 & 1) != 0)
  {
    unint64_t v21 = *(void (**)(uint64_t))(*(void *)a1 + 264LL);
    unint64_t v78 = a1;
    v21(v20);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
    if (v22(v18, 1LL, v84) == 1)
    {
      sub_100012824((uint64_t)v18, (uint64_t *)&unk_10015BA30);
      goto LABEL_17;
    }

    unint64_t v23 = *(void (**)(SecStaticCodeRef *__return_ptr))(*(void *)v81 + 88LL);
    v23(v88);
    char v24 = v89;
    if (v89)
    {
      unint64_t v76 = (void (*)(__int128 *__return_ptr))v23;
      uint64_t v77 = a3;
      unint64_t v25 = v90;
      sub_100005110(v88, v89);
      sub_10009C2CC(v24, v25);
      sub_100012824((uint64_t)v88, &qword_10015B670);
      uint64_t v26 = v86;
      uint64_t v27 = v87;
      sub_100005110(v85, v86);
      sub_10001A148((uint64_t)v18, (uint64_t)v15, (uint64_t *)&unk_10015BA30);
      uint64_t v28 = v84;
      if (v22(v15, 1LL, v84) == 1)
      {
        __break(1u);
        JUMPOUT(0x1000DE448LL);
      }

      (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v27 + 24))(&v92, v15, v26, v27);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v15, v28);
      sub_100006034(v85);
      a3 = v77;
      if (*((void *)&v93 + 1))
      {
        sub_100005158(&v92, (uint64_t)v95);
        uint64_t v29 = v96;
        uint64_t v30 = v97;
        sub_100005110(v95, v96);
        unint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(v29, v30);
        if (v32)
        {
          char v33 = (void (*)(__int128 *__return_ptr))v31;
          unint64_t v34 = v32;
          v76(&v92);
          uint64_t v35 = *((void *)&v93 + 1);
          if (*((void *)&v93 + 1))
          {
            int v36 = v94;
            sub_100005110(&v92, *((uint64_t *)&v93 + 1));
            sub_1001073DC(v35, v36);
            sub_100012824((uint64_t)&v92, &qword_10015B670);
            unint64_t v76 = v33;
            unint64_t v38 = v89;
            uint64_t v37 = v90;
            sub_100005110(v88, v89);
            char v39 = (*(uint64_t (**)(void (*)(__int128 *__return_ptr), uint64_t, void, uint64_t, uint64_t))(v37 + 136))( v76,  v34,  0LL,  v38,  v37);
            swift_bridgeObjectRelease(v34);
            sub_100006034(v88);
            sub_100012824((uint64_t)v18, (uint64_t *)&unk_10015BA30);
            if ((v39 & 1) != 0)
            {
              sub_100012824((uint64_t)v98, &qword_100157C58);
              sub_100005F70((uint64_t)v95, (uint64_t)v98);
            }

            goto LABEL_16;
          }

          swift_bridgeObjectRelease(v34);
          sub_100012824((uint64_t)&v92, &qword_10015B670);
        }

        sub_100012824((uint64_t)v18, (uint64_t *)&unk_10015BA30);
LABEL_16:
        sub_100006034(v95);
        goto LABEL_17;
      }
    }

    else
    {
      sub_100012824((uint64_t)v88, &qword_10015B670);
      uint64_t v92 = 0u;
      uint64_t v93 = 0u;
      uint64_t v94 = 0LL;
    }

    sub_100012824((uint64_t)v18, (uint64_t *)&unk_10015BA30);
    sub_100012824((uint64_t)&v92, &qword_100157C58);
  }

uint64_t sub_1000DE460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)a1 + 144LL))(v8);
  uint64_t v12 = v11;
  uint64_t v13 = (uint64_t *)sub_1000900E0();
  uint64_t v14 = *v13;
  uint64_t v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  Swift::Bool v17 = String.hasPrefix(_:)(v16);
  swift_bridgeObjectRelease(v12);
  uint64_t v18 = swift_bridgeObjectRelease(v15);
  if (v17) {
    return 1LL;
  }
  (*(void (**)(SecRequirementRef *__return_ptr, uint64_t))(*(void *)a1 + 112LL))(requirement, v18);
  if (!*((void *)&v68 + 1))
  {
    sub_100012824((uint64_t)requirement, &qword_100157C58);
    return 0LL;
  }

  sub_100005158((__int128 *)requirement, (uint64_t)v69);
  SecStaticCodeRef staticCode = 0LL;
  uint64_t v20 = v70;
  uint64_t v21 = v71;
  sub_100005110(v69, v70);
  (*(void (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  URL._bridgeToObjectiveC()(v22);
  char v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v25 = sub_100005FB4(&qword_10015BB48);
  uint64_t inited = swift_initStackObject(v25, v65);
  __int128 v62 = xmmword_10010F110;
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = kSecCodeAttributeArchitecture;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = a2;
  *(void *)(inited + 48) = a3;
  uint64_t v27 = (id)kSecCodeAttributeArchitecture;
  swift_bridgeObjectRetain(a3);
  unint64_t v28 = sub_1000DD3B4(inited);
  type metadata accessor for CFString();
  uint64_t v30 = v29;
  uint64_t v31 = sub_100012860( &qword_10015BB50,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA54);
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  LODWORD(v28) = SecStaticCodeCreateWithPathAndAttributes(v24, 0, isa, &staticCode);

  SecStaticCodeRef v33 = staticCode;
  if ((_DWORD)v28) {
    goto LABEL_5;
  }
  if (!staticCode) {
    goto LABEL_11;
  }
  CFDictionaryRef information = 0LL;
  unint64_t v34 = staticCode;
  OSStatus v35 = SecCodeCopySigningInformation(v34, 2u, &information);
  int v36 = information;
  if (v35) {
    goto LABEL_9;
  }
  if (!information) {
    goto LABEL_10;
  }
  requirement[0] = 0LL;
  int v36 = information;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v36,  requirement,  v30,  (char *)&type metadata for Any + 8,  v31);

  SecRequirementRef v37 = requirement[0];
  if (!requirement[0])
  {
LABEL_9:

LABEL_10:
    goto LABEL_11;
  }

  if (*((void *)requirement[0] + 2))
  {
    unint64_t v38 = (id)kSecCodeInfoIdentifier;
    unint64_t v39 = sub_1000DEF6C((uint64_t)v38);
    if ((v40 & 1) != 0)
    {
      sub_100006054(*((void *)v37 + 7) + 32 * v39, (uint64_t)requirement);
    }

    else
    {
      *(_OWORD *)requirement = 0u;
      __int128 v68 = 0u;
    }
  }

  else
  {
    *(_OWORD *)requirement = 0u;
    __int128 v68 = 0u;
  }

  swift_bridgeObjectRelease(v37);
  if (!*((void *)&v68 + 1))
  {

    sub_100012824((uint64_t)requirement, &qword_100157FF8);
    sub_100006034(v69);
    return 2LL;
  }

  sub_100012824((uint64_t)requirement, &qword_100157FF8);
  requirement[0] = 0LL;
  uint64_t v41 = (__CFString *)String._bridgeToObjectiveC()();
  OSStatus v42 = SecRequirementCreateWithString(v41, 0, requirement);

  SecRequirementRef v44 = requirement[0];
  if (v42 || !requirement[0])
  {
    uint64_t v46 = static os_log_type_t.error.getter(v43);
    uint64_t v47 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v48 + 16) = v62;
    *(void *)(v48 + 56) = &type metadata for Int32;
    *(void *)(v48 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v48 + 3sub_100006034(v0 + 2) = v42;
    unint64_t v49 = sub_100026BA8();
    unint64_t v50 = (void *)static OS_os_log.default.getter(v49);
    os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  v50,  "Failed to get signature type: Unable to create SecRequirement for checking Apple root: %lu",  (void)v62);

    swift_bridgeObjectRelease(v48);
LABEL_29:

    SecStaticCodeRef v33 = staticCode;
LABEL_5:

LABEL_11:
    sub_100006034(v69);
    return 0LL;
  }

  uint64_t v45 = requirement[0];
  if (SecStaticCodeCheckValidity(v34, 0x20000000u, v45))
  {

    sub_100006034(v69);
    return 3LL;
  }

  SecRequirementRef v63 = 0LL;
  uint64_t v51 = (__CFString *)String._bridgeToObjectiveC()();
  OSStatus v52 = SecRequirementCreateWithString(v51, 0, &v63);

  SecRequirementRef v54 = v63;
  if (v52 || !v63)
  {
    uint64_t v57 = static os_log_type_t.error.getter(v53);
    uint64_t v58 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v59 = swift_allocObject(v58, 72LL, 7LL);
    *(_OWORD *)(v59 + 16) = v62;
    *(void *)(v59 + 56) = &type metadata for Int32;
    *(void *)(v59 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v59 + 3sub_100006034(v0 + 2) = v52;
    unint64_t v60 = sub_100026BA8();
    uint64_t v61 = (void *)static OS_os_log.default.getter(v60);
    os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  v61,  "Failed to get signature type: Unable to create SecRequirement for checking Developer ID: %lu",  (void)v62);

    swift_bridgeObjectRelease(v59);
    goto LABEL_29;
  }

  uint64_t v55 = v63;
  OSStatus v56 = SecStaticCodeCheckValidity(v34, 0x20000000u, v55);

  sub_100006034(v69);
  if (v56) {
    return 3LL;
  }
  else {
    return 5LL;
  }
}

uint64_t sub_1000DEA44()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

double sub_1000DEA70()
{
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  double result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 3sub_100006034(v0 + 2) = 0u;
  *(void *)(v1 + 48) = 0LL;
  return result;
}

uint64_t sub_1000DEA9C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t sub_1000DEAC4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t sub_1000DEAEC(uint64_t a1)
{
  uint64_t v3 = *v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_10014EFF0;
  v7[0] = v3;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_100005F48(a1, v4);
  swift_retain(v3);
  sub_1000DECDC(v7, v4, v5);
  sub_100005F70(a1, (uint64_t)v7);
  return (*(uint64_t (**)(void *))(*(void *)v3 + 96LL))(v7);
}

uint64_t sub_1000DEB88(uint64_t a1)
{
  uint64_t v2 = v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_10014EFF0;
  v7[0] = v1;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_100005F48(a1, v4);
  swift_retain(v2);
  sub_1000DECDC(v7, v4, v5);
  sub_100005F70(a1, (uint64_t)v7);
  return (*(uint64_t (**)(void *))(*(void *)v2 + 96LL))(v7);
}

void sub_1000DEC24()
{
  v0._object = (void *)0x800000010012B430LL;
  v0._uint64_t countAndFlagsBits = 0xD0000000000002EFLL;
  String.append(_:)(v0);
  uint64_t v1 = (uint64_t *)sub_10009014C();
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 0x737473697865205DLL;
  v5._object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  qword_1001758E0 = 0LL;
  *(void *)algn_1001758E8 = 0xE000000000000000LL;
}

uint64_t sub_1000DECDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015BB58);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_1000DED48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015BB58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_1000DED94(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011AA28, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000DEDD0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011AA28, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000DEE18(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011AA28, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1000DEE70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011AA28, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000DEEBC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000DEED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015B670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString()
{
  if (!qword_10015BD30)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10014F268);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015BD30);
    }
  }

unint64_t sub_1000DEF6C(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_100012860( &qword_10015BD40,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA28);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_1000DF584(a1, v6);
}

uint64_t type metadata accessor for RealCodeSigningResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd23RealCodeSigningResolver);
}

unint64_t sub_1000DF018()
{
  unint64_t result = qword_10015BB60;
  if (!qword_10015BB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A5D8, &type metadata for CodeSigningTeam);
    atomic_store(result, (unint64_t *)&qword_10015BB60);
  }

  return result;
}

unint64_t sub_1000DF064()
{
  unint64_t result = qword_10015BB68;
  if (!qword_10015BB68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A730, &type metadata for CodeSignatureType);
    atomic_store(result, (unint64_t *)&qword_10015BB68);
  }

  return result;
}

unint64_t sub_1000DF0AC()
{
  unint64_t result = qword_10015BB70;
  if (!qword_10015BB70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A798, &type metadata for SignatureResolutionStrategy);
    atomic_store(result, (unint64_t *)&qword_10015BB70);
  }

  return result;
}

uint64_t sub_1000DF0F0(uint64_t a1)
{
  uint64_t result = sub_100012860(&qword_10015BB78, type metadata accessor for RealCodeSigningInfo, (uint64_t)&unk_10011A81C);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for RealCodeSigningInfo(uint64_t a1)
{
  uint64_t result = qword_100172620;
  if (!qword_100172620) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RealCodeSigningInfo);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CodeSigningTeam(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CodeSigningTeam(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CodeSigningTeam()
{
  return &type metadata for CodeSigningTeam;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000125E0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for CodeSigningHash(uint64_t a1)
{
  return sub_10001226C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000125E0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10001226C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CodeSigningHash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001226C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeSigningHash(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CodeSigningHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CodeSigningHash()
{
  return &type metadata for CodeSigningHash;
}

ValueMetadata *type metadata accessor for CodeSignatureType()
{
  return &type metadata for CodeSignatureType;
}

uint64_t _s10driverkitd17CodeSignatureTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000DF400 + 4 * byte_10011A5CE[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000DF434 + 4 * asc_10011A5C9[v4]))();
}

uint64_t sub_1000DF434(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DF43C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DF444LL);
  }
  return result;
}

uint64_t sub_1000DF450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DF458LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000DF45C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DF464(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignatureResolutionStrategy()
{
  return &type metadata for SignatureResolutionStrategy;
}

uint64_t sub_1000DF480()
{
  return type metadata accessor for RealCodeSigningInfo(0LL);
}

void sub_1000DF488(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10011A948;
  v4[2] = &unk_10011A960;
  void v4[3] = &unk_10011A978;
  void v4[4] = &unk_10011A990;
  v4[5] = &unk_10011A990;
  sub_100018EE4(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

uint64_t sub_1000DF52C()
{
  return sub_100012860( &qword_10015BB50,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA54);
}

uint64_t sub_1000DF558()
{
  return sub_100012860( &qword_10015BD38,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011A9FC);
}

unint64_t sub_1000DF584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString();
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_100012860( &qword_10015BD40,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA28);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

void *sub_1000DF6C8()
{
  return &unk_10014F308;
}

void *sub_1000DF6D4()
{
  return &unk_10014F318;
}

void *sub_1000DF6E0()
{
  return &unk_10014F328;
}

uint64_t sub_1000DF6EC(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v1 = sub_1000DFA04((uint64_t)sub_1000DF944, (uint64_t)v26, (uint64_t)&off_10014F348);
  uint64_t v2 = v1;
  if (*(void *)(v1 + 16) == 1LL)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 32);
    swift_bridgeObjectRelease(v1);
    uint64_t v4 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
    *(_OWORD *)(v5 + 16) = xmmword_10010F110;
    v28[0] = v3;
    uint64_t v6 = sub_100005FB4(&qword_10015BD58);
    uint64_t v7 = String.init<A>(describing:)(v28, v6);
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_100026B64();
    *(void *)(v5 + 3sub_100006034(v0 + 2) = v7;
    *(void *)(v5 + sub_10007CFB4(v0 + 40) = v9;
    unint64_t v10 = sub_100026BA8();
    uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
    uint64_t v12 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:type:_:)("kextsOutOfOSImageFeatureFlags: %{public}s", 41LL, 2LL, &_mh_execute_header, v11, v12, v5);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v1);
    uint64_t v14 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_10010F110;
    uint64_t v16 = Array.description.getter(v2, &type metadata for KextsOutOfOSImageFeatureFlags);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v2);
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_100026B64();
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 3sub_100006034(v0 + 2) = v16;
    *(void *)(v15 + sub_10007CFB4(v0 + 40) = v18;
    unint64_t v20 = sub_100026BA8();
    uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v21,  "KextsOutOfOSImageFeatureFlags should have only one checkpoint enabled. Found %{public}s",  87LL,  2LL,  v15);
    swift_bridgeObjectRelease(v15);

    uint64_t v5 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v5 + 16) = xmmword_10010F110;
    uint64_t v22 = StaticString.description.getter("kextsOutOfOS", 12LL, 2LL);
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = v19;
    *(void *)(v5 + 3sub_100006034(v0 + 2) = v22;
    *(void *)(v5 + sub_10007CFB4(v0 + 40) = v23;
    uint64_t v11 = (void *)static OS_os_log.default.getter(v22);
    uint64_t v24 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:type:_:)("forcing checkpoint to %{public}s", 32LL, 2LL, &_mh_execute_header, v11, v24, v5);
    uint64_t v3 = 0LL;
  }

  swift_bridgeObjectRelease(v5);

  return v3;
}

uint64_t sub_1000DF944(char *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  char v3 = *a1;
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  sub_100005110(v2, v4);
  sub_10003AB50(v4, v5);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  sub_100005110(v10, v11);
  void v9[3] = &type metadata for KextsOutOfOSImageFeatureFlags;
  v9[4] = &off_10014F398;
  LOBYTE(v9[0]) = v3;
  LOBYTE(v4) = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 16))(v9, v6, v7);
  sub_100006034(v9);
  sub_100006034(v10);
  return v4 & 1;
}

uint64_t sub_1000DFA04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t (*)(char *))result;
    unint64_t v7 = 0LL;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v12 = (uint64_t (*)(char *))result;
    while (v7 < *(void *)(a3 + 16))
    {
      char v11 = *(_BYTE *)(a3 + v7 + 32);
      char v13 = v11;
      uint64_t result = v6(&v13);
      if (v3)
      {
        swift_release(v8);
        goto LABEL_14;
      }

      if ((result & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
        uint64_t v14 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000DFF7C(0LL, v8[2] + 1LL, 1);
          uint64_t v8 = v14;
        }

        unint64_t v10 = v8[2];
        unint64_t v9 = v8[3];
        if (v10 >= v9 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000DFF7C((char *)(v9 > 1), v10 + 1, 1);
          uint64_t v8 = v14;
        }

        v8[2] = v10 + 1;
        *((_BYTE *)v8 + v10 + 3sub_100006034(v0 + 2) = v11;
        uint64_t v6 = v12;
      }

      if (v5 == ++v7) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v8;
  }

  return result;
}

const char *sub_1000DFB44()
{
  return "KextsOutOfOSImage";
}

const char *sub_1000DFB58()
{
  if (*v0) {
    return "kextsInKDK";
  }
  else {
    return "kextsOutOfOS";
  }
}

void sub_1000DFB88(void *a1@<X8>)
{
  *a1 = &off_10014F370;
}

uint64_t sub_1000DFB98()
{
  int v1 = *v0;
  v2._uint64_t countAndFlagsBits = 0LL;
  v2._object = (void *)0xE000000000000000LL;
  String.append(_:)(v2);
  if (v1) {
    uint64_t v3 = "kextsInKDK";
  }
  else {
    uint64_t v3 = "kextsOutOfOS";
  }
  if (v1) {
    uint64_t v4 = 10LL;
  }
  else {
    uint64_t v4 = 12LL;
  }
  v5._uint64_t countAndFlagsBits = StaticString.description.getter(v3, v4, 2LL);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._uint64_t countAndFlagsBits = 0LL;
  v7._object = (void *)0xE000000000000000LL;
  String.append(_:)(v7);
  return 0LL;
}

void *sub_1000DFC28()
{
  return &unk_10014F338;
}

unint64_t sub_1000DFC34()
{
  return 0xD000000000000015LL;
}

unint64_t sub_1000DFC6C()
{
  unint64_t result = qword_10015BD60;
  if (!qword_10015BD60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AAAC, &type metadata for KextsOutOfOSImageFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015BD60);
  }

  return result;
}

unint64_t sub_1000DFCB4()
{
  unint64_t result = qword_10015BD68;
  if (!qword_10015BD68)
  {
    uint64_t v1 = sub_100012010(&qword_10015BD70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BD68);
  }

  return result;
}

ValueMetadata *type metadata accessor for DriverKitDaemonPaths()
{
  return &type metadata for DriverKitDaemonPaths;
}

uint64_t storeEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DFD5C + 4 * byte_10011AAA5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DFD90 + 4 * byte_10011AAA0[v4]))();
}

uint64_t sub_1000DFD90(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFD98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DFDA0LL);
  }
  return result;
}

uint64_t sub_1000DFDAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DFDB4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000DFDB8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFDC0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KextsOutOfOSImageFeatureFlags()
{
  return &type metadata for KextsOutOfOSImageFeatureFlags;
}

ValueMetadata *type metadata accessor for ThirdPartyDriverKeys()
{
  return &type metadata for ThirdPartyDriverKeys;
}

void *initializeWithCopy for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for SupportsThirdPartyDriversDeviceProperty(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for SupportsThirdPartyDriversDeviceProperty(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_100006034(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_100006034(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SupportsThirdPartyDriversDeviceProperty()
{
  return &type metadata for SupportsThirdPartyDriversDeviceProperty;
}

char *sub_1000DFF7C(char *a1, int64_t a2, char a3)
{
  __n128 result = sub_1000DFF98(a1, a2, a3, *v3);
  const char *v3 = result;
  return result;
}

char *sub_1000DFF98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BD78);
    char v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  char v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_1000E0080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

Swift::Int sub_1000E00A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E00E8(uint64_t a1)
{
  return String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_1000E00F0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000E0134()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E01B8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000E0228(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000E02A8(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  BOOL v11 = v4 == *a2 && v5 == v8;
  if (v11 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0LL), result = 0LL, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0LL);
    }
  }

  return result;
}

void sub_1000E0338(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1000E0368(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 16) == v3 && v2 == v4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(a1 + 16), v2, v3, v4, 0LL);
  }
}

void sub_1000E0514(uint64_t a1, uint64_t a2)
{
  if (a2 == 0xC000000000000008LL) {
    JUMPOUT(0x1000E047CLL);
  }
  JUMPOUT(0x1000E04FCLL);
}

void sub_1000E0528(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000E055C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  Hasher._combine(_:)(5uLL);
  return String.hash(into:)(v2, v3, v4);
}

unint64_t sub_1000E0594(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[5];
  unint64_t v7 = a2[6];
  Hasher._combine(_:)(7uLL);
  swift_bridgeObjectRetain(v6);
  sub_10004F9C0(v7);
  String.hash(into:)(v2, v3, v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v2, v5, v6);
  swift_bridgeObjectRelease(v6);
  sub_10004F9C0(v7);
  sub_1000E0528(v2, v7);
  sub_10004F9E4(v7);
  swift_bridgeObjectRelease(v6);
  return sub_10004F9E4(v7);
}

uint64_t sub_1000E0624(uint64_t a1, uint64_t a2)
{
  *((void *)&v2 + 1) = a2;
  *(void *)&__int128 v2 = a2 + 0x4000000000000000LL;
  return ((uint64_t (*)(void))((char *)sub_1000E0648 + 4 * byte_10011AC3D[v2 >> 3]))();
}

void sub_1000E0648()
{
}

void sub_1000E0684(uint64_t *a1)
{
}

Swift::Int sub_1000E0690()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_1000E0528((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000E06D4(uint64_t a1)
{
}

Swift::Int sub_1000E06DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000E0528((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void sub_1000E071C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a2[1];
  BOOL v8 = v4 == *a2 && v5 == v7;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0LL) & 1) != 0) {
    sub_1000E0338(v6);
  }
}

Swift::Int sub_1000E077C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_10004F9C0(v3);
  sub_1000E0528((uint64_t)v5, v3);
  sub_10004F9E4(v3);
  return Hasher._finalize()();
}

unint64_t sub_1000E07FC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  unint64_t v5 = v1[2];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_10004F9C0(v5);
  sub_1000E0528(a1, v5);
  return sub_10004F9E4(v5);
}

Swift::Int sub_1000E0860(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v3);
  sub_10004F9C0(v4);
  sub_1000E0528((uint64_t)v6, v4);
  sub_10004F9E4(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000E08DC(unint64_t a1)
{
  if ((a1 & 0x3FF) != 0)
  {
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    v1._uint64_t countAndFlagsBits = 46LL;
    v1._object = (void *)0xE100000000000000LL;
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._uint64_t countAndFlagsBits = 46LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v6 = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(v6);
    v7._uint64_t countAndFlagsBits = 46LL;
    v7._object = (void *)0xE100000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v9 = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v9);
    v10._uint64_t countAndFlagsBits = 46LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
  }

  else if (((a1 >> 10) & 0x3FF) != 0)
  {
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    v11._uint64_t countAndFlagsBits = 46LL;
    v11._object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    char v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14._uint64_t countAndFlagsBits = 46LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._uint64_t countAndFlagsBits = 46LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
  }

  else if (((a1 >> 20) & 0x3FF) != 0)
  {
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    v18._uint64_t countAndFlagsBits = 46LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    unint64_t v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._uint64_t countAndFlagsBits = 46LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
  }

  else
  {
    if (((a1 >> 30) & 0x3FF) == 0) {
      return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    }
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    v22._uint64_t countAndFlagsBits = 46LL;
    v22._object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
  }

  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  return v26;
}

unint64_t sub_1000E0BD4(unint64_t a1, unint64_t a2)
{
  return sub_1000E0BF0(a1, a2, (uint64_t)&type metadata for FilesetOffset);
}

unint64_t sub_1000E0BF0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - a1;
  if (a2 < a1)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(51LL);
    v7._object = (void *)0x800000010012BA90LL;
    v7._uint64_t countAndFlagsBits = 0xD000000000000029LL;
    String.append(_:)(v7);
    unint64_t v15 = a1;
    _print_unlocked<A, B>(_:_:)( &v15,  &v16,  a3,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v8._uint64_t countAndFlagsBits = 0x206D6F726620LL;
    v8._object = (void *)0xE600000000000000LL;
    String.append(_:)(v8);
    unint64_t v15 = a2;
    _print_unlocked<A, B>(_:_:)( &v15,  &v16,  a3,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v9 = v16;
    unint64_t v10 = v17;
    unint64_t v11 = sub_100012624();
    uint64_t v12 = swift_allocError(&type metadata for KMError, v11, 0LL, 0LL);
    *(void *)uint64_t v13 = v9;
    *(void *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(void *)(v13 + 64) = 0LL;
    *(_BYTE *)(v13 + 7sub_100006034(v0 + 2) = 72;
    swift_willThrow(v12);
  }

  return v3;
}

Swift::Int sub_1000E0D24()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000E0D68()
{
}

Swift::Int sub_1000E0D90(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E0DD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = sub_100005FB4(&qword_10015BD80);
  uint64_t v18 = swift_allocObject(v17, 64LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_10010F110;
  *(void *)(v18 + 3sub_100006034(v0 + 2) = a1;
  *(void *)(v18 + sub_10007CFB4(v0 + 40) = a2;
  *(void *)(v18 + 48) = a3;
  *(void *)(v18 + 56) = a4;
  Swift::String v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, __n128))(a11 + 16);
  swift_bridgeObjectRetain(a2);
  __n128 v20 = swift_bridgeObjectRetain(a4);
  uint64_t v21 = v19(v18, a5, a6, a7, a8, a9 & 1, a10, a11, v20);
  swift_bridgeObjectRelease(v18);
  if (!v30)
  {
    sub_1000E0F14(v21, (uint64_t)v26);
    swift_bridgeObjectRelease(v21);
    if (v27)
    {
      uint64_t v18 = v29;
      uint64_t v22 = v28;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v22);
    }

    else
    {
      return 0LL;
    }
  }

  return v18;
}

uint64_t sub_1000E0F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010D14(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }

  else
  {
    Swift::String v7 = sub_1000EECC0(v15, result, v5, 0LL, a1);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v12 = v15[0];
    unint64_t v13 = v15[1];
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 3sub_100006034(v0 + 2) = v12;
    *(void *)(a2 + sub_10007CFB4(v0 + 40) = v13;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v11);
    sub_10002B568(v12, v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    return sub_10002193C(v12, v13);
  }

  return result;
}

uint64_t sub_1000E1010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010D14(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  else
  {
    uint64_t v7 = sub_1000EED78((uint64_t)v11, result, v5, 0LL, a1);
    uint64_t v9 = v8;
    v10[0] = v7;
    v10[1] = v8;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    sub_10001A148((uint64_t)v11, a2 + 16, &qword_1001591C0);
    swift_bridgeObjectRetain(v9);
    return sub_100012824((uint64_t)v10, &qword_10015BE30);
  }

  return result;
}

uint64_t sub_1000E10E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000E0DD0(a1, a2, a3, a4, a5, a6, a7, 0LL, 1, a8, a9);
}

double sub_1000E1110@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t inited = swift_initStackObject(v15, v24);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = a1;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  Swift::Int v17 = sub_1000F00C4(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
  uint64_t v18 = v29;
  uint64_t v19 = sub_1000E127C(v17, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease(v17);
  if (!v18)
  {
    sub_1000E1010(v19, (uint64_t)v25);
    swift_bridgeObjectRelease(v19);
    if (v26)
    {
      swift_bridgeObjectRelease(v26);
      uint64_t v21 = v28;
      sub_100005158(&v27, (uint64_t)v23);
      sub_100005158(v23, a8);
      *(void *)(a8 + sub_10007CFB4(v0 + 40) = v21;
    }

    else
    {
      sub_100012824((uint64_t)v25, &qword_10015BD88);
      double result = 0.0;
      *(_OWORD *)(a8 + 16) = 0u;
      *(_OWORD *)(a8 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)a8 = 0u;
    }
  }

  return result;
}

uint64_t sub_1000E127C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(a1);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_10014F5A0, 24LL, 7LL);
  *(void *)(v14 + 16) = sub_1000E1574((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v7, a5);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (v15 + 48) & ~v15;
  Swift::Int v17 = (char *)swift_allocObject(&unk_10014F5C8, v16 + v12, v15 | 7);
  *((void *)v17 + sub_100006034(v0 + 2) = a5;
  *((void *)v17 + 3) = a6;
  *((void *)v17 + 4) = a1;
  *((void *)v17 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v16], v13, a5);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), char *, uint64_t, uint64_t))(a6 + 24);
  swift_bridgeObjectRetain(a1);
  swift_retain(v14);
  uint64_t v19 = v29;
  v18(v25, v26, v27, sub_1000F02FC, v17, a5, a6);
  if (v19)
  {
    swift_release(v14);
    swift_release(v17);
  }

  else
  {
    swift_release(v17);
    swift_beginAccess(v14 + 16, v28, 0LL, 0LL);
    uint64_t v20 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain(v20);
    sub_1000E18B0(v21);
    a6 = v22;
    swift_release(v14);
    swift_bridgeObjectRelease(v20);
  }

  return a6;
}

unint64_t sub_1000E1424(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    Swift::String v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015BDF0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  Swift::String v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  uint64_t v22 = v3 + 64;
  swift_retain(v3);
  uint64_t v21 = v1;
  uint64_t v6 = (_BYTE *)(v1 + 80);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 6);
    uint64_t v8 = *((void *)v6 - 5);
    uint64_t v9 = *((void *)v6 - 4);
    uint64_t v10 = *((void *)v6 - 3);
    uint64_t v12 = *((void *)v6 - 2);
    uint64_t v11 = *((void *)v6 - 1);
    char v13 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_1000EC328(v7, v8, v9, v10);
    if ((v15 & 1) != 0) {
      break;
    }
    *(void *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v16 = (uint64_t *)(v4[6] + 32 * result);
    *uint64_t v16 = v7;
    v16[1] = v8;
    _OWORD v16[2] = v9;
    v16[3] = v10;
    uint64_t v17 = v4[7] + 24 * result;
    *(void *)uint64_t v17 = v12;
    *(void *)(v17 + 8) = v11;
    *(_BYTE *)(v17 + 16) = v13;
    uint64_t v18 = v4[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v4[2] = v20;
    v6 += 56;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v21;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    Swift::String v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return (unint64_t)v4;
  }

  sub_100005FB4(&qword_10015BE20);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  Swift::String v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001A148(v6, (uint64_t)&v19, &qword_10015BE28);
    uint64_t v7 = v19;
    uint64_t v8 = v20;
    unint64_t result = sub_100006114(v19, v20);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    uint64_t v12 = (_OWORD *)(v4[7] + 48 * result);
    __int128 v13 = v21;
    __int128 v14 = v23;
    v12[1] = v22;
    _OWORD v12[2] = v14;
    *uint64_t v12 = v13;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_12;
    }
    v4[2] = v17;
    v6 += 64LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v18 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000E16BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    Swift::String v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_10015BE00);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  Swift::String v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E17D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v4 = v3;
  if (*(void *)(a1 + 24))
  {
    __int128 v7 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v7;
    _OWORD v12[2] = *(_OWORD *)(a1 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v11 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1000ED3B0(v12, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = *v3;
    *Swift::String v4 = v11;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v9);
  }

  else
  {
    sub_100012824(a1, &qword_10015BE18);
    sub_1000EC4D0(a2, a3, v12);
    swift_bridgeObjectRelease(a3);
    return sub_100012824((uint64_t)v12, &qword_10015BE18);
  }

void sub_1000E18B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4(&qword_10015BE08);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v9 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v9 >= v28) {
    goto LABEL_32;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v9);
  int64_t v11 = i + 1;
  if (!v10)
  {
    int64_t v11 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v29 + 8 * v11);
    if (!v10)
    {
      int64_t v11 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v29 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v29 + 8 * v11);
        if (!v10)
        {
          int64_t v12 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v10 = *(void *)(v29 + 8 * v12);
            if (v10)
            {
              int64_t v11 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1LL)) {
                goto LABEL_36;
              }
              if (v11 >= v28) {
                break;
              }
              unint64_t v10 = *(void *)(v29 + 8 * v11);
              ++v12;
              if (v10) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_1000E1C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void))(a5 + 8))();
  if (v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v5) {
    __asm { BR              X10 }
  }

  return result;
}

_DWORD *sub_1000E1E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)sub_100090074();
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t result = sub_100090080();
  BOOL v10 = v4 != 16777228 || (v7 & ~*result) != 2;
  char v11 = (v6 & v5) == 0 || v10;
  if ((v11 & 1) != 0)
  {
    unsigned int v12 = 0;
  }

  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)sub_10009008C();
    uint64_t result = sub_100090098();
    uint64_t v15 = *(void *)result;
    unsigned int v16 = (v14 & v13) >> *(void *)result;
    if (*(void *)result >= 0x20uLL) {
      unsigned int v16 = 0;
    }
    int v17 = (v14 & v13) << -(char)v15;
    if (v15 < 0) {
      unsigned int v12 = v17;
    }
    else {
      unsigned int v12 = v16;
    }
  }

  *(_DWORD *)a2 = v12;
  *(_BYTE *)(a2 + 4) = v11;
  return result;
}

uint64_t sub_1000E1EF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = sub_100005FB4(&qword_10015BD90);
  uint64_t inited = swift_initStackObject(v8, v87);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = sub_1000D406C(a1, a2);
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v10;
  uint64_t v11 = *sub_100090028();
  swift_bridgeObjectRetain(a2);
  uint64_t v12 = swift_bridgeObjectRetain(v11);
  uint64_t v67 = a1;
  uint64_t v13 = sub_1000F1230(v12, a1, a2);
  uint64_t v14 = v5;
  swift_bridgeObjectRelease(v11);
  uint64_t v68 = a2;
  swift_bridgeObjectRelease(a2);
  uint64_t v15 = sub_1000E23F4(v13);
  swift_bridgeObjectRelease(v13);
  uint64_t v77 = inited;
  sub_1000EE634(v15);
  uint64_t v65 = inited;
  uint64_t v16 = *(void *)(inited + 16);
  if (!v16)
  {
LABEL_23:
    swift_bridgeObjectRelease(v65);
    unint64_t v61 = sub_100012624();
    uint64_t v62 = swift_allocError(&type metadata for KMError, v61, 0LL, 0LL);
    *(void *)uint64_t v63 = 0xD000000000000015LL;
    *(void *)(v63 + 8) = 0x800000010012BAC0LL;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(void *)(v63 + 64) = 0LL;
    *(_BYTE *)(v63 + 7sub_100006034(v0 + 2) = 16;
    return swift_willThrow(v62);
  }

  int v17 = (void *)(inited + 40);
  while (!*v17)
  {
LABEL_3:
    v17 += 2;
    if (!--v16) {
      goto LABEL_23;
    }
  }

  uint64_t v18 = *(v17 - 1);
  swift_bridgeObjectRetain(*v17);
  uint64_t v19 = sub_1000D4150(v18);
  uint64_t v21 = v20;
  unint64_t v75 = v22;
  uint64_t v23 = sub_1000D406C(v19, v20);
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000D406C(v67, v68);
  uint64_t v28 = v27;
  if (!v25)
  {
    if (!v27) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

  if (!v27)
  {
    uint64_t v28 = v25;
LABEL_16:
    uint64_t v31 = swift_bridgeObjectRelease(v28);
    goto LABEL_17;
  }

  if (v23 == v26 && v25 == v27)
  {
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v28);
    goto LABEL_19;
  }

  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0LL);
  swift_bridgeObjectRelease(v25);
  uint64_t v31 = swift_bridgeObjectRelease(v28);
  if ((v30 & 1) == 0)
  {
LABEL_17:
    uint64_t v32 = static os_log_type_t.info.getter(v31);
    uint64_t v33 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
    *(_OWORD *)(v34 + 16) = xmmword_10010F110;
    uint64_t v35 = sub_1000D409C(v19, v21, v75);
    uint64_t v36 = v19;
    uint64_t v38 = v37;
    *(void *)(v34 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = sub_100026B64();
    *(void *)(v34 + 3sub_100006034(v0 + 2) = v35;
    *(void *)(v34 + sub_10007CFB4(v0 + 40) = v38;
    uint64_t v19 = v36;
    unint64_t v39 = sub_100026BA8();
    uint64_t v40 = (void *)static OS_os_log.default.getter(v39);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v40, "Falling back to arch %{public}s", 31LL, 2LL, v34);
    swift_bridgeObjectRelease(v34);
  }

void *sub_1000E23F4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1000EEA50(0LL, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v13[0] = *(v4 - 1);
      v13[1] = v5;
      swift_bridgeObjectRetain_n(v5, 2LL);
      uint64_t v6 = sub_100005FB4(&qword_100159470);
      swift_dynamicCast(v14, v13, &type metadata for String, v6, 7LL);
      uint64_t v7 = v14[0];
      uint64_t v8 = v14[1];
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000EEA50(0LL, v2[2] + 1LL, 1);
        uint64_t v2 = v15;
      }

      unint64_t v10 = v2[2];
      unint64_t v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_1000EEA50((void *)(v9 > 1), v10 + 1, 1);
        uint64_t v2 = v15;
      }

      v4 += 2;
      v2[2] = v10 + 1;
      uint64_t v11 = &v2[2 * v10];
      v11[4] = v7;
      v11[5] = v8;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_1000E2530@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = sub_100005FB4(&qword_1001588F8);
  uint64_t v12 = swift_allocBox(v11);
  uint64_t v14 = v13;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v12);
  v16(a1, a2, a3, sub_1000F1408, v12, a4, a5);
  if (v20) {
    return swift_release_n(v12, 2LL);
  }
  swift_release(v12);
  swift_beginAccess(v14, v19, 0LL, 0LL);
  sub_10001A148(v14, a6, &qword_1001588F8);
  return swift_release(v12);
}

uint64_t sub_1000E264C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = swift_projectBox(a3);
  if (*(_DWORD *)a1 != 27) {
    return 2LL;
  }
  uint64_t v11 = v9;
  UUID.init(uuid:)( *(unsigned __int8 *)(a1 + 8),  *(unsigned __int8 *)(a1 + 9),  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int8 *)(a1 + 11),  *(unsigned __int8 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 13),  *(unsigned __int8 *)(a1 + 14),  *(unsigned __int8 *)(a1 + 15),  *(void *)(a1 + 16));
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 0LL, 1LL, v12);
  swift_beginAccess(v11, v14, 1LL, 0LL);
  sub_1000395F4((uint64_t)v8, v11, &qword_1001588F8);
  return 0LL;
}

uint64_t sub_1000E2774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_10014F5F0, 32LL, 7LL);
  *(void *)(v10 + 16) = 0LL;
  uint64_t v11 = v10 + 16;
  *(_BYTE *)(v10 + 24) = 1;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v10);
  v12(a1, a2, a3, sub_1000F1444, v10, a4, a5);
  swift_release(v10);
  if (v15)
  {
    swift_release(v10);
  }

  else
  {
    swift_beginAccess(v11, v14, 0LL, 0LL);
    uint64_t v11 = *(void *)(v10 + 16);
    swift_release(v10);
  }

  return v11;
}

void *sub_1000E286C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a5 & 1;
  uint64_t v10 = sub_10008FC7C();
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v14 = v10[2];
  uint64_t v13 = v10[3];
  uint64_t v15 = sub_100005FB4(&qword_10015BD80);
  uint64_t inited = swift_initStackObject(v15, v61);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = v12;
  uint64_t v17 = inited + 32;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v11;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v13;
  swift_bridgeObjectRetain_n(v11, 2LL);
  swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v18 = sub_1000E89AC(inited, a1, a2, a3, a4, v9, a6, a7);
  if (v55)
  {
    swift_setDeallocating(inited);
    swift_arrayDestroy(v17, *(void *)(inited + 16), &type metadata for MachOSectionName);
    swift_errorRelease();
LABEL_3:
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
LABEL_4:
    unint64_t v19 = sub_100012624();
    uint64_t v20 = swift_allocError(&type metadata for KMError, v19, 0LL, 0LL);
    *(void *)uint64_t v21 = 0xD000000000000030LL;
    *(void *)(v21 + 8) = 0x800000010012BB30LL;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(void *)(v21 + 64) = 0LL;
    *(_BYTE *)(v21 + 7sub_100006034(v0 + 2) = 24;
    return (void *)swift_willThrow(v20);
  }

  uint64_t v23 = v18;
  swift_setDeallocating(inited);
  swift_arrayDestroy(v17, *(void *)(inited + 16), &type metadata for MachOSectionName);
  sub_1000E0F14(v23, (uint64_t)&v57);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *((void *)&v57 + 1);
  if (!*((void *)&v57 + 1)) {
    goto LABEL_3;
  }
  uint64_t v26 = v59;
  unint64_t v25 = v60;
  uint64_t v27 = *((void *)&v58 + 1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v27);
  if (v25 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v57 = 0LL;
  id v30 = [v28 propertyListWithData:isa options:0 format:0 error:&v57];

  uint64_t v31 = v57;
  if (!v30)
  {
    id v40 = (id)v57;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v41);
    swift_errorRelease();
    goto LABEL_13;
  }

  id v32 = (id)v57;
  _bridgeAnyObjectToAny(_:)(&v57, v30);
  swift_unknownObjectRelease(v30);
  uint64_t v33 = sub_100005FB4((uint64_t *)&unk_10015BA50);
  if ((swift_dynamicCast(&v56, &v57, (char *)&type metadata for Any + 8, v33, 6LL) & 1) == 0)
  {
LABEL_13:
    unint64_t v42 = sub_100012624();
    uint64_t v43 = swift_allocError(&type metadata for KMError, v42, 0LL, 0LL);
    *(void *)uint64_t v44 = 0xD00000000000002ELL;
    *(void *)(v44 + 8) = 0x800000010012BB70LL;
LABEL_25:
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(void *)(v44 + 64) = 0LL;
    *(_BYTE *)(v44 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v43);
    return (void *)sub_10002193C(v26, v25);
  }

  uint64_t v34 = v56;
  uint64_t v35 = (uint64_t *)sub_1000900A4();
  if (*(void *)(v34 + 16))
  {
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    swift_bridgeObjectRetain(v37);
    unint64_t v38 = sub_100006114(v36, v37);
    if ((v39 & 1) != 0)
    {
      sub_100006054(*(void *)(v34 + 56) + 32 * v38, (uint64_t)&v57);
    }

    else
    {
      __int128 v57 = 0u;
      __int128 v58 = 0u;
    }

    swift_bridgeObjectRelease(v37);
  }

  else
  {
    __int128 v57 = 0u;
    __int128 v58 = 0u;
  }

  swift_bridgeObjectRelease(v34);
  if (!*((void *)&v58 + 1))
  {
    sub_100012824((uint64_t)&v57, &qword_100157FF8);
    goto LABEL_24;
  }

  uint64_t v45 = sub_100005FB4(&qword_1001587B0);
  if ((swift_dynamicCast(&v56, &v57, (char *)&type metadata for Any + 8, v45, 6LL) & 1) == 0)
  {
LABEL_24:
    unint64_t v50 = sub_100012624();
    uint64_t v43 = swift_allocError(&type metadata for KMError, v50, 0LL, 0LL);
    *(void *)uint64_t v44 = 0xD00000000000002BLL;
    *(void *)(v44 + 8) = 0x800000010012BBA0LL;
    goto LABEL_25;
  }

  uint64_t v46 = v56;
  *(void *)&__int128 v57 = _swiftEmptyArrayStorage;
  uint64_t v47 = *(void *)(v56 + 16);
  if (v47)
  {
    swift_bridgeObjectRetain(v56);
    for (uint64_t i = 0LL; i != v47; ++i)
    {
      uint64_t v49 = *(void *)(v46 + 8 * i + 32);
      uint64_t v56 = v49;
      swift_bridgeObjectRetain(v49);
      sub_1000E2D74((uint64_t)&v57, &v56);
      swift_bridgeObjectRelease(v49);
    }

    swift_bridgeObjectRelease(v46);
    sub_10002193C(v26, v25);
    swift_bridgeObjectRelease(v46);
    return (void *)v57;
  }

  else
  {
    sub_10002193C(v26, v25);
    swift_bridgeObjectRelease(v46);
    return _swiftEmptyArrayStorage;
  }

char *sub_1000E2D74(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10008F2B8();
  if (!*(void *)(v4 + 16))
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    goto LABEL_10;
  }

  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  unint64_t v8 = sub_100006114(v6, v7);
  if ((v9 & 1) == 0)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    swift_bridgeObjectRelease(v7);
    goto LABEL_10;
  }

  sub_100006054(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v27);
  swift_bridgeObjectRelease(v7);
  if (!*((void *)&v28 + 1))
  {
LABEL_10:
    sub_100012824((uint64_t)&v27, &qword_100157FF8);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_11:
    unint64_t v17 = sub_100012624();
    uint64_t v18 = swift_allocError(&type metadata for KMError, v17, 0LL, 0LL);
    *(void *)uint64_t v19 = 0xD00000000000002BLL;
    uint64_t v20 = "Wrong type for symbol set bundle identifier";
LABEL_12:
    *(void *)(v19 + 8) = (unint64_t)(v20 - 32) | 0x8000000000000000LL;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(void *)(v19 + 64) = 0LL;
    *(_BYTE *)(v19 + 7sub_100006034(v0 + 2) = 24;
    return (char *)swift_willThrow(v18);
  }

  uint64_t v11 = v26[0];
  uint64_t v10 = v26[1];
  uint64_t v12 = (uint64_t *)sub_1000900B0();
  if (!*(void *)(v4 + 16))
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
LABEL_20:
    swift_bridgeObjectRelease(v10);
    sub_100012824((uint64_t)&v27, &qword_100157FF8);
LABEL_22:
    unint64_t v25 = sub_100012624();
    uint64_t v18 = swift_allocError(&type metadata for KMError, v25, 0LL, 0LL);
    *(void *)uint64_t v19 = 0xD000000000000019LL;
    uint64_t v20 = "Wrong type for symbol set";
    goto LABEL_12;
  }

  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  unint64_t v15 = sub_100006114(v13, v14);
  if ((v16 & 1) != 0)
  {
    sub_100006054(*(void *)(v4 + 56) + 32 * v15, (uint64_t)&v27);
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
  }

  swift_bridgeObjectRelease(v14);
  if (!*((void *)&v28 + 1)) {
    goto LABEL_20;
  }
  uint64_t v22 = sub_100005FB4(&qword_1001587B0);
  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, v22, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v10);
    goto LABEL_22;
  }

  uint64_t v23 = v26[0];
  swift_bridgeObjectRetain(v10);
  uint64_t v24 = (char *)sub_1000EFB80(v23, v11, v10);
  swift_bridgeObjectRelease(v23);
  uint64_t result = (char *)swift_bridgeObjectRelease_n(v10, 2LL);
  if (!v3) {
    return sub_1000EE72C(v24);
  }
  return result;
}

void sub_1000E2FF4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v67 = a7;
  uint64_t v8 = v7;
  uint64_t v9 = a6;
  uint64_t v62 = a5;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  uint64_t v61 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v60 = v12;
  uint64_t v74 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_allocObject(&unk_10014F618, 24LL, 7LL);
  unint64_t v14 = sub_1000E16BC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v68 = v13;
  *(void *)(v13 + 16) = v14;
  uint64_t v58 = v13 + 16;
  uint64_t v15 = a1;
  uint64_t v65 = swift_allocObject(&unk_10014F640, 24LL, 7LL);
  *(void *)(v65 + 16) = &_swiftEmptySetSingleton;
  uint64_t v70 = v8;
  uint64_t v71 = v9;
  uint64_t v69 = a4;
  if (a1 && *(void *)(a1 + 16))
  {
    unint64_t v16 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    LODWORD(v59) = 0;
    unint64_t v17 = 0LL;
    uint64_t v18 = -(uint64_t)v16;
    uint64_t v55 = a1;
    uint64_t v56 = a1 + 40;
    unint64_t v57 = v16;
LABEL_4:
    unint64_t v19 = v57;
    if (v17 > v57) {
      unint64_t v19 = v17;
    }
    uint64_t v20 = -(uint64_t)v19;
    uint64_t v21 = (uint64_t *)(v56 + 16 * v17++);
    while (v20 + v17 != 1)
    {
      uint64_t v23 = *(v21 - 1);
      uint64_t v22 = *v21;
      swift_bridgeObjectRetain(*v21);
      uint64_t v24 = (uint64_t *)sub_1000900EC();
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain(v26);
      char v27 = sub_100032F98(v25, v26, v23, v22);
      swift_bridgeObjectRelease(v26);
      if ((v27 & 1) != 0)
      {
        swift_bridgeObjectRelease(v22);
        if ((v59 & 1) == 0)
        {
          __int128 v28 = (uint64_t *)sub_100090104();
          uint64_t v29 = *v28;
          uint64_t v30 = v28[1];
          swift_bridgeObjectRetain(v30);
          sub_100075F38(&v72, v29, v30);
          swift_bridgeObjectRelease(v73);
        }

        LODWORD(v59) = 1;
        if (!(v18 + v17))
        {
LABEL_14:
          uint64_t v15 = v55;
          swift_bridgeObjectRelease(v55);
          uint64_t v8 = v70;
          uint64_t v9 = v71;
          a4 = v69;
          goto LABEL_15;
        }

        goto LABEL_4;
      }

      sub_100075F38(&v72, v23, v22);
      swift_bridgeObjectRelease(v73);
      ++v17;
      v21 += 2;
      if (v18 + v17 == 1) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    unint64_t v59 = HIDWORD(a4);
    uint64_t v31 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v74, v8, v9);
    uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
    uint64_t v33 = (v32 + 48) & ~v32;
    unint64_t v34 = (v60 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v36 = (v35 + 31) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v37 = (void *)swift_allocObject(&unk_10014F668, v36 + 8, v32 | 7);
    uint64_t v38 = v9;
    char v39 = v37;
    uint64_t v40 = v67;
    v37[2] = v38;
    v37[3] = v40;
    uint64_t v41 = v65;
    v37[4] = v15;
    v37[5] = v41;
    (*(void (**)(char *, char *))(v31 + 32))((char *)v37 + v33, v74);
    uint64_t v42 = v68;
    uint64_t v43 = v69;
    *(void *)((char *)v39 + v34) = v68;
    uint64_t v44 = v42;
    uint64_t v45 = (char *)v39 + v35;
    uint64_t v47 = v63;
    uint64_t v46 = v64;
    *(void *)uint64_t v45 = v63;
    *((void *)v45 + 1) = v46;
    int v48 = v59;
    *((_DWORD *)v45 + 4) = v43;
    *((_DWORD *)v45 + 5) = v48;
    uint64_t v49 = v62;
    *(void *)((char *)v39 + v36) = v62;
    unint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), void *, uint64_t, uint64_t, __n128))(v40 + 24);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v15);
    swift_retain(v41);
    swift_retain(v44);
    __n128 v51 = swift_bridgeObjectRetain(v46);
    uint64_t v52 = v46;
    uint64_t v53 = v66;
    v50(v47, v52, v43, sub_1000F1564, v39, v71, v40, v51);
    if (v53)
    {
      swift_release(v44);
      swift_release(v41);
      swift_release(v39);
    }

    else
    {
      swift_release(v39);
      swift_beginAccess(v58, &v72, 0LL, 0LL);
      swift_bridgeObjectRetain(*(void *)(v44 + 16));
      swift_release(v44);
      swift_release(v41);
    }
  }

uint64_t sub_1000E337C(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v10 = a4;
  uint64_t v12 = a1;
  uint64_t v13 = a2 - (void)a1;
  if (a1) {
    BOOL v14 = v13 < 32;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  if (v14)
  {
    char v85 = v15;
    unint64_t v83 = sub_100012624();
    uint64_t v17 = swift_allocError(&type metadata for KMError, v83, 0LL, 0LL);
    *(void *)uint64_t v18 = 0xD000000000000033LL;
    *(void *)(v18 + 8) = 0x800000010012C4F0LL;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(void *)(v18 + 64) = 0LL;
    *(_BYTE *)(v18 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v17);
    uint64_t v110 = v17;
    swift_errorRetain(v17);
    uint64_t v19 = sub_100005FB4(&qword_10015AB20);
    char v87 = a6;
    uint64_t v89 = a4;
    uint64_t v90 = a5;
    uint64_t v92 = a3;
    swift_errorRelease(v17);
    uint64_t v20 = v105;
    uint64_t v22 = v106;
    uint64_t v21 = v107;
    uint64_t v23 = v108;
    char v24 = v109;
    uint64_t v79 = v101;
    uint64_t v81 = v100;
    uint64_t v76 = v103;
    uint64_t v77 = v102;
    unint64_t v75 = v104;
    sub_1000516E4(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109);
    uint64_t v25 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v27 = v25[2];
    unint64_t v26 = v25[3];
    if (v27 >= v26 >> 1) {
      uint64_t v25 = sub_10008ECFC((void *)(v26 > 1), v27 + 1, 1, v25);
    }
    __int128 v25[2] = v27 + 1;
    unint64_t v95 = v25;
    __int128 v28 = &v25[10 * v27];
    v28[4] = v81;
    v28[5] = v79;
    v28[6] = v77;
    v28[7] = v76;
    v28[8] = v75;
    _BYTE v28[9] = v20;
    v28[10] = v22;
    v28[11] = v21;
    v28[12] = v23;
    *((_BYTE *)v28 + 104) = v24;
    sub_100039508(v81, v79, v77, v76, v75, v20, v22, v21, v23, v24);
    swift_errorRelease(v110);
    if (!v12 || v13 < 28)
    {
      uint64_t v41 = swift_allocError(&type metadata for KMError, v83, 0LL, 0LL);
      uint64_t v43 = v41;
      uint64_t v12 = 0LL;
      *(void *)uint64_t v42 = 0xD000000000000033LL;
      unint64_t v45 = 0x800000010012C530LL;
      int v44 = 255;
      a5 = v90;
      a3 = v92;
      uint64_t v7 = a7;
      uint64_t v10 = v89;
      a6 = v87;
LABEL_31:
      *(void *)(v42 + 8) = v45;
      *(_OWORD *)(v42 + 16) = 0u;
      *(_OWORD *)(v42 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v42 + 48) = 0u;
      *(void *)(v42 + 64) = 0LL;
      *(_BYTE *)(v42 + 7sub_100006034(v0 + 2) = 24;
      swift_willThrow(v41);
      uint64_t v110 = v43;
      swift_errorRetain(v43);
      uint64_t v46 = sub_100005FB4(&qword_10015AB20);
      if (swift_dynamicCast(&v100, &v110, v46, &type metadata for KMError, 0LL))
      {
        int v86 = v44;
        char v88 = a6;
        uint64_t v91 = a5;
        uint64_t v98 = v7;
        swift_errorRelease(v43);
        uint64_t v47 = v100;
        uint64_t v48 = v101;
        unint64_t v49 = v104;
        uint64_t v50 = v105;
        uint64_t v51 = v108;
        char v52 = v109;
        uint64_t v82 = v103;
        uint64_t v84 = v102;
        uint64_t v78 = v107;
        uint64_t v80 = v106;
        sub_1000516E4(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109);
        uint64_t v93 = a3;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) != 0) {
          uint64_t v53 = v95;
        }
        else {
          uint64_t v53 = sub_10008ECFC(0LL, v95[2] + 1LL, 1, v95);
        }
        unint64_t v55 = v53[2];
        unint64_t v54 = v53[3];
        if (v55 >= v54 >> 1) {
          uint64_t v53 = sub_10008ECFC((void *)(v54 > 1), v55 + 1, 1, v53);
        }
        _OWORD v53[2] = v55 + 1;
        uint64_t v56 = &v53[10 * v55];
        v56[4] = v47;
        v56[5] = v48;
        v56[6] = v84;
        v56[7] = v82;
        v56[8] = v49;
        v56[9] = v50;
        v56[10] = v80;
        v56[11] = v78;
        v56[12] = v51;
        *((_BYTE *)v56 + 104) = v52;
        uint64_t v74 = v51;
        unint64_t v57 = v53;
        sub_100039508(v47, v48, v84, v82, v49, v50, v80, v78, v74, v52);
        swift_errorRelease(v110);
        uint64_t v31 = v57;
        a5 = v91;
        a3 = v93;
        uint64_t v7 = v98;
        a6 = v88;
        if (v86 != 255) {
          goto LABEL_37;
        }
        goto LABEL_27;
      }

      swift_bridgeObjectRelease(v95);
LABEL_40:
      swift_errorRelease(v110);
      goto LABEL_45;
    }

    uint64_t v29 = 0LL;
    int v30 = 255;
    a5 = v90;
    a3 = v92;
    uint64_t v31 = v95;
    uint64_t v7 = a7;
    uint64_t v10 = v89;
    char v15 = v85;
    a6 = v87;
    goto LABEL_21;
  }

  int v32 = *a1;
  uint64_t v31 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v32 == -17958193)
  {
    int v30 = 0;
    uint64_t v29 = a1;
LABEL_21:
    int v32 = *v12;
    goto LABEL_22;
  }

  uint64_t v29 = 0LL;
  char v15 = 1;
  int v30 = 255;
LABEL_22:
  if (v32 == -822415874 || v32 == -17958194)
  {
    if ((v15 & 1) != 0)
    {
      char v34 = 1;
LABEL_38:
      swift_bridgeObjectRelease(v31);
      sub_1000E8D28((uint64_t)v12, v34, a3, v10, a5, a6 & 1, v7);
LABEL_45:
      uint64_t v70 = a3;
      return swift_bridgeObjectRelease(v70);
    }

    unint64_t v95 = v31;
    unint64_t v40 = sub_100012624();
    uint64_t v41 = swift_allocError(&type metadata for KMError, v40, 0LL, 0LL);
    uint64_t v43 = v41;
    int v44 = 0;
    *(void *)uint64_t v42 = 0xD00000000000002BLL;
    unint64_t v45 = 0x800000010012C5C0LL;
    uint64_t v12 = v29;
    goto LABEL_31;
  }

  uint64_t v12 = v29;
  if (v30 != 255)
  {
LABEL_37:
    char v34 = 0;
    goto LABEL_38;
  }

_DWORD *sub_1000E3A0C(int *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2 - (void)a1;
  if (a1) {
    BOOL v5 = v4 < 32;
  }
  else {
    BOOL v5 = 1;
  }
  char v6 = v5;
  if (v5)
  {
    unint64_t v7 = sub_100012624();
    uint64_t v8 = swift_allocError(&type metadata for KMError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0xD000000000000033LL;
    *(void *)(v9 + 8) = 0x800000010012C4F0LL;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(void *)(v9 + 64) = 0LL;
    *(_BYTE *)(v9 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v8);
    v87[0] = v8;
    swift_errorRetain(v8);
    uint64_t v10 = sub_100005FB4(&qword_10015AB20);
    unint64_t v62 = v7;
    char v63 = v6;
    swift_errorRelease(v8);
    uint64_t v11 = v82;
    uint64_t v13 = v83;
    uint64_t v12 = v84;
    uint64_t v14 = v85;
    char v15 = v86;
    uint64_t v69 = v78;
    uint64_t v71 = v77;
    uint64_t v65 = v80;
    uint64_t v67 = v79;
    unint64_t v64 = v81;
    sub_1000516E4(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86);
    unint64_t v16 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    uint64_t v74 = v16;
    if (v18 >= v17 >> 1) {
      uint64_t v74 = sub_10008ECFC((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v74[2] = v18 + 1;
    uint64_t v19 = &v74[10 * v18];
    v19[4] = v71;
    v19[5] = v69;
    v19[6] = v67;
    v19[7] = v65;
    v19[8] = v64;
    void v19[9] = v11;
    v19[10] = v13;
    v19[11] = v12;
    v19[12] = v14;
    *((_BYTE *)v19 + 104) = v15;
    sub_100039508(v71, v69, v67, v65, v64, v11, v13, v12, v14, v15);
    swift_errorRelease(v87[0]);
    if (!v3 || v4 < 28)
    {
      uint64_t v27 = swift_allocError(&type metadata for KMError, v62, 0LL, 0LL);
      uint64_t v29 = v27;
      uint64_t v20 = 0LL;
      *(void *)uint64_t v28 = 0xD000000000000033LL;
      unint64_t v31 = 0x800000010012C530LL;
      int v30 = 255;
      uint64_t v23 = v74;
LABEL_27:
      *(void *)(v28 + 8) = v31;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(void *)(v28 + 64) = 0LL;
      *(_BYTE *)(v28 + 7sub_100006034(v0 + 2) = 24;
      swift_willThrow(v27);
      v87[0] = v29;
      swift_errorRetain(v29);
      uint64_t v32 = sub_100005FB4(&qword_10015AB20);
      if (swift_dynamicCast(&v77, v87, v32, &type metadata for KMError, 0LL))
      {
        int v72 = v30;
        swift_errorRelease(v29);
        uint64_t v33 = v80;
        unint64_t v34 = v81;
        uint64_t v35 = v82;
        uint64_t v36 = v83;
        uint64_t v37 = v84;
        uint64_t v38 = v85;
        char v39 = v86;
        uint64_t v68 = v78;
        uint64_t v70 = v77;
        uint64_t v66 = v79;
        sub_1000516E4(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86);
        unint64_t v75 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
          uint64_t v23 = sub_10008ECFC(0LL, v23[2] + 1LL, 1, v23);
        }
        unint64_t v41 = v23[2];
        unint64_t v40 = v23[3];
        uint64_t v42 = v23;
        if (v41 >= v40 >> 1) {
          uint64_t v42 = sub_10008ECFC((void *)(v40 > 1), v41 + 1, 1, v23);
        }
        v42[2] = v41 + 1;
        uint64_t v23 = v42;
        uint64_t v43 = &v42[10 * v41];
        v43[4] = v70;
        void v43[5] = v68;
        v43[6] = v66;
        v43[7] = v33;
        v43[8] = v34;
        v43[9] = v35;
        v43[10] = v36;
        v43[11] = v37;
        v43[12] = v38;
        *((_BYTE *)v43 + 104) = v39;
        sub_100039508(v70, v68, v66, v33, v34, v35, v36, v37, v38, v39);
        swift_errorRelease(v87[0]);
        uint64_t v21 = 0LL;
        uint64_t v20 = v75;
        int v22 = v72;
        goto LABEL_33;
      }

      swift_bridgeObjectRelease(v23);
      return (_DWORD *)swift_errorRelease(v87[0]);
    }

    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    int v22 = 255;
    uint64_t v23 = v74;
    char v6 = v63;
    goto LABEL_21;
  }

  uint64_t v21 = v2;
  int v24 = *a1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v24 == -17958193)
  {
    int v22 = 0;
    uint64_t v20 = a1;
LABEL_21:
    int v24 = *v3;
    goto LABEL_22;
  }

  uint64_t v20 = 0LL;
  char v6 = 1;
  int v22 = 255;
LABEL_22:
  if (v24 == -822415874 || v24 == -17958194)
  {
    if ((v6 & 1) != 0) {
      goto LABEL_37;
    }
    unint64_t v26 = sub_100012624();
    uint64_t v27 = swift_allocError(&type metadata for KMError, v26, 0LL, 0LL);
    uint64_t v29 = v27;
    int v30 = 0;
    *(void *)uint64_t v28 = 0xD00000000000002BLL;
    unint64_t v31 = 0x800000010012C5C0LL;
    goto LABEL_27;
  }

uint64_t sub_1000E401C( int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9 = a8;
  uint64_t v11 = a6;
  uint64_t v13 = a4;
  uint64_t v14 = a1;
  uint64_t v15 = a2 - (void)a1;
  if (a1) {
    BOOL v16 = v15 < 32;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = v16;
  if (v16)
  {
    int v113 = v17;
    uint64_t v20 = (uint64_t)&type metadata for KMError;
    unint64_t v84 = sub_100012624();
    uint64_t v21 = swift_allocError(&type metadata for KMError, v84, 0LL, 0LL);
    *(void *)uint64_t v22 = 0xD000000000000033LL;
    *(void *)(v22 + 8) = 0x800000010012C4F0LL;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(void *)(v22 + 64) = 0LL;
    *(_BYTE *)(v22 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v21);
    v112[0] = v21;
    swift_errorRetain(v21);
    uint64_t v23 = sub_100005FB4(&qword_10015AB20);
    if (!swift_dynamicCast(&v102, v112, v23, &type metadata for KMError, 0LL))
    {
      swift_errorRelease(v112[0]);
      swift_release(a5);
      uint64_t v38 = a7;
      unint64_t v39 = a8;
      goto LABEL_47;
    }

    uint64_t v86 = a4;
    uint64_t v87 = a5;
    uint64_t v90 = a7;
    unint64_t v93 = a8;
    swift_errorRelease(v21);
    uint64_t v24 = v107;
    uint64_t v25 = v108;
    uint64_t v26 = v109;
    uint64_t v27 = v110;
    char v28 = v111;
    uint64_t v80 = v103;
    uint64_t v82 = v102;
    uint64_t v77 = v105;
    uint64_t v78 = v104;
    unint64_t v76 = v106;
    sub_1000516E4(v102, v103, v104, v105, v106, v107, v108, v109, v110, v111);
    uint64_t v29 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v31 = v29[2];
    unint64_t v30 = v29[3];
    uint64_t v20 = v31 + 1;
    if (v31 >= v30 >> 1) {
      uint64_t v29 = sub_10008ECFC((void *)(v30 > 1), v31 + 1, 1, v29);
    }
    v29[2] = v20;
    uint64_t v96 = v29;
    uint64_t v32 = &v29[10 * v31];
    void v32[4] = v82;
    v32[5] = v80;
    v32[6] = v78;
    v32[7] = v77;
    v32[8] = v76;
    v32[9] = v24;
    v32[10] = v25;
    v32[11] = v26;
    v32[12] = v27;
    *((_BYTE *)v32 + 104) = v28;
    sub_100039508(v82, v80, v78, v77, v76, v24, v25, v26, v27, v28);
    swift_errorRelease(v112[0]);
    if (!v14 || v15 < 28)
    {
      uint64_t v45 = swift_allocError(&type metadata for KMError, v84, 0LL, 0LL);
      uint64_t v47 = v45;
      uint64_t v14 = 0LL;
      *(void *)uint64_t v46 = 0xD000000000000033LL;
      unint64_t v49 = 0x800000010012C530LL;
      int v48 = 255;
      a7 = v90;
      unint64_t v9 = v93;
      uint64_t v13 = v86;
      a5 = v87;
      uint64_t v11 = a6;
      goto LABEL_32;
    }

    uint64_t v20 = 0LL;
    uint64_t v33 = 0LL;
    int v34 = 255;
    a7 = v90;
    unint64_t v9 = v93;
    uint64_t v13 = v86;
    a5 = v87;
    uint64_t v35 = v96;
    uint64_t v11 = a6;
    LOBYTE(v17) = v113;
    goto LABEL_21;
  }

  uint64_t v33 = v8;
  int v36 = *a1;
  uint64_t v35 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v36 == -17958193)
  {
    int v34 = 0;
    uint64_t v20 = (uint64_t)a1;
LABEL_21:
    int v36 = *v14;
    goto LABEL_23;
  }

  uint64_t v20 = 0LL;
  LOBYTE(v17) = 1;
  int v34 = 255;
LABEL_23:
  if (v36 == -822415874 || v36 == -17958194)
  {
    if ((v17 & 1) != 0)
    {
      uint64_t v20 = 1LL;
      goto LABEL_39;
    }

    uint64_t v96 = v35;
    unint64_t v44 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v44, 0LL, 0LL);
    uint64_t v47 = v45;
    int v48 = 0;
    *(void *)uint64_t v46 = 0xD00000000000002BLL;
    unint64_t v49 = 0x800000010012C5C0LL;
    uint64_t v14 = (int *)v20;
LABEL_32:
    *(void *)(v46 + 8) = v49;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(void *)(v46 + 64) = 0LL;
    *(_BYTE *)(v46 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v45);
    v112[0] = v47;
    swift_errorRetain(v47);
    uint64_t v50 = sub_100005FB4(&qword_10015AB20);
    if (!swift_dynamicCast(&v102, v112, v50, &type metadata for KMError, 0LL))
    {
      swift_bridgeObjectRelease(v96);
      swift_errorRelease(v112[0]);
      goto LABEL_46;
    }

    int v113 = v48;
    uint64_t v98 = v11;
    uint64_t v88 = a5;
    uint64_t v91 = a7;
    swift_errorRelease(v47);
    uint64_t v51 = v102;
    uint64_t v52 = v103;
    uint64_t v53 = v104;
    uint64_t v54 = v105;
    uint64_t v55 = v110;
    char v56 = v111;
    uint64_t v83 = v107;
    unint64_t v85 = v106;
    uint64_t v79 = v109;
    uint64_t v81 = v108;
    sub_1000516E4(v102, v103, v104, v105, v106, v107, v108, v109, v110, v111);
    unint64_t v94 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) != 0) {
      uint64_t v57 = v96;
    }
    else {
      uint64_t v57 = sub_10008ECFC(0LL, v96[2] + 1LL, 1, v96);
    }
    unint64_t v59 = v57[2];
    unint64_t v58 = v57[3];
    if (v59 >= v58 >> 1) {
      uint64_t v57 = sub_10008ECFC((void *)(v58 > 1), v59 + 1, 1, v57);
    }
    v57[2] = v59 + 1;
    uint64_t v60 = &v57[10 * v59];
    v60[4] = v51;
    v60[5] = v52;
    v60[6] = v53;
    v60[7] = v54;
    v60[8] = v85;
    v60[9] = v83;
    v60[10] = v81;
    v60[11] = v79;
    v60[12] = v55;
    *((_BYTE *)v60 + 104) = v56;
    uint64_t v75 = v55;
    uint64_t v20 = (uint64_t)v57;
    sub_100039508(v51, v52, v53, v54, v85, v83, v81, v79, v75, v56);
    swift_errorRelease(v112[0]);
    uint64_t v35 = (void *)v20;
    uint64_t v33 = 0LL;
    a7 = v91;
    unint64_t v9 = v94;
    a5 = v88;
    uint64_t v11 = v98;
    if (v113 != 255) {
      goto LABEL_38;
    }
    goto LABEL_28;
  }

  uint64_t v14 = (int *)v20;
  if (v34 == 255)
  {
LABEL_28:
    unint64_t v40 = v35[2];
    if (v40 > 1)
    {
      uint64_t v20 = (uint64_t)v35;
      unint64_t v41 = sub_100012624();
      uint64_t v42 = swift_allocError(&type metadata for KMError, v41, 0LL, 0LL);
      *(void *)uint64_t v43 = v20;
      *(_OWORD *)(v43 + 8) = 0u;
      *(_OWORD *)(v43 + 24) = 0u;
      *(_OWORD *)(v43 + sub_10007CFB4(v0 + 40) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_BYTE *)(v43 + 7sub_100006034(v0 + 2) = 0;
LABEL_45:
      swift_willThrow(v42);
      goto LABEL_46;
    }

    if (v40 != 1)
    {
      swift_bridgeObjectRelease(v35);
      unint64_t v72 = sub_100012624();
      uint64_t v42 = swift_allocError(&type metadata for KMError, v72, 0LL, 0LL);
      *(void *)uint64_t v73 = 0xD000000000000040LL;
      *(void *)(v73 + 8) = 0x800000010012C570LL;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(void *)(v73 + 64) = 0LL;
      *(_BYTE *)(v73 + 7sub_100006034(v0 + 2) = 50;
      goto LABEL_45;
    }

    uint64_t v20 = v35[4];
    uint64_t v61 = v35[5];
    uint64_t v92 = a7;
    unint64_t v95 = v9;
    uint64_t v62 = v35[6];
    uint64_t v63 = v35[7];
    uint64_t v89 = a5;
    unint64_t v64 = v35[8];
    uint64_t v65 = v35[9];
    uint64_t v66 = v35[10];
    uint64_t v67 = v35[11];
    uint64_t v99 = v35[12];
    char v101 = *((_BYTE *)v35 + 104);
    uint64_t v68 = v35;
    sub_1000516E4(v20, v61, v62, v63, v64, v65, v66, v67, v99, v101);
    swift_bridgeObjectRelease(v68);
    unint64_t v69 = sub_100012624();
    uint64_t v70 = swift_allocError(&type metadata for KMError, v69, 0LL, 0LL);
    *(void *)uint64_t v71 = v20;
    *(void *)(v71 + 8) = v61;
    *(void *)(v71 + 16) = v62;
    *(void *)(v71 + 24) = v63;
    *(void *)(v71 + 3sub_100006034(v0 + 2) = v64;
    *(void *)(v71 + sub_10007CFB4(v0 + 40) = v65;
    *(void *)(v71 + 48) = v66;
    *(void *)(v71 + 56) = v67;
    *(void *)(v71 + 64) = v99;
    *(_BYTE *)(v71 + 7sub_100006034(v0 + 2) = v101;
    swift_willThrow(v70);
    swift_release(v89);
    uint64_t v38 = v92;
    unint64_t v39 = v95;
LABEL_47:
    sub_10001226C(v38, v39);
    return v20;
  }

uint64_t sub_1000E4700(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = a6;
  unint64_t v8 = a5;
  uint64_t v11 = a1;
  uint64_t v12 = a2 - (void)a1;
  if (a1) {
    BOOL v13 = v12 < 32;
  }
  else {
    BOOL v13 = 1;
  }
  char v14 = v13;
  if (v13)
  {
    unint64_t v85 = sub_100012624();
    uint64_t v16 = swift_allocError(&type metadata for KMError, v85, 0LL, 0LL);
    *(void *)uint64_t v17 = 0xD000000000000033LL;
    *(void *)(v17 + 8) = 0x800000010012C4F0LL;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(void *)(v17 + 64) = 0LL;
    *(_BYTE *)(v17 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v16);
    uint64_t v109 = v16;
    swift_errorRetain(v16);
    uint64_t v18 = sub_100005FB4(&qword_10015AB20);
    if (!swift_dynamicCast(&v98, &v109, v18, &type metadata for KMError, 0LL))
    {
LABEL_40:
      swift_errorRelease(v109);
LABEL_45:
      uint64_t v71 = a4;
      return swift_bridgeObjectRelease(v71);
    }

    char v75 = v14;
    uint64_t v87 = a3;
    unint64_t v89 = a5;
    uint64_t v90 = a4;
    swift_errorRelease(v16);
    uint64_t v19 = v103;
    uint64_t v21 = v104;
    uint64_t v20 = v105;
    uint64_t v22 = v106;
    char v23 = v107;
    uint64_t v81 = v99;
    uint64_t v83 = v98;
    uint64_t v77 = v101;
    uint64_t v79 = v100;
    unint64_t v76 = v102;
    sub_1000516E4(v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);
    uint64_t v24 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v26 = v24[2];
    unint64_t v25 = v24[3];
    if (v26 >= v25 >> 1) {
      uint64_t v24 = sub_10008ECFC((void *)(v25 > 1), v26 + 1, 1, v24);
    }
    void v24[2] = v26 + 1;
    unint64_t v93 = v24;
    uint64_t v27 = &v24[10 * v26];
    v27[4] = v83;
    void v27[5] = v81;
    _DWORD v27[6] = v79;
    v27[7] = v77;
    v27[8] = v76;
    v27[9] = v19;
    v27[10] = v21;
    v27[11] = v20;
    v27[12] = v22;
    *((_BYTE *)v27 + 104) = v23;
    sub_100039508(v83, v81, v79, v77, v76, v19, v21, v20, v22, v23);
    swift_errorRelease(v109);
    if (!v11 || v12 < 28)
    {
      uint64_t v35 = swift_allocError(&type metadata for KMError, v85, 0LL, 0LL);
      uint64_t v37 = v35;
      char v28 = 0LL;
      *(void *)uint64_t v36 = 0xD000000000000033LL;
      unint64_t v39 = 0x800000010012C530LL;
      int v38 = 255;
      unint64_t v8 = v89;
      a4 = v90;
      uint64_t v7 = a6;
      a3 = v87;
      goto LABEL_27;
    }

    char v28 = 0LL;
    uint64_t v29 = 0LL;
    int v30 = 255;
    unint64_t v8 = v89;
    a4 = v90;
    unint64_t v31 = v93;
    uint64_t v7 = a6;
    a3 = v87;
    char v14 = v75;
  }

  else
  {
    uint64_t v29 = v6;
    int v32 = *a1;
    unint64_t v31 = _swiftEmptyArrayStorage;
    if (*a1 != -805638658 && v32 != -17958193)
    {
      char v28 = 0LL;
      char v14 = 1;
      int v30 = 255;
      goto LABEL_22;
    }

    int v30 = 0;
    char v28 = a1;
  }

  int v32 = *v11;
LABEL_22:
  if (v32 != -822415874 && v32 != -17958194) {
    goto LABEL_33;
  }
  if ((v14 & 1) != 0) {
    goto LABEL_37;
  }
  unint64_t v93 = v31;
  unint64_t v34 = sub_100012624();
  uint64_t v35 = swift_allocError(&type metadata for KMError, v34, 0LL, 0LL);
  uint64_t v37 = v35;
  int v38 = 0;
  *(void *)uint64_t v36 = 0xD00000000000002BLL;
  unint64_t v39 = 0x800000010012C5C0LL;
LABEL_27:
  *(void *)(v36 + 8) = v39;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(void *)(v36 + 64) = 0LL;
  *(_BYTE *)(v36 + 7sub_100006034(v0 + 2) = 24;
  swift_willThrow(v35);
  uint64_t v109 = v37;
  swift_errorRetain(v37);
  uint64_t v40 = sub_100005FB4(&qword_10015AB20);
  if (!swift_dynamicCast(&v98, &v109, v40, &type metadata for KMError, 0LL))
  {
    swift_bridgeObjectRelease(v93);
    goto LABEL_40;
  }

  int v84 = v38;
  uint64_t v86 = v28;
  uint64_t v88 = a3;
  uint64_t v96 = v7;
  swift_errorRelease(v37);
  uint64_t v41 = v98;
  uint64_t v42 = v99;
  uint64_t v43 = v100;
  uint64_t v44 = v101;
  uint64_t v45 = v104;
  uint64_t v46 = v106;
  char v47 = v107;
  uint64_t v80 = v103;
  unint64_t v82 = v102;
  uint64_t v78 = v105;
  sub_1000516E4(v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);
  uint64_t v91 = a4;
  if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) != 0) {
    int v48 = v93;
  }
  else {
    int v48 = sub_10008ECFC(0LL, v93[2] + 1LL, 1, v93);
  }
  unint64_t v50 = v48[2];
  unint64_t v49 = v48[3];
  if (v50 >= v49 >> 1) {
    int v48 = sub_10008ECFC((void *)(v49 > 1), v50 + 1, 1, v48);
  }
  void v48[2] = v50 + 1;
  uint64_t v51 = &v48[10 * v50];
  v51[4] = v41;
  void v51[5] = v42;
  v51[6] = v43;
  v51[7] = v44;
  v51[8] = v82;
  v51[9] = v80;
  v51[10] = v45;
  v51[11] = v78;
  v51[12] = v46;
  *((_BYTE *)v51 + 104) = v47;
  uint64_t v74 = v46;
  uint64_t v52 = v48;
  sub_100039508(v41, v42, v43, v44, v82, v80, v45, v78, v74, v47);
  swift_errorRelease(v109);
  unint64_t v31 = v52;
  uint64_t v29 = 0LL;
  a4 = v91;
  uint64_t v7 = v96;
  char v28 = v86;
  a3 = v88;
  int v30 = v84;
LABEL_33:
  if (v30 != 255)
  {
    uint64_t v11 = v28;
LABEL_37:
    swift_bridgeObjectRelease(v31);
    sub_1000E72A8((uint64_t)v11, a3, a4, v8, v7, (uint64_t)&v108);
    if (!v29)
    {
      swift_bridgeObjectRelease(a4);
      return v108;
    }

    goto LABEL_45;
  }

  unint64_t v53 = v31[2];
  if (v53 > 1)
  {
    uint64_t v54 = v31;
    unint64_t v55 = sub_100012624();
    uint64_t v56 = swift_allocError(&type metadata for KMError, v55, 0LL, 0LL);
    *(void *)uint64_t v57 = v54;
    *(_OWORD *)(v57 + 8) = 0u;
    *(_OWORD *)(v57 + 24) = 0u;
    *(_OWORD *)(v57 + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(v57 + 56) = 0u;
    *(_BYTE *)(v57 + 7sub_100006034(v0 + 2) = 0;
LABEL_44:
    swift_willThrow(v56);
    goto LABEL_45;
  }

  if (v53 != 1)
  {
    swift_bridgeObjectRelease(v31);
    unint64_t v72 = sub_100012624();
    uint64_t v56 = swift_allocError(&type metadata for KMError, v72, 0LL, 0LL);
    *(void *)uint64_t v73 = 0xD000000000000040LL;
    *(void *)(v73 + 8) = 0x800000010012C570LL;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(void *)(v73 + 64) = 0LL;
    *(_BYTE *)(v73 + 7sub_100006034(v0 + 2) = 50;
    goto LABEL_44;
  }

  uint64_t v59 = v31[4];
  uint64_t v60 = v31[5];
  uint64_t v92 = a4;
  uint64_t v61 = v31[6];
  uint64_t v62 = v31[7];
  unint64_t v63 = v31[8];
  uint64_t v64 = v31[9];
  uint64_t v65 = v31[10];
  uint64_t v66 = v31[11];
  uint64_t v94 = v31[12];
  char v97 = *((_BYTE *)v31 + 104);
  uint64_t v67 = v31;
  sub_1000516E4(v59, v60, v61, v62, v63, v64, v65, v66, v94, v97);
  swift_bridgeObjectRelease(v67);
  unint64_t v68 = sub_100012624();
  uint64_t v69 = swift_allocError(&type metadata for KMError, v68, 0LL, 0LL);
  *(void *)uint64_t v70 = v59;
  *(void *)(v70 + 8) = v60;
  *(void *)(v70 + 16) = v61;
  *(void *)(v70 + 24) = v62;
  *(void *)(v70 + 3sub_100006034(v0 + 2) = v63;
  *(void *)(v70 + sub_10007CFB4(v0 + 40) = v64;
  *(void *)(v70 + 48) = v65;
  *(void *)(v70 + 56) = v66;
  *(void *)(v70 + 64) = v94;
  *(_BYTE *)(v70 + 7sub_100006034(v0 + 2) = v97;
  swift_willThrow(v69);
  uint64_t v71 = v92;
  return swift_bridgeObjectRelease(v71);
}

void sub_1000E4D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000E4F8CLL);
}

void sub_1000E4FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Data.Deallocator(0LL);
  __chkstk_darwin(v5);
  Data._bridgeToObjectiveC()();
  if (a1) {
    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x1000E51B0LL);
}

uint64_t sub_1000E51C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_1000E74A8(a1, a2, a3, a6, a7);
  if (!v7) {
    __asm { BR              X10 }
  }

  return result;
}

void sub_1000E57E8(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (a1)
  {
    uint64_t v3 = (char *)&loc_1000E5874 + dword_1000E5B14[a2 >> 62];
    v4[1] = a3;
    v4[2] = v4;
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000E5B10LL);
}

void sub_1000E5B24( uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  uint64_t v14 = a3[4];
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a1;
  a3[3] = a2 & 1;
  a3[4] = 0LL;
  swift_retain(a5);
  sub_1000F1828(v10, v11, v12, v13, v14);
  if (*a3) {
    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x1000E5C24LL);
}

uint64_t sub_1000E5C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F1894(a1, a2, a4);
}

uint64_t sub_1000E5C3C(uint64_t a1, uint64_t (*a2)(void *))
{
  if (*(_DWORD *)a1 != 25) {
    return 2LL;
  }
  uint64_t KeyPath = (void *)swift_getKeyPath(&unk_10011B2B0);
  uint64_t v5 = sub_1000D6718(KeyPath, a1);
  uint64_t v7 = v6;
  swift_release(KeyPath);
  if (!String.count.getter(v5, v7))
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v7 = 0xE600000000000000LL;
    uint64_t v5 = 0x3E656E6F6E3CLL;
  }

  sub_1001025D0(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 24), v5, v7, v10);
  uint64_t v8 = a2(v10);
  sub_1000F2344((uint64_t)v10);
  return v8;
}

void sub_1000E5D28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000E5D78()
{
  LOWORD(v6) = v1;
  BYTE2(v6) = BYTE2(v1);
  HIBYTE(v6) = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  char v9 = BYTE6(v1);
  char v10 = HIBYTE(v1);
  __int16 v11 = v0;
  char v12 = BYTE2(v0);
  char v13 = BYTE3(v0);
  char v14 = BYTE4(v0);
  char v15 = BYTE5(v0);
  sub_1000E5F3C(&v6, (uint64_t)&v6 + BYTE6(v0), v0, &v5);
  sub_10001226C(v1, v0);
  if (!v2) {
    return v5;
  }
  return v3;
}

uint64_t sub_1000E5F3C@<X0>(uint32_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (!a1 || (unint64_t v6 = a2 - (void)a1, a2 - (uint64_t)a1 < 4))
  {
    unint64_t v7 = sub_100012624();
    uint64_t v8 = swift_allocError(&type metadata for KMError, v7, 0LL, 0LL);
    char v10 = "Binary not large enough to accommodate magic";
    unint64_t v11 = 0xD00000000000002CLL;
LABEL_4:
    *(void *)uint64_t v9 = v11;
    *(void *)(v9 + 8) = (unint64_t)(v10 - 32) | 0x8000000000000000LL;
LABEL_5:
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(void *)(v9 + 64) = 0LL;
    *(_BYTE *)(v9 + 7sub_100006034(v0 + 2) = 24;
    return swift_willThrow(v8);
  }

  int v13 = *a1;
  if ((int)*a1 > -822415875)
  {
    if (v13 > -17958195)
    {
      if (v13 != -17958194)
      {
        int v15 = -17958193;
LABEL_41:
        if (v13 == v15) {
          __asm { BR              X10 }
        }

        goto LABEL_46;
      }
    }

    else if (v13 != -822415874)
    {
      int v15 = -805638658;
      goto LABEL_41;
    }

    __asm { BR              X10 }
  }

  if (v13 <= -889275715)
  {
    if (v13 != -1095041334)
    {
      int v14 = -1078264118;
      goto LABEL_15;
    }

LABEL_71:
  uint64_t result = swift_slowDealloc(v76, -1LL, -1LL);
  *uint64_t v77 = v21;
  return result;
}

void sub_1000E68B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000E691C@<X0>(int a1@<W8>)
{
  if (BYTE6(v1) >= 0x1CuLL)
  {
    if (a1)
    {
      uint64_t v16 = v7;
      if (a1 == 1)
      {
        uint64_t v7 = v2 >> 32;
        sub_1000125E0(v5, v4);
        swift_bridgeObjectRetain(v3);
        sub_1000125E0(v2, v1);
        uint64_t v13 = sub_1000EF760((int)v2, v2 >> 32, v1 & 0x3FFFFFFFFFFFFFFFLL, v5, v4, BYTE6(v1), v16, v3, v8);
        if (!v6) {
          uint64_t v7 = v13;
        }
      }

      else
      {
        uint64_t v14 = *(void *)(v2 + 24);
        uint64_t v15 = *(void *)(v2 + 16);
        sub_1000125E0(v5, v4);
        swift_bridgeObjectRetain(v3);
        sub_1000125E0(v2, v1);
        swift_retain(v2);
        swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v7 = sub_1000EF760(v15, v14, v1 & 0x3FFFFFFFFFFFFFFFLL, v5, v4, BYTE6(v1), v16, v3, v8);
        swift_release(v1 & 0x3FFFFFFFFFFFFFFFLL);
        swift_release(v2);
      }

      sub_10001226C(v5, v4);
      swift_bridgeObjectRelease(v3);
      sub_10001226C(v2, v1);
    }

    else
    {
      LOWORD(v18) = v2;
      BYTE2(v18) = BYTE2(v2);
      HIBYTE(v18) = BYTE3(v2);
      char v19 = BYTE4(v2);
      char v20 = BYTE5(v2);
      char v21 = BYTE6(v2);
      char v22 = HIBYTE(v2);
      __int16 v23 = v1;
      char v24 = BYTE2(v1);
      char v25 = BYTE3(v1);
      char v26 = BYTE4(v1);
      char v27 = BYTE5(v1);
      sub_1000125E0(v5, v4);
      swift_bridgeObjectRetain(v3);
      sub_1000E6C48(&v18, BYTE6(v1), v7, v3, v8, (uint64_t)&v17);
      sub_10001226C(v5, v4);
      swift_bridgeObjectRelease(v3);
      sub_10001226C(v2, v1);
      if (!v6) {
        return v17;
      }
    }
  }

  else
  {
    unint64_t v9 = sub_100012624();
    uint64_t v10 = swift_allocError(&type metadata for KMError, v9, 0LL, 0LL);
    *(void *)uint64_t v11 = 0xD00000000000002ELL;
    *(void *)(v11 + 8) = 0x800000010012BCF0LL;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)(v11 + 64) = 0LL;
    *(_BYTE *)(v11 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v10);
  }

  return v7;
}

uint64_t sub_1000E6C48@<X0>( uint32_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (!a1)
  {
    unint64_t v25 = sub_100012624();
    uint64_t v26 = swift_allocError(&type metadata for KMError, v25, 0LL, 0LL);
    *(void *)uint64_t v27 = 0xD000000000000019LL;
    *(void *)(v27 + 8) = 0x800000010012C7E0LL;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(void *)(v27 + 64) = 0LL;
    *(_BYTE *)(v27 + 7sub_100006034(v0 + 2) = 24;
    return swift_willThrow(v26);
  }

  uint32_t magic = *a1;
  uint32_t v11 = a1[1];
  fat_header.uint32_t magic = magic;
  fat_header.uint32_t nfat_arch = v11;
  if (magic != -1095041334 && magic != -889275714)
  {
    __chkstk_darwin(a1);
    __asm { BR              X10 }
  }

  uint64_t v39 = a4;
  unint64_t v40 = HIDWORD(a5);
  uint64_t v38 = a3;
  uint64_t v13 = static os_log_type_t.info.getter(a1);
  unint64_t v14 = sub_100026BA8();
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v15, "Binary is fat.", 14LL, 2LL, _swiftEmptyArrayStorage);

  uint64_t v16 = bswap32(v11);
  uint64_t result = sub_1000EEE10(v16, a2);
  if (!v6)
  {
    uint32_t v18 = (fat_arch *)swift_slowAlloc(20 * v16, -1LL);
    char v19 = v18;
    if (v11) {
      uint32_t v18 = (fat_arch *)memcpy(v18, a1 + 2, 20 * v16);
    }
    if (magic == -1095041334)
    {
      uint64_t v20 = static os_log_type_t.info.getter(v18);
      char v21 = (void *)static OS_os_log.default.getter(v20);
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v21,  "Swapping big-endian fat header.",  31LL,  2LL,  _swiftEmptyArrayStorage,  v38,  v39,  v40);

      j__swap_fat_header(&fat_header, NX_LittleEndian);
      j__swap_fat_arch(v19, v16, NX_LittleEndian);
      uint32_t magic = fat_header.magic;
    }

    if (magic == -889275714)
    {
      char v22 = j__NXFindBestFatArch(a5, v40, v19, v16);
      if (v22)
      {
        uint64_t v23 = *(void *)&v22->offset;
        *(void *)&__int128 v24 = v23;
        *((void *)&v24 + 1) = HIDWORD(v23);
        *(_OWORD *)a6 = v24;
        *(_BYTE *)(a6 + 16) = 0;
        return swift_slowDealloc(v19, -1LL, -1LL);
      }

      HIDWORD(v42[1]) = -335544320;
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      strcpy((char *)v42, "Cannot find ");
      v33._uint64_t countAndFlagsBits = sub_1000D409C(v38, v39, a5);
      object = v33._object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(object);
      v35._uint64_t countAndFlagsBits = 0x20746166206E6920LL;
      v35._object = (void *)0xEE007972616E6962LL;
      String.append(_:)(v35);
      uint64_t v36 = v42[1];
      unint64_t v37 = sub_100012624();
      uint64_t v30 = swift_allocError(&type metadata for KMError, v37, 0LL, 0LL);
      *(void *)uint64_t v31 = v42[0];
      *(void *)(v31 + 8) = v36;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(void *)(v31 + 64) = 0LL;
      char v32 = 16;
    }

    else
    {
      unint64_t v29 = sub_100012624();
      uint64_t v30 = swift_allocError(&type metadata for KMError, v29, 0LL, 0LL);
      *(void *)uint64_t v31 = 0xD000000000000022LL;
      *(void *)(v31 + 8) = 0x800000010012C810LL;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(void *)(v31 + 64) = 0LL;
      char v32 = 24;
    }

    *(_BYTE *)(v31 + 7sub_100006034(v0 + 2) = v32;
    swift_willThrow(v30);
    return swift_slowDealloc(v19, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_1000E72A8@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  cpu_type_t v12 = *(_DWORD *)(result + 4);
  unsigned int v11 = *(_DWORD *)(result + 8);
  if ((*(_DWORD *)result | 0x1000000) == 0xCFFAEDFE)
  {
    if (v12 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t result = sub_1000F24A4(*(_DWORD *)(result + 4));
      if ((result & 0x80000000) == 0)
      {
        if ((v11 & 0x80000000) == 0)
        {
          cpu_type_t v12 = result;
          uint64_t result = sub_1000F24A4(v11);
          if ((result & 0x80000000) == 0)
          {
            unsigned int v11 = result;
            goto LABEL_7;
          }

uint64_t sub_1000E74A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!v5) {
    __asm { BR              X10 }
  }

  return a2;
}

uint64_t sub_1000E7AF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(void))((char *)&loc_1000E7B0C + *((int *)qword_1000E7BC0 + (a3 >> 62))))();
}

uint64_t sub_1000E7B1C()
{
  return ((uint64_t (*)(void))((char *)&loc_1000E7B2C + *((int *)qword_1000E7BD0 + v0)))();
}

uint64_t sub_1000E7B3C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < v3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a3 < v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (a3 >= BYTE6(a2))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a1 > (unint64_t)(a3 + 1))
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1000E7BB4LL);
  }

  return Data._Representation.subscript.getter();
}

uint64_t sub_1000E7BE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (&_compression_stream_identify_algorithm) {
    __asm { BR              X10 }
  }

  uint64_t v6 = static os_log_type_t.error.getter(a1);
  unint64_t v7 = sub_100026BA8();
  unint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v8,  "warning: libcompression not linked; returning existing data.",
    60LL,
    2LL,
    _swiftEmptyArrayStorage);

  a3[3] = (uint64_t)&type metadata for Data;
  a3[4] = (uint64_t)&off_10014F680;
  *a3 = a1;
  a3[1] = a2;
  return sub_1000125E0(a1, a2);
}

uint64_t sub_1000E7E84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!v10) {
    __asm { BR              X9 }
  }

  return a6;
}

uint64_t sub_1000E83B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1)
  {
    uint64_t v19 = 0LL;
    macho_find_symtab();
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v17 = 0xD000000000000020LL;
    unint64_t v18 = 0x800000010012C610LL;
    uint64_t v7 = a2;
  }

  else
  {
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v17 = 0xD00000000000001CLL;
    unint64_t v18 = 0x800000010012C5F0LL;
    uint64_t v7 = a2;
  }

  v8._uint64_t countAndFlagsBits = sub_1000D409C(v7, a3, a4);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._uint64_t countAndFlagsBits = 11817LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  unint64_t v11 = v18;
  unint64_t v12 = sub_100012624();
  uint64_t v13 = swift_allocError(&type metadata for KMError, v12, 0LL, 0LL);
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + 8) = v11;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(void *)(v14 + 64) = 0LL;
  *(_BYTE *)(v14 + 7sub_100006034(v0 + 2) = 24;
  return swift_willThrow(v13);
}

uint64_t sub_1000E89AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!v8)
  {
    uint64_t v11 = v10;
    unint64_t v13 = sub_1000E1424((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v13);
    __asm { BR              X10 }
  }

  return a1;
}

uint64_t sub_1000E8D28(uint64_t result, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v64 = result;
  uint64_t v7 = *(void *)(a3 + 16);
  if (!v7) {
    return result;
  }
  if ((a6 & 1) != 0) {
    a5 = 0LL;
  }
  uint64_t v62 = a5;
  swift_bridgeObjectRetain(a3);
  uint64_t v61 = a3;
  for (uint64_t i = (uint64_t *)(a3 + 56); ; i += 4)
  {
    uint64_t v15 = a4;
    uint64_t v16 = *(i - 2);
    uint64_t v17 = *(i - 1);
    uint64_t v18 = *i;
    uint64_t v67 = *(i - 3);
    uint64_t v19 = String.utf8CString.getter(v67);
    uint64_t v20 = v19 + 32;
    uint64_t v21 = v17;
    uint64_t v22 = String.utf8CString.getter(v17);
    uint64_t v23 = v22 + 32;
    uint64_t v68 = v16;
    swift_bridgeObjectRetain(v16);
    uint64_t v69 = v18;
    __n128 v24 = swift_bridgeObjectRetain(v18);
    if ((a2 & 1) != 0)
    {
      uint64_t section_by_name = macho_get_section_by_name(v64, v20, v23, v24);
      swift_release(v19);
      swift_release(v22);
      a4 = v15;
      if (!section_by_name)
      {
LABEL_24:
        uint64_t v46 = *a4;
        swift_bridgeObjectRetain(*a4);
        unint64_t v47 = sub_1000EC328(v67, v16, v21, v69);
        char v49 = v48;
        swift_bridgeObjectRelease(v46);
        if ((v49 & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
          uint64_t v51 = *a4;
          uint64_t v71 = *a4;
          *a4 = 0x8000000000000000LL;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000EDA30();
            uint64_t v51 = v71;
          }

          uint64_t v52 = *(void *)(v51 + 48) + 32 * v47;
          uint64_t v53 = *(void *)(v52 + 8);
          swift_bridgeObjectRelease(*(void *)(v52 + 24));
          swift_bridgeObjectRelease(v53);
          sub_1000ED180(v47, v51);
          uint64_t v54 = *a4;
          *a4 = v51;
          swift_bridgeObjectRelease(v69);
          swift_bridgeObjectRelease(v16);
          uint64_t v55 = v54;
        }

        else
        {
          swift_bridgeObjectRelease(v69);
          uint64_t v55 = v16;
        }

        swift_bridgeObjectRelease(v55);
        goto LABEL_8;
      }

      uint64_t v26 = v62;
      if (v62 < 0) {
        goto LABEL_40;
      }
      uint64_t v28 = v21;
      unint64_t v29 = (unsigned int *)(section_by_name + 40);
      uint64_t v27 = *(unsigned int *)(section_by_name + 36);
    }

    else
    {
      uint64_t section_by_name_64 = macho_get_section_by_name_64(v64, v20, v23, v24);
      swift_release(v19);
      swift_release(v22);
      a4 = v15;
      if (!section_by_name_64) {
        goto LABEL_24;
      }
      uint64_t v26 = v62;
      if (v62 < 0) {
        goto LABEL_41;
      }
      uint64_t v27 = *(void *)(section_by_name_64 + 40);
      if (v27 < 0) {
        goto LABEL_42;
      }
      uint64_t v28 = v21;
      unint64_t v29 = (unsigned int *)(section_by_name_64 + 48);
    }

    uint64_t v31 = *v29 - v26;
    uint64_t v32 = a7 + v31;
    if (__OFADD__(a7, v31)) {
      break;
    }
    uint64_t v66 = v7;
    uint64_t v33 = v32 + v27;
    if (__OFADD__(v32, v27)) {
      goto LABEL_38;
    }
    uint64_t v34 = swift_isUniquelyReferenced_nonNull_native(*a4);
    uint64_t v35 = *a4;
    uint64_t v70 = (void *)*a4;
    *a4 = 0x8000000000000000LL;
    unint64_t v37 = sub_1000EC328(v67, v68, v28, v69);
    uint64_t v38 = *(void *)(v35 + 16);
    BOOL v39 = (v36 & 1) == 0;
    uint64_t v40 = v38 + v39;
    if (__OFADD__(v38, v39)) {
      goto LABEL_39;
    }
    char v41 = v36;
    if (*(void *)(v35 + 24) >= v40)
    {
      if ((v34 & 1) == 0) {
        sub_1000EDA30();
      }
      uint64_t v42 = v68;
      unint64_t v45 = v70;
      if ((v41 & 1) == 0) {
        goto LABEL_31;
      }
    }

    else
    {
      sub_1000ECC24(v40, v34);
      uint64_t v42 = v68;
      unint64_t v43 = sub_1000EC328(v67, v68, v28, v69);
      if ((v41 & 1) != (v44 & 1)) {
        goto LABEL_44;
      }
      unint64_t v37 = v43;
      unint64_t v45 = v70;
      if ((v41 & 1) == 0)
      {
LABEL_31:
        v45[(v37 >> 6) + 8] |= 1LL << v37;
        uint64_t v56 = (uint64_t *)(v45[6] + 32 * v37);
        *uint64_t v56 = v67;
        v56[1] = v42;
        v56[2] = v28;
        uint64_t v13 = v69;
        v56[3] = v69;
        uint64_t v57 = v45[7] + 24 * v37;
        *(void *)uint64_t v57 = v32;
        *(void *)(v57 + 8) = v33;
        *(_BYTE *)(v57 + 16) = 0;
        uint64_t v58 = v45[2];
        BOOL v59 = __OFADD__(v58, 1LL);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_43;
        }
        v45[2] = v60;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v69);
        goto LABEL_7;
      }
    }

    uint64_t v12 = v45[7] + 24 * v37;
    *(void *)uint64_t v12 = v32;
    *(void *)(v12 + 8) = v33;
    *(_BYTE *)(v12 + 16) = 0;
    uint64_t v13 = v69;
LABEL_7:
    uint64_t v14 = *a4;
    *a4 = (uint64_t)v45;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v14);
    uint64_t v7 = v66;
LABEL_8:
    if (!--v7) {
      return swift_bridgeObjectRelease(v61);
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSectionName);
  __break(1u);
  return result;
}

uint64_t sub_1000E9120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v18 = a1;
  if (a1)
  {
    uint64_t v11 = (char *)&loc_1000E91AC + *((int *)qword_1000E9910 + (a3 >> 62));
    uint64_t v17 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __asm { BR              X9 }
  }

  uint64_t v12 = static os_log_type_t.error.getter(v9);
  unint64_t v13 = sub_100026BA8();
  uint64_t v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v14,  "Cannot decompress: Invalid buffer. Returning existing data",  58LL,  2LL,  _swiftEmptyArrayStorage);

  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F680;
  *a4 = a2;
  a4[1] = a3;
  return sub_1000125E0(a2, a3);
}

uint64_t compression_algorithm.description.getter(int a1)
{
  uint64_t result = 0x6573667A6CLL;
  if (a1 > 2208)
  {
    if (a1 == 2209 || a1 == 2305) {
      return result;
    }
    if (a1 == 2304) {
      return 1853258348LL;
    }
LABEL_11:
    v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    return 0x2065646F6328LL;
  }

  if (a1 != 2049 && a1 != 2193) {
    goto LABEL_11;
  }
  return result;
}

void sub_1000E9A1C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (&_compression_stream_identify_algorithm)
  {
    int v5 = a1;
    size_t v6 = compression_encode_scratch_buffer_size((compression_algorithm)a1);
    uint64_t v7 = swift_slowAlloc(v6, -1LL);
    uint64_t v8 = static os_log_type_t.info.getter(v7);
    uint64_t v9 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_10010F110;
    uint64_t v11 = compression_algorithm.description.getter(v5);
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100026B64();
    *(void *)(v10 + 3sub_100006034(v0 + 2) = v11;
    *(void *)(v10 + sub_10007CFB4(v0 + 40) = v13;
    unint64_t v14 = sub_100026BA8();
    uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v15, "Compressing data with %{public}s", 32LL, 2LL, v10);
    swift_bridgeObjectRelease(v10);

    __asm { BR              X10 }
  }

  uint64_t v16 = static os_log_type_t.error.getter(a1);
  unint64_t v17 = sub_100026BA8();
  uint64_t v18 = (void *)static OS_os_log.default.getter(v17);
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v18,  "warning: libcompression not linked; not compressing.",
    52LL,
    2LL,
    _swiftEmptyArrayStorage);

  *(void *)(a3 + 3sub_100006034(v0 + 2) = 0LL;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
}

uint64_t sub_1000E9D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1) {
    __asm { BR              X9 }
  }

  uint64_t v7 = static os_log_type_t.error.getter(0LL);
  unint64_t v8 = sub_100026BA8();
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v9,  "Cannot compress: Invalid buffer. Returning existing data",  56LL,  2LL,  _swiftEmptyArrayStorage);

  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F680;
  *a4 = a2;
  a4[1] = a3;
  return sub_1000125E0(a2, a3);
}

double sub_1000E9F6C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, size_t src_size, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  int64_t v40 = compression_encode_buffer(v38, v37, v53, v52, v54, (compression_algorithm)*(_DWORD *)(v39 - 84));
  if (!v40)
  {
    uint64_t v48 = static os_log_type_t.error.getter(0LL);
    char v49 = (void *)static OS_os_log.default.getter(v48);
    os_log(_:dso:log:_:_:)( v48,  &_mh_execute_header,  v49,  "Compression error (encoding buffer returned 0 size!)",  52LL,  2LL,  _swiftEmptyArrayStorage);

    *(void *)(v51 + 3sub_100006034(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)uint64_t v51 = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    return result;
  }

  if (v37 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (__OFADD__(v36, 1LL))
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x1000EA110LL);
  }

  uint64_t v41 = v40;
  if (v40 >= v37) {
    JUMPOUT(0x1000E9EB4LL);
  }
  uint64_t v42 = static os_log_type_t.info.getter(v40);
  uint64_t v43 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v43 + 16) = xmmword_10010F110;
  *(void *)(v43 + 56) = v33;
  *(void *)(v43 + 64) = v35;
  *(void *)(v43 + 3sub_100006034(v0 + 2) = v41;
  char v44 = (void *)static OS_os_log.default.getter(v43);
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v44, "Compressed data: %d bytes.", v50);
  swift_bridgeObjectRelease(v43);

  uint64_t v45 = sub_1000DA1A8(v38, v41);
  *(void *)(v51 + 24) = &type metadata for Data;
  *(void *)(v51 + 3sub_100006034(v0 + 2) = &off_10014F680;
  *(void *)uint64_t v51 = v45;
  *(void *)(v51 + 8) = v46;
  swift_slowDealloc(v38, -1LL, -1LL);
  return result;
}

void sub_1000EA140(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v4 = sub_1000F1AF4();
  if (v4) {
    __asm { BR              X10 }
  }

  uint64_t v5 = static os_log_type_t.error.getter(v4);
  unint64_t v6 = sub_100026BA8();
  uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  v7,  "warning: libImg4Linked not linked",  33LL,  2LL,  _swiftEmptyArrayStorage);

  *(void *)(a2 + 3sub_100006034(v0 + 2) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

void sub_1000EA3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }

uint64_t sub_1000EA458()
{
  if ((_DWORD)v4)
  {
    int v5 = v4;
    uint64_t v6 = static os_log_type_t.info.getter(v4);
    uint64_t v7 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_10010F110;
    *(void *)(v8 + 56) = &type metadata for Int32;
    *(void *)(v8 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 3sub_100006034(v0 + 2) = v5;
    unint64_t v9 = sub_100026BA8();
    uint64_t v10 = (void *)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v10, "Img4 format not .im4p (%d), attempting to decode as .img4", 1);
    swift_bridgeObjectRelease(v8);

    __asm { BR              X10 }
  }

  uint64_t v11 = static os_log_type_t.info.getter(v4);
  uint64_t v12 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_10010F110;
  uint64_t v14 = v22;
  *(void *)(v13 + 56) = &type metadata for Int;
  *(void *)(v13 + 64) = &protocol witness table for Int;
  *(void *)(v13 + 3sub_100006034(v0 + 2) = v14;
  unint64_t v15 = sub_100026BA8();
  uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v16, "Img4 payload length: %d", v19);
  swift_bridgeObjectRelease(v13);

  if (!v21)
  {
    __break(1u);
    JUMPOUT(0x1000EA720LL);
  }

  uint64_t result = sub_1000DA1A8(v21, v14);
  v0[3] = (uint64_t)&type metadata for Data;
  v0[4] = (uint64_t)&off_10014F680;
  *unsigned int v0 = result;
  v0[1] = v18;
  return result;
}

BOOL sub_1000EA740@<W0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  BOOL result = sub_1000F1AF4();
  if (result) {
    __asm { BR              X10 }
  }

  *(void *)(a2 + 3sub_100006034(v0 + 2) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void sub_1000EAAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[4] = a1;
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  v8[2] = *(void *)(v6 - 8);
  v8[3] = v6;
  __chkstk_darwin(v6);
  v8[1] = (char *)v8 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v9 = 0;
  uint64_t v10 = 0LL;
  __asm { BR              X10 }

void sub_1000EABD0()
{
  unsigned int v9 = BYTE6(v2);
  sub_1000B23E8(v1, v7);
  if (v5 >> 60 != 15)
  {
    sub_1000D1428(v4, v5);
    __asm { BR              X10 }
  }

  uint64_t v10 = String.utf8CString.getter(v6);
  swift_bridgeObjectRelease(v3);
  int Payload = Img4EncodeCreatePayload( (const char *)(v10 + 32),  "KernelManagement_executables-463.40.2",  *(const void **)(v8 - 112),  v9,  0LL,  0,  (void *)(v8 - 96),  (unsigned int *)(v8 - 100));
  swift_release(v10);
  uint64_t v12 = swift_bridgeObjectRelease(0LL);
  if (Payload == 100 && (uint64_t v13 = *(void *)(v8 - 96)) != 0)
  {
    uint64_t v14 = *(unsigned int *)(v8 - 100);
    uint64_t v16 = *(void *)(v8 - 136);
    uint64_t v15 = *(void *)(v8 - 128);
    uint64_t v17 = *(void *)(v8 - 120);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v15 + 104))( v16,  enum case for Data.Deallocator.free(_:),  v17);
    uint64_t v19 = ((uint64_t (*)(uint64_t))Data.Deallocator._deallocator.getter)(v18);
    uint64_t v21 = v20;
    if ((_DWORD)v14)
    {
      uint64_t v22 = v19;
      uint64_t v23 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      swift_retain(v21);
      uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))__DataStorage.init(bytes:length:copy:deallocator:offset:))( v13,  v14,  0LL,  v22,  v21,  0LL);
      uint64_t v25 = sub_1000EF830(v24, v14);
      unint64_t v27 = v26;
      swift_release(v21);
    }

    else
    {
      uint64_t v33 = (void (*)(uint64_t, void))((uint64_t (*)(uint64_t))Data.Deallocator._deallocator.getter)(v19);
      uint64_t v35 = v34;
      v33(v13, 0LL);
      swift_release(v21);
      swift_release(v35);
      uint64_t v25 = 0LL;
      unint64_t v27 = 0xC000000000000000LL;
    }

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    *(void *)(v0 + 24) = &type metadata for Data;
    *(void *)(v0 + 3sub_100006034(v0 + 2) = &off_10014F680;
    *(void *)uint64_t v0 = v25;
    *(void *)(v0 + 8) = v27;
  }

  else
  {
    uint64_t v28 = static os_log_type_t.error.getter(v12);
    uint64_t v29 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_10010F110;
    *(void *)(v30 + 56) = &type metadata for Int32;
    *(void *)(v30 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v30 + 3sub_100006034(v0 + 2) = Payload;
    unint64_t v31 = sub_100026BA8();
    uint64_t v32 = (void *)static OS_os_log.default.getter(v31);
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v32, "Error encoding img4 payload: %d", v36);
    swift_bridgeObjectRelease(v30);

    *(void *)(v0 + 3sub_100006034(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }

uint64_t sub_1000EAF08(uint64_t a1, uint64_t a2)
{
  if (sub_1000F1AF4()) {
    __asm { BR              X10 }
  }

  unint64_t v4 = sub_100012624();
  uint64_t v5 = swift_allocError(&type metadata for KMError, v4, 0LL, 0LL);
  *(void *)uint64_t v6 = 0xD000000000000039LL;
  *(void *)(v6 + 8) = 0x800000010012BFB0LL;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(void *)(v6 + 64) = 0LL;
  *(_BYTE *)(v6 + 7sub_100006034(v0 + 2) = 10;
  swift_willThrow(v5);
  return v2 & 1;
}

void sub_1000EB194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }

void sub_1000EB244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v3 = v4 == 0;
}

uint64_t sub_1000EB2C4(uint64_t a1, uint64_t a2)
{
  if (&_compression_stream_identify_algorithm) {
    __asm { BR              X10 }
  }

  uint64_t v2 = static os_log_type_t.error.getter(a1);
  unint64_t v3 = sub_100026BA8();
  int v4 = (void *)static OS_os_log.default.getter(v3);
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v4,  "warning: libcompression not linked",  34LL,  2LL,  _swiftEmptyArrayStorage);

  unint64_t v5 = sub_100012624();
  uint64_t v6 = swift_allocError(&type metadata for KMError, v5, 0LL, 0LL);
  *(void *)uint64_t v7 = 0xD00000000000003CLL;
  *(void *)(v7 + 8) = 0x800000010012C020LL;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(void *)(v7 + 64) = 0LL;
  *(_BYTE *)(v7 + 7sub_100006034(v0 + 2) = 10;
  swift_willThrow(v6);
  return v8 & 1;
}

void sub_1000EB5A8( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, uint64_t a8)
{
  if (!sub_1000F1BC0())
  {
    unint64_t v22 = sub_100012624();
    uint64_t v23 = swift_allocError(&type metadata for KMError, v22, 0LL, 0LL);
    *(void *)uint64_t v24 = 0xD000000000000019LL;
    *(void *)(v24 + 8) = 0x800000010012C060LL;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(void *)(v24 + 64) = 0LL;
    *(_BYTE *)(v24 + 7sub_100006034(v0 + 2) = 10;
    swift_willThrow(v23);
    return;
  }

  id v115 = 0LL;
  uint64_t v116 = 0LL;
  if ((a4 & 1) == 0)
  {
    unint64_t v109 = 0xF000000000000000LL;
    uint64_t v110 = 0LL;
    goto LABEL_14;
  }

  if ((a6 & 1) != 0)
  {
    unint64_t v44 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v44, 0LL, 0LL);
    unint64_t v47 = "Could not encode compression info: Payload is compressed but cannot find uncompressed length";
    unint64_t v48 = 0xD00000000000005CLL;
  }

  else
  {
    if ((a8 & 0x100000000LL) == 0)
    {
      if ((a5 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
      }

      else if (!HIDWORD(a5))
      {
        if (!sub_1000F22D4())
        {
LABEL_43:
          unint64_t v88 = sub_100012624();
          uint64_t v45 = swift_allocError(&type metadata for KMError, v88, 0LL, 0LL);
          unint64_t v48 = 0xD000000000000049LL;
          unint64_t v59 = 0x800000010012C1C0LL;
          *(void *)uint64_t v89 = 0xD000000000000049LL;
          *(void *)(v89 + 8) = 0x800000010012C1C0LL;
          *(_OWORD *)(v89 + 16) = 0u;
          *(_OWORD *)(v89 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v89 + 48) = 0u;
          *(void *)(v89 + 64) = 0LL;
          *(_BYTE *)(v89 + 7sub_100006034(v0 + 2) = 50;
          goto LABEL_44;
        }

        int v113 = 0LL;
        unsigned int v112 = 0;
        uint64_t v14 = (uint64_t *)DEREncoderCreate(0);
        if (!v14)
        {
          uint64_t v82 = static os_log_type_t.error.getter(0LL);
          uint64_t v83 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v19 = swift_allocObject(v83, 72LL, 7LL);
          *(_OWORD *)(v19 + 16) = xmmword_10010F110;
          *(void *)(v19 + 56) = &type metadata for UInt32;
          *(void *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 3sub_100006034(v0 + 2) = 2;
          unint64_t v84 = sub_100026BA8();
          uint64_t v21 = (void *)static OS_os_log.default.getter(v84);
          os_log(_:dso:log:_:_:)( v82,  &_mh_execute_header,  v21,  "Could not create DEREncoder: %{public}d",  39LL,  2LL,  v19);
          goto LABEL_42;
        }

        if ((_DWORD)a8 != 2193)
        {
          uint64_t v85 = static os_log_type_t.error.getter(v14);
          uint64_t v86 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v19 = swift_allocObject(v86, 72LL, 7LL);
          *(_OWORD *)(v19 + 16) = xmmword_10010F110;
          *(void *)(v19 + 56) = &type metadata for UInt32;
          *(void *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 3sub_100006034(v0 + 2) = a8;
          unint64_t v87 = sub_100026BA8();
          uint64_t v21 = (void *)static OS_os_log.default.getter(v87);
          os_log(_:dso:log:_:_:)( v85,  &_mh_execute_header,  v21,  "Unsupported compressions algorithm: %{public}d, only COMPRESSION_LZFSE_SMALL_BLOCKS is supported",  96LL,  2LL,  v19);
          goto LABEL_42;
        }

        uint64_t v15 = v14;
        if (DEREncoderAddUInt32(v14, 0, 2u, 1u))
        {
          DEREncoderDestroy((void **)v15);
          uint64_t v17 = static os_log_type_t.error.getter(v16);
          uint64_t v18 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
          *(_OWORD *)(v19 + 16) = xmmword_10010F110;
          *(void *)(v19 + 56) = &type metadata for UInt32;
          *(void *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 3sub_100006034(v0 + 2) = 3;
          unint64_t v20 = sub_100026BA8();
          uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
          os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  v21,  "DEREncoderAddUInt32 error while encoding algorithm: %{public}d",  62LL,  2LL,  v19);
LABEL_42:

          swift_bridgeObjectRelease(v19);
          goto LABEL_43;
        }

        if (DEREncoderAddUInt32(v15, 0, 2u, a5))
        {
          DEREncoderDestroy((void **)v15);
          uint64_t v97 = static os_log_type_t.error.getter(v96);
          uint64_t v98 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v19 = swift_allocObject(v98, 72LL, 7LL);
          *(_OWORD *)(v19 + 16) = xmmword_10010F110;
          *(void *)(v19 + 56) = &type metadata for UInt32;
          *(void *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 3sub_100006034(v0 + 2) = 3;
          unint64_t v99 = sub_100026BA8();
          uint64_t v21 = (void *)static OS_os_log.default.getter(v99);
          os_log(_:dso:log:_:_:)( v97,  &_mh_execute_header,  v21,  "DEREncoderAddUInt32 error while encoding size: %{public}d",  57LL,  2LL,  v19);
          goto LABEL_42;
        }

        if (DEREncoderCreateEncodedBuffer((uint64_t **)v15, &v113, &v112)
          || (uint64_t v104 = v112) == 0
          || (uint64_t v105 = v113) == 0LL)
        {
          DEREncoderDestroy((void **)v15);
          uint64_t v101 = static os_log_type_t.error.getter(v100);
          uint64_t v102 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v19 = swift_allocObject(v102, 72LL, 7LL);
          *(_OWORD *)(v19 + 16) = xmmword_10010F110;
          *(void *)(v19 + 56) = &type metadata for UInt32;
          *(void *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 3sub_100006034(v0 + 2) = 3;
          unint64_t v103 = sub_100026BA8();
          uint64_t v21 = (void *)static OS_os_log.default.getter(v103);
          os_log(_:dso:log:_:_:)( v101,  &_mh_execute_header,  v21,  "Could not encode compresssion info into buffer:: %{public}d",  59LL,  2LL,  v19);
          goto LABEL_42;
        }

        DEREncoderDestroy((void **)v15);
        uint64_t v106 = sub_1000DA1A8(v105, v104);
        unint64_t v109 = v107;
        uint64_t v110 = v106;
        if (v107 >> 60 == 15) {
          goto LABEL_43;
        }
LABEL_14:
        NSString v25 = String._bridgeToObjectiveC()();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        unsigned int PayloadPropertiesData = AMAuthInstallApImg4GetPayloadPropertiesData(0LL, &v116, v25, isa);

        if (PayloadPropertiesData || (char v49 = v116) == 0LL)
        {
          int v113 = 0LL;
          unint64_t v114 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(59LL);
          v28._uint64_t countAndFlagsBits = 0xD000000000000039LL;
          v28._object = (void *)0x800000010012C080LL;
          String.append(_:)(v28);
          unsigned int v112 = PayloadPropertiesData;
          v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
          object = v29._object;
          String.append(_:)(v29);
          swift_bridgeObjectRelease(object);
          unint64_t v31 = v113;
          unint64_t v32 = v114;
          unint64_t v33 = sub_100012624();
          swift_allocError(&type metadata for KMError, v33, 0LL, 0LL);
          *(void *)uint64_t v34 = v31;
          *(void *)(v34 + 8) = v32;
          *(_OWORD *)(v34 + 16) = 0u;
          *(_OWORD *)(v34 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(void *)(v34 + 64) = 0LL;
          *(_BYTE *)(v34 + 7sub_100006034(v0 + 2) = 31;
          swift_bridgeObjectRetain(v32);
          swift_willThrow(v35);
          swift_bridgeObjectRetain(v32);
          uint64_t v37 = static os_log_type_t.error.getter(v36);
          uint64_t v38 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
          *(_OWORD *)(v39 + 16) = xmmword_10010F110;
          *(void *)(v39 + 56) = &type metadata for String;
          *(void *)(v39 + 64) = sub_100026B64();
          *(void *)(v39 + 3sub_100006034(v0 + 2) = v31;
          *(void *)(v39 + sub_10007CFB4(v0 + 40) = v32;
          unint64_t v40 = sub_100026BA8();
          uint64_t v41 = (void *)static OS_os_log.default.getter(v40);
          os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v41, "%{public}s", 10LL, 2LL, v39);
          swift_bridgeObjectRelease(v39);

          unint64_t v43 = v109;
          uint64_t v42 = v110;
        }

        else
        {
          uint64_t v50 = 1819177579LL;
          unint64_t v51 = 0xE400000000000000LL;
          uint64_t v52 = 1803056481LL;
          unint64_t v53 = 0xE400000000000000LL;
          uint64_t v54 = 1936684390LL;
          if (a2 != 2)
          {
            uint64_t v54 = a1;
            unint64_t v53 = a2;
          }

          if (a2 != 1)
          {
            uint64_t v52 = v54;
            unint64_t v51 = v53;
          }

          if (a2) {
            uint64_t v50 = v52;
          }
          uint64_t v108 = v50;
          if (a2) {
            unint64_t v55 = v51;
          }
          else {
            unint64_t v55 = 0xE400000000000000LL;
          }
          sub_1000B23E8(a1, a2);
          v56.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          if (a3 >> 60 == 15) {
            Class v57 = 0LL;
          }
          else {
            Class v57 = Data._bridgeToObjectiveC()().super.isa;
          }
          if (v109 >> 60 == 15)
          {
            Class v60 = 0LL;
          }

          else
          {
            sub_1000125E0(v110, v109);
            Class v60 = Data._bridgeToObjectiveC()().super.isa;
            sub_10002193C(v110, v109);
          }

          uint64_t v61 = String.utf8CString.getter(v108);
          id v62 = v49;
          swift_bridgeObjectRelease(v55);
          unsigned int v63 = AMAuthInstallApImg4CreatePayloadWithProperties( v61 + 32,  "KernelManagement_executables-463.40.2",  v56.super.isa,  v57,  v60,  v62,  &v115);

          swift_release(v61);
          if (!v63)
          {
            id v77 = v115;
            if (v115)
            {
              id v78 = v115;
              uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
              uint64_t v81 = v80;

              a7[3] = (uint64_t)&type metadata for Data;
              a7[4] = (uint64_t)&off_10014F680;

              sub_10002193C(v110, v109);
              *a7 = v79;
              a7[1] = v81;
              return;
            }
          }

          int v113 = 0LL;
          unint64_t v114 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(65LL);
          v64._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
          v64._object = (void *)0x800000010012C0C0LL;
          String.append(_:)(v64);
          unsigned int v112 = v63;
          v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
          uint64_t v66 = v65._object;
          String.append(_:)(v65);
          swift_bridgeObjectRelease(v66);
          uint64_t v67 = v113;
          unint64_t v32 = v114;
          unint64_t v68 = sub_100012624();
          swift_allocError(&type metadata for KMError, v68, 0LL, 0LL);
          *(void *)uint64_t v69 = v67;
          *(void *)(v69 + 8) = v32;
          *(_OWORD *)(v69 + 16) = 0u;
          *(_OWORD *)(v69 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v69 + 48) = 0u;
          *(void *)(v69 + 64) = 0LL;
          *(_BYTE *)(v69 + 7sub_100006034(v0 + 2) = 31;
          swift_bridgeObjectRetain(v32);
          swift_willThrow(v70);

          swift_bridgeObjectRetain(v32);
          uint64_t v72 = static os_log_type_t.error.getter(v71);
          uint64_t v73 = sub_100005FB4((uint64_t *)&unk_1001596B0);
          uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
          *(_OWORD *)(v74 + 16) = xmmword_10010F110;
          *(void *)(v74 + 56) = &type metadata for String;
          *(void *)(v74 + 64) = sub_100026B64();
          *(void *)(v74 + 3sub_100006034(v0 + 2) = v67;
          *(void *)(v74 + sub_10007CFB4(v0 + 40) = v32;
          unint64_t v75 = sub_100026BA8();
          unint64_t v76 = (void *)static OS_os_log.default.getter(v75);
          os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v76, "%{public}s", 10LL, 2LL, v74);
          swift_bridgeObjectRelease(v74);

          uint64_t v42 = v110;
          unint64_t v43 = v109;
        }

        sub_10002193C(v42, v43);
        swift_bridgeObjectRelease(v32);
        return;
      }

      __break(1u);
    }

    unint64_t v58 = sub_100012624();
    uint64_t v45 = swift_allocError(&type metadata for KMError, v58, 0LL, 0LL);
    unint64_t v47 = "Could not encode compression info: Payload is compressed but cannot find algorithm info";
    unint64_t v48 = 0xD000000000000057LL;
  }

  unint64_t v59 = (unint64_t)(v47 - 32) | 0x8000000000000000LL;
  *(void *)uint64_t v46 = v48;
  *(void *)(v46 + 8) = v59;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_OWORD *)(v46 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(void *)(v46 + 64) = 0LL;
  *(_BYTE *)(v46 + 7sub_100006034(v0 + 2) = 10;
LABEL_44:
  uint64_t v90 = swift_willThrow(v45);
  uint64_t v91 = static os_log_type_t.error.getter(v90);
  uint64_t v92 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v93 = swift_allocObject(v92, 72LL, 7LL);
  *(_OWORD *)(v93 + 16) = xmmword_10010F110;
  *(void *)(v93 + 56) = &type metadata for String;
  *(void *)(v93 + 64) = sub_100026B64();
  *(void *)(v93 + 3sub_100006034(v0 + 2) = v48;
  *(void *)(v93 + sub_10007CFB4(v0 + 40) = v59;
  unint64_t v94 = sub_100026BA8();
  unint64_t v95 = (void *)static OS_os_log.default.getter(v94);
  os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v95, "%{public}s", 10LL, 2LL, v93);
  swift_bridgeObjectRelease(v93);
}

uint64_t sub_1000EC06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000E74A8(a1, a2, a3, *v3, v3[1]);
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000EC094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_1000E89AC(a1, a2, a3, a4, a5, a6 & 1, *v6, v6[1]);
}

uint64_t sub_1000EC0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E51C0(a1, a2, a3, a4, a5, *v5, v5[1]);
}

uint64_t sub_1000EC0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *v5;
  uint64_t v11 = v5[1];
  uint64_t v13 = swift_allocObject(&unk_10014FC78, 32LL, 7LL);
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  swift_retain(a5);
  sub_1000E51C0(a1, a2, a3, (uint64_t)sub_1000F24CC, v13, v12, v11);
  return swift_release(v13);
}

uint64_t sub_1000EC178( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000E7E84(a1, a2, a3, a4, a5 & 1, a6, a7, a8, *v8, v8[1]);
}

uint64_t sub_1000EC1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100102738(a1, a2, a3, a4, a5);
  if (v5) {
    return v7;
  }
  return result;
}

void sub_1000EC1C0(uint64_t a1)
{
}

void sub_1000EC1C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000EC1D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E7BE0(*(void *)v1, *(void *)(v1 + 8), a1);
}

void sub_1000EC1D8(uint64_t a1@<X8>)
{
}

BOOL sub_1000EC1E0@<W0>(uint64_t a1@<X8>)
{
  return sub_1000EA740(*(void *)(v1 + 8), a1);
}

uint64_t sub_1000EC1E8()
{
  return sub_1000EAF08(*v0, v0[1]) & 1;
}

uint64_t sub_1000EC204()
{
  return sub_1000EB2C4(*v0, v0[1]) & 1;
}

void sub_1000EC220()
{
}

uint64_t sub_1000EC238(uint64_t a1, uint64_t a2)
{
  return sub_1000EEE10(a1, a2);
}

uint64_t sub_1000EC24C(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_100103540(a1, a2, a3, a4, a5, a6);
}

void sub_1000EC27C( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, unint64_t a8)
{
}

uint64_t sub_1000EC2B8()
{
  return ((uint64_t (*)(void))((char *)&loc_1000EC2CC
                                         + *((int *)qword_1000EC310 + (*(void *)(v0 + 8) >> 62))))(0LL);
}

uint64_t sub_1000EC2DC()
{
  return BYTE6(v0);
}

uint64_t sub_1000EC320()
{
  return compression_algorithm.description.getter(*v0);
}

unint64_t sub_1000EC328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v9 = Hasher._finalize()();
  return sub_1000EC3D4(a1, a2, a3, a4, v9);
}

unint64_t sub_1000EC3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      uint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[1];
      uint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      BOOL v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0LL) & 1) != 0)
      {
        BOOL v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v13;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

double sub_1000EC4D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100006114(a1, a2);
  LOBYTE(asub_100006034(v0 + 2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000ED684();
      uint64_t v12 = v17;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = (_OWORD *)(*(void *)(v12 + 56) + 48 * v9);
    __int128 v14 = v13[1];
    *a3 = *v13;
    a3[1] = v14;
    a3[2] = v13[2];
    sub_1000ECF98(v9, v12);
    uint64_t v15 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    double result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }

  return result;
}

Swift::Int sub_1000EC5D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015BE20);
  char v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v40 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v41 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v41 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_37:
          swift_release(v5);
          if ((v42 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v41 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v40) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v41 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_1000EC910(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015BE00);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_1000ECC24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015BDF0);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v39 = v3;
  int64_t v40 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v25 = v41[v14];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v5);
          unint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v40) {
              goto LABEL_36;
            }
            unint64_t v25 = v41[v14];
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

unint64_t sub_1000ECF98(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }

        else if (v15 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          unint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            _OWORD *v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          uint64_t v20 = (__int128 *)(v19 + 48 * v3);
          unint64_t v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 3))
          {
            __int128 v9 = *v21;
            __int128 v10 = v21[2];
            v20[1] = v21[1];
            void v20[2] = v10;
            *uint64_t v20 = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1000ED180(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v10 = (uint64_t *)(*(void *)(a2 + 48) + 32 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v13 = v10[2];
        uint64_t v14 = v10[3];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        String.hash(into:)(v31, v11, v12);
        swift_bridgeObjectRetain(v14);
        String.hash(into:)(v31, v13, v14);
        swift_bridgeObjectRelease(v14);
        Swift::Int v15 = Hasher._finalize()();
        swift_bridgeObjectRelease(v14);
        Swift::Int result = swift_bridgeObjectRelease(v12);
        unint64_t v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8) {
            goto LABEL_5;
          }
        }

        else if (v16 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v16)
        {
LABEL_11:
          uint64_t v17 = *(void *)(a2 + 48);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            __int128 v20 = v19[1];
            _OWORD *v18 = *v19;
            v18[1] = v20;
          }

          uint64_t v21 = *(void *)(a2 + 56);
          unint64_t v22 = v21 + 24 * v3;
          uint64_t v23 = (__int128 *)(v21 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v22 >= (unint64_t)v23 + 24 || (v24 = v3 == v6, int64_t v3 = v6, !v24))
          {
            __int128 v9 = *v23;
            *(void *)(v22 + 16) = *((void *)v23 + 2);
            *(_OWORD *)unint64_t v22 = v9;
            int64_t v3 = v6;
          }
        }

void sub_1000ED3B0(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100006114(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ED684();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      sub_1000395F4((uint64_t)a1, v18[7] + 48 * v12, &qword_10015BE10);
      return;
    }

void sub_1000ED528(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100006114(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ED87C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v1sub_100006034(v0 + 2) = a1;
      return;
    }

void sub_1000ED684()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015BE20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v28 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void sub_1000ED87C()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015BE00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_1000EDA30()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_10015BDF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }

uint64_t sub_1000EDC00@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E9120(v11, a3, a4, a5);
    return sub_10001226C(a3, a4);
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EDCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v10 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E4FA4(v10, a4, a5);
    return sub_10001226C(a4, a5);
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EDD58@<X0>( unint64_t a1@<X0>, int64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, void)@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = v6;
  uint64_t v15 = __DataStorage._bytes.getter();
  if (!v15)
  {
    unint64_t v7 = 0LL;
    BOOL v19 = __OFSUB__(a2, a1);
    uint64_t v20 = a2 - a1;
    if (!v19) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }

  uint64_t v17 = v15;
  uint64_t v18 = __DataStorage._offset.getter();
  unint64_t v16 = a1 - v18;
  if (!__OFSUB__(a1, v18))
  {
    unint64_t v7 = (char *)(v17 + v16);
    BOOL v19 = __OFSUB__(a2, a1);
    uint64_t v20 = a2 - a1;
    if (!v19)
    {
LABEL_4:
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = &v7[v22];
      if (!v7) {
        uint64_t v23 = 0LL;
      }
      uint64_t v17 = v23 - v7;
      BOOL v24 = v23 - v7 < 32 || v7 == 0LL;
      if (v24)
      {
        char v78 = 1;
        a1 = sub_100012624();
        uint64_t v25 = swift_allocError(&type metadata for KMError, a1, 0LL, 0LL);
        *(void *)uint64_t v26 = 0xD000000000000033LL;
        *(void *)(v26 + 8) = 0x800000010012C4F0LL;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v26 + 48) = 0u;
        *(void *)(v26 + 64) = 0LL;
        *(_BYTE *)(v26 + 7sub_100006034(v0 + 2) = 24;
        swift_willThrow(v25);
        uint64_t v96 = v25;
        swift_errorRetain(v25);
        uint64_t v27 = sub_100005FB4(&qword_10015AB20);
        if ((swift_dynamicCast(&v86, &v96, v27, &type metadata for KMError, 0LL) & 1) == 0) {
          return swift_errorRelease(v96);
        }
        unint64_t v69 = a1;
        uint64_t v83 = a4;
        swift_errorRelease(v25);
        a6 = v91;
        a4 = v92;
        a3 = v93;
        uint64_t v8 = v94;
        LOBYTE(a1) = v95;
        uint64_t v74 = v87;
        uint64_t v76 = v86;
        uint64_t v71 = v89;
        uint64_t v72 = v88;
        unint64_t v70 = v90;
        sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, (uint64_t)v93, v94, v95);
        int64_t v28 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
        a5 = v28[2];
        unint64_t v16 = v28[3];
        uint64_t v80 = v28;
        a2 = a5 + 1;
        if (a5 < v16 >> 1) {
          goto LABEL_15;
        }
        goto LABEL_50;
      }

      int v31 = 0;
      LODWORD(v16) = *(_DWORD *)v7;
      a3 = _swiftEmptyArrayStorage;
      if (*(_DWORD *)v7 == -805638658 || (_DWORD)v16 == -17958193)
      {
        int64_t v30 = v7;
        goto LABEL_25;
      }

uint64_t sub_1000EE3EC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E9D44(v11, a3, a4, a5);
    return sub_10001226C(a3, a4);
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EE4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v10 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000EA3A0(v10, a4, a5);
    return sub_10001226C(a4, a5);
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EE54C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v17 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v17 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000EAAD4(v17, a4, a5, a6, a7);
    sub_10003783C(a4, a5);
    sub_10001226C(a6, a7);
    return sub_10002193C(a8, a9);
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1000EE634(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v12 = v4 + v2;
  }
  else {
    int64_t v12 = v4;
  }
  uint64_t result = sub_1000EE818(result, v12, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_1000EE72C(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = sub_1000EE938(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

void *sub_1000EE818(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BD90);
    int64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    void v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    int64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100005FB4(&qword_100159470);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000EE938(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BDF8);
    int64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000EEA50(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000EEA88(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

char *sub_1000EEA6C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000EEBA8(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

void *sub_1000EEA88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BD90);
    int64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    void v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    int64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100005FB4(&qword_100159470);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000EEBA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015BDF8);
    int64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13);
  }

  swift_release(a4);
  return v11;
}

uint64_t *sub_1000EECC0(uint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 32 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[3];
    uint64_t v9 = (uint64_t *)(*(void *)(a5 + 56) + 16 * a2);
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    *uint64_t result = *v9;
    result[1] = v11;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_10002B568(v10, v11);
    return (uint64_t *)v6;
  }

uint64_t sub_1000EED78(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    sub_10001A148(*(void *)(a5 + 56) + 48 * a2, result, &qword_1001591C0);
    swift_bridgeObjectRetain(v7);
    return v6;
  }

uint64_t sub_1000EEE10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 20 * result;
  if ((unsigned __int128)(result * (__int128)20LL) >> 64 == (20 * result) >> 63)
  {
    if (__OFADD__(v2, 8LL))
    {
      _StringGuts.grow(_:)(77LL);
      v7._uint64_t countAndFlagsBits = 0x6372615F7461666ELL;
      v7._object = (void *)0xEC000000203D2068LL;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      v10._object = (void *)0x800000010012BC20LL;
      v10._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v10);
    }

    else
    {
      if (v2 + 8 <= a2) {
        return result;
      }
      _StringGuts.grow(_:)(81LL);
      v11._uint64_t countAndFlagsBits = 0x73207972616E6942LL;
      v11._object = (void *)0xED0000203A657A69LL;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v13 = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(v13);
      v14._uint64_t countAndFlagsBits = 0xD000000000000040LL;
      v14._object = (void *)0x800000010012BBD0LL;
      String.append(_:)(v14);
    }
  }

  else
  {
    _StringGuts.grow(_:)(82LL);
    v3._uint64_t countAndFlagsBits = 0x6372615F7461666ELL;
    v3._object = (void *)0xEC000000203D2068LL;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    char v5 = v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v5);
    v6._uint64_t countAndFlagsBits = 0xD000000000000042LL;
    v6._object = (void *)0x800000010012BC60LL;
    String.append(_:)(v6);
  }

  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  unint64_t v17 = sub_100012624();
  uint64_t v18 = swift_allocError(&type metadata for KMError, v17, 0LL, 0LL);
  *(void *)uint64_t v19 = 0LL;
  *(void *)(v19 + 8) = 0xE000000000000000LL;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(void *)(v19 + 64) = 0LL;
  *(_BYTE *)(v19 + 7sub_100006034(v0 + 2) = 24;
  return swift_willThrow(v18);
}

uint64_t sub_1000EF0D4( uint64_t a1, int64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void (*v83)(void *__return_ptr, void, void);
  void (*v84)(void *__return_ptr, void, void);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(void *__return_ptr, void, void);
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v8 = v5;
  Swift::String v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      uint64_t v80 = sub_10008ECFC((void *)(v14 > 1), a2, 1, v80);
      goto LABEL_16;
    }

    v15 += v14;
  }

  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  uint64_t v20 = &v15[v19];
  if (!v15) {
    uint64_t v20 = 0LL;
  }
  uint64_t v6 = v20 - v15;
  BOOL v21 = v20 - v15 < 32 || v15 == 0LL;
  if (!v21)
  {
    int v30 = 0;
    int v29 = *(_DWORD *)v15;
    int v31 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v29 == -17958193)
    {
      int64_t v28 = v15;
    }

    else
    {
      int64_t v28 = 0LL;
      BOOL v21 = 1;
      int v30 = 255;
    }

    goto LABEL_23;
  }

  unint64_t v22 = sub_100012624();
  uint64_t v23 = swift_allocError(&type metadata for KMError, v22, 0LL, 0LL);
  *(void *)uint64_t v24 = 0xD000000000000033LL;
  *(void *)(v24 + 8) = 0x800000010012C4F0LL;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(void *)(v24 + 64) = 0LL;
  *(_BYTE *)(v24 + 7sub_100006034(v0 + 2) = 24;
  swift_willThrow(v23);
  uint64_t v97 = v23;
  swift_errorRetain(v23);
  uint64_t v25 = sub_100005FB4(&qword_10015AB20);
  unint64_t v69 = v22;
  BOOL v70 = v21;
  uint64_t v83 = a4;
  swift_errorRelease(v23);
  uint64_t v7 = v91;
  a4 = v92;
  a3 = v93;
  uint64_t v8 = v94;
  LOBYTE(a1) = v95;
  uint64_t v76 = v87;
  uint64_t v78 = v86;
  uint64_t v72 = v89;
  uint64_t v74 = v88;
  unint64_t v71 = v90;
  sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  uint64_t v26 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  a5 = v26[2];
  unint64_t v14 = v26[3];
  uint64_t v80 = v26;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_51;
  }
LABEL_16:
  v80[2] = a2;
  uint64_t v27 = &v80[10 * a5];
  v27[4] = v78;
  void v27[5] = v76;
  _DWORD v27[6] = v74;
  v27[7] = v72;
  v27[8] = v71;
  v27[9] = v7;
  v27[10] = a4;
  v27[11] = a3;
  v27[12] = v8;
  *((_BYTE *)v27 + 104) = a1;
  sub_100039508(v78, v76, v74, v72, v71, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v97);
  if (!v15 || v6 < 28)
  {
    uint64_t v38 = swift_allocError(&type metadata for KMError, v69, 0LL, 0LL);
    uint64_t v40 = v38;
    Swift::String v15 = 0LL;
    *(void *)uint64_t v39 = 0xD000000000000033LL;
    unint64_t v42 = 0x800000010012C530LL;
    int v41 = 255;
    a4 = v83;
    int v31 = v80;
LABEL_32:
    *(void *)(v39 + 8) = v42;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(void *)(v39 + 64) = 0LL;
    *(_BYTE *)(v39 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v38);
    uint64_t v97 = v40;
    swift_errorRetain(v40);
    uint64_t v43 = sub_100005FB4(&qword_10015AB20);
    if (swift_dynamicCast(&v86, &v97, v43, &type metadata for KMError, 0LL))
    {
      int v81 = v41;
      unint64_t v84 = a4;
      swift_errorRelease(v40);
      uint64_t v44 = v87;
      uint64_t v45 = v88;
      uint64_t v46 = v89;
      unint64_t v47 = v90;
      uint64_t v48 = v94;
      char v49 = v95;
      uint64_t v77 = v91;
      uint64_t v79 = v86;
      uint64_t v73 = v93;
      uint64_t v75 = (uint64_t)v92;
      sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
        int v31 = sub_10008ECFC(0LL, v31[2] + 1LL, 1, v31);
      }
      unint64_t v51 = v31[2];
      unint64_t v50 = v31[3];
      unint64_t v52 = v31;
      if (v51 >= v50 >> 1) {
        unint64_t v52 = sub_10008ECFC((void *)(v50 > 1), v51 + 1, 1, v31);
      }
      v52[2] = v51 + 1;
      int v31 = v52;
      uint64_t v53 = &v52[10 * v51];
      v53[4] = v79;
      v53[5] = v44;
      v53[6] = v45;
      v53[7] = v46;
      v53[8] = v47;
      v53[9] = v77;
      v53[10] = v75;
      v53[11] = v73;
      v53[12] = v48;
      *((_BYTE *)v53 + 104) = v49;
      sub_100039508(v79, v44, v45, v46, v47, v77, v75, v73, v48, v49);
      swift_errorRelease(v97);
      uint64_t v8 = 0LL;
      a4 = v84;
      if (v81 != 255) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }

    swift_bridgeObjectRelease(v31);
LABEL_42:
    swift_errorRelease(v97);
    return v54;
  }

  int64_t v28 = 0LL;
  uint64_t v8 = 0LL;
  int v29 = *(_DWORD *)v15;
  int v30 = 255;
  a4 = v83;
  int v31 = v80;
  BOOL v21 = v70;
LABEL_23:
  if (v29 == -822415874 || v29 == -17958194)
  {
    if (v21)
    {
      uint64_t v32 = 1LL;
      goto LABEL_39;
    }

    unint64_t v37 = sub_100012624();
    uint64_t v38 = swift_allocError(&type metadata for KMError, v37, 0LL, 0LL);
    uint64_t v40 = v38;
    int v41 = 0;
    *(void *)uint64_t v39 = 0xD00000000000002BLL;
    unint64_t v42 = 0x800000010012C5C0LL;
    Swift::String v15 = v28;
    goto LABEL_32;
  }

  Swift::String v15 = v28;
  if (v30 != 255)
  {
LABEL_38:
    uint64_t v32 = 0LL;
LABEL_39:
    swift_bridgeObjectRelease(v31);
    a4(&v96, v15, v32);
    if (!v8) {
      return v96;
    }
    return v54;
  }

uint64_t sub_1000EF760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v16 = (uint32_t *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }

    uint64_t v16 = (uint32_t *)((char *)v16 + a1 - result);
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  __DataStorage._length.getter();
  uint64_t result = sub_1000E6C48(v16, a6, a7, a8, a9, (uint64_t)&v17);
  if (!v9) {
    return v17;
  }
  return result;
}

uint64_t sub_1000EF830(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0LL;
  }

  if (a2 > 14)
  {
    uint64_t v10 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t v4 = swift_allocObject(v10, 32LL, 7LL);
    *(void *)(v4 + 16) = 0LL;
    *(void *)(v4 + 24) = a2;
    return v4;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      uint64_t v6 = __DataStorage._length.getter();
      if (v6 >= a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = &v5[v7];
      if (v5) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0LL;
      }
      uint64_t v4 = sub_1000DA0E8(v5, v9);
      swift_release(v2);
      return v4;
    }

    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0LL, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EF914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v5 = (void *)result;
  int64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v39 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v9 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  uint64_t v13 = (v10 - 1) & v10;
  for (unint64_t i = v12 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 32 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    uint64_t v23 = *(void *)(a1 + 56) + 24 * i;
    int64_t v42 = v6;
    unint64_t v41 = v13;
    if ((*(_BYTE *)(v23 + 16) & 1) != 0)
    {
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v22);
      uint64_t result = 0LL;
      unint64_t v24 = 0xF000000000000000LL;
    }

    else
    {
      uint64_t v25 = v5;
      uint64_t v26 = v11;
      uint64_t v27 = a1;
      uint64_t v29 = *(void *)v23;
      uint64_t v28 = *(void *)(v23 + 8);
      swift_bridgeObjectRetain(v20);
      __n128 v30 = swift_bridgeObjectRetain(v22);
      uint64_t v31 = v29;
      a1 = v27;
      uint64_t v11 = v26;
      uint64_t v5 = v25;
      uint64_t result = Data._Representation.subscript.getter(v31, v28, a2, a3, v30);
    }

    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v32 = (void *)(v5[6] + 32 * i);
    *uint64_t v32 = v19;
    v32[1] = v20;
    void v32[2] = v21;
    _OWORD v32[3] = v22;
    unint64_t v33 = (uint64_t *)(v5[7] + 16 * i);
    *unint64_t v33 = result;
    v33[1] = v24;
    uint64_t v34 = v5[2];
    BOOL v35 = __OFADD__(v34, 1LL);
    uint64_t v36 = v34 + 1;
    if (v35)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    uint64_t v5[2] = v36;
    int64_t v6 = v42;
    unint64_t v10 = v41;
    if (v41) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_27;
    }
    if (v15 >= v40) {
      return (uint64_t)v5;
    }
    unint64_t v16 = *(void *)(v39 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v40) {
        return (uint64_t)v5;
      }
      unint64_t v16 = *(void *)(v39 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v40) {
          return (uint64_t)v5;
        }
        unint64_t v16 = *(void *)(v39 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }

void *sub_1000EFB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v3) {
    return v4;
  }
  unint64_t v52 = _swiftEmptyArrayStorage;
  sub_1000EEA6C(0LL, v3, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v45 = a3;
  while (1)
  {
    uint64_t v8 = *v7;
    swift_bridgeObjectRetain(*v7);
    uint64_t v9 = (uint64_t *)sub_1000900BC();
    if (!*(void *)(v8 + 16))
    {
      __int128 v50 = 0u;
      __int128 v51 = 0u;
LABEL_12:
      sub_100012824((uint64_t)&v50, &qword_100157FF8);
      goto LABEL_13;
    }

    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    unint64_t v12 = sub_100006114(v10, v11);
    if ((v13 & 1) == 0)
    {
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      swift_bridgeObjectRelease(v11);
      goto LABEL_12;
    }

    sub_100006054(*(void *)(v8 + 56) + 32 * v12, (uint64_t)&v50);
    swift_bridgeObjectRelease(v11);
    if (!*((void *)&v51 + 1)) {
      goto LABEL_12;
    }
    if ((swift_dynamicCast(&v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v15 = v48;
      uint64_t v14 = v49;
      unint64_t v16 = (uint64_t *)sub_1000900D4();
      if (*(void *)(v8 + 16))
      {
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain(v18);
        unint64_t v19 = sub_100006114(v17, v18);
        if ((v20 & 1) != 0)
        {
          sub_100006054(*(void *)(v8 + 56) + 32 * v19, (uint64_t)&v50);
        }

        else
        {
          __int128 v50 = 0u;
          __int128 v51 = 0u;
        }

        swift_bridgeObjectRelease(v18);
        if (*((void *)&v51 + 1))
        {
          if ((swift_dynamicCast(&v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            uint64_t v31 = v49;
            uint64_t v44 = v48;
            uint64_t v32 = swift_allocObject(&unk_10014FCF0, 56LL, 7LL);
            *(void *)(v32 + 16) = a2;
            *(void *)(v32 + 24) = v45;
            uint64_t v33 = swift_allocObject(&unk_10014FCC8, 32LL, 7LL);
            *(void *)(v33 + 16) = a2;
            *(void *)(v33 + 24) = v45;
            *(void *)(v32 + 3sub_100006034(v0 + 2) = v44;
            *(void *)(v32 + sub_10007CFB4(v0 + 40) = v31;
            a3 = v45;
            uint64_t v27 = v32 | 0x8000000000000000LL;
            *(void *)(v32 + 48) = v33;
            swift_bridgeObjectRetain(v45);
            goto LABEL_20;
          }

          goto LABEL_31;
        }
      }

      else
      {
        __int128 v50 = 0u;
        __int128 v51 = 0u;
      }

      sub_100012824((uint64_t)&v50, &qword_100157FF8);
LABEL_31:
      uint64_t v27 = swift_allocObject(&unk_10014FCC8, 32LL, 7LL);
      *(void *)(v27 + 16) = a2;
      *(void *)(v27 + 24) = a3;
      goto LABEL_20;
    }

uint64_t sub_1000EFFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v12 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }

    v12 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  __DataStorage._length.getter();
  uint64_t result = sub_1000E83B4(v12, a4, a5, a6);
  if (!v13) {
    return v14;
  }
  return result;
}

Swift::Int sub_1000F00C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4(&qword_100159E28);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      int64_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          char v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v1sub_100006034(v0 + 2) = v14 | v13;
      uint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F0264()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000F0288()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F02FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(_DWORD *)a1 != -2147483595) {
    return 2LL;
  }
  uint64_t v6 = v4[2];
  uint64_t v16 = v4[3];
  uint64_t v7 = v4[4];
  uint64_t v8 = v4[5] + 16LL;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = String.init(cString:)(a1 + *(unsigned int *)(a1 + 24));
  uint64_t v12 = v11;
  if ((sub_100083F1C(v10, v11, v7) & 1) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 56))(v15, v9, v6);
    v15[5] = v9;
    swift_beginAccess(v8, v14, 33LL, 0LL);
    sub_1000E17D4((uint64_t)v15, v10, v12);
    swift_endAccess(v14);
  }

  else
  {
    swift_bridgeObjectRelease(v12);
  }

  uint64_t v13 = *(void *)(v7 + 16);
  swift_beginAccess(v8, v15, 0LL, 0LL);
  return 2 * (v13 != *(void *)(*(void *)v8 + 16LL));
}

void *sub_1000F0444( uint64_t a1, int64_t a2, uint64_t a3, void *(*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void *(*v80)(void *__return_ptr, void, void);
  void *(*v81)(void *__return_ptr, void, void);
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *(*v89)(void *__return_ptr, void, void);
  uint64_t v90;
  uint64_t v91;
  char v92;
  void v93[2];
  int v94;
  uint64_t v95;
  uint64_t v8 = v5;
  uint64_t v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      uint64_t v77 = sub_10008ECFC((void *)(v14 > 1), a2, 1, v77);
      goto LABEL_16;
    }

    v15 += v14;
  }

  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  char v20 = &v15[v19];
  if (!v15) {
    char v20 = 0LL;
  }
  uint64_t v6 = v20 - v15;
  LODWORD(a1) = v20 - v15 < 32 || v15 == 0LL;
  if ((a1 & 1) == 0)
  {
    int v29 = 0;
    int v28 = *(_DWORD *)v15;
    __n128 v30 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v28 == -17958193)
    {
      uint64_t v27 = v15;
    }

    else
    {
      uint64_t v27 = 0LL;
      LOBYTE(a1) = 1;
      int v29 = 255;
    }

    goto LABEL_23;
  }

  unint64_t v21 = sub_100012624();
  uint64_t v22 = swift_allocError(&type metadata for KMError, v21, 0LL, 0LL);
  *(void *)uint64_t v23 = 0xD000000000000033LL;
  *(void *)(v23 + 8) = 0x800000010012C4F0LL;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(void *)(v23 + 64) = 0LL;
  *(_BYTE *)(v23 + 7sub_100006034(v0 + 2) = 24;
  swift_willThrow(v22);
  v93[0] = v22;
  swift_errorRetain(v22);
  uint64_t v24 = sub_100005FB4(&qword_10015AB20);
  unint64_t v67 = v21;
  uint64_t v94 = a1;
  uint64_t v80 = a4;
  swift_errorRelease(v22);
  uint64_t v7 = v88;
  a4 = v89;
  a3 = v90;
  uint64_t v8 = v91;
  LOBYTE(a1) = v92;
  uint64_t v73 = v84;
  uint64_t v75 = v83;
  uint64_t v69 = v86;
  uint64_t v71 = v85;
  unint64_t v68 = v87;
  sub_1000516E4(v83, v84, v85, v86, v87, v88, (uint64_t)v89, v90, v91, v92);
  BOOL v25 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  a5 = v25[2];
  unint64_t v14 = v25[3];
  uint64_t v77 = v25;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_51;
  }
LABEL_16:
  v77[2] = a2;
  uint64_t v26 = &v77[10 * a5];
  v26[4] = v75;
  v26[5] = v73;
  v26[6] = v71;
  v26[7] = v69;
  _BYTE v26[8] = v68;
  v26[9] = v7;
  v26[10] = a4;
  v26[11] = a3;
  v26[12] = v8;
  *((_BYTE *)v26 + 104) = a1;
  sub_100039508(v75, v73, v71, v69, v68, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v93[0]);
  if (!v15 || v6 < 28)
  {
    uint64_t v37 = swift_allocError(&type metadata for KMError, v67, 0LL, 0LL);
    uint64_t v39 = v37;
    uint64_t v15 = 0LL;
    *(void *)uint64_t v38 = 0xD000000000000033LL;
    unint64_t v41 = 0x800000010012C530LL;
    int v40 = 255;
    a4 = v80;
    __n128 v30 = v77;
LABEL_32:
    *(void *)(v38 + 8) = v41;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(void *)(v38 + 64) = 0LL;
    *(_BYTE *)(v38 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v37);
    v93[0] = v39;
    swift_errorRetain(v39);
    uint64_t v42 = sub_100005FB4(&qword_10015AB20);
    if (swift_dynamicCast(&v83, v93, v42, &type metadata for KMError, 0LL))
    {
      int v78 = v40;
      int v81 = a4;
      swift_errorRelease(v39);
      uint64_t v43 = v84;
      uint64_t v44 = v85;
      uint64_t v45 = v86;
      unint64_t v46 = v87;
      uint64_t v47 = v91;
      char v48 = v92;
      uint64_t v74 = v88;
      uint64_t v76 = v83;
      uint64_t v70 = v90;
      uint64_t v72 = (uint64_t)v89;
      sub_1000516E4(v83, v84, v85, v86, v87, v88, (uint64_t)v89, v90, v91, v92);
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
        __n128 v30 = sub_10008ECFC(0LL, v30[2] + 1LL, 1, v30);
      }
      unint64_t v50 = v30[2];
      unint64_t v49 = v30[3];
      __int128 v51 = v30;
      if (v50 >= v49 >> 1) {
        __int128 v51 = sub_10008ECFC((void *)(v49 > 1), v50 + 1, 1, v30);
      }
      v51[2] = v50 + 1;
      __n128 v30 = v51;
      unint64_t v52 = &v51[10 * v50];
      v52[4] = v76;
      _OWORD v52[5] = v43;
      v52[6] = v44;
      v52[7] = v45;
      v52[8] = v46;
      v52[9] = v74;
      v52[10] = v72;
      v52[11] = v70;
      v52[12] = v47;
      *((_BYTE *)v52 + 104) = v48;
      sub_100039508(v76, v43, v44, v45, v46, v74, v72, v70, v47, v48);
      swift_errorRelease(v93[0]);
      uint64_t v8 = 0LL;
      a4 = v81;
      if (v78 != 255) {
        goto LABEL_38;
      }
      goto LABEL_28;
    }

    swift_bridgeObjectRelease(v30);
    return (void *)swift_errorRelease(v93[0]);
  }

  uint64_t v27 = 0LL;
  uint64_t v8 = 0LL;
  int v28 = *(_DWORD *)v15;
  int v29 = 255;
  a4 = v80;
  __n128 v30 = v77;
  LOBYTE(a1) = v94;
LABEL_23:
  if (v28 == -822415874 || v28 == -17958194)
  {
    if ((a1 & 1) != 0)
    {
      uint64_t v31 = 1LL;
      goto LABEL_39;
    }

    unint64_t v36 = sub_100012624();
    uint64_t v37 = swift_allocError(&type metadata for KMError, v36, 0LL, 0LL);
    uint64_t v39 = v37;
    int v40 = 0;
    *(void *)uint64_t v38 = 0xD00000000000002BLL;
    unint64_t v41 = 0x800000010012C5C0LL;
    uint64_t v15 = v27;
    goto LABEL_32;
  }

  uint64_t v15 = v27;
  if (v29 != 255)
  {
LABEL_38:
    uint64_t v31 = 0LL;
LABEL_39:
    swift_bridgeObjectRelease(v30);
    Swift::Int result = a4(&v95, v15, v31);
    if (!v8) {
      return (void *)v95;
    }
    return result;
  }

void sub_1000F0ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    uint64_t v9 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v9)) {
      goto LABEL_7;
    }
    v8 += a1 - v9;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E57E8(v8, a5, (uint64_t)&v10);
    return;
  }

  __break(1u);
LABEL_7:
  __break(1u);
}

void *sub_1000F0B88( unint64_t a1, int64_t a2, uint64_t a3, void *(*a4)(void *__return_ptr, void, void), unint64_t a5)
{
  void *(*v83)(void *__return_ptr, void, void);
  void *(*v84)(void *__return_ptr, void, void);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *(*v92)(void *__return_ptr, void, void);
  uint64_t v93;
  uint64_t v94;
  char v95;
  void v96[2];
  uint64_t v97;
  uint64_t v8 = v5;
  uint64_t v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = __DataStorage._offset.getter();
    unint64_t v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      uint64_t v80 = sub_10008ECFC((void *)(v14 > 1), a2, 1, v80);
      goto LABEL_16;
    }

    v15 += v14;
  }

  BOOL v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= a2) {
    int64_t v19 = a2;
  }
  else {
    int64_t v19 = v18;
  }
  char v20 = &v15[v19];
  if (!v15) {
    char v20 = 0LL;
  }
  uint64_t v6 = v20 - v15;
  BOOL v21 = v20 - v15 < 32 || v15 == 0LL;
  if (!v21)
  {
    int v29 = 0;
    int v28 = *(_DWORD *)v15;
    __n128 v30 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v28 == -17958193)
    {
      uint64_t v27 = v15;
    }

    else
    {
      uint64_t v27 = 0LL;
      LOBYTE(v21) = 1;
      int v29 = 255;
    }

    goto LABEL_23;
  }

  a1 = sub_100012624();
  uint64_t v22 = swift_allocError(&type metadata for KMError, a1, 0LL, 0LL);
  *(void *)uint64_t v23 = 0xD000000000000033LL;
  *(void *)(v23 + 8) = 0x800000010012C4F0LL;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(void *)(v23 + 64) = 0LL;
  *(_BYTE *)(v23 + 7sub_100006034(v0 + 2) = 24;
  swift_willThrow(v22);
  v96[0] = v22;
  swift_errorRetain(v22);
  uint64_t v24 = sub_100005FB4(&qword_10015AB20);
  if ((swift_dynamicCast(&v86, v96, v24, &type metadata for KMError, 0LL) & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v69 = a1;
  char v70 = 1;
  uint64_t v83 = a4;
  swift_errorRelease(v22);
  uint64_t v7 = v91;
  a4 = v92;
  a3 = v93;
  uint64_t v8 = v94;
  LOBYTE(a1) = v95;
  uint64_t v76 = v87;
  uint64_t v78 = v86;
  uint64_t v72 = v89;
  uint64_t v74 = v88;
  unint64_t v71 = v90;
  sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  BOOL v25 = sub_10008ECFC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  a5 = v25[2];
  unint64_t v14 = v25[3];
  uint64_t v80 = v25;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1) {
    goto LABEL_54;
  }
LABEL_16:
  v80[2] = a2;
  uint64_t v26 = &v80[10 * a5];
  v26[4] = v78;
  v26[5] = v76;
  v26[6] = v74;
  v26[7] = v72;
  _BYTE v26[8] = v71;
  v26[9] = v7;
  v26[10] = a4;
  v26[11] = a3;
  v26[12] = v8;
  *((_BYTE *)v26 + 104) = a1;
  sub_100039508(v78, v76, v74, v72, v71, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v96[0]);
  if (!v15 || v6 < 28)
  {
    uint64_t v33 = swift_allocError(&type metadata for KMError, v69, 0LL, 0LL);
    uint64_t v22 = v33;
    uint64_t v27 = 0LL;
    *(void *)uint64_t v34 = 0xD000000000000033LL;
    unint64_t v36 = 0x800000010012C530LL;
    int v35 = 255;
    a4 = v83;
    __n128 v30 = v80;
    goto LABEL_29;
  }

  uint64_t v27 = 0LL;
  uint64_t v8 = 0LL;
  int v28 = *(_DWORD *)v15;
  int v29 = 255;
  a4 = v83;
  __n128 v30 = v80;
  LOBYTE(v21) = v70;
LABEL_23:
  if (v28 != -17958194 && v28 != -822415874) {
    goto LABEL_35;
  }
  if (v21)
  {
    uint64_t v31 = 1LL;
LABEL_39:
    swift_bridgeObjectRelease(v30);
    Swift::Int result = a4(&v97, v15, v31);
    if (v8) {
      return result;
    }
    LOBYTE(v86) = BYTE4(v97);
    unint64_t v55 = v97 | ((unint64_t)BYTE4(v97) << 32);
    return (void *)(v55 | ((HIDWORD(v55) & 1) << 32));
  }

  unint64_t v32 = sub_100012624();
  uint64_t v33 = swift_allocError(&type metadata for KMError, v32, 0LL, 0LL);
  uint64_t v22 = v33;
  int v35 = 0;
  *(void *)uint64_t v34 = 0xD00000000000002BLL;
  unint64_t v36 = 0x800000010012C5C0LL;
LABEL_29:
  *(void *)(v34 + 8) = v36;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(void *)(v34 + 64) = 0LL;
  *(_BYTE *)(v34 + 7sub_100006034(v0 + 2) = 24;
  swift_willThrow(v33);
  v96[0] = v22;
  swift_errorRetain(v22);
  uint64_t v37 = sub_100005FB4(&qword_10015AB20);
  if (!swift_dynamicCast(&v86, v96, v37, &type metadata for KMError, 0LL))
  {
    swift_bridgeObjectRelease(v30);
LABEL_42:
    Swift::Int result = (void *)swift_errorRelease(v96[0]);
    if (v22) {
      return result;
    }
    return (void *)(v55 | ((HIDWORD(v55) & 1) << 32));
  }

  int v79 = v35;
  int v81 = v27;
  unint64_t v84 = a4;
  swift_errorRelease(v22);
  uint64_t v38 = v87;
  uint64_t v39 = v88;
  uint64_t v40 = v89;
  unint64_t v41 = v90;
  uint64_t v42 = v91;
  uint64_t v43 = v94;
  char v44 = v95;
  uint64_t v75 = (uint64_t)v92;
  uint64_t v77 = v86;
  uint64_t v73 = v93;
  sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
    __n128 v30 = sub_10008ECFC(0LL, v30[2] + 1LL, 1, v30);
  }
  unint64_t v46 = v30[2];
  unint64_t v45 = v30[3];
  uint64_t v47 = v30;
  if (v46 >= v45 >> 1) {
    uint64_t v47 = sub_10008ECFC((void *)(v45 > 1), v46 + 1, 1, v30);
  }
  __int128 v47[2] = v46 + 1;
  __n128 v30 = v47;
  char v48 = &v47[10 * v46];
  v48[4] = v77;
  v48[5] = v38;
  v48[6] = v39;
  v48[7] = v40;
  v48[8] = v41;
  v48[9] = v42;
  v48[10] = v75;
  v48[11] = v73;
  v48[12] = v43;
  *((_BYTE *)v48 + 104) = v44;
  sub_100039508(v77, v38, v39, v40, v41, v42, v75, v73, v43, v44);
  swift_errorRelease(v96[0]);
  uint64_t v8 = 0LL;
  a4 = v84;
  uint64_t v27 = v81;
  int v29 = v79;
LABEL_35:
  if (v29 != 255)
  {
    uint64_t v31 = 0LL;
    uint64_t v15 = v27;
    goto LABEL_39;
  }

  unint64_t v49 = v30[2];
  if (v49 <= 1)
  {
    if (v49 == 1)
    {
      uint64_t v56 = v30;
      uint64_t v57 = v30[4];
      uint64_t v58 = v30[5];
      uint64_t v59 = v56[6];
      uint64_t v60 = v56[7];
      unint64_t v61 = v56[8];
      uint64_t v62 = v56[9];
      uint64_t v63 = v56[10];
      uint64_t v64 = v56[11];
      uint64_t v82 = v56[12];
      char v85 = *((_BYTE *)v56 + 104);
      sub_1000516E4(v57, v58, v59, v60, v61, v62, v63, v64, v82, v85);
      swift_bridgeObjectRelease(v56);
      unint64_t v65 = sub_100012624();
      uint64_t v51 = swift_allocError(&type metadata for KMError, v65, 0LL, 0LL);
      uint64_t v52 = v51;
      *(void *)uint64_t v67 = v57;
      *(void *)(v67 + 8) = v58;
      *(void *)(v67 + 16) = v59;
      *(void *)(v67 + 24) = v60;
      *(void *)(v67 + 3sub_100006034(v0 + 2) = v61;
      *(void *)(v67 + sub_10007CFB4(v0 + 40) = v62;
      *(void *)(v67 + 48) = v63;
      *(void *)(v67 + 56) = v64;
      *(void *)(v67 + 64) = v82;
      char v68 = v85;
    }

    else
    {
      swift_bridgeObjectRelease(v30);
      unint64_t v66 = sub_100012624();
      uint64_t v51 = swift_allocError(&type metadata for KMError, v66, 0LL, 0LL);
      uint64_t v52 = v51;
      *(void *)uint64_t v67 = 0xD000000000000040LL;
      *(void *)(v67 + 8) = 0x800000010012C570LL;
      *(_OWORD *)(v67 + 16) = 0u;
      *(_OWORD *)(v67 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v67 + 48) = 0u;
      *(void *)(v67 + 64) = 0LL;
      char v68 = 50;
    }

    *(_BYTE *)(v67 + 7sub_100006034(v0 + 2) = v68;
  }

  else
  {
    unint64_t v50 = sub_100012624();
    uint64_t v51 = swift_allocError(&type metadata for KMError, v50, 0LL, 0LL);
    uint64_t v52 = v51;
    *(void *)uint64_t v53 = v30;
    *(_OWORD *)(v53 + 8) = 0u;
    *(_OWORD *)(v53 + 24) = 0u;
    *(_OWORD *)(v53 + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_BYTE *)(v53 + 7sub_100006034(v0 + 2) = 0;
  }

  Swift::Int result = (void *)swift_willThrow(v51);
  if (!v52) {
    return (void *)(v55 | ((HIDWORD(v55) & 1) << 32));
  }
  return result;
}

uint64_t sub_1000F1230(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v5 = 0LL;
  uint64_t v6 = result + 40;
  uint64_t v7 = -(uint64_t)v3;
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v22 = result + 40;
  unint64_t v23 = *(void *)(result + 16);
  do
  {
    uint64_t v24 = v8;
    if (v5 <= v3) {
      unint64_t v9 = v3;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v10 = -(uint64_t)v9;
    for (unint64_t i = (void *)(v6 + 16 * v5++); ; i += 2)
    {
      if (v10 + v5 == 1)
      {
        __break(1u);
        return result;
      }

      uint64_t v13 = *(i - 1);
      uint64_t v12 = *i;
      swift_bridgeObjectRetain_n(*i, 2LL);
      uint64_t v14 = sub_1000D406C(a2, a3);
      if (!v15) {
        break;
      }
      uint64_t v16 = v15;
      if (v13 == v14 && v15 == v12)
      {
        swift_bridgeObjectRelease_n(v12, 2LL);
        Swift::Int result = swift_bridgeObjectRelease(v16);
      }

      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v14, v15, 0LL);
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v16);
        if ((v18 & 1) == 0) {
          goto LABEL_18;
        }
        Swift::Int result = swift_bridgeObjectRelease(v12);
      }

      ++v5;
      if (v7 + v5 == 1) {
        return (uint64_t)v24;
      }
    }

    swift_bridgeObjectRelease(v12);
LABEL_18:
    uint64_t v8 = v24;
    Swift::Int result = swift_isUniquelyReferenced_nonNull_native(v24);
    if ((result & 1) == 0)
    {
      Swift::Int result = sub_10000CC84(0, v24[2] + 1LL, 1);
      uint64_t v8 = v24;
    }

    unint64_t v20 = v8[2];
    unint64_t v19 = v8[3];
    if (v20 >= v19 >> 1)
    {
      Swift::Int result = sub_10000CC84(v19 > 1, v20 + 1, 1);
      uint64_t v8 = v24;
    }

    v8[2] = v20 + 1;
    BOOL v21 = &v8[2 * v20];
    v21[4] = v13;
    v21[5] = v12;
    uint64_t v6 = v22;
    unint64_t v3 = v23;
  }

  while (v7 + v5);
  return (uint64_t)v8;
}

uint64_t sub_1000F1408(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000E264C(a1, a4, v4);
}

uint64_t sub_1000F1434()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000F1444(uint64_t a1)
{
  if (*(_DWORD *)a1 != 42) {
    return 2LL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  uint64_t result = 0LL;
  *(void *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1000F14A8()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(void *)&v0[v6]);
  swift_bridgeObjectRelease(*(void *)&v0[v7 + 8]);
  swift_bridgeObjectRelease(*(void *)&v0[v8]);
  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_1000F1564(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(_DWORD *)a1 != -2147483595) {
    return 2LL;
  }
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  unint64_t v9 = (*(void *)(*(void *)(v7 - 8) + 64LL)
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = v4[4];
  uint64_t v29 = *(void *)((char *)v4 + v9);
  uint64_t v34 = *(void *)((char *)v4 + v10);
  uint64_t v32 = *(void *)((char *)v4 + v10 + 16);
  uint64_t v33 = *(void *)((char *)v4 + v10 + 8);
  uint64_t v35 = *(void *)((char *)v4 + ((v10 + 31) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = v4[5] + 16LL;
  uint64_t v31 = *(void *)(a1 + 16);
  uint64_t v42 = String.init(cString:)(a1 + *(unsigned int *)(a1 + 24));
  uint64_t v14 = v13;
  uint64_t v30 = v11;
  if (!v11) {
    goto LABEL_7;
  }
  swift_beginAccess(v12, v36, 0LL, 0LL);
  uint64_t v15 = v12;
  uint64_t v16 = *(void *)v12;
  swift_bridgeObjectRetain(v16);
  char v17 = sub_100083F1C(v42, v14, v16);
  uint64_t v18 = v16;
  uint64_t v12 = v15;
  swift_bridgeObjectRelease(v18);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease(v14);
  }

  else
  {
LABEL_7:
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 56))(v39, v31, v7, v8);
    uint64_t v19 = v40;
    uint64_t v20 = v41;
    sub_100005110(v39, v40);
    BOOL v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, __n128, uint64_t, uint64_t))(v20 + 40);
    __n128 v22 = swift_bridgeObjectRetain(v14);
    uint64_t v23 = v21(v34, v33, v32, v31, 0LL, v42, v14, v35, v22, v19, v20);
    if (v5)
    {
      swift_bridgeObjectRelease_n(v14, 2LL);
      return sub_100006034(v39);
    }

    uint64_t v24 = v23;
    uint64_t v25 = v29 + 16;
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v29 + 16, v38, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v29 + 16));
    v37[0] = *(void *)(v29 + 16);
    *(void *)(v29 + 16) = 0x8000000000000000LL;
    sub_1000ED528(v24, v42, v14, isUniquelyReferenced_nonNull_native);
    uint64_t v27 = *(void *)(v29 + 16);
    *(void *)(v29 + 16) = v37[0];
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v27);
    swift_endAccess(v38);
    if (v30)
    {
      swift_beginAccess(v12, v38, 0LL, 0LL);
      uint64_t v28 = *(void *)(*(void *)v12 + 16LL);
      swift_beginAccess(v25, v37, 0LL, 0LL);
      if (v28 == *(void *)(*(void *)v25 + 16LL))
      {
        sub_100006034(v39);
        return 0LL;
      }
    }

    sub_100006034(v39);
  }

  return 2LL;
}

uint64_t sub_1000F1828(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(a2);
    return swift_errorRelease(a5);
  }

  return result;
}

uint64_t sub_1000F1858()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000F187C(uint64_t a1)
{
  return sub_1000E5C3C(a1, *(uint64_t (**)(void *))(v1 + 16));
}

uint64_t sub_1000F1894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a3;
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(unsigned __int8 *)(a3 + 24);
    swift_retain(v6);
    uint64_t v3 = v7(a1, v8, v9, a2);
    swift_release(v6);
  }

  return v3;
}

uint64_t sub_1000F193C()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._uint64_t countAndFlagsBits = 44LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  uint64_t v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._uint64_t countAndFlagsBits = 41LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0x286E776F6E6B6E55LL;
}

uint64_t sub_1000F1A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  unint64_t v10 = (uint32_t *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    unint64_t v10 = (uint32_t *)((char *)v10 + a1 - result);
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = (char *)v10 + v14;
  if (v10) {
    uint64_t v16 = (uint64_t)v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t result = sub_1000E5F3C(v10, v16, a5, &v17);
  if (!v5) {
    return v17;
  }
  return result;
}

uint64_t sub_1000F1ABC(uint64_t a1, char a2)
{
  return sub_1000E8D28( a1,  a2 & 1,  *(void *)(v2 + 16),  *(uint64_t **)(v2 + 24),  *(void *)(v2 + 32),  *(_BYTE *)(v2 + 40),  *(void *)(v2 + 48));
}

BOOL sub_1000F1AF4()
{
  if (Img4DecodeInitPayload) {
    BOOL v0 = Img4DecodeInit == 0LL;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0 && Img4EncodeCreatePayload != 0LL;
}

uint64_t sub_1000F1B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  __DataStorage._length.getter();
  sub_1000EB194(v11, a4, a5);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1000F1BC0()
{
  if (&AMAuthInstallApSetParameters) {
    BOOL v0 = &AMAuthInstallBundleCopyBuildIdentityForVariant == 0LL;
  }
  else {
    BOOL v0 = 1;
  }
  unsigned int v2 = !v0 && &AMAuthInstallCreate != 0LL;
  if (&_AMAuthInstallApImg4CreatePayloadWithProperties) {
    BOOL v3 = &_AMAuthInstallApImg4GetPayloadPropertiesData == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0LL;
  }
  else {
    return v2;
  }
}

unint64_t sub_1000F1C0C()
{
  unint64_t result = qword_10015BD98;
  if (!qword_10015BD98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AC88, &type metadata for MachOSegmentName);
    atomic_store(result, (unint64_t *)&qword_10015BD98);
  }

  return result;
}

unint64_t sub_1000F1C54()
{
  unint64_t result = qword_10015BDA0;
  if (!qword_10015BDA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011ACF0, &type metadata for MachOSectionName);
    atomic_store(result, (unint64_t *)&qword_10015BDA0);
  }

  return result;
}

unint64_t sub_1000F1CA4()
{
  unint64_t result = qword_10015BDA8;
  if (!qword_10015BDA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AE60, &type metadata for MachOSourceVersion);
    atomic_store(result, (unint64_t *)&qword_10015BDA8);
  }

  return result;
}

unint64_t sub_1000F1CEC()
{
  unint64_t result = qword_10015BDB0;
  if (!qword_10015BDB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AF00, &type metadata for FilesetOffset);
    atomic_store(result, (unint64_t *)&qword_10015BDB0);
  }

  return result;
}

unint64_t sub_1000F1D34()
{
  unint64_t result = qword_10015BDB8;
  if (!qword_10015BDB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AFA0, &type metadata for MachOFileSize);
    atomic_store(result, (unint64_t *)&qword_10015BDB8);
  }

  return result;
}

unint64_t sub_1000F1D7C()
{
  unint64_t result = qword_10015BDC0;
  if (!qword_10015BDC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B040, &type metadata for MachOAddress);
    atomic_store(result, (unint64_t *)&qword_10015BDC0);
  }

  return result;
}

ValueMetadata *type metadata accessor for MachOSegmentName()
{
  return &type metadata for MachOSegmentName;
}

ValueMetadata *type metadata accessor for MachOSectionName()
{
  return &type metadata for MachOSectionName;
}

unint64_t destroy for MachOSymbol(uint64_t a1)
{
  return sub_10004F9E4(*(void *)(a1 + 16));
}

void *_s10driverkitd11MachOSymbolVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10004F9C0(v4);
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for MachOSymbol(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = a2[2];
  sub_10004F9C0(v6);
  unint64_t v7 = a1[2];
  a1[2] = v6;
  sub_10004F9E4(v7);
  return a1;
}

void *assignWithTake for MachOSymbol(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = a1[2];
  a1[2] = a2[2];
  sub_10004F9E4(v6);
  return a1;
}

ValueMetadata *type metadata accessor for MachOSymbol()
{
  return &type metadata for MachOSymbol;
}

unint64_t *initializeBufferWithCopyOfBuffer for MachOSymbol.Kind( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10004F9C0(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for MachOSymbol.Kind(unint64_t *a1)
{
  return sub_10004F9E4(*a1);
}

unint64_t *assignWithCopy for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_10004F9C0(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_10004F9E4(v4);
  return a1;
}

unint64_t *assignWithTake for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_10004F9E4(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachOSymbol.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MachOSymbol.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)unint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_1000F204C(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_1000F2068(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000F2078(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 62;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 3);
    unint64_t v3 = 0xC000000000000000LL;
  }

  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MachOSymbol.Kind()
{
  return &type metadata for MachOSymbol.Kind;
}

ValueMetadata *type metadata accessor for MachOSourceVersion()
{
  return &type metadata for MachOSourceVersion;
}

ValueMetadata *type metadata accessor for Img4PayloadType()
{
  return &type metadata for Img4PayloadType;
}

ValueMetadata *type metadata accessor for FilesetOffset()
{
  return &type metadata for FilesetOffset;
}

ValueMetadata *type metadata accessor for MachOFileSize()
{
  return &type metadata for MachOFileSize;
}

ValueMetadata *type metadata accessor for MachOAddress()
{
  return &type metadata for MachOAddress;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyMachHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnyMachHeader(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMachHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000F21A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000F21AC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnyMachHeader()
{
  return &type metadata for AnyMachHeader;
}

__n128 sub_1000F21C8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 1sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000F21DC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000F21FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 28) = v3;
  return result;
}

void type metadata accessor for mach_header(uint64_t a1)
{
}

__n128 sub_1000F2240(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000F224C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000F226C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 3sub_100006034(v0 + 2) = v3;
  return result;
}

void type metadata accessor for mach_header_64(uint64_t a1)
{
}

void type metadata accessor for compression_algorithm(uint64_t a1)
{
}

void type metadata accessor for macho_seek_result(uint64_t a1)
{
}

BOOL sub_1000F22D4()
{
  if (DEREncoderCreate) {
    BOOL v0 = DEREncoderAddUInt32 == 0LL;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0;
}

uint64_t sub_1000F22F4(unsigned int *a1)
{
  return *a1;
}

BOOL sub_1000F22FC(int a1)
{
  return (a1 & 0xFEFFFFFF) == -822415874;
}

unint64_t sub_1000F2314(unint64_t result)
{
  if ((~result & 0xF000000000000007LL) != 0) {
    return sub_10004F9E4(result);
  }
  return result;
}

uint64_t sub_1000F2328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E72A8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000F2344(uint64_t a1)
{
  return a1;
}

void sub_1000F236C(uint64_t a1, char a2)
{
}

uint64_t sub_1000F23A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000F23B0()
{
}

uint64_t sub_1000F23B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000F23DC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

__n128 sub_1000F2410(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F2434(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000F2454(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 7sub_100006034(v0 + 2) = v3;
  return result;
}

void type metadata accessor for segment_command_64(uint64_t a1)
{
}

uint64_t sub_1000F24A4(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_1000F24CC(uint64_t a1)
{
  return sub_1000F187C(a1);
}

uint64_t sub_1000F24EC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F2524 + 4 * byte_10011B330[*v0]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_1000F2524()
{
  return 0x536E6F6973726576LL;
}

uint64_t sub_1000F2548()
{
  return 0x747365676964LL;
}

uint64_t sub_1000F255C()
{
  return 0x6150656C646E7562LL;
}

uint64_t sub_1000F2578@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000F7598(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000F259C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000F25A8(uint64_t a1)
{
  unint64_t v2 = sub_1000F7554();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F25D0(uint64_t a1)
{
  unint64_t v2 = sub_1000F7554();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F25F8(void *a1)
{
  char v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_10015BE40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000F7554();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OSExtensionCodableLocation.CodingKeys,  &type metadata for OSExtensionCodableLocation.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v2sub_100006034(v0 + 2) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v2sub_100006034(v0 + 2) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    __int128 v22 = *((_OWORD *)v3 + 2);
    char v21 = 2;
    unint64_t v16 = sub_10001AA68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v16);
    uint64_t v17 = v3[6];
    uint64_t v18 = v3[7];
    LOBYTE(v2sub_100006034(v0 + 2) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1000F2774@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_1000F27B4(void *a1)
{
  return sub_1000F25F8(a1);
}

uint64_t sub_1000F27C8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  __int128 v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000F749C((uint64_t *)v7, v8) & 1;
}

Swift::Int sub_1000F2810()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  unint64_t v6 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  Hasher.init(_seed:)(v10, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v10, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v10, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_1000125E0(v5, v6);
  Data.hash(into:)(v10, v5, v6);
  sub_10001226C(v5, v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v8, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_1000F28FC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  unint64_t v8 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v9 = v1[7];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  sub_1000125E0(v7, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_10001226C(v7, v8);
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v10, v9);
  return swift_bridgeObjectRelease(v9);
}

Swift::Int sub_1000F29CC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  Hasher.init(_seed:)(v11, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v11, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v11, v4, v5);
  swift_bridgeObjectRelease(v5);
  sub_1000125E0(v6, v7);
  Data.hash(into:)(v11, v6, v7);
  sub_10001226C(v6, v7);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v11, v9, v8);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_1000F2AB4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[6];
  uint64_t v4 = (void *)v0[7];
  uint64_t v10 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v5._uint64_t countAndFlagsBits = 30240LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  v6._uint64_t countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v2);
  v7._uint64_t countAndFlagsBits = 544106784LL;
  v7._object = (void *)0xE400000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v4);
  v8._uint64_t countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  return v10;
}

uint64_t sub_1000F2B60()
{
  __int128 v11 = *v0;
  __int128 v12 = *v0;
  sub_100066F7C((uint64_t)&v12);
  v1._uint64_t countAndFlagsBits = 30240LL;
  v1._object = (void *)0xE200000000000000LL;
  String.append(_:)(v1);
  unint64_t v2 = sub_1000F7A98();
  v3._uint64_t countAndFlagsBits = BinaryInteger.description.getter(&type metadata for Int64, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._uint64_t countAndFlagsBits = 544106784LL;
  v5._object = (void *)0xE400000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = *((void *)v0 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)v0 + 5);
    Swift::String v8 = (void *)*((void *)v0 + 6);
  }

  else
  {
    Swift::String v8 = (void *)0xE300000000000000LL;
    uint64_t v7 = 4144959LL;
  }

  swift_bridgeObjectRetain(v6);
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return v11;
}

void sub_1000F2C34(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v2[2]);
  unint64_t v6 = v2[4];
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = v2[6];
    if (v7)
    {
LABEL_3:
      uint64_t v8 = v2[5];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(a1, v8, v7);
      swift_bridgeObjectRelease(v7);
      return;
    }
  }

  else
  {
    uint64_t v9 = v2[3];
    Hasher._combine(_:)(1u);
    sub_1000125E0(v9, v6);
    Data.hash(into:)(a1, v9, v6);
    sub_10002193C(v9, v6);
    uint64_t v7 = v2[6];
    if (v7) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1000F2D24()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F2D5C + 4 * byte_10011B334[*v0]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_1000F2D5C()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1000F2D74()
{
  return 0x747365676964LL;
}

uint64_t sub_1000F2D88()
{
  return 0x6150656C646E7562LL;
}

uint64_t sub_1000F2DA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000F7CD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2DC8(uint64_t a1)
{
  unint64_t v2 = sub_1000F7C44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2DF0(uint64_t a1)
{
  unint64_t v2 = sub_1000F7C44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2E18(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_10015BE50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000F7C44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OSExtensionCodable.CodingKeys,  &type metadata for OSExtensionCodable.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v21[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    v21[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v21, v5);
    sub_1000F7C88((uint64_t)(v3 + 3), (uint64_t)v22);
    sub_1000F7C88((uint64_t)v22, (uint64_t)v21);
    char v20 = 2;
    unint64_t v15 = sub_10001AA68();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &type metadata for Data, v15);
    uint64_t v16 = v3[5];
    uint64_t v17 = v3[6];
    v21[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v21, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1000F2FA4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_1000F2FF0(void *a1)
{
  return sub_1000F2E18(a1);
}

uint64_t sub_1000F3030(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_1000F7ADC((uint64_t *)v5, v7) & 1;
}

Swift::Int sub_1000F3088()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F30C8(uint64_t a1)
{
  return Hasher._finalize()();
}

void *sub_1000F3104@<X0>(uint64_t a1@<X8>)
{
  if (!v5) {
    return (void *)sub_100005158(v4, a1);
  }
  double result = sub_10003A584(v4);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000F3160()
{
  if (v3 == 1) {
    return v2[0];
  }
  sub_10003A584(v2);
  return 0LL;
}

uint64_t sub_1000F31A4()
{
  if (v3 == 2) {
    return LOBYTE(v2[0]);
  }
  sub_10003A584(v2);
  return 4LL;
}

BOOL sub_1000F31E8()
{
  int v1 = v4;
  if (v4 != 2) {
    sub_10003A584(v3);
  }
  return v1 == 2;
}

unint64_t sub_1000F3230()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __int128 v2 = sub_10008F2B8();
  if (!*(void *)(v1 + 16))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_8;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }

  sub_100006054(*(void *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_100012824((uint64_t)&v9, &qword_100157FF8);
    return 0xD000000000000014LL;
  }

  return 0xD000000000000014LL;
}

void *sub_1000F3318@<X0>(uint64_t a1@<X8>)
{
  if (v16)
  {
    if (v16 == 1)
    {
      uint64_t v3 = *(void *)&v15[0];
      uint64_t v4 = *(void *)&v15[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
      uint64_t v5 = type metadata accessor for URL(0LL);
      uint64_t v6 = *(void *)(v5 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, v5);
      swift_release(v3);
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
    }

    else
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(a1, 1LL, 1LL, v11);
      return sub_10003A584(v15);
    }
  }

  else
  {
    sub_100005158(v15, (uint64_t)v12);
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    sub_100005110(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 64))(v8, v9);
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(a1, 0LL, 1LL, v10);
    return (void *)sub_100006034(v12);
  }

uint64_t sub_1000F3454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000F8138(v3, a1);
}

uint64_t sub_1000F34A4(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100040C68(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_1000F34FC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000F3540()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __int128 v2 = sub_10008F484();
  if (!*(void *)(v1 + 16))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_8;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }

  sub_100006054(*(void *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    sub_100012824((uint64_t)&v9, &qword_100157FF8);
    return 0LL;
  }

  return 0LL;
}

uint64_t sub_1000F3618()
{
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = OSKextParseVersionCFString(v3);

  return v4;
}

uint64_t sub_1000F3670()
{
  uint64_t v1 = type metadata accessor for KernelExtension(0LL);
  if (swift_dynamicCastClass(v0, v1))
  {
    uint64_t v2 = 1954047307LL;
  }

  else
  {
    uint64_t v3 = type metadata accessor for DriverExtension(0LL);
    uint64_t v4 = swift_dynamicCastClass(v0, v3);
    uint64_t v2 = 4144959LL;
    if (v4) {
      uint64_t v2 = 1954047300LL;
    }
  }

  uint64_t v17 = v2;
  v5._uint64_t countAndFlagsBits = 32LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._uint64_t countAndFlagsBits = 30240LL;
  v8._object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
  if (v10)
  {
    unint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0x293F3F3F28LL;
    unint64_t v11 = 0xE500000000000000LL;
  }

  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v11);
  v13._uint64_t countAndFlagsBits = 544106784LL;
  v13._object = (void *)0xE400000000000000LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = sub_1000F6D68();
  unint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  return v17;
}

BOOL sub_1000F37B0()
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)sub_1000900E0();
  uint64_t v4 = *v3;
  Swift::String v5 = (void *)v3[1];
  swift_bridgeObjectRetain(v5);
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  Swift::Bool v7 = String.hasPrefix(_:)(v6);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_1000F3820()
{
  (*(void (**)(void *__return_ptr))(*(void *)v0 + 112LL))(v6);
  uint64_t v1 = v7;
  if (v7)
  {
    uint64_t v2 = v8;
    sub_100005110(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
    uint64_t v4 = v3;
    sub_100006034(v6);
    if (v4)
    {
      swift_bridgeObjectRelease(v4);
      return 0LL;
    }
  }

  else
  {
    sub_100012824((uint64_t)v6, &qword_100157C58);
  }

  return 1LL;
}

uint64_t sub_1000F38B8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)v1;
  sub_10002B568(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000F3910(uint64_t a1, uint64_t a2)
{
  Swift::String v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  *Swift::String v5 = a1;
  v5[1] = a2;
  return sub_10002193C(v6, v7);
}

uint64_t (*sub_1000F396C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000F39B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v3);
  Swift::String v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = (uint64_t *)sub_10008F52C();
  if (!*(void *)(v6 + 16))
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    goto LABEL_9;
  }

  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  swift_bridgeObjectRetain(v8);
  unint64_t v10 = sub_100006114(v9, v8);
  if ((v11 & 1) == 0)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_9;
  }

  sub_100006054(*(void *)(v6 + 56) + 32 * v10, (uint64_t)&v19);
  swift_bridgeObjectRelease(v8);
  if (!*((void *)&v20 + 1))
  {
LABEL_9:
    Swift::String v14 = &qword_100157FF8;
    unint64_t v15 = (char *)&v19;
LABEL_10:
    sub_100012824((uint64_t)v15, v14);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    sub_1000D2728(v18[0], v18[1]);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1LL, v12) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v5, v12);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0LL, 1LL, v12);
    }

    Swift::String v14 = &qword_1001588F8;
    unint64_t v15 = v5;
    goto LABEL_10;
  }

uint64_t sub_1000F3B54@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F3B6C((uint64_t (*)(void))sub_10008F424, a1);
}

uint64_t sub_1000F3B60@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F3B6C((uint64_t (*)(void))sub_10008F5F8, a1);
}

uint64_t sub_1000F3B6C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  Swift::String v5 = (uint64_t *)a1();
  if (!*(void *)(v4 + 16))
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    goto LABEL_8;
  }

  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  unint64_t v8 = sub_100006114(v7, v6);
  if ((v9 & 1) == 0)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_8;
  }

  sub_100006054(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v16);
  swift_bridgeObjectRelease(v6);
  if (!*((void *)&v17 + 1))
  {
LABEL_8:
    sub_100012824((uint64_t)&v16, &qword_100157FF8);
    goto LABEL_9;
  }

  if ((swift_dynamicCast(&v14, &v16, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v10 = v15;
    URL.init(fileURLWithPath:isDirectory:)(v14, v15, 1LL);
    swift_bridgeObjectRelease(v10);
    uint64_t v11 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( a2,  0LL,  1LL,  v11);
  }

LABEL_9:
  uint64_t v13 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a2,  1LL,  1LL,  v13);
}

        uint64_t v10 = v6;
        uint64_t v11 = v5;
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v8 + 24) + 144LL))();
        if (v12 == a2 && v13 == a3)
        {
          __int128 v17 = swift_bridgeObjectRelease(a3);
LABEL_16:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          uint64_t v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          __int128 v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v8);
          specialized ContiguousArray._endMutation()(v19);
          goto LABEL_5;
        }

        uint64_t v15 = v13;
        __int128 v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL);
        __int128 v17 = swift_bridgeObjectRelease(v15);
        if ((v16 & 1) != 0) {
          goto LABEL_16;
        }
        swift_release(v8);
LABEL_5:
        Swift::String v5 = v11;
        ++v7;
        uint64_t v6 = v10;
        if (v9 == v10) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v7 < *(void *)(v22 + 16)) {
        break;
      }
      __break(1u);
LABEL_22:
      if (v5 < 0) {
        char v21 = v5;
      }
      else {
        char v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v6) {
        return _swiftEmptyArrayStorage;
      }
    }

    unint64_t v8 = *(void *)(v5 + 8 * v7 + 32);
    swift_retain(v8);
    char v9 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_19;
    }
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F3C98(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (uint64_t *)sub_10008F43C();
  if (!*(void *)(v3 + 16))
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    goto LABEL_16;
  }

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_100006114(v6, v5);
  if ((v8 & 1) == 0)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_16;
  }

  sub_100006054(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v18);
  swift_bridgeObjectRelease(v5);
  if (!*((void *)&v19 + 1))
  {
LABEL_16:
    sub_100012824((uint64_t)&v18, &qword_100157FF8);
    return 0LL;
  }

  uint64_t v9 = v17[1];
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
LABEL_13:
    swift_bridgeObjectRelease(v9);
    return 0LL;
  }

  uint64_t v11 = v17[0];
  uint64_t v12 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v13 = *(v12 - 1);
    uint64_t v14 = *v12;
    BOOL v15 = v13 == v11 && v14 == v9;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v11, v9, 0LL) & 1) != 0) {
      break;
    }
    v12 += 2;
    if (!--v10) {
      goto LABEL_13;
    }
  }

  swift_bridgeObjectRelease(v9);
  return 1LL;
}

uint64_t sub_1000F3DC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v1 + 144LL))();
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 144LL))();
  if (v4 == v7 && v6 == v8)
  {
    uint64_t result = swift_bridgeObjectRelease_n(v6, 2LL);
LABEL_8:
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192LL))(result);
    if (v13 == (*(uint64_t (**)(void))(*(void *)a1 + 192LL))())
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v2 + 224LL))();
      unint64_t v16 = v15;
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)a1 + 224LL))();
      unint64_t v19 = v17;
      if (v16 >> 60 == 15)
      {
        if (v17 >> 60 == 15) {
          return 1LL;
        }
      }

      else if (v17 >> 60 != 15)
      {
        sub_10002B568(v14, v16);
        sub_1000214C4(v14, v16);
        char v21 = v20;
        sub_10002193C(v18, v19);
        sub_10002193C(v14, v16);
        sub_10002193C(v14, v16);
        return v21 & 1;
      }

      sub_10002193C(v14, v16);
      sub_10002193C(v18, v19);
    }

    return 0LL;
  }

  uint64_t v10 = v8;
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0LL);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  uint64_t result = 0LL;
  if ((v11 & 1) != 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1000F3F64(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 144LL))();
  uint64_t v5 = v4;
  uint64_t v6 = a1[1];
  if (v3 == *a1 && v4 == v6)
  {
    uint64_t result = swift_bridgeObjectRelease(v4);
LABEL_8:
    if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 192LL))(result) == a1[2])
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v1 + 224LL))();
      unint64_t v12 = v11;
      uint64_t v14 = a1[3];
      unint64_t v13 = a1[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15) {
          return 1LL;
        }
      }

      else if (v13 >> 60 != 15)
      {
        sub_10002B568(v14, v13);
        sub_1000214C4(v10, v12);
        char v16 = v15;
        sub_10002193C(v14, v13);
        sub_10002193C(v10, v12);
        return v16 & 1;
      }

      sub_10002B568(v14, v13);
      sub_10002193C(v10, v12);
      sub_10002193C(v14, v13);
    }

    return 0LL;
  }

  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, *a1, v6, 0LL);
  swift_bridgeObjectRelease(v5);
  uint64_t result = 0LL;
  if ((v8 & 1) != 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1000F40A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144LL))(v8);
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v1 + 192LL))();
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v1 + 224LL))();
  uint64_t v16 = v15;
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 112LL))(v31);
  uint64_t v17 = v32;
  if (v32)
  {
    uint64_t v18 = v33;
    sub_100005110(v31, v32);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    uint64_t v20 = URL.path.getter(v19);
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t result = sub_100006034(v31);
  }

  else
  {
    uint64_t v24 = sub_100012824((uint64_t)v31, &qword_100157C58);
    (*(void (**)(uint64_t))(*(void *)v1 + 160LL))(v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6))
    {
      uint64_t result = sub_100012824((uint64_t)v5, (uint64_t *)&unk_10015BA30);
      uint64_t v20 = 0LL;
      uint64_t v22 = 0LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v5, v6);
      uint64_t v25 = sub_100012824((uint64_t)v5, (uint64_t *)&unk_10015BA30);
      uint64_t v20 = URL.path.getter(v25);
      uint64_t v22 = v26;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }

  uint64_t v27 = v29;
  *a1 = v30;
  a1[1] = v27;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v20;
  a1[6] = v22;
  return result;
}

uint64_t sub_1000F42A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v45 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 112LL))(v46, v14);
  uint64_t v17 = v47;
  if (v47)
  {
    uint64_t v18 = v48;
    sub_100005110(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    v19(v7, 0LL, 1LL, v10);
    sub_100006034(v46);
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v21 = v20(v7, 1LL, v10);
    if ((_DWORD)v21 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v7, v10);
      v19(v9, 0LL, 1LL, v10);
      goto LABEL_6;
    }
  }

  else
  {
    sub_100012824((uint64_t)v46, &qword_100157C58);
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1LL, 1LL, v10);
  }

  (*(void (**)(uint64_t))(*(void *)v2 + 256LL))(v21);
  sub_100012824((uint64_t)v7, (uint64_t *)&unk_10015BA30);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
LABEL_6:
  if (v20(v9, 1LL, v10) == 1)
  {
    uint64_t result = sub_100012824((uint64_t)v9, (uint64_t *)&unk_10015BA30);
  }

  else
  {
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 184LL))(v23);
    uint64_t v26 = v25;
    if (!v25)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      uint64_t v31 = 0LL;
      goto LABEL_13;
    }

    uint64_t v43 = v24;
    char v44 = v16;
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v2 + 224LL))();
    if (v28 >> 60 != 15)
    {
      uint64_t v32 = v27;
      uint64_t v33 = v28;
      uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v2 + 144LL))();
      uint64_t v30 = v36;
      uint64_t v37 = (uint64_t *)sub_1000901AC();
      uint64_t v38 = *v37;
      uint64_t v39 = (void *)v37[1];
      swift_bridgeObjectRetain(v39);
      sub_1000D4780(v38, v39, v45);
      uint64_t v40 = swift_bridgeObjectRelease(v39);
      uint64_t v34 = URL.path.getter(v40);
      uint64_t v35 = v41;
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v42(v45, v10);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v44, v10);
      uint64_t v31 = v43;
      goto LABEL_14;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v44, v10);
    uint64_t result = swift_bridgeObjectRelease(v26);
  }

  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v26 = 0LL;
LABEL_13:
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
LABEL_14:
  *a1 = v29;
  a1[1] = v30;
  a1[2] = v31;
  a1[3] = v26;
  a1[4] = v32;
  a1[5] = v33;
  a1[6] = v34;
  a1[7] = v35;
  return result;
}

uint64_t sub_1000F45F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v10 = v9 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = v9 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  *(_OWORD *)uint64_t v12 = xmmword_10010FF00;
  swift_beginAccess(v12, v16, 1LL, 0LL);
  uint64_t v13 = *(void *)v12;
  unint64_t v14 = *(void *)(v12 + 8);
  *(void *)uint64_t v12 = a3;
  *(void *)(v12 + 8) = a4;
  sub_10002193C(v13, v14);
  *(void *)(v9 + 16) = a2;
  sub_10003A548(a1, v9 + 24);
  return v9;
}

uint64_t sub_1000F46C0(void *a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v65 - v7;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = swift_bridgeObjectRetain(v11);
    uint64_t v14 = sub_1000D528C(v13);
    if (!v15)
    {
      uint64_t v16 = type metadata accessor for KernelExtension(0LL);
      goto LABEL_7;
    }

    if (v15 == 1)
    {
      uint64_t v16 = type metadata accessor for DriverExtension(0LL);
LABEL_7:
      uint64_t v28 = v16;
      uint64_t v29 = a1[3];
      uint64_t v30 = a1[4];
      sub_100005110(a1, v29);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v29, v30);
      if (v32 >> 60 != 15)
      {
        uint64_t v57 = v31;
        unint64_t v58 = v32;
        sub_100005F70((uint64_t)a1, (uint64_t)&v65);
        char v67 = 0;
        return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t))(v28 + 312))( &v65,  v12,  v57,  v58);
      }

      swift_bridgeObjectRelease(v12);
      uint64_t v33 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v18 = swift_allocObject(v33, 72LL, 7LL);
      *(_OWORD *)(v18 + 16) = xmmword_10010F110;
      uint64_t v34 = a1[3];
      uint64_t v35 = a1[4];
      sub_100005110(a1, v34);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
      uint64_t v37 = URL.path.getter(v36);
      uint64_t v39 = v38;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_100026B64();
      *(void *)(v18 + 3sub_100006034(v0 + 2) = v37;
      *(void *)(v18 + sub_10007CFB4(v0 + 40) = v39;
      unint64_t v40 = sub_100026BA8();
      uint64_t v26 = (void *)static OS_os_log.default.getter(v40);
      uint64_t v41 = static os_log_type_t.default.getter(v26);
      os_log(_:dso:log:type:_:)( "unable to create extension from '%{public}s', Info.plist digest is missing",  74LL,  2LL,  &_mh_execute_header,  v26,  v41,  v18);
      goto LABEL_9;
    }

    sub_10003783C(v14, v15);
    uint64_t v43 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v44 = swift_allocObject(v43, 112LL, 7LL);
    *(_OWORD *)(v44 + 16) = xmmword_10010F440;
    uint64_t v45 = a1[3];
    uint64_t v46 = a1[4];
    sub_100005110(a1, v45);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 64))(v45, v46);
    uint64_t v48 = URL.path.getter(v47);
    uint64_t v50 = v49;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(void *)(v44 + 56) = &type metadata for String;
    unint64_t v51 = sub_100026B64();
    *(void *)(v44 + 64) = v51;
    *(void *)(v44 + 3sub_100006034(v0 + 2) = v48;
    *(void *)(v44 + sub_10007CFB4(v0 + 40) = v50;
    uint64_t v52 = sub_10008F368();
    if (*(void *)(v12 + 16))
    {
      uint64_t v53 = *v52;
      uint64_t v54 = v52[1];
      swift_bridgeObjectRetain(v54);
      unint64_t v55 = sub_100006114(v53, v54);
      if ((v56 & 1) != 0)
      {
        sub_100006054(*(void *)(v12 + 56) + 32 * v55, (uint64_t)&v65);
      }

      else
      {
        __int128 v65 = 0u;
        __int128 v66 = 0u;
      }

      swift_bridgeObjectRelease(v54);
    }

    else
    {
      __int128 v65 = 0u;
      __int128 v66 = 0u;
    }

    swift_bridgeObjectRelease(v12);
    if (*((void *)&v66 + 1))
    {
      if ((swift_dynamicCast(v68, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v61 = v68[0];
        unint64_t v60 = v68[1];
        uint64_t v62 = (void *)(v44 + 72);
        *(void *)(v44 + 96) = &type metadata for String;
        *(void *)(v44 + 104) = v51;
        if (v60)
        {
          *uint64_t v62 = v61;
LABEL_24:
          *(void *)(v44 + 80) = v60;
          unint64_t v63 = sub_100026BA8();
          uint64_t v26 = (void *)static OS_os_log.default.getter(v63);
          uint64_t v64 = static os_log_type_t.default.getter(v26);
          os_log(_:dso:log:type:_:)( "unable to create extension from '%{public}s', unrecognised package type '%{public}s'",  84LL,  2LL,  &_mh_execute_header,  v26,  v64,  v44);
          uint64_t v42 = v44;
          goto LABEL_25;
        }

uint64_t sub_1000F4B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D528C(a2);
  if (v5)
  {
    if (v5 != 1)
    {
      sub_10003783C(v4, v5);
      return 0LL;
    }

    uint64_t v6 = type metadata accessor for DriverExtension(0LL);
  }

  else
  {
    uint64_t v6 = type metadata accessor for KernelExtension(0LL);
  }

  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)sub_10008F550();
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    swift_bridgeObjectRetain(v9);
    unint64_t v11 = sub_100006114(v10, v9);
    if ((v12 & 1) != 0)
    {
      sub_100006054(*(void *)(a2 + 56) + 32 * v11, (uint64_t)&v19);
      swift_bridgeObjectRelease(v9);
      if (*((void *)&v20 + 1))
      {
        int v13 = swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
        if (v13) {
          uint64_t v14 = v18[0];
        }
        else {
          uint64_t v14 = 0LL;
        }
        if (v13) {
          unint64_t v15 = v18[1];
        }
        else {
          unint64_t v15 = 0xF000000000000000LL;
        }
        goto LABEL_18;
      }
    }

    else
    {
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      swift_bridgeObjectRelease(v9);
    }
  }

  else
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
  }

  sub_100012824((uint64_t)&v19, &qword_100157FF8);
  uint64_t v14 = 0LL;
  unint64_t v15 = 0xF000000000000000LL;
LABEL_18:
  *(void *)&__int128 v19 = a1;
  char v21 = 1;
  uint64_t v17 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t))(v7 + 312);
  swift_bridgeObjectRetain(a2);
  swift_retain(a1);
  return v17(&v19, a2, v14, v15);
}

uint64_t sub_1000F4CE4(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_10008F64C();
  if (!*(void *)(a1 + 16))
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
LABEL_11:
    swift_bridgeObjectRelease(a1);
    goto LABEL_12;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_11;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v77);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v78 + 1))
  {
LABEL_12:
    sub_100012824((uint64_t)&v77, &qword_100157FF8);
    goto LABEL_13;
  }

  if ((swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_13:
    char v11 = 4;
    goto LABEL_14;
  }

  uint64_t v8 = v75;
  uint64_t v7 = v76;
  uint64_t v9 = sub_10008F7D8();
  uint64_t v10 = *((void *)v9 + 1);
  if (*(void *)v9 == v8 && v10 == v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v9, v10, v8, v7, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    char v11 = 0;
    goto LABEL_14;
  }

  char v70 = sub_10008F7CC();
  uint64_t v71 = *((void *)v70 + 1);
  if (*(void *)v70 == v8 && v71 == v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v70, v71, v8, v7, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    char v11 = 1;
    goto LABEL_14;
  }

  uint64_t v72 = sub_10008F7C0();
  uint64_t v73 = *((void *)v72 + 1);
  if ((*(void *)v72 != v8 || v73 != v7)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v72, v73, v8, v7, 0LL) & 1) == 0)
  {
    sub_10008F7E4();
    swift_bridgeObjectRelease(v7);
    goto LABEL_13;
  }

  swift_bridgeObjectRelease(v7);
  char v11 = 2;
LABEL_14:
  uint64_t v12 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t inited = swift_initStackObject(v12, v80);
  *(_OWORD *)(inited + 16) = xmmword_100112500;
  uint64_t v14 = sub_100090110();
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)(inited + 3sub_100006034(v0 + 2) = v16;
  *(void *)(inited + sub_10007CFB4(v0 + 40) = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v17 = (uint64_t *)sub_100090104();
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(inited + 48) = v19;
  *(void *)(inited + 56) = v18;
  swift_bridgeObjectRetain(v18);
  __int128 v20 = sub_10009011C();
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)(inited + 64) = v22;
  *(void *)(inited + 7sub_100006034(v0 + 2) = v21;
  swift_bridgeObjectRetain(v21);
  uint64_t v23 = sub_100090128();
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)(inited + 80) = v25;
  *(void *)(inited + 88) = v24;
  swift_bridgeObjectRetain(v24);
  uint64_t v26 = (uint64_t *)sub_10008F550();
  if (!*(void *)(a1 + 16))
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
LABEL_26:
    sub_100012824((uint64_t)&v77, &qword_100157FF8);
    uint64_t v32 = 0LL;
    unint64_t v33 = 0xF000000000000000LL;
    goto LABEL_27;
  }

  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  swift_bridgeObjectRetain(v27);
  unint64_t v29 = sub_100006114(v28, v27);
  if ((v30 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v29, (uint64_t)&v77);
  }

  else
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
  }

  swift_bridgeObjectRelease(v27);
  if (!*((void *)&v78 + 1)) {
    goto LABEL_26;
  }
  int v31 = swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
  if (v31) {
    uint64_t v32 = v75;
  }
  else {
    uint64_t v32 = 0LL;
  }
  if (v31) {
    unint64_t v33 = v76;
  }
  else {
    unint64_t v33 = 0xF000000000000000LL;
  }
LABEL_27:
  swift_bridgeObjectRetain(a1);
  uint64_t v35 = sub_1000D528C(v34);
  if (!v36)
  {
    swift_bridgeObjectRelease(inited);
    uint64_t v37 = type metadata accessor for KernelExtension(0LL);
    goto LABEL_31;
  }

  if (v36 == 1)
  {
    swift_bridgeObjectRelease(inited);
    uint64_t v37 = type metadata accessor for DriverExtension(0LL);
LABEL_31:
    LOBYTE(v77) = v11;
    char v79 = 2;
    uint64_t v38 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t, __n128))(v37 + 312);
    __n128 v39 = swift_bridgeObjectRetain(a1);
    return v38(&v77, a1, v32, v33, v39);
  }

  sub_10003783C(v35, v36);
  uint64_t v41 = sub_10008F2B8();
  uint64_t v42 = v41;
  if (!*(void *)(a1 + 16))
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
LABEL_41:
    swift_bridgeObjectRelease(inited);
    sub_100012824((uint64_t)&v77, &qword_100157FF8);
    goto LABEL_42;
  }

  uint64_t v43 = *v41;
  uint64_t v44 = v41[1];
  swift_bridgeObjectRetain(v44);
  unint64_t v45 = sub_100006114(v43, v44);
  if ((v46 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v45, (uint64_t)&v77);
  }

  else
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
  }

  swift_bridgeObjectRelease(v44);
  if (!*((void *)&v78 + 1)) {
    goto LABEL_41;
  }
  if ((swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v47 = v76;
    char v48 = sub_10003464C(v75, v76, (void *)inited);
    swift_bridgeObjectRelease(v47);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for String);
    if ((v48 & 1) != 0)
    {
      LOBYTE(v77) = v11;
      char v79 = 2;
      uint64_t v49 = type metadata accessor for KernelExtension(0LL);
      uint64_t v40 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
      sub_10003A50C((uint64_t *)&v77, v40 + 24);
      uint64_t v50 = v40 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
      uint64_t v51 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 1LL, 1LL, v51);
      uint64_t v52 = v40 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
      *(_OWORD *)uint64_t v52 = xmmword_10010FF00;
      swift_beginAccess(v52, &v75, 1LL, 0LL);
      uint64_t v53 = *(void *)v52;
      unint64_t v54 = *(void *)(v52 + 8);
      *(void *)uint64_t v52 = v32;
      *(void *)(v52 + 8) = v33;
      swift_bridgeObjectRetain(a1);
      sub_10002193C(v53, v54);
      *(void *)(v40 + 16) = a1;
      sub_10003A584(&v77);
      return v40;
    }

uint64_t sub_1000F5384()
{
  uint64_t v0 = sub_100005FB4(&qword_10015BB40);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_10011B920;
  sub_100005FB4(&qword_10015A810);
  uint64_t v2 = sub_10008F484();
  uint64_t v3 = v2[1];
  uint64_t v22 = *v2;
  uint64_t v23 = v3;
  swift_bridgeObjectRetain(v3);
  char v4 = sub_100026BEC();
  unint64_t v5 = sub_1000FB584((uint64_t)&v22, v4 & 1, 0LL);
  swift_bridgeObjectRelease(v3);
  *(void *)(v1 + 3sub_100006034(v0 + 2) = v5;
  char v6 = (uint64_t *)sub_10008F4FC();
  uint64_t v7 = v6[1];
  uint64_t v22 = *v6;
  uint64_t v23 = v7;
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = sub_1000FB584((uint64_t)&v22, 1, 0LL);
  swift_bridgeObjectRelease(v7);
  *(void *)(v1 + sub_10007CFB4(v0 + 40) = v8;
  uint64_t v9 = (uint64_t *)sub_10008F448();
  uint64_t v10 = v9[1];
  uint64_t v22 = *v9;
  uint64_t v23 = v10;
  uint64_t v11 = sub_100005FB4(&qword_100158898);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_1000FA164((uint64_t)&v22, v11, 1, 0LL, v11);
  swift_bridgeObjectRelease(v10);
  *(void *)(v1 + 48) = v12;
  int v13 = sub_10008F310();
  uint64_t v14 = v13[1];
  uint64_t v22 = *v13;
  uint64_t v23 = v14;
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = sub_1000FA164((uint64_t)&v22, (uint64_t)&type metadata for String, 1, 0LL, (uint64_t)&type metadata for String);
  swift_bridgeObjectRelease(v14);
  *(void *)(v1 + 56) = v15;
  uint64_t v16 = (uint64_t *)sub_10008F418();
  uint64_t v17 = v16[1];
  uint64_t v22 = *v16;
  uint64_t v23 = v17;
  uint64_t v18 = sub_100005FB4(&qword_100158900);
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = sub_1000FA164((uint64_t)&v22, v18, 1, 0LL, v18);
  uint64_t v20 = swift_bridgeObjectRelease(v17);
  *(void *)(v1 + 64) = v19;
  uint64_t v22 = v1;
  uint64_t result = specialized Array._endMutation()(v20);
  qword_1001758F8 = v22;
  return result;
}

uint64_t sub_1000F5558()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

const char *sub_1000F55B4()
{
  return "kext";
}

uint64_t sub_1000F55C0()
{
  if (qword_100173640 != -1) {
    swift_once(&qword_100173640, sub_1000F5384);
  }
  uint64_t v159 = qword_1001758F8;
  uint64_t v0 = sub_100005FB4(&qword_10015BB40);
  uint64_t inited = swift_initStackObject(v0, v166);
  *(_OWORD *)(inited + 16) = xmmword_10011B930;
  uint64_t v2 = inited;
  sub_100005FB4(&qword_10015A810);
  Swift::Int v158 = sub_10008F2B8();
  unint64_t v3 = v158[1];
  uint64_t v164 = *v158;
  unint64_t v165 = v3;
  swift_bridgeObjectRetain(v3);
  char v4 = sub_100026BEC();
  unint64_t v5 = sub_1000FAB44((uint64_t)&v164, 64LL, v4 & 1, 0LL);
  swift_bridgeObjectRelease(v3);
  uint64_t v6 = v2;
  *(void *)(v2 + 3sub_100006034(v0 + 2) = v5;
  uint64_t v7 = sub_10008F368();
  unint64_t v8 = v7[1];
  uint64_t v164 = *v7;
  unint64_t v165 = v8;
  swift_bridgeObjectRetain(v8);
  char v9 = sub_1000FD8F0();
  uint64_t v10 = sub_1000FA618( (uint64_t)&v164,  (uint64_t)&off_10014FE18,  v9 & 1,  0LL,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v8);
  *(void *)(v6 + sub_10007CFB4(v0 + 40) = v10;
  uint64_t v11 = (uint64_t *)sub_10008F43C();
  unint64_t v12 = v11[1];
  uint64_t v164 = *v11;
  unint64_t v165 = v12;
  uint64_t v13 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v14 = swift_allocObject(v13, 128LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_10011B940;
  swift_bridgeObjectRetain(v12);
  uint64_t v15 = sub_1000918C8();
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)(v14 + 3sub_100006034(v0 + 2) = v17;
  *(void *)(v14 + sub_10007CFB4(v0 + 40) = v16;
  swift_bridgeObjectRetain(v16);
  uint64_t v18 = sub_1000918D4();
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)(v14 + 48) = v20;
  *(void *)(v14 + 56) = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v21 = sub_1000918E0();
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)(v14 + 64) = v23;
  *(void *)(v14 + 7sub_100006034(v0 + 2) = v22;
  swift_bridgeObjectRetain(v22);
  uint64_t v24 = sub_1000918EC();
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)(v14 + 80) = v26;
  *(void *)(v14 + 88) = v25;
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = sub_100091904();
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)(v14 + 96) = v29;
  *(void *)(v14 + 104) = v28;
  swift_bridgeObjectRetain(v28);
  char v30 = sub_100091910();
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)(v14 + 11sub_100006034(v0 + 2) = v32;
  *(void *)(v14 + 120) = v31;
  swift_bridgeObjectRetain(v31);
  unint64_t v33 = sub_1000FA618( (uint64_t)&v164,  v14,  1,  0LL,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  uint64_t v34 = v6;
  *(void *)(v6 + 48) = v33;
  uint64_t v35 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_10011B950;
  unint64_t v36 = sub_10008F310();
  unint64_t v37 = v36[1];
  uint64_t v164 = *v36;
  unint64_t v165 = v37;
  swift_bridgeObjectRetain(v37);
  uint64_t v38 = sub_1000F9CC0((uint64_t)&v164, 0LL);
  swift_bridgeObjectRelease(v37);
  *(void *)(v35 + 3sub_100006034(v0 + 2) = v38;
  uint64_t v39 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v39 + 16) = xmmword_10011B950;
  uint64_t v40 = *v36;
  unint64_t v41 = v36[1];
  uint64_t v164 = v40;
  unint64_t v165 = v41;
  swift_bridgeObjectRetain(v41);
  char v42 = sub_1000FD8F0();
  uint64_t v43 = sub_1000FA164( (uint64_t)&v164,  (uint64_t)&type metadata for String,  v42 & 1,  0LL,  (uint64_t)&type metadata for String);
  swift_bridgeObjectRelease(v41);
  *(void *)(v39 + 3sub_100006034(v0 + 2) = v43;
  uint64_t v44 = (uint64_t *)sub_10008F520();
  unint64_t v45 = v44[1];
  uint64_t v164 = *v44;
  unint64_t v165 = v45;
  swift_bridgeObjectRetain(v45);
  char v46 = sub_1000FD8F0();
  uint64_t v47 = sub_1000FA164( (uint64_t)&v164,  (uint64_t)&type metadata for String,  v46 & 1,  0LL,  (uint64_t)&type metadata for String);
  uint64_t v48 = swift_bridgeObjectRelease(v45);
  *(void *)(v39 + sub_10007CFB4(v0 + 40) = v47;
  uint64_t v164 = v39;
  specialized Array._endMutation()(v48);
  uint64_t v49 = v164;
  uint64_t v53 = sub_1000FBFBC(v164, v50, v51, v52);
  uint64_t v54 = swift_bridgeObjectRelease(v49);
  *(void *)(v35 + sub_10007CFB4(v0 + 40) = v53;
  uint64_t v164 = v35;
  specialized Array._endMutation()(v54);
  uint64_t v55 = v164;
  unint64_t v57 = sub_1000FBD7C(v164, 0LL, 0LL, v56);
  swift_bridgeObjectRelease(v55);
  *(void *)(v34 + 56) = v57;
  uint64_t v58 = v34;
  uint64_t v161 = v34;
  char v157 = (uint64_t *)sub_10008F448();
  unint64_t v59 = v157[1];
  uint64_t v164 = *v157;
  unint64_t v165 = v59;
  uint64_t v60 = sub_100005FB4(&qword_100158898);
  uint64_t v61 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v61 + 16) = xmmword_10011B950;
  swift_bridgeObjectRetain(v59);
  uint64_t v62 = (uint64_t *)sub_100090104();
  uint64_t v63 = v62[1];
  uint64_t v162 = *v62;
  uint64_t v163 = v63;
  swift_bridgeObjectRetain(v63);
  uint64_t v64 = sub_1000F9CC0((uint64_t)&v162, 0LL);
  swift_bridgeObjectRelease(v63);
  *(void *)(v61 + 3sub_100006034(v0 + 2) = v64;
  uint64_t v162 = 0LL;
  uint64_t v163 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(v163);
  uint64_t v162 = 0xD00000000000001DLL;
  uint64_t v163 = 0x800000010012CC00LL;
  uint64_t v65 = (uint64_t *)sub_1000900F8();
  uint64_t v66 = *v65;
  unint64_t v67 = (void *)v65[1];
  swift_bridgeObjectRetain(v67);
  v68._uint64_t countAndFlagsBits = v66;
  v68._object = v67;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v67);
  v69._uint64_t countAndFlagsBits = 39LL;
  v69._object = (void *)0xE100000000000000LL;
  String.append(_:)(v69);
  uint64_t v70 = v163;
  uint64_t v71 = sub_1000FBCCC((uint64_t)sub_1000F6104, 0LL, v162, v163);
  uint64_t v72 = swift_bridgeObjectRelease(v70);
  *(void *)(v61 + sub_10007CFB4(v0 + 40) = v71;
  uint64_t v162 = v61;
  specialized Array._endMutation()(v72);
  uint64_t v73 = v162;
  uint64_t v160 = v60;
  uint64_t v74 = sub_1000FB794((uint64_t)&v164, v60, v162, 1, 0LL, v60);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v73);
  *(void *)(v58 + 64) = v74;
  uint64_t v75 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v75 + 16) = xmmword_10011B960;
  unint64_t v76 = (uint64_t *)sub_10008F454();
  unint64_t v77 = v76[1];
  uint64_t v164 = *v76;
  unint64_t v165 = v77;
  swift_bridgeObjectRetain(v77);
  __int128 v78 = sub_1000F9CC0((uint64_t)&v164, 0LL);
  swift_bridgeObjectRelease(v77);
  *(void *)(v75 + 3sub_100006034(v0 + 2) = v78;
  uint64_t v79 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v79 + 16) = xmmword_10011B950;
  unint64_t v80 = v76[1];
  uint64_t v164 = *v76;
  unint64_t v165 = v80;
  swift_bridgeObjectRetain(v80);
  char v81 = sub_1000FD8F0();
  uint64_t v82 = sub_1000FA618( (uint64_t)&v164,  (uint64_t)&off_10014FE48,  v81 & 1,  0LL,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Bool);
  swift_bridgeObjectRelease(v80);
  *(void *)(v79 + 3sub_100006034(v0 + 2) = v82;
  uint64_t v83 = (uint64_t *)sub_10008F460();
  unint64_t v84 = v83[1];
  uint64_t v164 = *v83;
  unint64_t v165 = v84;
  swift_bridgeObjectRetain(v84);
  char v85 = sub_1000FA618( (uint64_t)&v164,  (uint64_t)&off_10014FE70,  1,  0LL,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Bool);
  uint64_t v86 = swift_bridgeObjectRelease(v84);
  *(void *)(v79 + sub_10007CFB4(v0 + 40) = v85;
  uint64_t v164 = v79;
  specialized Array._endMutation()(v86);
  uint64_t v87 = v164;
  uint64_t v91 = sub_1000FBEDC(v164, v88, v89, v90);
  swift_bridgeObjectRelease(v87);
  *(void *)(v75 + sub_10007CFB4(v0 + 40) = v91;
  uint64_t v92 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v92 + 16) = xmmword_10011B950;
  uint64_t v93 = *v76;
  unint64_t v94 = v76[1];
  uint64_t v164 = v93;
  unint64_t v165 = v94;
  swift_bridgeObjectRetain(v94);
  char v95 = sub_1000FD8F0();
  uint64_t v96 = sub_1000FA618( (uint64_t)&v164,  (uint64_t)&off_10014FE98,  v95 & 1,  0LL,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Bool);
  swift_bridgeObjectRelease(v94);
  *(void *)(v92 + 3sub_100006034(v0 + 2) = v96;
  unint64_t v97 = v157[1];
  uint64_t v164 = *v157;
  unint64_t v165 = v97;
  uint64_t v98 = sub_100012B78(&qword_10015C2F8, &qword_100158898, (uint64_t)&protocol conformance descriptor for [A : B]);
  swift_bridgeObjectRetain(v97);
  char v99 = sub_100026BEC();
  uint64_t v100 = sub_1000FAFF0((uint64_t)&v164, 1LL, 2LL, v160, v99 & 1, 0LL, v160, v98);
  uint64_t v101 = swift_bridgeObjectRelease(v97);
  *(void *)(v92 + sub_10007CFB4(v0 + 40) = v100;
  uint64_t v164 = v92;
  specialized Array._endMutation()(v101);
  uint64_t v102 = v164;
  uint64_t v106 = sub_1000FBEDC(v164, v103, v104, v105);
  uint64_t v107 = swift_bridgeObjectRelease(v102);
  *(void *)(v75 + 48) = v106;
  uint64_t v164 = v75;
  specialized Array._endMutation()(v107);
  uint64_t v108 = v164;
  uint64_t v110 = sub_1000FBD7C(v164, 0LL, 0LL, v109);
  swift_bridgeObjectRelease(v108);
  *(void *)(v161 + 7sub_100006034(v0 + 2) = v110;
  uint64_t v111 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v111 + 16) = xmmword_10011B950;
  uint64_t v112 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v112 + 16) = xmmword_10011B950;
  uint64_t v113 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v113 + 16) = xmmword_10011B950;
  unint64_t v114 = (uint64_t *)sub_10008F568();
  unint64_t v115 = v114[1];
  uint64_t v164 = *v114;
  unint64_t v165 = v115;
  swift_bridgeObjectRetain(v115);
  sub_100026BEC();
  uint64_t v116 = sub_1000FC0BC((uint64_t)&v164);
  swift_bridgeObjectRelease(v115);
  *(void *)(v113 + 3sub_100006034(v0 + 2) = v116;
  uint64_t v117 = (uint64_t *)sub_10008F574();
  unint64_t v118 = v117[1];
  uint64_t v164 = *v117;
  unint64_t v165 = v118;
  swift_bridgeObjectRetain(v118);
  sub_100026BEC();
  unint64_t v119 = sub_1000FC0BC((uint64_t)&v164);
  uint64_t v120 = swift_bridgeObjectRelease(v118);
  *(void *)(v113 + sub_10007CFB4(v0 + 40) = v119;
  uint64_t v164 = v113;
  specialized Array._endMutation()(v120);
  uint64_t v121 = v164;
  uint64_t v123 = sub_1000FBD7C(v164, 0LL, 0LL, v122);
  swift_bridgeObjectRelease(v121);
  *(void *)(v112 + 3sub_100006034(v0 + 2) = v123;
  unint64_t v124 = v158[1];
  uint64_t v164 = *v158;
  unint64_t v165 = v124;
  swift_bridgeObjectRetain(v124);
  uint64_t v125 = (uint64_t *)sub_1000900E0();
  uint64_t v126 = *v125;
  uint64_t v127 = (void *)v125[1];
  swift_bridgeObjectRetain(v127);
  char v128 = sub_100026BEC();
  uint64_t v129 = sub_1000FADA0((uint64_t)&v164, v126, v127, v128 & 1, 0LL);
  swift_bridgeObjectRelease(v124);
  uint64_t v130 = swift_bridgeObjectRelease(v127);
  *(void *)(v112 + sub_10007CFB4(v0 + 40) = v129;
  uint64_t v164 = v112;
  specialized Array._endMutation()(v130);
  uint64_t v131 = v164;
  uint64_t v135 = sub_1000FBEDC(v164, v132, v133, v134);
  swift_bridgeObjectRelease(v131);
  *(void *)(v111 + 3sub_100006034(v0 + 2) = v135;
  unint64_t v136 = v157[1];
  uint64_t v164 = *v157;
  unint64_t v165 = v136;
  uint64_t v137 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v137 + 16) = xmmword_10011B970;
  swift_bridgeObjectRetain(v136);
  unint64_t v138 = (uint64_t *)sub_100090134();
  uint64_t v139 = v138[1];
  uint64_t v162 = *v138;
  uint64_t v163 = v139;
  swift_bridgeObjectRetain(v139);
  uint64_t v140 = sub_1000F9CC0((uint64_t)&v162, 0LL);
  uint64_t v141 = swift_bridgeObjectRelease(v139);
  *(void *)(v137 + 3sub_100006034(v0 + 2) = v140;
  uint64_t v162 = v137;
  specialized Array._endMutation()(v141);
  uint64_t v142 = v162;
  uint64_t v143 = sub_1000FB794((uint64_t)&v164, v160, v162, 1, 0LL, v160);
  swift_bridgeObjectRelease(v136);
  uint64_t v144 = swift_bridgeObjectRelease(v142);
  *(void *)(v111 + sub_10007CFB4(v0 + 40) = v143;
  uint64_t v164 = v111;
  specialized Array._endMutation()(v144);
  uint64_t v145 = v164;
  uint64_t v164 = 0LL;
  unint64_t v165 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(v165);
  uint64_t v164 = 0x20676E696B6E694CLL;
  unint64_t v165 = 0xE800000000000000LL;
  uint64_t v147 = *v138;
  uint64_t v146 = (void *)v138[1];
  swift_bridgeObjectRetain(v146);
  v148._uint64_t countAndFlagsBits = v147;
  v148._object = v146;
  String.append(_:)(v148);
  swift_bridgeObjectRelease(v146);
  v149._object = (void *)0x800000010012CC20LL;
  v149._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v149);
  unint64_t v150 = v165;
  uint64_t v152 = sub_1000FBD7C(v145, v164, v165, v151);
  swift_bridgeObjectRelease(v145);
  uint64_t v153 = swift_bridgeObjectRelease(v150);
  *(void *)(v161 + 80) = v152;
  uint64_t v164 = v161;
  specialized Array._endMutation()(v153);
  uint64_t v154 = v164;
  uint64_t v164 = v159;
  swift_bridgeObjectRetain(v159);
  uint64_t v155 = swift_bridgeObjectRetain(v154);
  sub_1000F707C(v155);
  uint64_t result = swift_bridgeObjectRelease(v154);
  qword_100175900 = v164;
  return result;
}

BOOL sub_1000F6104()
{
  uint64_t v0 = (uint64_t *)sub_1000900F8();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  Swift::Bool v4 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease(v2);
  return !v4;
}

uint64_t *sub_1000F6160()
{
  if (qword_100173648 != -1) {
    swift_once(&qword_100173648, sub_1000F55C0);
  }
  return &qword_100175900;
}

const char *sub_1000F61A4()
{
  return "dext";
}

uint64_t sub_1000F61B0()
{
  if (qword_100173640 != -1) {
    swift_once(&qword_100173640, sub_1000F5384);
  }
  uint64_t v0 = qword_1001758F8;
  sub_100005FB4(&qword_10015A810);
  uint64_t v1 = sub_10008F2B8();
  uint64_t v2 = v1[1];
  uint64_t v71 = *v1;
  uint64_t v72 = v2;
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = *(void *)sub_100090230();
  char v4 = sub_100026BEC();
  uint64_t v70 = sub_1000FAB44((uint64_t)&v71, v3, v4 & 1, 0LL);
  swift_bridgeObjectRelease(v2);
  unint64_t v5 = sub_10008F368();
  uint64_t v6 = v5[1];
  uint64_t v71 = *v5;
  uint64_t v72 = v6;
  swift_bridgeObjectRetain(v6);
  char v7 = sub_1000FD8F0();
  Swift::String v69 = sub_1000FA618( (uint64_t)&v71,  (uint64_t)&off_10014FEC0,  v7 & 1,  0LL,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = sub_100005FB4(&qword_10015BB40);
  uint64_t v9 = swift_allocObject(v8, 48LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_10011B950;
  uint64_t v10 = (uint64_t *)sub_10008F43C();
  uint64_t v11 = v10[1];
  uint64_t v71 = *v10;
  uint64_t v72 = v11;
  swift_bridgeObjectRetain(v11);
  unint64_t v12 = sub_1000F9CC0((uint64_t)&v71, 0LL);
  swift_bridgeObjectRelease(v11);
  *(void *)(v9 + 3sub_100006034(v0 + 2) = v12;
  uint64_t v13 = *v10;
  uint64_t v14 = v10[1];
  uint64_t v71 = v13;
  uint64_t v72 = v14;
  uint64_t v15 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v16 = swift_allocObject(v15, 64LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_10010F440;
  swift_bridgeObjectRetain(v14);
  uint64_t v17 = sub_1000918F8();
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)(v16 + 3sub_100006034(v0 + 2) = v19;
  *(void *)(v16 + sub_10007CFB4(v0 + 40) = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = sub_100091904();
  uint64_t v22 = *(void *)v20;
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)(v16 + 48) = v22;
  *(void *)(v16 + 56) = v21;
  swift_bridgeObjectRetain(v21);
  char v23 = sub_1000FD8F0();
  uint64_t v24 = sub_1000FA618( (uint64_t)&v71,  v16,  v23 & 1,  0LL,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v14);
  uint64_t v25 = swift_bridgeObjectRelease(v16);
  *(void *)(v9 + sub_10007CFB4(v0 + 40) = v24;
  uint64_t v71 = v9;
  specialized Array._endMutation()(v25);
  uint64_t v26 = v71;
  uint64_t v28 = sub_1000FBD7C(v71, 0LL, 0LL, v27);
  swift_bridgeObjectRelease(v26);
  uint64_t v29 = swift_allocObject(v15, 112LL, 7LL);
  *(_OWORD *)(v29 + 16) = xmmword_10010FF10;
  char v30 = (uint64_t *)sub_10008F430();
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *(void *)(v29 + 3sub_100006034(v0 + 2) = v32;
  *(void *)(v29 + sub_10007CFB4(v0 + 40) = v31;
  swift_bridgeObjectRetain(v31);
  unint64_t v33 = (uint64_t *)sub_10008F454();
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *(void *)(v29 + 48) = v35;
  *(void *)(v29 + 56) = v34;
  swift_bridgeObjectRetain(v34);
  unint64_t v36 = (uint64_t *)sub_10008F508();
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)(v29 + 64) = v38;
  *(void *)(v29 + 7sub_100006034(v0 + 2) = v37;
  swift_bridgeObjectRetain(v37);
  uint64_t v39 = (uint64_t *)sub_10008F514();
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)(v29 + 80) = v41;
  *(void *)(v29 + 88) = v40;
  swift_bridgeObjectRetain(v40);
  char v42 = (uint64_t *)sub_10008F520();
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *(void *)(v29 + 96) = v44;
  *(void *)(v29 + 104) = v43;
  swift_bridgeObjectRetain(v43);
  uint64_t v48 = sub_1000F9E54(v29, v45, v46, v47);
  swift_bridgeObjectRelease(v29);
  uint64_t v71 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v68 = v0;
    }
    else {
      uint64_t v68 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v0, 2LL);
    unint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease(v0);
  }

  else
  {
    unint64_t v49 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v0);
  }

  if (__OFADD__(v49, 4LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v51 = sub_1000F73E0(v49 + 4, 1);
    specialized Array._endMutation()(v51);
    uint64_t v52 = swift_retain(v70);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
    unint64_t v49 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v50 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v49 < v50 >> 1) {
      goto LABEL_7;
    }
  }

  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v49 + 1, 1LL);
LABEL_7:
  uint64_t v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v70);
  specialized Array._endMutation()(v53);
  uint64_t v54 = swift_retain(v69);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
  unint64_t v56 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v55 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v56 >= v55 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1LL);
  }
  uint64_t v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v69);
  specialized Array._endMutation()(v57);
  uint64_t v58 = swift_retain(v28);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
  unint64_t v60 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v59 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v60 >= v59 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1LL);
  }
  uint64_t v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v28);
  specialized Array._endMutation()(v61);
  uint64_t v62 = swift_retain(v48);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
  unint64_t v64 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v63 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v64 >= v63 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1LL);
  }
  uint64_t v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v48);
  specialized Array._endMutation()(v65);
  uint64_t v66 = v71;
  swift_release(v70);
  swift_release(v48);
  swift_release(v28);
  uint64_t result = swift_release(v69);
  qword_100175908 = v66;
  return result;
}

uint64_t *sub_1000F669C()
{
  if (qword_100173650 != -1) {
    swift_once(&qword_100173650, sub_1000F61B0);
  }
  return &qword_100175908;
}

uint64_t sub_1000F66DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_10003A50C(a1, v10 + 24);
  uint64_t v11 = v10 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = v10 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  *(_OWORD *)uint64_t v13 = xmmword_10010FF00;
  swift_beginAccess(v13, v17, 1LL, 0LL);
  uint64_t v14 = *(void *)v13;
  unint64_t v15 = *(void *)(v13 + 8);
  *(void *)uint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  sub_10002193C(v14, v15);
  *(void *)(v10 + 16) = a2;
  sub_10003A584(a1);
  return v10;
}

Swift::Int sub_1000F67BC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = Hasher.init(_seed:)(v23, 0LL);
  uint64_t v6 = (*(uint64_t (**)(void *))(*v0 + 144))(v5);
  uint64_t v8 = v7;
  String.hash(into:)(v23, v6, v7);
  uint64_t v9 = swift_bridgeObjectRelease(v8);
  Swift::UInt64 v10 = (*(uint64_t (**)(uint64_t))(*v0 + 192))(v9);
  Hasher._combine(_:)(v10);
  sub_10003A50C(v0 + 3, (uint64_t)v21);
  if (v22)
  {
    if (v22 == 1)
    {
      uint64_t v11 = *(void *)&v21[0];
      uint64_t v12 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(v23, v1, v12);
      LOBYTE(v18[0]) = *(_BYTE *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      unint64_t v13 = sub_10004FA4C();
      dispatch thunk of Hashable.hash(into:)(v23, &type metadata for CollectionKind, v13);
      swift_release(v11);
    }
  }

  else
  {
    sub_100005158(v21, (uint64_t)v18);
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    sub_100005110(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
    uint64_t v16 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v23, v1, v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_100006034(v18);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000F6990(uint64_t **a1, uint64_t **a2)
{
  return sub_1000F87DC(*a1, *a2);
}

Swift::Int sub_1000F699C()
{
  return sub_1000F67BC();
}

uint64_t sub_1000F69BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v8 + 144))(v5);
  uint64_t v11 = v10;
  String.hash(into:)(a1, v9, v10);
  uint64_t v12 = swift_bridgeObjectRelease(v11);
  Swift::UInt64 v13 = (*(uint64_t (**)(uint64_t))(*v8 + 192))(v12);
  Hasher._combine(_:)(v13);
  uint64_t result = sub_10003A50C(v8 + 3, (uint64_t)v25);
  if (v26)
  {
    if (v26 == 1)
    {
      uint64_t v15 = *(void *)&v25[0];
      uint64_t v16 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(a1, v3, v16);
      LOBYTE(v22[0]) = *(_BYTE *)(v15 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      unint64_t v17 = sub_10004FA4C();
      dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v17);
      return swift_release(v15);
    }
  }

  else
  {
    sub_100005158(v25, (uint64_t)v22);
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    sub_100005110(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
    uint64_t v20 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return sub_100006034(v22);
  }

  return result;
}

Swift::Int sub_1000F6B8C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = Hasher.init(_seed:)(v26, a1);
  uint64_t v8 = *v1;
  uint64_t v9 = (*(uint64_t (**)(void *))(*v8 + 144))(v7);
  uint64_t v11 = v10;
  String.hash(into:)(v26, v9, v10);
  uint64_t v12 = swift_bridgeObjectRelease(v11);
  Swift::UInt64 v13 = (*(uint64_t (**)(uint64_t))(*v8 + 192))(v12);
  Hasher._combine(_:)(v13);
  sub_10003A50C(v8 + 3, (uint64_t)v24);
  if (v25)
  {
    if (v25 == 1)
    {
      uint64_t v14 = *(void *)&v24[0];
      uint64_t v15 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(v26, v3, v15);
      LOBYTE(v21[0]) = *(_BYTE *)(v14 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      unint64_t v16 = sub_10004FA4C();
      dispatch thunk of Hashable.hash(into:)(v26, &type metadata for CollectionKind, v16);
      swift_release(v14);
    }
  }

  else
  {
    sub_100005158(v24, (uint64_t)v21);
    uint64_t v17 = v22;
    uint64_t v18 = v23;
    sub_100005110(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    uint64_t v19 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v26, v3, v19);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100006034(v21);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000F6D68()
{
  if (v14)
  {
    if (v14 == 1)
    {
      uint64_t v1 = *(void *)&v13[0];
      uint64_t v2 = sub_10004D888();
      swift_release(v1);
    }

    else
    {
      v10[0] = 0x20646564616F6CLL;
      v10[1] = 0xE700000000000000LL;
      if (LOBYTE(v13[0]) == 4)
      {
        unint64_t v5 = 0x800000010012CB30LL;
        uint64_t v6 = 0xD000000000000023LL;
      }

      else
      {
        uint64_t v6 = sub_1000D42D4(v13[0]);
        unint64_t v5 = v7;
      }

      unint64_t v8 = v5;
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease(v5);
      return v10[0];
    }
  }

  else
  {
    sub_100005158(v13, (uint64_t)v10);
    uint64_t v3 = v11;
    uint64_t v4 = v12;
    sub_100005110(v10, v11);
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter(v3, *(void *)(v4 + 8));
    sub_100006034(v10);
  }

  return v2;
}

uint64_t sub_1000F6E78(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_10003A50C(v1, (uint64_t)v18);
  if (v19)
  {
    if (v19 == 1)
    {
      uint64_t v8 = *(void *)&v18[0];
      uint64_t v9 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(a1, v3, v9);
      LOBYTE(v15[0]) = *(_BYTE *)(v8 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      unint64_t v10 = sub_10004FA4C();
      dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v10);
      return swift_release(v8);
    }
  }

  else
  {
    sub_100005158(v18, (uint64_t)v15);
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    sub_100005110(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(v11, v12);
    uint64_t v13 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return sub_100006034(v15);
  }

  return result;
}

Swift::Int sub_1000F7004()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F7044(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000F707C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_1000F7234(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F7234(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    uint64_t result = swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100012B78(&qword_10015C308, &qword_10015C300, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain(a3);
          for (unint64_t i = 0LL; i != v7; ++i)
          {
            sub_100005FB4(&qword_10015C300);
            uint64_t v11 = sub_1000D0E48(v15, i, a3);
            uint64_t v13 = *v12;
            swift_retain(*v12);
            ((void (*)(uint64_t **, void))v11)(v15, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          swift_bridgeObjectRelease(a3);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_100005FB4(&qword_10015A810);
        swift_arrayInitWithCopy(v5);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F73E0(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *uint64_t v2 = result;
  return result;
}

uint64_t sub_1000F749C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = a2[2];
    uint64_t v13 = a2[3];
    BOOL v14 = v10 == v12 && v11 == v13;
    if (v14
      || (char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL), result = 0LL, (v15 & 1) != 0))
    {
      sub_1000214C4(a1[4], a1[5]);
      if ((v16 & 1) != 0)
      {
        uint64_t v17 = a1[6];
        uint64_t v18 = a1[7];
        uint64_t v19 = a2[6];
        uint64_t v20 = a2[7];
        if (v17 == v19 && v18 == v20) {
          return 1LL;
        }
        else {
          return _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL);
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

unint64_t sub_1000F7554()
{
  unint64_t result = qword_100173658;
  if (!qword_100173658)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B8CC, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100173658);
  }

  return result;
}

uint64_t sub_1000F7598(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v4 = 0xEA00000000007265LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x536E6F6973726576LL && a2 == 0xED0000676E697274LL)
  {
    unint64_t v6 = 0xED0000676E697274LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x536E6F6973726576LL, 0xED0000676E697274LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x747365676964LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747365676964LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x6150656C646E7562LL && a2 == 0xEA00000000006874LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006874LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6150656C646E7562LL, 0xEA00000000006874LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000F7780@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_10015C318);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000F7554();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OSExtensionCodableLocation.CodingKeys,  &type metadata for OSExtensionCodableLocation.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100006034(a1);
  }
  LOBYTE(v35) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  uint64_t v14 = v13;
  uint64_t v33 = v12;
  LOBYTE(v35) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  uint64_t v34 = v16;
  uint64_t v17 = v16;
  uint64_t v32 = v15;
  char v37 = 2;
  unint64_t v18 = sub_10001AEC4();
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v37, v5, &type metadata for Data, v18);
  uint64_t v19 = v35;
  LOBYTE(v35) = 3;
  unint64_t v30 = v36;
  uint64_t v31 = v19;
  sub_1000125E0(v19, v36);
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v24 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain(v14);
  uint64_t v25 = v34;
  swift_bridgeObjectRetain(v34);
  unint64_t v27 = v30;
  uint64_t v26 = v31;
  sub_1000125E0(v31, v30);
  swift_bridgeObjectRetain(v22);
  sub_10001226C(v26, v27);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v25);
  sub_100006034(a1);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v14);
  sub_10001226C(v26, v27);
  uint64_t result = swift_bridgeObjectRelease(v22);
  *a2 = v33;
  a2[1] = v14;
  a2[2] = v32;
  a2[3] = v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v24;
  a2[7] = v22;
  return result;
}

unint64_t sub_1000F7A98()
{
  unint64_t result = qword_10015BE48;
  if (!qword_10015BE48)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_10015BE48);
  }

  return result;
}

uint64_t sub_1000F7ADC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    if (a1[2] == a2[2])
    {
      uint64_t v10 = a1[3];
      unint64_t v11 = a1[4];
      uint64_t v12 = a2[3];
      unint64_t v13 = a2[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15)
        {
LABEL_13:
          uint64_t v16 = a1[6];
          uint64_t v17 = a2[6];
          if (v16)
          {
            if (v17)
            {
              uint64_t v18 = a1[5];
              uint64_t v19 = a2[5];
              if (v18 == v19 && v16 == v17) {
                return 1LL;
              }
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0LL) & 1) != 0) {
                return 1LL;
              }
            }
          }

          else if (!v17)
          {
            return 1LL;
          }

          return 0LL;
        }

        goto LABEL_11;
      }

      if (v13 >> 60 == 15)
      {
LABEL_11:
        sub_10002B568(a1[3], a1[4]);
        sub_10002B568(v12, v13);
        sub_10002193C(v10, v11);
        sub_10002193C(v12, v13);
        return 0LL;
      }

      sub_10002B568(a1[3], a1[4]);
      sub_10002B568(v12, v13);
      sub_1000214C4(v10, v11);
      char v15 = v14;
      sub_10002193C(v12, v13);
      sub_10002193C(v10, v11);
      if ((v15 & 1) != 0) {
        goto LABEL_13;
      }
    }

    return 0LL;
  }

  return result;
}

unint64_t sub_1000F7C44()
{
  unint64_t result = qword_100173660[0];
  if (!qword_100173660[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B87C, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_100173660);
  }

  return result;
}

uint64_t sub_1000F7C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015BE58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7CD0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v4 = 0xEA00000000007265LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v6 = 0xE700000000000000LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x747365676964LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747365676964LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x6150656C646E7562LL && a2 == 0xEA00000000006874LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006874LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6150656C646E7562LL, 0xEA00000000006874LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000F7E94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_10015C310);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1000F7C44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OSExtensionCodable.CodingKeys,  &type metadata for OSExtensionCodable.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100006034(a1);
  }
  LOBYTE(v30) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  uint64_t v14 = v13;
  LOBYTE(v30) = 1;
  __n128 v15 = swift_bridgeObjectRetain(v13);
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5, v15);
  char v32 = 2;
  unint64_t v16 = sub_10001AEC4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v32, v5, &type metadata for Data, v16);
  uint64_t v17 = v30;
  LOBYTE(v30) = 3;
  unint64_t v27 = v31;
  uint64_t v28 = v17;
  sub_10002B568(v17, v31);
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v18;
  v21(v8, v5);
  swift_bridgeObjectRetain(v14);
  unint64_t v24 = v27;
  uint64_t v23 = v28;
  sub_10002B568(v28, v27);
  swift_bridgeObjectRetain(v20);
  sub_10002193C(v23, v24);
  swift_bridgeObjectRelease(v14);
  sub_100006034(a1);
  swift_bridgeObjectRelease(v14);
  sub_10002193C(v23, v24);
  uint64_t result = swift_bridgeObjectRelease(v20);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v29;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v22;
  a2[6] = v20;
  return result;
}

uint64_t sub_1000F8138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KernelExtension(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_100173E80, (uint64_t)&nominal type descriptor for KernelExtension);
}

uint64_t type metadata accessor for DriverExtension(uint64_t a1)
{
  return sub_10001809C(a1, qword_100173E90, (uint64_t)&nominal type descriptor for DriverExtension);
}

uint64_t sub_1000F81A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v67 - v9;
  sub_10003A50C(a1, (uint64_t)v84);
  sub_10003A50C(a2, (uint64_t)v86);
  if (!v85)
  {
    sub_10003A50C(v84, (uint64_t)v83);
    if (v87)
    {
      sub_100006034(v83);
      goto LABEL_16;
    }

    sub_100005158(v83, (uint64_t)v80);
    sub_100005158(v86, (uint64_t)v77);
    uint64_t v20 = v81;
    uint64_t v21 = v82;
    sub_100005110(v80, v81);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    if (v22)
    {
      uint64_t v23 = v22;
      unint64_t v24 = sub_10008F484();
      if (*(void *)(v23 + 16))
      {
        uint64_t v26 = *v24;
        uint64_t v25 = v24[1];
        swift_bridgeObjectRetain(v25);
        unint64_t v27 = sub_100006114(v26, v25);
        if ((v28 & 1) != 0)
        {
          sub_100006054(*(void *)(v23 + 56) + 32 * v27, (uint64_t)&v74);
        }

        else
        {
          __int128 v74 = 0u;
          __int128 v75 = 0u;
        }

        swift_bridgeObjectRelease(v25);
      }

      else
      {
        __int128 v74 = 0u;
        __int128 v75 = 0u;
      }

      swift_bridgeObjectRelease(v23);
      if (*((void *)&v75 + 1))
      {
        uint64_t v29 = v5;
        int v30 = swift_dynamicCast(&v70, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
        if (v30) {
          uint64_t v31 = v70;
        }
        else {
          uint64_t v31 = 0LL;
        }
        if (v30) {
          uint64_t v32 = v71;
        }
        else {
          uint64_t v32 = 0LL;
        }
        uint64_t v68 = v31;
        uint64_t v69 = v32;
LABEL_35:
        uint64_t v33 = v78;
        uint64_t v34 = v79;
        sub_100005110(v77, v78);
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
        if (v35)
        {
          uint64_t v36 = v35;
          char v37 = sub_10008F484();
          if (*(void *)(v36 + 16))
          {
            uint64_t v39 = *v37;
            uint64_t v38 = v37[1];
            swift_bridgeObjectRetain(v38);
            unint64_t v40 = sub_100006114(v39, v38);
            if ((v41 & 1) != 0)
            {
              sub_100006054(*(void *)(v36 + 56) + 32 * v40, (uint64_t)&v74);
            }

            else
            {
              __int128 v74 = 0u;
              __int128 v75 = 0u;
            }

            swift_bridgeObjectRelease(v38);
          }

          else
          {
            __int128 v74 = 0u;
            __int128 v75 = 0u;
          }

          swift_bridgeObjectRelease(v36);
          if (*((void *)&v75 + 1))
          {
            int v42 = swift_dynamicCast(&v70, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
            if (v42) {
              uint64_t v43 = v70;
            }
            else {
              uint64_t v43 = 0LL;
            }
            if (v42) {
              uint64_t v44 = v71;
            }
            else {
              uint64_t v44 = 0LL;
            }
LABEL_51:
            uint64_t v46 = v81;
            uint64_t v45 = v82;
            sub_100005110(v80, v81);
            (*(void (**)(uint64_t, uint64_t))(v45 + 64))(v46, v45);
            uint64_t v47 = v78;
            uint64_t v48 = v79;
            sub_100005110(v77, v78);
            (*(void (**)(uint64_t, uint64_t))(v48 + 64))(v47, v48);
            char v49 = static URL.== infix(_:_:)(v10, v8);
            unint64_t v50 = *(void (**)(char *, uint64_t))(v29 + 8);
            v50(v8, v4);
            v50(v10, v4);
            sub_100005F70((uint64_t)v80, (uint64_t)&v74);
            sub_100005F70((uint64_t)v77, (uint64_t)&v70);
            if ((v49 & 1) != 0)
            {
              uint64_t v51 = *((void *)&v75 + 1);
              uint64_t v52 = v76;
              sub_100005110(&v74, *((uint64_t *)&v75 + 1));
              uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
              uint64_t v55 = v54;
              uint64_t v56 = v72;
              uint64_t v57 = v73;
              sub_100005110(&v70, v72);
              uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 24))(v56, v57);
              uint64_t v60 = v59;
              if (v55)
              {
                if (v59)
                {
                  if (v53 == v58 && v55 == v59)
                  {
                    swift_bridgeObjectRelease(v55);
                    swift_bridgeObjectRelease(v60);
LABEL_66:
                    sub_100006034(&v74);
                    sub_100006034(&v70);
LABEL_73:
                    uint64_t v66 = v69;
                    if (v69)
                    {
                      if (v44)
                      {
                        if (v68 == v43 && v69 == v44)
                        {
                          swift_bridgeObjectRelease(v69);
                          swift_bridgeObjectRelease(v44);
                          char v18 = 1;
                        }

                        else
                        {
                          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, v43, v44, 0LL);
                          swift_bridgeObjectRelease(v66);
                          swift_bridgeObjectRelease(v44);
                        }

                        goto LABEL_65;
                      }

                      uint64_t v63 = v69;
                      goto LABEL_64;
                    }

                    if (!v44)
                    {
                      char v18 = 1;
                      goto LABEL_65;
                    }

uint64_t sub_1000F87DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t (**)(void))(*a1 + 144);
  uint64_t v5 = v4();
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(void))(*a2 + 144))();
  if (v5 == v8 && v7 == v9)
  {
    uint64_t v13 = swift_bridgeObjectRelease_n(v7, 2LL);
  }

  else
  {
    uint64_t v11 = v9;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
    swift_bridgeObjectRelease(v7);
    uint64_t v13 = swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v14 = ((uint64_t (*)(uint64_t))v4)(v13);
  uint64_t v16 = v15;
  if (v14 == 0xD000000000000014LL && v15 == 0x800000010012C9E0LL)
  {
    swift_bridgeObjectRelease(0x800000010012C9E0LL);
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD000000000000014LL, 0x800000010012C9E0LL, 0LL);
    uint64_t v18 = swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*a1 + 192))(v18);
    }
  }

  return 0LL;
}

unint64_t sub_1000F8940()
{
  unint64_t result = qword_10015BE60;
  if (!qword_10015BE60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B3B8, &type metadata for OSExtensionCodableLocation);
    atomic_store(result, (unint64_t *)&qword_10015BE60);
  }

  return result;
}

unint64_t sub_1000F8988()
{
  unint64_t result = qword_10015BE68;
  if (!qword_10015BE68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B498, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015BE68);
  }

  return result;
}

uint64_t sub_1000F89CC()
{
  return sub_100012860(&qword_1001593F8, type metadata accessor for OSExtension, (uint64_t)&unk_10011B550);
}

uint64_t type metadata accessor for OSExtension(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_100173E70, (uint64_t)&nominal type descriptor for OSExtension);
}

unint64_t sub_1000F8A10()
{
  unint64_t result = qword_10015BE70;
  if (!qword_10015BE70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B5E0, &type metadata for OSExtension.Location);
    atomic_store(result, (unint64_t *)&qword_10015BE70);
  }

  return result;
}

uint64_t destroy for OSExtensionCodableLocation(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for OSExtensionCodableLocation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_1000125E0(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for OSExtensionCodableLocation(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000125E0(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  a1[4] = v8;
  a1[5] = v9;
  sub_10001226C(v10, v11);
  a1[6] = a2[6];
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for OSExtensionCodableLocation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for OSExtensionCodableLocation(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001226C(v8, v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = a1[7];
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtensionCodableLocation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSExtensionCodableLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodableLocation()
{
  return &type metadata for OSExtensionCodableLocation;
}

uint64_t destroy for OSExtensionCodable(void *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_10001226C(a1[3], v2);
  }
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for OSExtensionCodable(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2 + 3;
  unint64_t v6 = a2[4];
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1000125E0(v7, v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 3sub_100006034(v0 + 2) = v6;
  }

  uint64_t v8 = a2[6];
  *(void *)(a1 + sub_10007CFB4(v0 + 40) = a2[5];
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for OSExtensionCodable(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  unint64_t v6 = a2 + 3;
  unint64_t v7 = a2[4];
  if (a1[4] >> 60 != 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v9 = *v6;
      sub_1000125E0(*v6, a2[4]);
      uint64_t v10 = a1[3];
      unint64_t v11 = a1[4];
      a1[3] = v9;
      a1[4] = v7;
      sub_10001226C(v10, v11);
      goto LABEL_8;
    }

    sub_1000F8E80((uint64_t)(a1 + 3));
    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + sub_10003A584(v0 + 3) = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v8 = *v6;
  sub_1000125E0(*v6, a2[4]);
  a1[3] = v8;
  a1[4] = v7;
LABEL_8:
  a1[5] = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1000F8E80(uint64_t a1)
{
  return a1;
}

void *assignWithTake for OSExtensionCodable(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  unint64_t v6 = a2 + 3;
  unint64_t v7 = a1[4];
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = a2[4];
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = a1[3];
      a1[3] = *v6;
      a1[4] = v8;
      sub_10001226C(v9, v7);
      goto LABEL_6;
    }

    sub_1000F8E80((uint64_t)(a1 + 3));
  }

  *(_OWORD *)(a1 + sub_10003A584(v0 + 3) = *(_OWORD *)v6;
LABEL_6:
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtensionCodable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSExtensionCodable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodable()
{
  return &type metadata for OSExtensionCodable;
}

uint64_t sub_1000F8FF8()
{
  return type metadata accessor for OSExtension(0LL);
}

void sub_1000F9000(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = ")";
  sub_10004B170(319LL);
  if (v3 <= 0x3F)
  {
    __int128 v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_10011B6C0;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void *destroy for OSExtension.Location(void *result)
{
  unsigned int v1 = *((unsigned __int8 *)result + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)result + 3;
  }
  if (v1 != 2)
  {
    if (v1 == 1) {
      return (void *)swift_release(*result);
    }
    else {
      return (void *)sub_100006034(result);
    }
  }

  return result;
}

uint64_t initializeWithCopy for OSExtension.Location(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 2;
  }

  else if (v3 == 1)
  {
    uint64_t v4 = *a2;
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 1;
    swift_retain(v4);
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for OSExtension.Location(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 != 2)
    {
      if (v4 == 1) {
        swift_release(*(void *)a1);
      }
      else {
        sub_100006034((void *)a1);
      }
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 2;
    }

    else if (v5 == 1)
    {
      uint64_t v6 = *a2;
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 1;
      swift_retain(v6);
    }

    else
    {
      uint64_t v7 = a2[3];
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 3sub_100006034(v0 + 2) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = 0;
    }
  }

  return a1;
}

__n128 initializeWithTake for OSExtension.Location(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OSExtension.Location(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 != 2)
    {
      if (v4 == 1) {
        swift_release(*(void *)a1);
      }
      else {
        sub_100006034((void *)a1);
      }
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      char v6 = 2;
    }

    else if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }

    else
    {
      char v6 = 0;
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
    }

    *(_BYTE *)(a1 + sub_10007CFB4(v0 + 40) = v6;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtension.Location(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for OSExtension.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000F9380(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t sub_1000F939C(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 3sub_100006034(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(asub_100006034(v0 + 2) = 3;
  }

  *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OSExtension.Location()
{
  return &type metadata for OSExtension.Location;
}

uint64_t sub_1000F93D4()
{
  return type metadata accessor for KernelExtension(0LL);
}

uint64_t sub_1000F93E0()
{
  return type metadata accessor for DriverExtension(0LL);
}

uint64_t sub_1000F93E8(uint64_t a1)
{
  return swift_updateClassMetadata2(a1, 256LL, 0LL, v2, a1 + 320);
}

ValueMetadata *type metadata accessor for OSExtensionCodable.CodingKeys()
{
  return &type metadata for OSExtensionCodable.CodingKeys;
}

uint64_t _s10driverkitd18OSExtensionCodableV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000F9480 + 4 * byte_10011B33D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000F94B4 + 4 * byte_10011B338[v4]))();
}

uint64_t sub_1000F94B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F94BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F94C4LL);
  }
  return result;
}

uint64_t sub_1000F94D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F94D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000F94DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F94E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodableLocation.CodingKeys()
{
  return &type metadata for OSExtensionCodableLocation.CodingKeys;
}

unint64_t sub_1000F9504()
{
  unint64_t result = qword_100173FA0[0];
  if (!qword_100173FA0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B79C, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, qword_100173FA0);
  }

  return result;
}

unint64_t sub_1000F954C()
{
  unint64_t result = qword_1001741B0[0];
  if (!qword_1001741B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B854, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_1001741B0);
  }

  return result;
}

unint64_t sub_1000F9594()
{
  unint64_t result = qword_1001742C0;
  if (!qword_1001742C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B7C4, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001742C0);
  }

  return result;
}

unint64_t sub_1000F95DC()
{
  unint64_t result = qword_1001742C8[0];
  if (!qword_1001742C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B7EC, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_1001742C8);
  }

  return result;
}

unint64_t sub_1000F9624()
{
  unint64_t result = qword_100174350;
  if (!qword_100174350)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B70C, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100174350);
  }

  return result;
}

unint64_t sub_1000F966C()
{
  unint64_t result = qword_100174358[0];
  if (!qword_100174358[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B734, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, qword_100174358);
  }

  return result;
}

uint64_t sub_1000F96B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a3;
  void v14[2] = a4;
  void v14[3] = a5;
  v14[4] = a6;
  void v14[5] = a7;
  v14[6] = a8;
  v14[7] = a1;
  v14[8] = a2;
  uint64_t v10 = type metadata accessor for Dictionary.Keys(0LL, a4, a5, a7);
  swift_bridgeObjectRetain(a3);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v10);
  uint64_t v12 = Sequence.compactMap<A>(_:)(sub_1000FC938, v14, v10, a6, WitnessTable);
  swift_bridgeObjectRelease(v15);
  return v12;
}

uint64_t sub_1000F9758@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  unint64_t v27 = a2;
  char v28 = a5;
  uint64_t v8 = type metadata accessor for Optional(0LL, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a4 - 8);
  __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, a1, a3);
  char v20 = swift_dynamicCast(v12, v15, a3, a4, 6LL);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v20 & 1) != 0)
  {
    v21(v12, 0LL, 1LL, a4);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v22(v18, v12, a4);
    char v23 = v27(v18);
    unint64_t v24 = v28;
    if ((v23 & 1) != 0)
    {
      v22(v28, v18, a4);
      uint64_t v25 = 0LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a4);
      uint64_t v25 = 1LL;
    }
  }

  else
  {
    uint64_t v25 = 1LL;
    v21(v12, 1LL, 1LL, a4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    unint64_t v24 = v28;
  }

  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v24, v25, 1LL, a4);
}

uint64_t sub_1000F991C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = a1;
  uint64_t v36 = a4;
  uint64_t v9 = type metadata accessor for Optional(0LL, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v37 = (uint64_t *)((char *)&v34 - v11);
  uint64_t v12 = type metadata accessor for Optional(0LL, a3);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(a3 - 8);
  __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v19, v39, a5);
  int v24 = swift_dynamicCast(v16, v19, a5, a3, 6LL);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if (v24)
  {
    v25(v16, 0LL, 1LL, a3);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v16, a3);
    uint64_t v27 = v36;
    uint64_t v26 = v37;
    Dictionary.subscript.getter(v37, v22, v34, a3, v36, v35);
    uint64_t v28 = *(void *)(v27 - 8);
    int v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27);
    uint64_t v30 = v38;
    if (v29 == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a3);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v26, v9);
      *(_OWORD *)uint64_t v30 = 0u;
      *(_OWORD *)(v30 + 16) = 0u;
    }

    else
    {
      *(void *)(v38 + 24) = v27;
      uint64_t v33 = sub_100005F0C((void *)v30);
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v33, v26, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, a3);
    }
  }

  else
  {
    v25(v16, 1LL, 1LL, a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v32 = v38;
    *(_OWORD *)uint64_t v38 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000F9B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  return sub_1000F991C(a1, *v4, a3[2], a3[3], a2, a3[4], a4);
}

uint64_t sub_1000F9B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000F96B0(a1, a2, *v5, a5[2], a5[3], a3, a5[4], a4);
}

void *sub_1000F9B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)swift_allocObject(v4, 48LL, 7LL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

uint64_t sub_1000F9BE8()
{
  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t sub_1000F9C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a2;
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v13 = *(void *)(v4 + 80);
  uint64_t v14 = v6;
  uint64_t v15 = a1;
  uint64_t v16 = a3;
  uint64_t v7 = type metadata accessor for PropertyCheck(255LL, v13, v6, a4);
  uint64_t v8 = type metadata accessor for Array(0LL, v7);
  swift_bridgeObjectRetain(a2);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  uint64_t v10 = _ArrayProtocol.filter(_:)(sub_1000FC968, &v12, v8, WitnessTable);
  if (!Array.count.getter(v10))
  {
    swift_bridgeObjectRelease(v10);
    return 0LL;
  }

  return v10;
}

void *sub_1000F9CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v22 = type metadata accessor for PropertyCheck(0LL, v4, v8, v9);
  uint64_t v24 = 0LL;
  unint64_t v25 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease(v25);
  uint64_t v24 = 0x79747265706F7250LL;
  unint64_t v25 = 0xEA00000000002720LL;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v10(v7, a1, v4);
  v11._uint64_t countAndFlagsBits = String.init<A>(describing:)(v7, v4);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0x800000010012CC40LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v13);
  uint64_t v15 = v24;
  unint64_t v14 = v25;
  v10(v7, a1, v4);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100150270, v18 + 8, v16 | 7);
  *(void *)(v19 + 16) = v4;
  *(void *)(v19 + 24) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + v17, v7, v4);
  uint64_t v20 = v22;
  *(void *)(v19 + v18) = v23;
  uint64_t result = (void *)swift_allocObject(v20, 48LL, 7LL);
  result[2] = v15;
  result[3] = v14;
  result[4] = sub_1000FC9B8;
  result[5] = v19;
  return result;
}

void *sub_1000F9E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v6, v7, a4);
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v9 = type metadata accessor for Array(0LL, v6);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, WitnessTable);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._uint64_t countAndFlagsBits = 39LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  unint64_t v14 = (void *)swift_allocObject(&unk_100150298, 40LL, 7LL);
  void v14[2] = v6;
  void v14[3] = v7;
  v14[4] = a1;
  uint64_t v15 = (void *)swift_allocObject(v8, 48LL, 7LL);
  __int128 v15[2] = 0xD000000000000024LL;
  void v15[3] = 0x800000010012CC60LL;
  v15[4] = sub_1000FCAC0;
  v15[5] = v14;
  swift_bridgeObjectRetain(a1);
  return v15;
}

uint64_t sub_1000F9F8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a2;
  uint64_t v23 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(v11);
  if (!Array.endIndex.getter(a3, a4))
  {
LABEL_12:
    swift_bridgeObjectRelease(a3);
    return 1LL;
  }

  uint64_t v21 = v9;
  uint64_t v12 = 0LL;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v12, IsNativeType, a3, a4);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( v10,  a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v12,
        a4);
      uint64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }

    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v12, a3, a4);
    if (v21 != 8) {
      break;
    }
    uint64_t v19 = result;
    v24[0] = result;
    (*(void (**)(char *, void *, uint64_t))(v8 + 16))(v10, v24, a4);
    swift_unknownObjectRelease(v19);
    uint64_t v14 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }

void *sub_1000FA164(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v40 = a1;
  uint64_t v41 = a4;
  char v8 = a3;
  int v38 = a3;
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(a1);
  Swift::String v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = 0LL;
  unint64_t v44 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(v44);
  uint64_t v43 = 0x79747265706F7250LL;
  unint64_t v44 = 0xEA00000000002720LL;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14(v13, a1, v10);
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)(v13, v10);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._object = (void *)0x800000010012CC90LL;
  v17._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v17);
  uint64_t v39 = a5;
  uint64_t v42 = a5;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a5);
  v19._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v42, MetatypeMetadata);
  uint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v22 = v43;
  unint64_t v23 = v44;
  BOOL v24 = (v8 & 1) == 0;
  if ((v8 & 1) != 0) {
    uint64_t v25 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v25 = 0LL;
  }
  if (v24) {
    uint64_t v26 = (void *)0xE000000000000000LL;
  }
  else {
    uint64_t v26 = (void *)0xEE00746E65736261LL;
  }
  uint64_t v27 = *(void *)(v6 + 88);
  uint64_t v37 = type metadata accessor for PropertyCheck(0LL, v10, v27, v21);
  uint64_t v43 = v22;
  unint64_t v44 = v23;
  swift_bridgeObjectRetain(v23);
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v26);
  uint64_t v29 = v43;
  unint64_t v30 = v44;
  v14((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v40, v10);
  uint64_t v31 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v32 = (v31 + 40) & ~v31;
  uint64_t v33 = v32 + v12;
  uint64_t v34 = (char *)swift_allocObject(&unk_1001502C0, (v33 & 0xFFFFFFFFFFFFFFF8LL) + 16, v31 | 7);
  uint64_t v35 = v39;
  *((void *)v34 + sub_100006034(v0 + 2) = v10;
  *((void *)v34 + sub_10003A584(v0 + 3) = v35;
  *((void *)v34 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v34[v32], v13, v10);
  v34[v33] = v38;
  *(void *)&v34[(v33 & 0xFFFFFFFFFFFFFFF8LL) + 8] = v41;
  uint64_t result = (void *)swift_allocObject(v37, 48LL, 7LL);
  result[2] = v29;
  result[3] = v30;
  result[4] = sub_1000FCB90;
  result[5] = v34;
  return result;
}

uint64_t sub_1000FA3A8( void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a5;
  int v34 = a4;
  uint64_t v14 = type metadata accessor for Optional(0LL, a7);
  uint64_t v35 = *(void *)(v14 - 8);
  uint64_t v36 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v31 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v31 - v18;
  uint64_t v20 = *(void *)(a7 - 8);
  __chkstk_darwin(v17);
  uint64_t v32 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  sub_100005110(a1, v22);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))( &v37,  a3,  a2,  a6,  a8,  v22,  v23);
  if (v38)
  {
    sub_100017790(&v37, v39);
    sub_100006054((uint64_t)v39, (uint64_t)&v37);
    char v24 = swift_dynamicCast(v19, &v37, (char *)&type metadata for Any + 8, a7, 6LL);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    if ((v24 & 1) != 0)
    {
      v25(v19, 0LL, 1LL, a7);
      uint64_t v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v32, v19, a7);
      uint64_t v27 = v33;
      if (v33)
      {
        Swift::String v28 = v31;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v31, v26, a7);
        char v29 = 1;
        v25(v28, 0LL, 1LL, a7);
        (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v27, v28, v36);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v26, a7);
        sub_100006034(v39);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v26, a7);
        sub_100006034(v39);
        char v29 = 1;
      }
    }

    else
    {
      v25(v19, 1LL, 1LL, a7);
      sub_100006034(v39);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v36);
      char v29 = 0;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v37, &qword_100157FF8);
    char v29 = v34;
  }

  return v29 & 1;
}

void *sub_1000FA618(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a2;
  uint64_t v50 = a6;
  uint64_t v51 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = a1;
  char v8 = a3;
  int v45 = a3;
  uint64_t v11 = *(void *)(v6 + 80);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = 0LL;
  unint64_t v54 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease(v54);
  uint64_t v53 = 0x79747265706F7250LL;
  unint64_t v54 = 0xEA00000000002720LL;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v15(v14, a1, v11);
  v16._uint64_t countAndFlagsBits = String.init<A>(describing:)(v14, v11);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._object = (void *)0x800000010012CCB0LL;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v18);
  uint64_t v52 = a2;
  uint64_t v19 = type metadata accessor for Array(0LL, a5);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, WitnessTable);
  uint64_t v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  uint64_t v24 = v53;
  unint64_t v25 = v54;
  if ((v8 & 1) != 0) {
    uint64_t v26 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v26 = 0LL;
  }
  if ((v8 & 1) != 0) {
    uint64_t v27 = (void *)0xEE00746E65736261LL;
  }
  else {
    uint64_t v27 = (void *)0xE000000000000000LL;
  }
  uint64_t v28 = *(void *)(v48 + 88);
  uint64_t v48 = type metadata accessor for PropertyCheck(0LL, v11, v28, v23);
  uint64_t v53 = v24;
  unint64_t v54 = v25;
  swift_bridgeObjectRetain(v25);
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v27);
  unint64_t v30 = v54;
  uint64_t v44 = v53;
  v15((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v47, v11);
  uint64_t v31 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v32 = (v31 + 48) & ~v31;
  uint64_t v33 = v32 + v13;
  unint64_t v34 = (v32 + v13) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v36 = (char *)swift_allocObject(&unk_1001502E8, v35 + 8, v31 | 7);
  uint64_t v37 = v46;
  *((void *)v36 + sub_100006034(v0 + 2) = v11;
  *((void *)v36 + sub_10003A584(v0 + 3) = v37;
  uint64_t v38 = v50;
  *((void *)v36 + 4) = v28;
  *((void *)v36 + 5) = v38;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v36[v32], v14, v11);
  v36[v33] = v45;
  *(void *)&v36[v34 + 8] = v51;
  uint64_t v39 = v48;
  uint64_t v40 = v49;
  *(void *)&v36[v35] = v49;
  uint64_t v41 = (void *)swift_allocObject(v39, 48LL, 7LL);
  v41[2] = v44;
  void v41[3] = v30;
  v41[4] = sub_1000FCC38;
  v41[5] = v36;
  swift_bridgeObjectRetain(v40);
  return v41;
}

uint64_t sub_1000FA8AC( void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v16 = type metadata accessor for Optional(0LL, a8);
  uint64_t v39 = *(void *)(v16 - 8);
  uint64_t v40 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v35 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v21 = (char *)&v34 - v20;
  uint64_t v41 = *(void *)(a8 - 8);
  __chkstk_darwin(v19);
  uint64_t v36 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a1[3];
  uint64_t v23 = a1[4];
  sub_100005110(a1, v24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))( &v42,  a3,  a2,  a7,  a9,  v24,  v23);
  if (v43)
  {
    sub_100017790(&v42, v44);
    sub_100006054((uint64_t)v44, (uint64_t)&v42);
    char v25 = swift_dynamicCast(v21, &v42, (char *)&type metadata for Any + 8, a8, 6LL);
    uint64_t v26 = v41;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    if ((v25 & 1) != 0)
    {
      v27(v21, 0LL, 1LL, a8);
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v21, a8);
      uint64_t v29 = v37;
      if (v37)
      {
        unint64_t v30 = v35;
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v35, v28, a8);
        v27(v30, 0LL, 1LL, a8);
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v29, v30, v40);
      }

      *(void *)&__int128 v42 = v38;
      uint64_t v31 = type metadata accessor for Array(0LL, a8);
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v31);
      a4 = Sequence<>.contains(_:)(v28, v31, WitnessTable, a10);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, a8);
      sub_100006034(v44);
    }

    else
    {
      v27(v21, 1LL, 1LL, a8);
      sub_100006034(v44);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v40);
      a4 = 0;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v42, &qword_100157FF8);
  }

  return a4 & 1;
}

void *sub_1000FAB44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  char v6 = a3;
  int v37 = a3;
  uint64_t v38 = a1;
  uint64_t v9 = *(void *)(v4 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(65LL);
  v13._uint64_t countAndFlagsBits = 0x79747265706F7250LL;
  v13._object = (void *)0xEA00000000002720LL;
  String.append(_:)(v13);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v14(v12, a1, v9);
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._object = (void *)0x800000010012CCD0LL;
  v17._uint64_t countAndFlagsBits = 0xD000000000000033LL;
  String.append(_:)(v17);
  uint64_t v41 = a2;
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = v42;
  unint64_t v22 = v43;
  if ((v6 & 1) != 0) {
    uint64_t v23 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v23 = 0LL;
  }
  if ((v6 & 1) != 0) {
    uint64_t v24 = (void *)0xEE00746E65736261LL;
  }
  else {
    uint64_t v24 = (void *)0xE000000000000000LL;
  }
  uint64_t v25 = *(void *)(v5 + 88);
  uint64_t v36 = type metadata accessor for PropertyCheck(0LL, v9, v25, v20);
  uint64_t v42 = v21;
  unint64_t v43 = v22;
  swift_bridgeObjectRetain(v22);
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  unint64_t v27 = v43;
  uint64_t v35 = v42;
  v14((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v38, v9);
  uint64_t v28 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v29 = (v28 + 32) & ~v28;
  uint64_t v30 = v29 + v11;
  unint64_t v31 = ((v30 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v32 = swift_allocObject(&unk_100150310, v31 + 8, v28 | 7);
  *(void *)(v32 + 16) = v9;
  *(void *)(v32 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v32 + v29, v12, v9);
  *(_BYTE *)(v32 + v30) = v37;
  *(void *)((v30 & 0xFFFFFFFFFFFFFFF8LL) + v32 + 8) = v40;
  *(void *)(v32 + v31) = v39;
  uint64_t result = (void *)swift_allocObject(v36, 48LL, 7LL);
  result[2] = v35;
  result[3] = v27;
  result[4] = sub_1000FCD04;
  result[5] = v32;
  return result;
}

void *sub_1000FADA0(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v45 = a5;
  char v6 = a4;
  int v40 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = (uint64_t)a3;
  uint64_t v41 = a1;
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(a1);
  Swift::String v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = 0LL;
  unint64_t v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(53LL);
  v14._uint64_t countAndFlagsBits = 0x79747265706F7250LL;
  v14._object = (void *)0xEA00000000002720LL;
  String.append(_:)(v14);
  Swift::String v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v15(v13, a1, v10);
  v16._uint64_t countAndFlagsBits = String.init<A>(describing:)(v13, v10);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._object = (void *)0x800000010012CD10LL;
  v18._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  uint64_t v21 = v46;
  unint64_t v22 = v47;
  if ((v6 & 1) != 0) {
    uint64_t v23 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v23 = 0LL;
  }
  if ((v6 & 1) != 0) {
    uint64_t v24 = (void *)0xEE00746E65736261LL;
  }
  else {
    uint64_t v24 = (void *)0xE000000000000000LL;
  }
  uint64_t v25 = *(void *)(v44 + 88);
  uint64_t v44 = type metadata accessor for PropertyCheck(0LL, v10, v25, v20);
  uint64_t v46 = v21;
  unint64_t v47 = v22;
  swift_bridgeObjectRetain(v22);
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  unint64_t v27 = v47;
  uint64_t v39 = v46;
  v15((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v41, v10);
  uint64_t v28 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v29 = (v28 + 32) & ~v28;
  uint64_t v30 = v29 + v12;
  unint64_t v31 = ((v30 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v32 = swift_allocObject(&unk_100150338, v31 + 16, v28 | 7);
  *(void *)(v32 + 16) = v10;
  *(void *)(v32 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v32 + v29, v13, v10);
  *(_BYTE *)(v32 + v30) = v40;
  uint64_t v33 = v44;
  *(void *)((v30 & 0xFFFFFFFFFFFFFFF8LL) + v32 + 8) = v45;
  uint64_t v34 = (uint64_t *)(v32 + v31);
  uint64_t v35 = v43;
  *uint64_t v34 = v42;
  v34[1] = v35;
  uint64_t v36 = (void *)swift_allocObject(v33, 48LL, 7LL);
  void v36[2] = v39;
  void v36[3] = v27;
  v36[4] = sub_1000FCED8;
  v36[5] = v32;
  swift_bridgeObjectRetain(v35);
  return v36;
}

void *sub_1000FAFF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v61 = a7;
  uint64_t v62 = a8;
  uint64_t v63 = a6;
  char v9 = a5;
  int v55 = a5;
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  uint64_t v14 = *(void *)(v8 + 80);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = v15;
  uint64_t v58 = a1;
  uint64_t v59 = v15;
  __chkstk_darwin(a1);
  uint64_t v65 = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(81LL);
  v18._uint64_t countAndFlagsBits = 0x79747265706F7250LL;
  v18._object = (void *)0xEA00000000002720LL;
  String.append(_:)(v18);
  Swift::String v19 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v19((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v14);
  uint64_t v20 = v19;
  v21._uint64_t countAndFlagsBits = String.init<A>(describing:)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v23._object = (void *)0x800000010012CD40LL;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a4, 0LL);
  uint64_t v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._object = (void *)0x800000010012CD70LL;
  v26._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  uint64_t v64 = a2;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._uint64_t countAndFlagsBits = 8236LL;
  v29._object = (void *)0xE200000000000000LL;
  String.append(_:)(v29);
  uint64_t v64 = a3;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._uint64_t countAndFlagsBits = 41LL;
  v32._object = (void *)0xE100000000000000LL;
  String.append(_:)(v32);
  uint64_t v35 = v65;
  unint64_t v34 = v66;
  if ((v9 & 1) != 0) {
    uint64_t v36 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v36 = 0LL;
  }
  if ((v9 & 1) != 0) {
    int v37 = (void *)0xEE00746E65736261LL;
  }
  else {
    int v37 = (void *)0xE000000000000000LL;
  }
  uint64_t v38 = *(void *)(v60 + 88);
  uint64_t v60 = type metadata accessor for PropertyCheck(0LL, v14, v38, v33);
  uint64_t v65 = v35;
  unint64_t v66 = v34;
  swift_bridgeObjectRetain(v34);
  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v37;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  unint64_t v40 = v66;
  uint64_t v54 = v65;
  uint64_t v41 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20(v41, v58, v14);
  uint64_t v42 = v59;
  uint64_t v43 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v44 = (v43 + 48) & ~v43;
  uint64_t v45 = v44 + v16;
  unint64_t v46 = ((v45 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v47 = (char *)swift_allocObject(&unk_100150360, v46 + 16, v43 | 7);
  uint64_t v48 = v61;
  *((void *)v47 + sub_100006034(v0 + 2) = v14;
  *((void *)v47 + sub_10003A584(v0 + 3) = v48;
  uint64_t v49 = v62;
  *((void *)v47 + 4) = v38;
  *((void *)v47 + 5) = v49;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v47[v44], v41, v14);
  v47[v45] = v55;
  *(void *)&v47[(v45 & 0xFFFFFFFFFFFFFFF8LL) + 8] = v63;
  uint64_t v50 = &v47[v46];
  uint64_t v51 = v56;
  *(void *)uint64_t v50 = v57;
  *((void *)v50 + 1) = v51;
  uint64_t result = (void *)swift_allocObject(v60, 48LL, 7LL);
  result[2] = v54;
  result[3] = v40;
  result[4] = sub_1000FD0A8;
  result[5] = v47;
  return result;
}

BOOL sub_1000FB310( void *a1, uint64_t a2, uint64_t a3, BOOL a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v36 = a5;
  BOOL v39 = a4;
  uint64_t v15 = type metadata accessor for Optional(0LL, a9);
  uint64_t v40 = *(void *)(v15 - 8);
  uint64_t v41 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v34 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(a9 - 8);
  __chkstk_darwin(v18);
  uint64_t v35 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a1[3];
  uint64_t v23 = a1[4];
  sub_100005110(a1, v24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))( &v42,  a3,  a2,  a8,  a10,  v24,  v23);
  if (v43)
  {
    sub_100017790(&v42, v44);
    sub_100006054((uint64_t)v44, (uint64_t)&v42);
    char v25 = swift_dynamicCast(v20, &v42, (char *)&type metadata for Any + 8, a9, 6LL);
    Swift::String v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if ((v25 & 1) != 0)
    {
      v26(v20, 0LL, 1LL, a9);
      Swift::String v27 = v35;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v35, v20, a9);
      uint64_t v28 = v36;
      if (v36)
      {
        Swift::String v29 = v34;
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v34, v27, a9);
        v26(v29, 0LL, 1LL, a9);
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v28, v29, v41);
      }

      uint64_t v30 = dispatch thunk of Sequence.underestimatedCount.getter(a9, *(void *)(a11 + 8));
      BOOL v32 = v30 >= v37 && v30 < v38;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v27, a9);
      sub_100006034(v44);
    }

    else
    {
      v26(v20, 1LL, 1LL, a9);
      sub_100006034(v44);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v41);
      return 0;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v42, &qword_100157FF8);
    return v39;
  }

  return v32;
}

void *sub_1000FB584(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v5 = a2;
  int v32 = a2;
  uint64_t v33 = a1;
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v34 = *(void *)(v8 + 64);
  uint64_t v35 = a3;
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)0xE000000000000000LL;
  uint64_t v36 = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  swift_bridgeObjectRelease(v37);
  uint64_t v36 = 0x79747265706F7250LL;
  unint64_t v37 = 0xEA00000000002720LL;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12(v10, a1, v7);
  v13._uint64_t countAndFlagsBits = String.init<A>(describing:)(v10, v7);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._object = (void *)0x800000010012CD90LL;
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v15);
  uint64_t v17 = v36;
  unint64_t v18 = v37;
  if ((v5 & 1) != 0) {
    uint64_t v19 = 0x20656220726F202CLL;
  }
  else {
    uint64_t v19 = 0LL;
  }
  if ((v5 & 1) != 0) {
    uint64_t v11 = (void *)0xEE00746E65736261LL;
  }
  uint64_t v20 = *(void *)(v4 + 88);
  uint64_t v31 = type metadata accessor for PropertyCheck(0LL, v7, v20, v16);
  uint64_t v36 = v17;
  unint64_t v37 = v18;
  swift_bridgeObjectRetain(v18);
  v21._uint64_t countAndFlagsBits = v19;
  v21._object = v11;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v11);
  uint64_t v22 = v36;
  unint64_t v23 = v37;
  v12(v10, v33, v7);
  uint64_t v24 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = v25 + v34;
  unint64_t v27 = (v25 + v34) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_100150388, v27 + 16, v24 | 7);
  *(void *)(v28 + 16) = v7;
  *(void *)(v28 + 24) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v28 + v25, v10, v7);
  *(_BYTE *)(v28 + v26) = v32;
  *(void *)(v27 + v28 + 8) = v35;
  uint64_t result = (void *)swift_allocObject(v31, 48LL, 7LL);
  result[2] = v22;
  result[3] = v23;
  result[4] = sub_1000FD178;
  result[5] = v28;
  return result;
}

void *sub_1000FB794(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a6;
  uint64_t v42 = a5;
  int v41 = a4;
  uint64_t v37 = a3;
  uint64_t v9 = *(void *)(v6 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = *(void *)(v6 + 88);
  uint64_t v14 = type metadata accessor for PropertyCheck(0LL, v9, v39, v13);
  uint64_t v38 = v14;
  unint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(v45);
  unint64_t v44 = 0xD000000000000011LL;
  unint64_t v45 = 0x800000010012CDB0LL;
  Swift::String v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15(v12, a1, v9);
  v16._uint64_t countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._uint64_t countAndFlagsBits = 0x6173207473756D20LL;
  v18._object = (void *)0xEF203A7966736974LL;
  String.append(_:)(v18);
  uint64_t v43 = a3;
  uint64_t v19 = type metadata accessor for Array(0LL, v14);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, WitnessTable);
  uint64_t v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  unint64_t v23 = v44;
  unint64_t v24 = v45;
  v15(v12, a1, v9);
  uint64_t v25 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v26 = (v25 + 40) & ~v25;
  uint64_t v27 = v26 + v11;
  unint64_t v28 = (v26 + v11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v30 = (char *)swift_allocObject(&unk_1001503B0, v29 + 8, v25 | 7);
  uint64_t v31 = v40;
  *((void *)v30 + sub_100006034(v0 + 2) = v9;
  *((void *)v30 + sub_10003A584(v0 + 3) = v31;
  *((void *)v30 + 4) = v39;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v30[v26], v12, v9);
  v30[v27] = v41;
  *(void *)&v30[v28 + 8] = v42;
  uint64_t v33 = v37;
  uint64_t v32 = v38;
  *(void *)&v30[v29] = v37;
  uint64_t v34 = (void *)swift_allocObject(v32, 48LL, 7LL);
  __int128 v34[2] = v23;
  v34[3] = v24;
  v34[4] = sub_1000FD348;
  v34[5] = v30;
  swift_bridgeObjectRetain(v33);
  return v34;
}

uint64_t sub_1000FB9C0( void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v36 = a6;
  uint64_t v35 = a5;
  int v41 = a4;
  uint64_t v39 = type metadata accessor for Optional(0LL, a8);
  uint64_t v37 = *(void *)(v39 - 8);
  uint64_t v14 = __chkstk_darwin(v39);
  Swift::String v16 = (char *)&v34 - v15;
  uint64_t v17 = *(void *)(a8 - 8);
  uint64_t v18 = __chkstk_darwin(v14);
  uint64_t v38 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v40 = (char *)&v34 - v20;
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  sub_100005110(a1, v21);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))( &v44,  a3,  a2,  a7,  a9,  v21,  v22);
  if (v45)
  {
    sub_100017790(&v44, v46);
    sub_100006054((uint64_t)v46, (uint64_t)&v44);
    char v23 = swift_dynamicCast(v16, &v44, (char *)&type metadata for Any + 8, a8, 6LL);
    unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if ((v23 & 1) != 0)
    {
      v24(v16, 0LL, 1LL, a8);
      uint64_t v25 = v40;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v40, v16, a8);
      uint64_t v26 = v38;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v25, a8);
      uint64_t v27 = sub_100005FB4(&qword_10015C320);
      if ((swift_dynamicCast(v42, v26, a8, v27, 6LL) & 1) != 0)
      {
        sub_100005158(v42, (uint64_t)&v44);
        uint64_t v29 = v35;
        if (v35)
        {
          sub_100005F70((uint64_t)&v44, (uint64_t)v42);
          sub_1000263D8((uint64_t)v42, v29, &qword_10015C328);
        }

        type metadata accessor for PropertyCheck(0LL, a7, a9, v28);
        uint64_t v31 = sub_1000F9C0C((uint64_t)&v44, v36, 0LL, v30);
        sub_100006034(&v44);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v25, a8);
        sub_100006034(v46);
        if (v31)
        {
          swift_bridgeObjectRelease(v31);
          char v32 = 0;
        }

        else
        {
          char v32 = 1;
        }
      }

      else
      {
        uint64_t v43 = 0LL;
        memset(v42, 0, sizeof(v42));
        (*(void (**)(char *, uint64_t))(v17 + 8))(v25, a8);
        sub_100006034(v46);
        sub_100012824((uint64_t)v42, &qword_10015C328);
        char v32 = 0;
      }
    }

    else
    {
      v24(v16, 1LL, 1LL, a8);
      sub_100006034(v46);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v39);
      char v32 = 0;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v44, &qword_100157FF8);
    char v32 = v41;
  }

  return v32 & 1;
}

void *sub_1000FBCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 88);
  uint64_t v11 = type metadata accessor for PropertyCheck(0LL, v10, v9, a4);
  uint64_t v12 = (void *)swift_allocObject(&unk_1001503D8, 48LL, 7LL);
  _OWORD v12[2] = v10;
  void v12[3] = v9;
  v12[4] = a1;
  void v12[5] = a2;
  uint64_t v13 = (void *)swift_allocObject(v11, 48LL, 7LL);
  __int128 v13[2] = a3;
  void v13[3] = a4;
  v13[4] = sub_1000FD3D0;
  void v13[5] = v12;
  swift_bridgeObjectRetain(a4);
  swift_retain(a2);
  return v13;
}

void *sub_1000FBD7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v20 = a3;
    swift_bridgeObjectRetain(a3);
    v6._uint64_t countAndFlagsBits = 0x464F20594E412820LL;
    v6._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v6);
    uint64_t v7 = *(void *)(v4 + 80);
    uint64_t v8 = *(void *)(v4 + 88);
    uint64_t v10 = type metadata accessor for PropertyCheck(0LL, v7, v8, v9);
    v11._uint64_t countAndFlagsBits = Array.description.getter(a1, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._uint64_t countAndFlagsBits = 41LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
  }

  else
  {
    a2 = 0x203A464F20594E41LL;
    unint64_t v20 = 0xE800000000000000LL;
    uint64_t v7 = *(void *)(v4 + 80);
    uint64_t v8 = *(void *)(v4 + 88);
    uint64_t v10 = type metadata accessor for PropertyCheck(0LL, v7, v8, a4);
    v14._uint64_t countAndFlagsBits = Array.description.getter(a1, v10);
    uint64_t v15 = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v15);
  }

  Swift::String v16 = (void *)swift_allocObject(&unk_100150400, 40LL, 7LL);
  _OWORD v16[2] = v7;
  v16[3] = v8;
  v16[4] = a1;
  uint64_t v17 = (void *)swift_allocObject(v10, 48LL, 7LL);
  void v17[2] = a2;
  v17[3] = v20;
  v17[4] = sub_1000FD4AC;
  v17[5] = v16;
  swift_bridgeObjectRetain(a1);
  return v17;
}

void *sub_1000FBEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v6, v7, a4);
  v9._uint64_t countAndFlagsBits = Array.description.getter(a1, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  Swift::String v11 = (void *)swift_allocObject(&unk_100150428, 40LL, 7LL);
  void v11[2] = v6;
  v11[3] = v7;
  v11[4] = a1;
  uint64_t v12 = (void *)swift_allocObject(v8, 48LL, 7LL);
  _OWORD v12[2] = 0x203A464F204C4C41LL;
  void v12[3] = 0xE800000000000000LL;
  v12[4] = sub_1000FD5C4;
  void v12[5] = v11;
  swift_bridgeObjectRetain(a1);
  return v12;
}

void *sub_1000FBFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v6, v7, a4);
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v9._uint64_t countAndFlagsBits = Array.description.getter(a1, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  Swift::String v11 = (void *)swift_allocObject(&unk_100150450, 40LL, 7LL);
  void v11[2] = v6;
  v11[3] = v7;
  v11[4] = a1;
  uint64_t v12 = (void *)swift_allocObject(v8, 48LL, 7LL);
  _OWORD v12[2] = 0xD000000000000010LL;
  void v12[3] = 0x800000010012CDD0LL;
  v12[4] = sub_1000FD6DC;
  void v12[5] = v11;
  swift_bridgeObjectRetain(a1);
  return v12;
}

void *sub_1000FC0BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1);
  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v3, v6, v7);
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(50LL);
  v9._uint64_t countAndFlagsBits = 0x79747265706F7250LL;
  v9._object = (void *)0xE900000000000020LL;
  String.append(_:)(v9);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(a1, v3);
  v10._object = (void *)0x800000010012CDF0LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  String.append(_:)(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100150478, v12 + v5, v11 | 7);
  *(void *)(v13 + 16) = v3;
  *(void *)(v13 + 24) = v6;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v13 + v12,  (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t result = (void *)swift_allocObject(v8, 48LL, 7LL);
  result[2] = 0LL;
  result[3] = 0xE000000000000000LL;
  result[4] = sub_1000FD860;
  result[5] = v13;
  return result;
}

uint64_t sub_1000FC21C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100005FB4(&qword_1001587C0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100005110(a1, v14);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))( &v95,  a3,  a2,  a4,  a5,  v14,  v15);
  if (!v98)
  {
    sub_100012824((uint64_t)&v95, &qword_100157FF8);
    return 0LL;
  }

  unint64_t v17 = v93;
  Swift::String v16 = v94;
  unint64_t v95 = v93;
  uint64_t v96 = v94;
  uint64_t v18 = sub_100091884();
  uint64_t v19 = (char *)*((void *)v18 + 1);
  unint64_t v93 = *(void *)v18;
  unint64_t v94 = v19;
  uint64_t v20 = type metadata accessor for Locale(0LL);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
  v21(v13, 1LL, 1LL, v20);
  unint64_t v22 = sub_10002657C();
  swift_bridgeObjectRetain(v19);
  StringProtocol.range<A>(of:options:range:locale:)( &v93,  0LL,  0LL,  0LL,  1LL,  v13,  &type metadata for String,  &type metadata for String,  v22,  v22);
  unint64_t v24 = v23;
  LOBYTE(v19) = v25;
  sub_100012824((uint64_t)v13, &qword_1001587C0);
  swift_bridgeObjectRelease(v94);
  unint64_t v95 = v17;
  uint64_t v96 = v16;
  uint64_t v26 = (unint64_t *)sub_100091890();
  unint64_t v27 = v26[1];
  unint64_t v93 = *v26;
  unint64_t v94 = (char *)v27;
  v21(v13, 1LL, 1LL, v20);
  swift_bridgeObjectRetain(v27);
  unint64_t v28 = StringProtocol.range<A>(of:options:range:locale:)( &v93,  0LL,  0LL,  0LL,  1LL,  v13,  &type metadata for String,  &type metadata for String,  v22,  v22);
  uint64_t v30 = v29;
  sub_100012824((uint64_t)v13, &qword_1001587C0);
  swift_bridgeObjectRelease(v94);
  if ((v30 & 1) != 0)
  {
LABEL_9:
    uint64_t v35 = v16;
LABEL_10:
    swift_bridgeObjectRelease(v35);
    return 0LL;
  }

  unint64_t v89 = v22;
  if (v28 >> 14 < v24 >> 14)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  unint64_t v17 = String.subscript.getter(v24, v28, v17, v16);
  unint64_t v22 = v31;
  uint64_t v5 = v32;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(v16);
  uint64_t v87 = v20;
  uint64_t v88 = v13;
  uint64_t v86 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21;
  if (v22 >> 14 == v17 >> 14)
  {
    swift_bridgeObjectRelease(v34);
    uint64_t v30 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_36;
  }

  uint64_t v30 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = v17;
  unint64_t v38 = v17;
  unint64_t v24 = v17;
  uint64_t v39 = v34;
  uint64_t v91 = v34;
  unint64_t v92 = v22 >> 14;
  do
  {
    uint64_t v41 = Substring.subscript.getter(v37, v17, v22, v5, v39);
    uint64_t v43 = v41;
    uint64_t v44 = v42;
    if (v41 == 44 && v42 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease(0xE100000000000000LL);
    }

    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 44LL, 0xE100000000000000LL, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(v44);
    }

    else
    {
      char v45 = Character.isWhitespace.getter(v43, v44);
      swift_bridgeObjectRelease(v44);
      if ((v45 & 1) == 0)
      {
        unint64_t v37 = Substring.index(after:)(v37, v17, v22, v5, v39);
        continue;
      }
    }

    if (v38 >> 14 != v37 >> 14)
    {
      if (v37 >> 14 < v38 >> 14)
      {
        __break(1u);
        goto LABEL_46;
      }

      uint64_t v46 = Substring.subscript.getter(v38, v37, v17, v22, v5, v39);
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
        uint64_t v30 = sub_1000298C8(0LL, *((void *)v30 + 2) + 1LL, 1, v30);
      }
      uint64_t v53 = v30;
      unint64_t v54 = *((void *)v30 + 2);
      int v55 = v53;
      unint64_t v56 = *((void *)v53 + 3);
      if (v54 >= v56 >> 1) {
        int v55 = sub_1000298C8((char *)(v56 > 1), v54 + 1, 1, v55);
      }
      *((void *)v55 + sub_100006034(v0 + 2) = v54 + 1;
      uint64_t v40 = &v55[32 * v54];
      uint64_t v30 = v55;
      *((void *)v40 + 4) = v46;
      *((void *)v40 + 5) = v48;
      *((void *)v40 + 6) = v50;
      *((void *)v40 + 7) = v52;
      uint64_t v39 = v91;
    }

    unint64_t v37 = Substring.index(after:)(v37, v17, v22, v5, v39);
    unint64_t v38 = v37;
    unint64_t v24 = v37;
  }

  while (v92 != v37 >> 14);
  if (v92 == v38 >> 14)
  {
    swift_bridgeObjectRelease(v39);
    goto LABEL_36;
  }

  if (v92 >= v24 >> 14)
  {
    unint64_t v24 = Substring.subscript.getter(v24, v22, v17, v22, v5, v39);
    unint64_t v17 = v57;
    unint64_t v22 = v58;
    uint64_t v5 = v59;
    swift_bridgeObjectRelease(v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
      goto LABEL_48;
    }
    goto LABEL_33;
  }

uint64_t sub_1000FC8DC()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_1000FC908()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_1000FC938@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1000F9758(a1, *(uint64_t (**)(char *))(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 32), a2);
}

BOOL sub_1000FC968(uint64_t a1)
{
  return ((*(uint64_t (**)(void, void))(**(void **)a1 + 120LL))( *(void *)(v1 + 32),  *(void *)(v1 + 40)) & 1) == 0;
}

uint64_t type metadata accessor for PropertyCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyCheck);
}

BOOL sub_1000FC9B8(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v2 + v7;
  uint64_t v9 = *(void *)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100005110(a1, v10);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))( &v14,  v8,  a2,  v4,  v5,  v10,  v11);
  uint64_t v12 = v15;
  if (v15)
  {
    sub_100017790(&v14, v16);
    if (v9) {
      sub_100006054((uint64_t)v16, v9);
    }
    sub_100006034(v16);
  }

  else
  {
    sub_100012824((uint64_t)&v14, &qword_100157FF8);
  }

  return v12 == 0;
}

uint64_t sub_1000FCA9C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000FCAC0(void *a1, uint64_t a2)
{
  return sub_1000F9F8C(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_1000FCACC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000FCB30()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000FCB90(void *a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FA3A8( a1,  a2,  (uint64_t)v2 + v5,  *((unsigned __int8 *)v2 + v5 + *(void *)(v4 + 64)),  *(void *)((char *)v2 + ((v5 + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFF8LL) + 8),  v3,  v2[3],  v2[4]);
}

uint64_t sub_1000FCBC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1000FCC38(void *a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FA8AC( a1,  a2,  (uint64_t)v2 + v5,  *((_BYTE *)v2 + v5 + *(void *)(v4 + 64)),  *(void *)((char *)v2 + ((v5 + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)((char *)v2 + ((((v5 + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)),  v3,  v2[3],  v2[4],  v2[5]) & 1;
}

uint64_t sub_1000FCC9C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FCD04(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v2 + v8);
  uint64_t v10 = v2 + v7;
  uint64_t v11 = *(void **)((v8 & 0xFFFFFFFFFFFFFFF8LL) + v2 + 8);
  uint64_t v12 = *(void *)(v2 + (((v8 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100005110(a1, v13);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))( &v20,  v10,  a2,  v4,  v5,  v13,  v14);
  if (v21)
  {
    sub_100017790(&v20, v22);
    sub_100006054((uint64_t)v22, (uint64_t)&v20);
    if ((swift_dynamicCast(v19, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v16 = v19[0];
      uint64_t v15 = v19[1];
      if (v11)
      {
        *uint64_t v11 = v19[0];
        v11[1] = v15;
        swift_bridgeObjectRetain(v15);
      }

      uint64_t v17 = String.count.getter(v16, v15);
      swift_bridgeObjectRelease(v15);
      sub_100006034(v22);
      return v17 <= v12;
    }

    else
    {
      sub_100006034(v22);
      return 0LL;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v20, &qword_100157FF8);
  }

  return v9;
}

uint64_t sub_1000FCE64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(void *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_1000FCED8(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = v2 + v7;
  char v10 = *(_BYTE *)(v2 + v8);
  uint64_t v11 = *(void ***)((v8 & 0xFFFFFFFFFFFFFFF8LL) + v2 + 8);
  uint64_t v12 = (uint64_t *)(v2 + (((v8 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v13 = (void *)v12[1];
  v19._uint64_t countAndFlagsBits = *v12;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100005110(a1, v14);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))( &v21,  v9,  a2,  v4,  v5,  v14,  v15);
  if (v22)
  {
    sub_100017790(&v21, v23);
    sub_100006054((uint64_t)v23, (uint64_t)&v21);
    if ((swift_dynamicCast(&v19._object, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v16 = v20;
      if (v11)
      {
        *uint64_t v11 = v19._object;
        v11[1] = v16;
        swift_bridgeObjectRetain(v16);
      }

      v17._uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      v17._object = v13;
      char v10 = String.hasPrefix(_:)(v17);
      swift_bridgeObjectRelease(v16);
      sub_100006034(v23);
    }

    else
    {
      sub_100006034(v23);
      char v10 = 0;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v21, &qword_100157FF8);
  }

  return v10 & 1;
}

uint64_t sub_1000FD040()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FD0A8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  return sub_1000FB310( a1,  a2,  (uint64_t)v2 + v5,  *((unsigned __int8 *)v2 + v6),  *(void *)((char *)v2 + (v6 & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)((char *)v2 + (((v6 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)((char *)v2 + (((v6 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  v3,  v2[3],  v2[4],  v2[5]);
}

uint64_t sub_1000FD118()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FD178(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = v2 + v7;
  uint64_t v10 = *(unsigned __int8 *)(v2 + v8);
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + v2 + 8);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100005110(a1, v12);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))( &v19,  v9,  a2,  v4,  v5,  v12,  v13);
  if (v20)
  {
    sub_100017790(&v19, v21);
    sub_100006054((uint64_t)v21, (uint64_t)&v19);
    if ((swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v14 = v18[1];
      uint64_t v15 = String.utf8CString.getter(v18[0]);
      swift_bridgeObjectRelease(v14);
      uint64_t v16 = OSKextParseVersionString(v15 + 32);
      swift_release(v15);
      if (v11)
      {
        *(void *)uint64_t v11 = v16;
        *(_BYTE *)(v11 + 8) = 0;
      }

      sub_100006034(v21);
      return v16 > 0;
    }

    else
    {
      sub_100006034(v21);
      return 0LL;
    }
  }

  else
  {
    sub_100012824((uint64_t)&v19, &qword_100157FF8);
  }

  return v10;
}

uint64_t sub_1000FD2D8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1000FD348(void *a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FB9C0( a1,  a2,  (uint64_t)v2 + v5,  *((unsigned __int8 *)v2 + v5 + *(void *)(v4 + 64)),  *(void *)((char *)v2 + ((v5 + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)((char *)v2 + ((((v5 + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)),  v3,  v2[3],  v2[4]) & 1;
}

uint64_t sub_1000FD3AC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

BOOL sub_1000FD3D0(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __int128 v11 = *(_OWORD *)(v1 + 24);
  sub_100005110(a1, v4);
  uint64_t v6 = swift_allocObject(&unk_100150570, 48LL, 7LL);
  *(void *)(v6 + 16) = v2;
  *(_OWORD *)(v6 + 24) = v11;
  *(void *)(v6 + sub_10007CFB4(v0 + 40) = v3;
  unint64_t v7 = *(uint64_t (**)(BOOL (*)(), uint64_t, uint64_t, void, uint64_t, uint64_t))(v5 + 16);
  swift_retain(v3);
  uint64_t v8 = v7(sub_1000FD8C8, v6, v2, v11, v4, v5);
  swift_release(v6);
  uint64_t v9 = Array.count.getter(v8);
  swift_bridgeObjectRelease(v8);
  return v9 == 0;
}

uint64_t sub_1000FD4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4[4];
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v4[2], v4[3], a4);
  uint64_t v9 = swift_bridgeObjectRetain(v7);
  if (!Array.endIndex.getter(v9, v8)) {
    goto LABEL_11;
  }
  uint64_t v10 = 4LL;
  while (1)
  {
    uint64_t v11 = v10 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v10 - 4, IsNativeType, v7, v8);
    if (!IsNativeType) {
      break;
    }
    uint64_t v13 = *(void *)(v7 + 8 * v10);
    swift_retain(v13);
    uint64_t v14 = v10 - 3;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_10;
    }
LABEL_5:
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 120LL))(a1, a2);
    swift_release(v13);
    if ((v15 & 1) == 0)
    {
      ++v10;
      if (v14 != Array.endIndex.getter(v7, v8)) {
        continue;
      }
    }

    goto LABEL_12;
  }

  uint64_t v13 = _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7, v8);
  uint64_t v14 = v10 - 3;
  if (!__OFADD__(v11, 1LL)) {
    goto LABEL_5;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  char v15 = 0;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v15 & 1;
}

uint64_t sub_1000FD5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4[4];
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v4[2], v4[3], a4);
  uint64_t v9 = swift_bridgeObjectRetain(v7);
  if (!Array.endIndex.getter(v9, v8)) {
    goto LABEL_11;
  }
  uint64_t v10 = 4LL;
  while (1)
  {
    uint64_t v11 = v10 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v10 - 4, IsNativeType, v7, v8);
    if (!IsNativeType) {
      break;
    }
    uint64_t v13 = *(void *)(v7 + 8 * v10);
    swift_retain(v13);
    uint64_t v14 = v10 - 3;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_10;
    }
LABEL_5:
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 120LL))(a1, a2);
    swift_release(v13);
    if ((v15 & 1) != 0)
    {
      ++v10;
      if (v14 != Array.endIndex.getter(v7, v8)) {
        continue;
      }
    }

    goto LABEL_12;
  }

  uint64_t v13 = _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7, v8);
  uint64_t v14 = v10 - 3;
  if (!__OFADD__(v11, 1LL)) {
    goto LABEL_5;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  char v15 = 1;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v15 & 1;
}

uint64_t sub_1000FD6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4[4];
  uint64_t v8 = type metadata accessor for PropertyCheck(0LL, v4[2], v4[3], a4);
  uint64_t v9 = swift_bridgeObjectRetain(v7);
  int v10 = 0;
  if (!Array.endIndex.getter(v9, v8)) {
    goto LABEL_12;
  }
  uint64_t v11 = 4LL;
  while (1)
  {
    uint64_t v12 = v11 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v11 - 4, IsNativeType, v7, v8);
    if (!IsNativeType) {
      break;
    }
    uint64_t v14 = *(void *)(v7 + 8 * v11);
    swift_retain(v14);
    uint64_t v15 = v11 - 3;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_10;
    }
LABEL_5:
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 120LL))(a1, a2);
    swift_release(v14);
    if ((v16 & v10 & 1) != 0) {
      goto LABEL_11;
    }
    v10 |= v16;
    ++v11;
    if (v15 == Array.endIndex.getter(v7, v8)) {
      goto LABEL_12;
    }
  }

  uint64_t v14 = _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v7, v8);
  uint64_t v15 = v11 - 3;
  if (!__OFADD__(v12, 1LL)) {
    goto LABEL_5;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  LOBYTE(v10) = 0;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v10 & 1;
}

uint64_t sub_1000FD808()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000FD860(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  return sub_1000FC21C(a1, a2, v2 + ((v4 + 32) & ~v4), v3, *(void *)(v2 + 24));
}

uint64_t sub_1000FD87C(uint64_t a1)
{
  v2[0] = &unk_10011B9F8;
  v2[1] = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

BOOL sub_1000FD8C8()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_1000FD904()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

uint64_t sub_1000FD938(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000FD97C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000FD9B8()
{
  return swift_retain(*(void *)(v0 + 80));
}

uint64_t sub_1000FD9EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = a1;
  return swift_release(v3);
}

uint64_t sub_1000FDA30()
{
  return swift_retain(*(void *)(v0 + 88));
}

uint64_t sub_1000FDA64(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FDAA8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000FDAE4()
{
  return swift_retain(*(void *)(v0 + 96));
}

uint64_t sub_1000FDB18(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FDB5C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000FDB98()
{
  return swift_retain(*(void *)(v0 + 104));
}

uint64_t sub_1000FDBCC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FDC10(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000FDC4C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t sub_1000FDC80(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 11sub_100006034(v0 + 2) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000FDCC4(void *a1, void *a2)
{
  uint64_t v5 = sub_100100C68(a1, a2);

  return v5;
}

uint64_t sub_1000FDD18(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 184LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for DriverBinManager(0LL);
    sub_1000CD2E8(v1, (uint64_t)&off_1001505D0, v7, (uint64_t)&off_100147548);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FDD84(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 208LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 200LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for KernelStateManager();
    sub_1000CD2E8(v1, (uint64_t)&off_1001505D0, v7, (uint64_t)&off_100145E70);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FDDF0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 224LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApprovalManager(0LL);
    sub_1000CD2E8(v1, (uint64_t)&off_1001505D0, v7, (uint64_t)&off_10014B318);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FDE5C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 256LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 248LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApplicationManager();
    sub_1000CD2E8(v1, (uint64_t)&off_1001505D0, v7, (uint64_t)&off_1001463D0);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FDEC8()
{
  return v2;
}

uint64_t sub_1000FDF18()
{
  return v2;
}

uint64_t sub_1000FDF68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v217 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v241 = (char *)&v213 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v263 = *(void *)(v6 - 8);
  uint64_t v264 = v6;
  __chkstk_darwin(v6);
  char v262 = (char *)&v213 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v259 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v248 = *(void *)(v259 - 8);
  uint64_t v8 = __chkstk_darwin(v259);
  uint64_t v265 = (uint64_t)&v213 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v213 - v10;
  uint64_t v12 = sub_100005FB4(&qword_100157ED8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v213 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v255 = (char *)&v213 - v17;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*a1 + 224LL))(v16);
  if (!v18) {
    __break(1u);
  }
  uint64_t v19 = v18;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 344LL))(v18);
  uint64_t v22 = v21;
  uint64_t v23 = swift_release(v19);
  uint64_t v216 = (*(uint64_t (**)(uint64_t))(*a1 + 152LL))(v23);
  uint64_t v24 = ApprovalSettingsState.entries.getter(v20, v22);
  swift_bridgeObjectRelease(v20);
  uint64_t v232 = *(void *)(v24 + 16);
  uint64_t v256 = a1;
  if (v232)
  {
    unint64_t v26 = 0LL;
    __int128 v251 = a1 + 2;
    uint64_t v231 = v24 + 32;
    uint64_t v235 = &v273;
    unint64_t v218 = 0x800000010012CF80LL;
    unint64_t v219 = (unint64_t)"";
    unint64_t v215 = 0x800000010012CEB0LL;
    unint64_t v222 = 0x800000010012CF50LL;
    *(void *)&__int128 v25 = 136315394LL;
    __int128 v224 = v25;
    int64_t v223 = (char *)&type metadata for Any + 8;
    uint64_t v214 = (void *)0x800000010012CEE0LL;
    __int128 v220 = (void *)0x800000010012CF30LL;
    unint64_t v221 = 0x800000010012CF10LL;
    uint64_t v225 = _swiftEmptyArrayStorage;
    uint64_t v239 = v3;
    uint64_t v234 = v4;
    uint64_t v253 = v15;
    uint64_t v254 = v11;
    uint64_t v27 = (uint64_t)v255;
    uint64_t v230 = v24;
    while (1)
    {
      if (v26 >= *(void *)(v24 + 16)) {
        goto LABEL_151;
      }
      unint64_t v243 = v26;
      uint64_t v28 = v231 + 40 * v26;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void **)(v28 + 8);
      uint64_t v257 = v30;
      uint64_t v258 = v29;
      uint64_t v32 = *(void *)(v28 + 16);
      unint64_t v31 = *(void *)(v28 + 24);
      int v240 = *(unsigned __int8 *)(v28 + 32);
      uint64_t v277 = 0LL;
      memset(v276, 0, sizeof(v276));
      uint64_t v33 = *v256;
      unint64_t v245 = v31;
      if (v31 >> 60 == 15) {
        break;
      }
      uint64_t v47 = *(uint64_t (**)(uint64_t))(v33 + 176);
      sub_10002B568(v32, v31);
      swift_bridgeObjectRetain_n(v30, 2LL);
      sub_10002B568(v32, v31);
      uint64_t v48 = sub_10002B568(v32, v31);
      uint64_t v49 = v47(v48);
      if (!v49) {
        goto LABEL_155;
      }
      uint64_t v50 = v49;
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 360LL))(v49);
      uint64_t v53 = v52;
      swift_release(v50);
      swift_bridgeObjectRelease(v53);
      uint64_t v54 = 0LL;
      uint64_t v55 = *(void *)(v51 + 64);
      uint64_t v242 = v51 + 64;
      uint64_t v250 = v51;
      uint64_t v56 = 1LL << *(_BYTE *)(v51 + 32);
      unint64_t v57 = (unint64_t)(v56 + 63) >> 6;
      if (v56 < 64) {
        uint64_t v58 = ~(-1LL << v56);
      }
      else {
        uint64_t v58 = -1LL;
      }
      unint64_t v59 = v58 & v55;
      int64_t v246 = v57;
      unint64_t v247 = v31 >> 62;
      unint64_t v228 = HIDWORD(v32);
      BOOL v60 = __OFSUB__(HIDWORD(v32), (_DWORD)v32);
      BOOL v238 = v60;
      uint64_t v236 = BYTE6(v31);
      uint64_t v237 = HIDWORD(v32) - (int)v32;
      uint64_t v252 = v31 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v229 = (int)v32;
      unint64_t v226 = v57 - 1;
      uint64_t v227 = v32 >> 32;
      uint64_t v249 = _swiftEmptyArrayStorage;
      uint64_t v43 = v32;
      uint64_t v233 = v32;
      while (2)
      {
        if (v59)
        {
          uint64_t v260 = (v59 - 1) & v59;
          uint64_t v261 = v54;
          unint64_t v62 = __clz(__rbit64(v59)) | (v54 << 6);
          goto LABEL_29;
        }

        int64_t v68 = v54 + 1;
        if (__OFADD__(v54, 1LL))
        {
          __break(1u);
LABEL_151:
          __break(1u);
          JUMPOUT(0x100100104LL);
        }

        if (v68 >= v246)
        {
          uint64_t v261 = v54;
          goto LABEL_35;
        }

        unint64_t v69 = *(void *)(v242 + 8 * v68);
        if (v69) {
          goto LABEL_33;
        }
        int64_t v83 = v54 + 2;
        if (v54 + 2 >= v246)
        {
          uint64_t v261 = v54 + 1;
          goto LABEL_35;
        }

        unint64_t v69 = *(void *)(v242 + 8 * v83);
        if (v69)
        {
LABEL_46:
          int64_t v68 = v83;
          goto LABEL_33;
        }

        if (v54 + 3 >= v246)
        {
          uint64_t v261 = v54 + 2;
          goto LABEL_35;
        }

        unint64_t v69 = *(void *)(v242 + 8 * (v54 + 3));
        if (v69)
        {
          int64_t v68 = v54 + 3;
LABEL_33:
          uint64_t v260 = (v69 - 1) & v69;
          uint64_t v261 = v68;
          unint64_t v62 = __clz(__rbit64(v69)) + (v68 << 6);
LABEL_29:
          uint64_t v63 = v250;
          uint64_t v64 = *(void *)(v250 + 48);
          uint64_t v65 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v65 - 8) + 16LL))( v15,  v64 + *(void *)(*(void *)(v65 - 8) + 72LL) * v62,  v65);
          uint64_t v66 = *(void *)(v63 + 56) + *(void *)(v248 + 72) * v62;
          uint64_t v67 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
          sub_100012734(v66, (uint64_t)&v15[*(int *)(v67 + 48)], type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))(v15, 0LL, 1LL, v67);
          goto LABEL_36;
        }

        int64_t v83 = v54 + 4;
        if (v54 + 4 >= v246)
        {
          uint64_t v261 = v54 + 3;
          goto LABEL_35;
        }

        unint64_t v69 = *(void *)(v242 + 8 * v83);
        if (v69) {
          goto LABEL_46;
        }
        while (1)
        {
          int64_t v68 = v83 + 1;
          if (__OFADD__(v83, 1LL))
          {
            __break(1u);
            goto LABEL_154;
          }

          if (v68 >= v246) {
            break;
          }
          unint64_t v69 = *(void *)(v242 + 8 * v68);
          ++v83;
          if (v69) {
            goto LABEL_33;
          }
        }

        uint64_t v261 = v226;
LABEL_35:
        uint64_t v70 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL))(v15, 1LL, 1LL, v70);
        uint64_t v260 = 0LL;
LABEL_36:
        sub_10003F354((uint64_t)v15, v27);
        uint64_t v71 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48LL))(v27, 1LL, v71) != 1)
        {
          sub_1000966AC(v27 + *(int *)(v71 + 48), (uint64_t)v11);
          unint64_t v72 = v262;
          (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v262, &v11[*(int *)(v259 + 28)], v264);
          uint64_t v73 = v256[5];
          uint64_t v74 = v256[6];
          sub_100005110(v251, v73);
          sub_10009C2CC(v73, v74);
          uint64_t v75 = *((void *)&v273 + 1);
          uint64_t v76 = v274;
          sub_100005110(&v272, *((uint64_t *)&v273 + 1));
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v76 + 24))(&v270, v72, v75, v76);
          if (v271)
          {
            sub_100005158(&v270, (uint64_t)&v266);
            sub_100006034(&v272);
            uint64_t v77 = *((void *)&v267 + 1);
            uint64_t v78 = v268;
            sub_100005110(&v266, *((uint64_t *)&v267 + 1));
            uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 24))(v77, v78);
            if (v80)
            {
              char v81 = v80;
              if (v79 == v258 && v80 == v257)
              {
                swift_bridgeObjectRelease(v80);
                sub_100012734((uint64_t)v11, v265, type metadata accessor for DriverBinEntry);
                goto LABEL_43;
              }

              char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v258, v257, 0LL);
              swift_bridgeObjectRelease(v81);
              sub_100012734((uint64_t)v11, v265, type metadata accessor for DriverBinEntry);
              if ((v82 & 1) != 0)
              {
LABEL_43:
                type metadata accessor for ApplicationRecord(0LL);
                __asm { BR              X10 }
              }

              sub_100101360(v265);
              uint64_t v11 = v254;
              uint64_t v27 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t))(v263 + 8))(v262, v264);
              sub_100101360((uint64_t)v11);
              uint64_t v15 = v253;
              sub_100006034(&v266);
              uint64_t v61 = type metadata accessor for UUID(0LL);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8LL))(v27, v61);
              unint64_t v59 = v260;
              uint64_t v54 = v261;
              continue;
            }

            uint64_t v46 = v257;
            swift_bridgeObjectRelease(v257);
            *(void *)&__int128 v272 = 0LL;
            *((void *)&v272 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(30LL);
            uint64_t v100 = swift_bridgeObjectRelease(*((void *)&v272 + 1));
            *(void *)&__int128 v272 = 0x6120656C646E7542LL;
            *((void *)&v272 + 1) = 0xEA00000000002074LL;
            uint64_t v101 = v262;
            v102._uint64_t countAndFlagsBits = URL.path.getter(v100);
            object = v102._object;
            String.append(_:)(v102);
            swift_bridgeObjectRelease(object);
            v104._uint64_t countAndFlagsBits = 0xD000000000000012LL;
            v104._object = v220;
            String.append(_:)(v104);
            unint64_t v106 = *((void *)&v272 + 1);
            unint64_t v105 = v272;
            unint64_t v107 = sub_100012624();
            uint64_t v108 = swift_allocError(&type metadata for KMError, v107, 0LL, 0LL);
            *(_OWORD *)uint64_t v109 = __PAIR128__(v106, v105);
            *(_OWORD *)(v109 + 16) = 0u;
            *(_OWORD *)(v109 + 3sub_100006034(v0 + 2) = 0u;
            *(_OWORD *)(v109 + 48) = 0u;
            *(void *)(v109 + 64) = 0LL;
            *(_BYTE *)(v109 + 7sub_100006034(v0 + 2) = 50;
            uint64_t v261 = v108;
            swift_willThrow(v108);
            unint64_t v99 = v245;
            sub_10002193C(v43, v245);
            sub_10002193C(v43, v99);
            (*(void (**)(char *, uint64_t))(v263 + 8))(v101, v264);
            sub_100101360((uint64_t)v11);
            swift_bridgeObjectRelease(v249);
            swift_release(v250);
            sub_100012824((uint64_t)v276, &qword_100157C58);
            sub_100006034(&v266);
          }

          else
          {
            uint64_t v46 = v257;
            swift_bridgeObjectRelease(v257);
            sub_100012824((uint64_t)&v270, &qword_100157C58);
            sub_100006034(&v272);
            *(void *)&__int128 v272 = 0LL;
            *((void *)&v272 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(27LL);
            uint64_t v90 = swift_bridgeObjectRelease(*((void *)&v272 + 1));
            *(void *)&__int128 v272 = 0xD000000000000019LL;
            *((void *)&v272 + 1) = v221;
            uint64_t v91 = v262;
            v92._uint64_t countAndFlagsBits = URL.path.getter(v90);
            unint64_t v93 = v92._object;
            String.append(_:)(v92);
            swift_bridgeObjectRelease(v93);
            unint64_t v95 = *((void *)&v272 + 1);
            unint64_t v94 = v272;
            unint64_t v96 = sub_100012624();
            uint64_t v97 = swift_allocError(&type metadata for KMError, v96, 0LL, 0LL);
            *(_OWORD *)uint64_t v98 = __PAIR128__(v95, v94);
            *(_OWORD *)(v98 + 16) = 0u;
            *(_OWORD *)(v98 + 3sub_100006034(v0 + 2) = 0u;
            *(_OWORD *)(v98 + 48) = 0u;
            *(void *)(v98 + 64) = 0LL;
            *(_BYTE *)(v98 + 7sub_100006034(v0 + 2) = 19;
            uint64_t v261 = v97;
            swift_willThrow(v97);
            unint64_t v99 = v245;
            sub_10002193C(v43, v245);
            sub_10002193C(v43, v99);
            (*(void (**)(char *, uint64_t))(v263 + 8))(v91, v264);
            sub_100101360((uint64_t)v11);
            swift_bridgeObjectRelease(v249);
            swift_release(v250);
            sub_100012824((uint64_t)v276, &qword_100157C58);
          }

          uint64_t v110 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v110 - 8) + 8LL))(v255, v110);
          uint64_t v244 = 0LL;
          uint64_t v111 = v239;
          uint64_t v112 = v234;
LABEL_140:
          uint64_t v187 = sub_1000D3304();
          (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v241, v187, v111);
          swift_bridgeObjectRetain(v46);
          sub_10002B568(v43, v99);
          uint64_t v188 = v261;
          swift_errorRetain(v261);
          uint64_t v189 = v46;
          swift_bridgeObjectRetain(v46);
          sub_10002B568(v43, v99);
          uint64_t v190 = swift_errorRetain(v188);
          uint64_t v191 = (os_log_s *)Logger.logObject.getter(v190);
          uint64_t v192 = v112;
          os_log_type_t v193 = static os_log_type_t.error.getter(v191);
          if (os_log_type_enabled(v191, v193))
          {
            uint64_t v194 = swift_slowAlloc(22LL, -1LL);
            uint64_t v260 = swift_slowAlloc(64LL, -1LL);
            *(void *)&__int128 v266 = v260;
            *(_DWORD *)uint64_t v194 = v224;
            *(void *)&__int128 v272 = v258;
            *((void *)&v272 + 1) = v189;
            *(void *)&__int128 v273 = v43;
            *((void *)&v273 + 1) = v99;
            LOBYTE(v274) = v240;
            unint64_t v195 = sub_100100EEC();
            uint64_t v196 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for ApprovalDBEntry,  v195);
            unint64_t v198 = v197;
            *(void *)(v194 + 4) = sub_1000058CC(v196, v197, (uint64_t *)&v266);
            swift_bridgeObjectRelease(v189);
            swift_bridgeObjectRelease(v198);
            sub_10002193C(v43, v99);
            swift_bridgeObjectRelease(v189);
            sub_10002193C(v43, v99);
            *(_WORD *)(v194 + 1sub_100006034(v0 + 2) = 2080;
            *(void *)&__int128 v272 = v261;
            swift_errorRetain(v261);
            uint64_t v199 = sub_100005FB4(&qword_10015AB20);
            uint64_t v200 = String.init<A>(describing:)(&v272, v199);
            unint64_t v202 = v201;
            *(void *)(v194 + 14) = sub_1000058CC(v200, v201, (uint64_t *)&v266);
            swift_bridgeObjectRelease(v202);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v191, v193, "Failed to use entry %s: %s", (uint8_t *)v194, 0x16u);
            uint64_t v203 = v260;
            swift_arrayDestroy(v260, 2LL, v223);
            swift_slowDealloc(v203, -1LL, -1LL);
            swift_slowDealloc(v194, -1LL, -1LL);

            swift_errorRelease();
            swift_bridgeObjectRelease(v189);
            sub_10002193C(v43, v99);
            (*(void (**)(char *, uint64_t))(v234 + 8))(v241, v239);
          }

          else
          {
            swift_bridgeObjectRelease(v189);
            sub_10002193C(v43, v99);
            swift_errorRelease();
            swift_bridgeObjectRelease(v189);
            sub_10002193C(v43, v99);
            swift_bridgeObjectRelease(v189);
            sub_10002193C(v43, v99);
            swift_errorRelease();
            swift_errorRelease();

            (*(void (**)(char *, uint64_t))(v192 + 8))(v241, v111);
          }

          uint64_t v15 = v253;
          uint64_t v11 = v254;
          uint64_t v27 = (uint64_t)v255;
          goto LABEL_6;
        }

        break;
      }

      swift_release(v250);
      unint64_t v84 = v249;
      unint64_t v85 = v249[2];
      if (v85 <= 1)
      {
        unint64_t v113 = v245;
        if (v85)
        {
          unint64_t v114 = v249;
          sub_10001A148((uint64_t)(v249 + 4), (uint64_t)&v272, &qword_10015C4E0);
          uint64_t v46 = v257;
        }

        else
        {
          uint64_t v275 = 0LL;
          __int128 v273 = 0u;
          __int128 v274 = 0u;
          __int128 v272 = 0u;
          uint64_t v46 = v257;
          unint64_t v114 = v249;
        }

        sub_10002193C(v43, v113);
        swift_bridgeObjectRelease(v114);
        if (*((void *)&v274 + 1))
        {
          sub_100012824((uint64_t)v276, &qword_100157C58);
          sub_10001226C(v272, *((unint64_t *)&v272 + 1));
          sub_100005158(v235, (uint64_t)&v266);
          sub_100005158(&v266, (uint64_t)v276);
        }

        else
        {
          sub_100012824((uint64_t)&v272, &qword_10015C4E8);
        }

        goto LABEL_78;
      }

      swift_bridgeObjectRetain(v249);
      uint64_t v86 = v244;
      uint64_t v88 = sub_1001011F4(v87, (uint64_t (*)(void, void, _OWORD *))sub_100100F30);
      uint64_t v244 = v86;
      swift_bridgeObjectRelease(v84);
      unint64_t v89 = v245;
      if (v88[2])
      {
        sub_10001A148((uint64_t)(v88 + 4), (uint64_t)&v266, &qword_10015C4E0);
      }

      else
      {
        uint64_t v269 = 0LL;
        __int128 v267 = 0u;
        __int128 v268 = 0u;
        __int128 v266 = 0u;
      }

      uint64_t v111 = v239;
      swift_bridgeObjectRelease(v88);
      if (*((void *)&v268 + 1))
      {
        sub_10002193C(v32, v89);
        swift_bridgeObjectRelease(v249);
        __int128 v272 = v266;
        __int128 v273 = v267;
        __int128 v274 = v268;
        uint64_t v275 = v269;
      }

      else
      {
        uint64_t v121 = v249;
        if (v249[2])
        {
          sub_10001A148((uint64_t)(v249 + 4), (uint64_t)&v272, &qword_10015C4E0);
        }

        else
        {
          uint64_t v275 = 0LL;
          __int128 v273 = 0u;
          __int128 v274 = 0u;
          __int128 v272 = 0u;
        }

        sub_10002193C(v32, v89);
        swift_bridgeObjectRelease(v121);
        sub_100012824((uint64_t)&v266, &qword_10015C4E8);
      }

      uint64_t v46 = v257;
      if (*((void *)&v274 + 1))
      {
        sub_100012824((uint64_t)v276, &qword_100157C58);
        sub_10001226C(v272, *((unint64_t *)&v272 + 1));
        sub_100005158(v235, (uint64_t)&v270);
        sub_100005158(&v270, (uint64_t)v276);
      }

      else
      {
        sub_100012824((uint64_t)&v272, &qword_10015C4E8);
      }

LABEL_84:
      sub_10001A148((uint64_t)v276, (uint64_t)&v266, &qword_100157C58);
      if (!*((void *)&v267 + 1))
      {
        sub_100012824((uint64_t)&v266, &qword_100157C58);
        *(void *)&__int128 v272 = 0LL;
        *((void *)&v272 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease(*((void *)&v272 + 1));
        *(void *)&__int128 v272 = 0xD000000000000021LL;
        *((void *)&v272 + 1) = v219 | 0x8000000000000000LL;
        v132._uint64_t countAndFlagsBits = v258;
        v132._object = v46;
        String.append(_:)(v132);
        swift_bridgeObjectRelease(v46);
        unint64_t v134 = *((void *)&v272 + 1);
        unint64_t v133 = v272;
        unint64_t v135 = sub_100012624();
        uint64_t v136 = swift_allocError(&type metadata for KMError, v135, 0LL, 0LL);
        *(_OWORD *)uint64_t v137 = __PAIR128__(v134, v133);
        *(_OWORD *)(v137 + 16) = 0u;
        *(_OWORD *)(v137 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v137 + 48) = 0u;
        *(void *)(v137 + 64) = 0LL;
        *(_BYTE *)(v137 + 7sub_100006034(v0 + 2) = 10;
        uint64_t v261 = v136;
        swift_willThrow(v136);
        unint64_t v99 = v245;
        sub_10002193C(v43, v245);
        sub_100012824((uint64_t)v276, &qword_100157C58);
LABEL_91:
        uint64_t v244 = 0LL;
        uint64_t v112 = v234;
        goto LABEL_140;
      }

      sub_100005158(&v266, (uint64_t)&v272);
      uint64_t v122 = *((void *)&v273 + 1);
      uint64_t v123 = v274;
      sub_100005110(&v272, *((uint64_t *)&v273 + 1));
      uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 40))(v122, v123);
      if (!v124)
      {
        uint64_t v125 = *((void *)&v273 + 1);
        uint64_t v126 = v274;
        sub_100005110(&v272, *((uint64_t *)&v273 + 1));
        uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 32))(v125, v126);
        if (!v124)
        {
          *(void *)&__int128 v266 = 0LL;
          *((void *)&v266 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(50LL);
          v163._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
          v163._object = v214;
          String.append(_:)(v163);
          uint64_t v46 = v257;
          v164._uint64_t countAndFlagsBits = v258;
          v164._object = v257;
          String.append(_:)(v164);
          swift_bridgeObjectRelease(v46);
          v165._uint64_t countAndFlagsBits = 544497952LL;
          v165._object = (void *)0xE400000000000000LL;
          String.append(_:)(v165);
          uint64_t v166 = *((void *)&v273 + 1);
          uint64_t v167 = v274;
          uint64_t v168 = sub_100005110(&v272, *((uint64_t *)&v273 + 1));
          DefaultStringInterpolation.appendInterpolation<A>(_:)(v168, v166, *(void *)(v167 + 8));
          unint64_t v170 = *((void *)&v266 + 1);
          unint64_t v169 = v266;
          unint64_t v171 = sub_100012624();
          uint64_t v172 = swift_allocError(&type metadata for KMError, v171, 0LL, 0LL);
          *(_OWORD *)uint64_t v173 = __PAIR128__(v170, v169);
          *(_OWORD *)(v173 + 16) = 0u;
          *(_OWORD *)(v173 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v173 + 48) = 0u;
          *(void *)(v173 + 64) = 0LL;
          *(_BYTE *)(v173 + 7sub_100006034(v0 + 2) = 10;
          uint64_t v261 = v172;
          swift_willThrow(v172);
          unint64_t v99 = v245;
          sub_10002193C(v43, v245);
          sub_100012824((uint64_t)v276, &qword_100157C58);
          sub_100006034(&v272);
          goto LABEL_91;
        }
      }

      uint64_t v127 = (uint64_t *)sub_10008F3A8();
      if (!*(void *)(v124 + 16))
      {
        __int128 v266 = 0u;
        __int128 v267 = 0u;
LABEL_97:
        sub_100012824((uint64_t)&v266, &qword_100157FF8);
        goto LABEL_98;
      }

      uint64_t v128 = *v127;
      uint64_t v129 = v127[1];
      swift_bridgeObjectRetain(v129);
      uint64_t v130 = sub_100024E94( v128,  v129,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
      if ((v131 & 1) != 0)
      {
        sub_100006054(*(void *)(v124 + 56) + 32 * v130, (uint64_t)&v266);
      }

      else
      {
        __int128 v266 = 0u;
        __int128 v267 = 0u;
      }

      swift_bridgeObjectRelease(v129);
      if (!*((void *)&v267 + 1)) {
        goto LABEL_97;
      }
      if ((swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v138 = *((void *)&v270 + 1);
        uint64_t v139 = v270;
        goto LABEL_111;
      }

LABEL_98:
      uint64_t v140 = sub_10008F3CC();
      if (*(void *)(v124 + 16))
      {
        uint64_t v141 = *v140;
        uint64_t v142 = v140[1];
        swift_bridgeObjectRetain(v142);
        uint64_t v143 = sub_100024E94( v141,  v142,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
        if ((v144 & 1) != 0)
        {
          sub_100006054(*(void *)(v124 + 56) + 32 * v143, (uint64_t)&v266);
        }

        else
        {
          __int128 v266 = 0u;
          __int128 v267 = 0u;
        }

        swift_bridgeObjectRelease(v142);
        if (*((void *)&v267 + 1))
        {
          int v145 = swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          if (v145) {
            uint64_t v138 = *((void *)&v270 + 1);
          }
          else {
            uint64_t v138 = 0LL;
          }
          if (v145) {
            uint64_t v139 = v270;
          }
          else {
            uint64_t v139 = 0LL;
          }
          goto LABEL_111;
        }
      }

      else
      {
        __int128 v266 = 0u;
        __int128 v267 = 0u;
      }

      sub_100012824((uint64_t)&v266, &qword_100157FF8);
      uint64_t v138 = 0LL;
      uint64_t v139 = 0LL;
LABEL_111:
      uint64_t v146 = (uint64_t *)sub_10008F40C();
      if (*(void *)(v124 + 16))
      {
        uint64_t v147 = *v146;
        uint64_t v148 = v146[1];
        swift_bridgeObjectRetain(v148);
        uint64_t v149 = sub_100024E94( v147,  v148,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
        if ((v150 & 1) != 0)
        {
          sub_100006054(*(void *)(v124 + 56) + 32 * v149, (uint64_t)&v266);
        }

        else
        {
          __int128 v266 = 0u;
          __int128 v267 = 0u;
        }

        swift_bridgeObjectRelease(v148);
      }

      else
      {
        __int128 v266 = 0u;
        __int128 v267 = 0u;
      }

      swift_bridgeObjectRelease(v124);
      if (*((void *)&v267 + 1))
      {
        int v151 = swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
        if (v151) {
          uint64_t v152 = v270;
        }
        else {
          uint64_t v152 = 0LL;
        }
        if (v151) {
          uint64_t v153 = *((void *)&v270 + 1);
        }
        else {
          uint64_t v153 = 0LL;
        }
      }

      else
      {
        sub_100012824((uint64_t)&v266, &qword_100157FF8);
        uint64_t v152 = 0LL;
        uint64_t v153 = 0LL;
      }

      uint64_t v154 = v245;
      sub_10002B568(v43, v245);
      sub_100063034(v258, (uint64_t)v257, v139, v138, v152, v153, v43, v154, (uint64_t)v278, v240);
      if ((swift_isUniquelyReferenced_nonNull_native(v225) & 1) != 0)
      {
        uint64_t v27 = (uint64_t)v255;
        uint64_t v155 = v225;
      }

      else
      {
        uint64_t v155 = sub_100100858(0LL, v225[2] + 1LL, 1, v225);
        uint64_t v27 = (uint64_t)v255;
      }

      unint64_t v157 = v155[2];
      unint64_t v156 = v155[3];
      if (v157 >= v156 >> 1) {
        uint64_t v155 = sub_100100858((void *)(v156 > 1), v157 + 1, 1, v155);
      }
      v155[2] = v157 + 1;
      uint64_t v225 = v155;
      Swift::Int v158 = &v155[9 * v157];
      *((_OWORD *)v158 + sub_100006034(v0 + 2) = v278[0];
      __int128 v159 = v278[1];
      __int128 v160 = v278[2];
      __int128 v161 = v278[3];
      *((_BYTE *)v158 + 96) = v279;
      *((_OWORD *)v158 + 4) = v160;
      *((_OWORD *)v158 + 5) = v161;
      *((_OWORD *)v158 + sub_10003A584(v0 + 3) = v159;
      unint64_t v162 = v245;
      sub_10002193C(v43, v245);
      swift_bridgeObjectRelease(v257);
      sub_10002193C(v43, v162);
      sub_100012824((uint64_t)v276, &qword_100157C58);
      sub_100006034(&v272);
LABEL_6:
      uint64_t v24 = v230;
      unint64_t v26 = v243 + 1;
      if (v243 + 1 == v232)
      {
        swift_bridgeObjectRelease(v230);
        uint64_t v204 = v225;
        goto LABEL_146;
      }
    }

    uint64_t v34 = *(uint64_t (**)(uint64_t))(v33 + 200);
    swift_bridgeObjectRetain_n(v30, 2LL);
    uint64_t v35 = v32;
    uint64_t v36 = sub_10002B568(v32, v31);
    uint64_t v37 = v34(v36);
    if (!v37)
    {
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      JUMPOUT(0x100100170LL);
    }

    uint64_t v38 = v37;
    unint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 408LL))(v37);
    swift_release(v38);
    swift_bridgeObjectRetain(v30);
    uint64_t v40 = v244;
    uint64_t v41 = (uint64_t)sub_100100F38(v39, v258, (uint64_t)v30);
    uint64_t v244 = v40;
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v30);
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0) {
        uint64_t v174 = v41;
      }
      else {
        uint64_t v174 = v41 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v43 = v32;
      if (_CocoaArrayWrapper.endIndex.getter(v174) <= 1)
      {
        swift_bridgeObjectRetain(v41);
        uint64_t v175 = _CocoaArrayWrapper.endIndex.getter(v174);
        swift_bridgeObjectRelease(v41);
        if (v175) {
          goto LABEL_13;
        }
LABEL_136:
        swift_bridgeObjectRelease(v41);
        *(void *)&__int128 v272 = 0LL;
        *((void *)&v272 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(46LL);
        swift_bridgeObjectRelease(*((void *)&v272 + 1));
        *(void *)&__int128 v272 = 0xD00000000000002CLL;
        *((void *)&v272 + 1) = v218;
        v176._uint64_t countAndFlagsBits = v258;
        v176._object = v30;
        String.append(_:)(v176);
        swift_bridgeObjectRelease(v30);
        uint64_t v177 = v272;
        uint64_t v46 = v30;
        uint64_t v178 = *((void *)&v272 + 1);
        unint64_t v179 = sub_100012624();
        uint64_t v180 = swift_allocError(&type metadata for KMError, v179, 0LL, 0LL);
        *(void *)uint64_t v181 = v177;
        *(void *)(v181 + 8) = v178;
        unint64_t v99 = v245;
        *(_OWORD *)(v181 + 16) = 0u;
        *(_OWORD *)(v181 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v181 + 48) = 0u;
        *(void *)(v181 + 64) = 0LL;
        *(_BYTE *)(v181 + 7sub_100006034(v0 + 2) = 10;
LABEL_138:
        uint64_t v261 = v180;
        swift_willThrow(v180);
        sub_100012824((uint64_t)v276, &qword_100157C58);
        uint64_t v244 = 0LL;
        goto LABEL_139;
      }
    }

    else
    {
      unint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v43 = v32;
      if (v42 < 2)
      {
        if (v42)
        {
LABEL_13:
          if ((v41 & 0xC000000000000001LL) != 0)
          {
            uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v41);
          }

          else
          {
            if (!*(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10))
            {
              __break(1u);
              JUMPOUT(0x10010011CLL);
            }

            uint64_t v44 = *(void *)(v41 + 32);
            swift_retain(v44);
          }

          uint64_t v45 = swift_bridgeObjectRelease(v41);
          (*(void (**)(__int128 *__return_ptr, uint64_t))(**(void **)(v44 + 24) + 112LL))(&v266, v45);
          if (*((void *)&v267 + 1))
          {
            swift_release(v44);
            sub_100012824((uint64_t)v276, &qword_100157C58);
            sub_100005158(&v266, (uint64_t)&v272);
            sub_100005158(&v272, (uint64_t)v276);
            uint64_t v46 = v257;
LABEL_78:
            uint64_t v111 = v239;
            goto LABEL_84;
          }

          sub_100012824((uint64_t)&v266, &qword_100157C58);
          *(void *)&__int128 v272 = 0LL;
          *((void *)&v272 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(35LL);
          swift_bridgeObjectRelease(*((void *)&v272 + 1));
          *(void *)&__int128 v272 = 0xD000000000000021LL;
          *((void *)&v272 + 1) = v215;
          uint64_t v46 = v257;
          v115._uint64_t countAndFlagsBits = v258;
          v115._object = v257;
          String.append(_:)(v115);
          swift_bridgeObjectRelease(v46);
          unint64_t v117 = *((void *)&v272 + 1);
          unint64_t v116 = v272;
          unint64_t v118 = sub_100012624();
          uint64_t v119 = swift_allocError(&type metadata for KMError, v118, 0LL, 0LL);
          *(_OWORD *)uint64_t v120 = __PAIR128__(v117, v116);
          uint64_t v43 = v35;
          *(_OWORD *)(v120 + 16) = 0u;
          *(_OWORD *)(v120 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v120 + 48) = 0u;
          *(void *)(v120 + 64) = 0LL;
          *(_BYTE *)(v120 + 7sub_100006034(v0 + 2) = 10;
          uint64_t v261 = v119;
          swift_willThrow(v119);
          swift_release(v44);
          sub_100012824((uint64_t)v276, &qword_100157C58);
          uint64_t v244 = 0LL;
          unint64_t v99 = v245;
LABEL_139:
          uint64_t v112 = v234;
          uint64_t v111 = v239;
          goto LABEL_140;
        }

        goto LABEL_136;
      }
    }

    swift_bridgeObjectRelease(v41);
    *(void *)&__int128 v272 = 0LL;
    *((void *)&v272 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(*((void *)&v272 + 1));
    *(void *)&__int128 v272 = 0xD000000000000027LL;
    *((void *)&v272 + 1) = v222;
    v182._uint64_t countAndFlagsBits = v258;
    v182._object = v30;
    String.append(_:)(v182);
    swift_bridgeObjectRelease(v30);
    uint64_t v183 = v272;
    uint64_t v46 = v30;
    uint64_t v184 = *((void *)&v272 + 1);
    unint64_t v185 = sub_100012624();
    uint64_t v180 = swift_allocError(&type metadata for KMError, v185, 0LL, 0LL);
    *(void *)uint64_t v186 = v183;
    *(void *)(v186 + 8) = v184;
    unint64_t v99 = v245;
    *(_OWORD *)(v186 + 16) = 0u;
    *(_OWORD *)(v186 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v186 + 48) = 0u;
    *(void *)(v186 + 64) = 0LL;
    *(_BYTE *)(v186 + 7sub_100006034(v0 + 2) = 50;
    goto LABEL_138;
  }

  swift_bridgeObjectRelease(v24);
  uint64_t v204 = _swiftEmptyArrayStorage;
LABEL_146:
  uint64_t v205 = sub_100060ED0((uint64_t)v204);
  uint64_t v206 = v216;
  *(void *)&__int128 v272 = v216;
  *(void *)&__int128 v266 = v205;
  unint64_t v207 = sub_100100EA8();
  char v208 = dispatch thunk of static Equatable.== infix(_:_:)(&v272, &v266, &type metadata for ApprovalSettingsState, v207);
  swift_bridgeObjectRelease(v206);
  if ((v208 & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease(v205);
    uint64_t v210 = 0LL;
  }

  else
  {
    uint64_t v211 = v256;
    uint64_t v212 = (*(uint64_t (**)(uint64_t))(*v256 + 160LL))(v205);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*v211 + 360LL))(v212);
    uint64_t v210 = &off_1001505A0;
  }

  *uint64_t v217 = v210;
  return result;
}

uint64_t sub_1001001E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100157ED0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 248LL))(v7);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)result + 216LL))();
    swift_release(v11);
    if (*(void *)(v12 + 16))
    {
      sub_1000125E0(a1, a2);
      uint64_t v13 = sub_100024E94(a1, a2, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_10000D324);
      if ((v14 & 1) != 0)
      {
        uint64_t v15 = v13;
        uint64_t v16 = *(void *)(v12 + 56);
        uint64_t v17 = type metadata accessor for ApplicationRecord(0LL);
        uint64_t v18 = *(void *)(v17 - 8);
        sub_100012734(v16 + *(void *)(v18 + 72) * v15, (uint64_t)v9, type metadata accessor for ApplicationRecord);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v9, 0LL, 1LL, v17);
      }

      else
      {
        uint64_t v17 = type metadata accessor for ApplicationRecord(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 1LL, 1LL, v17);
      }
    }

    else
    {
      uint64_t v17 = type metadata accessor for ApplicationRecord(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v9, 1LL, 1LL, v17);
      sub_1000125E0(a1, a2);
    }

    swift_bridgeObjectRelease(v12);
    sub_10001226C(a1, a2);
    type metadata accessor for ApplicationRecord(0LL);
    BOOL v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v9, 1LL, v17) != 1;
    sub_100012824((uint64_t)v9, &qword_100157ED0);
    return v19;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1001003B8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
  unint64_t v2 = ApprovalSettingsState.debugDescription.getter(v1);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100100404()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v32 = v4;
  uint64_t v33 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005110(v4, v5);
  sub_10010B078(v5, v6);
  uint64_t v8 = v40;
  uint64_t v7 = v41;
  sub_100005110(v39, v40);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v36 = v9 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t result = sub_100006034(v39);
  int64_t v15 = 0LL;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  *(void *)&__int128 v16 = 134217984LL;
  __int128 v31 = v16;
  while (v13)
  {
    unint64_t v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v18 = v17 | (v15 << 6);
LABEL_17:
    uint64_t v22 = 8 * v18;
    uint64_t v23 = *(void *)(*(void *)(v9 + 48) + v22);
    uint64_t v24 = *(void *)(*(void *)(v9 + 56) + v22);
    uint64_t v25 = *sub_100077954();
    uint64_t v38 = v24;
    v39[0] = v25;
    unint64_t v26 = sub_1000793F8();
    uint64_t result = dispatch thunk of SetAlgebra.isSuperset(of:)(v39, &type metadata for XPCEventSubscriberFlags, v26);
    if ((result & 1) != 0)
    {
      uint64_t v27 = *(void *)(v1 + 40);
      uint64_t v28 = *(void *)(v1 + 48);
      sub_100005110(v32, v27);
      sub_10010B078(v27, v28);
      uint64_t v30 = v40;
      uint64_t v29 = v41;
      sub_100005110(v39, v40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 + 8) + 16LL))(v23, v30);
      uint64_t result = sub_100006034(v39);
    }
  }

  if (__OFADD__(v15++, 1LL))
  {
    __break(1u);
    goto LABEL_25;
  }

  if (v15 >= v37) {
    return swift_release(v9);
  }
  unint64_t v20 = *(void *)(v36 + 8 * v15);
  if (v20)
  {
LABEL_16:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_17;
  }

  int64_t v21 = v15 + 1;
  if (v15 + 1 >= v37) {
    return swift_release(v9);
  }
  unint64_t v20 = *(void *)(v36 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v15 + 2;
  if (v15 + 2 >= v37) {
    return swift_release(v9);
  }
  unint64_t v20 = *(void *)(v36 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v15 + 3;
  if (v15 + 3 >= v37) {
    return swift_release(v9);
  }
  unint64_t v20 = *(void *)(v36 + 8 * v21);
  if (v20)
  {
LABEL_15:
    int64_t v15 = v21;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v37) {
      return swift_release(v9);
    }
    unint64_t v20 = *(void *)(v36 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_16;
    }
  }

uint64_t sub_100100764()
{
  swift_release(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  return v0;
}

uint64_t sub_1001007C0()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

id sub_1001007E0()
{
  return *(id *)(v0 + 72);
}

uint64_t sub_1001007E8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t sub_1001007F4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

void (*sub_100100800(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 288LL))();
  return sub_10000C7E8;
}

uint64_t sub_10010084C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
}

void *sub_100100858(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_10015C508);
      uint64_t v11 = (void *)swift_allocObject(v10, 72 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      unint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4]) {
          memmove(v13, a4 + 4, 72 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10010139C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10010097C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_10015C500);
      uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      void v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      unint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4]) {
          memmove(v13, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1001010E8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_100100AA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100100AC0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100100AC0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_10015C500);
    uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8) {
      memmove(v11 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_100005FB4(&qword_10015C4E0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100100C68(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  size_t v12 = (void **)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  int64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(void *)(v3 + 11sub_100006034(v0 + 2) = _swiftEmptyArrayStorage;
  sub_100005F70((uint64_t)a2, v3 + 16);
  *(void *)(v3 + 7sub_100006034(v0 + 2) = a1;
  id v16 = a1;
  *(void *)(v3 + 56) = sub_100051F50();
  unint64_t v17 = sub_1000807B4();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v24 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_1000783BC();
  uint64_t v19 = sub_100005FB4(&qword_100159CC0);
  unint64_t v20 = sub_100101490();
  dispatch thunk of SetAlgebra.init<A>(_:)(v12, &v24, v19, v20, v10, v18);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v6);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000021LL,  0x800000010012CFB0LL,  v15,  v12,  v9,  0LL);
  sub_100006034(v23);
  *(void *)(v3 + 64) = v21;
  return v3;
}

uint64_t sub_100100E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 152LL))();
  *a1 = result;
  return result;
}

uint64_t sub_100100E70@<X0>(void *a1@<X8>)
{
  return sub_1000FDF68(v1, a1);
}

uint64_t type metadata accessor for ApprovalSettingsStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd28ApprovalSettingsStateManager);
}

unint64_t sub_100100EA8()
{
  unint64_t result = qword_10015C4F0;
  if (!qword_10015C4F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsState,  &type metadata for ApprovalSettingsState);
    atomic_store(result, (unint64_t *)&qword_10015C4F0);
  }

  return result;
}

unint64_t sub_100100EEC()
{
  unint64_t result = qword_10015C4F8;
  if (!qword_10015C4F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntry,  &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_10015C4F8);
  }

  return result;
}

uint64_t sub_100100F30(uint64_t a1, unint64_t a2)
{
  return sub_1001001E8(a1, a2, v2);
}

void *sub_100100F38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = 0LL;
      unint64_t v23 = v5 & 0xC000000000000001LL;
      uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
      while (v23)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        unint64_t v9 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_19:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }

uint64_t sub_1001010E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 56 * a1 + 32;
  unint64_t v7 = a3 + 56 * v4;
  if (v6 >= v7 || v6 + 56 * v4 <= a3)
  {
    sub_100005FB4(&qword_10015C4E0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1001011F4(uint64_t a1, uint64_t (*a2)(void, void, _OWORD *))
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = a1 + 32;
    unint64_t v6 = &qword_10015C4E0;
    do
    {
      sub_10001A148(v5, (uint64_t)&v16, v6);
      if ((a2(v16, *((void *)&v16 + 1), v17) & 1) != 0)
      {
        unint64_t v7 = v6;
        __int128 v12 = v16;
        __int128 v13 = v17[0];
        __int128 v14 = v17[1];
        uint64_t v15 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
          sub_100100AA4(0, v2[2] + 1LL, 1);
        }
        uint64_t v2 = v19;
        unint64_t v9 = v19[2];
        unint64_t v8 = v19[3];
        if (v9 >= v8 >> 1)
        {
          sub_100100AA4(v8 > 1, v9 + 1, 1);
          uint64_t v2 = v19;
        }

        void v2[2] = v9 + 1;
        uint64_t v10 = &v2[7 * v9];
        *((_OWORD *)v10 + sub_100006034(v0 + 2) = v12;
        *((_OWORD *)v10 + sub_10003A584(v0 + 3) = v13;
        *((_OWORD *)v10 + 4) = v14;
        void v10[10] = v15;
        unint64_t v6 = v7;
      }

      else
      {
        sub_100012824((uint64_t)&v16, v6);
      }

      v5 += 56LL;
      --v3;
    }

    while (v3);
  }

  return v2;
}

uint64_t sub_100101360(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DriverBinEntry(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10010139C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 72 * a1 + 32;
  unint64_t v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100101490()
{
  unint64_t result = qword_100159CC8;
  if (!qword_100159CC8)
  {
    uint64_t v1 = sub_100012010(&qword_100159CC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100159CC8);
  }

  return result;
}

uint64_t sub_1001014DC()
{
  v0._uint64_t countAndFlagsBits = 0x636B202020200A7BLL;
  v0._object = (void *)0xED0000203A206F6CLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0xEC000000203A2070LL;
  v3._uint64_t countAndFlagsBits = 0x65636B202020200ALL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._uint64_t countAndFlagsBits = 0x72636B202020200ALL;
  v6._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._uint64_t countAndFlagsBits = 0x72636B202020200ALL;
  v9._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._uint64_t countAndFlagsBits = 0x73636B202020200ALL;
  v12._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  __int128 v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._uint64_t countAndFlagsBits = 0x73636B202020200ALL;
  v15._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._uint64_t countAndFlagsBits = 0x78636B202020200ALL;
  v18._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._uint64_t countAndFlagsBits = 0x78636B202020200ALL;
  v21._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._uint64_t countAndFlagsBits = 0x62636B202020200ALL;
  v24._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._uint64_t countAndFlagsBits = 0x62636B202020200ALL;
  v27._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._uint64_t countAndFlagsBits = 0x77636B202020200ALL;
  v30._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._uint64_t countAndFlagsBits = 0x77636B202020200ALL;
  v33._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._uint64_t countAndFlagsBits = 0x6C636B202020200ALL;
  v36._object = (void *)0xEC000000203A2066LL;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._uint64_t countAndFlagsBits = 0x6C636B202020200ALL;
  v39._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._uint64_t countAndFlagsBits = 32010LL;
  v42._object = (void *)0xE200000000000000LL;
  String.append(_:)(v42);
  return 0LL;
}

unint64_t sub_100101988()
{
  Swift::String v1 = v0;
  unint64_t v2 = sub_1000CC1A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v3, 1869374315LL, 0xE400000000000000LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v5 = v1[1];
  char v6 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v5, 1885692779LL, 0xE400000000000000LL, v6);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v7 = v1[2];
  char v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v7, 1718772587LL, 0xE400000000000000LL, v8);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v9 = v1[3];
  char v10 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v9, 2054316907LL, 0xE400000000000000LL, v10);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v11 = v1[10];
  char v12 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v11, 1719100267LL, 0xE400000000000000LL, v12);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v13 = v1[11];
  char v14 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v13, 2054644587LL, 0xE400000000000000LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v15 = v1[12];
  char v16 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v15, 1718379371LL, 0xE400000000000000LL, v16);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v17 = v1[13];
  char v18 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v17, 2053923691LL, 0xE400000000000000LL, v18);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v2;
}

unint64_t sub_100101B90()
{
  Swift::String v1 = v0;
  unint64_t v2 = sub_1000CC1A4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v3, 1869374315LL, 0xE400000000000000LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v5 = v1[1];
  char v6 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v5, 1885692779LL, 0xE400000000000000LL, v6);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v7 = v1[2];
  char v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v7, 1718772587LL, 0xE400000000000000LL, v8);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v9 = v1[3];
  char v10 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v9, 2054316907LL, 0xE400000000000000LL, v10);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v11 = v1[4];
  char v12 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v11, 1718838123LL, 0xE400000000000000LL, v12);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v13 = v1[5];
  char v14 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v13, 2054382443LL, 0xE400000000000000LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v15 = v1[6];
  char v16 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v15, 1719165803LL, 0xE400000000000000LL, v16);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v17 = v1[7];
  char v18 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v17, 2054710123LL, 0xE400000000000000LL, v18);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v19 = v1[8];
  char v20 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v19, 1717724011LL, 0xE400000000000000LL, v20);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v21 = v1[9];
  char v22 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v21, 2053268331LL, 0xE400000000000000LL, v22);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v23 = v1[10];
  char v24 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v23, 1719100267LL, 0xE400000000000000LL, v24);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v25 = v1[11];
  char v26 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v25, 2054644587LL, 0xE400000000000000LL, v26);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v27 = v1[12];
  char v28 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v27, 1718379371LL, 0xE400000000000000LL, v28);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v29 = v1[13];
  char v30 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103A14(v29, 2053923691LL, 0xE400000000000000LL, v30);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v2;
}

uint64_t sub_100101ED8(char a1)
{
  return *(void *)&aKclo_0[8 * a1];
}

uint64_t sub_100101EF0()
{
  return sub_100101ED8(*v0);
}

uint64_t sub_100101EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100104050(a1, a2);
  *a3 = result;
  return result;
}

void sub_100101F1C(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100101F28(uint64_t a1)
{
  unint64_t v2 = sub_100103D30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100101F50(uint64_t a1)
{
  unint64_t v2 = sub_100103D30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100101F78(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_10015C510);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100103D30();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MachOKernelcacheTags.CodingKeys,  &type metadata for MachOKernelcacheTags.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v35, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    char v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v34, v5);
    uint64_t v14 = v3[2];
    char v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v33, v5);
    uint64_t v15 = v3[3];
    char v32 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v32, v5);
    uint64_t v16 = v3[4];
    char v31 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v31, v5);
    uint64_t v17 = v3[5];
    char v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v30, v5);
    uint64_t v18 = v3[6];
    char v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v29, v5);
    uint64_t v19 = v3[7];
    char v28 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    uint64_t v20 = v3[8];
    HIBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v20, (char *)&v27 + 7, v5);
    uint64_t v21 = v3[9];
    BYTE6(v27) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v21, (char *)&v27 + 6, v5);
    uint64_t v22 = v3[10];
    BYTE5(v27) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v22, (char *)&v27 + 5, v5);
    uint64_t v23 = v3[11];
    BYTE4(v27) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v23, (char *)&v27 + 4, v5);
    uint64_t v24 = v3[12];
    BYTE3(v27) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v24, (char *)&v27 + 3, v5);
    uint64_t v25 = v3[13];
    BYTE2(v27) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v25, (char *)&v27 + 2, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10010226C()
{
  return Hasher._finalize()();
}

void sub_100102350()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt64 v6 = v0[7];
  Swift::UInt64 v8 = v0[8];
  Swift::UInt64 v9 = v0[9];
  Swift::UInt64 v10 = v0[10];
  Swift::UInt64 v11 = v0[11];
  Swift::UInt64 v12 = v0[12];
  Swift::UInt64 v13 = v0[13];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
}

Swift::Int sub_10010242C(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Swift::UInt64 v3 = v1[1];
  Swift::UInt64 v4 = v1[2];
  Swift::UInt64 v5 = v1[3];
  Swift::UInt64 v7 = v1[4];
  Swift::UInt64 v6 = v1[5];
  Swift::UInt64 v8 = v1[6];
  Swift::UInt64 v9 = v1[7];
  Swift::UInt64 v10 = v1[8];
  Swift::UInt64 v12 = v1[9];
  Swift::UInt64 v13 = v1[10];
  Swift::UInt64 v14 = v1[11];
  Swift::UInt64 v15 = v1[12];
  Swift::UInt64 v16 = v1[13];
  Hasher.init(_seed:)(v17, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  return Hasher._finalize()();
}

uint64_t sub_100102558(void *a1)
{
  return sub_100101F78(a1);
}

BOOL sub_10010256C(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  v13[4] = a1[4];
  void v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  __int128 v13[2] = a1[2];
  void v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  void v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  void v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  void v14[2] = v8;
  return sub_100103D10(v13, v14);
}

uint64_t sub_1001025D0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

__n128 sub_1001025E0@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  uint64_t v25 = a6;
  uint64_t v14 = swift_allocObject(&unk_100150810, 56LL, 7LL);
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 3sub_100006034(v0 + 2) = 0u;
  *(void *)(v14 + 48) = 0LL;
  Swift::UInt64 v15 = (void *)swift_allocObject(&unk_100150838, 40LL, 7LL);
  void v15[2] = a4;
  void v15[3] = a5;
  v15[4] = v14;
  Swift::UInt64 v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t *), void *, uint64_t, uint64_t))(a7 + 32);
  swift_bridgeObjectRetain(a5);
  swift_retain(v14);
  v16(a1, a2, a3, sub_100104DD4, v15, v25, a7);
  if (v22)
  {
    swift_release(v14);
    swift_release(v15);
  }

  else
  {
    swift_release(v15);
    swift_beginAccess(v14 + 16, v24, 0LL, 0LL);
    __n128 v23 = *(__n128 *)(v14 + 16);
    unint64_t v18 = *(void *)(v14 + 32);
    unint64_t v19 = *(void *)(v14 + 40);
    unint64_t v20 = *(void *)(v14 + 48);
    swift_bridgeObjectRetain(v20);
    swift_release(v14);
    __n128 result = v23;
    *a8 = v23;
    a8[1].n128_u64[0] = v18;
    a8[1].n128_u64[1] = v19;
    a8[2].n128_u64[0] = v20;
  }

  return result;
}

uint64_t sub_100102738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100150620, 32LL, 7LL);
  *(void *)(v10 + 16) = 0LL;
  uint64_t v11 = v10 + 16;
  *(_BYTE *)(v10 + 24) = 1;
  Swift::UInt64 v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v10);
  v12(a1, a2, a3, sub_100103D84, v10, a4, a5);
  swift_release(v10);
  if (v15)
  {
    swift_release(v10);
  }

  else
  {
    swift_beginAccess(v11, v14, 0LL, 0LL);
    uint64_t v11 = *(void *)(v10 + 16);
    swift_release(v10);
  }

  return v11;
}

void sub_100102830(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X11 }

uint64_t sub_10010286C@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48))(a5, a1, a2, a3, a4);
  if (!v5 && (v7 & 1) != 0)
  {
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v8._uint64_t countAndFlagsBits = sub_1000D42D4(0);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    unint64_t v10 = sub_100012624();
    uint64_t v11 = swift_allocError(&type metadata for KMError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 0xD000000000000026LL;
    *(void *)(v12 + 8) = 0x800000010012D200LL;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(void *)(v12 + 64) = 0LL;
    *(_BYTE *)(v12 + 7sub_100006034(v0 + 2) = 58;
    return swift_willThrow(v11);
  }

  return result;
}

void *sub_1001029D4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v164 = a7;
  uint64_t v15 = sub_1000D406C(a1, a2);
  if (v16)
  {
    uint64_t v17 = v16;
    if (v15 == 0x34365F363878LL && v16 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease(0xE600000000000000LL);
LABEL_6:
      unint64_t v19 = sub_100012624();
      uint64_t v20 = swift_allocError(&type metadata for KMError, v19, 0LL, 0LL);
      *(void *)uint64_t v21 = 0xD00000000000003FLL;
      *(void *)(v21 + 8) = 0x800000010012D000LL;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(void *)(v21 + 64) = 0LL;
      char v22 = 16;
LABEL_7:
      *(_BYTE *)(v21 + 7sub_100006034(v0 + 2) = v22;
      return (void *)swift_willThrow(v20);
    }

    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x34365F363878LL, 0xE600000000000000LL, 0LL);
    swift_bridgeObjectRelease(v17);
    if ((v18 & 1) != 0) {
      goto LABEL_6;
    }
  }

  uint64_t v24 = sub_10008FCEC();
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  sub_1001025E0(a1, a2, a3, v25, v26, a6, v164, &v114);
  if (v9) {
    return (void *)swift_bridgeObjectRelease(v26);
  }
  swift_bridgeObjectRelease(v26);
  sub_100103F80((uint64_t)&v114, (uint64_t)&v157);
  if (!v159)
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)uint64_t __src = 0x742064656C696146LL;
    *(void *)&__src[8] = 0xEF20646E6966206FLL;
    uint64_t v31 = *v24;
    char v30 = (void *)v24[1];
LABEL_13:
    swift_bridgeObjectRetain(v30);
    v32._uint64_t countAndFlagsBits = v31;
    v32._object = v30;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v30);
    v33._uint64_t countAndFlagsBits = 0x746E656D67657320LL;
    v33._object = (void *)0xE800000000000000LL;
    String.append(_:)(v33);
    uint64_t v34 = *(void *)__src;
    unint64_t v35 = *(void *)&__src[8];
LABEL_14:
    unint64_t v36 = sub_100012624();
    uint64_t v20 = swift_allocError(&type metadata for KMError, v36, 0LL, 0LL);
    *(void *)uint64_t v21 = v34;
    *(void *)(v21 + 8) = v35;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(void *)(v21 + 64) = 0LL;
    char v22 = 58;
    goto LABEL_7;
  }

  uint64_t v107 = v159;
  v160[0] = v157;
  v160[1] = v158;
  uint64_t v161 = v159;
  uint64_t v103 = *((void *)&v157 + 1);
  uint64_t v105 = v157;
  uint64_t v101 = v158;
  uint64_t v98 = a8;
  uint64_t v99 = *((void *)&v158 + 1);
  uint64_t v27 = sub_10008FD68();
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  sub_1001025E0(a1, a2, a3, v28, v29, a6, v164, v115);
  uint64_t v97 = a6;
  swift_bridgeObjectRelease(v29);
  sub_100103F80((uint64_t)v115, (uint64_t)&v152);
  if (!v154)
  {
    sub_1000F2344((uint64_t)&v114);
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)uint64_t __src = 0x742064656C696146LL;
    *(void *)&__src[8] = 0xEF20646E6966206FLL;
    uint64_t v31 = *v27;
    char v30 = (void *)v27[1];
    goto LABEL_13;
  }

  unint64_t v93 = v154;
  v155[0] = v152;
  v155[1] = v153;
  unint64_t v156 = v154;
  unint64_t v95 = v152;
  unint64_t v91 = v153;
  unint64_t v92 = *((void *)&v152 + 1);
  unint64_t v90 = *((void *)&v153 + 1);
  Swift::String v37 = sub_10008FEDC();
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  swift_bridgeObjectRetain(v39);
  sub_1001025E0(a1, a2, a3, v38, v39, v97, v164, &v116);
  swift_bridgeObjectRelease(v39);
  sub_100103F80((uint64_t)&v116, (uint64_t)&v147);
  if (!v149)
  {
    sub_1000F2344((uint64_t)v115);
    sub_1000F2344((uint64_t)&v114);
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)uint64_t __src = 0x742064656C696146LL;
    *(void *)&__src[8] = 0xEF20646E6966206FLL;
    uint64_t v31 = *v37;
    char v30 = (void *)v37[1];
    goto LABEL_13;
  }

  unint64_t v89 = v149;
  v150[0] = v147;
  v150[1] = v148;
  unint64_t v151 = v149;
  unint64_t v87 = *((void *)&v147 + 1);
  unint64_t v88 = v147;
  unint64_t v85 = *((void *)&v148 + 1);
  unint64_t v86 = v148;
  Swift::String v40 = sub_10008FF54();
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  swift_bridgeObjectRetain(v42);
  sub_1001025E0(a1, a2, a3, v41, v42, v97, v164, v117);
  int64_t v83 = v40;
  swift_bridgeObjectRelease(v42);
  sub_100103F80((uint64_t)v117, (uint64_t)&v142);
  uint64_t v43 = v144;
  if (!v144)
  {
    sub_1000F2344((uint64_t)v115);
    sub_1000F2344((uint64_t)&v116);
    sub_1000F2344((uint64_t)&v114);
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)uint64_t __src = 0x742064656C696146LL;
    *(void *)&__src[8] = 0xEF20646E6966206FLL;
    uint64_t v31 = *v83;
    char v30 = (void *)v83[1];
    goto LABEL_13;
  }

  v145[0] = v142;
  v145[1] = v143;
  uint64_t v146 = v144;
  uint64_t v82 = *((void *)&v142 + 1);
  uint64_t v84 = v142;
  uint64_t v80 = *((void *)&v143 + 1);
  uint64_t v81 = v143;
  uint64_t v44 = sub_10008FDE0();
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  swift_bridgeObjectRetain(v46);
  sub_1001025E0(a1, a2, a3, v45, v46, v97, v164, &v118);
  unint64_t v78 = v118.n128_u64[1];
  unint64_t v79 = v118.n128_u64[0];
  uint64_t v76 = v120;
  uint64_t v77 = v119;
  uint64_t v75 = v121;
  swift_bridgeObjectRelease(v46);
  uint64_t v47 = sub_10008FE5C();
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  swift_bridgeObjectRetain(v49);
  sub_1001025E0(a1, a2, a3, v48, v49, v97, v164, &v122);
  uint64_t v73 = v43;
  unint64_t v50 = v122.n128_u64[1];
  unint64_t v74 = v122.n128_u64[0];
  unint64_t v71 = v124;
  unint64_t v72 = v123;
  unint64_t v70 = v125;
  swift_bridgeObjectRelease(v49);
  uint64_t v51 = sub_10008FFD4();
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  swift_bridgeObjectRetain(v53);
  sub_1001025E0(a1, a2, a3, v52, v53, v97, v164, v126);
  __n128 v68 = v126[1];
  __n128 v69 = v126[0];
  uint64_t v67 = v127;
  swift_bridgeObjectRelease(v53);
  *(void *)uint64_t __src = v105;
  *(void *)&__src[8] = v103;
  *(void *)&__src[16] = v101;
  *(void *)&__src[24] = v99;
  *(void *)&__src[32] = v107;
  *(void *)&__src[40] = v95;
  *(void *)&__src[48] = v92;
  *(void *)&__src[56] = v91;
  *(void *)&__src[64] = v90;
  *(void *)&__src[72] = v93;
  *(void *)&__src[80] = v88;
  *(void *)&__src[88] = v87;
  *(void *)&__src[96] = v86;
  *(void *)&__src[104] = v85;
  *(void *)&__src[112] = v89;
  *(void *)&__src[120] = v84;
  *(void *)&__src[128] = v82;
  *(void *)&__src[136] = v81;
  *(void *)&__src[144] = v80;
  *(void *)&__src[152] = v73;
  *(void *)&__src[160] = v79;
  *(void *)&__src[168] = v78;
  *(void *)&__src[176] = v77;
  *(void *)&__src[184] = v76;
  *(void *)&__src[192] = v75;
  *(void *)&__src[200] = v74;
  unint64_t v108 = v50;
  *(void *)&__src[208] = v50;
  unint64_t v54 = v72;
  *(void *)&__src[216] = v72;
  unint64_t v55 = v71;
  *(void *)&__src[224] = v71;
  *(void *)&__src[232] = v70;
  *(__n128 *)&__src[240] = v69;
  *(__n128 *)&__src[256] = v68;
  *(void *)&__src[272] = v67;
  memcpy(__dst, __src, sizeof(__dst));
  if (*(void *)&v160[0])
  {
    sub_100103FC8(__src);
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v57 = *v24;
    uint64_t v56 = (void *)v24[1];
    swift_bridgeObjectRetain(v56);
    v58._uint64_t countAndFlagsBits = v57;
    v58._object = v56;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v56);
    v59._object = (void *)0x800000010012CFE0LL;
    v59._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v59);
    uint64_t v34 = 0x742074657366664FLL;
    unint64_t v35 = 0xEA0000000000206FLL;
    goto LABEL_14;
  }

  if ((a5 & 1) != 0)
  {
    uint64_t v112 = *(void *)&v155[0];
    sub_100103F80((uint64_t)&v118, (uint64_t)v138);
    if (v139)
    {
      v140[0] = v138[0];
      v140[1] = v138[1];
      uint64_t v141 = v139;
      unint64_t v106 = sub_100104434((unint64_t *)v155, (unint64_t *)v140);
    }

    else
    {
      unint64_t v106 = *((void *)&v155[0] + 1);
    }

    sub_100103F80((uint64_t)&v122, (uint64_t)v136);
    if (v137)
    {
      unint64_t v89 = v70;
    }

    else
    {
      swift_bridgeObjectRetain(v156);
      unint64_t v74 = v95;
      unint64_t v54 = v91;
      unint64_t v108 = v92;
      unint64_t v55 = v90;
      unint64_t v89 = v93;
    }

    sub_1001048D8((uint64_t)&v122);
    unint64_t v87 = v108;
    unint64_t v88 = v74;
    unint64_t v85 = v55;
    unint64_t v86 = v54;
  }

  else
  {
    swift_bridgeObjectRetain(v151);
    unint64_t v106 = 0LL;
    uint64_t v112 = 0LL;
  }

  v163[0] = v88;
  v163[1] = v87;
  v163[2] = v86;
  void v163[3] = v85;
  v163[4] = v89;
  unint64_t v60 = sub_100104434((unint64_t *)v160, v163);
  swift_bridgeObjectRelease(v89);
  unint64_t v61 = sub_100104434((unint64_t *)v150, (unint64_t *)v145);
  uint64_t v109 = *((void *)&v145[0] + 1);
  uint64_t v102 = *(void *)&v145[0];
  uint64_t v104 = *(void *)&v150[0];
  sub_100103F80((uint64_t)&v122, (uint64_t)v132);
  if (v133)
  {
    v134[0] = v132[0];
    v134[1] = v132[1];
    uint64_t v135 = v133;
    uint64_t v62 = *(void *)&v132[0];
    unint64_t v100 = sub_100104434((unint64_t *)v134, (unint64_t *)v155);
  }

  else
  {
    uint64_t v62 = 0LL;
    unint64_t v100 = 0LL;
  }

  sub_100103F80((uint64_t)&v118, (uint64_t)v128);
  if (v129)
  {
    v130[0] = v128[0];
    v130[1] = v128[1];
    uint64_t v131 = v129;
    uint64_t v96 = *(void *)&v128[0];
    unint64_t v94 = sub_100104434((unint64_t *)v130, (unint64_t *)v150);
  }

  else
  {
    unint64_t v94 = 0LL;
    uint64_t v96 = 0LL;
  }

  sub_100102830(a1, a2, a3, a4);
  uint64_t v64 = v63;
  sub_10010472C((uint64_t)__dst, a4);
  uint64_t v66 = v65;
  uint64_t result = sub_100103FC8(__src);
  *uint64_t v98 = v66;
  v98[1] = v64;
  v98[2] = 0LL;
  v98[3] = v60;
  v98[4] = v62;
  v98[5] = v100;
  v98[6] = v112;
  v98[7] = v106;
  v98[8] = v96;
  v98[9] = v94;
  v98[10] = v104;
  v98[11] = v61;
  v98[12] = v102;
  v98[13] = v109;
  return result;
}

uint64_t sub_100103540(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1000D4150(a1);
  uint64_t v14 = v13;
  sub_1001029D4(v12, v13, v15, a3, a4, a5, a6, v31);
  if (v6)
  {
    uint64_t v16 = swift_bridgeObjectRelease(v14);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    uint64_t v18 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_10010F110;
    uint64_t v32 = v6;
    swift_errorRetain(v6);
    uint64_t v20 = sub_100005FB4(&qword_10015AB20);
    uint64_t v21 = String.init<A>(describing:)(&v32, v20);
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_100026B64();
    *(void *)(v19 + 3sub_100006034(v0 + 2) = v21;
    *(void *)(v19 + sub_10007CFB4(v0 + 40) = v23;
    unint64_t v24 = sub_100026BA8();
    uint64_t v25 = (void *)static OS_os_log.default.getter(v24);
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  v25,  "Could not generate payload properties %{public}s",  48LL,  2LL,  v19);
    swift_bridgeObjectRelease(v19);

    return swift_willThrow(v26);
  }

  else
  {
    swift_bridgeObjectRelease(v14);
    if ((a4 & 1) != 0)
    {
      unint64_t v28 = sub_100026BA8();
      uint64_t v29 = (void *)static OS_os_log.default.getter(v28);
      uint64_t v30 = static os_log_type_t.default.getter(v29);
      os_log(_:dso:log:type:_:)( "Encoding extra payload properties needed for builds that have split RO RX regions in their kernelcache MachO",  108LL,  2LL,  &_mh_execute_header,  v29,  v30,  _swiftEmptyArrayStorage);

      return sub_100101B90();
    }

    else
    {
      return sub_100101988();
    }
  }

Swift::Int sub_10010370C(uint64_t a1, uint64_t a2)
{
  __int128 v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_10015B908);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          __int128 v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

void sub_100103A14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100006114(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100103B64();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v1sub_100006034(v0 + 2) = a1;
      return;
    }

void sub_100103B64()
{
  Swift::UInt64 v1 = v0;
  sub_100005FB4(&qword_10015B908);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *Swift::UInt64 v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

BOOL sub_100103D10(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x70uLL) == 0;
}

unint64_t sub_100103D30()
{
  unint64_t result = qword_1001744E0[0];
  if (!qword_1001744E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BC78, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_1001744E0);
  }

  return result;
}

uint64_t sub_100103D74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100103D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)a1 != 5) {
    return 2LL;
  }
  uint64_t v5 = v4;
  if (*(_DWORD *)(a1 + 8) == 6)
  {
    if (*(_DWORD *)(a1 + 12) == 68)
    {
      uint64_t v7 = nullsub_1(*(void *)(a1 + 272), a2, a3, a4);
      swift_beginAccess(v5 + 16, v19, 1LL, 0LL);
      *(void *)(v5 + 16) = v7;
      *(_BYTE *)(v5 + 24) = 0;
      goto LABEL_9;
    }

    uint64_t v15 = static os_log_type_t.error.getter(a1);
    uint64_t v16 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v11 = swift_allocObject(v16, 112LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_10010F440;
    *(void *)(v11 + 56) = &type metadata for Int;
    *(void *)(v11 + 64) = &protocol witness table for Int;
    *(void *)(v11 + 3sub_100006034(v0 + 2) = 68LL;
    *(void *)(v11 + 96) = sub_100005FB4(&qword_10015C528);
    *(void *)(v11 + 104) = sub_100104E74();
    *(void *)(v11 + 7sub_100006034(v0 + 2) = a1 + 12;
    unint64_t v17 = sub_100026BA8();
    unint64_t v14 = (void *)static OS_os_log.default.getter(v17);
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v14,  "While calculating get_LC_UNIXTHREAD_PCAddress, could not find ARM_THREAD_STATE64 state type with %d size. It was %d count",  121LL,  2LL,  v11);
  }

  else
  {
    uint64_t v9 = static os_log_type_t.error.getter(a1);
    uint64_t v10 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_10010F110;
    int v12 = *(_DWORD *)(a1 + 8);
    *(void *)(v11 + 56) = &type metadata for UInt32;
    *(void *)(v11 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v11 + 3sub_100006034(v0 + 2) = v12;
    unint64_t v13 = sub_100026BA8();
    unint64_t v14 = (void *)static OS_os_log.default.getter(v13);
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v14,  "While calculating get_LC_UNIXTHREAD_PCAddress could not find ARM_THREAD_STATE64 flavor: %d",  90LL,  2LL,  v11);
  }

  swift_bridgeObjectRelease(v11);

LABEL_9:
  swift_beginAccess(v5 + 16, &v18, 0LL, 0LL);
  if (*(_BYTE *)(v5 + 24)) {
    return 2LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100103F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015C518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100103FC8(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[24];
  uint64_t v6 = a1[29];
  uint64_t v7 = a1[34];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100104050(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1869374315 && a2 == 0xE400000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1869374315LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 1885692779 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1885692779LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 1718772587 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718772587LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 2054316907 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054316907LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else if (a1 == 1718838123 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718838123LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 4LL;
  }

  else if (a1 == 2054382443 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054382443LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 5LL;
  }

  else if (a1 == 1719165803 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1719165803LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 6LL;
  }

  else if (a1 == 2054710123 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054710123LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 7LL;
  }

  else if (a1 == 1717724011 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1717724011LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 8LL;
  }

  else if (a1 == 2053268331 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2053268331LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 9LL;
  }

  else if (a1 == 1719100267 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1719100267LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 10LL;
  }

  else if (a1 == 2054644587 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054644587LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 11LL;
  }

  else if (a1 == 1718379371 && a2 == 0xE400000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718379371LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 12LL;
  }

  else if (a1 == 2053923691 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 13LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(2053923691LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 13LL;
    }
    else {
      return 14LL;
    }
  }

unint64_t sub_100104434(unint64_t *a1, unint64_t *a2)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *a1;
  unint64_t v7 = sub_1000E0BD4(*a1, *a2);
  unint64_t v8 = v7;
  if (v2)
  {
    os_log_type_t v9 = static os_log_type_t.error.getter(v7);
    uint64_t v10 = a2[3];
    unint64_t v24 = a2[4];
    sub_100026BA8();
    sub_1001048D8((uint64_t)a1);
    sub_1001048D8((uint64_t)a2);
    sub_1001048D8((uint64_t)a1);
    sub_1001048D8((uint64_t)a2);
    sub_1001048D8((uint64_t)a2);
    sub_1001048D8((uint64_t)a1);
    sub_1001048D8((uint64_t)a2);
    uint64_t v11 = sub_1001048D8((uint64_t)a1);
    int v12 = (os_log_s *)static OS_os_log.default.getter(v11);
    if (os_log_type_enabled(v12, v9))
    {
      os_log_type_t type = v9;
      unint64_t v21 = v6;
      unint64_t v13 = v8;
      uint64_t v14 = a1[3];
      unint64_t v15 = a1[4];
      uint64_t v20 = v10;
      uint64_t v16 = swift_slowAlloc(42LL, -1LL);
      uint64_t v22 = swift_slowAlloc(64LL, -1LL);
      uint64_t v27 = v22;
      *(_DWORD *)uint64_t v16 = 136315906;
      swift_bridgeObjectRetain(v15);
      unint64_t v17 = v15;
      unint64_t v8 = v13;
      uint64_t v25 = sub_1000058CC(v14, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
      sub_1000F2344((uint64_t)a1);
      sub_1000F2344((uint64_t)a1);
      sub_1000F2344((uint64_t)a1);
      *(_WORD *)(v16 + 1sub_100006034(v0 + 2) = 2080;
      swift_bridgeObjectRetain(v24);
      uint64_t v25 = sub_1000058CC(v20, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 14, v16 + 22);
      sub_1000F2344((uint64_t)a2);
      sub_1000F2344((uint64_t)a2);
      sub_1000F2344((uint64_t)a2);
      *(_WORD *)(v16 + 2sub_100006034(v0 + 2) = 2048;
      sub_1000F2344((uint64_t)a2);
      uint64_t v25 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 24, v16 + 32);
      sub_1000F2344((uint64_t)a2);
      *(_WORD *)(v16 + 3sub_100006034(v0 + 2) = 2048;
      sub_1000F2344((uint64_t)a1);
      uint64_t v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 34, v16 + 42);
      sub_1000F2344((uint64_t)a1);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  type,  "Integer overflow detected: %s offset from segment %s offset (%llu - %llu)",  (uint8_t *)v16,  0x2Au);
      swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      sub_1000F2344((uint64_t)a1);
      sub_1000F2344((uint64_t)a2);

      sub_1000F2344((uint64_t)a1);
      sub_1000F2344((uint64_t)a1);
      sub_1000F2344((uint64_t)a2);
      sub_1000F2344((uint64_t)a2);
      sub_1000F2344((uint64_t)a2);
      uint64_t v18 = sub_1000F2344((uint64_t)a1);
    }

    swift_willThrow(v18);
  }

  return v8;
}

void sub_10010472C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100104760(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1001048D8(uint64_t a1)
{
  return a1;
}

unint64_t sub_100104904()
{
  unint64_t result = qword_10015C520;
  if (!qword_10015C520)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BB64, &type metadata for MachOKernelcacheTags);
    atomic_store(result, (unint64_t *)&qword_10015C520);
  }

  return result;
}

__n128 initializeWithCopy for MachOKernelcacheTags(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for MachOKernelcacheTags(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MachOKernelcacheTags(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 11sub_100006034(v0 + 2) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MachOKernelcacheTags()
{
  return &type metadata for MachOKernelcacheTags;
}

uint64_t destroy for MachOSegment(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for MachOSegment(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for MachOSegment(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v3 = a2[4];
  uint64_t v4 = a1[4];
  a1[4] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MachOSegment(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachOSegment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MachOSegment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3sub_100006034(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10007CFB4(v0 + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MachOSegment()
{
  return &type metadata for MachOSegment;
}

uint64_t getEnumTagSinglePayload for MachOKernelcacheTags.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for MachOKernelcacheTags.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_100104C2C + 4 * byte_10011BACD[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100104C60 + 4 * byte_10011BAC8[v4]))();
}

uint64_t sub_100104C60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100104C70LL);
  }
  return result;
}

uint64_t sub_100104C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100104C84LL);
  }
  *(_BYTE *)__n128 result = a2 + 13;
  return result;
}

uint64_t sub_100104C88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104C90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MachOKernelcacheTags.CodingKeys()
{
  return &type metadata for MachOKernelcacheTags.CodingKeys;
}

unint64_t sub_100104CB0()
{
  unint64_t result = qword_1001747F0[0];
  if (!qword_1001747F0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BC50, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_1001747F0);
  }

  return result;
}

unint64_t sub_100104CF8()
{
  unint64_t result = qword_100174900;
  if (!qword_100174900)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BBC0, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100174900);
  }

  return result;
}

unint64_t sub_100104D40()
{
  unint64_t result = qword_100174908[0];
  if (!qword_100174908[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BBE8, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_100174908);
  }

  return result;
}

uint64_t sub_100104D84()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100104DA8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100104DD4(uint64_t *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = (void *)v1[4];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v9 = a1[4];
  if ((sub_1000E0080(v7, v9, v2, v3) & 1) == 0) {
    return 2LL;
  }
  swift_beginAccess(v4 + 2, v12, 1LL, 0LL);
  uint64_t v10 = v4[6];
  __int128 v4[2] = v5;
  void v4[3] = v6;
  void v4[4] = v8;
  v4[5] = v7;
  v4[6] = v9;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRetain(v9);
  return 0LL;
}

unint64_t sub_100104E74()
{
  unint64_t result = qword_10015C530;
  if (!qword_10015C530)
  {
    uint64_t v1 = sub_100012010(&qword_10015C528);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C530);
  }

  return result;
}

uint64_t sub_100104EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_100104F38(v10, v7, v8);
}

uint64_t sub_100104F38(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015C538);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_100104FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015C538);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_100104FF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100005110(a1, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = v5(v3, v4);
  uint64_t v8 = v7;
  uint64_t v9 = String.utf8CString.getter(v6);
  swift_bridgeObjectRelease(v8);
  io_registry_entry_t v10 = IORegistryEntryFromPath(kIOMainPortDefault, (const char *)(v9 + 32));
  swift_release(v9);
  if (!v10)
  {
    _StringGuts.grow(_:)(45LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v24._uint64_t countAndFlagsBits = v5(v3, v4);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    unint64_t v26 = sub_100012624();
    uint64_t v27 = swift_allocError(&type metadata for KMError, v26, 0LL, 0LL);
    *(void *)uint64_t v28 = 0xD00000000000002BLL;
    *(void *)(v28 + 8) = 0x800000010012D330LL;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(void *)(v28 + 64) = 0LL;
    *(_BYTE *)(v28 + 7sub_100006034(v0 + 2) = 10;
    return swift_willThrow(v27);
  }

  uint64_t v53 = v5;
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100005110(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
  uint64_t v14 = v13;
  unint64_t v15 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v10, v15, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v54 = 0xD000000000000018LL;
    unint64_t v55 = 0x800000010012D310LL;
    uint64_t v30 = a1[3];
    uint64_t v31 = a1[4];
    sub_100005110(a1, v30);
    v32._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    uint64_t v33 = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v33);
    v34._uint64_t countAndFlagsBits = 544106784LL;
    v34._object = (void *)0xE400000000000000LL;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = v53(v3, v4);
    int64_t v36 = v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v36);
    unint64_t v37 = sub_100012624();
    uint64_t v38 = swift_allocError(&type metadata for KMError, v37, 0LL, 0LL);
    *(void *)uint64_t v39 = 0xD000000000000018LL;
    *(void *)(v39 + 8) = 0x800000010012D310LL;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(void *)(v39 + 64) = 0LL;
    *(_BYTE *)(v39 + 7sub_100006034(v0 + 2) = 10;
    swift_willThrow(v38);
    return IOObjectRelease(v10);
  }

  CFTypeID v17 = CFGetTypeID(CFProperty);
  if (CFStringGetTypeID() == v17)
  {
    swift_unknownObjectRetain(CFProperty);
    uint64_t v18 = objc_opt_self(&OBJC_CLASS___NSString);
    uint64_t v19 = swift_dynamicCastObjCClass(CFProperty, v18);
    if (v19)
    {
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;
      swift_unknownObjectRelease(CFProperty);
      int64_t v23 = v56;
      v56[3] = (uint64_t)&type metadata for String;
      swift_unknownObjectRelease(CFProperty);
      *int64_t v23 = v20;
      v23[1] = v22;
    }

    else
    {
      swift_unknownObjectRelease_n(CFProperty, 2LL);
      unint64_t v50 = v56;
      *(_OWORD *)uint64_t v56 = 0u;
      *((_OWORD *)v50 + 1) = 0u;
    }

    return IOObjectRelease(v10);
  }

  if (CFNumberGetTypeID() != v17)
  {
    if (CFDataGetTypeID() == v17)
    {
      swift_unknownObjectRetain(CFProperty);
      uint64_t v44 = objc_opt_self(&OBJC_CLASS___NSData);
      uint64_t v45 = swift_dynamicCastObjCClass(CFProperty, v44);
      if (v45)
      {
        uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
        uint64_t v48 = v47;
        swift_unknownObjectRelease(CFProperty);
        uint64_t v49 = v56;
        v56[3] = (uint64_t)&type metadata for Data;
        swift_unknownObjectRelease(CFProperty);
        *uint64_t v49 = v46;
        v49[1] = v48;
      }

      else
      {
        swift_unknownObjectRelease_n(CFProperty, 2LL);
        uint64_t v52 = v56;
        *(_OWORD *)uint64_t v56 = 0u;
        *((_OWORD *)v52 + 1) = 0u;
      }
    }

    else
    {
      uint64_t v51 = v56;
      *(_OWORD *)uint64_t v56 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      swift_unknownObjectRelease(CFProperty);
    }

    return IOObjectRelease(v10);
  }

  swift_unknownObjectRetain(CFProperty);
  uint64_t v40 = objc_opt_self(&OBJC_CLASS___NSNumber);
  uint64_t v41 = swift_dynamicCastObjCClass(CFProperty, v40);
  if (!v41)
  {
    swift_unknownObjectRelease(CFProperty);
    uint64_t v42 = v56;
    goto LABEL_19;
  }

  unint64_t v54 = 0LL;
  LOBYTE(v55) = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)(v41, &v54);
  swift_unknownObjectRelease(CFProperty);
  uint64_t v42 = v56;
  if ((v55 & 1) != 0)
  {
LABEL_19:
    swift_unknownObjectRelease(CFProperty);
    *(_OWORD *)uint64_t v42 = 0u;
    *((_OWORD *)v42 + 1) = 0u;
    return IOObjectRelease(v10);
  }

  unint64_t v43 = v54;
  v56[3] = (uint64_t)&type metadata for Int;
  swift_unknownObjectRelease(CFProperty);
  *uint64_t v42 = v43;
  return IOObjectRelease(v10);
}

uint64_t type metadata accessor for RealDeviceProperties()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd20RealDeviceProperties);
}

uint64_t sub_100105494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v10);
  v18[1] = a1;
  uint64_t v19 = String.data(using:allowLossyConversion:)(v12, 1LL, a1, a2);
  unint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v14 >> 60 != 15)
  {
    v20[0] = v19;
    v20[1] = v14;
    uint64_t v16 = *(void (**)(void *, void *, unint64_t, uint64_t, uint64_t))(a4 + 56);
    unint64_t v17 = sub_1000B2528();
    v16(v20, &type metadata for Data, v17, a3, a4);
    return sub_10002193C(v19, v14);
  }

  return result;
}

uint64_t sub_1001056F0()
{
  return 950287LL;
}

uint64_t sub_1001056FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 200))();
}

uint64_t protocol witness for TextOutputStream.write(_:) in conformance NSFileHandle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10011BFA0, a3);
  return sub_100105494(a1, a2, a3, WitnessTable);
}

id sub_10010576C()
{
  return [*v0 offsetInFile];
}

id sub_10010577C()
{
  return [*v0 seekToEndOfFile];
}

id sub_10010578C(uint64_t a1)
{
  return [*v1 seekToFileOffset:a1];
}

uint64_t sub_1001057A0(uint64_t a1, uint64_t a2)
{
  return sub_1001063A0( a1,  a2,  (SEL *)&selRef_readDataToEndOfFile,  (uint64_t (*)(void))&static Data._unconditionallyBridgeFromObjectiveC(_:));
}

uint64_t sub_1001057B4(uint64_t a1)
{
  id v2 = [*v1 readDataOfLength:a1];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10010580C()
{
  return NSFileHandle.write<A>(contentsOf:)();
}

id sub_10010582C()
{
  return [*v0 closeFile];
}

uint64_t sub_10010583C@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  id v36 = a4;
  uint64_t v9 = type metadata accessor for POSIXError(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t v13 = strlen(a1);
  size_t v14 = v13 + 1;
  if (__OFADD__(v13, 1LL)) {
    __break(1u);
  }
  unint64_t v37 = a5;
  unint64_t v15 = (char *)swift_slowAlloc(v13 + 1, -1LL);
  strlcpy(v15, a1, v14);
  uint64_t v16 = mkstemp(v15);
  if ((v16 & 0x80000000) != 0)
  {
    uint64_t v31 = sub_1000BCBB8((uint64_t)v12);
    POSIXError._nsError.getter(v31);
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_willThrow(v32);
  }

  else
  {
    id v17 = [objc_allocWithZone(NSFileHandle) initWithFileDescriptor:v16 closeOnDealloc:1];
    sub_100005F70(a2, (uint64_t)v39);
    uint64_t v18 = sub_100005FB4(&qword_10015B160);
    swift_dynamicCast(v38, v39, v18, &type metadata for Data, 7LL);
    uint64_t v19 = v38[0];
    unint64_t v20 = v38[1];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001226C(v19, v20);
    [v17 writeData:isa];

    uint64_t v22 = String.init(cString:)(v15);
    uint64_t v24 = v23;
    if (a3)
    {
      type metadata accessor for FileAttributeKey();
      sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
      Class v25 = Dictionary._bridgeToObjectiveC()().super.isa;
      NSString v26 = String._bridgeToObjectiveC()();
      v39[0] = 0LL;
      unsigned int v27 = [v36 setAttributes:v25 ofItemAtPath:v26 error:v39];

      id v28 = v39[0];
      if (!v27)
      {
        id v33 = v39[0];
        swift_bridgeObjectRelease(v24);
        _convertNSErrorToError(_:)(v28);

        swift_willThrow(v34);
        return swift_slowDealloc(v15, -1LL, -1LL);
      }

      id v29 = v39[0];
    }

    uint64_t v30 = v37;
    uint64_t *v37 = v22;
    v30[1] = v24;
  }

  return swift_slowDealloc(v15, -1LL, -1LL);
}

uint64_t sub_100105AF0@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10010583C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), a2);
}

void *sub_100105B0C( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    uint64_t result = _StringGuts._slowWithCString<A>(_:)(&v9, a1, a2);
    if (!v4) {
      return (void *)v9;
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t result = a1(&v8, v10);
    if (!v4) {
      return (void *)v8;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = _StringObject.sharedUTF8.getter(a3, a4);
    }
    uint64_t result = a1(v10, (void *)v6);
    if (!v4) {
      return (void *)v10[0];
    }
  }

  return result;
}

void *sub_100105BE4@<X0>( uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    type metadata accessor for URL(0LL);
    return _StringGuts._slowWithCString<A>(_:)(a5, a1, a2);
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      v10[0] = a3;
      v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = v10;
    }

    else if ((a3 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v8 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
    }

    return (void *)a1(v8);
  }

double sub_100105CB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = String.utf8CString.getter(a1);
  uint64_t v7 = open(_:_:)(v6 + 32, 0LL);
  uint64_t v8 = swift_release(v6);
  if ((_DWORD)v7 == -1)
  {
    int v11 = errno.getter(v8);
    uint64_t v12 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
    *(_OWORD *)(v13 + 16) = xmmword_10010F440;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_100026B64();
    *(void *)(v13 + 3sub_100006034(v0 + 2) = a1;
    *(void *)(v13 + sub_10007CFB4(v0 + 40) = a2;
    *(void *)(v13 + 96) = &type metadata for Int32;
    *(void *)(v13 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 7sub_100006034(v0 + 2) = v11;
    sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    swift_bridgeObjectRetain(a2);
    unint64_t v15 = (void *)static OS_os_log.default.getter(v14);
    uint64_t v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)( "failed to open file at path: %{public}s (%d)",  44LL,  2LL,  &_mh_execute_header,  v15,  v16,  v13);
    swift_bridgeObjectRelease(v13);

    *(void *)(a3 + 3sub_100006034(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  else
  {
    id v9 = [objc_allocWithZone(NSFileHandle) initWithFileDescriptor:v7 closeOnDealloc:1];
    *(void *)(a3 + 24) = sub_100006094(0LL, &qword_10015C5E0, &OBJC_CLASS___NSFileHandle_ptr);
    *(void *)(a3 + 3sub_100006034(v0 + 2) = sub_100108094(&qword_10015C5E8, (uint64_t)&unk_10011BFA0);
    *(void *)a3 = v9;
  }

  return result;
}

BOOL sub_100105E48(int a1, int a2, copyfile_state_t s)
{
  return sub_10010756C(a1, s);
}

uint64_t sub_100105E50@<X0>(const char *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = (void *)swift_slowAlloc(32LL, -1LL);
  uint64_t v5 = sub_1000902F0();
  uint64_t v6 = String.utf8CString.getter(*v5);
  ssize_t v7 = getxattr(a1, (const char *)(v6 + 32), v4, 0x20uLL, 0, 0);
  swift_release(v6);
  uint64_t result = swift_slowDealloc(v4, -1LL, -1LL);
  *a2 = v7 > 0;
  return result;
}

uint64_t sub_100105EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for POSIXError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = URL.path.getter(v10);
  uint64_t v15 = v14;
  uint64_t v16 = String.utf8CString.getter(v13);
  swift_bridgeObjectRelease(v15);
  int v17 = open(_:_:)(v16 + 32, 0LL);
  uint64_t v18 = swift_release(v16);
  if (v17 < 0)
  {
    uint64_t v20 = sub_1000BCBB8((uint64_t)v12);
    POSIXError._nsError.getter(v20);
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_willThrow(v21);
  }

  else
  {
    __chkstk_darwin(v18);
    *(&v22 - 4) = a2;
    *(&v22 - sub_10003A584(v0 + 3) = a3;
    *((_DWORD *)&v22 - 4) = v17;
    *(&v22 - 1) = a1;
    sub_100105BE4((uint64_t (*)(void *))sub_100107550, (uint64_t)(&v22 - 6), a2, a3, a4);
    return close(v17);
  }

size_t sub_100106038(const char *a1, int a2)
{
  uint64_t v4 = type metadata accessor for POSIXError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  ssize_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t result = strlen(a1);
  size_t v9 = result + 1;
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = (char *)swift_slowAlloc(result + 1, -1LL);
    strlcpy(v10, a1, v9);
    uint64_t v11 = mkdtempat_np(a2, v10);
    if (v11)
    {
      uint64_t v12 = String.init(cString:)(v11);
      uint64_t v14 = v13;
      URL.appendingPathComponent(_:)(v12, v13);
      swift_bridgeObjectRelease(v14);
      return swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      uint64_t v15 = sub_1000BCBB8((uint64_t)v7);
      POSIXError._nsError.getter(v15);
      uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_willThrow(v16);
      return swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  return result;
}

void sub_100106170(uint64_t a1)
{
  uint64_t v2 = v1;
  char v24 = 0;
  URL.path.getter(a1);
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  LOBYTE(v4) = [v2 fileExistsAtPath:v5 isDirectory:&v24];

  if ((v4 & 1) != 0)
  {
    if ((v24 & 1) != 0) {
      return;
    }
    _StringGuts.grow(_:)(21LL);
    uint64_t v8 = (void *)URL.path.getter(v7);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v23[0] = v8;
    v23[1] = v10;
    v11._object = (void *)0x8000000100126700LL;
    v11._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v11);
    unint64_t v12 = sub_100012624();
    uint64_t v13 = swift_allocError(&type metadata for KMError, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = v8;
    *(void *)(v14 + 8) = v10;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(void *)(v14 + 64) = 0LL;
    *(_BYTE *)(v14 + 7sub_100006034(v0 + 2) = 19;
  }

  else
  {
    URL._bridgeToObjectiveC()(v6);
    uint64_t v16 = v15;
    unint64_t v17 = sub_10001BD10((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for FileAttributeKey();
    sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    v23[0] = 0LL;
    unsigned int v19 = [v2 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:isa error:v23];

    id v20 = v23[0];
    if (v19)
    {
      id v21 = v23[0];
      return;
    }

    id v22 = v23[0];
    _convertNSErrorToError(_:)(v20);
  }

  swift_willThrow(v13);
}

uint64_t sub_10010638C(uint64_t a1, uint64_t a2)
{
  return sub_1001063A0( a1,  a2,  (SEL *)&selRef_currentDirectoryPath,  (uint64_t (*)(void))&static String._unconditionallyBridgeFromObjectiveC(_:));
}

uint64_t sub_1001063A0(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(void))
{
  id v6 = [*v4 *a3];
  uint64_t v7 = a4();

  return v7;
}

uint64_t sub_1001063F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  size_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.init(fileURLWithPath:)(a1, a2);
  uint64_t v10 = Data.init(contentsOf:options:)(v9, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v10;
}

void *sub_1001064C0(uint64_t a1, objc_class *a2, uint64_t a3)
{
  return sub_1001064E0(a1, a2, a3);
}

void *sub_1001064E0(uint64_t a1, Class isa, uint64_t a3)
{
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v8 = v7;
  if (isa)
  {
    type metadata accessor for URLResourceKey();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  id v16 = 0LL;
  id v9 = [v4 contentsOfDirectoryAtURL:v8 includingPropertiesForKeys:isa options:a3 error:&v16];

  id v10 = v16;
  if (v9)
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v11);
    id v12 = v10;
  }

  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v14);
  }

  return v4;
}

void *sub_100106600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107BD0(a1, a2, a3);
}

id sub_100106614(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class a5)
{
  uint64_t v8 = *v5;
  NSString v9 = String._bridgeToObjectiveC()();
  if (a4 >> 60 == 15)
  {
    Class isa = 0LL;
    if (!a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
LABEL_5:
    type metadata accessor for FileAttributeKey();
    sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
    a5 = Dictionary._bridgeToObjectiveC()().super.isa;
  }

id sub_1001066F8(uint64_t a1, char a2, objc_class *a3)
{
  return sub_100106718(a1, a2, a3);
}

id sub_100106718(uint64_t a1, char a2, Class isa)
{
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v8 = v7;
  if (isa)
  {
    type metadata accessor for FileAttributeKey();
    sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

  id v14 = 0LL;
  unsigned int v9 = [v4 createDirectoryAtURL:v8 withIntermediateDirectories:a2 & 1 attributes:isa error:&v14];

  id v10 = v14;
  if (v9) {
    return v14;
  }
  id v12 = v14;
  _convertNSErrorToError(_:)(v10);

  return (id)swift_willThrow(v13);
}

uint64_t sub_100106840(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  return sub_100107640(a1, a2, a3);
}

void sub_100106854(uint64_t a1)
{
}

uint64_t sub_100106874()
{
  return sub_100106894();
}

uint64_t sub_100106894()
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v12 = 0LL;
  id v3 = [v0 attributesOfItemAtPath:v2 error:&v12];

  id v4 = v12;
  if (v3)
  {
    type metadata accessor for FileAttributeKey();
    uint64_t v6 = v5;
    uint64_t v7 = sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
    uint64_t v1 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, v6, (char *)&type metadata for Any + 8, v7);
    id v8 = v4;
  }

  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v10);
  }

  return v1;
}

uint64_t sub_1001069A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_100105EF0(a1, a2, a3, a4);
}

id sub_1001069B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return sub_1001069D8(a1, a2, a3, a4, a5, a6);
}

id sub_1001069D8(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  id v12 = v11;
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }
  id v21 = 0LL;
  unsigned int v16 = [v7 replaceItemAtURL:v12 withItemAtURL:v15 backupItemName:a4 options:a5 resultingItemURL:a6 error:&v21];

  id v17 = v21;
  if (v16) {
    return v21;
  }
  id v19 = v21;
  _convertNSErrorToError(_:)(v17);

  return (id)swift_willThrow(v20);
}

id sub_100106AFC()
{
  return sub_100106B1C();
}

id sub_100106B1C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v7 = 0LL;
  unsigned int v2 = [v0 removeItemAtPath:v1 error:&v7];

  id v3 = v7;
  if (v2) {
    return v7;
  }
  id v5 = v7;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow(v6);
}

id sub_100106BD4()
{
  return sub_100106BF4();
}

id sub_100106BF4()
{
  NSString v1 = v0;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  id v3 = v2;
  id v8 = 0LL;
  LODWORD(v1) = [v1 removeItemAtURL:v2 error:&v8];

  id v4 = v8;
  if ((_DWORD)v1) {
    return v8;
  }
  id v6 = v8;
  _convertNSErrorToError(_:)(v4);

  return (id)swift_willThrow(v7);
}

uint64_t sub_100106CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.init(fileURLWithPath:)(a1, a2);
  uint64_t v12 = Data.init(contentsOf:options:)(v11, a3);
  uint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F680;
  *a4 = v12;
  a4[1] = v14;
  return result;
}

void *sub_100106DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a2;
  uint64_t v7 = *v4;
  uint64_t v13 = a1;
  swift_bridgeObjectRetain(a2);
  v8._uint64_t countAndFlagsBits = 0x5858585858582ELL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = v14;
  _OWORD v12[2] = a3;
  void v12[3] = a4;
  v12[4] = v7;
  uint64_t v10 = sub_100105B0C((void *(*)(uint64_t *__return_ptr, void *))sub_100108400, (uint64_t)v12, v13, v14);
  swift_bridgeObjectRelease(v9);
  return v10;
}

id sub_100106E5C()
{
  return sub_100106E7C();
}

id sub_100106E7C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v8 = 0LL;
  unsigned int v3 = [v0 createSymbolicLinkAtPath:v1 withDestinationPath:v2 error:&v8];

  id v4 = v8;
  if (v3) {
    return v8;
  }
  id v6 = v8;
  _convertNSErrorToError(_:)(v4);

  return (id)swift_willThrow(v7);
}

id sub_100106F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *v3;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 fileExistsAtPath:v6 isDirectory:a3];

  return v7;
}

id sub_100106FB0()
{
  NSString v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 isExecutableFileAtPath:v2];

  return v3;
}

uint64_t sub_100106FF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for POSIXError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = String.utf8CString.getter(a1);
  id v7 = realpath_DARWIN_EXTSN((const char *)(v6 + 32), 0LL);
  swift_release(v6);
  if (v7)
  {
    uint64_t v8 = String.init(utf8String:)(v7);
    free(v7);
    return v8;
  }

  else
  {
    uint64_t v10 = sub_1000BCBB8((uint64_t)v5);
    POSIXError._nsError.getter(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return swift_willThrow(v11);
  }

double sub_1001070E0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107104(a1, (SEL *)&selRef_fileHandleForReadingAtPath_, a2);
}

double sub_1001070EC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107104(a1, (SEL *)&selRef_fileHandleForWritingAtPath_, a2);
}

double sub_1001070F8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107104(a1, (SEL *)&selRef_fileHandleForUpdatingAtPath_, a2);
}

double sub_100107104@<D0>(uint64_t a1@<X1>, SEL *a2@<X4>, uint64_t a3@<X8>)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  id v7 = objc_msgSend((id)objc_opt_self(NSFileHandle), *a2, v6);

  if (v7)
  {
    *(void *)(a3 + 24) = sub_100006094(0LL, &qword_10015C5E0, &OBJC_CLASS___NSFileHandle_ptr);
    *(void *)(a3 + 3sub_100006034(v0 + 2) = sub_100108094(&qword_10015C5E8, (uint64_t)&unk_10011BFA0);
    *(void *)a3 = v7;
  }

  else
  {
    *(void *)(a3 + 3sub_100006034(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

double sub_1001071C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100105CB8(a1, a2, a3);
}

void *sub_1001071DC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for URLResourceValues(0LL);
  a2[4] = &off_100150D20;
  sub_100005F0C(a2);
  double result = (void *)URL.resourceValues(forKeys:)(a1);
  if (v2) {
    return sub_100072694(a2);
  }
  return result;
}

uint64_t sub_100107250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, copyfile_flags_t a5)
{
  return sub_100107428(a1, a2, a3, a4, a5);
}

uint64_t sub_100107264()
{
  uint64_t result = os_variant_allows_internal_security_policies("kernelmanagerd");
  if ((_DWORD)result)
  {
    URL.withUnsafeFileSystemRepresentation<A>(_:)(&v1, sub_100105E50, 0LL, &type metadata for Bool);
    return v1;
  }

  return result;
}

uint64_t sub_1001072C4(uint64_t a1, unint64_t a2)
{
  return sub_100107750(a1, a2) & 1;
}

uint64_t sub_1001072DC(uint64_t a1, unint64_t a2)
{
  return sub_1001078F8(a1, a2) & 1;
}

uint64_t sub_1001072F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[3] = a2;
  v10[4] = a3;
  NSString v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_100107370(v10, v7, v8);
}

uint64_t sub_100107370(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015C5F0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_1001073DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015C5F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_100107428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, copyfile_flags_t a5)
{
  uint64_t v19 = type metadata accessor for POSIXError(0LL);
  uint64_t v8 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = copyfile_state_alloc();
  copyfile_state_set(v11, 6u, sub_100105E48);
  uint64_t v12 = String.utf8CString.getter(a1);
  uint64_t v13 = String.utf8CString.getter(a3);
  int v14 = copyfile((const char *)(v12 + 32), (const char *)(v13 + 32), v11, a5);
  swift_release(v12);
  swift_release(v13);
  if (v14)
  {
    uint64_t v15 = sub_1000BCBB8((uint64_t)v10);
    POSIXError._nsError.getter(v15);
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v19);
    swift_willThrow(v16);
  }

  return copyfile_state_free(v11);
}

size_t sub_100107550(const char *a1)
{
  return sub_100106038(a1, *(_DWORD *)(v1 + 32));
}

BOOL sub_10010756C(int a1, copyfile_state_t s)
{
  if (a1 != 5) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  if (copyfile_state_get(s, 9u, &v9)) {
    return 0LL;
  }
  BOOL result = v9;
  if (v9)
  {
    uint64_t v3 = String.init(cString:)(v9);
    uint64_t v5 = v4;
    uint64_t v6 = sub_1000902FC();
    uint64_t v7 = v6[1];
    if (v3 == *v6 && v5 == v7)
    {
      swift_bridgeObjectRelease(v5);
      return 1LL;
    }

    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, *v6, v7, 0LL);
    swift_bridgeObjectRelease(v5);
    return (v8 & 1) != 0;
  }

  return result;
}

uint64_t sub_100107640(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for POSIXError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = URL.path.getter(v7);
  uint64_t v12 = v11;
  uint64_t v13 = String.utf8CString.getter(v10);
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = String.utf8CString.getter(a3);
  LODWORD(v1sub_100006034(v0 + 2) = rootless_mkdir_restricted(v13 + 32, a2, v14 + 32);
  swift_release(v13);
  uint64_t result = swift_release(v14);
  if ((_DWORD)v12 == -1)
  {
    uint64_t v16 = sub_1000BCBB8((uint64_t)v9);
    POSIXError._nsError.getter(v16);
    uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return swift_willThrow(v17);
  }

  return result;
}

uint64_t sub_100107750(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(&v20, 0x878uLL);
  uint64_t v8 = sub_1000D1AF4(a1, a2);
  uint64_t v10 = v9;
  uint64_t v11 = String.utf8CString.getter(v8);
  int v12 = statfs((const char *)(v11 + 32), &v20);
  swift_release(v11);
  if (v12)
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v13 = sub_1000BCBB8(v7);
    POSIXError._nsError.getter(v13);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v14);
  }

  else
  {
    uint64_t KeyPath = (void *)swift_getKeyPath(&unk_10011C050);
    uint64_t v7 = sub_1000D6718(KeyPath, (uint64_t)&v20);
    uint64_t v17 = v16;
    swift_release(KeyPath);
    if (v7 == v8 && v17 == v10)
    {
      LOBYTE(v7) = 1;
      uint64_t v17 = v10;
    }

    else
    {
      LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v17, v8, v10, 0LL);
    }

    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v17);
  }

  return v7 & 1;
}

uint64_t sub_1001078F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(&v18, 0x878uLL);
  uint64_t v8 = sub_1000D1AF4(a1, a2);
  uint64_t v10 = v9;
  uint64_t v11 = String.utf8CString.getter(v8);
  swift_bridgeObjectRelease(v10);
  LODWORD(v10) = statfs((const char *)(v11 + 32), &v18);
  swift_release(v11);
  if ((_DWORD)v10)
  {
    uint64_t v12 = sub_1000BCBB8(v7);
    POSIXError._nsError.getter(v12);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v13);
  }

  else
  {
    uint64_t KeyPath = (void *)swift_getKeyPath(&unk_10011C050);
    uint64_t v7 = sub_1000D6718(KeyPath, (uint64_t)&v18);
    uint64_t v16 = v15;
    swift_release(KeyPath);
    if (v7 == 47 && v16 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease(0xE100000000000000LL);
      LOBYTE(v7) = 1;
    }

    else
    {
      LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v16, 47LL, 0xE100000000000000LL, 0LL);
      swift_bridgeObjectRelease(v16);
    }
  }

  return v7 & 1;
}

BOOL sub_100107A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = String.utf8CString.getter(a1);
  int v5 = openat_authenticated_np(-2, (const char *)(v4 + 32), 0, -1);
  uint64_t v6 = swift_release(v4);
  if (v5 == -1)
  {
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    uint64_t v8 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_10010F440;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100026B64();
    *(void *)(v9 + 3sub_100006034(v0 + 2) = a1;
    *(void *)(v9 + sub_10007CFB4(v0 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    int v11 = errno.getter(v10);
    *(void *)(v9 + 96) = &type metadata for Int32;
    *(void *)(v9 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 7sub_100006034(v0 + 2) = v11;
    uint64_t v12 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v13,  "openat_authenticated_np() failed at path %{public}s with (errno %d)",  67LL,  2LL,  v9);
    swift_bridgeObjectRelease(v9);
  }

  else if ((v5 & 0x80000000) == 0)
  {
    close(v5);
  }

  return v5 != -1;
}

void *sub_100107BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v36 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v9);
  int v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v12 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v16 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, a3, 0LL, 0LL);

  if (v16)
  {
    uint64_t v17 = NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()(&v38, v17);
    if (v40)
    {
      uint64_t v15 = _swiftEmptyArrayStorage;
      while (1)
      {
        int v18 = swift_dynamicCast(v11, &v38, (char *)&type metadata for Any + 8, v6, 6LL);
        uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
        if (v18)
        {
          v19(v11, 0LL, 1LL, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1LL, v6) != 1)
          {
            Swift::String v35 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
            v35(v36, v11, v6);
            if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
              uint64_t v15 = (void *)sub_10000C938(0, v15[2] + 1LL, 1, (unint64_t)v15);
            }
            unint64_t v21 = v15[2];
            unint64_t v20 = v15[3];
            unint64_t v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              unint64_t v34 = v21 + 1;
              uint64_t v24 = sub_10000C938(v20 > 1, v21 + 1, 1, (unint64_t)v15);
              unint64_t v22 = v34;
              uint64_t v15 = (void *)v24;
            }

            void v15[2] = v22;
            uint64_t v23 = ((uint64_t (*)(char *, char *, uint64_t))v35)( (char *)v15 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                  + *(void *)(v7 + 72) * v21,
                    v36,
                    v6);
            goto LABEL_13;
          }
        }

        else
        {
          v19(v11, 1LL, 1LL, v6);
        }

        uint64_t v23 = sub_100097760((uint64_t)v11);
LABEL_13:
        NSFastEnumerationIterator.next()(&v38, v23);
        if (!v40) {
          goto LABEL_17;
        }
      }
    }

    uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v37);
  }

  else
  {
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    uint64_t v25 = swift_bridgeObjectRelease(v39);
    unint64_t v38 = 0xD000000000000020LL;
    unint64_t v39 = 0x800000010012D410LL;
    v26._uint64_t countAndFlagsBits = URL.path.getter(v25);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    unint64_t v28 = v38;
    unint64_t v29 = v39;
    unint64_t v30 = sub_100012624();
    uint64_t v31 = swift_allocError(&type metadata for KMError, v30, 0LL, 0LL);
    *(void *)uint64_t v32 = v28;
    *(void *)(v32 + 8) = v29;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(void *)(v32 + 64) = 0LL;
    *(_BYTE *)(v32 + 7sub_100006034(v0 + 2) = 19;
    swift_willThrow(v31);
  }

  return v15;
}

unint64_t sub_100107F44()
{
  unint64_t result = qword_10015C5F8;
  if (!qword_10015C5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BDB4, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C5F8);
  }

  return result;
}

unint64_t sub_100107F8C()
{
  unint64_t result = qword_10015C600;
  if (!qword_10015C600)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BE24, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C600);
  }

  return result;
}

unint64_t sub_100107FD4()
{
  unint64_t result = qword_10015C608;
  if (!qword_10015C608)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BEEC, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C608);
  }

  return result;
}

unint64_t sub_10010801C()
{
  unint64_t result = qword_10015C610;
  if (!qword_10015C610)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011BF14, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C610);
  }

  return result;
}

uint64_t sub_100108060(uint64_t a1)
{
  uint64_t result = sub_100108094(&qword_10015C618, (uint64_t)&protocol conformance descriptor for NSFileHandle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100108094(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100006094(255LL, &qword_10015C5E0, &OBJC_CLASS___NSFileHandle_ptr);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for CopyFileFlags()
{
  return &type metadata for CopyFileFlags;
}

void *sub_1001080F4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x878uLL);
}

uint64_t sub_1001080FC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2168)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010811C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 215sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 207sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 20sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 199sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 191sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 183sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 175sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 167sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 16sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 159sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 151sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 143sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 135sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 127sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 12sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 119sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 111sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 103sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 95sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 87sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 8sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 79sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 71sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 63sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 55sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 47sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 4sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 39sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 31sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2168) = v3;
  return result;
}

void type metadata accessor for statfs(uint64_t a1)
{
}

void *sub_100108398(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1001083A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001083C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for fsid(uint64_t a1)
{
}

uint64_t sub_100108400@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100105AF0(a1, a2);
}

uint64_t sub_100108428()
{
  return URLResourceValues.fileSize.getter();
}

unint64_t sub_100108440()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10010845C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10010AB2C(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_100108488(uint64_t a1)
{
  unint64_t v2 = sub_1001084D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001084B0(uint64_t a1)
{
  unint64_t v2 = sub_1001084D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001084D8()
{
  unint64_t result = qword_100174EA0[0];
  if (!qword_100174EA0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011C33C, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_100174EA0);
  }

  return result;
}

uint64_t sub_10010851C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_10015C638);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1001084D8();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BuildVersionPlist.CodingKeys,  &type metadata for BuildVersionPlist.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100006034(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100006034(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_100108640(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_10015C630);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_1001084D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BuildVersionPlist.CodingKeys,  &type metadata for BuildVersionPlist.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10010872C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  int v37 = a5;
  uint64_t v14 = a1;
  uint64_t v15 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v8, v18);
  if (a2)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, __n128))(v15 + 8);
    __n128 v20 = swift_bridgeObjectRetain(a2);
    v19(v17, a6, v20);
  }

  else
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(a3, a4, a6, a7);
    a2 = v21;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
    if (!a2)
    {
      unint64_t v26 = sub_100012624();
      uint64_t v27 = swift_allocError(&type metadata for KMError, v26, 0LL, 0LL);
      *(void *)uint64_t v28 = 0xD000000000000046LL;
      unint64_t v25 = 0x800000010012D490LL;
LABEL_9:
      *(void *)(v28 + 8) = v25;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(void *)(v28 + 64) = 0LL;
      *(_BYTE *)(v28 + 7sub_100006034(v0 + 2) = 57;
      swift_willThrow(v27);
      return v25;
    }
  }

  uint64_t v22 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(a7 + 32))( v14,  a2,  a3,  a4,  v37 & 1,  0LL,  a6,  a7);
  if (!v23)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24))( v14,  a2,  a3,  a4,  a6,  a7);
    if (!v24)
    {
      uint64_t v35 = 0LL;
      unint64_t v36 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(76LL);
      v29._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
      v29._object = (void *)0x800000010012D4E0LL;
      String.append(_:)(v29);
      v30._uint64_t countAndFlagsBits = v14;
      v30._object = a2;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(a2);
      uint64_t v31 = v35;
      unint64_t v25 = v36;
      unint64_t v32 = sub_100012624();
      uint64_t v27 = swift_allocError(&type metadata for KMError, v32, 0LL, 0LL);
      *(void *)uint64_t v28 = v31;
      goto LABEL_9;
    }
  }

  unint64_t v25 = v22;
  swift_bridgeObjectRelease(a2);
  return v25;
}

uint64_t sub_100108988(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v40[-v11];
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v2 + 88LL))(&v42, v10);
  if (!v43)
  {
    uint64_t v27 = sub_100012824((uint64_t)&v42, &qword_10015B670);
    uint64_t v28 = static os_log_type_t.error.getter(v27);
    unint64_t v29 = sub_100026BA8();
    Swift::String v30 = (void *)static OS_os_log.default.getter(v29);
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v30,  "Could not getBuildVersion since no side-effects found",  53LL,  2LL,  _swiftEmptyArrayStorage);

    return 0LL;
  }

  sub_100005158(&v42, (uint64_t)v45);
  URL.init(fileURLWithPath:isDirectory:)(a1, a2, 1LL);
  uint64_t v13 = (uint64_t *)sub_10009020C();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  URL.appendingPathComponent(_:)(v14, v15);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
  uint64_t v17 = v16(v9, v5);
  uint64_t v18 = URL.path.getter(v17);
  uint64_t v20 = v19;
  v16(v12, v5);
  char v41 = 0;
  uint64_t v21 = v46;
  uint64_t v22 = v47;
  sub_100005110(v45, v46);
  sub_1001073DC(v21, v22);
  uint64_t v23 = v43;
  uint64_t v24 = v44;
  sub_100005110(&v42, v43);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v24 + 136))( v18,  v20,  &v41,  v23,  v24);
  sub_100006034(&v42);
  if ((v21 & 1) == 0)
  {
    uint64_t v31 = static os_log_type_t.debug.getter(v25);
    uint64_t v32 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + 16) = xmmword_10010F110;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_100026B64();
    *(void *)(v33 + 3sub_100006034(v0 + 2) = v18;
    *(void *)(v33 + sub_10007CFB4(v0 + 40) = v20;
    unint64_t v34 = sub_100026BA8();
    uint64_t v35 = (void *)static OS_os_log.default.getter(v34);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v35, "Could not find %{public}s", 25LL, 2LL, v33);
    swift_bridgeObjectRelease(v33);

    sub_100006034(v45);
    return 0LL;
  }

  uint64_t v26 = sub_100005FB4(&qword_10015C640);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v26 + 152))(v18, v20, v45);
  uint64_t v37 = swift_bridgeObjectRelease(v20);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v36 + 128LL))(&v42, v37);
  swift_release(v36);
  uint64_t v38 = v42;
  sub_100006034(v45);
  return v38;
}

uint64_t sub_100108D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v36 - v13;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v3 + 88LL))(&v39, v12);
  if (v40)
  {
    uint64_t v37 = a3;
    sub_100005158(&v39, (uint64_t)v42);
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    sub_100005110(v42, v43);
    sub_1001073DC(v15, v16);
    uint64_t v17 = v40;
    uint64_t v18 = v41;
    sub_100005110(&v39, v40);
    uint64_t v19 = sub_100005FB4(&qword_10015A818);
    uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
    __int128 v38 = xmmword_10010F110;
    *(_OWORD *)(v20 + 16) = xmmword_10010F110;
    *(void *)(v20 + 3sub_100006034(v0 + 2) = NSURLIsDirectoryKey;
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 24);
    uint64_t v22 = NSURLIsDirectoryKey;
    uint64_t v27 = v21(a1, v20, 1LL, v17, v18);
    swift_bridgeObjectRelease(v20);
    uint64_t v28 = sub_100006034(&v39);
    __chkstk_darwin(v28);
    *(&v36 - 4) = (uint64_t)v42;
    *(&v36 - sub_10003A584(v0 + 3) = v4;
    uint64_t v29 = v37;
    *(&v36 - sub_100006034(v0 + 2) = a2;
    *(&v36 - 1) = v29;
    uint64_t v32 = sub_1000AA12C((uint64_t (*)(char *))sub_10010AD94, (uint64_t)(&v36 - 6), v27);
    swift_retain(v4);
    sub_100109164(v32, v4, v14);
    swift_bridgeObjectRelease(v32);
    sub_10001A148((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_10015BA30);
    uint64_t v33 = type metadata accessor for URL(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1LL, v33);
    if ((_DWORD)v35 == 1)
    {
      sub_100012824((uint64_t)v14, (uint64_t *)&unk_10015BA30);
      sub_100012824((uint64_t)v11, (uint64_t *)&unk_10015BA30);
      uint64_t v30 = 0LL;
    }

    else
    {
      uint64_t v30 = URL.path.getter(v35);
      sub_100012824((uint64_t)v14, (uint64_t *)&unk_10015BA30);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v33);
    }

    sub_100006034(v42);
  }

  else
  {
    uint64_t v23 = sub_100012824((uint64_t)&v39, &qword_10015B670);
    uint64_t v24 = static os_log_type_t.error.getter(v23);
    unint64_t v25 = sub_100026BA8();
    uint64_t v26 = (void *)static OS_os_log.default.getter(v25);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v26,  "Could not getMatchingDevKit since no side-effects found",  55LL,  2LL,  _swiftEmptyArrayStorage);

    return 0LL;
  }

  return v30;
}

uint64_t sub_100109164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v26 = a1;
  if (v11)
  {
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v28 = *(void *)(v5 + 72);
    uint64_t v29 = v13;
    __n128 v14 = swift_bridgeObjectRetain(a1);
    while (1)
    {
      v29(v10, v12, v4, v14);
      uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0LL, 1LL, v4);
      uint64_t v30 = v15;
      uint64_t v16 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
      uint64_t v17 = v16(v7, v10, v4);
      uint64_t v18 = v7;
      uint64_t v19 = URL.path.getter(v17);
      uint64_t v21 = v20;
      (*(void (**)(uint64_t))(*(void *)v31 + 136LL))(v19);
      uint64_t v23 = v22;
      swift_bridgeObjectRelease(v21);
      if (v23)
      {
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v23);
        uint64_t v24 = v27;
        v16(v27, v18, v4);
        v30(v24, 0LL, 1LL, v4);
        return swift_release(v31);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
      v12 += v28;
      --v11;
      uint64_t v7 = v18;
      if (!v11) {
        goto LABEL_8;
      }
    }
  }

  else
  {
    uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
    __n128 v14 = swift_bridgeObjectRetain(a1);
LABEL_8:
    uint64_t v15 = v30;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v30)(v10, 1LL, 1LL, v4, v14);
  }

  swift_bridgeObjectRelease(v26);
  v15(v27, 1LL, 1LL, v4);
  return swift_release(v31);
}

uint64_t sub_100109394(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v60 - v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v2 + 88LL))(&v64, v10);
  if (v65)
  {
    sub_100005158(&v64, (uint64_t)v67);
    URL.init(fileURLWithPath:)(a1, a2);
    uint64_t v13 = (uint64_t *)sub_100090218();
    uint64_t v62 = a2;
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    swift_bridgeObjectRetain(v15);
    URL.appendingPathComponent(_:)(v14, v15);
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = v16(v9, v5);
    uint64_t v18 = URL.path.getter(v17);
    uint64_t v61 = a1;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    v16(v12, v5);
    uint64_t v22 = v68;
    uint64_t v23 = v69;
    sub_100005110(v67, v68);
    sub_1001073DC(v22, v23);
    uint64_t v24 = v65;
    uint64_t v25 = v66;
    sub_100005110(&v64, v65);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 152))(v19, v21, v24, v25);
    uint64_t v32 = v31;
    uint64_t v33 = sub_100006034(&v64);
    if (v32)
    {
      swift_bridgeObjectRelease(v21);
      URL.init(fileURLWithPath:)(v30, v32);
      uint64_t v34 = (uint64_t *)sub_100090224();
      uint64_t v35 = *v34;
      uint64_t v36 = v34[1];
      swift_bridgeObjectRetain(v36);
      URL.appendingPathComponent(_:)(v35, v36);
      swift_bridgeObjectRelease(v36);
      uint64_t v37 = v16(v9, v5);
      uint64_t v38 = URL.path.getter(v37);
      uint64_t v40 = v39;
      v16(v12, v5);
      v63[0] = 0;
      uint64_t v41 = v68;
      uint64_t v42 = v69;
      sub_100005110(v67, v68);
      sub_1001073DC(v41, v42);
      uint64_t v43 = v65;
      uint64_t v44 = v66;
      sub_100005110(&v64, v65);
      if (((*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(v44 + 136))( v38,  v40,  v63,  v43,  v44) & 1) == 0)
      {
        swift_bridgeObjectRelease(v32);
        uint64_t v46 = sub_100006034(&v64);
        goto LABEL_10;
      }

      char v45 = v63[0];
      sub_100006034(&v64);
      if ((v45 & 1) != 0)
      {
        uint64_t v46 = swift_bridgeObjectRelease(v32);
LABEL_10:
        uint64_t v52 = static os_log_type_t.error.getter(v46);
        uint64_t v53 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        uint64_t v54 = swift_allocObject(v53, 112LL, 7LL);
        *(_OWORD *)(v54 + 16) = xmmword_10010F440;
        *(void *)(v54 + 56) = &type metadata for String;
        unint64_t v55 = sub_100026B64();
        uint64_t v56 = v62;
        *(void *)(v54 + 3sub_100006034(v0 + 2) = v61;
        *(void *)(v54 + sub_10007CFB4(v0 + 40) = v56;
        *(void *)(v54 + 96) = &type metadata for String;
        *(void *)(v54 + 104) = v55;
        *(void *)(v54 + 64) = v55;
        *(void *)(v54 + 7sub_100006034(v0 + 2) = v38;
        *(void *)(v54 + 80) = v40;
        sub_100026BA8();
        swift_bridgeObjectRetain(v56);
        Swift::String v58 = (void *)static OS_os_log.default.getter(v57);
        os_log(_:dso:log:_:_:)( v52,  &_mh_execute_header,  v58,  "%{public}s Dev Kit does not contain %{public}s",  46LL,  2LL,  v54);
        swift_bridgeObjectRelease(v54);

        sub_100006034(v67);
        return 0LL;
      }

      swift_bridgeObjectRelease(v40);
    }

    else
    {
      uint64_t v47 = static os_log_type_t.error.getter(v33);
      uint64_t v48 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
      *(_OWORD *)(v49 + 16) = xmmword_10010F110;
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = sub_100026B64();
      *(void *)(v49 + 3sub_100006034(v0 + 2) = v19;
      *(void *)(v49 + sub_10007CFB4(v0 + 40) = v21;
      unint64_t v50 = sub_100026BA8();
      uint64_t v51 = (void *)static OS_os_log.default.getter(v50);
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v51, "Could not get real path for %{public}s", 38LL, 2LL, v49);
      swift_bridgeObjectRelease(v49);
    }

    sub_100006034(v67);
    return v30;
  }

  uint64_t v26 = sub_100012824((uint64_t)&v64, &qword_10015B670);
  uint64_t v27 = static os_log_type_t.error.getter(v26);
  unint64_t v28 = sub_100026BA8();
  uint64_t v29 = (void *)static OS_os_log.default.getter(v28);
  os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v29,  "Could not getMatchingDevKit since no side-effects found",  55LL,  2LL,  _swiftEmptyArrayStorage);

  return 0LL;
}

uint64_t sub_1001098F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120LL))(a3, a4);
  uint64_t v19 = v17;
  if (v18)
  {
    uint64_t v20 = v18;
    URL.init(fileURLWithPath:isDirectory:)(v17, v18, 1LL);
    swift_bridgeObjectRelease(v20);
    uint64_t v21 = (uint64_t *)sub_1000901DC();
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain(v23);
    URL.appendingPathComponent(_:)(v22, v23);
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v14, v10);
    uint64_t v19 = sub_100108D80((uint64_t)v16, a1, a2);
    v24(v16, v10);
  }

  return v19;
}

uint64_t sub_100109A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  uint64_t v105 = a3;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  uint64_t v26 = (char *)&v90 - v25;
  if ((a5 & 1) != 0)
  {
    uint64_t v99 = v24;
    uint64_t v100 = v23;
    uint64_t v104 = v22;
    int v102 = a6;
    uint64_t v101 = v15;
    URL.init(fileURLWithPath:)(v105, a4);
    uint64_t v27 = (uint64_t *)sub_100090200();
    uint64_t v28 = a4;
    uint64_t v29 = v12;
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    swift_bridgeObjectRetain(v31);
    URL.appendingPathComponent(_:)(v30, v31);
    swift_bridgeObjectRelease(v31);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v29 + 8);
    v32(v21, v11);
    uint64_t v33 = sub_100108D80((uint64_t)v26, a1, a2);
    if (v34)
    {
      uint64_t v35 = v33;
      uint64_t v36 = v26;
LABEL_6:
      v32(v36, v11);
      return v35;
    }

    uint64_t v96 = v29;
    LODWORD(v97) = static os_log_type_t.error.getter(v33);
    uint64_t v95 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v37 = swift_allocObject(v95, 72LL, 7LL);
    __int128 v94 = xmmword_10010F110;
    *(_OWORD *)(v37 + 16) = xmmword_10010F110;
    uint64_t v38 = URL.path.getter(v37);
    uint64_t v98 = v26;
    uint64_t v103 = v32;
    a4 = v28;
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v93 = sub_100026B64();
    *(void *)(v37 + 64) = v93;
    *(void *)(v37 + 3sub_100006034(v0 + 2) = v38;
    *(void *)(v37 + sub_10007CFB4(v0 + 40) = v40;
    unint64_t v92 = sub_100026BA8();
    uint64_t v41 = (void *)static OS_os_log.default.getter(v92);
    os_log(_:dso:log:_:_:)( v97,  &_mh_execute_header,  v41,  "macOSInternalKDK is not found in the System volume file hierarchy at %{public}s",  79LL,  2LL,  v37);
    swift_bridgeObjectRelease(v37);

    uint64_t v42 = v105;
    URL.init(fileURLWithPath:)(v105, a4);
    uint64_t v43 = (uint64_t *)sub_1000901F4();
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    swift_bridgeObjectRetain(v45);
    uint64_t v46 = v104;
    URL.appendingPathComponent(_:)(v44, v45);
    swift_bridgeObjectRelease(v45);
    v103(v21, v11);
    uint64_t v47 = sub_100108D80(v46, a1, a2);
    if (v48)
    {
      uint64_t v35 = v47;
      uint64_t v49 = v46;
      uint64_t v32 = v103;
      v103((char *)v49, v11);
      uint64_t v36 = v98;
      goto LABEL_6;
    }

    unint64_t v90 = v43;
    uint64_t v91 = a1;
    uint64_t v97 = a2;
    uint64_t v50 = static os_log_type_t.error.getter(v47);
    uint64_t v51 = swift_allocObject(v95, 72LL, 7LL);
    *(_OWORD *)(v51 + 16) = v94;
    uint64_t v52 = URL.path.getter(v51);
    unint64_t v53 = v93;
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = v53;
    *(void *)(v51 + 3sub_100006034(v0 + 2) = v52;
    *(void *)(v51 + sub_10007CFB4(v0 + 40) = v54;
    unint64_t v55 = (void *)static OS_os_log.default.getter(v52);
    os_log(_:dso:log:_:_:)( v50,  &_mh_execute_header,  v55,  "macOSInternalKDK is not found in the Data volume file hierarchy at %{public}s",  77LL,  2LL,  v51);
    swift_bridgeObjectRelease(v51);

    uint64_t v56 = v42;
    BOOL v57 = v42 == 47;
    Swift::String v58 = v98;
    if ((!v57 || a4 != 0xE100000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, a4, 47LL, 0xE100000000000000LL, 0LL) & 1) == 0)
    {
      Swift::String v59 = v99;
      URL.init(fileURLWithPath:)(47LL, 0xE100000000000000LL);
      uint64_t v60 = *v90;
      uint64_t v61 = v90[1];
      swift_bridgeObjectRetain(v61);
      uint64_t v62 = v100;
      URL.appendingPathComponent(_:)(v60, v61);
      swift_bridgeObjectRelease(v61);
      uint64_t v63 = v59;
      __int128 v64 = (void (*)(uint64_t, uint64_t))v103;
      v103(v63, v11);
      uint64_t v65 = v104;
      v64(v104, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v65, v62, v11);
      uint64_t v66 = sub_100108D80(v65, v91, v97);
      if (v67)
      {
        uint64_t v35 = v66;
        v64(v65, v11);
        v64((uint64_t)v58, v11);
        return v35;
      }

      uint64_t v68 = static os_log_type_t.error.getter(v66);
      uint64_t v69 = swift_allocObject(v95, 72LL, 7LL);
      *(_OWORD *)(v69 + 16) = v94;
      uint64_t v70 = URL.path.getter(v69);
      unint64_t v71 = v93;
      *(void *)(v69 + 56) = &type metadata for String;
      *(void *)(v69 + 64) = v71;
      *(void *)(v69 + 3sub_100006034(v0 + 2) = v70;
      *(void *)(v69 + sub_10007CFB4(v0 + 40) = v72;
      uint64_t v73 = (void *)static OS_os_log.default.getter(v70);
      os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  v73,  "retry failed: macOSInternalKDK is not found in the Data volume file hierarchy at %{public}s",  91LL,  2LL,  v69);
      swift_bridgeObjectRelease(v69);
    }

    unint64_t v74 = v103;
    v103((char *)v104, v11);
    v74(v58, v11);
    uint64_t v12 = v96;
    a2 = v97;
    a1 = v91;
    uint64_t v15 = v101;
    if ((v102 & 1) != 0) {
      return 0LL;
    }
  }

  URL.init(fileURLWithPath:)(v105, a4);
  uint64_t v75 = (uint64_t *)sub_1000901E8();
  uint64_t v76 = *v75;
  uint64_t v77 = v75[1];
  swift_bridgeObjectRetain(v77);
  URL.appendingPathComponent(_:)(v76, v77);
  swift_bridgeObjectRelease(v77);
  unint64_t v78 = *(void (**)(char *, uint64_t))(v12 + 8);
  v78(v21, v11);
  uint64_t v79 = sub_100108D80((uint64_t)v15, a1, a2);
  uint64_t v35 = v79;
  if (!v80)
  {
    uint64_t v81 = static os_log_type_t.error.getter(v79);
    uint64_t v82 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v83 = swift_allocObject(v82, 72LL, 7LL);
    *(_OWORD *)(v83 + 16) = xmmword_10010F110;
    uint64_t v84 = URL.path.getter(v83);
    uint64_t v86 = v85;
    *(void *)(v83 + 56) = &type metadata for String;
    *(void *)(v83 + 64) = sub_100026B64();
    *(void *)(v83 + 3sub_100006034(v0 + 2) = v84;
    *(void *)(v83 + sub_10007CFB4(v0 + 40) = v86;
    unint64_t v87 = sub_100026BA8();
    unint64_t v88 = (void *)static OS_os_log.default.getter(v87);
    os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v88, "matching KDK not found in %{public}s", 36LL, 2LL, v83);
    swift_bridgeObjectRelease(v83);
  }

  v78(v15, v11);
  return v35;
}

uint64_t sub_10010A0A4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))();
}

unint64_t sub_10010A0CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  return sub_10010872C(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10010A0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v34[-v11];
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v2 + 88LL))(&v36, v10);
  if (!v37)
  {
    uint64_t v26 = sub_100012824((uint64_t)&v36, &qword_10015B670);
    uint64_t v27 = static os_log_type_t.error.getter(v26);
    unint64_t v28 = sub_100026BA8();
    uint64_t v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v29,  "Could not getBuildVersion since no side-effects found",  53LL,  2LL,  _swiftEmptyArrayStorage);

    return 0LL;
  }

  sub_100005158(&v36, (uint64_t)v39);
  URL.init(fileURLWithPath:isDirectory:)(a1, a2, 1LL);
  uint64_t v13 = (uint64_t *)sub_10009020C();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  URL.appendingPathComponent(_:)(v14, v15);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
  uint64_t v17 = v16(v9, v5);
  uint64_t v18 = URL.path.getter(v17);
  uint64_t v20 = v19;
  v16(v12, v5);
  char v35 = 0;
  uint64_t v21 = v40;
  uint64_t v22 = v41;
  sub_100005110(v39, v40);
  sub_1001073DC(v21, v22);
  uint64_t v23 = v37;
  uint64_t v24 = v38;
  sub_100005110(&v36, v37);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v24 + 136))( v18,  v20,  &v35,  v23,  v24);
  sub_100006034(&v36);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease(v20);
    sub_100006034(v39);
    return 0LL;
  }

  uint64_t v25 = sub_100005FB4(&qword_10015C640);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v25 + 152))(v18, v20, v39);
  uint64_t v31 = swift_bridgeObjectRelease(v20);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v30 + 128LL))(&v36, v31);
  swift_release(v30);
  uint64_t v32 = v36;
  sub_100006034(v39);
  return v32;
}

uint64_t sub_10010A450(uint64_t a1, uint64_t a2)
{
  return sub_10010A548(a1, a2, "Cannot getXcodeDevDir on MinimalDeveloperKitClient", 50LL);
}

uint64_t sub_10010A460(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.info.getter(a1);
  unint64_t v2 = sub_100026BA8();
  uint64_t v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  v3,  "Cannot getMacOSSDKPath on MinimalDeveloperKitClient",  51LL,  2LL,  _swiftEmptyArrayStorage);

  return 0LL;
}

uint64_t sub_10010A4CC(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.info.getter(a1);
  unint64_t v2 = sub_100026BA8();
  uint64_t v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  v3,  "Cannot getMacOSKDKPath on MinimalDeveloperKitClient",  51LL,  2LL,  _swiftEmptyArrayStorage);

  return 0LL;
}

uint64_t sub_10010A538(uint64_t a1, uint64_t a2)
{
  return sub_10010A548(a1, a2, "Cannot getValidKextRepoPath on MinimalDeveloperKitClient", 56LL);
}

uint64_t sub_10010A548(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6 = static os_log_type_t.info.getter(a1);
  unint64_t v7 = sub_100026BA8();
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, a3, a4, 2LL, _swiftEmptyArrayStorage);

  return 0LL;
}

uint64_t sub_10010A5C0(uint64_t a1, uint64_t a2)
{
  return sub_10010A88C(a1, a2, 0xD000000000000015LL, 0x800000010012D8D0LL);
}

uint64_t sub_10010A5DC(uint64_t a1, uint64_t a2)
{
  return sub_10010A88C(a1, a2, 0xD00000000000001BLL, 0x800000010012D8F0LL);
}

uint64_t sub_10010A5F8(uint64_t a1)
{
  os_log_type_t v1 = static os_log_type_t.error.getter(a1);
  unint64_t v2 = sub_100026BA8();
  uint64_t v3 = (os_log_s *)static OS_os_log.default.getter(v2);
  if (os_log_type_enabled(v3, v1))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v8 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v7 = sub_1000058CC(0xD000000000000025LL, 0x800000010012D910LL, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "Unexpected call to %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_10010A734(uint64_t a1)
{
  os_log_type_t v1 = static os_log_type_t.error.getter(a1);
  unint64_t v2 = sub_100026BA8();
  uint64_t v3 = (os_log_s *)static OS_os_log.default.getter(v2);
  if (os_log_type_enabled(v3, v1))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v8 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v7 = sub_1000058CC(0xD00000000000004BLL, 0x800000010012D940LL, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "Unexpected call to %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_10010A870(uint64_t a1, uint64_t a2)
{
  return sub_10010A88C(a1, a2, 0xD00000000000001BLL, 0x800000010012D990LL);
}

uint64_t sub_10010A88C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  os_log_type_t v6 = static os_log_type_t.error.getter(a1);
  unint64_t v7 = sub_100026BA8();
  uint64_t v8 = (os_log_s *)static OS_os_log.default.getter(v7);
  if (os_log_type_enabled(v8, v6))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v12 = sub_1000058CC(a3, a4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v6, "Unexpected call to %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_10010A9C8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015C648);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10010AA34(uint64_t a1)
{
  return sub_10010AA48(a1, type metadata accessor for MinimalDeveloperKitClient, (uint64_t)&off_100150D90);
}

uint64_t sub_10010AA48(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5 = v3;
  void v10[3] = a2();
  v10[4] = a3;
  v10[0] = v3;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  swift_retain(v5);
  sub_10010A9C8(v10, v7, v8);
  sub_100005F70(a1, (uint64_t)v10);
  return (*(uint64_t (**)(void *))(*(void *)v5 + 96LL))(v10);
}

uint64_t sub_10010AAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015C648);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_10010AB2C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013LL && a2 == 0x800000010012DA40LL)
  {
    swift_bridgeObjectRelease(0x800000010012DA40LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010012DA40LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

uint64_t type metadata accessor for RealDeveloperKitClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd22RealDeveloperKitClient);
}

uint64_t type metadata accessor for MinimalDeveloperKitClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd25MinimalDeveloperKitClient);
}

ValueMetadata *type metadata accessor for BuildVersionPlist()
{
  return &type metadata for BuildVersionPlist;
}

uint64_t type metadata accessor for NullDeveloperKitClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd22NullDeveloperKitClient);
}

uint64_t storeEnumTagSinglePayload for BuildVersionPlist.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10010AC60 + 4 * asc_10011C150[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10010AC80 + 4 * byte_10011C155[v4]))();
  }
}

_BYTE *sub_10010AC60(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10010AC80(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10010AC88(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10010AC90(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10010AC98(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10010ACA0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BuildVersionPlist.CodingKeys()
{
  return &type metadata for BuildVersionPlist.CodingKeys;
}

unint64_t sub_10010ACC0()
{
  unint64_t result = qword_1001750B0[0];
  if (!qword_1001750B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011C314, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_1001750B0);
  }

  return result;
}

unint64_t sub_10010AD08()
{
  unint64_t result = qword_1001751C0;
  if (!qword_1001751C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011C284, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001751C0);
  }

  return result;
}

unint64_t sub_10010AD50()
{
  unint64_t result = qword_1001751C8[0];
  if (!qword_1001751C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011C2AC, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_1001751C8);
  }

  return result;
}

uint64_t sub_10010AD94(uint64_t a1)
{
  uint64_t v4 = (void *)v1[2];
  uint64_t v35 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v27 = v1[4];
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  sub_100005110(v4, v6);
  sub_1001073DC(v6, v7);
  uint64_t v8 = v30;
  uint64_t v9 = v31;
  sub_100005110(v29, v30);
  uint64_t v10 = sub_100005FB4(&qword_10015A818);
  uint64_t inited = swift_initStackObject(v10, v28);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = NSURLIsDirectoryKey;
  uint64_t v12 = NSURLIsDirectoryKey;
  uint64_t v13 = sub_10008EF0C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1LL, v14);
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v9 + 192))(v32, a1, v13, v8, v9);
  swift_bridgeObjectRelease(v13);
  sub_100006034(v29);
  if (!v2)
  {
    uint64_t v15 = v35;
    uint64_t v16 = v5;
    uint64_t v17 = v33;
    uint64_t v18 = v34;
    sub_100005110(v32, v33);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    if ((v19 & 1) != 0
      && (uint64_t v20 = URL.path.getter(v19),
          uint64_t v22 = v21,
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 112LL))(v20),
          uint64_t v25 = v24,
          swift_bridgeObjectRelease(v22),
          v25))
    {
      if (v23 == v27 && v25 == v16) {
        LOBYTE(v1sub_10003A584(v0 + 3) = 1;
      }
      else {
        LOBYTE(v1sub_10003A584(v0 + 3) = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v16, 0LL);
      }
      swift_bridgeObjectRelease(v25);
    }

    else
    {
      LOBYTE(v1sub_10003A584(v0 + 3) = 0;
    }

    sub_100006034(v32);
  }

  return v13 & 1;
}

uint64_t sub_10010AF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10010B00C(v10, v7, v8);
}

uint64_t sub_10010B00C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_10015B0E8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10010B078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_10015B0E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_10010B0C4()
{
  return swift_retain(*(void *)(v0 + 64));
}

uint64_t sub_10010B0F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = a1;
  return swift_release(v3);
}

uint64_t sub_10010B13C()
{
  *(void *)(swift_allocObject(v0, 72LL, 7LL) + 64) = 0LL;
  uint64_t v1 = (uint64_t *)DriverKitDaemonXPC.NotificationType.approvalsChanged.unsafeMutableAddressor();
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain_n(v3, 2LL);
  return sub_100077B98(v2, v3, v2, (uint64_t)v3);
}

void sub_10010B19C()
{
}

uint64_t sub_10010B1C8()
{
  return swift_release(*(void *)(v0 + 64));
}

uint64_t sub_10010B1D0()
{
  uint64_t v0 = sub_100078278();
  swift_release(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t sub_10010B204(void *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)v1 + 216LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t type metadata accessor for RealApprovalsXPCPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd25RealApprovalsXPCPublisher);
}

uint64_t DERImg4DecodeTagCompare(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 4) {
    return 0xFFFFFFFFLL;
  }
  if (v2 != 4) {
    return 1LL;
  }
  unsigned int v5 = 0;
  if (v5 < a2) {
    return 0xFFFFFFFFLL;
  }
  return v5 > a2;
}

uint64_t DERImg4Decode(void *a1, unint64_t a2)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      unint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      uint64_t result = DERDecodeItem((uint64_t)a1, &v6);
      if (!(_DWORD)result)
      {
        if (v6 == 0x2000000000000010LL)
        {
          uint64_t v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }

          else if (*a1 + v5 == v7 + v8)
          {
            uint64_t result = DERParseSequenceContentToObject(&v7, 4u, (uint64_t)&DERImg4ItemSpecs, a2, 0x40uLL, 0LL);
            if (!(_DWORD)result) {
              return 2 * (DERImg4DecodeTagCompare(a2, 0x494D4734u) != 0);
            }
          }

          else
          {
            return 7LL;
          }
        }

        else
        {
          return 2LL;
        }
      }
    }
  }

  return result;
}

uint64_t DERImg4DecodePayloadCompression(unint64_t *a1, char **a2)
{
  unsigned int v5 = 2;
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = DERParseSequenceContentToObject( a1,  2u,  (uint64_t)&DERImg4CompressionItemSpecs,  (unint64_t)a2,  0x20uLL,  0LL);
      if (!(_DWORD)result)
      {
        uint64_t result = DERParseInteger(a2, &v5);
        if (!(_DWORD)result)
        {
          if (v5 <= 1) {
            return 0LL;
          }
          else {
            return 6LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t DERImg4DecodePayloadWithProperties(uint64_t a1, unint64_t a2)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = DERParseSequenceToObject(a1, 7u, (uint64_t)&DERImg4PayloadWithPropertiesItemSpecs, a2, 0xA0uLL, 0LL);
      if (!(_DWORD)result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2LL;
        }

        else if (!*(void *)(a2 + 80) {
               || (__int128 v7 = 0u,
        }
                   __int128 v8 = 0u,
                   uint64_t result = DERImg4DecodePayloadCompression((unint64_t *)(a2 + 80), (char **)&v7),
                   !(_DWORD)result))
        {
          uint64_t v6 = *(void *)(a2 + 96);
          uint64_t v5 = a2 + 96;
          if (!v6) {
            return 0LL;
          }
          __int128 v7 = 0u;
          __int128 v8 = 0u;
          uint64_t result = DERImg4DecodePayloadProperties(v5, (unint64_t)&v7);
          if (!(_DWORD)result) {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t DERImg4DecodePayloadProperties(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6LL;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4PayloadPropertiesItemSpecs, a2, 0x20uLL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t DERImg4DecodePayload(uint64_t a1, unint64_t a2)
{
  uint64_t result = 6LL;
  if (a1 && a2)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    uint64_t result = DERImg4DecodePayloadWithProperties(a1, (unint64_t)&v11);
    if ((_DWORD)result)
    {
      uint64_t result = DERParseSequenceToObject(a1, 6u, (uint64_t)&DERImg4PayloadItemSpecs, a2, 0x90uLL, 0LL);
      if (!(_DWORD)result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2LL;
        }

        else
        {
          uint64_t v6 = *(void *)(a2 + 80);
          uint64_t v5 = (unint64_t *)(a2 + 80);
          if (!v6) {
            return 0LL;
          }
          memset(v10, 0, sizeof(v10));
          uint64_t result = DERImg4DecodePayloadCompression(v5, (char **)v10);
          if (!(_DWORD)result) {
            return 0LL;
          }
        }
      }
    }

    else
    {
      __int128 v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      __int128 v8 = v14;
      *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      __int128 v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }

  return result;
}

uint64_t DERImg4DecodeManifest(void *a1, unint64_t a2)
{
  return sub_10010B680(a1, 5uLL, (uint64_t)&DERImg4ManifestItemSpecs, a2, 0x494D344Du);
}

uint64_t sub_10010B680(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result = 6LL;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1]) {
      return 0LL;
    }
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }

    uint64_t result = DERParseSequenceToObject((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0LL);
    if (!(_DWORD)result)
    {
      unsigned int v9 = 0;
      uint64_t result = DERParseInteger((char **)(a4 + 16), &v9);
      if ((_DWORD)result) {
        return result;
      }
      if (v9 > 2) {
        return 2LL;
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t DERImg4DecodeRestoreInfo(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6LL;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4RestoreInfoItemSpecs, a2, 0x20uLL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

double Img4DecodeInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v5 = 0u;
      __int128 v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 11sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 19sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 2sub_10007CFB4(v0 + 40) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 27sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 35sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 43sub_100006034(v0 + 2) = 0u;
      *(void *)(a3 + 448) = 0LL;
      if (!DERImg4Decode(v9, (unint64_t)&v5)
        && !DERImg4DecodePayload((uint64_t)&v6, a3 + 88)
        && !DERImg4DecodeManifest(&v7, a3 + 232)
        && !DERImg4DecodeRestoreInfo((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        double result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }

  return result;
}

double Img4DecodeInitPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3)
  {
    *(void *)&__int128 v5 = a1;
    *((void *)&v5 + 1) = a2;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 11sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 19sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 2sub_10007CFB4(v0 + 40) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 27sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 35sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 43sub_100006034(v0 + 2) = 0u;
    *(void *)(a3 + 448) = 0LL;
    if (!DERImg4DecodePayload((uint64_t)&v5, a3 + 88))
    {
      double result = *(double *)&v5;
      *(_OWORD *)(a3 + 8) = v5;
    }
  }

  return result;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0LL);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3LL;
  }
  uint64_t v4 = *(_BYTE **)result;
  if (*(void *)result == -1LL) {
    goto LABEL_68;
  }
  __int128 v5 = &v4[v3];
  __int128 v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    __int128 v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1LL)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      __int128 v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0LL;
            }
LABEL_34:
            double result = 0LL;
            *a3 = v15;
            return result;
          }

LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }

        return 3LL;
      }

      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3LL;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3LL;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3LL;
      }
      unint64_t v15 = 0LL;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1LL)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          double result = 3LL;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          unint64_t v28 = &v5[-v23];
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0LL;
        }
      }
    }

LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }

  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3LL;
  }
  unint64_t v8 = 0LL;
  double result = 3LL;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    __int128 v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3LL;
      }
      goto LABEL_20;
    }
  }

  return result;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = DERParseInteger64(a1, &v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4))
    {
      return 7LL;
    }

    else
    {
      uint64_t result = 0LL;
      *a2 = v4;
    }
  }

  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3LL;
  }
  unint64_t v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3LL;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7LL;
    }
    goto LABEL_10;
  }

  if (v2 >= 2)
  {
    if (v2 > 9) {
      return 7LL;
    }
  }

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  v10[0] = 0LL;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1LL;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0LL);
  if (!(_DWORD)result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0LL;
        *a1 = v9;
        return result;
      }

      __break(0x5519u);
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t DERParseSequenceToObject( uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0LL);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010LL) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t DERParseSequenceContentToObject( unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v32 = 0LL;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }

  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    uint64_t v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result) {
        break;
      }
      if (a2 <= v13) {
        return 2LL;
      }
      while (1)
      {
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24LL * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24LL * v13 + 8)) {
          break;
        }
        uint64_t result = 2LL;
        if ((v18 & 1) != 0)
        {
          ++v13;
        }

        return result;
      }

      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24LL * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7LL;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3LL;
            }

            goto LABEL_59;
          }

          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }

          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }

      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }

_DWORD *DEREncoderCreate(int a1)
{
  uint64_t result = calloc(1uLL, 0x10uLL);
  if (result) {
    result[3] = a1;
  }
  return result;
}

void DEREncoderDestroy(void **a1)
{
  if (a1)
  {
    unint64_t v2 = *a1;
    if (v2)
    {
      do
      {
        unint64_t v3 = (void *)*v2;
        sub_10010C968((uint64_t)v2);
        unint64_t v2 = v3;
      }

      while (v3);
    }

    free(a1);
  }

uint64_t DEREncoderAddData( uint64_t *a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, int a6)
{
  unint64_t v7 = sub_10010C274(a2, a3, a4, a5, a6, 3);
  return sub_10010C104(a1, (uint64_t)v7);
}

uint64_t sub_10010C104(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1)
  {
    uint64_t v22 = 1LL;
    if (!a2) {
      return v22;
    }
    goto LABEL_30;
  }

  if (!a2) {
    return 2LL;
  }
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a2;
  do
  {
    int v6 = *(_DWORD *)(v5 + 20);
    BOOL v7 = __CFADD__(v4, v6);
    int v8 = v4 + v6;
    if (v7 || (int v9 = *(_DWORD *)(v5 + 24), v4 = v8 + v9, __CFADD__(v8, v9)))
    {
      uint64_t v22 = 2LL;
      do
      {
LABEL_30:
        uint64_t v23 = *(void *)v2;
        sub_10010C968(v2);
        uint64_t v2 = v23;
      }

      while (v23);
      return v22;
    }

    uint64_t v5 = *(void *)v5;
  }

  while (v5);
  unint64_t v10 = (uint64_t *)*a1;
  unint64_t v11 = a1;
  if (!*a1) {
    goto LABEL_26;
  }
  int v12 = *((_DWORD *)a1 + 3);
  unint64_t v11 = a1;
  while (2)
  {
    unsigned __int16 v13 = v11;
    unint64_t v11 = v10;
    if (!v12) {
      goto LABEL_20;
    }
    unint64_t v14 = bswap64(*(void *)(v2 + 28));
    unint64_t v15 = bswap64(*(uint64_t *)((char *)v11 + 28));
    if (v14 != v15 || (unint64_t v14 = bswap64(*(void *)(v2 + 36)), v15 = bswap64(*(uint64_t *)((char *)v11 + 36)), v14 != v15))
    {
      if (v14 < v15) {
        int v16 = -1;
      }
      else {
        int v16 = 1;
      }
LABEL_19:
      if (v16 < 0) {
        break;
      }
      goto LABEL_20;
    }

    unsigned int v17 = *(_DWORD *)(v2 + 24);
    unsigned int v18 = *((_DWORD *)v11 + 6);
    if (v17 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    int v16 = memcmp(*(const void **)(v2 + 8), (const void *)v11[1], v19);
    if (v16) {
      goto LABEL_19;
    }
    if (v17 >= v18)
    {
LABEL_20:
      unint64_t v10 = (uint64_t *)*v11;
      if (!*v11) {
        goto LABEL_26;
      }
      continue;
    }

    break;
  }

  __int128 v20 = (void *)v2;
  do
  {
    uint64_t v21 = v20;
    __int128 v20 = (void *)*v20;
  }

  while (v20);
  *uint64_t v21 = v11;
  unint64_t v11 = v13;
LABEL_26:
  uint64_t v22 = 0LL;
  *unint64_t v11 = v2;
  *((_DWORD *)a1 + sub_100006034(v0 + 2) = v4;
  return v22;
}

char *sub_10010C274(unsigned int a1, unsigned int a2, const void *a3, unsigned int a4, int a5, int a6)
{
  if (!a3 && a4 && a6) {
    return 0LL;
  }
  int v12 = (char *)calloc(1uLL, 0x38uLL);
  unsigned __int16 v13 = v12;
  if (!v12) {
    return v13;
  }
  *((_DWORD *)v12 + 4) = 1;
  unint64_t v14 = v12 + 28;
  if (a1 == 259)
  {
    int v15 = 0;
    goto LABEL_7;
  }

  if (a1 > 3) {
    goto LABEL_40;
  }
  if (a2 > 0x1E)
  {
    uint64_t v17 = 0LL;
    uint64_t v28 = 0LL;
    do
    {
      *((_BYTE *)&v28 + v17++) = a2 & 0x7F;
      BOOL v18 = a2 > 0x7F;
      a2 >>= 7;
    }

    while (v18);
    int v16 = (_DWORD)v13 + 28;
    if ((v17 & 0xFFFFFFF0) == 0)
    {
      v13[28] = ((_BYTE)a1 << 6) | (32 * (a5 != 0)) | 0x1F;
      size_t v19 = v13 + 29;
      if (v17 >= 2)
      {
        uint64_t v20 = v17 - 1;
        do
          *v19++ = *((_BYTE *)&v28 + v20--) | 0x80;
        while ((_DWORD)v20);
      }

      *size_t v19 = v28;
      int v16 = (_DWORD)v19 + 1;
    }
  }

  else
  {
    v13[28] = ((_BYTE)a1 << 6) | (32 * (a5 != 0)) | a2;
    int v16 = (_DWORD)v13 + 29;
  }

  int v21 = v16 - (_DWORD)v14;
  if (!v21) {
    goto LABEL_40;
  }
  uint64_t v22 = &v14[v21];
  if (a4 > 0x7F)
  {
    uint64_t v24 = 0LL;
    uint64_t v28 = 0LL;
    unsigned int v25 = a4;
    do
    {
      *((_BYTE *)&v28 + v24++) = v25;
      BOOL v18 = v25 > 0xFF;
      v25 >>= 8;
    }

    while (v18);
    if (16 - v21 <= v24)
    {
      LODWORD(v2sub_10003A584(v0 + 3) = (_DWORD)v14 + v21;
    }

    else
    {
      *uint64_t v22 = v24 | 0x80;
      uint64_t v23 = v22 + 1;
      if ((_DWORD)v24)
      {
        do
          *v23++ = *((_BYTE *)&v28 + --v24);
        while (v24);
      }
    }
  }

  else
  {
    LODWORD(v2sub_10003A584(v0 + 3) = (_DWORD)v14 + v21;
    if (v21 != 16)
    {
      *uint64_t v22 = a4;
      LODWORD(v2sub_10003A584(v0 + 3) = (_DWORD)v22 + 1;
    }
  }

  int v26 = (_DWORD)v23 - (_DWORD)v22;
  if ((_DWORD)v23 == (_DWORD)v22)
  {
LABEL_40:
    free(v13);
    return 0LL;
  }

  unint64_t v14 = &v22[v26];
  int v15 = v21 + v26;
LABEL_7:
  *((_DWORD *)v13 + 5) = v15;
  switch(a6)
  {
    case 0:
      *((void *)v13 + 1) = 0LL;
      *((void *)v13 + 6) = 0LL;
      *((_DWORD *)v13 + 6) = 0;
      return v13;
    case 1:
      *((void *)v13 + 1) = a3;
      *((void *)v13 + 6) = 0LL;
      goto LABEL_25;
    case 2:
      *((void *)v13 + 1) = a3;
      *((void *)v13 + 6) = v13;
LABEL_25:
      *((_DWORD *)v13 + 6) = a4;
      return v13;
    case 3:
      if (v13 + 56 - v14 >= a4)
      {
        *((void *)v13 + 1) = v14;
        *((_DWORD *)v13 + 6) = a4;
      }

      else
      {
        unint64_t v14 = (char *)malloc(a4);
        *((void *)v13 + 1) = v14;
        *((void *)v13 + 6) = v13;
        *((_DWORD *)v13 + 6) = a4;
        if (!v14) {
          goto LABEL_40;
        }
      }

      memcpy(v14, a3, a4);
      break;
    default:
      return v13;
  }

  return v13;
}

uint64_t DEREncoderAddDataNoCopy( uint64_t *a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, int a6)
{
  BOOL v7 = sub_10010C274(a2, a3, a4, a5, a6, 1);
  return sub_10010C104(a1, (uint64_t)v7);
}

uint64_t DEREncoderAddUInt32(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = 0LL;
  unsigned int v10 = bswap32(a4);
  char v11 = 0;
  unsigned int v12 = v10;
  while (!*((_BYTE *)&v10 + v5))
  {
    if (++v5 == 4)
    {
      int v6 = 0;
      goto LABEL_6;
    }
  }

  int v6 = ((unint64_t)*((unsigned __int8 *)&v10 + v5) >> 7) - v5 + 4;
LABEL_6:
  if (v6 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  int v8 = sub_10010C274(a2, a3, &v11 - v7 + 5, v7, 0, 3);
  return sub_10010C104(a1, (uint64_t)v8);
}

uint64_t DEREncoderCreateEncodedBuffer(uint64_t **a1, void *a2, unsigned int *a3)
{
  if (!a1) {
    return 1LL;
  }
  unsigned int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = (char *)malloc(v6);
  if (!v7) {
    return 2LL;
  }
  int v8 = v7;
  int v9 = (uint64_t **)*a1;
  if (*a1)
  {
    unsigned int v10 = v7;
    do
    {
      memcpy(v10, (char *)v9 + 28, *((unsigned int *)v9 + 5));
      char v11 = &v10[*((unsigned int *)v9 + 5)];
      memcpy(v11, v9[1], *((unsigned int *)v9 + 6));
      unsigned int v10 = &v11[*((unsigned int *)v9 + 6)];
      int v9 = (uint64_t **)*v9;
    }

    while (v9);
  }

  if (a3) {
    *a3 = v6;
  }
  if (a2)
  {
    uint64_t result = 0LL;
    *a2 = v8;
  }

  else
  {
    free(v8);
    return 0LL;
  }

  return result;
}

uint64_t sub_10010C6EC(uint64_t **a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v13 = 0;
  unsigned int v12 = 0LL;
  uint64_t v9 = DEREncoderCreateEncodedBuffer(a1, &v12, &v13);
  if (!(_DWORD)v9)
  {
    uint64_t v9 = 2LL;
    unsigned int v10 = sub_10010C274(a3, a4, v12, v13, a5, 2);
    if (v10)
    {
      unsigned int v12 = 0LL;
      uint64_t v9 = sub_10010C104(a2, (uint64_t)v10);
    }
  }

  if (v12) {
    free(v12);
  }
  return v9;
}

uint64_t DEREncoderAddDataFromEncoderNoCopy(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t result = 1LL;
  if (!a1 || !a2) {
    return result;
  }
  if (*(_DWORD *)(a2 + 12)) {
    return sub_10010C6EC((uint64_t **)a1, (uint64_t *)a2, a3, a4, a5);
  }
  int v8 = sub_10010C274(a3, a4, 0LL, *(_DWORD *)(a1 + 8), 1, 0);
  if (!v8) {
    return 2LL;
  }
  uint64_t v9 = v8;
  unsigned int v10 = *(uint64_t **)a1;
  int v21 = 0LL;
  for (unint64_t i = &v21; ; unint64_t i = v12)
  {
    if (!v10)
    {
      size_t v19 = v21;
      *(void *)uint64_t v9 = v21;
      if (!v19) {
        goto LABEL_20;
      }
      return sub_10010C104((uint64_t *)a2, (uint64_t)v9);
    }

    unsigned int v12 = malloc(0x38uLL);
    if (!v12) {
      break;
    }
    uint64_t v13 = v10[6];
    __int128 v15 = *((_OWORD *)v10 + 1);
    __int128 v14 = *((_OWORD *)v10 + 2);
    *(_OWORD *)unsigned int v12 = *(_OWORD *)v10;
    *((_OWORD *)v12 + 1) = v15;
    void v12[6] = v13;
    *((_OWORD *)v12 + sub_100006034(v0 + 2) = v14;
    *unsigned int v12 = 0LL;
    *((_DWORD *)v12 + 4) = 1;
    unint64_t v16 = v10[1];
    if ((unint64_t)v10 + 28 > v16 || v16 >= (unint64_t)(v10 + 7))
    {
      if (v13) {
        ++*(_DWORD *)(v13 + 16);
      }
    }

    else
    {
      v12[1] = (char *)v12 + v16 - (void)v10;
    }

    void *i = v12;
    unsigned int v10 = (uint64_t *)*v10;
  }

  uint64_t v17 = v21;
  if (v21)
  {
    do
    {
      BOOL v18 = (void *)*v17;
      sub_10010C968((uint64_t)v17);
      uint64_t v17 = v18;
    }

    while (v18);
  }

  *(void *)uint64_t v9 = 0LL;
LABEL_20:
  if (!*(void *)a1) {
    return sub_10010C104((uint64_t *)a2, (uint64_t)v9);
  }
  do
  {
    uint64_t v20 = *(char **)v9;
    sub_10010C968((uint64_t)v9);
    uint64_t v9 = v20;
  }

  while (v20);
  return 2LL;
}

void sub_10010C968(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1;
  *(_DWORD *)(a1 + 16) = v1;
  if (!v1)
  {
    unint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      if (((unint64_t)v3 >= a1 + 56 || a1 + 28 > (unint64_t)v3) && v4 != 0)
      {
        if (v4 == a1) {
          free(v3);
        }
        else {
          sub_10010C968(*(void *)(a1 + 48));
        }
      }
    }

    free((void *)a1);
  }

uint64_t Img4EncodeCreatePayload( const char *a1, const char *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, void *a7, unsigned int *a8)
{
  int v8 = 0LL;
  uint64_t v9 = 101LL;
  if (!a1 || !a2)
  {
    unsigned int v12 = 0LL;
    goto LABEL_16;
  }

  unsigned int v12 = 0LL;
  if (a3)
  {
    if (strlen(a1) != 4)
    {
      int v8 = 0LL;
      unsigned int v12 = 0LL;
      goto LABEL_16;
    }

    int v8 = (uint64_t *)DEREncoderCreate(0);
    if (v8)
    {
      unsigned int v12 = (uint64_t **)DEREncoderCreate(0);
      if (v12)
      {
        uint64_t v18 = DEREncoderAddData(v8, 0, 0x16u, "IM4P", 4u, 0);
        if ((_DWORD)v18
          || (uint64_t v18 = DEREncoderAddData(v8, 0, 0x16u, a1, 4u, 0), (_DWORD)v18)
          || (unsigned int v19 = strlen(a2), v18 = DEREncoderAddData(v8, 0, 0x16u, a2, v19, 0), (_DWORD)v18)
          || (uint64_t v18 = DEREncoderAddDataNoCopy(v8, 0, 4u, a3, a4, 0), (_DWORD)v18)
          || a5 && (uint64_t v18 = DEREncoderAddDataNoCopy(v8, 0, 4u, a5, a6, 0), (_DWORD)v18)
          || (uint64_t v18 = DEREncoderAddDataFromEncoderNoCopy((uint64_t)v8, (uint64_t)v12, 0, 0x10u, 1), (_DWORD)v18))
        {
          uint64_t v9 = v18;
        }

        else
        {
          unsigned int EncodedBuffer = DEREncoderCreateEncodedBuffer(v12, a7, a8);
          if (EncodedBuffer) {
            uint64_t v9 = EncodedBuffer;
          }
          else {
            uint64_t v9 = 100LL;
          }
        }

        goto LABEL_16;
      }
    }

    else
    {
      unsigned int v12 = 0LL;
    }

    uint64_t v9 = 2LL;
  }

void sub_10010CBA8(void *a1)
{
  int v1 = (void *)objc_claimAutoreleasedReturnValue([a1 localizedFailureReason]);
  int v2 = 138543362;
  unint64_t v3 = v1;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Failed to submit job: %{public}@",  (uint8_t *)&v2,  0xCu);
}

void sub_10010CC3C(void *a1)
{
  v1[0] = 67109120;
  v1[1] = [a1 state];
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Job submitted but not running: %d",  (uint8_t *)v1,  8u);
}

id objc_msgSend_initWithPlist_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlist:domain:");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_submitAndStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitAndStart:");
}

id objc_msgSend_systemDomain(void *a1, const char *a2, ...)
{
  return _[a1 systemDomain];
}