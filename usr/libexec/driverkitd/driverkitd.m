void sub_100004D44(void *a1)
{
  id v1;
  void *v2;
  v1 = objc_retainBlock(a1);
  v2 = (void *)qword_10015CA30;
  qword_10015CA30 = (uint64_t)v1;
}

uint64_t sub_100004D64()
{
  if (!qword_10015CA30) {
    return 3758097112LL;
  }
  (*(void (**)(void))(qword_10015CA30 + 16))();
  return 0LL;
}

uint64_t sub_100004DA4(void *a1, _DWORD *a2)
{
  id v3 = a1;
  id v4 = objc_alloc(&OBJC_CLASS___OSLaunchdJob);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[OSLaunchdDomain systemDomain](&OBJC_CLASS___OSLaunchdDomain, "systemDomain"));
  id v6 = [v4 initWithPlist:v3 domain:v5];

  id v11 = 0LL;
  v7 = (void *)objc_claimAutoreleasedReturnValue([v6 submitAndStart:&v11]);
  id v8 = v11;
  if (v7)
  {
    if ([v7 state] == (id)2)
    {
      uint64_t v9 = 0LL;
      if (a2) {
        *a2 = [v7 pid];
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10010CC3C(v7);
      }
      uint64_t v9 = 8LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10010CBA8(v8);
    }
    uint64_t v9 = 72LL;
  }

  return v9;
}

_DWORD *(*sub_100004EF8(uint64_t a1))(_DWORD *result, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == 77000) {
    return sub_100004F14;
  }
  else {
    return 0LL;
  }
}

_DWORD *sub_100004F14(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    result = (_DWORD *)sub_100004D64();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

uint64_t sub_100004F6C(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 77000)
  {
    if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
    {
      *(_DWORD *)(a2 + 32) = -304;
      *(NDR_record_t *)(a2 + 24) = NDR_record;
    }

    else
    {
      *(_DWORD *)(a2 + 32) = sub_100004D64();
    }

    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }

  return result;
}

void sub_10000501C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100005110(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  sub_100005F70((uint64_t)a1, (uint64_t)v11);
  uint64_t v7 = swift_allocObject(&unk_100145C90, 56LL, 7LL);
  sub_100005158(v11, v7 + 16);
  aBlock[4] = sub_100005170;
  uint64_t v10 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100005550;
  aBlock[3] = &unk_100145CA8;
  id v8 = _Block_copy(aBlock);
  swift_release(v10);
  AnalyticsSendEventLazy(v6, v8);
  _Block_release(v8);
}

void *sub_100005110(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100005134()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100005158(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100005170()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100005110(v0 + 2, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  sub_1000051CC(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v3);
  return v5;
}

void sub_1000051CC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100005FB4(&qword_100157C38);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v37 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  uint64_t v7 = &v44;
  int64_t v36 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(v1);
  int64_t v8 = 0LL;
  uint64_t v9 = (unint64_t *)&unk_100157C30;
  uint64_t v10 = &OBJC_CLASS___NSObject_ptr;
  id v11 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      uint64_t v39 = (v6 - 1) & v6;
      int64_t v40 = v8;
      unint64_t v19 = __clz(__rbit64(v6)) | (v8 << 6);
    }

    else
    {
      int64_t v20 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_36;
      }
      if (v20 >= v36)
      {
LABEL_33:
        sub_10000610C(v1);
        return;
      }

      unint64_t v21 = *(void *)(v37 + 8 * v20);
      int64_t v22 = v8 + 1;
      if (!v21)
      {
        int64_t v22 = v8 + 2;
        if (v8 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v8 + 3;
          if (v8 + 3 >= v36) {
            goto LABEL_33;
          }
          unint64_t v21 = *(void *)(v37 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v8 + 4;
            if (v8 + 4 >= v36) {
              goto LABEL_33;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v22);
            if (!v21)
            {
              uint64_t v23 = v8 + 5;
              if (v8 + 5 >= v36) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v37 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1LL)) {
                    goto LABEL_37;
                  }
                  if (v22 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = *(void *)(v37 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v22 = v8 + 5;
            }
          }
        }
      }

LABEL_26:
      uint64_t v39 = (v21 - 1) & v21;
      int64_t v40 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }

    v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    sub_100006054(*(void *)(v1 + 56) + 32 * v19, (uint64_t)v7);
    v43[0] = v26;
    v43[1] = v25;
    sub_100006054((uint64_t)v7, (uint64_t)v42);
    swift_bridgeObjectRetain_n(v25, 2LL);
    sub_1000060CC((uint64_t)v43);
    uint64_t v27 = sub_100006094(0LL, v9, v10);
    if (!swift_dynamicCast(&v41, v42, v11, v27, 6LL))
    {
      id v41 = 0LL;
      swift_bridgeObjectRelease(v25);

      sub_10000610C(v1);
      swift_release(v3);
      return;
    }

    id v28 = v41;
    unint64_t v29 = sub_100006114(v26, v25);
    unint64_t v30 = v29;
    if ((v31 & 1) != 0)
    {
      id v38 = v28;
      v12 = v11;
      v13 = v10;
      v14 = v7;
      uint64_t v15 = v1;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease(v17[1]);
      uint64_t *v17 = v26;
      v17[1] = v25;
      uint64_t v9 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      uint64_t v10 = v13;
      id v11 = v12;
      uint64_t v18 = v3[7];

      *(void *)(v18 + 8 * v30) = v38;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v29;
    v32 = (uint64_t *)(v3[6] + 16 * v29);
    uint64_t *v32 = v26;
    v32[1] = v25;
    *(void *)(v3[7] + 8 * v29) = v28;
    uint64_t v33 = v3[2];
    BOOL v34 = __OFADD__(v33, 1LL);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_35;
    }
    v3[2] = v35;
LABEL_8:
    unint64_t v6 = v39;
    int64_t v8 = v40;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

        uint64_t v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      int64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      Data.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    int64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    sub_1000125E0(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

        v53 = sub_1000D334C();
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v53, v3);
        v54 = v20;
        v55 = swift_bridgeObjectRetain_n(v20, 2LL);
        v56 = (os_log_s *)Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(22LL, -1LL);
          v91 = (char *)swift_slowAlloc(64LL, -1LL);
          *(void *)&v97 = v91;
          *(_DWORD *)v58 = 136315394;
          v89 = v58 + 4;
          v59 = swift_bridgeObjectRetain(v54);
          v90 = (unint64_t)&type metadata for Any + 8;
          v60 = Dictionary.description.getter(v59);
          v93 = v4;
          v61 = v21;
          v63 = v62;
          swift_bridgeObjectRelease(v54);
          v95 = sub_1000058CC(v60, v63, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v89, v58 + 12);
          swift_bridgeObjectRelease_n(v54, 2LL);
          swift_bridgeObjectRelease(v63);
          *(_WORD *)(v58 + 12) = 2080;
          v64 = v3;
          v65 = *v23;
          v66 = v23[1];
          swift_bridgeObjectRetain(v66);
          v95 = sub_1000058CC(v65, v66, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v58 + 14, v58 + 22);
          swift_bridgeObjectRelease(v66);
          _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Codeless info %s did not contain path for key %s",  (uint8_t *)v58,  0x16u);
          v67 = v91;
          swift_arrayDestroy(v91, 2LL, v90);
          swift_slowDealloc(v67, -1LL, -1LL);
          swift_slowDealloc(v58, -1LL, -1LL);
          sub_10001226C(v92, v61);

          (*(void (**)(char *, uint64_t))(v93 + 8))(v10, v64);
          goto LABEL_15;
        }

        swift_bridgeObjectRelease_n(v54, 2LL);
        sub_10001226C(v92, v21);

        int64_t v40 = *(void (**)(char *, uint64_t))(v4 + 8);
        id v41 = v10;
        goto LABEL_14;
      }
    }

    else
    {
      v97 = 0u;
      v98 = 0u;
    }

    sub_100012824((uint64_t)&v97, &qword_100157FF8);
    goto LABEL_26;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v44 = (v17 - 1) & v17;
        v46 = v18;
        uint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }

      int64_t v20 = *(void *)(v3 + 48) + 72 * v15;
      unint64_t v21 = *(void *)v20;
      int64_t v22 = *(void *)(v20 + 8);
      uint64_t v23 = *(void *)(v20 + 16);
      v24 = *(void *)(v20 + 24);
      uint64_t v26 = *(void *)(v20 + 32);
      uint64_t v25 = *(void *)(v20 + 40);
      uint64_t v27 = *(void *)(v20 + 56);
      v47 = *(void *)(v20 + 48);
      id v28 = *(unsigned __int8 *)(v20 + 64);
      Hasher.init(_seed:)(v48, *(void *)(v6 + 40));
      swift_bridgeObjectRetain(v22);
      v45 = v21;
      String.hash(into:)(v48, v21, v22);
      swift_bridgeObjectRelease(v22);
      if (v24)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v24);
        String.hash(into:)(v48, v23, v24);
        swift_bridgeObjectRelease(v24);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      unint64_t v29 = v28;
      if (v25)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v25);
        unint64_t v30 = v26;
        String.hash(into:)(v48, v26, v25);
        swift_bridgeObjectRelease(v25);
      }

      else
      {
        Hasher._combine(_:)(0);
        unint64_t v30 = v26;
      }

      if (v27 >> 60 == 15)
      {
        Hasher._combine(_:)(0LL);
      }

      else
      {
        Hasher._combine(_:)(1uLL);
        sub_1000125E0(v47, v27);
        Data.hash(into:)(v48, v47, v27);
        sub_10002193C(v47, v27);
      }

      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      unint64_t v6 = v43;
      char v31 = -1LL << *(_BYTE *)(v43 + 32);
      v32 = result & ~v31;
      uint64_t v33 = v32 >> 6;
      if (((-1LL << v32) & ~*(void *)(v10 + 8 * (v32 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v10 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        BOOL v34 = 0;
        uint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }

          int64_t v36 = v33 == v35;
          if (v33 == v35) {
            uint64_t v33 = 0LL;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v10 + 8 * v33);
        }

        while (v37 == -1);
        v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      v14 = *(void *)(v43 + 48) + 72 * v13;
      v12 = v46;
      *(void *)v14 = v45;
      *(void *)(v14 + 8) = v22;
      *(void *)(v14 + 16) = v23;
      *(void *)(v14 + 24) = v24;
      *(void *)(v14 + 32) = v30;
      *(void *)(v14 + 40) = v25;
      *(void *)(v14 + 48) = v47;
      *(void *)(v14 + 56) = v27;
      *(_BYTE *)(v14 + 64) = v29;
      ++*(void *)(v43 + 16);
      uint64_t v3 = v42;
      uint64_t v9 = v44;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v44 = (v17 - 1) & v17;
    v46 = v18;
    uint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_27:
    int64_t v20 = *(void *)(v3 + 48) + 72 * v15;
    unint64_t v21 = *(void *)v20;
    int64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 16);
    v24 = *(void *)(v20 + 24);
    uint64_t v25 = *(void *)(v20 + 40);
    v47 = *(void *)(v20 + 32);
    uint64_t v27 = *(void *)(v20 + 48);
    uint64_t v26 = *(void *)(v20 + 56);
    id v28 = *(unsigned __int8 *)(v20 + 64);
    Hasher.init(_seed:)(v48, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain_n(v22, 2LL);
    swift_bridgeObjectRetain(v24);
    sub_10002B568(v27, v26);
    v45 = v21;
    String.hash(into:)(v48, v21, v22);
    swift_bridgeObjectRelease(v22);
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v24);
      unint64_t v29 = v23;
      String.hash(into:)(v48, v23, v24);
      swift_bridgeObjectRelease(v24);
    }

    else
    {
      unint64_t v29 = v23;
      Hasher._combine(_:)(0);
    }

    unint64_t v30 = v28;
    if (v25)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v25);
      char v31 = v47;
      String.hash(into:)(v48, v47, v25);
      swift_bridgeObjectRelease(v25);
    }

    else
    {
      Hasher._combine(_:)(0);
      char v31 = v47;
    }

    if (v26 >> 60 == 15)
    {
      Hasher._combine(_:)(0LL);
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      sub_1000125E0(v27, v26);
      Data.hash(into:)(v48, v27, v26);
      sub_10002193C(v27, v26);
    }

    Hasher._combine(_:)(v30);
    uint64_t result = Hasher._finalize()();
    unint64_t v6 = v43;
    v32 = -1LL << *(_BYTE *)(v43 + 32);
    uint64_t v33 = result & ~v32;
    BOOL v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v10 + 8 * (v33 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v10 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      int64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          BOOL v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v10 + 8 * v34);
      }

      while (v38 == -1);
      v13 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    v14 = *(void *)(v43 + 48) + 72 * v13;
    v12 = v46;
    *(void *)v14 = v45;
    *(void *)(v14 + 8) = v22;
    *(void *)(v14 + 16) = v29;
    *(void *)(v14 + 24) = v24;
    *(void *)(v14 + 32) = v31;
    *(void *)(v14 + 40) = v25;
    *(void *)(v14 + 48) = v27;
    *(void *)(v14 + 56) = v26;
    *(_BYTE *)(v14 + 64) = v30;
    ++*(void *)(v43 + 16);
    uint64_t v3 = v42;
    uint64_t v9 = v44;
  }

  unint64_t v19 = v12 + 4;
  if (v12 + 4 >= v41)
  {
LABEL_45:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v39;
    goto LABEL_47;
  }

  v17 = *(void *)(v40 + 8 * v19);
  if (v17)
  {
    uint64_t v18 = v12 + 4;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v18 >= v41) {
      goto LABEL_45;
    }
    v17 = *(void *)(v40 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      int64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    int64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
  __break(1u);
LABEL_27:
  v67 = 0LL;
  v68 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v55._object = (void *)0x80000001001227D0LL;
  v55._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  _print_unlocked<A, B>(_:_:)( v10,  &v67,  v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v56._countAndFlagsBits = 39LL;
  v56._object = (void *)0xE100000000000000LL;
  String.append(_:)(v56);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v67,  v68,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  v43 = (v22 - 1) & v22;
  int64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; int64_t v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    uint64_t v25 = 16 * v20;
    uint64_t v26 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    id v28 = *v26;
    uint64_t v27 = v26[1];
    unint64_t v29 = (uint64_t *)(*(void *)(v1 + 56) + v25);
    unint64_t v30 = *v29;
    char v31 = v29[1];
    v45 = v28;
    v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7LL);
    v32 = v45;
    uint64_t v33 = v46;
    sub_100017790(v7, v8);
    sub_100017790(v8, v50);
    sub_100017790(v50, &v48);
    uint64_t result = sub_100006114(v32, v33);
    BOOL v34 = result;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v13 = v8;
      v14 = v7;
      uint64_t v15 = v1;
      v16 = v12;
      v17 = v11;
      uint64_t v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *uint64_t v18 = v32;
      v18[1] = v33;
      id v11 = v17;
      v12 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      int64_t v8 = v13;
      i = v42;
      unint64_t v19 = (void *)(v3[7] + 32 * v34);
      sub_100006034(v19);
      uint64_t result = (unint64_t)sub_100017790(&v48, v19);
      unint64_t v6 = v43;
      if (!v43) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    int64_t v36 = (uint64_t *)(v3[6] + 16 * result);
    *int64_t v36 = v32;
    v36[1] = v33;
    uint64_t result = (unint64_t)sub_100017790(&v48, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v37 = v3[2];
    id v38 = __OFADD__(v37, 1LL);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_34;
    }
    v3[2] = v39;
    unint64_t v6 = v43;
    if (!v43) {
      goto LABEL_11;
    }
LABEL_10:
    v43 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

        uint64_t v9 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }

      unint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
      int64_t v20 = *(void *)(v6 + 40);
      unint64_t v21 = type metadata accessor for OSExtension(0LL);
      int64_t v22 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v10 + 8 * v25);
        }

        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v9 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    unint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    int64_t v20 = *(void *)(v6 + 40);
    unint64_t v21 = type metadata accessor for OSExtension(0LL);
    int64_t v22 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    swift_retain(v19);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v10 + 8 * v25);
      }

      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_36;
    }
    v17 = *(void *)(v31 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

  v102 = v26;
  id v28 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  unint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
  v104 = xmmword_10010F440;
  *(_OWORD *)(v29 + 16) = xmmword_10010F440;
  *(void *)(v29 + 56) = &type metadata for Int;
  *(void *)(v29 + 64) = &protocol witness table for Int;
  *(void *)(v29 + 32) = v27;
  unint64_t v30 = &type metadata for String;
  *(void *)(v29 + 96) = &type metadata for String;
  char v31 = sub_100026B64();
  *(void *)(v29 + 104) = v31;
  *(void *)(v29 + 72) = v108;
  *(void *)(v29 + 80) = a2;
  sub_100026BA8();
  swift_bridgeObjectRetain(a2);
  uint64_t v33 = (void *)static OS_os_log.default.getter(v32);
  BOOL v34 = static os_log_type_t.default.getter(v33);
  os_log(_:dso:log:type:_:)( "Found %{public}d dexts with bundle identifier %{public}s",  56LL,  2LL,  &_mh_execute_header,  v33,  v34,  v29);
  swift_bridgeObjectRelease(v29);

  if (a4 >> 60 == 15)
  {
    uint64_t v35 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_10010F110;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = v31;
    *(void *)(v35 + 32) = v108;
    *(void *)(v35 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v37 = (void *)static OS_os_log.default.getter(v36);
    id v38 = static os_log_type_t.default.getter(v37);
    os_log(_:dso:log:type:_:)( "No unique identifier available to disambiguate between dexts of bundle identifier %{public}s",  92LL,  2LL,  &_mh_execute_header,  v37,  v38,  v35);
    swift_bridgeObjectRelease(v35);

    if ((v106 & 1) == 0)
    {
      v58 = swift_allocObject(v28, 72LL, 7LL);
      *(_OWORD *)(v58 + 16) = xmmword_10010F110;
      *(void *)(v58 + 56) = &type metadata for String;
      *(void *)(v58 + 64) = v31;
      v103 = v31;
      *(void *)(v58 + 32) = v108;
      *(void *)(v58 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      v60 = (void *)static OS_os_log.default.getter(v59);
      v61 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:type:_:)( "Arbitrarily picking first dext with bundle idenfier %{public}s",  62LL,  2LL,  &_mh_execute_header,  v60,  v61,  v58);
      swift_bridgeObjectRelease(v58);

      if (v102)
      {
        swift_bridgeObjectRetain(v14);
        v63 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_release(v14);
        if (!v63) {
          goto LABEL_56;
        }
      }

      else if (!*(void *)(v14 + 16))
      {
LABEL_56:
        swift_release(v14);
        return;
      }

      if ((v14 & 0xC000000000000001LL) != 0) {
        goto LABEL_68;
      }
      if (*(void *)(v14 + 16))
      {
        v55 = a2;
        v56 = *(void *)(v14 + 32);
        swift_retain(v56);
        goto LABEL_45;
      }

      __break(1u);
      goto LABEL_70;
    }

    swift_release(v14);
    v110 = 0LL;
    v111 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(93LL);
    v39._countAndFlagsBits = 0xD000000000000036LL;
    v39._object = (void *)0x8000000100128B20LL;
    String.append(_:)(v39);
    v40._countAndFlagsBits = v108;
    v40._object = a2;
    String.append(_:)(v40);
    v41._countAndFlagsBits = 0xD000000000000025LL;
    v41._object = (void *)0x8000000100128B60LL;
    String.append(_:)(v41);
    v42 = v110;
    v43 = v111;
    uint64_t v44 = sub_100012624();
    v45 = swift_allocError(&type metadata for KMError, v44, 0LL, 0LL);
    *(void *)v46 = v42;
    *(void *)(v46 + 8) = v43;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(void *)(v46 + 64) = 0LL;
    v47 = 50;
LABEL_60:
    *(_BYTE *)(v46 + 72) = v47;
    swift_willThrow(v45);
    return;
  }

  v101 = v28;
  v48 = swift_allocObject(v28, 112LL, 7LL);
  *(_OWORD *)(v48 + 16) = xmmword_10010F440;
  sub_1000125E0(v107, a4);
  v49 = sub_100013B60(v107, a4);
  *(void *)(v48 + 56) = &type metadata for String;
  *(void *)(v48 + 64) = v31;
  *(void *)(v48 + 32) = v49;
  *(void *)(v48 + 40) = v50;
  *(void *)(v48 + 96) = &type metadata for String;
  *(void *)(v48 + 104) = v31;
  v103 = v31;
  *(void *)(v48 + 72) = v108;
  *(void *)(v48 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  v52 = (void *)static OS_os_log.default.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  os_log(_:dso:log:type:_:)( "Using unique id %{public}s to pick dext matching bundle identifier %{public}s",  77LL,  2LL,  &_mh_execute_header,  v52,  v53,  v48);
  swift_bridgeObjectRelease(v48);

  swift_retain(v14);
  sub_10002B568(v107, a4);
  v13 = (uint64_t)sub_1000A3594(v14, v107, a4);
  sub_10002193C(v107, a4);
  swift_release(v14);
  if (!((unint64_t)v13 >> 62))
  {
    v54 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_31;
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v59);
  __break(1u);
LABEL_27:
  v67 = 0LL;
  v68 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v57._object = (void *)0x80000001001227D0LL;
  v57._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v57);
  _print_unlocked<A, B>(_:_:)( v10,  &v67,  v59,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v58._countAndFlagsBits = 39LL;
  v58._object = (void *)0xE100000000000000LL;
  String.append(_:)(v58);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v67,  v68,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    id v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    int64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(*(void *)(v20 + 16));
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
    uint64_t result = swift_retain(v20);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

        id v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      int64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(*(void *)(v20 + 16));
      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t v5 = (v10 - 1) & v10;
  int64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
  for (i = v11; ; int64_t v8 = v7 | (i << 6))
  {
    v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v15 = *v13;
    v14 = v13[1];
    sub_10001A148(*(void *)(a1 + 56) + 48 * v8, (uint64_t)v42, &qword_10015BE10);
    int64_t v40 = v15;
    id v41 = v14;
    v32[0] = v42[0];
    v32[1] = v42[1];
    v32[2] = v42[2];
    *(void *)&uint64_t v33 = v15;
    *((void *)&v33 + 1) = v14;
    swift_bridgeObjectRetain(v14);
    v16 = sub_100005FB4(&qword_10015BE10);
    v17 = sub_100005FB4(&qword_1001591C0);
    swift_dynamicCast(&v34, v32, v16, v17, 7LL);
    uint64_t v18 = v33;
    uint64_t v37 = v34;
    id v38 = v35;
    uint64_t v39 = v36;
    uint64_t v33 = v34;
    BOOL v34 = v35;
    uint64_t v35 = v36;
    unint64_t v19 = sub_100006114(v18, *((uint64_t *)&v18 + 1));
    int64_t v20 = v19;
    if ((v21 & 1) != 0)
    {
      unint64_t v6 = v2[6] + 16 * v19;
      swift_bridgeObjectRelease(*(void *)(v6 + 8));
      *(_OWORD *)unint64_t v6 = v18;
      sub_1000395F4((uint64_t)&v33, v2[7] + 48 * v20, &qword_1001591C0);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v19;
    *(_OWORD *)(v2[6] + 16 * v19) = v18;
    int64_t v22 = (_OWORD *)(v2[7] + 48 * v19);
    uint64_t v23 = v33;
    v24 = v35;
    v22[1] = v34;
    v22[2] = v24;
    *int64_t v22 = v23;
    uint64_t v25 = v2[2];
    uint64_t v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v2[2] = v27;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

Class sub_100005550(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_100006094(0LL, &qword_100157C30, &OBJC_CLASS___NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.isa = 0LL;
  }

  return v5.super.isa;
}

uint64_t sub_1000055D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000055E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000055EC()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

void sub_1000055FC()
{
  os_log_type_t v0 = static os_log_type_t.error.getter();
  sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
  os_log_type_t v1 = v0;
  log = (os_log_s *)static OS_os_log.default.getter();
  if (os_log_type_enabled(log, v0))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v3 = swift_slowAlloc(32LL, -1LL);
    uint64_t v6 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v5 = sub_1000058CC(0x65766528646E6573LL, 0xEC000000293A746ELL, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v5, &v6, v2 + 4, v2 + 12);
    _os_log_impl((void *)&_mh_execute_header, log, v1, "Unexpected call to %s", v2, 0xCu);
    swift_arrayDestroy(v3, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v3, -1LL, -1LL);
    swift_slowDealloc(v2, -1LL, -1LL);
  }

  else
  {
  }
}

uint64_t sub_100005764()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_100005774()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t sub_10000579C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_100005814(v10, v7, v8);
}

uint64_t sub_100005814(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100157AE0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_100005880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157AE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_1000058CC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000599C(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100006054((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100006054((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100006034(v12);
  return v7;
}

uint64_t sub_10000599C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_100005B54(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  if (a1 < 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(a1);
  if (!v4) {
    return 0LL;
  }
LABEL_3:
  type metadata accessor for OSExtension(0LL);
  uint64_t v5 = 0LL;
  a2 = *(void *)(a2 + 24);
  while (1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
    }

    else
    {
      uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
      swift_retain(v6);
    }

    uint64_t v7 = sub_1000F67B8(*(void *)(v6 + 24), a2);
    swift_release(v6);
    if ((v7 & 1) != 0) {
      return v5;
    }
    uint64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_13;
    }

    ++v5;
    if (v8 == v4) {
      return 0LL;
    }
  }

    v1[(v9 >> 6) + 8] |= 1LL << v9;
    v16 = (uint64_t *)(v1[6] + 16 * v9);
    unint64_t *v16 = v4;
    v16[1] = v6;
    *(_OWORD *)(v1[7] + 16 * v9) = v21;
    v17 = v1[2];
    uint64_t v18 = __OFADD__(v17, 1LL);
    unint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_20;
    }
    v1[2] = v19;
    swift_bridgeObjectRetain(v6);
LABEL_5:
    ++v3;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (v2 == v3)
    {
      swift_bridgeObjectRelease(v0);
      goto LABEL_18;
    }
  }

  sub_100071864(v12, isUniquelyReferenced_nonNull_native);
  int v14 = sub_100006114(v4, v6);
  if ((v13 & 1) == (v15 & 1))
  {
    uint64_t v9 = v14;
    if ((v13 & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    BOOL v34 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1LL << v23;
    uint64_t v35 = v34[6];
    v62 = *(void *)(v60 + 72);
    int64_t v36 = v65;
    v66(v35 + v62 * v23, v10, v65);
    *(_BYTE *)(v34[7] + v23) = v20;
    uint64_t v37 = v34[2];
    id v38 = __OFADD__(v37, 1LL);
    uint64_t v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v34[2] = v39;
    int64_t v40 = v16 - 1;
    if (v16 == 1) {
      return swift_bridgeObjectRelease_n(v61, 2LL);
    }
    id v41 = v61 + v64 + v58;
    while (1)
    {
      sub_10001A148(v41, (uint64_t)v15, &qword_10015A058);
      v66((unint64_t)v10, v15, v36);
      v42 = v15[v63];
      v43 = (void *)*a3;
      v45 = sub_100054A3C((uint64_t)v10);
      v46 = v43[2];
      v47 = (v44 & 1) == 0;
      v48 = v46 + v47;
      if (__OFADD__(v46, v47)) {
        break;
      }
      v49 = v44;
      if (v43[3] < v48)
      {
        sub_10007C49C(v48, 1LL);
        v50 = sub_100054A3C((uint64_t)v10);
        if ((v49 & 1) != (v51 & 1)) {
          goto LABEL_26;
        }
        v45 = v50;
      }

      if ((v49 & 1) != 0) {
        goto LABEL_10;
      }
      v52 = (void *)*a3;
      *(void *)(*a3 + 8 * (v45 >> 6) + 64) |= 1LL << v45;
      int64_t v36 = v65;
      v66(v52[6] + v62 * v45, v10, v65);
      *(_BYTE *)(v52[7] + v45) = v42;
      v53 = v52[2];
      id v38 = __OFADD__(v53, 1LL);
      v54 = v53 + 1;
      if (v38) {
        goto LABEL_25;
      }
      v52[2] = v54;
      v41 += v64;
      if (!--v40) {
        return swift_bridgeObjectRelease_n(v61, 2LL);
      }
    }

    unint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1LL << v11;
    *(_BYTE *)(v21[6] + v11) = v6;
    int64_t v22 = v21[7] + 24 * v11;
    *(_BYTE *)int64_t v22 = v7;
    *(void *)(v22 + 8) = v8;
    *(void *)(v22 + 16) = v45;
    uint64_t v23 = v21[2];
    v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v21[2] = v25;
    uint64_t v26 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = (void *)(a1 + 88); ; i += 4)
    {
      unint64_t v29 = *((_BYTE *)i - 16);
      uint64_t v8 = *(i - 1);
      unint64_t v30 = *i;
      v50 = *((_BYTE *)i - 24);
      id v28 = v50;
      char v31 = (void *)*a3;
      swift_bridgeObjectRetain(v8);
      v32 = sub_1000357A4(v50);
      BOOL v34 = v31[2];
      uint64_t v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      int64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      uint64_t v37 = v33;
      if (v31[3] < v36)
      {
        sub_1000A0480(v36, 1LL);
        v32 = sub_1000357A4(v50);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v37 & 1) != 0) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1LL << v32;
      *(_BYTE *)(v39[6] + v32) = v28;
      int64_t v40 = v39[7] + 24 * v32;
      *(_BYTE *)int64_t v40 = v29;
      *(void *)(v40 + 8) = v8;
      *(void *)(v40 + 16) = v30;
      id v41 = v39[2];
      v24 = __OFADD__(v41, 1LL);
      v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v39[2] = v42;
      if (!--v26) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

    int64_t v36 = (void *)*v66;
    *(void *)(*v66 + 8 * (v24 >> 6) + 64) |= 1LL << v24;
    uint64_t v37 = v36[6];
    v63 = *(void *)(v31 + 72);
    sub_1000263D8((uint64_t)v10, v37 + v63 * v24, (uint64_t *)&unk_10015BA30);
    *(void *)(v36[7] + 8 * v24) = v21;
    id v38 = v36[2];
    uint64_t v39 = __OFADD__(v38, 1LL);
    int64_t v40 = v38 + 1;
    if (v39)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v36[2] = v40;
    id v41 = v16 - 1;
    if (!v41) {
      return swift_bridgeObjectRelease_n(v62, 2LL);
    }
    v42 = v62 + v65 + v60;
    v43 = (uint64_t *)&unk_10015BA30;
    while (1)
    {
      sub_10001A148(v42, (uint64_t)v15, &qword_10015B140);
      uint64_t v44 = v43;
      sub_1000263D8((uint64_t)v15, (uint64_t)v10, v43);
      unint64_t v21 = *(void *)&v15[v64];
      v45 = (void *)*v66;
      v47 = sub_1000AE32C((uint64_t)v10);
      v48 = v45[2];
      v49 = (v46 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49)) {
        break;
      }
      v51 = v46;
      if (v45[3] < v50)
      {
        sub_1000AF5B0(v50, 1LL);
        v52 = sub_1000AE32C((uint64_t)v10);
        if ((v51 & 1) != (v53 & 1)) {
          goto LABEL_26;
        }
        v47 = v52;
      }

      if ((v51 & 1) != 0) {
        goto LABEL_10;
      }
      v54 = (void *)*v66;
      *(void *)(*v66 + 8 * (v47 >> 6) + 64) |= 1LL << v47;
      v43 = v44;
      sub_1000263D8((uint64_t)v10, v54[6] + v63 * v47, v44);
      *(void *)(v54[7] + 8 * v47) = v21;
      v55 = v54[2];
      uint64_t v39 = __OFADD__(v55, 1LL);
      v56 = v55 + 1;
      if (v39) {
        goto LABEL_25;
      }
      v54[2] = v56;
      v42 += v65;
      if (!--v41) {
        return swift_bridgeObjectRelease_n(v62, 2LL);
      }
    }

    unint64_t v21 = (uint64_t *)sub_1000900C8();
    if (!*(void *)(v8 + 16)) {
      break;
    }
    int64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain(v23);
    v24 = sub_100006114(v22, v23);
    if ((v25 & 1) != 0)
    {
      sub_100006054(*(void *)(v8 + 56) + 32 * v24, (uint64_t)&v50);
    }

    else
    {
      v50 = 0u;
      v51 = 0u;
    }

    swift_bridgeObjectRelease(v23);
    if (!*((void *)&v51 + 1)) {
      goto LABEL_33;
    }
    uint64_t v15 = v48;
    int v14 = v49;
    uint64_t v26 = swift_allocObject(&unk_10014FCC8, 32LL, 7LL);
    *(void *)(v26 + 16) = a2;
    *(void *)(v26 + 24) = a3;
    uint64_t v27 = v26 | 0x4000000000000000LL;
LABEL_20:
    swift_bridgeObjectRetain(a3);
    if (v47) {
      goto LABEL_35;
    }
    swift_bridgeObjectRelease(v8);
    v52 = v4;
    unint64_t v29 = v4[2];
    id v28 = v4[3];
    if (v29 >= v28 >> 1)
    {
      sub_1000EEA6C((char *)(v28 > 1), v29 + 1, 1);
      uint64_t v4 = v52;
    }

    v4[2] = v29 + 1;
    unint64_t v30 = &v4[3 * v29];
    v30[4] = v15;
    v30[5] = v14;
    v30[6] = v27;
    ++v7;
    --v3;
    a3 = v45;
    if (!v3) {
      return v4;
    }
  }

  v50 = 0u;
  v51 = 0u;
LABEL_33:
  sub_100012824((uint64_t)&v50, &qword_100157FF8);
LABEL_34:
  *(void *)&v50 = 0LL;
  *((void *)&v50 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(*((void *)&v50 + 1));
  *(void *)&v50 = 0xD000000000000025LL;
  *((void *)&v50 + 1) = 0x800000010012C9B0LL;
  BOOL v34 = swift_bridgeObjectRetain(v8);
  uint64_t v35 = Dictionary.description.getter(v34);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease(v8);
  v38._countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v37);
  uint64_t v39 = v50;
  int64_t v40 = sub_100012624();
  id v41 = swift_allocError(&type metadata for KMError, v40, 0LL, 0LL);
  *(_OWORD *)v42 = v39;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_OWORD *)(v42 + 48) = 0u;
  *(void *)(v42 + 64) = 0LL;
  *(_BYTE *)(v42 + 72) = 24;
  swift_willThrow(v41);
LABEL_35:
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  return v4;
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

      v51 = v376;
      v55 = v377;
    }

    else
    {
LABEL_54:
      v123 = v29;
      v124 = sub_1000D322C();
      v125 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v126 = v359;
      v373 = v124;
      v374 = v125;
      v127 = v378;
      ((void (*)(char *))v125)(v359);
      v128 = v352;
      v129 = v400;
      v358 = v64;
      v130 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v352, v379, v400);
      v131 = (os_log_s *)Logger.logObject.getter(v130);
      v132 = v16;
      v133 = static os_log_type_t.default.getter(v131);
      if (os_log_type_enabled(v131, v133))
      {
        v134 = v128;
        v135 = swift_slowAlloc(12LL, -1LL);
        v136 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v396 = v136;
        *(_DWORD *)v135 = v357.n128_u32[0];
        v137 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        v138 = dispatch thunk of CustomStringConvertible.description.getter(v400, v137);
        v140 = v139;
        *(void *)(v135 + 4) = sub_1000058CC(v138, v139, (uint64_t *)&v396);
        swift_bridgeObjectRelease(v140);
        v141 = v134;
        v127 = v378;
        v369 = *(void (**)(char *, uint64_t))(v123 + 8);
        v369(v141, v400);
        _os_log_impl((void *)&_mh_execute_header, v131, v133, "Bundle at %s not in manager", (uint8_t *)v135, 0xCu);
        swift_arrayDestroy(v136, 1LL, v342);
        swift_slowDealloc(v136, -1LL, -1LL);
        swift_slowDealloc(v135, -1LL, -1LL);

        v142 = *(void (**)(char *, uint64_t))(v132 + 8);
        v142(v359, v127);
      }

      else
      {
        v369 = *(void (**)(char *, uint64_t))(v123 + 8);
        v369(v128, v129);

        v142 = *(void (**)(char *, uint64_t))(v132 + 8);
        v142(v126, v127);
      }

      v143 = *((void *)v372 + 5);
      v144 = v353;
      v374(v353, v373, v127);
      v145 = swift_bridgeObjectRetain_n(v143, 3LL);
      v146 = (os_log_s *)Logger.logObject.getter(v145);
      v147 = static os_log_type_t.default.getter(v146);
      v148 = os_log_type_enabled(v146, v147);
      v367 = v143;
      v370 = v142;
      if (v148)
      {
        v149 = swift_slowAlloc(12LL, -1LL);
        v350 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v396 = v350;
        *(_DWORD *)v149 = v357.n128_u32[0];
        swift_bridgeObjectRetain(v143);
        v150 = sub_100005FB4(&qword_100157EA8);
        v151 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        v152 = Dictionary.Keys.description.getter(v143, v400, v150, v151);
        v154 = v153;
        swift_bridgeObjectRelease(v143);
        v155 = v152;
        v156 = v370;
        v157 = v378;
        *(void *)(v149 + 4) = sub_1000058CC(v155, v154, (uint64_t *)&v396);
        swift_bridgeObjectRelease_n(v143, 2LL);
        v158 = v154;
        v127 = v157;
        v142 = v156;
        swift_bridgeObjectRelease(v158);
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Available URLs: %s", (uint8_t *)v149, 0xCu);
        v159 = v350;
        swift_arrayDestroy(v350, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v159, -1LL, -1LL);
        swift_slowDealloc(v149, -1LL, -1LL);

        v156(v144, v127);
      }

      else
      {

        swift_bridgeObjectRelease_n(v143, 2LL);
        v142(v144, v127);
      }

      v160 = v371;
      v161 = v371 + v375[5];
      v162 = (uint64_t *)(v161 + *(int *)(type metadata accessor for ApplicationRecord(0LL) + 28));
      v163 = *v162;
      v164 = v162[1];
      sub_1000125E0(*v162, v164);
      v165 = sub_10000AC04(v163, v164, v356);
      sub_10001226C(v163, v164);
      if ((v165 & 1) != 0)
      {
        v166 = v349[5];
        v167 = v349[6];
        sub_100005110(v344, v166);
        sub_10009C2CC(v166, v167);
        v168 = v386;
        v169 = v387;
        sub_100005110(&v384, v386);
        (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v169 + 24))(&v382, v379, v168, v169);
        if (!v383)
        {
          sub_100012824((uint64_t)&v382, &qword_100157C58);
          sub_100006034(&v384);
          *(void *)&v396 = 0LL;
          *((void *)&v396 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(30LL);
          v209 = swift_bridgeObjectRelease(*((void *)&v396 + 1));
          *(void *)&v396 = 0xD00000000000001CLL;
          *((void *)&v396 + 1) = v333;
          v210._countAndFlagsBits = URL.path.getter(v209);
          object = v210._object;
          String.append(_:)(v210);
          swift_bridgeObjectRelease(object);
          v213 = *((void *)&v396 + 1);
          v212 = v396;
          v214 = sub_100012624();
          v191 = swift_allocError(&type metadata for KMError, v214, 0LL, 0LL);
          *(_OWORD *)v215 = __PAIR128__(v213, v212);
          *(_OWORD *)(v215 + 16) = 0u;
          *(_OWORD *)(v215 + 32) = 0u;
          *(_OWORD *)(v215 + 48) = 0u;
          *(void *)(v215 + 64) = 0LL;
          *(_BYTE *)(v215 + 72) = 19;
          swift_willThrow(v191);
          v347 = 0LL;
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          v174 = v400;
          goto LABEL_79;
        }

        sub_100005158(&v382, (uint64_t)&v396);
        sub_100006034(&v384);
        v170 = *((void *)&v397 + 1);
        v171 = v398;
        sub_100005110(&v396, *((uint64_t *)&v397 + 1));
        v172 = (*(uint64_t (**)(uint64_t, uint64_t))(v171 + 24))(v170, v171);
        v174 = v400;
        if (!v173)
        {
          v384 = 0LL;
          v385 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(46LL);
          v216 = swift_bridgeObjectRelease(v385);
          v384 = 0x20656C646E7542LL;
          v385 = 0xE700000000000000LL;
          v217._countAndFlagsBits = URL.path.getter(v216);
          v218 = v217._object;
          String.append(_:)(v217);
          swift_bridgeObjectRelease(v218);
          v219._countAndFlagsBits = 0xD000000000000025LL;
          v219._object = v331;
          String.append(_:)(v219);
          v220 = v384;
          v221 = v385;
          v222 = sub_100012624();
          v223 = swift_allocError(&type metadata for KMError, v222, 0LL, 0LL);
          v191 = v223;
          *(void *)v224 = v220;
          *(void *)(v224 + 8) = v221;
          *(_OWORD *)(v224 + 16) = 0u;
          *(_OWORD *)(v224 + 32) = 0u;
          *(_OWORD *)(v224 + 48) = 0u;
          *(void *)(v224 + 64) = 0LL;
          v225 = 9;
LABEL_75:
          *(_BYTE *)(v224 + 72) = v225;
          swift_willThrow(v223);
          sub_100006034(&v396);
          v347 = 0LL;
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          goto LABEL_79;
        }

        v175 = v173;
        v176 = *v162;
        v177 = v162[1];
        v178 = v172;
        sub_1000125E0(*v162, v177);
        v179 = v178;
        v180 = sub_10005E3D0(v178, (uint64_t)v175, v176, v177, v345);
        sub_10001226C(v176, v177);
        if (v180 == 3) {
          v181 = 0;
        }
        else {
          v181 = v180;
        }
        v381 = v181;
        v380 = 1;
        sub_100012668();
        dispatch thunk of RawRepresentable.rawValue.getter(&v384, &type metadata for ApprovalState);
        dispatch thunk of RawRepresentable.rawValue.getter(&v382, &type metadata for ApprovalState);
        if (v384 == (void)v382)
        {
          v182 = v349[7];
          v183 = (uint64_t)v334;
          v174 = v400;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v334, 1LL, 1LL, v400);
          v184 = sub_100026BEC();
          v185 = sub_100026BEC();
          v186 = v184 & 1;
          v187 = (uint64_t)v372;
          v188 = v347;
          v189 = sub_10009E6E0(&v396, v183, v186, v185 & 1, (uint64_t)v372);
          v350 = v188;
          if (v188)
          {
            sub_100012824(v183, (uint64_t *)&unk_10015BA30);
            swift_bridgeObjectRelease(v175);
            sub_100006034(&v396);
            v347 = 0LL;
            v191 = v350;
            v190 = v351;
            v192 = (void (*)(char *, char *, uint64_t))v358;
LABEL_79:
            v238 = v378;
            v374(v190, v373, v378);
            v239 = v341;
            v192(v341, v379, v174);
            swift_errorRetain(v191);
            v240 = swift_errorRetain(v191);
            v241 = (os_log_s *)Logger.logObject.getter(v240);
            v242 = static os_log_type_t.error.getter(v241);
            if (os_log_type_enabled(v241, v242))
            {
              v243 = v191;
              v244 = swift_slowAlloc(22LL, -1LL);
              v245 = swift_slowAlloc(64LL, -1LL);
              v374 = (void (*)(char *, uint64_t, uint64_t))v245;
              *(void *)&v396 = v245;
              *(_DWORD *)v244 = v336.n128_u32[0];
              v246 = URL.path.getter(v245);
              v248 = v247;
              v384 = sub_1000058CC(v246, v247, (uint64_t *)&v396);
              v249 = v337;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v384, v337, v244 + 4, v244 + 12);
              swift_bridgeObjectRelease(v248);
              v250 = v239;
              v251 = v369;
              v369(v250, v400);
              *(_WORD *)(v244 + 12) = 2080;
              v384 = v243;
              swift_errorRetain(v243);
              v252 = sub_100005FB4(&qword_10015AB20);
              v253 = String.init<A>(describing:)(&v384, v252);
              v255 = v254;
              v384 = sub_1000058CC(v253, v254, (uint64_t *)&v396);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v384, v249, v244 + 14, v244 + 22);
              swift_bridgeObjectRelease(v255);
              swift_errorRelease(v243);
              swift_errorRelease(v243);
              _os_log_impl( (void *)&_mh_execute_header,  v241,  v242,  "Could not insert bundle at %s into manager: %s",  (uint8_t *)v244,  0x16u);
              v256 = v374;
              swift_arrayDestroy(v374, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v256, -1LL, -1LL);
              swift_slowDealloc(v244, -1LL, -1LL);

              swift_errorRelease(v243);
              swift_bridgeObjectRelease(v367);
              v370(v351, v378);
              v251(v379, v400);
            }

            else
            {

              swift_errorRelease(v191);
              swift_errorRelease(v191);
              v257 = v369;
              v369(v239, v174);
              swift_errorRelease(v191);
              swift_bridgeObjectRelease(v367);
              v142(v351, v238);
              v257(v379, v174);
            }

            v53 = v371;
            sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
            unint64_t v29 = v368;
            goto LABEL_83;
          }

          v347 = v182;
          swift_release(v189);
          sub_100012824(v183, (uint64_t *)&unk_10015BA30);
          v226 = *(_OWORD *)(v187 + 16);
          v388 = *(_OWORD *)v187;
          v389 = v226;
          v390 = *(_OWORD *)(v187 + 32);
          v391 = *(void *)(v187 + 48);
          v227 = *((void *)&v397 + 1);
          v228 = v398;
          sub_100005110(&v396, *((uint64_t *)&v397 + 1));
          v229 = (uint64_t)v330;
          (*(void (**)(uint64_t, uint64_t))(v228 + 64))(v227, v228);
          v230 = sub_10005333C(v229);
          v231 = v229;
          v174 = v400;
          v369((char *)v231, v400);
          if (!v230)
          {
            swift_bridgeObjectRelease(v175);
            v258 = sub_100012624();
            v223 = swift_allocError(&type metadata for KMError, v258, 0LL, 0LL);
            v191 = v223;
            v259 = v325;
            *(void *)v224 = 0xD000000000000028LL;
            *(void *)(v224 + 8) = v259;
            *(_OWORD *)(v224 + 16) = 0u;
            *(_OWORD *)(v224 + 32) = 0u;
            *(_OWORD *)(v224 + 48) = 0u;
            *(void *)(v224 + 64) = 0LL;
            v225 = 50;
            goto LABEL_75;
          }

          v232 = *(void *)(v230 + 24);
          v233 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v232 + 112LL);
          v234 = swift_retain(v232);
          v233(&v384, v234);
          swift_release(v232);
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          if (!v386)
          {
            swift_bridgeObjectRelease(v175);
            sub_100012824((uint64_t)&v384, &qword_100157C58);
            v235 = sub_100012624();
            v191 = swift_allocError(&type metadata for KMError, v235, 0LL, 0LL);
            v236 = v329;
            *(void *)v237 = 0xD00000000000001BLL;
            *(void *)(v237 + 8) = v236;
            *(_OWORD *)(v237 + 16) = 0u;
            *(_OWORD *)(v237 + 32) = 0u;
            *(_OWORD *)(v237 + 48) = 0u;
            *(void *)(v237 + 64) = 0LL;
            *(_BYTE *)(v237 + 72) = 50;
            swift_willThrow(v191);
            swift_release(v230);
            sub_100006034(&v396);
            v347 = 0LL;
            goto LABEL_79;
          }

          v260 = v230;
          sub_100012824((uint64_t)&v384, &qword_100157C58);
          v384 = 0LL;
          v385 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(41LL);
          swift_bridgeObjectRelease(v385);
          v384 = 0xD000000000000014LL;
          v385 = v322;
          v261._countAndFlagsBits = v179;
          v261._object = v175;
          String.append(_:)(v261);
          swift_bridgeObjectRelease(v175);
          v262._countAndFlagsBits = 544497952LL;
          v262._object = (void *)0xE400000000000000LL;
          String.append(_:)(v262);
          v264._countAndFlagsBits = URL.path.getter(v263);
          v265 = v264._object;
          String.append(_:)(v264);
          swift_bridgeObjectRelease(v265);
          v266._countAndFlagsBits = 0x616D206F746E6920LL;
          v266._object = (void *)0xED0000726567616ELL;
          String.append(_:)(v266);
          v267 = v384;
          v268 = v385;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0) {
            v335 = sub_10000C82C(0LL, v335[2] + 1LL, 1, v335);
          }
          v16 = v361;
          v269 = v367;
          v271 = v335[2];
          v270 = v335[3];
          if (v271 >= v270 >> 1) {
            v335 = sub_10000C82C((void *)(v270 > 1), v271 + 1, 1, v335);
          }
          v272 = v335;
          v335[2] = v271 + 1;
          v273 = &v272[2 * v271];
          v273[4] = v267;
          v273[5] = v268;
          v274 = v349[5];
          v275 = v349[6];
          sub_100005110(v344, v274);
          sub_100005880(v274, v275);
          v276 = v386;
          v277 = v387;
          sub_100005110(&v384, v386);
          v278 = *(void *)(v347 + 160);
          v279 = *(void *)(v347 + 168);
          swift_bridgeObjectRetain(v279);
          sub_100016B2C(v260, v278, v279, v276, v277);
          swift_bridgeObjectRelease(v269);
          swift_release(v260);
          swift_bridgeObjectRelease(v279);
          v369(v379, v400);
          v53 = v371;
          sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
          sub_100006034(&v384);
          v347 = v350;
        }

        else
        {
          swift_bridgeObjectRelease(v367);
          swift_bridgeObjectRelease(v175);
          v369(v379, v400);
          v53 = v371;
          sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
          v16 = v361;
        }

        v51 = v376;
        sub_100006034(&v396);
        unint64_t v29 = v368;
        uint64_t v26 = v360;
        v55 = v377;
      }

      else
      {
        v193 = v379;
        v194 = v348;
        v374(v348, v373, v127);
        v195 = v343;
        v196 = sub_100012734(v160, v343, type metadata accessor for DriverBinEntry);
        v197 = v127;
        v198 = (os_log_s *)Logger.logObject.getter(v196);
        v199 = static os_log_type_t.info.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = v195;
          v201 = swift_slowAlloc(12LL, -1LL);
          v202 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v396 = v202;
          *(_DWORD *)v201 = v357.n128_u32[0];
          v203 = sub_100012860(&qword_100157E98, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001106A8);
          v204 = dispatch thunk of CustomStringConvertible.description.getter(v375, v203);
          v206 = v205;
          *(void *)(v201 + 4) = sub_1000058CC(v204, v205, (uint64_t *)&v396);
          swift_bridgeObjectRelease(v206);
          sub_1000127BC(v200, type metadata accessor for DriverBinEntry);
          _os_log_impl( (void *)&_mh_execute_header,  v198,  v199,  "Found stale staged driver %s belonging to an uninstalled app",  (uint8_t *)v201,  0xCu);
          swift_arrayDestroy(v202, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v202, -1LL, -1LL);
          swift_slowDealloc(v201, -1LL, -1LL);
          swift_bridgeObjectRelease(v367);

          v207 = v379;
          v370(v348, v378);
          v208 = v207;
        }

        else
        {

          sub_1000127BC(v195, type metadata accessor for DriverBinEntry);
          swift_bridgeObjectRelease(v367);
          v370(v194, v197);
          v208 = v193;
        }

        v369(v208, v400);
        sub_1000127BC(v160, type metadata accessor for DriverBinEntry);
        unint64_t v29 = v368;
        uint64_t v26 = v360;
        v16 = v361;
        v51 = v376;
        v55 = v377;
        v53 = v160;
      }
    }
  }

  v60 = __OFADD__(v55, 1LL);
  v61 = v55 + 1;
  if (v60) {
    goto LABEL_127;
  }
  if (v61 < v355)
  {
    v56 = *(void *)(v354 + 8 * v61);
    if (!v56)
    {
      v62 = v61 + 1;
      if (v61 + 1 >= v355) {
        goto LABEL_99;
      }
      v56 = *(void *)(v354 + 8 * v62);
      if (!v56)
      {
        v62 = v61 + 2;
        if (v61 + 2 >= v355) {
          goto LABEL_99;
        }
        v56 = *(void *)(v354 + 8 * v62);
        if (!v56)
        {
          v62 = v61 + 3;
          if (v61 + 3 >= v355) {
            goto LABEL_99;
          }
          v56 = *(void *)(v354 + 8 * v62);
          if (!v56)
          {
            v62 = v61 + 4;
            if (v61 + 4 >= v355) {
              goto LABEL_99;
            }
            v56 = *(void *)(v354 + 8 * v62);
            if (!v56)
            {
              while (1)
              {
                v61 = v62 + 1;
                if (__OFADD__(v62, 1LL)) {
                  goto LABEL_129;
                }
                if (v61 >= v355) {
                  goto LABEL_99;
                }
                v56 = *(void *)(v354 + 8 * v61);
                ++v62;
                if (v56) {
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }

      v61 = v62;
    }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    int64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *int64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    int64_t v22 = (-1LL << result) - 1;
  }

  *unint64_t v21 = v23 & v22;
  v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (void *)swift_arrayInitWithCopy(&v3[2 * v7 + 4]);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *os_log_type_t v1 = v3;
    return result;
  }

  uint64_t v8 = v3[2];
  uint64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }

  uint64_t v10 = v9 + 1;
  if (__OFADD__(v9, 1LL)) {
    goto LABEL_45;
  }
  if (v10 != v8)
  {
    if ((v10 & 0x8000000000000000LL) != 0)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    unint64_t v19 = v9 + 5;
    while (v19 - 4 < v8)
    {
      unint64_t v21 = *(void *)(v7 + 8 * v19);
      if (v21 != v3)
      {
        if (v19 - 4 != v9)
        {
          if (v9 >= v8) {
            goto LABEL_44;
          }
          int64_t v22 = *(void *)(v7 + 32 + 8 * v9);
          uint64_t v6 = swift_isUniquelyReferenced_nonNull_native(v7);
          void *v5 = v7;
          if ((v6 & 1) == 0)
          {
            uint64_t v6 = (uint64_t)sub_100078D60(v7);
            uint64_t v7 = v6;
            void *v5 = v6;
          }

          *(void *)(v7 + 8 * v9 + 32) = v21;
          *(void *)(*v5 + 8 * v19) = v22;
          uint64_t v7 = *v5;
        }

        if (__OFADD__(v9++, 1LL)) {
          goto LABEL_42;
        }
        uint64_t v8 = *(void *)(v7 + 16);
      }

      int64_t v20 = v19 - 3;
      ++v19;
      if (v20 == v8) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  swift_bridgeObjectRelease(v10);
  int v14 = swift_getObjectType(a1);
  if (a1 == v5) {
    goto LABEL_16;
  }
  uint64_t v15 = v14;
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v14, a2);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  sub_1000807B4();
  uint64_t v18 = static NSObject.== infix(_:_:)(v16, v17);

  if ((v18 & 1) == 0)
  {
    uint64_t v35 = 0xD000000000000038LL;
    v46 = 91LL;
    id v38 = "Cannot add subscriber with different state manager queue";
    goto LABEL_18;
  }

  unint64_t v19 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(a4 + 32);
  swift_unknownObjectRetain(a1);
  int64_t v20 = (void (*)(unint64_t *, void))v19(&v47, a3, a4);
  int64_t v22 = v21;
  uint64_t v23 = (void *)*v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
  *int64_t v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = sub_1000CF80C(0LL, v23[2] + 1LL, 1, v23);
    *int64_t v22 = v23;
  }

  uint64_t v26 = v23[2];
  uint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = sub_1000CF80C((void *)(v25 > 1), v26 + 1, 1, v23);
    *int64_t v22 = v23;
  }

  v23[2] = v26 + 1;
  uint64_t v27 = &v23[2 * v26];
  v27[4] = a1;
  v27[5] = a2;
  v20(&v47, 0LL);
  id v28 = sub_1000CD6A0(a4);
  uint64_t result = swift_bridgeObjectRelease(v28);
  if (!v28)
  {
    v47 = 0LL;
    v48 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(69LL);
    v39._countAndFlagsBits = 0xD00000000000002FLL;
    v39._object = (void *)0x800000010012AB00LL;
    String.append(_:)(v39);
    v40._countAndFlagsBits = sub_1000CD2A4(v15);
    id v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._countAndFlagsBits = 544175136LL;
    v42._object = (void *)0xE400000000000000LL;
    String.append(_:)(v42);
    v43._countAndFlagsBits = sub_1000CD2A4(a3);
    uint64_t v44 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v44);
    v45._countAndFlagsBits = 0x6373627573207327LL;
    v45._object = (void *)0xEE00737265626972LL;
    String.append(_:)(v45);
    uint64_t v35 = v47;
    int64_t v36 = v48;
    uint64_t v37 = 95LL;
    goto LABEL_14;
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v15 = *(void *)(v3 + 16);
  v16 = __OFSUB__(v15, 1LL);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = (uint64_t)&v3[5 * v7 + 4];
  sub_100005FB4(&qword_10015BB18);
  uint64_t result = (void *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *os_log_type_t v1 = v3;
    return result;
  }

  uint64_t v9 = v3[2];
  uint64_t v10 = __OFADD__(v9, v2);
  id v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    v24 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  *uint64_t v25 = v27 & v26;
  id v28 = *(void *)(a2 + 16);
  unint64_t v29 = __OFSUB__(v28, 1LL);
  unint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = (uint64_t)&v3[2 * v7 + 4];
  sub_100005FB4(&qword_100159470);
  uint64_t result = (void *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *os_log_type_t v1 = v3;
    return result;
  }

  uint64_t v9 = v3[2];
  uint64_t v10 = __OFADD__(v9, v2);
  id v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[24 * v7 + 32]);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *os_log_type_t v1 = v3;
    return result;
  }

  uint64_t v8 = *((void *)v3 + 2);
  uint64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

    uint64_t v15 = a1[3];
    v16 = a1[4];
    sub_100005110(a1, v15);
    (*(void (**)(void *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))( v24,  v10,  v22,  a4,  v23,  v15,  v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    v17 = v24[3];
    sub_100012824((uint64_t)v24, &qword_100157FF8);
    if (v17)
    {
      swift_bridgeObjectRelease(a3);
      return 0LL;
    }

    ++v12;
    if (v14 == Array.endIndex.getter(a3, a4)) {
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100005B54(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100005BE8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100005DC0(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100005DC0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100005BE8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100005D5C(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100005D5C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100005FB4(&qword_100157C28);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100005DC0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100157C28);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v33 = (v37 - 1) & v37;
        uint64_t v35 = __clz(__rbit64(v37)) + (v30 << 6);
      }

      uint64_t v39 = *(void *)(*(void *)(v7 + 56) + 8 * v35);
      int64_t v9 = *(void *)(v39 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain(*(void *)(*(void *)(v7 + 48) + 16 * v35 + 8));
        swift_bridgeObjectRetain(v39);
        __asm { BR              X9 }
      }
    }
  }

  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v9);
  return v24;
}

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  uint64_t v18 = (uint64_t *)sub_10009017C();
  if (!*(void *)(a1 + 16))
  {
    v24 = 0u;
    uint64_t v25 = 0u;
LABEL_38:
    sub_100012824((uint64_t)&v24, &qword_100157FF8);
    return 0LL;
  }

  int64_t v20 = *v18;
  unint64_t v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  unint64_t v21 = sub_100006114(v20, v19);
  if ((v22 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v24);
  }

  else
  {
    v24 = 0u;
    uint64_t v25 = 0u;
  }

  swift_bridgeObjectRelease(v19);
  if (!*((void *)&v25 + 1)) {
    goto LABEL_38;
  }
  return 0LL;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void *sub_100005F0C(void *a1)
{
  os_log_type_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100005F48(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100005F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100005FB4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for RealCoreAnalyticsClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd23RealCoreAnalyticsClient);
}

uint64_t type metadata accessor for NullCoreAnalyticsClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd23NullCoreAnalyticsClient);
}

uint64_t sub_100006034(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100006054(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100006094(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1000060CC(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100157C40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000610C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100006114(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100006178(a1, a2, v5);
}

unint64_t sub_100006178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

void sub_100006260(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)a3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(void *)a3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

BOOL static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void KMAllocatedUnfairLock.Ownership.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int KMAllocatedUnfairLock.Ownership.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100006364(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100006370()
{
  return KMAllocatedUnfairLock.Ownership.hashValue.getter(*v0);
}

void sub_100006378(uint64_t a1)
{
}

Swift::Int sub_100006380(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000063BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006404(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  return v4;
}

uint64_t sub_100006404(uint64_t a1, uint64_t a2)
{
  v6[2] = a1;
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(1LL, sub_100006670, v6);
}

uint64_t sub_100006470(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for KMAllocatedUnfairLock<A>.Ownership, a1);
}

uint64_t sub_100006480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t type metadata accessor for KMAllocatedUnfairLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMAllocatedUnfairLock);
}

uint64_t sub_100006494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8LL);
}

_BYTE *initializeBufferWithCopyOfBuffer for KextsOutOfOSImageFeatureFlags(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  v16 = *v22;
  *(void *)(*v22 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  v17 = *(void *)(v16 + 48) + 40 * a2;
  uint64_t v18 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v5;
  *(_OWORD *)(v17 + 16) = v18;
  *(void *)(v17 + 32) = *(void *)(v5 + 32);
  unint64_t v19 = *(void *)(v16 + 16);
  int64_t v20 = __OFADD__(v19, 1LL);
  unint64_t v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x10002A6B0LL);
  }

  *(void *)(v16 + 16) = v21;
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      __break(1u);
      goto LABEL_18;
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x4A;
  int v8 = v6 - 74;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  sub_10001A148((uint64_t)v98, (uint64_t)&v92, &qword_100157C58);
  if (!*((void *)&v93 + 1))
  {
    sub_100012824((uint64_t)&v92, &qword_100157C58);
    v57 = sub_100012624();
    v58 = swift_allocError(&type metadata for KMError, v57, 0LL, 0LL);
    *(void *)v59 = 0xD00000000000003DLL;
    *(void *)(v59 + 8) = 0x800000010012B720LL;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(void *)(v59 + 64) = 0LL;
    *(_BYTE *)(v59 + 72) = 9;
    swift_willThrow(v58);
    return sub_100012824((uint64_t)v98, &qword_100157C58);
  }

  sub_100005158(&v92, (uint64_t)v95);
  v88[0] = 0LL;
  int64_t v40 = v82;
  if (v82)
  {
    id v41 = v96;
    v42 = v97;
    sub_100005110(v95, v96);
    v43 = *(void (**)(uint64_t, uint64_t, __n128))(v42 + 64);
    uint64_t v44 = swift_bridgeObjectRetain(v40);
    v43(v41, v42, v44);
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    v48 = *(void (**)(char *, uint64_t))(v83 + 8);
    v49 = a3;
    v50 = v84;
    v48(v11, v84);
    v51 = sub_100005FB4(&qword_10015BB48);
    inited = swift_initStackObject(v51, &v91);
    *(_OWORD *)(inited + 16) = xmmword_10010F110;
    *(void *)(inited + 32) = kSecCodeAttributeArchitecture;
    *(void *)(inited + 40) = v49;
    *(void *)(inited + 48) = v40;
    v53 = (id)kSecCodeAttributeArchitecture;
    v54 = sub_1000DD3B4(inited);
    type metadata accessor for CFString();
    sub_100012860( &qword_10015BB50,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10011AA54);
    isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    v56 = SecStaticCodeCreateWithPathAndAttributes(v47, 0, isa, v88);

    if (v56) {
      goto LABEL_25;
    }
LABEL_23:
    if (v88[0]) {
      __asm { BR              X10 }
    }

    goto LABEL_25;
  }

  v61 = v96;
  v62 = v97;
  sub_100005110(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v62 + 64))(v61, v62);
  URL._bridgeToObjectiveC()(v63);
  v65 = v64;
  v50 = v84;
  v48 = *(void (**)(char *, uint64_t))(v83 + 8);
  v48(v11, v84);
  v56 = SecStaticCodeCreateWithPath(v65, 0, v88);

  if (!v56) {
    goto LABEL_23;
  }
LABEL_25:
  *(void *)&v92 = 0LL;
  *((void *)&v92 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(*((void *)&v92 + 1));
  *(void *)&v92 = 0xD000000000000025LL;
  *((void *)&v92 + 1) = 0x800000010012B760LL;
  v66 = v50;
  v67 = v96;
  v68 = v97;
  sub_100005110(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v68 + 64))(v67, v68);
  v69 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v66, v69);
  object = v70._object;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(object);
  v48(v11, v66);
  v72 = v92;
  v73 = sub_100012624();
  v74 = swift_allocError(&type metadata for KMError, v73, 0LL, 0LL);
  *(_OWORD *)v75 = v72;
  *(void *)(v75 + 16) = v56;
  *(_OWORD *)(v75 + 24) = 0u;
  *(_OWORD *)(v75 + 40) = 0u;
  *(_OWORD *)(v75 + 56) = 0u;
  *(_BYTE *)(v75 + 72) = 45;
  swift_willThrow(v74);
  sub_100012824((uint64_t)v98, &qword_100157C58);

  return sub_100006034(v95);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10000653C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100006588 + 4 * byte_10010EDF5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000065BC + 4 * asc_10010EDF0[v4]))();
}

uint64_t sub_1000065BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000065C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000065CCLL);
  }
  return result;
}

uint64_t sub_1000065D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000065E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000065E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000065EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000065F8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100006604(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for KMAllocatedUnfairLock.Ownership( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMAllocatedUnfairLock.Ownership);
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_100157C48)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_100145DF0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100157C48);
    }
  }

uint64_t sub_100006670@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4
                                                                             + class metadata base offset for ManagedBuffer)
                                                                 - 8LL)
                                                     + 16LL))( a2,  v3);
}

uint64_t sub_1000066C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000066F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10000673C(v3, a1);
}

uint64_t sub_10000673C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006784(uint64_t a1)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1000067D4(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000067D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void *sub_10000681C(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id sub_100006858()
{
  return *(id *)(v0 + 104);
}

void sub_100006888(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = a1;
}

void *sub_1000068CC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100006908()
{
  return swift_retain(*(void *)(v0 + 112));
}

uint64_t sub_10000693C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = a1;
  return swift_release(v3);
}

void *sub_100006980(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1000069BC()
{
  return swift_retain(*(void *)(v0 + 120));
}

uint64_t sub_1000069F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = a1;
  return swift_release(v3);
}

void *sub_100006A34(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100006A70()
{
  return swift_retain(*(void *)(v0 + 128));
}

uint64_t sub_100006AA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = a1;
  return swift_release(v3);
}

void *sub_100006AE8(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100006B24()
{
  return swift_retain(*(void *)(v0 + 136));
}

uint64_t sub_100006B58(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = a1;
  return swift_release(v3);
}

void *sub_100006B9C(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100006BD8()
{
  return swift_retain(*(void *)(v0 + 144));
}

uint64_t sub_100006C0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = a1;
  return swift_release(v3);
}

void *sub_100006C50(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100006C90()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 152));
}

uint64_t sub_100006CC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 152);
  *(void *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_100006D08(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100006D44(void *a1, void *a2, void *a3)
{
  uint64_t v7 = sub_100010D9C((uint64_t)a1, a2, a3);

  sub_100010E6C(a1);
  return v7;
}

uint64_t sub_100006DA8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 216LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 208LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApprovalManager(0LL);
    sub_1000CD2E8(v1, (uint64_t)&off_100145E70, v7, (uint64_t)&off_10014B318);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100006E14(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 240LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for DriverBinManager(0LL);
    sub_1000CD2E8(v1, (uint64_t)&off_100145E70, v7, (uint64_t)&off_100147548);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100006E80(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 264LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 256LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApplicationManager();
    sub_1000CD2E8(v1, (uint64_t)&off_100145E70, v7, (uint64_t)&off_1001463D0);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100006EEC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 288LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 280LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t active = type metadata accessor for ActiveDriversStateManager();
    sub_1000CD2E8(v1, (uint64_t)&off_100145E70, active, (uint64_t)&off_100146758);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100006F58(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 312LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 304LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ActivationStateManager();
    sub_1000CD2E8(v1, (uint64_t)&off_100145E70, v7, (uint64_t)&off_10014B648);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100006FC4(uint64_t a1)
{
  return (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 168LL))(v3);
}

void *sub_100006FF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LookupSpec(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 232LL))(v3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = (*(uint64_t (**)(void *))(*result + 360LL))(result);
    uint64_t v10 = v9;
    uint64_t v11 = swift_release(v7);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(**(void **)(v1 + 56) + 144LL))(v11);
    sub_1000548C0(v12, (uint64_t)v19);
    swift_release(v12);
    swift_storeEnumTagMultiPayload(v5, v2, 4LL);
    sub_10005350C((uint64_t)v5);
    unint64_t v14 = v13;
    sub_100010F94(v19);
    sub_1000127BC((uint64_t)v5, type metadata accessor for LookupSpec);
    if (v14)
    {
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      swift_retain(v1);
      uint64_t v15 = sub_100011A0C(v14, v8, (void *)v1);
      swift_bridgeObjectRelease_n(v10, 2LL);
      swift_bridgeObjectRelease_n(v8, 2LL);
      swift_release(v1);
      KeyPath = (void *)swift_getKeyPath(&unk_10010EF00);
      uint64_t v17 = sub_1000D2140( KeyPath,  (uint64_t (*)(char *, char *))sub_1000074F0,  0LL,  (uint64_t)v15,  (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease(v15);
      swift_release(KeyPath);
    }

    else
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      return _swiftEmptyArrayStorage;
    }

    return (void *)v17;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000071AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = (char *)&v24 + *(int *)(v12 + 48) - v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v14, a1, v16);
  sub_100012734(a2, (uint64_t)v15, type metadata accessor for DriverBinEntry);
  uint64_t v19 = (uint64_t)&v11[*(int *)(v8 + 48)];
  v18(v11, (uint64_t)v14, v16);
  sub_100012734((uint64_t)v15, v19, type metadata accessor for DriverBinEntry);
  uint64_t v20 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v22 = v25;
  uint64_t v21 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v19 + *(int *)(v20 + 28), v26);
  sub_1000127BC(v19, type metadata accessor for DriverBinEntry);
  LOBYTE(v18) = static URL.== infix(_:_:)(v7, v27);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  sub_100012824((uint64_t)v14, (uint64_t *)&unk_10015ABC0);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  return v18 & 1;
}

uint64_t sub_100007368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_100010D14(a1);
  if ((v10 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  uint64_t v11 = (uint64_t)&v7[*(int *)(v4 + 48)];
  sub_100010C44((uint64_t)v7, v11, result, v9, 0LL, a1);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a2, v7, v12);
  sub_100012734(v11, a2 + *(int *)(v4 + 48), type metadata accessor for DriverBinEntry);
  sub_100012824((uint64_t)v7, (uint64_t *)&unk_10015ABC0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_1000074C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL sub_1000074F0(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for RealizedInfo(0LL);
  return sub_100034710(v2, v3);
}

void sub_100007530()
{
  uint64_t v1 = v0;
  uint64_t v185 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v184 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char **)((char *)&v180 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v182 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v181 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v186 = *(void *)(active - 8);
  uint64_t v5 = __chkstk_darwin(active);
  uint64_t v200 = (uint64_t)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v201 = (uint64_t)&v180 - v8;
  __chkstk_darwin(v7);
  v198 = (char **)((char *)&v180 - v9);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v180 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v180 - v16;
  __chkstk_darwin(v15);
  v188 = (uint64_t (*)(uint64_t))((char *)&v180 - v18);
  uint64_t v19 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v180 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for URL(0LL);
  uint64_t v23 = *(uint64_t (**)(uint64_t))(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  v208 = (char *)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  v205 = (char *)&v180 - v26;
  uint64_t v203 = type metadata accessor for LookupSpec(0LL);
  uint64_t v27 = __chkstk_darwin(v203);
  v206 = (char *)&v180 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 232LL))(v27);
  if (!v29)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v30 = v29;
  uint64_t v207 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 360LL))(v29);
  *(void *)&__int128 v196 = v31;
  v197 = (char *)v32;
  uint64_t v33 = swift_release(v30);
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 208LL))(v33);
  if (!v34)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v35 = v34;
  v204 = v17;
  uint64_t v202 = active;
  v187 = v14;
  uint64_t v189 = v11;
  uint64_t v199 = v10;
  v195 = (uint8_t *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 344LL))(v34);
  uint64_t v194 = v36;
  uint64_t v37 = swift_release(v35);
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 256LL))(v37);
  if (!v38)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  uint64_t v39 = v38;
  uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 216LL))(v38);
  swift_release(v39);
  id v41 = 0LL;
  uint64_t v42 = sub_100008A0C(v40);
  swift_bridgeObjectRelease(v40);
  uint64_t v43 = sub_100011ED8(v42);
  uint64_t v190 = v43;
  uint64_t v44 = swift_bridgeObjectRelease(v42);
  uint64_t v192 = *((void *)v1 + 7);
  v193 = *(uint64_t (**)(uint64_t))(*(void *)v192 + 144LL);
  v45 = v1;
  uint64_t v46 = v193(v44);
  v191 = &v180;
  __chkstk_darwin(v46);
  v47 = (char *)v196;
  *(&v180 - 8) = (char *)v207;
  *(&v180 - 7) = v47;
  uint64_t v48 = (uint64_t)v197;
  v49 = (char *)v195;
  *(&v180 - 6) = v197;
  *(&v180 - 5) = v49;
  *(&v180 - 4) = (char *)v194;
  *(&v180 - 3) = (char *)v43;
  *(&v180 - 2) = v45;
  uint64_t v194 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  sub_100006260((void (*)(uint64_t))sub_100011F70, (uint64_t)(&v180 - 10), v46);
  v50 = v45;
  swift_release(v46);
  swift_bridgeObjectRelease(v190);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v48);
  uint64_t v51 = swift_bridgeObjectRelease(v207);
  uint64_t v52 = v193(v51);
  sub_1000548C0(v52, (uint64_t)&v217);
  swift_release(v52);
  uint64_t v53 = (uint64_t)v206;
  swift_storeEnumTagMultiPayload(v206, v203, 4LL);
  sub_10005350C(v53);
  uint64_t v55 = v54;
  sub_100010F94(&v217);
  uint64_t v56 = sub_1000127BC(v53, type metadata accessor for LookupSpec);
  uint64_t v203 = (uint64_t)v50;
  if (!v55)
  {
    v71 = v50;
    goto LABEL_52;
  }

  uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 280LL))(v56);
  if (!v57)
  {
LABEL_95:
    __break(1u);
    return;
  }

  uint64_t v58 = v57;
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 176LL))(v57);
  swift_release(v58);
  if ((unint64_t)v55 >> 62)
  {
    if (v55 >= 0) {
      uint64_t v179 = v55 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v179 = v55;
    }
    swift_bridgeObjectRetain(v55);
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v179);
  }

  else
  {
    uint64_t v60 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v55);
  }

  *(void *)&__int128 v196 = 0LL;
  v197 = (char *)v59;
  if (v60)
  {
    if (v60 >= 1)
    {
      uint64_t v61 = 0LL;
      v206 = (char *)(v55 & 0xC000000000000001LL);
      uint64_t v207 = v60;
      v62 = (char *)_swiftEmptyArrayStorage;
      uint64_t v63 = v55;
      do
      {
        if (v206)
        {
          uint64_t v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v55);
        }

        else
        {
          uint64_t v64 = *(void *)(v55 + 8 * v61 + 32);
          swift_retain(v64);
        }

        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v64 + 24) + 112LL))(&aBlock);
        v65 = v212;
        if (v212)
        {
          v66 = v213;
          sub_100005110(&aBlock, (uint64_t)v212);
          (*((void (**)(void *, uint64_t (*)()))v66 + 8))(v65, v66);
          (*((void (**)(char *, void, uint64_t, uint64_t))v23 + 7))(v21, 0LL, 1LL, v22);
          sub_100006034(&aBlock);
        }

        else
        {
          sub_100012824((uint64_t)&aBlock, &qword_100157C58);
          (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v23 + 7))(v21, 1LL, 1LL, v22);
        }

        swift_release(v64);
        uint64_t v55 = v63;
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v23 + 6))(v21, 1LL, v22) == 1)
        {
          sub_100012824((uint64_t)v21, (uint64_t *)&unk_10015BA30);
        }

        else
        {
          v67 = (void (*)(char *, char *, uint64_t))*((void *)v23 + 4);
          v68 = v205;
          v67(v205, v21, v22);
          v67(v208, v68, v22);
          if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0) {
            v62 = (char *)sub_10000C938(0, *((void *)v62 + 2) + 1LL, 1, (unint64_t)v62);
          }
          unint64_t v70 = *((void *)v62 + 2);
          unint64_t v69 = *((void *)v62 + 3);
          if (v70 >= v69 >> 1) {
            v62 = (char *)sub_10000C938(v69 > 1, v70 + 1, 1, (unint64_t)v62);
          }
          *((void *)v62 + 2) = v70 + 1;
          v67( &v62[((*((unsigned __int8 *)v23 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v23 + 80))
               + *((void *)v23 + 9) * v70],
            v208,
            v22);
        }

        ++v61;
      }

      while (v207 != v61);
      goto LABEL_27;
    }

    __break(1u);
    goto LABEL_91;
  }

  v62 = (char *)_swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease_n(v55, 2LL);
  uint64_t v72 = sub_100012054((uint64_t)v62);
  swift_bridgeObjectRelease(v62);
  uint64_t v73 = (uint64_t)v197;
  id v41 = (void *)v196;
  v74 = (uint64_t (*)(uint64_t))sub_100011BC0((uint64_t)v197, v72);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v72);
  if (sub_1000D26D0())
  {
    uint64_t v56 = swift_bridgeObjectRelease(v74);
    v71 = (void *)v203;
  }

  else
  {
    uint64_t v75 = sub_1000D322C();
    uint64_t v76 = v189;
    uint64_t v23 = v188;
    uint64_t v77 = v199;
    v205 = *(char **)(v189 + 16);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v205)(v188, v75, v199);
    uint64_t v78 = swift_bridgeObjectRetain_n(v74, 2LL);
    v79 = (os_log_s *)Logger.logObject.getter(v78);
    int v80 = static os_log_type_t.default.getter(v79);
    BOOL v81 = os_log_type_enabled(v79, (os_log_type_t)v80);
    v71 = (void *)v203;
    v206 = (char *)v75;
    v193 = v74;
    if (v81)
    {
      LODWORD(v208) = v80;
      v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v207 = swift_slowAlloc(32LL, -1LL);
      v215 = (void *)v207;
      *(_DWORD *)v82 = 136315138;
      int64_t v83 = *((void *)v74 + 2);
      v84 = _swiftEmptyArrayStorage;
      if (v83)
      {
        v195 = v82;
        v197 = (char *)v79;
        *(void *)&__int128 v196 = v41;
        v209 = _swiftEmptyArrayStorage;
        sub_10000CC84(0, v83, 0);
        uint64_t v85 = (uint64_t)v74
            + ((*(unsigned __int8 *)(v186 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
        uint64_t v86 = *(void *)(v186 + 72);
        do
        {
          v87 = (void (*)(void, void))v198;
          uint64_t v88 = sub_100012734(v85, (uint64_t)v198, type metadata accessor for ActiveDriverInfo);
          uint64_t aBlock = 8224LL;
          v211[0] = 0xE200000000000000LL;
          v89._countAndFlagsBits = URL.path.getter(v88);
          object = v89._object;
          String.append(_:)(v89);
          swift_bridgeObjectRelease(object);
          uint64_t v91 = aBlock;
          uint64_t v92 = v211[0];
          sub_1000127BC((uint64_t)v87, type metadata accessor for ActiveDriverInfo);
          v84 = v209;
          if ((swift_isUniquelyReferenced_nonNull_native(v209) & 1) == 0)
          {
            sub_10000CC84(0, v84[2] + 1LL, 1);
            v84 = v209;
          }

          unint64_t v94 = v84[2];
          unint64_t v93 = v84[3];
          if (v94 >= v93 >> 1)
          {
            sub_10000CC84(v93 > 1, v94 + 1, 1);
            v84 = v209;
          }

          v84[2] = v94 + 1;
          v95 = &v84[2 * v94];
          v95[4] = v91;
          v95[5] = v92;
          v85 += v86;
          --v83;
        }

        while (v83);
        v71 = (void *)v203;
        id v41 = (void *)v196;
        uint64_t v23 = v188;
        v79 = (os_log_s *)v197;
        v82 = v195;
      }

      uint64_t aBlock = (uint64_t)v84;
      uint64_t v98 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v99 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v194, v98);
      unint64_t v101 = v100;
      swift_bridgeObjectRelease(v84);
      uint64_t aBlock = sub_1000058CC(v99, v101, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v211, v82 + 4, v82 + 12);
      v74 = v193;
      swift_bridgeObjectRelease_n(v193, 2LL);
      swift_bridgeObjectRelease(v101);
      _os_log_impl( (void *)&_mh_execute_header,  v79,  (os_log_type_t)v208,  "Drivers that should be unloaded:\n%s",  v82,  0xCu);
      uint64_t v102 = v207;
      swift_arrayDestroy(v207, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v82, -1LL, -1LL);

      v96 = *(char ***)(v189 + 8);
      v97 = v23;
      uint64_t v77 = v199;
    }

    else
    {

      swift_bridgeObjectRelease_n(v74, 2LL);
      v96 = *(char ***)(v76 + 8);
      v97 = v23;
    }

    v198 = v96;
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v96)(v97, v77);
    uint64_t v104 = v201;
    uint64_t v105 = *((void *)v74 + 2);
    uint64_t v106 = v202;
    if (v105)
    {
      v208 = (char *)(v71 + 2);
      uint64_t v107 = (uint64_t)v74
           + ((*(unsigned __int8 *)(v186 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
      uint64_t v207 = *(void *)(v186 + 72);
      uint64_t v23 = type metadata accessor for ActiveDriverInfo;
      *(void *)&__int128 v103 = 136315394LL;
      __int128 v196 = v103;
      v195 = (uint8_t *)&type metadata for Any + 8;
      do
      {
        sub_100012734(v107, v104, type metadata accessor for ActiveDriverInfo);
        v108 = (uint64_t *)(v104 + *(int *)(v106 + 20));
        uint64_t v110 = *v108;
        uint64_t v109 = v108[1];
        swift_bridgeObjectRetain(v109);
        v215 = (void *)sub_10006C038(v110, v109);
        uint64_t v112 = v71[5];
        uint64_t v111 = v71[6];
        sub_100005110(v208, v112);
        sub_100071818(v112, v111);
        sub_10006B104( &aBlock,  (uint64_t)&type metadata for KernelRequests.UnloadExtension,  (uint64_t)&off_1001598C8,  v113);
        if (v41)
        {
          sub_100006034(&aBlock);
          swift_bridgeObjectRelease(v215);
          v114 = v204;
          ((void (*)(char *, char *, uint64_t))v205)(v204, v206, v77);
          uint64_t v115 = v200;
          sub_100012734(v104, v200, type metadata accessor for ActiveDriverInfo);
          swift_errorRetain(v41);
          uint64_t v116 = swift_errorRetain(v41);
          v117 = (os_log_s *)Logger.logObject.getter(v116);
          os_log_type_t v118 = static os_log_type_t.error.getter(v117);
          if (os_log_type_enabled(v117, v118))
          {
            uint64_t v119 = swift_slowAlloc(22LL, -1LL);
            v120 = v41;
            v197 = (char *)swift_slowAlloc(64LL, -1LL);
            uint64_t aBlock = (uint64_t)v197;
            *(_DWORD *)uint64_t v119 = v196;
            v121 = (uint64_t *)(v115 + *(int *)(v202 + 20));
            uint64_t v122 = *v121;
            unint64_t v123 = v121[1];
            swift_bridgeObjectRetain(v123);
            *(void *)(v119 + 4) = sub_1000058CC(v122, v123, &aBlock);
            swift_bridgeObjectRelease(v123);
            sub_1000127BC(v115, type metadata accessor for ActiveDriverInfo);
            *(_WORD *)(v119 + 12) = 2080;
            v215 = v120;
            swift_errorRetain(v120);
            uint64_t v124 = sub_100005FB4(&qword_10015AB20);
            uint64_t v125 = String.init<A>(describing:)(&v215, v124);
            unint64_t v127 = v126;
            *(void *)(v119 + 14) = sub_1000058CC(v125, v126, &aBlock);
            swift_bridgeObjectRelease(v127);
            swift_errorRelease(v120);
            swift_errorRelease(v120);
            _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "Failed to unload driver %s: %s",  (uint8_t *)v119,  0x16u);
            uint64_t v128 = (uint64_t)v197;
            swift_arrayDestroy(v197, 2LL, v195);
            uint64_t v106 = v202;
            swift_slowDealloc(v128, -1LL, -1LL);
            uint64_t v129 = v119;
            uint64_t v77 = v199;
            swift_slowDealloc(v129, -1LL, -1LL);

            swift_errorRelease(v120);
            v130 = v204;
          }

          else
          {

            swift_errorRelease(v41);
            swift_errorRelease(v41);
            sub_1000127BC(v115, type metadata accessor for ActiveDriverInfo);
            swift_errorRelease(v41);
            v130 = v114;
          }

          ((void (*)(char *, uint64_t))v198)(v130, v77);
          uint64_t v104 = v201;
          sub_1000127BC(v201, type metadata accessor for ActiveDriverInfo);
          id v41 = 0LL;
          v71 = (void *)v203;
        }

        else
        {
          sub_100006034(&aBlock);
          swift_bridgeObjectRelease(v215);
          sub_1000127BC(v104, type metadata accessor for ActiveDriverInfo);
        }

        v107 += v207;
        --v105;
      }

      while (v105);
      v131 = v193;
    }

    else
    {
      v131 = v74;
    }

    uint64_t v56 = swift_bridgeObjectRelease(v131);
  }

LABEL_52:
  v132 = v71;
  uint64_t v133 = (*(uint64_t (**)(uint64_t))(*v71 + 408LL))(v56);
  uint64_t v134 = v133;
  if ((unint64_t)v133 >> 62)
  {
    if (v133 < 0) {
      uint64_t v178 = v133;
    }
    else {
      uint64_t v178 = v133 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v133);
    uint64_t v135 = _CocoaArrayWrapper.endIndex.getter(v178);
  }

  else
  {
    uint64_t v135 = *(void *)((v133 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v133);
  }

  v136 = _swiftEmptyArrayStorage;
  if (v135)
  {
    if (v135 < 1)
    {
      __break(1u);
      goto LABEL_89;
    }

    for (uint64_t i = 0LL; i != v135; ++i)
    {
      if ((v134 & 0xC000000000000001LL) != 0)
      {
        v138 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v134);
      }

      else
      {
        v138 = *(void ***)(v134 + 8 * i + 32);
        swift_retain(v138);
      }

      (*(void (**)(uint64_t *__return_ptr))(*v138[3] + 112LL))(&aBlock);
      v139 = v212;
      sub_100012824((uint64_t)&aBlock, &qword_100157C58);
      if (v139)
      {
        char v140 = sub_100026BEC();
        uint64_t v141 = ((uint64_t (*)(void, void, void))(*v138)[36])(0LL, 0LL, v140 & 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0) {
          v136 = sub_10000CB40(0LL, v136[2] + 1LL, 1, v136);
        }
        unint64_t v143 = v136[2];
        unint64_t v142 = v136[3];
        if (v143 >= v142 >> 1) {
          v136 = sub_10000CB40((void *)(v142 > 1), v143 + 1, 1, v136);
        }
        v136[2] = v143 + 1;
        v136[v143 + 4] = v141;
      }

      swift_release(v138);
    }
  }

  uint64_t v144 = swift_bridgeObjectRelease_n(v134, 2LL);
  uint64_t v23 = (uint64_t (*)(uint64_t))v203;
  uint64_t v145 = (*(uint64_t (**)(uint64_t))(*(void *)v203 + 304LL))(v144);
  if (!v145) {
    goto LABEL_94;
  }
  uint64_t v146 = v145;
  char v147 = (*(uint64_t (**)(uint64_t))(*(void *)v145 + 160LL))(v145);
  swift_release(v146);
  v132 = v216;
  uint64_t v135 = v199;
  if ((v147 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v216) & 1) != 0)
    {
LABEL_70:
      unint64_t v149 = v132[2];
      unint64_t v148 = v132[3];
      if (v149 >= v148 >> 1) {
        v132 = sub_10000C82C((void *)(v148 > 1), v149 + 1, 1, v132);
      }
      v132[2] = v149 + 1;
      v150 = &v132[2 * v149];
      v150[4] = 0xD00000000000001BLL;
      v150[5] = 0x8000000100121AE0LL;
      v216 = v132;
      goto LABEL_73;
    }

LABEL_89:
    v132 = sub_10000C82C(0LL, v132[2] + 1LL, 1, v132);
    goto LABEL_70;
  }

LABEL_73:
  swift_bridgeObjectRetain(v132);
  BOOL v151 = sub_1000D26D0();
  swift_bridgeObjectRelease(v132);
  if (v151)
  {
    swift_bridgeObjectRelease(v136);
    swift_bridgeObjectRelease(v132);
  }

  else
  {
    v215 = (void *)sub_10006C1C0(0LL, 0LL, 0LL, 0LL, (uint64_t)v136);
    uint64_t v152 = *((void *)v23 + 5);
    uint64_t v153 = *((void *)v23 + 6);
    sub_100005110((void *)v23 + 2, v152);
    sub_100071818(v152, v153);
    sub_10006B104(&aBlock, (uint64_t)&type metadata for KernelRequests.LoadFileset, (uint64_t)&off_1001598F8, v154);
    if (v41)
    {
      sub_100006034(&aBlock);
      swift_bridgeObjectRelease(v215);
      uint64_t v155 = sub_1000D322C();
      uint64_t v156 = v189;
      v157 = v187;
      (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v187, v155, v135);
      swift_errorRetain(v41);
      uint64_t v158 = swift_errorRetain(v41);
      v159 = (os_log_s *)Logger.logObject.getter(v158);
      os_log_type_t v160 = static os_log_type_t.error.getter(v159);
      if (os_log_type_enabled(v159, v160))
      {
        v161 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v162 = swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v162;
        *(_DWORD *)v161 = 136315138;
        v215 = v41;
        swift_errorRetain(v41);
        uint64_t v163 = sub_100005FB4(&qword_10015AB20);
        uint64_t v164 = String.init<A>(describing:)(&v215, v163);
        unint64_t v166 = v165;
        v215 = (void *)sub_1000058CC(v164, v165, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v161 + 4, v161 + 12);
        swift_bridgeObjectRelease(v166);
        swift_errorRelease(v41);
        swift_errorRelease(v41);
        _os_log_impl( (void *)&_mh_execute_header,  v159,  v160,  "An error occurred while loading dext personalities: %s",  v161,  0xCu);
        swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v162, -1LL, -1LL);
        swift_slowDealloc(v161, -1LL, -1LL);

        swift_errorRelease(v41);
        (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v199);
      }

      else
      {
        swift_errorRelease(v41);
        swift_errorRelease(v41);
        swift_errorRelease(v41);

        (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v135);
      }
    }

    else
    {
      sub_100006034(&aBlock);
      uint64_t v167 = swift_bridgeObjectRelease(v215);
      v168 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 184LL))(v167);
      v213 = sub_100011F94;
      v214 = v23;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      v211[0] = 1107296256LL;
      v211[1] = sub_10000B750;
      v212 = &unk_100145E48;
      v169 = _Block_copy(&aBlock);
      uint64_t v170 = swift_retain(v23);
      v171 = v180;
      static DispatchQoS.unspecified.getter(v170);
      v215 = _swiftEmptyArrayStorage;
      uint64_t v172 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v173 = sub_100005FB4((uint64_t *)&unk_100159E80);
      uint64_t v174 = sub_100012B78( (unint64_t *)&qword_10015ABB0,  (uint64_t *)&unk_100159E80,  (uint64_t)&protocol conformance descriptor for [A]);
      v175 = v183;
      uint64_t v176 = v173;
      uint64_t v177 = v185;
      dispatch thunk of SetAlgebra.init<A>(_:)(v183, &v215, v176, v174, v185, v172);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v171, v175, v169);
      _Block_release(v169);

      (*(void (**)(void *, uint64_t))(v184 + 8))(v175, v177);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v171, v182);
      swift_release(v214);
    }
  }

        uint64_t v9 = 0LL;
        uint64_t v11 = 1;
        goto LABEL_11;
      }

      __break(1u);
    }

    __break(1u);
    return result;
  }

  uint64_t v9 = sub_100084504(result, v3, a3);
  uint64_t v11 = v40;
LABEL_11:
  swift_bridgeObjectRelease(v3);
  if ((v11 & 1) != 0) {
    return 0LL;
  }
  else {
    return (uint64_t)v9;
  }
}

uint64_t sub_100008A0C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v38 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v31 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v31 = v1;
  id v41 = _swiftEmptyArrayStorage;
  sub_10000CC68(0, v7, 0);
  uint64_t result = sub_100010D14(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0LL;
  uint64_t v13 = a1 + 64;
  uint64_t v32 = a1 + 80;
  int64_t v33 = v7;
  uint64_t v35 = a1 + 64;
  uint64_t v36 = a1;
  uint64_t v34 = v10;
  while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10) {
      goto LABEL_26;
    }
    uint64_t v17 = v37;
    sub_100012734(*(void *)(a1 + 56) + *(void *)(v39 + 72) * v11, v37, type metadata accessor for ApplicationRecord);
    uint64_t v18 = v17;
    uint64_t v19 = v38;
    sub_100012778(v18, v38, type metadata accessor for ApplicationRecord);
    uint64_t v20 = (uint64_t *)(v19 + *(int *)(v40 + 28));
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_1000125E0(*v20, v22);
    sub_1000127BC(v19, type metadata accessor for ApplicationRecord);
    uint64_t v8 = v41;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v41);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000CC68(0, v8[2] + 1LL, 1);
      uint64_t v8 = v41;
    }

    unint64_t v24 = v8[2];
    unint64_t v23 = v8[3];
    if (v24 >= v23 >> 1)
    {
      uint64_t result = sub_10000CC68(v23 > 1, v24 + 1, 1);
      uint64_t v8 = v41;
    }

    v8[2] = v24 + 1;
    uint64_t v25 = &v8[2 * v24];
    v25[4] = v21;
    v25[5] = v22;
    a1 = v36;
    int64_t v14 = 1LL << *(_BYTE *)(v36 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v35;
    uint64_t v26 = *(void *)(v35 + 8 * v16);
    if ((v26 & (1LL << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v34;
    if (*(_DWORD *)(v36 + 36) != (_DWORD)v34) {
      goto LABEL_29;
    }
    unint64_t v27 = v26 & (-2LL << (v11 & 0x3F));
    if (v27)
    {
      int64_t v14 = __clz(__rbit64(v27)) | v11 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v15 = v33;
    }

    else
    {
      unint64_t v28 = v16 + 1;
      unint64_t v29 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v33;
      if (v16 + 1 < v29)
      {
        unint64_t v30 = *(void *)(v35 + 8 * v28);
        if (v30)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v30)) + (v28 << 6);
        }

        else
        {
          while (v29 - 2 != v16)
          {
            unint64_t v30 = *(void *)(v32 + 8 * v16++);
            if (v30)
            {
              unint64_t v28 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    ++v12;
    uint64_t v11 = v14;
    if (v12 == v15) {
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100008CEC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, void *a9@<X8>)
{
  void (*v233)(uint64_t *__return_ptr, uint64_t);
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  os_log_s *v241;
  os_log_type_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  char *v250;
  void (*v251)(char *, uint64_t);
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  void (*v256)(char *, uint64_t, uint64_t);
  void (*v257)(char *, uint64_t);
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  Swift::String v261;
  Swift::String v262;
  uint64_t v263;
  Swift::String v264;
  void *v265;
  Swift::String v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  void *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t result;
  uint64_t v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  void (*v308)(uint64_t, uint64_t);
  Swift::String v309;
  uint64_t v310;
  Swift::String v311;
  void *v312;
  Swift::String v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  void *v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  void *v323;
  void *v324;
  unint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  void *v331;
  char *v332;
  unint64_t v333;
  char *v334;
  void *v335;
  __n128 v336;
  unint64_t *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  void *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  int64_t v355;
  uint64_t v356;
  __n128 v357;
  void (*v358)(char *, uint64_t, uint64_t);
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(char *, uint64_t);
  void (*v370)(char *, uint64_t);
  uint64_t v371;
  __int128 *v372;
  uint64_t v373;
  void (*v374)(char *, uint64_t, uint64_t);
  int *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char v380;
  char v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  v346 = a6;
  v356 = a7;
  v345 = a5;
  v327 = a3;
  v328 = a4;
  v372 = (__int128 *)a1;
  v326 = a9;
  uint64_t v11 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v12 = __chkstk_darwin(v11);
  v340 = (char *)&v322 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v334 = (char *)&v322 - v14;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  v351 = (char *)&v322 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v348 = (char *)&v322 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v353 = (char *)&v322 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v359 = (char *)&v322 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v322 - v25;
  v364 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v364);
  v365 = (char *)&v322 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for URL(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  v341 = (char *)&v322 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  v332 = (char *)&v322 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v338 = (char *)&v322 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v330 = (char *)&v322 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v352 = (char *)&v322 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v339 = (char *)&v322 - v41;
  __chkstk_darwin(v40);
  v379 = (char *)&v322 - v42;
  v375 = (int *)type metadata accessor for DriverBinEntry(0LL);
  v363 = *((void *)v375 - 1);
  uint64_t v43 = __chkstk_darwin(v375);
  v343 = (uint64_t)&v322 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v43);
  __chkstk_darwin(v45);
  v362 = (uint64_t)&v322 - v47;
  uint64_t v48 = *(void *)(a2 + 64);
  v354 = a2 + 64;
  uint64_t v49 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v50 = -1LL;
  if (v49 < 64) {
    uint64_t v50 = ~(-1LL << v49);
  }
  unint64_t v51 = v50 & v48;
  v349 = a8;
  v344 = a8 + 2;
  v355 = (unint64_t)(v49 + 63) >> 6;
  v337 = &v385;
  v366 = a2;
  uint64_t v52 = a2;
  uint64_t v53 = v46;
  __n128 v54 = swift_bridgeObjectRetain(v52);
  uint64_t v55 = 0LL;
  v335 = _swiftEmptyArrayStorage;
  v342 = (char *)&type metadata for Any + 8;
  v54.n128_u64[0] = 136315138LL;
  v357 = v54;
  v333 = 0x8000000100121D70LL;
  v54.n128_u64[0] = 136315394LL;
  v336 = v54;
  v331 = (void *)0x8000000100121D90LL;
  v329 = 0x8000000100121DF0LL;
  v322 = 0x8000000100121E10LL;
  v323 = (void *)0x8000000100121E60LL;
  unint64_t v56 = 0x8000000100121E30LL;
  v324 = (void *)0x8000000100121E30LL;
  v325 = 0x8000000100121DC0LL;
  v400 = v28;
  v368 = v29;
  v378 = v15;
  v360 = v26;
  v361 = v16;
  v371 = v53;
  while (v51)
  {
    v376 = (v51 - 1) & v51;
    v377 = v55;
    unint64_t v59 = __clz(__rbit64(v51)) | (v55 << 6);
LABEL_21:
    uint64_t v63 = v362;
    sub_100012734( *(void *)(v366 + 56) + *(void *)(v363 + 72) * v59,  v362,  type metadata accessor for DriverBinEntry);
    sub_100012778(v63, v53, type metadata accessor for DriverBinEntry);
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v65 = v379;
    uint64_t v66 = v400;
    v64(v379, v53 + v375[7], v400);
    __int128 v67 = v372[1];
    v392 = *v372;
    v393 = v67;
    v394 = v372[2];
    v395 = *((void *)v372 + 6);
    uint64_t v68 = (uint64_t)v365;
    v64(v365, (uint64_t)v65, v66);
    swift_storeEnumTagMultiPayload(v68, v364, 1LL);
    sub_10005350C(v68);
    uint64_t v70 = v69;
    sub_1000127BC(v68, type metadata accessor for LookupSpec);
    if (v70)
    {
      if (!((unint64_t)v70 >> 62))
      {
        uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v70);
        if (v71) {
          goto LABEL_24;
        }
LABEL_53:
        swift_bridgeObjectRelease_n(v70, 2LL);
        goto LABEL_54;
      }

      if (v70 < 0) {
        uint64_t v122 = v70;
      }
      else {
        uint64_t v122 = v70 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v70);
      if (!_CocoaArrayWrapper.endIndex.getter(v122)) {
        goto LABEL_53;
      }
LABEL_24:
      if ((v70 & 0xC000000000000001LL) == 0)
      {
        uint64_t v72 = v70 & 0xFFFFFFFFFFFFFF8LL;
        unint64_t v56 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (!v56)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }

        uint64_t v73 = *(void *)(v70 + 32);
        swift_retain(v73);
        swift_bridgeObjectRelease(v70);
        goto LABEL_27;
      }

      uint64_t v73 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v70);
      swift_bridgeObjectRelease(v70);
      if (!((unint64_t)v70 >> 62))
      {
        uint64_t v72 = v70 & 0xFFFFFFFFFFFFFF8LL;
LABEL_27:
        uint64_t v74 = *(void *)(v72 + 16);
        goto LABEL_28;
      }

      if (v70 < 0) {
        v280 = v70;
      }
      else {
        v280 = v70 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v70);
      uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v280);
      swift_bridgeObjectRelease(v70);
LABEL_28:
      uint64_t v75 = v29;
      uint64_t v76 = swift_bridgeObjectRelease(v70);
      if (v74 == 1)
      {
        uint64_t v77 = (*(uint64_t (**)(uint64_t))(**(void **)(v73 + 24) + 144LL))(v76);
        uint64_t v79 = v78;
        uint64_t v80 = v371 + v375[5];
        BOOL v81 = (uint64_t *)(v80 + *(int *)(type metadata accessor for ApplicationRecord(0LL) + 28));
        uint64_t v82 = *v81;
        unint64_t v83 = v81[1];
        sub_1000125E0(*v81, v83);
        char v84 = sub_10005E3D0(v77, v79, v82, v83, v345);
        sub_10001226C(v82, v83);
        swift_bridgeObjectRelease(v79);
        sub_1000125E0(v82, v83);
        LOBYTE(v79) = sub_10000AC04(v82, v83, v356);
        sub_10001226C(v82, v83);
        if ((v79 & 1) != 0)
        {
          if (v84 == 3) {
            char v85 = 0;
          }
          else {
            char v85 = v84;
          }
          LOBYTE(v396) = v85;
          LOBYTE(v384) = 1;
          unint64_t v86 = sub_1000126AC();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v396, &v384, &type metadata for ApprovalState, v86) & 1) != 0)
          {
            swift_release(v73);
            uint64_t v29 = v75;
            (*(void (**)(char *, uint64_t))(v75 + 8))(v379, v400);
            uint64_t v53 = v371;
            sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
LABEL_83:
            uint64_t v16 = v361;
LABEL_84:
            uint64_t v26 = v360;
            goto LABEL_5;
          }

          sub_100052CD0(v73);
          *(void *)&v396 = 0LL;
          *((void *)&v396 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(46LL);
          v114._countAndFlagsBits = 0x20726576697244LL;
          v114._object = (void *)0xE700000000000000LL;
          String.append(_:)(v114);
          v384 = v73;
          uint64_t v115 = type metadata accessor for RealizedInfo(0LL);
          _print_unlocked<A, B>(_:_:)( &v384,  &v396,  v115,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v116._countAndFlagsBits = 0xD000000000000025LL;
          v116._object = v323;
          String.append(_:)(v116);
          uint64_t v113 = *((void *)&v396 + 1);
          uint64_t v112 = v396;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v335);
          uint64_t v16 = v361;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            v335 = sub_10000C82C(0LL, v335[2] + 1LL, 1, v335);
          }
        }

        else
        {
          sub_100052CD0(v73);
          *(void *)&v396 = 0LL;
          *((void *)&v396 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(47LL);
          v109._countAndFlagsBits = 0x20726576697244LL;
          v109._object = (void *)0xE700000000000000LL;
          String.append(_:)(v109);
          v384 = v73;
          uint64_t v110 = type metadata accessor for RealizedInfo(0LL);
          _print_unlocked<A, B>(_:_:)( &v384,  &v396,  v110,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          v111._countAndFlagsBits = 0xD000000000000026LL;
          v111._object = v324;
          String.append(_:)(v111);
          uint64_t v113 = *((void *)&v396 + 1);
          uint64_t v112 = v396;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0) {
            v335 = sub_10000C82C(0LL, v335[2] + 1LL, 1, v335);
          }
          uint64_t v16 = v361;
        }

        unint64_t v119 = v335[2];
        unint64_t v118 = v335[3];
        if (v119 >= v118 >> 1) {
          v335 = sub_10000C82C((void *)(v118 > 1), v119 + 1, 1, v335);
        }
        v120 = v335;
        v335[2] = v119 + 1;
        v121 = &v120[2 * v119];
        v121[4] = v112;
        v121[5] = v113;
        swift_release(v73);
        uint64_t v29 = v75;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v379, v400);
        uint64_t v53 = v371;
        sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
        goto LABEL_84;
      }

      uint64_t v87 = sub_1000D322C();
      uint64_t v88 = v378;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v26, v87, v378);
      Swift::String v89 = v339;
      v90 = (uint64_t (*)(char *, char *, uint64_t))v64;
      uint64_t v91 = v400;
      uint64_t v92 = v90(v339, v379, v400);
      unint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = v89;
        uint64_t v96 = swift_slowAlloc(12LL, -1LL);
        uint64_t v97 = swift_slowAlloc(32LL, -1LL);
        v374 = (void (*)(char *, uint64_t, uint64_t))v73;
        uint64_t v98 = v97;
        *(void *)&v396 = v97;
        *(_DWORD *)uint64_t v96 = v357.n128_u32[0];
        uint64_t v99 = URL.path.getter(v97);
        unint64_t v101 = v100;
        *(void *)(v96 + 4) = sub_1000058CC(v99, v100, (uint64_t *)&v396);
        swift_bridgeObjectRelease(v101);
        uint64_t v102 = *(void (**)(char *, uint64_t))(v368 + 8);
        __int128 v103 = v95;
        uint64_t v104 = v371;
        v102(v103, v91);
        _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Internal error: found multiple realized infos for %s in manager",  (uint8_t *)v96,  0xCu);
        swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v105 = v368;
        swift_slowDealloc(v98, -1LL, -1LL);
        uint64_t v106 = v96;
        uint64_t v53 = v104;
        swift_slowDealloc(v106, -1LL, -1LL);
        swift_release(v374);

        uint64_t v26 = v360;
        uint64_t v107 = v361;
        uint64_t v108 = v88;
        uint64_t v29 = v105;
        (*(void (**)(char *, uint64_t))(v361 + 8))(v360, v108);
        v102(v379, v91);
        sub_1000127BC(v104, type metadata accessor for DriverBinEntry);
        uint64_t v16 = v107;
      }

      else
      {
        swift_release(v73);

        uint64_t v57 = *(void (**)(char *, uint64_t))(v75 + 8);
        v57(v89, v91);
        uint64_t v26 = v360;
        uint64_t v16 = v361;
        uint64_t v58 = v88;
        uint64_t v29 = v75;
        (*(void (**)(char *, uint64_t))(v361 + 8))(v360, v58);
        v57(v379, v91);
        uint64_t v53 = v371;
        sub_1000127BC(v371, type metadata accessor for DriverBinEntry);
      }

LABEL_20:
    v376 = (v56 - 1) & v56;
    v377 = v61;
    unint64_t v59 = __clz(__rbit64(v56)) + (v61 << 6);
    goto LABEL_21;
  }

    uint64_t v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_21:
    uint64_t v13 = *(void *)(v3 + 48) + 40 * v9;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v16 = *(unsigned __int8 *)(v13 + 16);
    Hasher.init(_seed:)(v22, *(void *)(v5 + 40));
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v22, v14, v15);
    swift_bridgeObjectRelease(v15);
    __asm { BR              X8 }
  }

    uint64_t v10 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (**(void **)(*(void *)(a3 + 48) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
        return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
      }
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
  }
  uint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
    }
    uint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    uint64_t v8 = (v18 - 1) & v18;
    uint64_t v11 = __clz(__rbit64(v18)) + (v4 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(a3 + 48) + 8 * v11);
    uint64_t v13 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v12 + 112LL);
    swift_retain(v12);
    uint64_t v15 = swift_retain(v13);
    v14(v23, v15);
    uint64_t v16 = v23[3];
    sub_100012824((uint64_t)v23, &qword_100157C58);
    swift_release(v12);
    uint64_t result = swift_release(v13);
    if (v16)
    {
      *(unint64_t *)((char *)v22 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
        return sub_1000584D8(v22, a2, v24, a3);
      }
    }
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v9) {
    return sub_1000584D8(v22, a2, v24, a3);
  }
  uint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18)
  {
    uint64_t v4 = v19;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v4 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return sub_1000584D8(v22, a2, v24, a3);
    }
    uint64_t v18 = *(void *)(v5 + 8 * v4);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v12 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(*(void *)(a3 + 56) + 8 * v12);
    type metadata accessor for RealizedInfo(0LL);
    swift_bridgeObjectRetain(v13);
    uint64_t v14 = sub_1000D26D0();
    uint64_t result = swift_bridgeObjectRelease(v13);
    if (!v14)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v4++, 1LL))
      {
        __break(1u);
        return sub_100058B40(v20, a2, v4, a3);
      }
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10) {
    return sub_100058B40(v20, a2, v4, a3);
  }
  uint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      return sub_100058B40(v20, a2, v4, a3);
    }
    uint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    uint64_t v42 = (v26 - 1) & v26;
    uint64_t v43 = v27;
    uint64_t v19 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    uint64_t v20 = v41;
    uint64_t v21 = (void (*)(char *, unint64_t, uint64_t))v14[2];
    v21(v15, v41[6] + v14[9] * v19, v16);
    uint64_t v22 = *(void *)(v20[7] + 8 * v19);
    v21((char *)v17, (unint64_t)v15, v16);
    uint64_t v23 = *(int *)(v40 + 48);
    *(void *)(v17 + v23) = v22;
    v21(v18, v17, v16);
    *(void *)&v18[v23] = v22;
    type metadata accessor for RealizedInfo(0LL);
    swift_bridgeObjectRetain_n(v22, 2LL);
    LOBYTE(v21) = sub_1000D26D0();
    sub_100012824(v17, &qword_100157C68);
    uint64_t v24 = (void (*)(char *, uint64_t))v14[1];
    v24(v18, v16);
    swift_bridgeObjectRelease(v22);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v15, v16);
    uint64_t v9 = v43;
    uint64_t v13 = v42;
    if ((v21 & 1) == 0)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      if (__OFADD__(v32++, 1LL))
      {
        __break(1u);
        return sub_100058DE0(v31, v30, v32, v41);
      }
    }
  }

  uint64_t v28 = v9 + 4;
  if (v9 + 4 >= v34) {
    return sub_100058DE0(v31, v30, v32, v41);
  }
  uint64_t v26 = *(void *)(v33 + 8 * v28);
  if (v26)
  {
    uint64_t v27 = v9 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v27 >= v34) {
      return sub_100058DE0(v31, v30, v32, v41);
    }
    uint64_t v26 = *(void *)(v33 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }

    uint64_t v8 = (v16 - 1) & v16;
    uint64_t v11 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(a3 + 48) + 16 * v11 + 8);
    uint64_t v13 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    type metadata accessor for RealizedInfo(0LL);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    uint64_t v14 = sub_1000D26D0();
    swift_bridgeObjectRelease(v12);
    uint64_t result = swift_bridgeObjectRelease(v13);
    if (!v14)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
        return sub_10005912C(v20, a2, v21, a3);
      }
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v9) {
    return sub_10005912C(v20, a2, v21, a3);
  }
  uint64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    uint64_t v4 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v4 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return sub_10005912C(v20, a2, v21, a3);
    }
    uint64_t v16 = *(void *)(v5 + 8 * v4);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(a3 + 48) + 8 * v11);
    uint64_t v13 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    uint64_t v24 = v12;
    swift_retain(v12);
    swift_retain(v13);
    uint64_t v14 = a4(&v24, v13);
    swift_release(v12);
    uint64_t result = swift_release(v13);
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
        return sub_1000584D8(v20, a2, v21, a3);
      }
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v23) {
    return sub_1000584D8(v20, a2, v21, a3);
  }
  uint64_t v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    uint64_t v6 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v23) {
      return sub_1000584D8(v20, a2, v21, a3);
    }
    uint64_t v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    uint64_t v9 = (v19 - 1) & v19;
    uint64_t v12 = __clz(__rbit64(v19)) + (v6 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a3 + 56) + v12);
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    LOBYTE(v16) = a4(v14, v15, v16, v17);
    uint64_t result = swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
        return sub_100063818(v23, a2, v24, a3);
      }
    }
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v10) {
    return sub_100063818(v23, a2, v24, a3);
  }
  uint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    uint64_t v6 = v20;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v6 >= v10) {
      return sub_100063818(v23, a2, v24, a3);
    }
    uint64_t v19 = *(void *)(v25 + 8 * v6);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }

    unint64_t v59 = (char *)v16;
    goto LABEL_21;
  }

  uint64_t v16 = v15;
  if (v14) {
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    uint64_t v64 = v2;
    swift_bridgeObjectRetain(v15);
    int64_t v62 = v16;
    uint64_t v18 = (uint64_t *)(v16 + 40);
    do
    {
      uint64_t v19 = *(v18 - 1);
      uint64_t v20 = *v18;
      uint64_t v21 = swift_allocObject(v4, 72LL, 7LL);
      *(_OWORD *)(v21 + 16) = xmmword_10010F110;
      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = v9;
      *(void *)(v21 + 32) = v19;
      *(void *)(v21 + 40) = v20;
      swift_bridgeObjectRetain(v20);
      uint64_t v23 = (void *)static OS_os_log.default.getter(v22);
      uint64_t v24 = static os_log_type_t.default.getter(v23);
      os_log(_:dso:log:type:_:)( "distnoted app installation event, processing bundle: %{public}s",  63LL,  2LL,  &_mh_execute_header,  v23,  v24,  v21);
      swift_bridgeObjectRelease(v21);

      v18 += 2;
      --v17;
    }

    while (v17);
    uint64_t v16 = v62;
    swift_bridgeObjectRelease(v62);
    uint64_t v2 = v64;
  }

  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v2 + 88LL))();
  if (!v25)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 + 72);
  swift_retain(v27);
  swift_release(v26);
  uint64_t v68 = 0LL;
  uint64_t v69 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(v69);
  uint64_t v68 = 0xD000000000000018LL;
  uint64_t v69 = 0x8000000100125B10LL;
LABEL_19:
  __int128 v67 = (void *)v16;
  uint64_t v50 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v51 = sub_100013F74();
  uint64_t v52 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v50, v51);
  __n128 v54 = v53;
  swift_bridgeObjectRelease(v16);
  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v54);
  unint64_t v56 = v68;
  uint64_t v57 = (char *)v69;
  uint64_t v58 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApplicationManager();
  sub_1000CDE2C(v56, v57, v58, (uint64_t)&off_1001463D0);
  swift_release(v27);
  unint64_t v59 = v57;
LABEL_21:
  swift_bridgeObjectRelease(v59);
}

      swift_bridgeObjectRelease(v55);
    }

    v252 = 0;
    LODWORD(v258) = *(_DWORD *)sub_1000A4974();
    LODWORD(v254) = v16;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v258, &type metadata for ExtensionManager.Settings.Flags, v17) & 1) == 0)
    {
      unint64_t v83 = (void *)v245;
      char v84 = v246;
LABEL_27:
      char v85 = v4[5];
      unint64_t v86 = v4[6];
      sub_100005110(v4 + 2, v85);
      sub_1001073DC(v85, v86);
      uint64_t v87 = v259;
      uint64_t v88 = v260;
      sub_100005110(&v258, v259);
      if (((*(uint64_t (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v88 + 136))( v84,  v83,  &v252,  v87,  v88) & 1) != 0)
      {
        Swift::String v89 = v252;
        sub_100006034(&v258);
        if ((v89 & 1) != 0)
        {
          v90 = v4[5];
          uint64_t v91 = v4[6];
          sub_100005110(v4 + 2, v90);
          sub_1001073DC(v90, v91);
          uint64_t v92 = v259;
          unint64_t v93 = v260;
          sub_100005110(&v258, v259);
          os_log_type_t v94 = v244;
          v95 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v93 + 224))(v84, v83, v92, v93);
          if (!v94)
          {
            unint64_t v177 = v95;
            sub_100005F70((uint64_t)&v261, (uint64_t)&v254);
            uint64_t v178 = v83;
            if ((v177 & 1) != 0)
            {
              uint64_t v179 = v256;
              char v180 = v257;
              sub_100005110(&v254, v256);
              char v181 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 16))(v179, v180);
              uint64_t v183 = v182;
              LOBYTE(v180) = sub_1000D5520(0LL, 1LL, v181, v182);
              sub_10003783C(v181, v183);
              sub_100006034(&v254);
              char v184 = sub_100006034(&v258);
              if ((v180 & 1) != 0)
              {
                char v185 = static os_log_type_t.info.getter(v184);
                int v186 = sub_100005FB4((uint64_t *)&unk_1001596B0);
                uint64_t v187 = swift_allocObject(v186, 72LL, 7LL);
                v250 = xmmword_10010F110;
                *(_OWORD *)(v187 + 16) = xmmword_10010F110;
                *(void *)(v187 + 56) = &type metadata for String;
                uint64_t v188 = sub_100026B64();
                *(void *)(v187 + 64) = v188;
                *(void *)(v187 + 32) = v84;
                *(void *)(v187 + 40) = v83;
                uint64_t v189 = sub_100026BA8();
                uint64_t v190 = (void *)static OS_os_log.default.getter(v189);
                os_log(_:dso:log:_:_:)( v185,  &_mh_execute_header,  v190,  "Skipping dext bundle validation on ARV at %{public}s",  52LL,  2LL,  v187);
                swift_bridgeObjectRelease(v187);

                uint64_t v191 = sub_100006034(&v261);
                uint64_t v192 = static os_log_type_t.info.getter(v191);
                uint64_t v21 = swift_allocObject(v186, 72LL, 7LL);
                *(_OWORD *)(v21 + 16) = v250;
                *(void *)(v21 + 56) = &type metadata for String;
                *(void *)(v21 + 64) = v188;
                *(void *)(v21 + 32) = 0xD000000000000026LL;
                *(void *)(v21 + 40) = 0x80000001001267B0LL;
                uint64_t v25 = (void *)static OS_os_log.default.getter(v21);
                os_log(_:dso:log:_:_:)( v192,  &_mh_execute_header,  v25,  "Finished extension FS validation with result: %{public}",  55LL,  2LL,  v21);
                goto LABEL_10;
              }
            }

            else
            {
              sub_100006034(&v254);
              sub_100006034(&v258);
            }

            v193 = sub_100005FB4((uint64_t *)&unk_1001596B0);
            uint64_t v194 = swift_allocObject(v193, 72LL, 7LL);
            v245 = xmmword_10010F110;
            *(_OWORD *)(v194 + 16) = xmmword_10010F110;
            *(void *)(v194 + 56) = &type metadata for String;
            uint64_t v195 = sub_100026B64();
            *(void *)(v194 + 64) = v195;
            *(void *)(v194 + 32) = v84;
            *(void *)(v194 + 40) = v178;
            uint64_t v196 = v178;
            uint64_t v197 = sub_100026BA8();
            v198 = swift_bridgeObjectRetain(v178);
            v246 = v197;
            os_log_type_t v199 = (void *)static OS_os_log.default.getter(v198);
            uint64_t v200 = static os_log_type_t.default.getter(v199);
            os_log(_:dso:log:type:_:)( "Validating extension at %{public}s",  34LL,  2LL,  &_mh_execute_header,  v199,  v200,  v194);
            swift_bridgeObjectRelease(v194);

            uint64_t v201 = (uint64_t)v248;
            URL.init(fileURLWithPath:)(v84, v196);
            swift_bridgeObjectRelease(v196);
            uint64_t v202 = (uint64_t)v249;
            uint64_t v203 = v247;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v250 + 56))(v249, 1LL, 1LL, v247);
            sub_10008C2AC(v201, v202);
            sub_100012824(v202, (uint64_t *)&unk_10015BA30);
            v243((char *)v201, v203);
            uint64_t v204 = sub_100006034(&v261);
            uint64_t v19 = static os_log_type_t.info.getter(v204);
            uint64_t v24 = swift_allocObject(v193, 72LL, 7LL);
            uint64_t v21 = v24;
            *(_OWORD *)(v24 + 16) = v245;
            *(void *)(v24 + 56) = &type metadata for String;
            *(void *)(v24 + 64) = v195;
            *(void *)(v24 + 32) = 0xD000000000000015LL;
            *(void *)(v24 + 40) = 0x8000000100126750LL;
            goto LABEL_4;
          }

          swift_bridgeObjectRelease(v83);
          sub_100006034(&v258);
          goto LABEL_55;
        }
      }

      else
      {
        sub_100006034(&v258);
      }

      *(void *)&v258 = 0LL;
      *((void *)&v258 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(*((void *)&v258 + 1));
      *(void *)&v258 = 0x5520656C646E7542LL;
      *((void *)&v258 + 1) = 0xEB00000000204C52LL;
      v96._countAndFlagsBits = v84;
      v96._object = v83;
      String.append(_:)(v96);
      swift_bridgeObjectRelease(v83);
      v97._countAndFlagsBits = 0xD000000000000013LL;
      v97._object = (void *)0x8000000100126700LL;
      String.append(_:)(v97);
      goto LABEL_53;
    }

    int64_t v62 = v4[5];
    uint64_t v63 = v4[6];
    sub_100005110(v4 + 2, v62);
    sub_1001073DC(v62, v63);
    uint64_t v64 = v256;
    v65 = v257;
    v242 = sub_100005110(&v254, v256);
    uint64_t v66 = v263;
    __int128 v67 = v264;
    sub_100005110(&v261, v263);
    (*(void (**)(uint64_t, uint64_t))(v67 + 64))(v66, v67);
    uint64_t v68 = sub_100005FB4(&qword_10015A818);
    inited = swift_initStackObject(v68, v253);
    v241 = xmmword_10010F110;
    *(_OWORD *)(inited + 16) = xmmword_10010F110;
    *(void *)(inited + 32) = NSURLIsSymbolicLinkKey;
    uint64_t v70 = NSURLIsSymbolicLinkKey;
    uint64_t v71 = sub_10008EF0C(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey();
    swift_arrayDestroy(inited + 32, 1LL, v72);
    uint64_t v73 = v244;
    (*(void (**)(__int128 *__return_ptr, char *, void *, uint64_t, uint64_t))(v65 + 192))( &v258,  v13,  v71,  v64,  v65);
    if (v73)
    {
      v243(v13, v247);
      swift_bridgeObjectRelease(v245);
      swift_bridgeObjectRelease(v71);
      uint64_t v74 = (__int128 *)&v254;
LABEL_24:
      sub_100006034(v74);
      uint64_t v75 = sub_100006034(&v261);
      uint64_t v19 = static os_log_type_t.info.getter(v75);
      uint64_t v76 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v77 = swift_allocObject(v76, 72LL, 7LL);
      uint64_t v21 = v77;
      uint64_t v78 = v241;
LABEL_57:
      *(_OWORD *)(v77 + 16) = v78;
      *(void *)(v77 + 56) = &type metadata for String;
      goto LABEL_58;
    }

    v243(v13, v247);
    swift_bridgeObjectRelease(v71);
    sub_100006034(&v254);
    unint64_t v118 = v259;
    unint64_t v119 = v260;
    sub_100005110(&v258, v259);
    v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 16))(v118, v119);
    unint64_t v83 = (void *)v245;
    if ((v120 & 1) == 0)
    {
      v244 = 0LL;
      char v84 = v246;
LABEL_41:
      sub_100006034(&v258);
      goto LABEL_27;
    }

    os_log_type_t v133 = v246;
    v254 = v246;
    v255 = v245;
    v251[0] = 3092014LL;
    v251[1] = 0xE300000000000000LL;
    uint64_t v134 = sub_10002657C();
    if ((StringProtocol.contains<A>(_:)(v251, &type metadata for String, &type metadata for String, v134, v134) & 1) != 0
      || (uint64_t v135 = v4[48], (v136 = *(void *)(v135 + 16)) == 0))
    {
LABEL_50:
      v254 = 0LL;
      v255 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(115LL);
      v142._countAndFlagsBits = 0x5520656C646E7542LL;
      v142._object = (void *)0xEB00000000204C52LL;
      String.append(_:)(v142);
      v143._countAndFlagsBits = v133;
      v143._object = v83;
      String.append(_:)(v143);
      swift_bridgeObjectRelease(v83);
      v144._countAndFlagsBits = 0xD000000000000064LL;
      v144._object = (void *)0x80000001001267E0LL;
      String.append(_:)(v144);
      uint64_t v145 = v4[48];
      v251[0] = v145;
      swift_bridgeObjectRetain(v145);
      uint64_t v146 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
      os_log_type_t v147 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
      BOOL v148 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v146, v147);
      uint64_t v150 = v149;
      swift_bridgeObjectRelease(v145);
      v151._countAndFlagsBits = v148;
      v151._object = v150;
      String.append(_:)(v151);
      swift_bridgeObjectRelease(v150);
      uint64_t v152 = v254;
      unint64_t v153 = v255;
      unint64_t v154 = sub_100012624();
      uint64_t v155 = swift_allocError(&type metadata for KMError, v154, 0LL, 0LL);
      *(void *)uint64_t v156 = v152;
      *(void *)(v156 + 8) = v153;
      *(_OWORD *)(v156 + 16) = 0u;
      *(_OWORD *)(v156 + 32) = 0u;
      *(_OWORD *)(v156 + 48) = 0u;
      *(void *)(v156 + 64) = 0LL;
      *(_BYTE *)(v156 + 72) = 19;
      swift_willThrow(v155);
      sub_100006034(&v258);
      uint64_t v157 = sub_100006034(&v261);
      uint64_t v19 = static os_log_type_t.info.getter(v157);
      unint64_t v158 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v21 = swift_allocObject(v158, 72LL, 7LL);
      *(_OWORD *)(v21 + 16) = v241;
      *(void *)(v21 + 56) = &type metadata for String;
LABEL_58:
      *(void *)(v21 + 64) = sub_100026B64();
      uint64_t v22 = 0x726F727245LL;
      uint64_t v23 = 0xE500000000000000LL;
      goto LABEL_3;
    }

    swift_bridgeObjectRetain(v4[48]);
    uint64_t v137 = (void *)(v135 + 40);
    while (1)
    {
      unint64_t v139 = *(v137 - 1);
      uint64_t v138 = (void *)*v137;
      swift_bridgeObjectRetain(*v137);
      v140._countAndFlagsBits = v139;
      v140._object = v138;
      uint64_t v141 = String.hasPrefix(_:)(v140);
      swift_bridgeObjectRelease(v138);
      if (v141) {
        break;
      }
      v137 += 2;
      if (!--v136)
      {
        swift_bridgeObjectRelease(v135);
        os_log_type_t v133 = v246;
        goto LABEL_50;
      }
    }

    swift_bridgeObjectRelease(v135);
    unint64_t v205 = v4[5];
    unint64_t v206 = v4[6];
    sub_100005110(v4 + 2, v205);
    sub_1001073DC(v205, v206);
    uint64_t v207 = v256;
    v208 = v257;
    sub_100005110(&v254, v256);
    uint64_t v209 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v208 + 152))(v246, v83, v207, v208);
    v211 = v210;
    if (v210)
    {
      unint64_t v212 = v209;
      v244 = 0LL;
      sub_100006034(&v254);
      unint64_t v213 = v4[46];
      unint64_t v214 = *(void *)(v213 + 16);
      if (v214)
      {
        swift_bridgeObjectRetain(v4[46]);
        uint64_t v215 = (void *)(v213 + 40);
        while (1)
        {
          Swift::String v217 = *(v215 - 1);
          uint64_t v216 = (void *)*v215;
          swift_bridgeObjectRetain(*v215);
          v218._countAndFlagsBits = v217;
          v218._object = v216;
          Swift::String v219 = String.hasPrefix(_:)(v218);
          swift_bridgeObjectRelease(v216);
          if (v219) {
            break;
          }
          v215 += 2;
          if (!--v214)
          {
            swift_bridgeObjectRelease(v213);
            goto LABEL_70;
          }
        }

        swift_bridgeObjectRelease(v213);
        v233 = sub_100005FB4((uint64_t *)&unk_1001596B0);
        v234 = swift_allocObject(v233, 112LL, 7LL);
        *(_OWORD *)(v234 + 16) = xmmword_10010F440;
        *(void *)(v234 + 56) = &type metadata for String;
        v235 = sub_100026B64();
        v236 = v245;
        *(void *)(v234 + 32) = v246;
        *(void *)(v234 + 40) = v236;
        *(void *)(v234 + 96) = &type metadata for String;
        *(void *)(v234 + 104) = v235;
        *(void *)(v234 + 64) = v235;
        *(void *)(v234 + 72) = v212;
        *(void *)(v234 + 80) = v211;
        sub_100026BA8();
        v237 = swift_bridgeObjectRetain(v211);
        v238 = (void *)static OS_os_log.default.getter(v237);
        v239 = static os_log_type_t.default.getter(v238);
        os_log(_:dso:log:type:_:)( "Bundle URL %{public}s is a valid symlink to %{public}s",  54LL,  2LL,  &_mh_execute_header,  v238,  v239,  v234);
        swift_bridgeObjectRelease(v234);

        v240 = v212;
        unint64_t v83 = v211;
        char v84 = v240;
        goto LABEL_41;
      }

  uint64_t v12 = (uint64_t *)sub_100090170();
  if (!*(void *)(a1 + 16))
  {
    uint64_t v24 = 0u;
    uint64_t v25 = 0u;
LABEL_29:
    sub_100012824((uint64_t)&v24, &qword_100157FF8);
    goto LABEL_30;
  }

  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = sub_100006114(v14, v13);
  if ((v16 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v24);
  }

  else
  {
    uint64_t v24 = 0u;
    uint64_t v25 = 0u;
  }

  swift_bridgeObjectRelease(v13);
  if (!*((void *)&v25 + 1)) {
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0
    && (v23 & 1) != 0)
  {
    return 1LL;
  }

LABEL_99:
  v281 = v366;
  swift_release(v366);
  v282 = sub_10003ADC4(v281);
  uint64_t v29 = sub_100012054(v282);
  swift_bridgeObjectRelease(v282);
  v283 = v372[1];
  v396 = *v372;
  v397 = v283;
  v398 = v372[2];
  v399 = *((void *)v372 + 6);
  v284 = (uint64_t)v365;
  swift_storeEnumTagMultiPayload(v365, v364, 4LL);
  sub_10005350C(v284);
  uint64_t v16 = v285;
  sub_1000127BC(v284, type metadata accessor for LookupSpec);
  if (!v16)
  {
    v320 = v29;
    goto LABEL_136;
  }

  unint64_t v56 = v16 & 0xFFFFFFFFFFFFFF8LL;
  if (!((unint64_t)v16 >> 62))
  {
    v286 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v286) {
      goto LABEL_102;
    }
LABEL_134:
    v319 = v29;
LABEL_135:
    swift_bridgeObjectRelease(v319);
    v320 = v16;
LABEL_136:
    uint64_t result = swift_bridgeObjectRelease(v320);
    *v326 = v335;
    return result;
  }

    __break(1u);
    goto LABEL_100;
  }

  if (v183)
  {
    uint64_t result = sub_10006C448(a1);
    uint64_t v179 = result;
    if (v144)
    {
      uint64_t v145 = v144;
      char v185 = v59;
      uint64_t result = sub_10006C454(a1);
      if ((v146 & 1) == 0)
      {
        os_log_type_t v147 = result;
        uint64_t result = sub_10006C468(a1);
        if (result != 2)
        {
          BOOL v148 = result;
          uint64_t result = sub_10006C548(a1);
          if ((result & 0x100000000LL) == 0)
          {
            uint64_t v149 = v186;
            sub_1000CC578(v184, v179, v145, v147, v148 & 1, result, v196 + 32, v182, v183, v186, v138);
            swift_bridgeObjectRelease(v145);
            (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v138 + 8))(&v191, v149, v138);
            uint64_t v150 = v193;
            uint64_t v151 = v194;
            sub_100005110(&v191, v193);
            sub_100005880(v150, v151);
            uint64_t v152 = v189;
            char v184 = v190;
            sub_100005110(v188, v189);
            unint64_t v153 = v139(v149, v138);
            unint64_t v154 = *(void *)(v153 + 160);
            uint64_t v155 = *(void *)(v153 + 168);
            swift_bridgeObjectRetain(v155);
            swift_release(v153);
            uint64_t v156 = v196;
            sub_100016B74(v196, v154, v155, v152, (uint64_t)v184);
            swift_bridgeObjectRelease(v155);
            swift_release(v180);
            swift_release_n(v156, 2LL);
            sub_100006034(v188);
            sub_100006034(&v191);
LABEL_83:
            uint64_t v171 = v185;
            return mach_port_deallocate(mach_task_self_, v171);
          }

          goto LABEL_106;
        }

LABEL_130:
  if (v16 >= 0) {
    v321 = v56;
  }
  else {
    v321 = v16;
  }
  swift_bridgeObjectRetain(v16);
  v286 = _CocoaArrayWrapper.endIndex.getter(v321);
  swift_bridgeObjectRelease(v16);
  if (!v286) {
    goto LABEL_134;
  }
LABEL_102:
  v378 = v286;
  v379 = (char *)(v16 & 0xC000000000000001LL);
  v287 = 4LL;
  v375 = (int *)0x8000000100121E90LL;
  v376 = v29;
  v377 = v16;
  while (2)
  {
    v289 = v287 - 4;
    if (v379)
    {
      v290 = specialized _ArrayBuffer._getElementSlowPath(_:)(v287 - 4, v16);
      v291 = v287 - 3;
      if (__OFADD__(v289, 1LL)) {
        goto LABEL_128;
      }
    }

    else
    {
      v290 = *(void *)(v16 + 8 * v287);
      swift_retain(v290);
      v291 = v287 - 3;
      if (__OFADD__(v289, 1LL)) {
        goto LABEL_128;
      }
    }

    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v290 + 24) + 112LL))(&v384);
    v292 = v386;
    if (!v386)
    {
      sub_100012824((uint64_t)&v384, &qword_100157C58);
      v288 = (uint64_t)v340;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v340, 1LL, 1LL, v400);
LABEL_104:
      swift_release(v290);
      sub_100012824(v288, (uint64_t *)&unk_10015BA30);
      goto LABEL_105;
    }

    v293 = v387;
    sub_100005110(&v384, v386);
    v294 = v340;
    v295 = v292;
    v296 = v400;
    (*(void (**)(uint64_t, uint64_t))(v293 + 64))(v295, v293);
    v288 = (uint64_t)v294;
    uint64_t v16 = v377;
    uint64_t v29 = v368;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v368 + 56))(v288, 0LL, 1LL, v296);
    sub_100006034(&v384);
    uint64_t v29 = v368;
    v297 = v338;
    v298 = v400;
    v299 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v368 + 32))(v338, v288, v400);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*v349 + 232LL))(v299);
    if (result)
    {
      v301 = result;
      v302 = (*(uint64_t (**)(char *))(*(void *)result + 392LL))(v297);
      swift_release(v301);
      v303 = (uint64_t)v332;
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v332, v297, v298);
      v304 = v298;
      if ((v302 & 1) != 0)
      {
        v305 = sub_10000B5CC(v303, v376);
        v306 = v303;
        v307 = v305;
        v308 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        v308(v306, v304);
        if ((v307 & 1) != 0)
        {
          swift_release(v290);
        }

        else
        {
          sub_100052CD0(v290);
          v384 = 0LL;
          v385 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(76LL);
          v309._countAndFlagsBits = 0x6120726576697244LL;
          v309._object = (void *)0xEE00204C52552074LL;
          String.append(_:)(v309);
          v310 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          v311._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v304, v310);
          v312 = v311._object;
          String.append(_:)(v311);
          swift_bridgeObjectRelease(v312);
          v313._countAndFlagsBits = 0xD00000000000003CLL;
          v313._object = v375;
          String.append(_:)(v313);
          uint64_t v29 = v384;
          v314 = v385;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0) {
            v335 = sub_10000C82C(0LL, v335[2] + 1LL, 1, v335);
          }
          v316 = v335[2];
          v315 = v335[3];
          if (v316 >= v315 >> 1) {
            v335 = sub_10000C82C((void *)(v315 > 1), v316 + 1, 1, v335);
          }
          v317 = v335;
          v335[2] = v316 + 1;
          v318 = &v317[2 * v316];
          v318[4] = v29;
          v318[5] = v314;
          swift_release(v290);
          v304 = v400;
        }
      }

      else
      {
        swift_release(v290);
        v308 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        v308(v303, v304);
      }

      v308((uint64_t)v338, v304);
      uint64_t v16 = v377;
LABEL_105:
      ++v287;
      if (v291 == v378)
      {
        v319 = v376;
        goto LABEL_135;
      }

      continue;
    }

    break;
  }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      return result;
    }
  }

  while (1)
  {
    uint64_t v50 = v11 - 1;
    if (v11 >= 4)
    {
      uint64_t v55 = &v48[2 * v11];
      unint64_t v56 = *(v55 - 8);
      uint64_t v57 = *(v55 - 7);
      int64_t v61 = __OFSUB__(v57, v56);
      uint64_t v58 = v57 - v56;
      if (v61) {
        goto LABEL_118;
      }
      BOOL v60 = *(v55 - 6);
      unint64_t v59 = *(v55 - 5);
      int64_t v61 = __OFSUB__(v59, v60);
      uint64_t v53 = v59 - v60;
      __n128 v54 = v61;
      if (v61) {
        goto LABEL_119;
      }
      int64_t v62 = v11 - 2;
      uint64_t v63 = &v48[2 * v11 - 4];
      v65 = *v63;
      uint64_t v64 = v63[1];
      int64_t v61 = __OFSUB__(v64, v65);
      uint64_t v66 = v64 - v65;
      if (v61) {
        goto LABEL_120;
      }
      int64_t v61 = __OFADD__(v53, v66);
      __int128 v67 = v53 + v66;
      if (v61) {
        goto LABEL_122;
      }
      if (v67 >= v58)
      {
        char v85 = &v48[2 * v50];
        uint64_t v87 = *v85;
        unint64_t v86 = v85[1];
        int64_t v61 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v61) {
          goto LABEL_128;
        }
        uint64_t v78 = v53 < v88;
        goto LABEL_86;
      }
    }

    else
    {
      if (v11 != 3)
      {
        uint64_t v79 = *((void *)v10 + 4);
        uint64_t v80 = *((void *)v10 + 5);
        int64_t v61 = __OFSUB__(v80, v79);
        uint64_t v72 = v80 - v79;
        uint64_t v73 = v61;
        goto LABEL_80;
      }

      uint64_t v52 = *((void *)v10 + 4);
      unint64_t v51 = *((void *)v10 + 5);
      int64_t v61 = __OFSUB__(v51, v52);
      uint64_t v53 = v51 - v52;
      __n128 v54 = v61;
    }

    if ((v54 & 1) != 0) {
      goto LABEL_121;
    }
    int64_t v62 = v11 - 2;
    uint64_t v68 = &v48[2 * v11 - 4];
    uint64_t v70 = *v68;
    uint64_t v69 = v68[1];
    uint64_t v71 = __OFSUB__(v69, v70);
    uint64_t v72 = v69 - v70;
    uint64_t v73 = v71;
    if (v71) {
      goto LABEL_123;
    }
    uint64_t v74 = &v48[2 * v50];
    uint64_t v76 = *v74;
    uint64_t v75 = v74[1];
    int64_t v61 = __OFSUB__(v75, v76);
    uint64_t v77 = v75 - v76;
    if (v61) {
      goto LABEL_125;
    }
    if (__OFADD__(v72, v77)) {
      goto LABEL_127;
    }
    if (v72 + v77 >= v53)
    {
      uint64_t v78 = v53 < v77;
LABEL_86:
      if (v78) {
        uint64_t v50 = v62;
      }
      goto LABEL_88;
    }

uint64_t sub_10000AC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(__s1, *(void *)(a3 + 40));
    Data.hash(into:)(__s1, a1, a2);
    unint64_t v6 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a3 + 32));
    if (((*(void *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
      __asm { BR              X8 }
    }
  }

  return 0LL;
}

uint64_t sub_10000B5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        uint64_t v8 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL),  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_10000B750(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

unint64_t sub_10000B77C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v155 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v141 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100005FB4(&qword_100157C60);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v141 - v9;
  uint64_t v142 = v0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 56) + 144LL))(v8);
  sub_1000548C0(v11, (uint64_t)v160);
  swift_release(v11);
  unint64_t v158 = 0xD000000000000024LL;
  unint64_t v159 = 0x8000000100121B00LL;
  uint64_t v12 = *(void *)(v161 + 64);
  int64_t v145 = v161 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(v161 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v146 = (void *)((unint64_t)(v13 + 63) >> 6);
  int64_t v147 = v161;
  swift_bridgeObjectRetain(v161);
  uint64_t object = 0LL;
  unint64_t v143 = (unint64_t)"ions by identifier:\n";
  uint64_t v144 = (void *)0x8000000100121B30LL;
  uint64_t v150 = v3;
  uint64_t v151 = v1;
  BOOL v148 = v7;
  uint64_t v149 = v10;
  if (v15) {
    goto LABEL_6;
  }
LABEL_12:
  uint64_t v23 = object + 1;
  if (__OFADD__(object, 1LL)) {
    goto LABEL_119;
  }
  unint64_t v24 = *(void *)(v145 + 8 * v23);
  ++object;
  if (v24) {
    goto LABEL_25;
  }
  uint64_t object = v23 + 1;
  unint64_t v24 = *(void *)(v145 + 8 * object);
  if (v24) {
    goto LABEL_25;
  }
  uint64_t object = v23 + 2;
  if (v23 + 2 >= (uint64_t)v146)
  {
LABEL_52:
    swift_release(v147);
    v62._countAndFlagsBits = 10LL;
    v62._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 0xD00000000000001DLL;
    v63._uint64_t object = (void *)0x8000000100121B50LL;
    String.append(_:)(v63);
    uint64_t v64 = (void *)v162;
    uint64_t object = *(void *)(v162 + 64);
    int64_t v145 = v162 + 64;
    uint64_t v65 = 1LL << *(_BYTE *)(v162 + 32);
    swift_bridgeObjectRetain(v162);
    unint64_t result = (unint64_t)sub_100010F94(v160);
    unint64_t v153 = 0LL;
    uint64_t v67 = -1LL;
    if (v65 < 64) {
      uint64_t v67 = ~(-1LL << v65);
    }
    unint64_t v68 = v67 & object;
    int64_t v147 = (unint64_t)(v65 + 63) >> 6;
    int64_t v141 = v147 - 1;
    uint64_t v146 = (void *)(v143 | 0x8000000000000000LL);
    uint64_t v144 = v64;
    while (!v68)
    {
      int64_t v78 = v153 + 1;
      if (__OFADD__(v153, 1LL)) {
        goto LABEL_120;
      }
      if (v78 < v147)
      {
        unint64_t v79 = *(void *)(v145 + 8 * v78);
        if (v79) {
          goto LABEL_63;
        }
        int64_t v80 = v153 + 2;
        ++v153;
        if (v78 + 1 < v147)
        {
          unint64_t v79 = *(void *)(v145 + 8 * v80);
          if (v79) {
            goto LABEL_66;
          }
          unint64_t v153 = v78 + 1;
          if (v78 + 2 < v147)
          {
            unint64_t v79 = *(void *)(v145 + 8 * (v78 + 2));
            if (v79)
            {
              v78 += 2LL;
LABEL_63:
              uint64_t v73 = (v79 - 1) & v79;
              unint64_t v74 = __clz(__rbit64(v79)) + (v78 << 6);
              unint64_t v153 = v78;
LABEL_59:
              (*(void (**)(char *, unint64_t, uint64_t))(v155 + 16))( v7,  v64[6] + *(void *)(v155 + 72) * v74,  v1);
              uint64_t v75 = v64[7];
              uint64_t v76 = sub_100005FB4(&qword_100157C68);
              uint64_t v77 = *(void *)(v75 + 8 * v74);
              *(void *)&v7[*(int *)(v76 + 48)] = v77;
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))( v7,  0LL,  1LL,  v76);
              swift_bridgeObjectRetain(v77);
              goto LABEL_78;
            }

            int64_t v80 = v78 + 3;
            unint64_t v153 = v78 + 2;
            if (v78 + 3 < v147)
            {
              unint64_t v79 = *(void *)(v145 + 8 * v80);
              if (v79)
              {
LABEL_66:
                int64_t v78 = v80;
                goto LABEL_63;
              }

              while (1)
              {
                int64_t v78 = v80 + 1;
                if (__OFADD__(v80, 1LL)) {
                  goto LABEL_130;
                }
                if (v78 >= v147) {
                  break;
                }
                unint64_t v79 = *(void *)(v145 + 8 * v78);
                ++v80;
                if (v79) {
                  goto LABEL_63;
                }
              }

              unint64_t v153 = v141;
            }
          }
        }
      }

      uint64_t v81 = sub_100005FB4(&qword_100157C68);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56LL))(v7, 1LL, 1LL, v81);
      uint64_t v73 = 0LL;
LABEL_78:
      sub_100012224((uint64_t)v7, (uint64_t)v10);
      uint64_t v82 = sub_100005FB4(&qword_100157C68);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48LL))(v10, 1LL, v82) == 1)
      {
        swift_release(v64);
        v117._countAndFlagsBits = 10LL;
        v117._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v117);
        v118._countAndFlagsBits = 0xD000000000000010LL;
        v118._uint64_t object = (void *)0x8000000100121B70LL;
        String.append(_:)(v118);
        unint64_t result = (*(uint64_t (**)(void))(*(void *)v142 + 408LL))();
        uint64_t object = result;
        if (result >> 62) {
          goto LABEL_124;
        }
        uint64_t v155 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v155) {
          goto LABEL_111;
        }
LABEL_128:
        swift_bridgeObjectRelease(object);
        return v158;
      }

      unint64_t v154 = v73;
      uint64_t v83 = *(void *)&v10[*(int *)(v82 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v3, v10, v1);
      if ((unint64_t)v83 >> 62)
      {
        if (v83 < 0) {
          uint64_t v116 = v83;
        }
        else {
          uint64_t v116 = v83 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v83);
        uint64_t object = _CocoaArrayWrapper.endIndex.getter(v116);
        if (!object)
        {
LABEL_55:
          swift_bridgeObjectRelease_n(v83, 2LL);
          uint64_t v69 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          v157._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v69);
          v157._uint64_t object = v70;
          v71._countAndFlagsBits = 0x3E7974706D653C20LL;
          v71._uint64_t object = (void *)0xE90000000000000ALL;
          String.append(_:)(v71);
          uint64_t object = (uint64_t)v157._object;
          String.append(_:)(v157);
          swift_bridgeObjectRelease(object);
          goto LABEL_56;
        }
      }

      else
      {
        uint64_t object = *(void *)((v83 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v83);
        if (!object) {
          goto LABEL_55;
        }
      }

      if ((v83 & 0xC000000000000001LL) != 0)
      {
        uint64_t v152 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v83);
      }

      else
      {
        if (!*(void *)((v83 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_118;
        }
        uint64_t v152 = *(void *)(v83 + 32);
        swift_retain(v152);
      }

      swift_bridgeObjectRelease(v83);
      if ((unint64_t)v83 >> 62)
      {
        if (v83 < 0) {
          uint64_t v98 = v83;
        }
        else {
          uint64_t v98 = v83 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v83);
        uint64_t object = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease(v83);
        if (object == 1)
        {
LABEL_100:
          swift_bridgeObjectRelease(v83);
          uint64_t v99 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          v157._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v99);
          v157._uint64_t object = v100;
          v101._countAndFlagsBits = 8250LL;
          v101._uint64_t object = (void *)0xE200000000000000LL;
          String.append(_:)(v101);
          uint64_t v102 = v152;
          v103._countAndFlagsBits = sub_10003518C();
          uint64_t v104 = v103._object;
          String.append(_:)(v103);
          swift_bridgeObjectRelease(v104);
          v105._countAndFlagsBits = 10LL;
          v105._uint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v105);
          uint64_t object = (uint64_t)v157._object;
          String.append(_:)(v157);
          swift_release(v102);
          swift_bridgeObjectRelease(object);
          uint64_t v7 = v148;
          goto LABEL_56;
        }
      }

      else
      {
        uint64_t object = *(void *)((v83 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (object == 1) {
          goto LABEL_100;
        }
      }

      v157._countAndFlagsBits = 0LL;
      v157._uint64_t object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(34LL);
      swift_bridgeObjectRelease(v157._object);
      v157._countAndFlagsBits = 0xD00000000000001ELL;
      v157._uint64_t object = v146;
      uint64_t v84 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      v85._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v84);
      unint64_t v86 = v85._object;
      String.append(_:)(v85);
      swift_bridgeObjectRelease(v86);
      v87._countAndFlagsBits = 2618LL;
      v87._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v87);
      uint64_t v88 = v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(v88);
      if (object)
      {
        v157._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
        sub_10000CC84(0, object & ~(object >> 63), 0);
        if (object < 0) {
          goto LABEL_122;
        }
        uint64_t v89 = 0LL;
        countAndFlagsBits = (void *)v157._countAndFlagsBits;
        do
        {
          if ((v83 & 0xC000000000000001LL) != 0)
          {
            uint64_t v91 = specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v83);
          }

          else
          {
            uint64_t v91 = *(void *)(v83 + 8 * v89 + 32);
            swift_retain(v91);
          }

          uint64_t v92 = sub_10003518C();
          uint64_t v94 = v93;
          swift_release(v91);
          v157._countAndFlagsBits = (uint64_t)countAndFlagsBits;
          unint64_t v96 = countAndFlagsBits[2];
          unint64_t v95 = countAndFlagsBits[3];
          if (v96 >= v95 >> 1)
          {
            sub_10000CC84(v95 > 1, v96 + 1, 1);
            countAndFlagsBits = (void *)v157._countAndFlagsBits;
          }

          ++v89;
          countAndFlagsBits[2] = v96 + 1;
          uint64_t v97 = &countAndFlagsBits[2 * v96];
          v97[4] = v92;
          v97[5] = v94;
        }

        while (object != v89);
        swift_bridgeObjectRelease(v83);
        uint64_t v3 = v150;
        uint64_t v1 = v151;
        uint64_t v10 = v149;
        uint64_t v64 = v144;
      }

      else
      {
        swift_bridgeObjectRelease(v83);
        countAndFlagsBits = _swiftEmptyArrayStorage;
      }

      v157._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      uint64_t v106 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
      uint64_t v107 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v108 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v106, v107);
      uint64_t v110 = v109;
      swift_bridgeObjectRelease(countAndFlagsBits);
      Swift::Int v111 = sub_100026BE4();
      uint64_t v112 = sub_1000D189C(v111, v108, v110);
      Swift::String v114 = v113;
      swift_bridgeObjectRelease(v110);
      v157._countAndFlagsBits = v112;
      v157._uint64_t object = v114;
      swift_bridgeObjectRetain(v114);
      v115._countAndFlagsBits = 10LL;
      v115._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v115);
      swift_bridgeObjectRelease(v114);
      uint64_t object = (uint64_t)v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(object);
      swift_release(v152);
      uint64_t v7 = v148;
LABEL_56:
      unint64_t v68 = v154;
      unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v3, v1);
    }

    unint64_t v72 = __clz(__rbit64(v68));
    uint64_t v73 = (v68 - 1) & v68;
    unint64_t v74 = v72 | (v153 << 6);
    goto LABEL_59;
  }

  unint64_t v24 = *(void *)(v145 + 8 * object);
  if (!v24)
  {
    uint64_t v25 = v23 + 3;
    if (v25 < (uint64_t)v146)
    {
      unint64_t v24 = *(void *)(v145 + 8 * v25);
      if (v24)
      {
        uint64_t object = v25;
        goto LABEL_25;
      }

      while (1)
      {
        uint64_t object = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_123;
        }
        unint64_t v24 = *(void *)(v145 + 8 * object);
        ++v25;
        if (v24) {
          goto LABEL_25;
        }
      }
    }

    goto LABEL_52;
  }

LABEL_25:
  unint64_t v15 = (v24 - 1) & v24;
  for (unint64_t i = __clz(__rbit64(v24)) + (object << 6); ; unint64_t i = v19 | (object << 6))
  {
    uint64_t v26 = (uint64_t *)(*(void *)(v147 + 48) + 16 * i);
    uint64_t v27 = *v26;
    uint64_t v28 = (void *)v26[1];
    uint64_t v29 = *(void *)(*(void *)(v147 + 56) + 8 * i);
    unint64_t v30 = (unint64_t)v29 >> 62;
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0) {
        uint64_t v21 = *(void *)(*(void *)(v147 + 56) + 8 * i);
      }
      else {
        uint64_t v21 = v29 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v29, 2LL);
      swift_bridgeObjectRetain(v28);
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v29);
      if (!v22)
      {
LABEL_5:
        swift_bridgeObjectRelease(v29);
        v157._countAndFlagsBits = v27;
        v157._uint64_t object = v28;
        v17._countAndFlagsBits = 0x3E7974706D653C20LL;
        v17._uint64_t object = (void *)0xE90000000000000ALL;
        String.append(_:)(v17);
        uint64_t v18 = v157._object;
        String.append(_:)(v157);
        swift_bridgeObjectRelease(v18);
        uint64_t v3 = v150;
        uint64_t v1 = v151;
        uint64_t v10 = v149;
        if (!v15) {
          goto LABEL_12;
        }
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v28);
      if (!v31) {
        goto LABEL_5;
      }
    }

    unint64_t v153 = v15;
    unint64_t v154 = object;
    if ((v29 & 0xC000000000000001LL) == 0) {
      break;
    }
    uint64_t v152 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v29);
    if (!v30)
    {
LABEL_31:
      uint64_t v32 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v32 == 1) {
        goto LABEL_49;
      }
      goto LABEL_32;
    }

    uint64_t v13 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    uint64_t v23 = v7;
    unint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    uint64_t v27 = *(void *)(v9 + 40);
    uint64_t v28 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      Swift::String v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      Swift::String v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        Swift::String v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }

      while (v35 == -1);
      Swift::String v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    uint64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        char v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_35;
        }
        uint64_t v21 = v39[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    char v16 = v22;
    goto LABEL_25;
  }

    uint64_t v14 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    unint64_t v24 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v24 * v20, v4);
    uint64_t v25 = *(void *)(v10 + 40);
    uint64_t v26 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    uint64_t v27 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        Swift::String v33 = *(void *)(v15 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v18 * v24,  v7,  v4);
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    unint64_t result = swift_release_n(v8, 2LL);
    uint64_t v2 = v35;
    goto LABEL_37;
  }

  uint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    Swift::String v17 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    Swift::String v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_35;
    }
    uint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100006054(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100017790(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

      uint64_t v31 = sub_100005FB4(&qword_100158268);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v7, 1LL, 1LL, v31);
      char v16 = 0LL;
    }

    uint64_t v29 = *(void *)(v35 + 8 * v30);
    if (v29)
    {
LABEL_14:
      uint64_t v28 = v30;
LABEL_11:
      char v16 = (v29 - 1) & v29;
      uint64_t v21 = __clz(__rbit64(v29)) + (v28 << 6);
      uint64_t v12 = v28;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v36)
    {
      uint64_t v12 = v34;
      goto LABEL_25;
    }

    uint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_11;
    }
  }

    uint64_t v14 = (v25 - 1) & v25;
    Swift::String v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(v30 + 72) * v17;
    sub_10001AF08(*(void *)(v5 + 56) + v22, (uint64_t)v4);
    uint64_t v23 = (uint64_t *)(*(void *)(v7 + 48) + v18);
    *uint64_t v23 = v20;
    v23[1] = v21;
    sub_1000219AC((uint64_t)v4, *(void *)(v7 + 56) + v22);
    unint64_t result = (void *)sub_1000125E0(v20, v21);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  uint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

      unint64_t v42 = sub_100005FB4(&qword_100158600);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v6, 1LL, 1LL, v42);
      uint64_t v14 = 0LL;
    }

    uint64_t v40 = *(void *)(v46 + 8 * v41);
    if (v40)
    {
LABEL_14:
      uint64_t v39 = v41;
LABEL_11:
      uint64_t v14 = (v40 - 1) & v40;
      uint64_t v32 = __clz(__rbit64(v40)) + (v39 << 6);
      uint64_t v51 = v39;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1LL)) {
      break;
    }
    if (v39 >= v47)
    {
      uint64_t v51 = v45;
      goto LABEL_25;
    }

    uint64_t v40 = *(void *)(v46 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_11;
    }
  }

    uint64_t v14 = (v25 - 1) & v25;
    Swift::String v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100025C18(*(void *)(v5 + 56) + v22, (uint64_t)v4);
    uint64_t v23 = (uint64_t *)(*(void *)(v7 + 48) + v18);
    *uint64_t v23 = v20;
    v23[1] = v21;
    sub_100025C5C((uint64_t)v4, *(void *)(v7 + 56) + v22);
    unint64_t result = (void *)sub_1000125E0(v20, v21);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  uint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    char v16 = 40 * v15;
    Swift::String v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 8);
    unint64_t v19 = *(_BYTE *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v18;
    *(_BYTE *)(v22 + 16) = v19;
    *(void *)(v22 + 24) = v20;
    *(void *)(v22 + 32) = v21;
    swift_bridgeObjectRetain(v18);
    unint64_t result = (void *)sub_10002B568(v20, v21);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    unint64_t result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

      uint64_t v38 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v12, 1LL, 1LL, v38);
      uint64_t v23 = 0LL;
    }

    uint64_t v36 = *(void *)(v41 + 8 * v37);
    if (v36)
    {
LABEL_14:
      uint64_t v35 = v37;
LABEL_11:
      uint64_t v23 = (v36 - 1) & v36;
      unint64_t v30 = __clz(__rbit64(v36)) + (v35 << 6);
      unint64_t v24 = v35;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v35 = v37 + 1;
    if (__OFADD__(v37, 1LL)) {
      break;
    }
    if (v35 >= v42)
    {
      unint64_t v24 = v40;
      goto LABEL_25;
    }

    uint64_t v36 = *(void *)(v41 + 8 * v35);
    ++v37;
    if (v36) {
      goto LABEL_11;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    char v16 = 24 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 24 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = v17[2];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    sub_10004F9C0(v19);
    swift_bridgeObjectRetain(v21);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    unint64_t result = (void *)swift_bridgeObjectRetain(v16);
  }

  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    char v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    Swift::String v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    unint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    unint64_t result = (void *)swift_bridgeObjectRetain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    unint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    char v16 = 8 * v15;
    Swift::String v17 = *(void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    unint64_t result = (void *)swift_retain(v18);
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    char v16 = 8 * v15;
    Swift::String v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v20 - 1) & v20;
    char v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    Swift::String v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = *(_BYTE *)(*(void *)(v5 + 56) + v16);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 48) + v17,  v4,  v1);
    *(_BYTE *)(*(void *)(v7 + 56) + v16) = v18;
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    char v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_26:
    uint64_t v29 = v49;
    unint64_t v30 = *(void *)(v7 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + v48))(v9, *(void *)(v49 + 48) + v30 * v24, v6);
    uint64_t v31 = *(_BYTE *)(*(void *)(v29 + 56) + v24);
    uint64_t v32 = *(void *)(v12 + 40);
    Swift::String v33 = sub_10007D014(&qword_100157E70, (uint64_t)&protocol conformance descriptor for URL);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v6, v33);
    Swift::String v34 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0LL;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v18 + 8 * v36);
      }

      while (v40 == -1);
      uint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v30 * v22,  v9,  v6);
    *(_BYTE *)(*(void *)(v12 + 56) + v22) = v31;
    ++*(void *)(v12 + 16);
  }

  uint64_t v28 = v25 + 2;
  if (v28 >= v46)
  {
LABEL_36:
    unint64_t v42 = v49;
    swift_release(v49);
    uint64_t v3 = v45;
    if ((v44 & 0x100000000LL) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  uint64_t v27 = v47[v28];
  if (v27)
  {
    uint64_t v20 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v20 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v20 >= v46) {
      goto LABEL_36;
    }
    uint64_t v27 = v47[v20];
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

      __break(1u);
      return;
    }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ExceptionList.ExceptionType);
  __break(1u);
LABEL_26:
  uint64_t v47 = 0LL;
  uint64_t v48 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v43._uint64_t object = (void *)0x80000001001227D0LL;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)( &v50,  &v47,  &type metadata for ExceptionList.ExceptionType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39LL;
  v44._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v47,  v48,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    char v16 = *(void *)(v2 + 56) + 24 * v15;
    Swift::String v17 = *(_BYTE *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    unint64_t v19 = *(void *)(v16 + 16);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    uint64_t v20 = *(void *)(v4 + 56) + 24 * v15;
    *(_BYTE *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v18;
    *(void *)(v20 + 16) = v19;
    unint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v38 = (v28 - 1) & v28;
    uint64_t v39 = v29;
    uint64_t v11 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_12:
    uint64_t v12 = 8 * v11;
    uint64_t v13 = *(void *)(v1 + 56);
    uint64_t v14 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    unint64_t v15 = 80 * v11;
    char v16 = *(void *)(v13 + v15);
    Swift::String v17 = *(void *)(v13 + v15 + 8);
    uint64_t v18 = *(void *)(v13 + v15 + 16);
    unint64_t v19 = *(void *)(v13 + v15 + 24);
    uint64_t v20 = *(void *)(v13 + v15 + 32);
    uint64_t v21 = *(void *)(v13 + v15 + 40);
    uint64_t v22 = *(void *)(v13 + v15 + 48);
    uint64_t v23 = *(void *)(v13 + v15 + 56);
    unint64_t v24 = *(void *)(v13 + v15 + 64);
    uint64_t v25 = *(_BYTE *)(v13 + v15 + 72);
    *(void *)(*(void *)(v3 + 48) + v12) = v14;
    uint64_t v26 = *(void *)(v3 + 56) + v15;
    *(void *)uint64_t v26 = v16;
    *(void *)(v26 + 8) = v17;
    *(void *)(v26 + 16) = v18;
    *(void *)(v26 + 24) = v19;
    *(void *)(v26 + 32) = v20;
    *(void *)(v26 + 40) = v21;
    *(void *)(v26 + 48) = v22;
    *(void *)(v26 + 56) = v23;
    *(void *)(v26 + 64) = v24;
    *(_BYTE *)(v26 + 72) = v25;
    swift_retain(v14);
    unint64_t result = (void *)sub_1000516E4(v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v10 = v38;
    uint64_t v7 = v39;
  }

  unint64_t v30 = v7 + 3;
  if (v7 + 3 >= v35) {
    goto LABEL_26;
  }
  uint64_t v28 = *((void *)__src + v30);
  if (v28)
  {
    uint64_t v29 = v7 + 3;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v29 >= v35) {
      goto LABEL_26;
    }
    uint64_t v28 = *((void *)__src + v29);
    ++v30;
    if (v28) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    char v16 = 8 * v15;
    Swift::String v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100006054(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = sub_100017790(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_10001A148(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v29, &qword_10015BE10);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v18;
    v21[1] = v19;
    uint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    unint64_t v24 = v29[1];
    uint64_t v23 = v29[2];
    *uint64_t v22 = v29[0];
    v22[1] = v24;
    v22[2] = v23;
    swift_bridgeObjectRetain(v19);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    swift_release(v2);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    char v16 = 32 * v15;
    Swift::String v17 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = 24 * v15;
    uint64_t v23 = *(void *)(v2 + 56) + v22;
    unint64_t v24 = *(_BYTE *)(v23 + 16);
    uint64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v26 = *(_OWORD *)v23;
    *uint64_t v25 = v19;
    v25[1] = v18;
    v25[2] = v20;
    v25[3] = v21;
    uint64_t v27 = *(void *)(v4 + 56) + v22;
    *(_OWORD *)uint64_t v27 = v26;
    *(_BYTE *)(v27 + 16) = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }

  unint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    uint64_t v9 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    Swift::String v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

LABEL_45:
    if (v29 < 0) {
      uint64_t v57 = v29;
    }
    else {
      uint64_t v57 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v57);
    swift_bridgeObjectRelease(v29);
    if (v32 == 1)
    {
LABEL_49:
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v28);
      uint64_t v58 = v152;
      v157._countAndFlagsBits = sub_10003518C();
      v157._uint64_t object = v59;
      v60._countAndFlagsBits = 10LL;
      v60._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      int64_t v61 = v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(v61);
      uint64_t v56 = v58;
      goto LABEL_50;
    }

          uint64_t v55 = 0LL;
          LOBYTE(v38) = 1;
          goto LABEL_62;
        }

        goto LABEL_61;
      }

      __break(1u);
    }

    __break(1u);
    return result;
  }

  uint64_t v40 = sub_10007277C(2uLL, v38, v37);
  unint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v36 = v45;
  swift_bridgeObjectRelease(v37);
  if ((v40 ^ v42) < 0x4000)
  {
LABEL_10:
    Swift::Int v50 = v36;
LABEL_11:
    swift_bridgeObjectRelease(v50);
    return 0LL;
  }

  uint64_t v46 = sub_1000723B0(v40, v42, v44, (unint64_t)v36, 16LL);
  if ((v47 & 0x100) != 0) {
    uint64_t v46 = (uint64_t)sub_100071F60(v40, v42, v44, (uint64_t)v36, 16LL);
  }
  uint64_t v48 = v46;
  uint64_t v49 = v47;
  swift_bridgeObjectRelease(v36);
  if ((v49 & 1) != 0) {
    return 0LL;
  }
  else {
    return v48;
  }
}

LABEL_32:
    v157._countAndFlagsBits = 0LL;
    v157._uint64_t object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(v157._object);
    v157._countAndFlagsBits = 0xD00000000000001ELL;
    v157._uint64_t object = v144;
    v33._countAndFlagsBits = v27;
    v33._uint64_t object = v28;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v28);
    v34._countAndFlagsBits = 2618LL;
    v34._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v34);
    uint64_t v35 = v157._object;
    String.append(_:)(v157);
    swift_bridgeObjectRelease(v35);
    if (v32)
    {
      v157._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_10000CC84(0, v32 & ~(v32 >> 63), 0);
      if (v32 < 0) {
        goto LABEL_121;
      }
      uint64_t v36 = 0LL;
      uint64_t v37 = (void *)v157._countAndFlagsBits;
      do
      {
        if ((v29 & 0xC000000000000001LL) != 0)
        {
          uint64_t v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v29);
        }

        else
        {
          uint64_t v38 = *(void *)(v29 + 8 * v36 + 32);
          swift_retain(v38);
        }

        uint64_t v39 = sub_10003518C();
        uint64_t v41 = v40;
        swift_release(v38);
        v157._countAndFlagsBits = (uint64_t)v37;
        unint64_t v43 = v37[2];
        unint64_t v42 = v37[3];
        if (v43 >= v42 >> 1)
        {
          sub_10000CC84(v42 > 1, v43 + 1, 1);
          uint64_t v37 = (void *)v157._countAndFlagsBits;
        }

        ++v36;
        v37[2] = v43 + 1;
        uint64_t v44 = &v37[2 * v43];
        v44[4] = v39;
        v44[5] = v41;
      }

      while (v32 != v36);
      swift_bridgeObjectRelease(v29);
    }

    else
    {
      swift_bridgeObjectRelease(v29);
      uint64_t v37 = _swiftEmptyArrayStorage;
    }

    v157._countAndFlagsBits = (uint64_t)v37;
    uint64_t v45 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    uint64_t v46 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v47 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v45, v46);
    uint64_t v49 = v48;
    swift_bridgeObjectRelease(v37);
    Swift::Int v50 = sub_100026BE4();
    uint64_t v51 = sub_1000D189C(v50, v47, v49);
    uint64_t v53 = v52;
    swift_bridgeObjectRelease(v49);
    v157._countAndFlagsBits = v51;
    v157._uint64_t object = v53;
    swift_bridgeObjectRetain(v53);
    v54._countAndFlagsBits = 10LL;
    v54._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(v53);
    uint64_t v55 = v157._object;
    String.append(_:)(v157);
    swift_bridgeObjectRelease(v55);
    uint64_t v56 = v152;
LABEL_50:
    swift_release(v56);
    uint64_t v3 = v150;
    uint64_t v1 = v151;
    uint64_t v7 = v148;
    uint64_t v10 = v149;
    unint64_t v15 = v153;
    uint64_t object = v154;
    if (!v153) {
      goto LABEL_12;
    }
LABEL_6:
    unint64_t v19 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
  }

  if (*(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v152 = *(void *)(v29 + 32);
    swift_retain(v152);
    if (!v30) {
      goto LABEL_31;
    }
    goto LABEL_45;
  }

  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  if (object < 0) {
    uint64_t v139 = object;
  }
  else {
    uint64_t v139 = object & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(object);
  uint64_t v140 = _CocoaArrayWrapper.endIndex.getter(v139);
  unint64_t result = swift_bridgeObjectRelease(object);
  uint64_t v155 = v140;
  if (!v140) {
    goto LABEL_128;
  }
LABEL_111:
  if (v155 >= 1)
  {
    uint64_t v119 = 0LL;
    unint64_t v154 = object & 0xC000000000000001LL;
    uint64_t v120 = object;
    do
    {
      if (v154)
      {
        v121 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v119, object);
      }

      else
      {
        v121 = *(void **)(object + 8 * v119 + 32);
        swift_retain(v121);
      }

      ++v119;
      v157._countAndFlagsBits = 0LL;
      v157._uint64_t object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(25LL);
      uint64_t v122 = v157._object;
      uint64_t v156 = v121[3];
      uint64_t v123 = v156;
      uint64_t v124 = type metadata accessor for OSExtension(0LL);
      uint64_t v125 = sub_100012860( (unint64_t *)&qword_100157C70,  type metadata accessor for OSExtension,  (uint64_t)&unk_10011B528);
      swift_retain(v123);
      uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter(v124, v125);
      uint64_t v128 = v127;
      swift_release(v123);
      swift_bridgeObjectRelease(v122);
      v157._countAndFlagsBits = v126;
      v157._uint64_t object = v128;
      v129._countAndFlagsBits = 0xD000000000000014LL;
      v129._uint64_t object = (void *)0x8000000100121B90LL;
      String.append(_:)(v129);
      uint64_t v130 = (*(uint64_t (**)(void))(*v121 + 296LL))();
      unint64_t v132 = v131;
      uint64_t v133 = sub_100013B60(v130, v131);
      uint64_t v135 = v134;
      sub_10001226C(v130, v132);
      v136._countAndFlagsBits = v133;
      v136._uint64_t object = v135;
      String.append(_:)(v136);
      swift_bridgeObjectRelease(v135);
      v137._countAndFlagsBits = 10LL;
      v137._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v137);
      uint64_t v138 = v157._object;
      String.append(_:)(v157);
      swift_release(v121);
      swift_bridgeObjectRelease(v138);
      uint64_t object = v120;
    }

    while (v155 != v119);
    goto LABEL_128;
  }

  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v14);
    swift_release(v12);
    return 0LL;
  }

  sub_10002B758(a1 + 32, (uint64_t)v33);
  char v16 = v35;
  if (v35)
  {
    Swift::String v17 = v36;
    sub_100005110(v33, v35);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, unint64_t))(v17 + 32))(v16, v17);
    uint64_t v20 = v19;
    sub_100006034(v33);
    v33[0] = v32;
    v33[1] = v15;
    Swift::String v34 = 3;
    uint64_t v35 = v18;
    uint64_t v36 = v20;
    sub_1000125E0(v18, v20);
    uint64_t v21 = sub_100027D48(v33, v12);
    swift_bridgeObjectRelease(v12);
    sub_10001226C(v18, v20);
    swift_bridgeObjectRelease(v15);
    sub_10002193C(v18, v20);
    if ((v21 & 1) != 0) {
      return 1LL;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v15);
    sub_100012824((uint64_t)v33, &qword_100157FF0);
  }

  return 0LL;
}

  uint64_t v113 = *(void *)(v67 + 192);
  Swift::String v114 = *(void *)(v67 + 40);
  Swift::String v115 = *(void *)(v67 + 48);
  sub_100005110((void *)(v67 + 16), v114);
  sub_1001073DC(v114, v115);
  uint64_t v116 = sub_1000D5860(v113, v107, v432);
  Swift::String v118 = v117;
  sub_100006034(v432);
  if (!v118)
  {
    uint64_t v139 = (uint64_t)v417;
    swift_bridgeObjectRelease(v414);
    *(void *)&v414 = 0LL;
    uint64_t v55 = v420;
LABEL_82:
    LODWORD(v432[0]) = *sub_1000A4694();
    char v225 = v396;
    LODWORD(v428) = v396;
    __int128 v226 = v394;
    uint64_t v227 = dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v394);
    uint64_t v228 = v402;
    if ((v227 & 1) != 0
      || (LODWORD(v432[0]) = *sub_1000A46E4(),
          LODWORD(v428) = v225,
          (dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v226) & 1) != 0))
    {
      uint64_t v229 = (*(uint64_t (**)(void))(*v55 + 144LL))();
      uint64_t v231 = v230;
      uint64_t v232 = (*(uint64_t (**)(void))(*(void *)v67 + 216LL))();
      if (*(void *)(v232 + 16) && (v233 = sub_100006114(v229, v231), (v234 & 1) != 0))
      {
        v235 = *(void *)(*(void *)(v232 + 56) + 8 * v233);
        swift_bridgeObjectRetain(v235);
      }

      else
      {
        v235 = 0LL;
      }

      v236 = v139;
      swift_bridgeObjectRelease(v231);
      swift_bridgeObjectRelease(v232);
    }

    else
    {
      v235 = 0LL;
      v236 = v139;
    }

    v237 = v416;
    v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v415 + 6);
    v239 = v238(v228, 1LL, v416);
    v399 = v235;
    if (v239 == 1)
    {
      v394 = 0LL;
      v240 = 1;
    }

    else
    {
      v241 = *(void **)(v67 + 128);
      v242 = v400;
      sub_10001A148(v228, v400, (uint64_t *)&unk_10015BA30);
      if (v238(v242, 1LL, v237) == 1)
      {
        swift_bridgeObjectRetain(v241);
        unint64_t result = swift_bridgeObjectRelease(v414);
        __break(1u);
        return result;
      }

      v243 = swift_bridgeObjectRetain(v241);
      v244 = URL.path.getter(v243);
      v246 = v245;
      (*((void (**)(uint64_t, uint64_t))v415 + 1))(v242, v237);
      v394 = sub_100032674(v244, v246, v241);
      LOBYTE(v244) = v247;
      swift_bridgeObjectRelease(v241);
      swift_bridgeObjectRelease(v246);
      v240 = v244 & 1;
    }

    LODWORD(v393) = v240;
    sub_10001A148((uint64_t)&v438, (uint64_t)&v428, &qword_100157FF0);
    sub_10001A148((uint64_t)v436, (uint64_t)&v425, &qword_1001588F0);
    v248 = v408;
    sub_10001A148(v412, v408, (uint64_t *)&unk_10015BA30);
    v249 = v409;
    sub_10001A148(v236, (uint64_t)v409, &qword_1001588F8);
    v250 = v442;
    v251 = *((void *)v442 + 19);
    v412 = *((void *)v442 + 20);
    v252 = *((void *)v442 + 22);
    v400 = *((void *)v442 + 21);
    v402 = v252;
    v397 = *((void *)v442 + 23);
    v253 = *((void *)v442 + 28);
    v254 = *(_OWORD *)(v442 + 472);
    v432[25] = *(_OWORD *)(v442 + 456);
    v432[26] = v254;
    *(void *)&v432[27] = *((void *)v442 + 61);
    v255 = *(_OWORD *)(v442 + 408);
    v432[21] = *(_OWORD *)(v442 + 392);
    v432[22] = v255;
    v256 = *(_OWORD *)(v442 + 440);
    v432[23] = *(_OWORD *)(v442 + 424);
    v432[24] = v256;
    v257 = *(_OWORD *)(v442 + 344);
    v432[17] = *(_OWORD *)(v442 + 328);
    v432[18] = v257;
    v258 = *(_OWORD *)(v442 + 376);
    v432[19] = *(_OWORD *)(v442 + 360);
    v432[20] = v258;
    v259 = *(_OWORD *)(v442 + 280);
    v432[13] = *(_OWORD *)(v442 + 264);
    v432[14] = v259;
    v260 = *(_OWORD *)(v442 + 312);
    v432[15] = *(_OWORD *)(v442 + 296);
    v432[16] = v260;
    v261 = *(_OWORD *)(v442 + 72);
    v432[0] = *(_OWORD *)(v442 + 56);
    v432[1] = v261;
    v262 = *(_OWORD *)(v442 + 104);
    v432[2] = *(_OWORD *)(v442 + 88);
    v432[3] = v262;
    v263 = *(_OWORD *)(v442 + 136);
    v432[4] = *(_OWORD *)(v442 + 120);
    v432[5] = v263;
    v264 = *((_OWORD *)v442 + 13);
    *(_OWORD *)((char *)&v432[8] + 8) = *((_OWORD *)v442 + 12);
    v265 = *(_OWORD *)(v442 + 248);
    v266 = v442[644];
    *(void *)&v432[6] = v251;
    *((void *)&v432[6] + 1) = v412;
    *(void *)&v432[7] = v400;
    *((void *)&v432[7] + 1) = v252;
    *(_OWORD *)((char *)&v432[9] + 8) = v264;
    *(void *)&v432[8] = v397;
    *((void *)&v432[10] + 1) = v253;
    v432[11] = *(_OWORD *)(v442 + 232);
    v432[12] = v265;
    v267 = *((_OWORD *)v442 + 32);
    *(_OWORD *)((char *)&v432[27] + 8) = *((_OWORD *)v442 + 31);
    *(_OWORD *)((char *)&v432[28] + 8) = v267;
    v268 = *((_OWORD *)v442 + 34);
    *(_OWORD *)((char *)&v432[29] + 8) = *((_OWORD *)v442 + 33);
    *(_OWORD *)((char *)&v432[30] + 8) = v268;
    v269 = *((_OWORD *)v442 + 36);
    *(_OWORD *)((char *)&v432[31] + 8) = *((_OWORD *)v442 + 35);
    *(_OWORD *)((char *)&v432[32] + 8) = v269;
    v270 = *((_OWORD *)v442 + 38);
    *(_OWORD *)((char *)&v432[33] + 8) = *((_OWORD *)v442 + 37);
    *(_OWORD *)((char *)&v432[34] + 8) = v270;
    *(_OWORD *)((char *)&v432[35] + 8) = *((_OWORD *)v442 + 39);
    DWORD2(v432[36]) = v396;
    BYTE12(v432[36]) = v266;
    memcpy(v441, v432, 0x24DuLL);
    sub_10001A148((uint64_t)&v428, (uint64_t)v424, &qword_100157FF0);
    sub_10001A148((uint64_t)&v425, (uint64_t)v423, &qword_1001588F0);
    v271 = (uint64_t)v249;
    v272 = (uint64_t)v403;
    sub_10001A148((uint64_t)v249, (uint64_t)v403, &qword_1001588F8);
    swift_retain_n(v55, 2LL);
    sub_100037850(v432);
    swift_retain(v55);
    sub_100037850(v432);
    v396 = sub_1000371F0((uint64_t)v55, 0LL, 1LL, v399, v272, (uint64_t)v441);
    v399 = v273;
    v275 = v274 & 0xFF01;
    v276 = v248;
    v277 = (uint64_t)v418;
    sub_10001A148(v276, (uint64_t)v418, (uint64_t *)&unk_10015BA30);
    sub_10001A148(v271, v272, &qword_1001588F8);
    v278 = type metadata accessor for RealizedInfo(0LL);
    v279 = swift_allocObject(v278, *(unsigned int *)(v278 + 48), *(unsigned __int16 *)(v278 + 52));
    *(void *)(v279 + 16) = 0LL;
    *(_OWORD *)(v279 + 96) = 0u;
    *(_OWORD *)(v279 + 112) = 0u;
    *(_OWORD *)(v279 + 80) = 0u;
    *(void *)(v279 + 128) = 0LL;
    *(void *)(v279 + 136) = 1LL;
    *(void *)(v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
    *(void *)(v279 + 24) = v420;
    sub_1000263D8((uint64_t)v424, v279 + 32, &qword_100157FF0);
    *(_BYTE *)(v279 + 72) = v392;
    swift_beginAccess(v279 + 80, v422, 33LL, 0LL);
    sub_1000395F4((uint64_t)v423, v279 + 80, &qword_1001588F0);
    swift_endAccess(v422);
    swift_beginAccess(v279 + 120, v422, 1LL, 0LL);
    v280 = *(void *)(v279 + 120);
    v281 = *(void *)(v279 + 128);
    v282 = *(void *)(v279 + 136);
    *(void *)(v279 + 120) = v396;
    *(void *)(v279 + 128) = v275;
    v283 = (uint64_t)v420;
    *(void *)(v279 + 136) = v399;
    sub_1000373A8(v280, v281, v282);
    sub_1000263D8(v277, v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA30);
    v284 = v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
    *(void *)v284 = v394;
    *(_BYTE *)(v284 + 8) = v393;
    sub_1000263D8(v272, v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_1001588F8);
    *(void *)(v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = v414;
    swift_beginAccess(v279 + 16, &v421, 1LL, 0LL);
    *(void *)(v279 + 16) = 0LL;
    v285 = type metadata accessor for DriverExtension(0LL);
    v286 = swift_dynamicCastClass(v283, v285);
    if (v286) {
      v287 = v397;
    }
    else {
      v287 = v400;
    }
    if (v286) {
      v288 = v402;
    }
    else {
      v288 = v412;
    }
    swift_bridgeObjectRetain(v287);
    swift_retain(v279);
    v289 = sub_10002EC14(v288, v287, 0);
    swift_bridgeObjectRelease(v287);
    v290 = v408;
    sub_10001A148(v408, v277, (uint64_t *)&unk_10015BA30);
    v291 = sub_100037BF4(v283, v289, v277, v401 & 1, v441);
    sub_10003916C(v432);
    swift_release(v279);
    swift_release(v283);
    sub_100012824((uint64_t)v409, &qword_1001588F8);
    sub_100012824(v290, (uint64_t *)&unk_10015BA30);
    sub_100012824((uint64_t)&v425, &qword_1001588F0);
    sub_100012824((uint64_t)&v428, &qword_100157FF0);
    v409 = (uint64_t *)(v279 + 16);
    *(void *)(v279 + 16) = v291;
    v424[0] = v279;
    swift_retain(v279);
    v292 = sub_100026E70();
    v293 = (uint64_t)v292;
    v294 = (char *)v292[2];
    if (v294)
    {
      *(void *)&v414 = v279;
      v403 = v292;
      v295 = (unsigned __int8 *)(v292 + 4);
      v296 = *(uint64_t (**)(void))(*v250 + 168LL);
      v408 = xmmword_10010F440;
      v418 = v296;
      while (1)
      {
        v298 = *v295++;
        v297 = v298;
        v299 = v296();
        if (*(void *)(v299 + 16) && (v300 = sub_1000357A4(v297), (v301 & 1) != 0))
        {
          v302 = *(void *)(v299 + 56) + 24 * v300;
          v303 = *(void *)(v302 + 8);
          v304 = *(_BYTE *)v302;
          swift_bridgeObjectRetain(v303);
          swift_bridgeObjectRelease(v299);
          v305 = v304;
          v296 = v418;
          v306 = sub_1000277DC(v414, v305, v303);
          v250 = v442;
          v307 = swift_bridgeObjectRelease(v303);
          if ((v306 & 1) != 0)
          {
            LODWORD(v412) = static os_log_type_t.info.getter(v307);
            v308 = sub_100005FB4((uint64_t *)&unk_1001596B0);
            v309 = swift_allocObject(v308, 112LL, 7LL);
            *(_OWORD *)(v309 + 16) = v408;
            v310 = (*(uint64_t (**)(void))(*v420 + 200LL))();
            v312 = v311;
            *(void *)(v309 + 56) = &type metadata for String;
            v313 = sub_100026B64();
            *(void *)(v309 + 64) = v313;
            *(void *)(v309 + 32) = v310;
            *(void *)(v309 + 40) = v312;
            v314 = sub_100026E7C(v297);
            *(void *)(v309 + 96) = &type metadata for String;
            *(void *)(v309 + 104) = v313;
            *(void *)(v309 + 72) = v314;
            *(void *)(v309 + 80) = v315;
            v316 = sub_100026BA8();
            v317 = (void *)static OS_os_log.default.getter(v316);
            os_log(_:dso:log:_:_:)( v412,  &_mh_execute_header,  v317,  "%{public}s matches %{public}s.",  30LL,  2LL,  v309);
            swift_bridgeObjectRelease(v309);

            if (v297)
            {
              if (v297 == 1)
              {
                v250 = v442;
                v296 = v418;
                if (qword_10015E478 != -1) {
                  swift_once(&qword_10015E478, sub_10002C338);
                }
                v318 = qword_1001752B0;
              }

              else
              {
                v250 = v442;
                v296 = v418;
                if (qword_10015E480 != -1) {
                  swift_once(&qword_10015E480, sub_10002C388);
                }
                v318 = qword_1001752B8;
              }

              v319 = *v409;
              if ((v318 & ~*v409) == 0) {
                goto LABEL_103;
              }
            }

            else
            {
              if (qword_10015E470 != -1) {
                swift_once(&qword_10015E470, sub_10002C2E8);
              }
              v318 = qword_1001752A8;
              v319 = *v409;
              v250 = v442;
              v296 = v418;
              if ((qword_1001752A8 & ~*v409) == 0) {
                goto LABEL_103;
              }
            }

            *v409 = v319 | v318;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v299);
        }

          sub_10000610C(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

    char v16 = (v30 - 1) & v30;
    uint64_t v23 = __clz(__rbit64(v30)) + (v15 << 6);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

    if (v8 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_137;
    }
    if (v8 - v12 >= v98)
    {
LABEL_47:
      uint64_t v23 = v2;
      goto LABEL_48;
    }

    if (__OFADD__(v12, v98)) {
      goto LABEL_141;
    }
    if (v12 + v98 < v4) {
      uint64_t v4 = v12 + v98;
    }
    if (v4 < v12) {
      break;
    }
    uint64_t v23 = v2;
    if (v8 != v4)
    {
      unint64_t v24 = v12;
      uint64_t v102 = v10;
      uint64_t v25 = sub_1000B485C();
      uint64_t v26 = (char *)(v9 + v8);
      do
      {
        uint64_t v27 = *(_BYTE *)(v9 + v8);
        uint64_t v28 = v24;
        uint64_t v29 = v26;
        do
        {
          unint64_t v30 = *(v29 - 1);
          Swift::String v109 = v27;
          uint64_t v108 = v30;
          unint64_t result = dispatch thunk of static Comparable.< infix(_:_:)( &v109,  &v108,  &type metadata for CollectionKind,  v25);
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_143;
          }
          uint64_t v27 = *v29;
          *uint64_t v29 = *(v29 - 1);
          *(v29 - 1) = v27;
          ++v28;
          --v29;
        }

        while (v8 != v28);
        ++v8;
        ++v26;
      }

      while (v8 != v4);
      uint64_t v8 = v4;
      uint64_t v10 = v102;
      uint64_t v12 = v24;
      if (v4 < v24) {
        goto LABEL_132;
      }
      goto LABEL_49;
    }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

          sub_10000610C(a1);
          return;
        }
      }
    }
  }

uint64_t sub_10000C6EC()
{
  swift_release(*(void *)(v0 + 112));
  swift_release(*(void *)(v0 + 120));
  swift_release(*(void *)(v0 + 128));
  swift_release(*(void *)(v0 + 136));
  swift_release(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  return v0;
}

uint64_t sub_10000C758()
{
  return swift_deallocClassInstance(v0, 160LL, 7LL);
}

uint64_t sub_10000C778()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t sub_10000C784()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t sub_10000C790()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
}

void (*sub_10000C79C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 344LL))();
  return sub_10000C7E8;
}

void sub_10000C7E8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t sub_10000C814()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416LL))();
}

uint64_t sub_10000C820()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424LL))();
}

void *sub_10000C82C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4((uint64_t *)&unk_100159E30);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      __int128 v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000124F0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000C938(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_10015BB10);
  uint64_t v11 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000122D0(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

void *sub_10000CB40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100005FB4(&qword_100157E90);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      __int128 v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000123E8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000CC4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CCA0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10000CC68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CE80(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10000CC84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CFE8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10000CCA0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_100157E80);
  uint64_t v11 = *(void *)(type metadata accessor for ActiveDriverInfo(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v19 = *(void *)(active - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, active);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  if (v9 < 0) {
    uint64_t v28 = v9;
  }
  else {
    uint64_t v28 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v9);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_41;
  }
LABEL_8:
  uint64_t v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v9;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000LL) == 0 && (v9 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1LL;
  }

  uint64_t v14 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain(v9);
  unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v9);
  size_t v16 = *v4;
  *uint64_t v4 = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  Swift::String v17 = v13 + 32;
  uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
  uint64_t v19 = v6(0LL);
  uint64_t result = (void *)swift_arrayDestroy(v18, v7, v19);
  if (!v8) {
    return (void *)specialized Array._endMutation()(result);
  }
  unint64_t v21 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    unint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v23 = v22 - v3;
    if (!__OFSUB__(v22, v3)) {
      goto LABEL_21;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  if (v21 < 0) {
    unint64_t v30 = *v4;
  }
  else {
    unint64_t v30 = v21 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v4);
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  uint64_t result = (void *)swift_bridgeObjectRelease(v21);
  uint64_t v23 = v31 - v3;
  if (__OFSUB__(v31, v3)) {
    goto LABEL_51;
  }
LABEL_21:
  unint64_t v24 = (char *)(v17 + 8 * v3);
  if (v5 != v3 || v18 >= &v24[8 * v23]) {
    uint64_t result = memmove(v18, v24, 8 * v23);
  }
  uint64_t v3 = *v4;
  if ((unint64_t)*v4 >> 62)
  {
LABEL_52:
    if (v3 < 0) {
      uint64_t v32 = v3;
    }
    else {
      uint64_t v32 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    Swift::String v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    uint64_t result = (void *)swift_bridgeObjectRelease(v3);
    uint64_t v26 = v33 + v8;
    if (!__OFADD__(v33, v8)) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  unint64_t v25 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v26 = v25 + v8;
  if (!__OFADD__(v25, v8))
  {
LABEL_26:
    *(void *)((*v4 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v26;
    return (void *)specialized Array._endMutation()(result);
  }

      __break(1u);
      goto LABEL_37;
    }

uint64_t sub_10000CE80(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100157EC8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10000CFE8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4((uint64_t *)&unk_100159E30);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10000D150(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (uint64_t (*)(char *, uint64_t))isStackAllocationSafe;
  char v7 = *(_BYTE *)(a3 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    uint64_t v12 = sub_10000DCAC((unint64_t *)((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v10, a3, v6);
    if (v3) {
      swift_willThrow(v12);
    }
    else {
      return v12;
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v13, v11);
    a2 = sub_10000DCAC((unint64_t *)v13, v10, a3, v6);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return a2;
}

uint64_t sub_10000D2C0(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10000D324(a1, a2, v5);
}

uint64_t sub_10000D324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

uint64_t sub_10000DCAC( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v37 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v36 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v34 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v35 - 8);
  uint64_t result = __chkstk_darwin(v35);
  Swift::String v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = 0LL;
  uint64_t v38 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v30 = 0LL;
  uint64_t v31 = a3 + 64;
  uint64_t v12 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = (uint64_t)v34;
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    int64_t v39 = v10;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_17:
    uint64_t v22 = v35;
    uint64_t v23 = v33;
    unint64_t v24 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v33, v38[6] + *(void *)(v7 + 72) * v17, v35);
    sub_100012734(v24[7] + *(void *)(v36 + 72) * v17, v15, type metadata accessor for DriverBinEntry);
    uint64_t v25 = v40;
    char v26 = v37(v23, v15);
    uint64_t v40 = v25;
    if (v25)
    {
      sub_1000127BC(v15, type metadata accessor for DriverBinEntry);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v23, v22);
    }

    char v27 = v26;
    sub_1000127BC(v15, type metadata accessor for DriverBinEntry);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v23, v22);
    int64_t v10 = v39;
    if ((v27 & 1) != 0)
    {
      *(unint64_t *)((char *)v29 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      BOOL v18 = __OFADD__(v30++, 1LL);
      if (v18) {
        goto LABEL_31;
      }
    }
  }

  BOOL v18 = __OFADD__(v10, 1LL);
  int64_t v19 = v10 + 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v19 >= v32) {
    return sub_10000DFA0(v29, v28, v30, v38);
  }
  unint64_t v20 = *(void *)(v31 + 8 * v19);
  if (v20)
  {
LABEL_16:
    unint64_t v14 = (v20 - 1) & v20;
    int64_t v39 = v19;
    unint64_t v17 = __clz(__rbit64(v20)) + (v19 << 6);
    goto LABEL_17;
  }

  int64_t v21 = v19 + 1;
  if (v19 + 1 >= v32) {
    return sub_10000DFA0(v29, v28, v30, v38);
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v19 + 2;
  if (v19 + 2 >= v32) {
    return sub_10000DFA0(v29, v28, v30, v38);
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v19 + 3;
  if (v19 + 3 >= v32) {
    return sub_10000DFA0(v29, v28, v30, v38);
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
LABEL_15:
    int64_t v19 = v21;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v19 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v19 >= v32) {
      return sub_10000DFA0(v29, v28, v30, v38);
    }
    unint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v21;
    if (v20) {
      goto LABEL_16;
    }
  }

uint64_t sub_10000DFA0(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v56 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v51 = (uint64_t)&v45 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v50 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v55 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v49 = (char *)&v45 - v15;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }

  sub_100005FB4(&qword_100157EE8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v17 = result;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  if (a2 < 1) {
    unint64_t v18 = 0LL;
  }
  else {
    unint64_t v18 = *a1;
  }
  uint64_t v19 = 0LL;
  uint64_t v20 = result + 64;
  uint64_t v47 = a4;
  uint64_t v48 = result;
  int64_t v21 = v49;
  while (1)
  {
    if (v18)
    {
      uint64_t v53 = (v18 - 1) & v18;
      uint64_t v54 = v19;
      unint64_t v22 = __clz(__rbit64(v18)) | (v19 << 6);
    }

    else
    {
      uint64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_40;
      }
      if (v23 >= v46) {
        return v17;
      }
      unint64_t v24 = v45[v23];
      uint64_t v25 = v19 + 1;
      if (!v24)
      {
        uint64_t v25 = v19 + 2;
        if (v19 + 2 >= v46) {
          return v17;
        }
        unint64_t v24 = v45[v25];
        if (!v24)
        {
          uint64_t v25 = v19 + 3;
          if (v19 + 3 >= v46) {
            return v17;
          }
          unint64_t v24 = v45[v25];
          if (!v24)
          {
            uint64_t v26 = v19 + 4;
            if (v19 + 4 >= v46) {
              return v17;
            }
            unint64_t v24 = v45[v26];
            if (!v24)
            {
              while (1)
              {
                uint64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_41;
                }
                if (v25 >= v46) {
                  return v17;
                }
                unint64_t v24 = v45[v25];
                ++v26;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v25 = v19 + 4;
          }
        }
      }

LABEL_24:
      uint64_t v53 = (v24 - 1) & v24;
      uint64_t v54 = v25;
      unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }

    uint64_t v27 = v50;
    uint64_t v28 = *(void *)(v50 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v21, a4[6] + v28 * v22, v12);
    uint64_t v29 = a4[7];
    uint64_t v30 = *(void *)(v52 + 72);
    uint64_t v31 = v29 + v30 * v22;
    uint64_t v32 = v51;
    sub_100012734(v31, v51, type metadata accessor for DriverBinEntry);
    Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v33(v55, v21, v12);
    sub_100012778(v32, v56, type metadata accessor for DriverBinEntry);
    uint64_t v17 = v48;
    uint64_t v34 = *(void *)(v48 + 40);
    uint64_t v35 = sub_100012860( &qword_100157EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v12, v35);
    uint64_t v36 = -1LL << *(_BYTE *)(v17 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1LL << v37) & ~*(void *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v39 = __clz(__rbit64((-1LL << v37) & ~*(void *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v42 = v38 == v41;
        if (v38 == v41) {
          unint64_t v38 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v20 + 8 * v38);
      }

      while (v43 == -1);
      unint64_t v39 = __clz(__rbit64(~v43)) + (v38 << 6);
    }

    *(void *)(v20 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v39;
    v33((char *)(*(void *)(v17 + 48) + v39 * v28), v55, v12);
    uint64_t result = sub_100012778(v56, *(void *)(v17 + 56) + v39 * v30, type metadata accessor for DriverBinEntry);
    ++*(void *)(v17 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v47;
    unint64_t v18 = v53;
    uint64_t v19 = v54;
    if (!a3) {
      return v17;
    }
  }

        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100017790(v25, v38);
      }

      else
      {
        sub_100006054((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      unint64_t *v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100017790(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v10 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_25:
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v15);
    int64_t v21 = *v19;
    uint64_t v20 = v19[1];
    sub_100006054(*(void *)(a2 + 56) + 32 * v15, (uint64_t)v58);
    *(void *)&uint64_t v57 = v21;
    *((void *)&v57 + 1) = v20;
    uint64_t v55 = v57;
    v56[0] = v58[0];
    v56[1] = v58[1];
    unint64_t v22 = v57;
    uint64_t v52 = v21;
    uint64_t v53 = v20;
    sub_100006054((uint64_t)v56, (uint64_t)v11);
    uint64_t v23 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, void, void, void))(*(void *)a3 + 304LL);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(*((void *)&v22 + 1));
    v23(&v50, a4, a5, v22, *((void *)&v22 + 1), v44);
    if (v51)
    {
      unint64_t v59 = v10;
      unint64_t v24 = v12;
      uint64_t v25 = v11;
      sub_100017790(&v50, v49);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      uint64_t v28 = sub_100006114(v22, *((uint64_t *)&v22 + 1));
      uint64_t v29 = a1[2];
      uint64_t v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      uint64_t v32 = v27;
      if (a1[3] < v31)
      {
        sub_100016D94(v31, isUniquelyReferenced_nonNull_native);
        Swift::String v33 = sub_100006114(v22, *((uint64_t *)&v22 + 1));
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_48;
        }
        uint64_t v28 = v33;
        if ((v32 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_4:
        uint64_t v13 = (void *)(a1[7] + 32 * v28);
        sub_100006034(v13);
        sub_100017790(v49, v13);
LABEL_5:
        swift_bridgeObjectRelease(*((void *)&v22 + 1));
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v11 = v25;
        uint64_t v12 = v24;
        uint64_t v10 = v59;
        goto LABEL_6;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v27 & 1) != 0) {
          goto LABEL_4;
        }
      }

      else
      {
        sub_100017228();
        if ((v32 & 1) != 0) {
          goto LABEL_4;
        }
      }

      uint64_t v14 = (v21 - 1) & v21;
      uint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }

    uint64_t v23 = a4;
    unint64_t v24 = *(void *)(a4 + 48);
    uint64_t v25 = *(void *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    uint64_t v26 = *(void *)(v12 + 40);
    uint64_t v27 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    uint64_t v28 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v17 = v40;
    }

    else
    {
      uint64_t v32 = 0;
      Swift::String v33 = (unint64_t)(63 - v28) >> 6;
      uint64_t v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v34 = v30 == v33;
        if (v30 == v33) {
          uint64_t v30 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v30);
      }

      while (v35 == -1);
      uint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }

    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))( *(void *)(v12 + 48) + v31 * v25,  v11,  v8);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v23;
    if (!a3) {
      goto LABEL_37;
    }
  }

      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v37 = v16;
      uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }

    unint64_t v18 = 8 * v13;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    int64_t v21 = *(void *)(v8 + 40);
    unint64_t v22 = type metadata accessor for OSExtension(0LL);
    uint64_t v23 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    swift_retain(v19);
    swift_retain(v20);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v22, v23);
    unint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v27 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v30 = v26 == v29;
        if (v26 == v29) {
          uint64_t v26 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
      }

      while (v31 == -1);
      uint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }

    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
    uint64_t v32 = 8 * v27;
    *(void *)(*(void *)(v8 + 48) + v32) = v19;
    *(void *)(*(void *)(v8 + 56) + v32) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    uint64_t v4 = v36;
    uint64_t v10 = v37;
    if (!v5) {
      return v8;
    }
  }

      BOOL v42 = (v13 - 1) & v13;
      uint64_t v43 = v14;
      uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }

    unint64_t v16 = *(void *)(*(void *)(v4 + 48) + 8 * v11);
    uint64_t v17 = *(void *)(v4 + 56) + 80 * v11;
    uint64_t v19 = *(void *)v17;
    unint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    int64_t v21 = *(void *)(v17 + 32);
    unint64_t v22 = *(void *)(v17 + 40);
    unint64_t v24 = *(void *)(v17 + 48);
    uint64_t v23 = *(void *)(v17 + 56);
    uint64_t v25 = *(void *)(v17 + 64);
    uint64_t v26 = *(_BYTE *)(v17 + 72);
    uint64_t v46 = *(void *)(v17 + 24);
    uint64_t v47 = *(void *)(v7 + 40);
    uint64_t v44 = v16;
    swift_retain(v16);
    uint64_t v45 = v21;
    sub_1000516E4(v19, v18, v20, v46, v21, v22, v24, v23, v25, v26);
    uint64_t v27 = type metadata accessor for OSExtension(0LL);
    uint64_t v28 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v47, v27, v28);
    uint64_t v7 = v41;
    uint64_t v29 = -1LL << *(_BYTE *)(v41 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      uint64_t v32 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      Swift::String v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v35 = v31 == v34;
        if (v31 == v34) {
          uint64_t v31 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v10 + 8 * v31);
      }

      while (v36 == -1);
      uint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }

    *(void *)(v10 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
    *(void *)(*(void *)(v41 + 48) + 8 * v32) = v44;
    unint64_t v37 = *(void *)(v41 + 56) + 80 * v32;
    *(void *)unint64_t v37 = v19;
    *(void *)(v37 + 8) = v18;
    *(void *)(v37 + 16) = v20;
    *(void *)(v37 + 24) = v46;
    *(void *)(v37 + 32) = v45;
    *(void *)(v37 + 40) = v22;
    *(void *)(v37 + 48) = v24;
    *(void *)(v37 + 56) = v23;
    *(void *)(v37 + 64) = v25;
    *(_BYTE *)(v37 + 72) = v26;
    ++*(void *)(v41 + 16);
    uint64_t v5 = v48 - 1;
    if (__OFSUB__(v48, 1LL)) {
      break;
    }
    uint64_t v4 = v40;
    uint64_t v8 = v42;
    uint64_t v9 = v43;
    if (v48 == 1) {
      return v7;
    }
  }

      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v36 = v17;
      uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }

    uint64_t v19 = *(void *)(v4 + 56);
    uint64_t v20 = v4;
    int64_t v21 = *(_BYTE *)(*(void *)(v4 + 48) + v14);
    unint64_t v22 = *(void *)(v19 + 8 * v14);
    uint64_t v23 = *(void *)(v9 + 40);
    unint64_t v24 = sub_10004FA4C();
    swift_bridgeObjectRetain(v22);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, &type metadata for CollectionKind, v24);
    uint64_t v25 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v28 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v31 = v27 == v30;
        if (v27 == v30) {
          uint64_t v27 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v27);
      }

      while (v32 == -1);
      uint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }

    *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
    *(_BYTE *)(*(void *)(v9 + 48) + v28) = v21;
    *(void *)(*(void *)(v9 + 56) + 8 * v28) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    uint64_t v4 = v20;
    uint64_t v11 = v36;
    if (!v5) {
      return v9;
    }
  }

      uint64_t v44 = (v19 - 1) & v19;
      uint64_t v45 = v20;
      uint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }

    unint64_t v22 = v42;
    uint64_t v23 = v43;
    unint64_t v24 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    uint64_t v27 = *(void *)(v12 + 40);
    uint64_t v28 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    swift_bridgeObjectRetain(v25);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v16, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      uint64_t v32 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      Swift::String v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v35 = v31 == v34;
        if (v31 == v34) {
          uint64_t v31 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v31);
      }

      while (v36 == -1);
      uint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }

    *(void *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v32;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)( *(void *)(v12 + 48) + v32 * v24,  v46,  v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v32) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v41;
    uint64_t v13 = v44;
    uint64_t v14 = v45;
    if (!a3) {
      return v12;
    }
  }

      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    int64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(void *)(v9 + 40));
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v34, v20, v19);
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }

      while (v29 == -1);
      uint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }

    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }

      uint64_t v9 = (v15 - 1) & v15;
      uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    uint64_t v20 = *(_BYTE *)(*(void *)(v4 + 56) + v13);
    Hasher.init(_seed:)(v33, *(void *)(v8 + 40));
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v33, v19, v18);
    uint64_t result = Hasher._finalize()();
    int64_t v21 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          uint64_t v23 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }

      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    uint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    *uint64_t v29 = v19;
    v29[1] = v18;
    *(_BYTE *)(*(void *)(v8 + 56) + v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }

        uint64_t v13 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      uint64_t v23 = 8 * v19;
      unint64_t v24 = *(void *)(*(void *)(v5 + 48) + v23);
      uint64_t v25 = *(void *)(*(void *)(v5 + 56) + v23);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v24);
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v15 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v8 + 48) + v17) = v24;
      *(void *)(*(void *)(v8 + 56) + v17) = v25;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  *uint64_t v3 = v8;
  return result;
}

    __break(1u);
    goto LABEL_25;
  }

  sub_10007C49C(v26, v62 & 1);
  uint64_t v28 = sub_100054A3C((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    uint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v31 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v31);
    uint64_t v69 = v31;
    swift_errorRetain(v31);
    uint64_t v32 = sub_100005FB4(&qword_10015AB20);
    if ((swift_dynamicCast(v32, &v69, v32, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      Swift::String v33 = v61;
      swift_bridgeObjectRelease(v61);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v65);
      swift_bridgeObjectRelease(v33);
      return swift_errorRelease(v69);
    }

    goto LABEL_27;
  }

    uint64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100005158(v26, (uint64_t)v40);
    }

    else
    {
      sub_100005F70((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        Swift::String v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    unint64_t *v16 = v25;
    v16[1] = v24;
    uint64_t result = sub_100005158(v40, *(void *)(v8 + 56) + 40 * v15);
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    __break(1u);
    goto LABEL_25;
  }

  sub_1000AF5B0(v27, v17 & 1);
  uint64_t v29 = sub_1000AE32C((uint64_t)v10);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    uint64_t v31 = v63;
    if ((v28 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    Swift::String v33 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v33);
    uint64_t v69 = v33;
    swift_errorRetain(v33);
    uint64_t v34 = sub_100005FB4(&qword_10015AB20);
    if ((swift_dynamicCast(v34, &v69, v34, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v21);
      uint64_t v35 = v62;
      swift_bridgeObjectRelease(v62);
      sub_100012824((uint64_t)v10, (uint64_t *)&unk_10015BA30);
      swift_bridgeObjectRelease(v35);
      return swift_errorRelease(v69);
    }

    goto LABEL_27;
  }

        uint64_t v13 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      unint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0) {
        sub_100017790(v23, v33);
      }
      else {
        sub_100006054((uint64_t)v23, (uint64_t)v33);
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v22);
      unint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v8 + 48) + 8 * v16) = v22;
      uint64_t result = (uint64_t)sub_100017790(v33, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_44:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    uint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = (__int128 *)(*(void *)(v5 + 56) + 48 * v21);
    if ((v42 & 1) != 0)
    {
      uint64_t v30 = *v29;
      uint64_t v31 = v29[2];
      uint64_t v45 = v29[1];
      uint64_t v46 = v31;
      uint64_t v44 = v30;
    }

    else
    {
      sub_10001A148((uint64_t)v29, (uint64_t)&v44, &qword_10015BE10);
      swift_bridgeObjectRetain(v27);
    }

    Hasher.init(_seed:)(v43, *(void *)(v8 + 40));
    String.hash(into:)(v43, v28, v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v8 + 32);
    Swift::String v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        unint64_t v38 = *(void *)(v12 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    unint64_t *v16 = v28;
    v16[1] = v27;
    uint64_t v17 = (_OWORD *)(*(void *)(v8 + 56) + 48 * v15);
    unint64_t v18 = v44;
    uint64_t v19 = v46;
    v17[1] = v45;
    v17[2] = v19;
    char *v17 = v18;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  unint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

      uint64_t v30 = 0LL;
      LOBYTE(v24) = 1;
      uint64_t v31 = 255;
      goto LABEL_25;
    }

LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  uint64_t v28 = *v36;
  *(void *)(*v36 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t v29 = *(void *)(v28 + 48) + 72 * a2;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v5;
  uint64_t v30 = *(_OWORD *)(v5 + 16);
  uint64_t v31 = *(_OWORD *)(v5 + 32);
  uint64_t v32 = *(_OWORD *)(v5 + 48);
  *(_BYTE *)(v29 + 64) = *(_BYTE *)(v5 + 64);
  *(_OWORD *)(v29 + 32) = v31;
  *(_OWORD *)(v29 + 48) = v32;
  *(_OWORD *)(v29 + 16) = v30;
  Swift::String v33 = *(void *)(v28 + 16);
  uint64_t v34 = __OFADD__(v33, 1LL);
  uint64_t v35 = v33 + 1;
  if (v34)
  {
    __break(1u);
    JUMPOUT(0x100065C04LL);
  }

  *(void *)(v28 + 16) = v35;
  return result;
}

  if (v6 >= v10) {
    goto LABEL_40;
  }
  return 1LL;
}

      if ((unint64_t)v6 > v33)
      {
        v25 -= 16;
        if (v14 > v15) {
          continue;
        }
      }

      goto LABEL_43;
    }
  }

  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &a4[16 * v10];
  uint64_t v15 = a4;
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      unint64_t v16 = *(void *)v6;
      uint64_t v17 = *((void *)v6 + 1);
      unint64_t v18 = v6;
      uint64_t v19 = *(void *)v15;
      uint64_t v20 = *((void *)v15 + 1);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v20);
      int64_t v21 = String.count.getter(v16, v17);
      unint64_t v22 = String.count.getter(v19, v20);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      if (v22 >= v21) {
        break;
      }
      uint64_t v23 = v18;
      uint64_t v6 = v18 + 16;
      if (v7 != v18) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    uint64_t v23 = v15;
    unint64_t v24 = v7 == v15;
    v15 += 16;
    uint64_t v6 = v18;
    if (v24) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v23;
    goto LABEL_16;
  }

uint64_t sub_10000E390(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100012860(&qword_100157E70, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  uint64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      unint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10000F658((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10000E5EC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
  if (((*(void *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease(v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  uint64_t __s1 = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  sub_1000125E0(a2, a3);
  sub_10000F85C(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *v11;
  *uint64_t v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10000F010(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100157E88);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  unint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  unint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        if (!v21) {
          break;
        }
      }
    }

LABEL_35:
  swift_release(v7);
  uint64_t v2 = v37;
  uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v7);
  *uint64_t v2 = v9;
  return result;
}

  if (a1 < 0) {
    int64_t v20 = a1;
  }
  else {
    int64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(a1);
  uint64_t v7 = (unint64_t)a2 >> 62;
LABEL_3:
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    return 0;
  }
LABEL_4:
  if (!v6) {
    return 1;
  }
  uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
  if (a1 < 0) {
    uint64_t v8 = a1;
  }
  if (!v5) {
    uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8LL) + 32;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8LL) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if (v7) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0) {
    goto LABEL_46;
  }
  uint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t result = swift_retain(v11);
    unint64_t v13 = a2 & 0xC000000000000001LL;
    if ((a2 & 0xC000000000000001LL) == 0) {
      goto LABEL_17;
    }
LABEL_48:
    uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
LABEL_19:
    type metadata accessor for RealizedInfo(0LL);
    uint64_t v14 = sub_100036CF8(v11, v5);
    swift_release(v11);
    swift_release(v5);
    if (v14)
    {
      uint64_t v15 = v6 - 1;
      if (v6 == 1) {
        return 1;
      }
      unint64_t v17 = 0LL;
      unint64_t v18 = v6 - 2;
      while (1)
      {
        if (v15 == v17)
        {
          __break(1u);
          goto LABEL_35;
        }

        if (v2)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, a1);
          if (v13) {
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v6 = *(void *)(a1 + 40 + 8 * v17);
          swift_retain(v6);
          if (v13)
          {
LABEL_26:
            uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, a2);
            goto LABEL_30;
          }
        }

        if ((unint64_t)(v17 + 1) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }

        uint64_t v5 = *(void **)(a2 + 40 + 8 * v17);
        swift_retain(v5);
LABEL_30:
        int64_t v16 = sub_100036CF8((void *)v6, v5);
        swift_release(v6);
        swift_release(v5);
        if (v16 && v18 != v17++) {
          continue;
        }
        return v16;
      }
    }

    return 0;
  }

    __break(1u);
    goto LABEL_36;
  }

  uint64_t v84 = v106;
  Swift::String v85 = v104;
  unint64_t v86 = v103;
  if (!v79)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  Swift::String v87 = v79;
  uint64_t v88 = v102;
LABEL_27:
  uint64_t v89 = (os_log_s *)v81;
  v90 = swift_retain(v72);
  checkForErrorAndConsumeState(state:)(v90);
  swift_release(v72);
  uint64_t v91 = (*(uint64_t (**)(char *, uint64_t))(v85 + 88))(v86, v88);
  uint64_t v92 = (void (*)(char *, uint64_t))v112;
  uint64_t v93 = v72;
  if (v91 == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v94 = "[Error] Interval already ended";
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v88);
    uint64_t v94 = "";
  }

  unint64_t v95 = v108;
  unint64_t v96 = v111;
  v109(v108, v107, v111);
  uint64_t v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v97 = 0;
  uint64_t v98 = OSSignpostID.rawValue.getter(v97);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v89, (os_signpost_type_t)v110, v98, v87, v94, v97, 2u);
  swift_slowDealloc(v97, -1LL, -1LL);

  v92(v107, v96);
  v113(v84, v114);
  swift_release(v93);
  return ((uint64_t (*)(char *, uint64_t))v92)(v95, v96);
}

Swift::Int sub_10000F37C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_100157EC0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    char v32 = v2;
    unint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_10000F658(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10000F010(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100010298();
      goto LABEL_12;
    }

    sub_10001066C(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v6;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v16 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (!v15)
  {
    *(void *)(v13 + 16) = v16;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10000F85C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    uint64_t v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_10000F37C(v10);
    }

    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)sub_1000104BC();
        goto LABEL_10;
      }

      sub_100010994(v10);
    }

    uint64_t v11 = *v4;
    Hasher.init(_seed:)(&__s1, *(void *)(*v4 + 40));
    Data.hash(into:)(&__s1, v7, a2);
    uint64_t result = Hasher._finalize()();
    a3 = result & ~(-1LL << *(_BYTE *)(v11 + 32));
    if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0) {
      __asm { BR              X8 }
    }
  }

LABEL_10:
  uint64_t v12 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v13 = (Swift::Int *)(*(void *)(v12 + 48) + 16 * a3);
  Swift::Int *v13 = v7;
  v13[1] = a2;
  uint64_t v14 = *(void *)(v12 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1000101BCLL);
  }

  *(void *)(v12 + 16) = v16;
  return result;
}

        uint64_t v10 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }

      uint64_t v28 = 0u;
      BOOL v29 = 0u;
LABEL_6:
      sub_100012824((uint64_t)&v28, &qword_100157FF8);
LABEL_7:
      uint64_t v30 = 0LL;
      uint64_t v31 = 0LL;
      goto LABEL_8;
    }

    uint64_t v21 = v7 + 1;
    if (v7 + 1 >= v6) {
      goto LABEL_40;
    }
    int64_t v20 = *(void *)(v2 + 8 * v21);
    if (!v20)
    {
      uint64_t v21 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_40;
      }
      int64_t v20 = *(void *)(v2 + 8 * v21);
      if (!v20)
      {
        uint64_t v21 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_40;
        }
        int64_t v20 = *(void *)(v2 + 8 * v21);
        if (!v20)
        {
          uint64_t v21 = v7 + 4;
          if (v7 + 4 < v6)
          {
            int64_t v20 = *(void *)(v2 + 8 * v21);
            if (v20) {
              goto LABEL_27;
            }
            while (1)
            {
              Swift::Int v7 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_42;
              }
              if (v7 >= v6) {
                break;
              }
              int64_t v20 = *(void *)(v2 + 8 * v7);
              ++v21;
              if (v20) {
                goto LABEL_28;
              }
            }
          }

        uint64_t v10 = sub_100026BEC();
        uint64_t v11 = (*(uint64_t (**)(void, void, void))(*(void *)v8 + 288LL))(0LL, 0LL, v10 & 1);
        uint64_t v12 = (uint64_t *)sub_10008F5A4();
        if (*(void *)(v11 + 16))
        {
          uint64_t v14 = *v12;
          uint64_t v13 = v12[1];
          swift_bridgeObjectRetain(v13);
          BOOL v15 = sub_100006114(v14, v13);
          if ((v16 & 1) != 0)
          {
            sub_100006054(*(void *)(v11 + 56) + 32 * v15, (uint64_t)&v31);
          }

          else
          {
            uint64_t v31 = 0u;
            char v32 = 0u;
          }

          swift_bridgeObjectRelease(v13);
        }

        else
        {
          uint64_t v31 = 0u;
          char v32 = 0u;
        }

        swift_bridgeObjectRelease(v11);
        if (*((void *)&v32 + 1))
        {
          if ((swift_dynamicCast(v30, &v31, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v17 = v6;
            uint64_t v18 = v30[0];
            uint64_t v19 = v30[1];
            sub_1000125E0(a2, a3);
            sub_1000125E0(v18, v19);
            sub_1000214C4(v18, v19);
            uint64_t v21 = v20;
            sub_10001226C(a2, a3);
            sub_10001226C(v18, v19);
            char v22 = sub_10001226C(v18, v19);
            if ((v21 & 1) != 0)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
              uint64_t v23 = v33[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
              uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v8);
              specialized ContiguousArray._endMutation()(v24);
            }

            else
            {
              swift_release(v8);
            }

            uint64_t v6 = v17;
            uint64_t v5 = v27;
            goto LABEL_6;
          }
        }

        else
        {
          sub_100012824((uint64_t)&v31, &qword_100157FF8);
        }

        sub_1000125E0(a2, a3);
        sub_10002193C(0LL, 0xF000000000000000LL);
        sub_10002193C(a2, a3);
        swift_release(v8);
LABEL_6:
        ++v7;
        if (v9 == v6) {
          return v33;
        }
      }

      if (v7 < *(void *)(v28 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      if (v5 < 0) {
        uint64_t v26 = v5;
      }
      else {
        uint64_t v26 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v6) {
        return _swiftEmptyArrayStorage;
      }
    }

    unint64_t v8 = *(void *)(v5 + 8 * v7 + 32);
    swift_retain(v8);
    unint64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_24;
    }
    goto LABEL_10;
  }

  return _swiftEmptyArrayStorage;
}

          uint64_t v16 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }

        uint64_t v49 = 0u;
        uint64_t v50 = 0u;
LABEL_6:
        swift_release(v31);
        sub_100012824((uint64_t)&v49, &qword_100157FF8);
LABEL_7:
        uint64_t v14 = 1LL;
        goto LABEL_8;
      }

      uint64_t v26 = v24 + 4;
      if (v26 < v46)
      {
        unint64_t v25 = *(void *)(v45 + 8 * v26);
        if (v25)
        {
          uint64_t v13 = v26;
          goto LABEL_31;
        }

        while (1)
        {
          uint64_t v13 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            goto LABEL_43;
          }
          if (v13 >= v46) {
            break;
          }
          unint64_t v25 = *(void *)(v45 + 8 * v13);
          ++v26;
          if (v25) {
            goto LABEL_31;
          }
        }
      }
    }

  Swift::Int v7 = (uint64_t *)sub_100090164();
  if (!*(void *)(a1 + 16))
  {
    uint64_t v24 = 0u;
    unint64_t v25 = 0u;
LABEL_19:
    sub_100012824((uint64_t)&v24, &qword_100157FF8);
    goto LABEL_20;
  }

  unint64_t v9 = *v7;
  unint64_t v8 = v7[1];
  swift_bridgeObjectRetain(v8);
  uint64_t v10 = sub_100006114(v9, v8);
  if ((v11 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v24);
  }

  else
  {
    uint64_t v24 = 0u;
    unint64_t v25 = 0u;
  }

  swift_bridgeObjectRelease(v8);
  if (!*((void *)&v25 + 1)) {
    goto LABEL_19;
  }
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0
    && (v23 & 1) != 0)
  {
    return 1LL;
  }

  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6 | (v5 << 8);
    --v2;
  }

  while (v2);
  uint64_t result = 0LL;
  *a2 = v5;
  return result;
}

void *sub_100010298()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_100157E88);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v20, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v20,  v5,  v2);
  }

  int64_t v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v25;
    goto LABEL_30;
  }

  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    int64_t v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000125E0(v17, *((unint64_t *)&v17 + 1));
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      unint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      unint64_t v20 = (v20 + 1) & v44;
      if (((*(void *)(v46 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
        goto LABEL_58;
      }
    }

    sub_100069D18(&v48);
    a2 = v43;
    uint64_t v3 = v39;
    a1 = v40;
    uint64_t v7 = v38;
    uint64_t v6 = v41;
    uint64_t v2 = v42;
    if (!v41) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v41 = (v6 - 1) & v6;
    BOOL v42 = v2;
  }

    unint64_t v11 = (v27 - 1) & v27;
    uint64_t v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 72 * v14;
    unint64_t v16 = *(void *)(v1 + 48) + v15;
    int64_t v17 = *(void *)(v16 + 8);
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v19 = *(void *)(v16 + 40);
    unint64_t v20 = *(void *)(v16 + 48);
    int64_t v21 = *(void *)(v16 + 56);
    unint64_t v22 = *(_BYTE *)(v16 + 64);
    int64_t v23 = *(void *)(v3 + 48) + v15;
    uint64_t v24 = *(_OWORD *)(v16 + 24);
    *(void *)int64_t v23 = *(void *)v16;
    *(void *)(v23 + 8) = v17;
    *(void *)(v23 + 16) = v18;
    *(_OWORD *)(v23 + 24) = v24;
    *(void *)(v23 + 40) = v19;
    *(void *)(v23 + 48) = v20;
    *(void *)(v23 + 56) = v21;
    *(_BYTE *)(v23 + 64) = v22;
    unint64_t v25 = v24;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v25);
    uint64_t result = (void *)sub_10002B568(v20, v21);
  }

  uint64_t v28 = v26 + 3;
  if (v28 >= v12) {
    goto LABEL_28;
  }
  BOOL v27 = *(void *)(v5 + 8 * v28);
  if (v27)
  {
    uint64_t v8 = v28;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v8 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    BOOL v27 = *(void *)(v5 + 8 * v8);
    ++v28;
    if (v27) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v7 = v21;
    goto LABEL_28;
  }

  __break(1u);
LABEL_42:
  __break(1u);
}

    uint64_t v44 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v12, 1LL, 1LL, v44);
    uint64_t v30 = 0LL;
LABEL_28:
    sub_1000263D8((uint64_t)v12, (uint64_t)v14, &qword_100157ED8);
    uint64_t v45 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48LL))(v14, 1LL, v45) == 1)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(v69);
      return 0LL;
    }

    sub_1000966AC((uint64_t)&v14[*(int *)(v45 + 48)], (uint64_t)v8);
    swift_beginAccess(v31, v75, 32LL, 0LL);
    uint64_t v46 = *(void *)(v3 + 40);
    uint64_t v47 = *(void *)(v3 + 48);
    uint64_t v48 = v3;
    sub_100005110(v31, v46);
    sub_10009C2CC(v46, v47);
    swift_endAccess(v75);
    uint64_t v49 = v73;
    uint64_t v50 = v74;
    sub_100005110(v72, v73);
    (*(void (**)(void *__return_ptr, char *, uint64_t, uint64_t))(v50 + 24))( v76,  &v8[*(int *)(v71 + 28)],  v49,  v50);
    sub_100006034(v72);
    sub_10001A148((uint64_t)v76, (uint64_t)v72, &qword_100157C58);
    uint64_t v51 = v73;
    if (!v73)
    {
      sub_100012824((uint64_t)v72, &qword_100157C58);
LABEL_35:
      uint64_t v57 = v70;
      swift_bridgeObjectRetain(v70);
      sub_100012824((uint64_t)v76, &qword_100157C58);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(0LL);
      uint64_t v3 = v48;
      goto LABEL_6;
    }

    uint64_t v52 = v74;
    sub_100005110(v72, v73);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
    uint64_t v55 = v54;
    sub_100006034(v72);
    if (!v55) {
      goto LABEL_35;
    }
    uint64_t v3 = v48;
    uint64_t v56 = v70;
    if (v53 == v66 && v55 == v70)
    {
      sub_100012824((uint64_t)v76, &qword_100157C58);
      swift_bridgeObjectRelease(v56);
      swift_release(v69);
      swift_bridgeObjectRelease(v55);
LABEL_39:
      int64_t v61 = v64;
      sub_100012734((uint64_t)&v8[*(int *)(v71 + 20)], (uint64_t)v64, type metadata accessor for ApplicationRecord);
      sub_1000127BC((uint64_t)v8, type metadata accessor for DriverBinEntry);
      a1 = *v61;
      swift_bridgeObjectRetain(v61[1]);
      sub_1000127BC((uint64_t)v61, type metadata accessor for ApplicationRecord);
      Swift::String v62 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v62 - 8) + 8LL))(v14, v62);
      return a1;
    }

    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v66, v70, 0LL);
    sub_100012824((uint64_t)v76, &qword_100157C58);
    swift_bridgeObjectRelease(v55);
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(v69);
      goto LABEL_39;
    }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    int64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)swift_retain(v17);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    int64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)swift_retain(v17);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  uint64_t v35 = v31[2];
  if (v35 > 1)
  {
    uint64_t v36 = v31;
    unint64_t v37 = sub_100012624();
    int64_t v38 = swift_allocError(&type metadata for KMError, v37, 0LL, 0LL);
    *(void *)unint64_t v39 = v36;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_BYTE *)(v39 + 72) = 0;
LABEL_44:
    swift_willThrow(v38);
    goto LABEL_45;
  }

  if (v35 != 1)
  {
    swift_bridgeObjectRelease(v31);
    Swift::String v71 = sub_100012624();
    int64_t v38 = swift_allocError(&type metadata for KMError, v71, 0LL, 0LL);
    *(void *)unint64_t v72 = 0xD000000000000040LL;
    *(void *)(v72 + 8) = 0x800000010012C570LL;
    *(_OWORD *)(v72 + 16) = 0u;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    *(void *)(v72 + 64) = 0LL;
    *(_BYTE *)(v72 + 72) = 50;
    goto LABEL_44;
  }

  uint64_t v58 = v31[4];
  unint64_t v59 = v31[5];
  uint64_t v94 = a3;
  Swift::String v60 = v31[6];
  int64_t v61 = v31[7];
  Swift::String v62 = v31[8];
  Swift::String v63 = v31[9];
  uint64_t v64 = v31[10];
  uint64_t v65 = v31[11];
  unint64_t v96 = v31[12];
  uint64_t v99 = *((_BYTE *)v31 + 104);
  uint64_t v66 = v31;
  sub_1000516E4(v58, v59, v60, v61, v62, v63, v64, v65, v96, v99);
  swift_bridgeObjectRelease(v66);
  uint64_t v67 = sub_100012624();
  unint64_t v68 = swift_allocError(&type metadata for KMError, v67, 0LL, 0LL);
  *(void *)uint64_t v69 = v58;
  *(void *)(v69 + 8) = v59;
  *(void *)(v69 + 16) = v60;
  *(void *)(v69 + 24) = v61;
  *(void *)(v69 + 32) = v62;
  *(void *)(v69 + 40) = v63;
  *(void *)(v69 + 48) = v64;
  *(void *)(v69 + 56) = v65;
  *(void *)(v69 + 64) = v96;
  *(_BYTE *)(v69 + 72) = v99;
  swift_willThrow(v68);
  uint64_t v70 = v94;
  return swift_bridgeObjectRelease(v70);
}

void *sub_1000104BC()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100157EC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_10001066C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100157E88);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_37:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v21 >= v37) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }

Swift::Int sub_100010994(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_100157EC0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  unint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

                __break(1u);
LABEL_41:
                if (a2 < 0) {
                  unint64_t v41 = a2;
                }
                else {
                  unint64_t v41 = a2 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(a2);
                uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v41);
                swift_bridgeObjectRelease(a2);
                goto LABEL_3;
              }
            }
          }

          uint64_t v30 = v38;
        }

  __break(1u);
  return result;
}

          swift_release(a1);
          return;
        }
      }
    }

            uint64_t v30 = v432;
            uint64_t v140 = (void (*)(char *, uint64_t))v432[1];
            v140(v194, (uint64_t)v75);
            goto LABEL_41;
          }

          sub_1000125E0(v189, v190);
          char v225 = sub_10005E3D0(v185, v186, v189, v190, v416);
          sub_10001226C(v189, v190);
          if (v225 == 3)
          {
            *(void *)&v442 = 0LL;
            *((void *)&v442 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(69LL);
            v226._countAndFlagsBits = 0xD000000000000026LL;
            v226._uint64_t object = v412;
            String.append(_:)(v226);
            uint64_t v227 = sub_100012860(&qword_100157E98, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001106A8);
            v228._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v429, v227);
            uint64_t v229 = v228._object;
            String.append(_:)(v228);
            swift_bridgeObjectRelease(v229);
            v230._countAndFlagsBits = 0xD00000000000001BLL;
            v230._uint64_t object = v411;
            String.append(_:)(v230);
            LOBYTE(v440) = 0;
            uint64_t v231 = sub_100096668();
            v232._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for ApprovalState,  v231);
            v233 = v232._object;
            String.append(_:)(v232);
            swift_bridgeObjectRelease(v233);
            v234 = v442;
            v235 = v424;
            v236 = swift_isUniquelyReferenced_nonNull_native(v424);
            uint64_t v22 = (unint64_t)v433;
            v410 = v234;
            if ((v236 & 1) == 0) {
              v235 = sub_10000C82C(0LL, v235[2] + 1LL, 1, v235);
            }
            v238 = v235[2];
            v237 = v235[3];
            v424 = v235;
            if (v238 >= v237 >> 1) {
              v424 = sub_10000C82C((void *)(v237 > 1), v238 + 1, 1, v424);
            }
            char v225 = 0;
            v239 = v424;
            v424[2] = v238 + 1;
            v240 = &v239[2 * v238];
            v240[4] = v410;
            v240[5] = *((void *)&v234 + 1);
            uint64_t v30 = v432;
          }

          else
          {
            uint64_t v30 = v432;
            uint64_t v22 = (unint64_t)v433;
          }

          sub_1000125E0(v189, v190);
          v241 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)( v185,  v186,  v189,  v190,  v225,  (uint64_t)v453);
          __chkstk_darwin(v241);
          sub_1000BC9C4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift",  99LL,  2LL,  165LL,  (uint64_t)v421,  0xD000000000000026LL,  (unint64_t)v413,  (void (*)(__n128))sub_1000966F0);
          uint64_t v75 = (char *)v439;
          ((void (*)(unint64_t, uint64_t))v30[1])(v22, v439);
          uint64_t v76 = v431;
          sub_1000127BC((uint64_t)v431, type metadata accessor for DriverBinEntry);
          sub_10006769C(v453);
          sub_100006034(&v445);
          unint64_t v74 = v435;
        }

        else
        {
          sub_100012824((uint64_t)&v440, &qword_100157C58);
          sub_100006034(&v442);
          uint64_t v207 = sub_1000D32BC();
          uint64_t v163 = v180;
          int64_t v161 = (char *)v406;
          unint64_t v74 = v435;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v438 + 16))(v406, v207, v435);
          uint64_t v162 = v407;
          uint64_t v75 = (char *)v439;
          v208 = v145((unint64_t)v407, (char *)v180, (char *)v439);
          char v165 = (os_log_s *)Logger.logObject.getter(v208);
          uint64_t v209 = static os_log_type_t.error.getter(v165);
          if (!os_log_type_enabled(v165, v209)) {
            goto LABEL_74;
          }
          Swift::String v210 = swift_slowAlloc(12LL, -1LL);
          v211 = swift_slowAlloc(32LL, -1LL);
          v445 = v211;
          *(_DWORD *)Swift::String v210 = v420;
          unint64_t v212 = URL.path.getter(v211);
          unint64_t v214 = v213;
          *(void *)(v210 + 4) = sub_1000058CC(v212, v213, &v445);
          swift_bridgeObjectRelease(v214);
          uint64_t v30 = v432;
          uint64_t v173 = (void (*)(char *, uint64_t))v432[1];
          v173(v162, v439);
          _os_log_impl((void *)&_mh_execute_header, v165, v209, "Bundle at %s is invalid", (uint8_t *)v210, 0xCu);
          swift_arrayDestroy(v211, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v215 = v211;
          unint64_t v74 = v435;
          swift_slowDealloc(v215, -1LL, -1LL);
          uint64_t v216 = v210;
          uint64_t v75 = (char *)v439;
          swift_slowDealloc(v216, -1LL, -1LL);

LABEL_75:
          (*(void (**)(char *, uint64_t))(v438 + 8))(v161, v74);
LABEL_76:
          v173((char *)v163, (uint64_t)v75);
          uint64_t v76 = v431;
          sub_1000127BC((uint64_t)v431, type metadata accessor for DriverBinEntry);
          uint64_t v22 = v163;
        }

        uint64_t v11 = (unint64_t)v436;
        unint64_t v132 = v437;
        Swift::String v136 = v429;
        if (v436) {
          goto LABEL_39;
        }
        goto LABEL_42;
      }

      v413 = v434 + 16;
      v424 = _swiftEmptyArrayStorage;
      v421 = (char *)(v72 & 0xC000000000000001LL);
      uint64_t v22 = 4LL;
      v400 = 0xD000000000000017LL;
      v399 = (void *)0x8000000100127C50LL;
      v398 = 0xD00000000000001BLL;
      v397 = (void *)0x8000000100127C70LL;
      v411 = (void *)0x8000000100127D00LL;
      v412 = (char *)&type metadata for () + 8;
      *(void *)&Swift::String v71 = 136315394LL;
      v395 = v71;
      v394 = (char *)&type metadata for Any + 8;
      uint64_t v11 = (unint64_t)v418;
      unint64_t v79 = (uint64_t)v436;
      *(void *)&v420 = v73;
      while (1)
      {
        unint64_t v86 = v22 - 4;
        if (!v421) {
          break;
        }
        Swift::String v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v72);
        uint64_t v88 = v22 - 3;
        if (__OFADD__(v86, 1LL)) {
          goto LABEL_144;
        }
LABEL_18:
        v437 = v88;
        (*(void (**)(void))(**(void **)(v87 + 24) + 152LL))();
        if (((unsigned int (*)(uint64_t, uint64_t, char *))v30[6])(v77, 1LL, v75) == 1)
        {
          uint64_t v89 = sub_100012824(v77, (uint64_t *)&unk_10015BA30);
LABEL_20:
          v90 = (*(uint64_t (**)(uint64_t))(**(void **)(v87 + 24) + 144LL))(v89);
          uint64_t v92 = v91;
          uint64_t v82 = sub_10005E3D0(v90, v91, 0LL, 0xF000000000000000LL, v416);
          swift_bridgeObjectRelease(v92);
          if (v82 == 3)
          {
            v445 = 0LL;
            v446 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(54LL);
            v93._uint64_t object = v399;
            v93._countAndFlagsBits = v400;
            String.append(_:)(v93);
            *(void *)&v442 = v87;
            uint64_t v94 = type metadata accessor for RealizedInfo(0LL);
            _print_unlocked<A, B>(_:_:)( &v442,  &v445,  v94,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            v95._uint64_t object = v397;
            v95._countAndFlagsBits = v398;
            String.append(_:)(v95);
            LOBYTE(v442) = 1;
            unint64_t v96 = sub_100096668();
            v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for ApprovalState,  v96);
            uint64_t v98 = v97._object;
            String.append(_:)(v97);
            swift_bridgeObjectRelease(v98);
            uint64_t v99 = v445;
            unint64_t v100 = v446;
            if ((swift_isUniquelyReferenced_nonNull_native(v424) & 1) == 0) {
              v424 = sub_10000C82C(0LL, v424[2] + 1LL, 1, v424);
            }
            uint64_t v102 = v424[2];
            Swift::String v101 = v424[3];
            if (v102 >= v101 >> 1) {
              v424 = sub_10000C82C((void *)(v101 > 1), v102 + 1, 1, v424);
            }
            int64_t v80 = v424;
            v424[2] = v102 + 1;
            uint64_t v81 = &v80[2 * v102];
            v81[4] = v99;
            v81[5] = v100;
            uint64_t v82 = 1;
            uint64_t v11 = (unint64_t)v418;
          }

          uint64_t v83 = (*(uint64_t (**)(void))(**(void **)(v87 + 24) + 144LL))();
          Swift::String v85 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)( v83,  v84,  0LL,  0xF000000000000000LL,  v82,  (uint64_t)v452);
          __chkstk_darwin(v85);
          sub_1000BC9C4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift",  99LL,  2LL,  127LL,  (uint64_t)v413,  0xD000000000000026LL,  (unint64_t)v411,  (void (*)(__n128))sub_100096B4C);
          swift_release(v87);
          sub_10006769C(v452);
          uint64_t v75 = (char *)v439;
          unint64_t v74 = v435;
          unint64_t v79 = (uint64_t)v436;
          goto LABEL_12;
        }

        ((void (*)(uint64_t, uint64_t, char *))v30[4])(v79, v77, v75);
        Swift::String v103 = sub_10000B5CC(v79, v410);
        uint64_t v104 = v79;
        Swift::String v105 = (uint64_t (*)(unint64_t, uint64_t, char *))v30[2];
        uint64_t v106 = v105(v11, v104, v75);
        if ((v103 & 1) != 0)
        {
          v417 = (void (*)(unint64_t, char *))v30[1];
          v417(v11, v75);
        }

        else
        {
          Swift::Int result = (char *)((uint64_t (*)(uint64_t))v396)(v106);
          if (!result) {
            goto LABEL_157;
          }
          uint64_t v107 = result;
          uint64_t v108 = (*(uint64_t (**)(unint64_t))(*(void *)result + 392LL))(v11);
          swift_release(v107);
          Swift::String v109 = (void (*)(unint64_t, uint64_t))v30[1];
          uint64_t v110 = v439;
          v109(v11, v439);
          if ((v108 & 1) == 0)
          {
            uint64_t v89 = ((uint64_t (*)(char *, uint64_t))v109)(v436, v110);
            uint64_t v30 = v432;
            goto LABEL_20;
          }

          v417 = (void (*)(unint64_t, char *))v109;
          uint64_t v75 = (char *)v110;
        }

        Swift::Int v111 = sub_1000D32BC();
        uint64_t v112 = v404;
        uint64_t v113 = v435;
        (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v404, v111, v435);
        Swift::String v114 = v403;
        v105((unint64_t)v403, (uint64_t)v436, v75);
        Swift::String v115 = swift_retain_n(v87, 2LL);
        uint64_t v116 = v113;
        Swift::String v117 = (os_log_s *)Logger.logObject.getter(v115);
        Swift::String v118 = static os_log_type_t.info.getter(v117);
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v119 = swift_slowAlloc(22LL, -1LL);
          uint64_t v120 = swift_slowAlloc(64LL, -1LL);
          v445 = v120;
          *(_DWORD *)uint64_t v119 = v395;
          v121 = (*(uint64_t (**)(void))(**(void **)(v87 + 24) + 144LL))();
          uint64_t v123 = v122;
          *(void *)(v119 + 4) = sub_1000058CC(v121, v122, &v445);
          swift_release_n(v87, 2LL);
          uint64_t v124 = swift_bridgeObjectRelease(v123);
          *(_WORD *)(v119 + 12) = 2080;
          uint64_t v125 = URL.path.getter(v124);
          uint64_t v127 = v126;
          *(void *)(v119 + 14) = sub_1000058CC(v125, v126, &v445);
          swift_bridgeObjectRelease(v127);
          uint64_t v128 = (void (*)(char *, char *))v417;
          v417((unint64_t)v114, (char *)v439);
          _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "Skipping third party driver %s at %s during first approvals database update pass",  (uint8_t *)v119,  0x16u);
          swift_arrayDestroy(v120, 2LL, v394);
          Swift::String v129 = v120;
          uint64_t v75 = (char *)v439;
          swift_slowDealloc(v129, -1LL, -1LL);
          swift_slowDealloc(v119, -1LL, -1LL);
          swift_release(v87);

          unint64_t v74 = v435;
          (*(void (**)(char *, uint64_t))(v438 + 8))(v112, v435);
        }

        else
        {

          uint64_t v128 = (void (*)(char *, char *))v417;
          v417((unint64_t)v114, v75);
          swift_release_n(v87, 3LL);
          (*(void (**)(char *, uint64_t))(v438 + 8))(v112, v116);
          unint64_t v74 = v116;
        }

        unint64_t v79 = (uint64_t)v436;
        v128(v436, v75);
        uint64_t v76 = v431;
        uint64_t v30 = v432;
        uint64_t v77 = (uint64_t)v405;
        uint64_t v11 = (unint64_t)v418;
LABEL_12:
        unint64_t v72 = (uint64_t)v422;
        int64_t v78 = v423;
        ++v22;
        if (v437 == (void)v420) {
          goto LABEL_36;
        }
      }

      Swift::String v87 = *(void *)(v72 + 8 * v22);
      swift_retain(v87);
      uint64_t v88 = v22 - 3;
      if (!__OFADD__(v86, 1LL)) {
        goto LABEL_18;
      }
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      if (v72 < 0) {
        v387 = v72;
      }
      else {
        v387 = v72 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v72);
      v388 = _CocoaArrayWrapper.endIndex.getter(v387);
      swift_bridgeObjectRelease(v422);
      uint64_t v73 = v388;
      unint64_t v72 = (uint64_t)v422;
    }
  }

  __break(1u);
LABEL_160:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100010C44(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1LL << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a6 + 36) == a4)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(a6 + 48);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))( v9,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a3,  v11);
    uint64_t v12 = *(void *)(a6 + 56);
    uint64_t v13 = type metadata accessor for DriverBinEntry(0LL);
    return sub_100012734( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * a3,  a2,  type metadata accessor for DriverBinEntry);
  }

LABEL_8:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    char v27 = static os_log_type_t.error.getter(v25);
    unint64_t v28 = sub_100026BA8();
    BOOL v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v29,  "Unexpected file where staging directory should be, attempting to remove",  71LL,  2LL,  _swiftEmptyArrayStorage);

    uint64_t v30 = v3[5];
    unint64_t v31 = v3[6];
    sub_100005110(v26, v30);
    sub_1001073DC(v30, v31);
    int64_t v32 = v188;
    uint64_t v33 = v189;
    sub_100005110(&v186, v188);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v20, v32, v33);
    char v180 = v6;
    unint64_t v25 = sub_100006034(&v186);
    unint64_t v26 = v183;
    goto LABEL_9;
  }

  unint64_t v26 = v183;
  if ((v184 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v50 = a1[3];
  uint64_t v51 = a1[4];
  sub_100005110(a1, v50);
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v50, v51);
  if (!v53)
  {
    int v186 = 0LL;
    uint64_t v187 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(v187);
    int v186 = 0x6120656C646E7542LL;
    uint64_t v187 = 0xEA00000000002074LL;
    uint64_t v65 = a1[3];
    uint64_t v66 = a1[4];
    sub_100005110(a1, v65);
    uint64_t v67 = v179;
    unint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 64))(v65, v66);
    uint64_t v69 = URL.path.getter(v68);
    Swift::String v71 = v70;
    (*((void (**)(void *, uint64_t))v178 + 1))(v67, v6);
    v72._countAndFlagsBits = v69;
    v72._uint64_t object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(v71);
    v73._countAndFlagsBits = 0xD000000000000013LL;
    v73._uint64_t object = (void *)0x8000000100126270LL;
    String.append(_:)(v73);
    unint64_t v74 = v186;
    uint64_t v75 = v187;
    uint64_t v76 = sub_100012624();
    Swift::String v62 = swift_allocError(&type metadata for KMError, v76, 0LL, 0LL);
    *(void *)Swift::String v63 = v74;
    *(void *)(v63 + 8) = v75;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(void *)(v63 + 64) = 0LL;
    uint64_t v64 = 27;
    goto LABEL_14;
  }

  uint64_t v54 = v52;
  uint64_t v55 = v53;
  int v186 = v52;
  uint64_t v187 = (unint64_t)v53;
  *(void *)&char v184 = 47LL;
  *((void *)&v184 + 1) = 0xE100000000000000LL;
  uint64_t v56 = sub_10002657C();
  if ((StringProtocol.contains<A>(_:)(&v184, &type metadata for String, &type metadata for String, v56, v56) & 1) != 0)
  {
    int v186 = 0LL;
    uint64_t v187 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease(v187);
    int v186 = 0xD000000000000012LL;
    uint64_t v187 = 0x8000000100126360LL;
    v57._countAndFlagsBits = v54;
    v57._uint64_t object = v55;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(v55);
    v58._countAndFlagsBits = 0xD00000000000001CLL;
    v58._uint64_t object = (void *)0x8000000100126380LL;
    String.append(_:)(v58);
    unint64_t v59 = v186;
    Swift::String v60 = v187;
    int64_t v61 = sub_100012624();
    Swift::String v62 = swift_allocError(&type metadata for KMError, v61, 0LL, 0LL);
    *(void *)Swift::String v63 = v59;
    *(void *)(v63 + 8) = v60;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(void *)(v63 + 64) = 0LL;
    uint64_t v64 = 9;
LABEL_14:
    *(_BYTE *)(v63 + 72) = v64;
    return swift_willThrow(v62);
  }

  int64_t v78 = v3[5];
  unint64_t v79 = v3[6];
  sub_100005110(v26, v78);
  sub_1001073DC(v78, v79);
  int64_t v80 = v188;
  uint64_t v81 = v189;
  sub_100005110(&v186, v188);
  if (qword_1001632F8 != -1) {
    swift_once(&qword_1001632F8, sub_100086AEC);
  }
  uint64_t v82 = sub_100086AD4(v6, (uint64_t)qword_100175528);
  *(void *)&char v184 = v54;
  *((void *)&v184 + 1) = v55;
  v83._countAndFlagsBits = 0x5858585858582ELL;
  v83._uint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v83);
  uint64_t v84 = *((void *)&v184 + 1);
  Swift::String v85 = v177;
  unint64_t v86 = v176;
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v81 + 80))( v82,  v184,  *((void *)&v184 + 1),  v80,  v81);
  swift_bridgeObjectRelease(v84);
  if (v86) {
    return sub_100006034(&v186);
  }
  Swift::String v87 = v182[3];
  uint64_t v88 = v182[4];
  sub_100005110(v182, v87);
  uint64_t v89 = (char *)v179;
  v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
  uint64_t v91 = URL.lastPathComponent.getter(v90);
  uint64_t v93 = v92;
  uint64_t v94 = (void (*)(char *, uint64_t))*((void *)v178 + 1);
  v94(v89, v6);
  unint64_t v95 = v173;
  URL.appendingPathComponent(_:)(v91, v93);
  swift_bridgeObjectRelease(v93);
  v94(v85, v6);
  unint64_t v96 = sub_100006034(&v186);
  Path = URL.deletingLastPathComponent()(v96);
  uint64_t v98 = v172;
  URL.deletingLastPathComponent()(Path);
  uint64_t v99 = ((uint64_t (*)(char *, uint64_t))v94)(v89, v6);
  unint64_t v100 = URL.path.getter(v99);
  uint64_t v102 = v101;
  v94(v98, v6);
  Swift::String v103 = sub_1000901B8();
  uint64_t v104 = v103[1];
  if (v100 == *v103 && v102 == v104)
  {
    Swift::String v105 = swift_bridgeObjectRelease(v102);
  }

  else
  {
    uint64_t v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, *v103, v104, 0LL);
    Swift::String v105 = swift_bridgeObjectRelease(v102);
    if ((v106 & 1) == 0)
    {
      uint64_t v150 = v181[5];
      uint64_t v151 = v181[6];
      sub_100005110(v183, v150);
      sub_1001073DC(v150, v151);
      uint64_t v152 = v188;
      unint64_t v153 = v189;
      sub_100005110(&v186, v188);
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 104))(v95, v152, v153);
      sub_100006034(&v186);
      int v186 = 0LL;
      uint64_t v187 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(43LL);
      Swift::String v157 = swift_bridgeObjectRelease(v187);
      int v186 = 0xD000000000000029LL;
      uint64_t v187 = 0x8000000100126290LL;
      v158._countAndFlagsBits = URL.path.getter(v157);
      uint64_t object = v158._object;
      String.append(_:)(v158);
      swift_bridgeObjectRelease(object);
      uint64_t v160 = v186;
      int64_t v161 = v187;
      uint64_t v162 = sub_100012624();
      uint64_t v163 = swift_allocError(&type metadata for KMError, v162, 0LL, 0LL);
      *(void *)unint64_t v164 = v160;
      *(void *)(v164 + 8) = v161;
      *(_OWORD *)(v164 + 16) = 0u;
      *(_OWORD *)(v164 + 32) = 0u;
      *(_OWORD *)(v164 + 48) = 0u;
      *(void *)(v164 + 64) = 0LL;
      *(_BYTE *)(v164 + 72) = 27;
      swift_willThrow(v163);
      return ((uint64_t (*)(char *, uint64_t))v94)(v95, v6);
    }
  }

  LODWORD(v177) = static os_signpost_type_t.event.getter(v105);
  uint64_t v176 = (id)*sub_1000D30EC();
  uint64_t v107 = sub_100090248();
  v175 = (unint64_t)*v107;
  uint64_t v174 = (uint64_t)v107[1];
  LODWORD(v172) = *((unsigned __int8 *)v107 + 16);
  uint64_t v108 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  Swift::String v109 = swift_allocObject(v108, 112LL, 7LL);
  *(_OWORD *)(v109 + 16) = xmmword_10010F440;
  uint64_t v110 = URL.path.getter(v109);
  uint64_t v112 = v111;
  *(void *)(v109 + 56) = &type metadata for String;
  uint64_t v166 = sub_100026B64();
  *(void *)(v109 + 64) = v166;
  *(void *)(v109 + 32) = v110;
  *(void *)(v109 + 40) = v112;
  uint64_t v178 = (uint64_t (*)(char *, uint64_t))v94;
  uint64_t v113 = v182;
  Swift::String v114 = v6;
  char v180 = v6;
  Swift::String v115 = v182[3];
  uint64_t v116 = v182[4];
  sub_100005110(v182, v115);
  Swift::String v117 = v179;
  Swift::String v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 64))(v115, v116);
  uint64_t v119 = URL.path.getter(v118);
  v121 = v120;
  uint64_t v122 = ((uint64_t (*)(void *, uint64_t))v94)(v117, v114);
  uint64_t v123 = v166;
  *(void *)(v109 + 96) = &type metadata for String;
  *(void *)(v109 + 104) = v123;
  *(void *)(v109 + 72) = v119;
  *(void *)(v109 + 80) = v121;
  uint64_t v124 = v168;
  static OSSignpostID.exclusive.getter(v122);
  uint64_t v125 = v176;
  os_signpost(_:dso:log:name:signpostID:_:_:)( v177,  &_mh_execute_header,  v176,  v175,  v174,  v172,  v124,  "Created %{public}s, copying files from %{public}s",  49LL,  2,  v109);

  swift_bridgeObjectRelease(v109);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v124, v170);
  uint64_t v126 = v181[5];
  uint64_t v127 = v181[6];
  sub_100005110(v183, v126);
  sub_1001073DC(v126, v127);
  uint64_t v128 = v188;
  Swift::String v129 = v189;
  uint64_t v179 = sub_100005110(&v186, v188);
  uint64_t v130 = v113[3];
  uint64_t v131 = v113[4];
  sub_100005110(v113, v130);
  unint64_t v132 = v171;
  uint64_t v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 64))(v130, v131);
  uint64_t v134 = URL.path.getter(v133);
  Swift::String v136 = v135;
  Swift::String v137 = v132;
  uint64_t v138 = v173;
  uint64_t v139 = v178(v137, v180);
  uint64_t v140 = URL.path.getter(v139);
  uint64_t v142 = v141;
  unint64_t v143 = sub_1001056F0();
  sub_1001056FC(v134, v136, v140, v142, v143, v128, v129);
  uint64_t v144 = (void (*)(char *, uint64_t))v178;
  int64_t v145 = v180;
  swift_bridgeObjectRelease(v136);
  swift_bridgeObjectRelease(v142);
  sub_100006034(&v186);
  uint64_t v146 = v181[5];
  int64_t v147 = v181[6];
  sub_100005110(v183, v146);
  sub_10009C2CC(v146, v147);
  BOOL v148 = v188;
  uint64_t v149 = v189;
  sub_100005110(&v186, v188);
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v149 + 24))(&v184, v138, v148, v149);
  if (v185)
  {
    v144(v138, v145);
    sub_100005158(&v184, v167);
    return sub_100006034(&v186);
  }

  sub_100012824((uint64_t)&v184, &qword_100157C58);
  sub_100006034(&v186);
  unint64_t v154 = sub_100012624();
  uint64_t v155 = swift_allocError(&type metadata for KMError, v154, 0LL, 0LL);
  *(void *)uint64_t v156 = 0xD000000000000028LL;
  *(void *)(v156 + 8) = 0x8000000100126330LL;
  *(_OWORD *)(v156 + 16) = 0u;
  *(_OWORD *)(v156 + 32) = 0u;
  *(_OWORD *)(v156 + 48) = 0u;
  *(void *)(v156 + 64) = 0LL;
  *(_BYTE *)(v156 + 72) = 27;
  swift_willThrow(v155);
  return ((uint64_t (*)(char *, uint64_t))v144)(v138, v145);
}

    uint64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    if (v13 >= v8) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    uint64_t v15 = v9 + 1;
    if (!v14)
    {
      uint64_t v15 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (!v14)
      {
        uint64_t v15 = v9 + 3;
        if (v9 + 3 >= v8) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v15);
        if (!v14)
        {
          uint64_t v15 = v9 + 4;
          if (v9 + 4 >= v8) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100010D14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100010D9C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(v3 + 96) = 0LL;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(void *)(v3 + 144) = 0LL;
  *(void *)(v3 + 152) = _swiftEmptyArrayStorage;
  sub_100005F70((uint64_t)a2, v3 + 16);
  *(void *)(v3 + 104) = a3;
  type metadata accessor for ExtensionManager();
  id v6 = a3;
  sub_1000BC9C4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/KernelStateManager.swift",  102LL,  2LL,  36LL,  (uint64_t)a2,  0xD000000000000025LL,  0x8000000100121F40LL,  (void (*)(__n128))sub_1000128A0);
  sub_100006034(a2);
  *(void *)(v3 + 56) = v8;
  return v3;
}

void *sub_100010E6C(void *a1)
{
  uint64_t v19 = a1[2];
  uint64_t v12 = a1[7];
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[15];
  uint64_t v7 = a1[16];
  uint64_t v8 = a1[17];
  uint64_t v9 = a1[19];
  uint64_t v10 = a1[21];
  uint64_t v13 = a1[25];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[27];
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[29];
  uint64_t v18 = a1[30];
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t *sub_100010F94(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100011010(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v98 = a3;
  uint64_t v102 = a2;
  uint64_t v4 = sub_100005FB4(&qword_100157ED0);
  __chkstk_darwin(v4);
  uint64_t v96 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100005FB4(&qword_100157ED8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_t v97 = (os_log_t)sub_100005FB4(&qword_100157EE0);
  __chkstk_darwin(v97);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v11 = __chkstk_darwin(v99);
  uint64_t v95 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v101 = (uint64_t)&v95 - v13;
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v100 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v95 - v17;
  uint64_t v19 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v19);
  int64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for URL(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  Swift::String v103 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v104 + 24) + 112LL))(v108, v24);
  uint64_t v26 = v109;
  uint64_t v106 = v14;
  if (!v109)
  {
    sub_100012824((uint64_t)v108, &qword_100157C58);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1LL, 1LL, v22);
    goto LABEL_6;
  }

  uint64_t v27 = v110;
  sub_100005110(v108, v109);
  unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 64);
  uint64_t v29 = v27;
  uint64_t v14 = v106;
  v28(v26, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0LL, 1LL, v22);
  sub_100006034(v108);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
LABEL_6:
    sub_100012824((uint64_t)v21, (uint64_t *)&unk_10015BA30);
    uint64_t v36 = sub_1000D322C();
    uint64_t v37 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v18, v36, v14);
    uint64_t v38 = v104;
    uint64_t v39 = swift_retain_n(v104, 2LL);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      BOOL v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v43;
      *(_DWORD *)BOOL v42 = 136315138;
      Swift::String v103 = (char *)(v42 + 4);
      uint64_t v111 = *(void *)(v38 + 24);
      uint64_t v44 = type metadata accessor for OSExtension(0LL);
      uint64_t v45 = sub_100012860( (unint64_t *)&qword_100157C70,  type metadata accessor for OSExtension,  (uint64_t)&unk_10011B528);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      unint64_t v48 = v47;
      uint64_t v111 = sub_1000058CC(v46, v47, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v103, v42 + 12);
      swift_release_n(v38, 2LL);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Omitting driver %s: does not have a bundle", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v18, v106);
    }

    else
    {

      swift_release_n(v38, 2LL);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v14);
    }

    return 0LL;
  }

  uint64_t v30 = v22;
  uint64_t v31 = (uint64_t)v103;
  uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v103, v21, v30);
  __chkstk_darwin(v32);
  *(&v95 - 2) = v31;
  uint64_t v33 = v102;
  swift_bridgeObjectRetain(v102);
  uint64_t v34 = sub_10000D150((uint64_t)sub_1000127F8, (uint64_t)(&v95 - 4), v33);
  swift_bridgeObjectRelease(v33);
  sub_100007368(v34, (uint64_t)v8);
  swift_release(v34);
  uint64_t v35 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v8, 1LL, v35) == 1)
  {
    sub_100012824((uint64_t)v8, &qword_100157ED8);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v31, v30);
    return 1LL;
  }

  uint64_t v105 = v23;
  uint64_t v102 = v30;
  uint64_t v50 = (uint64_t)&v8[*(int *)(v35 + 48)];
  os_log_t v51 = v97;
  uint64_t v52 = (uint64_t)&v10[*((int *)v97 + 12)];
  uint64_t v53 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v10, v8, v53);
  sub_100012778(v50, v52, type metadata accessor for DriverBinEntry);
  uint64_t v55 = v101;
  sub_100012778((uint64_t)&v10[*((int *)v51 + 12)], v101, type metadata accessor for DriverBinEntry);
  uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v10, v53);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 256LL))(v56);
  if (result)
  {
    uint64_t v57 = result;
    uint64_t v58 = (*(uint64_t (**)(void))(*(void *)result + 216LL))();
    swift_release(v57);
    uint64_t v59 = *(int *)(v99 + 20);
    uint64_t v60 = type metadata accessor for ApplicationRecord(0LL);
    uint64_t v61 = v60;
    Swift::String v62 = (uint64_t *)(v55 + v59 + *(int *)(v60 + 32));
    uint64_t v63 = *v62;
    unint64_t v64 = v62[1];
    uint64_t v65 = v100;
    if (*(void *)(v58 + 16))
    {
      sub_1000125E0(v63, v64);
      uint64_t v66 = sub_10000D2C0(v63, v64);
      uint64_t v68 = *(void *)(v61 - 8);
      uint64_t v69 = v96;
      if ((v67 & 1) != 0)
      {
        sub_100012734( *(void *)(v58 + 56) + *(void *)(v68 + 72) * v66,  v96,  type metadata accessor for ApplicationRecord);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v69, 0LL, 1LL, v61);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v96, 1LL, 1LL, v61);
      }
    }

    else
    {
      uint64_t v68 = *(void *)(v60 - 8);
      uint64_t v69 = v96;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v96, 1LL, 1LL, v60);
      sub_1000125E0(v63, v64);
    }

    swift_bridgeObjectRelease(v58);
    sub_10001226C(v63, v64);
    int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v69, 1LL, v61);
    sub_100012824(v69, &qword_100157ED0);
    if (v70 != 1)
    {
      sub_1000127BC(v55, type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v102);
      return 1LL;
    }

    uint64_t v71 = sub_1000D322C();
    uint64_t v73 = v106;
    uint64_t v72 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v65, v71, v106);
    uint64_t v74 = v95;
    sub_100012734(v55, v95, type metadata accessor for DriverBinEntry);
    uint64_t v75 = v104;
    uint64_t v76 = swift_retain_n(v104, 2LL);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.default.getter();
    int v79 = v78;
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v80 = swift_slowAlloc(22LL, -1LL);
      uint64_t v81 = swift_slowAlloc(64LL, -1LL);
      v108[0] = v81;
      *(_DWORD *)uint64_t v80 = 136315394;
      uint64_t v111 = *(void *)(v75 + 24);
      uint64_t v82 = type metadata accessor for OSExtension(0LL);
      LODWORD(v98) = v79;
      uint64_t v83 = v82;
      uint64_t v84 = sub_100012860( (unint64_t *)&qword_100157C70,  type metadata accessor for OSExtension,  (uint64_t)&unk_10011B528);
      os_log_t v97 = v77;
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v83, v84);
      unint64_t v87 = v86;
      uint64_t v111 = sub_1000058CC(v85, v86, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 4, v80 + 12);
      swift_release_n(v75, 2LL);
      swift_bridgeObjectRelease(v87);
      *(_WORD *)(v80 + 12) = 2080;
      uint64_t v88 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v89 = v102;
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v102, v88);
      unint64_t v92 = v91;
      uint64_t v111 = sub_1000058CC(v90, v91, v108);
      uint64_t v93 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 14, v80 + 22);
      swift_bridgeObjectRelease(v92);
      sub_1000127BC(v74, type metadata accessor for DriverBinEntry);
      os_log_t v94 = v97;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v98,  "Omitting third party driver %s at %s: app is not installed",  (uint8_t *)v80,  0x16u);
      swift_arrayDestroy(v81, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v100, v106);
      sub_1000127BC(v101, type metadata accessor for DriverBinEntry);
    }

    else
    {

      sub_1000127BC(v74, type metadata accessor for DriverBinEntry);
      swift_release_n(v75, 2LL);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v73);
      sub_1000127BC(v55, type metadata accessor for DriverBinEntry);
      uint64_t v89 = v102;
      uint64_t v93 = v103;
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v93, v89);
    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_100011A0C(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    unint64_t v8 = 0LL;
    unint64_t v9 = v6 & 0xC000000000000001LL;
    uint64_t v20 = v6;
    uint64_t v21 = v6 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v19 = i;
    while (1)
    {
      if (v9)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v6);
          swift_release(v10);
          swift_release(v23);
          return a3;
        }

        goto LABEL_9;
      }

      if (v8 >= *(void *)(v21 + 16)) {
        break;
      }
      uint64_t v10 = *(void *)(v6 + 8 * v8 + 32);
      swift_retain(v10);
      unint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v22 = v10;
      uint64_t v12 = sub_100011010(&v22, a2, (uint64_t)a3);
      if (v3) {
        goto LABEL_15;
      }
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        unint64_t v13 = v9;
        uint64_t v14 = v23[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        uint64_t v15 = v14;
        unint64_t v9 = v13;
        uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v10);
        specialized ContiguousArray._endMutation()(v16);
        uint64_t i = v19;
        uint64_t v6 = v20;
      }

      else
      {
        swift_release(v10);
      }

      ++v8;
      if (v11 == i)
      {
        a3 = v23;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (v6 < 0) {
      uint64_t v17 = v6;
    }
    else {
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  a3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return a3;
}

void *sub_100011BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v39 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v9 = __chkstk_darwin(active);
  uint64_t v36 = (uint64_t)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)v32 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  os_log_type_t v41 = _swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(a1 + 16);
  if (v35)
  {
    uint64_t v15 = 0LL;
    unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v37 = *(void *)(v11 + 72);
    v32[1] = v2;
    unint64_t v33 = v16;
    uint64_t v34 = a1 + v16;
    uint64_t v40 = a2 + 56;
    uint64_t v17 = a2;
    do
    {
      uint64_t v38 = v15;
      sub_100012734(v34 + v37 * v15, (uint64_t)v13, type metadata accessor for ActiveDriverInfo);
      if (*(void *)(a2 + 16)
        && (uint64_t v18 = *(void *)(v17 + 40),
            uint64_t v19 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL),  v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v5, v19),  v21 = -1LL << *(_BYTE *)(v17 + 32),  v22 = v20 & ~v21,  ((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) != 0))
      {
        uint64_t v23 = v17;
        uint64_t v24 = ~v21;
        uint64_t v25 = *(void *)(v39 + 72);
        uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
        while (1)
        {
          v26(v7, *(void *)(v23 + 48) + v25 * v22, v5);
          uint64_t v27 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v13, v5, v27);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v5);
          if ((v28 & 1) != 0) {
            break;
          }
          unint64_t v22 = (v22 + 1) & v24;
          uint64_t v23 = v17;
          if (((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v22) & 1) == 0) {
            goto LABEL_10;
          }
        }

        sub_1000127BC((uint64_t)v13, type metadata accessor for ActiveDriverInfo);
      }

      else
      {
LABEL_10:
        sub_100012778((uint64_t)v13, v36, type metadata accessor for ActiveDriverInfo);
        uint64_t v29 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          sub_10000CC4C(0, v29[2] + 1LL, 1);
          uint64_t v29 = v41;
        }

        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_10000CC4C(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v41;
        }

        v29[2] = v31 + 1;
        sub_100012778(v36, (uint64_t)v29 + v33 + v31 * v37, type metadata accessor for ActiveDriverInfo);
      }

      uint64_t v15 = v38 + 1;
      a2 = v17;
    }

    while (v38 + 1 != v35);
    return v41;
  }

  return result;
}

uint64_t sub_100011ED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_1000126F0();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  uint64_t v9 = result;
  if (v2)
  {
    uint64_t v5 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_1000125E0(v6, *v5);
      sub_10000E5EC(v8, v6, v7);
      sub_10001226C(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }

    while (v2);
    return v9;
  }

  return result;
}

uint64_t sub_100011F70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100008CEC( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(void **)(v2 + 64),  a2);
}

uint64_t sub_100011F94()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t active = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
    sub_1000CDE2C(0xD000000000000010LL, (char *)0x8000000100121D50LL, active, (uint64_t)&off_100146758);
    return swift_release(v2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100011FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012008(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100012010(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100012054(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v18 = *(void *)(v3 + 72);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0LL, 1LL, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_10000E390((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }

  else
  {
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1LL, 1LL, v2);
  }

  return v19;
}

uint64_t sub_100012224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001226C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t type metadata accessor for KernelStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18KernelStateManager);
}

uint64_t sub_1000122D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000123E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100005FB4((uint64_t *)&unk_10015BA50);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000124F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000125E0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100012624()
{
  unint64_t result = qword_10015BA20;
  if (!qword_10015BA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001149B8, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015BA20);
  }

  return result;
}

unint64_t sub_100012668()
{
  unint64_t result = qword_100157EA0;
  if (!qword_100157EA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100157EA0);
  }

  return result;
}

unint64_t sub_1000126AC()
{
  unint64_t result = qword_100157EB0;
  if (!qword_100157EB0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100157EB0);
  }

  return result;
}

unint64_t sub_1000126F0()
{
  unint64_t result = qword_100157EB8;
  if (!qword_100157EB8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100157EB8);
  }

  return result;
}

uint64_t sub_100012734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012778(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000127BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000127F8(uint64_t a1, uint64_t a2)
{
  return sub_1000071AC(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_100012824(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100005FB4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100012860(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000128A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  type metadata accessor for ExtensionManager();
  sub_100005F70(v5, (uint64_t)v14);
  sub_100005F70(v5, (uint64_t)v13 + 4);
  uint64_t v6 = sub_100005FB4(&qword_100157EF8);
  uint64_t v7 = swift_allocObject(v6, 60LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_10010EEF0;
  sub_100012A18(v4);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)sub_1000A44B4();
  *(_DWORD *)(v7 + 36) = *sub_1000A45F4();
  *(_DWORD *)(v7 + 40) = *sub_1000A4644();
  *(_DWORD *)(v7 + 44) = *(_DWORD *)sub_1000A4874();
  *(_DWORD *)(v7 + 48) = *(_DWORD *)sub_1000A4914();
  *(_DWORD *)(v7 + 52) = *sub_1000A48C4();
  *(_DWORD *)(v7 + 56) = *(_DWORD *)sub_1000A4A78();
  uint64_t v12 = v7;
  unint64_t v8 = sub_100012B34();
  uint64_t v9 = sub_100005FB4(&qword_100157F00);
  uint64_t v10 = sub_100012B78(&qword_100159D10, &qword_100157F00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v13, &v12, v9, v10, &type metadata for ExtensionManager.Settings.Flags, v8);
  sub_100074D44((void *)((char *)v13 + 4), (uint64_t)v4, v13[0], v15);
  uint64_t result = sub_1000A5AD0(v14, v15);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void *sub_100012A18(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[15];
  uint64_t v12 = a1[16];
  uint64_t v13 = a1[17];
  uint64_t v14 = a1[19];
  uint64_t v15 = a1[21];
  uint64_t v16 = a1[23];
  uint64_t v17 = a1[25];
  uint64_t v18 = a1[27];
  uint64_t v19 = a1[29];
  swift_bridgeObjectRetain(a1[30]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

unint64_t sub_100012B34()
{
  unint64_t result = qword_100159D00;
  if (!qword_100159D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001142D0, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D00);
  }

  return result;
}

uint64_t sub_100012B78(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100012010(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100012BBC(uint64_t a1, uint64_t a2)
{
  return sub_100013274(a1, a2, (SEL *)&selRef__overrideExecutablePath);
}

void sub_100012BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void (*sub_100012BD4(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100012C20(v2);
  return sub_100012C1C;
}

void (*sub_100012C20(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = [v1 _overrideExecutablePath];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  *a1 = v5;
  a1[1] = v7;
  return sub_100012C94;
}

void sub_100012C94(uint64_t a1, char a2)
{
}

id sub_100012CA0()
{
  return [*v0 executionOptions];
}

id sub_100012CB0(uint64_t a1)
{
  return [*v1 setExecutionOptions:a1];
}

id (*sub_100012CC4(void *a1))(uint64_t a1)
{
  id v3 = *v1;
  a1[1] = *v1;
  *a1 = [v3 executionOptions];
  return sub_100012D04;
}

id sub_100012D04(uint64_t a1)
{
  return [*(id *)(a1 + 8) setExecutionOptions:*(void *)a1];
}

uint64_t sub_100012D18()
{
  id v1 = [*v0 arguments];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v3;
}

void sub_100012D70(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    Class isa = 0LL;
  }

  [v2 setArguments:isa];
}

void (*sub_100012DDC(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100012E24(v2);
  return sub_100012C1C;
}

void (*sub_100012E24(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  id v3 = [v1 arguments];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a1 = v5;
  return sub_100012E98;
}

void sub_100012E98(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*a1);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
    }

    else
    {
      Class isa = 0LL;
    }

    [(id)a1[1] setArguments:isa];
    swift_bridgeObjectRelease(v3);
  }

  else if (v3)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    [(id)a1[1] setArguments:isa];
  }

  else
  {
    Class isa = 0LL;
    [(id)a1[1] setArguments:0];
  }
}

uint64_t sub_100012F50()
{
  id v1 = [*v0 _additionalEnvironment];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

void sub_100012FBC(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    Class isa = 0LL;
  }

  [v2 _setAdditionalEnvironment:isa];
}

void (*sub_10001303C(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100013084(v2);
  return sub_100012C1C;
}

void (*sub_100013084(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  id v3 = [v1 _additionalEnvironment];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a1 = v5;
  return sub_10001310C;
}

void sub_10001310C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*a1);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
    }

    else
    {
      Class isa = 0LL;
    }

    [(id)a1[1] _setAdditionalEnvironment:isa];
    swift_bridgeObjectRelease(v3);
  }

  else if (v3)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    [(id)a1[1] _setAdditionalEnvironment:isa];
  }

  else
  {
    Class isa = 0LL;
    [(id)a1[1] _setAdditionalEnvironment:0];
  }
}

id sub_1000131EC()
{
  return [*v0 dextCheckInPort];
}

id sub_1000131FC(uint64_t a1)
{
  return [*v1 setDextCheckInPort:a1];
}

id (*sub_100013210(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = [v3 dextCheckInPort];
  return sub_100013250;
}

id sub_100013250(uint64_t a1)
{
  return [*(id *)a1 setDextCheckInPort:*(unsigned int *)(a1 + 8)];
}

uint64_t sub_100013268(uint64_t a1, uint64_t a2)
{
  return sub_100013274(a1, a2, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_100013274(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_1000132D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000132E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = *v5;
  if (a2)
  {
    id v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    id v9 = 0LL;
  }

  objc_msgSend(v7, *a5, v9);
}

void (*sub_100013344(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_10001338C(v2);
  return sub_100012C1C;
}

void (*sub_10001338C(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = [v1 bundleIdentifier];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  *a1 = v5;
  a1[1] = v7;
  return sub_100013400;
}

void sub_100013400(uint64_t a1, char a2)
{
}

void sub_10001340C(uint64_t a1, char a2, SEL *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v5)
    {
      swift_bridgeObjectRetain(*(void *)(a1 + 8));
      id v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
    }

    else
    {
      id v6 = 0LL;
    }

    objc_msgSend(*(id *)(a1 + 16), *a3, v6);
    swift_bridgeObjectRelease(v5);
  }

  else if (v5)
  {
    id v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    objc_msgSend(*(id *)(a1 + 16), *a3, v6);
  }

  else
  {
    id v6 = 0LL;
    objc_msgSend(*(id *)(a1 + 16), *a3, 0);
  }
}

id sub_1000134C8()
{
  return sub_1000134E8();
}

id sub_1000134E8()
{
  id v5 = 0LL;
  unsigned int v1 = [v0 execute:&v5];
  id v2 = v5;
  if (v1) {
    return v5;
  }
  id v4 = v5;
  _convertNSErrorToError(_:)(v2);

  return (id)swift_willThrow();
}

uint64_t sub_10001358C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157F08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_1000135D8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100157F08);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_100013644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_1000135D8(v10, v7, v8);
}

uint64_t sub_1000136BC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 identityForDextWithServerName:v4 tagString:v5 containingAppBundleID:v6];

  uint64_t result = sub_100006094(0LL, &qword_100157F10, &OBJC_CLASS___RBSProcessIdentity_ptr);
  a1[3] = result;
  a1[4] = &off_100145EB0;
  *a1 = v7;
  return result;
}

uint64_t sub_100013790@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = sub_100005FB4(&qword_100157F18);
  uint64_t v4 = sub_100006094(0LL, &qword_100157F10, &OBJC_CLASS___RBSProcessIdentity_ptr);
  swift_dynamicCast(&v9, v8, v3, v4, 7LL);
  NSString v5 = v9;
  id v6 = [(id)objc_opt_self(RBSLaunchContext) contextWithIdentity:v9];

  uint64_t result = sub_100006094(0LL, &qword_100157F20, &OBJC_CLASS___RBSLaunchContext_ptr);
  a2[3] = result;
  a2[4] = &off_100145EB8;
  *a2 = v6;
  return result;
}

uint64_t sub_10001386C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = sub_100005FB4(&qword_100157F28);
  uint64_t v4 = sub_100006094(0LL, &qword_100157F20, &OBJC_CLASS___RBSLaunchContext_ptr);
  swift_dynamicCast(&v9, v8, v3, v4, 7LL);
  NSString v5 = v9;
  id v6 = [objc_allocWithZone(RBSLaunchRequest) initWithContext:v9];

  uint64_t result = sub_100006094(0LL, &qword_100157F30, &OBJC_CLASS___RBSLaunchRequest_ptr);
  a2[3] = result;
  a2[4] = &off_100145F50;
  *a2 = v6;
  return result;
}

uint64_t sub_100013940()
{
  unint64_t v0 = sub_100012624();
  uint64_t v1 = swift_allocError(&type metadata for KMError, v0, 0LL, 0LL);
  *(void *)uint64_t v2 = 0xD00000000000004ELL;
  *(void *)(v2 + 8) = 0x8000000100121F70LL;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0LL;
  *(_BYTE *)(v2 + 72) = 50;
  return swift_willThrow(v1);
}

uint64_t sub_1000139DC(uint64_t a1)
{
  return sub_100013A34(a1, 0xD000000000000031LL, 0x8000000100121FC0LL);
}

uint64_t sub_100013A08(uint64_t a1)
{
  return sub_100013A34(a1, 0xD000000000000030LL, 0x8000000100122000LL);
}

uint64_t sub_100013A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_100012624();
  uint64_t v6 = swift_allocError(&type metadata for KMError, v5, 0LL, 0LL);
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(void *)(v7 + 64) = 0LL;
  *(_BYTE *)(v7 + 72) = 50;
  return swift_willThrow(v6);
}

uint64_t sub_100013AC8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t sub_100013AF0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t sub_100013B18()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t type metadata accessor for NullRunningBoardSupport()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd23NullRunningBoardSupport);
}

uint64_t sub_100013B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v5 = sub_100013F74();
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

void sub_100013BE0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_100013C38(uint64_t a1)
{
  uint64_t v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(void *)(v3 - 104) = v2;
    uint64_t v5 = BYTE6(v24);
    uint64_t v6 = sub_10000CC84(0, BYTE6(v24), 0);
    uint64_t v2 = *(void *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1) {
        uint64_t v7 = (int)a1;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 16);
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    *(void *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(void *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          uint64_t v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }

          uint64_t v9 = v8;
          uint64_t v10 = __DataStorage._offset.getter();
          uint64_t v11 = v7 - v10;
          if (__OFSUB__(v7, v10)) {
            goto LABEL_32;
          }
        }

        else
        {
          if (v7 < *(void *)(a1 + 16)) {
            goto LABEL_31;
          }
          if (v7 >= *(void *)(a1 + 24)) {
            goto LABEL_33;
          }
          uint64_t v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13) {
            goto LABEL_36;
          }
          uint64_t v9 = v13;
          uint64_t v14 = __DataStorage._offset.getter();
          uint64_t v11 = v7 - v14;
          if (__OFSUB__(v7, v14)) {
            goto LABEL_34;
          }
        }

        char v12 = *(_BYTE *)(v9 + v11);
      }

      else
      {
        if (v7 >= BYTE6(v24)) {
          goto LABEL_30;
        }
        *(void *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        char v12 = *(_BYTE *)(v3 - 118 + v7);
      }

      uint64_t v15 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
      *(_OWORD *)(v16 + 16) = xmmword_10010F110;
      *(void *)(v16 + 56) = &type metadata for UInt8;
      *(void *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      uint64_t v6 = String.init(format:_:)(2016555045LL, 0xE400000000000000LL, v16);
      uint64_t v17 = v6;
      uint64_t v19 = v18;
      *(void *)(v3 - 104) = v2;
      unint64_t v21 = *(void *)(v2 + 16);
      unint64_t v20 = *(void *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t v6 = sub_10000CC84(v20 > 1, v21 + 1, 1);
        uint64_t v2 = *(void *)(v3 - 104);
      }

      *(void *)(v2 + 16) = v21 + 1;
      uint64_t v22 = v2 + 16 * v21;
      *(void *)(v22 + 32) = v17;
      *(void *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      uint64_t v1 = *(void *)(v3 - 128);
      if (!v4) {
        return v2;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x100013F4CLL);
  }

  return v2;
}

unint64_t sub_100013F74()
{
  unint64_t result = qword_10015BA60;
  if (!qword_10015BA60)
  {
    uint64_t v1 = sub_100012010((uint64_t *)&unk_10015A5A0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BA60);
  }

  return result;
}

uint64_t sub_100013FC0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t result = swift_bridgeObjectRetain(a2);
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    a1 = sub_100014314(a1, v2);
    unint64_t v25 = v24;
    uint64_t result = swift_bridgeObjectRelease(v2);
    unint64_t v2 = v25;
    if ((v25 & 0x2000000000000000LL) == 0)
    {
LABEL_3:
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a1 & 1) != 0) {
          goto LABEL_62;
        }
      }

      else
      {
        uint64_t result = _StringObject.sharedUTF8.getter(a1, v2);
        uint64_t v5 = result;
        uint64_t v6 = v35;
        if ((v35 & 1) != 0) {
          goto LABEL_62;
        }
      }

      if (v6 >= 0) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v6 + 1;
      }
      if ((unint64_t)v6 >= 2)
      {
        uint64_t v9 = v7 >> 1;
        if (v6 > 29)
        {
          uint64_t v10 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
          uint64_t v11 = __DataStorage.init(length:)(v9);
          if ((unint64_t)v6 >= 0xFFFFFFFE)
          {
            uint64_t v15 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v12 = swift_allocObject(v15, 32LL, 7LL);
            *(void *)(v12 + 16) = 0LL;
            *(void *)(v12 + 24) = v9;
            unint64_t v13 = 0x8000000000000000LL;
          }

          else
          {
            uint64_t v12 = v9 << 32;
            unint64_t v13 = 0x4000000000000000LL;
          }

          uint64_t v38 = v12;
          uint64_t v39 = v13 | v11;
          goto LABEL_19;
        }

        if (v6 < -1)
        {
          __break(1u);
          return result;
        }

        unint64_t v8 = (unint64_t)(v7 >> 1) << 48;
      }

      else
      {
        unint64_t v8 = 0xC000000000000000LL;
      }

      uint64_t v38 = 0LL;
      uint64_t v39 = v8;
      if (v6 <= 0)
      {
        uint64_t v14 = 0LL;
        goto LABEL_63;
      }

LABEL_19:
      uint64_t v16 = 0LL;
      while (1)
      {
        if (__OFADD__(v16, 2LL)) {
          uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v18 = v16 + 2;
        }
        int v19 = *(unsigned __int8 *)(v5 + v16);
        if ((v19 - 58) >= 0xF6u)
        {
          int v20 = 208;
        }

        else if ((v19 - 103) > 0xF9u)
        {
          int v20 = 169;
        }

        else
        {
          int v20 = 201;
        }

        int v21 = *(unsigned __int8 *)(v16 + v5 + 1);
        if ((v21 - 58) > 0xF5u)
        {
          int v17 = 208;
        }

        else if ((v21 - 103) > 0xF9u)
        {
          int v17 = 169;
        }

        else
        {
          if ((v21 - 71) < 0xFAu)
          {
LABEL_37:
            uint64_t v22 = v38;
            unint64_t v23 = v39;
            goto LABEL_61;
          }

          int v17 = 201;
        }

        Data._Representation.subscript.setter((v17 + v21) | (16 * (v20 + v19)), v16 / 2);
        uint64_t v16 = v18;
        if (v18 >= v6)
        {
          uint64_t v14 = v38;
          goto LABEL_63;
        }
      }
    }
  }

  else if ((v2 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v38 = a1;
  uint64_t v39 = v2 & 0xFFFFFFFFFFFFFFLL;
  if ((v2 & 0x100000000000000LL) != 0) {
    goto LABEL_62;
  }
  uint64_t v26 = HIBYTE(v2) & 0xF;
  uint64_t v27 = sub_100014848((unint64_t)v26 >> 1);
  uint64_t v36 = v27;
  unint64_t v37 = v28;
  if (!v26)
  {
    uint64_t v14 = v27;
    goto LABEL_63;
  }

  uint64_t v29 = 0LL;
  while (1)
  {
    uint64_t v31 = __OFADD__(v29, 2LL) ? 0x7FFFFFFFFFFFFFFFLL : v29 + 2;
    int v32 = *((unsigned __int8 *)&v38 + v29);
    if ((v32 - 58) >= 0xF6u)
    {
      int v33 = 208;
    }

    else if ((v32 - 103) > 0xF9u)
    {
      int v33 = 169;
    }

    else
    {
      int v33 = 201;
    }

    int v34 = *((unsigned __int8 *)&v38 + v29 + 1);
    int v30 = 208;
LABEL_43:
    Data._Representation.subscript.setter((v34 + v30) | (16 * (v32 + v33)), v29 / 2);
    uint64_t v29 = v31;
    if (v31 >= v26)
    {
      uint64_t v14 = v36;
      goto LABEL_63;
    }
  }

  if ((v34 - 103) > 0xF9u)
  {
    int v30 = 169;
    goto LABEL_43;
  }

  if ((v34 - 71) >= 0xFAu)
  {
    int v30 = 201;
    goto LABEL_43;
  }

        uint64_t v9 = __clz(__rbit64(v10)) + (i << 6);
LABEL_20:
        unint64_t v13 = *(void *)(v3 + 48) + 40 * v9;
        uint64_t v14 = *(void *)v13;
        uint64_t v15 = *(void *)(v13 + 8);
        uint64_t v16 = *(unsigned __int8 *)(v13 + 16);
        int v17 = *(void *)(v13 + 24);
        uint64_t v18 = *(void *)(v13 + 32);
        Hasher.init(_seed:)(v22, *(void *)(v5 + 40));
        swift_bridgeObjectRetain_n(v15, 2LL);
        sub_10002B568(v17, v18);
        String.hash(into:)(v22, v14, v15);
        swift_bridgeObjectRelease(v15);
        __asm { BR              X8 }
      }
    }
  }

        int v20 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }

        int v20 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }

  sub_10004C358(v51);
  return v32;
}

    uint64_t v11 = (v15 - 1) & v15;
  }

  uint64_t v66 = 8 * i;
  char v67 = i;
  uint64_t v68 = v11;
  uint64_t v69 = v7;
  uint64_t v73 = v19 + 32;
  unint64_t v64 = v19;
  swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v65 = v18;
  swift_retain(v18);
  int v20 = 0LL;
  while (2)
  {
    int v21 = (uint64_t *)(v73 + 24 * v20);
    uint64_t v3 = v21[1];
    uint64_t v11 = v21[2];
    uint64_t v22 = *v21;
    swift_bridgeObjectRetain(v3);
    sub_10004F9C0(v11);
    unint64_t v23 = *a2;
    if (*(void *)(*a2 + 16))
    {
      swift_bridgeObjectRetain(v3);
      unint64_t v24 = sub_100006114(v22, v3);
      if ((v25 & 1) != 0)
      {
        uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRetain(v3);
        sub_10004F9C0(v11);
        uint64_t v27 = v80;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v80);
        v79[0] = v27;
        sub_10004F6BC(v26, v22, v3, v11, isUniquelyReferenced_nonNull_native);
        uint64_t v80 = (void *)v79[0];
        swift_bridgeObjectRelease(0x8000000000000000LL);
        swift_bridgeObjectRelease(v3);
        sub_10004F9E4(v11);
        goto LABEL_59;
      }

      swift_bridgeObjectRelease(v3);
    }

    uint64_t v77 = v11;
    uint64_t v75 = v20;
    uint64_t v29 = *a3;
    int v30 = *a3 + 64;
    uint64_t v31 = 1LL << *(_BYTE *)(*a3 + 32);
    if (v31 < 64) {
      int v32 = ~(-1LL << v31);
    }
    else {
      int v32 = -1LL;
    }
    int v33 = v32 & *(void *)(*a3 + 64);
    os_log_type_t v78 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain(v29);
    uint64_t v76 = 0;
    int v34 = 0LL;
    if (v33)
    {
LABEL_30:
      uint64_t v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      uint64_t v36 = v35 | (v34 << 6);
      goto LABEL_31;
    }

    while (1)
    {
      os_log_type_t v41 = v34 + 1;
      if (__OFADD__(v34, 1LL))
      {
        __break(1u);
LABEL_67:
        __break(1u);
        return (uint64_t)v6;
      }

      if (v41 >= v78) {
        break;
      }
      BOOL v42 = *(void *)(v30 + 8 * v41);
      ++v34;
      if (v42) {
        goto LABEL_46;
      }
      int v34 = v41 + 1;
      if (v41 + 1 >= v78) {
        break;
      }
      BOOL v42 = *(void *)(v30 + 8 * v34);
      if (v42) {
        goto LABEL_46;
      }
      int v34 = v41 + 2;
      if (v41 + 2 >= v78) {
        break;
      }
      BOOL v42 = *(void *)(v30 + 8 * v34);
      if (v42) {
        goto LABEL_46;
      }
      uint64_t v43 = v41 + 3;
      if (v43 >= v78) {
        break;
      }
      BOOL v42 = *(void *)(v30 + 8 * v43);
      if (!v42)
      {
        while (1)
        {
          int v34 = v43 + 1;
          if (__OFADD__(v43, 1LL)) {
            goto LABEL_67;
          }
          if (v34 >= v78) {
            goto LABEL_57;
          }
          BOOL v42 = *(void *)(v30 + 8 * v34);
          ++v43;
          if (v42) {
            goto LABEL_46;
          }
        }
      }

      int v34 = v43;
LABEL_46:
      int v33 = (v42 - 1) & v42;
      uint64_t v36 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_31:
      unint64_t v37 = *(void *)(v29 + 48) + 16 * v36;
      uint64_t v6 = *(void **)v37;
      uint64_t v38 = *(void *)(v37 + 8);
      uint64_t v39 = *(void **)(*(void *)(v29 + 56) + 8 * v36);
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      uint64_t v40 = sub_100032F98((uint64_t)v6, v38, v22, v3);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v38);
      if ((v40 & 1) != 0)
      {
        uint64_t v44 = v80;
        if (!v80[2]) {
          goto LABEL_51;
        }
        swift_bridgeObjectRetain(v3);
        uint64_t v45 = v77;
        sub_10004F9C0(v77);
        uint64_t v46 = sub_10004DCDC(v22, v3, v77);
        if ((v47 & 1) == 0)
        {
          swift_bridgeObjectRelease(v3);
          sub_10004F9E4(v77);
LABEL_51:
          swift_bridgeObjectRetain(v3);
          uint64_t v45 = v77;
          sub_10004F9C0(v77);
          uint64_t v49 = swift_isUniquelyReferenced_nonNull_native(v44);
          v79[0] = v44;
          sub_10004F6BC((uint64_t)_swiftEmptyArrayStorage, v22, v3, v77, v49);
          uint64_t v80 = (void *)v79[0];
          swift_bridgeObjectRelease(0x8000000000000000LL);
          swift_bridgeObjectRelease(v3);
          sub_10004F9E4(v77);
          goto LABEL_52;
        }

        unint64_t v48 = *(void *)(v44[7] + 8 * v46);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRelease(v3);
        sub_10004F9E4(v77);
        swift_bridgeObjectRelease(v48);
LABEL_52:
        swift_bridgeObjectRetain(v3);
        sub_10004F9C0(v45);
        uint64_t v50 = sub_10004D5A4(v79, v22, v3, v45);
        if (*v51 > 1uLL) {
          sub_10004D66C(v39);
        }
        else {
          swift_bridgeObjectRelease(v39);
        }
        ((void (*)(void *, void))v50)(v79, 0LL);
        swift_bridgeObjectRelease(v3);
        sub_10004F9E4(v77);
        uint64_t v76 = 1;
        if (v33) {
          goto LABEL_30;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v39);
        if (v33) {
          goto LABEL_30;
        }
      }
    }

  uint64_t result = sub_10005C854(&v21);
  a1 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000LL) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000LL) == 0)
  {
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_22;
    }
LABEL_27:
    swift_release(_swiftEmptyArrayStorage);
    return 0LL;
  }

  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  int v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  uint64_t result = (void *)swift_release(_swiftEmptyArrayStorage);
  if (!v20) {
    goto LABEL_27;
  }
LABEL_22:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001LL) != 0)
  {
LABEL_30:
    uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_25;
  }

  if (_swiftEmptyArrayStorage[2])
  {
    uint64_t v18 = _swiftEmptyArrayStorage[4];
    swift_retain(v18);
LABEL_25:
    swift_release(a1);
    return (void *)v18;
  }

  __break(1u);
  return result;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  unint64_t v8 = 1;
  uint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  os_log_type_t v41 = v14;
  sub_1000E2530(v19, v21, v75, a3, a4, a5);
  if (!v14)
  {
    swift_bridgeObjectRelease(v65);
    return swift_bridgeObjectRelease(v21);
  }

  uint64_t v88 = v14;
  swift_errorRetain(v14);
  BOOL v42 = sub_100005FB4(&qword_10015AB20);
  if (!swift_dynamicCast(&v77, &v88, v42, &type metadata for KMError, 0LL))
  {
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v21);
    return swift_errorRelease(v88);
  }

  uint64_t v74 = v21;
  uint64_t v71 = v19;
  uint64_t v72 = v17;
  uint64_t v73 = v16;
  uint64_t v43 = v77;
  uint64_t v44 = v78;
  uint64_t v45 = v79;
  uint64_t v46 = v80;
  unint64_t v47 = v81;
  unint64_t v48 = v83;
  uint64_t v49 = v84;
  uint64_t v50 = v85;
  os_log_t v51 = v86;
  if (v86 == 16)
  {
    sub_100039508(v77, v78, v79, v80, v81, v82, v83, v84, v85, 16);
    uint64_t v52 = swift_errorRelease(v41);
    uint64_t v53 = static os_log_type_t.info.getter(v52);
    uint64_t v54 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v55 = swift_allocObject(v54, 72LL, 7LL);
    *(_OWORD *)(v55 + 16) = xmmword_10010F110;
    uint64_t v56 = sub_1000D409C(v71, v74, v75);
    uint64_t v58 = v57;
    swift_bridgeObjectRelease(v74);
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 64) = sub_100026B64();
    *(void *)(v55 + 32) = v56;
    *(void *)(v55 + 40) = v58;
    uint64_t v59 = sub_100026BA8();
    uint64_t v60 = (void *)static OS_os_log.default.getter(v59);
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v60, "Can't find arch %{public}s in binary", 36LL, 2LL, v55);
    swift_bridgeObjectRelease(v55);

    swift_errorRelease(v88);
    uint64_t v14 = 0LL;
    int v17 = v72;
    uint64_t v16 = v73;
    goto LABEL_3;
  }

  uint64_t v76 = v82;
  swift_bridgeObjectRelease(v74);
  sub_100039508(v43, v44, v45, v46, v47, v76, v48, v49, v50, v51);
  swift_bridgeObjectRelease(v65);
  return swift_errorRelease(v88);
}

LABEL_60:
  uint64_t v22 = v36;
  unint64_t v23 = v37;
LABEL_61:
  sub_10001226C(v22, v23);
LABEL_62:
  uint64_t v14 = 0LL;
LABEL_63:
  swift_bridgeObjectRelease(v2);
  return v14;
}

uint64_t sub_100014314(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100014390(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100014390(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1000144D4(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_100005D5C(v12, 0LL);
      unint64_t v5 = sub_1000145C0((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

LABEL_11:
      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

  unint64_t v28 = sub_1000D334C();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v12, v28, v3);
  uint64_t v29 = swift_bridgeObjectRetain_n(v13, 2LL);
  int v30 = (void *)Logger.logObject.getter(v29);
  uint64_t v31 = static os_log_type_t.error.getter(v30);
  if (!os_log_type_enabled((os_log_t)v30, v31))
  {

    swift_bridgeObjectRelease_n(v13, 2LL);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v4 + 8);
    os_log_type_t v41 = v12;
LABEL_14:
    v40(v41, v3);
    goto LABEL_15;
  }

  int v32 = swift_slowAlloc(22LL, -1LL);
  int v33 = swift_slowAlloc(64LL, -1LL);
  *(void *)&os_log_t v97 = v33;
  *(_DWORD *)int v32 = 136315394;
  int v34 = swift_bridgeObjectRetain(v13);
  uint64_t v93 = v4;
  unint64_t v91 = (char *)&type metadata for Any + 8;
  uint64_t v35 = Dictionary.description.getter(v34);
  unint64_t v92 = v3;
  unint64_t v37 = v36;
  swift_bridgeObjectRelease(v13);
  uint64_t v95 = sub_1000058CC(v35, v37, (uint64_t *)&v97);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v32 + 4, v32 + 12);
  swift_bridgeObjectRelease_n(v13, 2LL);
  swift_bridgeObjectRelease(v37);
  *(_WORD *)(v32 + 12) = 2080;
  uint64_t v38 = *v15;
  uint64_t v39 = v15[1];
  swift_bridgeObjectRetain(v39);
  uint64_t v95 = sub_1000058CC(v38, v39, (uint64_t *)&v97);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v32 + 14, v32 + 22);
  swift_bridgeObjectRelease(v39);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  v31,  "Codeless info %s did not contain data for key %s",  (uint8_t *)v32,  0x16u);
  swift_arrayDestroy(v33, 2LL, v91);
  swift_slowDealloc(v33, -1LL, -1LL);
  swift_slowDealloc(v32, -1LL, -1LL);

  (*(void (**)(char *, uint64_t))(v93 + 8))(v12, v92);
LABEL_15:
  BOOL v42 = sub_100005FB4(&qword_100158798);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))( v94,  1LL,  1LL,  v42);
}

      int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10002B1B0();
      goto LABEL_7;
    }

    sub_10002ADFC(v16, a4 & 1);
    int v20 = sub_100006114(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

      int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10003615C();
      goto LABEL_7;
    }

    sub_100035960(v16, a4 & 1);
    int v20 = sub_100006114(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  os_log_type_t v41 = sub_1000D42D4(v139);
  uint64_t v43 = v42;
  *(void *)&Swift::String v137 = 0LL;
  *((void *)&v137 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease(*((void *)&v137 + 1));
  *(void *)&Swift::String v137 = 0xD00000000000001CLL;
  *((void *)&v137 + 1) = 0x8000000100123690LL;
  uint64_t v44 = *v33;
  uint64_t v45 = (void *)v33[1];
  swift_bridgeObjectRetain(v45);
  v46._countAndFlagsBits = v44;
  v46._uint64_t object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  unint64_t v47 = v137;
  unint64_t v48 = sub_100012624();
  uint64_t v49 = swift_allocError(&type metadata for KMError, v48, 0LL, 0LL);
  *(void *)uint64_t v50 = v41;
  *(void *)(v50 + 8) = v43;
  *(_OWORD *)(v50 + 16) = v47;
  *(_OWORD *)(v50 + 32) = 0u;
  *(_OWORD *)(v50 + 48) = 0u;
  *(void *)(v50 + 64) = 0LL;
  *(_BYTE *)(v50 + 72) = 6;
  swift_willThrow(v49);
  return sub_100012824((uint64_t)v28, &qword_1001591B0);
}

      int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10004F158();
      goto LABEL_7;
    }

    sub_10004E4E8(v16, a4 & 1);
    int v20 = sub_100006114(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

      int v21 = 1LL;
      goto LABEL_12;
    }

    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_10004F30C();
      goto LABEL_7;
    }

    sub_10004E7FC(v18, a5 & 1);
    uint64_t v22 = sub_10004DCDC(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      uint64_t v15 = v22;
      v12[5] = v22;
      if ((v19 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSymbol);
  __break(1u);
  return result;
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    unint64_t v25 = (uint64_t *)(v20[6] + 24 * v14);
    *unint64_t v25 = a2;
    v25[1] = a3;
    v25[2] = a4;
    *(void *)(v20[7] + 8 * v14) = a1;
    uint64_t v26 = v20[2];
    uint64_t v27 = __OFADD__(v26, 1LL);
    unint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a3);
      return sub_10004F9C0(a4);
    }

    goto LABEL_14;
  }

  sub_10004E7FC(v17, a5 & 1);
  unint64_t v23 = sub_10004DCDC(a2, a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    int v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  __break(1u);
}

  swift_release(*(void *)(*(void *)(v4 + 48) + 8 * a1));
  uint64_t v14 = *(void *)(*(void *)(v4 + 56) + 8 * a1);
  sub_100056578(a1, v4);
  uint64_t v15 = *v2;
  *uint64_t v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    int v21 = 8 * v10;
    *(void *)(v16[6] + v21) = a2;
    *(void *)(v16[7] + v21) = a1;
    uint64_t v22 = v16[2];
    unint64_t v23 = __OFADD__(v22, 1LL);
    unint64_t v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return swift_retain(a2);
    }

    goto LABEL_14;
  }

  sub_100055DE0(v13, a3 & 1);
  int v19 = sub_1000549AC(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    uint64_t v10 = v19;
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      uint64_t v16 = 0LL;
      goto LABEL_12;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100056944();
      goto LABEL_7;
    }

    sub_100055434(v13, a3 & 1);
    int v17 = sub_100054AA8(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      uint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (unint64_t (*)(unint64_t, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionKind);
  __break(1u);
  return result;
}

      int v17 = 0LL;
      goto LABEL_12;
    }

    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100056AE4();
      goto LABEL_7;
    }

    sub_100055738(v14, a3 & 1);
    uint64_t v18 = sub_100054A3C(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      uint64_t v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  int v21 = type metadata accessor for URL(0LL);
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

      int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100056D14();
      goto LABEL_7;
    }

    sub_100055ACC(v16, a4 & 1);
    int v20 = sub_100006114(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

        a2 = (a2 + 1) & v37;
      }

      while (((*(void *)(v39 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
    }
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    int v19 = v16[2];
    int v20 = __OFADD__(v19, 1LL);
    int v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }

    goto LABEL_14;
  }

  sub_100078670(result, a3 & 1);
  uint64_t result = sub_1000784FC(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    uint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1000B0268();
      goto LABEL_7;
    }

    sub_1000AF810(v16, a4 & 1);
    int v20 = sub_100006114(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    void *v24 = v26;
    swift_retain(v26);
    goto LABEL_16;
  }

  if (v26 == 5)
  {
    sub_1000B32FC((unint64_t *)(a1 + 136));
LABEL_14:
    uint64_t v27 = *(void *)(a2 + 136);
    goto LABEL_15;
  }

  if (v25 < 5)
  {
    if (v26 < 5) {
      goto LABEL_3;
    }
    goto LABEL_11;
  }

  if (v26 < 5)
  {
    swift_release(*(void *)(a1 + 136));
    goto LABEL_14;
  }

  void *v24 = v26;
  swift_retain(v26);
  swift_release(v25);
LABEL_16:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  unint64_t v28 = *(void *)(a2 + 152);
  uint64_t v29 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  int v30 = *(void *)(a2 + 160);
  uint64_t v31 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  int v32 = *(void *)(a2 + 168);
  int v33 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  int v34 = *(void *)(a2 + 184);
  uint64_t v35 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v36 = *(void *)(a2 + 208);
  unint64_t v37 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = *(void *)(a2 + 216);
  uint64_t v39 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v40 = *(void *)(a2 + 232);
  os_log_type_t v41 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  BOOL v42 = *(void *)(a2 + 248);
  uint64_t v43 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v44 = *(void *)(a2 + 264);
  uint64_t v45 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v46 = *(void *)(a2 + 280);
  unint64_t v47 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  unint64_t v48 = *(void *)(a2 + 296);
  uint64_t v49 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = *(void *)(a2 + 304);
  os_log_t v51 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = *(void *)(a2 + 312);
  uint64_t v53 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = *(void *)(a2 + 320);
  uint64_t v55 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = *(void *)(a2 + 328);
  uint64_t v57 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  uint64_t v58 = *(void *)(a2 + 344);
  uint64_t v59 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  uint64_t v60 = *(void *)(a2 + 360);
  uint64_t v61 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  Swift::String v62 = *(void *)(a2 + 376);
  uint64_t v63 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  unint64_t v64 = *(void *)(a2 + 392);
  uint64_t v65 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  uint64_t v66 = *(void *)(a2 + 408);
  char v67 = *(void *)(a1 + 408);
  *(void *)(a1 + 408) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  uint64_t v68 = *(void *)(a2 + 424);
  uint64_t v69 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  int v70 = *(void *)(a1 + 432);
  uint64_t v71 = *(void *)(a2 + 432);
  *(void *)(a1 + 432) = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v70);
  uint64_t v72 = *(void *)(a1 + 440);
  uint64_t v73 = *(void *)(a2 + 440);
  *(void *)(a1 + 440) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v72);
  uint64_t v74 = (_OWORD *)(a1 + 448);
  uint64_t v75 = (_OWORD *)(a2 + 448);
  uint64_t v76 = *(void *)(a1 + 456);
  uint64_t v77 = *(void *)(a2 + 456);
  if (v76)
  {
    if (v77)
    {
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      os_log_type_t v78 = *(void *)(a2 + 456);
      *(void *)(a1 + 456) = v78;
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRelease(v76);
      *(void *)(a1 + 464) = *(void *)(a2 + 464);
      int v79 = *(void *)(a2 + 472);
      uint64_t v80 = *(void *)(a1 + 472);
      *(void *)(a1 + 472) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v80);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      uint64_t v81 = *(void *)(a2 + 488);
      uint64_t v82 = *(void *)(a1 + 488);
      *(void *)(a1 + 488) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82);
      uint64_t v83 = *(void *)(a2 + 496);
      uint64_t v84 = *(void *)(a1 + 496);
      *(void *)(a1 + 496) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease(v84);
      uint64_t v85 = *(void *)(a2 + 504);
      unint64_t v86 = *(void *)(a1 + 504);
      *(void *)(a1 + 504) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86);
      unint64_t v87 = *(void *)(a2 + 512);
      uint64_t v88 = *(void *)(a1 + 512);
      *(void *)(a1 + 512) = v87;
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRelease(v88);
      uint64_t v89 = *(void *)(a2 + 520);
      uint64_t v90 = *(void *)(a1 + 520);
      *(void *)(a1 + 520) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
    }

    else
    {
      sub_1000B3330((void *)(a1 + 448));
      *uint64_t v74 = *v75;
      uint64_t v98 = *(_OWORD *)(a2 + 512);
      unint64_t v100 = *(_OWORD *)(a2 + 464);
      uint64_t v99 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 512) = v98;
      *(_OWORD *)(a1 + 464) = v100;
      *(_OWORD *)(a1 + 480) = v99;
    }
  }

  else if (v77)
  {
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    unint64_t v91 = *(void *)(a2 + 456);
    *(void *)(a1 + 456) = v91;
    *(void *)(a1 + 464) = *(void *)(a2 + 464);
    unint64_t v92 = *(void *)(a2 + 472);
    *(void *)(a1 + 472) = v92;
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    uint64_t v93 = *(void *)(a2 + 488);
    *(void *)(a1 + 488) = v93;
    os_log_t v94 = *(void *)(a2 + 496);
    *(void *)(a1 + 496) = v94;
    uint64_t v95 = *(void *)(a2 + 504);
    *(void *)(a1 + 504) = v95;
    uint64_t v96 = *(void *)(a2 + 512);
    *(void *)(a1 + 512) = v96;
    os_log_t v97 = *(void *)(a2 + 520);
    *(void *)(a1 + 520) = v97;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v97);
  }

  else
  {
    *uint64_t v74 = *v75;
    uint64_t v101 = *(_OWORD *)(a2 + 464);
    uint64_t v102 = *(_OWORD *)(a2 + 480);
    Swift::String v103 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v103;
    *(_OWORD *)(a1 + 464) = v101;
    *(_OWORD *)(a1 + 480) = v102;
  }

  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v104 = *(void *)(a2 + 536);
  uint64_t v105 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  uint64_t v106 = (_OWORD *)(a1 + 544);
  uint64_t v107 = (_OWORD *)(a2 + 544);
  uint64_t v108 = *(void *)(a1 + 544);
  uint64_t v109 = *(void *)(a2 + 544);
  if (v108)
  {
    if (v109)
    {
      *(void *)(a1 + 544) = v109;
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRelease(v108);
      uint64_t v110 = *(void *)(a2 + 552);
      uint64_t v111 = *(void *)(a1 + 552);
      *(void *)(a1 + 552) = v110;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRelease(v111);
      uint64_t v112 = *(void *)(a2 + 560);
      uint64_t v113 = *(void *)(a1 + 560);
      *(void *)(a1 + 560) = v112;
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRelease(v113);
      Swift::String v114 = *(void *)(a2 + 568);
      Swift::String v115 = *(void *)(a1 + 568);
      *(void *)(a1 + 568) = v114;
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRelease(v115);
      uint64_t v116 = *(void *)(a2 + 576);
      Swift::String v117 = *(void *)(a1 + 576);
      *(void *)(a1 + 576) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117);
    }

    else
    {
      sub_1000B3354((void *)(a1 + 544));
      uint64_t v122 = *(void *)(a2 + 576);
      uint64_t v123 = *(_OWORD *)(a2 + 560);
      *uint64_t v106 = *v107;
      *(_OWORD *)(a1 + 560) = v123;
      *(void *)(a1 + 576) = v122;
    }
  }

  else if (v109)
  {
    *(void *)(a1 + 544) = v109;
    Swift::String v118 = *(void *)(a2 + 552);
    *(void *)(a1 + 552) = v118;
    uint64_t v119 = *(void *)(a2 + 560);
    *(void *)(a1 + 560) = v119;
    uint64_t v120 = *(void *)(a2 + 568);
    *(void *)(a1 + 568) = v120;
    v121 = *(void *)(a2 + 576);
    *(void *)(a1 + 576) = v121;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v121);
  }

  else
  {
    uint64_t v124 = *v107;
    uint64_t v125 = *(_OWORD *)(a2 + 560);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    *uint64_t v106 = v124;
    *(_OWORD *)(a1 + 560) = v125;
  }

  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    int v21 = (uint64_t *)(v18[6] + 16 * v12);
    *int v21 = a2;
    v21[1] = a3;
    uint64_t v22 = (_OWORD *)(v18[7] + 48 * v12);
    unint64_t v23 = *a1;
    unint64_t v24 = a1[2];
    v22[1] = a1[1];
    v22[2] = v24;
    *uint64_t v22 = v23;
    unint64_t v25 = v18[2];
    uint64_t v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1000EC5D0(v15, a4 & 1);
  int v19 = sub_100006114(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = v19;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    unint64_t v23 = v18[2];
    unint64_t v24 = __OFADD__(v23, 1LL);
    unint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1000EC910(v15, a4 & 1);
  int v20 = sub_100006114(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  uint64_t v16 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a1,  1LL,  1LL,  v16);
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    int v21 = (uint64_t *)(v18[6] + 16 * v12);
    *int v21 = a2;
    v21[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v22 = v18[2];
    unint64_t v23 = __OFADD__(v22, 1LL);
    unint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10010370C(v15, a4 & 1);
  int v19 = sub_100006114(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = v19;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

unint64_t sub_1000144D4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_1000147D0(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000147D0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000145C0( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1000147D0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_1000147D0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_1000147D0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_100014848(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for TelemetryReportExtension(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015D0D0, (uint64_t)&nominal type descriptor for TelemetryReportExtension);
}

uint64_t sub_1000148F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100014930 + 4 * byte_10010F120[a1]))( 0xD00000000000001ALL,  0x8000000100122070LL);
}

uint64_t sub_100014930(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_100014A18(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100014A50 + 4 * byte_10010F130[a1]))( 0xD00000000000001ALL,  0x8000000100122070LL);
}

uint64_t sub_100014A50(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_100014B38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1000148F8(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000148F8(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100014BC0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_1000148F8(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100014C20(uint64_t a1)
{
  uint64_t v3 = sub_1000148F8(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100014C60(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_1000148F8(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100014CBC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000176EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100014CE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000148F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100014D10()
{
  return sub_100014A18(*v0);
}

unint64_t sub_100014D18@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000176EC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100014D3C()
{
  return 0LL;
}

void sub_100014D48(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_100014D54(uint64_t a1)
{
  unint64_t v2 = sub_100017E8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100014D7C(uint64_t a1)
{
  unint64_t v2 = sub_100017E8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100014DA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v72[2] = a2;
  v72[3] = a3;
  uint64_t v6 = sub_100005FB4(&qword_100157FE8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 144LL);
  uint64_t v15 = swift_retain(v13);
  uint64_t v16 = v14(v15);
  uint64_t v18 = v17;
  swift_release(v13);
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v18;
  uint64_t v19 = *(void *)(a1 + 24);
  int v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 184LL);
  uint64_t v21 = swift_retain(v19);
  uint64_t v22 = v20(v21);
  uint64_t v24 = v23;
  uint64_t v25 = swift_release(v19);
  *(void *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v24;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112LL))(v73, v25);
  uint64_t v26 = v74;
  if (v74)
  {
    uint64_t v27 = v75;
    sub_100005110(v73, v74);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
    uint64_t v29 = URL.lastPathComponent.getter(v28);
    uint64_t v26 = v30;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v31 = sub_100006034(v73);
  }

  else
  {
    uint64_t v31 = sub_100012824((uint64_t)v73, &qword_100157C58);
    uint64_t v29 = 0LL;
  }

  *(void *)(a4 + 32) = v29;
  *(void *)(a4 + 40) = v26;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112LL))(v73, v31);
  uint64_t v32 = v74;
  if (v74)
  {
    uint64_t v33 = v75;
    sub_100005110(v73, v74);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33);
    uint64_t v35 = URL.path.getter(v34);
    uint64_t v32 = v36;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v37 = sub_100006034(v73);
  }

  else
  {
    uint64_t v37 = sub_100012824((uint64_t)v73, &qword_100157C58);
    uint64_t v35 = 0LL;
  }

  *(void *)(a4 + 48) = v35;
  *(void *)(a4 + 56) = v32;
  (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 24) + 112LL))(v73, v37);
  uint64_t v38 = v74;
  if (v74)
  {
    uint64_t v39 = v75;
    sub_100005110(v73, v74);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 56))(v38, v39);
    uint64_t v38 = v41;
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157C58);
    uint64_t v40 = 0LL;
  }

  *(void *)(a4 + 64) = v40;
  *(void *)(a4 + 72) = v38;
  uint64_t v42 = *(void *)(a1 + 24);
  uint64_t v43 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 216LL);
  uint64_t v44 = swift_retain(v42);
  char v45 = v43(v44);
  swift_release(v42);
  *(_BYTE *)(a4 + 80) = v45 & 1;
  sub_10001A148(a1 + 32, (uint64_t)v73, &qword_100157FF0);
  uint64_t v46 = v74;
  v72[1] = v10;
  if (v74)
  {
    uint64_t v47 = v75;
    sub_100005110(v73, v74);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
    unint64_t v50 = v49;
    uint64_t v51 = sub_1000DBC4C();
    uint64_t v46 = v52;
    sub_10001226C(v48, v50);
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157FF0);
    uint64_t v51 = 0LL;
  }

  *(void *)(a4 + 88) = v51;
  *(void *)(a4 + 96) = v46;
  sub_10001A148(a1 + 32, (uint64_t)v73, &qword_100157FF0);
  uint64_t v53 = v74;
  if (v74)
  {
    uint64_t v54 = v75;
    sub_100005110(v73, v74);
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54);
    unint64_t v57 = v56;
    uint64_t v58 = sub_1000DB228(v55, v56);
    uint64_t v53 = v59;
    sub_10001777C(v55, v57);
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157FF0);
    uint64_t v58 = 0LL;
  }

  *(void *)(a4 + 104) = v58;
  *(void *)(a4 + 112) = v53;
  sub_10001A148(a1 + 32, (uint64_t)v73, &qword_100157FF0);
  uint64_t v60 = v74;
  if (v74)
  {
    uint64_t v61 = v75;
    sub_100005110(v73, v74);
    uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 48))(v60, v61);
    uint64_t v60 = v63;
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157FF0);
    uint64_t v62 = 0LL;
  }

  *(void *)(a4 + 120) = v62;
  *(void *)(a4 + 128) = v60;
  sub_10001A148(a1 + 32, (uint64_t)v73, &qword_100157FF0);
  uint64_t v64 = v74;
  if (v74)
  {
    uint64_t v65 = v75;
    sub_100005110(v73, v74);
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 56))(v64, v65);
    uint64_t v64 = v67;
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157FF0);
    uint64_t v66 = 0LL;
  }

  *(void *)(a4 + 136) = v66;
  *(void *)(a4 + 144) = v64;
  sub_10001A148(a1 + 32, (uint64_t)v73, &qword_100157FF0);
  uint64_t v68 = v74;
  if (v74)
  {
    uint64_t v69 = v75;
    sub_100005110(v73, v74);
    (*(void (**)(uint64_t, uint64_t))(v69 + 64))(v68, v69);
    sub_100006034(v73);
  }

  else
  {
    sub_100012824((uint64_t)v73, &qword_100157FF0);
    uint64_t v70 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL))(v8, 1LL, 1LL, v70);
  }

  uint64_t v71 = type metadata accessor for TelemetryReportExtension(0LL);
  sub_100017734((uint64_t)v8, a4 + *(int *)(v71 + 56));
  __asm { BR              X10 }

uint64_t sub_1000152E8()
{
  uint64_t v7 = (void *)(v0 + v4[15]);
  void *v7 = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches);
  if (v8)
  {
    *(_BYTE *)(v0 + v4[16]) = *(void *)(v8 + 16) > 1uLL;
    *(void *)(v6 - 120) = v8;
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    unint64_t v10 = sub_100013F74();
    uint64_t v11 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t))BidirectionalCollection<>.joined(separator:))( 32LL,  0xE100000000000000LL,  v9,  v10);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease(v8);
    uint64_t v14 = (uint64_t *)(v0 + v4[17]);
    uint64_t *v14 = v11;
    v14[1] = v13;
  }

  else
  {
    *(_BYTE *)(v0 + v4[16]) = 2;
    uint64_t v15 = (void *)(v0 + v4[17]);
    *uint64_t v15 = 0LL;
    v15[1] = 0LL;
  }

  uint64_t v16 = *(void *)(v6 - 136);
  uint64_t v17 = (uint64_t *)sub_10008F418();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v20 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*v1)[39];
  swift_bridgeObjectRetain(v19);
  v20(v5, v16, v18, v19);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  if (*(void *)(v6 - 96))
  {
    uint64_t v21 = sub_100005FB4((uint64_t *)&unk_10015BA50);
    uint64_t v22 = swift_dynamicCast(v6 - 128, v6 - 120, (char *)&type metadata for Any + 8, v21, 6LL);
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = *(void *)(v6 - 128);
      if (*(void *)(v23 + 16) >= 2uLL)
      {
        uint64_t v24 = sub_100017608(*(void *)(v6 - 128));
        uint64_t v22 = swift_bridgeObjectRelease(v23);
        goto LABEL_11;
      }

      uint64_t v22 = swift_bridgeObjectRelease(*(void *)(v6 - 128));
    }
  }

  else
  {
    uint64_t v22 = sub_100012824(v6 - 120, &qword_100157FF8);
  }

  uint64_t v24 = 0LL;
LABEL_11:
  *(void *)(v0 + v4[18]) = v24;
  (*(void (**)(uint64_t))(*v1[3] + 112LL))(v22);
  uint64_t v25 = *(void *)(v6 - 96);
  if (v25)
  {
    uint64_t v26 = *(void *)(v6 - 88);
    sub_100005110((void *)(v6 - 120), *(void *)(v6 - 96));
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 64))(v25, v26);
    uint64_t v28 = ((uint64_t (*)(uint64_t))URL.path.getter)(v27);
    uint64_t v25 = v29;
    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 152) + 8LL))(v3, v2);
    uint64_t result = sub_100006034((void *)(v6 - 120));
  }

  else
  {
    swift_release(v1);
    uint64_t result = sub_100012824(v6 - 120, &qword_100157C58);
    uint64_t v28 = 0LL;
  }

  uint64_t v31 = (uint64_t *)(v0 + v4[19]);
  *uint64_t v31 = v28;
  v31[1] = v25;
  return result;
}

unint64_t sub_1000155BC()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = sub_100005FB4(&qword_100157FE8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = sub_100015D14((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v60 = &type metadata for String;
  *(void *)&__int128 v59 = v10;
  *((void *)&v59 + 1) = v11;
  sub_100017790(&v59, v58);
  swift_bridgeObjectRetain(v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  unint64_t v57 = v9;
  sub_100017090(v58, 0xD00000000000001ALL, 0x8000000100122070LL, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = v57;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v14 = v1[3];
  if (v14)
  {
    uint64_t v15 = v1[2];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v15;
    *((void *)&v59 + 1) = v14;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v14);
    char v16 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD000000000000019LL, 0x8000000100122090LL, v16);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v17 = v1[5];
  if (v17)
  {
    uint64_t v18 = v1[4];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v18;
    *((void *)&v59 + 1) = v17;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v17);
    char v19 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ALL, 0x80000001001220B0LL, v19);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v20 = v1[7];
  if (v20)
  {
    uint64_t v21 = v1[6];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v21;
    *((void *)&v59 + 1) = v20;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v20);
    char v22 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ALL, 0x80000001001220D0LL, v22);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v23 = v1[9];
  if (v23)
  {
    uint64_t v24 = v1[8];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v24;
    *((void *)&v59 + 1) = v23;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v23);
    char v25 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ELL, 0x80000001001220F0LL, v25);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  int v26 = *((unsigned __int8 *)v1 + 80);
  if (v26 != 2)
  {
    uint64_t v60 = &type metadata for Bool;
    LOBYTE(v59) = v26 & 1;
    sub_100017790(&v59, v58);
    char v27 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ALL, 0x8000000100122110LL, v27);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v28 = v1[12];
  if (v28)
  {
    uint64_t v29 = v1[11];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v29;
    *((void *)&v59 + 1) = v28;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v28);
    char v30 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD000000000000016LL, 0x8000000100122130LL, v30);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v31 = v1[14];
  if (v31)
  {
    uint64_t v32 = v1[13];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v32;
    *((void *)&v59 + 1) = v31;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v31);
    char v33 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD000000000000018LL, 0x8000000100122150LL, v33);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v34 = v1[16];
  if (v34)
  {
    uint64_t v35 = v1[15];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v35;
    *((void *)&v59 + 1) = v34;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v34);
    char v36 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001BLL, 0x8000000100122170LL, v36);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v37 = v1[18];
  if (v37)
  {
    uint64_t v38 = v1[17];
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v38;
    *((void *)&v59 + 1) = v37;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v37);
    char v39 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ALL, 0x8000000100122190LL, v39);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v40 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  sub_10001A148((uint64_t)v1 + v40[14], (uint64_t)v4, &qword_100157FE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100012824((uint64_t)v4, &qword_100157FE8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v60 = (void *)v5;
    uint64_t v41 = sub_100005F0C(&v59);
    (*(void (**)(void *, char *, uint64_t))(v6 + 16))(v41, v8, v5);
    sub_100017790(&v59, v58);
    char v42 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001DLL, 0x80000001001221B0LL, v42);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v43 = (uint64_t *)((char *)v1 + v40[15]);
  uint64_t v44 = v43[1];
  if (v44)
  {
    uint64_t v45 = *v43;
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v45;
    *((void *)&v59 + 1) = v44;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v44);
    char v46 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001FLL, 0x80000001001221D0LL, v46);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  int v47 = *((unsigned __int8 *)v1 + v40[16]);
  if (v47 != 2)
  {
    uint64_t v60 = &type metadata for Bool;
    LOBYTE(v59) = v47 & 1;
    sub_100017790(&v59, v58);
    char v48 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD000000000000015LL, 0x80000001001221F0LL, v48);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  unint64_t v49 = (uint64_t *)((char *)v1 + v40[17]);
  uint64_t v50 = v49[1];
  if (v50)
  {
    uint64_t v51 = *v49;
    uint64_t v60 = &type metadata for String;
    *(void *)&__int128 v59 = v51;
    *((void *)&v59 + 1) = v50;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v50);
    char v52 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD00000000000001ELL, 0x8000000100122210LL, v52);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v53 = *(uint64_t *)((char *)v1 + v40[18]);
  if (v53)
  {
    uint64_t v60 = (void *)sub_100005FB4((uint64_t *)&unk_10015A5A0);
    *(void *)&__int128 v59 = v53;
    sub_100017790(&v59, v58);
    swift_bridgeObjectRetain(v53);
    char v54 = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v57 = v13;
    sub_100017090(v58, 0xD000000000000022LL, 0x8000000100122230LL, v54);
    unint64_t v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v13;
}

unint64_t sub_100015D14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100158228);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001A148(v7, (uint64_t)&v16, (uint64_t *)&unk_100159E40);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100006114(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100017790(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100015E4C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_100158000);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100017E8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TelemetryReportExtension.CodingKeys,  &type metadata for TelemetryReportExtension.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v49) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v49, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v49) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v49, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v49) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v49, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    LOBYTE(v49) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v49, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    LOBYTE(v49) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v49, v5);
    uint64_t v22 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v49) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v49, v5);
    uint64_t v23 = v3[11];
    uint64_t v24 = v3[12];
    LOBYTE(v49) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v49, v5);
    uint64_t v25 = v3[13];
    uint64_t v26 = v3[14];
    LOBYTE(v49) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v49, v5);
    uint64_t v27 = v3[15];
    uint64_t v28 = v3[16];
    LOBYTE(v49) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v49, v5);
    uint64_t v29 = v3[17];
    uint64_t v30 = v3[18];
    LOBYTE(v49) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v49, v5);
    uint64_t v31 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
    uint64_t v32 = (uint64_t)v3 + v31[14];
    LOBYTE(v49) = 10;
    uint64_t v33 = type metadata accessor for Date(0LL);
    uint64_t v34 = sub_10001A108(&qword_100158010, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v49, v5, v33, v34);
    uint64_t v35 = (uint64_t *)((char *)v3 + v31[15]);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    LOBYTE(v49) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v49, v5);
    uint64_t v38 = *((unsigned __int8 *)v3 + v31[16]);
    LOBYTE(v49) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, &v49, v5);
    char v39 = (uint64_t *)((char *)v3 + v31[17]);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    LOBYTE(v49) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v49, v5);
    uint64_t v49 = *(uint64_t *)((char *)v3 + v31[18]);
    HIBYTE(v48) = 14;
    uint64_t v42 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    uint64_t v43 = sub_100017ED0( &qword_100158018,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, (char *)&v48 + 7, v5, v42, v43);
    uint64_t v44 = (uint64_t *)((char *)v3 + v31[19]);
    uint64_t v45 = *v44;
    uint64_t v46 = v44[1];
    LOBYTE(v49) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &v49, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100016228@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_100157FE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_100005FB4(&qword_100158020);
  uint64_t v8 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  __chkstk_darwin(v48);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v49 = a1;
  sub_100005110(a1, v14);
  unint64_t v15 = sub_100017E8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TelemetryReportExtension.CodingKeys,  &type metadata for TelemetryReportExtension.CodingKeys,  v15,  v14,  v13);
  if (v2) {
    return sub_100006034(v49);
  }
  uint64_t v45 = a2;
  uint64_t v46 = v7;
  uint64_t v16 = v8;
  LOBYTE(v51) = 0;
  uint64_t v17 = v47;
  *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
  *((void *)v12 + 1) = v18;
  LOBYTE(v51) = 1;
  *((void *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 3) = v19;
  LOBYTE(v51) = 2;
  *((void *)v12 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 5) = v20;
  LOBYTE(v51) = 3;
  *((void *)v12 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 7) = v21;
  LOBYTE(v51) = 4;
  *((void *)v12 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 9) = v22;
  LOBYTE(v51) = 5;
  v12[80] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  LOBYTE(v51) = 6;
  *((void *)v12 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 12) = v23;
  LOBYTE(v51) = 7;
  *((void *)v12 + 13) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 14) = v24;
  LOBYTE(v51) = 8;
  *((void *)v12 + 15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 16) = v25;
  LOBYTE(v51) = 9;
  *((void *)v12 + 17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((void *)v12 + 18) = v26;
  uint64_t v27 = type metadata accessor for Date(0LL);
  LOBYTE(v51) = 10;
  uint64_t v28 = sub_10001A108(&qword_100158028, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v51, v47, v27, v28);
  sub_100017734((uint64_t)v46, (uint64_t)&v12[v48[14]]);
  LOBYTE(v51) = 11;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
  uint64_t v30 = (uint64_t *)&v12[v48[15]];
  *uint64_t v30 = v29;
  v30[1] = v31;
  LOBYTE(v51) = 12;
  char v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
  uint64_t v33 = v47;
  v12[v48[16]] = v32;
  LOBYTE(v51) = 13;
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v33);
  uint64_t v35 = (uint64_t *)&v12[v48[17]];
  *uint64_t v35 = v34;
  v35[1] = v36;
  uint64_t v37 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  char v50 = 14;
  uint64_t v38 = sub_100017ED0( (unint64_t *)&qword_100158030,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v50, v47, v37, v38);
  uint64_t v39 = v47;
  *(void *)&v12[v48[18]] = v51;
  LOBYTE(v51) = 15;
  uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v39);
  uint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v47);
  uint64_t v43 = (uint64_t *)&v12[v48[19]];
  *uint64_t v43 = v40;
  v43[1] = v42;
  sub_100017F30((uint64_t)v12, v45);
  sub_100006034(v49);
  return sub_100017F74((uint64_t)v12);
}

uint64_t sub_1000169C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100016228(a1, a2);
}

uint64_t sub_1000169D4(void *a1)
{
  return sub_100015E4C(a1);
}

uint64_t ApprovalSettingsStateEntry.usageText.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

unint64_t sub_100016A18()
{
  return sub_100017FB0(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_100016A28(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_100016A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[3] = &type metadata for DriverInstallEvent;
  v16[4] = &off_100146168;
  uint64_t v12 = (void *)swift_allocObject(&unk_100146150, 64LL, 7LL);
  v16[0] = v12;
  v12[2] = a1;
  uint64_t v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = 0xD00000000000001ELL;
  v12[7] = 0x8000000100122320LL;
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, __n128))(a6 + 8);
  swift_bridgeObjectRetain(a2);
  __n128 v14 = swift_bridgeObjectRetain(a4);
  v13(v16, a5, a6, v14);
  return sub_100006034(v16);
}

uint64_t sub_100016B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100016BBC( a1,  a2,  a3,  a4,  a5,  type metadata accessor for DriverApprovalEvent,  (uint64_t)&off_100146180,  0xD00000000000001FLL,  0x8000000100122340LL);
}

uint64_t sub_100016B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100016BBC( a1,  a2,  a3,  a4,  a5,  type metadata accessor for DriverLaunchEvent,  (uint64_t)&off_100146198,  0xD00000000000001DLL,  0x8000000100122360LL);
}

uint64_t sub_100016BBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a4;
  uint64_t v16 = type metadata accessor for TelemetryReportExtension(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  sub_100014DA4(a1, a2, a3, (uint64_t)v18);
  uint64_t v19 = a6(0LL);
  v24[3] = v19;
  v24[4] = a7;
  uint64_t v20 = sub_100005F0C(v24);
  sub_100017F30((uint64_t)v18, (uint64_t)v20);
  uint64_t v21 = (void *)((char *)v20 + *(int *)(v19 + 20));
  *uint64_t v21 = a8;
  v21[1] = a9;
  (*(void (**)(void *, uint64_t, uint64_t))(a5 + 8))(v24, v23, a5);
  sub_100017F74((uint64_t)v18);
  return sub_100006034(v24);
}

uint64_t sub_100016CD0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1LL;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100016D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100158228);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

_OWORD *sub_100017090(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100006114(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        int64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_100006034(v19);
        return sub_100017790(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100017228();
      goto LABEL_7;
    }

    sub_100016D94(v15, a4 & 1);
    unint64_t v21 = sub_100006114(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000171C0(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_1000171C0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100017790(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100017228()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100158228);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_10001740C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_release(a1);
    return;
  }

  __break(1u);
LABEL_43:
  __break(1u);
}

void *sub_100017608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_10001740C((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10000610C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

unint64_t sub_1000176EC(Swift::String string)
{
  uint64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100145FA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10) {
    return 16LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100017734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157FE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001777C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

_OWORD *sub_100017790(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

BOOL sub_1000177A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4(&qword_100158218);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_100157FE8);
  uint64_t v12 = __chkstk_darwin(v11);
  int64_t v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  int64_t v17 = (char *)&v96 - v16;
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v96 - v18;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a2 + 8);
  if (*(void *)a1 == *(void *)a2 && v20 == v21
    || (char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v20, *(void *)a2, v21, 0LL),
        BOOL result = 0LL,
        (v22 & 1) != 0))
  {
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = *(void *)(a2 + 24);
    if (v24)
    {
      if (!v25) {
        return 0LL;
      }
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *(void *)(a2 + 16);
      if (v26 != v27 || v24 != v25)
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v24, v27, v25, 0LL);
        BOOL result = 0LL;
        if ((v28 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v25)
    {
      return 0LL;
    }

    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v30 = *(void *)(a2 + 40);
    if (v29)
    {
      if (!v30) {
        return 0LL;
      }
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v32 = *(void *)(a2 + 32);
      if (v31 != v32 || v29 != v30)
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v29, v32, v30, 0LL);
        BOOL result = 0LL;
        if ((v33 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v30)
    {
      return 0LL;
    }

    uint64_t v34 = *(void *)(a1 + 56);
    uint64_t v35 = *(void *)(a2 + 56);
    if (v34)
    {
      if (!v35) {
        return 0LL;
      }
      uint64_t v36 = *(void *)(a1 + 48);
      uint64_t v37 = *(void *)(a2 + 48);
      if (v36 != v37 || v34 != v35)
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v34, v37, v35, 0LL);
        BOOL result = 0LL;
        if ((v38 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v35)
    {
      return 0LL;
    }

    uint64_t v39 = *(void *)(a1 + 72);
    uint64_t v40 = *(void *)(a2 + 72);
    if (v39)
    {
      if (!v40) {
        return 0LL;
      }
      uint64_t v41 = *(void *)(a1 + 64);
      uint64_t v42 = *(void *)(a2 + 64);
      if (v41 != v42 || v39 != v40)
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v39, v42, v40, 0LL);
        BOOL result = 0LL;
        if ((v43 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v40)
    {
      return 0LL;
    }

    int v44 = *(unsigned __int8 *)(a1 + 80);
    int v45 = *(unsigned __int8 *)(a2 + 80);
    if (v44 == 2)
    {
      if (v45 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v46 = (v44 & 1) == 0;
      if (v45 == 2 || ((v46 ^ v45) & 1) == 0) {
        return result;
      }
    }

    uint64_t v47 = *(void *)(a1 + 96);
    uint64_t v48 = *(void *)(a2 + 96);
    if (v47)
    {
      if (!v48) {
        return 0LL;
      }
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v50 = *(void *)(a2 + 88);
      if (v49 != v50 || v47 != v48)
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v47, v50, v48, 0LL);
        BOOL result = 0LL;
        if ((v51 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v48)
    {
      return 0LL;
    }

    uint64_t v52 = *(void *)(a1 + 112);
    uint64_t v53 = *(void *)(a2 + 112);
    if (v52)
    {
      if (!v53) {
        return 0LL;
      }
      uint64_t v54 = *(void *)(a1 + 104);
      uint64_t v55 = *(void *)(a2 + 104);
      if (v54 != v55 || v52 != v53)
      {
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v52, v55, v53, 0LL);
        BOOL result = 0LL;
        if ((v56 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v53)
    {
      return 0LL;
    }

    uint64_t v57 = *(void *)(a1 + 128);
    uint64_t v58 = *(void *)(a2 + 128);
    if (v57)
    {
      if (!v58) {
        return 0LL;
      }
      uint64_t v59 = *(void *)(a1 + 120);
      uint64_t v60 = *(void *)(a2 + 120);
      if (v59 != v60 || v57 != v58)
      {
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v57, v60, v58, 0LL);
        BOOL result = 0LL;
        if ((v61 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v58)
    {
      return 0LL;
    }

    uint64_t v62 = *(void *)(a1 + 144);
    uint64_t v63 = *(void *)(a2 + 144);
    if (v62)
    {
      if (!v63) {
        return 0LL;
      }
      uint64_t v64 = *(void *)(a1 + 136);
      uint64_t v65 = *(void *)(a2 + 136);
      if (v64 != v65 || v62 != v63)
      {
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v62, v65, v63, 0LL);
        BOOL result = 0LL;
        if ((v66 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v63)
    {
      return 0LL;
    }

    os_log_t v97 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
    sub_10001A148(a1 + v97[14], (uint64_t)v19, &qword_100157FE8);
    sub_10001A148(a2 + v97[14], (uint64_t)v17, &qword_100157FE8);
    uint64_t v67 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10001A148((uint64_t)v19, (uint64_t)v10, &qword_100157FE8);
    uint64_t v96 = v67;
    sub_10001A148((uint64_t)v17, v67, &qword_100157FE8);
    uint64_t v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v68((uint64_t)v10, 1LL, v4) == 1)
    {
      sub_100012824((uint64_t)v17, &qword_100157FE8);
      sub_100012824((uint64_t)v19, &qword_100157FE8);
      if (v68(v96, 1LL, v4) == 1)
      {
        sub_100012824((uint64_t)v10, &qword_100157FE8);
LABEL_72:
        uint64_t v72 = v97[15];
        uint64_t v73 = (void *)(a1 + v72);
        uint64_t v74 = *(void *)(a1 + v72 + 8);
        uint64_t v75 = (void *)(a2 + v72);
        uint64_t v76 = v75[1];
        if (v74)
        {
          if (!v76) {
            return 0LL;
          }
          if (*v73 != *v75 || v74 != v76)
          {
            char v77 = _stringCompareWithSmolCheck(_:_:expecting:)(*v73, v74, *v75, v76, 0LL);
            BOOL result = 0LL;
            if ((v77 & 1) == 0) {
              return result;
            }
          }
        }

        else if (v76)
        {
          return 0LL;
        }

        uint64_t v78 = v97[16];
        int v79 = *(unsigned __int8 *)(a1 + v78);
        int v80 = *(unsigned __int8 *)(a2 + v78);
        if (v79 == 2)
        {
          if (v80 != 2) {
            return 0LL;
          }
        }

        else
        {
          BOOL result = 0LL;
          BOOL v81 = (v79 & 1) == 0;
          if (v80 == 2 || ((v81 ^ v80) & 1) == 0) {
            return result;
          }
        }

        uint64_t v82 = v97[17];
        uint64_t v83 = (void *)(a1 + v82);
        uint64_t v84 = *(void *)(a1 + v82 + 8);
        uint64_t v85 = (void *)(a2 + v82);
        uint64_t v86 = v85[1];
        if (v84)
        {
          if (!v86) {
            return 0LL;
          }
          if (*v83 != *v85 || v84 != v86)
          {
            char v87 = _stringCompareWithSmolCheck(_:_:expecting:)(*v83, v84, *v85, v86, 0LL);
            BOOL result = 0LL;
            if ((v87 & 1) == 0) {
              return result;
            }
          }
        }

        else if (v86)
        {
          return 0LL;
        }

        uint64_t v88 = v97[18];
        uint64_t v89 = *(void **)(a1 + v88);
        uint64_t v90 = *(void **)(a2 + v88);
        if (v89)
        {
          if (!v90 || (sub_100016CD0(v89, v90) & 1) == 0) {
            return 0LL;
          }
        }

        else if (v90)
        {
          return 0LL;
        }

        uint64_t v91 = v97[19];
        unint64_t v92 = (void *)(a1 + v91);
        uint64_t v93 = *(void *)(a1 + v91 + 8);
        os_log_t v94 = (void *)(a2 + v91);
        uint64_t v95 = v94[1];
        if (v93) {
          return v95
        }
              && (*v92 == *v94 && v93 == v95
               || (_stringCompareWithSmolCheck(_:_:expecting:)(*v92, v93, *v94, v95, 0LL) & 1) != 0);
        return !v95;
      }
    }

    else
    {
      sub_10001A148((uint64_t)v10, (uint64_t)v14, &qword_100157FE8);
      if (v68(v96, 1LL, v4) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v96, v4);
        uint64_t v69 = sub_10001A108(&qword_100158220, (uint64_t)&protocol conformance descriptor for Date);
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v69);
        uint64_t v71 = *(void (**)(char *, uint64_t))(v5 + 8);
        v71(v7, v4);
        sub_100012824((uint64_t)v17, &qword_100157FE8);
        sub_100012824((uint64_t)v19, &qword_100157FE8);
        v71(v14, v4);
        sub_100012824((uint64_t)v10, &qword_100157FE8);
        if ((v70 & 1) == 0) {
          return 0LL;
        }
        goto LABEL_72;
      }

      sub_100012824((uint64_t)v17, &qword_100157FE8);
      sub_100012824((uint64_t)v19, &qword_100157FE8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }

    sub_100012824((uint64_t)v10, &qword_100158218);
    return 0LL;
  }

  return result;
}

unint64_t sub_100017E8C()
{
  unint64_t result = qword_100158008;
  if (!qword_100158008)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F1F0, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158008);
  }

  return result;
}

uint64_t sub_100017ED0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100012010((uint64_t *)&unk_10015A5A0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100017F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TelemetryReportExtension(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017F74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TelemetryReportExtension(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100017FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v8, &v11);
  *(_OWORD *)(inited + 16) = xmmword_10010F440;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000100122070LL;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 88) = 0x80000001001220D0LL;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  return sub_100015D14(inited);
}

uint64_t type metadata accessor for DriverApprovalEvent(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015D0E0, (uint64_t)&nominal type descriptor for DriverApprovalEvent);
}

uint64_t type metadata accessor for DriverLaunchEvent(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015D0F0, (uint64_t)&nominal type descriptor for DriverLaunchEvent);
}

uint64_t sub_10001809C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000180D0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

unint64_t sub_100018108()
{
  unint64_t result = qword_100158038;
  if (!qword_100158038)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F150, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158038);
  }

  return result;
}

unint64_t sub_100018150()
{
  unint64_t result = qword_100158040;
  if (!qword_100158040)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F268, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158040);
  }

  return result;
}

unint64_t sub_100018198()
{
  unint64_t result = qword_100158048;
  if (!qword_100158048)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F240, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158048);
  }

  return result;
}

void *sub_1000181DC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v39 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v39;
    uint64_t v38 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v38;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    uint64_t v37 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v37;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    uint64_t v9 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v9;
    uint64_t v10 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v10;
    uint64_t v11 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v11;
    uint64_t v12 = a2[18];
    uint64_t v13 = a3[14];
    __dst = (void *)(a1 + v13);
    uint64_t v35 = (char *)a2 + v13;
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v12;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v34 = *(void *)(v14 - 8);
    uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v34 + 48);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    __n128 v15 = swift_bridgeObjectRetain(v12);
    if (v36(v35, 1LL, v14, v15))
    {
      uint64_t v16 = sub_100005FB4(&qword_100157FE8);
      memcpy(__dst, v35, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v34 + 16))(__dst, v35, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0LL, 1LL, v14);
    }

    uint64_t v18 = a3[15];
    uint64_t v19 = a3[16];
    uint64_t v20 = (void *)((char *)v4 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    uint64_t v23 = a3[17];
    uint64_t v24 = a3[18];
    uint64_t v25 = (void *)((char *)v4 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = *(uint64_t *)((char *)a2 + v24);
    *(void *)((char *)v4 + v24) = v28;
    uint64_t v29 = a3[19];
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
  }

  return v4;
}

uint64_t sub_100018408(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[14];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[18]));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[19] + 8));
}

uint64_t sub_1000184F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v36 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v36;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v35 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v35;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  uint64_t v11 = *(void *)(a2 + 144);
  uint64_t v12 = a3[14];
  __dst = (void *)(a1 + v12);
  char v33 = (const void *)(a2 + v12);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v13 - 8);
  uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v32 + 48);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  __n128 v14 = swift_bridgeObjectRetain(v11);
  if (v34(v33, 1LL, v13, v14))
  {
    uint64_t v15 = sub_100005FB4(&qword_100157FE8);
    memcpy(__dst, v33, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v33, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0LL, 1LL, v13);
  }

  uint64_t v16 = a3[15];
  uint64_t v17 = a3[16];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  uint64_t v21 = a3[17];
  uint64_t v22 = a3[18];
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = *(void *)(a2 + v22);
  *(void *)(a1 + v22) = v26;
  uint64_t v27 = a3[19];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_1000186F4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v25, v26, v27);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }

  if (v31)
  {
LABEL_6:
    uint64_t v32 = sub_100005FB4(&qword_100157FE8);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
LABEL_7:
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  uint64_t v36 = v35[1];
  uint64_t v37 = v34[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v38 = a3[17];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  uint64_t v41 = v40[1];
  uint64_t v42 = v39[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = a3[18];
  uint64_t v44 = *(void *)(a1 + v43);
  uint64_t v45 = *(void *)(a2 + v43);
  *(void *)(a1 + v43) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v44);
  uint64_t v46 = a3[19];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  void *v47 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  return a1;
}

uint64_t sub_1000189D8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v8 = a3[14];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100005FB4(&qword_100157FE8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  uint64_t v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_100018B10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1LL, v27);
  int v31 = v29(v26, 1LL, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }

  if (v31)
  {
LABEL_6:
    uint64_t v32 = sub_100005FB4(&qword_100157FE8);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
LABEL_7:
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  uint64_t v38 = v34[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  uint64_t v44 = v40[1];
  *uint64_t v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease(v44);
  uint64_t v45 = a3[18];
  uint64_t v46 = *(void *)(a1 + v45);
  *(void *)(a1 + v45) = *(void *)(a2 + v45);
  swift_bridgeObjectRelease(v46);
  uint64_t v47 = a3[19];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  uint64_t v52 = v48[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  return a1;
}

uint64_t sub_100018D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018D34);
}

uint64_t sub_100018D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100005FB4(&qword_100157FE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 56),  a2,  v8);
  }

uint64_t sub_100018DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018DC0);
}

uint64_t sub_100018DC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100005FB4(&qword_100157FE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 56),  a2,  a2,  v7);
  }

  return result;
}

void sub_100018E38(uint64_t a1)
{
  v4[0] = &unk_10010F360;
  v4[1] = &unk_10010F378;
  v4[2] = &unk_10010F378;
  v4[3] = &unk_10010F378;
  v4[4] = &unk_10010F378;
  v4[5] = &unk_10010F390;
  v4[6] = &unk_10010F378;
  v4[7] = &unk_10010F378;
  v4[8] = &unk_10010F378;
  v4[9] = &unk_10010F378;
  sub_100018EE4(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(v2 - 8) + 64LL;
    v4[11] = &unk_10010F378;
    v4[12] = &unk_10010F390;
    v4[13] = &unk_10010F378;
    v4[14] = &unk_10010F3A8;
    v4[15] = &unk_10010F378;
    swift_initStructMetadata(a1, 256LL, 16LL, v4, a1 + 16);
  }

void sub_100018EE4(uint64_t a1)
{
  if (!qword_1001580A8)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001580A8);
    }
  }

uint64_t getEnumTagSinglePayload for TelemetryReportExtension.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

uint64_t storeEnumTagSinglePayload for TelemetryReportExtension.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_100019014 + 4 * byte_10010F14B[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_100019048 + 4 * byte_10010F146[v4]))();
}

uint64_t sub_100019048(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100019050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100019058LL);
  }
  return result;
}

uint64_t sub_100019064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001906CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 15;
  return result;
}

uint64_t sub_100019070(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100019078(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100019084(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TelemetryReportExtension.CodingKeys()
{
  return &type metadata for TelemetryReportExtension.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for KernelManagementConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for DriverInstallEvent(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for DriverInstallEvent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DriverInstallEvent(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DriverInstallEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for DriverInstallEvent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverInstallEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverInstallEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DriverInstallEvent()
{
  return &type metadata for DriverInstallEvent;
}

uint64_t sub_100019300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001930C);
}

uint64_t sub_100019310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001931C);
}

void *sub_100019324(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v42 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v42;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v41 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v41;
    uint64_t v40 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v40;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    uint64_t v8 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v8;
    uint64_t v9 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v9;
    uint64_t v10 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v10;
    uint64_t v11 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v11;
    uint64_t v12 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
    uint64_t v13 = v12[14];
    __dst = (char *)v4 + v13;
    uint64_t v38 = (char *)a2 + v13;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v37 = *(void *)(v14 - 8);
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v37 + 48);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    __n128 v15 = swift_bridgeObjectRetain(v11);
    if (v39(v38, 1LL, v14, v15))
    {
      uint64_t v16 = sub_100005FB4(&qword_100157FE8);
      memcpy(__dst, v38, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v38, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0LL, 1LL, v14);
    }

    uint64_t v18 = v12[15];
    uint64_t v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v12[16]) = *((_BYTE *)a2 + v12[16]);
    uint64_t v22 = v12[17];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = v12[18];
    uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
    *(void *)((char *)v4 + v26) = v27;
    uint64_t v28 = v12[19];
    uint64_t v29 = (void *)((char *)v4 + v28);
    int v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = *(int *)(a3 + 20);
    uint64_t v33 = (void *)((char *)v4 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v35);
  }

  return v4;
}

uint64_t sub_100019584(void *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  int v5 = (char *)a1 + v4[14];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[15] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[17] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[18]));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[19] + 8));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100019690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v40;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v39 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v39;
  uint64_t v38 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v38;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v12 = v11[14];
  __dst = (void *)(a1 + v12);
  uint64_t v36 = (const void *)(a2 + v12);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v35 + 48);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  __n128 v14 = swift_bridgeObjectRetain(v10);
  if (v37(v36, 1LL, v13, v14))
  {
    uint64_t v15 = sub_100005FB4(&qword_100157FE8);
    memcpy(__dst, v36, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v36, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0LL, 1LL, v13);
  }

  uint64_t v16 = v11[15];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  *(_BYTE *)(a1 + v11[16]) = *(_BYTE *)(a2 + v11[16]);
  uint64_t v20 = v11[17];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = v11[18];
  uint64_t v25 = *(void *)(a2 + v24);
  *(void *)(a1 + v24) = v25;
  uint64_t v26 = v11[19];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v33);
  return a1;
}

uint64_t sub_1000198C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v25 = v24[14];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 24))(v26, v27, v28);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_6;
  }

  if (v32)
  {
LABEL_6:
    uint64_t v33 = sub_100005FB4(&qword_100157FE8);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
LABEL_7:
  uint64_t v34 = v24[15];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_BYTE *)(a1 + v24[16]) = *(_BYTE *)(a2 + v24[16]);
  uint64_t v39 = v24[17];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  *uint64_t v40 = *v41;
  uint64_t v42 = v41[1];
  uint64_t v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = v24[18];
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v46 = *(void *)(a2 + v44);
  *(void *)(a1 + v44) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v45);
  uint64_t v47 = v24[19];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  uint64_t v50 = v49[1];
  uint64_t v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = *(int *)(a3 + 20);
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (void *)(a2 + v52);
  *uint64_t v53 = *v54;
  uint64_t v55 = v54[1];
  uint64_t v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  return a1;
}

uint64_t sub_100019BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v8 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v9 = v8[14];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
  {
    uint64_t v14 = sub_100005FB4(&qword_100157FE8);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  *(_OWORD *)(a1 + v8[15]) = *(_OWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_OWORD *)(a1 + v8[17]) = *(_OWORD *)(a2 + v8[17]);
  *(void *)(a1 + v8[18]) = *(void *)(a2 + v8[18]);
  *(_OWORD *)(a1 + v8[19]) = *(_OWORD *)(a2 + v8[19]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100019D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = (int *)type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v25 = v24[14];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v26, v27, v28);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_6;
  }

  if (v32)
  {
LABEL_6:
    uint64_t v33 = sub_100005FB4(&qword_100157FE8);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v26, v27, v28);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
LABEL_7:
  uint64_t v34 = v24[15];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v39 = v35[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  *(_BYTE *)(a1 + v24[16]) = *(_BYTE *)(a2 + v24[16]);
  uint64_t v40 = v24[17];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v45 = v41[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = v24[18];
  uint64_t v47 = *(void *)(a1 + v46);
  *(void *)(a1 + v46) = *(void *)(a2 + v46);
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = v24[19];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  uint64_t v53 = v49[1];
  void *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = *(int *)(a3 + 20);
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  uint64_t v59 = v55[1];
  *uint64_t v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease(v59);
  return a1;
}

uint64_t sub_100019F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100019F88);
}

uint64_t sub_100019F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10001A00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A018);
}

uint64_t sub_10001A01C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TelemetryReportExtension(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10001A098(uint64_t a1)
{
  uint64_t result = type metadata accessor for TelemetryReportExtension(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10010F360;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10001A108(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001A148(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005FB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ApplicationRecord(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015D4A0, (uint64_t)&nominal type descriptor for ApplicationRecord);
}

uint64_t sub_10001A1A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001A1DC + 4 * byte_10010F450[a1]))( 0xD000000000000010LL,  0x8000000100122660LL);
}

uint64_t sub_10001A1DC()
{
  return 7107189LL;
}

uint64_t sub_10001A1EC(uint64_t a1)
{
  return a1 + 4;
}

BOOL sub_10001A224(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001A238()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001A27C()
{
}

Swift::Int sub_10001A2A4(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001A2E4()
{
  return sub_10001A1A4(*v0);
}

uint64_t sub_10001A2EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10002122C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001A310(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10001A31C(uint64_t a1)
{
  unint64_t v2 = sub_10001AA24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A344(uint64_t a1)
{
  unint64_t v2 = sub_10001AA24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001A36C()
{
  uint64_t v27 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v1._countAndFlagsBits = 10LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  unint64_t v2 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  uint64_t object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 10LL;
  v7._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x3A4C525520202020LL;
  v8._uint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(0xE900000000000020LL);
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v9._uint64_t object = (void *)0x80000001001223A0LL;
  v9._countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v9);
  uint64_t v10 = v2[6];
  uint64_t v11 = *(uint64_t *)((char *)v0 + v10);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(*(uint64_t *)((char *)v0 + v10));
    uint64_t v13 = (void *)(v11 + 40);
    do
    {
      uint64_t v14 = *(v13 - 1);
      uint64_t v15 = (void *)*v13;
      swift_bridgeObjectRetain(*v13);
      v16._countAndFlagsBits = v14;
      v16._uint64_t object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v15);
      v17._countAndFlagsBits = 10LL;
      v17._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      v18._countAndFlagsBits = 0x2020202020202020LL;
      v18._uint64_t object = (void *)0xE800000000000000LL;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(0xE800000000000000LL);
      v13 += 2;
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(v11);
  }

  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v19._countAndFlagsBits = sub_100013B60(*(uint64_t *)((char *)v0 + v2[7]), *(uint64_t *)((char *)v0 + v2[7] + 8));
  uint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 10LL;
  v21._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000020LL;
  v22._uint64_t object = (void *)0x80000001001223C0LL;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(0x80000001001223C0LL);
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v23._countAndFlagsBits = sub_100013B60(*(uint64_t *)((char *)v0 + v2[8]), *(uint64_t *)((char *)v0 + v2[8] + 8));
  uint64_t v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 0xD000000000000017LL;
  v25._uint64_t object = (void *)0x80000001001223F0LL;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0x80000001001223F0LL);
  return v27;
}

uint64_t sub_10001A634()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v19 = v1;
  v2._countAndFlagsBits = 2108704LL;
  v2._uint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  uint64_t object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 10272LL;
  v8._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  Swift::String v9 = (uint64_t *)((char *)v0 + *(int *)(v3 + 28));
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000125E0(*v9, v11);
  v12._countAndFlagsBits = Data.description.getter(v10, v11);
  uint64_t v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  sub_10001226C(v10, v11);
  v14._countAndFlagsBits = 2112041LL;
  v14._uint64_t object = (void *)0xE300000000000000LL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  Swift::String v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0x7372657669726420LL;
  v17._uint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v17);
  return v19;
}

uint64_t sub_10001A7DC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_100158230);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_10001AA24();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApplicationRecord.CodingKeys,  &type metadata for ApplicationRecord.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    Swift::String v14 = (int *)type metadata accessor for ApplicationRecord(0LL);
    Swift::String v15 = (char *)v3 + v14[5];
    LOBYTE(v22) = 1;
    uint64_t v16 = type metadata accessor for URL(0LL);
    uint64_t v17 = sub_100012860( &qword_100158238,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v22, v5, v16, v17);
    *(void *)&__int128 v22 = *(uint64_t *)((char *)v3 + v14[6]);
    char v23 = 2;
    uint64_t v18 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
    uint64_t v19 = sub_100017ED0( &qword_100158018,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, v18, v19);
    __int128 v22 = *(_OWORD *)((char *)v3 + v14[7]);
    char v23 = 3;
    unint64_t v20 = sub_10001AA68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v20);
    __int128 v22 = *(_OWORD *)((char *)v3 + v14[8]);
    char v23 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10001AA24()
{
  unint64_t result = qword_10015D100;
  if (!qword_10015D100)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F894, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D100);
  }

  return result;
}

unint64_t sub_10001AA68()
{
  unint64_t result = qword_100158240;
  if (!qword_100158240)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100158240);
  }

  return result;
}

uint64_t sub_10001AAAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100005FB4(&qword_100158248);
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  Swift::String v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for ApplicationRecord(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100005110(a1, v13);
  unint64_t v14 = sub_10001AA24();
  int v32 = v8;
  Swift::String v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApplicationRecord.CodingKeys,  &type metadata for ApplicationRecord.CodingKeys,  v14,  v13,  v12);
  if (v15) {
    return sub_100006034(a1);
  }
  uint64_t v27 = v6;
  uint64_t v33 = a1;
  uint64_t v17 = v29;
  uint64_t v16 = v30;
  LOBYTE(v34) = 0;
  uint64_t v18 = v31;
  uint64_t v19 = (uint64_t)v11;
  *(void *)unint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v31);
  *((void *)v11 + 1) = v20;
  LOBYTE(v34) = 1;
  uint64_t v21 = sub_100012860( &qword_100158250,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v34, v18, v16, v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v11[v9[5]], v5, v16);
  uint64_t v22 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  char v35 = 2;
  uint64_t v23 = sub_100017ED0( (unint64_t *)&qword_100158030,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v35, v18, v22, v23);
  uint64_t v26 = 0LL;
  *(void *)&v11[v9[6]] = v34;
  char v35 = 3;
  unint64_t v24 = sub_10001AEC4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v35, v18, &type metadata for Data, v24);
  *(_OWORD *)(v19 + v9[7]) = v34;
  char v35 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v35, v18, &type metadata for Data, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v18);
  *(_OWORD *)(v19 + v9[8]) = v34;
  sub_10001AF08(v19, v28);
  sub_100006034(v33);
  return sub_10001AF4C(v19);
}

unint64_t sub_10001AEC4()
{
  unint64_t result = qword_100158258;
  if (!qword_100158258)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100158258);
  }

  return result;
}

uint64_t sub_10001AF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001AF4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ApplicationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001AF88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001AAAC(a1, a2);
}

uint64_t sub_10001AF9C(void *a1)
{
  return sub_10001A7DC(a1);
}

uint64_t sub_10001AFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v7)
  {
    unint64_t v19 = sub_100012624();
    uint64_t v15 = swift_allocError(&type metadata for KMError, v19, 0LL, 0LL);
    *(void *)uint64_t v16 = 0xD000000000000028LL;
    *(void *)(v16 + 8) = 0x8000000100122410LL;
LABEL_8:
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(void *)(v16 + 64) = 0LL;
    *(_BYTE *)(v16 + 72) = 10;
    return swift_willThrow(v15);
  }

  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (!v10)
  {
    swift_bridgeObjectRelease(v9);
    unint64_t v20 = sub_100012624();
    uint64_t v15 = swift_allocError(&type metadata for KMError, v20, 0LL, 0LL);
    uint64_t v17 = "Application record is missing driver extension paths";
    unint64_t v18 = 0xD000000000000034LL;
    goto LABEL_7;
  }

  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v13 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    unint64_t v14 = sub_100012624();
    uint64_t v15 = swift_allocError(&type metadata for KMError, v14, 0LL, 0LL);
    uint64_t v17 = "Application record is missing install session identifier";
    unint64_t v18 = 0xD000000000000038LL;
LABEL_7:
    *(void *)uint64_t v16 = v18;
    *(void *)(v16 + 8) = (unint64_t)(v17 - 32) | 0x8000000000000000LL;
    goto LABEL_8;
  }

  unint64_t v22 = v13;
  uint64_t v35 = v12;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v24 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    unint64_t v25 = sub_100012624();
    uint64_t v26 = swift_allocError(&type metadata for KMError, v25, 0LL, 0LL);
    *(void *)uint64_t v27 = 0xD000000000000037LL;
    *(void *)(v27 + 8) = 0x80000001001224C0LL;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(void *)(v27 + 64) = 0LL;
    *(_BYTE *)(v27 + 72) = 10;
    swift_willThrow(v26);
    return sub_10002193C(v35, v22);
  }

  else
  {
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    uint64_t v33 = v24;
    uint64_t v34 = v23;
    unint64_t v32 = v22;
    uint64_t v28 = (int *)type metadata accessor for ApplicationRecord(0LL);
    uint64_t result = v31(a1, a2);
    *a3 = v8;
    a3[1] = v9;
    *(uint64_t *)((char *)a3 + v28[6]) = v11;
    uint64_t v29 = (uint64_t *)((char *)a3 + v28[7]);
    *uint64_t v29 = v35;
    v29[1] = v32;
    uint64_t v30 = (uint64_t *)((char *)a3 + v28[8]);
    *uint64_t v30 = v34;
    v30[1] = v33;
  }

  return result;
}

uint64_t sub_10001B248()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t sub_10001B27C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10001B2C0()
{
  return swift_retain(*(void *)(v0 + 72));
}

uint64_t sub_10001B2F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = a1;
  return swift_release(v3);
}

void *sub_10001B338(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_10001B374()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 88);
  }

  else
  {
    uint64_t v2 = sub_10001B978();
    uint64_t v3 = *(void *)(v0 + 88);
    *(void *)(v0 + 88) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10001B3CC()
{
  int v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 == 2)
  {
    char v2 = sub_10001B404((void *)v0);
    *(_BYTE *)(v0 + 96) = v2 & 1;
  }

  else
  {
    char v2 = v1 & 1;
  }

  return v2 & 1;
}

BOOL sub_10001B404(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  sub_100005110(v6, v8);
  sub_100104FA4(v8, v7);
  uint64_t v9 = v33;
  uint64_t v10 = v34;
  sub_100005110(v32, v33);
  unint64_t v11 = sub_1000DFC34();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  v31[2] = &type metadata for SupportsThirdPartyDriversDeviceProperty;
  v31[3] = &off_10014F3B0;
  unint64_t v18 = (void *)swift_allocObject(&unk_1001465B8, 48LL, 7LL);
  uint64_t v30 = (uint64_t)v18;
  v18[2] = v11;
  v18[3] = v13;
  v18[4] = v15;
  v18[5] = v17;
  (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t))(v10 + 8))(&v35, &v30, v9, v10);
  sub_100006034(&v30);
  sub_100006034(v32);
  BOOL v19 = *((void *)&v36 + 1) != 0LL;
  sub_100012824((uint64_t)&v35, &qword_100157FF8);
  uint64_t v20 = sub_1000D31E4();
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)unint64_t v24 = 136315138;
    v32[0] = v25;
    if (v19) {
      uint64_t v26 = 0x7374726F70707573LL;
    }
    else {
      uint64_t v26 = 0xD000000000000010LL;
    }
    if (v19) {
      unint64_t v27 = 0xE800000000000000LL;
    }
    else {
      unint64_t v27 = 0x80000001001226E0LL;
    }
    uint64_t v29 = v2;
    uint64_t v30 = sub_1000058CC(v26, v27, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Hardware %s third party drivers", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v29);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return v19;
}

uint64_t sub_10001B6E4()
{
  int v1 = *(unsigned __int8 *)(v0 + 97);
  if (v1 == 2)
  {
    char v2 = sub_10001B71C((void *)v0);
    *(_BYTE *)(v0 + 97) = v2 & 1;
  }

  else
  {
    char v2 = v1 & 1;
  }

  return v2 & 1;
}

BOOL sub_10001B71C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  sub_100005110(v6, v8);
  sub_100071818(v8, v7);
  uint64_t v9 = v31;
  uint64_t v10 = v32;
  sub_100005110(v30, v31);
  unint64_t v11 = (uint64_t *)sub_1000DFC28();
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  swift_bridgeObjectRetain(v13);
  uint64_t v14 = sub_10006DA48(v12, v13, v9, v10);
  LOBYTE(v10) = v15;
  swift_bridgeObjectRelease(v13);
  BOOL v17 = (v10 & 1) == 0 && v14 == 1;
  sub_100006034(v30);
  uint64_t v18 = sub_1000D31E4();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v2;
    *(_DWORD *)unint64_t v22 = 136315138;
    v30[0] = v23;
    if (v17) {
      uint64_t v24 = 29545LL;
    }
    else {
      uint64_t v24 = 0x746F6E207369LL;
    }
    if (v17) {
      unint64_t v25 = 0xE200000000000000LL;
    }
    else {
      unint64_t v25 = 0xE600000000000000LL;
    }
    uint64_t v29 = sub_1000058CC(v24, v25, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Third party driver boot arg %s enabled", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return v17;
}

uint64_t sub_10001B978()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v40[-v8];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v40[-v11];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v0 + 168LL))(v10);
  if (result)
  {
    uint64_t v14 = result;
    char v15 = (*(uint64_t (**)(uint64_t))(*(void *)result + 160LL))(result);
    swift_release(v14);
    if ((v15 & 1) != 0)
    {
      unint64_t v42 = sub_10001BE3C((uint64_t)_swiftEmptyArrayStorage);
      if ((sub_10001B3CC() & 1) != 0 || (sub_10001B6E4() & 1) != 0)
      {
        uint64_t v16 = sub_1000D31E4();
        uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v12, v16, v2);
        uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
        os_log_type_t v19 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Retrieving applications from LaunchServices", v20, 2u);
          swift_slowDealloc(v20, -1LL, -1LL);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v12, v2);
        uint64_t v21 = v1[5];
        uint64_t v22 = v1[6];
        sub_100005110(v1 + 2, v21);
        sub_10003A76C(v21, v22);
        uint64_t v23 = v41[4];
        uint64_t v24 = sub_100005110(v41, v41[3]);
        __chkstk_darwin(v24);
        *(void *)&v40[-16] = &v42;
        (*(void (**)(uint64_t (*)(void *)))(v23 + 16))(sub_100022AD4);
        sub_100006034(v41);
      }

      else
      {
        uint64_t v32 = sub_1000D31E4();
        uint64_t v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v9, v32, v2);
        uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
        os_log_type_t v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          __int128 v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)__int128 v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Third party drivers are disabled", v36, 2u);
          swift_slowDealloc(v36, -1LL, -1LL);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
      }

      uint64_t v37 = v1[10];
      unint64_t v31 = v42;
      uint64_t v38 = *(void (**)(__n128))(*(void *)v37 + 136LL);
      __n128 v39 = swift_bridgeObjectRetain(v42);
      v38(v39);
    }

    else
    {
      uint64_t v25 = sub_1000D31E4();
      uint64_t v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v6, v25, v2);
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Using cached application list", v29, 2u);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      uint64_t v30 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
      return (*(uint64_t (**)(uint64_t))(*(void *)v1[10] + 128LL))(v30);
    }

    return v31;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_10001BD10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100158588);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001A148(v7, (uint64_t)&v14, &qword_100158590);
    uint64_t v8 = v14;
    unint64_t result = sub_10002011C(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100017790(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001BE3C(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_1001585A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100005FB4(&qword_1001585A8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001A148(v13, (uint64_t)v5, &qword_1001585A0);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_10000D2C0(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for ApplicationRecord(0LL);
    unint64_t result = sub_1000219AC(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    uint64_t v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001BFD4(void *a1, uint64_t *a2)
{
  uint64_t v82 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  __chkstk_darwin(v3);
  char v77 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005FB4(&qword_100157ED0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v80 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v81 = (uint64_t)&v73 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v73 - v10);
  uint64_t v85 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v83 = *(void *)(v85 - 8);
  uint64_t v12 = __chkstk_darwin(v85);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v73 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v73 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v27 = a1[3];
  uint64_t v26 = a1[4];
  sub_100005110(a1, v27);
  uint64_t v28 = v84;
  sub_10001AFB4(v27, v26, v11);
  if (v28)
  {
    swift_errorRelease(v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v11, 1LL, 1LL, v85);
    return sub_100012824((uint64_t)v11, &qword_100157ED0);
  }

  uint64_t v84 = (uint64_t)v20;
  uint64_t v75 = v23;
  uint64_t v76 = v17;
  uint64_t v74 = v14;
  uint64_t v30 = v83;
  unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56);
  uint64_t v32 = v85;
  v31((uint64_t)v11, 0LL, 1LL, v85);
  sub_1000219AC((uint64_t)v11, (uint64_t)v25);
  uint64_t v33 = *(void *)&v25[*(int *)(v32 + 24)];
  swift_bridgeObjectRetain(v33);
  BOOL v34 = sub_1000D26D0();
  swift_bridgeObjectRelease(v33);
  if (!v34)
  {
    __int128 v36 = (uint64_t *)&v25[*(int *)(v32 + 32)];
    uint64_t v37 = *v82;
    uint64_t v38 = *(void *)(*v82 + 16);
    uint64_t v73 = v25;
    if (v38)
    {
      uint64_t v40 = *v36;
      unint64_t v39 = v36[1];
      sub_1000125E0(*v36, v39);
      uint64_t v41 = sub_10000D2C0(v40, v39);
      unint64_t v42 = v31;
      if ((v43 & 1) != 0)
      {
        uint64_t v44 = v81;
        sub_10001AF08(*(void *)(v37 + 56) + *(void *)(v30 + 72) * v41, v81);
        uint64_t v45 = 0LL;
        uint64_t v46 = v84;
      }

      else
      {
        uint64_t v45 = 1LL;
        uint64_t v46 = v84;
        uint64_t v44 = v81;
      }

      v42(v44, v45, 1LL, v32);
      sub_10001226C(v40, v39);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v44, 1LL, v32) != 1)
      {
        uint64_t v51 = (uint64_t)v75;
        sub_1000219AC(v44, (uint64_t)v75);
        uint64_t v52 = sub_1000D31E4();
        uint64_t v54 = v77;
        uint64_t v53 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v52, v79);
        uint64_t v25 = v73;
        sub_10001AF08((uint64_t)v73, v46);
        sub_10001AF08((uint64_t)v25, (uint64_t)v76);
        uint64_t v55 = (uint64_t)v74;
        uint64_t v56 = sub_10001AF08(v51, (uint64_t)v74);
        uint64_t v57 = v46;
        uint64_t v58 = (os_log_s *)Logger.logObject.getter(v56);
        os_log_type_t v59 = static os_log_type_t.error.getter(v58);
        int v60 = v59;
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v61 = swift_slowAlloc(32LL, -1LL);
          uint64_t v84 = swift_slowAlloc(96LL, -1LL);
          uint64_t v88 = v84;
          *(_DWORD *)uint64_t v61 = 136315650;
          uint64_t v62 = sub_100013B60(*(void *)(v57 + *(int *)(v85 + 32)), *(void *)(v57 + *(int *)(v85 + 32) + 8));
          LODWORD(v85) = v60;
          unint64_t v64 = v63;
          uint64_t v86 = sub_1000058CC(v62, v63, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 4, v61 + 12);
          swift_bridgeObjectRelease(v64);
          sub_10001AF4C(v57);
          *(_WORD *)(v61 + 12) = 2080;
          uint64_t v65 = (uint64_t)v76;
          uint64_t v66 = sub_10001A634();
          unint64_t v68 = v67;
          uint64_t v86 = sub_1000058CC(v66, v67, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 14, v61 + 22);
          swift_bridgeObjectRelease(v68);
          sub_10001AF4C(v65);
          *(_WORD *)(v61 + 22) = 2080;
          uint64_t v69 = sub_10001A634();
          unint64_t v71 = v70;
          uint64_t v86 = sub_1000058CC(v69, v70, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 24, v61 + 32);
          swift_bridgeObjectRelease(v71);
          sub_10001AF4C(v55);
          _os_log_impl( (void *)&_mh_execute_header,  v58,  (os_log_type_t)v85,  "Found two applications with the same unique identifier %s:\n%s\n%s",  (uint8_t *)v61,  0x20u);
          uint64_t v72 = v84;
          swift_arrayDestroy(v84, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1LL, -1LL);
          swift_slowDealloc(v61, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
          sub_10001AF4C((uint64_t)v75);
          uint64_t v35 = (uint64_t)v73;
          return sub_10001AF4C(v35);
        }

        sub_10001AF4C(v55);
        sub_10001AF4C((uint64_t)v76);
        sub_10001AF4C(v57);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v79);
        sub_10001AF4C(v51);
        goto LABEL_4;
      }
    }

    else
    {
      unint64_t v42 = v31;
      uint64_t v44 = v81;
      v42(v81, 1LL, 1LL, v32);
    }

    sub_100012824(v44, &qword_100157ED0);
    uint64_t v47 = *v36;
    unint64_t v48 = v36[1];
    uint64_t v49 = (uint64_t)v73;
    uint64_t v50 = v80;
    sub_10001AF08((uint64_t)v73, v80);
    v42(v50, 0LL, 1LL, v32);
    sub_1000125E0(v47, v48);
    sub_10001C5E0(v50, v47, v48);
    uint64_t v35 = v49;
    return sub_10001AF4C(v35);
  }

LABEL_4:
  uint64_t v35 = (uint64_t)v25;
  return sub_10001AF4C(v35);
}

    ++v17;
    uint64_t v15 = v20;
    if (v17 == v11) {
      return (uint64_t)v12;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    ++v17;
    uint64_t v15 = v20;
    if (v17 == v11) {
      return (uint64_t)v12;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  if ((v8 & 0xC000000000000001LL) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
    goto LABEL_7;
  }

  if (*(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v8 + 32);
    swift_retain(v11);
LABEL_7:
    unint64_t result = swift_bridgeObjectRelease(v8);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0;
LABEL_15:
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v16;
    *(void *)(a2 + 48) = v17;
    *(void *)(a2 + 56) = v18;
    *(void *)(a2 + 64) = v19;
    *(void *)(a2 + 72) = v20;
    *(void *)(a2 + 80) = v21;
    *(_BYTE *)(a2 + 88) = v22;
    return result;
  }

  __break(1u);
  return result;
}

    uint64_t v10 = (v10 + 1) & v47;
  }

  while (((*(void *)(v49 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  swift_bridgeObjectRelease(v8);
  uint64_t v3 = v44;
  a1 = v45;
LABEL_34:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t __s1 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_100067BB4((void *)a2);
  sub_100064EBC(a2, v10, isUniquelyReferenced_nonNull_native);
  unint64_t v31 = *v3;
  *uint64_t v3 = __s1;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v32;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v33 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v33;
  return 1LL;
}

uint64_t sub_10001C5E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100005FB4(&qword_100157ED0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ApplicationRecord(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_100012824(a1, &qword_100157ED0);
    sub_10002079C(a2, a3, (uint64_t)v10);
    sub_10001226C(a2, a3);
    return sub_100012824((uint64_t)v10, &qword_100157ED0);
  }

  else
  {
    sub_1000219AC(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_100020E3C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = *v4;
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease(v17);
    return sub_10001226C(a2, a3);
  }

uint64_t sub_10001C744(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v7 = swift_allocObject(v3, 98LL, 7LL);
  sub_10001C798(a1, a2, a3);
  return v7;
}

uint64_t sub_10001C798(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 72) = 0LL;
  *(void *)(v3 + 88) = 0LL;
  *(_WORD *)(v3 + 96) = 514;
  *(void *)(v3 + 56) = a1;
  sub_100005F70((uint64_t)a3, v3 + 16);
  uint64_t v6 = type metadata accessor for ApplicationCache(0LL);
  uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(void *)(v7 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0LL;
  uint64_t v8 = v7 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v8, a2, v9);
  sub_100005158(a3, v7 + 16);
  *(void *)(v3 + 80) = v7;
  return v3;
}

uint64_t sub_10001C854(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v5 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0LL;
  uint64_t v6 = v5 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, a1, v7);
  sub_100005158(a2, v5 + 16);
  return v5;
}

uint64_t sub_10001C8D8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 176LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 168LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ActivationStateManager();
    sub_1000CD2E8(v1, (uint64_t)&off_1001463D0, v7, (uint64_t)&off_10014B648);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

_UNKNOWN **sub_10001C944()
{
  uint64_t v1 = sub_10001B978();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 88);
  if (!v3)
  {
    uint64_t v6 = 0LL;
LABEL_6:
    *(void *)(v0 + 88) = v2;
    uint64_t v5 = &off_1001463A0;
    uint64_t v2 = v6;
    goto LABEL_7;
  }

  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  char v4 = sub_10001E620(v2, v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + 88);
    goto LABEL_6;
  }

  uint64_t v5 = 0LL;
LABEL_7:
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_10001C9D8()
{
  uint64_t v1 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v37 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100005FB4(&qword_100158260);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v33 - v9;
  unint64_t v40 = 0xD000000000000017LL;
  unint64_t v41 = 0x8000000100122500LL;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216LL))(v8);
  int64_t v12 = 0LL;
  uint64_t v13 = *(void *)(result + 64);
  uint64_t v35 = result + 64;
  uint64_t v38 = result;
  uint64_t v14 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v36 = (unint64_t)(v14 + 63) >> 6;
  int64_t v34 = v36 - 1;
  if ((v15 & v13) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v21 = v20 | (v12 << 6);
  while (2)
  {
    uint64_t v22 = *(void *)(v38 + 56);
    uint64_t v23 = (uint64_t *)(*(void *)(v38 + 48) + 16 * v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    uint64_t *v7 = *v23;
    v7[1] = v25;
    uint64_t v26 = v22 + *(void *)(v37 + 72) * v21;
    uint64_t v27 = sub_100005FB4(&qword_100158268);
    sub_10001AF08(v26, (uint64_t)v7 + *(int *)(v27 + 48));
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v7, 0LL, 1LL, v27);
    sub_1000125E0(v24, v25);
    while (1)
    {
      sub_100021964((uint64_t)v7, (uint64_t)v10);
      uint64_t v32 = sub_100005FB4(&qword_100158268);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48LL))(v10, 1LL, v32) == 1)
      {
        swift_release(v38);
        return v40;
      }

      sub_10001226C(*(void *)v10, *((void *)v10 + 1));
      sub_1000219AC((uint64_t)&v10[*(int *)(v32 + 48)], (uint64_t)v3);
      v39._countAndFlagsBits = sub_10001A36C();
      v39._uint64_t object = v17;
      v18._countAndFlagsBits = 10LL;
      v18._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v18);
      uint64_t object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object);
      uint64_t result = sub_10001AF4C((uint64_t)v3);
      if (v16) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v28 = v12 + 1;
      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
        goto LABEL_29;
      }

      if (v28 < v36)
      {
        unint64_t v29 = *(void *)(v35 + 8 * v28);
        if (v29) {
          goto LABEL_11;
        }
        int64_t v30 = v12 + 2;
        ++v12;
        if (v28 + 1 < v36)
        {
          unint64_t v29 = *(void *)(v35 + 8 * v30);
          if (v29) {
            goto LABEL_14;
          }
          int64_t v12 = v28 + 1;
          if (v28 + 2 < v36)
          {
            unint64_t v29 = *(void *)(v35 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2LL;
              goto LABEL_11;
            }

            int64_t v30 = v28 + 3;
            int64_t v12 = v28 + 2;
            if (v28 + 3 < v36) {
              break;
            }
          }
        }
      }

LABEL_29:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    int64_t v34 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v15, 1LL, 1LL, v34);
    int v60 = 0LL;
LABEL_30:
    sub_10003F354((uint64_t)v15, (uint64_t)v18);
    uint64_t v35 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    int64_t v36 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v18, 1LL, v35) == 1;
    uint64_t result = v36;
    if (v36) {
      return result;
    }
    os_log_type_t v59 = v36;
    uint64_t v37 = (uint64_t)v7;
    uint64_t v38 = (uint64_t)&v18[*(int *)(v35 + 48)];
    Swift::String v39 = v18;
    unint64_t v41 = v62;
    unint64_t v40 = v63;
    unint64_t v42 = (uint64_t)v58;
    char v43 = v39;
    (*(void (**)(char *))(v62 + 32))(v58);
    sub_100012778(v38, (uint64_t)v9, v25);
    uint64_t v44 = sub_10003DD04(v42);
    uint64_t v46 = v45;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v40);
    if ((v46 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v7 = (char *)v37;
    sub_100012734(*(void *)(a2 + 56) + *(void *)(v61 + 72) * v44, v37, v25);
    uint64_t v47 = static UUID.== infix(_:_:)(v37, v9);
    unint64_t v48 = v56;
    if ((v47 & 1) == 0
      || (sub_10001AFB0(v37 + v56[5], &v9[v56[5]]) & 1) == 0
      || (static URL.== infix(_:_:)(v37 + v48[6], &v9[v48[6]]) & 1) == 0
      || (static URL.== infix(_:_:)(v37 + v48[7], &v9[v48[7]]) & 1) == 0)
    {
      sub_1000127BC(v37, type metadata accessor for DriverBinEntry);
LABEL_40:
      sub_1000127BC((uint64_t)v9, type metadata accessor for DriverBinEntry);
      return 0LL;
    }

    uint64_t v49 = static Date.== infix(_:_:)(v37 + v48[8], &v9[v48[8]]);
    sub_1000127BC(v37, v25);
    sub_1000127BC((uint64_t)v9, v25);
    uint64_t v15 = v55;
    Swift::String v18 = v43;
    uint64_t v24 = v60;
    uint64_t result = v59;
    if ((v49 & 1) == 0) {
      return result;
    }
  }

  uint64_t v32 = *(void *)(v52 + 8 * v33);
  if (v32)
  {
LABEL_15:
    uint64_t v31 = v33;
LABEL_12:
    uint64_t v26 = v25;
    int v60 = (v32 - 1) & v32;
    uint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
    uint64_t v57 = v31;
    goto LABEL_8;
  }

  while (1)
  {
    uint64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v31 >= v53)
    {
      uint64_t v57 = v51;
      goto LABEL_29;
    }

    uint64_t v32 = *(void *)(v52 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10001CD44()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  return swift_deallocClassInstance(v0, 98LL, 7LL);
}

id sub_10001CD90()
{
  return *(id *)(v0 + 56);
}

uint64_t sub_10001CD98()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t sub_10001CDA4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

void (*sub_10001CDB0(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 160LL))();
  return sub_10000C7E8;
}

uint64_t sub_10001CDFC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t sub_10001CE08()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t sub_10001CE14(char a1)
{
  if ((a1 & 1) != 0) {
    return 1635017060LL;
  }
  else {
    return 0x6E6F6973726576LL;
  }
}

BOOL sub_10001CE44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001CE5C()
{
  return sub_10001CE14(*v0);
}

uint64_t sub_10001CE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100021AB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001CE88(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001CE94(uint64_t a1)
{
  unint64_t v2 = sub_1000219F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001CEBC(uint64_t a1)
{
  unint64_t v2 = sub_1000219F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001CEE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100005FB4(&qword_100158270);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100005110(a1, v12);
  unint64_t v14 = sub_1000219F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SerializedApplicationCache.CodingKeys,  &type metadata for SerializedApplicationCache.CodingKeys,  v14,  v12,  v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v15 = sub_100005FB4(&qword_100158278);
    unint64_t v16 = sub_100021A34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10001D030@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100021B90(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10001D05C(void *a1)
{
  return sub_10001CEE4(a1, *v1, v1[1], v1[2]);
}

char *sub_10001D078()
{
  uint64_t v1 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  }

  else
  {
    uint64_t v3 = sub_10001DA44();
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

char *sub_10001D0D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v107 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v104 = (char *)&v92 - v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v92 - v13;
  uint64_t v15 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  if (v16)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v16);
    char v17 = sub_10001E620(a1, v16);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) != 0) {
      return (char *)swift_bridgeObjectRelease(a1);
    }
  }

  uint64_t v102 = v4;
  uint64_t v19 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = PropertyListEncoder.init()();
  uint64_t v108 = 0xD000000000000025LL;
  unint64_t v109 = 0x8000000100122520LL;
  uint64_t v110 = a1;
  unint64_t v21 = sub_100021D58();
  __n128 v22 = swift_bridgeObjectRetain(a1);
  uint64_t v23 = dispatch thunk of PropertyListEncoder.encode<A>(_:)( &v108,  &type metadata for SerializedApplicationCache,  v21,  v22);
  uint64_t v92 = v15;
  uint64_t v100 = v23;
  unint64_t v101 = v24;
  uint64_t v99 = v10;
  swift_release(v20);
  swift_bridgeObjectRelease(a1);
  uint64_t v25 = sub_1000D33DC();
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v94 = v25;
  uint64_t v95 = v26;
  uint64_t v27 = ((uint64_t (*)(char *))v26)(v14);
  int64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    int64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int64_t v30 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v29,  "Writing new application cache contents",  v30,  2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v103 = v7;
  uint64_t v93 = *(void (**)(char *, uint64_t))(v7 + 8);
  v93(v14, v6);
  uint64_t v96 = (char *)v2 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  URL.appendingPathExtension(_:)(7824750LL, 0xE300000000000000LL);
  uint64_t v31 = v2[5];
  uint64_t v32 = v2[6];
  os_log_t v97 = v2 + 2;
  uint64_t v98 = v2;
  sub_100005110(v2 + 2, v31);
  sub_1001073DC(v31, v32);
  uint64_t v33 = v111;
  uint64_t v34 = v112;
  uint64_t v35 = sub_100005110(&v108, v111);
  uint64_t v36 = URL.path.getter(v35);
  uint64_t v105 = v6;
  uint64_t v38 = v37;
  uint64_t v40 = v100;
  unint64_t v39 = v101;
  sub_1000125E0(v100, v101);
  unint64_t v41 = sub_10001BD10((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v34 + 40))( v36,  v38,  v40,  v39,  v41,  v33,  v34);
  swift_bridgeObjectRelease(v41);
  sub_10001226C(v40, v39);
  swift_bridgeObjectRelease(v38);
  sub_100006034(&v108);
  if ((v36 & 1) != 0)
  {
    char v43 = v104;
    uint64_t v42 = v105;
    uint64_t v44 = v95(v104, v94, v105);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.info.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Replacing old application cache contents", v47, 2u);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    v93(v43, v42);
    unint64_t v48 = v97;
    uint64_t v49 = v98;
    uint64_t v50 = v98[5];
    uint64_t v51 = v98[6];
    sub_100005110(v97, v50);
    sub_1001073DC(v50, v51);
    uint64_t v52 = v111;
    uint64_t v53 = v112;
    sub_100005110(&v108, v111);
    uint64_t v54 = v107;
    (*(void (**)(char *, char *, void, void, void, void, uint64_t, uint64_t))(v53 + 88))( v96,  v107,  0LL,  0LL,  0LL,  0LL,  v52,  v53);
    sub_100006034(&v108);
    uint64_t v87 = v49[5];
    uint64_t v88 = v49[6];
    sub_100005110(v48, v87);
    sub_1001073DC(v87, v88);
    uint64_t v89 = v111;
    uint64_t v90 = v112;
    sub_100005110(&v108, v111);
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 104))(v54, v89, v90);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v54, v102);
    sub_10001226C(v100, v101);
    sub_100006034(&v108);
    uint64_t v91 = *(void *)((char *)v49 + v92);
    *(void *)((char *)v49 + v92) = a1;
    return (char *)swift_bridgeObjectRelease(v91);
  }

  else
  {
    uint64_t v55 = v105;
    uint64_t v56 = swift_bridgeObjectRelease(a1);
    int v57 = errno.getter(v56);
    uint64_t result = strerror(v57);
    uint64_t v58 = v99;
    if (result)
    {
      uint64_t v59 = String.init(cString:)(result);
      uint64_t v61 = v60;
      uint64_t v108 = 0LL;
      unint64_t v109 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease(v109);
      uint64_t v108 = 0x6946657461657263LL;
      unint64_t v109 = 0xEB0000000020656CLL;
      uint64_t v62 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      unint64_t v63 = v107;
      uint64_t v64 = v102;
      v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v102, v62);
      uint64_t object = v65._object;
      String.append(_:)(v65);
      swift_bridgeObjectRelease(object);
      v67._countAndFlagsBits = 0x3A64656C69616620LL;
      v67._uint64_t object = (void *)0xEF206F6E72726520LL;
      String.append(_:)(v67);
      v68._countAndFlagsBits = v59;
      v68._uint64_t object = v61;
      String.append(_:)(v68);
      swift_bridgeObjectRelease(v61);
      uint64_t v69 = v108;
      unint64_t v70 = v109;
      unint64_t v71 = sub_100012624();
      uint64_t v72 = swift_allocError(&type metadata for KMError, v71, 0LL, 0LL);
      *(void *)uint64_t v73 = v69;
      *(void *)(v73 + 8) = v70;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(void *)(v73 + 64) = 0LL;
      *(_BYTE *)(v73 + 72) = 19;
      swift_willThrow(v72);
      sub_10001226C(v100, v101);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v63, v64);
      uint64_t v74 = v55;
      uint64_t v75 = v103;
      uint64_t v76 = sub_1000D33DC();
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v58, v76, v74);
      swift_errorRetain(v72);
      uint64_t v77 = swift_errorRetain(v72);
      uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
      os_log_type_t v79 = static os_log_type_t.error.getter(v78);
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v105 = v74;
        uint64_t v103 = v75;
        uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v81 = v58;
        uint64_t v82 = swift_slowAlloc(32LL, -1LL);
        uint64_t v108 = v82;
        *(_DWORD *)uint64_t v80 = 136315138;
        uint64_t v113 = v72;
        swift_errorRetain(v72);
        uint64_t v83 = sub_100005FB4(&qword_10015AB20);
        uint64_t v84 = String.init<A>(describing:)(&v113, v83);
        unint64_t v86 = v85;
        uint64_t v113 = sub_1000058CC(v84, v85, &v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease(v86);
        swift_errorRelease(v72);
        swift_errorRelease(v72);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed to write application cache: %s", v80, 0xCu);
        swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        swift_slowDealloc(v80, -1LL, -1LL);

        swift_errorRelease(v72);
        return (char *)(*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v81, v105);
      }

      else
      {
        swift_errorRelease(v72);
        swift_errorRelease(v72);
        swift_errorRelease(v72);

        return (char *)(*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v58, v74);
      }
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

char *(*sub_10001D980(char **a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached];
  if (v4)
  {
    uint64_t v5 = *(char **)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached];
  }

  else
  {
    uint64_t v5 = sub_10001DA44();
    uint64_t v6 = *(void *)&v1[v3];
    *(void *)&v1[v3] = v5;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v6);
    uint64_t v4 = 0LL;
  }

  *a1 = v5;
  swift_bridgeObjectRetain(v4);
  return sub_10001DA00;
}

char *sub_10001DA00(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0) {
    return sub_10001D0D8(*a1);
  }
  swift_bridgeObjectRetain(*a1);
  sub_10001D0D8(v3);
  return (char *)swift_bridgeObjectRelease(v2);
}

char *sub_10001DA44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v75 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  os_log_type_t v79 = (char *)&v75 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v75 - v12;
  uint64_t v14 = sub_1000D33DC();
  uint64_t v80 = *(void (**)(char *))(v3 + 16);
  uint64_t v81 = (void (*)(char *, uint64_t))v14;
  v80(v13);
  uint64_t v15 = swift_retain_n(v0, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v77 = v6;
  uint64_t v78 = v9;
  if (v18)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v20;
    uint64_t v76 = v2;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = URL.path.getter(v20);
    unint64_t v23 = v22;
    uint64_t v82 = sub_1000058CC(v21, v22, &v83);
    uint64_t v2 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v19 + 4, v19 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Loading application cache from %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v0, 2LL);
  }

  unint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v13, v2);
  uint64_t v25 = v1[5];
  uint64_t v26 = v1[6];
  sub_100005110(v1 + 2, v25);
  sub_1001073DC(v25, v26);
  uint64_t v27 = v87;
  int64_t v28 = sub_100005110(&v83, v86);
  uint64_t v29 = URL.path.getter(v28);
  uint64_t v31 = v30;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v27 + 16))(v29);
  unint64_t v34 = v33;
  swift_bridgeObjectRelease(v31);
  uint64_t v35 = sub_100006034(&v83);
  if (v34 >> 60 != 15)
  {
    uint64_t v49 = v79;
    uint64_t v50 = v80;
    uint64_t v51 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v80)(v79, v81, v2);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Loading application cache, decoding data", v54, 2u);
      uint64_t v55 = v54;
      uint64_t v49 = v79;
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    v24(v49, v2);
    uint64_t v56 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    uint64_t v57 = PropertyListDecoder.init()();
    unint64_t v58 = sub_100022A0C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v83,  &type metadata for SerializedApplicationCache,  v32,  v34,  &type metadata for SerializedApplicationCache,  v58);
    swift_release(v57);
    uint64_t v71 = v84;
    unint64_t v70 = v85;
    if (v83 == 0xD000000000000025LL && v84 == 0x8000000100122520LL)
    {
      sub_10002193C(v32, v34);
      swift_bridgeObjectRelease(0x8000000100122520LL);
    }

    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, 0xD000000000000025LL, 0x8000000100122520LL, 0LL) & 1) != 0)
    {
      sub_10002193C(v32, v34);
      swift_bridgeObjectRelease(v71);
    }

    else
    {
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v71);
      unint64_t v72 = sub_100012624();
      uint64_t v73 = swift_allocError(&type metadata for KMError, v72, 0LL, 0LL);
      *(void *)uint64_t v74 = 0xD000000000000023LL;
      *(void *)(v74 + 8) = 0x8000000100122700LL;
      *(_OWORD *)(v74 + 16) = 0u;
      *(_OWORD *)(v74 + 32) = 0u;
      *(_OWORD *)(v74 + 48) = 0u;
      *(void *)(v74 + 64) = 0LL;
      *(_BYTE *)(v74 + 72) = 9;
      swift_willThrow(v73);
      uint64_t v59 = v77;
      ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v50)(v77, v81, v2);
      swift_errorRetain(v73);
      uint64_t v60 = swift_errorRetain(v73);
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        unint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v64 = swift_slowAlloc(32LL, -1LL);
        uint64_t v81 = v24;
        uint64_t v65 = v64;
        uint64_t v82 = v73;
        uint64_t v83 = v64;
        *(_DWORD *)unint64_t v63 = 136315138;
        swift_errorRetain(v73);
        uint64_t v66 = sub_100005FB4(&qword_10015AB20);
        uint64_t v67 = String.init<A>(describing:)(&v82, v66);
        uint64_t v76 = v2;
        unint64_t v69 = v68;
        uint64_t v82 = sub_1000058CC(v67, v68, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v63 + 4, v63 + 12);
        swift_bridgeObjectRelease(v69);
        swift_errorRelease(v73);
        swift_errorRelease(v73);
        _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "invalid application cache, failed to read plist: %s",  v63,  0xCu);
        swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1LL, -1LL);
        swift_slowDealloc(v63, -1LL, -1LL);

        v81(v77, v76);
      }

      else
      {
        swift_errorRelease(v73);
        swift_errorRelease(v73);

        v24(v59, v2);
      }

      unint64_t v70 = sub_10001BE3C((uint64_t)_swiftEmptyArrayStorage);
      swift_errorRelease(v73);
      sub_10002193C(v32, v34);
    }

    return (char *)v70;
  }

  int v36 = errno.getter(v35);
  uint64_t result = strerror(v36);
  uint64_t v38 = v80;
  if (result)
  {
    uint64_t v39 = String.init(cString:)(result);
    unint64_t v41 = v40;
    uint64_t v42 = v78;
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v38)(v78, v81, v2);
    swift_bridgeObjectRetain(v41);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      os_log_type_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v47;
      *(_DWORD *)os_log_type_t v46 = 136315138;
      swift_bridgeObjectRetain(v41);
      uint64_t v82 = sub_1000058CC(v39, v41, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease_n(v41, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "contentsOfFile failed to read application cache: %s",  v46,  0xCu);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);

      unint64_t v48 = v78;
    }

    else
    {

      swift_bridgeObjectRelease_n(v41, 2LL);
      unint64_t v48 = v42;
    }

    v24(v48, v2);
    return (char *)sub_10001BE3C((uint64_t)_swiftEmptyArrayStorage);
  }

  __break(1u);
  return result;
}

uint64_t sub_10001E20C()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10001E274(uint64_t a1, uint64_t a2)
{
  return sub_10001E3BC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001E280(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10001E2F4(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10001E370@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_10001E3B0(uint64_t a1, uint64_t a2)
{
  return sub_10001E3BC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001E3BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10001E3F8(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10001E438(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10001E4A8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10001E530@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10001E574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001E59C(uint64_t a1)
{
  uint64_t v2 = sub_100012860( &qword_1001585E8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10011C008);
  uint64_t v3 = sub_100012860( &qword_1001585F0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10010F98C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001E620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v98 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v118 = (uint64_t)&v98 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v117 = (uint64_t)&v98 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  BOOL v18 = (char *)&v98 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v120 = (uint64_t)&v98 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v112 = (uint64_t)&v98 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v111 = (uint64_t)&v98 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v98 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v98 - v28;
  uint64_t v30 = sub_100005FB4(&qword_100158260);
  uint64_t v31 = __chkstk_darwin(v30);
  __chkstk_darwin(v31);
  unint64_t v34 = (uint64_t *)((char *)&v98 - v33);
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v105 = v18;
  uint64_t v106 = v32;
  uint64_t v108 = v5;
  uint64_t v115 = v4;
  int64_t v110 = 0LL;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v100 = a1 + 64;
  uint64_t v36 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v37 = -1LL;
  if (v36 < 64) {
    uint64_t v37 = ~(-1LL << v36);
  }
  unint64_t v38 = v37 & v35;
  int64_t v101 = (unint64_t)(v36 + 63) >> 6;
  int64_t v99 = v101 - 1;
  uint64_t v102 = v8;
  uint64_t v114 = v11;
  uint64_t v107 = v34;
  uint64_t v119 = v27;
  uint64_t v116 = v29;
  uint64_t v103 = a2;
  uint64_t v104 = a1;
  if (v38)
  {
    uint64_t v40 = (uint64_t)v8;
    uint64_t v113 = (v38 - 1) & v38;
    unint64_t v41 = __clz(__rbit64(v38)) | (v110 << 6);
    uint64_t v42 = v108;
LABEL_9:
    uint64_t v43 = *(void *)(a1 + 56);
    uint64_t v44 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v41);
    uint64_t v45 = *v44;
    unint64_t v46 = v44[1];
    uint64_t v47 = (uint64_t)v106;
    *uint64_t v106 = *v44;
    *(void *)(v47 + 8) = v46;
    uint64_t v48 = v43 + *(void *)(v42 + 72) * v41;
    uint64_t v49 = sub_100005FB4(&qword_100158268);
    sub_10001AF08(v48, v47 + *(int *)(v49 + 48));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v47, 0LL, 1LL, v49);
    sub_1000125E0(v45, v46);
    goto LABEL_33;
  }

  int64_t v50 = v110 + 1;
  uint64_t v42 = v108;
  if (__OFADD__(v110, 1LL))
  {
    __break(1u);
    JUMPOUT(0x10001FF7CLL);
  }

  if (v50 < v101)
  {
    unint64_t v51 = *(void *)(v100 + 8 * v50);
    if (v51)
    {
      uint64_t v40 = (uint64_t)v8;
LABEL_14:
      uint64_t v113 = (v51 - 1) & v51;
      unint64_t v41 = __clz(__rbit64(v51)) + (v50 << 6);
      int64_t v110 = v50;
      goto LABEL_9;
    }

    int64_t v52 = v110 + 2;
    ++v110;
    if (v50 + 1 < v101)
    {
      unint64_t v51 = *(void *)(v100 + 8 * v52);
      if (v51)
      {
LABEL_17:
        uint64_t v40 = (uint64_t)v8;
        int64_t v50 = v52;
        goto LABEL_14;
      }

      int64_t v110 = v50 + 1;
      if (v50 + 2 < v101)
      {
        unint64_t v51 = *(void *)(v100 + 8 * (v50 + 2));
        if (v51)
        {
          uint64_t v40 = (uint64_t)v8;
          v50 += 2LL;
          goto LABEL_14;
        }

        int64_t v110 = v50 + 2;
        if (v50 + 3 < v101)
        {
          unint64_t v51 = *(void *)(v100 + 8 * (v50 + 3));
          if (v51)
          {
            uint64_t v40 = (uint64_t)v8;
            v50 += 3LL;
            goto LABEL_14;
          }

          int64_t v52 = v50 + 4;
          int64_t v110 = v50 + 3;
          if (v50 + 4 < v101)
          {
            unint64_t v51 = *(void *)(v100 + 8 * v52);
            if (v51) {
              goto LABEL_17;
            }
            uint64_t v40 = (uint64_t)v8;
            while (1)
            {
              int64_t v50 = v52 + 1;
              if (__OFADD__(v52, 1LL))
              {
                __break(1u);
                JUMPOUT(0x10002003CLL);
              }

              if (v50 >= v101) {
                break;
              }
              unint64_t v51 = *(void *)(v100 + 8 * v50);
              ++v52;
              if (v51) {
                goto LABEL_14;
              }
            }

            int64_t v110 = v99;
          }
        }
      }
    }
  }

  uint64_t v40 = (uint64_t)v8;
  uint64_t v53 = sub_100005FB4(&qword_100158268);
  uint64_t v47 = (uint64_t)v106;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v106, 1LL, 1LL, v53);
  uint64_t v113 = 0LL;
LABEL_33:
  uint64_t v54 = v107;
  sub_100021964(v47, (uint64_t)v107);
  uint64_t v55 = sub_100005FB4(&qword_100158268);
  int v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48LL))(v54, 1LL, v55);
  BOOL v39 = v56 == 1;
  if (v56 != 1)
  {
    uint64_t v57 = *v54;
    unint64_t v58 = v54[1];
    uint64_t v59 = v116;
    sub_1000219AC((uint64_t)v54 + *(int *)(v55 + 48), (uint64_t)v116);
    uint64_t v60 = sub_10000D2C0(v57, v58);
    char v62 = v61;
    sub_10001226C(v57, v58);
    if ((v62 & 1) == 0)
    {
LABEL_62:
      sub_10001AF4C((uint64_t)v59);
      return 0LL;
    }

    BOOL v109 = v39;
    uint64_t v63 = *(void *)(a2 + 56) + *(void *)(v42 + 72) * v60;
    uint64_t v64 = v119;
    sub_10001AF08(v63, (uint64_t)v119);
    uint64_t v65 = v64[1];
    uint64_t v66 = v59[1];
    if (*v64 == *v59 && v65 == v66)
    {
      uint64_t v67 = (uint64_t)v119;
      uint64_t v68 = v111;
      sub_10001AF08((uint64_t)v119, v111);
      uint64_t v59 = v116;
      uint64_t v69 = v112;
      sub_10001AF08((uint64_t)v116, v112);
      uint64_t v70 = v115;
      uint64_t v71 = (uint64_t)v105;
    }

    else
    {
      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)(*v64, v65, *v59, v66, 0LL);
      uint64_t v67 = (uint64_t)v119;
      uint64_t v68 = v111;
      sub_10001AF08((uint64_t)v119, v111);
      uint64_t v59 = v116;
      uint64_t v69 = v112;
      sub_10001AF08((uint64_t)v116, v112);
      uint64_t v70 = v115;
      uint64_t v71 = (uint64_t)v105;
      if ((v72 & 1) == 0)
      {
        sub_10001AF4C(v69);
        sub_10001AF4C(v68);
        sub_10001AF08(v67, v120);
        sub_10001AF08((uint64_t)v59, v71);
LABEL_61:
        sub_10001AF4C(v120);
        sub_10001AF4C(v71);
        sub_10001AF08(v67, v117);
        sub_10001AF08((uint64_t)v59, v118);
        uint64_t v95 = (uint64_t)v114;
        sub_10001AF4C(v117);
        sub_10001AF4C(v118);
        uint64_t v96 = (uint64_t)v119;
        sub_10001AF08((uint64_t)v119, v95);
        sub_10001AF08((uint64_t)v59, v40);
        sub_10001AF4C(v95);
        sub_10001AF4C(v40);
        sub_10001AF4C(v96);
        goto LABEL_62;
      }
    }

    char v73 = static URL.== infix(_:_:)(v68 + *(int *)(v70 + 20), v69 + *(int *)(v70 + 20));
    sub_10001AF4C(v69);
    sub_10001AF4C(v68);
    sub_10001AF08(v67, v120);
    sub_10001AF08((uint64_t)v59, v71);
    if ((v73 & 1) != 0)
    {
      uint64_t v74 = *(int *)(v70 + 24);
      uint64_t v75 = *(void **)(v120 + v74);
      uint64_t v76 = *(void **)(v71 + v74);
      uint64_t v77 = v75[2];
      if (v77 == v76[2])
      {
        if (!v77 || v75 == v76)
        {
LABEL_51:
          sub_10001AF4C(v120);
          sub_10001AF4C(v71);
          uint64_t v87 = v117;
          sub_10001AF08(v67, v117);
          sub_10001AF08((uint64_t)v59, v118);
          __asm { BR              X10 }
        }

        uint64_t v78 = v75[4];
        uint64_t v79 = v75[5];
        uint64_t v80 = v76[4];
        uint64_t v81 = v76[5];
        if (v78 == v80 && v79 == v81 || (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v80, v81, 0LL) & 1) != 0)
        {
          if (v77 == 1) {
            goto LABEL_51;
          }
          if ((v82 = v75[6], uint64_t v83 = v75[7], v84 = v76[6], v85 = v76[7], v82 == v84) && v83 == v85
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, v84, v85, 0LL) & 1) != 0)
          {
            uint64_t v86 = v77 - 2;
            if (!v86) {
              goto LABEL_51;
            }
            uint64_t v88 = v75 + 9;
            uint64_t v89 = v76 + 9;
            while (1)
            {
              uint64_t v90 = *(v88 - 1);
              uint64_t v91 = *v88;
              uint64_t v92 = *(v89 - 1);
              uint64_t v93 = *v89;
              BOOL v94 = v90 == v92 && v91 == v93;
              if (!v94 && (_stringCompareWithSmolCheck(_:_:expecting:)(v90, v91, v92, v93, 0LL) & 1) == 0) {
                break;
              }
              v88 += 2;
              v89 += 2;
              if (!--v86) {
                goto LABEL_51;
              }
            }
          }
        }
      }
    }

    goto LABEL_61;
  }

  return v39;
}

unint64_t sub_10002011C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10002019C(a1, v7);
}

unint64_t sub_10002019C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

void sub_100020310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100020370( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100020554LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *uint64_t v37 = (_DWORD)result == 0;
  return result;
}

void sub_100020578(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000205D4()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  sub_100020310((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_10001226C(v1, v0);
  if (!v2) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10002079C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10000D2C0(a1, a2);
  LOBYTE(asub_100006034(v0 + 2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100020FFC();
      uint64_t v12 = v19;
    }

    sub_10001226C(*(void *)(*(void *)(v12 + 48) + 16 * v9), *(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    uint64_t v13 = *(void *)(v12 + 56);
    uint64_t v14 = type metadata accessor for ApplicationRecord(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_1000219AC(v13 + *(void *)(v15 + 72) * v9, a3);
    sub_100020C30(v9, v12);
    uint64_t v16 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for ApplicationRecord(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a3,  1LL,  1LL,  v18);
  }

Swift::Int sub_1000208C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100005FB4(&qword_1001585A8);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v42 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  Swift::Int result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = v42[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = v42[v19];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v27;
      }
    }

LABEL_23:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v10 + 48);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v30 = *(void *)(v10 + 56) + v29 * v23;
    unint64_t v31 = *(void *)(v28 + 16 * v23 + 8);
    __int128 v44 = *(_OWORD *)(v28 + 16 * v23);
    if ((v43 & 1) != 0)
    {
      sub_1000219AC(v30, (uint64_t)v9);
    }

    else
    {
      sub_10001AF08(v30, (uint64_t)v9);
      sub_1000125E0(v44, v31);
    }

    Hasher.init(_seed:)(v45, *(void *)(v12 + 40));
    Data.hash(into:)(v45, v44, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
      __int128 v21 = v44;
    }

    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      __int128 v21 = v44;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(_OWORD *)(*(void *)(v12 + 48) + 16 * v20) = v21;
    Swift::Int result = sub_1000219AC((uint64_t)v9, *(void *)(v12 + 56) + v29 * v20);
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v10 + 48);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v30 = *(void *)(v10 + 56) + v29 * v23;
    unint64_t v31 = *(void *)(v28 + 16 * v23 + 8);
    __int128 v44 = *(_OWORD *)(v28 + 16 * v23);
    if ((v43 & 1) != 0)
    {
      sub_100025C5C(v30, (uint64_t)v9);
    }

    else
    {
      sub_100025C18(v30, (uint64_t)v9);
      sub_1000125E0(v44, v31);
    }

    Hasher.init(_seed:)(v45, *(void *)(v12 + 40));
    Data.hash(into:)(v45, v44, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
      __int128 v21 = v44;
    }

    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      __int128 v21 = v44;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(_OWORD *)(*(void *)(v12 + 48) + 16 * v20) = v21;
    Swift::Int result = sub_100025C5C((uint64_t)v9, *(void *)(v12 + 56) + v29 * v20);
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    int64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v27[1]);
      swift_bridgeObjectRetain(v30);
    }

    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v29, v28);
    Swift::Int result = Hasher._finalize()();
    unint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      int64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v33 = v18 == v32;
        if (v18 == v32) {
          uint64_t v18 = 0LL;
        }
        v31 |= v33;
        unint64_t v34 = *(void *)(v13 + 8 * v18);
      }

      while (v34 == -1);
      int64_t v19 = __clz(__rbit64(~v34)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    *unint64_t v20 = v29;
    v20[1] = v28;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v30;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  int64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  char v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_41:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v160 = (v12 - 1) & v12;
    int64_t v161 = v13;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(v158 + 48) + 16 * v10);
    unint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v158 + 56) + 8 * v10);
    int64_t v19 = v159[3];
    unint64_t v20 = type metadata accessor for DriverExtension(0LL);
    uint64_t v162 = v19;
    __int128 v21 = swift_dynamicCastClass(v19, v20);
    swift_bridgeObjectRetain(v17);
    if (!v21)
    {
      swift_bridgeObjectRetain(v18);
      goto LABEL_56;
    }

    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    unint64_t v22 = sub_10002EBA8(&v169, v16, v17);
    if (*v23)
    {
      int64_t v24 = v23;
      Swift::String v157 = (void (*)(__int128 *, void))v22;
      uint64_t v25 = (uint64_t *)sub_10008FA54();
      int64_t v27 = *v25;
      unint64_t v26 = v25[1];
      sub_10001A148(v153, (uint64_t)&v163, &qword_100157FF0);
      uint64_t v28 = *((void *)&v164 + 1);
      if (*((void *)&v164 + 1))
      {
        uint64_t v29 = v165;
        sub_100005110(&v163, *((uint64_t *)&v164 + 1));
        uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 32);
        unint64_t v31 = swift_bridgeObjectRetain(v26);
        uint64_t v32 = v30(v28, v29, v31);
        unint64_t v34 = v33;
        char v35 = sub_1000DBC4C();
        BOOL v37 = v36;
        sub_10001226C(v32, v34);
        *((void *)&v168 + 1) = &type metadata for String;
        *(void *)&uint64_t v167 = v35;
        *((void *)&v167 + 1) = v37;
        sub_100006034(&v163);
        if (*((void *)&v168 + 1))
        {
          sub_100017790(&v167, &v163);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
          uint64_t v166 = (void *)*v24;
          void *v24 = 0x8000000000000000LL;
          sub_100017090(&v163, v27, v26, isUniquelyReferenced_nonNull_native);
          uint64_t v39 = *v24;
          void *v24 = (uint64_t)v166;
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v39);
          v157(&v169, 0LL);
          goto LABEL_38;
        }
      }

      else
      {
        swift_bridgeObjectRetain(v26);
        sub_100012824((uint64_t)&v163, &qword_100157FF0);
        uint64_t v167 = 0u;
        uint64_t v168 = 0u;
      }

      sub_100012824((uint64_t)&v167, &qword_100157FF8);
      uint64_t v40 = *v24;
      swift_bridgeObjectRetain(*v24);
      int64_t v41 = sub_100006114(v27, v26);
      int v43 = v42;
      swift_bridgeObjectRelease(v40);
      if ((v43 & 1) != 0)
      {
        __int128 v44 = swift_isUniquelyReferenced_nonNull_native(*v24);
        uint64_t v166 = (void *)*v24;
        void *v24 = 0x8000000000000000LL;
        if ((v44 & 1) == 0) {
          sub_100017228();
        }
        char v45 = (uint64_t)v166;
        swift_bridgeObjectRelease(*(void *)(v166[6] + 16 * v41 + 8));
        sub_100017790((_OWORD *)(*(void *)(v45 + 56) + 32 * v41), &v163);
        sub_100035F88(v41, v45);
        char v46 = *v24;
        void *v24 = v45;
        swift_bridgeObjectRelease(v46);
      }

      else
      {
        uint64_t v163 = 0u;
        unint64_t v164 = 0u;
      }

      swift_bridgeObjectRelease(v26);
      sub_100012824((uint64_t)&v163, &qword_100157FF8);
      v157(&v169, 0LL);
    }

    else
    {
      ((void (*)(__int128 *, void))v22)(&v169, 0LL);
    }

        uint64_t v18 = (v28 - 1) & v28;
        uint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }

      uint64_t v30 = *(void *)(v9 + 72);
      unint64_t v31 = *(void *)(v22 + 48) + v30 * v25;
      if ((v52 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
        uint64_t v32 = *(void *)(v22 + 56);
        unint64_t v33 = *(void *)(v50 + 72);
        sub_100012778(v32 + v33 * v25, v53, type metadata accessor for DriverBinEntry);
      }

      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
        unint64_t v34 = *(void *)(v22 + 56);
        unint64_t v33 = *(void *)(v50 + 72);
        sub_100012734(v34 + v33 * v25, v53, type metadata accessor for DriverBinEntry);
      }

      char v35 = *(void *)(v14 + 40);
      unint64_t v36 = sub_100012860( &qword_100157EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      BOOL v37 = -1LL << *(_BYTE *)(v14 + 32);
      uint64_t v38 = result & ~v37;
      uint64_t v39 = v38 >> 6;
      if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
      {
        unint64_t v23 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v40 = 0;
        int64_t v41 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          uint64_t v42 = v39 == v41;
          if (v39 == v41) {
            uint64_t v39 = 0LL;
          }
          v40 |= v42;
          int v43 = *(void *)(v19 + 8 * v39);
        }

        while (v43 == -1);
        unint64_t v23 = __clz(__rbit64(~v43)) + (v39 << 6);
      }

      *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(void *)(v14 + 48) + v30 * v23, v11, v8);
      Swift::Int result = sub_100012778(v53, *(void *)(v14 + 56) + v33 * v23, type metadata accessor for DriverBinEntry);
      ++*(void *)(v14 + 16);
    }
  }

  __int128 v44 = v12;
LABEL_44:
  Swift::Int result = swift_release(v44);
  *uint64_t v3 = v14;
  return result;
}

    unint64_t v16 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    int64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    unint64_t v31 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    Swift::Int result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  int64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

  int64_t v41 = (v10 - 1) & v10;
  uint64_t v42 = v11;
  for (uint64_t i = __clz(__rbit64(v10)) + (v11 << 6); ; uint64_t i = __clz(__rbit64(v6)) | (v2 << 6))
  {
    uint64_t v13 = *(void *)(a1 + 48) + 72 * i;
    uint64_t v48 = *(_OWORD *)v13;
    uint64_t v15 = *(_OWORD *)(v13 + 32);
    uint64_t v14 = *(_OWORD *)(v13 + 48);
    unint64_t v16 = *(_OWORD *)(v13 + 16);
    int64_t v52 = *(_BYTE *)(v13 + 64);
    unint64_t v51 = v14;
    uint64_t v49 = v16;
    int64_t v50 = v15;
    Hasher.init(_seed:)(__s1, *(void *)(a2 + 40));
    sub_100067BB4(&v48);
    ApprovalSettingsStateEntry.hash(into:)((uint64_t)__s1);
    uint64_t v17 = Hasher._finalize()();
    uint64_t v18 = v43;
    int64_t v19 = -1LL << *(_BYTE *)(v43 + 32);
    unint64_t v20 = v17 & ~v19;
    if (((*(void *)(v46 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
      break;
    }
    __int128 v44 = ~v19;
    __int128 v21 = v48;
    while (1)
    {
      unint64_t v22 = *(void *)(v18 + 48) + 72 * v20;
      unint64_t v23 = *(void *)(v22 + 8);
      int64_t v24 = *(void *)(v22 + 16);
      uint64_t v25 = *(void *)(v22 + 24);
      unint64_t v26 = *(void *)(v22 + 32);
      int64_t v27 = *(void *)(v22 + 40);
      uint64_t v29 = *(void *)(v22 + 48);
      uint64_t v28 = *(void *)(v22 + 56);
      char v45 = *(unsigned __int8 *)(v22 + 64);
      if (*(void *)v22 != (void)v21 || v23 != *((void *)&v21 + 1))
      {
        unint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v22, v23, v21, *((void *)&v21 + 1), 0LL);
        uint64_t v18 = v43;
        if ((v31 & 1) == 0) {
          goto LABEL_27;
        }
      }

      if (v25)
      {
        if (!*((void *)&v49 + 1)) {
          goto LABEL_27;
        }
        if (v24 != (void)v49 || v25 != *((void *)&v49 + 1))
        {
          unint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v49, *((void *)&v49 + 1), 0LL);
          uint64_t v18 = v43;
          if ((v33 & 1) == 0) {
            goto LABEL_27;
          }
        }
      }

      else if (*((void *)&v49 + 1))
      {
        goto LABEL_27;
      }

      if (v27)
      {
        if (!*((void *)&v50 + 1)) {
          goto LABEL_27;
        }
        if (v26 != (void)v50 || v27 != *((void *)&v50 + 1))
        {
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v50, *((void *)&v50 + 1), 0LL);
          uint64_t v18 = v43;
          if ((v35 & 1) == 0) {
            goto LABEL_27;
          }
        }
      }

      else if (*((void *)&v50 + 1))
      {
        goto LABEL_27;
      }

      sub_100066FE8(&v51, &v53);
      if (v28 >> 60 != 15)
      {
        sub_100066FE8(&v53, &v54);
        uint64_t v18 = v43;
        if (*((void *)&v54 + 1) >> 60 != 15LL) {
          __asm { BR              X8 }
        }

        goto LABEL_27;
      }

      sub_100066FE8(&v53, &v55);
      uint64_t v18 = v43;
      if (*((void *)&v55 + 1) >> 60 == 15LL)
      {
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v25);
        sub_10002B568(v29, v28);
        unint64_t v36 = v52;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v23);
        sub_10002193C(v29, v28);
        uint64_t v18 = v43;
        if (v45 == v36) {
          break;
        }
      }

    __break(1u);
    goto LABEL_24;
  }

  sub_1000A0480(v14, a2 & 1);
  unint64_t v16 = sub_1000357A4(v6);
  if ((v15 & 1) == (v17 & 1))
  {
    uint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    int64_t v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
    swift_willThrow(v19);
    uint64_t v49 = v19;
    swift_errorRetain(v19);
    unint64_t v20 = sub_100005FB4(&qword_10015AB20);
    if ((swift_dynamicCast(v20, &v49, v20, &type metadata for _MergeError, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease_n(a1, 2LL);
      return swift_errorRelease(v49);
    }

    goto LABEL_26;
  }

    uint64_t v7 = (v14 - 1) & v14;
    uint64_t v11 = __clz(__rbit64(v14)) + (v15 << 6);
    unint64_t v9 = v15;
  }

  unint64_t v16 = v9 + 5;
  if (v9 + 5 >= v8)
  {
LABEL_39:
    sub_10000610C(a1);
    return;
  }

  uint64_t v14 = *(void *)(v4 + 8 * v16);
  if (v14)
  {
    uint64_t v15 = v9 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v8) {
      goto LABEL_39;
    }
    uint64_t v14 = *(void *)(v4 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_23;
    }
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  unint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for StateManagerWrapper();
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
    goto LABEL_24;
  }

  __break(1u);
LABEL_50:
  uint64_t v80 = sub_10008ECFC((void *)(v16 > 1), a2, 1, v80);
LABEL_15:
  v80[2] = a2;
  uint64_t v29 = &v80[10 * a5];
  v29[4] = v76;
  v29[5] = v74;
  v29[6] = v72;
  v29[7] = v71;
  v29[8] = v70;
  v29[9] = a6;
  v29[10] = a4;
  v29[11] = a3;
  v29[12] = v8;
  *((_BYTE *)v29 + 104) = a1;
  sub_100039508(v76, v74, v72, v71, v70, a6, (uint64_t)a4, (uint64_t)a3, v8, a1);
  swift_errorRelease(v96);
  if (!v7 || v17 < 28)
  {
    unint64_t v34 = swift_allocError(&type metadata for KMError, v69, 0LL, 0LL);
    unint64_t v36 = v34;
    uint64_t v30 = 0LL;
    *(void *)char v35 = 0xD000000000000033LL;
    uint64_t v38 = 0x800000010012C530LL;
    BOOL v37 = 255;
    a4 = v83;
    a3 = v80;
LABEL_31:
    *(void *)(v35 + 8) = v38;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(void *)(v35 + 64) = 0LL;
    *(_BYTE *)(v35 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v34);
    uint64_t v96 = v36;
    swift_errorRetain(v36);
    uint64_t v39 = sub_100005FB4(&qword_10015AB20);
    if (swift_dynamicCast(&v86, &v96, v39, &type metadata for KMError, 0LL))
    {
      uint64_t v79 = v37;
      uint64_t v81 = v30;
      uint64_t v84 = a4;
      swift_errorRelease(v36);
      uint64_t v40 = v86;
      int64_t v41 = v87;
      uint64_t v42 = v88;
      int v43 = v89;
      __int128 v44 = v90;
      char v45 = v94;
      char v46 = v95;
      uint64_t v75 = (uint64_t)v92;
      uint64_t v77 = v91;
      char v73 = (uint64_t)v93;
      sub_1000516E4(v86, v87, v88, v89, v90, v91, (uint64_t)v92, (uint64_t)v93, v94, v95);
      if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0) {
        a3 = sub_10008ECFC(0LL, a3[2] + 1LL, 1, a3);
      }
      uint64_t v48 = a3[2];
      char v47 = a3[3];
      uint64_t v49 = a3;
      if (v48 >= v47 >> 1) {
        uint64_t v49 = sub_10008ECFC((void *)(v47 > 1), v48 + 1, 1, a3);
      }
      v49[2] = v48 + 1;
      a3 = v49;
      int64_t v50 = &v49[10 * v48];
      v50[4] = v40;
      v50[5] = v41;
      v50[6] = v42;
      v50[7] = v43;
      v50[8] = v44;
      v50[9] = v77;
      v50[10] = v75;
      v50[11] = v73;
      v50[12] = v45;
      *((_BYTE *)v50 + 104) = v46;
      sub_100039508(v40, v41, v42, v43, v44, v77, v75, v73, v45, v46);
      swift_errorRelease(v96);
      a4 = v84;
      uint64_t v30 = v81;
      unint64_t v31 = v79;
      goto LABEL_37;
    }

    swift_bridgeObjectRelease(a3);
    return swift_errorRelease(v96);
  }

  uint64_t v30 = 0LL;
  LODWORD(v16) = *(_DWORD *)v7;
  unint64_t v31 = 255;
  a4 = v83;
  a3 = v80;
  LOBYTE(v24) = v78;
LABEL_25:
  if ((_DWORD)v16 == -17958194 || (_DWORD)v16 == -822415874)
  {
    if (v24)
    {
      uint64_t v32 = 1LL;
LABEL_41:
      swift_bridgeObjectRelease(a3);
      return a4(v7, v32);
    }

    unint64_t v33 = sub_100012624();
    unint64_t v34 = swift_allocError(&type metadata for KMError, v33, 0LL, 0LL);
    unint64_t v36 = v34;
    BOOL v37 = 0;
    *(void *)char v35 = 0xD00000000000002BLL;
    uint64_t v38 = 0x800000010012C5C0LL;
    goto LABEL_31;
  }

        uint64_t *v62 = 0x73206120746F6E3CLL;
        uint64_t v60 = 0xEE003E676E697274LL;
        goto LABEL_24;
      }
    }

    else
    {
      sub_100012824((uint64_t)&v65, &qword_100157FF8);
    }

    char v62 = (void *)(v44 + 72);
    *(void *)(v44 + 96) = &type metadata for String;
    *(void *)(v44 + 104) = v51;
    goto LABEL_23;
  }

  uint64_t v17 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_10010F110;
  int64_t v19 = a1[3];
  unint64_t v20 = a1[4];
  sub_100005110(a1, v19);
  __int128 v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 64))(v19, v20);
  unint64_t v22 = URL.path.getter(v21);
  int64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_100026B64();
  *(void *)(v18 + 3sub_100006034(v0 + 2) = v22;
  *(void *)(v18 + 40) = v24;
  uint64_t v25 = sub_100026BA8();
  unint64_t v26 = (void *)static OS_os_log.default.getter(v25);
  int64_t v27 = static os_log_type_t.default.getter(v26);
  os_log(_:dso:log:type:_:)( "unable to create extension from '%{public}s', bundle contains no Info.plist contents",  84LL,  2LL,  &_mh_execute_header,  v26,  v27,  v18);
LABEL_9:
  uint64_t v42 = v18;
LABEL_25:
  swift_bridgeObjectRelease(v42);

  return 0LL;
}

unint64_t sub_100020C30(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        unint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        sub_1000125E0(v10, v11);
        Data.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = sub_10001226C(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for ApplicationRecord(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        Swift::Int result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

LABEL_21:
    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1LL << result) - 1;
  }

  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1LL);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  Swift::Int result = swift_release_n(v3, 3LL);
  uint64_t v2 = v20;
LABEL_23:
  *uint64_t v2 = v5;
  return result;
}

    uint64_t v71 = (v31 - 1) & v31;
    char v72 = v32;
    BOOL v29 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_22:
    unint64_t v34 = v69;
    char v35 = *(void (**)(void))(v19 + 16);
    BOOL v37 = v73;
    unint64_t v36 = v74;
    ((void (*)(char *, unint64_t, uint64_t))v35)(v73, v69[6] + *(void *)(v19 + 72) * v29, v74);
    uint64_t v38 = v34[7];
    uint64_t v39 = *(void *)(v66 + 72);
    uint64_t v70 = v29;
    sub_100012734(v38 + v39 * v29, (uint64_t)v18, type metadata accessor for DriverBinEntry);
    uint64_t v40 = v68;
    int64_t v41 = (uint64_t)&v75[*(int *)(v68 + 48)];
    ((void (*)(char *, char *, uint64_t))v35)(v75, v37, v36);
    sub_100012734((uint64_t)v18, v41, type metadata accessor for DriverBinEntry);
    uint64_t v42 = (uint64_t)&v76[*(int *)(v40 + 48)];
    v35();
    sub_100012734(v41, v42, type metadata accessor for DriverBinEntry);
    int v43 = (void (*)(char *, uint64_t, uint64_t))v79[2];
    v43(v80, v42 + *(int *)(v67 + 28), v6);
    sub_1000127BC(v42, type metadata accessor for DriverBinEntry);
    if (v78[2]
      && (__int128 v44 = v78,
          char v45 = v78[5],
          char v46 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL),  v47 = dispatch thunk of Hashable._rawHashValue(seed:)(v45, v6, v46),  v48 = -1LL << *((_BYTE *)v44 + 32),  v49 = v47 & ~v48,  ((*(void *)((char *)v77 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v49) & 1) != 0))
    {
      int64_t v50 = ~v48;
      unint64_t v51 = v79[9];
      while (1)
      {
        v43(v9, v78[6] + v51 * v49, v6);
        int64_t v52 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v53 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v80, v6, v52);
        uint64_t v54 = (void (*)(char *, uint64_t))v79[1];
        v54(v9, v6);
        if ((v53 & 1) != 0) {
          break;
        }
        uint64_t v49 = (v49 + 1) & v50;
      }

      v54(v80, v6);
      sub_100012824((uint64_t)v75, (uint64_t *)&unk_10015ABC0);
      uint64_t v19 = v64;
      uint64_t v55 = *(void (**)(char *, uint64_t))(v64 + 8);
      int v56 = v74;
      v55(v76, v74);
      uint64_t v18 = v65;
      sub_1000127BC((uint64_t)v65, type metadata accessor for DriverBinEntry);
      Swift::Int result = ((uint64_t (*)(char *, uint64_t))v55)(v73, v56);
      *(unint64_t *)((char *)v60 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v70;
      uint64_t v57 = __OFADD__(v61++, 1LL);
      uint64_t v26 = v71;
      uint64_t v22 = v72;
      if (v57)
      {
        __break(1u);
        return sub_10000DFA0(v60, v59, v61, v69);
      }
    }

    else
    {
LABEL_5:
      ((void (*)(char *, uint64_t))v79[1])(v80, v6);
      sub_100012824((uint64_t)v75, (uint64_t *)&unk_10015ABC0);
      uint64_t v19 = v64;
      uint64_t v27 = *(void (**)(char *, uint64_t))(v64 + 8);
      uint64_t v28 = v74;
      v27(v76, v74);
      uint64_t v18 = v65;
      sub_1000127BC((uint64_t)v65, type metadata accessor for DriverBinEntry);
      Swift::Int result = ((uint64_t (*)(char *, uint64_t))v27)(v73, v28);
      uint64_t v26 = v71;
      uint64_t v22 = v72;
    }
  }

  unint64_t v33 = v22 + 4;
  if (v22 + 4 >= v63) {
    return sub_10000DFA0(v60, v59, v61, v69);
  }
  unint64_t v31 = *(void *)(v62 + 8 * v33);
  if (v31)
  {
    uint64_t v32 = v22 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v63) {
      return sub_10000DFA0(v60, v59, v61, v69);
    }
    unint64_t v31 = *(void *)(v62 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_21;
    }
  }

    uint64_t v19 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v20 = v26;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100020E3C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000D2C0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for ApplicationRecord(0LL) - 8) + 72LL) * v12;
        return sub_100022AEC(a1, v20);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100020FFC();
      goto LABEL_7;
    }

    sub_1000208C4(v15, a4 & 1);
    uint64_t v22 = sub_10000D2C0(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100020F74(v12, a2, a3, a1, v18);
      return sub_1000125E0(a2, a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_100020F74(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t result = sub_1000219AC(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_100020FFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_1001585A8);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v28 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

uint64_t sub_10002122C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100122660LL;
    if (a2 == 0x8000000100122660LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100122660LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 7107189 && a2 == 0xE300000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(7107189LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000100122680LL)
  {
    unint64_t v6 = 0x8000000100122680LL;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100122680LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_15;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001001226A0LL)
  {
    unint64_t v7 = 0x80000001001226A0LL;
LABEL_21:
    swift_bridgeObjectRelease(v7);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001001226A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_21;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x80000001001226C0LL)
  {
    swift_bridgeObjectRelease(0x80000001001226C0LL);
    return 4LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x80000001001226C0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100021410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100020310(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_1000214C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100021508()
{
  return ((uint64_t (*)(void))((char *)&loc_10002153C + dword_1000215FC[v0 >> 62]))();
}

uint64_t sub_10002154C@<X0>(uint64_t a1@<X8>)
{
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      char v5 = 1;
    }

    else
    {
      sub_1000125E0(v2, v1);
      sub_100020578(v4, v3);
    }
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t sub_10002160C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v43 = (uint64_t)&v43 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  char v19 = (char *)&v43 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v43 - v21;
  __chkstk_darwin(v20);
  int64_t v24 = (char *)&v43 - v23;
  uint64_t v25 = *a1;
  uint64_t v26 = a1[1];
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  BOOL v29 = *a1 == *a2;
  uint64_t v44 = v30;
  if (v29 && v26 == v28)
  {
    sub_10001AF08((uint64_t)a1, (uint64_t)&v43 - v23);
    sub_10001AF08((uint64_t)a2, (uint64_t)v22);
  }

  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL);
    sub_10001AF08((uint64_t)a1, (uint64_t)v24);
    sub_10001AF08((uint64_t)a2, (uint64_t)v22);
    if ((v31 & 1) == 0)
    {
      sub_10001AF4C((uint64_t)v22);
      sub_10001AF4C((uint64_t)v24);
      sub_10001AF08((uint64_t)a1, (uint64_t)v19);
      sub_10001AF08((uint64_t)a2, (uint64_t)v16);
      goto LABEL_11;
    }
  }

  char v32 = static URL.== infix(_:_:)(&v24[v4[5]], &v22[v4[5]]);
  sub_10001AF4C((uint64_t)v22);
  sub_10001AF4C((uint64_t)v24);
  sub_10001AF08((uint64_t)a1, (uint64_t)v19);
  sub_10001AF08((uint64_t)a2, (uint64_t)v16);
  if ((v32 & 1) == 0)
  {
LABEL_11:
    sub_10001AF4C((uint64_t)v19);
    sub_10001AF4C((uint64_t)v16);
    sub_10001AF08((uint64_t)a1, (uint64_t)v13);
    sub_10001AF08((uint64_t)a2, (uint64_t)v10);
    goto LABEL_12;
  }

  char v33 = sub_100016CD0(*(void **)&v19[v4[6]], *(void **)&v16[v4[6]]);
  sub_10001AF4C((uint64_t)v19);
  sub_10001AF4C((uint64_t)v16);
  sub_10001AF08((uint64_t)a1, (uint64_t)v13);
  sub_10001AF08((uint64_t)a2, (uint64_t)v10);
  if ((v33 & 1) == 0)
  {
LABEL_12:
    sub_10001AF4C((uint64_t)v13);
    sub_10001AF4C((uint64_t)v10);
    uint64_t v41 = (uint64_t)a1;
    uint64_t v37 = v43;
    sub_10001AF08(v41, v43);
    uint64_t v38 = v44;
    sub_10001AF08((uint64_t)a2, v44);
    goto LABEL_13;
  }

  sub_1000214C4(*(void *)&v13[v4[7]], *(void *)&v13[v4[7] + 8]);
  char v35 = v34;
  sub_10001AF4C((uint64_t)v13);
  sub_10001AF4C((uint64_t)v10);
  uint64_t v36 = (uint64_t)a1;
  uint64_t v37 = v43;
  sub_10001AF08(v36, v43);
  uint64_t v38 = v44;
  sub_10001AF08((uint64_t)a2, v44);
  if ((v35 & 1) == 0)
  {
LABEL_13:
    char v40 = 0;
    goto LABEL_14;
  }

  sub_1000214C4(*(void *)(v37 + v4[8]), *(void *)(v37 + v4[8] + 8));
  char v40 = v39;
LABEL_14:
  sub_10001AF4C(v37);
  sub_10001AF4C(v38);
  return v40 & 1;
}

uint64_t sub_10002193C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001226C(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for ApplicationCache(uint64_t a1)
{
  return sub_10001809C(a1, qword_10015D4B0, (uint64_t)&nominal type descriptor for ApplicationCache);
}

uint64_t sub_100021964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100158260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000219AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000219F0()
{
  unint64_t result = qword_10015D118[0];
  if (!qword_10015D118[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F844, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D118);
  }

  return result;
}

unint64_t sub_100021A34()
{
  unint64_t result = qword_100158280;
  if (!qword_100158280)
  {
    uint64_t v1 = sub_100012010(&qword_100158278);
    sub_10001AA68();
    sub_100012860(&qword_100158288, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F4E4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100158280);
  }

  return result;
}

uint64_t sub_100021AB8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100021B90(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_1001585B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100005110(a1, v7);
  unint64_t v9 = sub_1000219F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SerializedApplicationCache.CodingKeys,  &type metadata for SerializedApplicationCache.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    char v19 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    uint64_t v12 = v11;
    uint64_t v13 = sub_100005FB4(&qword_100158278);
    char v17 = 1;
    unint64_t v14 = sub_100022A50();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_100006034(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

unint64_t sub_100021D58()
{
  unint64_t result = qword_100158290;
  if (!qword_100158290)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F56C, &type metadata for SerializedApplicationCache);
    atomic_store(result, (unint64_t *)&qword_100158290);
  }

  return result;
}

uint64_t *sub_100021D9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v25 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v25);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
    __n128 v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v16;
    char v17 = (uint64_t *)((char *)v4 + v15);
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15);
    unint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 8);
    swift_bridgeObjectRetain(v16);
    sub_1000125E0(v18, v19);
    uint64_t *v17 = v18;
    v17[1] = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)v4 + v20);
    unint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1000125E0(*v22, v24);
    *uint64_t v21 = v23;
    v21[1] = v24;
  }

  return v4;
}

uint64_t sub_100021E94(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6]));
  sub_10001226C(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  return sub_10001226C(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
}

void *sub_100021F10(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v10 - 8) + 16LL);
  __n128 v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v15;
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14);
  unint64_t v18 = *(void *)((char *)a2 + v14 + 8);
  swift_bridgeObjectRetain(v15);
  sub_1000125E0(v17, v18);
  uint64_t *v16 = v17;
  v16[1] = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_1000125E0(*v21, v23);
  *uint64_t v20 = v22;
  v20[1] = v23;
  return a1;
}

void *sub_100021FDC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void *)((char *)a2 + v12);
  uint64_t v14 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v1sub_100006034(v0 + 2) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000125E0(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  uint64_t *v16 = v18;
  v16[1] = v19;
  sub_10001226C(v20, v21);
  uint64_t v22 = a3[8];
  unint64_t v23 = (void *)((char *)a1 + v22);
  unint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000125E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_10001226C(v27, v28);
  return a1;
}

_OWORD *sub_1000220CC(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_100022158(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v1sub_100006034(v0 + 2) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)((char *)a1 + v14);
  unint64_t v16 = *(void *)((char *)a1 + v14 + 8);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  sub_10001226C(v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = *(void *)((char *)a1 + v17);
  unint64_t v19 = *(void *)((char *)a1 + v17 + 8);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  sub_10001226C(v18, v19);
  return a1;
}

uint64_t sub_100022210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002221C);
}

uint64_t sub_10002221C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_100022298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000222A4);
}

uint64_t sub_1000222A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100022318(uint64_t a1)
{
  v4[0] = &unk_10010F5B8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_10010F5D0;
    v4[4] = &unk_10010F5D0;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for ApplicationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18ApplicationManager);
}

uint64_t destroy for SerializedApplicationCache(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s10driverkitd26SerializedApplicationCacheVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for SerializedApplicationCache(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for RealizedInfo.LoadInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for SerializedApplicationCache(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache()
{
  return &type metadata for SerializedApplicationCache;
}

uint64_t sub_100022580()
{
  return type metadata accessor for ApplicationCache(0LL);
}

uint64_t sub_100022588(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_10010F6B0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SerializedApplicationCache.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100022654 + 4 * byte_10010F45A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100022688 + 4 * byte_10010F455[v4]))();
}

uint64_t sub_100022688(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100022698LL);
  }
  return result;
}

uint64_t sub_1000226A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000226ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000226B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000226B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache.CodingKeys()
{
  return &type metadata for SerializedApplicationCache.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ApplicationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for ApplicationRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000227B0 + 4 * byte_10010F464[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000227E4 + 4 * byte_10010F45F[v4]))();
}

uint64_t sub_1000227E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000227EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000227F4LL);
  }
  return result;
}

uint64_t sub_100022800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100022808LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10002280C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022814(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecord.CodingKeys()
{
  return &type metadata for ApplicationRecord.CodingKeys;
}

unint64_t sub_100022834()
{
  unint64_t result = qword_10015D5C0[0];
  if (!qword_10015D5C0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F764, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, qword_10015D5C0);
  }

  return result;
}

unint64_t sub_10002287C()
{
  unint64_t result = qword_10015D7D0[0];
  if (!qword_10015D7D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F81C, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D7D0);
  }

  return result;
}

unint64_t sub_1000228C4()
{
  unint64_t result = qword_10015D8E0;
  if (!qword_10015D8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F78C, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D8E0);
  }

  return result;
}

unint64_t sub_10002290C()
{
  unint64_t result = qword_10015D8E8[0];
  if (!qword_10015D8E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F7B4, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D8E8);
  }

  return result;
}

unint64_t sub_100022954()
{
  unint64_t result = qword_10015D970;
  if (!qword_10015D970)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F6D4, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D970);
  }

  return result;
}

unint64_t sub_10002299C()
{
  unint64_t result = qword_10015D978[0];
  if (!qword_10015D978[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F6FC, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, qword_10015D978);
  }

  return result;
}

uint64_t sub_1000229E0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_100022A0C()
{
  unint64_t result = qword_100158598;
  if (!qword_100158598)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010F544, &type metadata for SerializedApplicationCache);
    atomic_store(result, (unint64_t *)&qword_100158598);
  }

  return result;
}

unint64_t sub_100022A50()
{
  unint64_t result = qword_1001585B8;
  if (!qword_1001585B8)
  {
    uint64_t v1 = sub_100012010(&qword_100158278);
    sub_10001AEC4();
    sub_100012860(&qword_1001585C0, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F4BC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001585B8);
  }

  return result;
}

uint64_t sub_100022AD4(void *a1)
{
  return sub_10001BFD4(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_100022AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FileAttributeKey()
{
  if (!qword_1001585C8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1001465E0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001585C8);
    }
  }

uint64_t sub_100022B84()
{
  return sub_100012860( &qword_1001585D0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10010F950);
}

uint64_t sub_100022BB0()
{
  return sub_100012860( &qword_1001585D8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10010F924);
}

uint64_t sub_100022BDC()
{
  return sub_100012860( &qword_1001585E0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10010F9C0);
}

uint64_t type metadata accessor for ActiveDriverInfo(uint64_t a1)
{
  uint64_t result = qword_10015DD80;
  if (!qword_10015DD80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActiveDriverInfo);
  }
  return result;
}

uint64_t sub_100022C44()
{
  HIBYTE(v10[1]) = -18;
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ActiveDriverInfo(0LL) + 20));
  uint64_t v2 = *v1;
  int v3 = (void *)v1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._uint64_t object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 544497952LL;
  v5._uint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v5);
  v7._countAndFlagsBits = URL.path.getter(v6);
  uint64_t object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return v10[0];
}

uint64_t sub_100022D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  if (v7 == *v9 && v8 == v10) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL);
  }
}

uint64_t sub_100022D90()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100022DC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_100022E08(uint64_t a1)
{
  return &j__swift_endAccess;
}

void *sub_100022E44(uint64_t a1, __int128 *a2)
{
  Swift::String v5 = (void *)swift_allocObject(v2, 80LL, 7LL);
  v5[2] = _swiftEmptyArrayStorage;
  v5[8] = a1;
  v5[9] = 0LL;
  sub_100005158(a2, (uint64_t)(v5 + 3));
  return v5;
}

uint64_t sub_100022EA0()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = *(void *)(v0 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 72);
LABEL_5:
    swift_bridgeObjectRetain(v2);
    return v3;
  }

  uint64_t v4 = sub_1000232D0();
  uint64_t v5 = *(void *)(v0 + 72);
  *(void *)(v0 + 7sub_100006034(v0 + 2) = v4;
  uint64_t result = swift_bridgeObjectRelease(v5);
  uint64_t v3 = *(void *)(v0 + 72);
  if (v3)
  {
    swift_bridgeObjectRetain(v3);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

unint64_t sub_1000230F4(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100158798);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100005FB4(&qword_1001587A0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026390(v13, (uint64_t)v5);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_100024E94(*v5, v16, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_10000D324);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
    unint64_t result = sub_100025C5C(v10, v21 + *(void *)(*(void *)(active - 8) + 72LL) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    uint64_t v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void *sub_100023294()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
  uint64_t v2 = sub_100025B00(v1);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_1000232D0()
{
  uint64_t v1 = sub_100005FB4(&qword_1001587A8);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100005FB4(&qword_100158798);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = v0 + 3;
  uint64_t v12 = v0[6];
  uint64_t v11 = v0[7];
  sub_100005110(v10, v12);
  sub_100071818(v12, v11);
  uint64_t v13 = v43;
  uint64_t v38 = v44;
  sub_100005110(v42, v43);
  uint64_t v14 = (uint64_t *)sub_10008F844();
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v18 = swift_allocObject(v17, 48LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_10010F110;
  swift_bridgeObjectRetain(v15);
  unint64_t v19 = (uint64_t *)sub_10008F658();
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *(void *)(v18 + 3sub_100006034(v0 + 2) = v21;
  *(void *)(v18 + 40) = v20;
  swift_bridgeObjectRetain(v20);
  unint64_t v22 = sub_10006CB10(v16, v15, (void *)v18);
  v41[3] = &type metadata for KernelRequests.GetDrivers;
  v41[4] = &off_100148830;
  v41[0] = v22;
  uint64_t v23 = sub_100005FB4(&qword_1001587B0);
  uint64_t v24 = (uint64_t)v39;
  sub_10006B1D0(v41, v23, v13, v23, v38, (uint64_t)&v45);
  uint64_t v25 = v24;
  sub_100006034(v41);
  if (v24) {
    return sub_100006034(v42);
  }
  char v39 = v9;
  uint64_t v27 = v45;
  sub_100006034(v42);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v37 = 0LL;
    swift_bridgeObjectRetain(v27);
    uint64_t v29 = 0LL;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v38 = v4;
    uint64_t v31 = v40;
    do
    {
      v42[0] = *(void *)(v27 + 8 * v29 + 32);
      sub_100023668(v42, v3);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
      {
        sub_100012824((uint64_t)v3, &qword_1001587A8);
      }

      else
      {
        uint64_t v32 = (uint64_t)v39;
        sub_1000263D8((uint64_t)v3, (uint64_t)v39, &qword_100158798);
        sub_1000263D8(v32, v31, &qword_100158798);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0) {
          uint64_t v30 = (void *)sub_100024F0C(0, v30[2] + 1LL, 1, (unint64_t)v30);
        }
        unint64_t v34 = v30[2];
        unint64_t v33 = v30[3];
        if (v34 >= v33 >> 1) {
          uint64_t v30 = (void *)sub_100024F0C(v33 > 1, v34 + 1, 1, (unint64_t)v30);
        }
        v30[2] = v34 + 1;
        uint64_t v31 = v40;
        sub_1000263D8( v40,  (uint64_t)v30 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v34,
          &qword_100158798);
        uint64_t v4 = v38;
      }

      ++v29;
    }

    while (v28 != v29);
    swift_bridgeObjectRelease(v27);
    uint64_t v25 = v37;
  }

  else
  {
    uint64_t v30 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v27);
  uint64_t v35 = v30[2];
  if (v35)
  {
    sub_100005FB4(&qword_1001587A0);
    uint64_t v36 = (void *)static _DictionaryStorage.allocate(capacity:)(v35);
  }

  else
  {
    uint64_t v36 = &_swiftEmptyDictionarySingleton;
  }

  v42[0] = (uint64_t)v36;
  sub_10002511C((uint64_t)v30, 1, (uint64_t)v42);
  if (!v25) {
    return v42[0];
  }
  uint64_t result = swift_release(v42[0]);
  __break(1u);
  return result;
}

uint64_t sub_100023668@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  BOOL v94 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v89 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = (uint64_t *)sub_10008F5A4();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    goto LABEL_10;
  }

  uint64_t v16 = *v14;
  uint64_t v17 = v14[1];
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = sub_100024E94( v16,  v17,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
  if ((v19 & 1) == 0)
  {
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    swift_bridgeObjectRelease(v17);
    goto LABEL_10;
  }

  sub_100006054(*(void *)(v13 + 56) + 32 * v18, (uint64_t)&v97);
  swift_bridgeObjectRelease(v17);
  if (!*((void *)&v98 + 1))
  {
LABEL_10:
    sub_100012824((uint64_t)&v97, &qword_100157FF8);
    goto LABEL_11;
  }

  uint64_t v20 = v13;
  if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    unint64_t v21 = v96;
    uint64_t v92 = v95;
    unint64_t v22 = (uint64_t *)sub_10008F658();
    uint64_t v23 = v22;
    if (*(void *)(v13 + 16))
    {
      uint64_t v24 = *v22;
      uint64_t v25 = v22[1];
      swift_bridgeObjectRetain(v25);
      uint64_t v26 = sub_100024E94( v24,  v25,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
      if ((v27 & 1) != 0)
      {
        sub_100006054(*(void *)(v20 + 56) + 32 * v26, (uint64_t)&v97);
      }

      else
      {
        __int128 v97 = 0u;
        __int128 v98 = 0u;
      }

      swift_bridgeObjectRelease(v25);
      if (*((void *)&v98 + 1))
      {
        if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v44 = v95;
          unint64_t v45 = v96;
          char v46 = sub_10008F2B8();
          char v47 = v46;
          if (*(void *)(v20 + 16))
          {
            uint64_t v93 = v44;
            unint64_t v48 = v21;
            uint64_t v49 = *v46;
            uint64_t v50 = v46[1];
            swift_bridgeObjectRetain(v50);
            uint64_t v51 = sub_100024E94( v49,  v50,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
            if ((v52 & 1) != 0)
            {
              sub_100006054(*(void *)(v20 + 56) + 32 * v51, (uint64_t)&v97);
            }

            else
            {
              __int128 v97 = 0u;
              __int128 v98 = 0u;
            }

            swift_bridgeObjectRelease(v50);
            unint64_t v21 = v48;
            if (*((void *)&v98 + 1))
            {
              if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
              {
                uint64_t v68 = v95;
                unint64_t v69 = v96;
                uint64_t v70 = sub_100005FB4(&qword_100158798);
                uint64_t v71 = v94;
                char v72 = (char *)v94 + *(int *)(v70 + 48);
                URL.init(fileURLWithPath:isDirectory:)(v93, v45, 1LL);
                swift_bridgeObjectRelease(v45);
                void *v71 = v92;
                v71[1] = v48;
                char v73 = (uint64_t *)&v72[*(int *)(type metadata accessor for ActiveDriverInfo(0LL) + 20)];
                *char v73 = v68;
                v73[1] = v69;
                return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL))( v71,  0LL,  1LL,  v70);
              }

              swift_bridgeObjectRelease(v45);
              goto LABEL_36;
            }
          }

          else
          {
            __int128 v97 = 0u;
            __int128 v98 = 0u;
          }

          swift_bridgeObjectRelease(v45);
          sub_100012824((uint64_t)&v97, &qword_100157FF8);
LABEL_36:
          uint64_t v74 = sub_1000D334C();
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v74, v3);
          uint64_t v75 = v20;
          uint64_t v76 = swift_bridgeObjectRetain_n(v20, 2LL);
          uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
          os_log_type_t v78 = static os_log_type_t.error.getter(v77);
          if (os_log_type_enabled(v77, v78))
          {
            uint64_t v79 = swift_slowAlloc(22LL, -1LL);
            uint64_t v93 = v4;
            uint64_t v80 = v79;
            uint64_t v91 = (char *)swift_slowAlloc(64LL, -1LL);
            *(void *)&__int128 v97 = v91;
            *(_DWORD *)uint64_t v80 = 136315394;
            uint64_t v89 = v80 + 4;
            __n128 v81 = swift_bridgeObjectRetain(v75);
            uint64_t v82 = Dictionary.description.getter(v81);
            unint64_t v90 = v21;
            unint64_t v84 = v83;
            swift_bridgeObjectRelease(v75);
            uint64_t v95 = sub_1000058CC(v82, v84, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v89, v80 + 12);
            swift_bridgeObjectRelease_n(v75, 2LL);
            swift_bridgeObjectRelease(v84);
            *(_WORD *)(v80 + 1sub_100006034(v0 + 2) = 2080;
            uint64_t v85 = v3;
            uint64_t v86 = *v47;
            unint64_t v87 = v47[1];
            swift_bridgeObjectRetain(v87);
            uint64_t v95 = sub_1000058CC(v86, v87, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v80 + 14, v80 + 22);
            swift_bridgeObjectRelease(v87);
            _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "Codeless info %s did not contain identifier for key %s",  (uint8_t *)v80,  0x16u);
            uint64_t v88 = v91;
            swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v88, -1LL, -1LL);
            swift_slowDealloc(v80, -1LL, -1LL);
            sub_10001226C(v92, v90);

            (*(void (**)(char *, uint64_t))(v93 + 8))(v7, v85);
            goto LABEL_15;
          }

          swift_bridgeObjectRelease_n(v75, 2LL);
          sub_10001226C(v92, v21);

          uint64_t v40 = *(void (**)(char *, uint64_t))(v4 + 8);
          uint64_t v41 = v7;
          goto LABEL_14;
        }

uint64_t sub_100023FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100005FB4(&qword_1001587C0);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v8 = __chkstk_darwin(active);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v57 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v57 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_1000D334C();
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v23, v19);
  sub_100025C18(a1, (uint64_t)v18);
  uint64_t v66 = a1;
  sub_100025C18(a1, (uint64_t)v16);
  sub_100025C18(a2, (uint64_t)v13);
  uint64_t v24 = sub_100025C18(a2, (uint64_t)v10);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc(42LL, -1LL);
    uint64_t v61 = a3;
    uint64_t v29 = v28;
    uint64_t v59 = swift_slowAlloc(128LL, -1LL);
    uint64_t v69 = v59;
    *(_DWORD *)uint64_t v29 = 136315906;
    int v58 = v27;
    uint64_t v30 = active;
    os_log_type_t v31 = (uint64_t *)&v18[*(int *)(active + 20)];
    uint64_t v60 = a2;
    os_log_t v57 = v25;
    uint64_t v33 = *v31;
    unint64_t v32 = v31[1];
    swift_bridgeObjectRetain(v32);
    uint64_t v67 = sub_1000058CC(v33, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v32);
    uint64_t v34 = sub_100025CA0((uint64_t)v18);
    *(_WORD *)(v29 + 1sub_100006034(v0 + 2) = 2080;
    uint64_t v35 = URL.path.getter(v34);
    unint64_t v37 = v36;
    uint64_t v67 = sub_1000058CC(v35, v36, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease(v37);
    sub_100025CA0((uint64_t)v16);
    *(_WORD *)(v29 + 2sub_100006034(v0 + 2) = 2080;
    uint64_t v38 = (uint64_t *)&v13[*(int *)(v30 + 20)];
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    swift_bridgeObjectRetain(v40);
    uint64_t v67 = sub_1000058CC(v39, v40, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 24, v29 + 32);
    swift_bridgeObjectRelease(v40);
    uint64_t v41 = sub_100025CA0((uint64_t)v13);
    *(_WORD *)(v29 + 3sub_100006034(v0 + 2) = 2080;
    uint64_t v42 = URL.path.getter(v41);
    unint64_t v44 = v43;
    uint64_t v67 = sub_1000058CC(v42, v43, &v69);
    a2 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease(v44);
    sub_100025CA0((uint64_t)v10);
    uint64_t v25 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v58,  "Drivers with identifiers %s (%s), %s (%s) have the same unique identifier",  (uint8_t *)v29,  0x2Au);
    uint64_t v45 = v59;
    swift_arrayDestroy(v59, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v46 = v29;
    a3 = v61;
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
    sub_100025CA0((uint64_t)v18);
    sub_100025CA0((uint64_t)v16);
    sub_100025CA0((uint64_t)v13);
    sub_100025CA0((uint64_t)v10);
  }

  uint64_t v47 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v22, v64);
  uint64_t v48 = v66;
  uint64_t v69 = URL.path.getter(v47);
  uint64_t v70 = v49;
  uint64_t v67 = URL.path.getter(v69);
  uint64_t v68 = v50;
  uint64_t v51 = type metadata accessor for Locale(0LL);
  uint64_t v52 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v65, 1LL, 1LL, v51);
  unint64_t v53 = sub_10002657C();
  uint64_t v54 = StringProtocol.compare<A>(_:options:range:locale:)( &v67,  0LL,  0LL,  0LL,  1LL,  v52,  &type metadata for String,  &type metadata for String,  v53,  v53);
  sub_100012824(v52, &qword_1001587C0);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v70);
  if (v54 == -1) {
    uint64_t v55 = v48;
  }
  else {
    uint64_t v55 = a2;
  }
  return sub_100025C18(v55, a3);
}

_UNKNOWN **sub_100024468()
{
  uint64_t v1 = sub_1000232D0();
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)(v0 + 72);
  if (!v5)
  {
    uint64_t v6 = 0LL;
LABEL_7:
    *(void *)(v0 + 7sub_100006034(v0 + 2) = v4;
    uint64_t v3 = &off_100146728;
    uint64_t v4 = v6;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v5);
  char v2 = sub_100024A58(v4, v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if ((v2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + 72);
    goto LABEL_7;
  }

  uint64_t v3 = 0LL;
LABEL_8:
  swift_bridgeObjectRelease(v4);
  return v3;
}

uint64_t sub_10002452C()
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v48 = *(void *)(active - 8);
  __chkstk_darwin(active);
  char v2 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100005FB4(&qword_1001585F8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v44 - v8);
  unint64_t v54 = 0xD000000000000010LL;
  unint64_t v55 = 0x8000000100122750LL;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 168LL))(v7);
  int64_t v51 = 0LL;
  uint64_t v11 = *(void *)(result + 64);
  uint64_t v46 = result + 64;
  uint64_t v49 = result;
  uint64_t v12 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v47 = (unint64_t)(v12 + 63) >> 6;
  int64_t v45 = v47 - 1;
  if ((v13 & v11) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v31 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v32 = v31 | (v51 << 6);
  while (2)
  {
    uint64_t v33 = *(void *)(v49 + 56);
    uint64_t v34 = (uint64_t *)(*(void *)(v49 + 48) + 16 * v32);
    uint64_t v35 = *v34;
    unint64_t v36 = v34[1];
    *uint64_t v6 = *v34;
    v6[1] = v36;
    uint64_t v37 = v33 + *(void *)(v48 + 72) * v32;
    uint64_t v38 = sub_100005FB4(&qword_100158600);
    sub_100025C18(v37, (uint64_t)v6 + *(int *)(v38 + 48));
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v6, 0LL, 1LL, v38);
    sub_1000125E0(v35, v36);
    while (1)
    {
      sub_1000263D8((uint64_t)v6, (uint64_t)v9, &qword_1001585F8);
      uint64_t v43 = sub_100005FB4(&qword_100158600);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48LL))(v9, 1LL, v43) == 1)
      {
        swift_release(v49);
        return v54;
      }

      uint64_t v15 = *v9;
      unint64_t v16 = v9[1];
      sub_100025C5C((uint64_t)v9 + *(int *)(v43 + 48), (uint64_t)v2);
      v53._countAndFlagsBits = 538976288LL;
      v53._uint64_t object = (void *)0xE400000000000000LL;
      v17._countAndFlagsBits = sub_100013B60(v15, v16);
      uint64_t object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._countAndFlagsBits = 8250LL;
      v19._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v19);
      v52._countAndFlagsBits = 0LL;
      v52._uint64_t object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease(v52._object);
      strcpy((char *)&v52, "Active Driver ");
      HIBYTE(v52._object) = -18;
      uint64_t v20 = (uint64_t *)&v2[*(int *)(active + 20)];
      uint64_t v22 = *v20;
      uint64_t v21 = (void *)v20[1];
      swift_bridgeObjectRetain(v21);
      v23._countAndFlagsBits = v22;
      v23._uint64_t object = v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v21);
      v24._countAndFlagsBits = 544497952LL;
      v24._uint64_t object = (void *)0xE400000000000000LL;
      String.append(_:)(v24);
      v26._countAndFlagsBits = URL.path.getter(v25);
      int v27 = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(v27);
      uint64_t v28 = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v28);
      v29._countAndFlagsBits = 10LL;
      v29._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v29);
      uint64_t v30 = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v30);
      sub_10001226C(v15, v16);
      uint64_t result = sub_100025CA0((uint64_t)v2);
      if (v14) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v39 = v51 + 1;
      if (__OFADD__(v51, 1LL))
      {
        __break(1u);
        goto LABEL_29;
      }

      if (v39 < v47)
      {
        unint64_t v40 = *(void *)(v46 + 8 * v39);
        if (v40) {
          goto LABEL_11;
        }
        int64_t v41 = v51 + 2;
        ++v51;
        if (v39 + 1 < v47)
        {
          unint64_t v40 = *(void *)(v46 + 8 * v41);
          if (v40) {
            goto LABEL_14;
          }
          int64_t v51 = v39 + 1;
          if (v39 + 2 < v47)
          {
            unint64_t v40 = *(void *)(v46 + 8 * (v39 + 2));
            if (v40)
            {
              v39 += 2LL;
              goto LABEL_11;
            }

            int64_t v41 = v39 + 3;
            int64_t v51 = v39 + 2;
            if (v39 + 3 < v47) {
              break;
            }
          }
        }
      }

uint64_t sub_100024998()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

id sub_1000249D4()
{
  return *(id *)(v0 + 64);
}

uint64_t sub_1000249DC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t sub_1000249E8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

void (*sub_1000249F4(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 128LL))();
  return sub_10000C7E8;
}

uint64_t sub_100024A40()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t sub_100024A4C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t sub_100024A58(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v4 = *(void *)(active - 8);
  uint64_t v5 = __chkstk_darwin(active);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = sub_100005FB4(&qword_1001585F8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (int64_t *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = __chkstk_darwin(v11);
  unint64_t v16 = (int64_t *)((char *)&v45 - v15);
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v52 = 0LL;
  uint64_t v49 = a1;
  uint64_t v50 = v4;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v46 = a1 + 64;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v47 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v48 = v7;
  int64_t v45 = v47 - 1;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v22 = v21 | (v52 << 6);
LABEL_10:
      uint64_t v23 = *(void *)(v49 + 56);
      Swift::String v24 = (uint64_t *)(*(void *)(v49 + 48) + 16 * v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      uint64_t *v13 = *v24;
      v13[1] = v26;
      uint64_t v27 = v23 + *(void *)(v4 + 72) * v22;
      uint64_t v28 = sub_100005FB4(&qword_100158600);
      sub_100025C18(v27, (uint64_t)v13 + *(int *)(v28 + 48));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v13, 0LL, 1LL, v28);
      sub_1000125E0(v25, v26);
      uint64_t v7 = v48;
      goto LABEL_32;
    }

    int64_t v29 = v52 + 1;
    if (__OFADD__(v52, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }

    if (v29 < v47)
    {
      unint64_t v30 = *(void *)(v46 + 8 * v29);
      if (v30) {
        goto LABEL_14;
      }
      int64_t v31 = v52 + 2;
      ++v52;
      if (v29 + 1 < v47)
      {
        unint64_t v30 = *(void *)(v46 + 8 * v31);
        if (v30) {
          goto LABEL_17;
        }
        int64_t v52 = v29 + 1;
        if (v29 + 2 < v47)
        {
          unint64_t v30 = *(void *)(v46 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2LL;
            goto LABEL_14;
          }

          int64_t v52 = v29 + 2;
          if (v29 + 3 < v47)
          {
            unint64_t v30 = *(void *)(v46 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3LL;
              goto LABEL_14;
            }

            int64_t v31 = v29 + 4;
            int64_t v52 = v29 + 3;
            if (v29 + 4 < v47) {
              break;
            }
          }
        }
      }
    }

LABEL_31:
    uint64_t v32 = sub_100005FB4(&qword_100158600);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v13, 1LL, 1LL, v32);
    unint64_t v20 = 0LL;
LABEL_32:
    sub_1000263D8((uint64_t)v13, (uint64_t)v16, &qword_1001585F8);
    uint64_t v33 = sub_100005FB4(&qword_100158600);
    uint64_t v34 = 1LL;
    uint64_t v35 = *v16;
    unint64_t v36 = v16[1];
    sub_100025C5C((uint64_t)v16 + *(int *)(v33 + 48), (uint64_t)v9);
    uint64_t v37 = sub_100024E94(v35, v36, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_10000D324);
    char v39 = v38;
    sub_10001226C(v35, v36);
    if ((v39 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v4 = v50;
    sub_100025C18(*(void *)(a2 + 56) + *(void *)(v50 + 72) * v37, (uint64_t)v7);
    if ((static URL.== infix(_:_:)(v7, v9) & 1) == 0
      || ((uint64_t v40 = *(int *)(active + 20),
           uint64_t v41 = *(void *)&v7[v40],
           uint64_t v42 = *(void *)&v7[v40 + 8],
           uint64_t v43 = &v9[v40],
           uint64_t v44 = *((void *)v43 + 1),
           v41 != *(void *)v43)
       || v42 != v44)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, *(void *)v43, v44, 0LL) & 1) == 0)
    {
      sub_100025CA0((uint64_t)v7);
LABEL_40:
      sub_100025CA0((uint64_t)v9);
      return 0LL;
    }

    sub_100025CA0((uint64_t)v7);
    uint64_t result = sub_100025CA0((uint64_t)v9);
  }

  unint64_t v30 = *(void *)(v46 + 8 * v31);
  if (v30)
  {
LABEL_17:
    int64_t v29 = v31;
LABEL_14:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v52 = v29;
    goto LABEL_10;
  }

  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v29 >= v47)
    {
      int64_t v52 = v45;
      goto LABEL_31;
    }

    unint64_t v30 = *(void *)(v46 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_14;
    }
  }

LABEL_44:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_45:
  uint64_t v10 = sub_1000298C8(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
LABEL_36:
  uint64_t v40 = *((void *)v10 + 2);
  char v39 = *((void *)v10 + 3);
  if (v40 >= v39 >> 1) {
    uint64_t v10 = sub_1000298C8((char *)(v39 > 1), v40 + 1, 1, v10);
  }
  *((void *)v10 + sub_100006034(v0 + 2) = v40 + 1;
  uint64_t v41 = &v10[32 * v40];
  *((void *)v41 + 4) = v6;
  *((void *)v41 + 5) = v8;
  *((void *)v41 + 6) = v9;
  *((void *)v41 + 7) = v11;
  uint64_t v35 = v45;
  *(void *)(v45 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain(v10);
  swift_release(v35);
  uint64_t v34 = v49;
LABEL_40:
  swift_release(v34);
  return v10;
}

  __break(1u);
  return result;
}

    uint64_t v174 = (uint64_t)v82;
    int v186 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    uint64_t v187 = v432;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56LL))(v432, 1LL, 1LL, v186);
    v436 = 0LL;
    v437 = v185;
    uint64_t v178 = (uint64_t)v187;
LABEL_45:
    uint64_t v188 = v431;
    sub_1000263D8(v178, v431, &qword_100157ED8);
    uint64_t v189 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    uint64_t v190 = v188 + *(int *)(v189 + 48);
    (*((void (**)(uint64_t, uint64_t, char *))v177 + 4))(v181, v188, v143);
    sub_100012778(v190, (uint64_t)v182, type metadata accessor for DriverBinEntry);
    LOBYTE(v190) = static UUID.== infix(_:_:)(v182, v181);
    uint64_t v191 = sub_1000D3274();
    uint64_t v192 = *(void (**)(char *, uint64_t, uint64_t))(v440 + 16);
    if ((v190 & 1) != 0)
    {
      v193 = v421;
      uint64_t v194 = v173;
      v192(v421, v191, v173);
      uint64_t v195 = v412;
      sub_100012734((uint64_t)v182, v412, type metadata accessor for DriverBinEntry);
      uint64_t v196 = v174;
      sub_100012734(v195, v174, type metadata accessor for DriverBinEntry);
      sub_1000127BC(v195, type metadata accessor for DriverBinEntry);
      uint64_t v197 = (void (*)(char *, uint64_t, char *))*((void *)v177 + 2);
      v198 = v408;
      v197(v408, v181, v143);
      os_log_type_t v199 = v409;
      v197(v409, (uint64_t)v198, v143);
      uint64_t v200 = (uint64_t (*)(char *, char *))*((void *)v177 + 1);
      uint64_t v201 = v200(v198, v143);
      uint64_t v202 = (os_log_s *)Logger.logObject.getter(v201);
      uint64_t v203 = static os_log_type_t.default.getter(v202);
      if (os_log_type_enabled(v202, v203))
      {
        uint64_t v204 = swift_slowAlloc(22LL, -1LL);
        unint64_t v205 = swift_slowAlloc(64LL, -1LL);
        uint64_t __s1 = v205;
        *(_DWORD *)uint64_t v204 = v424;
        unint64_t v206 = sub_100012860(&qword_100157E98, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001106A8);
        uint64_t v207 = dispatch thunk of CustomStringConvertible.description.getter(v414, v206);
        uint64_t v209 = v208;
        *(void *)(v204 + 4) = sub_1000058CC(v207, v208, &__s1);
        swift_bridgeObjectRelease(v209);
        sub_1000127BC(v196, type metadata accessor for DriverBinEntry);
        *(_WORD *)(v204 + 1sub_100006034(v0 + 2) = 2080;
        Swift::String v210 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v211 = dispatch thunk of CustomStringConvertible.description.getter(v143, v210);
        unint64_t v213 = v212;
        *(void *)(v204 + 14) = sub_1000058CC(v211, v212, &__s1);
        swift_bridgeObjectRelease(v213);
        v200(v199, v143);
        _os_log_impl( (void *)&_mh_execute_header,  v202,  v203,  "Copying old active bin entry %s with bin number %s",  (uint8_t *)v204,  0x16u);
        swift_arrayDestroy(v205, 2LL, v404);
        unint64_t v214 = v440;
        swift_slowDealloc(v205, -1LL, -1LL);
        uint64_t v215 = v204;
        int64_t v110 = v435;
        swift_slowDealloc(v215, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v214 + 8))(v421, v110);
      }

      else
      {
        sub_1000127BC(v196, type metadata accessor for DriverBinEntry);
        v200(v199, v143);

        (*(void (**)(char *, uint64_t))(v440 + 8))(v193, v194);
        int64_t v110 = v194;
      }

      uint64_t v82 = (char *)v196;
      v237 = (void (*)(void, void))v438;
      sub_10003B648((uint64_t)v438);
      sub_1000127BC((uint64_t)v237, type metadata accessor for DriverBinEntry);
      v200(v439, v143);
      uint64_t v112 = (uint64_t)v415;
      uint64_t v171 = v436;
      uint64_t v168 = v437;
      uint64_t v144 = v433;
    }

    else
    {
      v192(v429, v191, v173);
      uint64_t v216 = v413;
      sub_100012734((uint64_t)v182, v413, type metadata accessor for DriverBinEntry);
      sub_100012734(v216, v112, type metadata accessor for DriverBinEntry);
      sub_1000127BC(v216, type metadata accessor for DriverBinEntry);
      Swift::String v217 = (void (*)(char *, uint64_t, char *))*((void *)v177 + 2);
      v218 = v410;
      v217(v410, v181, v143);
      Swift::String v219 = v411;
      v217(v411, (uint64_t)v218, v143);
      uint64_t v220 = (uint64_t (*)(char *, char *))*((void *)v177 + 1);
      unint64_t v221 = v220(v218, v143);
      unint64_t v222 = (os_log_s *)Logger.logObject.getter(v221);
      uint64_t v223 = static os_log_type_t.error.getter(v222);
      if (os_log_type_enabled(v222, v223))
      {
        uint64_t v224 = swift_slowAlloc(22LL, -1LL);
        char v225 = swift_slowAlloc(64LL, -1LL);
        uint64_t __s1 = v225;
        *(_DWORD *)uint64_t v224 = v424;
        __int128 v226 = sub_100012860(&qword_100157E98, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001106A8);
        uint64_t v227 = dispatch thunk of CustomStringConvertible.description.getter(v414, v226);
        uint64_t v229 = v228;
        *(void *)(v224 + 4) = sub_1000058CC(v227, v228, &__s1);
        swift_bridgeObjectRelease(v229);
        sub_1000127BC(v112, type metadata accessor for DriverBinEntry);
        *(_WORD *)(v224 + 1sub_100006034(v0 + 2) = 2080;
        uint64_t v230 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v231 = dispatch thunk of CustomStringConvertible.description.getter(v143, v230);
        v233 = v232;
        *(void *)(v224 + 14) = sub_1000058CC(v231, v232, &__s1);
        swift_bridgeObjectRelease(v233);
        v220(v219, v143);
        _os_log_impl( (void *)&_mh_execute_header,  v222,  v223,  "Internal error: Bin entry %s was inserted with incorrect bin number %s",  (uint8_t *)v224,  0x16u);
        swift_arrayDestroy(v225, 2LL, (char *)&type metadata for Any + 8);
        v234 = v225;
        v235 = v440;
        swift_slowDealloc(v234, -1LL, -1LL);
        v236 = v224;
        int64_t v110 = v435;
        swift_slowDealloc(v236, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v235 + 8))(v429, v110);
      }

      else
      {

        v220(v219, v143);
        sub_1000127BC(v112, type metadata accessor for DriverBinEntry);
        int64_t v110 = v435;
        (*(void (**)(char *, uint64_t))(v440 + 8))(v429, v435);
      }

      sub_1000127BC((uint64_t)v438, type metadata accessor for DriverBinEntry);
      v220(v439, v143);
      uint64_t v82 = v416;
      uint64_t v144 = v433;
      uint64_t v171 = v436;
      uint64_t v168 = v437;
    }
  }

  v238 = swift_release(v425);
  v239 = (*(uint64_t (**)(uint64_t))(*v407 + 160LL))(v238);
  if (!v239)
  {
LABEL_122:
    __break(1u);
    JUMPOUT(0x10004578CLL);
  }

  v240 = v239;
  v241 = (*(uint64_t (**)(uint64_t))(*(void *)v239 + 216LL))(v239);
  swift_release(v240);
  v242 = 0LL;
  v243 = *(void *)(v241 + 64);
  v432 = (void *)(v241 + 64);
  v244 = 1LL << *(_BYTE *)(v241 + 32);
  v245 = -1LL;
  if (v244 < 64) {
    v245 = ~(-1LL << v244);
  }
  v246 = v245 & v243;
  v247 = (unint64_t)(v244 + 63) >> 6;
  v421 = (char *)(v247 - 1);
  v436 = v247;
  v423 = v247 - 5;
  v437 = (char *)v241;
  v425 = (char *)(v241 + 104);
  v433 = (char *)&type metadata for Any + 8;
  v248 = (uint64_t)v398;
  v249 = (uint64_t)v420;
  v250 = (uint64_t)v430;
  v251 = v440;
  if (v246)
  {
    v438 = (void (**)(char *, uint64_t, uint64_t))((v246 - 1) & v246);
    v439 = 0LL;
    v252 = __clz(__rbit64(v246));
    goto LABEL_71;
  }

  v259 = 1LL;
  if (v436 <= 1)
  {
    v261 = 0LL;
LABEL_76:
    v262 = sub_100005FB4(&qword_100158268);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v262 - 8) + 56LL))(v249, 1LL, 1LL, v262);
    v438 = 0LL;
    v439 = (char *)v261;
    goto LABEL_77;
  }

  v260 = v432[1];
  if (!v260)
  {
    v261 = 1LL;
    if (v436 > 2)
    {
      v260 = v432[2];
      if (v260)
      {
        v259 = 2LL;
        goto LABEL_74;
      }

      v261 = 2LL;
      if (v436 > 3)
      {
        v260 = v432[3];
        if (v260)
        {
          v259 = 3LL;
          goto LABEL_74;
        }

        v259 = 4LL;
        v261 = 3LL;
        if (v436 > 4)
        {
          v260 = v432[4];
          if (v260) {
            goto LABEL_74;
          }
          while (v423 != v242)
          {
            v260 = *(void *)&v425[8 * v242++];
            if (v260)
            {
              v259 = v242 + 4;
              goto LABEL_74;
            }
          }

          v261 = (uint64_t)v421;
        }
      }
    }

    goto LABEL_76;
  }

  uint64_t v63 = sub_10000610C(v27);
  uint64_t v64 = v92;
  if ((v92 & 0xC000000000000001LL) != 0)
  {
    if (v92 < 0) {
      uint64_t v65 = v92;
    }
    else {
      uint64_t v65 = v92 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v92);
    uint64_t v66 = __CocoaSet.count.getter(v65);
    uint64_t v63 = swift_bridgeObjectRelease(v64);
  }

  else
  {
    uint64_t v66 = *(void *)(v92 + 16);
  }

  if (v66)
  {
    uint64_t v67 = static os_log_type_t.info.getter(v63);
    uint64_t v68 = swift_allocObject(v80, 72LL, 7LL);
    uint64_t v69 = (void *)v68;
    *(_OWORD *)(v68 + 16) = xmmword_10010F110;
    if ((v64 & 0xC000000000000001LL) != 0)
    {
      if (v64 < 0) {
        uint64_t v70 = v64;
      }
      else {
        uint64_t v70 = v64 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v64);
      uint64_t v71 = __CocoaSet.count.getter(v70);
      uint64_t v68 = swift_bridgeObjectRelease(v64);
    }

    else
    {
      uint64_t v71 = *(void *)(v64 + 16);
    }

    v69[7] = &type metadata for Int;
    v69[8] = &protocol witness table for Int;
    v69[4] = v71;
    char v72 = (void *)static OS_os_log.default.getter(v68);
    os_log(_:dso:log:_:_:)( v67,  &_mh_execute_header,  v72,  "reporting %d newly unsupported kexts to syspolicyd after AKEL update:",  v79);
    swift_bridgeObjectRelease(v69);

    uint64_t v74 = v20[5];
    char v73 = v20[6];
    sub_100005110(v20 + 2, v74);
    sub_10007BDA0(v74, v73);
    uint64_t v75 = v90;
    uint64_t v76 = v91;
    sub_100005110(v89, v90);
    uint64_t v77 = swift_bridgeObjectRetain(v64);
    os_log_type_t v78 = sub_10009E84C(v77);
    swift_bridgeObjectRelease_n(v64, 2LL);
    (*(void (**)(void *, uint64_t, uint64_t))(v76 + 88))(v78, v75, v76);
    swift_bridgeObjectRelease(v78);
    sub_100006034(v89);
  }

  else
  {
    swift_bridgeObjectRelease(v64);
  }

  return v81;
}

              sub_10000610C(a1);
              return v55;
            }
          }
        }
      }
    }

    int64_t v45 = sub_100012624();
    uint64_t v8 = swift_allocError(&type metadata for KMError, v45, 0LL, 0LL);
    *(void *)uint64_t v9 = 0xD000000000000030LL;
    *(void *)(v9 + 8) = 0x800000010012C920LL;
    goto LABEL_5;
  }

  if (v13 == -889275714) {
    goto LABEL_43;
  }
  unint64_t v14 = -889275713;
LABEL_15:
  if (v13 != v14)
  {
LABEL_46:
    uint64_t v46 = sub_100012624();
    uint64_t v8 = swift_allocError(&type metadata for KMError, v46, 0LL, 0LL);
    uint64_t v10 = "Binary does not have valid magic";
    uint64_t v11 = 0xD000000000000020LL;
    goto LABEL_4;
  }

  if (v6 < 8) {
    goto LABEL_44;
  }
  uint64_t v77 = a4;
  unint64_t v16 = a1[1];
  fat_header.magic = *a1;
  fat_header.nfat_arch = v16;
  if (v13 == -1078264118)
  {
    j__swap_fat_header(&fat_header, NX_LittleEndian);
    unint64_t v16 = fat_header.nfat_arch;
  }

  uint64_t v17 = v16;
  if (v6 < ((32LL * v16) | 8uLL)) {
    goto LABEL_50;
  }
  uint64_t v18 = 32LL * v16;
  uint64_t v19 = (fat_arch_64 *)swift_slowAlloc(v18, -1LL);
  unint64_t v20 = v19;
  if ((_DWORD)v17) {
    memcpy(v19, a1 + 2, v18);
  }
  if (v13 == -1078264118) {
    j__swap_fat_arch_64(v20, v17, NX_LittleEndian);
  }
  uint64_t v76 = v20;
  unint64_t v21 = _swiftEmptyArrayStorage;
  if ((_DWORD)v17)
  {
    unint64_t v22 = &v20->cputype;
    uint64_t v23 = &v20[v17];
    do
    {
      unint64_t v26 = j__NXGetArchInfoFromCpuType(*v22, v22[1]);
      if (v26 && (uint64_t v27 = v26->name) != 0LL)
      {
        uint64_t v28 = String.init(cString:)(v27);
        unint64_t v30 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
          unint64_t v21 = sub_10000C82C(0LL, v21[2] + 1LL, 1, v21);
        }
        uint64_t v32 = v21[2];
        int64_t v31 = v21[3];
        uint64_t v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          uint64_t v44 = sub_10000C82C((void *)(v31 > 1), v32 + 1, 1, v21);
          uint64_t v33 = v32 + 1;
          unint64_t v21 = v44;
        }

        v21[2] = v33;
        uint64_t v34 = &v21[2 * v32];
        v34[4] = v28;
        uint64_t v25 = v34 + 4;
      }

      else
      {
        *(void *)&mh.magic = 0x286E776F6E6B6E55LL;
        *(void *)&mh.cpusubtype = 0xE800000000000000LL;
        v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        unint64_t v36 = v35._object;
        String.append(_:)(v35);
        swift_bridgeObjectRelease(v36);
        v37._countAndFlagsBits = 44LL;
        v37._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v37);
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        char v39 = v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(v39);
        v40._countAndFlagsBits = 41LL;
        v40._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v40);
        uint64_t v41 = *(void *)&mh.magic;
        unint64_t v30 = *(void *)&mh.cpusubtype;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
          unint64_t v21 = sub_10000C82C(0LL, v21[2] + 1LL, 1, v21);
        }
        uint64_t v43 = v21[2];
        uint64_t v42 = v21[3];
        if (v43 >= v42 >> 1) {
          unint64_t v21 = sub_10000C82C((void *)(v42 > 1), v43 + 1, 1, v21);
        }
        v21[2] = v43 + 1;
        Swift::String v24 = &v21[2 * v43];
        v24[4] = v41;
        uint64_t v25 = v24 + 4;
      }

      v25[1] = v30;
      v22 += 8;
    }

    while (v22 != (cpu_type_t *)v23);
  }

uint64_t sub_100024E94( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

uint64_t sub_100024F0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_1001587B8);
  uint64_t v11 = *(void *)(sub_100005FB4(&qword_100158798) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100005FB4(&qword_100158798);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10002641C(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10002511C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v56 = a3;
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v54 = *(void *)(active - 8);
  uint64_t v6 = __chkstk_darwin(active);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = sub_100005FB4(&qword_100158798);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v53 = (uint64_t)v18 + *(int *)(v15 + 48);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v51 = *(void *)(v16 + 72);
  uint64_t v48 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v52 = v18;
  uint64_t v49 = v11;
  while (1)
  {
    uint64_t v55 = v19;
    uint64_t v25 = (uint64_t)v8;
    sub_100026390(v20, (uint64_t)v18);
    unint64_t v26 = v18[1];
    v59[0] = *v18;
    uint64_t v27 = v59[0];
    v59[1] = v26;
    uint64_t v28 = (uint64_t)v13;
    sub_100025C5C(v53, (uint64_t)v13);
    int64_t v29 = *(void **)v56;
    unint64_t v31 = sub_100024E94(v27, v26, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_10000D324);
    uint64_t v32 = v29[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
      __break(1u);
      goto LABEL_22;
    }

    char v35 = v30;
    if (v29[3] >= v34)
    {
      if ((a2 & 1) == 0) {
        sub_100025564();
      }
    }

    else
    {
      sub_100025794(v34, a2 & 1);
      uint64_t v36 = sub_100024E94(v27, v26, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_10000D324);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_21;
      }
      unint64_t v31 = v36;
    }

    char v38 = *(void **)v56;
    if ((v35 & 1) != 0) {
      break;
    }
    v38[(v31 >> 6) + 8] |= 1LL << v31;
    unint64_t v21 = (uint64_t *)(v38[6] + 16 * v31);
    *unint64_t v21 = v27;
    v21[1] = v26;
    uint64_t v13 = (char *)v28;
    sub_100025C5C(v28, v38[7] + *(void *)(v54 + 72) * v31);
    uint64_t v22 = v38[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_20;
    }
    _OWORD v38[2] = v24;
    uint64_t v8 = (char *)v25;
LABEL_5:
    uint64_t v18 = v52;
    v20 += v51;
    a2 = 1;
    uint64_t v19 = v55 - 1;
    if (v55 == 1) {
      return swift_bridgeObjectRelease_n(v48, 2LL);
    }
  }

  uint64_t v39 = v38[7];
  unint64_t v40 = *(void *)(v54 + 72) * v31;
  uint64_t v8 = (char *)v25;
  sub_100025C18(v39 + v40, v25);
  uint64_t v41 = (uint64_t)v49;
  uint64_t v13 = (char *)v28;
  sub_100023FD8((uint64_t)v8, v28, (uint64_t)v49);
  if (!v50)
  {
    sub_100025CA0((uint64_t)v8);
    sub_100025CA0(v28);
    sub_10001226C(v27, v26);
    sub_100026538(v41, *(void *)(*(void *)v56 + 56LL) + v40);
    goto LABEL_5;
  }

  sub_100025CA0((uint64_t)v8);
  uint64_t v60 = v50;
  swift_errorRetain(v50);
  uint64_t v43 = sub_100005FB4(&qword_10015AB20);
  if ((swift_dynamicCast(v43, &v60, v43, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    uint64_t v44 = v48;
    swift_bridgeObjectRelease(v48);
    sub_100025CA0(v28);
    sub_10001226C(v27, v26);
    swift_bridgeObjectRelease(v44);
    return swift_errorRelease(v60);
  }

LABEL_22:
  uint64_t v57 = 0LL;
  unint64_t v58 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v45._uint64_t object = (void *)0x80000001001227D0LL;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)( v59,  &v57,  &type metadata for Data,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39LL;
  v46._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v46);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v57,  v58,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  swift_release(v3);
  uint64_t v17 = (void *)(v3 + 56);
  char v2 = v20;
LABEL_24:
  uint64_t v18 = 1LL << *(_BYTE *)(v3 + 32);
  if (v18 > 63) {
    bzero(v17, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint64_t *v17 = -1LL << v18;
  }
  *(void *)(v3 + 16) = 0LL;
LABEL_28:
  uint64_t result = swift_release(v3);
  *char v2 = v5;
  return result;
}

    uint64_t v14 = (v25 - 1) & v25;
    uint64_t v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(void *)(v21 + 48) + v22, v15);
    BOOL v23 = *(void *)(v36 + 72) * v20;
    sub_100012734(*(void *)(v21 + 56) + v23, v17, type metadata accessor for DriverBinEntry);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(i + 48) + v22, v16, v15);
  }

  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v37);
    uint64_t v27 = v30;
    uint64_t v28 = v38;
    goto LABEL_25;
  }

  uint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v31 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    uint64_t v53 = v27;
    uint64_t v54 = (v26 - 1) & v26;
    uint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_23:
    int64_t v52 = v24;
    int64_t v29 = v9[9];
    char v30 = (void (*)(char *, unint64_t, uint64_t))v9[2];
    v30(v17, *(void *)(a3 + 48) + v29 * v24, v8);
    unint64_t v31 = (*(uint64_t (**)(char *))(*(void *)a4 + 392LL))(v17);
    v30(v57, (unint64_t)v17, v8);
    if ((v31 & 1) == 0)
    {
      BOOL v23 = (void (*)(char *, uint64_t))v9[1];
      goto LABEL_6;
    }

    uint64_t v32 = v9;
    BOOL v33 = v56;
    if (v56[2]
      && (uint64_t v34 = v56[5],
          char v35 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL),  v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35),  v37 = -1LL << *((_BYTE *)v33 + 32),  v38 = v36 & ~v37,  ((*(void *)((char *)v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38) & 1) != 0))
    {
      uint64_t v39 = ~v37;
      while (1)
      {
        v30(v12, v56[6] + v38 * v29, v8);
        unint64_t v40 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v41 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v57, v8, v40);
        BOOL v23 = (void (*)(char *, uint64_t))v32[1];
        v23(v12, v8);
        if ((v41 & 1) != 0) {
          break;
        }
        char v38 = (v38 + 1) & v39;
        if (((*(void *)((char *)v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38) & 1) == 0)
        {
          v23(v57, v8);
          goto LABEL_30;
        }
      }

      a4 = v47;
      a3 = v48;
      uint64_t v9 = v32;
      uint64_t v17 = v46;
LABEL_6:
      uint64_t v18 = v53;
      v23(v57, v8);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v8);
      uint64_t v22 = v54;
    }

    else
    {
      BOOL v23 = (void (*)(char *, uint64_t))v32[1];
      v23(v57, v8);
LABEL_30:
      uint64_t v42 = v46;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v46, v8);
      uint64_t v18 = v53;
      *(unint64_t *)((char *)v45 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v52;
      a3 = v48;
      uint64_t v43 = __OFADD__(v49++, 1LL);
      a4 = v47;
      uint64_t v9 = v32;
      uint64_t v17 = v42;
      uint64_t v22 = v54;
      if (v43) {
        goto LABEL_37;
      }
    }
  }

  uint64_t v28 = v18 + 4;
  if (v18 + 4 >= v51)
  {
LABEL_35:
    swift_retain(a3);
    return sub_100045ABC(v45, v44, v49, a3);
  }

  unint64_t v26 = *(void *)(v50 + 8 * v28);
  if (v26)
  {
    uint64_t v27 = v18 + 4;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v27 >= v51) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v50 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_22;
    }
  }

  uint64_t v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *uint64_t v25 = a1;
  v25[1] = a2;
  unint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
}

        uint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }

      uint64_t v25 = *(void *)(v10 + 48) + *(void *)(v7 + 72) * v21;
      if ((a2 & 1) != 0)
      {
        sub_1000263D8(v25, (uint64_t)v9, (uint64_t *)&unk_10015BA30);
        uint64_t v19 = *(void *)(*(void *)(v10 + 56) + 8 * v21);
      }

      else
      {
        sub_10001A148(v25, (uint64_t)v9, (uint64_t *)&unk_10015BA30);
        uint64_t v19 = *(void *)(*(void *)(v10 + 56) + 8 * v21);
        swift_bridgeObjectRetain(v19);
      }

      uint64_t result = sub_1000AFE48((uint64_t)v9, v19, v11);
    }
  }

  uint64_t result = swift_release(v10);
LABEL_32:
  *uint64_t v3 = v11;
  return result;
}

    uint64_t v13 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v26 + 72) * v16;
    sub_10001A148(*(void *)(v5 + 48) + v17, (uint64_t)v4, (uint64_t *)&unk_10015BA30);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    sub_1000263D8((uint64_t)v4, *(void *)(v7 + 48) + v17, (uint64_t *)&unk_10015BA30);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    swift_release(v5);
    uint64_t v1 = v24;
    goto LABEL_25;
  }

  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v10 = v22;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }

void *sub_100025564()
{
  uint64_t v1 = v0;
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v30 = *(void *)(active - 8);
  __chkstk_darwin(active);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_1001587A0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v28 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

Swift::Int sub_100025794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v7 = *(void *)(active - 8);
  __chkstk_darwin(active);
  unint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100005FB4(&qword_1001587A0);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v42 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  Swift::Int result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = v42[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = v42[v19];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v27;
      }
    }

void *sub_100025B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005FB4(&qword_100157E80);
  uint64_t v4 = *(void *)(type metadata accessor for ActiveDriverInfo(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  Swift::Int result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      uint64_t v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_100026108(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10000610C(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100025C18(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 16LL))(a2, a1, active);
  return a2;
}

uint64_t sub_100025C5C(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 32LL))(a2, a1, active);
  return a2;
}

uint64_t sub_100025CA0(uint64_t a1)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(active - 8) + 8LL))(a1, active);
  return a1;
}

uint64_t *sub_100025CDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }

  return a1;
}

uint64_t sub_100025D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100025DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100025E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100025E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100025EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100025F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025F70);
}

uint64_t sub_100025F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100025FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025FFC);
}

uint64_t sub_100025FFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100026078(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10010FAC8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for ActiveDriversStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd25ActiveDriversStateManager);
}

uint64_t sub_100026108(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  uint64_t v9 = *(void *)(active - 8);
  uint64_t v10 = __chkstk_darwin(active);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v32 = -1LL << *(_BYTE *)(v17 - 32);
  unint64_t v33 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_100025C18(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_100025C5C((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_100025C5C((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v31;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_100026390(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100158798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000263D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005FB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002641C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100005FB4(&qword_100158798) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100026538(uint64_t a1, uint64_t a2)
{
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(active - 8) + 40LL))(a2, a1, active);
  return a2;
}

unint64_t sub_10002657C()
{
  unint64_t result = qword_10015B9E0;
  if (!qword_10015B9E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015B9E0);
  }

  return result;
}

BOOL sub_1000265C0(char a1, char a2)
{
  return a1 == a2;
}

unint64_t sub_1000265DC()
{
  unint64_t result = qword_10015BA70;
  if (!qword_10015BA70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FB30, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_10015BA70);
  }

  return result;
}

unint64_t sub_100026624()
{
  unint64_t result = qword_1001587C8;
  if (!qword_1001587C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FB98, &type metadata for StripMode);
    atomic_store(result, (unint64_t *)&qword_1001587C8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CollectionKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for CollectionKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100026744 + 4 * byte_10010FB21[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100026778 + 4 * asc_10010FB1C[v4]))();
}

uint64_t sub_100026778(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100026788LL);
  }
  return result;
}

uint64_t sub_100026794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002679CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000267A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000267A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionKind()
{
  return &type metadata for CollectionKind;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for StripMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000268A0 + 4 * byte_10010FB2B[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000268D4 + 4 * byte_10010FB26[v4]))();
}

uint64_t sub_1000268D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000268DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000268E4LL);
  }
  return result;
}

uint64_t sub_1000268F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000268F8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000268FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026904(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StripMode()
{
  return &type metadata for StripMode;
}

uint64_t sub_100026930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a2, a3, a4);
  if ((v8 & 1) != 0)
  {
    uint64_t v10 = (uint64_t *)sub_1000901A0();
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a4 + 40);
    __n128 v14 = swift_bridgeObjectRetain(v12);
    char v15 = v13(a1, a2, v11, v12, a3, a4, v14);
    swift_bridgeObjectRelease(v12);
    return v15 & 1;
  }

  else
  {
    uint64_t v16 = static os_log_type_t.error.getter(v8);
    uint64_t v17 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_10010F110;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_100026B64();
    *(void *)(v18 + 3sub_100006034(v0 + 2) = a1;
    *(void *)(v18 + 40) = a2;
    sub_100026BA8();
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v20, "Volume at path: %{public}s is not protected", 43LL, 2LL, v18);
    swift_bridgeObjectRelease(v18);

    return 0LL;
  }

unint64_t sub_100026B64()
{
  unint64_t result = qword_10015BA00;
  if (!qword_10015BA00)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015BA00);
  }

  return result;
}

unint64_t sub_100026BA8()
{
  unint64_t result = qword_1001596C0;
  if (!qword_1001596C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001596C0);
  }

  return result;
}

uint64_t sub_100026BE4()
{
  return 1LL;
}

uint64_t sub_100026BEC()
{
  return 0LL;
}

uint64_t sub_100026BF4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))() & 1;
}

uint64_t sub_100026C20()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))() & 1;
}

uint64_t sub_100026C4C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))() & 1;
}

uint64_t sub_100026C78()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))() & 1;
}

uint64_t sub_100026CA8(uint64_t a1, uint64_t a2)
{
  return sub_100026CB4(a1, a2, (uint64_t)&off_100146910);
}

uint64_t sub_100026CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  unsigned int v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_100026D2C(v10, v7, v8);
}

uint64_t sub_100026D2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_1001587D0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_100026D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_1001587D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t type metadata accessor for EmbeddedSIPStatus()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd17EmbeddedSIPStatus);
}

void sub_100026E04()
{
  qword_100175250 = (uint64_t)&off_100146980;
}

uint64_t *sub_100026E18()
{
  if (qword_10015DF90 != -1) {
    swift_once(&qword_10015DF90, sub_100026E04);
  }
  return &qword_100175250;
}

void *sub_100026E58()
{
  return &unk_100146960;
}

void *sub_100026E64()
{
  return &unk_100146970;
}

_UNKNOWN **sub_100026E70()
{
  return &off_100146A38;
}

unint64_t sub_100026E7C(char a1)
{
  unint64_t result = 0xD000000000000011LL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0xD00000000000001DLL;
    }
  }

  return result;
}

uint64_t sub_100026EDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100027028(*a1, *a2);
}

void sub_100026EE8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100026F28(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100026F80 + 4 * byte_10010FC7A[a2]))(21580LL);
}

uint64_t sub_100026F80(uint64_t a1)
{
  if (a1 == 21580 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 21580LL, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return v2 & 1;
}

uint64_t sub_100027028(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000011LL;
  unint64_t v3 = 0x80000001001229F0LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v5 = 0xD00000000000001DLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100122A10LL;
    }
    else {
      unint64_t v6 = 0x8000000100122A30LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0xD000000000000011LL;
  unint64_t v6 = 0x80000001001229F0LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v2 = 0xD00000000000001DLL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x8000000100122A10LL;
    }
    else {
      unint64_t v3 = 0x8000000100122A30LL;
    }
  }

LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    char v8 = 1;
    unint64_t v3 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

  swift_bridgeObjectRelease(a2);
LABEL_16:
  unint64_t result = (_OWORD *)swift_bridgeObjectRelease(v14);
  uint64_t v29 = *(void *)(a5[3] + 16LL);
  if (!*(void *)(v29 + 16))
  {
    *a7 = 0u;
    a7[1] = 0u;
    return result;
  }

  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v29);
  uint64_t v30 = sub_100006114(a3, (uint64_t)a4);
  if ((v31 & 1) != 0)
  {
    sub_100006054(*(void *)(v29 + 56) + 32 * v30, (uint64_t)a7);
  }

  else
  {
    *a7 = 0u;
    a7[1] = 0u;
  }

  swift_bridgeObjectRelease(a4);
  int64_t v28 = v29;
  return (_OWORD *)swift_bridgeObjectRelease(v28);
}

  uint64_t v32 = 0;
  return v32 & 1;
}

      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*a1 + 168LL))(v14);
      return v18 == (*(uint64_t (**)(void))(*a2 + 168LL))();
    }

    uint64_t v10 = v23;
    sub_100005110(&v20, v22);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
    unint64_t v13 = v12;
    __n128 v14 = sub_100006034(&v20);
    if (v8 >> 60 == 15)
    {
      if (v13 >> 60 == 15) {
        goto LABEL_15;
      }
LABEL_13:
      sub_10002193C(v6, v8);
      sub_10002193C(v11, v13);
      return 0LL;
    }

    uint64_t v20 = v6;
    unint64_t v21 = v8;
    if (v13 >> 60 == 15)
    {
LABEL_12:
      sub_1000125E0(v6, v8);
      sub_10001226C(v6, v8);
      goto LABEL_13;
    }

    v19[0] = v11;
    v19[1] = v13;
    sub_1000125E0(v6, v8);
    uint64_t v16 = sub_10002BFFC();
    uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)(&v20, v19, &type metadata for CodeSigningHash, v16);
    sub_10002193C(v11, v13);
    sub_10001226C(v20, v21);
    __n128 v14 = sub_10002193C(v6, v8);
    if ((v17 & 1) != 0) {
      goto LABEL_15;
    }
  }

  return 0LL;
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSymbol);
  __break(1u);
  return result;
}

  unint64_t v25 = type metadata accessor for OSExtension(0LL);
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  unint64_t v62 = v109;
  uint64_t v66 = (void (*)(char *, char *, uint64_t))*((void *)v109 + 2);
  uint64_t v67 = v108;
  uint64_t v64 = v111;
  v66(v108, v59, v111);
  uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v68 = 0;
  uint64_t v69 = OSSignpostID.rawValue.getter(v68);
  uint64_t v70 = v57;
  uint64_t v65 = v67;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v61,  (os_signpost_type_t)v115,  v69,  v70,  "",  v68,  2u);
  swift_slowDealloc(v68, -1LL, -1LL);

  (*((void (**)(char *, uint64_t))v62 + 1))(v67, v64);
  uint64_t v63 = v66;
  v66(v67, v59, v64);
LABEL_16:
  uint64_t v71 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  char v72 = OSSignpostIntervalState.init(id:isOpen:)(v65, 1LL);
  char v73 = (void (*)(char *, uint64_t))*((void *)v62 + 1);
  v73(v59, v64);
  uint64_t v74 = v65;
  uint64_t v75 = (void (*)(char *, uint64_t))*((void *)v113 + 1);
  uint64_t v76 = v114;
  v75(v112, v114);
  (*((void (**)(void, uint64_t))*v105 + 49))(0LL, 3LL);
  if (v35) {
    return swift_release(v72);
  }
  uint64_t v112 = (char *)v73;
  uint64_t v113 = v75;
  BOOL v109 = v63;
  uint64_t v108 = v74;
  uint64_t v115 = 0LL;
  uint64_t v77 = v106;
  os_log_type_t v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v101)(v106, v100, v76);
  uint64_t v79 = *v99;
  uint64_t v80 = *((_BYTE *)v99 + 16);
  __n128 v81 = (void *)OSSignposter.logHandle.getter(v78);
  uint64_t v82 = v107;
  unint64_t v83 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v110) = static os_signpost_type_t.end.getter(v83);
  unint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v112)(v82, v64);
    v113(v77, v76);
    return swift_release(v72);
  }

  if ((v80 & 1) != 0)
  {
    unint64_t v84 = v106;
    uint64_t v85 = v104;
    uint64_t v86 = v103;
    if (!((unint64_t)v79 >> 32))
    {
      uint64_t v88 = v102;
      if (v79 >> 11 == 27)
      {
LABEL_37:
        __break(1u);
        return result;
      }

      if (v79 >> 16 <= 0x10)
      {
        unint64_t v87 = &v124;
        goto LABEL_27;
      }

        __break(1u);
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_15;
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

Swift::Int sub_100027124()
{
  return sub_10002712C(*v0);
}

Swift::Int sub_10002712C(char a1)
{
  unint64_t v2 = 0xD000000000000011LL;
  Hasher.init(_seed:)(v5, 0LL);
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v2 = 0xD00000000000001DLL;
    }
    if (a1 == 1) {
      unint64_t v3 = 0x8000000100122A10LL;
    }
    else {
      unint64_t v3 = 0x8000000100122A30LL;
    }
  }

  else
  {
    unint64_t v3 = 0x80000001001229F0LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000271D4(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_10002721C()
{
  return Hasher._finalize()();
}

uint64_t sub_100027280(uint64_t a1)
{
  return sub_100027288(a1, *v1);
}

uint64_t sub_100027288(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000011LL;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v3 = 0xD00000000000001DLL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0x8000000100122A10LL;
    }
    else {
      unint64_t v4 = 0x8000000100122A30LL;
    }
  }

  else
  {
    unint64_t v4 = 0x80000001001229F0LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100027308(uint64_t a1)
{
  return sub_100027310(a1, *v1);
}

Swift::Int sub_100027310(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000011LL;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v3 = 0xD00000000000001DLL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0x8000000100122A10LL;
    }
    else {
      unint64_t v4 = 0x8000000100122A30LL;
    }
  }

  else
  {
    unint64_t v4 = 0x80000001001229F0LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000273B4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1000273F8()
{
  return Hasher._finalize()();
}

unint64_t sub_10002745C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002B520(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100027488@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100026E7C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000274B0(void *a1@<X8>)
{
  *a1 = &off_100146A60;
}

void sub_1000274C0(char *a1)
{
}

void sub_1000274CC()
{
}

void sub_1000274D4()
{
  __asm { BR              X10 }

uint64_t sub_100027508(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE200000000000000LL);
}

void sub_100027558(uint64_t a1)
{
}

unint64_t sub_100027560@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002B57C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002758C()
{
  return ((uint64_t (*)(void))((char *)sub_1000275B4 + 4 * byte_10010FC92[*v0]))();
}

void sub_1000275B4(void *a1@<X8>)
{
  *a1 = 21580LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1000275C4(void *a1@<X8>)
{
  *a1 = 17740LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1000275D4(void *a1@<X8>)
{
  *a1 = 20805LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1000275E4(void *a1@<X8>)
{
  *a1 = 21575LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1000275F4(void *a1@<X8>)
{
  *a1 = 17735LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_100027604(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  __asm { BR              X10 }

void sub_100027668()
{
  if (*(void *)(v1 + 32) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    unint64_t v2 = sub_10002B5C4();
    ((void (*)(uint64_t, ValueMetadata *, unint64_t))dispatch thunk of Hashable.hash(into:))( v0,  &type metadata for CodeSigningHash,  v2);
  }

Swift::Int sub_10002771C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10002775C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100027794(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100027718(v5, v7) & 1;
}

uint64_t sub_1000277DC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 144LL))();
  uint64_t v9 = v8;
  if (!*(void *)(a3 + 16) || (unint64_t v10 = sub_100006114(v7, v8), (v11 & 1) == 0))
  {
    uint64_t v23 = v9;
LABEL_9:
    swift_bridgeObjectRelease(v23);
    return 0LL;
  }

  uint64_t v12 = *(void *)(*(void *)(a3 + 56) + 8 * v10);
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = swift_bridgeObjectRelease(v9);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184LL))(v13);
  if (!v14)
  {
    uint64_t v23 = v12;
    goto LABEL_9;
  }

  uint64_t v15 = v14;
  if (!a2)
  {
    uint64_t v24 = *(void *)(v12 + 56);
    uint64_t v25 = 1LL << *(_BYTE *)(v12 + 32);
    uint64_t v26 = -1LL;
    if (v25 < 64) {
      uint64_t v26 = ~(-1LL << v25);
    }
    int64_t v31 = (unint64_t)(v25 + 63) >> 6;
    if ((v26 & v24) != 0)
    {
      unint64_t v27 = __clz(__rbit64(v26 & v24));
      goto LABEL_30;
    }

    if ((unint64_t)(v25 + 63) >> 6 > 1)
    {
      unint64_t v28 = *(void *)(v12 + 64);
      uint64_t v29 = 1LL;
      if (v28) {
        goto LABEL_29;
      }
      uint64_t v29 = 2LL;
      if (v31 <= 2) {
        goto LABEL_32;
      }
      unint64_t v28 = *(void *)(v12 + 72);
      if (v28) {
        goto LABEL_29;
      }
      uint64_t v29 = 3LL;
      if (v31 <= 3) {
        goto LABEL_32;
      }
      unint64_t v28 = *(void *)(v12 + 80);
      if (v28)
      {
LABEL_29:
        unint64_t v27 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_30:
        __asm { BR              X9 }
      }

      uint64_t v30 = 4LL;
      if (v31 > 4)
      {
        unint64_t v28 = *(void *)(v12 + 88);
        if (v28)
        {
          uint64_t v29 = 4LL;
          goto LABEL_29;
        }

        while (1)
        {
          uint64_t v29 = v30 + 1;
          if (__OFADD__(v30, 1LL))
          {
            __break(1u);
            JUMPOUT(0x100027D30LL);
          }

          if (v29 >= v31) {
            break;
          }
          unint64_t v28 = *(void *)(v12 + 56 + 8 * v29);
          ++v30;
          if (v28) {
            goto LABEL_29;
          }
        }
      }
    }

uint64_t sub_100027D48(uint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)(&v14, *(void *)(a2 + 40));
    sub_100027604((uint64_t)&v14);
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
    {
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v13 = ~v5;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48) + 40 * v6;
        uint64_t v10 = *(unsigned __int8 *)(v9 + 16);
        BOOL v11 = *(void *)v9 == v7 && *(void *)(v9 + 8) == v8;
        if (v11
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v9, *(void *)(v9 + 8), v7, v8, 0LL) & 1) != 0)
        {
          __asm { BR              X8 }
        }

        unint64_t v6 = (v6 + 1) & v13;
      }

      while (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }
  }

  return 0LL;
}

void *sub_1000280DC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000CC84(0, v1, 0);
    __int128 v3 = (void *)(a1 + 56);
    do
    {
      uint64_t v4 = *(v3 - 3);
      uint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = *v3;
      swift_bridgeObjectRetain(*v3);
      uint64_t v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease(v7);
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_10000CC84(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      void v13[5] = v10;
      v3 += 4;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000281D8(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  unsigned int v142 = a2;
  uint64_t v5 = sub_10008F484();
  if (!*(void *)(a1 + 16))
  {
    __int128 v158 = 0u;
    __int128 v159 = 0u;
    goto LABEL_12;
  }

  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  unint64_t v8 = sub_100006114(v7, v6);
  if ((v9 & 1) == 0)
  {
    __int128 v158 = 0u;
    __int128 v159 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_12;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v158);
  swift_bridgeObjectRelease(v6);
  if (!*((void *)&v159 + 1))
  {
LABEL_12:
    sub_100012824((uint64_t)&v158, &qword_100157FF8);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    goto LABEL_13;
  }

  int v10 = swift_dynamicCast(&v154, &v158, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  BOOL v11 = v10 == 0;
  if (v10) {
    uint64_t v12 = v154;
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v11) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v155;
  }
LABEL_13:
  uint64_t v14 = sub_1000D4E50(v12, v13);
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease(a1);
    *(void *)&__int128 v158 = 0LL;
    *((void *)&v158 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    if ((_BYTE)v142)
    {
      else {
        unint64_t v20 = 0xD00000000000001DLL;
      }
      else {
        unint64_t v21 = 0x8000000100122A30LL;
      }
    }

    else
    {
      unint64_t v20 = 0xD000000000000011LL;
      unint64_t v21 = 0x80000001001229F0LL;
    }

    unint64_t v67 = v21;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease(v21);
    unint64_t v68 = 0xD000000000000023LL;
    uint64_t v69 = " has an invalid or missing version.";
    goto LABEL_83;
  }

  uint64_t v16 = v14;
  uint64_t v17 = 0xD000000000000011LL;
  if ((_BYTE)v142)
  {
    else {
      uint64_t v18 = 0xD00000000000001DLL;
    }
    else {
      uint64_t v19 = 0x8000000100122A30LL;
    }
  }

  else
  {
    uint64_t v19 = 0x80000001001229F0LL;
    uint64_t v18 = 0xD000000000000011LL;
  }

  v135[5] = v16;
  if (*(void *)(a1 + 16) && (unint64_t v22 = sub_100006114(v18, v19), (v23 & 1) != 0))
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v158);
  }

  else
  {
    __int128 v158 = 0u;
    __int128 v159 = 0u;
  }

  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v159 + 1))
  {
    sub_100012824((uint64_t)&v158, &qword_100157FF8);
    goto LABEL_72;
  }

  uint64_t v24 = sub_100005FB4(&qword_100158898);
  if (!swift_dynamicCast(&v154, &v158, (char *)&type metadata for Any + 8, v24, 6LL))
  {
LABEL_72:
    *(void *)&__int128 v158 = 0LL;
    *((void *)&v158 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    if ((_BYTE)v142)
    {
      else {
        uint64_t v17 = 0xD00000000000001DLL;
      }
      else {
        uint64_t v66 = (void *)0x8000000100122A30LL;
      }
    }

    else
    {
      uint64_t v66 = (void *)0x80000001001229F0LL;
    }

    v70._countAndFlagsBits = v17;
    v70._uint64_t object = v66;
    String.append(_:)(v70);
    swift_bridgeObjectRelease(v66);
    unint64_t v68 = 0xD000000000000017LL;
    uint64_t v69 = " has an invalid format.";
LABEL_83:
    unint64_t v71 = (unint64_t)(v69 - 32) | 0x8000000000000000LL;
    String.append(_:)(*(Swift::String *)&v68);
    __int128 v72 = v158;
    unint64_t v73 = sub_100012624();
    uint64_t v74 = swift_allocError(&type metadata for KMError, v73, 0LL, 0LL);
    *(_OWORD *)uint64_t v75 = v72;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_OWORD *)(v75 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    *(void *)(v75 + 64) = 0LL;
    *(_BYTE *)(v75 + 7sub_100006034(v0 + 2) = 44;
    return swift_willThrow(v74);
  }

  unint64_t v25 = v154;
  unint64_t v26 = sub_1000291E8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v141 = v25 + 64;
  unint64_t v144 = v25;
  if ((_BYTE)v142)
  {
    unint64_t v147 = v26;
    uint64_t v27 = 1LL << *(_BYTE *)(v25 + 32);
    uint64_t v28 = -1LL;
    if (v27 < 64) {
      uint64_t v28 = ~(-1LL << v27);
    }
    unint64_t v29 = v28 & *(void *)(v25 + 64);
    int64_t v140 = (unint64_t)(v27 + 63) >> 6;
    swift_bridgeObjectRetain(v25);
    uint64_t v30 = 0LL;
    uint64_t v137 = 0x8000000100122B00LL;
    *(void *)&__int128 v138 = 0x8000000100122AE0LL;
    if (!v29) {
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v145 = (v29 - 1) & v29;
    uint64_t v146 = v30;
    for (unint64_t i = __clz(__rbit64(v29)) | ((void)v30 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v33 << 6))
    {
      uint64_t v36 = 16 * i;
      BOOL v37 = (uint64_t *)(*(void *)(v25 + 48) + v36);
      uint64_t v38 = *v37;
      uint64_t v39 = (void *)v37[1];
      unint64_t v40 = (uint64_t *)(*(void *)(v25 + 56) + v36);
      uint64_t v41 = *v40;
      uint64_t v42 = (void *)v40[1];
      swift_bridgeObjectRetain(v39);
      uint64_t v43 = swift_bridgeObjectRetain(v42);
      unint64_t v154 = 9LL;
      unint64_t v155 = 0xE100000000000000LL;
      uint64_t v152 = &v154;
      swift_bridgeObjectRetain_n(v43, 2LL);
      __int128 v44 = sub_1000293A4(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002B7A0, (uint64_t)v151, v41, (unint64_t)v42);
      swift_bridgeObjectRelease(v42);
      Swift::String v45 = sub_1000280DC((uint64_t)v44);
      swift_bridgeObjectRelease(v44);
      if (v45[2] != 2LL) {
        break;
      }
      uint64_t v143 = v3;
      uint64_t v47 = v45[4];
      Swift::String v46 = (void *)v45[5];
      uint64_t v48 = v45[7];
      uint64_t v139 = (void *)v45[6];
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRetain(v39);
      uint64_t v49 = sub_1000DBC00(v38, (unint64_t)v39);
      if (v50 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v48);
        unint64_t v154 = 0LL;
        unint64_t v155 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(32LL);
        swift_bridgeObjectRelease(v155);
        unint64_t v154 = 0xD000000000000016LL;
        unint64_t v155 = v137;
        v51._countAndFlagsBits = v38;
        v51._uint64_t object = v39;
        String.append(_:)(v51);
        v52._countAndFlagsBits = 0x20726F662027LL;
        v52._uint64_t object = (void *)0xE600000000000000LL;
        String.append(_:)(v52);
        v53._countAndFlagsBits = v47;
        v53._uint64_t object = v46;
        String.append(_:)(v53);
        swift_bridgeObjectRelease(v46);
        goto LABEL_59;
      }

      uint64_t v59 = v49;
      unint64_t v60 = v50;
      unint64_t v154 = v47;
      unint64_t v155 = (unint64_t)v46;
      unint64_t v61 = sub_10002B7B8();
      sub_1000D5718( (uint64_t)&v154,  (uint64_t)&v147,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for ExceptionList.ExceptionMatch,  (uint64_t)&protocol witness table for String,  v61);
      unint64_t v62 = sub_100029300(v153, v47, (uint64_t)v46);
      if (*v63)
      {
        *(void *)&__int128 v158 = v139;
        *((void *)&v158 + 1) = v48;
        LOBYTE(v159) = 3;
        *((void *)&v159 + 1) = v59;
        unint64_t v160 = v60;
        sub_1000125E0(v59, v60);
        sub_100029AA8((uint64_t)&v154, (uint64_t)&v158);
        ((void (*)(void *, void))v62)(v153, 0LL);
        sub_10002193C(v59, v60);
        swift_bridgeObjectRelease(v46);
        uint64_t v64 = v156;
        unint64_t v65 = v157;
        swift_bridgeObjectRelease(v155);
        sub_10002193C(v64, v65);
      }

      else
      {
        swift_bridgeObjectRelease(v48);
        ((void (*)(void *, void))v62)(v153, 0LL);
        sub_10002193C(v59, v60);
        swift_bridgeObjectRelease(v46);
      }

      unint64_t v25 = v144;
      uint64_t v3 = v143;
      if (v143)
      {
LABEL_84:
        unint64_t v77 = v147;
        swift_release(v25);
        swift_bridgeObjectRelease(v25);
        os_log_type_t v78 = v42;
        goto LABEL_135;
      }

LABEL_65:
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v39);
      uint64_t v30 = v146;
      unint64_t v29 = v145;
      if (v145) {
        goto LABEL_39;
      }
LABEL_40:
      BOOL v32 = __OFADD__(v30, 1LL);
      int64_t v33 = (int64_t)v30 + 1;
      if (v32)
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        JUMPOUT(0x1000291D0LL);
      }

      if (v33 >= v140) {
        goto LABEL_130;
      }
      unint64_t v34 = *(void *)(v141 + 8 * v33);
      if (!v34)
      {
        int64_t v35 = v33 + 1;
        if (v33 + 1 >= v140) {
          goto LABEL_130;
        }
        unint64_t v34 = *(void *)(v141 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v33 + 2;
          if (v33 + 2 >= v140) {
            goto LABEL_130;
          }
          unint64_t v34 = *(void *)(v141 + 8 * v35);
          if (!v34)
          {
            int64_t v35 = v33 + 3;
            if (v33 + 3 >= v140) {
              goto LABEL_130;
            }
            unint64_t v34 = *(void *)(v141 + 8 * v35);
            if (!v34)
            {
              int64_t v35 = v33 + 4;
              if (v33 + 4 >= v140) {
                goto LABEL_130;
              }
              unint64_t v34 = *(void *)(v141 + 8 * v35);
              if (!v34)
              {
                int64_t v35 = v33 + 5;
                if (v33 + 5 >= v140)
                {
LABEL_130:
                  swift_release(v25);
                  swift_bridgeObjectRelease(v25);
                  return v142;
                }

                unint64_t v34 = *(void *)(v141 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    int64_t v33 = v35 + 1;
                    if (__OFADD__(v35, 1LL)) {
                      goto LABEL_139;
                    }
                    if (v33 >= v140) {
                      goto LABEL_130;
                    }
                    unint64_t v34 = *(void *)(v141 + 8 * v33);
                    ++v35;
                    if (v34) {
                      goto LABEL_54;
                    }
                  }
                }
              }
            }
          }
        }

        int64_t v33 = v35;
      }

    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_once(&qword_1001646B0, sub_1000A4954);
  }

  uint64_t v30 = v172;
LABEL_55:
  v175 = v22;
  Swift::Int v120 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v160, v159);
  uint64_t v122 = v121;
  unint64_t v123 = swift_bridgeObjectRelease(v22);
  uint64_t v124 = v161;
  uint64_t v125 = v158;
  *((void *)v161 + 7) = &type metadata for String;
  v124[8] = v125;
  v124[4] = v120;
  v124[5] = v122;
  char v126 = (void *)static OS_os_log.default.getter(v123);
  Swift::String v127 = static os_log_type_t.default.getter(v126);
  os_log(_:dso:log:type:_:)( "finding bundles at additional paths: %{public}s",  47LL,  2LL,  &_mh_execute_header,  v126,  v127,  v124);
  swift_bridgeObjectRelease(v124);

  swift_retain(v29);
  uint64_t v128 = v162;
  Swift::String v129 = v165;
  uint64_t v130 = sub_1000B1EEC(v162, (void *)v29);
  if (v129)
  {
    swift_release(v29);
    uint64_t v131 = v179;
    swift_bridgeObjectRelease(v128);
    swift_bridgeObjectRelease(v131);
  }

  else
  {
    unint64_t v132 = (uint64_t)v130;
    swift_bridgeObjectRelease(v128);
    swift_release(v29);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v34, 1LL, 1LL, v8);
    uint64_t v133 = v29 + 16;
    uint64_t v134 = (uint64_t)v34;
    uint64_t v135 = v179;
    int64_t v136 = sub_1000AE904(v179);
    swift_bridgeObjectRelease(v135);
    uint64_t v137 = sub_100026BE4();
    __int128 v138 = sub_1000D63E0(v133, (uint64_t)v136, v137);
    swift_release(v136);
    uint64_t v139 = v153;
    int64_t v140 = *(int *)(v153 + 48);
    unint64_t v141 = v154;
    sub_1000263D8(v134, v154, (uint64_t *)&unk_10015BA30);
    *(void *)(v141 + v140) = v138;
    unsigned int v142 = sub_1000D25FC(v141, v132, v139);
    swift_bridgeObjectRelease(v132);
    sub_100012824(v141, &qword_10015B140);
    uint64_t v143 = *(void *)(v142 + 16);
    if (v143)
    {
      sub_100005FB4(&qword_10015B148);
      unint64_t v144 = (void *)static _DictionaryStorage.allocate(capacity:)(v143);
    }

    else
    {
      unint64_t v144 = &_swiftEmptyDictionarySingleton;
    }

    v175 = (uint64_t)v144;
    swift_bridgeObjectRetain(v142);
    sub_1000B041C(v145, 1, &v175);
    swift_bridgeObjectRelease(v142);
    uint64_t v146 = v175;
    unint64_t v147 = (void *)v163;
    swift_retain(v163);
    BOOL v148 = v155;
    char v149 = v156;
    sub_1000B23D8(v155, v156);
    sub_1000B2128((uint64_t)_swiftEmptyArrayStorage, v146, v148, v149, v147);
    uint64_t v131 = v150;
    swift_release(v147);
    sub_1000B23FC(v148, v149);
    swift_release(v146);
  }

  return v131;
}

LABEL_54:
      uint64_t v145 = (v34 - 1) & v34;
      uint64_t v146 = (void *)v33;
    }

    swift_bridgeObjectRelease(v45);
    unint64_t v154 = 0LL;
    unint64_t v155 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v155);
    unint64_t v154 = 0xD00000000000001FLL;
    unint64_t v155 = v138;
    v54._countAndFlagsBits = v41;
    v54._uint64_t object = v42;
    String.append(_:)(v54);
LABEL_59:
    unint64_t v56 = v154;
    unint64_t v55 = v155;
    unint64_t v57 = sub_100012624();
    uint64_t v3 = swift_allocError(&type metadata for KMError, v57, 0LL, 0LL);
    *(void *)uint64_t v58 = v56;
    *(void *)(v58 + 8) = v55;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(void *)(v58 + 64) = 0LL;
    *(_BYTE *)(v58 + 7sub_100006034(v0 + 2) = 44;
    swift_willThrow(v3);
    unint64_t v25 = v144;
    if (v3) {
      goto LABEL_84;
    }
    goto LABEL_65;
  }

  v153[0] = v26;
  uint64_t v79 = 1LL << *(_BYTE *)(v25 + 32);
  uint64_t v80 = -1LL;
  if (v79 < 64) {
    uint64_t v80 = ~(-1LL << v79);
  }
  unint64_t v81 = v80 & *(void *)(v25 + 64);
  int64_t v136 = (unint64_t)(v79 + 63) >> 6;
  uint64_t v82 = swift_bridgeObjectRetain(v25);
  int64_t v83 = 0LL;
  __int128 v138 = xmmword_10010FF00;
  while (1)
  {
    if (v81)
    {
      uint64_t v145 = (v81 - 1) & v81;
      unint64_t v90 = __clz(__rbit64(v81)) | (v83 << 6);
      goto LABEL_107;
    }

    BOOL v32 = __OFADD__(v83++, 1LL);
    if (v32) {
      goto LABEL_138;
    }
    if (v83 >= v136) {
      goto LABEL_131;
    }
    unint64_t v91 = *(void *)(v141 + 8 * v83);
    if (!v91) {
      break;
    }
LABEL_106:
    uint64_t v145 = (v91 - 1) & v91;
    unint64_t v90 = __clz(__rbit64(v91)) + (v83 << 6);
LABEL_107:
    uint64_t v93 = 16 * v90;
    uint64_t v94 = *(void *)(v25 + 56);
    uint64_t v95 = (uint64_t *)(*(void *)(v25 + 48) + v93);
    uint64_t v39 = (void *)v95[1];
    uint64_t v143 = *v95;
    unint64_t v96 = (uint64_t *)(v94 + v93);
    uint64_t v98 = *v96;
    unint64_t v97 = v96[1];
    *(void *)&__int128 v158 = 32LL;
    *((void *)&v158 + 1) = 0xE100000000000000LL;
    __chkstk_darwin(v82);
    v135[2] = &v158;
    swift_bridgeObjectRetain_n(v97, 4LL);
    swift_bridgeObjectRetain_n(v39, 2LL);
    uint64_t v137 = v98;
    int64_t v99 = sub_1000293A4(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002B7A0, (uint64_t)v135, v98, v97);
    uint64_t v146 = (void *)v97;
    swift_bridgeObjectRelease(v97);
    int64_t v100 = *((void *)v99 + 2);
    if (v100)
    {
      uint64_t v139 = v39;
      int64_t v140 = v83;
      uint64_t v101 = v3;
      *(void *)&__int128 v158 = _swiftEmptyArrayStorage;
      sub_10000CC84(0, v100, 0);
      uint64_t v102 = (void *)v158;
      uint64_t v103 = v99 + 56;
      do
      {
        uint64_t v104 = *(v103 - 3);
        uint64_t v105 = *(v103 - 2);
        uint64_t v106 = *(v103 - 1);
        uint64_t v107 = *v103;
        swift_bridgeObjectRetain(*v103);
        uint64_t v108 = static String._fromSubstring(_:)(v104, v105, v106, v107);
        uint64_t v110 = v109;
        swift_bridgeObjectRelease(v107);
        *(void *)&__int128 v158 = v102;
        unint64_t v112 = v102[2];
        unint64_t v111 = v102[3];
        if (v112 >= v111 >> 1)
        {
          sub_10000CC84(v111 > 1, v112 + 1, 1);
          uint64_t v102 = (void *)v158;
        }

        v102[2] = v112 + 1;
        uint64_t v113 = &v102[2 * v112];
        v113[4] = v108;
        v113[5] = v110;
        v103 += 4;
        --v100;
      }

      while (v100);
      swift_bridgeObjectRelease(v99);
      uint64_t v3 = v101;
      int64_t v83 = v140;
      uint64_t v39 = v139;
    }

    else
    {
      swift_bridgeObjectRelease(v99);
      uint64_t v102 = _swiftEmptyArrayStorage;
    }

    uint64_t v114 = v102[2];
    if (v114 != 1)
    {
      if (v114 == 2)
      {
        uint64_t v115 = v102[4];
        uint64_t v116 = (void *)v102[5];
        uint64_t v117 = v102[6];
        uint64_t v118 = v102[7];
        swift_bridgeObjectRetain(v116);
        swift_bridgeObjectRetain(v118);
        swift_bridgeObjectRelease(v102);
        v119._countAndFlagsBits = v115;
        v119._uint64_t object = v116;
        Swift::Int v120 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100146A88, v119);
        swift_bridgeObjectRelease(v116);
        unint64_t v25 = v144;
        switch(v120)
        {
          case 0LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 0;
            goto LABEL_119;
          case 1LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 1;
            goto LABEL_119;
          case 2LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 2;
            goto LABEL_119;
          case 3LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 3;
            goto LABEL_119;
          case 4LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 4;
            goto LABEL_119;
          case 5LL:
            swift_bridgeObjectRelease(v146);
            char v121 = 5;
            goto LABEL_119;
          default:
            swift_bridgeObjectRelease(v39);
            swift_bridgeObjectRelease(v118);
            goto LABEL_134;
        }
      }

      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v102);
      unint64_t v25 = v144;
LABEL_134:
      *(void *)&__int128 v158 = 0LL;
      *((void *)&v158 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(*((void *)&v158 + 1));
      *(void *)&__int128 v158 = 0xD00000000000001DLL;
      *((void *)&v158 + 1) = 0x8000000100122AC0LL;
      v127._countAndFlagsBits = v137;
      uint64_t v128 = v146;
      v127._uint64_t object = v146;
      String.append(_:)(v127);
      swift_bridgeObjectRelease(v128);
      v129._countAndFlagsBits = 39LL;
      v129._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v129);
      uint64_t v131 = *((void *)&v158 + 1);
      uint64_t v130 = v158;
      unint64_t v132 = sub_100012624();
      uint64_t v133 = swift_allocError(&type metadata for KMError, v132, 0LL, 0LL);
      *(void *)uint64_t v134 = v130;
      *(void *)(v134 + 8) = v131;
      *(_OWORD *)(v134 + 16) = 0u;
      *(_OWORD *)(v134 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v134 + 48) = 0u;
      *(void *)(v134 + 64) = 0LL;
      *(_BYTE *)(v134 + 7sub_100006034(v0 + 2) = 44;
      swift_willThrow(v133);
      unint64_t v77 = v153[0];
      swift_release(v25);
      swift_bridgeObjectRelease(v25);
      os_log_type_t v78 = v128;
LABEL_135:
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v39);
      return swift_bridgeObjectRelease(v77);
    }

    uint64_t v117 = v102[4];
    uint64_t v118 = v102[5];
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRelease(v146);
    swift_bridgeObjectRelease(v102);
    char v121 = 3;
    unint64_t v25 = v144;
LABEL_119:
    v148[0] = v117;
    v148[1] = v118;
    char v149 = v121;
    __int128 v150 = v138;
    uint64_t v122 = v143;
    *(void *)&__int128 v158 = v143;
    *((void *)&v158 + 1) = v39;
    unint64_t v123 = sub_10002B7B8();
    sub_1000D5718( (uint64_t)&v158,  (uint64_t)v153,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for ExceptionList.ExceptionMatch,  (uint64_t)&protocol witness table for String,  v123);
    uint64_t v124 = sub_100029300(&v154, v122, (uint64_t)v39);
    if (*v125)
    {
      swift_bridgeObjectRetain(v118);
      sub_10002B568(0LL, 0xF000000000000000LL);
      char v126 = sub_100029AA8((uint64_t)&v158, (uint64_t)v148);
      ((void (*)(unint64_t *, void))v124)(&v154, 0LL);
      swift_bridgeObjectRelease(v118);
      sub_10002193C(0LL, 0xF000000000000000LL);
      swift_bridgeObjectRelease(v39);
      uint64_t v86 = *((void *)&v158 + 1);
      uint64_t v85 = v158;
      uint64_t v87 = v159;
      uint64_t v84 = v126 & 1;
      uint64_t v88 = *((void *)&v159 + 1);
      unint64_t v89 = v160;
    }

    else
    {
      ((void (*)(unint64_t *, void))v124)(&v154, 0LL);
      swift_bridgeObjectRelease(v118);
      sub_10002193C(0LL, 0xF000000000000000LL);
      swift_bridgeObjectRelease(v39);
      uint64_t v84 = 0LL;
      uint64_t v85 = 0LL;
      uint64_t v86 = 0LL;
      uint64_t v87 = 0LL;
      uint64_t v88 = 0LL;
      unint64_t v89 = 0LL;
    }

    sub_10002B7FC(v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v146);
    uint64_t v82 = swift_bridgeObjectRelease(v39);
    unint64_t v81 = v145;
  }

  int64_t v92 = v83 + 1;
  if (v83 + 1 >= v136) {
    goto LABEL_131;
  }
  unint64_t v91 = *(void *)(v141 + 8 * v92);
  if (v91) {
    goto LABEL_105;
  }
  int64_t v92 = v83 + 2;
  if (v83 + 2 >= v136) {
    goto LABEL_131;
  }
  unint64_t v91 = *(void *)(v141 + 8 * v92);
  if (v91) {
    goto LABEL_105;
  }
  int64_t v92 = v83 + 3;
  if (v83 + 3 >= v136) {
    goto LABEL_131;
  }
  unint64_t v91 = *(void *)(v141 + 8 * v92);
  if (v91) {
    goto LABEL_105;
  }
  int64_t v92 = v83 + 4;
  if (v83 + 4 >= v136) {
    goto LABEL_131;
  }
  unint64_t v91 = *(void *)(v141 + 8 * v92);
  if (v91) {
    goto LABEL_105;
  }
  int64_t v92 = v83 + 5;
  if (v83 + 5 >= v136) {
    goto LABEL_131;
  }
  unint64_t v91 = *(void *)(v141 + 8 * v92);
  if (v91)
  {
LABEL_105:
    int64_t v83 = v92;
    goto LABEL_106;
  }

  while (1)
  {
    int64_t v83 = v92 + 1;
    if (__OFADD__(v92, 1LL)) {
      goto LABEL_140;
    }
    if (v83 >= v136) {
      break;
    }
    unint64_t v91 = *(void *)(v141 + 8 * v83);
    ++v92;
    if (v91) {
      goto LABEL_106;
    }
  }

LABEL_131:
  swift_release(v25);
  swift_bridgeObjectRelease(v25);
  return v142;
}

unint64_t sub_1000291E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001588E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_100029300(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  void v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000299C8(v6, a2, a3);
  return sub_10002936C;
}

void sub_10002936C(void *a1)
{
  int64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

char *sub_1000293A4( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v52[3] = a4;
  if (a1 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject(&unk_100146D98, 24LL, 7LL);
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v49 = swift_allocObject(&unk_100146DC0, 24LL, 7LL);
  *(void *)(v49 + 16) = 15LL;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_1000297BC(v33 | (v15 << 16), v49, a2 & 1, v14, v11, a6);
    swift_bridgeObjectRelease(a6);
    int v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain(v10);
    swift_release(v14);
    uint64_t v34 = v49;
    goto LABEL_40;
  }

  uint64_t v44 = a1;
  uint64_t v45 = v14;
  uint64_t v17 = 7LL;
  if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v17 = 11LL;
  }
  uint64_t v43 = v17 | (v16 << 16);
  unint64_t v50 = 4 * v16;
  int v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v9 = 15LL;
  unint64_t v8 = 15LL;
  unint64_t v18 = 15LL;
  while (1)
  {
    uint64_t v19 = String.subscript.getter(v9, v11, a6);
    uint64_t v21 = v20;
    v52[0] = v19;
    v52[1] = v20;
    uint64_t v22 = a3(v52);
    if (v7)
    {
      swift_release(v45);
      swift_release(v49);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(a6);
      return v10;
    }

    uint64_t v6 = v22;
    swift_bridgeObjectRelease(v21);
    if ((v6 & 1) != 0) {
      break;
    }
    unint64_t v9 = String.index(after:)(v9, v11, a6);
LABEL_11:
    if (v50 == v9 >> 14) {
      goto LABEL_31;
    }
  }

  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = String.index(after:)(v9, v11, a6);
    *(void *)(v49 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v18 = v9;
    goto LABEL_11;
  }

  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v23 = String.subscript.getter(v8, v9, v11, a6);
  uint64_t v46 = v24;
  uint64_t v47 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
    int v10 = sub_1000298C8(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
  }
  unint64_t v30 = *((void *)v10 + 2);
  unint64_t v29 = *((void *)v10 + 3);
  uint64_t v6 = v30 + 1;
  if (v30 >= v29 >> 1) {
    int v10 = sub_1000298C8((char *)(v29 > 1), v30 + 1, 1, v10);
  }
  *((void *)v10 + sub_100006034(v0 + 2) = v6;
  int64_t v31 = &v10[32 * v30];
  *((void *)v31 + 4) = v47;
  *((void *)v31 + 5) = v26;
  *((void *)v31 + 6) = v28;
  *((void *)v31 + 7) = v46;
  *(void *)(v45 + 16) = v10;
  uint64_t v32 = String.index(after:)(v9, v11, a6);
  unint64_t v9 = v32;
  *(void *)(v49 + 16) = v32;
  if (*((void *)v10 + 2) != v44)
  {
    unint64_t v8 = v32;
    unint64_t v18 = v32;
    goto LABEL_11;
  }

  unint64_t v18 = v32;
  unint64_t v8 = v32;
LABEL_31:
  if (v50 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    uint64_t v35 = v45;
    goto LABEL_39;
  }

  if (v50 >= v18 >> 14)
  {
    uint64_t v6 = String.subscript.getter(v18, v43, v11, a6);
    unint64_t v8 = v36;
    unint64_t v9 = v37;
    uint64_t v11 = v38;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }

uint64_t sub_1000297BC( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = *(void *)(a2 + 16);
  int v14 = (v13 >> 14 == a1 >> 14) & a3;
  if (v14 == 1) {
    return v14 ^ 1u;
  }
  if (a1 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = a4;
  uint64_t v7 = String.subscript.getter(v13, a1, a5, a6);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  uint64_t v11 = *(char **)(v6 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)(v6 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    uint64_t v11 = sub_1000298C8(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    *(void *)(v6 + 16) = v11;
  }

  unint64_t v20 = *((void *)v11 + 2);
  unint64_t v19 = *((void *)v11 + 3);
  if (v20 >= v19 >> 1)
  {
    uint64_t v11 = sub_1000298C8((char *)(v19 > 1), v20 + 1, 1, v11);
    *(void *)(v6 + 16) = v11;
  }

  *((void *)v11 + sub_100006034(v0 + 2) = v20 + 1;
  uint64_t v21 = &v11[32 * v20];
  *((void *)v21 + 4) = v7;
  *((void *)v21 + 5) = v8;
  *((void *)v21 + 6) = v9;
  *((void *)v21 + 7) = v10;
  return v14 ^ 1u;
}

char *sub_1000298C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_1001588E8);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void (*sub_1000299C8(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  int64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10002ADD0(v7);
  v7[10] = sub_10002AC68(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100029A58;
}

void sub_100029A58(uint64_t a1)
{
  int64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0LL);
  free(v1);
}

uint64_t sub_100029AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(&v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v6);
  sub_100027604((uint64_t)&v22);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
  {
    uint64_t v19 = a1;
    uint64_t v20 = ~v8;
    uint64_t v21 = a2;
    uint64_t v11 = *(void *)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    do
    {
      uint64_t v12 = *(void *)(v6 + 48) + 40 * v9;
      uint64_t v13 = *(unsigned __int8 *)(v12 + 16);
      BOOL v14 = *(void *)v12 == v11 && *(void *)(v12 + 8) == v10;
      if (v14
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v12, *(void *)(v12 + 8), v11, v10, 0LL) & 1) != 0)
      {
        __asm { BR              X8 }
      }

      unint64_t v9 = (v9 + 1) & v20;
    }

    while (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    swift_bridgeObjectRelease(v6);
    uint64_t v3 = v2;
    a1 = v19;
    a2 = v21;
  }

  else
  {
    swift_bridgeObjectRelease(v6);
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v22 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_10002BF7C((void *)a2);
  sub_10002A2D4(a2, v9, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = *v3;
  *uint64_t v3 = v22;
  swift_bridgeObjectRelease(v16);
  __int128 v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  return 1LL;
}

uint64_t sub_100029EF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_1001588D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_28;
  }
  uint64_t v20 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v21 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    goto LABEL_21;
  }

  if (v21 <= 1)
  {
    swift_release(v3);
    uint64_t v2 = v20;
    __int128 v17 = (void *)(v3 + 56);
    goto LABEL_24;
  }

  unint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = 1LL;
  if (v10) {
    goto LABEL_20;
  }
  uint64_t v11 = 2LL;
  if (v21 > 2)
  {
    unint64_t v10 = *(void *)(v3 + 72);
    if (!v10)
    {
      uint64_t v12 = 3LL;
      if (v21 > 3)
      {
        unint64_t v10 = *(void *)(v3 + 80);
        if (v10)
        {
          uint64_t v11 = 3LL;
          goto LABEL_20;
        }

        while (1)
        {
          uint64_t v11 = v12 + 1;
          if (__OFADD__(v12, 1LL))
          {
            __break(1u);
            JUMPOUT(0x10002A2BCLL);
          }

          if (v11 >= v21) {
            break;
          }
          unint64_t v10 = *(void *)(v3 + 56 + 8 * v11);
          ++v12;
          if (v10) {
            goto LABEL_20;
          }
        }
      }

      goto LABEL_22;
    }

uint64_t sub_10002A2D4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100029EF8(v8);
    }

    else
    {
      if (v7 > v6)
      {
        uint64_t result = (uint64_t)sub_10002A704();
        goto LABEL_17;
      }

      sub_10002A8C8(v8);
    }

    uint64_t v9 = *v3;
    Hasher.init(_seed:)(&v24, *(void *)(*v3 + 40));
    sub_100027604((uint64_t)&v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v23 = ~v10;
      uint64_t v11 = *(void *)v5;
      uint64_t v12 = *(void *)(v5 + 8);
      do
      {
        uint64_t v13 = *(void *)(v9 + 48) + 40 * a2;
        uint64_t v14 = *(unsigned __int8 *)(v13 + 16);
        BOOL v15 = *(void *)v13 == v11 && *(void *)(v13 + 8) == v12;
        if (v15
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v13, *(void *)(v13 + 8), v11, v12, 0LL),
              (result & 1) != 0))
        {
          __asm { BR              X8 }
        }

        a2 = (a2 + 1) & v23;
      }

      while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
    }
  }

void *sub_10002A704()
{
  int64_t v1 = v0;
  sub_100005FB4(&qword_1001588D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

            uint64_t v223 = v77;
            uint64_t v28 = *(void *)(v77 + 16);
            uint64_t v80 = *(void *)(v77 + 24);
            unint64_t v30 = (int64_t)v79;
            v241(v79, v240, v50);
            swift_unknownObjectRetain_n(v28, 3LL);
            swift_bridgeObjectRetain_n(v27, 2LL);
            unint64_t v81 = swift_bridgeObjectRetain_n(v20, 2LL);
            uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
            int64_t v83 = static os_log_type_t.default.getter(v82);
            if (os_log_type_enabled(v82, v83))
            {
              uint64_t v84 = swift_slowAlloc(32LL, -1LL);
              v244 = v80;
              uint64_t v85 = v84;
              uint64_t v86 = swift_slowAlloc(96LL, -1LL);
              v246 = v86;
              *(_DWORD *)uint64_t v85 = v220;
              swift_bridgeObjectRetain(v27);
              *(void *)(v85 + 4) = sub_1000058CC(v233, (unint64_t)v27, &v246);
              swift_bridgeObjectRelease_n(v27, 3LL);
              *(_WORD *)(v85 + 1sub_100006034(v0 + 2) = 2080;
              swift_bridgeObjectRetain(v20);
              *(void *)(v85 + 14) = sub_1000058CC(v234, (unint64_t)v20, &v246);
              swift_bridgeObjectRelease_n(v20, 3LL);
              *(_WORD *)(v85 + 2sub_100006034(v0 + 2) = 2080;
              ObjectType = swift_getObjectType(v28);
              uint64_t v88 = sub_1000CD2A4(ObjectType);
              unint64_t v90 = v89;
              *(void *)(v85 + 24) = sub_1000058CC(v88, v89, &v246);
              swift_unknownObjectRelease_n(v28, 2LL);
              swift_bridgeObjectRelease(v90);
              _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "State refresh (id: %s, reason: %s): Notifying %s of state update",  (uint8_t *)v85,  0x20u);
              swift_arrayDestroy(v86, 3LL, v215);
              swift_slowDealloc(v86, -1LL, -1LL);
              unint64_t v91 = v85;
              uint64_t v80 = v244;
              swift_slowDealloc(v91, -1LL, -1LL);
            }

            else
            {

              swift_unknownObjectRelease_n(v28, 2LL);
              swift_bridgeObjectRelease_n(v20, 2LL);
              swift_bridgeObjectRelease_n(v27, 2LL);
            }

            ((void (*)(int64_t, uint64_t))v239)(v30, v50);
            uint64_t v98 = swift_getObjectType(v28);
            int64_t v99 = *(uint64_t (**)(uint64_t, unint64_t))(v80 + 40);
            v235 = v98;
            int64_t v100 = v99(v98, v80);
            if (!v100)
            {
              unint64_t v21 = v214;
              v241((char *)v214, v240, v50);
              swift_bridgeObjectRetain_n(v27, 2LL);
              swift_bridgeObjectRetain_n(v20, 2LL);
              uint64_t v124 = swift_unknownObjectRetain_n(v28, 2LL);
              uint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
              char v126 = static os_log_type_t.default.getter(v125);
              if (os_log_type_enabled(v125, v126))
              {
                Swift::String v127 = swift_slowAlloc(32LL, -1LL);
                uint64_t v128 = swift_slowAlloc(96LL, -1LL);
                v246 = v128;
                *(_DWORD *)Swift::String v127 = v220;
                swift_bridgeObjectRetain(v238);
                *(void *)(v127 + 4) = sub_1000058CC(v233, (unint64_t)v238, &v246);
                swift_bridgeObjectRelease_n(v238, 3LL);
                *(_WORD *)(v127 + 1sub_100006034(v0 + 2) = 2080;
                swift_bridgeObjectRetain(v20);
                *(void *)(v127 + 14) = sub_1000058CC(v234, (unint64_t)v20, &v246);
                swift_bridgeObjectRelease_n(v20, 3LL);
                *(_WORD *)(v127 + 2sub_100006034(v0 + 2) = 2080;
                Swift::String v129 = sub_1000CD2A4(v235);
                uint64_t v131 = v130;
                *(void *)(v127 + 24) = sub_1000058CC(v129, v130, &v246);
                swift_unknownObjectRelease_n(v28, 2LL);
                swift_bridgeObjectRelease(v131);
                _os_log_impl( (void *)&_mh_execute_header,  v125,  v126,  "State refresh (id: %s, reason: %s): %s did not update state",  (uint8_t *)v127,  0x20u);
                swift_arrayDestroy(v128, 3LL, (char *)&type metadata for Any + 8);
                unint64_t v132 = v128;
                uint64_t v27 = v238;
                swift_slowDealloc(v132, -1LL, -1LL);
                swift_slowDealloc(v127, -1LL, -1LL);
                swift_unknownObjectRelease(v28);
                swift_release(v223);
              }

              else
              {

                swift_bridgeObjectRelease_n(v20, 2LL);
                swift_bridgeObjectRelease_n(v27, 2LL);
                swift_release(v223);
                swift_unknownObjectRelease_n(v28, 3LL);
              }

              ((void (*)(uint64_t *, uint64_t))v239)(v21, v50);
              goto LABEL_91;
            }

            uint64_t v101 = v100;
            uint64_t v102 = v221;
            v241(v221, v240, v50);
            swift_bridgeObjectRetain_n(v27, 2LL);
            swift_bridgeObjectRetain_n(v20, 2LL);
            swift_unknownObjectRetain_n(v28, 2LL);
            swift_bridgeObjectRetain(v101);
            uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
            uint64_t v105 = static os_log_type_t.default.getter(v104);
            uint64_t v106 = os_log_type_enabled(v104, (os_log_type_t)v105);
            v242 = v28;
            if (v106)
            {
              LODWORD(v237) = v105;
              v243 = v104;
              v244 = v80;
              uint64_t v107 = v28;
              uint64_t v108 = swift_slowAlloc(42LL, -1LL);
              uint64_t v232 = swift_slowAlloc(128LL, -1LL);
              v248 = v232;
              *(_DWORD *)uint64_t v108 = v229;
              swift_bridgeObjectRetain(v27);
              v246 = sub_1000058CC(v233, (unint64_t)v27, &v248);
              uint64_t v109 = v217;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v217, v108 + 4, v108 + 12);
              swift_bridgeObjectRelease_n(v27, 3LL);
              *(_WORD *)(v108 + 1sub_100006034(v0 + 2) = 2080;
              swift_bridgeObjectRetain(v20);
              v246 = sub_1000058CC(v234, (unint64_t)v20, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v109, v108 + 14, v108 + 22);
              swift_bridgeObjectRelease_n(v20, 3LL);
              *(_WORD *)(v108 + 2sub_100006034(v0 + 2) = 2080;
              uint64_t v110 = sub_1000CD2A4(v235);
              unint64_t v112 = v111;
              v246 = sub_1000058CC(v110, v111, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v109, v108 + 24, v108 + 32);
              swift_unknownObjectRelease_n(v107, 2LL);
              swift_bridgeObjectRelease(v112);
              *(_WORD *)(v108 + 3sub_100006034(v0 + 2) = 2080;
              uint64_t v113 = *(void *)(v101 + 16);
              if (v113)
              {
                v245 = _swiftEmptyArrayStorage;
                sub_10000CC84(0, v113, 0);
                uint64_t v114 = v245;
                uint64_t v115 = (void **)(v101 + 40);
                do
                {
                  uint64_t v116 = (uint64_t)*(v115 - 1);
                  uint64_t v117 = *v115;
                  v246 = 538976288LL;
                  v247 = 0xE400000000000000LL;
                  swift_bridgeObjectRetain(v117);
                  v118._countAndFlagsBits = v116;
                  v118._uint64_t object = v117;
                  String.append(_:)(v118);
                  swift_bridgeObjectRelease(v117);
                  Swift::Int v120 = v246;
                  Swift::String v119 = v247;
                  v245 = v114;
                  uint64_t v122 = v114[2];
                  char v121 = v114[3];
                  if (v122 >= v121 >> 1)
                  {
                    sub_10000CC84(v121 > 1, v122 + 1, 1);
                    uint64_t v114 = v245;
                  }

                  v115 += 2;
                  v114[2] = v122 + 1;
                  unint64_t v123 = &v114[2 * v122];
                  v123[4] = v120;
                  v123[5] = v119;
                  --v113;
                }

                while (v113);
                unint64_t v50 = v230;
                uint64_t v102 = v221;
              }

              else
              {
                uint64_t v114 = _swiftEmptyArrayStorage;
              }

              v246 = (uint64_t)v114;
              uint64_t v27 = (char *)(v108 + 34);
              uint64_t v134 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
              uint64_t v135 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
              int64_t v136 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v134, v135);
              __int128 v138 = v137;
              swift_bridgeObjectRelease(v114);
              v246 = sub_1000058CC(v136, v138, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v217, v108 + 34, v108 + 42);
              swift_bridgeObjectRelease_n(v101, 2LL);
              swift_bridgeObjectRelease(v138);
              uint64_t v139 = v243;
              _os_log_impl( (void *)&_mh_execute_header,  v243,  (os_log_type_t)v237,  "State refresh (id: %s, reason: %s): %s updated state:\n%s",  (uint8_t *)v108,  0x2Au);
              int64_t v140 = v232;
              swift_arrayDestroy(v232, 4LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v140, -1LL, -1LL);
              swift_slowDealloc(v108, -1LL, -1LL);

              ((void (*)(char *, uint64_t))v239)(v102, v50);
              uint64_t v20 = v216;
              uint64_t v28 = v242;
              uint64_t v80 = v244;
            }

            else
            {

              swift_bridgeObjectRelease_n(v101, 2LL);
              swift_unknownObjectRelease_n(v28, 2LL);
              swift_bridgeObjectRelease_n(v20, 2LL);
              swift_bridgeObjectRelease_n(v27, 2LL);
              ((void (*)(char *, uint64_t))v239)(v102, v50);
            }

            unint64_t v141 = (*(uint64_t (**)(uint64_t, unint64_t))(v80 + 16))(v235, v80);
            unsigned int v142 = v141;
            uint64_t v143 = *(void *)(v141 + 16);
            unint64_t v21 = (uint64_t *)v218;
            if (v143)
            {
              v246 = (uint64_t)_swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v143);
              unint64_t v144 = 0LL;
              do
              {
                uint64_t v145 = v144 + 1;
                uint64_t v146 = v142 + 16 * v144;
                unint64_t v147 = swift_allocObject(v21, 32LL, 7LL);
                BOOL v148 = *(_OWORD *)(v146 + 32);
                *(_OWORD *)(v147 + 16) = v148;
                char v149 = swift_unknownObjectRetain(v148);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v149);
                uint64_t v27 = *(char **)(v246 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
                __int128 v150 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v147);
                specialized ContiguousArray._endMutation()(v150);
                unint64_t v144 = v145;
              }

              while (v143 != v145);
              unint64_t v30 = v246;
              swift_bridgeObjectRelease(v142);
            }

            else
            {
              swift_bridgeObjectRelease(v141);
              unint64_t v30 = (int64_t)_swiftEmptyArrayStorage;
            }

            uint64_t v151 = v219;
            if (!((unint64_t)v30 >> 62))
            {
              uint64_t v152 = *(os_log_s **)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              if (v152) {
                goto LABEL_62;
              }
              goto LABEL_90;
            }

            if (v30 < 0) {
              uint64_t v176 = v30;
            }
            else {
              uint64_t v176 = v30 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v30);
            uint64_t v152 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v176);
            swift_bridgeObjectRelease(v30);
            if (!v152)
            {
LABEL_90:
              swift_unknownObjectRelease(v28);
              swift_bridgeObjectRelease(v30);
              swift_release(v223);
              uint64_t v27 = v238;
              goto LABEL_91;
            }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  uint64_t v33 = v31[2];
  if (v33 <= 1)
  {
    if (v33 == 1)
    {
      unint64_t v55 = v31;
      unint64_t v56 = v31[4];
      unint64_t v57 = v31[5];
      uint64_t v58 = v55[6];
      uint64_t v59 = v55[7];
      unint64_t v60 = v55[8];
      unint64_t v61 = v55[9];
      unint64_t v62 = v55[10];
      uint64_t v63 = v55[11];
      uint64_t v82 = v55[12];
      uint64_t v85 = *((_BYTE *)v55 + 104);
      sub_1000516E4(v56, v57, v58, v59, v60, v61, v62, v63, v82, v85);
      swift_bridgeObjectRelease(v55);
      uint64_t v64 = sub_100012624();
      uint64_t v35 = swift_allocError(&type metadata for KMError, v64, 0LL, 0LL);
      *(void *)uint64_t v66 = v56;
      *(void *)(v66 + 8) = v57;
      *(void *)(v66 + 16) = v58;
      *(void *)(v66 + 24) = v59;
      *(void *)(v66 + 3sub_100006034(v0 + 2) = v60;
      *(void *)(v66 + 40) = v61;
      *(void *)(v66 + 48) = v62;
      *(void *)(v66 + 56) = v63;
      *(void *)(v66 + 64) = v82;
      unint64_t v67 = v85;
    }

    else
    {
      swift_bridgeObjectRelease(v31);
      unint64_t v65 = sub_100012624();
      uint64_t v35 = swift_allocError(&type metadata for KMError, v65, 0LL, 0LL);
      *(void *)uint64_t v66 = 0xD000000000000040LL;
      *(void *)(v66 + 8) = 0x800000010012C570LL;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v66 + 48) = 0u;
      *(void *)(v66 + 64) = 0LL;
      unint64_t v67 = 50;
    }

    *(_BYTE *)(v66 + 7sub_100006034(v0 + 2) = v67;
  }

  else
  {
    uint64_t v34 = sub_100012624();
    uint64_t v35 = swift_allocError(&type metadata for KMError, v34, 0LL, 0LL);
    *(void *)unint64_t v36 = v31;
    *(_OWORD *)(v36 + 8) = 0u;
    *(_OWORD *)(v36 + 24) = 0u;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_BYTE *)(v36 + 7sub_100006034(v0 + 2) = 0;
  }

  swift_willThrow(v35);
  return v54;
}

  __break(1u);
  return result;
}

  uint64_t v32 = v30[2];
  if (v32 <= 1)
  {
    if (v32 == 1)
    {
      Swift::String v54 = v30;
      unint64_t v55 = v30[4];
      unint64_t v56 = v30[5];
      unint64_t v57 = v54[6];
      uint64_t v58 = v54[7];
      uint64_t v59 = v54[8];
      unint64_t v60 = v54[9];
      unint64_t v61 = v54[10];
      unint64_t v62 = v54[11];
      uint64_t v79 = v54[12];
      uint64_t v82 = *((_BYTE *)v54 + 104);
      sub_1000516E4(v55, v56, v57, v58, v59, v60, v61, v62, v79, v82);
      swift_bridgeObjectRelease(v54);
      uint64_t v63 = sub_100012624();
      uint64_t v34 = swift_allocError(&type metadata for KMError, v63, 0LL, 0LL);
      *(void *)unint64_t v65 = v55;
      *(void *)(v65 + 8) = v56;
      *(void *)(v65 + 16) = v57;
      *(void *)(v65 + 24) = v58;
      *(void *)(v65 + 3sub_100006034(v0 + 2) = v59;
      *(void *)(v65 + 40) = v60;
      *(void *)(v65 + 48) = v61;
      *(void *)(v65 + 56) = v62;
      *(void *)(v65 + 64) = v79;
      uint64_t v66 = v82;
    }

    else
    {
      swift_bridgeObjectRelease(v30);
      uint64_t v64 = sub_100012624();
      uint64_t v34 = swift_allocError(&type metadata for KMError, v64, 0LL, 0LL);
      *(void *)unint64_t v65 = 0xD000000000000040LL;
      *(void *)(v65 + 8) = 0x800000010012C570LL;
      *(_OWORD *)(v65 + 16) = 0u;
      *(_OWORD *)(v65 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v65 + 48) = 0u;
      *(void *)(v65 + 64) = 0LL;
      uint64_t v66 = 50;
    }

    *(_BYTE *)(v65 + 7sub_100006034(v0 + 2) = v66;
  }

  else
  {
    uint64_t v33 = sub_100012624();
    uint64_t v34 = swift_allocError(&type metadata for KMError, v33, 0LL, 0LL);
    *(void *)uint64_t v35 = v30;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_BYTE *)(v35 + 7sub_100006034(v0 + 2) = 0;
  }

  return (void *)swift_willThrow(v34);
}

  __break(1u);
}

uint64_t sub_10002A8C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_1001588D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
    goto LABEL_23;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v20 = v2;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v21 = (unint64_t)(v6 + 63) >> 6;
  swift_retain_n(v3, 2LL);
  if (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    goto LABEL_20;
  }

  if (v21 > 1)
  {
    unint64_t v10 = *(void *)(v3 + 64);
    uint64_t i = 1LL;
    if (v10) {
      goto LABEL_19;
    }
    uint64_t i = 2LL;
    if (v21 > 2)
    {
      unint64_t v10 = *(void *)(v3 + 72);
      if (v10) {
        goto LABEL_19;
      }
      uint64_t v12 = 3LL;
      if (v21 > 3)
      {
        unint64_t v10 = *(void *)(v3 + 80);
        for (uint64_t i = 3LL; !v10; ++v12)
        {
          uint64_t i = v12 + 1;
          if (__OFADD__(v12, 1LL))
          {
            __break(1u);
            JUMPOUT(0x10002AC50LL);
          }

          if (i >= v21) {
            goto LABEL_21;
          }
          unint64_t v10 = *(void *)(v3 + 56 + 8 * i);
        }

void (*sub_10002AC68(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  unint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100006114(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *unint64_t v10 = v19;
        return sub_10002AD94;
      }

void sub_10002AD94(uint64_t **a1)
{
  int64_t v1 = *a1;
  sub_10002B0EC(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_10002ADD0(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *int64_t v1 = 0x8000000000000000LL;
  return sub_10002ADF0;
}

uint64_t sub_10002ADF0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

Swift::Int sub_10002ADFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001588E0);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }

    if (__OFADD__(v15++, 1LL)) {
      goto LABEL_43;
    }
    if (v15 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v15);
    if (!v25)
    {
      int64_t v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        uint64_t v3 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_37;
      }

      unint64_t v25 = *(void *)(v37 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          int64_t v15 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            break;
          }
          if (v15 >= v12) {
            goto LABEL_34;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v15);
          ++v26;
          if (v25) {
            goto LABEL_23;
          }
        }

LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      ++v15;
    }

  unint64_t v65 = *(void *)(v4 - 128);
  if (v65) {
    vm_deallocate(mach_task_self_, v65, *(unsigned int *)(v4 - 132));
  }
  if (v5) {
LABEL_45:
  }
    mach_port_deallocate(mach_task_self_, v5);
  return v8;
}

        unint64_t v141 = v132 + 1;
        if (__OFADD__(v132, 1LL)) {
          goto LABEL_145;
        }
        if (v141 >= v423) {
          goto LABEL_90;
        }
        unsigned int v142 = v422[v141];
        ++v132;
        if (!v142)
        {
          unint64_t v132 = v141 + 1;
          if (v141 + 1 >= v423) {
            goto LABEL_90;
          }
          unsigned int v142 = v422[v132];
          if (!v142)
          {
            unint64_t v132 = v141 + 2;
            if (v141 + 2 >= v423) {
              goto LABEL_90;
            }
            unsigned int v142 = v422[v132];
            if (!v142)
            {
              unint64_t v132 = v141 + 3;
              if (v141 + 3 >= v423) {
                goto LABEL_90;
              }
              unsigned int v142 = v422[v132];
              if (!v142)
              {
                uint64_t v143 = v141 + 4;
                if (v143 >= v423)
                {
LABEL_90:
                  swift_release(v430);
                  v437 = swift_allocObject(&unk_10014B300, 24LL, 7LL);
                  *(void *)(v437 + 16) = _swiftEmptyArrayStorage;
                  v242 = (*(uint64_t (**)(void))(*(void *)v434 + 312LL))();
                  v244 = v242;
                  if ((unint64_t)v242 >> 62)
                  {
                    if (v242 >= 0) {
                      v242 &= 0xFFFFFFFFFFFFFF8uLL;
                    }
                    v245 = _CocoaArrayWrapper.endIndex.getter(v242);
                  }

                  else
                  {
                    v245 = *(void *)((v242 & 0xFFFFFFFFFFFFF8LL) + 0x10);
                  }

                  v246 = v438;
                  if (!v245)
                  {
                    uint64_t v75 = 0LL;
                    goto LABEL_117;
                  }

                  if (v245 < 1)
                  {
                    __break(1u);
LABEL_155:
                    uint64_t v30 = sub_10000C82C(0LL, v30[2] + 1LL, 1, v30);
LABEL_121:
                    v298 = v30[2];
                    v297 = v30[3];
                    if (v298 >= v297 >> 1) {
                      uint64_t v30 = sub_10000C82C((void *)(v297 > 1), v298 + 1, 1, v30);
                    }
                    v30[2] = v298 + 1;
                    v299 = &v30[2 * v298];
                    v299[4] = 0xD000000000000019LL;
                    v299[5] = 0x8000000100127D60LL;
                  }

                  else
                  {
                    v247 = 0LL;
                    uint64_t v75 = 0LL;
                    v430 = v244 & 0xC000000000000001LL;
                    *(void *)&v243 = 136315394LL;
                    v428 = v243;
                    v426 = (char *)0x8000000100127D80LL;
                    v427 = (uint64_t)&type metadata for Any + 8;
                    v425 = (char *)0x8000000100127DA0LL;
                    v433 = (char *)v244;
                    v431 = (char *)v245;
                    do
                    {
                      if (v430)
                      {
                        v248 = specialized _ArrayBuffer._getElementSlowPath(_:)(v247, v244);
                      }

                      else
                      {
                        v248 = *(void *)(v244 + 8LL * (void)v247 + 32);
                        swift_retain(v248);
                      }

                      v249 = *(_OWORD *)(v248 + 32);
                      v442 = *(_OWORD *)(v248 + 16);
                      v443 = v249;
                      LOBYTE(v444) = *(_BYTE *)(v248 + 48);
                      sub_100067618(&v442);
                      v250 = sub_10005FB5C((uint64_t)&v442);
                      if (v75)
                      {
                        v436 = 0LL;
                        sub_10006769C(&v442);
                        v251 = sub_1000D32BC();
                        v252 = v414;
                        (*(void (**)(unint64_t, uint64_t, uint64_t))(v246 + 16))(v414, v251, v74);
                        swift_retain(v248);
                        swift_errorRetain(v75);
                        swift_retain(v248);
                        v253 = swift_errorRetain(v75);
                        v254 = (os_log_s *)Logger.logObject.getter(v253);
                        v255 = static os_log_type_t.error.getter(v254);
                        if (os_log_type_enabled(v254, v255))
                        {
                          v256 = swift_slowAlloc(22LL, -1LL);
                          v429 = swift_slowAlloc(64LL, -1LL);
                          v445 = v429;
                          *(_DWORD *)v256 = v428;
                          *(void *)&v440 = v248;
                          updated = type metadata accessor for ApprovalStateUpdateRequest(0LL);
                          v258 = sub_100012860( &qword_10015A938,  type metadata accessor for ApprovalStateUpdateRequest,  (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
                          v259 = updated;
                          v246 = v438;
                          v260 = dispatch thunk of CustomStringConvertible.description.getter(v259, v258);
                          v262 = v261;
                          *(void *)(v256 + 4) = sub_1000058CC(v260, v261, &v445);
                          swift_release_n(v248, 2LL);
                          swift_bridgeObjectRelease(v262);
                          *(_WORD *)(v256 + 1sub_100006034(v0 + 2) = 2080;
                          *(void *)&v440 = v75;
                          swift_errorRetain(v75);
                          v263 = sub_100005FB4(&qword_10015AB20);
                          v264 = String.init<A>(describing:)(&v440, v263);
                          v266 = v265;
                          *(void *)(v256 + 14) = sub_1000058CC(v264, v265, &v445);
                          swift_bridgeObjectRelease(v266);
                          swift_errorRelease(v75);
                          swift_errorRelease(v75);
                          _os_log_impl( (void *)&_mh_execute_header,  v254,  v255,  "Failed to handle queued request %s: %s",  (uint8_t *)v256,  0x16u);
                          v267 = v429;
                          swift_arrayDestroy(v429, 2LL, v427);
                          v268 = v267;
                          v269 = v435;
                          swift_slowDealloc(v268, -1LL, -1LL);
                          v270 = v256;
                          uint64_t v74 = v269;
                          swift_slowDealloc(v270, -1LL, -1LL);

                          (*(void (**)(unint64_t, uint64_t))(v246 + 8))(v252, v269);
                        }

                        else
                        {
                          swift_release_n(v248, 2LL);
                          swift_errorRelease(v75);
                          swift_errorRelease(v75);

                          (*(void (**)(unint64_t, uint64_t))(v246 + 8))(v252, v74);
                        }

                        v283 = (uint64_t)v75;
                      }

                      else
                      {
                        v271 = v250;
                        sub_10006769C(&v442);
                        if ((v271 & 1) != 0)
                        {
                          v272 = v74;
                          v445 = 0LL;
                          v446 = 0xE000000000000000LL;
                          _StringGuts.grow(_:)(61LL);
                          v273._countAndFlagsBits = 0xD000000000000017LL;
                          v273._uint64_t object = v426;
                          String.append(_:)(v273);
                          *(void *)&v440 = v248;
                          v274 = type metadata accessor for ApprovalStateUpdateRequest(0LL);
                          v275 = sub_100012860( &qword_10015A938,  type metadata accessor for ApprovalStateUpdateRequest,  (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
                          v276._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( v274,  v275);
                          uint64_t object = v276._object;
                          String.append(_:)(v276);
                          swift_bridgeObjectRelease(object);
                          v278._countAndFlagsBits = 0xD000000000000024LL;
                          v278._uint64_t object = v425;
                          String.append(_:)(v278);
                          v279 = v445;
                          v280 = v446;
                          if ((swift_isUniquelyReferenced_nonNull_native(v424) & 1) == 0) {
                            v424 = sub_10000C82C(0LL, v424[2] + 1LL, 1, v424);
                          }
                          v282 = v424[2];
                          v281 = v424[3];
                          if (v282 >= v281 >> 1) {
                            v424 = sub_10000C82C((void *)(v281 > 1), v282 + 1, 1, v424);
                          }
                          v283 = 0LL;
                          v284 = v424;
                          v424[2] = v282 + 1;
                          v285 = &v284[2 * v282];
                          v285[4] = v279;
                          v285[5] = v280;
                          v436 = 0LL;
                          v246 = v438;
                          uint64_t v74 = v272;
                        }

                        else
                        {
                          v283 = 0LL;
                          v436 = 0LL;
                        }
                      }

                      v286 = v437;
                      v287 = *(void **)(v437 + 16);
                      swift_retain(v248);
                      sub_100096738(v283, v75 != 0LL);
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v287);
                      *(void *)(v286 + 16) = v287;
                      v289 = v74;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        v287 = sub_100096504(0LL, v287[2] + 1LL, 1, v287);
                        *(void *)(v437 + 16) = v287;
                      }

                      v291 = v287[2];
                      v290 = v287[3];
                      if (v291 >= v290 >> 1) {
                        v287 = sub_100096504((void *)(v290 > 1), v291 + 1, 1, v287);
                      }
                      ++v247;
                      v287[2] = v291 + 1;
                      v292 = &v287[3 * v291];
                      v292[4] = v248;
                      v292[5] = v283;
                      *((_BYTE *)v292 + 48) = v75 != 0LL;
                      *(void *)(v437 + 16) = v287;
                      sub_100086120(v283, v75 != 0LL);
                      swift_release(v248);
                      uint64_t v74 = v289;
                      uint64_t v75 = v436;
                      v244 = (unint64_t)v433;
                    }

                    while (v431 != v247);
LABEL_117:
                    swift_bridgeObjectRelease(v244);
                    unint64_t v11 = (unint64_t)v449;
                    v445 = (uint64_t)v449;
                    v446 = v450;
                    v293 = v416;
                    *(void *)&v440 = v416;
                    *((void *)&v440 + 1) = v415;
                    v294 = sub_100096744();
                    v295 = dispatch thunk of static Equatable.== infix(_:_:)( &v445,  &v440,  &type metadata for ApprovalDB,  v294);
                    swift_bridgeObjectRelease(v293);
                    if ((v295 & 1) != 0)
                    {
                      uint64_t v30 = v424;
                      uint64_t v76 = v421;
                      goto LABEL_124;
                    }

                    uint64_t v30 = v424;
                    swift_bridgeObjectRetain(v424);
                    v296 = sub_1000D26D0();
                    swift_bridgeObjectRelease(v30);
                    uint64_t v76 = v421;
                    if (v296)
                    {
                      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) != 0) {
                        goto LABEL_121;
                      }
                      goto LABEL_155;
                    }
                  }

  __break(1u);
  return result;
}

  __break(1u);
}

    if (*(void *)(a1 + 16)) {
      goto LABEL_43;
    }
LABEL_50:
    unint64_t v77 = 0u;
    os_log_type_t v78 = 0u;
LABEL_51:
    uint64_t v59 = sub_100012824((uint64_t)&v77, &qword_100157FF8);
    goto LABEL_52;
  }

  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for String);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_50;
  }
LABEL_43:
  unint64_t v55 = *v42;
  unint64_t v56 = v42[1];
  swift_bridgeObjectRetain(v56);
  unint64_t v57 = sub_100006114(v55, v56);
  if ((v58 & 1) != 0)
  {
    sub_100006054(*(void *)(a1 + 56) + 32 * v57, (uint64_t)&v77);
  }

  else
  {
    unint64_t v77 = 0u;
    os_log_type_t v78 = 0u;
  }

  swift_bridgeObjectRelease(v56);
  if (!*((void *)&v78 + 1)) {
    goto LABEL_51;
  }
  uint64_t v59 = swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if (!(_DWORD)v59)
  {
LABEL_52:
    unint64_t v60 = 0LL;
    unint64_t v61 = 0LL;
    goto LABEL_53;
  }

  unint64_t v60 = v75;
  unint64_t v61 = v76;
LABEL_53:
  unint64_t v62 = static os_log_type_t.error.getter(v59);
  uint64_t v63 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v64 = swift_allocObject(v63, 72LL, 7LL);
  *(_OWORD *)(v64 + 16) = xmmword_10010F110;
  *(void *)(v64 + 56) = &type metadata for String;
  *(void *)(v64 + 64) = sub_100026B64();
  unint64_t v65 = 0x3E656E6F6E3CLL;
  if (v61) {
    unint64_t v65 = v60;
  }
  uint64_t v66 = 0xE600000000000000LL;
  if (v61) {
    uint64_t v66 = v61;
  }
  *(void *)(v64 + 3sub_100006034(v0 + 2) = v65;
  *(void *)(v64 + 40) = v66;
  unint64_t v67 = sub_100026BA8();
  unint64_t v68 = (void *)static OS_os_log.default.getter(v67);
  os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v68, "Unrecognized identifier: %s", v74);
  swift_bridgeObjectRelease(v64);

  sub_10002193C(v32, v33);
  return 0LL;
}

uint64_t *sub_10002B0EC(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL, &type metadata for String);
      sub_10002B34C(a4, *a3);
    }

    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }

  uint64_t v9 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    *(void *)(v9[7] + 8 * a4) = v8;
    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }

  v9[(a4 >> 6) + 8] |= 1LL << a4;
  uint64_t v10 = (void *)(v9[6] + 16 * a4);
  *uint64_t v10 = a5;
  v10[1] = a6;
  *(void *)(v9[7] + 8 * a4) = v8;
  uint64_t v11 = v9[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (!v12)
  {
    v9[2] = v13;
    swift_bridgeObjectRetain(a6);
    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }

  __break(1u);
  return result;
}

void *sub_10002B1B0()
{
  int64_t v1 = v0;
  sub_100005FB4(&qword_1001588E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    Swift::Int result = (void *)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    if (__OFADD__(v9++, 1LL)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    Swift::Int result = (void *)swift_bridgeObjectRetain(v20);
  }

  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_10002B34C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        int64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10002B520(Swift::String string)
{
  uint64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001469D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10002B568(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000125E0(result, a2);
  }
  return result;
}

unint64_t sub_10002B57C(Swift::String string)
{
  uint64_t object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100146A88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10002B5C4()
{
  unint64_t result = qword_100158890;
  if (!qword_100158890)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A6A0, &type metadata for CodeSigningHash);
    atomic_store(result, (unint64_t *)&qword_100158890);
  }

  return result;
}

BOOL sub_10002B608(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    sub_100026EE8(*((_BYTE *)a1 + 16));
    if ((v10 & 1) != 0)
    {
      uint64_t v12 = a1[3];
      unint64_t v11 = a1[4];
      uint64_t v14 = a2[3];
      unint64_t v13 = a2[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15) {
          return 1LL;
        }
      }

      else
      {
        uint64_t v18 = v12;
        unint64_t v19 = v11;
        if (v13 >> 60 != 15)
        {
          v17[0] = v14;
          v17[1] = v13;
          sub_1000125E0(v12, v11);
          sub_1000125E0(v12, v11);
          unint64_t v15 = sub_10002BFFC();
          char v16 = dispatch thunk of static Equatable.== infix(_:_:)(&v18, v17, &type metadata for CodeSigningHash, v15);
          sub_10001226C(v18, v19);
          sub_10002193C(v12, v11);
          return (v16 & 1) != 0;
        }

        sub_1000125E0(v12, v11);
        sub_1000125E0(v12, v11);
        sub_10001226C(v12, v11);
      }

      sub_10002B568(v14, v13);
      sub_10002193C(v12, v11);
      sub_10002193C(v14, v13);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10002B758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B7A0(uint64_t *a1)
{
  return sub_10002C040(a1) & 1;
}

unint64_t sub_10002B7B8()
{
  unint64_t result = qword_1001588A0;
  if (!qword_1001588A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FE44, &type metadata for ExceptionList.ExceptionMatch);
    atomic_store(result, (unint64_t *)&qword_1001588A0);
  }

  return result;
}

uint64_t sub_10002B7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return sub_10002193C(a5, a6);
  }

  return result;
}

unint64_t sub_10002B838()
{
  unint64_t result = qword_1001588A8;
  if (!qword_1001588A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FCCC, &type metadata for ExceptionList.ExceptionType);
    atomic_store(result, (unint64_t *)&qword_1001588A8);
  }

  return result;
}

unint64_t sub_10002B880()
{
  unint64_t result = qword_1001588B0;
  if (!qword_1001588B0)
  {
    uint64_t v1 = sub_100012010(&qword_1001588B8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001588B0);
  }

  return result;
}

unint64_t sub_10002B8D0()
{
  unint64_t result = qword_1001588C0;
  if (!qword_1001588C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FDA4, &type metadata for ExceptionList.ExceptionMatch.VersionSpec);
    atomic_store(result, (unint64_t *)&qword_1001588C0);
  }

  return result;
}

unint64_t sub_10002B918()
{
  unint64_t result = qword_1001588C8;
  if (!qword_1001588C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FE84, &type metadata for ExceptionList.ExceptionMatch);
    atomic_store(result, (unint64_t *)&qword_1001588C8);
  }

  return result;
}

ValueMetadata *type metadata accessor for Exceptions()
{
  return &type metadata for Exceptions;
}

uint64_t destroy for ExceptionList(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t _s10driverkitd13ExceptionListVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ExceptionList(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ExceptionList(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ExceptionList()
{
  return &type metadata for ExceptionList;
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10002BAA0 + 4 * byte_10010FCBB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002BAD4 + 4 * byte_10010FCB6[v4]))();
}

uint64_t sub_10002BAD4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BADC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002BAE4LL);
  }
  return result;
}

uint64_t sub_10002BAF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002BAF8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10002BAFC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BB04(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionType()
{
  return &type metadata for ExceptionList.ExceptionType;
}

uint64_t destroy for ExceptionList.ExceptionMatch(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  unint64_t v3 = a1[4];
  if (v3 >> 60 != 15) {
    return sub_10001226C(a1[3], v3);
  }
  return result;
}

uint64_t initializeWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = (_OWORD *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v4;
  }

  else
  {
    uint64_t v6 = *(void *)v4;
    sub_1000125E0(v6, v5);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 3sub_100006034(v0 + 2) = v5;
  }

  return a1;
}

uint64_t assignWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v9 = *v6;
      sub_1000125E0(*v6, v7);
      uint64_t v10 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
      sub_10001226C(v10, v11);
      return a1;
    }

    sub_10002BCA8(a1 + 24);
    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
    return a1;
  }

  uint64_t v8 = *v6;
  sub_1000125E0(*v6, v7);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
  return a1;
}

uint64_t sub_10002BCA8(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.ExtensionFilter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = (void *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = *v6;
      *(void *)(a1 + 3sub_100006034(v0 + 2) = v8;
      sub_10001226C(v9, v7);
      return a1;
    }

    sub_10002BCA8(a1 + 24);
  }

  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch()
{
  return &type metadata for ExceptionList.ExceptionMatch;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10002BEFC + 4 * byte_10010FCC5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10002BF30 + 4 * byte_10010FCC0[v4]))();
}

uint64_t sub_10002BF30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BF38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002BF40LL);
  }
  return result;
}

uint64_t sub_10002BF4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002BF54LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_10002BF58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BF60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch.VersionSpec()
{
  return &type metadata for ExceptionList.ExceptionMatch.VersionSpec;
}

void *sub_10002BF7C(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  sub_10002B568(v2, v3);
  return a1;
}

void *sub_10002BFBC(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  swift_bridgeObjectRelease(a1[1]);
  sub_10002193C(v2, v3);
  return a1;
}

unint64_t sub_10002BFFC()
{
  unint64_t result = qword_1001588D0;
  if (!qword_1001588D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A6E0, &type metadata for CodeSigningHash);
    atomic_store(result, (unint64_t *)&qword_1001588D0);
  }

  return result;
}

uint64_t sub_10002C040(uint64_t *a1)
{
  unint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3[1];
  if (v4 == *v3 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0LL) & 1;
  }
}

uint64_t sub_10002C094()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002C0B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002C0C8(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175258, 0LL);
}

uint64_t *sub_10002C0D8()
{
  if (qword_10015E420 != -1) {
    swift_once(&qword_10015E420, sub_10002C0C8);
  }
  return &qword_100175258;
}

uint64_t sub_10002C118(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175260, 1LL);
}

uint64_t *sub_10002C128()
{
  if (qword_10015E428 != -1) {
    swift_once(&qword_10015E428, sub_10002C118);
  }
  return &qword_100175260;
}

uint64_t sub_10002C168(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175268, 2LL);
}

uint64_t sub_10002C178(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175270, 3LL);
}

uint64_t sub_10002C188(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175278, 4LL);
}

uint64_t *sub_10002C198()
{
  if (qword_10015E440 != -1) {
    swift_once(&qword_10015E440, sub_10002C188);
  }
  return &qword_100175278;
}

uint64_t sub_10002C1D8(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175280, 5LL);
}

uint64_t *sub_10002C1E8()
{
  if (qword_10015E448 != -1) {
    swift_once(&qword_10015E448, sub_10002C1D8);
  }
  return &qword_100175280;
}

uint64_t sub_10002C228(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175288, 6LL);
}

uint64_t sub_10002C238(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175290, 7LL);
}

uint64_t sub_10002C248(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175298, 8LL);
}

uint64_t *sub_10002C258()
{
  if (qword_10015E460 != -1) {
    swift_once(&qword_10015E460, sub_10002C248);
  }
  return &qword_100175298;
}

uint64_t sub_10002C298(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752A0, 9LL);
}

uint64_t *sub_10002C2A8()
{
  if (qword_10015E468 != -1) {
    swift_once(&qword_10015E468, sub_10002C298);
  }
  return &qword_1001752A0;
}

uint64_t sub_10002C2E8(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752A8, 10LL);
}

uint64_t *sub_10002C2F8()
{
  if (qword_10015E470 != -1) {
    swift_once(&qword_10015E470, sub_10002C2E8);
  }
  return &qword_1001752A8;
}

uint64_t sub_10002C338(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752B0, 11LL);
}

uint64_t *sub_10002C348()
{
  if (qword_10015E478 != -1) {
    swift_once(&qword_10015E478, sub_10002C338);
  }
  return &qword_1001752B0;
}

uint64_t sub_10002C388(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752B8, 12LL);
}

uint64_t *sub_10002C398()
{
  if (qword_10015E480 != -1) {
    swift_once(&qword_10015E480, sub_10002C388);
  }
  return &qword_1001752B8;
}

uint64_t sub_10002C3D8(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752C0, 13LL);
}

uint64_t *sub_10002C3E8()
{
  if (qword_10015E488 != -1) {
    swift_once(&qword_10015E488, sub_10002C3D8);
  }
  return &qword_1001752C0;
}

uint64_t sub_10002C428(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752C8, 14LL);
}

uint64_t sub_10002C438(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752D0, 15LL);
}

uint64_t sub_10002C448(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752D8, 16LL);
}

uint64_t sub_10002C458(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752E0, 17LL);
}

uint64_t sub_10002C468(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752E8, 18LL);
}

uint64_t sub_10002C478(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752F0, 19LL);
}

uint64_t sub_10002C488(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_1001752F8, 20LL);
}

uint64_t sub_10002C498(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175300, 21LL);
}

uint64_t *sub_10002C4A8()
{
  if (qword_10015E4C8 != -1) {
    swift_once(&qword_10015E4C8, sub_10002C498);
  }
  return &qword_100175300;
}

uint64_t sub_10002C4E8(uint64_t a1)
{
  return sub_10002C4F8(a1, (uint64_t)&qword_100175308, 22LL);
}

uint64_t sub_10002C4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_100039E40();
  unint64_t v6 = sub_10003A640();
  return sub_1000D3840(a3, (uint64_t)&type metadata for RealizedInfo.Flags, v5, v6, a2);
}

uint64_t sub_10002C54C(uint64_t a1)
{
  if (qword_10015E420 != -1) {
    swift_once(&qword_10015E420, sub_10002C0C8);
  }
  if ((qword_100175258 & ~a1) != 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v2 = sub_10000C82C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    unint64_t v5 = &v2[2 * v4];
    v5[4] = 0x64696C6176LL;
    v5[5] = 0xE500000000000000LL;
  }

  if (qword_10015E428 != -1) {
    swift_once(&qword_10015E428, sub_10002C118);
  }
  if ((qword_100175260 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    int v8 = &v2[2 * v7];
    v8[4] = 0x65746164696C6176LL;
    v8[5] = 0xE900000000000064LL;
  }

  if (qword_10015E430 != -1) {
    swift_once(&qword_10015E430, sub_10002C168);
  }
  if ((qword_100175268 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    unint64_t v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000011LL;
    v11[5] = 0x8000000100122C40LL;
  }

  if (qword_10015E438 != -1) {
    swift_once(&qword_10015E438, sub_10002C178);
  }
  if ((qword_100175270 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000015LL;
    void v14[5] = 0x8000000100122C20LL;
  }

  if (qword_10015E440 != -1) {
    swift_once(&qword_10015E440, sub_10002C188);
  }
  if ((qword_100175278 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v16 = v2[2];
    unint64_t v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    uint64_t v17 = &v2[2 * v16];
    v17[4] = 0x69746E6568747561LL;
    v17[5] = 0xE900000000000063LL;
  }

  if (qword_10015E448 != -1) {
    swift_once(&qword_10015E448, sub_10002C1D8);
  }
  if ((qword_100175280 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v19 + 1;
    uint64_t v20 = (char *)&v2[2 * v19];
    strcpy(v20 + 32, "authenticated");
    *((_WORD *)v20 + 23) = -4864;
  }

  if (qword_10015E450 != -1) {
    swift_once(&qword_10015E450, sub_10002C228);
  }
  if ((qword_100175288 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v22 = v2[2];
    unint64_t v21 = v2[3];
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v21 > 1), v22 + 1, 1, v2);
    }
    v2[2] = v22 + 1;
    uint64_t v23 = &v2[2 * v22];
    v23[4] = 0xD000000000000015LL;
    v23[5] = 0x8000000100122C00LL;
  }

  if (qword_10015E458 != -1) {
    swift_once(&qword_10015E458, sub_10002C238);
  }
  if ((qword_100175290 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v25 = v2[2];
    unint64_t v24 = v2[3];
    if (v25 >= v24 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v24 > 1), v25 + 1, 1, v2);
    }
    v2[2] = v25 + 1;
    int64_t v26 = &v2[2 * v25];
    v26[4] = 0xD000000000000019LL;
    v26[5] = 0x8000000100122BE0LL;
  }

  if (qword_10015E460 != -1) {
    swift_once(&qword_10015E460, sub_10002C248);
  }
  if ((qword_100175298 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v28 = v2[2];
    unint64_t v27 = v2[3];
    if (v28 >= v27 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v27 > 1), v28 + 1, 1, v2);
    }
    v2[2] = v28 + 1;
    uint64_t v29 = &v2[2 * v28];
    v29[4] = 0x6465766F72707061LL;
    v29[5] = 0xE800000000000000LL;
  }

  if (qword_10015E468 != -1) {
    swift_once(&qword_10015E468, sub_10002C298);
  }
  if ((qword_1001752A0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v31 = v2[2];
    unint64_t v30 = v2[3];
    if (v31 >= v30 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v30 > 1), v31 + 1, 1, v2);
    }
    v2[2] = v31 + 1;
    unint64_t v32 = &v2[2 * v31];
    v32[4] = 0x6C61766F72707061LL;
    v32[5] = 0xEF64656B63656843LL;
  }

  if (qword_10015E470 != -1) {
    swift_once(&qword_10015E470, sub_10002C2E8);
  }
  if ((qword_1001752A8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v34 = v2[2];
    unint64_t v33 = v2[3];
    if (v34 >= v33 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v33 > 1), v34 + 1, 1, v2);
    }
    v2[2] = v34 + 1;
    uint64_t v35 = (char *)&v2[2 * v34];
    strcpy(v35 + 32, "inExcludeList");
    *((_WORD *)v35 + 23) = -4864;
  }

  if (qword_10015E478 != -1) {
    swift_once(&qword_10015E478, sub_10002C338);
  }
  if ((qword_1001752B0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v37 = v2[2];
    unint64_t v36 = v2[3];
    if (v37 >= v36 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v36 > 1), v37 + 1, 1, v2);
    }
    v2[2] = v37 + 1;
    char v38 = &v2[2 * v37];
    v38[4] = 0xD000000000000018LL;
    v38[5] = 0x8000000100122BC0LL;
  }

  if (qword_10015E480 != -1) {
    swift_once(&qword_10015E480, sub_10002C388);
  }
  if ((qword_1001752B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v40 = v2[2];
    unint64_t v39 = v2[3];
    if (v40 >= v39 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v39 > 1), v40 + 1, 1, v2);
    }
    v2[2] = v40 + 1;
    uint64_t v41 = &v2[2 * v40];
    v41[4] = 0xD00000000000001ELL;
    void v41[5] = 0x8000000100122BA0LL;
  }

  if (qword_10015E488 != -1) {
    swift_once(&qword_10015E488, sub_10002C3D8);
  }
  if ((qword_1001752C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v43 = v2[2];
    unint64_t v42 = v2[3];
    if (v43 >= v42 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v42 > 1), v43 + 1, 1, v2);
    }
    v2[2] = v43 + 1;
    uint64_t v44 = &v2[2 * v43];
    v44[4] = 0x656C707061LL;
    v44[5] = 0xE500000000000000LL;
  }

  if (qword_10015E490 != -1) {
    swift_once(&qword_10015E490, sub_10002C428);
  }
  if ((qword_1001752C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v46 = v2[2];
    unint64_t v45 = v2[3];
    if (v46 >= v45 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v45 > 1), v46 + 1, 1, v2);
    }
    v2[2] = v46 + 1;
    uint64_t v47 = (char *)&v2[2 * v46];
    strcpy(v47 + 32, "sipProtected");
    v47[45] = 0;
    *((_WORD *)v47 + 23) = -5120;
  }

  if (qword_10015E498 != -1) {
    swift_once(&qword_10015E498, sub_10002C438);
  }
  if ((qword_1001752D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v49 = v2[2];
    unint64_t v48 = v2[3];
    if (v49 >= v48 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v48 > 1), v49 + 1, 1, v2);
    }
    v2[2] = v49 + 1;
    unint64_t v50 = &v2[2 * v49];
    v50[4] = 0x64616F4C72657375LL;
    v50[5] = 0xEF6465776F6C6C41LL;
  }

  if (qword_10015E4A0 != -1) {
    swift_once(&qword_10015E4A0, sub_10002C448);
  }
  if ((qword_1001752D8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v52 = v2[2];
    unint64_t v51 = v2[3];
    if (v52 >= v51 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v51 > 1), v52 + 1, 1, v2);
    }
    v2[2] = v52 + 1;
    Swift::String v53 = &v2[2 * v52];
    v53[4] = 0xD000000000000014LL;
    v53[5] = 0x8000000100122B80LL;
  }

  if (qword_10015E4A8 != -1) {
    swift_once(&qword_10015E4A8, sub_10002C458);
  }
  if ((qword_1001752E0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v55 = v2[2];
    unint64_t v54 = v2[3];
    if (v55 >= v54 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v54 > 1), v55 + 1, 1, v2);
    }
    v2[2] = v55 + 1;
    unint64_t v56 = &v2[2 * v55];
    v56[4] = 0xD000000000000014LL;
    v56[5] = 0x8000000100122B60LL;
  }

  if (qword_10015E4B0 != -1) {
    swift_once(&qword_10015E4B0, sub_10002C468);
  }
  if ((qword_1001752E8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v58 = v2[2];
    unint64_t v57 = v2[3];
    if (v58 >= v57 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v57 > 1), v58 + 1, 1, v2);
    }
    v2[2] = v58 + 1;
    uint64_t v59 = &v2[2 * v58];
    v59[4] = 0xD000000000000013LL;
    v59[5] = 0x8000000100122B40LL;
  }

  if (qword_10015E4B8 != -1) {
    swift_once(&qword_10015E4B8, sub_10002C478);
  }
  if ((qword_1001752F0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v61 = v2[2];
    unint64_t v60 = v2[3];
    if (v61 >= v60 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v60 > 1), v61 + 1, 1, v2);
    }
    v2[2] = v61 + 1;
    unint64_t v62 = (char *)&v2[2 * v61];
    strcpy(v62 + 32, "appleAuxiliary");
    v62[47] = -18;
  }

  if (qword_10015E4C0 != -1) {
    swift_once(&qword_10015E4C0, sub_10002C488);
  }
  if ((qword_1001752F8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v64 = v2[2];
    unint64_t v63 = v2[3];
    if (v64 >= v63 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v63 > 1), v64 + 1, 1, v2);
    }
    v2[2] = v64 + 1;
    unint64_t v65 = &v2[2 * v64];
    v65[4] = 0xD000000000000011LL;
    v65[5] = 0x8000000100122B20LL;
  }

  if (qword_10015E4C8 != -1) {
    swift_once(&qword_10015E4C8, sub_10002C498);
  }
  if ((qword_100175300 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_10000C82C(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v67 = v2[2];
    unint64_t v66 = v2[3];
    if (v67 >= v66 >> 1) {
      uint64_t v2 = sub_10000C82C((void *)(v66 > 1), v67 + 1, 1, v2);
    }
    v2[2] = v67 + 1;
    unint64_t v68 = (char *)&v2[2 * v67];
    strcpy(v68 + 32, "appleExcluded");
    *((_WORD *)v68 + 23) = -4864;
  }

  uint64_t v69 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v70 = sub_100013F74();
  uint64_t v71 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v69, v70);
  swift_bridgeObjectRelease(v2);
  return v71;
}

void *sub_10002D580@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10002D58C()
{
  return sub_10002C54C(*v0);
}

void sub_10002D594(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_10002D59C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10002D5B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10002D5C4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10002D5D8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10002D608@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10002D634@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10002D658(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10002D66C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10002D680(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10002D694@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10002D6A8(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_10002D6BC(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_10002D6D0(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_10002D6E4()
{
  return *v0 == 0LL;
}

uint64_t sub_10002D6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10002D70C(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_10002D720@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10002D730(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10002D73C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10002D750@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000368A0(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10002D78C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (!a1 || (uint64_t v4 = (uint64_t *)sub_10008F52C(), !*(void *)(a1 + 16)))
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    goto LABEL_13;
  }

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_100006114(v6, v5);
  if ((v8 & 1) == 0)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v15);
  swift_bridgeObjectRelease(v5);
  if (!*((void *)&v16 + 1))
  {
LABEL_13:
    sub_100012824((uint64_t)&v15, &qword_100157FF8);
    uint64_t v11 = 0LL;
    unint64_t v12 = 0xF000000000000000LL;
    return sub_1000D2AF0(v11, v12, a2);
  }

  int v9 = swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = v14[0];
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v10) {
    unint64_t v12 = 0xF000000000000000LL;
  }
  else {
    unint64_t v12 = v14[1];
  }
  return sub_1000D2AF0(v11, v12, a2);
}

uint64_t sub_10002D880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || (uint64_t v4 = sub_10008F484(), !*(void *)(a3 + 16)))
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    goto LABEL_13;
  }

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_100006114(v6, v5);
  if ((v8 & 1) == 0)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }

  sub_100006054(*(void *)(a3 + 56) + 32 * v7, (uint64_t)&v15);
  swift_bridgeObjectRelease(v5);
  if (!*((void *)&v16 + 1))
  {
LABEL_13:
    sub_100012824((uint64_t)&v15, &qword_100157FF8);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    return sub_1000D4E50(v11, v12);
  }

  int v9 = swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = v14[0];
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v10) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = v14[1];
  }
  return sub_1000D4E50(v11, v12);
}

uint64_t sub_10002D96C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10002D99C(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 16, v4, 1LL, 0LL);
  *(void *)(v1 + 16) = a1;
  return result;
}

void *sub_10002D9D8(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10002DA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10001A148(v3, a1, &qword_1001588F0);
}

uint64_t sub_10002DA64(uint64_t a1)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1000395F4(a1, v3, &qword_1001588F0);
  return swift_endAccess(v5);
}

void *sub_10002DABC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10002DAF8()
{
  uint64_t v1 = v0[15];
  sub_100037394(v1, v0[16], v0[17]);
  return v1;
}

uint64_t sub_10002DB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[15];
  uint64_t v8 = v3[16];
  uint64_t v9 = v3[17];
  v3[15] = a1;
  v3[16] = a2;
  v3[17] = a3;
  sub_100037394(a1, a2, a3);
  sub_1000373A8(v7, v8, v9);
  return sub_1000373A8(a1, a2, a3);
}

void *sub_10002DBF0(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_10002DC2C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10002DC74(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10002DCC4(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10002DD08( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(void *)(v20 + 16) = 0LL;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 11sub_100006034(v0 + 2) = 0u;
  *(void *)(v20 + 128) = 0LL;
  *(void *)(v20 + 136) = 1LL;
  *(void *)(v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v20 + 24) = a1;
  sub_1000263D8(a2, v20 + 32, &qword_100157FF0);
  *(_BYTE *)(v20 + 7sub_100006034(v0 + 2) = a3;
  swift_beginAccess(v20 + 80, v29, 33LL, 0LL);
  sub_1000395F4(a4, v20 + 80, &qword_1001588F0);
  swift_endAccess(v29);
  swift_beginAccess(v20 + 120, v29, 1LL, 0LL);
  uint64_t v21 = *(void *)(v20 + 120);
  uint64_t v22 = *(void *)(v20 + 128);
  uint64_t v23 = *(void *)(v20 + 136);
  *(void *)(v20 + 120) = a5;
  *(void *)(v20 + 128) = a6;
  *(void *)(v20 + 136) = a7;
  sub_1000373A8(v21, v22, v23);
  sub_1000263D8(a8, v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA30);
  uint64_t v24 = v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v24 = a9;
  *(_BYTE *)(v24 + 8) = a10 & 1;
  sub_1000263D8(a11, v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_1001588F8);
  *(void *)(v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = a12;
  swift_beginAccess(v20 + 16, v28, 1LL, 0LL);
  *(void *)(v20 + 16) = a13;
  return v20;
}

BOOL sub_10002DEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  void v24[3];
  uint64_t v25;
  uint64_t v7 = (uint64_t *)sub_10008F4FC();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  BOOL v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)v3 + 312LL);
  uint64_t v11 = swift_bridgeObjectRetain(v9);
  v10(v24, a2, a3, v8, v9, v11);
  swift_bridgeObjectRelease(v9);
  if (!v25) {
    goto LABEL_10;
  }
  uint64_t v12 = sub_1000D4E04(v22, v23);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  uint64_t v14 = v12;
  __int128 v15 = sub_10008F484();
  __int128 v16 = *v15;
  uint64_t v17 = v15[1];
  unint64_t v18 = swift_bridgeObjectRetain(v17);
  v10(v24, a2, a3, v16, v17, v18);
  swift_bridgeObjectRelease(v17);
  if (!v25)
  {
LABEL_10:
    sub_100012824((uint64_t)v24, &qword_100157FF8);
    return 0LL;
  }

  unint64_t v19 = sub_1000D4E04(v22, v23);
  if ((v20 & 1) != 0) {
    return 0LL;
  }
  return v14 <= a1 && v19 >= a1;
}

uint64_t sub_10002E02C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v155 = v3 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v158 = v3;
  uint64_t v153 = v2 + 32;
  int64_t v156 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v160 = (v6 - 1) & v6;
      int64_t v161 = v7;
      unint64_t v10 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_24;
    }

    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_88;
    }
    if (v11 >= v156) {
      return swift_release(v158);
    }
    unint64_t v12 = *(void *)(v155 + 8 * v11);
    int64_t v13 = v7 + 1;
    if (!v12)
    {
      int64_t v13 = v7 + 2;
      if (v7 + 2 >= v156) {
        return swift_release(v158);
      }
      unint64_t v12 = *(void *)(v155 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v7 + 3;
        if (v7 + 3 >= v156) {
          return swift_release(v158);
        }
        unint64_t v12 = *(void *)(v155 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }

LABEL_38:
    swift_bridgeObjectRelease(v17);
    if ((a2 & 1) != 0)
    {
      swift_bridgeObjectRetain(v17);
      unint64_t v48 = sub_10002EBA8(&v163, v16, v17);
      if (*v47)
      {
        unint64_t v49 = v47;
        unint64_t v50 = (uint64_t *)sub_10008FA60();
        uint64_t v51 = *v50;
        uint64_t v52 = v50[1];
        uint64_t v170 = &type metadata for Bool;
        LOBYTE(v169) = 1;
        sub_100017790(&v169, &v167);
        swift_bridgeObjectRetain(v52);
        char v53 = swift_isUniquelyReferenced_nonNull_native(*v49);
        uint64_t v166 = (void *)*v49;
        void *v49 = 0x8000000000000000LL;
        sub_100017090(&v167, v51, v52, v53);
        uint64_t v54 = *v49;
        void *v49 = v166;
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v54);
      }

      ((void (*)(__int128 *, void))v48)(&v163, 0LL);
      swift_bridgeObjectRelease(v17);
    }

    swift_bridgeObjectRetain(v17);
    unint64_t v56 = sub_10002EBA8(&v163, v16, v17);
    if (*v55)
    {
      unint64_t v57 = v55;
      unint64_t v58 = (uint64_t *)sub_10008F5A4();
      uint64_t v59 = *v58;
      uint64_t v60 = v58[1];
      unint64_t v61 = *(uint64_t (**)(__n128))(*v159 + 296LL);
      __n128 v62 = swift_bridgeObjectRetain(v60);
      uint64_t v63 = v61(v62);
      uint64_t v170 = &type metadata for Data;
      *(void *)&__int128 v169 = v63;
      *((void *)&v169 + 1) = v64;
      sub_100017790(&v169, &v167);
      char v65 = swift_isUniquelyReferenced_nonNull_native(*v57);
      uint64_t v166 = (void *)*v57;
      *unint64_t v57 = 0x8000000000000000LL;
      sub_100017090(&v167, v59, v60, v65);
      uint64_t v66 = *v57;
      *unint64_t v57 = v166;
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v66);
    }

    ((void (*)(__int128 *, void))v56)(&v163, 0LL);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRetain(v17);
    unint64_t v68 = sub_10002EBA8(&v163, v16, v17);
    if (*v67)
    {
      uint64_t v69 = v67;
      unint64_t v70 = (uint64_t *)sub_10008FA3C();
      uint64_t v71 = *v70;
      uint64_t v72 = v70[1];
      unint64_t v73 = *(uint64_t (**)(__n128))(*(void *)v162 + 144LL);
      __n128 v74 = swift_bridgeObjectRetain(v72);
      uint64_t v75 = v73(v74);
      uint64_t v170 = &type metadata for String;
      *(void *)&__int128 v169 = v75;
      *((void *)&v169 + 1) = v76;
      sub_100017790(&v169, &v167);
      char v77 = swift_isUniquelyReferenced_nonNull_native(*v69);
      uint64_t v166 = (void *)*v69;
      *uint64_t v69 = 0x8000000000000000LL;
      sub_100017090(&v167, v71, v72, v77);
      uint64_t v78 = *v69;
      *uint64_t v69 = v166;
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(v78);
    }

    ((void (*)(__int128 *, void))v68)(&v163, 0LL);
    swift_bridgeObjectRelease(v17);
    uint64_t v79 = (uint64_t *)sub_10008FA6C();
    uint64_t v80 = v79;
    if (*(void *)(v18 + 16))
    {
      uint64_t v81 = *v79;
      uint64_t v82 = v79[1];
      swift_bridgeObjectRetain(v82);
      unint64_t v83 = sub_100006114(v81, v82);
      if ((v84 & 1) != 0)
      {
        sub_100006054(*(void *)(v18 + 56) + 32 * v83, (uint64_t)&v163);
      }

      else
      {
        __int128 v163 = 0u;
        __int128 v164 = 0u;
      }

      swift_bridgeObjectRelease(v82);
      if (*((void *)&v164 + 1))
      {
        sub_100012824((uint64_t)&v163, &qword_100157FF8);
        goto LABEL_56;
      }
    }

    else
    {
      __int128 v163 = 0u;
      __int128 v164 = 0u;
    }

    sub_100012824((uint64_t)&v163, &qword_100157FF8);
    swift_bridgeObjectRetain(v17);
    uint64_t v86 = sub_10002EBA8(&v163, v16, v17);
    if (*v85)
    {
      uint64_t v87 = v85;
      uint64_t v89 = *v80;
      uint64_t v88 = v80[1];
      swift_bridgeObjectRetain(v88);
      unint64_t v90 = (uint64_t *)sub_10008FA78();
      uint64_t v91 = *v90;
      uint64_t v92 = v90[1];
      uint64_t v170 = &type metadata for String;
      *(void *)&__int128 v169 = v91;
      *((void *)&v169 + 1) = v92;
      sub_100017790(&v169, &v167);
      swift_bridgeObjectRetain(v92);
      char v93 = swift_isUniquelyReferenced_nonNull_native(*v87);
      uint64_t v166 = (void *)*v87;
      *uint64_t v87 = 0x8000000000000000LL;
      sub_100017090(&v167, v89, v88, v93);
      uint64_t v94 = *v87;
      *uint64_t v87 = v166;
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v94);
    }

    ((void (*)(__int128 *, void))v86)(&v163, 0LL);
    swift_bridgeObjectRelease(v17);
LABEL_56:
    uint64_t v95 = (uint64_t *)sub_10008FA3C();
    unint64_t v96 = v95;
    if (*(void *)(v18 + 16))
    {
      uint64_t v98 = *v95;
      uint64_t v97 = v95[1];
      swift_bridgeObjectRetain(v97);
      unint64_t v99 = sub_100006114(v98, v97);
      if ((v100 & 1) != 0)
      {
        sub_100006054(*(void *)(v18 + 56) + 32 * v99, (uint64_t)&v163);
      }

      else
      {
        __int128 v163 = 0u;
        __int128 v164 = 0u;
      }

      swift_bridgeObjectRelease(v97);
    }

    else
    {
      __int128 v163 = 0u;
      __int128 v164 = 0u;
    }

    swift_bridgeObjectRelease(v18);
    uint64_t v101 = *((void *)&v164 + 1);
    sub_100012824((uint64_t)&v163, &qword_100157FF8);
    if (v101)
    {
      uint64_t v103 = sub_10002EBA8(&v163, v16, v17);
      if (*v102)
      {
        uint64_t v104 = v102;
        uint64_t v105 = (uint64_t *)sub_10008FA48();
        uint64_t v107 = *v105;
        uint64_t v106 = v105[1];
        uint64_t v108 = *(uint64_t (**)(__n128))(*(void *)v162 + 144LL);
        __n128 v109 = swift_bridgeObjectRetain(v106);
        uint64_t v110 = v108(v109);
        uint64_t v170 = &type metadata for String;
        *(void *)&__int128 v169 = v110;
        *((void *)&v169 + 1) = v111;
        sub_100017790(&v169, &v167);
        uint64_t v112 = swift_isUniquelyReferenced_nonNull_native(*v104);
        uint64_t v166 = (void *)*v104;
        uint64_t v113 = v166;
        *uint64_t v104 = 0x8000000000000000LL;
        unint64_t v115 = sub_100006114(v107, v106);
        uint64_t v116 = v113[2];
        BOOL v117 = (v114 & 1) == 0;
        uint64_t v118 = v116 + v117;
        if (__OFADD__(v116, v117))
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }

        char v119 = v114;
        if (v113[3] >= v118)
        {
          if ((v112 & 1) == 0) {
            sub_100017228();
          }
        }

        else
        {
          sub_100016D94(v118, v112);
          unint64_t v120 = sub_100006114(v107, v106);
          if ((v119 & 1) != (v121 & 1)) {
            goto LABEL_93;
          }
          unint64_t v115 = v120;
        }

        unint64_t v141 = v166;
        if ((v119 & 1) != 0)
        {
          uint64_t v8 = (void *)(v166[7] + 32 * v115);
          sub_100006034(v8);
          sub_100017790(&v167, v8);
        }

        else
        {
          v166[(v115 >> 6) + 8] |= 1LL << v115;
          unsigned int v142 = (uint64_t *)(v141[6] + 16 * v115);
          *unsigned int v142 = v107;
          v142[1] = v106;
          sub_100017790(&v167, (_OWORD *)(v141[7] + 32 * v115));
          uint64_t v143 = v141[2];
          BOOL v144 = __OFADD__(v143, 1LL);
          uint64_t v145 = v143 + 1;
          if (v144) {
            goto LABEL_90;
          }
          v141[2] = v145;
          swift_bridgeObjectRetain(v106);
        }

        uint64_t v9 = *v104;
        *uint64_t v104 = v141;
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(v9);
      }

      ((void (*)(__int128 *, void))v103)(&v163, 0LL);
    }

    else
    {
      unint64_t v123 = sub_10002EBA8(&v163, v16, v17);
      if (*v122)
      {
        uint64_t v124 = v122;
        uint64_t v126 = *v96;
        uint64_t v125 = v96[1];
        Swift::String v127 = *(uint64_t (**)(__n128))(*(void *)v162 + 144LL);
        __n128 v128 = swift_bridgeObjectRetain(v125);
        uint64_t v129 = v127(v128);
        uint64_t v170 = &type metadata for String;
        *(void *)&__int128 v169 = v129;
        *((void *)&v169 + 1) = v130;
        sub_100017790(&v169, &v167);
        uint64_t v131 = swift_isUniquelyReferenced_nonNull_native(*v124);
        uint64_t v166 = (void *)*v124;
        unint64_t v132 = v166;
        *uint64_t v124 = 0x8000000000000000LL;
        unint64_t v134 = sub_100006114(v126, v125);
        uint64_t v135 = v132[2];
        BOOL v136 = (v133 & 1) == 0;
        uint64_t v137 = v135 + v136;
        if (__OFADD__(v135, v136)) {
          goto LABEL_89;
        }
        char v138 = v133;
        if (v132[3] >= v137)
        {
          if ((v131 & 1) == 0) {
            sub_100017228();
          }
        }

        else
        {
          sub_100016D94(v137, v131);
          unint64_t v139 = sub_100006114(v126, v125);
          if ((v138 & 1) != (v140 & 1)) {
            goto LABEL_93;
          }
          unint64_t v134 = v139;
        }

        uint64_t v146 = v166;
        if ((v138 & 1) != 0)
        {
          unint64_t v147 = (void *)(v166[7] + 32 * v134);
          sub_100006034(v147);
          sub_100017790(&v167, v147);
        }

        else
        {
          v166[(v134 >> 6) + 8] |= 1LL << v134;
          BOOL v148 = (uint64_t *)(v146[6] + 16 * v134);
          *BOOL v148 = v126;
          v148[1] = v125;
          sub_100017790(&v167, (_OWORD *)(v146[7] + 32 * v134));
          uint64_t v149 = v146[2];
          BOOL v144 = __OFADD__(v149, 1LL);
          uint64_t v150 = v149 + 1;
          if (v144) {
            goto LABEL_91;
          }
          v146[2] = v150;
          swift_bridgeObjectRetain(v125);
        }

        uint64_t v151 = *v124;
        *uint64_t v124 = v146;
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v151);
      }

      ((void (*)(__int128 *, void))v123)(&v163, 0LL);
    }

    unint64_t v6 = v160;
    int64_t v7 = v161;
    swift_bridgeObjectRelease(v17);
  }

  uint64_t v14 = v7 + 4;
  if (v7 + 4 >= v156) {
    return swift_release(v158);
  }
  unint64_t v12 = *(void *)(v155 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v7 + 4;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v156) {
      return swift_release(v158);
    }
    unint64_t v12 = *(void *)(v155 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_23;
    }
  }

  sub_100012824(v115, (uint64_t *)&unk_10015BA30);
  uint64_t v118 = sub_100039E40();
  sub_1000D3F74((uint64_t)v217, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v218);
  v214[1] = v218;
  if (qword_10015E4B8 != -1) {
    swift_once(&qword_10015E4B8, sub_10002C478);
  }
  v214[0] = qword_1001752F0;
  sub_10001A148(v210, v109, (uint64_t *)&unk_10015BA30);
  char v119 = v196;
  if (!v75)
  {
    sub_100012824(v109, (uint64_t *)&unk_10015BA30);
LABEL_45:
    uint64_t v126 = sub_100005FB4(&qword_100158C00);
    Swift::String v127 = swift_allocObject(v126, 48LL, 7LL);
    *(_OWORD *)(v127 + 16) = xmmword_10010F110;
    __n128 v128 = sub_100091910();
    uint64_t v130 = *(void *)v128;
    uint64_t v129 = *((void *)v128 + 1);
    *(void *)(v127 + 3sub_100006034(v0 + 2) = v130;
    *(void *)(v127 + 40) = v129;
    uint64_t v131 = v206;
    unint64_t v132 = *(uint64_t (**)(uint64_t))(*(void *)v206 + 272LL);
    swift_bridgeObjectRetain(v129);
    LOBYTE(v13sub_100006034(v0 + 2) = v132(v127);
    char v133 = swift_bridgeObjectRelease(v127);
    goto LABEL_47;
  }

  sub_10001A148(v109, v196, (uint64_t *)&unk_10015BA30);
  uint64_t result = (void *)v107(v119, 1LL, v201);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }

  unint64_t v120 = (void *)v200[12];
  char v121 = swift_bridgeObjectRetain(v120);
  uint64_t v122 = URL.path.getter(v121);
  uint64_t v124 = v123;
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v119, v201);
  uint64_t v125 = sub_10003464C(v122, v124, v120);
  swift_bridgeObjectRelease(v120);
  swift_bridgeObjectRelease(v124);
  sub_100012824(v109, (uint64_t *)&unk_10015BA30);
  if ((v125 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_47:
  unint64_t v134 = (uint64_t)v205;
  sub_1000D3F74((uint64_t)v214, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v219);
  v213[1] = v219;
  uint64_t v135 = qword_1001752F0;
  if (qword_10015E4C0 != -1) {
    swift_once(&qword_10015E4C0, sub_10002C488);
  }
  if (!v135)
  {
    if (!qword_1001752F8)
    {
      uint64_t v135 = 0LL;
      goto LABEL_55;
    }

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v41);
  return _swiftEmptyArrayStorage;
}

  uint64_t v20 = 0LL;
LABEL_39:
  swift_bridgeObjectRelease(v35);
  sub_1000E5B24((uint64_t)v14, v20, a3, v13, a5, v11, a7, v9);
  if (v33)
  {
LABEL_46:
    swift_release(a5);
    char v38 = a7;
    uint64_t v39 = v9;
    goto LABEL_47;
  }

  swift_release(a5);
  uint64_t v20 = v114;
  sub_10001226C(a7, v9);
  return v20;
}

LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

                    unint64_t v58 = a4;
                    uint64_t v66 = (void (**)(void, void, void))v176;
                    unint64_t v57 = (void *)a3;
                    uint64_t v59 = (void *)v19;
                    char v65 = v169;
                    unint64_t v61 = v174;
                    goto LABEL_76;
                  }

void (*sub_10002EBA8(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  void v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000358D0(v6, a2, a3);
  return sub_10002936C;
}

uint64_t sub_10002EC14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v92 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v91 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v90 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)v4[3];
  uint64_t v17 = v16[2];
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v17);
  swift_retain(v4);
  uint64_t v18 = sub_1000373BC(&_swiftEmptyDictionarySingleton, v17, (uint64_t)v4, a1, a2, a3);
  swift_bridgeObjectRelease(v17);
  swift_release(v4);
  swift_bridgeObjectRelease(a2);
  uint64_t v19 = (uint64_t *)sub_10008F550();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v93 = v8;
  if (v21)
  {
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    swift_bridgeObjectRetain(v23);
    unint64_t v24 = sub_100006114(v22, v23);
    if ((v25 & 1) != 0)
    {
      sub_100006054(*(void *)(v18 + 56) + 32 * v24, (uint64_t)&v98);
      swift_bridgeObjectRelease(v23);
      if (*((void *)&v99 + 1))
      {
        sub_100012824((uint64_t)&v98, &qword_100157FF8);
        goto LABEL_13;
      }
    }

    else
    {
      __int128 v98 = 0u;
      __int128 v99 = 0u;
      swift_bridgeObjectRelease(v23);
    }
  }

  else
  {
    __int128 v98 = 0u;
    __int128 v99 = 0u;
  }

  sub_100012824((uint64_t)&v98, &qword_100157FF8);
  uint64_t v26 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v28 = *(uint64_t (**)(uint64_t))(*v16 + 224LL);
  uint64_t v29 = swift_bridgeObjectRetain(v27);
  uint64_t v30 = v28(v29);
  *((void *)&v99 + 1) = &type metadata for Data;
  if (v31 >> 60 == 15) {
    uint64_t v32 = 0LL;
  }
  else {
    uint64_t v32 = v30;
  }
  unint64_t v33 = 0xC000000000000000LL;
  if (v31 >> 60 != 15) {
    unint64_t v33 = v31;
  }
  *(void *)&__int128 v98 = v32;
  *((void *)&v98 + 1) = v33;
  sub_100017790(&v98, &v96);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  *(void *)&v95[0] = v18;
  sub_100017090(&v96, v26, v27, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = *(void *)&v95[0];
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_13:
  sub_10001A148((uint64_t)v4 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v12, &qword_1001588F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v35 = sub_100012824((uint64_t)v12, &qword_1001588F8);
  }

  else
  {
    uint64_t v36 = v90;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v90, v12, v13);
    uint64_t v37 = (uint64_t *)sub_10008F52C();
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    swift_bridgeObjectRetain(v39);
    uint64_t v40 = sub_1000D2BFC();
    *((void *)&v99 + 1) = &type metadata for Data;
    *(void *)&__int128 v98 = v40;
    *((void *)&v98 + 1) = v41;
    sub_100017790(&v98, &v96);
    char v42 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(void *)&v95[0] = v18;
    sub_100017090(&v96, v38, v39, v42);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v36, v13);
  }

  uint64_t v43 = (*(uint64_t (**)(uint64_t))(*v4 + 168LL))(v35);
  uint64_t v44 = v43;
  if (qword_10015E4A0 != -1) {
    uint64_t v43 = swift_once(&qword_10015E4A0, sub_10002C448);
  }
  if ((qword_1001752D8 & ~v44) == 0)
  {
    uint64_t v45 = (uint64_t *)sub_10008F544();
    uint64_t v46 = *v45;
    uint64_t v47 = v45[1];
    *((void *)&v99 + 1) = &type metadata for Bool;
    LOBYTE(v98) = 1;
    sub_100017790(&v98, &v96);
    swift_bridgeObjectRetain(v47);
    char v48 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(void *)&v95[0] = v18;
    sub_100017090(&v96, v46, v47, v48);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease(v47);
    uint64_t v43 = swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if (((*(uint64_t (**)(uint64_t))(*v16 + 216LL))(v43) & 1) != 0
    || (uint64_t v49 = type metadata accessor for DriverExtension(0LL), swift_dynamicCastClass(v16, v49)))
  {
    (*(void (**)(__int128 *__return_ptr))(*v16 + 112LL))(&v96);
    if (v97)
    {
      sub_100005158(&v96, (uint64_t)&v98);
      unint64_t v50 = (uint64_t *)sub_10008F7FC();
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      uint64_t v53 = *((void *)&v99 + 1);
      uint64_t v54 = v100;
      sub_100005110(&v98, *((uint64_t *)&v99 + 1));
      unint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 64);
      swift_bridgeObjectRetain(v52);
      unint64_t v56 = v91;
      uint64_t v57 = v55(v53, v54);
      uint64_t v58 = URL.path.getter(v57);
      uint64_t v60 = v59;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v56, v93);
      uint64_t v97 = &type metadata for String;
      *(void *)&__int128 v96 = v58;
      *((void *)&v96 + 1) = v60;
      sub_100017790(&v96, v95);
      char v61 = swift_isUniquelyReferenced_nonNull_native(v18);
      uint64_t v94 = v18;
      sub_100017090(v95, v51, v52, v61);
      uint64_t v18 = v94;
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100006034(&v98);
    }

    else
    {
      sub_100012824((uint64_t)&v96, &qword_100157C58);
    }

    __n128 v62 = (uint64_t *)sub_10008F5A4();
    uint64_t v63 = *v62;
    uint64_t v64 = v62[1];
    uint64_t v65 = (uint64_t)(v4 + 4);
    uint64_t v66 = *(uint64_t (**)(uint64_t))(*v4 + 296LL);
    uint64_t v67 = swift_bridgeObjectRetain(v64);
    uint64_t v68 = v66(v67);
    *((void *)&v99 + 1) = &type metadata for Data;
    *(void *)&__int128 v98 = v68;
    *((void *)&v98 + 1) = v69;
    sub_100017790(&v98, &v96);
    char v70 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(void *)&v95[0] = v18;
    sub_100017090(&v96, v63, v64, v70);
    uint64_t v71 = *(void *)&v95[0];
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_10001A148(v65, (uint64_t)&v98, &qword_100157FF0);
    uint64_t v72 = *((void *)&v99 + 1);
    if (*((void *)&v99 + 1))
    {
      uint64_t v73 = v100;
      sub_100005110(&v98, *((uint64_t *)&v99 + 1));
      uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73);
      unint64_t v76 = v75;
      sub_100006034(&v98);
      if (!v76)
      {
        uint64_t v85 = (uint64_t *)sub_10008F5B0();
        uint64_t v82 = *v85;
        uint64_t v83 = v85[1];
        swift_bridgeObjectRetain(v83);
        char v84 = sub_10008F5C8();
        goto LABEL_32;
      }

      if (v76 != 1)
      {
        swift_bridgeObjectRetain(v76);
        char v77 = (uint64_t *)sub_10008F5B0();
        uint64_t v78 = *v77;
        uint64_t v79 = v77[1];
        *((void *)&v99 + 1) = &type metadata for String;
        *(void *)&__int128 v98 = v74;
        *((void *)&v98 + 1) = v76;
        sub_100017790(&v98, &v96);
        swift_bridgeObjectRetain(v79);
        char v80 = swift_isUniquelyReferenced_nonNull_native(v71);
        *(void *)&v95[0] = v71;
        sub_100017090(&v96, v78, v79, v80);
        uint64_t v18 = *(void *)&v95[0];
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_10001777C(v74, v76);
        return v18;
      }
    }

    else
    {
      sub_100012824((uint64_t)&v98, &qword_100157FF0);
    }

    uint64_t v81 = (uint64_t *)sub_10008F5B0();
    uint64_t v82 = *v81;
    uint64_t v83 = v81[1];
    swift_bridgeObjectRetain(v83);
    char v84 = sub_10008F5BC();
LABEL_32:
    uint64_t v86 = *(void *)v84;
    uint64_t v87 = *((void *)v84 + 1);
    *((void *)&v99 + 1) = &type metadata for String;
    *(void *)&__int128 v98 = v86;
    *((void *)&v98 + 1) = v87;
    sub_100017790(&v98, &v96);
    swift_bridgeObjectRetain(v87);
    char v88 = swift_isUniquelyReferenced_nonNull_native(v71);
    *(void *)&v95[0] = v71;
    sub_100017090(&v96, v82, v83, v88);
    uint64_t v18 = *(void *)&v95[0];
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v18;
}

uint64_t sub_10002F324()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v0 + 24);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v6 + 112LL))(&v19, v3);
  if (v20)
  {
    sub_100005158(&v19, (uint64_t)&v21);
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    sub_100005110(&v21, v23);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    uint64_t v10 = URL.path.getter(v9);
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    uint64_t v13 = sub_1000D1988(v10, v12);
    swift_bridgeObjectRelease(v12);
    sub_100006034(&v21);
  }

  else
  {
    uint64_t v14 = sub_100012824((uint64_t)&v19, &qword_100157C58);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144LL))(v14);
    uint64_t v22 = v15;
    v16._countAndFlagsBits = 0x6E7562206F6E2820LL;
    v16._uint64_t object = (void *)0xEC00000029656C64LL;
    String.append(_:)(v16);
    uint64_t v17 = v22;
    uint64_t v13 = sub_1000D1988(v21, v22);
    swift_bridgeObjectRelease(v17);
  }

  return v13;
}

double sub_10002F48C@<D0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v13 = (uint64_t *)sub_10008F418();
  uint64_t v14 = *v13;
  uint64_t v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._uint64_t object = v15;
  LOBYTE(v14) = String.hasPrefix(_:)(v16);
  swift_bridgeObjectRelease(v15);
  if ((v14 & 1) != 0)
  {
    sub_10002F5F4(a1, a2, a3, a4, v6, a5 & 1, &v21);
    if (v22)
    {
      uint64_t v17 = sub_100005FB4(&qword_100158900);
      if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v17, 6LL) & 1) != 0)
      {
        uint64_t v23 = v20;
        (*(void (**)(uint64_t *, void))(*v6 + 280LL))(&v23, a5 & 1);
        uint64_t v19 = v23;
        *(void *)(a6 + 24) = v17;
        *(void *)a6 = v19;
        return result;
      }
    }

    else
    {
      sub_100012824((uint64_t)&v21, &qword_100157FF8);
    }

    double result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }

  else
  {
    sub_10002F5F4(a1, a2, a3, a4, v6, a5 & 1, (_OWORD *)a6);
  }

  return result;
}

_OWORD *sub_10002F5F4@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  unint64_t v14 = sub_10002F8A4((uint64_t)&off_100146E50);
  if (!a2) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(a2);
  v15._countAndFlagsBits = 20297LL;
  v15._uint64_t object = (void *)0xE200000000000000LL;
  if (String.hasPrefix(_:)(v15)
    || (v16._countAndFlagsBits = 21327LL, v16._uint64_t object = (void *)0xE200000000000000LL, String.hasPrefix(_:)(v16)))
  {
    char v33 = a6;
    v34._countAndFlagsBits = 95LL;
    v34._uint64_t object = (void *)0xE100000000000000LL;
    v17._countAndFlagsBits = a1;
    v17._uint64_t object = a2;
    String.append(_:)(v17);
    Swift::String v18 = v34;
    if (String.hasSuffix(_:)(v34))
    {
      swift_bridgeObjectRelease(v34._object);
      if (!*(void *)(v14 + 16)) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v32 = a7;
      uint64_t v19 = *(void *)(a5[3] + 16LL);
      v34._countAndFlagsBits = a3;
      v34._uint64_t object = a4;
      swift_bridgeObjectRetain(a4);
      String.append(_:)(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v18._object);
      if (*(void *)(v19 + 16) && (unint64_t v20 = sub_100006114(v34._countAndFlagsBits, (uint64_t)v34._object), (v21 & 1) != 0))
      {
        sub_100006054(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v34);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v19);
        if (*((void *)&v35 + 1))
        {
          swift_bridgeObjectRelease(a2);
          swift_bridgeObjectRelease(v14);
          return sub_100017790(&v34, v32);
        }
      }

      else
      {
        Swift::String v34 = (Swift::String)0;
        __int128 v35 = 0u;
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v19);
      }

      sub_100012824((uint64_t)&v34, &qword_100157FF8);
      a7 = v32;
      if (!*(void *)(v14 + 16)) {
        goto LABEL_15;
      }
    }

    unint64_t v23 = sub_100006114(a1, (uint64_t)a2);
    if ((v24 & 1) != 0)
    {
      char v25 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v23);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*a5 + 304LL))(v26, v27, a3, a4, v33 & 1);
      uint64_t v28 = v27;
      return (_OWORD *)swift_bridgeObjectRelease(v28);
    }
  }

unint64_t sub_10002F8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100158C10);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    unint64_t v14 = (void *)(v4[7] + 16 * result);
    void *v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002F9C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100158BF0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 304LL))( a1,  a2,  a3,  a4,  0LL);
}

uint64_t sub_10002FAEC()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10002FB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(void *)(v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = a1;
  uint64_t v12 = v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a2, v13);
  sub_1000263D8(a3, v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_1001588F8);
  sub_1000263D8( a4,  v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID,  &qword_1001588F8);
  *(void *)(v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = a5;
  return v11;
}

uint64_t sub_10002FC60()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection));
  sub_100012824(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_1001588F8);
  sub_100012824(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_1001588F8);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10002FD00()
{
  uint64_t v0 = type metadata accessor for KernelCollection(0LL);
  uint64_t v1 = sub_100012860(&qword_100158908, type metadata accessor for KernelCollection, (uint64_t)&unk_1001109C0);
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  v2._countAndFlagsBits = 10272LL;
  v2._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  v4._countAndFlagsBits = UUID.uuidString.getter(v3);
  uint64_t object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 41LL;
  v6._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return v8;
}

uint64_t sub_10002FDC0()
{
  return sub_10002FD00();
}

uint64_t sub_10002FDE0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v401) = a6;
  uint64_t v402 = a5;
  *(void *)&__int128 v414 = a4;
  uint64_t v412 = a3;
  int v404 = a2;
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v406 = *(void *)(v7 - 8);
  uint64_t v407 = v7;
  __chkstk_darwin(v7);
  v405 = (char *)&v390 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v398 = (char *)&v390 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  v415 = *(char **)(v12 - 8);
  uint64_t v416 = v12;
  __chkstk_darwin(v12);
  v410 = (char *)&v390 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100005FB4(&qword_1001588F8);
  uint64_t v15 = __chkstk_darwin(v14);
  v403 = (_UNKNOWN **)((char *)&v390 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v15);
  v409 = (uint64_t *)((char *)&v390 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v397 = (uint64_t)&v390 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v399 = (uint64_t)&v390 - v22;
  __chkstk_darwin(v21);
  char v24 = (char *)&v390 - v23;
  uint64_t v25 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v26 = __chkstk_darwin(v25);
  *(void *)&__int128 v408 = (char *)&v390 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v400 = (uint64_t)&v390 - v29;
  __chkstk_darwin(v28);
  v418 = (uint64_t (*)(void))((char *)&v390 - v30);
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  sub_100005110(a1, v31);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  unint64_t v35 = v34;
  LOBYTE(v3sub_100006034(v0 + 2) = sub_1000D5520(v33, v34, 0LL, 1uLL);
  uint64_t v36 = sub_10003783C(v33, v35);
  if ((v32 & 1) != 0)
  {
    LODWORD(v420) = static os_log_type_t.default.getter(v36);
    uint64_t v37 = sub_1000D2D30();
    uint64_t v411 = v9;
    uint64_t v38 = (void *)*v37;
    uint64_t v39 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
    *(_OWORD *)(v40 + 16) = xmmword_10010F110;
    uint64_t v413 = v10;
    uint64_t v42 = a1[3];
    uint64_t v41 = a1[4];
    sub_100005110(a1, v42);
    uint64_t v43 = a1;
    uint64_t v44 = v24;
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 24);
    id v46 = v38;
    uint64_t v47 = v45(v42, v41);
    char v24 = v44;
    a1 = v43;
    unint64_t v48 = v47;
    unint64_t v50 = v49;
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 64) = sub_100026B64();
    if (v50) {
      unint64_t v51 = v48;
    }
    else {
      unint64_t v51 = 0xD000000000000016LL;
    }
    unint64_t v52 = 0x8000000100122E40LL;
    if (v50) {
      unint64_t v52 = v50;
    }
    uint64_t v10 = v413;
    *(void *)(v40 + 3sub_100006034(v0 + 2) = v51;
    *(void *)(v40 + 40) = v52;
    os_log(_:dso:log:_:_:)(v420, &_mh_execute_header, v46, "Realize dext %{public}s", 23LL, 2LL, v40);

    uint64_t v9 = v411;
    swift_bridgeObjectRelease(v40);
  }

  uint64_t v53 = type metadata accessor for OSExtension(0LL);
  uint64_t v54 = sub_1000F46C0(a1);
  if (!v54)
  {
    *(void *)&v432[0] = 0LL;
    *((void *)&v432[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    swift_bridgeObjectRelease(*((void *)&v432[0] + 1));
    *(void *)&v432[0] = 0xD00000000000002ALL;
    *((void *)&v432[0] + 1) = 0x8000000100122C60LL;
    uint64_t v82 = a1;
    uint64_t v83 = a1[3];
    uint64_t v84 = a1[4];
    sub_100005110(v82, v83);
    uint64_t v85 = v410;
    (*(void (**)(uint64_t, uint64_t))(v84 + 64))(v83, v84);
    uint64_t v86 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v87 = v416;
    v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v416, v86);
    uint64_t object = v88._object;
    String.append(_:)(v88);
    swift_bridgeObjectRelease(object);
    (*((void (**)(char *, uint64_t))v415 + 1))(v85, v87);
    v90._countAndFlagsBits = 46LL;
    v90._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v90);
    unint64_t v92 = *((void *)&v432[0] + 1);
    uint64_t v91 = *(void *)&v432[0];
    unint64_t v93 = sub_100012624();
    uint64_t v94 = swift_allocError(&type metadata for KMError, v93, 0LL, 0LL);
    *(_OWORD *)uint64_t v95 = __PAIR128__(v92, v91);
    *(_OWORD *)(v95 + 16) = 0u;
    *(_OWORD *)(v95 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v95 + 48) = 0u;
    *(void *)(v95 + 64) = 0LL;
    *(_BYTE *)(v95 + 7sub_100006034(v0 + 2) = 9;
    swift_willThrow(v94);
    return v91;
  }

  unint64_t v55 = (void *)v54;
  uint64_t v393 = v53;
  v417 = v24;
  uint64_t v56 = v9;
  uint64_t v57 = (uint64_t)v418;
  sub_10001A148(v414, (uint64_t)v418, (uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t))(*v55 + 168LL))(v57);
  uint64_t v58 = a1;
  uint64_t v59 = a1[3];
  uint64_t v60 = a1[4];
  sub_100005110(v58, v59);
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
  unint64_t v63 = v62;
  char v64 = sub_1000D5520(v61, v62, 0LL, 1uLL);
  sub_10003783C(v61, v63);
  uint64_t v65 = 168LL;
  if ((v64 & 1) != 0) {
    uint64_t v65 = 184LL;
  }
  uint64_t v66 = 160LL;
  if ((v64 & 1) != 0) {
    uint64_t v66 = 176LL;
  }
  uint64_t v67 = (uint64_t)v442;
  *(void *)&__int128 v414 = *(void *)&v442[v65];
  uint64_t v68 = *(void *)&v442[v66];
  swift_bridgeObjectRetain(v414);
  int v69 = *(_DWORD *)(v67 + 640);
  LODWORD(v432[0]) = *(_DWORD *)sub_1000A4734();
  LODWORD(v433) = v69;
  unint64_t v394 = sub_100012B34();
  char v70 = dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v394);
  v420 = v55;
  LODWORD(v396) = v69;
  if ((v70 & 1) != 0)
  {
    int v392 = 0;
    uint64_t v440 = 0LL;
    __int128 v439 = 0u;
    __int128 v438 = 0u;
    memset(v436, 0, sizeof(v436));
    uint64_t v437 = 0LL;
    uint64_t v71 = v58;
    uint64_t v72 = v56;
    uint64_t v73 = (uint64_t)v417;
    goto LABEL_15;
  }

  uint64_t v391 = v68;
  uint64_t v91 = v67;
  uint64_t v96 = sub_100032014(v58);
  if (v419)
  {
    swift_release(v55);
    swift_bridgeObjectRelease(v414);
    return v91;
  }

  uint64_t v97 = v96;
  v395 = v58;
  if ((v401 & 1) != 0)
  {
    uint64_t v98 = *(void *)(v67 + 40);
    uint64_t v99 = *(void *)(v67 + 48);
    sub_100005110((void *)(v67 + 16), v98);
    sub_1000DED48(v98, v99);
    uint64_t v100 = v434;
    uint64_t v101 = v435;
    sub_100005110(&v433, v434);
    uint64_t v102 = v419;
    sub_1000DBEBC((uint64_t)v55, v97, v100, v101);
    uint64_t v91 = v102;
    uint64_t v72 = v56;
    if (v102)
    {
      sub_100006034(&v433);
      *(void *)&__int128 v433 = v102;
      swift_errorRetain(v102);
      uint64_t v103 = sub_100005FB4(&qword_10015AB20);
      if (swift_dynamicCast(v432, &v433, v103, &type metadata for KMError, 0LL))
      {
        if (BYTE8(v432[4]) == 45)
        {
          sub_100039508( *(uint64_t *)&v432[0],  *((uint64_t *)&v432[0] + 1),  *(uint64_t *)&v432[1],  *((uint64_t *)&v432[1] + 1),  *(unint64_t *)&v432[2],  *((uint64_t *)&v432[2] + 1),  *(uint64_t *)&v432[3],  *((uint64_t *)&v432[3] + 1),  *(uint64_t *)&v432[4],  45);
          swift_errorRelease(v102);
          uint64_t v440 = 0LL;
          __int128 v439 = 0u;
          __int128 v438 = 0u;
          swift_errorRelease(v433);
          uint64_t v419 = 0LL;
          uint64_t v104 = v414;
          goto LABEL_46;
        }

        sub_100039508( *(uint64_t *)&v432[0],  *((uint64_t *)&v432[0] + 1),  *(uint64_t *)&v432[1],  *((uint64_t *)&v432[1] + 1),  *(unint64_t *)&v432[2],  *((uint64_t *)&v432[2] + 1),  *(uint64_t *)&v432[3],  *((uint64_t *)&v432[3] + 1),  *(uint64_t *)&v432[4],  SBYTE8(v432[4]));
      }

      swift_release(v55);
      swift_bridgeObjectRelease(v414);
      swift_errorRelease(v433);
      return v91;
    }

    uint64_t v419 = 0LL;
    sub_1000263D8((uint64_t)v432, (uint64_t)&v438, &qword_100157FF0);
    sub_100006034(&v433);
    uint64_t v104 = v414;
  }

  else
  {
    uint64_t v148 = *(void *)(v67 + 40);
    uint64_t v149 = *(void *)(v67 + 48);
    sub_100005110((void *)(v67 + 16), v148);
    sub_1000DED48(v148, v149);
    uint64_t v150 = *((void *)&v432[1] + 1);
    uint64_t v151 = *(void *)&v432[2];
    uint64_t v152 = sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
    uint64_t v153 = v414;
    swift_bridgeObjectRetain(v414);
    uint64_t v154 = v97;
    uint64_t v155 = v153;
    uint64_t v156 = v150;
    uint64_t v91 = (uint64_t)v152;
    uint64_t v157 = v419;
    sub_1000DBEE4((uint64_t)&v433, (uint64_t)v55, v154, v391, v153, v156, v151);
    uint64_t v419 = v157;
    if (v157)
    {
      swift_release(v55);
      swift_bridgeObjectRelease_n(v153, 2LL);
      sub_100006034(v432);
      return v91;
    }

    uint64_t v72 = v56;
    swift_bridgeObjectRelease(v155);
    sub_1000263D8((uint64_t)&v433, (uint64_t)&v438, &qword_100157FF0);
    sub_100006034(v432);
    uint64_t v104 = v155;
  }

LABEL_46:
  uint64_t v165 = *(void *)(v67 + 40);
  uint64_t v166 = *(void *)(v67 + 48);
  sub_100005110((void *)(v67 + 16), v165);
  sub_1000DED48(v165, v166);
  uint64_t v167 = *((void *)&v432[1] + 1);
  uint64_t v168 = *(void *)&v432[2];
  sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
  int v392 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 32))( v55,  v391,  v104,  v167,  v168);
  uint64_t v169 = sub_100006034(v432);
  uint64_t v170 = (*(uint64_t (**)(uint64_t))(*v55 + 144LL))(v169);
  uint64_t v172 = v171;
  uint64_t v173 = (*(uint64_t (**)(void))(*(void *)v67 + 192LL))();
  if (!*(void *)(v173 + 16))
  {
    swift_bridgeObjectRelease(v172);
    swift_bridgeObjectRelease(v173);
    memset(v432, 0, 40);
    uint64_t v71 = v395;
    uint64_t v175 = (uint64_t)v417;
LABEL_162:
    uint64_t v68 = v391;
    goto LABEL_163;
  }

  unint64_t v174 = sub_100006114(v170, v172);
  uint64_t v175 = (uint64_t)v417;
  if ((v176 & 1) == 0)
  {
    swift_bridgeObjectRelease(v172);
    swift_bridgeObjectRelease(v173);
    memset(v432, 0, 40);
LABEL_161:
    uint64_t v71 = v395;
    goto LABEL_162;
  }

  uint64_t v177 = *(void *)(*(void *)(v173 + 56) + 8 * v174);
  swift_bridgeObjectRetain(v177);
  swift_bridgeObjectRelease(v172);
  swift_bridgeObjectRelease(v173);
  uint64_t v178 = *(void *)(v177 + 16);
  if (!v178)
  {
LABEL_160:
    memset(v432, 0, 40);
    swift_bridgeObjectRelease(v177);
    uint64_t v175 = (uint64_t)v417;
    goto LABEL_161;
  }

  uint64_t v413 = v10;
  uint64_t v179 = v177 + 32;
  uint64_t v390 = v177;
  swift_bridgeObjectRetain(v177);
  while (1)
  {
    sub_100005F70(v179, (uint64_t)&v433);
    uint64_t v180 = v434;
    uint64_t v181 = v435;
    sub_100005110(&v433, v434);
    uint64_t v182 = (*(uint64_t (**)(uint64_t, uint64_t))(v181 + 32))(v180, v181);
    uint64_t v184 = v183;
    sub_10001A148((uint64_t)&v438, (uint64_t)v432, &qword_100157FF0);
    uint64_t v185 = *((void *)&v432[1] + 1);
    if (!*((void *)&v432[1] + 1))
    {
      sub_100012824((uint64_t)v432, &qword_100157FF0);
      if (!v184)
      {
LABEL_164:
        uint64_t v388 = v390;
        uint64_t v389 = v390;
        goto LABEL_166;
      }

              __break(1u);
              return result;
            }

            uint64_t v21 = v29;
          }
        }

  __break(1u);
  return result;
}

LABEL_63:
      uint64_t v193 = v184;
LABEL_51:
      swift_bridgeObjectRelease(v193);
      goto LABEL_52;
    }

    uint64_t v401 = v182;
    uint64_t v186 = v72;
    uint64_t v187 = *(void *)&v432[2];
    sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
    uint64_t v188 = (*(uint64_t (**)(uint64_t, uint64_t))(v187 + 32))(v185, v187);
    unint64_t v190 = v189;
    uint64_t v191 = sub_1000DBC4C();
    uint64_t v193 = v192;
    sub_10001226C(v188, v190);
    sub_100006034(v432);
    uint64_t v72 = v186;
    if (!v184)
    {
      uint64_t v67 = (uint64_t)v442;
      if (!v193) {
        goto LABEL_164;
      }
      goto LABEL_51;
    }

    uint64_t v67 = (uint64_t)v442;
    if (!v193) {
      goto LABEL_63;
    }
    if (v401 == v191 && v184 == v193) {
      break;
    }
    char v195 = _stringCompareWithSmolCheck(_:_:expecting:)(v401, v184, v191, v193, 0LL);
    swift_bridgeObjectRelease(v184);
    swift_bridgeObjectRelease(v193);
    if ((v195 & 1) != 0) {
      goto LABEL_164;
    }
LABEL_52:
    sub_100006034(&v433);
    v179 += 40LL;
    if (!--v178)
    {
      uint64_t v177 = v390;
      swift_bridgeObjectRelease(v390);
      unint64_t v55 = v420;
      uint64_t v10 = v413;
      goto LABEL_160;
    }
  }

  uint64_t v388 = v390;
  swift_bridgeObjectRelease(v390);
  swift_bridgeObjectRelease(v184);
  uint64_t v389 = v193;
LABEL_166:
  swift_bridgeObjectRelease(v389);
  uint64_t v68 = v391;
  sub_100005158(&v433, (uint64_t)v432);
  swift_bridgeObjectRelease(v388);
  uint64_t v175 = (uint64_t)v417;
  unint64_t v55 = v420;
  uint64_t v10 = v413;
  uint64_t v71 = v395;
LABEL_163:
  sub_1000263D8((uint64_t)v432, (uint64_t)v436, &qword_1001588F0);
  uint64_t v73 = v175;
LABEL_15:
  uint64_t v74 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v73, 1LL, 1LL, v72);
  LODWORD(v401) = sub_100032278((uint64_t)v55, v412);
  uint64_t v75 = v55[2];
  unint64_t v76 = sub_10008F310();
  uint64_t v77 = *(void *)(v75 + 16);
  uint64_t v411 = v72;
  uint64_t v413 = v10;
  v395 = v71;
  if (!v77)
  {
    memset(v432, 0, 32);
LABEL_31:
    sub_100012824((uint64_t)v432, &qword_100157FF8);
    sub_100005F70((uint64_t)v71, (uint64_t)&v433);
    sub_100006034(&v433);
    uint64_t v107 = v71;
    goto LABEL_32;
  }

  uint64_t v78 = *v76;
  uint64_t v79 = v76[1];
  swift_bridgeObjectRetain(v79);
  unint64_t v80 = sub_100006114(v78, v79);
  if ((v81 & 1) != 0) {
    sub_100006054(*(void *)(v75 + 56) + 32 * v80, (uint64_t)v432);
  }
  else {
    memset(v432, 0, 32);
  }
  swift_bridgeObjectRelease(v79);
  if (!*((void *)&v432[1] + 1)) {
    goto LABEL_31;
  }
  sub_100012824((uint64_t)v432, &qword_100157FF8);
  sub_100005F70((uint64_t)v71, (uint64_t)&v433);
  uint64_t v105 = *(void *)(v67 + 40);
  uint64_t v106 = *(void *)(v67 + 48);
  sub_100005110((void *)(v67 + 16), v105);
  sub_1001073DC(v105, v106);
  LOBYTE(v105) = sub_1000D5984(&v433, v432);
  sub_100006034(v432);
  sub_100006034(&v433);
  uint64_t v107 = v71;
  if ((v105 & 1) == 0)
  {
    swift_bridgeObjectRelease(v414);
    *(void *)&v432[0] = 0LL;
    *((void *)&v432[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(*((void *)&v432[0] + 1));
    *(void *)&v432[0] = 0x6261747563657845LL;
    *((void *)&v432[0] + 1) = 0xEF20726F6620656CLL;
    v428 = v55;
    uint64_t v108 = sub_100012860( (unint64_t *)&qword_100157C70,  type metadata accessor for OSExtension,  (uint64_t)&unk_10011B528);
    v109._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v393, v108);
    uint64_t v110 = v109._object;
    String.append(_:)(v109);
    swift_bridgeObjectRelease(v110);
    uint64_t v111 = 0x756F6620746F6E20LL;
    unint64_t v112 = 0xEA0000000000646ELL;
    goto LABEL_39;
  }

                    unint64_t v63 = v44;
LABEL_64:
                    swift_bridgeObjectRelease(v63);
                    uint64_t v18 = 0;
LABEL_65:
                    sub_100006034(v77);
                    sub_100006034(v80);
LABEL_70:
                    sub_10003A584(v84);
                    return v18 & 1;
                  }

                  uint64_t v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v58, v59, 0LL);
                  swift_bridgeObjectRelease(v55);
                  swift_bridgeObjectRelease(v60);
                  sub_100006034(&v74);
                  sub_100006034(&v70);
                  if ((v65 & 1) != 0) {
                    goto LABEL_73;
                  }
                  goto LABEL_58;
                }
              }

              else
              {
                if (!v59) {
                  goto LABEL_66;
                }
                unint64_t v55 = v59;
              }

              uint64_t v62 = v69;
              swift_bridgeObjectRelease(v55);
              sub_100006034(&v74);
              sub_100006034(&v70);
              uint64_t v61 = v62;
              goto LABEL_62;
            }

            sub_100006034(&v74);
            sub_100006034(&v70);
LABEL_58:
            uint64_t v61 = v69;
LABEL_62:
            swift_bridgeObjectRelease(v61);
            goto LABEL_63;
          }
        }

        else
        {
          uint64_t v74 = 0u;
          uint64_t v75 = 0u;
        }

        sub_100012824((uint64_t)&v74, &qword_100157FF8);
        uint64_t v43 = 0LL;
        uint64_t v44 = 0LL;
        goto LABEL_51;
      }
    }

    else
    {
      uint64_t v74 = 0u;
      uint64_t v75 = 0u;
    }

    uint64_t v29 = v5;
    sub_100012824((uint64_t)&v74, &qword_100157FF8);
    uint64_t v68 = 0LL;
    int v69 = 0LL;
    goto LABEL_35;
  }

  if (v85 == 1)
  {
    sub_10003A50C(v84, (uint64_t)v83);
    uint64_t v11 = *(void *)&v83[0];
    if (v87 == 1)
    {
      uint64_t v12 = *(void *)&v86[0];
      if (sub_1000265C0( *(_BYTE *)(*(void *)&v83[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind),  *(_BYTE *)(*(void *)&v86[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind))
        && (static URL.== infix(_:_:)( v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path,  v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0)
      {
        uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
        uint64_t v14 = *(void *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8);
        uint64_t v15 = *(void *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
        uint64_t v16 = *(void *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8);
        if (v13 == v15 && v14 == v16) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL);
        }
        uint64_t v19 = v12;
        uint64_t v12 = v11;
      }

      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = v11;
      }

      swift_release(v19);
      swift_release(v12);
      goto LABEL_70;
    }

    swift_release(*(void *)&v83[0]);
    goto LABEL_16;
  }

  if (v87 != 2)
  {
LABEL_16:
    sub_100012824((uint64_t)v84, &qword_100158BE0);
    uint64_t v18 = 0;
    return v18 & 1;
  }

  sub_10003A584(v84);
  uint64_t v18 = 1;
  return v18 & 1;
}

LABEL_103:
        if (!--v294)
        {
          swift_release(v414);
          uint64_t v283 = (uint64_t)v420;
          uint64_t v293 = (uint64_t)v403;
          goto LABEL_123;
        }
      }
    }

    swift_release(v279);
LABEL_123:
    swift_bridgeObjectRelease(v293);
    sub_10008E56C(v424);
    sub_100089ACC(v424);
    sub_10008D568(v424);
    sub_100005F70((uint64_t)v395, (uint64_t)&v428);
    uint64_t v320 = v416;
    if ((v404 & 1) != 0)
    {
      sub_100006034(&v428);
      uint64_t v321 = v411;
    }

    else
    {
      uint64_t v322 = v250[5];
      uint64_t v323 = v250[6];
      sub_100005110(v250 + 2, v322);
      sub_100026D98(v322, v323);
      uint64_t v324 = v426;
      uint64_t v325 = v427;
      sub_100005110(&v425, v426);
      uint64_t v326 = v430;
      uint64_t v327 = v431;
      sub_100005110(&v428, v430);
      v328 = v410;
      uint64_t v329 = (*(uint64_t (**)(uint64_t, uint64_t))(v327 + 64))(v326, v327);
      uint64_t v330 = URL.path.getter(v329);
      uint64_t v332 = v331;
      (*((void (**)(char *, uint64_t))v415 + 1))(v328, v320);
      v333 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v325 + 48);
      uint64_t v334 = v325;
      uint64_t v283 = (uint64_t)v420;
      LOBYTE(v330) = v333(v330, v332, v324, v334);
      swift_bridgeObjectRelease(v332);
      sub_100006034(&v425);
      sub_100006034(&v428);
      uint64_t v321 = v411;
      if ((v330 & 1) == 0) {
        goto LABEL_131;
      }
    }

    uint64_t v335 = v424[0];
    uint64_t v336 = qword_10015E490;
    swift_retain(v424[0]);
    if (v336 != -1) {
      swift_once(&qword_10015E490, sub_10002C428);
    }
    uint64_t v337 = qword_1001752C8;
    v339 = (void (*)(__int128 *, void))(*(uint64_t (**)(__int128 *))(*(void *)v335 + 184LL))(&v425);
    if ((v337 & ~*v338) != 0) {
      *v338 |= v337;
    }
    v339(&v425, 0LL);
    swift_release(v335);
LABEL_131:
    uint64_t v340 = sub_10008E288(v424);
    LODWORD(v418) = static os_signpost_type_t.event.getter(v340);
    v442 = (char *)(id)*sub_1000D30EC();
    v341 = sub_100090260();
    v342 = *v341;
    v415 = v341[1];
    uint64_t v416 = (uint64_t)v342;
    LODWORD(v414) = *((unsigned __int8 *)v341 + 16);
    uint64_t v343 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v344 = swift_allocObject(v343, 232LL, 7LL);
    *(_OWORD *)(v344 + 16) = xmmword_10010FF10;
    uint64_t v345 = (*(uint64_t (**)(void))(*(void *)v283 + 200LL))();
    uint64_t v347 = v346;
    *(void *)(v344 + 56) = &type metadata for String;
    unint64_t v348 = sub_100026B64();
    *(void *)(v344 + 64) = v348;
    *(void *)(v344 + 3sub_100006034(v0 + 2) = v345;
    *(void *)(v344 + 40) = v347;
    uint64_t v349 = v413;
    uint64_t v350 = (uint64_t)v417;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v413 + 48))(v417, 1LL, v321))
    {
      v351 = (uint64_t *)(v344 + 72);
      *(void *)(v344 + 96) = &type metadata for String;
      *(void *)(v344 + 104) = v348;
    }

    else
    {
      v353 = v398;
      uint64_t v354 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v349 + 16))(v398, v350, v321);
      uint64_t v355 = UUID.uuidString.getter(v354);
      unint64_t v352 = v356;
      (*(void (**)(char *, uint64_t))(v349 + 8))(v353, v321);
      v351 = (uint64_t *)(v344 + 72);
      *(void *)(v344 + 96) = &type metadata for String;
      *(void *)(v344 + 104) = v348;
      if (v352)
      {
        uint64_t *v351 = v355;
        goto LABEL_136;
      }
    }

    uint64_t *v351 = 0x296C696E28LL;
    unint64_t v352 = 0xE500000000000000LL;
LABEL_136:
    *(void *)(v344 + 80) = v352;
    uint64_t v357 = v424[0];
    v358 = *(uint64_t (**)(uint64_t))(*(void *)v424[0] + 168LL);
    uint64_t v359 = swift_retain(v424[0]);
    uint64_t v360 = v358(v359);
    swift_release(v357);
    if (qword_10015E420 != -1) {
      swift_once(&qword_10015E420, sub_10002C0C8);
    }
    BOOL v361 = (qword_100175258 & v360) == qword_100175258;
    uint64_t v362 = 28265LL;
    if ((qword_100175258 & v360) == qword_100175258) {
      uint64_t v362 = 0LL;
    }
    *(void *)(v344 + 136) = &type metadata for String;
    *(void *)(v344 + 144) = v348;
    if (v361) {
      unint64_t v363 = 0xE000000000000000LL;
    }
    else {
      unint64_t v363 = 0xE200000000000000LL;
    }
    *(void *)(v344 + 11sub_100006034(v0 + 2) = v362;
    *(void *)(v344 + 120) = v363;
    uint64_t v364 = swift_retain(v357);
    uint64_t v365 = v358(v364);
    swift_release(v357);
    if (qword_10015E440 != -1) {
      swift_once(&qword_10015E440, sub_10002C188);
    }
    BOOL v366 = (qword_100175278 & v365) == qword_100175278;
    uint64_t v367 = 28265LL;
    if ((qword_100175278 & v365) == qword_100175278) {
      uint64_t v367 = 0LL;
    }
    *(void *)(v344 + 176) = &type metadata for String;
    *(void *)(v344 + 184) = v348;
    if (v366) {
      unint64_t v368 = 0xE000000000000000LL;
    }
    else {
      unint64_t v368 = 0xE200000000000000LL;
    }
    *(void *)(v344 + 15sub_100006034(v0 + 2) = v367;
    *(void *)(v344 + 160) = v368;
    uint64_t v369 = swift_retain(v357);
    uint64_t v370 = v358(v369);
    uint64_t v371 = swift_release(v357);
    if (qword_10015E460 != -1) {
      uint64_t v371 = swift_once(&qword_10015E460, sub_10002C248);
    }
    BOOL v372 = (qword_100175298 & v370) == qword_100175298;
    uint64_t v373 = 28277LL;
    if ((qword_100175298 & v370) == qword_100175298) {
      uint64_t v373 = 0LL;
    }
    unint64_t v374 = 0xE200000000000000LL;
    *(void *)(v344 + 216) = &type metadata for String;
    *(void *)(v344 + 224) = v348;
    if (v372) {
      unint64_t v374 = 0xE000000000000000LL;
    }
    *(void *)(v344 + 19sub_100006034(v0 + 2) = v373;
    *(void *)(v344 + 200) = v374;
    v375 = v405;
    static OSSignpostID.exclusive.getter(v371);
    v376 = v442;
    os_signpost(_:dso:log:name:signpostID:_:_:)( v418,  &_mh_execute_header,  v442,  v416,  v415,  v414,  v375,  "%{public}s, uuid %{public}s %{public}svalid %{public}sauthentic %{public}sapproved",  82LL,  2,  v344);
    swift_release(v420);

    swift_bridgeObjectRelease(v344);
    (*(void (**)(char *, uint64_t))(v406 + 8))(v375, v407);
    sub_100012824((uint64_t)v436, &qword_1001588F0);
    sub_100012824((uint64_t)&v438, &qword_100157FF0);
    uint64_t v91 = v424[0];
    sub_100012824((uint64_t)v417, &qword_1001588F8);
    return v91;
  }

  uint64_t v119 = *(void *)(v67 + 40);
  uint64_t v120 = *(void *)(v67 + 48);
  sub_100005110((void *)(v67 + 16), v119);
  sub_1001073DC(v119, v120);
  uint64_t v121 = v430;
  uint64_t v122 = v431;
  sub_100005110(&v428, v430);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v122 + 112))( &v425,  v116,  v118,  1LL,  v121,  v122);
  if (v426)
  {
    swift_bridgeObjectRelease(v118);
    sub_100005158(&v425, (uint64_t)v432);
    sub_100006034(&v428);
    uint64_t v123 = v395[3];
    uint64_t v124 = v395[4];
    sub_100005110(v395, v123);
    uint64_t v125 = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 16))(v123, v124);
    unint64_t v127 = v126;
    char v128 = sub_1000D5520(v125, v126, 0LL, 1uLL);
    sub_10003783C(v125, v127);
    uint64_t v129 = *((void *)&v432[1] + 1);
    uint64_t v130 = *(void *)&v432[2];
    uint64_t v131 = sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
    if ((v128 & 1) != 0)
    {
      uint64_t v132 = sub_1000D4150(v74);
      uint64_t v134 = v133;
      uint64_t v135 = v399;
      uint64_t v136 = v129;
      uint64_t v91 = (uint64_t)v131;
      uint64_t v137 = v419;
      sub_1000E1EF4(v132, v133, v136, v130, v399);
      uint64_t v138 = v137;
      unint64_t v55 = v420;
      if (!v137)
      {
LABEL_81:
        swift_bridgeObjectRelease(v134);
        uint64_t v139 = (uint64_t)v417;
        sub_1000395F4(v135, (uint64_t)v417, &qword_1001588F8);
        uint64_t v223 = *((void *)&v432[1] + 1);
        uint64_t v224 = *(void *)&v432[2];
        sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
        *(void *)&__int128 v414 = (*(uint64_t (**)(uint64_t, uint64_t))(v224 + 112))(v223, v224);
        uint64_t v419 = 0LL;
        sub_100006034(v432);
        uint64_t v67 = (uint64_t)v442;
        goto LABEL_82;
      }

    __break(1u);
    goto LABEL_104;
  }

  uint64_t result = sub_10006C448(a1);
  if (!v164)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  uint64_t v165 = (void *)result;
  uint64_t v166 = v164;
  uint64_t v167 = v59;
  uint64_t result = sub_10006C454(a1);
  if ((v168 & 1) != 0)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }

  uint64_t v169 = (uint64_t (*)(void))result;
  uint64_t result = sub_10006C468(a1);
  if (result == 2)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }

  uint64_t v170 = result;
  uint64_t result = sub_10006C548(a1);
  if ((result & 0x100000000LL) == 0)
  {
    sub_1000CB3A8(v184, v165, v166, v169, v170 & 1, result, v196 + 32, v186, v138);
    swift_bridgeObjectRelease(v166);
    swift_release(v180);
    swift_release_n(v196, 2LL);
    uint64_t v171 = v167;
    return mach_port_deallocate(mach_task_self_, v171);
  }

LABEL_67:
      swift_bridgeObjectRelease(v134);
    }

    else
    {
      uint64_t v158 = *((void *)v442 + 20);
      swift_bridgeObjectRetain(*((void *)v442 + 21));
      uint64_t v159 = sub_1000D4150(v158);
      uint64_t v134 = v160;
      uint64_t v161 = v129;
      uint64_t v91 = (uint64_t)v131;
      uint64_t v162 = v419;
      uint64_t v164 = sub_1000E1C0C(v159, v160, v163, v161, v130);
      uint64_t v138 = v162;
      unint64_t v55 = v420;
      if (v162)
      {
        swift_bridgeObjectRelease(v414);
        goto LABEL_67;
      }

      uint64_t v196 = v164;
      swift_bridgeObjectRelease(v134);
      if ((v196 & 0x100000000LL) != 0 || (uint64_t v197 = sub_100090068(), *v197 == (_DWORD)v196))
      {
        uint64_t v198 = *((void *)&v432[1] + 1);
        uint64_t v419 = *(void *)&v432[2];
        sub_100005110(v432, *((uint64_t *)&v432[1] + 1));
        uint64_t v199 = sub_1000D4150(v74);
        uint64_t v134 = v200;
        uint64_t v201 = v397;
        sub_1000E2530(v199, v200, v202, v198, v419, v397);
        uint64_t v135 = v201;
        goto LABEL_81;
      }

      v378 = v197;
      swift_bridgeObjectRelease(v414);
      v428 = 0LL;
      unint64_t v429 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(79LL);
      v379._countAndFlagsBits = 0xD000000000000036LL;
      v379._uint64_t object = (void *)0x8000000100122DE0LL;
      String.append(_:)(v379);
      LODWORD(v425) = v196;
      v380._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      v381 = v380._object;
      String.append(_:)(v380);
      swift_bridgeObjectRelease(v381);
      v382._uint64_t object = (void *)0x8000000100122E20LL;
      v382._countAndFlagsBits = 0xD000000000000015LL;
      String.append(_:)(v382);
      LODWORD(v425) = *v378;
      v383._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      v384 = v383._object;
      String.append(_:)(v383);
      swift_bridgeObjectRelease(v384);
      uint64_t v91 = (uint64_t)v428;
      unint64_t v385 = v429;
      unint64_t v386 = sub_100012624();
      uint64_t v138 = swift_allocError(&type metadata for KMError, v386, 0LL, 0LL);
      *(void *)uint64_t v387 = v91;
      *(void *)(v387 + 8) = v385;
      *(_OWORD *)(v387 + 16) = 0u;
      *(_OWORD *)(v387 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v387 + 48) = 0u;
      *(void *)(v387 + 64) = 0LL;
      *(_BYTE *)(v387 + 7sub_100006034(v0 + 2) = 16;
      swift_willThrow(v138);
    }

    sub_100006034(v432);
  }

  else
  {
    swift_bridgeObjectRelease(v414);
    sub_100012824((uint64_t)&v425, &qword_100158910);
    sub_100006034(&v428);
    *(void *)&v432[0] = 0LL;
    *((void *)&v432[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(54LL);
    v140._countAndFlagsBits = 0xD00000000000001ALL;
    v140._uint64_t object = (void *)0x8000000100122D10LL;
    String.append(_:)(v140);
    v141._countAndFlagsBits = v116;
    v141._uint64_t object = v118;
    String.append(_:)(v141);
    swift_bridgeObjectRelease(v118);
    v142._countAndFlagsBits = 0xD000000000000017LL;
    v142._uint64_t object = (void *)0x8000000100122D30LL;
    String.append(_:)(v142);
    unint64_t v55 = v420;
    v143._countAndFlagsBits = (*(uint64_t (**)(void))(*v420 + 200LL))();
    BOOL v144 = v143._object;
    String.append(_:)(v143);
    swift_bridgeObjectRelease(v144);
    uint64_t v111 = 46LL;
    unint64_t v112 = 0xE100000000000000LL;
LABEL_39:
    String.append(_:)(*(Swift::String *)&v111);
    unint64_t v145 = *((void *)&v432[0] + 1);
    uint64_t v91 = *(void *)&v432[0];
    unint64_t v146 = sub_100012624();
    uint64_t v138 = swift_allocError(&type metadata for KMError, v146, 0LL, 0LL);
    *(_OWORD *)uint64_t v147 = __PAIR128__(v145, v91);
    *(_OWORD *)(v147 + 16) = 0u;
    *(_OWORD *)(v147 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v147 + 48) = 0u;
    *(void *)(v147 + 64) = 0LL;
    *(_BYTE *)(v147 + 7sub_100006034(v0 + 2) = 10;
    swift_willThrow(v138);
  }

  v428 = (void *)v138;
  swift_errorRetain(v138);
  uint64_t v203 = sub_100005FB4(&qword_10015AB20);
  uint64_t v91 = *((void *)&v432[0] + 1);
  uint64_t v204 = *(void *)&v432[0];
  if (BYTE8(v432[4]) != 10)
  {
    sub_100039508( *(uint64_t *)&v432[0],  *((uint64_t *)&v432[0] + 1),  *(uint64_t *)&v432[1],  *((uint64_t *)&v432[1] + 1),  *(unint64_t *)&v432[2],  *((uint64_t *)&v432[2] + 1),  *(uint64_t *)&v432[3],  *((uint64_t *)&v432[3] + 1),  *(uint64_t *)&v432[4],  SBYTE8(v432[4]));
LABEL_74:
    uint64_t v219 = swift_errorRelease(v428);
    swift_willThrow(v219);
    swift_release(v55);
    sub_100012824((uint64_t)v436, &qword_1001588F0);
    sub_100012824((uint64_t)&v438, &qword_100157FF0);
    goto LABEL_75;
  }

  uint64_t v205 = swift_errorRelease(v138);
  if ((v401 & 1) != 0)
  {
    uint64_t v419 = 0LL;
    uint64_t v139 = (uint64_t)v417;
    uint64_t v206 = static os_log_type_t.info.getter(v205);
    uint64_t v207 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v208 = swift_allocObject(v207, 72LL, 7LL);
    __int128 v414 = xmmword_10010F110;
    *(_OWORD *)(v208 + 16) = xmmword_10010F110;
    *(void *)(v208 + 56) = &type metadata for String;
    unint64_t v209 = sub_100026B64();
    *(void *)(v208 + 64) = v209;
    *(void *)(v208 + 3sub_100006034(v0 + 2) = v204;
    *(void *)(v208 + 40) = v91;
    unint64_t v210 = sub_100026BA8();
    v211 = (void *)static OS_os_log.default.getter(v210);
    os_log(_:dso:log:_:_:)( v206,  &_mh_execute_header,  v211,  "Encountered errors while reading executables: %{public}s",  56LL,  2LL,  v208);
    swift_bridgeObjectRelease(v208);

    uint64_t v213 = static os_log_type_t.info.getter(v212);
    uint64_t v214 = swift_allocObject(v207, 72LL, 7LL);
    *(_OWORD *)(v214 + 16) = v414;
    uint64_t v215 = (*(uint64_t (**)(void))(*v420 + 200LL))();
    *(void *)(v214 + 56) = &type metadata for String;
    *(void *)(v214 + 64) = v209;
    *(void *)(v214 + 3sub_100006034(v0 + 2) = v215;
    *(void *)(v214 + 40) = v216;
    Swift::String v217 = (void *)static OS_os_log.default.getter(v215);
    uint64_t v218 = v213;
    uint64_t v67 = (uint64_t)v442;
    unint64_t v55 = v420;
    os_log(_:dso:log:_:_:)( v218,  &_mh_execute_header,  v217,  "realizedInfo for (%{public}s) may not contain info on uuid or bundleArch",  72LL,  2LL,  v214);
    swift_bridgeObjectRelease(v214);

    swift_errorRelease(v428);
    *(void *)&__int128 v414 = 0LL;
    goto LABEL_82;
  }

  unint64_t v220 = sub_100012624();
  uint64_t v221 = swift_allocError(&type metadata for KMError, v220, 0LL, 0LL);
  *(void *)uint64_t v222 = v204;
  *(void *)(v222 + 8) = v91;
  *(_OWORD *)(v222 + 16) = 0u;
  *(_OWORD *)(v222 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v222 + 48) = 0u;
  *(void *)(v222 + 64) = 0LL;
  *(_BYTE *)(v222 + 7sub_100006034(v0 + 2) = 10;
  swift_willThrow(v221);
  swift_release(v55);
  sub_100012824((uint64_t)v436, &qword_1001588F0);
  sub_100012824((uint64_t)&v438, &qword_100157FF0);
  swift_errorRelease(v428);
LABEL_75:
  sub_100012824((uint64_t)v417, &qword_1001588F8);
  return v91;
}

uint64_t sub_100032014(void *a1)
{
  Swift::String v2 = (void *)v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v8 = *(_DWORD *)(v1 + 640);
  LODWORD(v33[0]) = *(_DWORD *)sub_1000A44B4();
  int v36 = v8;
  unint64_t v9 = sub_100012B34();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v33, &type metadata for ExtensionManager.Settings.Flags, v9) & 1) != 0) {
    return 2LL;
  }
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100005110(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 64))(v11, v12);
  uint64_t v14 = URL.path.getter(v13);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((sub_1000D8050() & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100005110(a1, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  unint64_t v21 = v20;
  LOBYTE(v17) = sub_1000D5520(0LL, 1LL, v19, v20);
  sub_10003783C(v19, v21);
  if ((v17 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v22 = v2 + 2;
  uint64_t v23 = v2[5];
  uint64_t v24 = v2[6];
  sub_100005110(v22, v23);
  sub_1001073DC(v23, v24);
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  sub_100005110(v33, v34);
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 232))(v14, v16, v25, v26);
  uint64_t v27 = sub_100006034(v33);
  if ((v23 & 1) != 0)
  {
    uint64_t v28 = static os_log_type_t.default.getter(v27);
    uint64_t v29 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_10010F110;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_100026B64();
    *(void *)(v30 + 3sub_100006034(v0 + 2) = v14;
    *(void *)(v30 + 40) = v16;
    sub_100026BA8();
    uint64_t v31 = (void *)static OS_os_log.default.getter();
    uint64_t v10 = 2LL;
    os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  v31,  "Will skip code sign validation of dext in the ARV at %{public}s",  63LL,  2LL,  v30);
    swift_bridgeObjectRelease(v30);
  }

  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v16);
    return 0LL;
  }

  return v10;
}

uint64_t sub_100032278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v6);
  int v8 = (char *)&v40[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001A148(a2, (uint64_t)v8, (uint64_t *)&unk_10015BA30);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if ((_DWORD)v11 == 1)
  {
    uint64_t v12 = sub_100012824((uint64_t)v8, (uint64_t *)&unk_10015BA30);
    uint64_t v13 = static os_log_type_t.info.getter(v12);
    uint64_t v14 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_10010F110;
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)a1 + 200LL))();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_100026B64();
    *(void *)(v15 + 3sub_100006034(v0 + 2) = v16;
    *(void *)(v15 + 40) = v18;
    sub_100026BA8();
    uint64_t v19 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v19,  "No unstagedURL found for %{public}s, cannot determine if absent executables are okay",  84LL,  2LL,  v15);
LABEL_3:
    swift_bridgeObjectRelease(v15);

    goto LABEL_5;
  }

  uint64_t v20 = URL.path.getter(v11);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  uint64_t v23 = v3[5];
  uint64_t v24 = v3[6];
  sub_100005110(v3 + 2, v23);
  sub_1001073DC(v23, v24);
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  sub_100005110(v40, v41);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 152))(v20, v22, v25, v26);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease(v22);
  if (!v31)
  {
    uint64_t v33 = sub_100006034(v40);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    uint64_t v35 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v15 = swift_allocObject(v35, 72LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_10010F110;
    uint64_t v36 = (*(uint64_t (**)(void))(*(void *)a1 + 200LL))();
    uint64_t v38 = v37;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_100026B64();
    *(void *)(v15 + 3sub_100006034(v0 + 2) = v36;
    *(void *)(v15 + 40) = v38;
    sub_100026BA8();
    uint64_t v19 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v19,  "Could not get unstaged real path for %{public}s, cannot determine if absent executables are okay",  96LL,  2LL,  v15);
    goto LABEL_3;
  }

  uint64_t v32 = sub_100006034(v40);
  if (((*(uint64_t (**)(uint64_t))(*v3 + 440LL))(v32) & 1) != 0
    && ((*(uint64_t (**)(void))(*(void *)a1 + 208LL))() & 1) != 0)
  {
    char v27 = sub_100032F98(0xD00000000000001ALL, 0x80000001001230C0LL, v29, v31);
    swift_bridgeObjectRelease(v31);
    return v27 & 1;
  }

  swift_bridgeObjectRelease(v31);
LABEL_5:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_100032674(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  BOOL v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL) & 1) != 0) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = a3 + 7;
  uint64_t v13 = 1LL;
  while (1)
  {
    if (v3 == v13) {
      return 0LL;
    }
    ++v11;
    uint64_t v14 = *(v12 - 1);
    uint64_t v15 = *v12;
    if (v14 == a1 && v15 == a2) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL);
    uint64_t result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0) {
      return result;
    }
  }

  return v11;
}

void sub_100032758(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100005FB4(&qword_1001588F8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  char v17 = (char *)&v100 - v16;
  uint64_t v18 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  if ((a3 & 1) != 0)
  {
    unint64_t v39 = sub_100012624();
    uint64_t v40 = swift_allocError(&type metadata for KMError, v39, 0LL, 0LL);
    *(void *)uint64_t v41 = 0xD000000000000036LL;
    *(void *)(v41 + 8) = 0x8000000100122FF0LL;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(void *)(v41 + 64) = 0LL;
    *(_BYTE *)(v41 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v40);
    return;
  }

  if (*(_DWORD *)a1 != -2147483595) {
    return;
  }
  uint64_t v110 = v21;
  uint64_t v111 = (uint64_t)&v100 - v20;
  uint64_t v23 = String.init(cString:)(a2 + *(unsigned int *)(a1 + 24));
  uint64_t v24 = v22;
  if (!*(void *)(a4 + 16)) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain(v22);
  unint64_t v25 = sub_100006114(v23, v24);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease(v24);
LABEL_11:
    uint64_t v42 = sub_100090104();
    uint64_t v43 = v42[1];
    if (v23 == *v42 && v24 == v43
      || (uint64_t v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, *v42, v43, 0LL), (v44 & 1) != 0))
    {
      swift_bridgeObjectRelease(v24);
    }

    else
    {
      uint64_t v45 = static os_log_type_t.info.getter(v44);
      uint64_t v46 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v47 = swift_allocObject(v46, 72LL, 7LL);
      *(_OWORD *)(v47 + 16) = xmmword_10010F110;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = sub_100026B64();
      *(void *)(v47 + 3sub_100006034(v0 + 2) = v23;
      *(void *)(v47 + 40) = v24;
      unint64_t v48 = sub_100026BA8();
      unint64_t v49 = (void *)static OS_os_log.default.getter(v48);
      os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  v49,  "Fileset entry found for %{public}s, but not included in prelink info",  68LL,  2LL,  v47);
      swift_bridgeObjectRelease(v47);
    }

    return;
  }

  uint64_t v108 = (void *)(a6 + 16);
  uint64_t v27 = *(void *)(*(void *)(a4 + 56) + 8 * v25);
  swift_retain(v27);
  swift_bridgeObjectRelease_n(v24, 2LL);
  uint64_t v120 = 0LL;
  memset(v119, 0, sizeof(v119));
  uint64_t v118 = 0LL;
  memset(v117, 0, sizeof(v117));
  int v28 = *(_DWORD *)(a5 + 640);
  LODWORD(v116[0]) = *sub_1000A4694();
  LODWORD(v103) = v28;
  v115[0] = v28;
  unint64_t v29 = sub_100012B34();
  char v30 = dispatch thunk of SetAlgebra.isSuperset(of:)(v116, &type metadata for ExtensionManager.Settings.Flags, v29);
  uint64_t v31 = 0LL;
  uint64_t v109 = v27;
  if ((v30 & 1) != 0)
  {
    uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v27 + 144LL))();
    uint64_t v34 = v33;
    uint64_t v35 = (*(uint64_t (**)(void))(*(void *)a5 + 216LL))();
    uint64_t v36 = *(void *)(v35 + 16);
    uint64_t v107 = v34;
    if (v36 && (unint64_t v37 = sub_100006114(v32, v34), (v38 & 1) != 0))
    {
      uint64_t v31 = *(void *)(*(void *)(v35 + 56) + 8 * v37);
      swift_bridgeObjectRetain(v31);
    }

    else
    {
      uint64_t v31 = 0LL;
    }

    uint64_t v27 = v109;
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v35);
  }

  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v100 = v31;
  uint64_t v101 = v50;
  uint64_t v51 = type metadata accessor for URL(0LL);
  uint64_t v52 = v111;
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))( v111,  1LL,  1LL,  v51);
  (*(void (**)(uint64_t))(*(void *)v27 + 248LL))(v53);
  uint64_t v54 = *(void *)(a5 + 152);
  uint64_t v55 = *(void *)(a5 + 160);
  uint64_t v56 = *(void *)(a5 + 168);
  uint64_t v106 = *(void *)(a5 + 176);
  uint64_t v107 = v55;
  uint64_t v104 = *(void *)(a5 + 184);
  uint64_t v105 = v56;
  uint64_t v57 = *(void *)(a5 + 224);
  __int128 v58 = *(_OWORD *)(a5 + 472);
  v116[25] = *(_OWORD *)(a5 + 456);
  v116[26] = v58;
  *(void *)&v116[27] = *(void *)(a5 + 488);
  __int128 v59 = *(_OWORD *)(a5 + 408);
  v116[21] = *(_OWORD *)(a5 + 392);
  v116[22] = v59;
  __int128 v60 = *(_OWORD *)(a5 + 440);
  v116[23] = *(_OWORD *)(a5 + 424);
  v116[24] = v60;
  __int128 v61 = *(_OWORD *)(a5 + 344);
  v116[17] = *(_OWORD *)(a5 + 328);
  v116[18] = v61;
  __int128 v62 = *(_OWORD *)(a5 + 376);
  v116[19] = *(_OWORD *)(a5 + 360);
  v116[20] = v62;
  __int128 v63 = *(_OWORD *)(a5 + 280);
  v116[13] = *(_OWORD *)(a5 + 264);
  v116[14] = v63;
  __int128 v64 = *(_OWORD *)(a5 + 312);
  v116[15] = *(_OWORD *)(a5 + 296);
  v116[16] = v64;
  __int128 v65 = *(_OWORD *)(a5 + 72);
  v116[0] = *(_OWORD *)(a5 + 56);
  v116[1] = v65;
  __int128 v66 = *(_OWORD *)(a5 + 104);
  v116[2] = *(_OWORD *)(a5 + 88);
  v116[3] = v66;
  __int128 v67 = *(_OWORD *)(a5 + 136);
  v116[4] = *(_OWORD *)(a5 + 120);
  v116[5] = v67;
  __int128 v68 = *(_OWORD *)(a5 + 208);
  *(_OWORD *)((char *)&v116[8] + 8) = *(_OWORD *)(a5 + 192);
  __int128 v69 = *(_OWORD *)(a5 + 248);
  char v70 = *(_BYTE *)(a5 + 644);
  *(void *)&v116[6] = v54;
  *((void *)&v116[6] + 1) = v55;
  v116[7] = __PAIR128__(v106, v56);
  *(_OWORD *)((char *)&v116[9] + 8) = v68;
  *(void *)&v116[8] = v104;
  *((void *)&v116[10] + 1) = v57;
  v116[11] = *(_OWORD *)(a5 + 232);
  v116[12] = v69;
  __int128 v71 = *(_OWORD *)(a5 + 512);
  *(_OWORD *)((char *)&v116[27] + 8) = *(_OWORD *)(a5 + 496);
  *(_OWORD *)((char *)&v116[28] + 8) = v71;
  __int128 v72 = *(_OWORD *)(a5 + 544);
  *(_OWORD *)((char *)&v116[29] + 8) = *(_OWORD *)(a5 + 528);
  *(_OWORD *)((char *)&v116[30] + 8) = v72;
  __int128 v73 = *(_OWORD *)(a5 + 576);
  *(_OWORD *)((char *)&v116[31] + 8) = *(_OWORD *)(a5 + 560);
  *(_OWORD *)((char *)&v116[32] + 8) = v73;
  __int128 v74 = *(_OWORD *)(a5 + 608);
  *(_OWORD *)((char *)&v116[33] + 8) = *(_OWORD *)(a5 + 592);
  *(_OWORD *)((char *)&v116[34] + 8) = v74;
  *(_OWORD *)((char *)&v116[35] + 8) = *(_OWORD *)(a5 + 624);
  DWORD2(v116[36]) = v103;
  BYTE12(v116[36]) = v70;
  memcpy(v121, v116, 0x24DuLL);
  sub_10001A148((uint64_t)v119, (uint64_t)v115, &qword_100157FF0);
  sub_10001A148((uint64_t)v117, (uint64_t)v114, &qword_1001588F0);
  uint64_t v75 = (uint64_t)v17;
  uint64_t v102 = v17;
  sub_10001A148((uint64_t)v17, (uint64_t)v15, &qword_1001588F8);
  swift_retain_n(v27, 2LL);
  sub_100037850(v116);
  swift_retain(v27);
  sub_100037850(v116);
  uint64_t v101 = sub_1000371F0(v27, v101, 0LL, v100, (uint64_t)v15, (uint64_t)v121);
  uint64_t v103 = v76;
  uint64_t v78 = v77 & 0xFF01;
  uint64_t v79 = v110;
  sub_10001A148(v52, v110, (uint64_t *)&unk_10015BA30);
  sub_10001A148(v75, (uint64_t)v15, &qword_1001588F8);
  uint64_t v80 = type metadata accessor for RealizedInfo(0LL);
  uint64_t v81 = swift_allocObject(v80, *(unsigned int *)(v80 + 48), *(unsigned __int16 *)(v80 + 52));
  *(void *)(v81 + 16) = 0LL;
  *(_OWORD *)(v81 + 96) = 0u;
  *(_OWORD *)(v81 + 11sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v81 + 80) = 0u;
  *(void *)(v81 + 128) = 0LL;
  *(void *)(v81 + 136) = 1LL;
  *(void *)(v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v81 + 24) = v109;
  sub_1000263D8((uint64_t)v115, v81 + 32, &qword_100157FF0);
  *(_BYTE *)(v81 + 7sub_100006034(v0 + 2) = 0;
  swift_beginAccess(v81 + 80, v113, 33LL, 0LL);
  sub_1000395F4((uint64_t)v114, v81 + 80, &qword_1001588F0);
  swift_endAccess(v113);
  swift_beginAccess(v81 + 120, v113, 1LL, 0LL);
  uint64_t v82 = *(void *)(v81 + 120);
  uint64_t v83 = *(void *)(v81 + 128);
  uint64_t v84 = *(void *)(v81 + 136);
  *(void *)(v81 + 120) = v101;
  *(void *)(v81 + 128) = v78;
  uint64_t v85 = v109;
  *(void *)(v81 + 136) = v103;
  sub_1000373A8(v82, v83, v84);
  sub_1000263D8(v79, v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA30);
  uint64_t v86 = v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v86 = 0LL;
  *(_BYTE *)(v86 + 8) = 1;
  sub_1000263D8((uint64_t)v15, v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_1001588F8);
  *(void *)(v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0LL;
  swift_beginAccess(v81 + 16, &v112, 1LL, 0LL);
  *(void *)(v81 + 16) = 0LL;
  uint64_t v87 = type metadata accessor for DriverExtension(0LL);
  uint64_t v88 = swift_dynamicCastClass(v85, v87);
  if (v88) {
    uint64_t v89 = v104;
  }
  else {
    uint64_t v89 = v105;
  }
  if (v88) {
    uint64_t v90 = v106;
  }
  else {
    uint64_t v90 = v107;
  }
  swift_bridgeObjectRetain(v89);
  swift_retain(v81);
  uint64_t v91 = sub_10002EC14(v90, v89, 0);
  swift_bridgeObjectRelease(v89);
  uint64_t v92 = v111;
  sub_10001A148(v111, v79, (uint64_t *)&unk_10015BA30);
  unint64_t v93 = sub_100037BF4(v85, v91, v79, 0, v121);
  sub_10003916C(v116);
  swift_release(v81);
  swift_release(v85);
  sub_100012824((uint64_t)v102, &qword_1001588F8);
  sub_100012824(v92, (uint64_t *)&unk_10015BA30);
  sub_100012824((uint64_t)v117, &qword_1001588F0);
  sub_100012824((uint64_t)v119, &qword_100157FF0);
  *(void *)(v81 + 16) = v93;
  v114[0] = v81;
  sub_100089ACC(v114);
  sub_10008D568(v114);
  uint64_t v94 = v114[0];
  uint64_t v95 = v108;
  swift_beginAccess(v108, v115, 33LL, 0LL);
  uint64_t v96 = swift_retain(v94);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v96);
  unint64_t v98 = *(void *)((*v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v97 = *(void *)((*v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v98 >= v97 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1LL);
  }
  uint64_t v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v94);
  specialized Array._endMutation()(v99);
  swift_endAccess(v115);
  swift_release(v94);
  swift_release(v85);
}

uint64_t sub_100032F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    uint64_t object = v5.value._object;
    do
    {
      Swift::String_optional v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1LL;
      }

      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }

      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  v10.value._countAndFlagsBits,  v10.value._object,  0LL);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0LL;
        }
      }

      Swift::String_optional v9 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
      uint64_t object = v9.value._object;
    }

    while (v9.value._object);
  }

  swift_bridgeObjectRelease(a4);
  uint64_t v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  BOOL v12 = v11 == 0LL;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t sub_1000330FC(uint64_t a1)
{
  uint64_t v166 = a1;
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v154 = v1;
  uint64_t v155 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v149 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v150 = (char *)&v145 - v5;
  uint64_t v6 = sub_100005FB4(&qword_1001588F8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v148 = (uint64_t)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v147 = (uint64_t)&v145 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v151 = (uint64_t)&v145 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v160 = (uint64_t *)((char *)&v145 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v159 = (uint64_t)&v145 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v158 = (uint64_t)&v145 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v152 = (uint64_t)&v145 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v153 = (uint64_t)&v145 - v22;
  __chkstk_darwin(v21);
  uint64_t v156 = (uint64_t)&v145 - v23;
  uint64_t v24 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  int v28 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  char v30 = (char *)&v145 - v29;
  uint64_t v31 = type metadata accessor for OSSignposter(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v145 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_1000D3540();
  uint64_t v163 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v35, v31);
  uint64_t v36 = sub_100090284();
  unint64_t v37 = *v36;
  char v38 = *((_BYTE *)v36 + 16);
  uint64_t v39 = static OSSignpostID.exclusive.getter(v36);
  uint64_t v162 = v34;
  uint64_t v40 = (void *)OSSignposter.logHandle.getter(v39);
  LODWORD(v161) = static os_signpost_type_t.begin.getter(v40);
  char v41 = OS_os_log.signpostsEnabled.getter();
  uint64_t v164 = (void *)v31;
  if ((v41 & 1) == 0) {
    goto LABEL_5;
  }
  if ((v38 & 1) != 0)
  {
    unint64_t v37 = &v170;
  }

  else if (!v37)
  {
    __break(1u);
LABEL_5:

    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    uint64_t v43 = v25;
    goto LABEL_11;
  }

  uint64_t v43 = v25;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v42(v28, v30, v24);
  uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v44 = 0;
  os_signpost_id_t v45 = OSSignpostID.rawValue.getter(v44);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  (os_signpost_type_t)v161,  v45,  v37,  "",  v44,  2u);
  swift_slowDealloc(v44, -1LL, -1LL);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v24);
LABEL_11:
  uint64_t v46 = v166;
  v42(v28, v30, v24);
  uint64_t v47 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  uint64_t v48 = OSSignpostIntervalState.init(id:isOpen:)(v28, 1LL);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v24);
  uint64_t v49 = (*(uint64_t (**)(char *, void *))(v163 + 8))(v162, v164);
  uint64_t v50 = v165;
  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 128LL))(v49);
  if (v50)
  {
LABEL_41:
    sub_100033E00(v48);
    swift_release(v48);
    return v43;
  }

  uint64_t v52 = v51;
  type metadata accessor for KernelCollection(0LL);
  unsigned __int8 v53 = *(_BYTE *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  uint64_t v55 = v158;
  uint64_t v54 = v159;
  uint64_t v56 = (void (*)(void, void, void))v160;
  sub_10004B1F0( v158,  v159,  (uint64_t)v160,  v52,  *(void *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch),  *(void *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8),  v53);
  uint64_t v146 = 0LL;
  uint64_t v161 = v48;
  uint64_t v57 = v156;
  sub_1000263D8(v55, v156, &qword_1001588F8);
  uint64_t v58 = v54;
  uint64_t v59 = v153;
  sub_1000263D8(v58, v153, &qword_1001588F8);
  uint64_t v60 = v152;
  sub_1000263D8((uint64_t)v56, v152, &qword_1001588F8);
  uint64_t v61 = v151;
  sub_10001A148(v57, v151, &qword_1001588F8);
  uint64_t v63 = v154;
  uint64_t v62 = v155;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v61, 1LL, v154) == 1)
  {
    swift_bridgeObjectRelease(v52);
    sub_100012824(v61, &qword_1001588F8);
    uint64_t v64 = sub_1000D42D4(v53);
    uint64_t v43 = v65;
    unint64_t v66 = sub_100012624();
    uint64_t v67 = swift_allocError(&type metadata for KMError, v66, 0LL, 0LL);
    *(void *)uint64_t v68 = v64;
    *(void *)(v68 + 8) = v43;
    *(void *)(v68 + 16) = 0xD000000000000023LL;
    *(void *)(v68 + 24) = 0x8000000100122E80LL;
    *(_OWORD *)(v68 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v68 + 48) = 0u;
    *(void *)(v68 + 64) = 0LL;
    *(_BYTE *)(v68 + 7sub_100006034(v0 + 2) = 6;
    swift_willThrow(v67);
    sub_100012824(v60, &qword_1001588F8);
    sub_100012824(v59, &qword_1001588F8);
    uint64_t v69 = v57;
LABEL_40:
    sub_100012824(v69, &qword_1001588F8);
    uint64_t v48 = v161;
    goto LABEL_41;
  }

  uint64_t v160 = *(void **)(v62 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v160)(v150, v61, v63);
  char v70 = (uint64_t *)sub_10008FA84();
  __int128 v71 = v70;
  if (*(void *)(v52 + 16))
  {
    uint64_t v73 = *v70;
    uint64_t v72 = v70[1];
    swift_bridgeObjectRetain(v72);
    unint64_t v74 = sub_100006114(v73, v72);
    uint64_t v75 = v166;
    if ((v76 & 1) != 0)
    {
      sub_100006054(*(void *)(v52 + 56) + 32 * v74, (uint64_t)&v168);
    }

    else
    {
      __int128 v168 = 0u;
      __int128 v169 = 0u;
    }

    swift_bridgeObjectRelease(v72);
  }

  else
  {
    __int128 v168 = 0u;
    __int128 v169 = 0u;
    uint64_t v75 = v166;
  }

  swift_bridgeObjectRelease(v52);
  if (!*((void *)&v169 + 1))
  {
    sub_100012824((uint64_t)&v168, &qword_100157FF8);
    uint64_t v79 = v156;
    goto LABEL_39;
  }

  uint64_t v77 = sub_100005FB4(&qword_1001587B0);
  char v78 = swift_dynamicCast(&v167, &v168, (char *)&type metadata for Any + 8, v77, 6LL);
  uint64_t v79 = v156;
  if ((v78 & 1) == 0)
  {
LABEL_39:
    uint64_t v107 = sub_1000D42D4(v53);
    uint64_t v109 = v108;
    *(void *)&__int128 v168 = 0LL;
    *((void *)&v168 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease(*((void *)&v168 + 1));
    *(void *)&__int128 v168 = 0xD000000000000014LL;
    *((void *)&v168 + 1) = 0x8000000100122EB0LL;
    uint64_t v111 = *v71;
    uint64_t v110 = (void *)v71[1];
    swift_bridgeObjectRetain(v110);
    v112._uint64_t countAndFlagsBits = v111;
    v112._uint64_t object = v110;
    String.append(_:)(v112);
    swift_bridgeObjectRelease(v110);
    __int128 v113 = v168;
    unint64_t v114 = sub_100012624();
    uint64_t v43 = swift_allocError(&type metadata for KMError, v114, 0LL, 0LL);
    *(void *)uint64_t v115 = v107;
    *(void *)(v115 + 8) = v109;
    *(_OWORD *)(v115 + 16) = v113;
    *(_OWORD *)(v115 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v115 + 48) = 0u;
    *(void *)(v115 + 64) = 0LL;
    *(_BYTE *)(v115 + 7sub_100006034(v0 + 2) = 6;
    swift_willThrow(v43);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v63);
    sub_100012824(v60, &qword_1001588F8);
    sub_100012824(v59, &qword_1001588F8);
    uint64_t v69 = v79;
    goto LABEL_40;
  }

  uint64_t v80 = v167;
  unint64_t v81 = sub_10002F9C4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v164 = (void *)*((void *)v80 + 2);
  unint64_t v165 = v81;
  if (!v164)
  {
    uint64_t v83 = v157;
LABEL_45:
    swift_bridgeObjectRelease(v80);
    uint64_t v117 = *(void *)(v83 + 160);
    swift_bridgeObjectRetain(*(void *)(v83 + 168));
    uint64_t v118 = sub_1000D4150(v117);
    uint64_t v120 = v119;
    uint64_t v122 = v121;
    int v123 = *(_DWORD *)(v83 + 640);
    LODWORD(v168) = *sub_1000A46E4();
    LODWORD(v167) = v123;
    unint64_t v124 = sub_100012B34();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v168, &type metadata for ExtensionManager.Settings.Flags, v124) & 1) != 0)
    {
      uint64_t v125 = swift_allocObject(&unk_100146EC0, 24LL, 7LL);
      uint64_t v164 = v122;
      *(void *)(v125 + 16) = _swiftEmptyArrayStorage;
      uint64_t v163 = v118;
      uint64_t v126 = *(void *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
      uint64_t v127 = *(void *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
      sub_100005110((void *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data), v126);
      char v128 = (void *)swift_allocObject(&unk_100146EE8, 40LL, 7LL);
      uint64_t v129 = v120;
      uint64_t v130 = v165;
      v128[2] = v165;
      v128[3] = v83;
      v128[4] = v125;
      uint64_t v131 = *(void (**)(uint64_t, uint64_t, void *, uint64_t (*)(uint64_t, uint64_t, char), void *, uint64_t, uint64_t))(v127 + 24);
      swift_bridgeObjectRetain(v130);
      swift_retain(v83);
      swift_retain(v125);
      uint64_t v43 = v129;
      uint64_t v132 = v129;
      uint64_t v133 = v146;
      v131(v163, v132, v164, sub_1000398D0, v128, v126, v127);
      uint64_t v146 = v133;
      if (v133)
      {
        swift_bridgeObjectRelease(v130);
        swift_release(v125);
        swift_release(v128);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v154);
        sub_100012824(v152, &qword_1001588F8);
        sub_100012824(v153, &qword_1001588F8);
        sub_100012824(v156, &qword_1001588F8);
        uint64_t v48 = v161;
        goto LABEL_41;
      }

      swift_release(v128);
      swift_beginAccess(v125 + 16, &v168, 0LL, 0LL);
      uint64_t v164 = *(void **)(v125 + 16);
      swift_bridgeObjectRetain(v164);
      swift_release(v125);
      sub_100012824(v156, &qword_1001588F8);
      swift_bridgeObjectRelease(v130);
      uint64_t v136 = v43;
      uint64_t v59 = v153;
      uint64_t v63 = v154;
      uint64_t v60 = v152;
    }

    else
    {
      swift_bridgeObjectRelease(v120);
      uint64_t v134 = v165;
      uint64_t v135 = v146;
      uint64_t v164 = sub_100039640(v165, sub_100039638);
      uint64_t v146 = v135;
      sub_100012824(v156, &qword_1001588F8);
      uint64_t v136 = v134;
    }

    swift_bridgeObjectRelease(v136);
    uint64_t v137 = v149;
    uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))v160;
    ((void (*)(char *, char *, uint64_t))v160)(v149, v150, v63);
    uint64_t v139 = v59;
    uint64_t v140 = v147;
    sub_1000263D8(v139, v147, &qword_1001588F8);
    uint64_t v141 = v148;
    sub_1000263D8(v60, v148, &qword_1001588F8);
    uint64_t v142 = type metadata accessor for RealizedKernelCollection(0LL);
    uint64_t v43 = swift_allocObject(v142, *(unsigned int *)(v142 + 48), *(unsigned __int16 *)(v142 + 52));
    uint64_t v143 = v166;
    *(void *)(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = v166;
    v138(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid, v137, v63);
    sub_1000263D8( v140,  v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID,  &qword_1001588F8);
    sub_1000263D8( v141,  v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID,  &qword_1001588F8);
    *(void *)(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = v164;
    swift_retain(v143);
    uint64_t v144 = v161;
    sub_100033E00(v161);
    swift_release(v144);
    return v43;
  }

  uint64_t v163 = type metadata accessor for OSExtension(0LL);
  swift_bridgeObjectRetain(v80);
  uint64_t v82 = 0LL;
  uint64_t v83 = v157;
  uint64_t v162 = v80;
  while (1)
  {
    uint64_t v85 = *(void *)&v80[8 * v82 + 32];
    swift_bridgeObjectRetain(v85);
    uint64_t v86 = sub_1000F4B7C(v75, v85);
    if (v86) {
      break;
    }
    unint64_t v84 = v85;
LABEL_25:
    swift_bridgeObjectRelease(v84);
    if (v164 == (void *)++v82)
    {
      swift_bridgeObjectRelease(v80);
      uint64_t v59 = v153;
      uint64_t v63 = v154;
      uint64_t v60 = v152;
      goto LABEL_45;
    }
  }

  uint64_t v87 = v86;
  uint64_t v88 = (*(uint64_t (**)(void))(*(void *)v86 + 144LL))();
  uint64_t v90 = v89;
  swift_retain(v87);
  uint64_t v91 = v165;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v165);
  *(void *)&__int128 v168 = v91;
  unint64_t v94 = sub_100006114(v88, v90);
  uint64_t v95 = *(void *)(v91 + 16);
  BOOL v96 = (v93 & 1) == 0;
  uint64_t v97 = v95 + v96;
  if (!__OFADD__(v95, v96))
  {
    char v98 = v93;
    if (*(void *)(v91 + 24) >= v97)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100036310();
      }
    }

    else
    {
      sub_100035C74(v97, isUniquelyReferenced_nonNull_native);
      unint64_t v99 = sub_100006114(v88, v90);
      if ((v98 & 1) != (v100 & 1)) {
        goto LABEL_56;
      }
      unint64_t v94 = v99;
    }

    uint64_t v101 = (void *)v168;
    unint64_t v165 = v168;
    if ((v98 & 1) != 0)
    {
      uint64_t v102 = *(void *)(v168 + 56);
      swift_release(*(void *)(v102 + 8 * v94));
      *(void *)(v102 + 8 * v94) = v87;
    }

    else
    {
      *(void *)(v168 + 8 * (v94 >> 6) + 64) |= 1LL << v94;
      uint64_t v103 = (uint64_t *)(v101[6] + 16 * v94);
      *uint64_t v103 = v88;
      v103[1] = v90;
      *(void *)(v101[7] + 8 * v94) = v87;
      uint64_t v104 = v101[2];
      BOOL v105 = __OFADD__(v104, 1LL);
      uint64_t v106 = v104 + 1;
      if (v105) {
        goto LABEL_54;
      }
      v101[2] = v106;
      swift_bridgeObjectRetain(v90);
    }

    uint64_t v75 = v166;
    uint64_t v83 = v157;
    uint64_t v80 = v162;
    swift_bridgeObjectRelease(v85);
    swift_release(v87);
    swift_bridgeObjectRelease(v90);
    unint64_t v84 = 0x8000000000000000LL;
    goto LABEL_25;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100033E00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  uint64_t v40 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v39 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v9 = &v35[-v8];
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_1000D3540();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  uint64_t v15 = sub_100090284();
  char v41 = *v15;
  char v16 = *((_BYTE *)v15 + 16);
  uint64_t v17 = (void *)OSSignposter.logHandle.getter(v15);
  uint64_t v18 = OSSignpostIntervalState.signpostID.getter();
  int v36 = static os_signpost_type_t.end.getter(v18);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v20 = v11;
  if ((v16 & 1) != 0)
  {
    uint64_t v21 = v40;
    if (!((unint64_t)v41 >> 32))
    {
      if (v41 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return result;
      }

      if (v41 >> 16 <= 0x10)
      {
        uint64_t v22 = v5;
        char v41 = &v42;
        goto LABEL_10;
      }

LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v21 = v40;
  if (!v41)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v22 = v5;
LABEL_10:
  uint64_t v23 = swift_retain(a1);
  checkForErrorAndConsumeState(state:)(v23);
  swift_release(a1);
  uint64_t v24 = v37;
  uint64_t v25 = v21;
  uint64_t v26 = v21;
  uint64_t v27 = v38;
  int v28 = (*(uint64_t (**)(_BYTE *, uint64_t))(v37 + 88))(v25, v38);
  uint64_t v40 = (_BYTE *)v10;
  if (v28 == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v29 = "[Error] Interval already ended";
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v26, v27);
    uint64_t v29 = "";
  }

  uint64_t v30 = v20;
  uint64_t v31 = v39;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v39, v9, v4);
  uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v32 = 0;
  os_signpost_id_t v33 = OSSignpostID.rawValue.getter(v32);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  (os_signpost_type_t)v36,  v33,  v41,  v29,  v32,  2u);
  swift_slowDealloc(v32, -1LL, -1LL);

  uint64_t v34 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  v34(v9, v4);
  (*(void (**)(_BYTE *, _BYTE *))(v30 + 8))(v13, v40);
  return ((uint64_t (*)(_BYTE *, uint64_t))v34)(v31, v4);
}

  sub_10001226C(v4, v3);
  sub_10004DC94(v5, v2);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  char v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v2, 1LL, v15) == 1)
  {
    sub_100012824(v2, &qword_1001588F8);
    goto LABEL_18;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v1, v2, v15);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v1, 0LL, 1LL, v15);
}

          __break(1u);
          return result;
        }

  DEREncoderDestroy((void **)v8);
  DEREncoderDestroy(v12);
  return v9;
}

uint64_t sub_1000340F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005FB4(&qword_1001588F8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v60 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v61 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v56 - v19;
  memset(v68, 0, sizeof(v68));
  uint64_t v67 = 0LL;
  memset(v66, 0, sizeof(v66));
  uint64_t v21 = *(uint64_t (**)(__n128))(*(void *)a4 + 216LL);
  __n128 v22 = swift_bridgeObjectRetain(a2);
  uint64_t v23 = v21(v22);
  if (*(void *)(v23 + 16) && (unint64_t v24 = sub_100006114(a1, a2), (v25 & 1) != 0))
  {
    uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRetain(v26);
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  swift_bridgeObjectRelease(a2);
  uint64_t v27 = swift_bridgeObjectRelease(v23);
  (*(void (**)(uint64_t))(*(void *)a3 + 256LL))(v27);
  uint64_t v28 = type metadata accessor for URL(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v18, 1LL, v28) == 1)
  {
    sub_100012824((uint64_t)v18, (uint64_t *)&unk_10015BA30);
    uint64_t v30 = 1LL;
  }

  else
  {
    sub_100086458((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v28);
    uint64_t v30 = 0LL;
  }

  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v58 = v20;
  uint64_t v32 = v31(v20, v30, 1LL, v28);
  (*(void (**)(uint64_t))(*(void *)a3 + 248LL))(v32);
  memcpy(v69, (const void *)(a4 + 56), 0x24DuLL);
  sub_10001A148((uint64_t)v68, (uint64_t)v65, &qword_100157FF0);
  sub_10001A148((uint64_t)v66, (uint64_t)v64, &qword_1001588F0);
  uint64_t v33 = v60;
  sub_10001A148((uint64_t)v12, v60, &qword_1001588F8);
  swift_retain_n(a3, 2LL);
  sub_100037850(v69);
  swift_retain(a3);
  sub_100037850(v69);
  uint64_t v34 = sub_1000371F0(a3, 0LL, 1LL, v26, v33, (uint64_t)v69);
  uint64_t v56 = v35;
  uint64_t v59 = a4;
  uint64_t v37 = v36 & 0xFF01;
  uint64_t v38 = (uint64_t)v20;
  uint64_t v39 = v61;
  sub_10001A148(v38, v61, (uint64_t *)&unk_10015BA30);
  sub_10001A148((uint64_t)v12, v33, &qword_1001588F8);
  uint64_t v40 = type metadata accessor for RealizedInfo(0LL);
  uint64_t v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  *(void *)(v41 + 16) = 0LL;
  *(_OWORD *)(v41 + 96) = 0u;
  *(_OWORD *)(v41 + 11sub_100006034(v0 + 2) = 0u;
  uint64_t v57 = v12;
  *(_OWORD *)(v41 + 80) = 0u;
  *(void *)(v41 + 128) = 0LL;
  *(void *)(v41 + 136) = 1LL;
  *(void *)(v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(void *)(v41 + 24) = a3;
  sub_1000263D8((uint64_t)v65, v41 + 32, &qword_100157FF0);
  *(_BYTE *)(v41 + 7sub_100006034(v0 + 2) = 0;
  swift_beginAccess(v41 + 80, v63, 33LL, 0LL);
  sub_1000395F4((uint64_t)v64, v41 + 80, &qword_1001588F0);
  swift_endAccess(v63);
  swift_beginAccess(v41 + 120, v63, 1LL, 0LL);
  uint64_t v42 = *(void *)(v41 + 120);
  uint64_t v43 = *(void *)(v41 + 128);
  uint64_t v44 = *(void *)(v41 + 136);
  *(void *)(v41 + 120) = v34;
  *(void *)(v41 + 128) = v37;
  *(void *)(v41 + 136) = v56;
  sub_1000373A8(v42, v43, v44);
  sub_1000263D8(v39, v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA30);
  uint64_t v45 = v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(void *)uint64_t v45 = 0LL;
  *(_BYTE *)(v45 + 8) = 1;
  sub_1000263D8(v33, v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_1001588F8);
  *(void *)(v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0LL;
  swift_beginAccess(v41 + 16, &v62, 1LL, 0LL);
  *(void *)(v41 + 16) = 0LL;
  uint64_t v46 = type metadata accessor for DriverExtension(0LL);
  uint64_t v47 = swift_dynamicCastClass(a3, v46);
  uint64_t v48 = &v69[15];
  uint64_t v49 = &v69[16];
  if (!v47) {
    uint64_t v49 = &v69[14];
  }
  uint64_t v50 = *v49;
  if (!v47) {
    uint64_t v48 = &v69[13];
  }
  uint64_t v51 = *v48;
  swift_bridgeObjectRetain(*v49);
  swift_retain(v41);
  uint64_t v52 = sub_10002EC14(v51, v50, 0);
  swift_bridgeObjectRelease(v50);
  uint64_t v53 = (uint64_t)v58;
  sub_10001A148((uint64_t)v58, v39, (uint64_t *)&unk_10015BA30);
  uint64_t v54 = sub_100037BF4(a3, v52, v39, 0, v69);
  sub_10003916C(v69);
  swift_release(v41);
  swift_release(a3);
  sub_100012824((uint64_t)v57, &qword_1001588F8);
  sub_100012824(v53, (uint64_t *)&unk_10015BA30);
  sub_100012824((uint64_t)v66, &qword_1001588F0);
  sub_100012824((uint64_t)v68, &qword_100157FF0);
  *(void *)(v41 + 16) = v54;
  v68[0] = v41;
  sub_100089ACC(v68);
  sub_10008D568(v68);
  return v68[0];
}

uint64_t sub_10003464C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL sub_100034710(void *a1, void *a2)
{
  return sub_1000398F4(a1, a2, 1);
}

BOOL sub_100034718(void **a1, void **a2)
{
  return sub_1000398F4(*a1, *a2, 1);
}

uint64_t sub_100034734(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v7 = (unint64_t)a2 >> 62;
LABEL_39:
    if (a2 < 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a2);
    if (v6 != v22) {
      return 0;
    }
    goto LABEL_4;
  }

LABEL_47:
  uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  uint64_t v11 = (void *)result;
  unint64_t v13 = a2 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) != 0) {
    goto LABEL_48;
  }
LABEL_17:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v5 = *(void **)(a2 + 32);
    swift_retain(v5);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    swift_once(&qword_1001626F0, sub_10007790C);
    goto LABEL_34;
  }

  unint64_t v24 = 5LL;
  while (1)
  {
    uint64_t v9 = v24 - 4;
    if (*(void *)(v7 + 8 * v24) == v3) {
      break;
    }
    char v25 = v24 - 3;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_43;
    }
    ++v24;
    if (v25 == v8)
    {
      uint64_t v9 = *(void *)(*v5 + 16);
      goto LABEL_30;
    }
  }

  __break(1u);
LABEL_48:
  uint64_t v30 = sub_1000298C8(0LL, *((void *)v30 + 2) + 1LL, 1, v30);
LABEL_33:
  uint64_t v60 = v30;
  uint64_t v61 = *((void *)v30 + 2);
  uint64_t v62 = v60;
  uint64_t v63 = *((void *)v60 + 3);
  if (v61 >= v63 >> 1) {
    uint64_t v62 = sub_1000298C8((char *)(v63 > 1), v61 + 1, 1, v62);
  }
  *((void *)v62 + sub_100006034(v0 + 2) = v61 + 1;
  uint64_t v64 = &v62[32 * v61];
  uint64_t v30 = v62;
  *((void *)v64 + 4) = v24;
  *((void *)v64 + 5) = v17;
  *((void *)v64 + 6) = v22;
  *((void *)v64 + 7) = v5;
LABEL_36:
  uint64_t v65 = *((void *)v30 + 2);
  if (v65)
  {
    uint64_t v85 = v30;
    unint64_t v66 = (uint64_t *)(v30 + 56);
    uint64_t v68 = v87;
    uint64_t v67 = (uint64_t)v88;
    uint64_t v69 = v86;
    do
    {
      uint64_t v90 = v65;
      char v70 = *v66;
      uint64_t v91 = *(v66 - 1);
      __int128 v71 = (char *)*(v66 - 2);
      uint64_t v95 = *(v66 - 3);
      uint64_t v72 = v95;
      BOOL v96 = v71;
      uint64_t v97 = v91;
      char v98 = v70;
      swift_bridgeObjectRetain(v70);
      uint64_t v73 = sub_10009189C();
      unint64_t v74 = (char *)*((void *)v73 + 1);
      char v93 = *(void *)v73;
      unint64_t v94 = v74;
      v69(v67, 1LL, 1LL, v68);
      uint64_t v75 = sub_100072818();
      swift_bridgeObjectRetain(v74);
      char v76 = v89;
      StringProtocol.range<A>(of:options:range:locale:)( &v93,  1024LL,  0LL,  0LL,  1LL,  v67,  &type metadata for Substring,  &type metadata for String,  v75,  v89);
      LODWORD(v9sub_100006034(v0 + 2) = v77;
      sub_100012824(v67, &qword_1001587C0);
      swift_bridgeObjectRelease(v94);
      uint64_t v95 = v72;
      BOOL v96 = v71;
      char v78 = v76;
      uint64_t v97 = v91;
      char v98 = v70;
      uint64_t v79 = (unint64_t *)sub_1000918A8();
      uint64_t v80 = v79[1];
      char v93 = *v79;
      unint64_t v94 = (char *)v80;
      v69(v67, 1LL, 1LL, v68);
      swift_bridgeObjectRetain(v80);
      StringProtocol.range<A>(of:options:range:locale:)( &v93,  1024LL,  0LL,  0LL,  1LL,  v67,  &type metadata for Substring,  &type metadata for String,  v75,  v78);
      uint64_t v82 = v81;
      sub_100012824(v67, &qword_1001587C0);
      uint64_t v83 = v94;
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v83);
      if ((v92 & 1) != 0 && (v82 & 1) != 0)
      {
        uint64_t v35 = v85;
        goto LABEL_10;
      }

      v66 += 4;
      uint64_t v65 = v90 - 1;
    }

    while (v90 != 1);
    unint64_t v84 = v85;
  }

  else
  {
    unint64_t v84 = v30;
  }

  swift_bridgeObjectRelease(v84);
  return 1LL;
}

uint64_t sub_1000349B4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000368D8(*a1, *a2);
}

void sub_1000349C0(uint64_t a1)
{
  uint64_t v17 = *(void *)(v1 + 24);
  uint64_t v3 = type metadata accessor for OSExtension(0LL);
  uint64_t v4 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  sub_10001A148(v1 + 32, (uint64_t)&v17, &qword_100157FF0);
  uint64_t v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    sub_100005110(&v17, v19);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    unint64_t v9 = v8;
    sub_100006034(&v17);
    uint64_t v17 = v7;
    unint64_t v18 = v9;
    Hasher._combine(_:)(1u);
    unint64_t v10 = sub_10002B5C4();
    dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningHash, v10);
    sub_10001226C(v7, v9);
  }

  else
  {
    sub_100012824((uint64_t)&v17, &qword_100157FF0);
    Hasher._combine(_:)(0);
  }

  sub_10001A148(v1 + 32, (uint64_t)&v17, &qword_100157FF0);
  uint64_t v11 = v19;
  if (v19)
  {
    uint64_t v12 = v20;
    sub_100005110(&v17, v19);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    unint64_t v15 = v14;
    sub_100006034(&v17);
    uint64_t v17 = v13;
    unint64_t v18 = v15;
    Hasher._combine(_:)(1u);
    unint64_t v16 = sub_100039DB8();
    dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningTeam, v16);
    sub_10001777C(v13, v15);
  }

  else
  {
    sub_100012824((uint64_t)&v17, &qword_100157FF0);
    Hasher._combine(_:)(0);
  }

BOOL sub_100034B90(void **a1, void **a2)
{
  return sub_100036CF8(*a1, *a2);
}

Swift::Int sub_100034B9C(uint64_t a1, uint64_t a2)
{
  return sub_100034E7C(a1, a2, (void (*)(void *))sub_1000349C0);
}

void sub_100034BA8(uint64_t a1)
{
}

Swift::Int sub_100034BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034EEC(a1, a2, a3, (void (*)(void *))sub_1000349C0);
}

uint64_t sub_100034BD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4(&qword_1001588F8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = sub_100012860( &qword_100157EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
  sub_10001A148( v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID,  (uint64_t)v13,  &qword_1001588F8);
  unint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v13, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  sub_10001A148( v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID,  (uint64_t)v11,  &qword_1001588F8);
  if (v15(v11, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  v20[1] = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection);
  uint64_t v16 = type metadata accessor for KernelCollection(0LL);
  uint64_t v17 = sub_100012860(&qword_100158928, type metadata accessor for KernelCollection, (uint64_t)&unk_1001109E8);
  dispatch thunk of Hashable.hash(into:)(a1, v16, v17);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
  swift_bridgeObjectRetain(*(void *)(v2 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
  sub_1000365F0(a1, v18);
  return swift_bridgeObjectRelease(v18);
}

Swift::Int sub_100034E70(uint64_t a1, uint64_t a2)
{
  return sub_100034E7C(a1, a2, (void (*)(void *))sub_100034BD4);
}

Swift::Int sub_100034E7C(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  return Hasher._finalize()();
}

uint64_t sub_100034EC0(uint64_t a1)
{
  return sub_100034BD4(a1);
}

Swift::Int sub_100034EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034EEC(a1, a2, a3, (void (*)(void *))sub_100034BD4);
}

Swift::Int sub_100034EEC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  return Hasher._finalize()();
}

uint64_t sub_100034F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = v4;
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t result = swift_dynamicCast(&v24, v10, a3, &type metadata for String, 6LL);
  if (!(_DWORD)result)
  {
    *a4 = 0u;
    a4[1] = 0u;
    return result;
  }

  __int128 v13 = v24;
  if (a2 && (uint64_t v14 = (uint64_t *)sub_10008FAC0(), *(void *)(a2 + 16)))
  {
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    unint64_t v17 = sub_100006114(v16, v15);
    if ((v18 & 1) != 0)
    {
      sub_100006054(*(void *)(a2 + 56) + 32 * v17, (uint64_t)&v24);
    }

    else
    {
      __int128 v24 = 0u;
      __int128 v25 = 0u;
    }

    swift_bridgeObjectRelease(v15);
    if (*((void *)&v25 + 1))
    {
      int v21 = swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      BOOL v22 = v21 == 0;
      if (v21) {
        uint64_t v19 = v23[0];
      }
      else {
        uint64_t v19 = 0LL;
      }
      if (v22) {
        uint64_t v20 = 0LL;
      }
      else {
        uint64_t v20 = v23[1];
      }
      goto LABEL_17;
    }
  }

  else
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
  }

  sub_100012824((uint64_t)&v24, &qword_100157FF8);
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v5 + 312LL))( v19,  v20,  v13,  *((void *)&v13 + 1));
  swift_bridgeObjectRelease(*((void *)&v13 + 1));
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_1000350C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 16LL);
  swift_bridgeObjectRetain(v9);
  uint64_t v10 = sub_1000F96B0( a1,  a2,  v9,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Any + 8,  a3,  (uint64_t)&protocol witness table for String,  a4);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_10003514C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return sub_100034F2C(a1, a2, a3, a4);
}

uint64_t sub_10003516C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000350C0(a1, a2, a3, a4);
}

uint64_t sub_10003518C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005FB4(&qword_1001588F8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144LL))(v3);
  unint64_t v66 = v7;
  v8._uint64_t countAndFlagsBits = 32LL;
  v8._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v10 = v65;
  unint64_t v9 = v66;
  uint64_t v65 = 118LL;
  unint64_t v66 = 0xE100000000000000LL;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v6 + 184LL))();
  if (v12)
  {
    unint64_t v13 = v12;
  }

  else
  {
    uint64_t v11 = 0x73726576206F6E3CLL;
    unint64_t v13 = 0xEC0000003E6E6F69LL;
  }

  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v13);
  v15._uint64_t countAndFlagsBits = 32LL;
  v15._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  unint64_t v16 = v66;
  uint64_t v69 = v10;
  unint64_t v70 = v9;
  __n128 v17 = swift_bridgeObjectRetain(v9);
  uint64_t v69 = String.init<A>(_:)( &v69,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v17);
  unint64_t v70 = v18;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v16);
  uint64_t v20 = v69;
  unint64_t v19 = v70;
  uint64_t v65 = 40LL;
  unint64_t v66 = 0xE100000000000000LL;
  sub_10001A148(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v5, &qword_1001588F8);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v5, 1LL, v21);
  if ((_DWORD)v23 == 1)
  {
    sub_100012824((uint64_t)v5, &qword_1001588F8);
    __int128 v24 = (void *)0xE700000000000000LL;
    uint64_t v25 = 0x64697575206F6ELL;
  }

  else
  {
    uint64_t v25 = UUID.uuidString.getter(v23);
    __int128 v24 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
  }

  v27._uint64_t countAndFlagsBits = v25;
  v27._uint64_t object = v24;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v24);
  v28._uint64_t countAndFlagsBits = 8233LL;
  v28._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v28);
  unint64_t v29 = v66;
  uint64_t v69 = v20;
  unint64_t v70 = v19;
  __n128 v30 = swift_bridgeObjectRetain(v19);
  uint64_t v69 = String.init<A>(_:)( &v69,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v30);
  unint64_t v70 = v31;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v29);
  uint64_t v33 = v69;
  unint64_t v32 = v70;
  uint64_t v65 = 2125417LL;
  unint64_t v66 = 0xE300000000000000LL;
  unint64_t v34 = sub_100039DFC();
  v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for OSExtension.Location,  v34);
  uint64_t object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(object);
  v37._uint64_t countAndFlagsBits = 32LL;
  v37._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  unint64_t v38 = v66;
  uint64_t v69 = v33;
  unint64_t v70 = v32;
  __n128 v39 = swift_bridgeObjectRetain(v32);
  uint64_t v69 = String.init<A>(_:)( &v69,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v39);
  unint64_t v70 = v40;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v38);
  uint64_t v42 = v69;
  unint64_t v41 = v70;
  uint64_t v69 = 0x2064656E676973LL;
  unint64_t v70 = 0xE700000000000000LL;
  sub_10001A148(v0 + 32, (uint64_t)&v65, &qword_100157FF0);
  uint64_t v43 = v67;
  if (v67)
  {
    uint64_t v44 = v68;
    sub_100005110(&v65, v67);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, *(void *)(v44 + 8));
    uint64_t v47 = v46;
    sub_100006034(&v65);
  }

  else
  {
    sub_100012824((uint64_t)&v65, &qword_100157FF0);
    uint64_t v47 = (void *)0xE600000000000000LL;
    uint64_t v45 = 0x3E656E6F6E3CLL;
  }

  v48._uint64_t countAndFlagsBits = v45;
  v48._uint64_t object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47);
  v49._uint64_t countAndFlagsBits = 32LL;
  v49._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v49);
  unint64_t v50 = v70;
  uint64_t v65 = v69;
  unint64_t v66 = v70;
  uint64_t v69 = v42;
  unint64_t v70 = v41;
  __n128 v51 = swift_bridgeObjectRetain(v41);
  uint64_t v69 = String.init<A>(_:)( &v69,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v51);
  unint64_t v70 = v52;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v41);
  uint64_t v53 = swift_bridgeObjectRelease(v50);
  uint64_t v55 = v69;
  unint64_t v54 = v70;
  uint64_t v65 = 0x207367616C66LL;
  unint64_t v66 = 0xE600000000000000LL;
  uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 168LL))(v53);
  unint64_t v56 = sub_100039E40();
  uint64_t v57 = (void *)sub_100039E84();
  v58._uint64_t countAndFlagsBits = sub_1000D3A38((uint64_t)&type metadata for RealizedInfo.Flags, v56, v57);
  uint64_t v59 = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v59);
  unint64_t v60 = v66;
  uint64_t v69 = v55;
  unint64_t v70 = v54;
  __n128 v61 = swift_bridgeObjectRetain(v54);
  uint64_t v69 = String.init<A>(_:)( &v69,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v61);
  unint64_t v70 = v62;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v60);
  return v69;
}

uint64_t sub_10003568C()
{
  return sub_10003518C();
}

char *sub_1000356AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_100158BE8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  Swift::String v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_1000357A4(char a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  unint64_t v4 = sub_10003A5B8();
  uint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, &type metadata for ExceptionList.ExceptionType, v4);
  return sub_10003580C(a1, v5);
}

unint64_t sub_10003580C(char a1, uint64_t a2)
{
  char v9 = a1;
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    unint64_t v6 = sub_10002B838();
    do
    {
      char v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4);
      if ((dispatch thunk of static Equatable.== infix(_:_:)( &v8,  &v9,  &type metadata for ExceptionList.ExceptionType,  v6) & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

void (*sub_1000358D0(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  int64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10002ADD0(v7);
  v7[10] = sub_1000364C4(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100029A58;
}

Swift::Int sub_100035960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100158C18);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

LABEL_33:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = *(void *)(v5 + 56);
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + 24 * v23);
    uint64_t v34 = *v33;
    int64_t v35 = v33[1];
    uint64_t v36 = v33[2];
    char v37 = *(void *)(v32 + 8 * v23);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      sub_10004F9C0(v36);
      swift_bridgeObjectRetain(v37);
    }

    uint64_t v15 = *(void *)(v8 + 40);
    unint64_t v16 = sub_10004FBA8();
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for MachOSymbol, v16);
    unint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __n128 v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v19);
      }

      while (v31 == -1);
      unint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    unint64_t v21 = (void *)(*(void *)(v8 + 48) + 24 * v20);
    *unint64_t v21 = v34;
    v21[1] = v35;
    v21[2] = v36;
    *(void *)(*(void *)(v8 + 56) + 8 * v20) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v39;
  int64_t v25 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = *(_BYTE *)(*(void *)(v5 + 48) + v22);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v22);
    if ((v36 & 1) == 0) {
      swift_bridgeObjectRetain(v32);
    }
    uint64_t v15 = *(void *)(v8 + 40);
    unint64_t v16 = sub_10004FA4C();
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for CollectionKind, v16);
    unint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v19 == v28;
        if (v19 == v28) {
          unint64_t v19 = 0LL;
        }
        v27 |= v29;
        __n128 v30 = *(void *)(v12 + 8 * v19);
      }

      while (v30 == -1);
      unint64_t v20 = __clz(__rbit64(~v30)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(_BYTE *)(*(void *)(v8 + 48) + v20) = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v20) = v32;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v24 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_34:
    uint64_t v33 = 8 * v24;
    uint64_t v34 = *(void *)(*(void *)(v5 + 48) + v33);
    int64_t v35 = *(void *)(*(void *)(v5 + 56) + v33);
    if ((v39 & 1) == 0)
    {
      swift_retain(v34);
      swift_retain(v35);
    }

    uint64_t v15 = *(void *)(v8 + 40);
    unint64_t v16 = type metadata accessor for OSExtension(0LL);
    unint64_t v17 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v16, v17);
    unint64_t v18 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1LL << v19) & ~*(void *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v29 = 0;
      __n128 v30 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v31 = v20 == v30;
        if (v20 == v30) {
          unint64_t v20 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v20);
      }

      while (v32 == -1);
      unint64_t v21 = __clz(__rbit64(~v32)) + (v20 << 6);
    }

    *(void *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    int64_t v22 = 8 * v21;
    *(void *)(*(void *)(v8 + 48) + v2sub_100006034(v0 + 2) = v34;
    *(void *)(*(void *)(v8 + 56) + v2sub_100006034(v0 + 2) = v35;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v2;
  char v26 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v26, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *char v26 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    int64_t v35 = *v33;
    uint64_t v34 = v33[1];
    unint64_t v40 = *(_OWORD *)(*(void *)(v5 + 56) + v32);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v41, *(void *)(v8 + 40));
    String.hash(into:)(v41, v35, v34);
    Swift::Int result = Hasher._finalize()();
    unint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __n128 v30 = v18 == v29;
        if (v18 == v29) {
          unint64_t v18 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v13 + 8 * v18);
      }

      while (v31 == -1);
      unint64_t v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = 16 * v19;
    unint64_t v21 = (void *)(*(void *)(v8 + 48) + v20);
    *unint64_t v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v40;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  int64_t v25 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = *(void *)(v5 + 56);
    uint64_t v33 = *(_BYTE *)(*(void *)(v5 + 48) + v23);
    uint64_t v34 = (char *)(v32 + 24 * v23);
    int64_t v35 = *v34;
    char v37 = *((void *)v34 + 1);
    uint64_t v36 = *((void *)v34 + 2);
    if ((v43 & 1) == 0) {
      swift_bridgeObjectRetain(v37);
    }
    uint64_t v15 = *(void *)(v8 + 40);
    unint64_t v16 = sub_10003A5B8();
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for ExceptionList.ExceptionType, v16);
    unint64_t v17 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        __n128 v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v19);
      }

      while (v31 == -1);
      unint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    *(_BYTE *)(*(void *)(v8 + 48) + v20) = v33;
    unint64_t v21 = *(void *)(v8 + 56) + 24 * v20;
    *(_BYTE *)unint64_t v21 = v35;
    *(void *)(v21 + 8) = v37;
    *(void *)(v21 + 16) = v36;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v39;
  int64_t v25 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v29 = (v33 - 1) & v33;
    unint64_t v56 = v34;
    __n128 v30 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_34:
    uint64_t v57 = v29;
    unint64_t v40 = *(void *)(*(void *)(v5 + 48) + 8 * v30);
    unint64_t v41 = *(void *)(v5 + 56) + 80 * v30;
    uint64_t v43 = *(void *)v41;
    uint64_t v42 = *(void *)(v41 + 8);
    uint64_t v44 = *(void *)(v41 + 16);
    uint64_t v45 = *(void *)(v41 + 24);
    uint64_t v46 = *(void *)(v41 + 32);
    uint64_t v47 = *(void *)(v41 + 40);
    Swift::String v48 = *(void *)(v41 + 48);
    Swift::String v49 = *(void *)(v41 + 56);
    unint64_t v62 = *(void *)(v41 + 64);
    __n128 v61 = *(_BYTE *)(v41 + 72);
    unint64_t v60 = v40;
    if ((v55 & 1) == 0)
    {
      swift_retain(v40);
      sub_1000516E4(v43, v42, v44, v45, v46, v47, v48, v49, v62, v61);
    }

    Swift::String v58 = v49;
    uint64_t v59 = v48;
    uint64_t v15 = v47;
    unint64_t v16 = v45;
    unint64_t v17 = v44;
    unint64_t v18 = *(void *)(v8 + 40);
    unint64_t v19 = type metadata accessor for OSExtension(0LL);
    unint64_t v20 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v19, v20);
    unint64_t v21 = -1LL << *(_BYTE *)(v8 + 32);
    int64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      char v26 = v58;
      int64_t v25 = v59;
    }

    else
    {
      uint64_t v36 = 0;
      char v37 = (unint64_t)(63 - v21) >> 6;
      char v26 = v58;
      int64_t v25 = v59;
      do
      {
        if (++v23 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v38 = v23 == v37;
        if (v23 == v37) {
          uint64_t v23 = 0LL;
        }
        v36 |= v38;
        __n128 v39 = *(void *)(v12 + 8 * v23);
      }

      while (v39 == -1);
      unint64_t v24 = __clz(__rbit64(~v39)) + (v23 << 6);
    }

    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    *(void *)(*(void *)(v8 + 48) + 8 * v24) = v60;
    unint64_t v27 = *(void *)(v8 + 56) + 80 * v24;
    *(void *)unint64_t v27 = v43;
    *(void *)(v27 + 8) = v42;
    *(void *)(v27 + 16) = v17;
    *(void *)(v27 + 24) = v16;
    int64_t v14 = v56;
    *(void *)(v27 + 3sub_100006034(v0 + 2) = v46;
    *(void *)(v27 + 40) = v15;
    *(void *)(v27 + 48) = v25;
    *(void *)(v27 + 56) = v26;
    *(void *)(v27 + 64) = v62;
    *(_BYTE *)(v27 + 7sub_100006034(v0 + 2) = v61;
    ++*(void *)(v8 + 16);
    uint64_t v5 = v54;
    unint64_t v11 = v57;
  }

  swift_release(v5);
  uint64_t v3 = v51;
  uint64_t v32 = v53;
  if ((v55 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v50 = 1LL << *(_BYTE *)(v5 + 32);
  if (v50 >= 64) {
    bzero(v32, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint8_t *v32 = -1LL << v50;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  if (v22 == 255)
  {
    uint64_t v44 = v23[2];
    if (v44 <= 1)
    {
      if (v44 == 1)
      {
        Swift::String v49 = v23;
        unint64_t v50 = v23[4];
        __n128 v51 = v49[5];
        unint64_t v52 = v49[6];
        uint64_t v53 = v49[7];
        unint64_t v54 = v49[8];
        uint64_t v55 = v49[9];
        unint64_t v56 = v49[10];
        uint64_t v57 = v49[11];
        uint64_t v73 = v49[12];
        char v76 = *((_BYTE *)v49 + 104);
        sub_1000516E4(v50, v51, v52, v53, v54, v55, v56, v57, v73, v76);
        swift_bridgeObjectRelease(v49);
        Swift::String v58 = sub_100012624();
        uint64_t v46 = swift_allocError(&type metadata for KMError, v58, 0LL, 0LL);
        *(void *)unint64_t v60 = v50;
        *(void *)(v60 + 8) = v51;
        *(void *)(v60 + 16) = v52;
        *(void *)(v60 + 24) = v53;
        *(void *)(v60 + 3sub_100006034(v0 + 2) = v54;
        *(void *)(v60 + 40) = v55;
        *(void *)(v60 + 48) = v56;
        *(void *)(v60 + 56) = v57;
        *(void *)(v60 + 64) = v73;
        __n128 v61 = v76;
      }

      else
      {
        swift_bridgeObjectRelease(v23);
        uint64_t v59 = sub_100012624();
        uint64_t v46 = swift_allocError(&type metadata for KMError, v59, 0LL, 0LL);
        *(void *)unint64_t v60 = 0xD000000000000040LL;
        *(void *)(v60 + 8) = 0x800000010012C570LL;
        *(_OWORD *)(v60 + 16) = 0u;
        *(_OWORD *)(v60 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v60 + 48) = 0u;
        *(void *)(v60 + 64) = 0LL;
        __n128 v61 = 50;
      }

      *(_BYTE *)(v60 + 7sub_100006034(v0 + 2) = v61;
    }

    else
    {
      uint64_t v45 = sub_100012624();
      uint64_t v46 = swift_allocError(&type metadata for KMError, v45, 0LL, 0LL);
      *(void *)uint64_t v47 = v23;
      *(_OWORD *)(v47 + 8) = 0u;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_OWORD *)(v47 + 56) = 0u;
      *(_BYTE *)(v47 + 7sub_100006034(v0 + 2) = 0;
    }

    return (_DWORD *)swift_willThrow(v46);
  }

  uint64_t v3 = v20;
LABEL_37:
  swift_bridgeObjectRelease(v23);
  Swift::Int result = sub_1000E1E20((uint64_t)v3, (uint64_t)&v88);
  if (!v21)
  {
    LOBYTE(v77) = v89;
    return (_DWORD *)(v88 | ((unint64_t)v89 << 32));
  }

  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    int64_t v35 = v31[2];
    uint64_t v34 = v31[3];
    uint64_t v36 = *(void *)(v5 + 56) + 24 * v22;
    uint64_t v44 = *(_OWORD *)v36;
    char v37 = *(_BYTE *)(v36 + 16);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v34);
    }

    Hasher.init(_seed:)(v45, *(void *)(v8 + 40));
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v45, v33, v32);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v45, v35, v34);
    swift_bridgeObjectRelease(v34);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0LL;
        }
        v27 |= v29;
        __n128 v30 = *(void *)(v12 + 8 * v17);
      }

      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 32 * v18);
    *unint64_t v19 = v33;
    v19[1] = v32;
    v19[2] = v35;
    v19[3] = v34;
    unint64_t v20 = *(void *)(v8 + 56) + 24 * v18;
    *(_OWORD *)unint64_t v20 = v44;
    *(_BYTE *)(v20 + 16) = v37;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v39;
  unint64_t v24 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __n128 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

Swift::Int sub_100035C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100158BF0);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_100035F88(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            _OWORD *v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *unint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

void sub_10003615C()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100158C18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100036310()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_100158BF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void (*sub_1000364C4(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100006114(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *uint64_t v10 = v19;
        return sub_10002AD94;
      }

void sub_1000365F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    Swift::UInt v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v2);
    Hasher._combine(_:)(v23);
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v2);
    if (!v4) {
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v4) {
      return;
    }
  }

  if (v4 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v24 = v2 & 0xC000000000000001LL;
    uint64_t v6 = v2;
    do
    {
      if (v24)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      }

      else
      {
        uint64_t v7 = *(void *)(v2 + 8 * v5 + 32);
        swift_retain(v7);
      }

      uint64_t v25 = *(void *)(v7 + 24);
      uint64_t v8 = type metadata accessor for OSExtension(0LL);
      uint64_t v9 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
      dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
      sub_10001A148(v7 + 32, (uint64_t)&v25, &qword_100157FF0);
      uint64_t v10 = v27;
      if (v27)
      {
        uint64_t v11 = v28;
        sub_100005110(&v25, v27);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
        unint64_t v14 = v13;
        sub_100006034(&v25);
        uint64_t v25 = v12;
        unint64_t v26 = v14;
        Hasher._combine(_:)(1u);
        unint64_t v15 = sub_10002B5C4();
        dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningHash, v15);
        sub_10001226C(v12, v14);
      }

      else
      {
        sub_100012824((uint64_t)&v25, &qword_100157FF0);
        Hasher._combine(_:)(0);
      }

      sub_10001A148(v7 + 32, (uint64_t)&v25, &qword_100157FF0);
      uint64_t v16 = v27;
      if (v27)
      {
        uint64_t v17 = v28;
        sub_100005110(&v25, v27);
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
        unint64_t v20 = v19;
        sub_100006034(&v25);
        uint64_t v25 = v18;
        unint64_t v26 = v20;
        Hasher._combine(_:)(1u);
        unint64_t v21 = sub_100039DB8();
        dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningTeam, v21);
        sub_10001777C(v18, v20);
      }

      else
      {
        sub_100012824((uint64_t)&v25, &qword_100157FF0);
        Hasher._combine(_:)(0);
      }

      swift_release(v7);
      uint64_t v2 = v6;
      ++v5;
    }

    while (v4 != v5);
  }

uint64_t sub_1000368A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_1000368D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4(&qword_1001588F8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = sub_100005FB4(&qword_100158BD0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v19 = a1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  uint64_t v20 = a2 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  unint64_t v21 = (char *)&v37 + *(int *)(v13 + 48) - v17;
  sub_10001A148(v19, (uint64_t)&v37 - v17, &qword_1001588F8);
  sub_10001A148(v20, (uint64_t)v21, &qword_1001588F8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v22(v18, 1LL, v4) == 1)
  {
    if (v22(v21, 1LL, v4) == 1)
    {
      sub_100012824((uint64_t)v18, &qword_1001588F8);
      goto LABEL_8;
    }

LABEL_6:
    uint64_t v23 = (uint64_t)v18;
LABEL_14:
    sub_100012824(v23, &qword_100158BD0);
    goto LABEL_15;
  }

  sub_10001A148((uint64_t)v18, (uint64_t)v12, &qword_1001588F8);
  if (v22(v21, 1LL, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v21, v4);
  uint64_t v24 = sub_100012860( &qword_100158BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v7, v4, v24);
  unint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v7, v4);
  v26(v12, v4);
  sub_100012824((uint64_t)v18, &qword_1001588F8);
  if ((v25 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v28 = v39;
  uint64_t v27 = v40;
  uint64_t v29 = v40 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID;
  uint64_t v30 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_10001A148( v39 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID,  (uint64_t)v16,  &qword_1001588F8);
  sub_10001A148(v29, v30, &qword_1001588F8);
  if (v22(v16, 1LL, v4) != 1)
  {
    uint64_t v31 = v38;
    sub_10001A148((uint64_t)v16, v38, &qword_1001588F8);
    if (v22((char *)v30, 1LL, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v30, v4);
      uint64_t v34 = sub_100012860( &qword_100158BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v7, v4, v34);
      uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
      v36(v7, v4);
      v36((char *)v31, v4);
      sub_100012824((uint64_t)v16, &qword_1001588F8);
      if ((v35 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
    goto LABEL_13;
  }

  if (v22((char *)v30, 1LL, v4) != 1)
  {
LABEL_13:
    uint64_t v23 = (uint64_t)v16;
    goto LABEL_14;
  }

  sub_100012824((uint64_t)v16, &qword_1001588F8);
LABEL_18:
  if ((static UUID.== infix(_:_:)( v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid,  v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid) & 1) != 0)
  {
    type metadata accessor for KernelCollection(0LL);
    if (sub_10004D9A0( *(void *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection),  *(void *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)))
    {
      char v32 = sub_100034734( *(void *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions),  *(void *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
      return v32 & 1;
    }
  }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_1000147D0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  uint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }

  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v31 = a6 + 48;
        char v32 = a6 + 55;
        uint64_t v33 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v31 = 58;
        }

        else
        {
          uint64_t v33 = 97;
          char v32 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          uint64_t v34 = v19 + 1;
          char v35 = result - 1;
          do
          {
            uint64_t v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0LL;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                uint64_t v37 = -87;
              }

              else
              {
                uint64_t v37 = -55;
              }
            }

            else
            {
              uint64_t v37 = -48;
            }

            uint64_t v38 = v24 * a6;
            uint64_t v24 = v38 + (v36 + v37);
            ++v34;
            --v35;
          }

          while (v35);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_94;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v39 = a6 + 48;
      uint64_t v40 = a6 + 55;
      unint64_t v41 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v39 = 58;
      }

      else
      {
        unint64_t v41 = 97;
        uint64_t v40 = 65;
      }

      if (v19)
      {
        uint64_t v42 = 0LL;
        do
        {
          uint64_t v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0LL;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              uint64_t v44 = -87;
            }

            else
            {
              uint64_t v44 = -55;
            }
          }

          else
          {
            uint64_t v44 = -48;
          }

          uint64_t v45 = v42 * a6;
          uint64_t v42 = v45 + (v43 + v44);
          ++v19;
          --result;
        }

        while (result);
        return v45 + (v43 + v44);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unint64_t v21 = a6 + 48;
      uint64_t v22 = a6 + 55;
      uint64_t v23 = a6 + 87;
      if (a6 > 10)
      {
        unint64_t v21 = 58;
      }

      else
      {
        uint64_t v23 = 97;
        uint64_t v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        char v25 = v19 + 1;
        unint64_t v26 = result - 1;
        while (1)
        {
          uint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          uint64_t v30 = v24 * a6;
          uint64_t v24 = v30 - (v27 + v28);
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

    sub_1000127BC((uint64_t)v8, type metadata accessor for DriverBinEntry);
    uint64_t v33 = type metadata accessor for UUID(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v14, v33);
  }

  uint64_t v42 = *(void *)(v65 + 8 * v43);
  if (v42)
  {
LABEL_16:
    unint64_t v41 = v43;
LABEL_13:
    uint64_t v30 = (v42 - 1) & v42;
    char v35 = __clz(__rbit64(v42)) + (v41 << 6);
    uint64_t v77 = v41;
    goto LABEL_9;
  }

  while (1)
  {
    unint64_t v41 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v41 >= v67)
    {
      uint64_t v77 = v63[0];
      goto LABEL_27;
    }

    uint64_t v42 = *(void *)(v65 + 8 * v41);
    ++v43;
    if (v42) {
      goto LABEL_13;
    }
  }

  uint64_t v11 = [v8 createFileAtPath:v9 contents:isa attributes:a5];

  return v11;
}

BOOL sub_100036CF8(void *a1, void *a2)
{
  if ((sub_1000F67B8(a1[3], a2[3]) & 1) != 0)
  {
    sub_10001A148((uint64_t)(a1 + 4), (uint64_t)&v20, &qword_100157FF0);
    uint64_t v4 = v22;
    if (v22)
    {
      uint64_t v5 = v23;
      sub_100005110(&v20, v22);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
      unint64_t v8 = v7;
      sub_100006034(&v20);
    }

    else
    {
      sub_100012824((uint64_t)&v20, &qword_100157FF0);
      uint64_t v6 = 0LL;
      unint64_t v8 = 0xF000000000000000LL;
    }

    sub_10001A148((uint64_t)(a2 + 4), (uint64_t)&v20, &qword_100157FF0);
    uint64_t v9 = v22;
    if (!v22)
    {
      uint64_t v14 = sub_100012824((uint64_t)&v20, &qword_100157FF0);
      if (v8 >> 60 != 15)
      {
        uint64_t v11 = 0LL;
        unint64_t v13 = 0xF000000000000000LL;
        goto LABEL_12;
      }

uint64_t sub_100036F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100005FB4(&qword_100158BD0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3 != a1)
  {
    sub_100012824(a4, &qword_1001588F8);
    sub_100012824(a2, &qword_1001588F8);
    return 3LL;
  }

  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_10001A148(a4, (uint64_t)v18, &qword_1001588F8);
  sub_10001A148(a2, v19, &qword_1001588F8);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v20((uint64_t)v18, 1LL, v8) != 1)
  {
    sub_10001A148((uint64_t)v18, (uint64_t)v14, &qword_1001588F8);
    if (v20(v19, 1LL, v8) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v19, v8);
      uint64_t v22 = sub_100012860( &qword_100158BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v8, v22);
      sub_100012824(a4, &qword_1001588F8);
      sub_100012824(a2, &qword_1001588F8);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
      v24(v11, v8);
      v24(v14, v8);
      sub_100012824((uint64_t)v18, &qword_1001588F8);
      if ((v23 & 1) != 0) {
        return 0LL;
      }
      return 2LL;
    }

    sub_100012824(a4, &qword_1001588F8);
    sub_100012824(a2, &qword_1001588F8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_8:
    sub_100012824((uint64_t)v18, &qword_100158BD0);
    return 2LL;
  }

  sub_100012824(a4, &qword_1001588F8);
  sub_100012824(a2, &qword_1001588F8);
  if (v20(v19, 1LL, v8) != 1) {
    goto LABEL_8;
  }
  sub_100012824((uint64_t)v18, &qword_1001588F8);
  return 0LL;
}

uint64_t sub_1000371F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100005FB4(&qword_1001588F8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v28 - v15;
  int v17 = *(_DWORD *)(a6 + 584);
  int v18 = *sub_1000A46E4();
  void v28[2] = v17;
  int v29 = v18;
  unint64_t v19 = sub_100012B34();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v29, &type metadata for ExtensionManager.Settings.Flags, v19) & 1) == 0
    || (uint64_t v20 = swift_bridgeObjectRetain(a4),
        uint64_t v22 = sub_10002D880(v20, v21, a4),
        char v24 = v23,
        uint64_t v25 = swift_bridgeObjectRelease(a4),
        (v24 & 1) != 0))
  {
    sub_10003916C((void *)a6);
    swift_release(a1);
  }

  else
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(v25);
    sub_10001A148(a5, (uint64_t)v16, &qword_1001588F8);
    swift_bridgeObjectRetain(a4);
    sub_10002D78C(a4, (uint64_t)v14);
    swift_bridgeObjectRelease(a4);
    sub_100036F28(v26, (uint64_t)v16, v22, (uint64_t)v14);
    sub_10003916C((void *)a6);
    swift_release(a1);
  }

  sub_100012824(a5, &qword_1001588F8);
  return a2;
}

uint64_t sub_100037394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000373A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000373BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void (*v23)(__int128 *__return_ptr, uint64_t, uint64_t, void, void, void);
  int64_t v24;
  uint64_t *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  unsigned int v44;
  _OWORD v49[2];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  _OWORD v58[3];
  unint64_t v59;
  uint64_t v42 = a2 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a2 + 64);
  uint64_t v43 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = &v54;
  swift_bridgeObjectRetain(a2);
  int64_t v12 = 0LL;
  uint64_t v44 = a6 & 1;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_25;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_45;
    }
    if (v16 >= v43)
    {
LABEL_43:
      swift_release(a2);
      return (uint64_t)a1;
    }

    unint64_t v17 = *(void *)(v42 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v43) {
        goto LABEL_43;
      }
      unint64_t v17 = *(void *)(v42 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v43) {
          goto LABEL_43;
        }
        unint64_t v17 = *(void *)(v42 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v43) {
            goto LABEL_43;
          }
          unint64_t v17 = *(void *)(v42 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }

LABEL_37:
      a1[(v28 >> 6) + 8] |= 1LL << v28;
      *(_OWORD *)(a1[6] + 16 * v28) = v22;
      sub_100017790(v49, (_OWORD *)(a1[7] + 32 * v28));
      uint64_t v38 = a1[2];
      uint64_t v39 = __OFADD__(v38, 1LL);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_46;
      }
      a1[2] = v40;
      swift_bridgeObjectRetain(*((void *)&v22 + 1));
      goto LABEL_5;
    }

    sub_100012824((uint64_t)&v50, &qword_100157FF8);
    swift_bridgeObjectRetain(a1);
    char v35 = sub_100006114(v22, *((uint64_t *)&v22 + 1));
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(a1);
    if ((v37 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0) {
        sub_100017228();
      }
      swift_bridgeObjectRelease(*(void *)(a1[6] + 16 * v35 + 8));
      sub_100017790((_OWORD *)(a1[7] + 32 * v35), v49);
      sub_100035F88(v35, (uint64_t)a1);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      memset(v49, 0, sizeof(v49));
    }

    swift_bridgeObjectRelease(*((void *)&v22 + 1));
    sub_100012824((uint64_t)v49, &qword_100157FF8);
LABEL_6:
    sub_100006034(v11);
    sub_100012824((uint64_t)&v55, &qword_100157C40);
  }

  int64_t v18 = v16 + 4;
  if (v18 >= v43) {
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v42 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v43) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v42 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }

      unint64_t v10 = v13;
LABEL_38:
      unint64_t v7 = v31;
      goto LABEL_39;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1LL, 1LL, v11);
          unint64_t v19 = 0LL;
LABEL_38:
          sub_100012824((uint64_t)v10, (uint64_t *)&unk_10015BA30);
          goto LABEL_39;
        }

        v26 += 3LL;
      }
    }

  if (v31 != 255)
  {
    char v32 = 0LL;
    unint64_t v7 = v30;
    goto LABEL_41;
  }

  __n128 v51 = a3[2];
  if (v51 < 2)
  {
    if (v51 == 1)
    {
      unint64_t v56 = a3;
      uint64_t v57 = a3[4];
      Swift::String v58 = a3[5];
      uint64_t v59 = v56[6];
      unint64_t v60 = v56[7];
      __n128 v61 = v56[8];
      unint64_t v62 = v56[9];
      uint64_t v63 = v56[10];
      uint64_t v64 = v56[11];
      uint64_t v82 = v56[12];
      uint64_t v85 = *((_BYTE *)v56 + 104);
      sub_1000516E4(v57, v58, v59, v60, v61, v62, v63, v64, v82, v85);
      swift_bridgeObjectRelease(v56);
      uint64_t v65 = sub_100012624();
      uint64_t v53 = swift_allocError(&type metadata for KMError, v65, 0LL, 0LL);
      *(void *)unint64_t v66 = v57;
      *(void *)(v66 + 8) = v58;
      *(void *)(v66 + 16) = v59;
      *(void *)(v66 + 24) = v60;
      *(void *)(v66 + 3sub_100006034(v0 + 2) = v61;
      *(void *)(v66 + 40) = v62;
      *(void *)(v66 + 48) = v63;
      *(void *)(v66 + 56) = v64;
      *(void *)(v66 + 64) = v82;
      uint64_t v67 = v85;
    }

    else
    {
      swift_bridgeObjectRelease(a3);
      uint64_t v68 = sub_100012624();
      uint64_t v53 = swift_allocError(&type metadata for KMError, v68, 0LL, 0LL);
      *(void *)unint64_t v66 = 0xD000000000000040LL;
      *(void *)(v66 + 8) = 0x800000010012C570LL;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v66 + 48) = 0u;
      *(void *)(v66 + 64) = 0LL;
      uint64_t v67 = 50;
    }

    *(_BYTE *)(v66 + 7sub_100006034(v0 + 2) = v67;
  }

  else
  {
    unint64_t v52 = sub_100012624();
    uint64_t v53 = swift_allocError(&type metadata for KMError, v52, 0LL, 0LL);
    *(void *)unint64_t v54 = a3;
    *(_OWORD *)(v54 + 8) = 0u;
    *(_OWORD *)(v54 + 24) = 0u;
    *(_OWORD *)(v54 + 40) = 0u;
    *(_OWORD *)(v54 + 56) = 0u;
    *(_BYTE *)(v54 + 7sub_100006034(v0 + 2) = 0;
  }

  return swift_willThrow(v53);
}

uint64_t sub_10003783C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *sub_100037850(void *a1)
{
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[4];
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[14];
  uint64_t v9 = a1[16];
  unint64_t v8 = a1[17];
  uint64_t v14 = a1[19];
  uint64_t v15 = a1[20];
  uint64_t v16 = a1[21];
  uint64_t v17 = a1[23];
  uint64_t v18 = a1[26];
  uint64_t v19 = a1[27];
  uint64_t v20 = a1[29];
  uint64_t v21 = a1[31];
  uint64_t v22 = a1[33];
  uint64_t v23 = a1[35];
  uint64_t v24 = a1[37];
  uint64_t v25 = a1[38];
  uint64_t v26 = a1[39];
  uint64_t v27 = a1[40];
  uint64_t v28 = a1[41];
  uint64_t v29 = a1[43];
  uint64_t v30 = a1[45];
  uint64_t v31 = a1[47];
  uint64_t v32 = a1[49];
  uint64_t v34 = a1[51];
  uint64_t v36 = a1[53];
  uint64_t v10 = a1[55];
  uint64_t v44 = a1[57];
  uint64_t v45 = a1[56];
  uint64_t v42 = a1[59];
  uint64_t v43 = a1[58];
  uint64_t v40 = a1[61];
  uint64_t v41 = a1[60];
  uint64_t v39 = a1[62];
  uint64_t v37 = a1[54];
  uint64_t v38 = a1[63];
  uint64_t v35 = a1[64];
  uint64_t v33 = a1[65];
  uint64_t v50 = a1[69];
  uint64_t v51 = a1[68];
  uint64_t v48 = a1[71];
  uint64_t v49 = a1[70];
  uint64_t v46 = a1[67];
  uint64_t v47 = a1[72];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_100037AF0(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  sub_100037B10(v45, v44, v43, v42, v41, v40, v39, v38, v35, v33);
  swift_bridgeObjectRetain(v46);
  sub_100037B88(v51, v50, v49, v48, v47);
  return a1;
}

unint64_t sub_100037AF0(unint64_t result)
{
  if (result != 5) {
    return sub_100037B00(result);
  }
  return result;
}

unint64_t sub_100037B00(unint64_t result)
{
  if (result >= 5) {
    return swift_retain(result);
  }
  return result;
}

uint64_t sub_100037B10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a9);
    return swift_bridgeObjectRetain(a10);
  }

  return result;
}

uint64_t sub_100037B88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t type metadata accessor for RealizedInfo(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015EC60, (uint64_t)&nominal type descriptor for RealizedInfo);
}

void *sub_100037BF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v200 = a5;
  int v193 = a4;
  uint64_t v207 = a3;
  uint64_t v209 = a2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v189 = (char *)&v183 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v192 = (char *)&v183 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v183 - v12;
  uint64_t v14 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v184 = (uint64_t)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v186 = (char *)&v183 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v187 = (uint64_t)&v183 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v203 = (uint64_t)&v183 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v194 = (char *)&v183 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v188 = (uint64_t)&v183 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v198 = (char *)&v183 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v196 = (uint64_t)&v183 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v197 = (char *)&v183 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v185 = (uint64_t)&v183 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  char v195 = (char *)&v183 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v199 = (char *)&v183 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v210 = (uint64_t)&v183 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v190 = (uint64_t)&v183 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v201 = (uint64_t)&v183 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v191 = (uint64_t)&v183 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v205 = (char *)&v183 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v51 = (char *)&v183 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  unint64_t v54 = (char *)&v183 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v57 = (char *)&v183 - v56;
  uint64_t v58 = __chkstk_darwin(v55);
  unint64_t v60 = (char *)&v183 - v59;
  __chkstk_darwin(v58);
  unint64_t v62 = (char *)&v183 - v61;
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v64 = v63((char *)&v183 - v61, 1LL, 1LL, v6);
  uint64_t v65 = *(void (**)(uint64_t))(*(void *)a1 + 160LL);
  uint64_t v206 = a1;
  v65(v64);
  uint64_t v208 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  unsigned int v66 = v208(v60, 1LL, v6);
  uint64_t v204 = v7;
  if (v66 == 1)
  {
    uint64_t v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63;
    sub_100012824((uint64_t)v60, (uint64_t *)&unk_10015BA30);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v60, v6);
    sub_100086458((uint64_t)v57);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    sub_100012824((uint64_t)v62, (uint64_t *)&unk_10015BA30);
    uint64_t v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63;
    v63(v57, 0LL, 1LL, v6);
    sub_1000263D8((uint64_t)v57, (uint64_t)v62, (uint64_t *)&unk_10015BA30);
  }

  uint64_t v202 = v62;
  sub_10001A148((uint64_t)v62, (uint64_t)v54, (uint64_t *)&unk_10015BA30);
  uint64_t v68 = v208;
  unsigned int v69 = v208(v54, 1LL, v6);
  sub_100012824((uint64_t)v54, (uint64_t *)&unk_10015BA30);
  sub_10001A148(v207, (uint64_t)v51, (uint64_t *)&unk_10015BA30);
  uint64_t v70 = (uint64_t)v205;
  if (v69 == 1 && v68(v51, 1LL, v6) == 1)
  {
    uint64_t v71 = sub_100012824((uint64_t)v51, (uint64_t *)&unk_10015BA30);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v206 + 112LL))(v223, v71);
    uint64_t v72 = v224;
    sub_100012824((uint64_t)v223, &qword_100157C58);
    uint64_t v73 = v200;
    unint64_t v74 = v67;
    if (!v72)
    {
      int v75 = 0;
      uint64_t v76 = 1LL;
      uint64_t v77 = v204;
      uint64_t v78 = (uint64_t)v199;
      goto LABEL_17;
    }
  }

  else
  {
    sub_100012824((uint64_t)v51, (uint64_t *)&unk_10015BA30);
    uint64_t v73 = v200;
    unint64_t v74 = v67;
  }

  uint64_t v79 = v191;
  sub_10001A148((uint64_t)v202, v191, (uint64_t *)&unk_10015BA30);
  uint64_t v80 = v201;
  sub_10001A148(v207, v201, (uint64_t *)&unk_10015BA30);
  unsigned int v81 = v68((char *)v79, 1LL, v6);
  uint64_t v78 = (uint64_t)v199;
  if (v81 == 1)
  {
    uint64_t v82 = v80;
    uint64_t v83 = v80;
    uint64_t v84 = v190;
    sub_10001A148(v82, v190, (uint64_t *)&unk_10015BA30);
    unsigned int v85 = v68((char *)v84, 1LL, v6);
    uint64_t v86 = v192;
    if (v85 == 1)
    {
      uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v206 + 112LL))(v223);
      uint64_t v88 = v224;
      if (!v224)
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }

      uint64_t v89 = v225;
      sub_100005110(v223, v224);
      (*(void (**)(uint64_t, uint64_t))(v89 + 64))(v88, v89);
      sub_100012824(v201, (uint64_t *)&unk_10015BA30);
      sub_100006034(v223);
      sub_100012824(v190, (uint64_t *)&unk_10015BA30);
      uint64_t v77 = v204;
      uint64_t v68 = v208;
    }

    else
    {
      sub_100012824(v83, (uint64_t *)&unk_10015BA30);
      uint64_t v77 = v204;
      (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v86, v84, v6);
    }

    sub_100012824(v79, (uint64_t *)&unk_10015BA30);
  }

  else
  {
    sub_100012824(v80, (uint64_t *)&unk_10015BA30);
    uint64_t v77 = v204;
    uint64_t v86 = v192;
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v192, v79, v6);
  }

  sub_1000D4950(v73[18], v73[19], v73[20], v73[21], v70);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v86, v6);
  uint64_t v76 = 0LL;
  int v75 = 1;
LABEL_17:
  v74(v70, v76, 1LL, v6);
  sub_10001A148(v70, v78, (uint64_t *)&unk_10015BA30);
  if (v68((char *)v78, 1LL, v6) == 1)
  {
    sub_100012824(v78, (uint64_t *)&unk_10015BA30);
    uint64_t v90 = 1LL;
    uint64_t v91 = v210;
  }

  else
  {
    uint64_t v92 = v189;
    URL.deletingLastPathComponent()();
    char v93 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v93(v78, v6);
    uint64_t v91 = v210;
    sub_100086458(v210);
    v93((uint64_t)v92, v6);
    uint64_t v90 = 0LL;
  }

  uint64_t v201 = v6;
  v74(v91, v90, 1LL, v6);
  uint64_t v94 = v73[68];
  if (v94)
  {
    uint64_t v95 = v73[72];
    int v96 = v75;
    uint64_t v97 = v73[71];
    uint64_t v98 = v73[70];
    uint64_t v99 = v73[69];
    v223[0] = v73[68];
    v223[1] = v99;
    v223[2] = v98;
    uint64_t v224 = v97;
    uint64_t v225 = v95;
    char v100 = *(uint64_t (**)(uint64_t))(*(void *)v206 + 144LL);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v97);
    uint64_t v101 = swift_bridgeObjectRetain(v95);
    uint64_t v102 = v100(v101);
    uint64_t v104 = v103;
    uint64_t v105 = v209;
    swift_bridgeObjectRetain(v209);
    LODWORD(v199) = sub_1000ADEC4(v102, v104, v105);
    swift_bridgeObjectRelease(v95);
    uint64_t v106 = v97;
    int v75 = v96;
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v105);
  }

  else
  {
    LODWORD(v199) = 3;
    uint64_t v105 = v209;
  }

  uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v208;
  uint64_t v108 = (uint64_t)v198;
  uint64_t v109 = (uint64_t)v197;
  v217[1] = 0LL;
  if (qword_10015E498 != -1) {
    swift_once(&qword_10015E498, sub_10002C438);
  }
  v217[0] = qword_1001752D0;
  uint64_t v110 = (uint64_t *)sub_10008F538();
  if (!*(void *)(v105 + 16))
  {
    __int128 v215 = 0u;
    __int128 v216 = 0u;
    uint64_t v115 = (uint64_t)v195;
LABEL_36:
    sub_100012824((uint64_t)&v215, &qword_100157FF8);
LABEL_37:
    sub_10001A148(v210, v115, (uint64_t *)&unk_10015BA30);
    goto LABEL_38;
  }

  uint64_t v112 = *v110;
  uint64_t v111 = v110[1];
  swift_bridgeObjectRetain(v111);
  unint64_t v113 = sub_100006114(v112, v111);
  if ((v114 & 1) != 0)
  {
    sub_100006054(*(void *)(v105 + 56) + 32 * v113, (uint64_t)&v215);
  }

  else
  {
    __int128 v215 = 0u;
    __int128 v216 = 0u;
  }

  uint64_t v115 = (uint64_t)v195;
  swift_bridgeObjectRelease(v111);
  if (!*((void *)&v216 + 1)) {
    goto LABEL_36;
  }
  if ((swift_dynamicCast(&v222, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) == 0
    || (v222 & 1) == 0)
  {
    goto LABEL_37;
  }

  sub_10001A148(v210, v115, (uint64_t *)&unk_10015BA30);
  if (v75)
  {
    uint64_t v116 = v185;
    sub_10001A148(v115, v185, (uint64_t *)&unk_10015BA30);
    uint64_t v117 = v107(v116, 1LL, v201);
    if ((_DWORD)v117 == 1)
    {
      sub_100012824(v115, (uint64_t *)&unk_10015BA30);
      uint64_t v115 = v116;
    }

    else
    {
      uint64_t v177 = URL.path.getter(v117);
      uint64_t v178 = v116;
      uint64_t v179 = v177;
      uint64_t v181 = v180;
      (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v178, v201);
      sub_100032F98(0x2F6D65747379532FLL, 0xE800000000000000LL, v179, v181);
      uint64_t v182 = v181;
      uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v208;
      swift_bridgeObjectRelease(v182);
    }
  }

LABEL_53:
    v135 |= qword_1001752F8;
    goto LABEL_55;
  }

  if ((qword_1001752F8 & ~v135) != 0) {
    goto LABEL_53;
  }
LABEL_55:
  v213[0] = v135;
  sub_10001A148(v134, v108, (uint64_t *)&unk_10015BA30);
  if ((v75 & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v136 = v201;
  uint64_t v137 = v108;
  int v138 = v75;
  uint64_t v139 = (void *)*sub_100026E18();
  uint64_t v140 = v137;
  uint64_t v141 = v137;
  uint64_t v142 = v188;
  sub_10001A148(v141, v188, (uint64_t *)&unk_10015BA30);
  uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v142, 1LL, v136);
  if ((_DWORD)result == 1) {
    goto LABEL_111;
  }
  uint64_t v143 = swift_bridgeObjectRetain(v139);
  uint64_t v144 = URL.path.getter(v143);
  uint64_t v146 = v145;
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v142, v136);
  sub_10003464C(v144, v146, v139);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v146);
  uint64_t v134 = (uint64_t)v205;
  int v75 = v138;
  uint64_t v108 = v140;
LABEL_58:
  sub_100012824(v108, (uint64_t *)&unk_10015BA30);
  sub_1000D3F74((uint64_t)v213, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v220);
  uint64_t v222 = v220;
  uint64_t v212 = qword_1001752F8;
  uint64_t v147 = (uint64_t *)sub_10008F55C();
  uint64_t v148 = v209;
  if (*(void *)(v209 + 16))
  {
    uint64_t v150 = *v147;
    uint64_t v149 = v147[1];
    swift_bridgeObjectRetain(v149);
    unint64_t v151 = sub_100006114(v150, v149);
    uint64_t v152 = (uint64_t)v194;
    if ((v153 & 1) != 0)
    {
      sub_100006054(*(void *)(v148 + 56) + 32 * v151, (uint64_t)&v215);
    }

    else
    {
      __int128 v215 = 0u;
      __int128 v216 = 0u;
    }

    swift_bridgeObjectRelease(v149);
    if (*((void *)&v216 + 1))
    {
      swift_dynamicCast(&v221, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
      goto LABEL_66;
    }
  }

  else
  {
    __int128 v215 = 0u;
    __int128 v216 = 0u;
    uint64_t v152 = (uint64_t)v194;
  }

  sub_100012824((uint64_t)&v215, &qword_100157FF8);
LABEL_66:
  sub_1000D3F74((uint64_t)&v212, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v221);
  uint64_t v212 = v221;
  if (qword_10015E4A0 != -1) {
    swift_once(&qword_10015E4A0, sub_10002C448);
  }
  uint64_t v211 = qword_1001752D8;
  uint64_t v154 = (uint64_t *)sub_10008F544();
  uint64_t v155 = v209;
  if (*(void *)(v209 + 16))
  {
    uint64_t v157 = *v154;
    uint64_t v156 = v154[1];
    swift_bridgeObjectRetain(v156);
    unint64_t v158 = sub_100006114(v157, v156);
    if ((v159 & 1) != 0)
    {
      sub_100006054(*(void *)(v155 + 56) + 32 * v158, (uint64_t)&v215);
    }

    else
    {
      __int128 v215 = 0u;
      __int128 v216 = 0u;
    }

    swift_bridgeObjectRelease(v156);
  }

  else
  {
    __int128 v215 = 0u;
    __int128 v216 = 0u;
  }

  swift_bridgeObjectRelease(v209);
  if (!*((void *)&v216 + 1))
  {
    sub_100012824((uint64_t)&v215, &qword_100157FF8);
    goto LABEL_79;
  }

  if (!swift_dynamicCast(&v222, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL))
  {
LABEL_79:
    uint64_t v161 = v206;
    sub_10001A148(v210, v152, (uint64_t *)&unk_10015BA30);
    goto LABEL_80;
  }

  char v160 = v222;
  sub_10001A148(v210, v152, (uint64_t *)&unk_10015BA30);
  uint64_t v161 = v206;
  if ((v160 & 1) == 0)
  {
LABEL_80:
    uint64_t v163 = type metadata accessor for KernelExtension(0LL);
    if (!swift_dynamicCastClass(v161, v163) || ((*(uint64_t (**)(void))(*(void *)v161 + 208LL))() & 1) != 0)
    {
      sub_10001A148(v152, v203, (uint64_t *)&unk_10015BA30);
LABEL_83:
      char v162 = (char)v199;
LABEL_84:
      sub_100012824(v203, (uint64_t *)&unk_10015BA30);
      goto LABEL_85;
    }

    sub_10001A148(v152, v203, (uint64_t *)&unk_10015BA30);
    if (!v75) {
      goto LABEL_83;
    }
    uint64_t v166 = v187;
    sub_10001A148(v203, v187, (uint64_t *)&unk_10015BA30);
    uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v166, 1LL, v201);
    if ((_DWORD)result != 1)
    {
      uint64_t v167 = URL.path.getter(result);
      uint64_t v169 = v168;
      char v170 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
      v170(v166, v201);
      uint64_t v171 = (uint64_t)v186;
      if (v167 == 0xD000000000000013LL && v169 == 0x80000001001230A0LL)
      {
        swift_bridgeObjectRelease(0x80000001001230A0LL);
        sub_10001A148(v203, v171, (uint64_t *)&unk_10015BA30);
LABEL_102:
        sub_100012824(v171, (uint64_t *)&unk_10015BA30);
        uint64_t v134 = (uint64_t)v205;
        goto LABEL_83;
      }

      char v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v167, v169, 0xD000000000000013LL, 0x80000001001230A0LL, 0LL);
      swift_bridgeObjectRelease(v169);
      sub_10001A148(v203, v171, (uint64_t *)&unk_10015BA30);
      if ((v172 & 1) != 0) {
        goto LABEL_102;
      }
      uint64_t v173 = v184;
      sub_10001A148(v171, v184, (uint64_t *)&unk_10015BA30);
      uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v173, 1LL, v201);
      if ((_DWORD)result != 1)
      {
        uint64_t v174 = URL.path.getter(result);
        uint64_t v176 = v175;
        v170(v173, v201);
        if (v174 == 0xD00000000000001ALL && v176 == 0x80000001001230C0LL)
        {
          swift_bridgeObjectRelease(0x80000001001230C0LL);
        }

        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)(v174, v176, 0xD00000000000001ALL, 0x80000001001230C0LL, 0LL);
          swift_bridgeObjectRelease(v176);
        }

        uint64_t v134 = (uint64_t)v205;
        char v162 = (char)v199;
        sub_100012824(v171, (uint64_t *)&unk_10015BA30);
        goto LABEL_84;
      }

LABEL_114:
      __break(1u);
      return result;
    }

LABEL_113:
    __break(1u);
    goto LABEL_114;
  }

  char v162 = (char)v199;
LABEL_85:
  sub_100012824(v152, (uint64_t *)&unk_10015BA30);
  sub_1000D3F74((uint64_t)&v211, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v222);
  uint64_t v221 = v222;
  if (qword_10015E4A8 != -1) {
    swift_once(&qword_10015E4A8, sub_10002C458);
  }
  uint64_t v220 = qword_1001752E0;
  if (v162 != 3)
  {
    LOBYTE(v215) = v162;
    LOBYTE(v219) = 0;
    unint64_t v164 = sub_10003A5FC();
    dispatch thunk of static Equatable.== infix(_:_:)( &v215,  &v219,  &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch,  v164);
  }

  sub_1000D3F74((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v215);
  uint64_t v221 = v215;
  if (qword_10015E4B0 != -1) {
    swift_once(&qword_10015E4B0, sub_10002C468);
  }
  uint64_t v220 = qword_1001752E8;
  if (v162 != 3)
  {
    LOBYTE(v22sub_100006034(v0 + 2) = v162;
    LOBYTE(v219) = 1;
    unint64_t v165 = sub_10003A5FC();
    dispatch thunk of static Equatable.== infix(_:_:)( &v222,  &v219,  &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch,  v165);
  }

  sub_1000D3F74((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v222);
  uint64_t v221 = v222;
  if (qword_10015E4D0 != -1) {
    swift_once(&qword_10015E4D0, sub_10002C4E8);
  }
  uint64_t v220 = qword_100175308;
  sub_1000D3F74((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v215);
  sub_100012824(v207, (uint64_t *)&unk_10015BA30);
  sub_100012824(v210, (uint64_t *)&unk_10015BA30);
  sub_100012824(v134, (uint64_t *)&unk_10015BA30);
  sub_100012824((uint64_t)v202, (uint64_t *)&unk_10015BA30);
  return (void *)v215;
}

    swift_once(&qword_100164668, sub_1000A46D4);
    goto LABEL_91;
  }

  if (!v91)
  {
    __break(1u);
LABEL_29:

    uint64_t v97 = v227;
    uint64_t v98 = v228;
    uint64_t v99 = *(char **)(v227 + 16);
    char v100 = v229;
    goto LABEL_35;
  }

void *sub_10003916C(void *a1)
{
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[6];
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[14];
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[17];
  uint64_t v30 = a1[20];
  uint64_t v28 = a1[21];
  uint64_t v35 = a1[19];
  uint64_t v36 = a1[23];
  uint64_t v25 = a1[27];
  uint64_t v26 = a1[26];
  uint64_t v23 = a1[31];
  uint64_t v24 = a1[29];
  uint64_t v21 = a1[35];
  uint64_t v22 = a1[33];
  uint64_t v19 = a1[38];
  uint64_t v20 = a1[37];
  uint64_t v17 = a1[40];
  uint64_t v18 = a1[39];
  uint64_t v14 = a1[41];
  uint64_t v8 = a1[43];
  uint64_t v9 = a1[45];
  uint64_t v10 = a1[47];
  uint64_t v27 = a1[49];
  uint64_t v29 = a1[51];
  uint64_t v31 = a1[53];
  uint64_t v34 = a1[54];
  uint64_t v44 = a1[57];
  uint64_t v45 = a1[56];
  uint64_t v42 = a1[59];
  uint64_t v43 = a1[58];
  uint64_t v40 = a1[61];
  uint64_t v41 = a1[60];
  uint64_t v39 = a1[62];
  uint64_t v37 = a1[55];
  uint64_t v38 = a1[63];
  uint64_t v32 = a1[65];
  uint64_t v33 = a1[64];
  uint64_t v50 = a1[69];
  uint64_t v51 = a1[68];
  uint64_t v48 = a1[71];
  uint64_t v49 = a1[70];
  uint64_t v46 = a1[67];
  uint64_t v47 = a1[72];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  sub_100039418(v13);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  sub_100039438(v45, v44, v43, v42, v41, v40, v39, v38, v33, v32);
  swift_bridgeObjectRelease(v46);
  sub_1000394B0(v51, v50, v49, v48, v47);
  return a1;
}

unint64_t sub_100039418(unint64_t result)
{
  if (result != 5) {
    return sub_100039428(result);
  }
  return result;
}

unint64_t sub_100039428(unint64_t result)
{
  if (result >= 5) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_100039438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a10);
  }

  return result;
}

uint64_t sub_1000394B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }

  return result;
}

uint64_t sub_100039508( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 0:
    case 30:
    case 51:
      goto LABEL_3;
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
      goto LABEL_9;
    case 6:
    case 14:
    case 42:
      swift_bridgeObjectRelease(a2);
      uint64_t result = a4;
      goto LABEL_3;
    case 8:
      uint64_t result = a3;
      goto LABEL_3;
    case 13:
      swift_bridgeObjectRelease(a2);
      sub_10002193C(a4, a5);
      swift_bridgeObjectRelease(a9);
      uint64_t result = a7;
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);
      uint64_t result = a6;
      goto LABEL_3;
    case 18:
      uint64_t result = a2;
LABEL_9:
      swift_bridgeObjectRelease(result);
      uint64_t result = a3;
      goto LABEL_3;
    case 26:
      swift_bridgeObjectRelease(result);
LABEL_2:
      uint64_t result = a2;
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_1000395F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005FB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100039638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000340F4(a1, a2, a3, v3);
}

void *sub_100039640(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t result = (void *)sub_100010D14(v2);
    uint64_t v5 = (uint64_t)result;
    int v7 = v6;
    uint64_t v8 = 0LL;
    uint64_t v9 = v2 + 64;
    uint64_t v26 = v2 + 80;
    uint64_t v27 = v3;
    uint64_t v28 = v2;
    while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
    {
      unint64_t v11 = (unint64_t)v5 >> 6;
      if (*(_DWORD *)(v2 + 36) != v7) {
        goto LABEL_23;
      }
      uint64_t v30 = v8;
      uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain(v14);
      swift_retain(v15);
      uint64_t v16 = a2(v13, v14, v15);
      swift_release(v15);
      uint64_t v17 = swift_bridgeObjectRelease(v14);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      uint64_t v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      uint64_t v19 = v16;
      uint64_t v2 = v28;
      uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v19);
      uint64_t result = (void *)specialized ContiguousArray._endMutation()(v20);
      int64_t v10 = 1LL << *(_BYTE *)(v28 + 32);
      if (v5 >= v10) {
        goto LABEL_24;
      }
      uint64_t v21 = *(void *)(v9 + 8 * v11);
      if ((v21 & (1LL << v5)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v28 + 36) != v7) {
        goto LABEL_26;
      }
      unint64_t v22 = v21 & (-2LL << (v5 & 0x3F));
      if (v22)
      {
        int64_t v10 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v23 = v11 + 1;
        unint64_t v24 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v24)
        {
          unint64_t v25 = *(void *)(v9 + 8 * v23);
          if (v25)
          {
LABEL_18:
            int64_t v10 = __clz(__rbit64(v25)) + (v23 << 6);
          }

          else
          {
            while (v24 - 2 != v11)
            {
              unint64_t v25 = *(void *)(v26 + 8 * v11++);
              if (v25)
              {
                unint64_t v23 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }

      uint64_t v8 = v30 + 1;
      uint64_t v5 = v10;
      if (v30 + 1 == v27) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for RealizedKernelCollection(uint64_t a1)
{
  return sub_10001809C(a1, (uint64_t *)&unk_10015EC70, (uint64_t)&nominal type descriptor for RealizedKernelCollection);
}

uint64_t sub_100039878()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003989C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000398D0(uint64_t a1, uint64_t a2, char a3)
{
  return 2LL;
}

BOOL sub_1000398F4(void *a1, void *a2, char a3)
{
  int v7 = (uint64_t *)a1[3];
  uint64_t v8 = a2[3];
  sub_10003A50C((uint64_t *)(v8 + 24), (uint64_t)v44);
  sub_10003A50C(v7 + 3, (uint64_t)v40);
  sub_10003A548((uint64_t)v44, (uint64_t)v42);
  if (v41)
  {
    if (v41 != 1)
    {
      sub_10003A584(v42);
      uint64_t v13 = v40;
      goto LABEL_17;
    }

    sub_10003A50C(v40, (uint64_t)v39);
    uint64_t v9 = v39[0];
    if (v43 == 1)
    {
      uint64_t v10 = v42[0];
      unint64_t v3 = sub_1000D4234( *(unsigned __int8 *)(v39[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind),  *(unsigned __int8 *)(v42[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      swift_release(v9);
      swift_release(v10);
      sub_10003A584(v40);
      if ((v3 & 1) != 0) {
        return 1LL;
      }
      if ((a3 & 1) != 0) {
        goto LABEL_6;
      }
LABEL_19:
      uint64_t v12 = _swiftEmptyArrayStorage;
      goto LABEL_20;
    }

    swift_release(v39[0]);
  }

  if (!v43)
  {
    if (v41 != 1) {
      goto LABEL_18;
    }
    swift_release(v40[0]);
    uint64_t v13 = v42;
LABEL_17:
    sub_10003A584(v13);
    return 1LL;
  }

  if (v43 != 1)
  {
    sub_10003A584(v42);
    uint64_t v14 = v40;
    goto LABEL_31;
  }

  sub_10003A50C(v42, (uint64_t)v39);
  swift_release(v39[0]);
  if (!v41)
  {
    sub_10003A584(v40);
    uint64_t v14 = v42;
LABEL_31:
    sub_10003A584(v14);
    return 0LL;
  }

LABEL_18:
  sub_100012824((uint64_t)v40, &qword_100158BE0);
  if ((a3 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v11 = sub_100005FB4(&qword_100158BE8);
  uint64_t v12 = (void *)swift_allocObject(v11, 40LL, 7LL);
  *((_OWORD *)v12 + 1) = xmmword_10010F110;
  if (qword_10015E460 != -1) {
    swift_once(&qword_10015E460, sub_10002C248);
  }
  v12[4] = qword_100175298;
LABEL_20:
  if (qword_10015E440 != -1) {
    swift_once(&qword_10015E440, sub_10002C188);
  }
  uint64_t v16 = qword_100175278;
  if (qword_10015E420 != -1) {
    swift_once(&qword_10015E420, sub_10002C0C8);
  }
  uint64_t v17 = qword_100175258;
  unint64_t v18 = qword_10015E4A8;
  if (qword_10015E4A8 != -1) {
    swift_once(&qword_10015E4A8, sub_10002C458);
  }
  uint64_t v19 = (char *)v12[2];
  int64_t v20 = (int64_t)(v19 + 3);
  if (__OFADD__(v19, 3LL))
  {
    __break(1u);
LABEL_59:
    uint64_t v19 = sub_1000356AC((char *)(v18 > 1), v20, 1, v19);
    unint64_t v18 = *((void *)v19 + 3);
    unint64_t v23 = v18 >> 1;
    goto LABEL_38;
  }

  uint64_t v38 = v8;
  uint64_t v8 = qword_1001752E0;
  uint64_t v21 = swift_bridgeObjectRetain(v12);
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v21);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (unint64_t v18 = v12[3], v23 = v18 >> 1, (uint64_t)(v18 >> 1) >= v20))
  {
    uint64_t v19 = (char *)v12;
  }

  else
  {
    else {
      int64_t v24 = (int64_t)v19;
    }
    uint64_t v19 = sub_1000356AC(isUniquelyReferenced_nonNull_native, v24, 1, (char *)v12);
    unint64_t v18 = *((void *)v19 + 3);
    unint64_t v23 = v18 >> 1;
  }

  unint64_t v3 = *((void *)v19 + 2);
  int64_t v20 = v3 + 1;
  if (v23 <= v3) {
    goto LABEL_59;
  }
LABEL_38:
  *((void *)v19 + sub_100006034(v0 + 2) = v20;
  *(void *)&v19[8 * v3 + 32] = v16;
  unint64_t v25 = v3 + 2;
  if ((uint64_t)v23 < (uint64_t)(v3 + 2))
  {
    uint64_t v37 = sub_1000356AC((char *)(v18 > 1), v3 + 2, 1, v19);
    unint64_t v25 = v3 + 2;
    uint64_t v19 = v37;
  }

  *((void *)v19 + sub_100006034(v0 + 2) = v25;
  *(void *)&v19[8 * v20 + 32] = v17;
  unint64_t v27 = *((void *)v19 + 2);
  unint64_t v26 = *((void *)v19 + 3);
  if (v27 >= v26 >> 1) {
    uint64_t v19 = sub_1000356AC((char *)(v26 > 1), v27 + 1, 1, v19);
  }
  *((void *)v19 + sub_100006034(v0 + 2) = v27 + 1;
  *(void *)&v19[8 * v27 + 32] = v8;
  uint64_t v28 = swift_bridgeObjectRelease(v12);
  uint64_t v29 = *((void *)v19 + 2);
  if (!v29)
  {
LABEL_50:
    uint64_t v33 = swift_bridgeObjectRelease(v19);
    if ((*((_BYTE *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0
      || (*((_BYTE *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0)
    {
      goto LABEL_52;
    }

    uint64_t v35 = *(void *)((char *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    uint64_t v36 = *(void *)((char *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    if (v35 < v36) {
      return 1LL;
    }
    if (v36 >= v35)
    {
LABEL_52:
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*v7 + 192))(v33);
      return (*(uint64_t (**)(void))(*(void *)v38 + 192LL))() < v34;
    }

    return 0LL;
  }

  uint64_t v30 = 0LL;
  uint64_t v31 = *(uint64_t (**)(void))(*a1 + 168LL);
  while (1)
  {
    uint64_t v32 = *(void *)&v19[8 * v30 + 32];
    if ((v32 & ~((uint64_t (*)(uint64_t))v31)(v28)) == 0
      && (v32 & ~(*(uint64_t (**)(void))(*a2 + 168LL))()) != 0)
    {
      break;
    }

    uint64_t v28 = (*(uint64_t (**)(void))(*a2 + 168LL))();
    if ((v32 & ~v28) == 0)
    {
      uint64_t v28 = v31();
      if ((v32 & ~v28) != 0)
      {
        swift_bridgeObjectRelease(v19);
        return 0LL;
      }
    }

    if (v29 == ++v30) {
      goto LABEL_50;
    }
  }

  swift_bridgeObjectRelease(v19);
  return 1LL;
}

  __break(1u);
  return result;
}

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    uint64_t v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    v22 += 40LL;
    --v20;
  }

  while (v20);
  uint64_t v77 = v93;
LABEL_45:
  swift_bridgeObjectRelease(v77);
  uint64_t v78 = (void *)swift_allocObject(&unk_10014B3E0, 40LL, 7LL);
  uint64_t v79 = v94;
  uint64_t v80 = v104;
  v78[2] = v94;
  v78[3] = v80;
  v78[4] = v21;
  uint64_t v112 = sub_10009A6F0;
  unint64_t v113 = v78;
  *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v110 = sub_10000B750;
  uint64_t v111 = &unk_10014B3F8;
  unsigned int v81 = _Block_copy(&aBlock);
  swift_unknownObjectRetain(v79);
  swift_retain(v80);
  uint64_t v82 = swift_retain(v21);
  uint64_t v83 = v95;
  static DispatchQoS.unspecified.getter(v82);
  *(void *)&uint64_t v115 = _swiftEmptyArrayStorage;
  uint64_t v84 = sub_100012860( (unint64_t *)&qword_10015ABA0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  unsigned int v85 = sub_100005FB4((uint64_t *)&unk_100159E80);
  uint64_t v86 = sub_1000820B0();
  uint64_t v87 = v98;
  uint64_t v88 = v100;
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, &v115, v85, v86, v100, v84);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v83, v87, v81);
  _Block_release(v81);
  (*(void (**)(void *, uint64_t))(v99 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v83, v97);
  uint64_t v89 = v113;
  swift_release(v80);
  return swift_release(v89);
}

    uint64_t v30 = 0LL;
    unsigned int v69 = 0LL;
    uint64_t v67 = 0u;
    uint64_t v68 = 0u;
    unsigned int v66 = 0u;
LABEL_19:
    sub_1000263D8((uint64_t)&v66, (uint64_t)&v70, &qword_10015B150);
    uint64_t v37 = v71;
    if (!v71) {
      return swift_release(v57);
    }
    uint64_t v73 = v30;
    uint64_t v61 = v4;
    unint64_t v60 = v70;
    sub_100005158(v58, (uint64_t)&v66);
    uint64_t v38 = v2[5];
    uint64_t v39 = v2[6];
    sub_100005110(v59, v38);
    sub_10009C2CC(v38, v39);
    uint64_t v40 = v2;
    char v41 = v64[4];
    sub_100005110(v64, v64[3]);
    char v43 = *((void *)&v67 + 1);
    uint64_t v42 = v68;
    sub_100005110(&v66, *((uint64_t *)&v67 + 1));
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v42);
    uint64_t v46 = v45;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(v41 + 16))(&v62, v44);
    swift_bridgeObjectRelease(v46);
    if (v63)
    {
      sub_100005158(&v62, (uint64_t)v65);
      uint64_t v47 = sub_100006034(v64);
      uint64_t v48 = (*(uint64_t (**)(uint64_t))(*v40 + 144LL))(v47);
      __chkstk_darwin(v48);
      v51[2] = v40;
      v51[3] = v65;
      type metadata accessor for RealizedInfo(0LL);
      sub_100006260((void (*)(uint64_t))sub_1000B2480, (uint64_t)v51, v48);
      uint64_t v2 = v40;
      uint64_t v49 = v64[0];
      swift_bridgeObjectRelease(v37);
      swift_release(v48);
      swift_release(v49);
      sub_100006034(v65);
      uint64_t v4 = v61;
    }

    else
    {
      sub_100012824((uint64_t)&v62, &qword_100157C58);
      sub_100006034(v64);
      strcpy((char *)v65, "No bundle at ");
      HIWORD(v65[1]) = -4864;
      uint64_t v10 = *((void *)&v67 + 1);
      uint64_t v11 = v68;
      sub_100005110(&v66, *((uint64_t *)&v67 + 1));
      v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      uint64_t object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      uint64_t v14 = v65[0];
      uint64_t v15 = v65[1];
      uint64_t v16 = sub_100012624();
      uint64_t v17 = swift_allocError(&type metadata for KMError, v16, 0LL, 0LL);
      *(void *)unint64_t v18 = v14;
      *(void *)(v18 + 8) = v15;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(void *)(v18 + 64) = 0LL;
      *(_BYTE *)(v18 + 7sub_100006034(v0 + 2) = 10;
      uint64_t v19 = swift_willThrow(v17);
      uint64_t v2 = v40;
      uint64_t v4 = v61;
      int64_t v20 = static os_log_type_t.error.getter(v19);
      uint64_t v21 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      unint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
      *(_OWORD *)(v22 + 16) = v55;
      *(void *)(v22 + 56) = &type metadata for String;
      unint64_t v23 = sub_100026B64();
      *(void *)(v22 + 64) = v23;
      *(void *)(v22 + 3sub_100006034(v0 + 2) = v60;
      *(void *)(v22 + 40) = v37;
      v65[0] = v17;
      swift_errorRetain(v17);
      int64_t v24 = sub_100005FB4(&qword_10015AB20);
      unint64_t v25 = String.init<A>(describing:)(v65, v24);
      *(void *)(v22 + 96) = &type metadata for String;
      *(void *)(v22 + 104) = v23;
      *(void *)(v22 + 7sub_100006034(v0 + 2) = v25;
      *(void *)(v22 + 80) = v26;
      unint64_t v27 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v28 = (void *)static OS_os_log.default.getter(v27);
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v28,  "Couldn't load bundle '%{public}s' from history: %{public}s",  58LL,  2LL,  v22);
      swift_bridgeObjectRelease(v22);

      swift_errorRelease(v17);
    }

    uint64_t result = sub_100006034(&v66);
    uint64_t v9 = v73;
  }

  uint64_t v36 = *(void *)(v53 + 8 * (v35 + 2));
  if (v36)
  {
    v35 += 2LL;
    goto LABEL_13;
  }

  uint64_t v50 = v35 + 3;
  if (v35 + 3 >= v54)
  {
    uint64_t v4 = v35 + 2;
    goto LABEL_18;
  }

  uint64_t v36 = *(void *)(v53 + 8 * v50);
  if (v36)
  {
    v35 += 3LL;
LABEL_13:
    uint64_t v30 = (v36 - 1) & v36;
    uint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
    uint64_t v4 = v35;
LABEL_9:
    uint64_t v32 = *(void *)(v57 + 56);
    uint64_t v33 = (void *)(*(void *)(v57 + 48) + 16 * v31);
    uint64_t v34 = v33[1];
    *(void *)&unsigned int v66 = *v33;
    *((void *)&v66 + 1) = v34;
    sub_100005F70(v32 + 40 * v31, (uint64_t)v56);
    swift_bridgeObjectRetain(v34);
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v35 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      break;
    }
    if (v35 >= v54)
    {
      uint64_t v4 = v52;
      goto LABEL_18;
    }

    uint64_t v36 = *(void *)(v53 + 8 * v35);
    ++v50;
    if (v36) {
      goto LABEL_13;
    }
  }

  __break(1u);
  return result;
}

  int v6 = v7;
LABEL_43:
  if (v6 != v15 || v6 >= &v15[(v14 - v15 + (v14 - v15 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0LL]) {
    memmove(v6, v15, 16 * ((v14 - v15) / 16));
  }
  return 1LL;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v13 = (v16 - 1) & v16;
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v40) {
    return (uint64_t)v5;
  }
  uint64_t v16 = *(void *)(v39 + 8 * v17);
  if (v16)
  {
    int v6 = v17;
    goto LABEL_18;
  }

  while (1)
  {
    int v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v40) {
      return (uint64_t)v5;
    }
    uint64_t v16 = *(void *)(v39 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }

unint64_t sub_100039DB8()
{
  unint64_t result = qword_100158920;
  if (!qword_100158920)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A600, &type metadata for CodeSigningTeam);
    atomic_store(result, (unint64_t *)&qword_100158920);
  }

  return result;
}

unint64_t sub_100039DFC()
{
  unint64_t result = qword_100158930;
  if (!qword_100158930)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011B5B8, &type metadata for OSExtension.Location);
    atomic_store(result, (unint64_t *)&qword_100158930);
  }

  return result;
}

unint64_t sub_100039E40()
{
  unint64_t result = qword_100158938;
  if (!qword_100158938)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FF74, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158938);
  }

  return result;
}

unint64_t sub_100039E84()
{
  unint64_t result = qword_100158940;
  if (!qword_100158940)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100158940);
  }

  return result;
}

unint64_t sub_100039ECC()
{
  unint64_t result = qword_100158948;
  if (!qword_100158948)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011009C, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158948);
  }

  return result;
}

unint64_t sub_100039F14()
{
  unint64_t result = qword_100158950;
  if (!qword_100158950)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FFD4, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158950);
  }

  return result;
}

unint64_t sub_100039F5C()
{
  unint64_t result = qword_100158958;
  if (!qword_100158958)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001100D4, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158958);
  }

  return result;
}

unint64_t sub_100039FA4()
{
  unint64_t result = qword_100158960;
  if (!qword_100158960)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001100FC, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158960);
  }

  return result;
}

unint64_t sub_100039FEC()
{
  unint64_t result = qword_100158968;
  if (!qword_100158968)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011012C, &type metadata for RealizedInfo.LoadInfo.LoadState);
    atomic_store(result, (unint64_t *)&qword_100158968);
  }

  return result;
}

uint64_t sub_10003A030()
{
  return sub_100012860(&qword_100158970, type metadata accessor for RealizedInfo, (uint64_t)&unk_10011022C);
}

uint64_t sub_10003A05C()
{
  return sub_100012860(&qword_100158978, type metadata accessor for RealizedKernelCollection, (uint64_t)&unk_100110204);
}

uint64_t sub_10003A088()
{
  return type metadata accessor for RealizedInfo(0LL);
}

void sub_10003A090(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = "(";
  void v6[3] = &unk_100110370;
  void v6[4] = "(";
  v6[5] = &unk_100110388;
  sub_10003A190(319LL, &qword_1001589A8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[6] = *(void *)(v2 - 8) + 64LL;
    sub_10003A190( 319LL,  (unint64_t *)&qword_1001589B0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[7] = *(void *)(v4 - 8) + 64LL;
      v6[8] = &unk_1001103A0;
      void v6[9] = &unk_1001103B8;
      v6[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 11LL, v6, a1 + 80);
    }
  }

void sub_10003A190(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

ValueMetadata *type metadata accessor for RealizedInfo.Flags()
{
  return &type metadata for RealizedInfo.Flags;
}

uint64_t destroy for RealizedInfo.LoadInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t _s10driverkitd12RealizedInfoC8LoadInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RealizedInfo.LoadInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2[2];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RealizedInfo.LoadInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealizedInfo.LoadInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealizedInfo.LoadInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo()
{
  return &type metadata for RealizedInfo.LoadInfo;
}

uint64_t storeEnumTagSinglePayload for RealizedInfo.LoadInfo.LoadState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10003A3D0 + 4 * byte_10010FF6E[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003A404 + 4 * byte_10010FF69[v4]))();
}

uint64_t sub_10003A404(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A40C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003A414LL);
  }
  return result;
}

uint64_t sub_10003A420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003A428LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10003A42C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A434(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo.LoadState()
{
  return &type metadata for RealizedInfo.LoadInfo.LoadState;
}

uint64_t sub_10003A450()
{
  return type metadata accessor for RealizedKernelCollection(0LL);
}

void sub_10003A458(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10003A190(319LL, &qword_1001589A8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 5LL, v6, a1 + 80);
    }
  }

uint64_t sub_10003A50C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A548(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10003A584(void *a1)
{
  return a1;
}

unint64_t sub_10003A5B8()
{
  unint64_t result = qword_100158BF8;
  if (!qword_100158BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FCF4, &type metadata for ExceptionList.ExceptionType);
    atomic_store(result, (unint64_t *)&qword_100158BF8);
  }

  return result;
}

unint64_t sub_10003A5FC()
{
  unint64_t result = qword_100158C08;
  if (!qword_100158C08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001144A0,  &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch);
    atomic_store(result, (unint64_t *)&qword_100158C08);
  }

  return result;
}

unint64_t sub_10003A640()
{
  unint64_t result = qword_100158C20;
  if (!qword_100158C20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100158C20);
  }

  return result;
}

uint64_t sub_10003A688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  unint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10003A700(v10, v7, v8);
}

uint64_t sub_10003A700(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100158C28);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10003A76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100158C28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t sub_10003A7B8()
{
  unint64_t v0 = sub_100012624();
  uint64_t v1 = swift_allocError(&type metadata for KMError, v0, 0LL, 0LL);
  *(void *)uint64_t v2 = 0xD000000000000033LL;
  *(void *)(v2 + 8) = 0x8000000100123250LL;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0LL;
  *(_BYTE *)(v2 + 7sub_100006034(v0 + 2) = 50;
  return swift_willThrow(v1);
}

uint64_t sub_10003A854()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t sub_10003A87C()
{
  unint64_t v0 = sub_100012624();
  uint64_t v1 = swift_allocError(&type metadata for KMError, v0, 0LL, 0LL);
  *(void *)uint64_t v2 = 0xD000000000000024LL;
  *(void *)(v2 + 8) = 0x8000000100123290LL;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0LL;
  *(_BYTE *)(v2 + 7sub_100006034(v0 + 2) = 50;
  return swift_willThrow(v1);
}

uint64_t type metadata accessor for NullLaunchServices()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18NullLaunchServices);
}

uint64_t type metadata accessor for RealLaunchServices()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18RealLaunchServices);
}

uint64_t sub_10003A934()
{
  return sub_10003A854();
}

uint64_t sub_10003A948()
{
  return nullsub_1();
}

uint64_t sub_10003A95C()
{
  return sub_100013AC8();
}

uint64_t sub_10003A974(uint64_t a1, uint64_t a2)
{
  return sub_10003A980(a1, a2, (uint64_t)&off_100147220);
}

uint64_t sub_10003A980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10003AAE4(v10, v7, v8);
}

uint64_t sub_10003A9F8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100005110(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v7 = StaticString.description.getter(v4, v5, v6);
  uint64_t v9 = v8;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100005110(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  uint64_t v15 = StaticString.description.getter(v12, v13, v14);
  uint64_t v17 = v16;
  uint64_t v18 = String.utf8CString.getter(v7);
  swift_bridgeObjectRelease(v9);
  uint64_t v19 = String.utf8CString.getter(v15);
  swift_bridgeObjectRelease(v17);
  uint64_t v20 = j___os_feature_enabled_impl(v18 + 32, v19 + 32);
  swift_release(v18);
  swift_release(v19);
  return v20;
}

uint64_t sub_10003AAD8(uint64_t a1, uint64_t a2)
{
  return sub_10003A980(a1, a2, (uint64_t)&off_100147248);
}

uint64_t sub_10003AAE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100158D80);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10003AB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100158D80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t type metadata accessor for RealFeatureFlagsClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd22RealFeatureFlagsClient);
}

uint64_t type metadata accessor for RestoreOSFeatureFlagsClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd27RestoreOSFeatureFlagsClient);
}

unint64_t sub_10003ABE0()
{
  return sub_10003AC14((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10003AC14(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100157EE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }

  sub_100005FB4(&qword_100157EE8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v27 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100040784(v13, (uint64_t)v5);
    unint64_t result = sub_10003DD04((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    uint64_t v20 = v8[7];
    uint64_t v21 = type metadata accessor for DriverBinEntry(0LL);
    unint64_t result = sub_100012778( v10,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v17,  type metadata accessor for DriverBinEntry);
    uint64_t v22 = v8[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_12;
    }
    uint64_t v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v25 = v27;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10003ADC4(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain(a1);
  uint64_t v3 = sub_10003AE10(v2);
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_10003AE10(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)v33 - v6;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = _swiftEmptyArrayStorage;
  if (!v11) {
    return (uint64_t)v12;
  }
  v33[1] = v1;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v42 = v8;
  sub_10003DFCC(0LL, v11, 0);
  uint64_t result = sub_100010D14(v42);
  uint64_t v15 = result;
  uint64_t v16 = v42;
  uint64_t v17 = 0LL;
  uint64_t v18 = v42 + 64;
  char v19 = *(_BYTE *)(v42 + 32);
  v33[0] = v42 + 88;
  uint64_t v36 = v10;
  uint64_t v37 = v7;
  uint64_t v34 = v14;
  uint64_t v35 = v42 + 64;
  while ((v15 & 0x8000000000000000LL) == 0 && v15 < 1LL << v19)
  {
    unint64_t v21 = (unint64_t)v15 >> 6;
    if (*(_DWORD *)(v16 + 36) != (_DWORD)v14) {
      goto LABEL_28;
    }
    uint64_t v22 = v38;
    sub_100012734(*(void *)(v16 + 56) + *(void *)(v40 + 72) * v15, v38, type metadata accessor for DriverBinEntry);
    uint64_t v23 = v22;
    uint64_t v24 = v39;
    sub_100012778(v23, v39, type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v10, v24 + *(int *)(v41 + 28), v7);
    sub_1000127BC(v24, type metadata accessor for DriverBinEntry);
    unint64_t v12 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
    {
      sub_10003DFCC(0LL, v12[2] + 1LL, 1);
      unint64_t v12 = v44;
    }

    unint64_t v26 = v12[2];
    unint64_t v25 = v12[3];
    if (v26 >= v25 >> 1)
    {
      sub_10003DFCC(v25 > 1, v26 + 1, 1);
      unint64_t v12 = v44;
    }

    v12[2] = v26 + 1;
    unint64_t v27 = (unint64_t)v12
    uint64_t v10 = v36;
    uint64_t v7 = v37;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(v27, v36, v37);
    uint64_t v44 = v12;
    uint64_t v16 = v42;
    char v19 = *(_BYTE *)(v42 + 32);
    unint64_t v20 = 1LL << v19;
    if (v15 >= 1LL << v19) {
      goto LABEL_29;
    }
    uint64_t v18 = v35;
    uint64_t v28 = *(void *)(v35 + 8 * v21);
    if ((v28 & (1LL << v15)) == 0) {
      goto LABEL_30;
    }
    LODWORD(v14) = v34;
    if (*(_DWORD *)(v42 + 36) != (_DWORD)v34) {
      goto LABEL_31;
    }
    unint64_t v29 = v28 & (-2LL << (v15 & 0x3F));
    if (v29)
    {
      unint64_t v20 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = v21 + 1;
      unint64_t v31 = (v20 + 63) >> 6;
      if (v21 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v35 + 8 * v30);
        if (!v32)
        {
          unint64_t v30 = v21 + 2;
          if (v21 + 2 >= v31) {
            goto LABEL_4;
          }
          unint64_t v32 = *(void *)(v35 + 8 * v30);
          if (!v32)
          {
            while (v31 - 3 != v21)
            {
              unint64_t v32 = *(void *)(v33[0] + 8 * v21++);
              if (v32)
              {
                unint64_t v30 = v21 + 2;
                goto LABEL_19;
              }
            }

            goto LABEL_4;
          }
        }

uint64_t sub_10003B178(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v46 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)v39 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v39[1] = v1;
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_10000CC84(0, v7, 0);
  uint64_t result = sub_100010D14(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0LL;
  uint64_t v13 = a1 + 64;
  uint64_t v40 = a1 + 80;
  int64_t v41 = v7;
  uint64_t v43 = a1 + 64;
  uint64_t v44 = a1;
  uint64_t v42 = v10;
  uint64_t v14 = (uint64_t)v46;
  while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v17 = (unint64_t)v11 >> 6;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10) {
      goto LABEL_26;
    }
    uint64_t v49 = v12;
    uint64_t v18 = v45;
    sub_100012734(*(void *)(a1 + 56) + *(void *)(v47 + 72) * v11, v45, type metadata accessor for DriverBinEntry);
    sub_100012778(v18, v14, type metadata accessor for DriverBinEntry);
    v50[0] = 0LL;
    v50[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(v50[1]);
    strcpy((char *)v50, "Staged bundle ");
    HIBYTE(v50[1]) = -18;
    uint64_t v19 = v48;
    uint64_t v20 = type metadata accessor for URL(0LL);
    uint64_t v21 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    uint64_t object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._uint64_t countAndFlagsBits = 0x70706120726F6620LL;
    v24._uint64_t object = (void *)0xE900000000000020LL;
    String.append(_:)(v24);
    unint64_t v25 = (uint64_t *)(v14 + *(int *)(v19 + 20));
    uint64_t v26 = *v25;
    unint64_t v27 = (void *)v25[1];
    swift_bridgeObjectRetain(v27);
    v28._uint64_t countAndFlagsBits = v26;
    v28._uint64_t object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    uint64_t v29 = v50[0];
    uint64_t v30 = v50[1];
    sub_1000127BC(v14, type metadata accessor for DriverBinEntry);
    uint64_t v8 = v51;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v51);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10000CC84(0, v8[2] + 1LL, 1);
      uint64_t v8 = v51;
    }

    unint64_t v32 = v8[2];
    unint64_t v31 = v8[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t result = sub_10000CC84(v31 > 1, v32 + 1, 1);
      uint64_t v8 = v51;
    }

    uint64_t v8[2] = v32 + 1;
    uint64_t v33 = &v8[2 * v32];
    v33[4] = v29;
    v33[5] = v30;
    a1 = v44;
    int64_t v15 = 1LL << *(_BYTE *)(v44 + 32);
    if (v11 >= v15) {
      goto LABEL_27;
    }
    uint64_t v13 = v43;
    uint64_t v34 = *(void *)(v43 + 8 * v17);
    if ((v34 & (1LL << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v42;
    if (*(_DWORD *)(v44 + 36) != (_DWORD)v42) {
      goto LABEL_29;
    }
    unint64_t v35 = v34 & (-2LL << (v11 & 0x3F));
    if (v35)
    {
      int64_t v15 = __clz(__rbit64(v35)) | v11 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v16 = v41;
    }

    else
    {
      unint64_t v36 = v17 + 1;
      unint64_t v37 = (unint64_t)(v15 + 63) >> 6;
      int64_t v16 = v41;
      if (v17 + 1 < v37)
      {
        unint64_t v38 = *(void *)(v43 + 8 * v36);
        if (v38)
        {
LABEL_22:
          int64_t v15 = __clz(__rbit64(v38)) + (v36 << 6);
        }

        else
        {
          while (v37 - 2 != v17)
          {
            unint64_t v38 = *(void *)(v40 + 8 * v17++);
            if (v38)
            {
              unint64_t v36 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    uint64_t v12 = v49 + 1;
    uint64_t v11 = v15;
    if (v49 + 1 == v16) {
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10003B528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  for (uint64_t result = UUID.init()(v6);
        *(void *)(a1 + 16);
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4))
  {
    swift_bridgeObjectRetain(a1);
    sub_10003DD04(a2);
    char v11 = v10;
    uint64_t result = swift_bridgeObjectRelease(a1);
    if ((v11 & 1) == 0) {
      break;
    }
    UUID.init()(result);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  }

  return result;
}

uint64_t sub_10003B5F8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    sub_10003DD04(a1);
    char v5 = v4;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t sub_10003B648(uint64_t a1)
{
  uint64_t v3 = sub_100005FB4(&qword_100158EC8);
  __chkstk_darwin(v3);
  char v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v22 - v11, a1, v6);
  uint64_t v14 = *v1;
  if (*(void *)(v14 + 16)
    && (swift_bridgeObjectRetain(v14),
        sub_10003DD04((uint64_t)v12),
        char v16 = v15,
        swift_bridgeObjectRelease(v14),
        (v16 & 1) != 0))
  {
    unint64_t v22 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(v23);
    unint64_t v22 = 0xD00000000000002DLL;
    unint64_t v23 = 0x80000001001233A0LL;
    uint64_t v19 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v19);
    uint64_t object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v22,  v23,  "driverkitd/DriverBinInfo.swift",  30LL,  2LL,  64LL,  0);
    __break(1u);
  }

  else
  {
    v13(v10, (uint64_t)v12, v6);
    sub_100012734(a1, (uint64_t)v5, type metadata accessor for DriverBinEntry);
    uint64_t v17 = type metadata accessor for DriverBinEntry(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v5, 0LL, 1LL, v17);
    sub_10003B87C((uint64_t)v5, (uint64_t)v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  return result;
}

uint64_t sub_10003B87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100005FB4(&qword_100158EC8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DriverBinEntry(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_100040700(a1);
    sub_10003E15C(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_100040700((uint64_t)v8);
  }

  else
  {
    sub_100012778(a1, (uint64_t)v11, type metadata accessor for DriverBinEntry);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10003E988((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = *v3;
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a2, v17);
  }

uint64_t sub_10003B9EC()
{
  if (*v0) {
    return 0x6E6F6973726576LL;
  }
  else {
    return 0x73656972746E65LL;
  }
}

uint64_t sub_10003BA20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003F0A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003BA44(uint64_t a1)
{
  unint64_t v2 = sub_10003DDAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003BA6C(uint64_t a1)
{
  unint64_t v2 = sub_10003DDAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003BA94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100005FB4(&qword_100158ED8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100005110(a1, v12);
  unint64_t v14 = sub_10003DDAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DriverBinInfo.CodingKeys,  &type metadata for DriverBinInfo.CodingKeys,  v14,  v12,  v13);
  uint64_t v21 = a2;
  char v20 = 0;
  uint64_t v15 = sub_100005FB4(&qword_100158EE0);
  unint64_t v16 = sub_10003DDF0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, v15, v16);
  if (!v4)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10003BBDC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003F190(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10003BC08(void *a1)
{
  return sub_10003BA94(a1, *v1, v1[1], v1[2]);
}

void sub_10003BC24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4(&qword_100157ED8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v40 - v13;
  unint64_t v45 = 0LL;
  unint64_t v46 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease(v46);
  unint64_t v45 = 0xD000000000000013LL;
  unint64_t v46 = 0x80000001001233D0LL;
  swift_bridgeObjectRetain(a3);
  v15._uint64_t countAndFlagsBits = a2;
  v15._uint64_t object = a3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(a3);
  v16._uint64_t countAndFlagsBits = 8236LL;
  v16._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v16);
  v44._uint64_t countAndFlagsBits = *(void *)(a1 + 16);
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._uint64_t countAndFlagsBits = 0x73656972746E6520LL;
  v19._uint64_t object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v42 = (unint64_t)(v21 + 63) >> 6;
  int64_t v40 = v42 - 1;
  swift_bridgeObjectRetain(a1);
  int64_t v24 = 0LL;
  if (!v23) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v29 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v30 = v29 | (v24 << 6);
  while (2)
  {
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v32 - 8) + 16LL))( v12,  v31 + *(void *)(*(void *)(v32 - 8) + 72LL) * v30,  v32);
    uint64_t v33 = *(void *)(a1 + 56) + *(void *)(v43 + 72) * v30;
    uint64_t v34 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
    sub_100012734(v33, (uint64_t)&v12[*(int *)(v34 + 48)], type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v12, 0LL, 1LL, v34);
    while (1)
    {
      sub_10003F354((uint64_t)v12, (uint64_t)v14);
      uint64_t v39 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48LL))(v14, 1LL, v39) == 1)
      {
        swift_release(a1);
        return;
      }

      sub_100012778((uint64_t)&v14[*(int *)(v39 + 48)], (uint64_t)v8, type metadata accessor for DriverBinEntry);
      v44._uint64_t countAndFlagsBits = sub_10003C064();
      v44._uint64_t object = v25;
      v26._uint64_t countAndFlagsBits = 10LL;
      v26._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      unint64_t v27 = v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v27);
      sub_1000127BC((uint64_t)v8, type metadata accessor for DriverBinEntry);
      uint64_t v28 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v14, v28);
      if (v23) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v35 = v24 + 1;
      if (__OFADD__(v24, 1LL))
      {
        __break(1u);
        goto LABEL_29;
      }

      if (v35 < v42)
      {
        unint64_t v36 = *(void *)(v41 + 8 * v35);
        if (v36) {
          goto LABEL_11;
        }
        int64_t v37 = v24 + 2;
        ++v24;
        if (v35 + 1 < v42)
        {
          unint64_t v36 = *(void *)(v41 + 8 * v37);
          if (v36) {
            goto LABEL_14;
          }
          int64_t v24 = v35 + 1;
          if (v35 + 2 < v42)
          {
            unint64_t v36 = *(void *)(v41 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2LL;
              goto LABEL_11;
            }

            int64_t v37 = v35 + 3;
            int64_t v24 = v35 + 2;
            if (v35 + 3 < v42) {
              break;
            }
          }
        }
      }

uint64_t sub_10003C064()
{
  uint64_t v0 = type metadata accessor for TimeZone(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(NSISO8601DateFormatter) init];
  v40[0] = v4;
  static TimeZone.current.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setTimeZone:isa];

  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  uint64_t v43 = v8;
  v9._uint64_t countAndFlagsBits = 8250LL;
  v9._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v9);
  type metadata accessor for DriverBinEntry(0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  uint64_t object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._uint64_t countAndFlagsBits = 10LL;
  v14._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  v41._uint64_t countAndFlagsBits = 0LL;
  v41._uint64_t object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease(v41._object);
  v41._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v41._uint64_t object = (void *)0x80000001001233F0LL;
  uint64_t v15 = sub_10001A36C();
  Swift::String v17 = sub_10003D808(0x7FFFFFFFFFFFFFFFLL, 1, v15, v16);
  uint64_t v18 = sub_10003EF74((uint64_t)v17, 538976288LL, 0xE400000000000000LL);
  swift_bridgeObjectRelease(v17);
  v40[1] = v18;
  uint64_t v19 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v20 = sub_100013F74();
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v19, v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease(v18);
  v24._uint64_t countAndFlagsBits = v21;
  v24._uint64_t object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25._uint64_t countAndFlagsBits = 10LL;
  v25._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v25);
  Swift::String v26 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v26);
  v41._uint64_t countAndFlagsBits = 0LL;
  v41._uint64_t object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(v41._object);
  v41._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v41._uint64_t object = (void *)0x8000000100123410LL;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  uint64_t v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._uint64_t countAndFlagsBits = 10LL;
  v29._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  unint64_t v30 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v30);
  v41._uint64_t countAndFlagsBits = 0x656D695420202020LL;
  v41._uint64_t object = (void *)0xEF203A706D617473LL;
  Class v31 = Date._bridgeToObjectiveC()().super.isa;
  id v32 = v40[0];
  id v33 = [v40[0] stringFromDate:v31];

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  unint64_t v36 = v35;

  v37._uint64_t countAndFlagsBits = v34;
  v37._uint64_t object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  uint64_t v38 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v38);

  return v42;
}

void sub_10003C410()
{
}

uint64_t sub_10003C41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v50 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v62 = *(void *)(v10 - 8);
  uint64_t v63 = v10;
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100005FB4(&qword_100157ED8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v50 - v17;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v57 = 0LL;
  uint64_t v54 = a1;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v20 = a1 + 64;
  uint64_t v19 = v21;
  uint64_t v22 = 1LL << *(_BYTE *)(v20 - 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v19;
  uint64_t v52 = v20;
  int64_t v53 = (unint64_t)(v22 + 63) >> 6;
  int64_t v51 = v53 - 1;
  uint64_t v55 = v15;
  uint64_t v56 = (int *)v4;
  Swift::String v25 = type metadata accessor for DriverBinEntry;
  while (1)
  {
    if (v24)
    {
      Swift::String v26 = v25;
      uint64_t v60 = (v24 - 1) & v24;
      unint64_t v27 = __clz(__rbit64(v24)) | (v57 << 6);
LABEL_8:
      uint64_t v28 = v54;
      (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))( v15,  *(void *)(v54 + 48) + *(void *)(v62 + 72) * v27,  v63);
      uint64_t v29 = *(void *)(v28 + 56) + *(void *)(v61 + 72) * v27;
      uint64_t v30 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
      Swift::String v25 = v26;
      sub_100012734(v29, (uint64_t)&v15[*(int *)(v30 + 48)], v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v15, 0LL, 1LL, v30);
      goto LABEL_30;
    }

    int64_t v31 = v57 + 1;
    if (__OFADD__(v57, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }

    if (v31 < v53)
    {
      unint64_t v32 = *(void *)(v52 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v57 + 2;
      ++v57;
      if (v31 + 1 < v53)
      {
        unint64_t v32 = *(void *)(v52 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v57 = v31 + 1;
        if (v31 + 2 < v53)
        {
          unint64_t v32 = *(void *)(v52 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2LL;
            goto LABEL_12;
          }

          int64_t v57 = v31 + 2;
          if (v31 + 3 < v53)
          {
            unint64_t v32 = *(void *)(v52 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3LL;
              goto LABEL_12;
            }

            int64_t v33 = v31 + 4;
            int64_t v57 = v31 + 3;
            if (v31 + 4 < v53) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10003C91C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((sub_10003C41C(*a1, *a2) & 1) == 0) {
    return 0LL;
  }
  if (v2 == v4 && v3 == v5) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v4, v5, 0LL);
  }
}

uint64_t sub_10003C998()
{
  HIBYTE(v12[1]) = -18;
  uint64_t v1 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  uint64_t object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._uint64_t countAndFlagsBits = 0x70706120726F6620LL;
  v6._uint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v6);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  uint64_t v8 = *v7;
  Swift::String v9 = (void *)v7[1];
  swift_bridgeObjectRetain(v9);
  v10._uint64_t countAndFlagsBits = v8;
  v10._uint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v12[0];
}

uint64_t sub_10003CAB0()
{
  return sub_10003EE88(*v0);
}

uint64_t sub_10003CAB8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = PropertyListDecoder.init()();
  unint64_t v8 = sub_10003F39C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v21,  &type metadata for DriverBinInfo,  a1,  a2,  &type metadata for DriverBinInfo,  v8);
  if (v2)
  {
    sub_10001226C(a1, a2);
  }

  else
  {
    uint64_t v3 = v21;
    uint64_t v9 = v22;
    Swift::String v10 = v23;
    if (v22 == 0xD000000000000025LL && v23 == (void *)0x8000000100122520LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD000000000000025LL, 0x8000000100122520LL, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v3);
      sub_10001226C(a1, a2);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v3);
      swift_release(v7);
      return v3;
    }

    uint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    swift_bridgeObjectRetain(v10);
    _StringGuts.grow(_:)(52LL);
    v12._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    v12._uint64_t object = (void *)0x8000000100123430LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0xD000000000000025LL;
    v13._uint64_t object = (void *)0x8000000100122520LL;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = 0x20646E756F66202CLL;
    v14._uint64_t object = (void *)0xE800000000000000LL;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v9;
    v15._uint64_t object = v10;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v10);
    uint64_t v16 = v21;
    unint64_t v17 = v22;
    unint64_t v18 = sub_100012624();
    uint64_t v19 = swift_allocError(&type metadata for KMError, v18, 0LL, 0LL);
    *(void *)uint64_t v20 = v16;
    *(void *)(v20 + 8) = v17;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(void *)(v20 + 64) = 0LL;
    *(_BYTE *)(v20 + 7sub_100006034(v0 + 2) = 50;
    swift_willThrow(v19);
    sub_10001226C(a1, a2);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v3);
  }

  swift_release(v7);
  return v3;
}

uint64_t sub_10003CCFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(100LL);
  v12[0] = a1;
  v12[1] = a2;
  void v12[2] = a3;
  unint64_t v8 = sub_10003F3E0();
  uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v12, &type metadata for DriverBinInfo, v8, v9);
  swift_release(v7);
  return v10;
}

uint64_t sub_10003CDA8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003CDE0 + 4 * byte_10011054C[*v0]))( 0x65626D754E6E6962LL,  0xE900000000000072LL);
}

uint64_t sub_10003CDE0()
{
  return 0x726F636552707061LL;
}

uint64_t sub_10003CDF8()
{
  return 0x5255646567617473LL;
}

uint64_t sub_10003CE14()
{
  return 0x7542646567617473LL;
}

uint64_t sub_10003CE34()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_10003CE4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000403F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003CE70(uint64_t a1)
{
  unint64_t v2 = sub_10003F424();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CE98(uint64_t a1)
{
  unint64_t v2 = sub_10003F424();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003CEC0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a6, a1, v12);
  Swift::String v13 = (int *)type metadata accessor for DriverBinEntry(0LL);
  sub_100012778(a2, a6 + v13[5], type metadata accessor for ApplicationRecord);
  uint64_t v14 = a6 + v13[6];
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL);
  v16(v14, a3, v15);
  v16(a6 + v13[7], a4, v15);
  uint64_t v17 = a6 + v13[8];
  uint64_t v18 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v17, a5, v18);
}

uint64_t sub_10003CFB0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_100158F10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_10003F424();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DriverBinEntry.CodingKeys,  &type metadata for DriverBinEntry.CodingKeys,  v11,  v9,  v10);
  char v31 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100012860( &qword_100158EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for DriverBinEntry(0LL);
    uint64_t v15 = v3 + v14[5];
    char v30 = 1;
    uint64_t v16 = type metadata accessor for ApplicationRecord(0LL);
    uint64_t v17 = sub_100012860(&qword_100158288, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F4E4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v30, v5, v16, v17);
    uint64_t v18 = v3 + v14[6];
    char v29 = 2;
    uint64_t v19 = type metadata accessor for URL(0LL);
    uint64_t v20 = sub_100012860( &qword_100158238,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v29, v5, v19, v20);
    uint64_t v21 = v3 + v14[7];
    char v28 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v28, v5, v19, v20);
    uint64_t v22 = v3 + v14[8];
    char v27 = 4;
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = sub_100012860( &qword_100158010,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v27, v5, v23, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003D234@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v39 = type metadata accessor for Date(0LL);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v35 - v6;
  uint64_t v44 = type metadata accessor for ApplicationRecord(0LL);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  char v47 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = sub_100005FB4(&qword_100158F18);
  uint64_t v10 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (int *)type metadata accessor for DriverBinEntry(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  sub_100005110(a1, v17);
  unint64_t v18 = sub_10003F424();
  uint64_t v48 = v12;
  uint64_t v19 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DriverBinEntry.CodingKeys,  &type metadata for DriverBinEntry.CodingKeys,  v18,  v17,  v16);
  if (v19) {
    return sub_100006034(a1);
  }
  uint64_t v21 = (uint64_t)v43;
  uint64_t v20 = v44;
  uint64_t v50 = v10;
  uint64_t v35 = v8;
  uint64_t v22 = v45;
  char v55 = 0;
  uint64_t v23 = sub_100012860( &qword_100158F20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v24 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, &v55, v49, v46, v23);
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v15, v47, v24);
  char v54 = 1;
  uint64_t v25 = sub_100012860(&qword_1001585C0, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F4BC);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v54, v49, v20, v25);
  sub_100012778(v21, (uint64_t)&v15[v13[5]], type metadata accessor for ApplicationRecord);
  char v53 = 2;
  uint64_t v26 = (uint64_t)v15;
  uint64_t v27 = sub_100012860( &qword_100158250,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  char v28 = v41;
  char v47 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v53, v49, v22, v27);
  char v29 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v29(v26 + v13[6], v28, v22);
  char v52 = 3;
  char v30 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v52, v49, v22, v27);
  v29(v26 + v13[7], v30, v22);
  char v51 = 4;
  uint64_t v31 = sub_100012860( &qword_100158028,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  int64_t v33 = v38;
  uint64_t v32 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &v51, v49, v39, v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v26 + v13[8], v33, v32);
  sub_100012734(v26, v37, type metadata accessor for DriverBinEntry);
  sub_100006034(a1);
  return sub_1000127BC(v26, type metadata accessor for DriverBinEntry);
}

uint64_t sub_10003D7E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003D234(a1, a2);
}

uint64_t sub_10003D7F4(void *a1)
{
  return sub_10003CFB0(a1);
}

char *sub_10003D808(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  unint64_t v7 = a4;
  uint64_t v9 = swift_allocObject(&unk_100147428, 24LL, 7LL);
  *(void *)(v9 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = swift_allocObject(&unk_100147450, 24LL, 7LL);
  uint64_t v6 = (char *)v13;
  *(void *)(v13 + 16) = 15LL;
  unint64_t v14 = v7 >> 60;
  uint64_t v15 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(v7) & 0xF) : (uint64_t v16 = a3 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v17 = (v14 & ((a3 & 0x800000000000000LL) == 0)) == 0;
    uint64_t v38 = 7LL;
    if (!v17) {
      uint64_t v38 = 11LL;
    }
    sub_1000297BC(v38 | (v15 << 16), v13, a2 & 1, v9, a3, v7);
    swift_bridgeObjectRelease(v7);
    uint64_t v39 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain(v39);
    swift_release(v9);
    swift_release(v6);
    return v39;
  }

  uint64_t v49 = a1;
  BOOL v17 = (v14 & ((a3 & 0x800000000000000LL) == 0)) == 0;
  uint64_t v18 = 7LL;
  if (!v17) {
    uint64_t v18 = 11LL;
  }
  uint64_t v48 = v18 | (v16 << 16);
  unint64_t v54 = 4 * v16;
  uint64_t v56 = (char *)_swiftEmptyArrayStorage;
  unint64_t v19 = 15LL;
  unint64_t v4 = 15LL;
  unint64_t v52 = v7;
  uint64_t v53 = v13;
  char v50 = a2;
  uint64_t v51 = a3;
  do
  {
    uint64_t v20 = String.subscript.getter(v19, a3, v7);
    unint64_t v5 = v21;
    if ((v21 & 0x2000000000000000LL) != 0) {
      uint64_t v22 = HIBYTE(v21) & 0xF;
    }
    else {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v22)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    if ((v21 & 0x1000000000000000LL) != 0)
    {
      uint64_t v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0LL, v20, v21);
    }

    else
    {
      if ((v21 & 0x2000000000000000LL) != 0)
      {
        v55[0] = v20;
        v55[1] = v21 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v23 = v55;
      }

      else if ((v20 & 0x1000000000000000LL) != 0)
      {
        uint64_t v23 = (void *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v23 = (void *)_StringObject.sharedUTF8.getter(v20, v21);
      }

      uint64_t v24 = _decodeScalar(_:startingAt:)(v23);
    }

    uint64_t v8 = v24;
    swift_bridgeObjectRelease(v5);
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && (_DWORD)v8 != 133)
    {
      unint64_t v19 = String.index(after:)(v19, a3, v7);
      continue;
    }

    if (v4 >> 14 == v19 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v19 = String.index(after:)(v19, a3, v7);
      *((void *)v6 + sub_100006034(v0 + 2) = v19;
      unint64_t v4 = v19;
      continue;
    }

    if (v19 >> 14 < v4 >> 14) {
      goto LABEL_53;
    }
    uint64_t v25 = a3;
    uint64_t v26 = v9;
    uint64_t v27 = String.subscript.getter(v4, v19, v25, v7);
    unint64_t v5 = v28;
    uint64_t v30 = v29;
    uint64_t v8 = v31;
    uint64_t v32 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0) {
      uint64_t v32 = sub_1000298C8(0LL, *((void *)v32 + 2) + 1LL, 1, v32);
    }
    unint64_t v34 = *((void *)v32 + 2);
    unint64_t v33 = *((void *)v32 + 3);
    uint64_t v56 = v32;
    if (v34 >= v33 >> 1) {
      uint64_t v56 = sub_1000298C8((char *)(v33 > 1), v34 + 1, 1, v56);
    }
    uint64_t v35 = v56;
    *((void *)v56 + sub_100006034(v0 + 2) = v34 + 1;
    uint64_t v36 = &v35[32 * v34];
    *((void *)v36 + 4) = v27;
    *((void *)v36 + 5) = v5;
    *((void *)v36 + 6) = v30;
    *((void *)v36 + 7) = v8;
    uint64_t v9 = v26;
    *(void *)(v26 + 16) = v35;
    a3 = v51;
    unint64_t v7 = v52;
    unint64_t v4 = String.index(after:)(v19, v51, v52);
    uint64_t v6 = (char *)v53;
    *(void *)(v53 + 16) = v4;
    uint64_t v37 = *((void *)v35 + 2);
    unint64_t v19 = v4;
    a2 = v50;
    if (v37 == v49) {
      break;
    }
  }

  while (v54 != v19 >> 14);
  if (v54 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v39 = v56;
    goto LABEL_50;
  }

  if (v54 >= v4 >> 14)
  {
    unint64_t v4 = String.subscript.getter(v4, v48, a3, v7);
    unint64_t v5 = v40;
    unint64_t v41 = v7;
    unint64_t v7 = v42;
    uint64_t v8 = v43;
    swift_bridgeObjectRelease(v41);
    uint64_t v6 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_47;
  }

LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t v6 = sub_1000298C8(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_47:
  unint64_t v45 = *((void *)v6 + 2);
  unint64_t v44 = *((void *)v6 + 3);
  uint64_t v39 = v6;
  if (v45 >= v44 >> 1) {
    uint64_t v39 = sub_1000298C8((char *)(v44 > 1), v45 + 1, 1, v6);
  }
  *((void *)v39 + sub_100006034(v0 + 2) = v45 + 1;
  uint64_t v46 = &v39[32 * v45];
  *((void *)v46 + 4) = v4;
  *((void *)v46 + 5) = v5;
  *((void *)v46 + 6) = v7;
  *((void *)v46 + 7) = v8;
  *(void *)(v9 + 16) = v39;
  uint64_t v6 = (char *)v53;
LABEL_50:
  swift_bridgeObjectRetain(v39);
  swift_release(v9);
  swift_release(v6);
  return v39;
}

  __break(1u);
LABEL_56:
  uint64_t v6 = sub_1000298C8(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_47:
  unint64_t v45 = *((void *)v6 + 2);
  unint64_t v44 = *((void *)v6 + 3);
  uint64_t v39 = v6;
  if (v45 >= v44 >> 1) {
    uint64_t v39 = sub_1000298C8((char *)(v44 > 1), v45 + 1, 1, v6);
  }
  *((void *)v39 + sub_100006034(v0 + 2) = v45 + 1;
  uint64_t v46 = &v39[32 * v45];
  *((void *)v46 + 4) = v4;
  *((void *)v46 + 5) = v5;
  *((void *)v46 + 6) = v7;
  *((void *)v46 + 7) = v8;
  *(void *)(v9 + 16) = v39;
  uint64_t v6 = (char *)v53;
LABEL_50:
  swift_bridgeObjectRetain(v39);
  swift_release(v9);
  swift_release(v6);
  return v39;
}

    LOBYTE(v38) = 0;
    goto LABEL_56;
  }

  unint64_t v40 = sub_10007277C(2uLL, v38, v37);
  unint64_t v42 = v41;
  unint64_t v44 = v43;
  uint64_t v36 = v45;
  swift_bridgeObjectRelease(v37);
  if (!((v40 ^ v42) >> 14))
  {
LABEL_10:
    char v50 = v36;
LABEL_11:
    swift_bridgeObjectRelease(v50);
    return 0LL;
  }

  uint64_t v46 = sub_1000723B0(v40, v42, v44, (unint64_t)v36, 16LL);
  if ((v47 & 0x100) != 0) {
    uint64_t v46 = (uint64_t)sub_100071F60(v40, v42, v44, (uint64_t)v36, 16LL);
  }
  uint64_t v48 = v46;
  uint64_t v49 = v47;
  swift_bridgeObjectRelease(v36);
  if ((v49 & 1) != 0) {
    return 0LL;
  }
  else {
    return v48;
  }
}

uint64_t sub_10003DC74(uint64_t a1, uint64_t a2, int *a3)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (sub_10001AFB0(a1 + a3[5], a2 + a3[5]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + a3[6], a2 + a3[6]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + a3[7], a2 + a3[7]) & 1) != 0)
  {
    return static Date.== infix(_:_:)(a1 + a3[8], a2 + a3[8]);
  }

  else
  {
    return 0LL;
  }

unint64_t sub_10003DD04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100012860( &qword_100157EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10003DE8C(a1, v7);
}

uint64_t type metadata accessor for DriverBinEntry(uint64_t a1)
{
  uint64_t result = qword_10015F190;
  if (!qword_10015F190) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DriverBinEntry);
  }
  return result;
}

unint64_t sub_10003DDAC()
{
  unint64_t result = qword_10015EC80;
  if (!qword_10015EC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001108E4, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015EC80);
  }

  return result;
}

unint64_t sub_10003DDF0()
{
  unint64_t result = qword_100158EE8;
  if (!qword_100158EE8)
  {
    uint64_t v1 = sub_100012010(&qword_100158EE0);
    sub_100012860( &qword_100158EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    sub_100012860(&qword_100158EF8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_100110658);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100158EE8);
  }

  return result;
}

unint64_t sub_10003DE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100012860( &qword_100158BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

size_t sub_10003DFCC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10003DFE8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_10003DFE8(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005FB4(&qword_10015BB10);
  uint64_t v11 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  char v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)v15 + v19;
  unint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20);
  }

  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_10003E15C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10003DD04(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003EBC0();
      uint64_t v10 = v19;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = type metadata accessor for DriverBinEntry(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_100012778(v13 + *(void *)(v15 + 72) * v7, a2, type metadata accessor for DriverBinEntry);
    sub_10003E6B4(v7, v10);
    uint64_t v16 = *v3;
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for DriverBinEntry(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

uint64_t sub_10003E298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_100157EE8);
  int v52 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (*(void *)(v12 + 16))
  {
    uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
    uint64_t v16 = *(void *)(v12 + 64);
    uint64_t v49 = (void *)(v12 + 64);
    if (v15 < 64) {
      uint64_t v17 = ~(-1LL << v15);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v18 = v17 & v16;
    char v47 = v2;
    int64_t v48 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v19 = v13 + 64;
    uint64_t result = swift_retain(v12);
    int64_t v21 = 0LL;
    uint64_t v22 = v12;
    for (i = v12; ; uint64_t v22 = i)
    {
      if (v18)
      {
        unint64_t v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v25 = v24 | (v21 << 6);
      }

      else
      {
        int64_t v26 = v21 + 1;
        if (__OFADD__(v21, 1LL))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }

        if (v26 >= v48)
        {
          swift_release(v22);
          uint64_t v3 = v47;
          uint64_t v27 = v49;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
LABEL_38:
          uint64_t v45 = 1LL << *(_BYTE *)(i + 32);
          if (v45 >= 64) {
            bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
          }
          else {
            *uint64_t v27 = -1LL << v45;
          }
          uint64_t v44 = i;
          *(void *)(i + 16) = 0LL;
          goto LABEL_44;
        }

        uint64_t v27 = v49;
        unint64_t v28 = v49[v26];
        ++v21;
        if (!v28)
        {
          int64_t v21 = v26 + 1;
          if (v26 + 1 >= v48) {
            goto LABEL_37;
          }
          unint64_t v28 = v49[v21];
          if (!v28)
          {
            int64_t v29 = v26 + 2;
            if (v29 >= v48)
            {
LABEL_37:
              swift_release(v22);
              uint64_t v3 = v47;
              if ((v52 & 1) == 0)
              {
LABEL_41:
                uint64_t v44 = i;
                goto LABEL_44;
              }

              goto LABEL_38;
            }

            unint64_t v28 = v49[v29];
            if (!v28)
            {
              while (1)
              {
                int64_t v21 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  break;
                }
                if (v21 >= v48) {
                  goto LABEL_37;
                }
                unint64_t v28 = v49[v21];
                ++v29;
                if (v28) {
                  goto LABEL_23;
                }
              }

unint64_t sub_10003E6B4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v43 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v44 + 72);
      BOOL v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v42(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100012860( &qword_100157EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t v25 = v24 + v15 * a1;
            uint64_t v26 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v4);
            }

            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }

            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = type metadata accessor for DriverBinEntry(0LL);
            uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 72LL);
            int64_t v30 = v29 * a1;
            unint64_t result = v27 + v29 * a1;
            int64_t v31 = v29 * v10;
            uint64_t v32 = v27 + v29 * v10;
            unint64_t v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v32, 1LL, v28);
              a1 = v10;
              uint64_t v13 = v17;
            }

            else
            {
              a1 = v10;
              uint64_t v13 = v17;
              if (v30 != v31)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                uint64_t v13 = v17;
                a1 = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
        uint64_t v12 = v15;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v36 = *v35;
    uint64_t v37 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v35;
    uint64_t v36 = (-1LL << a1) - 1;
  }

  *uint64_t v35 = v37 & v36;
  uint64_t v38 = *(void *)(a2 + 16);
  BOOL v39 = __OFSUB__(v38, 1LL);
  uint64_t v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_10003E988(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10003DD04(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = type metadata accessor for DriverBinEntry(0LL);
        return sub_100040740(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10003EBC0();
      goto LABEL_7;
    }

    sub_10003E298(v17, a3 & 1);
    unint64_t v24 = sub_10003DD04(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10003EB08(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10003EB08(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t result = sub_100012778( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for DriverBinEntry);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

void *sub_10003EBC0()
{
  uint64_t v1 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_100157EE8);
  int64_t v30 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v38 = v6;
  if (!v7)
  {
    uint64_t result = (void *)swift_release(v5);
    uint64_t v28 = v38;
    uint64_t v27 = v30;
LABEL_25:
    *uint64_t v27 = v28;
    return result;
  }

  uint64_t v8 = v6;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v38;
  }

  int64_t v11 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  uint64_t v37 = v5;
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v31 = v5 + 64;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  BOOL v16 = v33;
  uint64_t v15 = v34;
  uint64_t v17 = (uint64_t)v35;
  for (i = v38; ; uint64_t result = (void *)sub_100012778( v17,  *(void *)(i + 56) + v23,  type metadata accessor for DriverBinEntry))
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      uint64_t v21 = v37;
      goto LABEL_9;
    }

    int64_t v24 = v11 + 1;
    uint64_t v21 = v37;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v11);
      if (!v25) {
        break;
      }
    }

uint64_t sub_10003EE88(uint64_t a1)
{
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v2._uint64_t countAndFlagsBits = 0x73656972746E6520LL;
  v2._uint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = sub_10003B178(v3);
  swift_bridgeObjectRelease(a1);
  uint64_t v5 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v6 = sub_100013F74();
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v5, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(v4);
  v10._uint64_t countAndFlagsBits = v7;
  v10._uint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v12;
}

void *sub_10003EF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_10000CC84(0, v3, 0);
    unint64_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v8 = *(v6 - 3);
      uint64_t v7 = *(v6 - 2);
      uint64_t v9 = *(v6 - 1);
      uint64_t v10 = *v6;
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(a3);
      v11._uint64_t countAndFlagsBits = static String._fromSubstring(_:)(v8, v7, v9, v10);
      uint64_t object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(object);
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10000CC84(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = a2;
      void v15[5] = a3;
      v6 += 4;
      --v3;
    }

    while (v3);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003F0A0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73656972746E65LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10003F190(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_100158FB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100005110(a1, v7);
  unint64_t v9 = sub_10003DDAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DriverBinInfo.CodingKeys,  &type metadata for DriverBinInfo.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    uint64_t v10 = sub_100005FB4(&qword_100158EE0);
    HIBYTE(v15) = 0;
    unint64_t v11 = sub_100040664();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, (char *)&v15 + 7, v3, v10, v11);
    uint64_t v7 = v16;
    BYTE6(v15) = 1;
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v15 + 6, v3);
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_100006034(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
  }

  return v7;
}

uint64_t sub_10003F354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003F39C()
{
  unint64_t result = qword_100158F00;
  if (!qword_100158F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110568, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158F00);
  }

  return result;
}

unint64_t sub_10003F3E0()
{
  unint64_t result = qword_100158F08;
  if (!qword_100158F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110590, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158F08);
  }

  return result;
}

unint64_t sub_10003F424()
{
  unint64_t result = qword_10015EC88[0];
  if (!qword_10015EC88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100110894, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015EC88);
  }

  return result;
}

uint64_t destroy for DriverBinInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s10driverkitd13DriverBinInfoVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for DriverBinInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for DriverBinInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverBinInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverBinInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo()
{
  return &type metadata for DriverBinInfo;
}

char *sub_10003F610(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v34 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v34 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v34);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)unint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *((void *)v9 + 1) = v11;
    uint64_t v12 = (int *)type metadata accessor for ApplicationRecord(0LL);
    uint64_t v13 = v12[5];
    uint64_t v36 = &v9[v13];
    uint64_t v14 = &v10[v13];
    uint64_t v15 = type metadata accessor for URL(0LL);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL);
    uint64_t v37 = v16;
    __n128 v17 = swift_bridgeObjectRetain(v11);
    ((void (*)(char *, char *, uint64_t, __n128))v16)(v36, v14, v15, v17);
    uint64_t v18 = v12[6];
    uint64_t v19 = *(void *)&v10[v18];
    *(void *)&v9[v18] = v19;
    uint64_t v20 = v12[7];
    uint64_t v21 = (uint64_t *)&v9[v20];
    unint64_t v22 = (uint64_t *)&v10[v20];
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    swift_bridgeObjectRetain(v19);
    sub_1000125E0(v23, v24);
    *uint64_t v21 = v23;
    v21[1] = v24;
    uint64_t v25 = v12[8];
    int64_t v26 = (uint64_t *)&v9[v25];
    uint64_t v27 = (uint64_t *)&v10[v25];
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_1000125E0(*v27, v29);
    *int64_t v26 = v28;
    v26[1] = v29;
    v37(&a1[a3[6]], (char *)a2 + a3[6], v15);
    v37(&a1[a3[7]], (char *)a2 + a3[7], v15);
    uint64_t v30 = a3[8];
    uint64_t v31 = &a1[v30];
    int64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
  }

  return a1;
}

uint64_t sub_10003F7B4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  swift_bridgeObjectRelease(*(void *)(v5 + 8));
  uint64_t v6 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v7 = v5 + v6[5];
  uint64_t v8 = type metadata accessor for URL(0LL);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(void *)(v5 + v6[6]));
  sub_10001226C(*(void *)(v5 + v6[7]), *(void *)(v5 + v6[7] + 8));
  sub_10001226C(*(void *)(v5 + v6[8]), *(void *)(v5 + v6[8] + 8));
  v9(a1 + a2[6], v8);
  v9(a1 + a2[7], v8);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
}

uint64_t sub_10003F8B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (char *)v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
  __n128 v17 = swift_bridgeObjectRetain(v10);
  v16(v13, v14, v15, v17);
  uint64_t v18 = v11[6];
  uint64_t v19 = *(void *)(v9 + v18);
  *(void *)((char *)v8 + v18) = v19;
  uint64_t v20 = v11[7];
  uint64_t v21 = (void *)((char *)v8 + v20);
  unint64_t v22 = (uint64_t *)(v9 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  swift_bridgeObjectRetain(v19);
  sub_1000125E0(v23, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = v11[8];
  int64_t v26 = (void *)((char *)v8 + v25);
  uint64_t v27 = (uint64_t *)(v9 + v25);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1000125E0(*v27, v29);
  *int64_t v26 = v28;
  v26[1] = v29;
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(a1 + a3[6], a2 + a3[6], v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(a1 + a3[7], a2 + a3[7], v15);
  uint64_t v30 = a3[8];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
  return a1;
}

uint64_t sub_10003FA2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  *uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  uint64_t v11 = *(void *)(a1 + v7 + 8);
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = (char *)v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for URL(0LL);
  __n128 v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL);
  v17(v14, v15, v16);
  uint64_t v18 = v12[6];
  uint64_t v19 = *(void *)(v9 + v18);
  uint64_t v20 = *(void *)((char *)v8 + v18);
  *(void *)((char *)v8 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = v12[7];
  unint64_t v22 = (void *)((char *)v8 + v21);
  uint64_t v23 = (uint64_t *)(v9 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_1000125E0(*v23, v25);
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  *unint64_t v22 = v24;
  v22[1] = v25;
  sub_10001226C(v26, v27);
  uint64_t v28 = v12[8];
  unint64_t v29 = (void *)((char *)v8 + v28);
  uint64_t v30 = (uint64_t *)(v9 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_1000125E0(*v30, v32);
  uint64_t v33 = *v29;
  unint64_t v34 = v29[1];
  *unint64_t v29 = v31;
  v29[1] = v32;
  sub_10001226C(v33, v34);
  v17((char *)(a1 + a3[6]), a2 + a3[6], v16);
  v17((char *)(a1 + a3[7]), a2 + a3[7], v16);
  uint64_t v35 = a3[8];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 24LL))(v36, v37, v38);
  return a1;
}

uint64_t sub_10003FBCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL);
  v15(v12, v13, v14);
  *(void *)(v8 + v10[6]) = *(void *)(v9 + v10[6]);
  *(_OWORD *)(v8 + v10[7]) = *(_OWORD *)(v9 + v10[7]);
  *(_OWORD *)(v8 + v10[8]) = *(_OWORD *)(v9 + v10[8]);
  v15(a1 + a3[6], a2 + a3[6], v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_10003FCFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  uint64_t v11 = *(void *)(a1 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (int *)type metadata accessor for ApplicationRecord(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = (char *)v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL);
  v17(v14, v15, v16);
  uint64_t v18 = v12[6];
  uint64_t v19 = *(void *)((char *)v8 + v18);
  *(void *)((char *)v8 + v18) = *(void *)(v9 + v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = v12[7];
  uint64_t v21 = *(void *)((char *)v8 + v20);
  unint64_t v22 = *(void *)((char *)v8 + v20 + 8);
  *(_OWORD *)((char *)v8 + v20) = *(_OWORD *)(v9 + v20);
  sub_10001226C(v21, v22);
  uint64_t v23 = v12[8];
  uint64_t v24 = *(void *)((char *)v8 + v23);
  unint64_t v25 = *(void *)((char *)v8 + v23 + 8);
  *(_OWORD *)((char *)v8 + v23) = *(_OWORD *)(v9 + v23);
  sub_10001226C(v24, v25);
  v17((char *)(a1 + a3[6]), a2 + a3[6], v16);
  v17((char *)(a1 + a3[7]), a2 + a3[7], v16);
  uint64_t v26 = a3[8];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40LL))(v27, v28, v29);
  return a1;
}

uint64_t sub_10003FE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003FE60);
}

uint64_t sub_10003FE60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = type metadata accessor for ApplicationRecord(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = a3[5];
    }

    else
    {
      uint64_t v14 = type metadata accessor for URL(0LL);
      uint64_t v12 = *(void *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v14;
        uint64_t v13 = a3[6];
      }

      else
      {
        uint64_t v8 = type metadata accessor for Date(0LL);
        uint64_t v12 = *(void *)(v8 - 8);
        uint64_t v13 = a3[8];
      }
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10003FF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003FF28);
}

uint64_t sub_10003FF28(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for ApplicationRecord(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[5];
    }

    else
    {
      uint64_t v16 = type metadata accessor for URL(0LL);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[6];
      }

      else
      {
        uint64_t v10 = type metadata accessor for Date(0LL);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[8];
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_10003FFEC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for ApplicationRecord(319LL);
    if (v4 <= 0x3F)
    {
      v7[1] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for URL(319LL);
      if (v5 <= 0x3F)
      {
        uint64_t v8 = *(void *)(result - 8) + 64LL;
        uint64_t v9 = v8;
        uint64_t result = type metadata accessor for Date(319LL);
        if (v6 <= 0x3F)
        {
          uint64_t v10 = *(void *)(result - 8) + 64LL;
          swift_initStructMetadata(a1, 256LL, 5LL, v7, a1 + 16);
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DriverBinEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000400F4 + 4 * byte_100110556[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100040128 + 4 * byte_100110551[v4]))();
}

uint64_t sub_100040128(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100040138LL);
  }
  return result;
}

uint64_t sub_100040144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004014CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100040150(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040158(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverBinEntry.CodingKeys()
{
  return &type metadata for DriverBinEntry.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DriverBinInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000401C0 + 4 * byte_100110560[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000401F4 + 4 * byte_10011055B[v4]))();
}

uint64_t sub_1000401F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000401FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100040204LL);
  }
  return result;
}

uint64_t sub_100040210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100040218LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10004021C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040224(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo.CodingKeys()
{
  return &type metadata for DriverBinInfo.CodingKeys;
}

unint64_t sub_100040244()
{
  unint64_t result = qword_10015F2A0[0];
  if (!qword_10015F2A0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001107B4, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, qword_10015F2A0);
  }

  return result;
}

unint64_t sub_10004028C()
{
  unint64_t result = qword_10015F4B0[0];
  if (!qword_10015F4B0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011086C, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015F4B0);
  }

  return result;
}

unint64_t sub_1000402D4()
{
  unint64_t result = qword_10015F5C0;
  if (!qword_10015F5C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001107DC, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F5C0);
  }

  return result;
}

unint64_t sub_10004031C()
{
  unint64_t result = qword_10015F5C8[0];
  if (!qword_10015F5C8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100110804, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015F5C8);
  }

  return result;
}

unint64_t sub_100040364()
{
  unint64_t result = qword_10015F650;
  if (!qword_10015F650)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110724, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F650);
  }

  return result;
}

unint64_t sub_1000403AC()
{
  unint64_t result = qword_10015F658[0];
  if (!qword_10015F658[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10011074C, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, qword_10015F658);
  }

  return result;
}

uint64_t sub_1000403F0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65626D754E6E6962LL && a2 == 0xE900000000000072LL)
  {
    unint64_t v4 = 0xE900000000000072LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65626D754E6E6962LL, 0xE900000000000072LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x726F636552707061LL && a2 == 0xE900000000000064LL)
  {
    unint64_t v6 = 0xE900000000000064LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F636552707061LL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x5255646567617473LL && a2 == 0xE90000000000004CLL)
  {
    unint64_t v7 = 0xE90000000000004CLL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5255646567617473LL, 0xE90000000000004CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x7542646567617473LL && a2 == 0xEC000000656C646ELL)
  {
    unint64_t v8 = 0xEC000000656C646ELL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7542646567617473LL, 0xEC000000656C646ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_24;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    swift_bridgeObjectRelease(0xE900000000000070LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100040630()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100040654()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_100040664()
{
  unint64_t result = qword_100158FC0;
  if (!qword_100158FC0)
  {
    uint64_t v1 = sub_100012010(&qword_100158EE0);
    sub_100012860( &qword_100158F20,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    sub_100012860(&qword_100158FC8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_100110630);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100158FC0);
  }

  return result;
}

uint64_t sub_100040700(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100158EC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100040740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverBinEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100157EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000407CC()
{
  return sub_100040834(&OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager);
}

uint64_t sub_1000407D8(uint64_t a1)
{
  return sub_100040884(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager);
}

void *sub_1000407E4(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100040828()
{
  return sub_100040834(&OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager);
}

uint64_t sub_100040834(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_retain(*v2);
}

uint64_t sub_100040878(uint64_t a1)
{
  return sub_100040884(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager);
}

uint64_t sub_100040884(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  return swift_release(v5);
}

void *sub_1000408D0(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100040914()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10004095C(uint64_t a1)
{
  int v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *int v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_1000409AC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1000409F0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_100040A44(a1, a2, a3);
  return v7;
}

uint64_t sub_100040A44(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager) = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers) = _swiftEmptyArrayStorage;
  uint64_t v7 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  *(void *)(v3 + v7) = [objc_allocWithZone(NSRecursiveLock) init];
  uint64_t v8 = v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 1LL, 1LL, v9);
  v11(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, 1LL, 1LL, v9);
  uint64_t v12 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  v12[1] = 0LL;
  void v12[2] = 0LL;
  void *v12 = 0LL;
  *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue) = a1;
  sub_100005158(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))( v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory,  a2,  v9);
  return v3;
}

uint64_t sub_100040B6C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 168LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for ApplicationManager();
    sub_1000CD2E8(v1, (uint64_t)&off_100147548, v7, (uint64_t)&off_1001463D0);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100040BD8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 192LL);
  uint64_t v3 = swift_retain(a1);
  uint64_t v4 = v2(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184LL))(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t active = type metadata accessor for ActiveDriversStateManager();
    sub_1000CD2E8(v1, (uint64_t)&off_100147548, active, (uint64_t)&off_100146758);
    return swift_release(v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100040C44@<X0>(uint64_t a1@<X8>)
{
  return sub_100040D90( &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation,  0x696C702E6F666E49LL,  0xEA00000000007473LL,  a1);
}

uint64_t sub_100040C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040CB0(uint64_t a1)
{
  return sub_100040F34(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation);
}

void (*sub_100040CBC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  uint64_t v5 = type metadata accessor for URL(0LL);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  sub_100040C44((uint64_t)v8);
  return sub_100040D58;
}

void sub_100040D58(uint64_t a1, char a2)
{
}

uint64_t sub_100040D64@<X0>(uint64_t a1@<X8>)
{
  return sub_100040D90( &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation,  0x6F666E497478654ELL,  0xEE007473696C702ELL,  a1);
}

uint64_t sub_100040D90@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v19[-v13];
  uint64_t v15 = v4 + *a1;
  swift_beginAccess(v15, v20, 0LL, 0LL);
  sub_10001A148(v15, (uint64_t)v14, (uint64_t *)&unk_10015BA30);
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  sub_100012824((uint64_t)v14, (uint64_t *)&unk_10015BA30);
  URL.appendingPathComponent(_:)(a2, a3);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v12, a4, v16);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0LL, 1LL, v16);
  swift_beginAccess(v15, v19, 33LL, 0LL);
  sub_100040C68((uint64_t)v12, v15);
  return swift_endAccess(v19);
}

uint64_t sub_100040F28(uint64_t a1)
{
  return sub_100040F34(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation);
}

uint64_t sub_100040F34(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v5);
  size_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 32))(v7, a1, v8);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  uint64_t v10 = v2 + *a2;
  swift_beginAccess(v10, v13, 33LL, 0LL);
  sub_100040C68((uint64_t)v7, v10);
  return swift_endAccess(v13);
}

void (*sub_100041010(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  uint64_t v5 = type metadata accessor for URL(0LL);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  sub_100040D64((uint64_t)v8);
  return sub_1000410AC;
}

void sub_1000410AC(uint64_t a1, char a2)
{
}

void sub_1000410B8(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v10 = v4[6];
    uint64_t v9 = (void *)v4[7];
    (*(void (**)(void, void, uint64_t))(v8 + 16))(v4[10], v4[11], v7);
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v9, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v9, 0LL, 1LL, v7);
    uint64_t v11 = v10 + *a3;
    swift_beginAccess(v11, v4, 33LL, 0LL);
    sub_100040C68((uint64_t)v9, v11);
    swift_endAccess(v4);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
  }

  else
  {
    uint64_t v12 = v4[8];
    uint64_t v13 = v4[9];
    uint64_t v14 = v4[6];
    uint64_t v9 = (void *)v4[7];
    (*(void (**)(void *, void, uint64_t))(v13 + 32))(v9, v4[11], v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0LL, 1LL, v12);
    uint64_t v15 = v14 + *a3;
    swift_beginAccess(v15, v4 + 3, 33LL, 0LL);
    sub_100040C68((uint64_t)v9, v15);
    swift_endAccess(v4 + 3);
  }

  free(v5);
  free(v6);
  free(v9);
  free(v4);
}

uint64_t sub_100041214(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)v33 - v6;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (!v11) {
    return (uint64_t)v12;
  }
  v33[1] = v1;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v42 = v8;
  sub_10003DFCC(0LL, v11, 0);
  uint64_t result = sub_100010D14(v42);
  uint64_t v15 = result;
  uint64_t v16 = v42;
  uint64_t v17 = 0LL;
  uint64_t v18 = v42 + 64;
  char v19 = *(_BYTE *)(v42 + 32);
  v33[0] = v42 + 88;
  uint64_t v36 = v10;
  uint64_t v37 = v7;
  uint64_t v34 = v14;
  uint64_t v35 = v42 + 64;
  while ((v15 & 0x8000000000000000LL) == 0 && v15 < 1LL << v19)
  {
    unint64_t v21 = (unint64_t)v15 >> 6;
    if (*(_DWORD *)(v16 + 36) != (_DWORD)v14) {
      goto LABEL_28;
    }
    uint64_t v22 = v38;
    sub_100012734(*(void *)(v16 + 56) + *(void *)(v40 + 72) * v15, v38, type metadata accessor for DriverBinEntry);
    uint64_t v23 = v22;
    uint64_t v24 = v39;
    sub_100012778(v23, v39, type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v10, v24 + *(int *)(v41 + 24), v7);
    sub_1000127BC(v24, type metadata accessor for DriverBinEntry);
    uint64_t v12 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
    {
      sub_10003DFCC(0LL, v12[2] + 1LL, 1);
      uint64_t v12 = v44;
    }

    unint64_t v26 = v12[2];
    unint64_t v25 = v12[3];
    if (v26 >= v25 >> 1)
    {
      sub_10003DFCC(v25 > 1, v26 + 1, 1);
      uint64_t v12 = v44;
    }

    void v12[2] = v26 + 1;
    unint64_t v27 = (unint64_t)v12
    uint64_t v10 = v36;
    uint64_t v7 = v37;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(v27, v36, v37);
    uint64_t v44 = v12;
    uint64_t v16 = v42;
    char v19 = *(_BYTE *)(v42 + 32);
    unint64_t v20 = 1LL << v19;
    if (v15 >= 1LL << v19) {
      goto LABEL_29;
    }
    uint64_t v18 = v35;
    uint64_t v28 = *(void *)(v35 + 8 * v21);
    if ((v28 & (1LL << v15)) == 0) {
      goto LABEL_30;
    }
    LODWORD(v14) = v34;
    if (*(_DWORD *)(v42 + 36) != (_DWORD)v34) {
      goto LABEL_31;
    }
    unint64_t v29 = v28 & (-2LL << (v15 & 0x3F));
    if (v29)
    {
      unint64_t v20 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = v21 + 1;
      unint64_t v31 = (v20 + 63) >> 6;
      if (v21 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v35 + 8 * v30);
        if (!v32)
        {
          unint64_t v30 = v21 + 2;
          if (v21 + 2 >= v31) {
            goto LABEL_4;
          }
          unint64_t v32 = *(void *)(v35 + 8 * v30);
          if (!v32)
          {
            while (v31 - 3 != v21)
            {
              unint64_t v32 = *(void *)(v33[0] + 8 * v21++);
              if (v32)
              {
                unint64_t v30 = v21 + 2;
                goto LABEL_19;
              }
            }

            goto LABEL_4;
          }
        }

char *sub_10004157C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v103 = *(void (**)(char *))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v89 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v89 - v16;
  uint64_t v17 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  [*(id *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock] lock];
  uint64_t v18 = (uint64_t *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo];
  unint64_t v19 = *(void *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo];
  if (v19)
  {
    uint64_t v20 = v18[2];
    unint64_t v21 = *(void **)&v1[v17];
    swift_bridgeObjectRetain(v19);
    objc_msgSend(v21, "unlock", swift_bridgeObjectRetain(v20).n128_f64[0]);
    return (char *)v19;
  }

  char v100 = v5;
  uint64_t v101 = v3;
  char v93 = v18;
  uint64_t v94 = v9;
  uint64_t v95 = v12;
  int v96 = v15;
  uint64_t v22 = sub_1000D3274();
  uint64_t v23 = (void (*)(void))v103;
  uint64_t v24 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v103 + 2);
  uint64_t v102 = v22;
  uint64_t v99 = v24;
  ((void (*)(char *))v24)(v104);
  uint64_t v25 = swift_retain_n(v1, 2LL);
  unint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  uint64_t v27 = v6;
  os_log_type_t v28 = static os_log_type_t.default.getter(v26);
  BOOL v29 = os_log_type_enabled(v26, v28);
  unint64_t v30 = v1;
  uint64_t v97 = v27;
  uint64_t v98 = v17;
  if (v29)
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v92 = swift_slowAlloc(32LL, -1LL);
    v106[0] = v92;
    uint64_t v91 = v31;
    *(_DWORD *)unint64_t v31 = 136315138;
    unint64_t v32 = v31 + 12;
    uint64_t v90 = v31 + 4;
    uint64_t v33 = v100;
    uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v1 + 280LL))();
    uint64_t v35 = URL.path.getter(v34);
    unint64_t v37 = v36;
    uint64_t v38 = v101;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v33, v2);
    uint64_t v105 = sub_1000058CC(v35, v37, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v90, v32);
    swift_release_n(v30, 2LL);
    swift_bridgeObjectRelease(v37);
    uint64_t v39 = v91;
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Loading dextbin info, reading plist file from %s", v91, 0xCu);
    uint64_t v40 = v92;
    swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);

    uint64_t v41 = v30;
    uint64_t v42 = (void (*)(char *))*((void *)v23 + 1);
    uint64_t v43 = v97;
    v42(v104);
  }

  else
  {

    swift_release_n(v1, 2LL);
    uint64_t v41 = v1;
    uint64_t v42 = (void (*)(char *))*((void *)v23 + 1);
    uint64_t v43 = v27;
    ((void (*)(char *, uint64_t))v42)(v104, v27);
    uint64_t v33 = v100;
    uint64_t v38 = v101;
  }

  uint64_t v44 = *((void *)v41 + 5);
  uint64_t v45 = *((void *)v41 + 6);
  sub_100005110((void *)v41 + 2, v44);
  sub_1001073DC(v44, v45);
  uint64_t v46 = v107;
  uint64_t v47 = v108;
  sub_100005110(v106, v107);
  int64_t v48 = *(uint64_t (**)(void))(*(void *)v41 + 280LL);
  uint64_t v104 = v41;
  uint64_t v49 = v48();
  uint64_t v50 = URL.path.getter(v49);
  uint64_t v52 = v51;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v2);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v47 + 16))(v50, v52, 0LL, v46, v47);
  unint64_t v55 = v54;
  swift_bridgeObjectRelease(v52);
  uint64_t v56 = sub_100006034(v106);
  if (v55 >> 60 != 15)
  {
    uint64_t v71 = v96;
    uint64_t v72 = v43;
    uint64_t v73 = v99(v96, v102, v43);
    unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.default.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Loading dextbin info, decoding plist", v76, 2u);
      uint64_t v77 = v76;
      uint64_t v72 = v43;
      uint64_t v71 = v96;
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    uint64_t v103 = v42;
    ((void (*)(char *, uint64_t))v42)(v71, v72);
    sub_1000125E0(v53, v55);
    unint64_t v19 = sub_10003CAB8(v53, v55);
    uint64_t v80 = v79;
    uint64_t v82 = v81;
    sub_10002193C(v53, v55);
    uint64_t v83 = v93;
    uint64_t v84 = *v93;
    uint64_t v85 = v93[1];
    uint64_t v86 = v93[2];
    *char v93 = v19;
    v83[1] = v80;
    v83[2] = v82;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v82);
    sub_100045A90(v84, v85, v86);
    uint64_t v88 = *(void **)&v104[v98];
    goto LABEL_15;
  }

  int v57 = errno.getter(v56);
  uint64_t result = strerror(v57);
  if (result)
  {
    uint64_t v59 = String.init(cString:)(result);
    unint64_t v61 = v60;
    uint64_t v62 = v95;
    v99(v95, v102, v43);
    swift_bridgeObjectRetain(v61);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = v59;
      uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      v106[0] = v68;
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_bridgeObjectRetain(v61);
      uint64_t v105 = sub_1000058CC(v66, v61, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease_n(v61, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "contentsOfFile failed to read plist: %s", v67, 0xCu);
      swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);

      unsigned int v69 = v62;
      uint64_t v70 = v97;
    }

    else
    {

      swift_bridgeObjectRelease_n(v61, 2LL);
      unsigned int v69 = v62;
      uint64_t v70 = v43;
    }

    ((void (*)(char *, uint64_t))v42)(v69, v70);
    uint64_t v78 = v98;
    unint64_t v19 = sub_10003ABE0();
    uint64_t v88 = *(void **)&v104[v78];
LABEL_15:
    objc_msgSend(v88, "unlock", v87);
    return (char *)v19;
  }

  __break(1u);
  return result;
}

uint64_t sub_100041DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v4 = type metadata accessor for ApplicationRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = (char *)v25 + *(int *)(v11 + 48) - v12;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v13, a1, v15);
  sub_100012734(v25[0], (uint64_t)v14, type metadata accessor for DriverBinEntry);
  uint64_t v18 = (uint64_t)&v10[*(int *)(v7 + 48)];
  v17(v10, (uint64_t)v13, v15);
  sub_100012734((uint64_t)v14, v18, type metadata accessor for DriverBinEntry);
  uint64_t v19 = type metadata accessor for DriverBinEntry(0LL);
  sub_100012734(v18 + *(int *)(v19 + 20), (uint64_t)v6, type metadata accessor for ApplicationRecord);
  sub_1000127BC(v18, type metadata accessor for DriverBinEntry);
  uint64_t v20 = (uint64_t *)&v6[*(int *)(v4 + 32)];
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_1000125E0(*v20, v22);
  sub_1000127BC((uint64_t)v6, type metadata accessor for ApplicationRecord);
  sub_1000214C4(v21, v22);
  LOBYTE(v17) = v23;
  sub_10001226C(v21, v22);
  sub_100012824((uint64_t)v13, (uint64_t *)&unk_10015ABC0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  return v17 & 1;
}

_UNKNOWN **sub_100041FCC()
{
  uint64_t v1 = v0;
  uint64_t v434 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v422 = *(void *)(v434 - 8);
  uint64_t v2 = __chkstk_darwin(v434);
  uint64_t v419 = (char *)&v382 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  v418 = (char *)&v382 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  v417 = (char *)&v382 - v7;
  __chkstk_darwin(v6);
  v398 = (char *)&v382 - v8;
  uint64_t v9 = sub_100005FB4(&qword_100158260);
  uint64_t v10 = __chkstk_darwin(v9);
  v420 = (uint64_t *)((char *)&v382 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v430 = (char *)&v382 - v12;
  uint64_t v414 = type metadata accessor for DriverBinEntry(0LL);
  unint64_t v423 = *(void *)(v414 - 8);
  uint64_t v13 = __chkstk_darwin(v414);
  v415 = (char *)&v382 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v413 = (uint64_t)&v382 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v416 = (char *)&v382 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v412 = (uint64_t)&v382 - v20;
  __chkstk_darwin(v19);
  __int128 v438 = (void (**)(char *, uint64_t, uint64_t))((char *)&v382 - v21);
  int v404 = (char *)type metadata accessor for UUID(0LL);
  __int128 v433 = (char *)*((void *)v404 - 1);
  uint64_t v22 = __chkstk_darwin(v404);
  uint64_t v411 = (char *)&v382 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  v410 = (char *)&v382 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v409 = (char *)&v382 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  __int128 v408 = (char *)&v382 - v29;
  __chkstk_darwin(v28);
  __int128 v439 = (char *)&v382 - v30;
  uint64_t v31 = sub_100005FB4(&qword_100157ED8);
  uint64_t v32 = __chkstk_darwin(v31);
  v432 = (void (**)(char *, uint64_t, uint64_t))((char *)&v382 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v32);
  uint64_t v431 = (uint64_t)&v382 - v34;
  uint64_t v435 = type metadata accessor for Logger(0LL);
  unint64_t v35 = *(void *)(v435 - 8);
  uint64_t v36 = __chkstk_darwin(v435);
  uint64_t v396 = (char *)&v382 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v406 = (char *)&v382 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  __int128 v425 = (char *)&v382 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v391 = (char *)&v382 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  int v392 = (char *)&v382 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v397 = (char *)&v382 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v428 = (char *)&v382 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  unint64_t v429 = (char *)&v382 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v421 = (char *)&v382 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  unint64_t v394 = (char *)&v382 - v55;
  __chkstk_darwin(v54);
  v403 = (char *)&v382 - v56;
  uint64_t active = type metadata accessor for ActiveDriverInfo(0LL);
  v395 = *(char **)(active - 8);
  __chkstk_darwin(active);
  uint64_t v59 = (char *)&v382 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for URL(0LL);
  uint64_t v426 = *(void *)(v60 - 8);
  uint64_t v61 = __chkstk_darwin(v60);
  uint64_t v388 = (char *)&v382 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v389 = (char *)&v382 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  uint64_t v390 = (char *)&v382 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v393 = (char *)&v382 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v437 = (char *)&v382 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v436 = (uint64_t)&v382 - v72;
  __chkstk_darwin(v71);
  unint64_t v74 = (char *)&v382 - v73;
  v445 = _swiftEmptyArrayStorage;
  uint64_t v401 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  [*(id *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock) lock];
  os_log_type_t v75 = v0 + 2;
  uint64_t v76 = v0[5];
  uint64_t v77 = v1[6];
  uint64_t v399 = v75;
  sub_100005110(v75, v76);
  sub_1001073DC(v76, v77);
  uint64_t v78 = v451;
  sub_100005110(&__s1, v450);
  uint64_t v79 = *(uint64_t (**)(void))(v78 + 24);
  *(void *)&__int128 v424 = (char *)v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  uint64_t v80 = v79();
  uint64_t v407 = v1;
  uint64_t v427 = v60;
  unint64_t v440 = v35;
  swift_bridgeObjectRelease(v80);
  uint64_t v81 = sub_100006034(&__s1);
  __int128 v425 = 0LL;
  uint64_t v82 = v416;
  uint64_t v83 = v407;
  uint64_t v84 = (*(uint64_t (**)(uint64_t))(*v407 + 360LL))(v81);
  uint64_t v402 = v85;
  double v87 = v86;
  unint64_t v442 = sub_10003ABE0();
  uint64_t v443 = v88;
  uint64_t v444 = v89;
  uint64_t v90 = sub_100045F40(v84);
  uint64_t v91 = (*(uint64_t (**)(uint64_t))(*v83 + 184LL))(v90);
  if (!v91)
  {
    __break(1u);
    goto LABEL_122;
  }

  uint64_t v92 = v91;
  uint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 176LL))(v91);
  swift_release(v92);
  int64_t v94 = *(void *)(v93 + 16);
  uint64_t v405 = v84;
  uint64_t v400 = v87;
  if (v94)
  {
    uint64_t __s1 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10003DFCC(0LL, v94, 0);
    unint64_t v95 = (v395[80] + 32LL) & ~(unint64_t)v395[80];
    *(void *)&__int128 v424 = v93;
    uint64_t v96 = v93 + v95;
    uint64_t v97 = *((void *)v395 + 9);
    uint64_t v98 = v426;
    do
    {
      sub_100012734(v96, (uint64_t)v59, type metadata accessor for ActiveDriverInfo);
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v74, v59, v60);
      sub_1000127BC((uint64_t)v59, type metadata accessor for ActiveDriverInfo);
      uint64_t v99 = (void *)__s1;
      if ((swift_isUniquelyReferenced_nonNull_native(__s1) & 1) == 0)
      {
        sub_10003DFCC(0LL, v99[2] + 1LL, 1);
        uint64_t v99 = (void *)__s1;
      }

      unint64_t v101 = v99[2];
      unint64_t v100 = v99[3];
      if (v101 >= v100 >> 1)
      {
        sub_10003DFCC(v100 > 1, v101 + 1, 1);
        uint64_t v99 = (void *)__s1;
      }

      v99[2] = v101 + 1;
      uint64_t v98 = v426;
      unint64_t v102 = (unint64_t)v99
      uint64_t v60 = v427;
      (*(void (**)(unint64_t, char *, uint64_t))(v426 + 32))(v102, v74, v427);
      uint64_t __s1 = (uint64_t)v99;
      v96 += v97;
      --v94;
    }

    while (v94);
    swift_bridgeObjectRelease(v424);
    uint64_t v84 = v405;
  }

  else
  {
    swift_bridgeObjectRelease(v93);
    uint64_t v99 = _swiftEmptyArrayStorage;
  }

  uint64_t v103 = (void *)sub_100012054((uint64_t)v99);
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v84);
  uint64_t v104 = v425;
  __int128 v425 = (char *)sub_10004A838(v105, v103);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v103);
  uint64_t v106 = sub_10003ADC4(v84);
  uint64_t v107 = (void *)sub_100012054(v106);
  swift_bridgeObjectRelease(v106);
  uint64_t v108 = (uint64_t)v407;
  swift_retain(v407);
  uint64_t v109 = sub_10004ADE8((uint64_t)v103, v108, v107);
  v395 = v104;
  swift_release(v108);
  swift_bridgeObjectRelease(v107);
  uint64_t v110 = v435;
  unint64_t v111 = v440;
  uint64_t v112 = (uint64_t)v415;
  if (*(void *)(v109 + 16))
  {
    uint64_t v113 = sub_1000D3274();
    char v114 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
    uint64_t v115 = v403;
    v114(v403, v113, v110);
    uint64_t v116 = swift_retain(v109);
    uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
    LODWORD(v387) = static os_log_type_t.error.getter(v117);
    if (os_log_type_enabled(v117, (os_log_type_t)v387))
    {
      v384 = v117;
      unint64_t v386 = v113;
      unint64_t v118 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v385 = swift_slowAlloc(32LL, -1LL);
      uint64_t __s2 = v385;
      Swift::String v383 = v118;
      *(_DWORD *)unint64_t v118 = 136315138;
      int64_t v119 = *(void *)(v109 + 16);
      uint64_t v120 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v424 = v109;
      if (v119)
      {
        uint64_t v121 = v109;
        Swift::String v382 = v114;
        v441 = _swiftEmptyArrayStorage;
        sub_10000CC84(0, v119, 0);
        int64_t v122 = sub_100045DBC(v109);
        int v124 = v123;
        char v126 = v125 & 1;
        uint64_t v406 = (char *)(v121 + 56);
        do
        {
          if (v122 < 0 || v122 >= 1LL << *(_BYTE *)(v121 + 32))
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            JUMPOUT(0x1000456B4LL);
          }

          if (*(_DWORD *)(v121 + 36) != v124) {
            goto LABEL_120;
          }
          uint64_t v127 = v426;
          uint64_t v128 = v436;
          (*(void (**)(uint64_t, int64_t, uint64_t))(v426 + 16))( v436,  *(void *)(v121 + 48) + *(void *)(v426 + 72) * v122,  v60);
          uint64_t v129 = v437;
          uint64_t v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 32))(v437, v128, v60);
          uint64_t __s1 = 8224LL;
          v449[0] = 0xE200000000000000LL;
          v131._uint64_t countAndFlagsBits = URL.path.getter(v130);
          uint64_t object = v131._object;
          String.append(_:)(v131);
          swift_bridgeObjectRelease(object);
          uint64_t v133 = v60;
          uint64_t v135 = __s1;
          uint64_t v134 = v449[0];
          (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v133);
          uint64_t v120 = v441;
          if ((swift_isUniquelyReferenced_nonNull_native(v441) & 1) == 0)
          {
            sub_10000CC84(0, v120[2] + 1LL, 1);
            uint64_t v120 = v441;
          }

          unint64_t v137 = v120[2];
          unint64_t v136 = v120[3];
          if (v137 >= v136 >> 1)
          {
            sub_10000CC84(v136 > 1, v137 + 1, 1);
            uint64_t v120 = v441;
          }

          v120[2] = v137 + 1;
          int v138 = &v120[2 * v137];
          v138[4] = v135;
          v138[5] = v134;
          uint64_t v121 = v424;
          int64_t v139 = sub_100045E5C(v122, v124, v126 & 1, v424);
          int64_t v122 = v139;
          int v124 = v140;
          char v126 = v141 & 1;
          --v119;
          uint64_t v60 = v427;
        }

        while (v119);
        sub_10004B058(v139, v140, v141 & 1);
        unint64_t v111 = v440;
        char v114 = v382;
      }

      uint64_t v147 = v384;
      uint64_t v148 = v383;
      uint64_t __s1 = (uint64_t)v120;
      uint64_t v149 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
      unint64_t v150 = sub_100013F74();
      uint64_t v151 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v149, v150);
      unint64_t v153 = v152;
      swift_bridgeObjectRelease(v120);
      uint64_t __s1 = sub_1000058CC(v151, v153, &__s2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s1, v449, v148 + 4, v148 + 12);
      uint64_t v154 = v424;
      swift_release(v424);
      swift_bridgeObjectRelease(v154);
      swift_bridgeObjectRelease(v153);
      _os_log_impl( (void *)&_mh_execute_header,  v147,  (os_log_type_t)v387,  "Found actively used drivers that are missing:\n%s",  v148,  0xCu);
      uint64_t v155 = v385;
      swift_arrayDestroy(v385, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1LL, -1LL);
      swift_slowDealloc(v148, -1LL, -1LL);

      uint64_t v145 = *(void (**)(char *, uint64_t))(v111 + 8);
      uint64_t v110 = v435;
      v145(v403, v435);
      uint64_t v146 = v394;
      uint64_t v113 = v386;
    }

    else
    {

      swift_release(v109);
      swift_bridgeObjectRelease(v109);
      uint64_t v145 = *(void (**)(char *, uint64_t))(v111 + 8);
      v145(v115, v110);
      uint64_t v146 = v394;
    }

    v114(v146, v113, v110);
    uint64_t v156 = v405;
    swift_bridgeObjectRetain_n(v405, 2LL);
    uint64_t v157 = v400;
    uint64_t v158 = swift_bridgeObjectRetain_n(v400, 2LL);
    char v159 = (os_log_s *)Logger.logObject.getter(v158);
    os_log_type_t v160 = static os_log_type_t.error.getter(v159);
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v162 = swift_slowAlloc(32LL, -1LL);
      uint64_t __s1 = v162;
      uint64_t v437 = (char *)v145;
      *(_DWORD *)uint64_t v161 = 136315138;
      sub_10003BC24(v156, v402, v157);
      unint64_t v164 = v163;
      uint64_t __s2 = sub_1000058CC(v165, v163, &__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v447, v161 + 4, v161 + 12);
      swift_bridgeObjectRelease_n(v157, 2LL);
      swift_bridgeObjectRelease_n(v156, 2LL);
      uint64_t v166 = v415;
      swift_bridgeObjectRelease(v164);
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "%s", v161, 0xCu);
      swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v167 = v162;
      uint64_t v110 = v435;
      swift_slowDealloc(v167, -1LL, -1LL);
      swift_slowDealloc(v161, -1LL, -1LL);

      uint64_t v112 = (uint64_t)v166;
      ((void (*)(char *, uint64_t))v437)(v146, v110);
      uint64_t v143 = v404;
      uint64_t v144 = v433;
      uint64_t v82 = v416;
    }

    else
    {

      swift_bridgeObjectRelease_n(v157, 2LL);
      swift_bridgeObjectRelease_n(v156, 2LL);
      v145(v146, v110);
      uint64_t v143 = v404;
      uint64_t v144 = v433;
      uint64_t v82 = v416;
      uint64_t v112 = (uint64_t)v415;
    }
  }

  else
  {
    swift_release(v109);
    uint64_t v143 = v404;
    uint64_t v144 = v433;
  }

  uint64_t v168 = 0LL;
  uint64_t v169 = 1LL << v425[32];
  uint64_t v170 = -1LL;
  if (v169 < 64) {
    uint64_t v170 = ~(-1LL << v169);
  }
  unint64_t v171 = v170 & *((void *)v425 + 8);
  unint64_t v172 = (unint64_t)(v169 + 63) >> 6;
  unint64_t v386 = v172 - 1;
  uint64_t v406 = (char *)v172;
  unint64_t v387 = v172 - 5;
  v403 = v425 + 64;
  unint64_t v394 = v425 + 104;
  *(void *)&__int128 v142 = 136315394LL;
  __int128 v424 = v142;
  int v404 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v171)
    {
      uint64_t v173 = v110;
      uint64_t v174 = (uint64_t)v82;
      uint64_t v436 = (v171 - 1) & v171;
      uint64_t v437 = v168;
      unint64_t v175 = __clz(__rbit64(v171)) | ((void)v168 << 6);
LABEL_37:
      uint64_t v176 = v425;
      uint64_t v177 = v144;
      uint64_t v178 = (uint64_t)v432;
      (*((void (**)(void *, unint64_t, char *))v144 + 2))( v432,  *((void *)v425 + 6) + *((void *)v144 + 9) * v175,  v143);
      uint64_t v179 = *((void *)v176 + 7) + *(void *)(v423 + 72) * v175;
      uint64_t v180 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
      sub_100012734(v179, v178 + *(int *)(v180 + 48), type metadata accessor for DriverBinEntry);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56LL))(v178, 0LL, 1LL, v180);
      uint64_t v182 = (void (*)(void, void))v438;
      uint64_t v181 = (uint64_t)v439;
      goto LABEL_45;
    }

    uint64_t v183 = (uint64_t)(v168 + 1);
    if (__OFADD__(v168, 1LL))
    {
      __break(1u);
      __break(1u);
      JUMPOUT(0x100045698LL);
    }

    uint64_t v173 = v110;
    if (v183 >= (uint64_t)v406)
    {
      uint64_t v177 = v144;
      uint64_t v185 = v168;
      uint64_t v181 = (uint64_t)v439;
LABEL_43:
      uint64_t v182 = (void (*)(void, void))v438;
      goto LABEL_44;
    }

    unint64_t v184 = *(void *)&v403[8 * v183];
    uint64_t v181 = (uint64_t)v439;
    if (v184) {
      goto LABEL_41;
    }
    uint64_t v177 = v144;
    uint64_t v185 = v168 + 1;
    uint64_t v182 = (void (*)(void, void))v438;
    if ((uint64_t)(v168 + 2) < (uint64_t)v406)
    {
      unint64_t v184 = *(void *)&v403[8 * (void)(v168 + 2)];
      if (v184)
      {
        uint64_t v183 = (uint64_t)(v168 + 2);
        uint64_t v144 = v177;
LABEL_41:
        uint64_t v174 = (uint64_t)v82;
        uint64_t v436 = (v184 - 1) & v184;
        uint64_t v437 = (char *)v183;
        unint64_t v175 = __clz(__rbit64(v184)) + (v183 << 6);
        goto LABEL_37;
      }

      uint64_t v185 = v168 + 2;
      if ((uint64_t)(v168 + 3) < (uint64_t)v406)
      {
        unint64_t v184 = *(void *)&v403[8 * (void)(v168 + 3)];
        if (v184)
        {
          uint64_t v183 = (uint64_t)(v168 + 3);
          uint64_t v144 = v177;
          goto LABEL_41;
        }

        uint64_t v183 = (uint64_t)(v168 + 4);
        uint64_t v185 = v168 + 3;
        if ((uint64_t)(v168 + 4) < (uint64_t)v406)
        {
          unint64_t v184 = *(void *)&v403[8 * v183];
          uint64_t v144 = v177;
          if (v184) {
            goto LABEL_41;
          }
          while ((char *)v387 != v168)
          {
            unint64_t v184 = *(void *)&v394[8 * (void)v168++];
            if (v184)
            {
              uint64_t v183 = (uint64_t)(v168 + 4);
              goto LABEL_41;
            }
          }

          uint64_t v185 = (char *)v386;
          goto LABEL_43;
        }
      }
    }

LABEL_74:
  __int128 v438 = (void (**)(char *, uint64_t, uint64_t))((v260 - 1) & v260);
  __int128 v439 = (char *)v259;
  unint64_t v252 = __clz(__rbit64(v260)) + (v259 << 6);
LABEL_71:
  uint64_t v253 = *((void *)v437 + 7);
  __int128 v254 = (uint64_t *)(*((void *)v437 + 6) + 16 * v252);
  uint64_t v255 = *v254;
  unint64_t v256 = v254[1];
  uint64_t *v420 = *v254;
  *(void *)(v249 + 8) = v256;
  uint64_t v257 = v253 + *(void *)(v422 + 72) * v252;
  uint64_t v258 = sub_100005FB4(&qword_100158268);
  sub_100012734(v257, v249 + *(int *)(v258 + 48), type metadata accessor for ApplicationRecord);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v258 - 8) + 56LL))(v249, 0LL, 1LL, v258);
  sub_1000125E0(v255, v256);
LABEL_77:
  sub_1000263D8(v249, v250, &qword_100158260);
  uint64_t v263 = sub_100005FB4(&qword_100158268);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v263 - 8) + 48LL))(v250, 1LL, v263) != 1)
  {
    sub_100012778(v250 + *(int *)(v263 + 48), v248, type metadata accessor for ApplicationRecord);
    __asm { BR              X8 }
  }

  swift_release(v437);
  uint64_t v264 = v442;
  uint64_t v265 = v443;
  uint64_t v266 = v444;
  swift_bridgeObjectRetain(v442);
  swift_bridgeObjectRetain(v266);
  __int128 v267 = v407;
  sub_100045F40(v264);
  swift_bridgeObjectRelease(v266);
  swift_bridgeObjectRelease(v264);
  uint64_t __s1 = v264;
  v449[0] = v265;
  v449[1] = v266;
  uint64_t v268 = v405;
  uint64_t __s2 = v405;
  v447[0] = v402;
  __int128 v269 = v400;
  v447[1] = v400;
  unint64_t v270 = sub_10004B014();
  LOBYTE(v265) = dispatch thunk of static Equatable.== infix(_:_:)(&__s1, &__s2, &type metadata for DriverBinInfo, v270);
  swift_bridgeObjectRelease(v269);
  swift_bridgeObjectRelease(v268);
  uint64_t v271 = v445;
  if ((v265 & 1) == 0)
  {
    swift_bridgeObjectRetain(v445);
    BOOL v272 = sub_1000D26D0();
    swift_bridgeObjectRelease(v271);
    if (v272)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0) {
        uint64_t v271 = sub_10000C82C(0LL, v271[2] + 1LL, 1, v271);
      }
      unint64_t v274 = v271[2];
      unint64_t v273 = v271[3];
      if (v274 >= v273 >> 1) {
        uint64_t v271 = sub_10000C82C((void *)(v273 > 1), v274 + 1, 1, v271);
      }
      v271[2] = v274 + 1;
      uint64_t v275 = &v271[2 * v274];
      v275[4] = 0xD000000000000012LL;
      v275[5] = 0x80000001001234B0LL;
      v445 = v271;
    }
  }

  swift_bridgeObjectRetain(v271);
  BOOL v276 = sub_1000D26D0();
  swift_bridgeObjectRelease(v271);
  if (v276)
  {
    swift_bridgeObjectRelease(v266);
    swift_bridgeObjectRelease(v264);
    [*(id *)((char *)v267 + v401) unlock];
    swift_bridgeObjectRelease(v271);
    return 0LL;
  }

  uint64_t v278 = sub_1000D3274();
  uint64_t v279 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v251 + 16);
  uint64_t v280 = v435;
  uint64_t v281 = v279(v397, v278, v435);
  uint64_t v282 = (os_log_s *)Logger.logObject.getter(v281);
  os_log_type_t v283 = static os_log_type_t.default.getter(v282);
  if (os_log_type_enabled(v282, v283))
  {
    uint64_t v284 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v284 = 0;
    _os_log_impl((void *)&_mh_execute_header, v282, v283, "Saving dextbin info, encoding", v284, 2u);
    swift_slowDealloc(v284, -1LL, -1LL);
  }

  uint64_t v285 = *(void (**)(char *, uint64_t))(v251 + 8);
  v285(v397, v280);
  uint64_t v287 = v442;
  uint64_t v286 = v443;
  uint64_t v288 = v444;
  swift_bridgeObjectRetain(v442);
  swift_bridgeObjectRetain(v288);
  uint64_t v289 = (uint64_t)v395;
  uint64_t v290 = sub_10003CCFC(v287, v286, v288);
  uint64_t v292 = v289;
  if (v289)
  {
    swift_bridgeObjectRelease_n(v288, 2LL);
    swift_bridgeObjectRelease_n(v287, 2LL);
    goto LABEL_112;
  }

  __int128 v439 = (char *)v290;
  unint64_t v440 = v291;
  swift_bridgeObjectRelease(v288);
  swift_bridgeObjectRelease(v287);
  uint64_t v293 = v392;
  uint64_t v434 = v278;
  uint64_t v436 = (uint64_t)v279;
  uint64_t v294 = v279(v392, v278, v280);
  v295 = (os_log_s *)Logger.logObject.getter(v294);
  uint64_t v296 = static os_log_type_t.default.getter(v295);
  if (os_log_type_enabled(v295, (os_log_type_t)v296))
  {
    int v297 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v297 = 0;
    _os_log_impl((void *)&_mh_execute_header, v295, (os_log_type_t)v296, "Writing new dextbin info contents", v297, 2u);
    int v298 = v297;
    uint64_t v293 = v392;
    swift_slowDealloc(v298, -1LL, -1LL);
  }

  uint64_t v299 = v435;
  __int128 v438 = (void (**)(char *, uint64_t, uint64_t))v285;
  v285(v293, v435);
  unint64_t v300 = v407;
  uint64_t v301 = v407[5];
  uint64_t v302 = v407[6];
  sub_100005110(v399, v301);
  sub_1001073DC(v301, v302);
  uint64_t v303 = v450;
  uint64_t v304 = v451;
  sub_100005110(&__s1, v450);
  char v305 = v393;
  uint64_t v437 = *(char **)(*v300 + 304LL);
  uint64_t v306 = ((uint64_t (*)(void))v437)();
  uint64_t v307 = URL.path.getter(v306);
  uint64_t v309 = v308;
  __int128 v433 = *(char **)(v426 + 8);
  ((void (*)(char *, uint64_t))v433)(v305, v427);
  uint64_t v310 = (uint64_t)v439;
  unint64_t v311 = v440;
  sub_1000125E0((uint64_t)v439, v440);
  unint64_t v312 = sub_10001BD10((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v307) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v304 + 40))( v307,  v309,  v310,  v311,  v312,  v303,  v304);
  swift_bridgeObjectRelease(v312);
  sub_10001226C(v310, v311);
  swift_bridgeObjectRelease(v309);
  uint64_t v313 = sub_100006034(&__s1);
  if ((v307 & 1) != 0)
  {
    unint64_t v314 = v391;
    uint64_t v315 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v391, v434, v299);
    unint64_t v316 = (os_log_s *)Logger.logObject.getter(v315);
    os_log_type_t v317 = static os_log_type_t.default.getter(v316);
    if (os_log_type_enabled(v316, v317))
    {
      uint64_t v318 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v318 = 0;
      _os_log_impl((void *)&_mh_execute_header, v316, v317, "Replacing old dextbin info contents", v318, 2u);
      swift_slowDealloc(v318, -1LL, -1LL);
    }

    ((void (*)(char *, uint64_t))v438)(v314, v435);
    uint64_t v319 = v407;
    uint64_t v320 = v407[5];
    uint64_t v321 = v407[6];
    sub_100005110(v399, v320);
    sub_1001073DC(v320, v321);
    uint64_t v322 = v450;
    uint64_t v323 = v451;
    sub_100005110(&__s1, v450);
    uint64_t v324 = v390;
    uint64_t v325 = (*(uint64_t (**)(void))(*v319 + 280LL))();
    uint64_t v326 = v389;
    ((void (*)(uint64_t))v437)(v325);
    (*(void (**)(char *, char *, void, void, void, void, uint64_t, uint64_t))(v323 + 88))( v324,  v326,  0LL,  0LL,  0LL,  0LL,  v322,  v323);
    uint64_t v367 = v427;
    unint64_t v368 = (void (*)(char *, uint64_t))v433;
    ((void (*)(char *, uint64_t))v433)(v326, v427);
    v368(v324, v367);
    sub_100006034(&__s1);
    uint64_t v369 = v319[5];
    uint64_t v370 = v319[6];
    sub_100005110(v399, v369);
    sub_1001073DC(v369, v370);
    uint64_t v371 = v450;
    uint64_t v372 = v451;
    sub_100005110(&__s1, v450);
    uint64_t v373 = v388;
    ((void (*)(void))v437)();
    (*(void (**)(char *, uint64_t, uint64_t))(v372 + 104))(v373, v371, v372);
    v368(v373, v367);
    sub_10001226C((uint64_t)v439, v440);
    uint64_t v374 = v401;
    sub_100006034(&__s1);
    uint64_t v375 = v443;
    uint64_t v376 = v444;
    v377 = v407;
    v378 = (void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    uint64_t v379 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    uint64_t v380 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8);
    uint64_t v381 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16);
    unint64_t *v378 = v442;
    v378[1] = v375;
    v378[2] = v376;
    sub_100045A90(v379, v380, v381);
    uint64_t v277 = v445;
    [*(id *)((char *)v377 + v374) unlock];
  }

  else
  {
    int v327 = errno.getter(v313);
    v328 = strerror(v327);
    uint64_t v279 = (uint64_t (*)(char *, uint64_t, uint64_t))v436;
    uint64_t v278 = v434;
    if (!v328)
    {
      __break(1u);
      JUMPOUT(0x1000457D0LL);
    }

    uint64_t v329 = v328;
    swift_bridgeObjectRelease(v442);
    swift_bridgeObjectRelease(v444);
    uint64_t v330 = String.init(cString:)(v329);
    uint64_t v332 = v331;
    uint64_t __s1 = 0LL;
    v449[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    uint64_t v333 = swift_bridgeObjectRelease(v449[0]);
    uint64_t __s1 = 0x6946657461657263LL;
    v449[0] = 0xEB0000000020656CLL;
    uint64_t v334 = v393;
    uint64_t v335 = ((uint64_t (*)(uint64_t))v437)(v333);
    uint64_t v336 = URL.path.getter(v335);
    v338 = v337;
    ((void (*)(char *, uint64_t))v433)(v334, v427);
    v339._uint64_t countAndFlagsBits = v336;
    v339._uint64_t object = v338;
    String.append(_:)(v339);
    swift_bridgeObjectRelease(v338);
    v340._uint64_t countAndFlagsBits = 0x3A64656C69616620LL;
    v340._uint64_t object = (void *)0xEF206F6E72726520LL;
    String.append(_:)(v340);
    v341._uint64_t countAndFlagsBits = v330;
    v341._uint64_t object = v332;
    String.append(_:)(v341);
    swift_bridgeObjectRelease(v332);
    uint64_t v342 = __s1;
    uint64_t v343 = v449[0];
    unint64_t v344 = sub_100012624();
    uint64_t v292 = swift_allocError(&type metadata for KMError, v344, 0LL, 0LL);
    *(void *)uint64_t v345 = v342;
    *(void *)(v345 + 8) = v343;
    *(_OWORD *)(v345 + 16) = 0u;
    *(_OWORD *)(v345 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v345 + 48) = 0u;
    *(void *)(v345 + 64) = 0LL;
    *(_BYTE *)(v345 + 7sub_100006034(v0 + 2) = 19;
    swift_willThrow(v292);
    sub_10001226C((uint64_t)v439, v440);
    uint64_t v285 = (void (*)(char *, uint64_t))v438;
LABEL_112:
    unint64_t v346 = sub_10003ABE0();
    uint64_t v347 = v407;
    unint64_t v348 = (void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    uint64_t v349 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    uint64_t v350 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8);
    uint64_t v351 = *(void *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16);
    *unint64_t v348 = v346;
    v348[1] = v352;
    v348[2] = v353;
    sub_100045A90(v349, v350, v351);
    uint64_t v354 = v396;
    uint64_t v355 = v435;
    v279(v396, v278, v435);
    swift_errorRetain(v292);
    uint64_t v356 = swift_errorRetain(v292);
    uint64_t v357 = (os_log_s *)Logger.logObject.getter(v356);
    os_log_type_t v358 = static os_log_type_t.error.getter(v357);
    if (os_log_type_enabled(v357, v358))
    {
      uint64_t v359 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v360 = swift_slowAlloc(32LL, -1LL);
      uint64_t __s1 = v360;
      *(_DWORD *)uint64_t v359 = 136315138;
      uint64_t __s2 = v292;
      swift_errorRetain(v292);
      uint64_t v361 = sub_100005FB4(&qword_10015AB20);
      uint64_t v362 = String.init<A>(describing:)(&__s2, v361);
      unint64_t v363 = v285;
      unint64_t v365 = v364;
      uint64_t __s2 = sub_1000058CC(v362, v364, &__s1);
      uint64_t v347 = v407;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v447, v359 + 4, v359 + 12);
      swift_bridgeObjectRelease(v365);
      swift_errorRelease(v292);
      swift_errorRelease(v292);
      _os_log_impl((void *)&_mh_execute_header, v357, v358, "Can't save dextbin info: %s", v359, 0xCu);
      swift_arrayDestroy(v360, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v360, -1LL, -1LL);
      swift_slowDealloc(v359, -1LL, -1LL);

      v363(v396, v435);
    }

    else
    {
      swift_errorRelease(v292);
      swift_errorRelease(v292);

      v285(v354, v355);
    }

    swift_errorRelease(v292);
    [*(id *)((char *)v347 + v401) unlock];
    swift_bridgeObjectRelease(v445);
    return &off_100147518;
  }

  return (_UNKNOWN **)v277;
}

                      uint64_t v113 = 0LL;
                      int64_t v119 = 1;
LABEL_75:
                      uint64_t v65 = v169;
                      uint64_t v66 = (void (**)(void, void, void))v176;
                      uint64_t v112 = v113;
                      if ((v119 & 1) == 0) {
                        goto LABEL_78;
                      }
                      goto LABEL_76;
                    }

          uint64_t v30 = v432;
          uint64_t v173 = (void (*)(char *, uint64_t))v432[1];
          v173(v162, (uint64_t)v75);
          goto LABEL_75;
        }

        uint64_t v176 = *((void *)v434 + 5);
        uint64_t v177 = *((void *)v434 + 6);
        sub_100005110(v421, v176);
        sub_10009C2CC(v176, v177);
        uint64_t v178 = *((void *)&v443 + 1);
        uint64_t v179 = v444;
        sub_100005110(&v442, *((uint64_t *)&v443 + 1));
        uint64_t v180 = (unint64_t)v433;
        (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v179 + 24))(&v440, v433, v178, v179);
        if (v441)
        {
          sub_100005158(&v440, (uint64_t)&v445);
          sub_100006034(&v442);
          uint64_t v181 = v447;
          uint64_t v182 = v448;
          sub_100005110(&v445, v447);
          uint64_t v183 = (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 24))(v181, v182);
          if (!v184)
          {
            Swift::String v217 = sub_1000D32BC();
            int v193 = v402;
            unint64_t v74 = v435;
            (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v402, v217, v435);
            uint64_t v194 = v401;
            uint64_t v195 = (unint64_t)v433;
            os_log_type_t v75 = (char *)v439;
            uint64_t v218 = v145((unint64_t)v401, v433, (char *)v439);
            uint64_t v197 = (os_log_s *)Logger.logObject.getter(v218);
            uint64_t v219 = static os_log_type_t.error.getter(v197);
            if (!os_log_type_enabled(v197, v219)) {
              goto LABEL_40;
            }
            uint64_t v199 = swift_slowAlloc(12LL, -1LL);
            uint64_t v200 = swift_slowAlloc(32LL, -1LL);
            *(void *)&unint64_t v442 = v200;
            *(_DWORD *)uint64_t v199 = v420;
            uint64_t v220 = URL.path.getter(v200);
            uint64_t v222 = v221;
            *(void *)(v199 + 4) = sub_1000058CC(v220, v221, (uint64_t *)&v442);
            swift_bridgeObjectRelease(v222);
            uint64_t v30 = v432;
            uint64_t v140 = (void (*)(char *, uint64_t))v432[1];
            v140(v194, v439);
            uint64_t v204 = v197;
            uint64_t v205 = v219;
            uint64_t v206 = "Bundle at %s does not have a bundle identifier";
LABEL_81:
            _os_log_impl((void *)&_mh_execute_header, v204, v205, v206, (uint8_t *)v199, 0xCu);
            swift_arrayDestroy(v200, 1LL, (char *)&type metadata for Any + 8);
            os_log_type_t v223 = v200;
            unint64_t v74 = v435;
            swift_slowDealloc(v223, -1LL, -1LL);
            uint64_t v224 = v199;
            os_log_type_t v75 = (char *)v439;
            swift_slowDealloc(v224, -1LL, -1LL);

LABEL_41:
            (*(void (**)(char *, uint64_t))(v438 + 8))(v193, v74);
            v140((char *)v195, (uint64_t)v75);
            uint64_t v76 = v431;
            sub_1000127BC((uint64_t)v431, type metadata accessor for DriverBinEntry);
            uint64_t v22 = v195;
            uint64_t v11 = (unint64_t)v436;
            uint64_t v132 = v437;
            sub_100006034(&v445);
            unint64_t v136 = v429;
            if (v11) {
              goto LABEL_39;
            }
            goto LABEL_42;
          }

          uint64_t v185 = v183;
          uint64_t v186 = v184;
          uint64_t v187 = (uint64_t)v449;
          uint64_t v188 = (uint64_t *)&v149[*(int *)(v151 + 28)];
          uint64_t v189 = *v188;
          uint64_t v190 = v188[1];
          swift_bridgeObjectRetain(v449);
          sub_1000125E0(v189, v190);
          uint64_t v191 = sub_10005E3D0(v185, v186, v189, v190, v187);
          sub_10001226C(v189, v190);
          swift_bridgeObjectRelease(v187);
          if (v191 != 3)
          {
            swift_bridgeObjectRelease(v186);
            uint64_t v192 = sub_1000D32BC();
            int v193 = v409;
            unint64_t v74 = v435;
            (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v409, v192, v435);
            uint64_t v194 = v408;
            uint64_t v195 = (unint64_t)v433;
            os_log_type_t v75 = (char *)v439;
            uint64_t v196 = v145((unint64_t)v408, v433, (char *)v439);
            uint64_t v197 = (os_log_s *)Logger.logObject.getter(v196);
            uint64_t v198 = static os_log_type_t.info.getter(v197);
            if (os_log_type_enabled(v197, v198))
            {
              uint64_t v199 = swift_slowAlloc(12LL, -1LL);
              uint64_t v200 = swift_slowAlloc(32LL, -1LL);
              *(void *)&unint64_t v442 = v200;
              *(_DWORD *)uint64_t v199 = v420;
              uint64_t v201 = URL.path.getter(v200);
              os_log_type_t v203 = v202;
              *(void *)(v199 + 4) = sub_1000058CC(v201, v202, (uint64_t *)&v442);
              swift_bridgeObjectRelease(v203);
              uint64_t v30 = v432;
              uint64_t v140 = (void (*)(char *, uint64_t))v432[1];
              v140(v194, v439);
              uint64_t v204 = v197;
              uint64_t v205 = v198;
              uint64_t v206 = "Skipping bundle at %s, already inserted into approvals database";
              goto LABEL_81;
            }

unint64_t sub_100045800()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
  uint64_t v3 = v2;
  sub_10003BC24(v1, v4, v2);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  v9._uint64_t countAndFlagsBits = v6;
  v9._uint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return 0xD000000000000014LL;
}

BOOL sub_100045890()
{
  uint64_t v1 = v0;
  v2._uint64_t countAndFlagsBits = URL.path.getter();
  uint64_t object = v2._object;
  Swift::Bool v4 = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(object);
  return v4;
}

uint64_t sub_1000458FC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers));

  sub_100012824( v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation,  (uint64_t *)&unk_10015BA30);
  sub_100012824( v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation,  (uint64_t *)&unk_10015BA30);
  sub_100045A90( *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo),  *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8),  *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16));
  return v0;
}

uint64_t sub_1000459E0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

id sub_100045A04()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue);
}

uint64_t sub_100045A14()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t sub_100045A20()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

void (*sub_100045A2C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 224LL))();
  return sub_10000C7E8;
}

uint64_t sub_100045A78()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376LL))();
}

uint64_t sub_100045A84()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384LL))();
}

uint64_t sub_100045A90(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_100045ABC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  uint64_t v40 = v9;
  sub_100005FB4(&qword_100157E88);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0LL;
  uint64_t v16 = result + 56;
  uint64_t v17 = v40;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v15 << 6);
    }

    else
    {
      uint64_t v20 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }

      unint64_t v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        uint64_t v15 = v20 + 1;
        if (v20 + 1 >= v39) {
          goto LABEL_37;
        }
        unint64_t v21 = v38[v15];
        if (!v21)
        {
          uint64_t v15 = v20 + 2;
          if (v20 + 2 >= v39) {
            goto LABEL_37;
          }
          unint64_t v21 = v38[v15];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v39) {
              goto LABEL_37;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v15 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v15 >= v39) {
                  goto LABEL_37;
                }
                unint64_t v21 = v38[v15];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v15 = v22;
          }
        }
      }

uint64_t sub_100045DBC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_100045E5C(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100045F40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v198 = v4;
  uint64_t v199 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v186 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v175 = (char *)&v168 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v179 = (char *)&v168 - v11;
  __chkstk_darwin(v10);
  uint64_t v183 = (char *)&v168 - v12;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v202 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v174 = (char *)&v168 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v185 = (char *)&v168 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v178 = (char *)&v168 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v177 = (char *)&v168 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v182 = (char *)&v168 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v176 = (char *)&v168 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v168 - v30;
  __chkstk_darwin(v29);
  uint64_t v201 = (char *)&v168 - v32;
  uint64_t v33 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v192 = (char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  *(void *)&__int128 v191 = (char *)&v168 - v36;
  uint64_t v37 = (void *)(v1 + 16);
  uint64_t v38 = *(void *)(v1 + 40);
  uint64_t v39 = *(void *)(v2 + 48);
  uint64_t v190 = v37;
  sub_100005110(v37, v38);
  sub_1001073DC(v38, v39);
  uint64_t v40 = v206;
  uint64_t v41 = v207;
  sub_100005110(&v204, v206);
  uint64_t v194 = v2;
  uint64_t v42 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v41 + 24))( v2 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory,  0LL,  1LL,  v40,  v41);
  uint64_t v43 = v202;
  uint64_t v44 = v191;
  sub_100006034(&v204);
  swift_bridgeObjectRetain(a1);
  uint64_t v46 = sub_100041214(v45);
  uint64_t v195 = 0LL;
  swift_bridgeObjectRelease(a1);
  uint64_t v47 = sub_100012054(v46);
  uint64_t result = swift_bridgeObjectRelease(v46);
  uint64_t v50 = *(char **)(v42 + 16);
  uint64_t v181 = v16;
  uint64_t v189 = v50;
  if (v50)
  {
    uint64_t v51 = 0LL;
    unint64_t v180 = (*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    unint64_t v188 = v42 + v180;
    uint64_t v200 = v47 + 56;
    uint64_t v197 = (char *)_swiftEmptyArrayStorage;
    *(void *)&__int128 v49 = 136315138LL;
    __int128 v171 = v49;
    uint64_t v170 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v49 = 136315394LL;
    __int128 v168 = v49;
    uint64_t v52 = v201;
    uint64_t v184 = v47;
    uint64_t v187 = v42;
    while (1)
    {
      if ((unint64_t)v51 >= *(void *)(v42 + 16))
      {
        __break(1u);
        return result;
      }

      uint64_t v53 = *(void *)(v43 + 72);
      uint64_t v54 = *(void (**)(uint64_t, unint64_t, uint64_t))(v43 + 16);
      v54(v44, v188 + v53 * (void)v51, v13);
      uint64_t v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      v196(v44, 0LL, 1LL, v13);
      *(void *)&__int128 v193 = *(void *)(v43 + 32);
      uint64_t v55 = ((uint64_t (*)(char *, uint64_t, uint64_t))v193)(v52, v44, v13);
      uint64_t v56 = v52;
      if ((URL.hasDirectoryPath.getter(v55) & 1) != 0) {
        break;
      }
      uint64_t v82 = v194;
      uint64_t v83 = *(void (**)(void))(*(void *)v194 + 280LL);
      v83();
      char v84 = static URL.== infix(_:_:)(v52, v31);
      uint64_t v65 = *(void (**)(char *, uint64_t))(v43 + 8);
      v65(v31, v13);
      if ((v84 & 1) == 0)
      {
        uint64_t v173 = v83;
        uint64_t v85 = sub_1000D3274();
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v179, v85, v198);
        uint64_t v86 = v177;
        v54((uint64_t)v177, (unint64_t)v56, v13);
        uint64_t v87 = swift_retain_n(v82, 2LL);
        uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
        os_log_type_t v89 = static os_log_type_t.default.getter(v88);
        int v90 = v89;
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v91 = swift_slowAlloc(22LL, -1LL);
          uint64_t v92 = swift_slowAlloc(64LL, -1LL);
          uint64_t v204 = (void (*)(void))v92;
          *(_DWORD *)uint64_t v91 = v168;
          uint64_t v93 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          LODWORD(v17sub_100006034(v0 + 2) = v90;
          uint64_t v94 = v93;
          os_log_t v169 = v88;
          uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter(v13, v93);
          unint64_t v97 = v96;
          *(void *)(v91 + 4) = sub_1000058CC(v95, v96, (uint64_t *)&v204);
          swift_bridgeObjectRelease(v97);
          uint64_t v98 = ((uint64_t (*)(char *, uint64_t))v65)(v177, v13);
          *(_WORD *)(v91 + 1sub_100006034(v0 + 2) = 2080;
          ((void (*)(uint64_t))v173)(v98);
          uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
          unint64_t v101 = v100;
          v65(v31, v13);
          *(void *)(v91 + 14) = sub_1000058CC(v99, v101, (uint64_t *)&v204);
          swift_release_n(v194, 2LL);
          swift_bridgeObjectRelease(v101);
          os_log_t v102 = v169;
          _os_log_impl( (void *)&_mh_execute_header,  v169,  (os_log_type_t)v172,  "Will remove untracked file %s, since it is not the expected Info.plist at %s",  (uint8_t *)v91,  0x16u);
          swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_slowDealloc(v91, -1LL, -1LL);
        }

        else
        {
          v65(v86, v13);

          swift_release_n(v82, 2LL);
        }

        (*(void (**)(char *, uint64_t))(v199 + 8))(v179, v198);
        uint64_t v44 = v191;
        v54((uint64_t)v178, (unint64_t)v201, v13);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v197);
        uint64_t v47 = v184;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v197 = (char *)sub_10000C938(0, *((void *)v197 + 2) + 1LL, 1, (unint64_t)v197);
        }
        uint64_t v103 = (void (*)(char *, uint64_t, uint64_t))v193;
        unint64_t v105 = *((void *)v197 + 2);
        unint64_t v109 = *((void *)v197 + 3);
        unint64_t v106 = v105 + 1;
        if (v105 >= v109 >> 1) {
          uint64_t v197 = (char *)sub_10000C938(v109 > 1, v105 + 1, 1, (unint64_t)v197);
        }
        uint64_t v107 = &v205;
LABEL_30:
        uint64_t v110 = *((void *)v107 - 32);
        unint64_t v111 = v197;
        *((void *)v197 + sub_100006034(v0 + 2) = v106;
        v103(&v111[v180 + v105 * v53], v110, v13);
        uint64_t v52 = v201;
        goto LABEL_31;
      }

      uint64_t v52 = v56;
      uint64_t v44 = v191;
      uint64_t v42 = v187;
      uint64_t v47 = v184;
LABEL_4:
      ++v51;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v65)(v52, v13);
      uint64_t v43 = v202;
      if (v51 == v189) {
        goto LABEL_34;
      }
    }

    if (!*(void *)(v47 + 16)
      || (uint64_t v57 = *(void *)(v47 + 40),
          uint64_t v58 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL),  v59 = dispatch thunk of Hashable._rawHashValue(seed:)(v57, v13, v58),  v60 = -1LL << *(_BYTE *)(v47 + 32),  v61 = v59 & ~v60,  ((*(void *)(v200 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v61) & 1) == 0))
    {
LABEL_13:
      uint64_t v66 = sub_1000D3274();
      uint64_t v67 = v198;
      (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v183, v66, v198);
      uint64_t v68 = v176;
      uint64_t v69 = ((uint64_t (*)(char *, char *, uint64_t))v54)(v176, v201, v13);
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v71 = static os_log_type_t.default.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc(12LL, -1LL);
        os_log_t v172 = v70;
        uint64_t v73 = v68;
        uint64_t v74 = v72;
        uint64_t v173 = (void (*)(void))swift_slowAlloc(32LL, -1LL);
        uint64_t v204 = (void (*)(void))v173;
        *(_DWORD *)uint64_t v74 = v171;
        uint64_t v75 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v76 = v73;
        uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v13, v75);
        unint64_t v79 = v78;
        *(void *)(v74 + 4) = sub_1000058CC(v77, v78, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v79);
        uint64_t v65 = *(void (**)(char *, uint64_t))(v43 + 8);
        v65(v76, v13);
        os_log_t v80 = v172;
        _os_log_impl((void *)&_mh_execute_header, v172, v71, "Will remove untracked directory %s", (uint8_t *)v74, 0xCu);
        uint64_t v81 = v173;
        swift_arrayDestroy(v173, 1LL, v170);
        swift_slowDealloc(v81, -1LL, -1LL);
        swift_slowDealloc(v74, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v199 + 8))(v183, v198);
      }

      else
      {
        uint64_t v65 = *(void (**)(char *, uint64_t))(v43 + 8);
        v65(v68, v13);

        (*(void (**)(char *, uint64_t))(v199 + 8))(v183, v67);
      }

      uint64_t v44 = v191;
      uint64_t v47 = v184;
      v54((uint64_t)v182, (unint64_t)v201, v13);
      if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) == 0) {
        uint64_t v197 = (char *)sub_10000C938(0, *((void *)v197 + 2) + 1LL, 1, (unint64_t)v197);
      }
      uint64_t v103 = (void (*)(char *, uint64_t, uint64_t))v193;
      unint64_t v105 = *((void *)v197 + 2);
      unint64_t v104 = *((void *)v197 + 3);
      unint64_t v106 = v105 + 1;
      if (v105 >= v104 >> 1) {
        uint64_t v197 = (char *)sub_10000C938(v104 > 1, v105 + 1, 1, (unint64_t)v197);
      }
      uint64_t v107 = &v208;
      goto LABEL_30;
    }

    uint64_t v62 = ~v60;
    while (1)
    {
      v54((uint64_t)v31, *(void *)(v47 + 48) + v61 * v53, v13);
      uint64_t v63 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v64 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v201, v13, v63);
      uint64_t v65 = *(void (**)(char *, uint64_t))(v43 + 8);
      v65(v31, v13);
      if ((v64 & 1) != 0) {
        break;
      }
      unint64_t v61 = (v61 + 1) & v62;
      uint64_t v43 = v202;
      if (((*(void *)(v200 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v61) & 1) == 0) {
        goto LABEL_13;
      }
    }

    uint64_t v52 = v201;
    uint64_t v44 = v191;
LABEL_31:
    uint64_t v42 = v187;
    goto LABEL_4;
  }

  uint64_t v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  uint64_t v197 = (char *)_swiftEmptyArrayStorage;
LABEL_34:
  v196(v44, 1LL, 1LL, v13);
LABEL_35:
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v42);
  uint64_t v113 = v185;
  char v114 = v192;
  uint64_t v115 = v194;
  uint64_t v116 = *((void *)v197 + 2);
  if (v116)
  {
    uint64_t v117 = &v197[(*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)];
    unint64_t v118 = *(char **)(v43 + 16);
    uint64_t v200 = *(void *)(v43 + 72);
    uint64_t v201 = v118;
    *(void *)&__int128 v112 = 136315138LL;
    __int128 v191 = v112;
    uint64_t v189 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v112 = 136315394LL;
    __int128 v193 = v112;
    ((void (*)(char *, char *, uint64_t))v118)(v192, v117, v13);
    while (1)
    {
      v196((uint64_t)v114, 0LL, 1LL, v13);
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v113, v114, v13);
      uint64_t v122 = *(void *)(v115 + 40);
      uint64_t v123 = *(void *)(v115 + 48);
      sub_100005110(v190, v122);
      sub_1001073DC(v122, v123);
      uint64_t v124 = v206;
      uint64_t v125 = v207;
      sub_100005110(&v204, v206);
      uint64_t v126 = v195;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 104))(v113, v124, v125);
      uint64_t v127 = v126;
      if (v126)
      {
        sub_100006034(&v204);
        uint64_t v128 = sub_1000D3274();
        uint64_t v129 = v199;
        uint64_t v130 = v186;
        Swift::String v131 = v113;
        uint64_t v132 = v198;
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v186, v128, v198);
        uint64_t v133 = v181;
        ((void (*)(char *, char *, uint64_t))v201)(v181, v131, v13);
        swift_errorRetain(v127);
        uint64_t v134 = swift_errorRetain(v127);
        uint64_t v135 = (void *)Logger.logObject.getter(v134);
        uint64_t v136 = v132;
        os_log_type_t v137 = static os_log_type_t.error.getter(v135);
        if (!os_log_type_enabled((os_log_t)v135, v137))
        {

          swift_errorRelease(v127);
          swift_errorRelease(v127);
          uint64_t v119 = v202;
          uint64_t v120 = v136;
          uint64_t v121 = *(void (**)(char *, uint64_t))(v202 + 8);
          v121(v133, v13);
          swift_errorRelease(v127);
          (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v120);
          uint64_t v113 = v185;
          v121(v185, v13);
          uint64_t v195 = 0LL;
          uint64_t v43 = v119;
LABEL_38:
          char v114 = v192;
          uint64_t v115 = v194;
          goto LABEL_39;
        }

        uint64_t v138 = swift_slowAlloc(22LL, -1LL);
        uint64_t v139 = swift_slowAlloc(64LL, -1LL);
        uint64_t v204 = (void (*)(void))v139;
        *(_DWORD *)uint64_t v138 = v193;
        uint64_t v140 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v13, v140);
        unint64_t v143 = v142;
        *(void *)(v138 + 4) = sub_1000058CC(v141, v142, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v143);
        uint64_t v144 = *(void (**)(char *, uint64_t))(v202 + 8);
        v144(v133, v13);
        uint64_t v145 = v144;
        *(_WORD *)(v138 + 1sub_100006034(v0 + 2) = 2080;
        uint64_t v203 = v127;
        swift_errorRetain(v127);
        uint64_t v146 = sub_100005FB4(&qword_10015AB20);
        uint64_t v147 = String.init<A>(describing:)(&v203, v146);
        unint64_t v149 = v148;
        *(void *)(v138 + 14) = sub_1000058CC(v147, v148, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v149);
        swift_errorRelease(v127);
        swift_errorRelease(v127);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v135,  v137,  "Difficulty removing %s: %s",  (uint8_t *)v138,  0x16u);
        swift_arrayDestroy(v139, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v150 = v194;
        swift_slowDealloc(v139, -1LL, -1LL);
        swift_slowDealloc(v138, -1LL, -1LL);

        uint64_t v115 = v150;
        swift_errorRelease(v127);
        (*(void (**)(char *, uint64_t))(v199 + 8))(v186, v198);
        uint64_t v113 = v185;
        v145(v185, v13);
        uint64_t v195 = 0LL;
        uint64_t v43 = v202;
      }

      else
      {
        uint64_t v195 = 0LL;
        sub_100006034(&v204);
        uint64_t v151 = sub_1000D3274();
        uint64_t v152 = v199;
        unint64_t v153 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v175, v151, v198);
        uint64_t v154 = v174;
        uint64_t v155 = ((uint64_t (*)(char *, char *, uint64_t))v201)(v174, v113, v13);
        uint64_t v156 = (void *)Logger.logObject.getter(v155);
        os_log_type_t v157 = static os_log_type_t.default.getter(v156);
        if (!os_log_type_enabled((os_log_t)v156, v157))
        {

          uint64_t v165 = v202;
          uint64_t v166 = *(void (**)(char *, uint64_t))(v202 + 8);
          v166(v154, v13);
          uint64_t v167 = v153;
          uint64_t v43 = v165;
          (*(void (**)(char *, uint64_t))(v152 + 8))(v167, v198);
          v166(v113, v13);
          goto LABEL_38;
        }

        uint64_t v158 = swift_slowAlloc(12LL, -1LL);
        uint64_t v159 = swift_slowAlloc(32LL, -1LL);
        uint64_t v204 = (void (*)(void))v159;
        *(_DWORD *)uint64_t v158 = v191;
        uint64_t v160 = URL.path.getter(v159);
        unint64_t v162 = v161;
        *(void *)(v158 + 4) = sub_1000058CC(v160, v161, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v162);
        unint64_t v163 = *(void (**)(char *, uint64_t))(v202 + 8);
        v163(v154, v13);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v156,  v157,  "Removed untracked path %s",  (uint8_t *)v158,  0xCu);
        swift_arrayDestroy(v159, 1LL, v189);
        swift_slowDealloc(v159, -1LL, -1LL);
        uint64_t v115 = v194;
        swift_slowDealloc(v158, -1LL, -1LL);

        unint64_t v164 = v153;
        uint64_t v43 = v202;
        (*(void (**)(char *, uint64_t))(v199 + 8))(v164, v198);
        uint64_t v113 = v185;
        v163(v185, v13);
      }

      char v114 = v192;
LABEL_39:
      v117 += v200;
      if (!--v116) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v201)(v114, v117, v13);
    }
  }

  v196((uint64_t)v114, 1LL, 1LL, v13);
  return swift_bridgeObjectRelease(v197);
}

uint64_t sub_100047004(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a2;
  uint64_t v68 = a5;
  uint64_t v71 = a4;
  uint64_t v55 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v8 = __chkstk_darwin(v64);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v54 - v11;
  uint64_t v12 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v20 = 0LL;
  uint64_t v69 = (void *)a3;
  uint64_t v21 = *(void *)(a3 + 64);
  uint64_t v56 = 0LL;
  uint64_t v57 = a3 + 64;
  uint64_t v22 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v58 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v25 = type metadata accessor for DriverBinEntry;
  uint64_t v60 = v16;
  unint64_t v61 = v14;
  uint64_t v59 = v19;
  while (v24)
  {
    uint64_t v72 = (v24 - 1) & v24;
    int64_t v73 = v20;
    unint64_t v28 = __clz(__rbit64(v24)) | (v20 << 6);
LABEL_21:
    uint64_t v33 = v69;
    uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v34(v19, v69[6] + *(void *)(v16 + 72) * v28, v15);
    uint64_t v35 = v33[7];
    uint64_t v36 = *(void *)(v62 + 72);
    unint64_t v70 = v28;
    sub_100012734(v35 + v36 * v28, (uint64_t)v14, v25);
    uint64_t v37 = v64;
    uint64_t v38 = v25;
    uint64_t v39 = v15;
    uint64_t v40 = (uint64_t)v74;
    uint64_t v41 = (uint64_t)&v74[*(int *)(v64 + 48)];
    v34(v74, (unint64_t)v19, v39);
    sub_100012734((uint64_t)v14, v41, v38);
    uint64_t v42 = (uint64_t)&v10[*(int *)(v37 + 48)];
    uint64_t v43 = v10;
    uint64_t v44 = v40;
    uint64_t v15 = v39;
    uint64_t v25 = v38;
    v34(v10, v44, v15);
    sub_100012734(v41, v42, v38);
    uint64_t v45 = v65;
    uint64_t v46 = v66;
    uint64_t v47 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v42 + *(int *)(v63 + 28), v67);
    uint64_t v48 = sub_1000127BC(v42, v38);
    uint64_t v49 = URL.lastPathComponent.getter(v48);
    uint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    if (v49 == v71 && v51 == v68)
    {
      swift_bridgeObjectRelease(v68);
      sub_100012824((uint64_t)v74, (uint64_t *)&unk_10015ABC0);
      uint64_t v16 = v60;
      uint64_t v52 = *(void (**)(char *, uint64_t))(v60 + 8);
      uint64_t v10 = v43;
      v52(v43, v15);
      uint64_t v14 = v61;
      sub_1000127BC((uint64_t)v61, v38);
      uint64_t v19 = v59;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v59, v15);
      unint64_t v24 = v72;
      int64_t v20 = v73;
      goto LABEL_24;
    }

    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v71, v68, 0LL);
    swift_bridgeObjectRelease(v51);
    sub_100012824((uint64_t)v74, (uint64_t *)&unk_10015ABC0);
    uint64_t v16 = v60;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v10 = v43;
    v27(v43, v15);
    uint64_t v14 = v61;
    sub_1000127BC((uint64_t)v61, v38);
    uint64_t v19 = v59;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v59, v15);
    unint64_t v24 = v72;
    int64_t v20 = v73;
    if ((v26 & 1) != 0)
    {
LABEL_24:
      *(unint64_t *)((char *)v55 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v70;
      if (__OFADD__(v56++, 1LL))
      {
        __break(1u);
        return sub_10000DFA0(v55, v54, v56, v69);
      }
    }
  }

  int64_t v29 = v20 + 1;
  if (__OFADD__(v20, 1LL))
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v29 >= v58) {
    return sub_10000DFA0(v55, v54, v56, v69);
  }
  unint64_t v30 = *(void *)(v57 + 8 * v29);
  int64_t v31 = v20 + 1;
  if (v30) {
    goto LABEL_20;
  }
  int64_t v31 = v20 + 2;
  if (v20 + 2 >= v58) {
    return sub_10000DFA0(v55, v54, v56, v69);
  }
  unint64_t v30 = *(void *)(v57 + 8 * v31);
  if (v30) {
    goto LABEL_20;
  }
  int64_t v31 = v20 + 3;
  if (v20 + 3 >= v58) {
    return sub_10000DFA0(v55, v54, v56, v69);
  }
  unint64_t v30 = *(void *)(v57 + 8 * v31);
  if (v30)
  {
LABEL_20:
    uint64_t v72 = (v30 - 1) & v30;
    int64_t v73 = v31;
    unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
    goto LABEL_21;
  }

  uint64_t v32 = v20 + 4;
  if (v20 + 4 >= v58) {
    return sub_10000DFA0(v55, v54, v56, v69);
  }
  unint64_t v30 = *(void *)(v57 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v20 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v31 >= v58) {
      return sub_10000DFA0(v55, v54, v56, v69);
    }
    unint64_t v30 = *(void *)(v57 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_20;
    }
  }

uint64_t sub_1000474B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2LL);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_100047004((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a1, a2, a3);
    uint64_t v13 = swift_bridgeObjectRelease(a3);
    if (v3) {
      swift_willThrow(v13);
    }
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  else
  {
    uint64_t v14 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_100047004((unint64_t *)v14, v9, a1, a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  return v12;
}

uint64_t sub_100047678(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = v4;
  v446 = a4;
  v485 = a3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v8);
  v445 = (char *)&v436 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ApplicationRecord(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v436 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v444 = (uint64_t)&v436 - v15;
  __chkstk_darwin(v14);
  uint64_t v458 = (uint64_t)&v436 - v16;
  uint64_t v510 = type metadata accessor for Logger(0LL);
  uint64_t v478 = *(void *)(v510 - 8);
  uint64_t v17 = __chkstk_darwin(v510);
  v456 = (char *)&v436 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v477 = (char *)&v436 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v486 = (char *)&v436 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v441 = (char *)&v436 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v471 = (char *)&v436 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v476 = (char *)&v436 - v28;
  __chkstk_darwin(v27);
  v481 = (char *)&v436 - v29;
  uint64_t v483 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v479 = *(void *)(v483 - 8);
  __chkstk_darwin(v483);
  uint64_t v467 = (uint64_t)&v436 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100005FB4(&qword_100157ED8);
  __chkstk_darwin(v31);
  v489 = (char *)&v436 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v466 = sub_100005FB4(&qword_100157EE0);
  __chkstk_darwin(v466);
  v465 = (char *)&v436 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v470 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v34 = __chkstk_darwin(v470);
  uint64_t v440 = (uint64_t)&v436 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v447 = (uint64_t)&v436 - v37;
  __chkstk_darwin(v36);
  uint64_t v472 = (uint64_t)&v436 - v38;
  uint64_t v502 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v502 - 8);
  uint64_t v40 = __chkstk_darwin(v502);
  uint64_t v443 = (char *)&v436 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v493 = (uint64_t)&v436 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v436 - v45;
  __chkstk_darwin(v44);
  v473 = (char *)&v436 - v47;
  uint64_t v504 = type metadata accessor for URL(0LL);
  uint64_t v495 = *(void *)(v504 - 8);
  uint64_t v48 = __chkstk_darwin(v504);
  v452 = (char *)&v436 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = __chkstk_darwin(v48);
  v469 = (char *)&v436 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  unint64_t v442 = (char *)&v436 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v454 = (char *)&v436 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  v457 = (char *)&v436 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v503 = (char *)&v436 - v59;
  __chkstk_darwin(v58);
  v482 = (char *)&v436 - v60;
  uint64_t v513 = a1;
  swift_bridgeObjectRetain(a2);
  uint64_t v61 = 0LL;
  uint64_t v62 = sub_10000D150((uint64_t)sub_10004B1C4, (uint64_t)v512, a2);
  swift_bridgeObjectRelease(a2);
  uint64_t v484 = v10;
  uint64_t v63 = *(int *)(v10 + 24);
  uint64_t v491 = a1;
  uint64_t v64 = *(void *)(a1 + v63);
  uint64_t v65 = *(void *)(v64 + 16);
  if (v65)
  {
    v487 = (void *)(v5 + 16);
    uint64_t v475 = v5 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
    v488 = &v517;
    __n128 v66 = swift_bridgeObjectRetain(v64);
    uint64_t v439 = v67;
    uint64_t v68 = (unint64_t *)(v67 + 40);
    v464 = (void *)0x80000001001235A0LL;
    v66.n128_u64[0] = 136315138LL;
    __n128 v462 = v66;
    v461 = (char *)&type metadata for Any + 8;
    v66.n128_u64[0] = 136315650LL;
    __n128 v460 = v66;
    __int128 v438 = (void *)0x8000000100123600LL;
    uint64_t v69 = type metadata accessor for DriverBinEntry;
    uint64_t v437 = (void *)0x8000000100123620LL;
    v448 = (void *)0x80000001001235D0LL;
    v66.n128_u64[0] = 136315906LL;
    __n128 v450 = v66;
    v66.n128_u64[0] = 136315394LL;
    __n128 v463 = v66;
    uint64_t v449 = 0x8000000100123670LL;
    v453 = (void *)0x8000000100123640LL;
    uint64_t v494 = v5;
    v474 = v13;
    uint64_t v70 = v483;
    uint64_t v500 = v39;
    uint64_t v480 = v62;
    uint64_t v71 = v481;
    v459 = v46;
    while (1)
    {
      uint64_t v74 = v69;
      uint64_t v497 = v65;
      uint64_t v76 = *(v68 - 1);
      unint64_t v75 = *v68;
      swift_bridgeObjectRetain(*v68);
      uint64_t v77 = v482;
      uint64_t v492 = v76;
      unint64_t v499 = v75;
      uint64_t v78 = URL.init(fileURLWithPath:)(v76, v75);
      uint64_t v79 = URL.lastPathComponent.getter(v78);
      uint64_t v81 = v80;
      v501 = *(void (**)(char *, uint64_t))(v495 + 8);
      v501(v77, v504);
      swift_bridgeObjectRetain(v81);
      uint64_t v82 = v480;
      uint64_t v83 = swift_retain(v480);
      uint64_t v498 = v79;
      uint64_t v84 = sub_1000474B8(v83, v79, v81);
      swift_release(v82);
      v505 = (void *)v81;
      swift_bridgeObjectRelease(v81);
      uint64_t v85 = sub_100010D14(v84);
      if ((v87 & 1) != 0) {
        goto LABEL_72;
      }
      int v88 = v86;
      if (*(_DWORD *)(v84 + 36) != v86)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
      }

      uint64_t v89 = 1LL;
      if (v85 != 1LL << *(_BYTE *)(v84 + 32))
      {
        uint64_t v90 = v467;
        uint64_t v91 = v467 + *(int *)(v70 + 48);
        sub_100010C44(v467, v91, v85, v88, 0LL, v84);
        uint64_t v92 = v489;
        (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v489, v90, v502);
        sub_100012734(v91, (uint64_t)&v92[*(int *)(v70 + 48)], v74);
        sub_100012824(v90, (uint64_t *)&unk_10015ABC0);
        uint64_t v89 = 0LL;
      }

      v496 = v68;
      uint64_t v93 = v479;
      uint64_t v94 = (uint64_t)v489;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v479 + 56))(v489, v89, 1LL, v70);
      swift_release(v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v94, 1LL, v70) == 1)
      {
        sub_100012824(v94, &qword_100157ED8);
        v520[0] = 0LL;
        v520[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(55LL);
        v95._uint64_t countAndFlagsBits = 0xD000000000000026LL;
        v95._uint64_t object = v464;
        String.append(_:)(v95);
        uint64_t v96 = sub_100012860(&qword_100158FD8, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F494);
        v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v484, v96);
        uint64_t object = v97._object;
        String.append(_:)(v97);
        swift_bridgeObjectRelease(object);
        v99._uint64_t countAndFlagsBits = 0x7264206874697720LL;
        v99._uint64_t object = (void *)0xED00002072657669LL;
        String.append(_:)(v99);
        v100._uint64_t countAndFlagsBits = v498;
        v100._uint64_t object = v505;
        String.append(_:)(v100);
        uint64_t v101 = v520[0];
        uint64_t v102 = v520[1];
        unint64_t v103 = sub_100012624();
        uint64_t v104 = swift_allocError(&type metadata for KMError, v103, 0LL, 0LL);
        *(void *)uint64_t v105 = v101;
        *(void *)(v105 + 8) = v102;
        *(_OWORD *)(v105 + 16) = 0u;
        *(_OWORD *)(v105 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v105 + 48) = 0u;
        *(void *)(v105 + 64) = 0LL;
        *(_BYTE *)(v105 + 7sub_100006034(v0 + 2) = 50;
        swift_willThrow(v104);
        goto LABEL_28;
      }

      uint64_t v509 = v61;
      uint64_t v106 = v94;
      uint64_t v107 = v94 + *(int *)(v70 + 48);
      uint64_t v108 = v466;
      unint64_t v109 = v465;
      uint64_t v110 = (uint64_t)&v465[*(int *)(v466 + 48)];
      uint64_t v111 = v500;
      __int128 v112 = *(void (**)(char *, uint64_t, uint64_t))(v500 + 32);
      uint64_t v113 = v502;
      v112(v465, v106, v502);
      sub_100012778(v107, v110, v74);
      uint64_t v114 = (uint64_t)&v109[*(int *)(v108 + 48)];
      uint64_t v115 = (uint64_t)v473;
      v112(v473, (uint64_t)v109, v113);
      uint64_t v116 = v472;
      sub_100012778(v114, v472, v74);
      if ((static UUID.== infix(_:_:)(v116, v115) & 1) == 0)
      {
        v520[0] = 0LL;
        v520[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(48LL);
        swift_bridgeObjectRelease(v520[1]);
        strcpy((char *)v520, "Bin entry ");
        BYTE3(v520[1]) = 0;
        HIDWORD(v520[1]) = -369098752;
        uint64_t v135 = sub_100012860(&qword_100157E98, v74, (uint64_t)&unk_1001106A8);
        v136._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v470, v135);
        os_log_type_t v137 = v136._object;
        String.append(_:)(v136);
        swift_bridgeObjectRelease(v137);
        v138._uint64_t countAndFlagsBits = 0xD000000000000022LL;
        v138._uint64_t object = v453;
        String.append(_:)(v138);
        uint64_t v139 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v140._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v113, v139);
        uint64_t v141 = v140._object;
        String.append(_:)(v140);
        swift_bridgeObjectRelease(v141);
        uint64_t v142 = v520[0];
        uint64_t v143 = v520[1];
        unint64_t v144 = sub_100012624();
        uint64_t v104 = swift_allocError(&type metadata for KMError, v144, 0LL, 0LL);
        *(void *)uint64_t v145 = v142;
        *(void *)(v145 + 8) = v143;
        *(_OWORD *)(v145 + 16) = 0u;
        *(_OWORD *)(v145 + 3sub_100006034(v0 + 2) = 0u;
        *(_OWORD *)(v145 + 48) = 0u;
        *(void *)(v145 + 64) = 0LL;
        *(_BYTE *)(v145 + 7sub_100006034(v0 + 2) = 50;
        swift_willThrow(v104);
        sub_1000127BC(v116, v74);
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v113);
        goto LABEL_28;
      }

      char v117 = sub_10003B5F8(v115, *v485);
      unint64_t v118 = v459;
      if ((v117 & 1) != 0)
      {
        swift_bridgeObjectRelease(v505);
        uint64_t v119 = sub_1000D3274();
        uint64_t v120 = v478;
        (*(void (**)(char *, uint64_t, uint64_t))(v478 + 16))(v71, v119, v510);
        uint64_t v121 = v500;
        uint64_t v122 = v502;
        (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v118, v115, v502);
        unint64_t v123 = v499;
        swift_bridgeObjectRetain(v499);
        uint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
        os_log_type_t v126 = static os_log_type_t.default.getter(v125);
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v127 = swift_slowAlloc(22LL, -1LL);
          uint64_t v128 = swift_slowAlloc(64LL, -1LL);
          v520[0] = v128;
          *(_DWORD *)uint64_t v127 = v463.n128_u32[0];
          swift_bridgeObjectRetain(v123);
          *(void *)(v127 + 4) = sub_1000058CC(v492, v123, v520);
          swift_bridgeObjectRelease_n(v123, 3LL);
          *(_WORD *)(v127 + 1sub_100006034(v0 + 2) = 2080;
          uint64_t v129 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v130 = dispatch thunk of CustomStringConvertible.description.getter(v122, v129);
          unint64_t v132 = v131;
          *(void *)(v127 + 14) = sub_1000058CC(v130, v131, v520);
          swift_bridgeObjectRelease(v132);
          uint64_t v133 = *(void (**)(char *, uint64_t))(v121 + 8);
          v133(v459, v122);
          _os_log_impl( (void *)&_mh_execute_header,  v125,  v126,  "Skipping bundle at %s, already inserted into new bin with UUID %s",  (uint8_t *)v127,  0x16u);
          swift_arrayDestroy(v128, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1LL, -1LL);
          swift_slowDealloc(v127, -1LL, -1LL);

          uint64_t v71 = v481;
          (*(void (**)(char *, uint64_t))(v120 + 8))(v481, v510);
          uint64_t v134 = v472;
        }

        else
        {

          uint64_t v133 = *(void (**)(char *, uint64_t))(v121 + 8);
          v133(v118, v122);
          swift_bridgeObjectRelease_n(v123, 2LL);
          uint64_t v71 = v481;
          (*(void (**)(char *, uint64_t))(v120 + 8))(v481, v510);
          uint64_t v134 = v116;
        }

        uint64_t v69 = v74;
        sub_1000127BC(v134, v74);
        v133(v473, v122);
      }

      else
      {
        LOBYTE(v516) = 0;
        uint64_t v146 = *(void *)(v494 + 40);
        uint64_t v147 = *(void *)(v494 + 48);
        unint64_t v148 = v487;
        sub_100005110(v487, v146);
        sub_1001073DC(v146, v147);
        uint64_t v149 = v522;
        uint64_t v150 = sub_100005110(v520, v521);
        uint64_t v151 = URL.path.getter(v150);
        uint64_t v153 = v152;
        LOBYTE(v146) = (*(uint64_t (**)(uint64_t))(v149 + 136))(v151);
        swift_bridgeObjectRelease(v153);
        if ((v146 & 1) == 0)
        {
          sub_100006034(v520);
          uint64_t v155 = v500;
LABEL_26:
          v520[0] = 0LL;
          v520[1] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(42LL);
          uint64_t v166 = swift_bridgeObjectRelease(v520[1]);
          v520[0] = 0xD000000000000012LL;
          v520[1] = v449;
          v167._uint64_t countAndFlagsBits = URL.path.getter(v166);
          __int128 v168 = v167._object;
          String.append(_:)(v167);
          swift_bridgeObjectRelease(v168);
          v169._uint64_t countAndFlagsBits = 0x20726F6620LL;
          v169._uint64_t object = (void *)0xE500000000000000LL;
          String.append(_:)(v169);
          uint64_t v170 = v472;
          __int128 v171 = (uint64_t *)(v472 + *(int *)(v470 + 20));
          uint64_t v172 = *v171;
          uint64_t v173 = (void *)v171[1];
          swift_bridgeObjectRetain(v173);
          v174._uint64_t countAndFlagsBits = v172;
          v174._uint64_t object = v173;
          String.append(_:)(v174);
          swift_bridgeObjectRelease(v173);
          v175._uint64_t countAndFlagsBits = 0x6F6E2073656F6420LL;
          v175._uint64_t object = (void *)0xEF74736978652074LL;
          String.append(_:)(v175);
          uint64_t v176 = v520[0];
          uint64_t v177 = v520[1];
          unint64_t v178 = sub_100012624();
          uint64_t v104 = swift_allocError(&type metadata for KMError, v178, 0LL, 0LL);
          *(void *)uint64_t v179 = v176;
          *(void *)(v179 + 8) = v177;
          *(_OWORD *)(v179 + 16) = 0u;
          *(_OWORD *)(v179 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v179 + 48) = 0u;
          *(void *)(v179 + 64) = 0LL;
          *(_BYTE *)(v179 + 7sub_100006034(v0 + 2) = 19;
          swift_willThrow(v104);
          sub_1000127BC(v170, type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v473, v502);
          goto LABEL_28;
        }

        char v154 = v516;
        sub_100006034(v520);
        uint64_t v155 = v500;
        if ((v154 & 1) == 0) {
          goto LABEL_26;
        }
        uint64_t v156 = *(void *)(v494 + 40);
        uint64_t v157 = *(void *)(v494 + 48);
        sub_100005110(v148, v156);
        sub_1001073DC(v156, v157);
        uint64_t v158 = v522;
        uint64_t v159 = sub_100005110(v520, v521);
        uint64_t v160 = URL.path.getter(v159);
        uint64_t v162 = v161;
        LOBYTE(v156) = (*(uint64_t (**)(uint64_t))(v158 + 136))(v160);
        swift_bridgeObjectRelease(v162);
        if ((v156 & 1) == 0)
        {
          sub_100006034(v520);
          uint64_t v164 = v500;
LABEL_61:
          v520[0] = 0LL;
          v520[1] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(38LL);
          uint64_t v406 = swift_bridgeObjectRelease(v520[1]);
          strcpy((char *)v520, "Staged bundle ");
          HIBYTE(v520[1]) = -18;
          v407._uint64_t countAndFlagsBits = URL.path.getter(v406);
          __int128 v408 = v407._object;
          String.append(_:)(v407);
          swift_bridgeObjectRelease(v408);
          v409._uint64_t countAndFlagsBits = 0x20726F6620LL;
          v409._uint64_t object = (void *)0xE500000000000000LL;
          String.append(_:)(v409);
          uint64_t v410 = v472;
          uint64_t v411 = (uint64_t *)(v472 + *(int *)(v470 + 20));
          uint64_t v412 = *v411;
          uint64_t v413 = (void *)v411[1];
          swift_bridgeObjectRetain(v413);
          v414._uint64_t countAndFlagsBits = v412;
          v414._uint64_t object = v413;
          String.append(_:)(v414);
          swift_bridgeObjectRelease(v413);
          v415._uint64_t countAndFlagsBits = 0x6F6E2073656F6420LL;
          v415._uint64_t object = (void *)0xEF74736978652074LL;
          String.append(_:)(v415);
          uint64_t v416 = v520[0];
          uint64_t v417 = v520[1];
          unint64_t v418 = sub_100012624();
          uint64_t v104 = swift_allocError(&type metadata for KMError, v418, 0LL, 0LL);
          *(void *)uint64_t v419 = v416;
          *(void *)(v419 + 8) = v417;
          *(_OWORD *)(v419 + 16) = 0u;
          *(_OWORD *)(v419 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v419 + 48) = 0u;
          *(void *)(v419 + 64) = 0LL;
          *(_BYTE *)(v419 + 7sub_100006034(v0 + 2) = 19;
          swift_willThrow(v104);
          sub_1000127BC(v410, type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, uint64_t))(v164 + 8))(v473, v502);
LABEL_28:
          uint64_t v509 = 0LL;
          uint64_t v180 = v494;
          uint64_t v181 = sub_1000D3274();
          uint64_t v182 = v478;
          uint64_t v183 = *(void (**)(char *, uint64_t, uint64_t))(v478 + 16);
          uint64_t v184 = v476;
          uint64_t v506 = v181;
          v507 = v183;
          ((void (*)(char *))v183)(v476);
          swift_errorRetain(v104);
          uint64_t v185 = swift_errorRetain(v104);
          uint64_t v186 = (os_log_s *)Logger.logObject.getter(v185);
          os_log_type_t v187 = static os_log_type_t.error.getter(v186);
          BOOL v188 = os_log_type_enabled(v186, v187);
          uint64_t v490 = v104;
          if (v188)
          {
            uint64_t v189 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v190 = swift_slowAlloc(32LL, -1LL);
            v520[0] = v190;
            *(_DWORD *)uint64_t v189 = v462.n128_u32[0];
            uint64_t v191 = v182;
            uint64_t v192 = v184;
            uint64_t v193 = v191;
            uint64_t v516 = v104;
            swift_errorRetain(v104);
            uint64_t v194 = sub_100005FB4(&qword_10015AB20);
            uint64_t v195 = String.init<A>(describing:)(&v516, v194);
            unint64_t v197 = v196;
            uint64_t v516 = sub_1000058CC(v195, v196, v520);
            uint64_t v180 = v494;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v189 + 4, v189 + 12);
            swift_bridgeObjectRelease(v197);
            swift_errorRelease(v104);
            swift_errorRelease(v104);
            _os_log_impl( (void *)&_mh_execute_header,  v186,  v187,  "Failed to reuse existing bin entry: %s. Creating new bin entry",  v189,  0xCu);
            swift_arrayDestroy(v190, 1LL, v461);
            uint64_t v198 = v510;
            swift_slowDealloc(v190, -1LL, -1LL);
            swift_slowDealloc(v189, -1LL, -1LL);

            uint64_t v199 = *(uint64_t (**)(char *, uint64_t))(v193 + 8);
            uint64_t v200 = v192;
            uint64_t v201 = v198;
            uint64_t v202 = v198;
          }

          else
          {
            swift_errorRelease(v104);
            swift_errorRelease(v104);

            uint64_t v199 = *(uint64_t (**)(char *, uint64_t))(v182 + 8);
            uint64_t v200 = v184;
            uint64_t v202 = v510;
            uint64_t v201 = v510;
          }

          v508 = v199;
          v199(v200, v202);
          uint64_t v203 = v477;
          uint64_t v204 = v504;
          char v205 = v503;
          uint64_t v206 = sub_10003B528(*v485, v493);
          uint64_t v207 = UUID.uuidString.getter(v206);
          uint64_t v209 = v208;
          URL.appendingPathComponent(_:isDirectory:)(v207, v208, 1LL);
          swift_bridgeObjectRelease(v209);
          uint64_t v210 = *(void *)(v180 + 40);
          uint64_t v211 = *(void *)(v180 + 48);
          sub_100005110(v487, v210);
          sub_1001073DC(v210, v211);
          uint64_t v212 = v521;
          uint64_t v213 = v522;
          sub_100005110(v520, v521);
          unint64_t v214 = sub_10001BD10((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v215 = v509;
          (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v213 + 48))( v205,  1LL,  v214,  v212,  v213);
          uint64_t v509 = v215;
          unint64_t v216 = v499;
          if (v215)
          {
            swift_bridgeObjectRelease(v214);
            swift_bridgeObjectRelease(v216);
            uint64_t v217 = sub_100006034(v520);
            int v218 = errno.getter(v217);
            uint64_t v219 = strerror(v218);
            if (!v219) {
              goto LABEL_73;
            }
            uint64_t v220 = String.init(cString:)(v219);
            unint64_t v222 = v221;
            os_log_type_t v223 = v203;
            v507(v203, v506, v201);
            uint64_t v224 = v469;
            (*(void (**)(char *, char *, uint64_t))(v495 + 16))(v469, v205, v204);
            uint64_t v225 = v509;
            swift_errorRetain(v509);
            swift_errorRetain(v225);
            swift_bridgeObjectRetain(v222);
            uint64_t v227 = (os_log_s *)Logger.logObject.getter(v226);
            os_log_type_t v228 = static os_log_type_t.error.getter(v227);
            if (os_log_type_enabled(v227, v228))
            {
              uint64_t v229 = swift_slowAlloc(32LL, -1LL);
              uint64_t v230 = swift_slowAlloc(96LL, -1LL);
              unint64_t v499 = v230;
              v520[0] = v230;
              *(_DWORD *)uint64_t v229 = v460.n128_u32[0];
              uint64_t v492 = v220;
              uint64_t v231 = URL.path.getter(v230);
              unint64_t v233 = v232;
              uint64_t v516 = sub_1000058CC(v231, v232, v520);
              uint64_t v234 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v229 + 4, v229 + 12);
              swift_bridgeObjectRelease(v233);
              unint64_t v235 = v501;
              v501(v224, v204);
              *(_WORD *)(v229 + 1sub_100006034(v0 + 2) = 2080;
              uint64_t v516 = v509;
              swift_errorRetain(v509);
              uint64_t v236 = sub_100005FB4(&qword_10015AB20);
              uint64_t v237 = String.init<A>(describing:)(&v516, v236);
              unint64_t v239 = v238;
              uint64_t v516 = sub_1000058CC(v237, v238, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v234, v229 + 14, v229 + 22);
              swift_bridgeObjectRelease(v239);
              swift_errorRelease(v509);
              swift_errorRelease(v509);
              *(_WORD *)(v229 + 2sub_100006034(v0 + 2) = 2080;
              swift_bridgeObjectRetain(v222);
              uint64_t v516 = sub_1000058CC(v492, v222, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v234, v229 + 24, v229 + 32);
              swift_bridgeObjectRelease_n(v222, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v227,  v228,  "Could not create directory %s: %s (errno %s)",  (uint8_t *)v229,  0x20u);
              unint64_t v240 = v499;
              swift_arrayDestroy(v499, 3LL, (char *)&type metadata for Any + 8);
              uint64_t v225 = v509;
              swift_slowDealloc(v240, -1LL, -1LL);
              swift_slowDealloc(v229, -1LL, -1LL);

              uint64_t v241 = v223;
              uint64_t v242 = v510;
            }

            else
            {
              unint64_t v235 = v501;
              v501(v224, v204);
              swift_errorRelease(v225);
              swift_errorRelease(v225);

              swift_bridgeObjectRelease_n(v222, 2LL);
              uint64_t v241 = v223;
              uint64_t v242 = v201;
            }

            uint64_t v266 = v508(v241, v242);
            uint64_t v267 = (uint64_t)v474;
            uint64_t v268 = v500;
            uint64_t v269 = v204;
            unint64_t v270 = (unint64_t)v505;
            swift_willThrow(v266);
            v235(v503, v269);
            (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v493, v502);
            uint64_t v271 = v486;
            goto LABEL_58;
          }

          swift_bridgeObjectRelease(v214);
          sub_100006034(v520);
          uint64_t v243 = v201;
          v507(v471, v506, v201);
          uint64_t v244 = v458;
          sub_100012734(v491, v458, type metadata accessor for ApplicationRecord);
          uint64_t v245 = *(void (**)(char *, char *, uint64_t))(v495 + 16);
          unint64_t v246 = v457;
          v245(v457, v205, v204);
          uint64_t v247 = swift_bridgeObjectRetain_n(v216, 2LL);
          uint64_t v248 = (os_log_s *)Logger.logObject.getter(v247);
          os_log_type_t v249 = static os_log_type_t.default.getter(v248);
          int v250 = v249;
          BOOL v251 = os_log_type_enabled(v248, v249);
          v468 = v245;
          if (v251)
          {
            unint64_t v252 = v246;
            uint64_t v253 = swift_slowAlloc(32LL, -1LL);
            uint64_t v254 = swift_slowAlloc(96LL, -1LL);
            v520[0] = v254;
            *(_DWORD *)uint64_t v253 = v460.n128_u32[0];
            LODWORD(v455) = v250;
            uint64_t v255 = sub_100013B60(*(void *)(v244 + *(int *)(v484 + 32)), *(void *)(v244 + *(int *)(v484 + 32) + 8));
            uint64_t v256 = v244;
            unint64_t v258 = v257;
            uint64_t v516 = sub_1000058CC(v255, v257, v520);
            unint64_t v259 = v216;
            unint64_t v260 = v488;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v253 + 4, v253 + 12);
            swift_bridgeObjectRelease(v258);
            sub_1000127BC(v256, type metadata accessor for ApplicationRecord);
            *(_WORD *)(v253 + 1sub_100006034(v0 + 2) = 2080;
            swift_bridgeObjectRetain(v259);
            uint64_t v516 = sub_1000058CC(v492, v259, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v260, v253 + 14, v253 + 22);
            uint64_t v261 = swift_bridgeObjectRelease_n(v259, 3LL);
            *(_WORD *)(v253 + 2sub_100006034(v0 + 2) = 2080;
            uint64_t v262 = URL.path.getter(v261);
            unint64_t v264 = v263;
            uint64_t v516 = sub_1000058CC(v262, v263, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v260, v253 + 24, v253 + 32);
            swift_bridgeObjectRelease(v264);
            v501(v252, v204);
            _os_log_impl( (void *)&_mh_execute_header,  v248,  (os_log_type_t)v455,  "Attempting to copy out driver extension:\n installIdentifier: %s\n from: %s\n to: %s",  (uint8_t *)v253,  0x20u);
            swift_arrayDestroy(v254, 3LL, (char *)&type metadata for Any + 8);
            uint64_t v265 = v494;
            swift_slowDealloc(v254, -1LL, -1LL);
            swift_slowDealloc(v253, -1LL, -1LL);

            v508(v471, v510);
          }

          else
          {
            sub_1000127BC(v244, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRelease_n(v216, 2LL);
            v501(v246, v204);

            v508(v471, v243);
            uint64_t v265 = v494;
            unint64_t v259 = v216;
          }

          uint64_t v272 = *(void *)(v265 + 40);
          uint64_t v273 = *(void *)(v265 + 48);
          unint64_t v274 = v487;
          sub_100005110(v487, v272);
          sub_1001073DC(v272, v273);
          uint64_t v275 = v521;
          uint64_t v276 = v522;
          uint64_t v277 = sub_100005110(v520, v521);
          uint64_t v278 = URL.path.getter(v277);
          uint64_t v280 = v279;
          uint64_t v281 = sub_1001056F0();
          uint64_t v282 = v275;
          uint64_t v283 = v509;
          sub_1001056FC(v492, v259, v278, v280, v281, v282, v276);
          uint64_t v509 = v283;
          if (v283)
          {
            swift_bridgeObjectRelease(v280);
            uint64_t v284 = sub_100006034(v520);
            int v285 = errno.getter(v284);
            uint64_t v286 = strerror(v285);
            uint64_t v287 = v501;
            if (!v286) {
              goto LABEL_74;
            }
            uint64_t v455 = String.init(cString:)(v286);
            unint64_t v289 = v288;
            uint64_t v290 = v456;
            uint64_t v291 = v510;
            v507(v456, v506, v510);
            uint64_t v292 = v452;
            uint64_t v293 = v504;
            v468(v452, v503, v504);
            uint64_t v294 = v509;
            swift_errorRetain(v509);
            unint64_t v295 = v499;
            swift_bridgeObjectRetain(v499);
            swift_errorRetain(v294);
            swift_bridgeObjectRetain(v289);
            int v297 = (os_log_s *)Logger.logObject.getter(v296);
            os_log_type_t v298 = static os_log_type_t.error.getter(v297);
            LODWORD(v468) = v298;
            BOOL v299 = os_log_type_enabled(v297, v298);
            uint64_t v300 = v492;
            if (v299)
            {
              uint64_t v301 = swift_slowAlloc(42LL, -1LL);
              uint64_t v451 = swift_slowAlloc(128LL, -1LL);
              v520[0] = v451;
              *(_DWORD *)uint64_t v301 = v450.n128_u32[0];
              swift_bridgeObjectRetain(v295);
              uint64_t v516 = sub_1000058CC(v300, v295, v520);
              uint64_t v302 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v301 + 4, v301 + 12);
              uint64_t v303 = swift_bridgeObjectRelease_n(v295, 3LL);
              *(_WORD *)(v301 + 1sub_100006034(v0 + 2) = 2080;
              uint64_t v304 = URL.path.getter(v303);
              unint64_t v306 = v305;
              uint64_t v516 = sub_1000058CC(v304, v305, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 14, v301 + 22);
              swift_bridgeObjectRelease(v306);
              v287(v292, v293);
              *(_WORD *)(v301 + 2sub_100006034(v0 + 2) = 2080;
              uint64_t v516 = v294;
              swift_errorRetain(v294);
              uint64_t v307 = sub_100005FB4(&qword_10015AB20);
              uint64_t v308 = String.init<A>(describing:)(&v516, v307);
              unint64_t v310 = v309;
              uint64_t v516 = sub_1000058CC(v308, v309, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 24, v301 + 32);
              swift_bridgeObjectRelease(v310);
              swift_errorRelease(v294);
              swift_errorRelease(v294);
              *(_WORD *)(v301 + 3sub_100006034(v0 + 2) = 2080;
              swift_bridgeObjectRetain(v289);
              uint64_t v516 = sub_1000058CC(v455, v289, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 34, v301 + 42);
              swift_bridgeObjectRelease_n(v289, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v297,  (os_log_type_t)v468,  "Could not copyfile:\nfrom: %s\nto: %s\nerror: %s\nerrno: %s",  (uint8_t *)v301,  0x2Au);
              uint64_t v311 = v451;
              swift_arrayDestroy(v451, 4LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v311, -1LL, -1LL);
              swift_slowDealloc(v301, -1LL, -1LL);

              unint64_t v312 = v456;
              uint64_t v313 = v510;
            }

            else
            {
              swift_bridgeObjectRelease_n(v295, 2LL);
              v287(v292, v293);
              swift_errorRelease(v294);
              swift_errorRelease(v294);

              swift_bridgeObjectRelease_n(v289, 2LL);
              unint64_t v312 = v290;
              uint64_t v313 = v291;
            }

            uint64_t v381 = v508(v312, v313);
            uint64_t v267 = (uint64_t)v474;
            uint64_t v382 = v502;
            swift_willThrow(v381);
            v287(v503, v504);
            (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v382);
            uint64_t v225 = v294;
LABEL_57:
            unint64_t v270 = (unint64_t)v505;
            uint64_t v271 = v486;
LABEL_58:
            v507(v271, v506, v510);
            sub_100012734(v491, v267, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRetain(v270);
            uint64_t v394 = swift_errorRetain(v225);
            v395 = (os_log_s *)Logger.logObject.getter(v394);
            os_log_type_t v396 = static os_log_type_t.error.getter(v395);
            if (os_log_type_enabled(v395, v396))
            {
              uint64_t v397 = swift_slowAlloc(22LL, -1LL);
              uint64_t v398 = swift_slowAlloc(64LL, -1LL);
              uint64_t v509 = 0LL;
              uint64_t v399 = v398;
              v520[0] = v398;
              *(_DWORD *)uint64_t v397 = v463.n128_u32[0];
              swift_bridgeObjectRetain(v270);
              uint64_t v516 = sub_1000058CC(v498, v270, v520);
              uint64_t v400 = v225;
              uint64_t v401 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v397 + 4, v397 + 12);
              swift_bridgeObjectRelease_n(v270, 3LL);
              *(_WORD *)(v397 + 1sub_100006034(v0 + 2) = 2080;
              uint64_t v402 = sub_100012860( &qword_100158FD8,  type metadata accessor for ApplicationRecord,  (uint64_t)&unk_10010F494);
              uint64_t v403 = dispatch thunk of CustomStringConvertible.description.getter(v484, v402);
              unint64_t v405 = v404;
              uint64_t v516 = sub_1000058CC(v403, v404, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v401, v397 + 14, v397 + 22);
              swift_bridgeObjectRelease(v405);
              sub_1000127BC(v267, type metadata accessor for ApplicationRecord);
              _os_log_impl( (void *)&_mh_execute_header,  v395,  v396,  "Failed to stage driver %s from app %s",  (uint8_t *)v397,  0x16u);
              swift_arrayDestroy(v399, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v399, -1LL, -1LL);
              swift_slowDealloc(v397, -1LL, -1LL);
              swift_errorRelease(v400);

              swift_errorRelease(v400);
              swift_errorRelease(v490);
              v508(v486, v510);
              uint64_t v61 = v509;
            }

            else
            {
              swift_errorRelease(v490);
              swift_errorRelease(v225);
              swift_bridgeObjectRelease_n(v270, 2LL);
              sub_1000127BC(v267, type metadata accessor for ApplicationRecord);
              swift_errorRelease(v225);

              v508(v271, v510);
              uint64_t v61 = 0LL;
            }

            uint64_t v71 = v481;
            uint64_t v70 = v483;
            uint64_t v72 = v497;
            int64_t v73 = v496;
            uint64_t v69 = type metadata accessor for DriverBinEntry;
            goto LABEL_5;
          }

          swift_bridgeObjectRelease(v280);
          swift_bridgeObjectRelease(v259);
          sub_100006034(v520);
          URL.appendingPathComponent(_:isDirectory:)(v498, v505, 1LL);
          char v511 = 0;
          uint64_t v314 = *(void *)(v265 + 40);
          uint64_t v315 = *(void *)(v265 + 48);
          sub_100005110(v274, v314);
          sub_1001073DC(v314, v315);
          uint64_t v316 = v522;
          os_log_type_t v317 = sub_100005110(v520, v521);
          uint64_t v318 = URL.path.getter(v317);
          uint64_t v320 = v319;
          LOBYTE(v314) = (*(uint64_t (**)(uint64_t))(v316 + 136))(v318);
          swift_bridgeObjectRelease(v320);
          if ((v314 & 1) == 0)
          {
            sub_100006034(v520);
            uint64_t v322 = v502;
            uint64_t v323 = v501;
LABEL_56:
            v520[0] = 0LL;
            v520[1] = 0xE000000000000000LL;
            _StringGuts.grow(_:)(55LL);
            v383._uint64_t countAndFlagsBits = 0x2064657461657243LL;
            v383._uint64_t object = (void *)0xE800000000000000LL;
            String.append(_:)(v383);
            v384 = v454;
            v386._uint64_t countAndFlagsBits = URL.path.getter(v385);
            unint64_t v387 = v386._object;
            String.append(_:)(v386);
            swift_bridgeObjectRelease(v387);
            v388._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
            v388._uint64_t object = v448;
            String.append(_:)(v388);
            uint64_t v389 = v520[0];
            uint64_t v390 = v520[1];
            unint64_t v391 = sub_100012624();
            uint64_t v225 = swift_allocError(&type metadata for KMError, v391, 0LL, 0LL);
            *(void *)uint64_t v392 = v389;
            *(void *)(v392 + 8) = v390;
            *(_OWORD *)(v392 + 16) = 0u;
            *(_OWORD *)(v392 + 3sub_100006034(v0 + 2) = 0u;
            *(_OWORD *)(v392 + 48) = 0u;
            *(void *)(v392 + 64) = 0LL;
            *(_BYTE *)(v392 + 7sub_100006034(v0 + 2) = 19;
            swift_willThrow(v225);
            uint64_t v393 = v504;
            v323(v384, v504);
            v323(v503, v393);
            (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v322);
            uint64_t v267 = (uint64_t)v474;
            goto LABEL_57;
          }

          char v321 = v511;
          sub_100006034(v520);
          uint64_t v322 = v502;
          uint64_t v323 = v501;
          if ((v321 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v324 = (uint64_t)v443;
          uint64_t v325 = v504;
          (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v443, v493, v502);
          uint64_t v326 = v444;
          sub_100012734(v491, v444, type metadata accessor for ApplicationRecord);
          uint64_t v327 = (uint64_t)v482;
          v328 = (uint64_t (*)(char *, char *, uint64_t))v468;
          v468(v482, v503, v325);
          uint64_t v329 = (uint64_t)v442;
          uint64_t v330 = v328(v442, v454, v325);
          uint64_t v331 = (uint64_t)v445;
          static Date.now.getter(v330);
          uint64_t v332 = v447;
          sub_10003CEC0(v324, v326, v327, v329, v331, v447);
          sub_10003B648(v332);
          v520[0] = 0LL;
          v520[1] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(84LL);
          v333._uint64_t countAndFlagsBits = 0xD000000000000013LL;
          v333._uint64_t object = v438;
          String.append(_:)(v333);
          uint64_t v334 = sub_100012860(&qword_100158FD8, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F494);
          v335._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v484, v334);
          uint64_t v336 = v335._object;
          String.append(_:)(v335);
          swift_bridgeObjectRelease(v336);
          v337._uint64_t countAndFlagsBits = 0x7264206874697720LL;
          v337._uint64_t object = (void *)0xED00002072657669LL;
          String.append(_:)(v337);
          v338._uint64_t countAndFlagsBits = v498;
          Swift::String v339 = v505;
          v338._uint64_t object = v505;
          String.append(_:)(v338);
          swift_bridgeObjectRelease(v339);
          v340._uint64_t countAndFlagsBits = 544175136LL;
          v340._uint64_t object = (void *)0xE400000000000000LL;
          String.append(_:)(v340);
          uint64_t v341 = v470;
          uint64_t v342 = sub_100012860( &qword_100157C78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          v343._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v325, v342);
          unint64_t v344 = v343._object;
          String.append(_:)(v343);
          swift_bridgeObjectRelease(v344);
          v345._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
          v345._uint64_t object = v437;
          String.append(_:)(v345);
          uint64_t v346 = v332 + *(int *)(v341 + 28);
          v347._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v325, v342);
          unint64_t v348 = v347._object;
          String.append(_:)(v347);
          swift_bridgeObjectRelease(v348);
          v349._uint64_t countAndFlagsBits = 0x5520676E69737520LL;
          v349._uint64_t object = (void *)0xEC00000020444955LL;
          String.append(_:)(v349);
          uint64_t v350 = sub_100012860( &qword_100158ED0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v351._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v502, v350);
          unint64_t v352 = v351._object;
          String.append(_:)(v351);
          swift_bridgeObjectRelease(v352);
          uint64_t v353 = v520[0];
          uint64_t v354 = v520[1];
          uint64_t v355 = v446;
          uint64_t v356 = (void *)*v446;
          if ((swift_isUniquelyReferenced_nonNull_native(*v446) & 1) == 0) {
            uint64_t v356 = sub_10000C82C(0LL, v356[2] + 1LL, 1, v356);
          }
          uint64_t v69 = type metadata accessor for DriverBinEntry;
          uint64_t v61 = v509;
          unint64_t v358 = v356[2];
          unint64_t v357 = v356[3];
          if (v358 >= v357 >> 1) {
            uint64_t v356 = sub_10000C82C((void *)(v357 > 1), v358 + 1, 1, v356);
          }
          v356[2] = v358 + 1;
          uint64_t v359 = &v356[2 * v358];
          v359[4] = v353;
          v359[5] = v354;
          *uint64_t v355 = v356;
          uint64_t v360 = v494;
          uint64_t v361 = *(void *)(v494 + 40);
          uint64_t v362 = *(void *)(v494 + 48);
          sub_100005110(v487, v361);
          sub_10009C2CC(v361, v362);
          uint64_t v363 = v518;
          uint64_t v364 = v519;
          sub_100005110(&v516, v518);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v364 + 24))( &v514,  v346,  v363,  v364);
          if (v515)
          {
            sub_100005158(&v514, (uint64_t)v520);
            sub_100006034(&v516);
            uint64_t v365 = v521;
            uint64_t v366 = v522;
            sub_100005110(v520, v521);
            uint64_t v367 = (*(uint64_t (**)(uint64_t, uint64_t))(v366 + 24))(v365, v366);
            if (v368)
            {
              uint64_t v369 = v367;
              uint64_t v370 = v368;
              uint64_t v371 = *(void *)(v360 + 40);
              uint64_t v372 = *(void *)(v360 + 48);
              sub_100005110(v487, v371);
              sub_100005880(v371, v372);
              uint64_t v373 = v518;
              uint64_t v374 = v519;
              uint64_t v375 = sub_100005110(&v516, v518);
              uint64_t v376 = URL.path.getter(v375);
              uint64_t v378 = v377;
              sub_100016A60(v369, v370, v376, v377, v373, v374);
              swift_bridgeObjectRelease(v370);
              swift_bridgeObjectRelease(v378);
              swift_errorRelease(v490);
              sub_1000127BC(v447, type metadata accessor for DriverBinEntry);
              uint64_t v379 = v504;
              uint64_t v380 = v501;
              v501(v454, v504);
              v380(v503, v379);
              (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v502);
              sub_100006034(&v516);
              sub_100006034(v520);
LABEL_68:
              uint64_t v71 = v481;
              uint64_t v70 = v483;
              uint64_t v72 = v497;
              int64_t v73 = v496;
              goto LABEL_5;
            }

            v420 = v520;
          }

          else
          {
            sub_100012824((uint64_t)&v514, &qword_100157C58);
            v420 = &v516;
          }

          sub_100006034(v420);
          uint64_t v421 = v441;
          v507(v441, v506, v510);
          uint64_t v422 = v447;
          uint64_t v423 = v440;
          uint64_t v424 = sub_100012734(v447, v440, type metadata accessor for DriverBinEntry);
          __int128 v425 = (os_log_s *)Logger.logObject.getter(v424);
          os_log_type_t v426 = static os_log_type_t.error.getter(v425);
          if (os_log_type_enabled(v425, v426))
          {
            uint64_t v427 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v428 = swift_slowAlloc(32LL, -1LL);
            v520[0] = v428;
            *(_DWORD *)uint64_t v427 = v462.n128_u32[0];
            uint64_t v429 = URL.path.getter(v428);
            unint64_t v431 = v430;
            uint64_t v516 = sub_1000058CC(v429, v430, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v427 + 4, v427 + 12);
            swift_bridgeObjectRelease(v431);
            sub_1000127BC(v423, type metadata accessor for DriverBinEntry);
            _os_log_impl( (void *)&_mh_execute_header,  v425,  v426,  "Could not report driver install: could not resolve driver bundle at\n %s",  v427,  0xCu);
            swift_arrayDestroy(v428, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v428, -1LL, -1LL);
            swift_slowDealloc(v427, -1LL, -1LL);

            swift_errorRelease(v490);
            v508(v441, v510);
            uint64_t v432 = v447;
          }

          else
          {

            sub_1000127BC(v423, type metadata accessor for DriverBinEntry);
            swift_errorRelease(v490);
            v508(v421, v510);
            uint64_t v432 = v422;
          }

          sub_1000127BC(v432, type metadata accessor for DriverBinEntry);
          uint64_t v433 = v504;
          uint64_t v434 = v501;
          v501(v454, v504);
          v434(v503, v433);
          (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v502);
          goto LABEL_68;
        }

        char v163 = v516;
        sub_100006034(v520);
        uint64_t v164 = v500;
        if ((v163 & 1) == 0) {
          goto LABEL_61;
        }
        swift_bridgeObjectRelease(v505);
        swift_bridgeObjectRelease(v499);
        uint64_t v165 = v472;
        sub_10003B648(v472);
        uint64_t v69 = type metadata accessor for DriverBinEntry;
        sub_1000127BC(v165, type metadata accessor for DriverBinEntry);
        (*(void (**)(char *, uint64_t))(v164 + 8))(v473, v502);
      }

      uint64_t v70 = v483;
      uint64_t v72 = v497;
      int64_t v73 = v496;
      uint64_t v61 = v509;
LABEL_5:
      uint64_t v68 = v73 + 2;
      uint64_t v65 = v72 - 1;
      if (!v65)
      {
        swift_release(v480);
        return swift_bridgeObjectRelease(v439);
      }
    }
  }

  return swift_release(v62);
}

uint64_t sub_10004A29C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v59 = a2;
  uint64_t v60 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v79 = *(void **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v58 - v10;
  uint64_t v68 = sub_100005FB4((uint64_t *)&unk_10015ABC0);
  uint64_t v11 = __chkstk_darwin(v68);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v58 - v14;
  uint64_t v16 = type metadata accessor for DriverBinEntry(0LL);
  uint64_t v66 = *(void *)(v16 - 8);
  uint64_t v67 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v74 - 8);
  uint64_t result = __chkstk_darwin(v74);
  int64_t v73 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v22 = 0LL;
  uint64_t v69 = (void *)a3;
  uint64_t v23 = *(void *)(a3 + 64);
  uint64_t v61 = 0LL;
  uint64_t v62 = a3 + 64;
  uint64_t v24 = 1LL << *(_BYTE *)(a3 + 32);
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  else {
    uint64_t v25 = -1LL;
  }
  unint64_t v26 = v25 & v23;
  int64_t v63 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v64 = v19;
  uint64_t v77 = a4 + 7;
  uint64_t v78 = a4;
  unint64_t v75 = v15;
  uint64_t v76 = v13;
  uint64_t v65 = v18;
  while (1)
  {
    if (v26)
    {
      uint64_t v71 = (v26 - 1) & v26;
      int64_t v72 = v22;
      unint64_t v29 = __clz(__rbit64(v26)) | (v22 << 6);
      goto LABEL_22;
    }

    int64_t v30 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v30 >= v63) {
      return sub_10000DFA0(v60, v59, v61, v69);
    }
    unint64_t v31 = *(void *)(v62 + 8 * v30);
    int64_t v32 = v22 + 1;
    if (!v31)
    {
      int64_t v32 = v22 + 2;
      if (v22 + 2 >= v63) {
        return sub_10000DFA0(v60, v59, v61, v69);
      }
      unint64_t v31 = *(void *)(v62 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v22 + 3;
        if (v22 + 3 >= v63) {
          return sub_10000DFA0(v60, v59, v61, v69);
        }
        unint64_t v31 = *(void *)(v62 + 8 * v32);
        if (!v31) {
          break;
        }
      }
    }

uint64_t sub_10004A838(uint64_t a1, void *a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    swift_bridgeObjectRetain(a2);
    uint64_t v10 = sub_10004A29C((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, a1, a2);
    uint64_t v11 = swift_bridgeObjectRelease(a2);
    if (v2) {
      swift_willThrow(v11);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    uint64_t v12 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    uint64_t v10 = sub_10004A29C((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return v10;
}

uint64_t sub_10004A9EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  BOOL v57 = (char *)&v44 - v14;
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v44 - v16;
  int64_t v18 = 0LL;
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v49 = 0LL;
  uint64_t v50 = a3 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(a3 + 32);
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  else {
    uint64_t v21 = -1LL;
  }
  unint64_t v22 = v21 & v19;
  int64_t v51 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v55 = a5 + 7;
  uint64_t v56 = a5;
  uint64_t v47 = a4;
  uint64_t v48 = a3;
  uint64_t v46 = (char *)&v44 - v16;
  while (1)
  {
    if (v22)
    {
      int64_t v53 = v18;
      uint64_t v54 = (v22 - 1) & v22;
      unint64_t v24 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_23;
    }

    int64_t v25 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    if (v25 >= v51) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v50 + 8 * v25);
    int64_t v27 = v18 + 1;
    if (!v26)
    {
      int64_t v27 = v18 + 2;
      if (v18 + 2 >= v51) {
        goto LABEL_35;
      }
      unint64_t v26 = *(void *)(v50 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v18 + 3;
        if (v18 + 3 >= v51) {
          goto LABEL_35;
        }
        unint64_t v26 = *(void *)(v50 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_10004ADE8(uint64_t a1, uint64_t a2, void *a3)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  swift_retain_n(a2, 2LL);
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2LL);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_retain(a2);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_10004A9EC((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a1, a2, a3);
    swift_release(a1);
    swift_release(a2);
    uint64_t v13 = swift_bridgeObjectRelease(a3);
    if (v3) {
      swift_willThrow(v13);
    }
    swift_bridgeObjectRelease(a3);
    swift_release(a2);
  }

  else
  {
    uint64_t v14 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v14, v10);
    swift_retain(a2);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_10004A9EC((unint64_t *)v14, v9, a1, a2, a3);
    swift_release(a1);
    swift_release(a2);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_bridgeObjectRelease(a3);
    swift_release(a2);
  }

  swift_bridgeObjectRelease(a3);
  swift_release(a2);
  return v12;
}

unint64_t sub_10004B014()
{
  unint64_t result = qword_100158FD0;
  if (!qword_100158FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001105E0, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158FD0);
  }

  return result;
}

uint64_t sub_10004B058(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10004B064()
{
  return type metadata accessor for DriverBinManager(0LL);
}

uint64_t type metadata accessor for DriverBinManager(uint64_t a1)
{
  uint64_t result = qword_10015F700;
  if (!qword_10015F700) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DriverBinManager);
  }
  return result;
}

void sub_10004B0A8(uint64_t a1)
{
  v6[0] = "(";
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    void v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v6[3] = &unk_100110990;
    void v6[4] = &unk_100110990;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_10004B170(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      unint64_t v9 = &unk_1001109A8;
      swift_updateClassMetadata2(a1, 256LL, 10LL, v6, a1 + 80);
    }
  }

void sub_10004B170(uint64_t a1)
{
  if (!qword_1001589B0)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001589B0);
    }
  }

uint64_t sub_10004B1C4(uint64_t a1, uint64_t a2)
{
  return sub_100041DE4(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_10004B1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v129 = a3;
  int v139 = a7;
  uint64_t v131 = a1;
  uint64_t v132 = a2;
  uint64_t v8 = sub_100005FB4(&qword_1001588F8);
  uint64_t v9 = __chkstk_darwin(v8);
  os_log_type_t v126 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v128 = (uint64_t)&v114 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v114 - v13;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v125 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v127 = (char *)&v114 - v20;
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v114 - v21;
  uint64_t v23 = sub_100005FB4(&qword_1001591B0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v130 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v114 - v27;
  uint64_t v29 = (char *)&v114 + *(int *)(v26 + 48) - v27;
  int64_t v30 = (char *)&v114 + *(int *)(v26 + 64) - v27;
  uint64_t v134 = v16;
  char v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v31((char *)&v114 - v27, 1LL, 1LL, v15);
  uint64_t v133 = v29;
  v31(v29, 1LL, 1LL, v15);
  v31(v30, 1LL, 1LL, v15);
  int64_t v32 = (uint64_t *)sub_10008FAA8();
  uint64_t v33 = v32;
  if (!*(void *)(a4 + 16))
  {
    __int128 v137 = 0u;
    __int128 v138 = 0u;
LABEL_10:
    sub_100012824((uint64_t)&v137, &qword_100157FF8);
    goto LABEL_11;
  }

  uint64_t v124 = v22;
  uint64_t v34 = *v32;
  uint64_t v35 = v32[1];
  swift_bridgeObjectRetain(v35);
  unint64_t v36 = sub_100006114(v34, v35);
  if ((v37 & 1) != 0)
  {
    sub_100006054(*(void *)(a4 + 56) + 32 * v36, (uint64_t)&v137);
  }

  else
  {
    __int128 v137 = 0u;
    __int128 v138 = 0u;
  }

  swift_bridgeObjectRelease(v35);
  if (!*((void *)&v138 + 1)) {
    goto LABEL_10;
  }
  if ((swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t v122 = v30;
    unint64_t v123 = v28;
    uint64_t v38 = v135;
    unint64_t v39 = v136;
    sub_1000125E0(v135, v136);
    sub_1000D2728(v38, v39);
    uint64_t v40 = v134;
    uint64_t v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
    if (v121(v14, 1LL, v15) == 1)
    {
      sub_10001226C(v38, v39);
      sub_100012824((uint64_t)v14, &qword_1001588F8);
      uint64_t v28 = v123;
      goto LABEL_11;
    }

    uint64_t v120 = v38;
    unint64_t v119 = v39;
    unint64_t v52 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    int64_t v53 = v124;
    v52(v124, v14, v15);
    uint64_t v28 = v123;
    sub_100012824((uint64_t)v123, &qword_1001588F8);
    unint64_t v118 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v118(v28, v53, v15);
    v31(v28, 0LL, 1LL, v15);
    char v54 = v139;
    if (sub_1000265C0(v139, 1) || sub_1000265C0(v54, 2))
    {
      char v117 = (void (*)(char *, uint64_t, uint64_t))v52;
      uint64_t v55 = (uint64_t *)sub_10008FA90();
      uint64_t v56 = v55;
      uint64_t v57 = v120;
      if (*(void *)(a4 + 16))
      {
        uint64_t v58 = *v55;
        uint64_t v59 = v55[1];
        swift_bridgeObjectRetain(v59);
        unint64_t v60 = sub_100006114(v58, v59);
        if ((v61 & 1) != 0)
        {
          sub_100006054(*(void *)(a4 + 56) + 32 * v60, (uint64_t)&v137);
        }

        else
        {
          __int128 v137 = 0u;
          __int128 v138 = 0u;
        }

        swift_bridgeObjectRelease(v59);
        if (*((void *)&v138 + 1))
        {
          if ((swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
          {
LABEL_28:
            uint64_t v70 = sub_1000D42D4(v139);
            uint64_t v72 = v71;
            *(void *)&__int128 v137 = 0LL;
            *((void *)&v137 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease(*((void *)&v137 + 1));
            *(void *)&__int128 v137 = 0xD000000000000014LL;
            *((void *)&v137 + 1) = 0x8000000100122EB0LL;
            uint64_t v73 = *v56;
            uint64_t v74 = (void *)v56[1];
            swift_bridgeObjectRetain(v74);
            v75._uint64_t countAndFlagsBits = v73;
            v75._uint64_t object = v74;
            String.append(_:)(v75);
            swift_bridgeObjectRelease(v74);
            __int128 v76 = v137;
            unint64_t v77 = sub_100012624();
            uint64_t v78 = swift_allocError(&type metadata for KMError, v77, 0LL, 0LL);
            *(void *)uint64_t v79 = v70;
            *(void *)(v79 + 8) = v72;
            *(_OWORD *)(v79 + 16) = v76;
            *(_OWORD *)(v79 + 3sub_100006034(v0 + 2) = 0u;
            *(_OWORD *)(v79 + 48) = 0u;
            *(void *)(v79 + 64) = 0LL;
            *(_BYTE *)(v79 + 7sub_100006034(v0 + 2) = 6;
            swift_willThrow(v78);
            sub_10001226C(v57, v119);
            (*(void (**)(char *, uint64_t))(v134 + 8))(v124, v15);
            return sub_100012824((uint64_t)v28, &qword_1001591B0);
          }

          uint64_t v68 = v135;
          unint64_t v67 = v136;
          sub_1000125E0(v135, v136);
          uint64_t v69 = v128;
          sub_1000D2728(v68, v67);
          if (v121((char *)v69, 1LL, v15) == 1)
          {
            sub_10001226C(v68, v67);
            sub_100012824(v69, &qword_1001588F8);
            uint64_t v57 = v120;
            goto LABEL_28;
          }

          uint64_t v115 = v68;
          unint64_t v116 = v67;
          uint64_t v80 = v127;
          v117(v127, v69, v15);
          uint64_t v81 = (uint64_t)v133;
          sub_100012824((uint64_t)v133, &qword_1001588F8);
          v118((char *)v81, v80, v15);
          v31((char *)v81, 0LL, 1LL, v15);
          if (sub_1000265C0(v139, 2))
          {
            uint64_t v82 = (uint64_t *)sub_10008FA9C();
            uint64_t v63 = (uint64_t)v122;
            uint64_t v83 = v120;
            if (*(void *)(a4 + 16))
            {
              uint64_t v84 = v82;
              uint64_t v85 = *v82;
              uint64_t v86 = v82[1];
              swift_bridgeObjectRetain(v86);
              unint64_t v87 = sub_100006114(v85, v86);
              if ((v88 & 1) != 0)
              {
                sub_100006054(*(void *)(a4 + 56) + 32 * v87, (uint64_t)&v137);
              }

              else
              {
                __int128 v137 = 0u;
                __int128 v138 = 0u;
              }

              unint64_t v90 = v119;
              swift_bridgeObjectRelease(v86);
              if (*((void *)&v138 + 1))
              {
                char v91 = swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
                uint64_t v92 = v124;
                if ((v91 & 1) != 0)
                {
                  uint64_t v94 = v135;
                  unint64_t v93 = v136;
                  sub_1000125E0(v135, v136);
                  uint64_t v128 = v94;
                  uint64_t v95 = v94;
                  unint64_t v96 = v93;
                  uint64_t v97 = (uint64_t)v126;
                  sub_1000D2728(v95, v96);
                  if (v121((char *)v97, 1LL, v15) == 1)
                  {
                    sub_100012824(v97, &qword_1001588F8);
                    uint64_t v98 = v92;
                    uint64_t v99 = sub_1000D42D4(v139);
                    uint64_t v101 = v100;
                    *(void *)&__int128 v137 = 0LL;
                    *((void *)&v137 + 1) = 0xE000000000000000LL;
                    _StringGuts.grow(_:)(22LL);
                    swift_bridgeObjectRelease(*((void *)&v137 + 1));
                    *(void *)&__int128 v137 = 0xD000000000000014LL;
                    *((void *)&v137 + 1) = 0x8000000100122EB0LL;
                    uint64_t v102 = *v84;
                    unint64_t v103 = (void *)v84[1];
                    swift_bridgeObjectRetain(v103);
                    v104._uint64_t countAndFlagsBits = v102;
                    v104._uint64_t object = v103;
                    String.append(_:)(v104);
                    swift_bridgeObjectRelease(v103);
                    __int128 v105 = v137;
                    unint64_t v106 = sub_100012624();
                    uint64_t v107 = swift_allocError(&type metadata for KMError, v106, 0LL, 0LL);
                    *(void *)uint64_t v108 = v99;
                    *(void *)(v108 + 8) = v101;
                    *(_OWORD *)(v108 + 16) = v105;
                    *(_OWORD *)(v108 + 3sub_100006034(v0 + 2) = 0u;
                    *(_OWORD *)(v108 + 48) = 0u;
                    *(void *)(v108 + 64) = 0LL;
                    *(_BYTE *)(v108 + 7sub_100006034(v0 + 2) = 6;
                    swift_willThrow(v107);
                    sub_10001226C(v128, v96);
                    sub_10001226C(v115, v116);
                    sub_10001226C(v120, v119);
                    unint64_t v109 = *(void (**)(char *, uint64_t))(v134 + 8);
                    v109(v127, v15);
                    v109(v98, v15);
                    return sub_100012824((uint64_t)v28, &qword_1001591B0);
                  }

                  sub_10001226C(v128, v96);
                  sub_10001226C(v115, v116);
                  sub_10001226C(v120, v90);
                  uint64_t v111 = *(void (**)(char *, uint64_t))(v134 + 8);
                  v111(v127, v15);
                  v111(v92, v15);
                  __int128 v112 = v125;
                  uint64_t v113 = (void (*)(uint64_t, char *, uint64_t))v117;
                  v117(v125, v97, v15);
                  uint64_t v63 = (uint64_t)v122;
                  sub_100012824((uint64_t)v122, &qword_1001588F8);
                  v113(v63, v112, v15);
                  v31((char *)v63, 0LL, 1LL, v15);
                  goto LABEL_43;
                }

                sub_10001226C(v115, v116);
                sub_10001226C(v83, v90);
LABEL_42:
                uint64_t v110 = *(void (**)(char *, uint64_t))(v134 + 8);
                v110(v127, v15);
                v110(v92, v15);
LABEL_43:
                uint64_t v62 = v129;
                goto LABEL_21;
              }
            }

            else
            {
              __int128 v137 = 0u;
              __int128 v138 = 0u;
              unint64_t v90 = v119;
            }

            sub_10001226C(v115, v116);
            sub_10001226C(v83, v90);
            sub_100012824((uint64_t)&v137, &qword_100157FF8);
            uint64_t v92 = v124;
            goto LABEL_42;
          }

          sub_10001226C(v115, v116);
          sub_10001226C(v120, v119);
          uint64_t v89 = *(void (**)(char *, uint64_t))(v134 + 8);
          v89(v80, v15);
          v89(v124, v15);
LABEL_20:
          uint64_t v62 = v129;
          uint64_t v63 = (uint64_t)v122;
LABEL_21:
          uint64_t v64 = v130;
          uint64_t v65 = v130 + *(int *)(v23 + 48);
          uint64_t v66 = v130 + *(int *)(v23 + 64);
          sub_10004DC4C((uint64_t)v28, v130);
          sub_10004DC4C((uint64_t)v133, v65);
          sub_10004DC4C(v63, v66);
          sub_10004DC94(v64, v131);
          sub_10004DC94(v65, v132);
          sub_10004DC94(v66, v62);
          return sub_100012824((uint64_t)v28, &qword_1001591B0);
        }
      }

      else
      {
        __int128 v137 = 0u;
        __int128 v138 = 0u;
      }

      sub_100012824((uint64_t)&v137, &qword_100157FF8);
      goto LABEL_28;
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v53, v15);
    sub_10001226C(v120, v119);
    goto LABEL_20;
  }

uint64_t sub_10004BCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 128LL))();
  if (!v4)
  {
    uint64_t v11 = result;
    sub_10004B1F0( a1,  a2,  a3,  result,  v9,  v10,  *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
    return swift_bridgeObjectRelease(v11);
  }

  return result;
}

_OWORD *sub_10004BD4C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v68 = *(void *)(v1 - 8);
  uint64_t v69 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  HIDWORD(v67) = static os_signpost_type_t.begin.getter(v2);
  id v5 = (id)*sub_1000D30EC();
  unsigned int v6 = sub_10009029C();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = *((unsigned __int8 *)v6 + 16);
  uint64_t v10 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_10010F110;
  uint64_t v12 = sub_1000D42D4(*(_BYTE *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_100026B64();
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 3sub_100006034(v0 + 2) = v12;
  *(void *)(v11 + 40) = v14;
  static OSSignpostID.exclusive.getter(v15);
  os_signpost(_:dso:log:name:signpostID:_:_:)( HIDWORD(v67),  &_mh_execute_header,  v5,  v7,  v8,  v9,  v4,  "kind: %{public}s",  16LL,  2,  v11);

  swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v4, v69);
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  uint64_t v17 = sub_1000D4150(v16);
  uint64_t v68 = v0;
  uint64_t v69 = v17;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v23 = *(void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  uint64_t v24 = sub_100005110((void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data), v22);
  uint64_t v25 = sub_10008FBE4();
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  uint64_t v28 = v25[2];
  uint64_t v29 = v25[3];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  uint64_t v30 = v26;
  uint64_t v31 = v70;
  int64_t v32 = v24;
  uint64_t v33 = sub_1000E10E0(v30, v27, v28, v29, v69, v19, v21, v22, v23);
  if (v31)
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v19);
LABEL_18:
    uint64_t v51 = v68;
    goto LABEL_19;
  }

  uint64_t v35 = v33;
  unint64_t v36 = v34;
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v19);
  if (v36 >> 60 == 15)
  {
    *(void *)&v73[0] = 0LL;
    *((void *)&v73[0] + 1) = 0xE000000000000000LL;
    int64_t v32 = v73;
    _StringGuts.grow(_:)(28LL);
    swift_bridgeObjectRelease(*((void *)&v73[0] + 1));
    unint64_t v37 = sub_100012624();
    uint64_t v38 = swift_allocError(&type metadata for KMError, v37, 0LL, 0LL);
    *(void *)uint64_t v39 = 0xD000000000000020LL;
    *(void *)(v39 + 8) = 0x80000001001236D0LL;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(void *)(v39 + 64) = 0LL;
    *(_BYTE *)(v39 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v38);
    goto LABEL_18;
  }

  uint64_t v40 = sub_100005FB4((uint64_t *)&unk_10015BA50);
  sub_1000D3704(v35, v36, v40, v40);
  int64_t v32 = *(_OWORD **)&v73[0];
  if (!*(void *)&v73[0])
  {
    unint64_t v47 = sub_100012624();
    uint64_t v48 = swift_allocError(&type metadata for KMError, v47, 0LL, 0LL);
    *(_OWORD *)uint64_t v49 = 0u;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v49 + 48) = 0u;
    *(void *)(v49 + 64) = 0LL;
    *(_BYTE *)(v49 + 7sub_100006034(v0 + 2) = 73;
    swift_willThrow(v48);
    sub_10002193C(v35, v36);
    goto LABEL_18;
  }

  uint64_t v41 = (uint64_t *)sub_10008FAB4();
  if (!*((void *)v32 + 2))
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
LABEL_16:
    sub_10002193C(v35, v36);
    sub_100012824((uint64_t)&v71, &qword_100157FF8);
    uint64_t v51 = v68;
    goto LABEL_19;
  }

  uint64_t v42 = v41;
  uint64_t v43 = *v41;
  uint64_t v44 = v41[1];
  swift_bridgeObjectRetain(v44);
  unint64_t v45 = sub_100006114(v43, v44);
  if ((v46 & 1) != 0)
  {
    sub_100006054(*((void *)v32 + 7) + 32 * v45, (uint64_t)&v71);
  }

  else
  {
    __int128 v71 = 0u;
    __int128 v72 = 0u;
  }

  swift_bridgeObjectRelease(v44);
  if (!*((void *)&v72 + 1)) {
    goto LABEL_16;
  }
  sub_100017790(&v71, v73);
  sub_100006054((uint64_t)v73, (uint64_t)&v71);
  if (!swift_dynamicCast(&v74, &v71, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL))
  {
    swift_bridgeObjectRelease(v32);
    *(void *)&__int128 v71 = 0LL;
    *((void *)&v71 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease(*((void *)&v71 + 1));
    *(void *)&__int128 v71 = 0xD000000000000017LL;
    *((void *)&v71 + 1) = 0x8000000100123700LL;
    uint64_t v59 = *v42;
    uint64_t v58 = (void *)v42[1];
    swift_bridgeObjectRetain(v58);
    v60._uint64_t countAndFlagsBits = v59;
    v60._uint64_t object = v58;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(v58);
    v61._uint64_t object = (void *)0x8000000100123720LL;
    v61._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v61);
    int64_t v32 = (_OWORD *)*((void *)&v71 + 1);
    uint64_t v62 = v71;
    unint64_t v63 = sub_100012624();
    uint64_t v64 = swift_allocError(&type metadata for KMError, v63, 0LL, 0LL);
    *(void *)uint64_t v65 = v62;
    *(void *)(v65 + 8) = v32;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(void *)(v65 + 64) = 0LL;
    *(_BYTE *)(v65 + 7sub_100006034(v0 + 2) = 24;
    swift_willThrow(v64);
    sub_10002193C(v35, v36);
    sub_100006034(v73);
    goto LABEL_18;
  }

  uint64_t v50 = v74;
  uint64_t v51 = v68;
  if (*(void *)(v68 + 16) >= v74)
  {
    sub_100006034(v73);
    sub_10002193C(v35, v36);
  }

  else
  {
    swift_bridgeObjectRelease(v32);
    *(void *)&__int128 v71 = 0LL;
    *((void *)&v71 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease(*((void *)&v71 + 1));
    *(void *)&__int128 v71 = 0xD000000000000013LL;
    *((void *)&v71 + 1) = 0x8000000100123740LL;
    uint64_t v74 = v50;
    v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t object = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(object);
    int64_t v32 = (_OWORD *)*((void *)&v71 + 1);
    uint64_t v54 = v71;
    unint64_t v55 = sub_100012624();
    uint64_t v56 = swift_allocError(&type metadata for KMError, v55, 0LL, 0LL);
    *(void *)uint64_t v57 = v54;
    *(void *)(v57 + 8) = v32;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(void *)(v57 + 64) = 0LL;
    *(_BYTE *)(v57 + 7sub_100006034(v0 + 2) = 25;
    swift_willThrow(v56);
    sub_10002193C(v35, v36);
    sub_100006034(v73);
  }

uint64_t sub_10004C358(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v21 = static os_signpost_type_t.end.getter(v4);
  id v7 = (id)*sub_1000D30EC();
  uint64_t v8 = sub_10009029C();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = *((unsigned __int8 *)v8 + 16);
  uint64_t v12 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_10010F110;
  uint64_t v14 = sub_1000D42D4(*(_BYTE *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_100026B64();
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 3sub_100006034(v0 + 2) = v14;
  *(void *)(v13 + 40) = v16;
  static OSSignpostID.exclusive.getter(v17);
  char v19 = 2;
  os_signpost(_:dso:log:name:signpostID:_:_:)( v21,  &_mh_execute_header,  v7,  v9,  v10,  v11,  v6,  "kind: %{public}s",  16LL,  v19,  v13);

  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10004C4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v10 = sub_100005FB4(&qword_1001588F8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v15 = v13[4];
  sub_100005110(v13, v14);
  uint64_t v16 = (uint64_t *)sub_100090104();
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  sub_1000E1110(v17, v18, a1, a2, a3, v14, v15, (uint64_t)&v26);
  uint64_t result = swift_bridgeObjectRelease(v18);
  if (!v6)
  {
    uint64_t v20 = v33;
    if (v27)
    {
      sub_100005158(&v26, (uint64_t)v29);
      uint64_t v32 = v28;
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      sub_100005110(v29, v30);
      sub_1000E2530(a1, a2, a3, v21, v22, (uint64_t)v12);
      uint64_t v23 = type metadata accessor for UUID(0LL);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1LL, v23) == 1)
      {
        sub_100012824((uint64_t)v12, &qword_1001588F8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, 1LL, 1LL, v23);
      }

      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v20, v12, v23);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v20, 0LL, 1LL, v23);
      }

      return sub_100012824((uint64_t)v29, &qword_1001591C0);
    }

    else
    {
      sub_100012824((uint64_t)&v26, &qword_1001591B8);
      uint64_t v25 = type metadata accessor for UUID(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( v20,  1LL,  1LL,  v25);
    }
  }

  return result;
}

uint64_t sub_10004C6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (void *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v11 = v9[4];
  uint64_t v12 = sub_100005110(v9, v10);
  uint64_t v13 = (uint64_t *)sub_100090104();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  uint64_t v16 = v10;
  uint64_t v17 = (uint64_t)v12;
  sub_1000E1110(v14, v15, a1, a2, a3, v16, v11, (uint64_t)&v25);
  swift_bridgeObjectRelease(v15);
  if (!v5)
  {
    if (v26)
    {
      sub_100005158(&v25, (uint64_t)v28);
      uint64_t v31 = v27;
      uint64_t v19 = v29;
      uint64_t v20 = v30;
      sub_100005110(v28, v29);
      unint64_t v21 = sub_1000E2774(a1, a2, a3, v19, v20);
      if ((v22 & 1) == 0)
      {
        uint64_t v17 = sub_1000E08DC(v21);
        sub_100012824((uint64_t)v28, &qword_1001591C0);
        return v17;
      }

      uint64_t v23 = &qword_1001591C0;
      uint64_t v24 = (__int128 *)v28;
    }

    else
    {
      uint64_t v23 = &qword_1001591B8;
      uint64_t v24 = &v25;
    }

    sub_100012824((uint64_t)v24, v23);
    return 0LL;
  }

  return v17;
}

uint64_t sub_10004C84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain(*(void *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  uint64_t v7 = sub_1000D4150(v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  uint64_t v48 = v7;
  uint64_t v49 = v4;
  unint64_t v47 = (unint64_t)v11;
  if (v12)
  {
    char v46 = v2;
    sub_10000CC84(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
    {
      __break(1u);
      JUMPOUT(0x10004D400LL);
    }

    uint64_t v50 = v12;
    uint64_t v45 = v9;
    uint64_t v13 = 0LL;
    unint64_t v14 = a2 & 0xC000000000000001LL;
    uint64_t v15 = a2;
    do
    {
      if (v14)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a2);
      }

      else
      {
        uint64_t v16 = *(void *)(a2 + 8 * v13 + 32);
        swift_retain(v16);
      }

      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v16 + 144LL))();
      uint64_t v19 = v18;
      swift_release(v16);
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      unint64_t v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1) {
        sub_10000CC84(v20 > 1, v21 + 1, 1);
      }
      ++v13;
      _swiftEmptyArrayStorage[2] = v21 + 1;
      char v22 = &_swiftEmptyArrayStorage[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      a2 = v15;
    }

    while (v50 != v13);
    uint64_t v9 = v45;
    uint64_t v2 = v46;
  }

  uint64_t v23 = (void *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  uint64_t v24 = *(void *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  uint64_t v25 = *(void *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  uint64_t v4 = sub_100005110(v23, v24);
  uint64_t v11 = &off_100147588;
  uint64_t v26 = sub_10004F840((uint64_t)&off_100147588);
  swift_arrayDestroy(&unk_1001475A8, 1LL, &type metadata for MachOSymbol.Kind);
  uint64_t v27 = v25;
  uint64_t v2 = v4;
  sub_1000E2FF4((uint64_t)_swiftEmptyArrayStorage, v48, v9, v47, v26, v24, v27);
  if (!v49)
  {
    uint64_t v7 = v28;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v9);
    unint64_t v52 = sub_10004D420((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v29 = sub_10004D420((uint64_t)_swiftEmptyArrayStorage);
    int64_t v30 = 0LL;
    unint64_t v51 = v29;
    uint64_t v43 = v7 + 64;
    uint64_t v31 = 1LL << *(_BYTE *)(v7 + 32);
    uint64_t v32 = -1LL;
    if (v31 < 64) {
      uint64_t v32 = ~(-1LL << v31);
    }
    unint64_t v33 = v32 & *(void *)(v7 + 64);
    int64_t v44 = (unint64_t)(v31 + 63) >> 6;
    while (1)
    {
      if (v33)
      {
        unint64_t v34 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        unint64_t v35 = v34 | (v30 << 6);
      }

      else
      {
        if (__OFADD__(v30++, 1LL))
        {
          __break(1u);
          goto LABEL_40;
        }

        if (v30 >= v44) {
          goto LABEL_37;
        }
        unint64_t v37 = *(void *)(v43 + 8 * v30);
        if (!v37)
        {
          int64_t v38 = v30 + 1;
          if (v30 + 1 >= v44) {
            goto LABEL_37;
          }
          unint64_t v37 = *(void *)(v43 + 8 * v38);
          if (!v37)
          {
            int64_t v38 = v30 + 2;
            if (v30 + 2 >= v44) {
              goto LABEL_37;
            }
            unint64_t v37 = *(void *)(v43 + 8 * v38);
            if (!v37)
            {
              int64_t v38 = v30 + 3;
              if (v30 + 3 >= v44)
              {
LABEL_37:
                swift_release(v7);
                uint64_t v24 = sub_10004DE40(a1, (uint64_t *)&v52, (uint64_t *)&v51);
                swift_bridgeObjectRelease(v51);
                swift_bridgeObjectRelease(v52);
                return v24;
              }

              unint64_t v37 = *(void *)(v43 + 8 * v38);
              if (!v37)
              {
                while (1)
                {
                  int64_t v30 = v38 + 1;
                  if (__OFADD__(v38, 1LL)) {
                    break;
                  }
                  if (v30 >= v44) {
                    goto LABEL_37;
                  }
                  unint64_t v37 = *(void *)(v43 + 8 * v30);
                  ++v38;
                  if (v37) {
                    goto LABEL_30;
                  }
                }

unint64_t sub_10004D420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001592E8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_10004D538(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  void v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10004EC1C(v6, a2, a3);
  return sub_10002936C;
}

void (*sub_10004D5A4(void *a1, uint64_t a2, uint64_t a3, unint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain(a3);
  sub_10004F9C0(a4);
  v8[6] = sub_10004ECAC(v8, a2, a3, a4);
  return sub_10004D620;
}

void sub_10004D620(void *a1)
{
  uint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  swift_bridgeObjectRelease(v3);
  sub_10004F9E4(v2);
  free(v1);
}

void *sub_10004D66C(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  unint64_t result = sub_10000C82C(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_10004D754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __int128 *a6)
{
  uint64_t v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(void *)(v13 + 16) = a1;
  uint64_t v14 = v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, a2, v15);
  uint64_t v16 = (void *)(v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  void *v16 = a3;
  v16[1] = a4;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind) = a5;
  sub_100005158(a6, v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  return v13;
}

uint64_t sub_10004D814()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  sub_100006034((void *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10004D888()
{
  unint64_t v0 = sub_10004FA08();
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v0);
  v1._uint64_t countAndFlagsBits = 544497952LL;
  v1._uint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v1);
  v3._uint64_t countAndFlagsBits = URL.path.getter(v2);
  uint64_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t sub_10004D914()
{
  unint64_t v0 = sub_10004FA08();
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v0);
  v1._uint64_t countAndFlagsBits = 544497952LL;
  v1._uint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v1);
  v3._uint64_t countAndFlagsBits = URL.path.getter(v2);
  uint64_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

BOOL sub_10004D9A0(uint64_t a1, uint64_t a2)
{
  return (static URL.== infix(_:_:)( a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path,  a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0 && sub_1000265C0( *(_BYTE *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind),  *(_BYTE *)(a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
}

Swift::Int sub_10004D9F8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v4, v0, v1);
  unint64_t v2 = sub_10004FA4C();
  dispatch thunk of Hashable.hash(into:)(v4, &type metadata for CollectionKind, v2);
  return Hasher._finalize()();
}

uint64_t sub_10004DAA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  unint64_t v4 = sub_10004FA4C();
  return dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v4);
}

Swift::Int sub_10004DB48(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v5, v1, v2);
  unint64_t v3 = sub_10004FA4C();
  dispatch thunk of Hashable.hash(into:)(v5, &type metadata for CollectionKind, v3);
  return Hasher._finalize()();
}

BOOL sub_10004DBF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return (static URL.== infix(_:_:)( *a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path,  *a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0 && sub_1000265C0( *(_BYTE *)(v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind),  *(_BYTE *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
}

uint64_t sub_10004DC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_1001588F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_1001588F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004DCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 40);
  unint64_t v8 = sub_10004FBA8();
  uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, &type metadata for MachOSymbol, v8);
  return sub_10004DD60(a1, a2, a3, v9);
}

unint64_t sub_10004DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  uint64_t v5 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v6 = a4 & ~v5;
  if (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t v8 = sub_10004FBFC();
    do
    {
      uint64_t v9 = *(void *)(v4 + 48) + 24 * v6;
      __int128 v10 = *(_OWORD *)v9;
      uint64_t v11 = *(void *)(v9 + 16);
      __int128 v13 = v10;
      uint64_t v14 = v11;
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, v15, &type metadata for MachOSymbol, v8) & 1) != 0) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v7;
    }

    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
  }

  return v6;
}

uint64_t sub_10004DE40(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = static _DictionaryStorage.copy(original:)(a1);
  unint64_t v6 = (void *)v5;
  int64_t v7 = 0LL;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v61 = a1 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & v8;
  int64_t v62 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v63 = v5 + 64;
  uint64_t v59 = (void *)v5;
  uint64_t v60 = a1;
  if ((v10 & v8) == 0) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v12 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v7 << 6))
  {
    uint64_t v17 = 8 * i;
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v80 = &_swiftEmptyDictionarySingleton;
    uint64_t v74 = *(void *)(v19 + 16);
    if (v74) {
      break;
    }
    swift_retain(v18);
    int64_t v53 = &_swiftEmptyDictionarySingleton;
LABEL_63:
    *(void *)(v63 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    *(void *)(v6[6] + v17) = v18;
    *(void *)(v6[7] + v17) = v53;
    uint64_t v54 = v6[2];
    BOOL v55 = __OFADD__(v54, 1LL);
    uint64_t v56 = v54 + 1;
    if (v55)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }

    void v6[2] = v56;
    if (v11) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_70;
    }
    if (v14 >= v62) {
      return (uint64_t)v6;
    }
    unint64_t v15 = *(void *)(v61 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v62) {
        return (uint64_t)v6;
      }
      unint64_t v15 = *(void *)(v61 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v62) {
          return (uint64_t)v6;
        }
        unint64_t v15 = *(void *)(v61 + 8 * v7);
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v62) {
            return (uint64_t)v6;
          }
          unint64_t v15 = *(void *)(v61 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              int64_t v7 = v16 + 1;
              if (__OFADD__(v16, 1LL)) {
                goto LABEL_71;
              }
              if (v7 >= v62) {
                return (uint64_t)v6;
              }
              unint64_t v15 = *(void *)(v61 + 8 * v7);
              ++v16;
              if (v15) {
                goto LABEL_19;
              }
            }
          }

          int64_t v7 = v16;
        }
      }
    }

LABEL_57:
    swift_release(v29);
    uint64_t v20 = v75;
    unint64_t v11 = v77;
    if ((v76 & 1) == 0)
    {
      swift_bridgeObjectRetain(v3);
      sub_10004F9C0(v77);
      uint64_t v52 = sub_10004EB34(v22, v3, v77);
      swift_bridgeObjectRelease(v3);
      sub_10004F9E4(v77);
      sub_10004FB98(v52);
    }

  __break(1u);
  return result;
}

        __int128 v138 = (v142 - 1) & v142;
        int v139 = __clz(__rbit64(v142)) + (v132 << 6);
LABEL_58:
        uint64_t v436 = (char *)v138;
        uint64_t v437 = v132;
        unint64_t v144 = v427;
        sub_100012734( *(void *)(v430 + 56) + *(void *)(v428 + 72) * v139,  v427,  type metadata accessor for DriverBinEntry);
        sub_1000966AC(v144, (uint64_t)v76);
        uint64_t v145 = (uint64_t (*)(unint64_t, char *, char *))v30[2];
        uint64_t v146 = v145(v22, &v76[*(int *)(v136 + 28)], v75);
        uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v434 + 224LL))(v146);
        if (!result)
        {
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          break;
        }

        uint64_t v147 = result;
        unint64_t v148 = (*(uint64_t (**)(void))(*(void *)result + 216LL))();
        swift_release(v147);
        uint64_t v149 = &v76[*(int *)(v136 + 20)];
        uint64_t v150 = type metadata accessor for ApplicationRecord(0LL);
        uint64_t v151 = v150;
        uint64_t v152 = (uint64_t *)&v149[*(int *)(v150 + 32)];
        uint64_t v153 = *v152;
        char v154 = v152[1];
        if (*(void *)(v148 + 16))
        {
          sub_1000125E0(v153, v154);
          uint64_t v155 = sub_10000D2C0(v153, v154);
          uint64_t v157 = *(void *)(v151 - 8);
          uint64_t v158 = v426;
          if ((v156 & 1) != 0)
          {
            sub_100012734( *(void *)(v148 + 56) + *(void *)(v157 + 72) * v155,  (uint64_t)v426,  type metadata accessor for ApplicationRecord);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v158, 0LL, 1LL, v151);
          }

          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v426, 1LL, 1LL, v151);
          }
        }

        else
        {
          uint64_t v157 = *(void *)(v150 - 8);
          uint64_t v158 = v426;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v426, 1LL, 1LL, v150);
          sub_1000125E0(v153, v154);
        }

        swift_bridgeObjectRelease(v148);
        sub_10001226C(v153, v154);
        uint64_t v159 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48))(v158, 1LL, v151);
        sub_100012824((uint64_t)v158, &qword_100157ED0);
        if (v159 == 1)
        {
          uint64_t v160 = sub_1000D32BC();
          uint64_t v161 = v425;
          uint64_t v74 = v435;
          (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v425, v160, v435);
          uint64_t v162 = v419;
          char v163 = (unint64_t)v433;
          uint64_t v75 = (char *)v439;
          uint64_t v164 = v145((unint64_t)v419, v433, (char *)v439);
          uint64_t v165 = (os_log_s *)Logger.logObject.getter(v164);
          uint64_t v166 = static os_log_type_t.info.getter(v165);
          if (os_log_type_enabled(v165, v166))
          {
            Swift::String v167 = swift_slowAlloc(12LL, -1LL);
            __int128 v168 = v74;
            Swift::String v169 = swift_slowAlloc(32LL, -1LL);
            v445 = v169;
            *(_DWORD *)Swift::String v167 = v420;
            uint64_t v170 = URL.path.getter(v169);
            uint64_t v172 = v171;
            *(void *)(v167 + 4) = sub_1000058CC(v170, v171, &v445);
            swift_bridgeObjectRelease(v172);
            uint64_t v30 = v432;
            uint64_t v173 = (void (*)(char *, uint64_t))v432[1];
            v173(v162, v439);
            _os_log_impl( (void *)&_mh_execute_header,  v165,  v166,  "Skipping bundle at %s since containing application was removed",  (uint8_t *)v167,  0xCu);
            swift_arrayDestroy(v169, 1LL, v418);
            Swift::String v174 = v169;
            uint64_t v74 = v168;
            swift_slowDealloc(v174, -1LL, -1LL);
            Swift::String v175 = v167;
            uint64_t v75 = (char *)v439;
            swift_slowDealloc(v175, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v438 + 8))(v425, v168);
            goto LABEL_76;
          }

LABEL_59:
    if (!v71)
    {
      ++v20;
      swift_bridgeObjectRelease(v3);
      sub_10004F9E4(v11);
      if (v20 == v74)
      {
        swift_bridgeObjectRelease_n(v64, 2LL);
        int64_t v53 = v80;
        unint64_t v6 = v59;
        a1 = v60;
        unint64_t v11 = v68;
        int64_t v7 = v69;
        uint64_t v17 = v66;
        unint64_t i = v67;
        uint64_t v18 = v65;
        goto LABEL_63;
      }

      continue;
    }

    break;
  }

        __break(1u);
        return result;
      }
    }

    else
    {
      unint64_t v77 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v133);
      if (v77) {
        goto LABEL_35;
      }
    }

    sub_10005C854(&v137);
    uint64_t v79 = _swiftEmptyArrayStorage;
LABEL_50:
    uint64_t v130 = v79;
    unint64_t v90 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v120, v119);
    uint64_t v89 = v92;
    swift_bridgeObjectRelease(v79);
    goto LABEL_51;
  }

  uint64_t v89 = (void *)0xE500000000000000LL;
  unint64_t v90 = 0x296C696E28LL;
LABEL_51:
  v93._uint64_t countAndFlagsBits = v90;
  v93._uint64_t object = v89;
  String.append(_:)(v93);
  swift_bridgeObjectRelease(v89);
  v94._uint64_t countAndFlagsBits = 0x203A6564696C450ALL;
  v94._uint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v94);
  sub_1000263D8((uint64_t)v121, (uint64_t)&v130, &qword_10015B110);
  if (v130)
  {
    __int128 v138 = v131;
    uint64_t v128 = v131;
    swift_bridgeObjectRetain(v131);
    uint64_t v95 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v25, v26, v27);
    uint64_t v97 = v96;
    sub_10005C854(&v138);
  }

  else
  {
    uint64_t v97 = (void *)0xE500000000000000LL;
    uint64_t v95 = 0x296C696E28LL;
  }

  v98._uint64_t countAndFlagsBits = v95;
  v98._uint64_t object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease(v97);
  v99._uint64_t countAndFlagsBits = 0x616E6F6974704F0ALL;
  v99._uint64_t object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v99);
  sub_1000263D8((uint64_t)v121, (uint64_t)&v128, &qword_10015B110);
  if (v128)
  {
    int v139 = v129;
    swift_bridgeObjectRetain(v129);
    uint64_t v100 = Sequence<>.joined(separator:)(8236LL, 0xE200000000000000LL, v25, v26, v27);
    uint64_t v102 = v101;
    sub_10005C854(&v139);
  }

  else
  {
    uint64_t v102 = (void *)0xE500000000000000LL;
    uint64_t v100 = 0x296C696E28LL;
  }

  v103._uint64_t countAndFlagsBits = v100;
  v103._uint64_t object = v102;
  String.append(_:)(v103);
  swift_bridgeObjectRelease(v102);
  v104._uint64_t countAndFlagsBits = 0x656D756C6F560A0ALL;
  v104._uint64_t object = (void *)0xEF203A746F6F5220LL;
  String.append(_:)(v104);
  __int128 v105 = v1[18];
  unint64_t v106 = (void *)v1[19];
  swift_bridgeObjectRetain(v106);
  v107._uint64_t countAndFlagsBits = v105;
  v107._uint64_t object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease(v106);
  v108._uint64_t countAndFlagsBits = 0x203A7367616C460ALL;
  v108._uint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v108);
  unint64_t v109 = sub_1000772F4();
  uint64_t v110 = (void *)sub_1000B1EA8();
  v111._uint64_t countAndFlagsBits = sub_1000D3A38((uint64_t)&type metadata for ExtensionManager.Settings.Flags, v109, v110);
  uint64_t object = v111._object;
  String.append(_:)(v111);
  swift_bridgeObjectRelease(object);
  return 0LL;
}

LABEL_72:
  uint64_t v58 = v80;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v58);
  sub_10004F9E4(v11);
  uint64_t result = swift_bridgeObjectRelease(v64);
  __break(1u);
  return result;
}

    uint64_t v111 = 0LL;
    char v117 = 1;
LABEL_73:
    uint64_t v110 = v111;
    if ((v117 & 1) == 0) {
      goto LABEL_76;
    }
    goto LABEL_74;
  }

  *(void *)&Swift::String v175 = 0LL;
  *((void *)&v175 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  v99._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v99._uint64_t object = (void *)0x8000000100125D50LL;
  String.append(_:)(v99);
  v100._uint64_t countAndFlagsBits = a3;
  v100._uint64_t object = a4;
  String.append(_:)(v100);
  v101._uint64_t countAndFlagsBits = 0xD000000000000032LL;
  v101._uint64_t object = (void *)0x8000000100125D70LL;
  String.append(_:)(v101);
  uint64_t v102 = Set.description.getter(v52, &type metadata for String, &protocol witness table for String);
  Swift::String v104 = v103;
  swift_bridgeObjectRelease(v52);
  v105._uint64_t countAndFlagsBits = v102;
  v105._uint64_t object = v104;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v104);
  unint64_t v106 = v175;
  uint64_t v107 = sub_100012624();
  uint64_t v108 = swift_allocError(&type metadata for KMError, v107, 0LL, 0LL);
  *(_OWORD *)unint64_t v109 = v106;
  *(_OWORD *)(v109 + 16) = 0u;
  *(_OWORD *)(v109 + 3sub_100006034(v0 + 2) = 0u;
  *(_OWORD *)(v109 + 48) = 0u;
  *(void *)(v109 + 64) = 0LL;
  *(_BYTE *)(v109 + 7sub_100006034(v0 + 2) = 9;
  swift_willThrow(v108);
  uint64_t v71 = v108;
  swift_release(v165);
  swift_release(v164);
  sub_100039418(v56);
LABEL_24:
  __int128 v72 = v171;
LABEL_25:
  uint64_t v173 = v71;
  swift_errorRetain(v71);
  uint64_t v73 = sub_100005FB4(&qword_10015AB20);
  if (swift_dynamicCast(v172, &v173, v73, &type metadata for KMError, 0LL))
  {
    swift_errorRelease(v71);
    sub_1000516A8((uint64_t)v172, (uint64_t)&v175);
    uint64_t v74 = sub_1000B61B8();
    v72(0LL, 0LL, v74);

    sub_100082748((uint64_t)&v175);
    uint64_t v75 = v173;
  }

  else
  {
    swift_errorRelease(v173);
    char v76 = (void *)_convertErrorToNSError(_:)(v71);
    v72(0LL, 0LL, v76);

    uint64_t v75 = v71;
  }

  return swift_errorRelease(v75);
}

Swift::Int sub_10004E4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001592E8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10004E7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001592D8);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  int64_t v41 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v39 = v3;
  int64_t v40 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v40) {
      break;
    }
    int64_t v25 = v41;
    unint64_t v26 = v41[v24];
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v26 = v41[v14];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v40) {
              goto LABEL_36;
            }
            unint64_t v26 = v41[v14];
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_10004EB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10004DCDC(a1, a2, a3);
  LOBYTE(a3) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a3 & 1) == 0) {
    return 1LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v12 = *v4;
  uint64_t v18 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004F30C();
    uint64_t v12 = v18;
  }

  uint64_t v13 = *(void *)(v12 + 48) + 24 * v9;
  unint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease(*(void *)(v13 + 8));
  sub_10004F9E4(v14);
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v9);
  sub_10004F4DC(v9, v12);
  uint64_t v16 = *v4;
  *uint64_t v4 = v12;
  swift_bridgeObjectRelease(v16);
  return v15;
}

void (*sub_10004EC1C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10004F058(v7);
  v7[10] = sub_10004EDAC(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100029A58;
}

void (*sub_10004ECAC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4))(uint64_t a1)
{
  unint64_t v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[8] = a3;
  void v9[9] = a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  swift_bridgeObjectRetain(a3);
  sub_10004F9C0(a4);
  v9[10] = sub_10002ADD0(v9);
  v9[11] = sub_10004EED8(v9 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return sub_10004ED54;
}

void sub_10004ED54(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 64LL);
  unint64_t v3 = *(void *)(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 88LL))(*(void *)a1 + 32LL, 0LL);
  swift_bridgeObjectRelease(v4);
  sub_10004F9E4(v3);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10004EDAC(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100006114(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *char v10 = v19;
        return sub_10002AD94;
      }

void (*sub_10004EED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t v6 = v5;
  char v12 = malloc(0x38uLL);
  *a1 = v12;
  void v12[3] = a4;
  v12[4] = v6;
  v12[1] = a2;
  void v12[2] = a3;
  uint64_t v13 = *v6;
  unint64_t v15 = sub_10004DCDC(a2, a3, a4);
  *((_BYTE *)v12 + 48) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*(void *)(*v6 + 56) + 8 * v15);
LABEL_12:
        void *v12 = v21;
        return sub_10004F018;
      }

void sub_10004F018(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_10004F078(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (*a1)[3]);
  sub_10004FB98(*v1);
  free(v1);
}

uint64_t (*sub_10004F058(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10004FCC8;
}

uint64_t *sub_10004F078( uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9 = *result;
  if (*result == 1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48) + 24 * a4, 1LL, &type metadata for MachOSymbol);
      sub_10004F4DC(a4, *a3);
    }

    return (uint64_t *)sub_10004FBEC(v9);
  }

  char v10 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    *(void *)(v10[7] + 8 * a4) = v9;
    return (uint64_t *)sub_10004FBEC(v9);
  }

  v10[(a4 >> 6) + 8] |= 1LL << a4;
  char v12 = (void *)(v10[6] + 24 * a4);
  void *v12 = a5;
  v12[1] = a6;
  void v12[2] = a7;
  *(void *)(v10[7] + 8 * a4) = v9;
  uint64_t v13 = v10[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (!v14)
  {
    void v10[2] = v15;
    swift_bridgeObjectRetain(a6);
    sub_10004F9C0(a7);
    return (uint64_t *)sub_10004FBEC(v9);
  }

  __break(1u);
  return result;
}

void sub_10004F158()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_1001592E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_10004F30C()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_1001592D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

unint64_t sub_10004F4DC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      unint64_t v9 = sub_10004FBA8();
      do
      {
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(a2 + 40),  &type metadata for MachOSymbol,  v9);
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(a2 + 48);
            unint64_t v14 = v13 + 24 * v3;
            unint64_t v15 = (__int128 *)(v13 + 24 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 24)
            {
              __int128 v16 = *v15;
              *(void *)(v14 + 16) = *((void *)v15 + 2);
              *(_OWORD *)unint64_t v14 = v16;
            }

            uint64_t v17 = *(void *)(a2 + 56);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            unint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
            {
              *uint64_t v18 = *v19;
              int64_t v3 = v6;
            }
          }
        }

        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10004F6BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10004DCDC(a2, a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10004F30C();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      unint64_t result = swift_bridgeObjectRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

uint64_t sub_10004F840(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005FB4(&qword_1001592F0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v20 = v1;
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 32 + 8 * v4);
      unint64_t v22 = v6;
      uint64_t v7 = *(void *)(v3 + 40);
      sub_10004F9C0(v6);
      unint64_t v8 = sub_10004FC40();
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v7, &type metadata for MachOSymbol.Kind, v8);
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = ~v10;
        unint64_t v16 = sub_10004FC84();
        do
        {
          uint64_t v21 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
          uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)( &v21,  &v22,  &type metadata for MachOSymbol.Kind,  v16);
          if ((result & 1) != 0)
          {
            sub_10004F9E4(v6);
            uint64_t v1 = v20;
            goto LABEL_4;
          }

          unint64_t v11 = (v11 + 1) & v15;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
        }

        while ((v13 & (1LL << v11)) != 0);
        uint64_t v1 = v20;
      }

      *(void *)(v5 + 8 * v1sub_100006034(v0 + 2) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v6;
      uint64_t v17 = *(void *)(v3 + 16);
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18) {
        break;
      }
      *(void *)(v3 + 16) = v19;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }

    __break(1u);
  }

  else
  {
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  return result;
}

unint64_t sub_10004F9C0(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62)) {
    return swift_retain(result);
  }
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_retain(result);
  }

  return result;
}

unint64_t sub_10004F9E4(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (!(result >> 62)) {
    return swift_release(result);
  }
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_release(result);
  }

  return result;
}

unint64_t sub_10004FA08()
{
  unint64_t result = qword_1001591C8;
  if (!qword_1001591C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011A3D8, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_1001591C8);
  }

  return result;
}

unint64_t sub_10004FA4C()
{
  unint64_t result = qword_1001591D0;
  if (!qword_1001591D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10010FB58, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_1001591D0);
  }

  return result;
}

uint64_t sub_10004FA90()
{
  return sub_100012860(&qword_1001591D8, type metadata accessor for KernelCollection, (uint64_t)&unk_100110A28);
}

uint64_t type metadata accessor for KernelCollection(uint64_t a1)
{
  uint64_t result = qword_10015F890;
  if (!qword_10015F890) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KernelCollection);
  }
  return result;
}

uint64_t sub_10004FAF8()
{
  return type metadata accessor for KernelCollection(0LL);
}

uint64_t sub_10004FB00(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_100110A78;
    void v4[3] = &unk_100110A90;
    v4[4] = &unk_100110AA8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10004FB98(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t sub_10004FBA8()
{
  unint64_t result = qword_1001592D0;
  if (!qword_1001592D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011ADA8, &type metadata for MachOSymbol);
    atomic_store(result, (unint64_t *)&qword_1001592D0);
  }

  return result;
}

uint64_t sub_10004FBEC(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

unint64_t sub_10004FBFC()
{
  unint64_t result = qword_1001592E0;
  if (!qword_1001592E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AD80, &type metadata for MachOSymbol);
    atomic_store(result, (unint64_t *)&qword_1001592E0);
  }

  return result;
}

unint64_t sub_10004FC40()
{
  unint64_t result = qword_1001592F8;
  if (!qword_1001592F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AD40, &type metadata for MachOSymbol.Kind);
    atomic_store(result, (unint64_t *)&qword_1001592F8);
  }

  return result;
}

unint64_t sub_10004FC84()
{
  unint64_t result = qword_100159300;
  if (!qword_100159300)
  {
    unint64_t result = swift_getWitnessTable(&unk_10011AD18, &type metadata for MachOSymbol.Kind);
    atomic_store(result, (unint64_t *)&qword_100159300);
  }

  return result;
}

void *sub_10004FCCC()
{
  unint64_t v1 = (void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x60LL));
  swift_beginAccess(v1, v5, 0LL, 0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10004FD28(void *a1)
{
  id v3 = (void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x60LL));
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
}

void *sub_10004FD88(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

void *sub_10004FDDC()
{
  unint64_t v1 = (void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68LL));
  swift_beginAccess(v1, v5, 0LL, 0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10004FE38(void *a1)
{
  id v3 = (void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68LL));
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
}

void *sub_10004FE98(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10004FEEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x70);
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
}

uint64_t sub_10004FF60(uint64_t a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x70);
  swift_beginAccess(v4, v6, 33LL, 0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 40LL))(v4, a1);
  return swift_endAccess(v6);
}

uint64_t (*sub_10004FFDC(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_100050030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = sub_1000512F4(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 8LL))(a1);
  return v6;
}

void sub_100050074()
{
}

id sub_100050090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (objc_class *)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)((swift_isaMask & *v4) + 0x50LL),  *(void *)((swift_isaMask & *v4) + 0x58LL),  a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_1000500DC(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;

  return (*(uint64_t (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8LL) + 8LL))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x70LL)]);
}

void sub_100050158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(*(void *)v5 + 80LL),  *(void *)(*(void *)v5 + 88LL),  a4);
  id v10 = sub_1000512F4(a1, v7, v8, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void **)(v5 + 24);
  if (v12)
  {
    uint64_t v13 = *(void (**)(void *))((swift_isaMask & *v12) + 0x80LL);
    uint64_t v14 = v12;
    uint64_t v15 = v11;
    v13(v11);
    unint64_t v16 = *(void (**)(void *))((swift_isaMask & *v15) + 0x98LL);
    uint64_t v17 = v14;
    v16(v12);
  }

  else
  {
    BOOL v18 = *(void **)(v5 + 16);
    *(void *)(v5 + 16) = v10;
    id v19 = v10;

    uint64_t v17 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v11;
  }

  uint64_t v20 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v11;
  v11;

  int v21 = *(_DWORD *)(v5 + 32);
  BOOL v22 = __CFADD__(v21, 1);
  int v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v5 + 3sub_100006034(v0 + 2) = v23;
  }
}

void sub_100050260()
{
  unint64_t v1 = (void *)v0[2];
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *v0;
    uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78LL);
    uint64_t v5 = v1;
    uint64_t v6 = v4();
    uint64_t v7 = (void *)v0[2];
    v0[2] = v6;

    uint64_t v9 = (void *)v0[3];
    if (v9)
    {
      type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v8);
      id v10 = v5;
      id v11 = v9;
      char v12 = static NSObject.== infix(_:_:)(v10, v11);

      if ((v12 & 1) != 0)
      {
        uint64_t v13 = v4();
        uint64_t v14 = (void *)v2[3];
        v2[3] = v13;
      }
    }

    uint64_t v15 = (void *)v4();
    if (v15)
    {
      unint64_t v16 = v15;
      (*(void (**)(void))((swift_isaMask & *v15) + 0x98LL))(0LL);
    }

    int v17 = *((_DWORD *)v2 + 8);
    BOOL v18 = v17 != 0;
    int v19 = v17 - 1;
    if (v18) {
      *((_DWORD *)v2 + 8) = v19;
    }
    else {
      __break(1u);
    }
  }

void sub_100050370(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x90LL))();
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x78LL))();
  uint64_t v8 = v6;
  if (v6)
  {
    uint64_t v9 = *(void (**)(void *))((swift_isaMask & *v6) + 0x98LL);
    id v10 = v5;
    id v11 = v8;
    v9(v5);
  }

  if (v5)
  {
    char v12 = *(void (**)(void *))((swift_isaMask & *v5) + 0x80LL);
    id v13 = v8;
    uint64_t v14 = v5;
    v12(v8);
  }

  uint64_t v15 = (void *)v2[2];
  if (v15)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(v4 + 80),  *(void *)(v4 + 88),  v7);
    unint64_t v16 = a1;
    id v17 = v15;
    char v18 = static NSObject.== infix(_:_:)(v16, v17);

    if ((v18 & 1) != 0)
    {
      int v19 = (void *)v2[2];
      v2[2] = v5;
      uint64_t v20 = v5;
    }
  }

  int v21 = (void *)v2[3];
  if (v21)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(v4 + 80),  *(void *)(v4 + 88),  v7);
    BOOL v22 = a1;
    id v23 = v21;
    char v24 = static NSObject.== infix(_:_:)(v22, v23);

    if ((v24 & 1) != 0)
    {
      uint64_t v25 = (void *)v2[3];
      v2[3] = v8;
      uint64_t v8 = v25;
    }
  }

  else
  {
  }

  int v26 = *((_DWORD *)v2 + 8);
  BOOL v27 = v26 != 0;
  int v28 = v26 - 1;
  if (v27) {
    *((_DWORD *)v2 + 8) = v28;
  }
  else {
    __break(1u);
  }
}

void *sub_100050514()
{
  unint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t sub_100050538(uint64_t a1)
{
  uint64_t v2 = *(void *)(*v1 + 80LL);
  uint64_t v38 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v36 = v1;
  uint64_t v6 = (void *)v1[2];
  if (v6)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    uint64_t v8 = v6;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      id v10 = *(void (**)(void))((swift_isaMask & *v6) + 0xA8LL);
      id v11 = v6;
      v10();

      uint64_t v12 = v37(v2, v7);
      uint64_t v14 = v13;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v2);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        uint64_t v9 = sub_10000C82C(0LL, v9[2] + 1LL, 1, v9);
      }
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1) {
        uint64_t v9 = sub_10000C82C((void *)(v15 > 1), v16 + 1, 1, v9);
      }
      v9[2] = v16 + 1;
      id v17 = &v9[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      char v18 = *(uint64_t (**)(void))((swift_isaMask & *v11) + 0x78LL);
      int v19 = v11;
      uint64_t v6 = (void *)v18();
    }

    while (v6);
  }

  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

  LODWORD(v39) = *((_DWORD *)v36 + 8);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  uint64_t object = v20._object;
  uint64_t v39 = 0x203A657A69535BLL;
  unint64_t v40 = 0xE700000000000000LL;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  unint64_t v22 = v40;
  swift_bridgeObjectRetain(v40);
  v23._uint64_t countAndFlagsBits = 0x203E2D2D20LL;
  v23._uint64_t object = (void *)0xE500000000000000LL;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  uint64_t v25 = v39;
  unint64_t v24 = v40;
  uint64_t v39 = (uint64_t)v9;
  uint64_t v26 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  unint64_t v27 = sub_100013F74();
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v26, v27);
  BOOL v30 = v29;
  swift_bridgeObjectRelease(v9);
  uint64_t v39 = v25;
  unint64_t v40 = v24;
  swift_bridgeObjectRetain(v24);
  v31._uint64_t countAndFlagsBits = v28;
  v31._uint64_t object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v30);
  unint64_t v32 = v40;
  swift_bridgeObjectRetain(v40);
  v33._uint64_t countAndFlagsBits = 93LL;
  v33._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  return v39;
}

uint64_t sub_1000507E0()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_1000507E8()
{
  return swift_deallocClassInstance(v0, 36LL, 7LL);
}

uint64_t sub_100050814()
{
  uint64_t result = swift_allocObject(v0, 36LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 3sub_100006034(v0 + 2) = 0;
  return result;
}

uint64_t sub_10005083C(int a1)
{
  uint64_t v3 = swift_allocObject(v1, 40LL, 7LL);
  sub_100050878(a1, v4, v5, v6);
  return v3;
}

uint64_t *sub_100050878(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  *((_DWORD *)v4 + 4) = a1;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 88);
  uint64_t v8 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(255LL, v6, v7, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, &type metadata for String, v8, 0LL, 0LL);
  uint64_t v10 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  void v4[3] = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, v8, &protocol witness table for String);
  uint64_t v12 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList(0LL, v6, v7, v11);
  uint64_t v13 = swift_allocObject(v12, 36LL, 7LL);
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(_DWORD *)(v13 + 3sub_100006034(v0 + 2) = 0;
  v4[4] = v13;
  return v4;
}

uint64_t sub_100050930()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v0 + 3, v7, 0LL, 0LL);
  uint64_t v2 = v0[3];
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(v1 + 80),  *(void *)(v1 + 88),  v3);
  __n128 v4 = swift_bridgeObjectRetain(v2);
  uint64_t v5 = Dictionary.count.getter(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_1000509B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v8 + 88);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v5;
  unint64_t v46 = v10;
  uint64_t v11 = v10(v3, v9);
  uint64_t v13 = v12;
  swift_beginAccess(v1 + 3, v56, 0LL, 0LL);
  uint64_t v14 = v1[3];
  v52[0] = v11;
  v52[1] = v13;
  uint64_t v16 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0LL, v3, v9, v15);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  char v47 = (void (*)(void, void))v16;
  Dictionary.subscript.getter(&v53, v52, v14, &type metadata for String, v16, &protocol witness table for String);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  id v17 = v53;
  uint64_t v51 = v4;
  uint64_t v48 = v13;
  uint64_t v49 = v11;
  if (v53)
  {
    uint64_t v18 = v2[4];
    int v19 = *(void (**)(void *))(*(void *)v18 + 208LL);
    swift_retain(v18);
    v19(v17);
    swift_release(v18);
    int64_t v53 = (void *)v11;
    uint64_t v54 = v13;
    swift_beginAccess(v2 + 3, v52, 33LL, 0LL);
    Swift::String v20 = v47;
    uint64_t v21 = type metadata accessor for Dictionary(0LL, &type metadata for String, v47, &protocol witness table for String);
    Dictionary.removeValue(forKey:)(&v55, &v53, v21);
    swift_endAccess(v52);

    (*(void (**)(void))((swift_isaMask & *v17) + 0xA8LL))();
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v3);
    unint64_t v22 = v2 + 3;
    Swift::String v23 = v20;
  }

  else
  {
    unint64_t v22 = v2 + 3;
    Swift::String v23 = v47;
  }

  uint64_t v24 = *((unsigned int *)v2 + 4);
  uint64_t v25 = v2[3];
  __n128 v26 = swift_bridgeObjectRetain(v25);
  uint64_t v27 = Dictionary.count.getter(v26);
  swift_bridgeObjectRelease(v25);
  if (v27 == v24)
  {
    uint64_t v28 = v2[4];
    unint64_t v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 200LL);
    uint64_t v30 = swift_retain(v28);
    Swift::String v31 = (void *)v29(v30);
    swift_release(v28);
    if (v31)
    {
      unint64_t v45 = *(void (**)(void))((swift_isaMask & *v31) + 0xA8LL);
      unint64_t v32 = v45;
      Swift::String v33 = v31;
      v32();
      uint64_t v34 = v46(v3, v9);
      uint64_t v36 = v35;
      char v47 = *(void (**)(void, void))(v51 + 8);
      v47(v7, v3);
      int64_t v53 = (void *)v34;
      uint64_t v54 = v36;
      swift_beginAccess(v22, v52, 33LL, 0LL);
      uint64_t v37 = type metadata accessor for Dictionary( 0LL,  &type metadata for String,  v23,  &protocol witness table for String);
      Dictionary.removeValue(forKey:)(&v55, &v53, v37);
      swift_endAccess(v52);
      swift_bridgeObjectRelease(v36);

      v45();
      (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

      v47(v7, v3);
    }
  }

  uint64_t v38 = v2[4];
  uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v38 + 192LL);
  swift_retain(v38);
  unint64_t v40 = (void *)v39(v50);
  swift_release(v38);
  int64_t v53 = (void *)v49;
  uint64_t v54 = v48;
  id v55 = v40;
  swift_beginAccess(v22, v52, 33LL, 0LL);
  uint64_t v41 = type metadata accessor for Dictionary(0LL, &type metadata for String, v23, &protocol witness table for String);
  unint64_t v42 = v40;
  Dictionary.subscript.setter(&v55, &v53, v41);
  uint64_t v43 = swift_endAccess(v52);
  (*(void (**)(uint64_t))((swift_isaMask & *v42) + 0xA8LL))(v43);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v3, v9);

  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v7, v3);
}

uint64_t sub_100050E0C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v19[0] = v5;
  v19[1] = v8;
  swift_beginAccess(v1 + 3, v18, 33LL, 0LL);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v11 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(255LL, v3, v9, v10);
  uint64_t v12 = type metadata accessor for Dictionary(0LL, &type metadata for String, v11, &protocol witness table for String);
  Dictionary.removeValue(forKey:)(&v20, v19, v12);
  uint64_t result = swift_endAccess(v18);
  uint64_t v14 = v20;
  if (v20)
  {
    uint64_t v15 = v1[4];
    uint64_t v16 = *(void (**)(void *))(*(void *)v15 + 208LL);
    swift_retain(v15);
    v16(v14);
    uint64_t v17 = swift_release(v15);
    (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0xA8LL))(v17);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  }

  return result;
}

uint64_t sub_100050F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  swift_beginAccess(v3 + 3, v17, 0LL, 0LL);
  uint64_t v8 = v3[3];
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v9 = *(void *)(v7 + 80);
  uint64_t v11 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  v9,  *(void *)(v7 + 88),  v10);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v8);
  Dictionary.subscript.getter(&v16, v15, v8, &type metadata for String, v11, &protocol witness table for String);
  swift_bridgeObjectRelease(a2);
  uint64_t v12 = swift_bridgeObjectRelease(v8);
  uint64_t v13 = v16;
  if (!v16) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( a3,  1LL,  1LL,  v9);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0xA8LL))(v12);

  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(a3, 0LL, 1LL, v9);
}

uint64_t sub_100051064(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = *((unsigned int *)v1 + 4);
  swift_beginAccess(v1 + 3, v20, 0LL, 0LL);
  uint64_t v8 = v1[3];
  uint64_t v9 = *(void *)(v2 + 88);
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0LL, v3, v9, v10);
  __n128 v11 = swift_bridgeObjectRetain(v8);
  uint64_t v12 = Dictionary.count.getter(v11);
  swift_bridgeObjectRelease(v8);
  uint64_t v13 = 0LL;
  if (v12 != v7) {
    return v13;
  }
  uint64_t v14 = v1[4];
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 216LL);
  uint64_t v16 = swift_retain(v14);
  uint64_t v17 = (void *)v15(v16);
  uint64_t result = swift_release(v14);
  if (v17)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v17) + 0xA8LL))(result);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v3, v9);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000511D0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 224LL);
  uint64_t v3 = swift_retain(v1);
  uint64_t v4 = v2(v3);
  swift_release(v1);
  return v4;
}

uint64_t sub_100051220()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

id sub_10005124C(uint64_t a1)
{
  uint64_t v2 = (void *)(swift_isaMask & *(void *)v1);
  *(void *)&v1[v2[12]] = 0LL;
  *(void *)&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x68LL)] = 0LL;
  uint64_t v3 = v2[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))( &v1[*(void *)((swift_isaMask & *(void *)v1) + 0x70LL)],  a1,  v3);
  uint64_t v5 = (objc_class *)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  v3,  v2[11],  v4);
  v7.receiver = v1;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1000512F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( 0LL,  *(void *)(v4 + 80),  *(void *)(v4 + 88),  a4));
  return sub_10005124C(a1);
}

void sub_10005132C()
{
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode);
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMLimitedSizeCache.KMDoublyLinkedList);
}

uint64_t sub_100051374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000513C4( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.Int32 + 64,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t type metadata accessor for KMLimitedSizeCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000066C8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMLimitedSizeCache);
}

uint64_t sub_1000513A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000513C4(a1, a2, a3, (uint64_t)"\b", (uint64_t)"\b", (uint64_t)&value witness table for Builtin.Int32 + 64);
}

uint64_t sub_1000513C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4;
  uint64_t v8 = a5;
  uint64_t v9 = a6;
  return swift_initClassMetadata2();
}

uint64_t sub_100051404(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100051480()
{
  uint64_t v1 = (uint64_t *)v0;
  sub_100051680(v0, (uint64_t)v32);
  uint64_t v2 = v32[2];
  uint64_t v28 = v32[1];
  uint64_t v30 = v32[0];
  uint64_t v3 = v32[3];
  unint64_t v4 = v32[4];
  uint64_t v5 = v32[5];
  uint64_t v6 = v32[6];
  uint64_t v8 = v32[7];
  uint64_t v7 = v32[8];
  char v9 = v33;
  sub_100051680((uint64_t)v1, (uint64_t)&v34);
  uint64_t v10 = v44;
  if (v44 < 0)
  {
    v44 &= ~0x8000000000000000LL;
    sub_1000516A8((uint64_t)&v34, (uint64_t)v45);
    sub_1000516E4(v30, v28, v2, v3, v4, v5, v6, v8, v7, v9);
    sub_1000B48B4();
    uint64_t v23 = v24;
    sub_1000517E4(v1);
  }

  else
  {
    unint64_t v11 = v38;
    uint64_t v12 = v39;
    uint64_t v13 = v40;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    char v16 = v43;
    v45[0] = v34;
    v45[1] = v35;
    uint64_t v26 = v35;
    uint64_t v27 = v34;
    uint64_t v29 = v37;
    uint64_t v31 = v36;
    v45[2] = v36;
    v45[3] = v37;
    v45[4] = v38;
    v45[5] = v39;
    v45[6] = v40;
    v45[7] = v41;
    v45[8] = v42;
    char v46 = v43;
    sub_1000516E4(v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
    swift_retain(v10);
    _StringGuts.grow(_:)(17LL);
    sub_1000B48B4();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v19._uint64_t countAndFlagsBits = 0x736E657478652820LL;
    v19._uint64_t object = (void *)0xEC000000206E6F69LL;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v10 + 200LL))();
    uint64_t object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._uint64_t countAndFlagsBits = 41LL;
    v22._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
    swift_release(v10);
    sub_100039508(v27, v26, v31, v29, v11, v12, v13, v14, v15, v16);
    return v18;
  }

  return v23;
}

uint64_t sub_100051680(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = v3;
  return a2;
}

uint64_t sub_1000516A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000516E4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13 = result;
  switch(a10)
  {
    case 0:
    case 30:
    case 51:
      goto LABEL_3;
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
      goto LABEL_8;
    case 6:
    case 14:
    case 42:
      swift_bridgeObjectRetain(a2);
      uint64_t v13 = a4;
      goto LABEL_3;
    case 8:
      goto LABEL_9;
    case 13:
      uint64_t v13 = a9;
      swift_bridgeObjectRetain(a2);
      sub_10002B568(a4, a5);
      swift_bridgeObjectRetain(a7);
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      uint64_t v13 = a6;
      goto LABEL_3;
    case 18:
      uint64_t result = a2;
LABEL_8:
      swift_bridgeObjectRetain(result);
LABEL_9:
      uint64_t v13 = a3;
      goto LABEL_3;
    case 26:
      swift_bridgeObjectRetain(result);
LABEL_2:
      uint64_t v13 = a2;
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain(v13);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *sub_1000517E4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100051834( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0) {
    return sub_100039508(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  sub_100039508(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return swift_release(a11);
}

uint64_t sub_10005189C()
{
  return sub_100051480();
}

void *sub_1000518D0()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_1000518DC()
{
  return sub_1000518E8((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000518E8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __int128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001593F0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __int128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  uint64_t v22 = v3 + 64;
  swift_retain(v3);
  uint64_t v21 = v1;
  uint64_t v6 = v1 + 56;
  while (1)
  {
    uint64_t v23 = v5;
    uint64_t v7 = *(void *)(v6 - 24);
    uint64_t v8 = *(void *)(v6 - 16);
    uint64_t v10 = *(void *)(v6 - 8);
    uint64_t v9 = *(void *)v6;
    unint64_t v11 = *(void *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 32);
    uint64_t v25 = *(void *)(v6 + 24);
    uint64_t v26 = *(void *)(v6 + 8);
    uint64_t v13 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v6 + 40);
    char v14 = *(_BYTE *)(v6 + 56);
    swift_retain(v7);
    sub_1000516E4(v8, v10, v9, v26, v11, v25, v12, v24, v13, v14);
    unint64_t result = sub_1000549AC(v7);
    if ((v16 & 1) != 0) {
      break;
    }
    *(void *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v7;
    uint64_t v17 = v4[7] + 80 * result;
    *(void *)uint64_t v17 = v8;
    *(void *)(v17 + 8) = v10;
    *(void *)(v17 + 16) = v9;
    *(void *)(v17 + 24) = v26;
    *(void *)(v17 + 3sub_100006034(v0 + 2) = v11;
    *(void *)(v17 + 40) = v25;
    *(void *)(v17 + 48) = v12;
    *(void *)(v17 + 56) = v24;
    *(void *)(v17 + 64) = v13;
    *(_BYTE *)(v17 + 7sub_100006034(v0 + 2) = v14;
    uint64_t v18 = v4[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v6 += 88LL;
    void v4[2] = v20;
    uint64_t v5 = v23 - 1;
    if (v23 == 1)
    {
      swift_release(v4);
      uint64_t v1 = v21;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051A9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __int128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001593C0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __int128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v8 = *(v6 - 1);
    uint64_t v7 = *v6;
    swift_retain(v8);
    swift_retain(v7);
    unint64_t result = sub_1000549AC(v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v11) = v8;
    *(void *)(v4[7] + v11) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051BA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __int128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001593D8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __int128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051CBC(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100159400);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }

  sub_100005FB4(&qword_1001593D0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001A148(v13, (uint64_t)v5, &qword_100159400);
    unint64_t result = sub_100054A3C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for URL(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_12;
    }
    uint64_t v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v23 = v25;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100051E50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_1001593C8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void *)(a1 + 40);
  while (1)
  {
    char v7 = *((_BYTE *)v6 - 8);
    uint64_t v8 = *v6;
    swift_bridgeObjectRetain(*v6);
    unint64_t result = sub_100054AA8(v7);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(void *)(v4[7] + 8 * result) = v8;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100051F50()
{
  return &_swiftEmptySetSingleton;
}

unint64_t sub_100051F5C()
{
  return sub_100051A9C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051F68()
{
  return sub_100051BA4((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051F74()
{
  return sub_100051CBC((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051F80()
{
  return sub_100051E50((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100051F8C@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

void *sub_100051FA0(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v21 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0) {
      uint64_t v16 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v16 = v3;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    if (!v4) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (!v4) {
      goto LABEL_19;
    }
  }

  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }

  if ((v3 & 0xC000000000000001LL) != 0)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      BOOL v7 = sub_1000265C0( *(_BYTE *)(*(void *)(v6 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)
                      + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind),
             (char)a1);
      if (v7)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        uint64_t v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        specialized ContiguousArray._endMutation()(v9);
      }

      else
      {
        swift_unknownObjectRelease(v6);
      }
    }
  }

  else
  {
    char v10 = (void *)(v3 + 32);
    do
    {
      uint64_t v11 = *v10;
      char v12 = *(_BYTE *)(*(void *)(*v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)
                     + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      swift_retain(*v10);
      BOOL v13 = sub_1000265C0(v12, (char)a1);
      if (v13)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        uint64_t v14 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized ContiguousArray._endMutation()(v15);
      }

      else
      {
        swift_release(v11);
      }

      ++v10;
      --v4;
    }

    while (v4);
  }

void **sub_1000521F0(uint64_t (*a1)(uint64_t *), void **a2, unint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v25 = (void **)&_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  for (uint64_t i = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    unint64_t v9 = 0LL;
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v21 = v5;
    while (1)
    {
      if (v23)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        unint64_t v11 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v5);
          swift_release(v10);
          swift_release(v25);
          return v3;
        }

        goto LABEL_9;
      }

      if (v9 >= *(void *)(v22 + 16)) {
        break;
      }
      uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
      swift_retain(v10);
      unint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v24 = v10;
      uint64_t v3 = a2;
      char v12 = a1(&v24);
      if (v4) {
        goto LABEL_15;
      }
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v13 = i;
        uint64_t v14 = a1;
        uint64_t v15 = a2;
        uint64_t v16 = v25[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        unint64_t v17 = v16;
        a2 = v15;
        a1 = v14;
        uint64_t i = v13;
        uint64_t v5 = v21;
        uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        uint64_t v3 = (void **)&v25;
        specialized ContiguousArray._endMutation()(v18);
      }

      else
      {
        swift_release(v10);
      }

      ++v9;
      if (v11 == i)
      {
        uint64_t v3 = v25;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (v5 < 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  uint64_t v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  return v3;
}

uint64_t sub_1000523A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100010D14(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }

  else
  {
    uint64_t v7 = sub_10005A19C((uint64_t)v20, result, v5, 0LL, a1);
    uint64_t v8 = v20[0];
    uint64_t v9 = v20[1];
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v18 = v20[0];
    uint64_t v19 = v21;
    unint64_t v12 = v23;
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    uint64_t v16 = v27;
    char v17 = v28;
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 3sub_100006034(v0 + 2) = v11;
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v14;
    *(void *)(a2 + 64) = v15;
    *(void *)(a2 + 7sub_100006034(v0 + 2) = v16;
    *(_BYTE *)(a2 + 80) = v17;
    swift_retain(v7);
    sub_1000516E4(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
    swift_release(v7);
    return sub_100039508(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
  }

  return result;
}

uint64_t sub_100052500(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v89 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  char v91 = (char *)&v88 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v90 = (char *)&v88 - v10;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v88 - v11;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t v15 = swift_retain(v13);
  uint64_t v16 = sub_100052BF8(v15, v14);
  uint64_t v17 = swift_release(v13);
  uint64_t v94 = a1;
  if (v16)
  {
    uint64_t v18 = static os_log_type_t.info.getter(v17);
    uint64_t v19 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_10010F110;
    uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v13 + 200LL))();
    uint64_t v23 = v22;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_100026B64();
    *(void *)(v20 + 3sub_100006034(v0 + 2) = v21;
    *(void *)(v20 + 40) = v23;
    a1 = v94;
    unint64_t v24 = sub_100026BA8();
    uint64_t v25 = (void *)static OS_os_log.default.getter(v24);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v25, "Collision: replacing %{public}s", 31LL, 2LL, v20);
    swift_bridgeObjectRelease(v20);

    sub_100052CD0(v16);
    swift_release(v16);
  }

  swift_retain(v13);
  uint64_t v26 = swift_retain(a1);
  sub_10005513C(v26, v13);
  uint64_t v27 = swift_release(v13);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 144LL))(v27);
  uint64_t v30 = v29;
  *(void *)&__int128 v95 = v28;
  *((void *)&v95 + 1) = v29;
  uint64_t v92 = type metadata accessor for RealizedInfo(0LL);
  sub_1000D5610( (uint64_t)&v95,  v2 + 32,  (uint64_t)&type metadata for String,  v92,  (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRetain(v30);
  uint64_t v31 = sub_10005314C(v97, v28, v30);
  if (*v32)
  {
    uint64_t v100 = a1;
    uint64_t v33 = sub_100005FB4(&qword_100157EA8);
    uint64_t v34 = sub_100012860(&qword_100159308, type metadata accessor for RealizedInfo, (uint64_t)&unk_1001101BC);
    sub_1000D26EC(0, (uint64_t)&v100, v33, v34);
  }

  ((void (*)(void *, void))v31)(v97, 0LL);
  uint64_t v35 = swift_bridgeObjectRelease_n(v30, 2LL);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v13 + 112LL))(&v95, v35);
  if (v96)
  {
    sub_100005158(&v95, (uint64_t)v97);
    uint64_t v36 = v98;
    uint64_t v37 = v99;
    sub_100005110(v97, v98);
    (*(void (**)(uint64_t, uint64_t))(v37 + 64))(v36, v37);
    uint64_t v39 = v2 + 40;
    uint64_t v38 = *(void *)(v2 + 40);
    if (!*(void *)(v38 + 16) || (unint64_t v40 = sub_100054A3C((uint64_t)v12), (v41 & 1) == 0))
    {
      uint64_t v48 = v93;
      char v43 = *(void (**)(char *, uint64_t))(v93 + 8);
      v43(v12, v4);
LABEL_32:
      uint64_t v75 = v98;
      uint64_t v76 = v99;
      sub_100005110(v97, v98);
      uint64_t v77 = (uint64_t)v90;
      (*(void (**)(uint64_t, uint64_t))(v76 + 64))(v75, v76);
      uint64_t v78 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      sub_1000D5610(v77, v39, v4, v92, v78);
      uint64_t v79 = v91;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v91, v77, v4);
      uint64_t v81 = sub_1000531B8(&v95);
      if (*v80)
      {
        uint64_t v82 = v80;
        uint64_t v83 = v94;
        uint64_t v84 = swift_retain(v94);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
        unint64_t v86 = *(void *)((*v82 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v85 = *(void *)((*v82 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v86 >= v85 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1LL);
        }
        uint64_t v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
        specialized Array._endMutation()(v87);
      }

      ((void (*)(__int128 *, void))v81)(&v95, 0LL);
      v43(v79, v4);
      v43((char *)v77, v4);
      return sub_100006034(v97);
    }

    uint64_t v42 = *(void *)(*(void *)(v38 + 56) + 8 * v40);
    char v43 = *(void (**)(char *, uint64_t))(v93 + 8);
    swift_bridgeObjectRetain(v42);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v12, v4);
    if ((unint64_t)v42 >> 62)
    {
      if (v42 < 0) {
        uint64_t v74 = v42;
      }
      else {
        uint64_t v74 = v42 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v42);
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v74);
      uint64_t result = swift_bridgeObjectRelease(v42);
      if (v45) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v45 = *(void *)((v42 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v45)
      {
LABEL_10:
        if (v45 < 1)
        {
          __break(1u);
          return result;
        }

        for (uint64_t i = 0LL; i != v45; ++i)
        {
          if ((v42 & 0xC000000000000001LL) != 0)
          {
            uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v42);
          }

          else
          {
            uint64_t v47 = *(void *)(v42 + 8 * i + 32);
            swift_retain(v47);
          }

          sub_100052CD0(v47);
          swift_release(v47);
        }
      }
    }

    swift_bridgeObjectRelease(v42);
    uint64_t v48 = v93;
    goto LABEL_32;
  }

  uint64_t v49 = sub_100012824((uint64_t)&v95, &qword_100157C58);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120LL))(v49);
  if (result)
  {
    uint64_t v50 = result;
    uint64_t v51 = result + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
    uint64_t v52 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v53 = v92;
    sub_1000D5610(v51, v2 + 40, v4, v92, v52);
    uint64_t v54 = v93;
    id v55 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v89, v51, v4);
    uint64_t v57 = sub_1000531B8(v97);
    if (*v56)
    {
      uint64_t v58 = v56;
      uint64_t v59 = v94;
      uint64_t v60 = swift_retain(v94);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
      unint64_t v62 = *(void *)((*v58 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v61 = *(void *)((*v58 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v62 >= v61 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1LL);
      }
      uint64_t v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
      specialized Array._endMutation()(v63);
    }

    ((void (*)(void *, void))v57)(v97, 0LL);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v4);
    LOBYTE(v95) = *(_BYTE *)(v50 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    char v64 = v95;
    unint64_t v65 = sub_10004FA4C();
    sub_1000D5610((uint64_t)&v95, v2 + 48, (uint64_t)&type metadata for CollectionKind, v53, v65);
    unint64_t v67 = sub_10005329C(v97, v64);
    uint64_t v68 = v94;
    if (*v66)
    {
      int64_t v69 = v66;
      uint64_t v70 = swift_retain(v94);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
      unint64_t v72 = *(void *)((*v69 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v71 = *(void *)((*v69 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v72 >= v71 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1LL);
      }
      uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v68);
      specialized Array._endMutation()(v73);
    }

    ((void (*)(void *, void))v67)(v97, 0LL);
    return swift_release(v50);
  }

  return result;
}

uint64_t sub_100052BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v8 = sub_1000549AC(a1);
      if ((v9 & 1) != 0)
      {
        uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v8);
        swift_retain(v7);
        return v7;
      }
    }

    return 0LL;
  }

  if (a2 >= 0) {
    uint64_t v2 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v4 = swift_retain(a1);
  uint64_t v5 = __CocoaDictionary.lookup(_:)(v4, v2);
  swift_release(a1);
  if (!v5) {
    return 0LL;
  }
  uint64_t v11 = v5;
  uint64_t v6 = type metadata accessor for RealizedInfo(0LL);
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v6, 7LL);
  uint64_t v7 = v12;
  swift_unknownObjectRelease(v5);
  return v7;
}

uint64_t sub_100052CD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)v46 - v12;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t v15 = swift_retain(v13);
  uint64_t v16 = sub_100052BF8(v15, v14);
  swift_release(v13);
  swift_release(v16);
  if (!v16) {
    return v16 != 0;
  }
  uint64_t v48 = v11;
  uint64_t v49 = (void (*)(void *, void))v7;
  uint64_t v50 = v8;
  unint64_t v17 = swift_retain(v13);
  uint64_t v18 = sub_100054FDC(v17);
  swift_release(v13);
  uint64_t v19 = swift_release(v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 144LL))(v19);
  uint64_t v22 = (void (*)(void *))v21;
  unint64_t v24 = (void (*)(void *, void))sub_10005314C(v52, v20, v21);
  if (*v23)
  {
    uint64_t v25 = v23;
    v46[1] = v2;
    uint64_t v47 = v16;
    swift_retain(a1);
    uint64_t v26 = 0LL;
    uint64_t v16 = sub_10005A524(v25, a1);
    uint64_t v27 = (void (*)(void *))a1;
    swift_release(a1);
    uint64_t v28 = *v25;
    if ((unint64_t)*v25 >> 62)
    {
      if (v28 < 0) {
        uint64_t v43 = *v25;
      }
      else {
        uint64_t v43 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v25);
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v28);
      if (v29 >= v16) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v29 >= v16)
      {
LABEL_5:
        a1 = (uint64_t)v27;
        sub_10005AFFC(v16, v29, type metadata accessor for RealizedInfo);
        v24(v52, 0LL);
        uint64_t v16 = v47;
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_27;
  }

  v24(v52, 0LL);
LABEL_7:
  uint64_t v30 = swift_bridgeObjectRelease(v22);
  (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v30);
  unint64_t v24 = v49;
  uint64_t v31 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, void (*)(void *, void)))(v50 + 48))(v6, 1LL, v49) == 1)
  {
    for (uint64_t i = sub_100012824((uint64_t)v6, (uint64_t *)&unk_10015BA30); ; uint64_t i = v39(v51, v24))
    {
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120LL))(i);
      if (!v40) {
        break;
      }
      uint64_t v22 = (void (*)(void *))v40;
      uint64_t v27 = sub_10005329C(v52, *(_BYTE *)(v40 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      if (!*v41) {
        goto LABEL_20;
      }
      uint64_t v42 = v41;
      swift_retain(a1);
      uint64_t v26 = sub_10005A524(v42, a1);
      swift_release(a1);
      uint64_t v29 = *v42;
      if ((unint64_t)*v42 >> 62)
      {
LABEL_27:
        if (v29 < 0) {
          uint64_t v44 = v29;
        }
        else {
          uint64_t v44 = v29 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v29);
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v44);
        swift_bridgeObjectRelease(v29);
        if (v37 >= v26)
        {
LABEL_19:
          sub_10005AFFC(v26, v37, type metadata accessor for RealizedInfo);
LABEL_20:
          ((void (*)(void *, void))v27)(v52, 0LL);
          swift_release(v22);
          return v16 != 0;
        }
      }

      else
      {
        uint64_t v37 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v37 >= v26) {
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_32:
      if (v37 < 0) {
        uint64_t v45 = v37;
      }
      else {
        uint64_t v45 = v37 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v37);
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v45);
      uint64_t result = swift_bridgeObjectRelease(v37);
LABEL_12:
      a1 = (uint64_t)v27;
      sub_10005AFFC((uint64_t)v24, v38, type metadata accessor for RealizedInfo);
      ((void (*)(void *, void))v22)(v52, 0LL);
      unint64_t v24 = v49;
LABEL_14:
      uint64_t v39 = *(uint64_t (**)(char *, void))(v50 + 8);
      v39(v48, v24);
    }

    return v16 != 0;
  }

  uint64_t v33 = v51;
  (*(void (**)(char *, char *, void (*)(void *, void)))(v31 + 32))(v51, v6, v24);
  (*(void (**)(char *, char *, void (*)(void *, void)))(v31 + 16))(v48, v33, v24);
  uint64_t v22 = sub_1000531B8(v52);
  if (!*v34)
  {
    ((void (*)(void *, void))v22)(v52, 0LL);
    goto LABEL_14;
  }

  uint64_t v35 = v34;
  swift_retain(a1);
  unint64_t v24 = (void (*)(void *, void))sub_10005A524(v35, a1);
  uint64_t v27 = (void (*)(void *))a1;
  uint64_t result = swift_release(a1);
  uint64_t v37 = *v35;
  uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_36:
  __break(1u);
  return result;
}

void (*sub_10005314C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  void v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100057254(v6, a2, a3);
  return sub_10002936C;
}

void (*sub_1000531B8(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_100057128(v2, (uint64_t)v5);
  return sub_100053248;
}

void sub_100053248(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  uint64_t v4 = *(void *)(*a1 + 40LL);
  (*(void (**)(void, void))(*a1 + 56LL))(*a1, 0LL);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_10005329C(void *a1, char a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100057070(v4, a2);
  return sub_1000532E8;
}

void sub_1000532E8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

uint64_t sub_100053318(uint64_t a1, uint64_t a2)
{
  return sub_1000543CC( a1,  a2,  (uint64_t)sub_100054374,  (void (*)(void *__return_ptr, void *, uint64_t, void, __n128))sub_10005410C,  &qword_100159310,  (uint64_t (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10005333C(uint64_t a1)
{
  void (*v16)(void *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void v32[12];
  _BYTE v33[104];
  uint64_t v2 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v4, a1, v5);
  swift_storeEnumTagMultiPayload(v4, v2, 1LL);
  sub_100053F14((uint64_t)v4, (uint64_t)v32);
  uint64_t v7 = v32[0];
  uint64_t v6 = v32[1];
  uint64_t v8 = v32[2];
  uint64_t v9 = v32[3];
  uint64_t v10 = v32[4];
  uint64_t v11 = v32[5];
  uint64_t v12 = v32[6];
  uint64_t v13 = v32[7];
  uint64_t v21 = v32[9];
  uint64_t v22 = v32[8];
  uint64_t v20 = v32[10];
  sub_1000263D8((uint64_t)v32, (uint64_t)v33, &qword_100159320);
  if (v33[88] == 1)
  {
    v23[0] = v7;
    v23[1] = v6;
    void v23[2] = v8;
    unint64_t v24 = v9;
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    uint64_t v27 = v12;
    uint64_t v28 = v13;
    uint64_t v29 = v22;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
    unint64_t v14 = sub_10005AE1C();
    swift_willThrowTypedImpl(v23, &type metadata for LookupError, v14);
    sub_10005AF78((uint64_t)v32, (uint64_t (*)(void))&_swift_release);
    sub_10005ADE0((uint64_t)v4);
    return 0LL;
  }

  sub_10005ADE0((uint64_t)v4);
  uint64_t v15 = *(void *)(v7 + 24);
  uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v15 + 112LL);
  unint64_t v17 = swift_retain(v15);
  v16(v23, v17);
  swift_release(v15);
  if (!v24)
  {
    sub_10005AF78((uint64_t)v32, (uint64_t (*)(void))&_swift_release);
    sub_100012824((uint64_t)v23, &qword_100157C58);
    return 0LL;
  }

  sub_100012824((uint64_t)v23, &qword_100157C58);
  return v7;
}

void sub_10005350C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005B2A4(a1, (uint64_t)v5);
  uint64_t v6 = (char *)sub_1000535E0 + 4 * byte_100110C62[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

void **sub_1000535E0()
{
  uint64_t v4 = v3[1];
  uint64_t v5 = *(void *)(v1 + 32);
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_100006114(*v3, v3[1]), (v7 & 1) != 0))
  {
    unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease(v4);
    if (!v2) {
      return (void **)v8;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v4);
    unint64_t v8 = 0LL;
    if (!v2) {
      return (void **)v8;
    }
  }

  if (v8) {
    return sub_10005A374(v8, v2, v0);
  }
  return (void **)v8;
}

uint64_t sub_100053738(uint64_t a1)
{
  void (*v16)(void *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void v34[5];
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    uint64_t v37 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v4 = ((uint64_t (*)(void))__CocoaDictionary.Iterator.next())();
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      uint64_t v33 = v3;
      uint64_t v8 = type metadata accessor for OSExtension(0LL);
      do
      {
        v34[0] = v6;
        swift_dynamicCast(&v35, v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        v34[0] = v7;
        uint64_t v13 = type metadata accessor for RealizedInfo(0LL);
        swift_dynamicCast(&v36, v34, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
        uint64_t v14 = v35;
        uint64_t v15 = v36;
        uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v35 + 112LL);
        swift_retain(v35);
        unint64_t v17 = swift_retain(v15);
        v16(v34, v17);
        uint64_t v18 = v34[3];
        sub_100012824((uint64_t)v34, &qword_100157C58);
        swift_release(v14);
        swift_release(v15);
        if (v18)
        {
          uint64_t v19 = v37;
          uint64_t v20 = v37[2];
          if (v37[3] <= v20)
          {
            uint64_t v21 = v20 + 1;
            swift_retain(v14);
            swift_retain(v15);
            sub_100055DE0(v21, 1LL);
            uint64_t v19 = v37;
          }

          else
          {
            swift_retain(v14);
            swift_retain(v15);
          }

          v34[0] = v14;
          uint64_t v22 = v19[5];
          uint64_t v23 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
          uint64_t v25 = v19 + 8;
          uint64_t v26 = -1LL << *((_BYTE *)v19 + 32);
          uint64_t v27 = result & ~v26;
          uint64_t v28 = v27 >> 6;
          if (((-1LL << v27) & ~v19[(v27 >> 6) + 8]) != 0)
          {
            unint64_t v9 = __clz(__rbit64((-1LL << v27) & ~v19[(v27 >> 6) + 8])) | v27 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            uint64_t v29 = 0;
            uint64_t v30 = (unint64_t)(63 - v26) >> 6;
            do
            {
              if (++v28 == v30 && (v29 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              uint64_t v31 = v28 == v30;
              if (v28 == v30) {
                uint64_t v28 = 0LL;
              }
              v29 |= v31;
              unint64_t v32 = v25[v28];
            }

            while (v32 == -1);
            unint64_t v9 = __clz(__rbit64(~v32)) + (v28 << 6);
          }

          *(void *)((char *)v25 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v9;
          uint64_t v10 = 8 * v9;
          *(void *)(v19[6] + v10) = v14;
          *(void *)(v19[7] + v10) = v15;
          ++v19[2];
        }

        swift_release(v15);
        uint64_t v11 = swift_release(v14);
        uint64_t v6 = __CocoaDictionary.Iterator.next()(v11);
        uint64_t v7 = v12;
      }

      while (v6);
      uint64_t v2 = v37;
      uint64_t v3 = v33;
    }

    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    sub_10000610C(v3 | 0x8000000000000000LL);
  }

  else
  {
    uint64_t v2 = (void *)sub_1000579A0(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057C50);
    swift_bridgeObjectRelease(v1);
  }

  return (uint64_t)v2;
}

uint64_t sub_100053A44(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    uint64_t v36 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v4 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v5 = __CocoaDictionary.Iterator.next()(v4);
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v9 = type metadata accessor for OSExtension(0LL);
      uint64_t v10 = a2;
      do
      {
        uint64_t v33 = v7;
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
        uint64_t v33 = v8;
        uint64_t v15 = type metadata accessor for RealizedInfo(0LL);
        swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v15, 7LL);
        uint64_t v16 = v34;
        uint64_t v17 = v35;
        if ((unint64_t *)*v34 == v10)
        {
          uint64_t v18 = v36;
          unint64_t v19 = v36[2];
          if (v36[3] <= v19)
          {
            uint64_t v20 = v19 + 1;
            swift_retain(v34);
            swift_retain(v17);
            sub_100055DE0(v20, 1LL);
            uint64_t v18 = v36;
          }

          else
          {
            swift_retain(v34);
            swift_retain(v17);
          }

          uint64_t v33 = (uint64_t)v16;
          uint64_t v21 = v18[5];
          uint64_t v22 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v9, v22);
          unint64_t v24 = v18 + 8;
          uint64_t v25 = -1LL << *((_BYTE *)v18 + 32);
          unint64_t v26 = result & ~v25;
          unint64_t v27 = v26 >> 6;
          if (((-1LL << v26) & ~v18[(v26 >> 6) + 8]) != 0)
          {
            unint64_t v11 = __clz(__rbit64((-1LL << v26) & ~v18[(v26 >> 6) + 8])) | v26 & 0x7FFFFFFFFFFFFFC0LL;
            uint64_t v10 = a2;
          }

          else
          {
            char v28 = 0;
            unint64_t v29 = (unint64_t)(63 - v25) >> 6;
            uint64_t v10 = a2;
            do
            {
              if (++v27 == v29 && (v28 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v30 = v27 == v29;
              if (v27 == v29) {
                unint64_t v27 = 0LL;
              }
              v28 |= v30;
              uint64_t v31 = v24[v27];
            }

            while (v31 == -1);
            unint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
          }

          *(void *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
          uint64_t v12 = 8 * v11;
          *(void *)(v18[6] + v1sub_100006034(v0 + 2) = v16;
          *(void *)(v18[7] + v1sub_100006034(v0 + 2) = v17;
          ++v18[2];
        }

        swift_release(v17);
        uint64_t v13 = swift_release(v16);
        uint64_t v7 = __CocoaDictionary.Iterator.next()(v13);
        uint64_t v8 = v14;
      }

      while (v7);
      uint64_t v3 = v36;
    }

    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    sub_10000610C(v4 | 0x8000000000000000LL);
  }

  else
  {
    uint64_t v3 = sub_10005783C(a1, a2);
    swift_bridgeObjectRelease(v2);
  }

  return (uint64_t)v3;
}

void sub_100053D18(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v30 = v7;
  swift_bridgeObjectRetain(a2);
  sub_10005C82C(&v30);
  uint64_t v8 = sub_10005ABE4(v7, a1, (uint64_t)a2);
  swift_bridgeObjectRelease(a2);
  sub_10005C854(&v30);
  if (!*(void *)(v8 + 16))
  {
    swift_release(v8);
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v17._uint64_t countAndFlagsBits = a1;
    v17._uint64_t object = a2;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0x6F6620746F6E2027LL;
    v18._uint64_t object = (void *)0xEB00000000646E75LL;
    String.append(_:)(v18);
    uint64_t v12 = (void *)0xD00000000000001BLL;
    *(void *)&__int128 v15 = 0x80000001001238D0LL;
    __int128 v16 = 0uLL;
    unint64_t v10 = 0x8000000000000000LL;
    uint64_t v11 = 10LL;
LABEL_8:
    __int128 v13 = 0uLL;
    __int128 v14 = 0uLL;
    goto LABEL_9;
  }

  uint64_t v9 = swift_retain(v8);
  sub_1000523A4(v9, (uint64_t)&v23);
  swift_release(v8);
  unint64_t v10 = v23;
  if (!v23)
  {
    swift_release(v8);
    __break(1u);
    goto LABEL_11;
  }

  sub_100039508( (uint64_t)v24,  v25,  *((uint64_t *)&v25 + 1),  v26,  *((unint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  *((uint64_t *)&v28 + 1),  v29);
  if (*(void *)(v8 + 16) != 1LL)
  {
    uint64_t v12 = sub_100054EEC(v8);
    swift_release(v8);
    uint64_t v11 = 0LL;
    __int128 v15 = 0uLL;
    __int128 v16 = 0uLL;
    goto LABEL_8;
  }

  sub_1000523A4(v8, (uint64_t)&v23);
  swift_release(v8);
  if (v23)
  {
    uint64_t v11 = v29;
    __int128 v21 = v27;
    __int128 v22 = v28;
    __int128 v19 = v25;
    __int128 v20 = v26;
    uint64_t v12 = v24;
    swift_release(v23);
    __int128 v13 = v21;
    __int128 v14 = v22;
    __int128 v15 = v19;
    __int128 v16 = v20;
LABEL_9:
    *(void *)a3 = v12;
    *(_OWORD *)(a3 + 8) = v15;
    *(_OWORD *)(a3 + 24) = v16;
    *(_OWORD *)(a3 + 40) = v13;
    *(_OWORD *)(a3 + 56) = v14;
    *(void *)(a3 + 7sub_100006034(v0 + 2) = v11;
    *(void *)(a3 + 80) = v10;
    return;
  }

uint64_t sub_100053F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10005350C(a1);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8LL;
  if (!((unint64_t)v7 >> 62))
  {
    uint64_t result = *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }

  if (v7 >= 0) {
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v7);
  if (!result)
  {
LABEL_11:
    swift_bridgeObjectRelease(v8);
LABEL_12:
    sub_10005B2A4(a1, (uint64_t)v6);
    if (swift_getEnumCaseMultiPayload(v6, v4))
    {
      uint64_t result = sub_10005ADE0((uint64_t)v6);
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      unint64_t v12 = 0x8000000100123890LL;
      char v22 = 1;
      unint64_t v21 = 0x8000000000000000LL;
      uint64_t v11 = 0xD000000000000032LL;
      uint64_t v20 = 10LL;
    }

    else
    {
      uint64_t v23 = *v6;
      __int128 v26 = (void *)v6[1];
      sub_100053D18(v23, v26, (uint64_t)v27);
      uint64_t v11 = v27[0];
      uint64_t v14 = v27[3];
      uint64_t v24 = v27[2];
      unint64_t v25 = v27[1];
      uint64_t v15 = v27[4];
      uint64_t v16 = v27[5];
      uint64_t v17 = v27[6];
      uint64_t v18 = v27[7];
      uint64_t v19 = v27[8];
      uint64_t v20 = v27[9];
      unint64_t v21 = v27[10];
      uint64_t result = swift_bridgeObjectRelease(v26);
      uint64_t v13 = v24;
      unint64_t v12 = v25;
      char v22 = 1;
    }

    goto LABEL_15;
  }

void sub_10005410C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10005350C(a1);
  unint64_t v8 = v7;
  if (v7)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    unint64_t v18 = 0LL;
    unint64_t v19 = v7;
  }

  else
  {
    sub_10005B2A4(a1, (uint64_t)v6);
    if (swift_getEnumCaseMultiPayload(v6, v4))
    {
      sub_10005ADE0((uint64_t)v6);
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      unint64_t v9 = 0x8000000100123890LL;
      unint64_t v18 = 0x8000000000000000LL;
      unint64_t v19 = 0xD000000000000032LL;
      uint64_t v17 = 10LL;
    }

    else
    {
      uint64_t v20 = *v6;
      unint64_t v25 = (void *)v6[1];
      sub_100053D18(v20, v25, (uint64_t)v26);
      unint64_t v19 = v26[0];
      uint64_t v23 = v26[2];
      unint64_t v24 = v26[1];
      uint64_t v12 = v26[4];
      uint64_t v22 = v26[3];
      uint64_t v13 = v26[5];
      uint64_t v14 = v26[6];
      uint64_t v15 = v26[7];
      uint64_t v16 = v26[8];
      uint64_t v17 = v26[9];
      unint64_t v18 = v26[10];
      swift_bridgeObjectRelease(v25);
      uint64_t v10 = v23;
      unint64_t v9 = v24;
      uint64_t v11 = v22;
    }
  }

  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 3sub_100006034(v0 + 2) = v12;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 7sub_100006034(v0 + 2) = v17;
  *(void *)(a2 + 80) = v18;
  *(_BYTE *)(a2 + 88) = v8 == 0;
}

uint64_t sub_1000542A4(uint64_t a1)
{
  uint64_t v1 = v15[0];
  uint64_t v2 = v15[1];
  uint64_t v3 = v15[2];
  uint64_t v4 = v15[3];
  uint64_t v5 = v15[4];
  uint64_t v6 = v15[5];
  uint64_t v7 = v15[6];
  uint64_t v8 = v15[7];
  uint64_t v9 = v15[8];
  uint64_t v10 = v15[9];
  uint64_t v13 = v15[10];
  sub_1000263D8((uint64_t)v15, (uint64_t)v16, &qword_100159320);
  if (v16[88] == 1)
  {
    v14[0] = v1;
    v14[1] = v2;
    void v14[2] = v3;
    v14[3] = v4;
    v14[4] = v5;
    void v14[5] = v6;
    v14[6] = v7;
    v14[7] = v8;
    v14[8] = v9;
    v14[9] = v10;
    v14[10] = v13;
    unint64_t v11 = sub_10005AE1C();
    swift_willThrowTypedImpl(v14, &type metadata for LookupError, v11);
    sub_10005AF78((uint64_t)v15, (uint64_t (*)(void))&_swift_release);
    return 0LL;
  }

  return v1;
}

BOOL sub_100054378(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 24) + 112LL))(v3);
  BOOL v1 = v3[3] != 0LL;
  sub_100012824((uint64_t)v3, &qword_100157C58);
  return v1;
}

uint64_t sub_1000543CC( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, void *, uint64_t, void, __n128), uint64_t *a5, uint64_t (*a6)(void))
{
  unsigned __int8 v29 = a6;
  uint64_t v30 = a5;
  uint64_t v10 = type metadata accessor for LookupSpec(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  void *v12 = a1;
  v12[1] = a2;
  swift_storeEnumTagMultiPayload(v12, v13, 0LL);
  __n128 v14 = swift_bridgeObjectRetain(a2);
  a4(v32, v12, a3, 0LL, v14);
  uint64_t v15 = v32[0];
  uint64_t v16 = v32[1];
  uint64_t v17 = v32[2];
  uint64_t v18 = v32[3];
  uint64_t v19 = v32[4];
  uint64_t v20 = v32[5];
  uint64_t v21 = v32[6];
  uint64_t v22 = v32[7];
  uint64_t v27 = v32[9];
  uint64_t v28 = v32[8];
  uint64_t v26 = v32[10];
  sub_10005ADE0((uint64_t)v12);
  sub_1000263D8((uint64_t)v32, (uint64_t)v33, v30);
  if (v33[88] == 1)
  {
    v31[0] = v15;
    v31[1] = v16;
    v31[2] = v17;
    v31[3] = v18;
    void v31[4] = v19;
    v31[5] = v20;
    v31[6] = v21;
    v31[7] = v22;
    v31[8] = v28;
    void v31[9] = v27;
    v31[10] = v26;
    unint64_t v23 = sub_10005AE1C();
    swift_willThrowTypedImpl(v31, &type metadata for LookupError, v23);
    sub_10005AF78((uint64_t)v32, v29);
    return 0LL;
  }

  return v15;
}

uint64_t sub_100054520(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v26 = a1;
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = sub_1000599FC((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B994, (uint64_t)v25, v3);
  uint64_t v5 = sub_1000579A0(v4, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100058308);
  swift_bridgeObjectRelease(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v1[4]);
  v1[4] = v5;
  uint64_t v6 = v1[5];
  unint64_t v23 = v1;
  uint64_t v24 = a1;
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = sub_1000596EC((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B994, (uint64_t)v22, v6);
  uint64_t v8 = sub_1000579A0(v7, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057FDC);
  swift_bridgeObjectRelease(v6);
  swift_release(v7);
  swift_bridgeObjectRelease(v1[5]);
  v1[5] = v8;
  uint64_t v9 = v1[6];
  uint64_t v20 = v1;
  uint64_t v21 = a1;
  swift_bridgeObjectRetain(v9);
  uint64_t v10 = sub_1000594D0((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B994, (uint64_t)v19, v9);
  uint64_t v11 = sub_1000579A0(v10, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057E2C);
  swift_bridgeObjectRelease(v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v1[6]);
  v1[6] = v11;
  uint64_t v12 = v1[3];
  uint64_t v17 = v1;
  uint64_t v18 = a1;
  swift_bridgeObjectRetain(v12);
  uint64_t v14 = sub_10005B658(v13, (uint64_t (*)(uint64_t *, uint64_t))sub_10005B9F8, (uint64_t)&v16);
  uint64_t result = swift_bridgeObjectRelease(v1[3]);
  v1[3] = v14;
  return result;
}

uint64_t sub_100054680()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t ApprovalDB.entries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *BOOL v1 = a1;
  return result;
}

uint64_t (*sub_1000546B0())(void)
{
  return nullsub_1;
}

uint64_t sub_1000546C0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t sub_1000546C8(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_1000546F0())(void)
{
  return nullsub_1;
}

uint64_t sub_100054700()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100054708(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_100054730())(void)
{
  return nullsub_1;
}

uint64_t sub_100054740()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_100054748(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_100054770())(void)
{
  return nullsub_1;
}

uint64_t sub_100054780()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

uint64_t sub_100054788(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 3sub_100006034(v0 + 2) = a1;
  return result;
}

uint64_t (*sub_1000547B0())(void)
{
  return nullsub_1;
}

uint64_t sub_1000547C0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t sub_1000547C8(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_1000547F0())(void)
{
  return nullsub_1;
}

uint64_t sub_100054800()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

uint64_t sub_100054808(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 48));
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_100054830())(void)
{
  return nullsub_1;
}

uint64_t sub_100054848(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = swift_retain(a1);
  uint64_t v5 = sub_100052BF8(v4, v3);
  swift_release(a1);
  return v5;
}

uint64_t sub_100054884(uint64_t a1, uint64_t a2)
{
  return sub_1000543CC( a1,  a2,  (uint64_t)sub_100054374,  (void (*)(void *__return_ptr, void *, uint64_t, void, __n128))sub_100053F14,  &qword_100159320,  (uint64_t (*)(void))&_swift_release);
}

double sub_1000548C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = v6;
  *(void *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_10005492C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v8);
}

unint64_t sub_1000549AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = type metadata accessor for OSExtension(0LL);
  uint64_t v5 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  return sub_100054B10(a1, v6);
}

unint64_t sub_100054A3C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100054BF0(a1, v7);
}

unint64_t sub_100054AA8(char a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  unint64_t v4 = sub_10004FA4C();
  uint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, &type metadata for CollectionKind, v4);
  return sub_100054D30(a1, v5);
}

unint64_t sub_100054B10(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = v2;
    uint64_t v7 = ~v4;
    uint64_t v8 = type metadata accessor for OSExtension(0LL);
    uint64_t v9 = sub_100012860(&qword_1001593F8, type metadata accessor for OSExtension, (uint64_t)&unk_10011B550);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, v8, v9) & 1) != 0) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v7;
    }

    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t sub_100054BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100012860( &qword_100157E78,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_100054D30(char a1, uint64_t a2)
{
  char v9 = a1;
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    unint64_t v6 = sub_1000265DC();
    do
    {
      char v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v9, &type metadata for CollectionKind, v6) & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

void *sub_100054DF4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return _swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaDictionary.count.getter(a1);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    unint64_t v4 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100005FB4(&qword_10015BB40);
    unint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    void v4[2] = v2;
    void v4[3] = (2 * (v6 >> 3)) | 1;
  }

  swift_bridgeObjectRetain(v1);
  uint64_t v7 = sub_100059CA0((uint64_t)&v9, v4 + 4, v2, v1);
  double result = (void *)sub_10000610C(v9);
  if (v7 == v2) {
    return v4;
  }
  __break(1u);
  return result;
}

void *sub_100054EEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005FB4(&qword_1001593E8);
  unint64_t v4 = (void *)swift_allocObject(v3, 80 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  void v4[2] = v1;
  void v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  uint64_t v6 = sub_100059F60((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10000610C(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_100054FDC(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_1000549AC(a1);
    char v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v4 = *v2;
      uint64_t v17 = *v2;
      *uint64_t v2 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100056EC8();
        uint64_t v4 = v17;
      }

      goto LABEL_11;
    }

    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = *v2;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v6 = swift_retain(a1);
  uint64_t v7 = __CocoaDictionary.lookup(_:)(v6, v5);
  swift_release(a1);
  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  swift_unknownObjectRelease(v7);
  uint64_t v8 = __CocoaDictionary.count.getter(v5);
  uint64_t v4 = sub_1000551DC(v5, v8);
  swift_retain(v4);
  a1 = sub_1000549AC(a1);
  char v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

uint64_t sub_10005513C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    uint64_t v6 = sub_1000551DC(v7, result + 1);
    *uint64_t v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10005675C(a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v10 = *v3;
    *uint64_t v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000551DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005FB4(&qword_1001593C0);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v32 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = type metadata accessor for OSExtension(0LL);
      do
      {
        uint64_t v30 = v8;
        swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v29 = v9;
        uint64_t v23 = type metadata accessor for RealizedInfo(0LL);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
        uint64_t v4 = v32;
        unint64_t v24 = *(void *)(v32 + 16);
        if (*(void *)(v32 + 24) <= v24)
        {
          sub_100055DE0(v24 + 1, 1LL);
          uint64_t v4 = v32;
        }

        uint64_t v11 = v30;
        uint64_t v12 = v31;
        uint64_t v29 = v31;
        uint64_t v13 = *(void *)(v4 + 40);
        uint64_t v14 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v10, v14);
        uint64_t v16 = v4 + 64;
        uint64_t v17 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v18 = result & ~v17;
        unint64_t v19 = v18 >> 6;
        if (((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6))) != 0)
        {
          unint64_t v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v4 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v25 = 0;
          unint64_t v26 = (unint64_t)(63 - v17) >> 6;
          do
          {
            if (++v19 == v26 && (v25 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v27 = v19 == v26;
            if (v19 == v26) {
              unint64_t v19 = 0LL;
            }
            v25 |= v27;
            uint64_t v28 = *(void *)(v16 + 8 * v19);
          }

          while (v28 == -1);
          unint64_t v20 = __clz(__rbit64(~v28)) + (v19 << 6);
        }

        *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
        uint64_t v21 = 8 * v20;
        *(void *)(*(void *)(v4 + 48) + v21) = v12;
        *(void *)(*(void *)(v4 + 56) + v21) = v11;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()(result);
        uint64_t v9 = v22;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

uint64_t sub_100055434(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001593C8);
  char v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v34) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v35 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v34) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v35 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v34)
        {
LABEL_36:
          swift_release(v5);
          if ((v36 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v34) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v35 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

uint64_t sub_100055738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001593D0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  char v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_100055ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001593D8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_100055DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005FB4(&qword_1001593C0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v24 = v23 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v25 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v37) {
      break;
    }
    char v26 = (void *)(v5 + 64);
    unint64_t v27 = *(void *)(v38 + 8 * v25);
    ++v14;
    if (!v27)
    {
      int64_t v14 = v25 + 1;
      if (v25 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v27 = *(void *)(v38 + 8 * v14);
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v2;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = *(void *)(v38 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            int64_t v14 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v27 = *(void *)(v38 + 8 * v14);
            ++v28;
            if (v27) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v28;
      }
    }

unint64_t sub_100056110(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      unint64_t v9 = sub_10004FA4C();
      do
      {
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(a2 + 40),  &type metadata for CollectionKind,  v9);
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(a2 + 48);
            int64_t v14 = (_BYTE *)(v13 + v3);
            uint64_t v15 = (_BYTE *)(v13 + v6);
            if (v3 != v6 || v14 >= v15 + 1) {
              _BYTE *v14 = *v15;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
            {
              void *v17 = *v18;
              int64_t v3 = v6;
            }
          }
        }

        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1LL << result) - 1;
  }

  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000562D8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100012860( &qword_100157E70,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = (void *)(v26 + 8 * a1);
            int64_t v28 = (void *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *unint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    char v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    char v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *char v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100056578(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v9 = type metadata accessor for OSExtension(0LL);
      uint64_t v10 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
      do
      {
        unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(*(void *)(a2 + 40), v9, v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            uint64_t v15 = (void *)(v14 + 8 * v3);
            int64_t v16 = (void *)(v14 + 8 * v6);
            if (v3 != v6 || v15 >= v16 + 1) {
              *uint64_t v15 = *v16;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
            {
              *uint64_t v18 = *v19;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_10005675C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000549AC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100056EC8();
LABEL_7:
    int64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

uint64_t sub_1000568AC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_100056944()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_1001593C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_100056AE4()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005FB4(&qword_1001593D0);
  uint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    uint64_t *v24 = v7;
    return result;
  }

  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_100056D14()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_1001593D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100056EC8()
{
  uint64_t v1 = v0;
  sub_100005FB4(&qword_1001593C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void (*sub_100057070(void *a1, char a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_10004F058(v5);
  void v5[9] = sub_1000572E4((uint64_t)(v5 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_1000570EC;
}

void sub_1000570EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72LL))(*(void *)a1 + 32LL, 0LL);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_100057128(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x68uLL);
  *a1 = v5;
  uint64_t v6 = type metadata accessor for URL(0LL);
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[9] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  v5[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_10002ADD0(v5);
  v5[12] = sub_1000574CC(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000571E8;
}

void sub_1000571E8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 72LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 96LL))(*(void *)a1 + 32LL, 0LL);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0LL);
  free(v3);
  free(v1);
}

void (*sub_100057254(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10004F058(v7);
  v7[10] = sub_100057624(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100029A58;
}

unint64_t (*sub_1000572E4(uint64_t a1, char a2, char a3))(unint64_t result, char a2)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100054AA8(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56LL) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_1000573F4;
      }

unint64_t sub_1000573F4(unint64_t result, char a2)
{
  uint64_t v2 = *(void *)result;
  LOBYTE(v3) = *(_BYTE *)(result + 25);
  if ((a2 & 1) != 0)
  {
    if (!v2) {
      goto LABEL_10;
    }
    unint64_t v4 = *(void *)(result + 16);
    uint64_t v5 = **(void ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0)
    {
LABEL_9:
      *(void *)(v5[7] + 8 * v4) = v2;
      return result;
    }

    char v6 = *(_BYTE *)(result + 24);
    v5[(v4 >> 6) + 8] |= 1LL << v4;
    *(_BYTE *)(v5[6] + v4) = v6;
    uint64_t v3 = v5[7];
    *(void *)(v3 + 8 * v4) = v2;
    uint64_t v7 = v5[2];
    BOOL v8 = __OFADD__(v7, 1LL);
    uint64_t v2 = v7 + 1;
    if (!v8) {
      goto LABEL_14;
    }
    __break(1u);
  }

  if (!v2)
  {
LABEL_10:
    if ((v3 & 1) != 0) {
      return sub_100056110(*(void *)(result + 16), **(void **)(result + 8));
    }
    return result;
  }

  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = **(void ***)(result + 8);
  if ((v3 & 1) != 0) {
    goto LABEL_9;
  }
  char v9 = *(_BYTE *)(result + 24);
  v5[(v4 >> 6) + 8] |= 1LL << v4;
  *(_BYTE *)(v5[6] + v4) = v9;
  *(void *)(v5[7] + 8 * v4) = v2;
  uint64_t v10 = v5[2];
  BOOL v8 = __OFADD__(v10, 1LL);
  uint64_t v2 = v10 + 1;
  if (!v8)
  {
LABEL_14:
    _OWORD v5[2] = v2;
    return result;
  }

  __break(1u);
  return result;
}

void (*sub_1000574CC(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  unint64_t v4 = v3;
  BOOL v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  uint64_t v8[2] = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_100054A3C(a2);
  *((_BYTE *)v8 + 3sub_100006034(v0 + 2) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *BOOL v8 = v17;
        return sub_1000575E8;
      }

void sub_1000575E8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100057750(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

void (*sub_100057624(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100006114(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *char v10 = v19;
        return sub_10002AD94;
      }

uint64_t sub_100057750(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *a1;
  if (v15)
  {
    uint64_t v16 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      *(void *)(v16[7] + 8 * a4) = v15;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a5);
      sub_1000568AC(a4, (uint64_t)v14, v15, v16);
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(void *)(*a3 + 48) + *(void *)(v12 + 72) * a4, 1LL, v11);
    sub_1000562D8(a4, *a3);
  }

  return swift_bridgeObjectRetain(v15);
}

unint64_t *sub_10005783C(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    uint64_t v10 = sub_100057AFC((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v8, v4, (uint64_t)a2);
    if (v2) {
      swift_willThrow(v10);
    }
    else {
      return v10;
    }
  }

  else
  {
    uint64_t v11 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v11, v9);
    a2 = sub_100057AFC((unint64_t *)v11, v8, v4, (uint64_t)a2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return a2;
}

uint64_t sub_1000579A0(uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  char v6 = *(_BYTE *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (1LL << v6) + 63;
  unint64_t v9 = v8 >> 6;
  size_t v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    uint64_t v11 = a2((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9, a1);
    if (v2) {
      swift_willThrow(v11);
    }
    else {
      return v11;
    }
  }

  else
  {
    uint64_t v12 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v12, v10);
    uint64_t v4 = a2((char *)v12, v9, a1);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v4;
}

unint64_t *sub_100057AFC(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v11) {
      return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_1000584D8(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_100057C50(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t *v22;
  void v23[5];
  uint64_t v24;
  int64_t v22 = (unint64_t *)result;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    char v17 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v17 >= v9) {
      return sub_1000584D8(v22, a2, v24, a3);
    }
    uint64_t v18 = *(void *)(v5 + 8 * v17);
    ++v4;
    if (!v18)
    {
      int64_t v4 = v17 + 1;
      if (v17 + 1 >= v9) {
        return sub_1000584D8(v22, a2, v24, a3);
      }
      uint64_t v18 = *(void *)(v5 + 8 * v4);
      if (!v18)
      {
        int64_t v4 = v17 + 2;
        if (v17 + 2 >= v9) {
          return sub_1000584D8(v22, a2, v24, a3);
        }
        uint64_t v18 = *(void *)(v5 + 8 * v4);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_100057E2C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v20 = (unint64_t *)result;
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v10) {
      return sub_100058B40(v20, a2, v4, a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        return sub_100058B40(v20, a2, v4, a3);
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          return sub_100058B40(v20, a2, v4, a3);
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_100057FDC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v40 = sub_100005FB4(&qword_100157C68);
  uint64_t v4 = __chkstk_darwin(v40);
  char v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v36 = (char *)&v30 - v6;
  uint64_t v35 = type metadata accessor for URL(0LL);
  uint64_t v38 = *(void **)(v35 - 8);
  uint64_t result = __chkstk_darwin(v35);
  unint64_t v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  char v41 = (void *)a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v32 = 0LL;
  uint64_t v33 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v34 = (unint64_t)(v11 + 63) >> 6;
  int64_t v15 = v37;
  BOOL v14 = v38;
  uint64_t v16 = v35;
  uint64_t v17 = (uint64_t)v36;
  uint64_t v18 = v39;
  while (1)
  {
    if (v13)
    {
      uint64_t v42 = (v13 - 1) & v13;
      int64_t v43 = v9;
      unint64_t v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v25 >= v34) {
      return sub_100058DE0(v31, v30, v32, v41);
    }
    unint64_t v26 = *(void *)(v33 + 8 * v25);
    int64_t v27 = v9 + 1;
    if (!v26)
    {
      int64_t v27 = v9 + 2;
      if (v9 + 2 >= v34) {
        return sub_100058DE0(v31, v30, v32, v41);
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v9 + 3;
        if (v9 + 3 >= v34) {
          return sub_100058DE0(v31, v30, v32, v41);
        }
        unint64_t v26 = *(void *)(v33 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_100058308(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v20 = (unint64_t *)result;
  uint64_t v21 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v9) {
      return sub_10005912C(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v9) {
        return sub_10005912C(v20, a2, v21, a3);
      }
      unint64_t v16 = *(void *)(v5 + 8 * v4);
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v9) {
          return sub_10005912C(v20, a2, v21, a3);
        }
        unint64_t v16 = *(void *)(v5 + 8 * v4);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_1000584D8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005FB4(&qword_1001593C0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v8 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = result + 64;
  uint64_t v36 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v37 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v34) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v34) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v34) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v34) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v16 >= v34) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v16 = v10 + 4;
          }
        }
      }

uint64_t sub_1000587B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005FB4(&qword_1001593F0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v7 = result;
  if (a2 < 1) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = *a1;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = result + 64;
  uint64_t v40 = v4;
  uint64_t v41 = result;
  while (1)
  {
    uint64_t v48 = v5;
    if (v8)
    {
      uint64_t v42 = (v8 - 1) & v8;
      uint64_t v43 = v9;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }

    else
    {
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_40;
      }
      if (v12 >= a2) {
        return v7;
      }
      unint64_t v13 = a1[v12];
      uint64_t v14 = v9 + 1;
      if (!v13)
      {
        uint64_t v14 = v9 + 2;
        if (v9 + 2 >= a2) {
          return v7;
        }
        unint64_t v13 = a1[v14];
        if (!v13)
        {
          uint64_t v14 = v9 + 3;
          if (v9 + 3 >= a2) {
            return v7;
          }
          unint64_t v13 = a1[v14];
          if (!v13)
          {
            uint64_t v15 = v9 + 4;
            if (v9 + 4 >= a2) {
              return v7;
            }
            unint64_t v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                uint64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_41;
                }
                if (v14 >= a2) {
                  return v7;
                }
                unint64_t v13 = a1[v14];
                ++v15;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v14 = v9 + 4;
          }
        }
      }

uint64_t sub_100058B40(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005FB4(&qword_1001593C8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v9 = result;
  unint64_t v34 = a1;
  uint64_t v35 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v36 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v35) {
        return v9;
      }
      unint64_t v16 = v34[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v35) {
          return v9;
        }
        unint64_t v16 = v34[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v35) {
            return v9;
          }
          unint64_t v16 = v34[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v35) {
              return v9;
            }
            unint64_t v16 = v34[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_41;
                }
                if (v17 >= v35) {
                  return v9;
                }
                unint64_t v16 = v34[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v17 = v11 + 4;
          }
        }
      }

uint64_t sub_100058DE0(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for URL(0LL);
  uint64_t v43 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v38 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }

  sub_100005FB4(&qword_1001593D0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v12 = result;
  char v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0LL;
  uint64_t v15 = result + 64;
  uint64_t v41 = a4;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v44 = (v13 - 1) & v13;
      uint64_t v45 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }

    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_40;
      }
      if (v18 >= v40) {
        return v12;
      }
      unint64_t v19 = v39[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v40) {
          return v12;
        }
        unint64_t v19 = v39[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v40) {
            return v12;
          }
          unint64_t v19 = v39[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v40) {
              return v12;
            }
            unint64_t v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_41;
                }
                if (v20 >= v40) {
                  return v12;
                }
                unint64_t v19 = v39[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v20 = v14 + 4;
          }
        }
      }

Swift::Int sub_10005912C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005FB4(&qword_1001593D8);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

char *sub_1000593C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4((uint64_t *)&unk_10015BB30);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000594BC(uint64_t a1)
{
  return sub_1000593C4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000594D0( void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a3);
  unint64_t v6 = (void *)result;
  int64_t v7 = 0LL;
  uint64_t v28 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 - 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v25 = v9;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    char v20 = *(_BYTE *)(*(void *)(v28 + 48) + i);
    uint64_t v21 = *(void *)(*(void *)(v28 + 56) + 8 * i);
    uint64_t v30 = v21;
    __n128 v22 = swift_bridgeObjectRetain(v21);
    a1(&v29, &v30, v22);
    uint64_t result = swift_bridgeObjectRelease(v21);
    if (v3)
    {
      swift_release(v6);
      return (uint64_t)v6;
    }

    *(void *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    *(_BYTE *)(v6[6] + i) = v20;
    *(void *)(v6[7] + 8 * i) = v29;
    uint64_t v23 = v6[2];
    BOOL v17 = __OFADD__(v23, 1LL);
    uint64_t v24 = v23 + 1;
    if (v17)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    void v6[2] = v24;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v17 = __OFADD__(v7++, 1LL);
    if (v17) {
      goto LABEL_27;
    }
    if (v7 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v7);
    if (!v18) {
      break;
    }
LABEL_15:
    unint64_t v13 = (v18 - 1) & v18;
  }

  int64_t v19 = v7 + 1;
  if (v7 + 1 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v7 + 2;
  if (v7 + 2 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v7 + 3;
  if (v7 + 3 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
LABEL_14:
    int64_t v7 = v19;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_15;
    }
  }

uint64_t sub_1000596EC( void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  void (*v41)(uint64_t *__return_ptr, uint64_t *, __n128);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v39 = (char *)&v35 - v7;
  sub_100005FB4(&qword_1001593D0);
  uint64_t result = static _DictionaryStorage.copy(original:)(a3);
  uint64_t v9 = v4;
  uint64_t v10 = result;
  int64_t v11 = 0LL;
  uint64_t v43 = a3;
  uint64_t v44 = result;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v13 = a3 + 64;
  uint64_t v12 = v14;
  uint64_t v15 = 1LL << *(_BYTE *)(v13 - 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v12;
  uint64_t v36 = v13;
  int64_t v37 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v38 = result + 64;
  int64_t v19 = v39;
  unint64_t v18 = v40;
  if ((v16 & v12) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  uint64_t v46 = v11;
  for (unint64_t i = v20 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v23 << 6))
  {
    uint64_t v26 = v43;
    uint64_t v27 = v45;
    unint64_t v28 = *(void *)(v45 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v19, *(void *)(v43 + 48) + v28, v9);
    uint64_t v49 = *(void *)(*(void *)(v26 + 56) + 8 * i);
    uint64_t v29 = v49;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v30(v18, v19, v9);
    __n128 v31 = swift_bridgeObjectRetain(v29);
    uint64_t v32 = v47;
    v41(&v48, &v49, v31);
    if (v32)
    {
      uint64_t v10 = v44;
      swift_release(v44);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v9);
      swift_bridgeObjectRelease(v49);
      return v10;
    }

    uint64_t v47 = 0LL;
    swift_bridgeObjectRelease(v29);
    *(void *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v10 = v44;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(*(void *)(v44 + 48) + v28, v18, v9);
    *(void *)(*(void *)(v10 + 56) + 8 * i) = v48;
    uint64_t v33 = *(void *)(v10 + 16);
    BOOL v22 = __OFADD__(v33, 1LL);
    uint64_t v34 = v33 + 1;
    if (v22)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    *(void *)(v10 + 16) = v34;
    int64_t v11 = v46;
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v22 = __OFADD__(v11, 1LL);
    int64_t v23 = v11 + 1;
    if (v22) {
      goto LABEL_28;
    }
    if (v23 >= v37) {
      return v10;
    }
    unint64_t v24 = *(void *)(v36 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_15:
    unint64_t v17 = (v24 - 1) & v24;
    uint64_t v46 = v23;
  }

  int64_t v25 = v23 + 1;
  if (v23 + 1 >= v37) {
    return v10;
  }
  unint64_t v24 = *(void *)(v36 + 8 * v25);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v37) {
    return v10;
  }
  unint64_t v24 = *(void *)(v36 + 8 * v25);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 3;
  if (v23 + 3 >= v37) {
    return v10;
  }
  unint64_t v24 = *(void *)(v36 + 8 * v25);
  if (v24)
  {
LABEL_14:
    int64_t v23 = v25;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v23 >= v37) {
      return v44;
    }
    unint64_t v24 = *(void *)(v36 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_15;
    }
  }

uint64_t sub_1000599FC( void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a3);
  uint64_t v6 = (void *)result;
  int64_t v7 = 0LL;
  uint64_t v31 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 - 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v27 = v9;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v29 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v33 = *(void *)(*(void *)(v31 + 56) + 8 * i);
    uint64_t v22 = v33;
    swift_bridgeObjectRetain(v21);
    __n128 v23 = swift_bridgeObjectRetain(v22);
    a1(&v32, &v33, v23);
    uint64_t result = swift_bridgeObjectRelease(v22);
    if (v3)
    {
      swift_bridgeObjectRelease(v21);
      swift_release(v6);
      return (uint64_t)v6;
    }

    *(void *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    unint64_t v24 = (void *)(v6[6] + 16 * i);
    void *v24 = v20;
    v24[1] = v21;
    *(void *)(v6[7] + 8 * i) = v32;
    uint64_t v25 = v6[2];
    BOOL v16 = __OFADD__(v25, 1LL);
    uint64_t v26 = v25 + 1;
    if (v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    void v6[2] = v26;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v16 = __OFADD__(v7++, 1LL);
    if (v16) {
      goto LABEL_27;
    }
    if (v7 >= v28) {
      return (uint64_t)v6;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v7);
    if (!v17) {
      break;
    }
LABEL_15:
    unint64_t v13 = (v17 - 1) & v17;
  }

  int64_t v18 = v7 + 1;
  if (v7 + 1 >= v28) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_14;
  }
  int64_t v18 = v7 + 2;
  if (v7 + 2 >= v28) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_14;
  }
  int64_t v18 = v7 + 3;
  if (v7 + 3 >= v28) {
    return (uint64_t)v6;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_14:
    int64_t v7 = v18;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v28) {
      return (uint64_t)v6;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_15;
    }
  }

uint64_t sub_100059C38(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_100059CA0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  int64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaDictionary.makeIterator()(v8);
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    unint64_t v4 = result | 0x8000000000000000LL;
    if (v6) {
      goto LABEL_6;
    }
LABEL_39:
    int64_t v12 = 0LL;
    a3 = 0LL;
LABEL_48:
    void *v7 = v4;
    v7[1] = v9;
    void v7[2] = v10;
    v7[3] = v12;
    v7[4] = v11;
    return a3;
  }

  uint64_t v25 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v9 = a4 + 64;
  uint64_t v26 = ~v25;
  uint64_t v27 = -v25;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  else {
    uint64_t v28 = -1LL;
  }
  unint64_t v11 = v28 & *(void *)(a4 + 64);
  uint64_t v10 = v26;
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_48;
  }

  if (a3 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  uint64_t v29 = v10;
  uint64_t v30 = v7;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v31 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000LL) != 0)
  {
    uint64_t v19 = v9;
    uint64_t v20 = __CocoaDictionary.Iterator.next()(result);
    if (!v20)
    {
      a3 = v13;
LABEL_47:
      uint64_t v10 = v29;
      int64_t v7 = v30;
      goto LABEL_48;
    }

    uint64_t v22 = v21;
    swift_unknownObjectRelease(v20);
    uint64_t v32 = v22;
    uint64_t v23 = type metadata accessor for RealizedInfo(0LL);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    uint64_t v16 = v33;
    uint64_t result = swift_unknownObjectRelease(v22);
    uint64_t v9 = v19;
    if (!v16) {
      goto LABEL_46;
    }
LABEL_11:
    ++v13;
    *v6++ = v16;
    if (v13 == a3) {
      goto LABEL_47;
    }
  }

  if (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v12 << 6);
    goto LABEL_10;
  }

  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_50;
  }

  if (v17 >= v31) {
    goto LABEL_42;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v17);
  if (v18) {
    goto LABEL_26;
  }
  v12 += 2LL;
  if (v17 + 1 >= v31)
  {
    unint64_t v11 = 0LL;
    int64_t v12 = v17;
    goto LABEL_46;
  }

  unint64_t v18 = *(void *)(v9 + 8 * v12);
  if (v18)
  {
LABEL_19:
    int64_t v17 = v12;
LABEL_26:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
LABEL_10:
    uint64_t v16 = *(void *)(*(void *)(v4 + 56) + 8 * v15);
    uint64_t result = swift_retain(v16);
    if (!v16) {
      goto LABEL_46;
    }
    goto LABEL_11;
  }

  int64_t v24 = v17 + 2;
  if (v17 + 2 >= v31) {
    goto LABEL_42;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v24);
  if (v18)
  {
LABEL_25:
    int64_t v17 = v24;
    goto LABEL_26;
  }

  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v31)
  {
    unint64_t v11 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_46;
  }

  unint64_t v18 = *(void *)(v9 + 8 * v12);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v24 = v17 + 4;
  if (v17 + 4 >= v31)
  {
LABEL_42:
    unint64_t v11 = 0LL;
LABEL_46:
    a3 = v13;
    goto LABEL_47;
  }

  unint64_t v18 = *(void *)(v9 + 8 * v24);
  if (v18) {
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v17 >= v31)
    {
      unint64_t v11 = 0LL;
      int64_t v12 = v31 - 1;
      goto LABEL_46;
    }

    unint64_t v18 = *(void *)(v9 + 8 * v17);
    ++v24;
    if (v18) {
      goto LABEL_26;
    }
  }

LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_100059F60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v31 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 56) + 80 * v16;
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 16);
    uint64_t v24 = *(void *)(v20 + 24);
    unint64_t v25 = *(void *)(v20 + 32);
    uint64_t v26 = *(void *)(v20 + 40);
    uint64_t v27 = *(void *)(v20 + 48);
    uint64_t v28 = *(void *)(v20 + 56);
    uint64_t v29 = *(void *)(v20 + 64);
    char v30 = *(_BYTE *)(v20 + 72);
    *(void *)uint64_t v11 = v21;
    *(void *)(v11 + 8) = v22;
    *(void *)(v11 + 16) = v23;
    *(void *)(v11 + 24) = v24;
    *(void *)(v11 + 3sub_100006034(v0 + 2) = v25;
    *(void *)(v11 + 40) = v26;
    *(void *)(v11 + 48) = v27;
    *(void *)(v11 + 56) = v28;
    *(void *)(v11 + 64) = v29;
    *(_BYTE *)(v11 + 7sub_100006034(v0 + 2) = v30;
    if (v13 == v10)
    {
      sub_1000516E4(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
      goto LABEL_38;
    }

    v11 += 80LL;
    uint64_t result = sub_1000516E4(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

uint64_t sub_10005A19C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v16 = *(void *)(*(void *)(a5 + 48) + 8 * a2);
    uint64_t v5 = *(void *)(a5 + 56) + 80 * a2;
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    unint64_t v10 = *(void *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 40);
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v13 = *(void *)(v5 + 56);
    uint64_t v14 = *(void *)(v5 + 64);
    char v15 = *(_BYTE *)(v5 + 72);
    *(void *)uint64_t result = *(void *)v5;
    *(void *)(result + 8) = v7;
    *(void *)(result + 16) = v8;
    *(void *)(result + 24) = v9;
    *(void *)(result + 3sub_100006034(v0 + 2) = v10;
    *(void *)(result + 40) = v11;
    *(void *)(result + 48) = v12;
    *(void *)(result + 56) = v13;
    *(void *)(result + 64) = v14;
    *(_BYTE *)(result + 7sub_100006034(v0 + 2) = v15;
    swift_retain(v16);
    sub_1000516E4(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
    return v16;
  }

uint64_t sub_10005A2A0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  swift_bridgeObjectRetain(*a3);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  LOBYTE(a4) = sub_10005C528(a2, a4);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  return a4 & 1;
}

void **sub_10005A374(unint64_t a1, uint64_t (*a2)(uint64_t), void **a3)
{
  uint64_t v7 = a1;
  uint64_t v24 = (void **)&_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    unint64_t v9 = 0LL;
    uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v23 = v7 & 0xC000000000000001LL;
    uint64_t v21 = v7;
    while (1)
    {
      if (v23)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        unint64_t v11 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v7);
          swift_release(v10);
          swift_release(v24);
          return v3;
        }

        goto LABEL_9;
      }

      if (v9 >= *(void *)(v22 + 16)) {
        break;
      }
      uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
      swift_retain(v10);
      unint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v3 = a3;
      char v12 = a2(v10);
      if (v4) {
        goto LABEL_15;
      }
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v13 = i;
        uint64_t v14 = a2;
        char v15 = a3;
        uint64_t v16 = v24[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        int64_t v17 = v16;
        a3 = v15;
        a2 = v14;
        uint64_t i = v13;
        uint64_t v7 = v21;
        uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        uint64_t v3 = (void **)&v24;
        specialized ContiguousArray._endMutation()(v18);
      }

      else
      {
        swift_release(v10);
      }

      ++v9;
      if (v11 == i)
      {
        uint64_t v3 = v24;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (v7 < 0) {
      uint64_t v19 = v7;
    }
    else {
      uint64_t v19 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  uint64_t v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v7);
  return v3;
}

uint64_t sub_10005A524(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = swift_bridgeObjectRetain(*a1);
  unint64_t v7 = sub_10005AE60(v6, a2);
  uint64_t v9 = v8;
  uint64_t v10 = v2;
  swift_bridgeObjectRelease(v5);
  if (v2) {
    return v7;
  }
  if ((v9 & 1) == 0)
  {
    unint64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_57;
    }
    uint64_t v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if (v9 < 0) {
        uint64_t v31 = v9;
      }
      else {
        uint64_t v31 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v9);
      if (v11 != v32) {
        goto LABEL_6;
      }
    }

    else if (v11 != *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      uint64_t v9 = type metadata accessor for OSExtension(0LL);
      uint64_t v12 = *(void *)(a2 + 24);
      unint64_t v11 = v7 + 5;
      uint64_t v35 = v10;
      while (1)
      {
        unint64_t v13 = v11 - 4;
        uint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v14);
        }

        else
        {
          if ((v13 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }

          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_48;
          }
          uint64_t v15 = *(void *)(v14 + 8 * v11);
          swift_retain(v15);
        }

        a2 = sub_1000F67B8(*(void *)(v15 + 24), v12);
        swift_release(v15);
        if ((a2 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v26 = v11 - 3;
        if (__OFADD__(v13, 1LL)) {
          goto LABEL_49;
        }
        a2 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (a2 < 0) {
            uint64_t v28 = *a1;
          }
          else {
            uint64_t v28 = a2 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*a1);
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(a2);
        }

        else
        {
          uint64_t v27 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        ++v11;
        if (v26 == v27) {
          return v7;
        }
      }

      if (v13 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1LL)) {
          goto LABEL_50;
        }
        goto LABEL_32;
      }

      a2 = *a1;
      if ((*a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        a2 = *a1;
        if ((*a1 & 0xC000000000000001LL) == 0)
        {
LABEL_17:
          if ((v13 & 0x8000000000000000LL) != 0) {
            goto LABEL_53;
          }
          if (v13 >= *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_54;
          }
          uint64_t v17 = *(void *)(a2 + 8 * v11);
          swift_retain(v17);
          goto LABEL_20;
        }
      }

      else
      {
        if ((v7 & 0x8000000000000000LL) != 0) {
          goto LABEL_51;
        }
        if (v7 >= *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_52;
        }
        uint64_t v16 = *(void *)(a2 + 8 * v7 + 32);
        swift_retain(v16);
        if ((a2 & 0xC000000000000001LL) == 0) {
          goto LABEL_17;
        }
      }

      uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a2);
      a2 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(a2);
      *a1 = a2;
      if (!isUniquelyReferenced_nonNull_bridgeObject || a2 < 0 || (a2 & 0x4000000000000000LL) != 0)
      {
        a2 = sub_100059C38(a2);
        *a1 = a2;
      }

      uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20);
      *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 8 * v7 + 0x20) = v17;
      uint64_t v20 = swift_release(v19);
      specialized Array._endMutation()(v20);
      a2 = *a1;
      int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = a2;
      if (!v21 || a2 < 0 || (a2 & 0x4000000000000000LL) != 0)
      {
        a2 = sub_100059C38(a2);
        *a1 = a2;
      }

      uint64_t v10 = v35;
      if ((v13 & 0x8000000000000000LL) != 0) {
        goto LABEL_55;
      }
      uint64_t v22 = a2 & 0xFFFFFFFFFFFFFF8LL;
      if (v13 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_56;
      }
      uint64_t v23 = *(void *)(v22 + 8 * v11);
      *(void *)(v22 + 8 * v11) = v16;
      uint64_t v24 = swift_release(v23);
      a2 = (uint64_t)a1;
      specialized Array._endMutation()(v24);
      goto LABEL_31;
    }

    return v7;
  }

  uint64_t v29 = *a1;
  if (v29 < 0) {
    uint64_t v33 = *a1;
  }
  else {
    uint64_t v33 = v29 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*a1);
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v29);
  return v34;
}

void *sub_10005A870(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10005A8EC(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = (unint64_t *)result;
  uint64_t v36 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v8 = a3[8];
  uint64_t v6 = a3 + 8;
  uint64_t v7 = v8;
  uint64_t v9 = 1LL << *((_BYTE *)v6 - 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v7;
  int64_t v37 = v6;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    uint64_t v43 = (v11 - 1) & v11;
    int64_t v44 = v5;
    unint64_t v13 = __clz(__rbit64(v11)) | (v5 << 6);
LABEL_22:
    uint64_t v18 = *(void *)(a3[6] + 8 * v13);
    unint64_t v42 = v13;
    uint64_t v19 = a3[7] + 80 * v13;
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v23 = *(void *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 24);
    uint64_t v24 = *(void *)(v19 + 40);
    unint64_t v47 = *(void *)(v19 + 32);
    uint64_t v25 = *(void *)(v19 + 56);
    uint64_t v26 = *(void *)(v19 + 64);
    char v27 = *(_BYTE *)(v19 + 72);
    uint64_t v45 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 144LL);
    uint64_t v46 = *(void *)(v19 + 48);
    swift_retain(v18);
    uint64_t v49 = v22;
    uint64_t v48 = v25;
    uint64_t v28 = sub_1000516E4(v21, v20, v23, v22, v47, v24, v46, v25, v26, v27);
    uint64_t v29 = v45(v28);
    if (v29 == a4 && v30 == a5)
    {
      swift_bridgeObjectRelease(a5);
      sub_100039508(v21, v20, v23, v22, v47, v24, v46, v25, v26, v27);
      uint64_t result = swift_release(v18);
      unint64_t v11 = v43;
      int64_t v5 = v44;
LABEL_5:
      *(unint64_t *)((char *)v35 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
      if (__OFADD__(v36++, 1LL)) {
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v32 = v30;
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, a4, a5, 0LL);
      swift_bridgeObjectRelease(v32);
      sub_100039508(v21, v20, v23, v49, v47, v24, v46, v48, v26, v27);
      uint64_t result = swift_release(v18);
      unint64_t v11 = v43;
      int64_t v5 = v44;
      if ((v33 & 1) != 0) {
        goto LABEL_5;
      }
    }
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v14 >= v38) {
    return sub_1000587B8(v35, a2, v36, (uint64_t)a3);
  }
  unint64_t v15 = v37[v14];
  int64_t v16 = v5 + 1;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v16 = v5 + 2;
  if (v5 + 2 >= v38) {
    return sub_1000587B8(v35, a2, v36, (uint64_t)a3);
  }
  unint64_t v15 = v37[v16];
  if (v15) {
    goto LABEL_21;
  }
  int64_t v16 = v5 + 3;
  if (v5 + 3 >= v38) {
    return sub_1000587B8(v35, a2, v36, (uint64_t)a3);
  }
  unint64_t v15 = v37[v16];
  if (v15)
  {
LABEL_21:
    uint64_t v43 = (v15 - 1) & v15;
    int64_t v44 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    goto LABEL_22;
  }

  uint64_t v17 = v5 + 4;
  if (v5 + 4 >= v38) {
    return sub_1000587B8(v35, a2, v36, (uint64_t)a3);
  }
  unint64_t v15 = v37[v17];
  if (v15)
  {
    int64_t v16 = v5 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v38) {
      return sub_1000587B8(v35, a2, v36, (uint64_t)a3);
    }
    unint64_t v15 = v37[v16];
    ++v17;
    if (v15) {
      goto LABEL_21;
    }
  }

uint64_t sub_10005ABE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2LL);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_10005A8EC((uint64_t)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9, (void *)a1, a2, a3);
    uint64_t v13 = swift_bridgeObjectRelease(a3);
    if (v3) {
      swift_willThrow(v13);
    }
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  else
  {
    int64_t v14 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a3);
    uint64_t v12 = sub_10005A8EC((uint64_t)v14, v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  return v12;
}

uint64_t type metadata accessor for LookupSpec(uint64_t a1)
{
  uint64_t result = qword_10015FB20;
  if (!qword_10015FB20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LookupSpec);
  }
  return result;
}

uint64_t sub_10005ADE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LookupSpec(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10005AE1C()
{
  unint64_t result = qword_100159318;
  if (!qword_100159318)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110C68, &type metadata for LookupError);
    atomic_store(result, (unint64_t *)&qword_100159318);
  }

  return result;
}

uint64_t sub_10005AE60(uint64_t a1, uint64_t a2)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0LL;
  }

uint64_t sub_10005AF78(uint64_t a1, uint64_t (*a2)(void))
{
  return a1;
}

uint64_t sub_10005AFD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t (*a13)(void))
{
  if ((a12 & 1) != 0) {
    return sub_100051834(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  else {
    return a13();
  }
}

void *sub_10005AFFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v9 >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }

  if (v7 < 0) {
    uint64_t v27 = v7;
  }
  else {
    uint64_t v27 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v8 = v5 - v3;
  if (__OFSUB__(0LL, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v9 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v11 = v10 - v7;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    if (v9 < 0) {
      uint64_t v29 = v9;
    }
    else {
      uint64_t v29 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v9);
    uint64_t v9 = *v4;
    goto LABEL_15;
  }

uint64_t sub_10005B2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LookupSpec(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B2E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t))
{
  uint64_t v20 = (unint64_t *)result;
  uint64_t v21 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v22 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v23) {
      return sub_1000584D8(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v23) {
        return sub_1000584D8(v20, a2, v21, a3);
      }
      unint64_t v16 = *(void *)(v22 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v23) {
          return sub_1000584D8(v20, a2, v21, a3);
        }
        unint64_t v16 = *(void *)(v22 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_10005B4E8( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    uint64_t v12 = sub_10005B2E8((uint64_t)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10, v6, a2);
    if (v3) {
      swift_willThrow(v12);
    }
    else {
      return v12;
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v13, v11);
    a3 = sub_10005B2E8((uint64_t)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return a3;
}

uint64_t sub_10005B658(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
    uint64_t v45 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v7 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = __CocoaDictionary.Iterator.next()(v7);
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      uint64_t v40 = v7;
      uint64_t v13 = type metadata accessor for OSExtension(0LL);
      uint64_t v41 = v13;
      do
      {
        uint64_t v42 = v11;
        swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
        uint64_t v42 = v12;
        uint64_t v16 = type metadata accessor for RealizedInfo(0LL);
        swift_dynamicCast(&v44, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
        uint64_t v17 = v43;
        uint64_t v18 = v44;
        uint64_t v42 = v43;
        swift_retain(v43);
        swift_retain(v18);
        char v19 = v4(&v42, v18);
        swift_release(v17);
        swift_release(v18);
        if ((v19 & 1) != 0)
        {
          uint64_t v20 = v8;
          uint64_t v21 = v4;
          uint64_t v22 = v3;
          int64_t v23 = v45;
          unint64_t v24 = v45[2];
          if (v45[3] <= v24)
          {
            uint64_t v25 = v24 + 1;
            swift_retain(v17);
            swift_retain(v18);
            sub_100055DE0(v25, 1LL);
            int64_t v23 = v45;
          }

          else
          {
            swift_retain(v17);
            swift_retain(v18);
          }

          uint64_t v42 = v17;
          uint64_t v26 = v23[5];
          uint64_t v27 = sub_100012860(&qword_100158918, type metadata accessor for OSExtension, (uint64_t)&unk_10011B578);
          uint64_t v28 = v26;
          uint64_t v13 = v41;
          uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v41, v27);
          uint64_t v30 = v23 + 8;
          uint64_t v31 = -1LL << *((_BYTE *)v23 + 32);
          unint64_t v32 = result & ~v31;
          unint64_t v33 = v32 >> 6;
          if (((-1LL << v32) & ~v23[(v32 >> 6) + 8]) != 0)
          {
            unint64_t v34 = __clz(__rbit64((-1LL << v32) & ~v23[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v35 = 0;
            unint64_t v36 = (unint64_t)(63 - v31) >> 6;
            do
            {
              if (++v33 == v36 && (v35 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v37 = v33 == v36;
              if (v33 == v36) {
                unint64_t v33 = 0LL;
              }
              v35 |= v37;
              uint64_t v38 = v30[v33];
            }

            while (v38 == -1);
            unint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
          }

          *(void *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
          uint64_t v39 = 8 * v34;
          *(void *)(v23[6] + v39) = v17;
          *(void *)(v23[7] + v39) = v18;
          ++v23[2];
          swift_release(v18);
          uint64_t v14 = swift_release(v17);
          uint64_t v3 = v22;
          uint64_t v4 = v21;
          uint64_t v8 = v20;
        }

        else
        {
          swift_release(v18);
          uint64_t v14 = swift_release(v17);
        }

        uint64_t v11 = __CocoaDictionary.Iterator.next()(v14);
        uint64_t v12 = v15;
      }

      while (v11);
      uint64_t v6 = v45;
      uint64_t v7 = v40;
    }

    uint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    sub_10000610C(v7 | 0x8000000000000000LL);
  }

  else
  {
    uint64_t v6 = (void *)sub_10005B4E8(a1, a2, a3);
    swift_bridgeObjectRelease(v5);
  }

  return (uint64_t)v6;
}

void **sub_10005B994@<X0>(unint64_t *a1@<X0>, void ***a2@<X8>)
{
  return sub_10005B9A8(a1, a2);
}

void **sub_10005B9A8@<X0>(unint64_t *a1@<X0>, void ***a2@<X8>)
{
  unint64_t v4 = *a1;
  __int128 v7 = *(_OWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v4);
  uint64_t result = sub_1000521F0(sub_10005C750, &v6, v4);
  *a2 = result;
  return result;
}

uint64_t sub_10005B9F8(uint64_t a1, uint64_t a2)
{
  return sub_10005A2A0(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t *sub_10005BA00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10005BAD8(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease(*(void *)(a1 + 8));
  }

  return result;
}

void *sub_10005BB38(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_10005BBE8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005ADE0((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void *sub_10005BCB0(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_10005BD3C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005ADE0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10005BDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_10005BDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_10005BDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10005BE04(uint64_t a1)
{
  v4[0] = &unk_100110CF8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_100110D10;
    void v4[3] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_10005BE8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0) {
    return sub_1000516E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  sub_1000516E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return swift_retain(a11);
}

uint64_t destroy for LookupError(uint64_t *a1)
{
  return sub_100051834(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t *initializeWithCopy for LookupError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  sub_10005BE8C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t assignWithCopy for LookupError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v23 = a2[9];
  uint64_t v24 = a2[10];
  sub_10005BE8C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  __int128 v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 7sub_100006034(v0 + 2) = v23;
  *(void *)(a1 + 80) = v24;
  sub_100051834(v12, v13, v14, v15, v16, v17, v18, v19, v20, SBYTE8(v20), v21);
  return a1;
}

__n128 initializeWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 3sub_100006034(v0 + 2) = result;
  return result;
}

uint64_t assignWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  __int128 v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  __int128 v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  __int128 v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v3;
  sub_100051834(v4, v6, v5, v7, v8, v9, v10, v11, v12, SBYTE8(v12), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 72) >> 7;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LookupError(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 7sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0LL;
      *(void *)(a1 + 7sub_100006034(v0 + 2) = (unint64_t)-a2 << 7;
      *(void *)(a1 + 80) = 0LL;
      return result;
    }

    *(_BYTE *)(a1 + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10005C1F8(uint64_t a1)
{
  return *(void *)(a1 + 80) >> 63;
}

uint64_t sub_10005C204(uint64_t result)
{
  *(void *)(result + 80) &= ~0x8000000000000000LL;
  return result;
}

uint64_t sub_10005C214(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFFFFFFFF8LL | (a2 << 63);
  *(void *)(result + 72) &= 0x7FuLL;
  *(void *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for LookupError()
{
  return &type metadata for LookupError;
}

uint64_t destroy for LookupTable(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t *initializeWithCopy for LookupTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = a2[6];
  a1[6] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for LookupTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[5];
  uint64_t v15 = a1[5];
  a1[5] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[6];
  uint64_t v17 = a1[6];
  a1[6] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for OSExtensionCodable(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for LookupTable(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  uint64_t v6 = a1[5];
  *((_OWORD *)a1 + sub_100006034(v0 + 2) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[6];
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupTable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LookupTable()
{
  return &type metadata for LookupTable;
}

uint64_t sub_10005C528(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005FB4((uint64_t *)&unk_10015BA30);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30[-1] - v12;
  sub_10001A148( a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL,  (uint64_t)&v30[-1] - v12,  (uint64_t *)&unk_10015BA30);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v15 = v14(v13, 1LL, v4);
  if ((_DWORD)v15 != 1)
  {
    uint64_t v18 = URL.path.getter(v15);
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    uint64_t v24 = a2[3];
    uint64_t v25 = a2[4];
    sub_100005110(a2, v24);
    sub_1001073DC(v24, v25);
    uint64_t v26 = v31;
    uint64_t v27 = v32;
    sub_100005110(v30, v31);
    char v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v27 + 136))(v18, v20, 0LL, v26, v27);
    swift_bridgeObjectRelease(v20);
    sub_100006034(v30);
    return v17 & 1;
  }

  uint64_t v16 = sub_100012824((uint64_t)v13, (uint64_t *)&unk_10015BA30);
  (*(void (**)(uint64_t))(**(void **)(a1 + 24) + 256LL))(v16);
  if (v14(v11, 1LL, v4) != 1)
  {
    sub_100086458((uint64_t)v7);
    uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v22 = v21(v11, v4);
    uint64_t v18 = URL.path.getter(v22);
    uint64_t v20 = v23;
    v21(v7, v4);
    goto LABEL_6;
  }

  sub_100012824((uint64_t)v11, (uint64_t *)&unk_10015BA30);
  char v17 = 1;
  return v17 & 1;
}

uint64_t sub_10005C750(uint64_t *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  __int128 v3 = *(void **)(v1 + 24);
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = v2[5];
  uint64_t v11 = v2[6];
  swift_bridgeObjectRetain(*v2);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  LOBYTE(v4) = sub_10005C528(v4, v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return v4 & 1;
}

void *sub_10005C82C(void *a1)
{
  return a1;
}

void *sub_10005C854(void *a1)
{
  return a1;
}

unint64_t sub_10005C880()
{
  unint64_t result = sub_10005C8A4((uint64_t)&off_100147A68);
  qword_10015FB38 = result;
  return result;
}

unint64_t sub_10005C8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100159600);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100006114(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 24;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(fromString:)(Swift::String fromString)
{
  uint64_t object = fromString._object;
  uint64_t countAndFlagsBits = fromString._countAndFlagsBits;
  if (qword_10015FB30 != -1) {
    swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v3 = qword_10015FB38;
  else {
    v6.value = driverkitd_ApprovalState_unknownDefault;
  }
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t ApprovalState.stringValue.getter(uint64_t a1)
{
  char v1 = a1;
  if (qword_10015FB30 != -1) {
    a1 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v2 = qword_10015FB38;
  __chkstk_darwin(a1);
  v9[16] = v1;
  swift_bridgeObjectRetain(v2);
  uint64_t v4 = sub_10006657C(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100063808, (uint64_t)v9);
  swift_bridgeObjectRelease(v2);
  char v5 = sub_10005CB14(v4);
  uint64_t v7 = v6;
  uint64_t result = swift_release(v4);
  if (v7) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

_BYTE *sub_10005CB14(uint64_t a1)
{
  uint64_t result = (_BYTE *)sub_100010D14(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (_BYTE *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return sub_100066320(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

Swift::Bool __swiftcall ApprovalState.canTransitionTo(_:)(driverkitd::ApprovalState a1)
{
  if (v1 == 1) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  return v2 == a1;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(rawValue:)(Swift::Int rawValue)
{
  return (driverkitd::ApprovalState_optional)rawValue;
}

uint64_t ApprovalState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_10005CBD0@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

void sub_10005CBE8(void *a1@<X8>)
{
  *a1 = *v1;
}

_UNKNOWN **static ApprovalState.allCases.getter()
{
  return &off_100147AD0;
}

void sub_10005CC00(void *a1@<X8>)
{
  *a1 = &off_100147AF8;
}

uint64_t ApprovalState.description.getter(uint64_t a1)
{
  char v1 = a1;
  if (qword_10015FB30 != -1) {
    a1 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v2 = qword_10015FB38;
  __chkstk_darwin(a1);
  v9[16] = v1;
  swift_bridgeObjectRetain(v2);
  uint64_t v4 = sub_10006657C(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v9);
  swift_bridgeObjectRelease(v2);
  char v5 = sub_10005CB14(v4);
  uint64_t v7 = v6;
  uint64_t result = swift_release(v4);
  if (v7) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005CCE4(uint64_t a1)
{
  char v2 = *v1;
  if (qword_10015FB30 != -1) {
    a1 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v3 = qword_10015FB38;
  __chkstk_darwin(a1);
  v10[16] = v2;
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_10006657C(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v10);
  swift_bridgeObjectRelease(v3);
  uint64_t v6 = sub_10005CB14(v5);
  uint64_t v8 = v7;
  uint64_t result = swift_release(v5);
  if (v8) {
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t ApprovalState.debugDescription.getter(unsigned __int8 a1)
{
  uint64_t v15 = a1;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v17 = v2;
  v3._uint64_t countAndFlagsBits = 10272LL;
  v3._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v3);
  if (qword_10015FB30 != -1) {
    uint64_t v4 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v5 = qword_10015FB38;
  __chkstk_darwin(v4);
  v14[16] = a1;
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = sub_10006657C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v14);
  swift_bridgeObjectRelease(v5);
  uint64_t v8 = sub_10005CB14(v7);
  uint64_t v10 = v9;
  uint64_t result = swift_release(v7);
  if (v10)
  {
    v12._uint64_t countAndFlagsBits = (uint64_t)v8;
    v12._uint64_t object = v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v10);
    v13._uint64_t countAndFlagsBits = 41LL;
    v13._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    return v16;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10005CEE8()
{
  return ApprovalState.debugDescription.getter(*v0);
}

uint64_t sub_10005CEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100012668();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005CF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100012668();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

id sub_10005CF98(uint64_t a1, void *a2, char a3)
{
  uint64_t v7 = v6;
  uint64_t v8 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v8, &v20);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  *(void *)(inited + 3sub_100006034(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v10;
  sub_1000666EC(a1, (uint64_t)a2);
  unint64_t v11 = sub_10005D104(a1, a2, a3 & 1);
  uint64_t v13 = v12;
  sub_1000666F4(a1, (uint64_t)a2);
  *(void *)(inited + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v13;
  unint64_t v14 = sub_100015D14(inited);
  id v15 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  id v18 = [v15 initWithDomain:v16 code:5 userInfo:isa];

  return v18;
}

unint64_t sub_10005D104(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v7 = 0xD000000000000010LL;
  }

  else
  {
    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v7 = 0xD000000000000012LL;
  }

  v5._uint64_t countAndFlagsBits = a1;
  v5._uint64_t object = a2;
  String.append(_:)(v5);
  return v7;
}

unint64_t sub_10005D1B8()
{
  return sub_10005D104(*(void *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10005D1C4()
{
  if (*v0) {
    return 0x7261506472696874LL;
  }
  else {
    return 0x7261507473726966LL;
  }
}

uint64_t sub_10005D1FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000667C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D220(uint64_t a1)
{
  unint64_t v2 = sub_1000666FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D248(uint64_t a1)
{
  unint64_t v2 = sub_1000666FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005D270()
{
  return 0LL;
}

uint64_t sub_10005D27C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

void sub_10005D2A8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10005D2B4(uint64_t a1)
{
  unint64_t v2 = sub_100066784();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D2DC(uint64_t a1)
{
  unint64_t v2 = sub_100066784();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10005D30C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10005D328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_1000668D0(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10005D354(uint64_t a1)
{
  unint64_t v2 = sub_100066740();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D37C(uint64_t a1)
{
  unint64_t v2 = sub_100066740();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntrySource.encode(to:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v4 = sub_100005FB4(&qword_100159408);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100005FB4(&qword_100159410);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005FB4(&qword_100159418);
  uint64_t v31 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100005110(a1, v14);
  unint64_t v16 = sub_1000666FC();
  uint64_t v17 = v15;
  unint64_t v18 = v30;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalDBEntrySource.CodingKeys,  &type metadata for ApprovalDBEntrySource.CodingKeys,  v16,  v14,  v17);
  if (v18 >> 60 == 15)
  {
    LOBYTE(v32[0]) = 0;
    unint64_t v19 = sub_100066784();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys,  v32,  v11,  &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys,  v19);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  }

  else
  {
    LOBYTE(v32[0]) = 1;
    uint64_t v21 = v29;
    sub_1000125E0(v29, v18);
    unint64_t v22 = sub_100066740();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys,  v32,  v11,  &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys,  v22);
    v32[0] = v21;
    v32[1] = v18;
    unint64_t v23 = sub_10001AA68();
    uint64_t v24 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, v25, v28, &type metadata for Data, v23);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v24);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
    return sub_10002193C(v21, v18);
  }

void *ApprovalDBEntrySource.init(from:)(void *a1)
{
  return sub_100066954(a1);
}

void *sub_10005D604@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100066954(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_10005D62C(void *a1)
{
  return ApprovalDBEntrySource.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

void ApprovalDBEntrySource.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(a2, a3);
    Data.hash(into:)(a1, a2, a3);
    sub_10002193C(a2, a3);
  }

Swift::Int ApprovalDBEntrySource.hashValue.getter(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(a1, a2);
    Data.hash(into:)(v5, a1, a2);
    sub_10002193C(a1, a2);
  }

  return Hasher._finalize()();
}

Swift::Int sub_10005D750()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(v1, v2);
    Data.hash(into:)(v4, v1, v2);
    sub_10002193C(v1, v2);
  }

  return Hasher._finalize()();
}

void sub_10005D7DC(uint64_t a1)
{
  unint64_t v3 = v1[1];
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    uint64_t v4 = *v1;
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(v4, v3);
    Data.hash(into:)(a1, v4, v3);
    sub_10002193C(v4, v3);
  }

Swift::Int sub_10005D860(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(v2, v3);
    Data.hash(into:)(v5, v2, v3);
    sub_10002193C(v2, v3);
  }

  return Hasher._finalize()();
}

uint64_t sub_10005D8EC(uint64_t a1, uint64_t a2)
{
  return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)a2,  *(void *)(a2 + 8));
}

uint64_t ApprovalDBEntrySource.description.getter(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 0x6D6574737973LL;
  }
  sub_1000125E0(a1, a2);
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._uint64_t countAndFlagsBits = sub_100013B60(a1, a2);
  uint64_t object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_10002193C(a1, a2);
  return 0xD000000000000024LL;
}

uint64_t sub_10005D9BC()
{
  return ApprovalDBEntrySource.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t ApprovalDBEntry.init(driverIdentifier:source:approvalState:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 3sub_100006034(v0 + 2) = a5;
  return result;
}

unint64_t sub_10005D9D4()
{
  uint64_t v1 = 0x656372756F73LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C61766F72707061LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_10005DA3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100067230(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005DA60(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10005DA6C(uint64_t a1)
{
  unint64_t v2 = sub_100066FA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005DA94(uint64_t a1)
{
  unint64_t v2 = sub_100066FA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntry.description.getter()
{
  __int128 v23 = *v0;
  __int128 v24 = v23;
  sub_100066F7C((uint64_t)&v24);
  v1._uint64_t countAndFlagsBits = 544106784LL;
  v1._uint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = *((void *)v0 + 2);
  unint64_t v3 = *((void *)v0 + 3);
  if (v3 >> 60 == 15)
  {
    unint64_t v4 = 0xE600000000000000LL;
    unint64_t v5 = 0x6D6574737973LL;
  }

  else
  {
    sub_10002B568(v2, v3);
    sub_1000125E0(v2, v3);
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v21 = 0xD000000000000024LL;
    unint64_t v22 = 0x8000000100123930LL;
    v6._uint64_t countAndFlagsBits = sub_100013B60(v2, v3);
    uint64_t object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    sub_10002193C(v2, v3);
    unint64_t v5 = 0xD000000000000024LL;
    unint64_t v4 = 0x8000000100123930LL;
  }

  unint64_t v8 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v4);
  sub_10002193C(v2, v3);
  v9._uint64_t countAndFlagsBits = 8250LL;
  v9._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v9);
  char v11 = *((_BYTE *)v0 + 32);
  if (qword_10015FB30 != -1) {
    uint64_t v10 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v12 = qword_10015FB38;
  __chkstk_darwin(v10);
  v20[16] = v11;
  swift_bridgeObjectRetain(v12);
  uint64_t v14 = sub_10006657C(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v20);
  swift_bridgeObjectRelease(v12);
  uint64_t v15 = sub_10005CB14(v14);
  uint64_t v17 = v16;
  uint64_t result = swift_release(v14);
  if (v17)
  {
    v19._uint64_t countAndFlagsBits = (uint64_t)v15;
    v19._uint64_t object = v17;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v17);
    return v23;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ApprovalDBEntry.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_100159420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100066FA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalDBEntry.CodingKeys,  &type metadata for ApprovalDBEntry.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v19, v5);
  if (!v2)
  {
    sub_100066FE8((_OWORD *)v3 + 1, &v20);
    sub_100066FE8(&v20, &v19);
    char v18 = 1;
    unint64_t v14 = sub_100066FF8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ApprovalDBEntrySource, v14);
    LOBYTE(v19) = *((_BYTE *)v3 + 32);
    char v18 = 2;
    unint64_t v15 = sub_10006703C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ApprovalState, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double ApprovalDBEntry.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 3sub_100006034(v0 + 2) = v7;
  }

  return result;
}

uint64_t sub_10005DE64(void *a1)
{
  return ApprovalDBEntry.encode(to:)(a1);
}

BOOL static ApprovalDBEntry.__derived_struct_equals(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (v7
    || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0LL), result = 0LL, (v8 & 1) != 0))
  {
    unint64_t v10 = a1[3];
    sub_100066FE8((_OWORD *)(a2 + 16), &v11);
    if (v10 >> 60 == 15)
    {
      sub_100066FE8(&v11, &v12);
      if (*((void *)&v12 + 1) >> 60 == 15LL) {
        return *((unsigned __int8 *)a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
    }

    else
    {
      sub_100066FE8(&v11, &v12);
      if (*((void *)&v12 + 1) >> 60 != 15LL) {
        __asm { BR              X10 }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10005E0A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  int v8 = *((unsigned __int8 *)a1 + 32);
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  int v12 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == *(void *)a2 && v5 == v9) {
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v10, v11) & (v8 == v12);
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v9, 0LL);
  uint64_t result = 0LL;
  if ((v14 & 1) != 0) {
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v10, v11) & (v8 == v12);
  }
  return result;
}

uint64_t sub_10005E130(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159558);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100005110(a1, v8);
  unint64_t v10 = sub_100069B90();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalDB.V0.CodingKeys,  &type metadata for ApprovalDB.V0.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100005FB4(&qword_100159560);
  uint64_t v12 = sub_100069D78( &qword_100159568,  &qword_100159560,  (void (*)(void))sub_100069BD4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10005E254()
{
}

uint64_t sub_10005E278()
{
  return 0x73656972746E65LL;
}

uint64_t sub_10005E294(uint64_t a1)
{
  unint64_t v2 = sub_100069B90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E2BC(uint64_t a1)
{
  unint64_t v2 = sub_100069B90();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10005E2E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000677BC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10005E30C(void *a1)
{
  return sub_10005E130(a1, *v1);
}

uint64_t (*ApprovalDB.entries.modify(uint64_t *a1))(void *a1, char a2)
{
  uint64_t v3 = *v1;
  *a1 = *v1;
  a1[1] = (uint64_t)v1;
  swift_bridgeObjectRetain(v3);
  return sub_10005E360;
}

uint64_t sub_10005E360(void *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = *v3;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*a1);
    swift_bridgeObjectRelease(v4);
    *uint64_t v3 = v2;
    return swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(*v3);
    *uint64_t v3 = v2;
  }

  return result;
}

void *sub_10005E3C0()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10005E3D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a5);
    for (uint64_t i = (unsigned __int8 *)(a5 + 64); ; i += 40)
    {
      uint64_t v11 = *((void *)i - 4);
      uint64_t v12 = *((void *)i - 3);
      uint64_t v14 = *((void *)i - 2);
      unint64_t v13 = *((void *)i - 1);
      uint64_t v15 = *i;
      BOOL v16 = v11 == a1 && v12 == a2;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, *((void *)i - 3), a1, a2, 0LL) & 1) != 0)
      {
        if (v13 >> 60 == 15)
        {
          if (a4 >> 60 == 15)
          {
            swift_bridgeObjectRetain(v12);
            sub_10002B568(v14, v13);
            swift_bridgeObjectRelease(v12);
            swift_bridgeObjectRelease(a5);
            sub_10002193C(v14, v13);
            return v15;
          }
        }

        else if (a4 >> 60 != 15)
        {
          __asm { BR              X8 }
        }
      }

      if (!--v5)
      {
        swift_bridgeObjectRelease(a5);
        return 3LL;
      }
    }
  }

  return 3LL;
}

void *sub_10005EF60(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    swift_bridgeObjectRetain(v3);
    uint64_t v7 = 32LL;
    while (1)
    {
      __int128 v9 = *(_OWORD *)&v3[v7];
      __int128 v8 = *(_OWORD *)&v3[v7 + 16];
      char v33 = v3[v7 + 32];
      __int128 v31 = v9;
      __int128 v32 = v8;
      BOOL v10 = (void)v9 == v5 && *((void *)&v9 + 1) == v6;
      if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, *((void *)&v9 + 1), v5, v6, 0LL) & 1) != 0)
      {
        unint64_t v11 = *((void *)&v32 + 1);
        sub_100066FE8((_OWORD *)v2 + 1, &v30);
        if (v11 >> 60 == 15)
        {
          sub_100066FE8(&v30, &v35);
          if (*((void *)&v35 + 1) >> 60 == 15LL)
          {
            sub_100067618(&v31);
            swift_bridgeObjectRelease(v3);
            _StringGuts.grow(_:)(64LL);
            v19._uint64_t countAndFlagsBits = 0xD000000000000027LL;
            v19._uint64_t object = (void *)0x8000000100123960LL;
            String.append(_:)(v19);
            v20._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
            uint64_t object = v20._object;
            String.append(_:)(v20);
            swift_bridgeObjectRelease(object);
            v22._uint64_t object = (void *)0x8000000100123990LL;
            v22._uint64_t countAndFlagsBits = 0xD000000000000015LL;
            String.append(_:)(v22);
            v23._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
            __int128 v24 = v23._object;
            String.append(_:)(v23);
            swift_bridgeObjectRelease(v24);
            unint64_t v25 = sub_100067658();
            uint64_t v26 = swift_allocError(&type metadata for ApprovalsError, v25, 0LL, 0LL);
            *(void *)uint64_t v27 = 0LL;
            *(void *)(v27 + 8) = 0xE000000000000000LL;
            *(_BYTE *)(v27 + 16) = 0;
            swift_willThrow(v26);
            return sub_10006769C(&v31);
          }
        }

        else
        {
          sub_100066FE8(&v30, &v34);
          if (*((void *)&v34 + 1) >> 60 != 15LL) {
            __asm { BR              X8 }
          }
        }
      }

      v7 += 40LL;
      if (!--v4)
      {
        swift_bridgeObjectRelease(v3);
        uint64_t v2 = a1;
        Swift::String v1 = v28;
        break;
      }
    }
  }

  swift_bridgeObjectRetain(v3);
  sub_100067618(v2);
  uint64_t v12 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
    uint64_t v12 = sub_100063ABC(0LL, *((void *)v3 + 2) + 1LL, 1, v3);
  }
  unint64_t v14 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  if (v14 >= v13 >> 1) {
    uint64_t v12 = sub_100063ABC((char *)(v13 > 1), v14 + 1, 1, v12);
  }
  *((void *)v12 + sub_100006034(v0 + 2) = v14 + 1;
  uint64_t v15 = &v12[40 * v14];
  __int128 v16 = *(_OWORD *)v2;
  __int128 v17 = *((_OWORD *)v2 + 1);
  v15[64] = *((_BYTE *)v2 + 32);
  *((_OWORD *)v15 + sub_100006034(v0 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  uint64_t result = (void *)swift_bridgeObjectRelease(v3);
  *Swift::String v1 = v12;
  return result;
}

unint64_t sub_10005FB5C(uint64_t a1)
{
  uint64_t v54 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_14:
    unint64_t __s1 = 0LL;
    unint64_t v62 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(80LL);
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v12._uint64_t object = (void *)0x80000001001239B0LL;
    String.append(_:)(v12);
    uint64_t v14 = *(void *)v54;
    unint64_t v13 = *(void **)(v54 + 8);
    swift_bridgeObjectRetain(v13);
    v15._uint64_t countAndFlagsBits = v14;
    v15._uint64_t object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v13);
    v16._uint64_t countAndFlagsBits = 0x656372756F73202CLL;
    v16._uint64_t object = (void *)0xEA00000000002020LL;
    String.append(_:)(v16);
    uint64_t v17 = *(void *)(v54 + 16);
    unint64_t v18 = *(void *)(v54 + 24);
    if (v18 >> 60 == 15)
    {
      unint64_t v19 = 0xE600000000000000LL;
      unint64_t v20 = 0x6D6574737973LL;
    }

    else
    {
      sub_10002B568(v17, v18);
      sub_1000125E0(v17, v18);
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v21._uint64_t countAndFlagsBits = sub_100013B60(v17, v18);
      uint64_t object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      sub_10002193C(v17, v18);
      unint64_t v20 = 0xD000000000000024LL;
      unint64_t v19 = 0x8000000100123930LL;
    }

    unint64_t v23 = v19;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease(v19);
    sub_10002193C(v17, v18);
    v24._uint64_t object = (void *)0x80000001001239E0LL;
    v24._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v24);
    unint64_t v25 = v62;
    unint64_t v26 = sub_100067658();
    uint64_t v27 = swift_allocError(&type metadata for ApprovalsError, v26, 0LL, 0LL);
    *(void *)uint64_t v28 = __s1;
    *(void *)(v28 + 8) = v25;
    *(_BYTE *)(v28 + 16) = 1;
    swift_willThrow(v27);
    return v25 & 1;
  }

  uint64_t v4 = 0LL;
  unint64_t v5 = 0LL;
  uint64_t v6 = *(void *)v54;
  uint64_t v59 = *(void *)(v54 + 8);
  uint64_t v60 = v6;
  uint64_t v58 = (_OWORD *)(v54 + 16);
  id v55 = (char *)v2;
  uint64_t v56 = v3;
  while (1)
  {
    if (v5 >= *(void *)(v2 + 16))
    {
      __break(1u);
      JUMPOUT(0x100060AB4LL);
    }

    __int128 v8 = *(_OWORD *)(v2 + v4 + 32);
    __int128 v7 = *(_OWORD *)(v2 + v4 + 48);
    unsigned __int8 v66 = *(_BYTE *)(v2 + v4 + 64);
    __int128 v64 = v8;
    __int128 v65 = v7;
    __int128 v9 = v8;
    BOOL v10 = (void)v8 == v60 && *((void *)&v8 + 1) == v59;
    if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v64, *((void *)&v64 + 1), v60, v59, 0LL) & 1) == 0) {
      goto LABEL_4;
    }
    int v57 = v66;
    __int128 v11 = v65;
    sub_100066FE8(v58, &v63);
    if (*((void *)&v11 + 1) >> 60 != 15LL)
    {
      sub_100066FE8(&v63, &v67);
      if (*((void *)&v67 + 1) >> 60 != 15LL) {
        __asm { BR              X8 }
      }

      goto LABEL_4;
    }

    sub_100066FE8(&v63, &v68);
    if (*((void *)&v68 + 1) >> 60 == 15LL) {
      break;
    }
LABEL_4:
    ++v5;
    v4 += 40LL;
    if (v3 == v5) {
      goto LABEL_14;
    }
  }

  sub_100067618(&v64);
  int v30 = *(unsigned __int8 *)(v54 + 32);
  LOBYTE(v25) = v57 != v30;
  if (v57 == v30)
  {
    sub_10006769C(&v64);
  }

  else if (v57 == 1)
  {
    if (v30 != 2) {
      goto LABEL_22;
    }
LABEL_28:
    swift_bridgeObjectRetain(*((void *)&v9 + 1));
    sub_10002B568(v11, *((unint64_t *)&v11 + 1));
    uint64_t v46 = v55;
    swift_bridgeObjectRetain(v55);
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0) {
      uint64_t v46 = sub_100063BCC((uint64_t)v55);
    }
    if (v5 >= *((void *)v46 + 2))
    {
      __break(1u);
      JUMPOUT(0x100060B28LL);
    }

    uint64_t v48 = &v46[v4];
    uint64_t v49 = *(void *)&v46[v4 + 40];
    uint64_t v50 = *(void *)&v46[v4 + 48];
    unint64_t v51 = *((void *)v48 + 7);
    *((_OWORD *)v48 + sub_100006034(v0 + 2) = v9;
    *((_OWORD *)v48 + 3) = v11;
    v48[64] = v11;
    swift_bridgeObjectRelease(v49);
    sub_10002193C(v50, v51);
    swift_bridgeObjectRelease(*((void *)&v9 + 1));
    swift_bridgeObjectRelease(v55);
    sub_10002193C(v11, *((unint64_t *)&v11 + 1));
    *uint64_t v53 = v46;
  }

  else
  {
    if (v30 == 1) {
      goto LABEL_28;
    }
LABEL_22:
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t __s1 = 0xD00000000000001DLL;
    unint64_t v62 = 0x8000000100123A00LL;
    sub_100067618(&v64);
    v31._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
    __int128 v32 = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32);
    sub_10006769C(&v64);
    v33._uint64_t countAndFlagsBits = 0x2077656E206F7420LL;
    v33._uint64_t object = (void *)0xEE00206574617473LL;
    String.append(_:)(v33);
    if (qword_10015FB30 != -1) {
      uint64_t v34 = swift_once(&qword_10015FB30, sub_10005C880);
    }
    uint64_t v35 = qword_10015FB38;
    __chkstk_darwin(v34);
    v52[16] = v30;
    swift_bridgeObjectRetain(v35);
    uint64_t v37 = sub_10006657C(v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v52);
    swift_bridgeObjectRelease(v35);
    uint64_t v38 = sub_10005CB14(v37);
    uint64_t v40 = v39;
    swift_release(v37);
    if (!v40)
    {
      __break(1u);
      JUMPOUT(0x100060B88LL);
    }

    v41._uint64_t countAndFlagsBits = (uint64_t)v38;
    v41._uint64_t object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v40);
    unint64_t v42 = __s1;
    unint64_t v25 = v62;
    unint64_t v43 = sub_100067658();
    uint64_t v44 = swift_allocError(&type metadata for ApprovalsError, v43, 0LL, 0LL);
    *(void *)uint64_t v45 = v42;
    *(void *)(v45 + 8) = v25;
    *(_BYTE *)(v45 + 16) = 0;
    swift_willThrow(v44);
    sub_10006769C(&v64);
  }

  return v25 & 1;
}

unint64_t sub_100060BB8(uint64_t a1)
{
  unint64_t result = 0xD00000000000001DLL;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = 32LL;
    do
    {
      __int128 v5 = *(_OWORD *)(a1 + v4 + 16);
      v9[0] = *(_OWORD *)(a1 + v4);
      v9[1] = v5;
      char v10 = *(_BYTE *)(a1 + v4 + 32);
      sub_100067618(v9);
      v8._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
      v8._uint64_t object = v6;
      v7._uint64_t countAndFlagsBits = 10LL;
      v7._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v7);
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v8._object);
      sub_10006769C(v9);
      v4 += 40LL;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return 0xD00000000000001DLL;
  }

  return result;
}

uint64_t sub_100060C8C()
{
  if (*v0) {
    return 0x6E6F6973726576LL;
  }
  else {
    return 12406LL;
  }
}

uint64_t sub_100060CBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100067908(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100060CE0(uint64_t a1)
{
  unint64_t v2 = sub_100067734();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060D08(uint64_t a1)
{
  unint64_t v2 = sub_100067734();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDB.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100005FB4(&qword_100159440);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100005110(a1, v11);
  unint64_t v13 = sub_100067734();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalDB.CodingKeys,  &type metadata for ApprovalDB.CodingKeys,  v13,  v11,  v12);
  uint64_t v19 = a2;
  char v18 = 0;
  unint64_t v14 = sub_100067778();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v7, &type metadata for ApprovalDB.V0, v14);
  if (!v3)
  {
    char v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ApprovalDB.init(from:)(void *a1)
{
  return sub_1000679E0(a1);
}

uint64_t sub_100060E78@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000679E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_100060EA0(void *a1)
{
  return ApprovalDB.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100060EBC(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(*a1, a1[1], *a2);
}

uint64_t sub_100060ED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_100067B70();
  uint64_t v4 = Set.init(minimumCapacity:)(v2, &type metadata for ApprovalSettingsStateEntry, v3);
  uint64_t v15 = v4;
  if (v2)
  {
    uint64_t v5 = 32LL;
    do
    {
      __int128 v6 = *(_OWORD *)(a1 + v5 + 48);
      v16[2] = *(_OWORD *)(a1 + v5 + 32);
      v16[3] = v6;
      char v17 = *(_BYTE *)(a1 + v5 + 64);
      __int128 v7 = *(_OWORD *)(a1 + v5 + 16);
      v16[0] = *(_OWORD *)(a1 + v5);
      v16[1] = v7;
      sub_100067BB4(v16);
      sub_100063BE0((uint64_t)v14, (uint64_t)v16);
      uint64_t v8 = v14[3];
      uint64_t v9 = v14[5];
      uint64_t v10 = v14[6];
      unint64_t v11 = v14[7];
      swift_bridgeObjectRelease(v14[1]);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v9);
      sub_10002193C(v10, v11);
      v5 += 72LL;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(a1);
    return v15;
  }

  else
  {
    uint64_t v12 = v4;
    swift_bridgeObjectRelease(a1);
  }

  return v12;
}

Swift::Int sub_100060FC4()
{
  return Hasher._finalize()();
}

Swift::Int sub_100061004(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100061040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73656972746E65LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000610D4(uint64_t a1)
{
  unint64_t v2 = sub_100067C14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000610FC(uint64_t a1)
{
  unint64_t v2 = sub_100067C14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalSettingsState.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159450);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __int128 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100005110(a1, v8);
  unint64_t v10 = sub_100067C14();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalSettingsState.CodingKeys,  &type metadata for ApprovalSettingsState.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100005FB4(&qword_100159458);
  uint64_t v12 = sub_100069D78( &qword_100159460,  &qword_100159458,  (void (*)(void))sub_100067C58,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *ApprovalSettingsState.init(from:)(void *a1)
{
  return sub_100067C9C(a1);
}

void *sub_10006125C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100067C9C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100061284(void *a1)
{
  return ApprovalSettingsState.encode(to:)(a1, *v1);
}

uint64_t sub_1000612A0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v2 = 0LL;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v46 = a2 + 56;
  uint64_t v43 = a2;
  uint64_t v39 = a1 + 56;
  uint64_t v40 = a1;
  int64_t v38 = v7;
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v9 = v2 + 1;
  if (__OFADD__(v2, 1LL))
  {
    __break(1u);
    JUMPOUT(0x100062068LL);
  }

  if (v9 >= v7) {
    return 1LL;
  }
  unint64_t v10 = *(void *)(v3 + 8 * v9);
  int64_t v11 = v2 + 1;
  if (!v10)
  {
    int64_t v11 = v9 + 1;
    if (v9 + 1 >= v7) {
      return 1LL;
    }
    unint64_t v10 = *(void *)(v3 + 8 * v11);
    if (!v10)
    {
      int64_t v11 = v9 + 2;
      if (v9 + 2 >= v7) {
        return 1LL;
      }
      unint64_t v10 = *(void *)(v3 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v9 + 3;
        if (v9 + 3 >= v7) {
          return 1LL;
        }
        unint64_t v10 = *(void *)(v3 + 8 * v11);
        if (!v10)
        {
          int64_t v12 = v9 + 4;
          if (v12 < v7)
          {
            unint64_t v10 = *(void *)(v3 + 8 * v12);
            if (v10)
            {
              int64_t v11 = v12;
              goto LABEL_23;
            }

            while (1)
            {
              int64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1LL))
              {
                __break(1u);
                JUMPOUT(0x100062080LL);
              }

              if (v11 >= v7) {
                break;
              }
              unint64_t v10 = *(void *)(v3 + 8 * v11);
              ++v12;
              if (v10) {
                goto LABEL_23;
              }
            }
          }

          return 1LL;
        }
      }
    }
  }

LABEL_58:
  sub_100069D18(&v48);
  return 0LL;
}

                  __int128 v65 = v169;
                  unsigned __int8 v66 = (void (**)(void, void, void))v176;
                  goto LABEL_76;
                }

                __break(1u);
LABEL_91:
                __break(1u);
                goto LABEL_92;
              }

              uint64_t v113 = (v174 - 48);
              uint64_t v120 = v60 - 1;
              if (v60 != 1)
              {
                uint64_t v121 = (unsigned __int8 *)&v180 + 1;
                while (1)
                {
                  uint64_t v122 = *v121 - 48;
                  if (v122 > 9) {
                    goto LABEL_74;
                  }
                  if (!is_mul_ok(v113, 0xAuLL)) {
                    goto LABEL_83;
                  }
                  unint64_t v118 = __CFADD__(10 * v113, v122);
                  uint64_t v113 = 10 * v113 + v122;
                  if (v118) {
                    goto LABEL_83;
                  }
                  unint64_t v119 = 0;
                  ++v121;
                  --v120;
                  uint64_t v58 = a4;
                  int v57 = (void *)a3;
                  uint64_t v59 = (void *)v19;
                  unint64_t v61 = v174;
                  if (!v120) {
                    goto LABEL_75;
                  }
                }
              }
            }

            unsigned __int8 v66 = (void (**)(void, void, void))v176;
            __int128 v112 = v113;
            goto LABEL_78;
          }

          *(void *)&uint64_t v180 = 0LL;
          *((void *)&v180 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(71LL);
          v100._uint64_t countAndFlagsBits = 0xD000000000000011LL;
          v100._uint64_t object = (void *)0x8000000100125D50LL;
          String.append(_:)(v100);
          v101._uint64_t countAndFlagsBits = a3;
          v101._uint64_t object = a4;
          String.append(_:)(v101);
          v102._uint64_t countAndFlagsBits = 0xD000000000000032LL;
          v102._uint64_t object = (void *)0x8000000100125D70LL;
          String.append(_:)(v102);
          unint64_t v103 = Set.description.getter(v56, &type metadata for String, &protocol witness table for String);
          __int128 v105 = v104;
          swift_bridgeObjectRelease(v56);
          v106._uint64_t countAndFlagsBits = v103;
          v106._uint64_t object = v105;
          String.append(_:)(v106);
          swift_bridgeObjectRelease(v105);
          uint64_t v108 = *((void *)&v180 + 1);
          uint64_t v107 = v180;
          unint64_t v109 = sub_100012624();
          uint64_t v110 = swift_allocError(&type metadata for KMError, v109, 0LL, 0LL);
          *(_OWORD *)uint64_t v111 = __PAIR128__(v108, v107);
          *(_OWORD *)(v111 + 16) = 0u;
          *(_OWORD *)(v111 + 3sub_100006034(v0 + 2) = 0u;
          *(_OWORD *)(v111 + 48) = 0u;
          *(void *)(v111 + 64) = 0LL;
          *(_BYTE *)(v111 + 7sub_100006034(v0 + 2) = 9;
          swift_willThrow(v110);
          __int128 v53 = v110;
          goto LABEL_35;
        }
      }

      else
      {
        sub_100012824((uint64_t)&v180, &qword_100157FF8);
      }

      *(void *)&uint64_t v180 = 0LL;
      *((void *)&v180 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(52LL);
      v93._uint64_t countAndFlagsBits = 0x6F69736E65747845LL;
      v93._uint64_t object = (void *)0xEA0000000000206ELL;
      String.append(_:)(v93);
      String.append(_:)(v173);
      v94._uint64_t countAndFlagsBits = 0xD000000000000028LL;
      v94._uint64_t object = (void *)0x8000000100125D20LL;
      String.append(_:)(v94);
      uint64_t v96 = *((void *)&v180 + 1);
      __int128 v95 = v180;
      uint64_t v97 = sub_100012624();
      uint64_t v98 = swift_allocError(&type metadata for KMError, v97, 0LL, 0LL);
      *(_OWORD *)uint64_t v99 = __PAIR128__(v96, v95);
      *(_OWORD *)(v99 + 16) = 0u;
      *(_OWORD *)(v99 + 3sub_100006034(v0 + 2) = 0u;
      *(_OWORD *)(v99 + 48) = 0u;
      *(void *)(v99 + 64) = 0LL;
      *(_BYTE *)(v99 + 7sub_100006034(v0 + 2) = 9;
      swift_willThrow(v98);
      __int128 v53 = v98;
LABEL_35:
      swift_release(v50);
      swift_release(v172);
      sub_100039418(v169);
      goto LABEL_25;
    }

    *(void *)&uint64_t v180 = 0LL;
    *((void *)&v180 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease(*((void *)&v180 + 1));
    *(void *)&uint64_t v180 = 0x6F696E7365747845LL;
    *((void *)&v180 + 1) = 0xEA0000000000206ELL;
    v86._uint64_t countAndFlagsBits = countAndFlagsBits;
    v86._uint64_t object = object;
    String.append(_:)(v86);
    v87._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v87._uint64_t object = (void *)0x8000000100125D00LL;
    String.append(_:)(v87);
    uint64_t v89 = *((void *)&v180 + 1);
    uint64_t v88 = v180;
    unint64_t v90 = sub_100012624();
    char v91 = swift_allocError(&type metadata for KMError, v90, 0LL, 0LL);
    *(_OWORD *)uint64_t v92 = __PAIR128__(v89, v88);
    *(_OWORD *)(v92 + 16) = 0u;
    *(_OWORD *)(v92 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v92 + 48) = 0u;
    *(void *)(v92 + 64) = 0LL;
    *(_BYTE *)(v92 + 7sub_100006034(v0 + 2) = 9;
    swift_willThrow(v91);
    __int128 v53 = v91;
    swift_release(v36);
  }

  else
  {
    *(void *)&uint64_t v180 = 0LL;
    *((void *)&v180 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(*((void *)&v180 + 1));
    *(void *)&uint64_t v180 = 0xD000000000000029LL;
    *((void *)&v180 + 1) = 0x8000000100125CD0LL;
    v79._uint64_t countAndFlagsBits = countAndFlagsBits;
    v79._uint64_t object = object;
    String.append(_:)(v79);
    v80._uint64_t countAndFlagsBits = 46LL;
    v80._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v80);
    uint64_t v82 = *((void *)&v180 + 1);
    uint64_t v81 = v180;
    uint64_t v83 = sub_100012624();
    uint64_t v84 = swift_allocError(&type metadata for KMError, v83, 0LL, 0LL);
    *(_OWORD *)unint64_t v85 = __PAIR128__(v82, v81);
    *(_OWORD *)(v85 + 16) = 0u;
    *(_OWORD *)(v85 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v85 + 48) = 0u;
    *(void *)(v85 + 64) = 0LL;
    *(_BYTE *)(v85 + 7sub_100006034(v0 + 2) = 10;
    swift_willThrow(v84);
    __int128 v53 = v84;
  }

  sub_100039418(v30);
LABEL_25:
  unsigned __int8 v66 = (void (**)(void, void, void))v176;
LABEL_26:
  unint64_t v178 = v53;
  swift_errorRetain(v53);
  uint64_t v75 = sub_100005FB4(&qword_10015AB20);
  if (swift_dynamicCast(v177, &v178, v75, &type metadata for KMError, 0LL))
  {
    swift_errorRelease(v53);
    sub_1000516A8((uint64_t)v177, (uint64_t)&v180);
    uint64_t v76 = sub_1000B61B8();
    ((void (**)(void, void, id))v66)[2](v66, 0LL, v76);

    sub_100082748((uint64_t)&v180);
    uint64_t v77 = v178;
  }

  else
  {
    swift_errorRelease(v178);
    uint64_t v78 = (void *)_convertErrorToNSError(_:)(v53);
    ((void (**)(void, void, void *))v66)[2](v66, 0LL, v78);

    uint64_t v77 = v53;
  }

  swift_errorRelease(v77);
}

        __break(0x5513u);
        goto LABEL_59;
      }

      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        int64_t v12 = v33;
        goto LABEL_47;
      }
    }

    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0LL;
      }

      else
      {
        uint64_t v25 = (__int16 *)(a3 + 24LL * v13 + 16);
        uint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0LL;
        while (1)
        {
          uint64_t v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }

        return 5LL;
      }
    }
  }

  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  return result;
}

uint64_t sub_10006213C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000612A0(*a1, *a2);
}

unint64_t ApprovalSettingsState.debugDescription.getter(uint64_t a1)
{
  v62._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v62._uint64_t object = (void *)0x8000000100123A40LL;
  uint64_t v79 = *(void **)(a1 + 16);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._uint64_t countAndFlagsBits = 0x73656972746E6520LL;
  v4._uint64_t object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v4);
  unint64_t v5 = 0xD000000000000017LL;
  unint64_t v77 = 0xD000000000000017LL;
  unint64_t v78 = 0x8000000100123A40LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = -v6;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  uint64_t v10 = v9 & *(void *)(a1 + 56);
  uint64_t v71 = a1;
  uint64_t v72 = a1 + 56;
  uint64_t v73 = v7;
  uint64_t v74 = 0LL;
  uint64_t v75 = v10;
  uint64_t v76 = 0LL;
  swift_bridgeObjectRetain(a1);
  sub_100062550((uint64_t)&v62);
  uint64_t v11 = v63;
  if (v63)
  {
    uint64_t v12 = 0LL;
    uint64_t countAndFlagsBits = v62._countAndFlagsBits;
    __int128 v14 = v62._object;
    uint64_t v16 = v64;
    uint64_t v15 = v65;
    uint64_t v17 = v66;
    uint64_t v18 = v67;
    uint64_t v19 = v68;
    unint64_t v20 = v69;
    char v21 = v70;
    do
    {
      uint64_t v79 = v14;
      uint64_t v80 = v11;
      uint64_t v81 = v16;
      uint64_t v82 = v15;
      uint64_t v60 = v17;
      uint64_t v61 = v15;
      uint64_t v83 = v17;
      uint64_t v84 = v18;
      uint64_t v58 = v19;
      uint64_t v59 = v18;
      uint64_t v85 = v19;
      unint64_t v86 = v20;
      unint64_t v57 = v20;
      char v87 = v21;
      v62._uint64_t countAndFlagsBits = 0x207865646E492020LL;
      v62._uint64_t object = (void *)0xE800000000000000LL;
      v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      int v30 = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v30);
      v31._uint64_t countAndFlagsBits = 2618LL;
      v31._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v31);
      __int128 v32 = v62._object;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = ApprovalSettingsStateEntry.debugDescription.getter();
      char v35 = sub_100062A1C(0x7FFFFFFFFFFFFFFFLL, 1, v33, v34);
      int v36 = v35;
      int64_t v37 = *((void *)v35 + 2);
      if (v37)
      {
        uint64_t v53 = v16;
        __int128 v54 = v14;
        uint64_t v55 = countAndFlagsBits;
        uint64_t v56 = v12;
        uint64_t v52 = v11;
        sub_10000CC84(0, v37, 0);
        int64_t v38 = v36;
        uint64_t v39 = (uint64_t *)(v36 + 56);
        do
        {
          uint64_t v40 = *(v39 - 3);
          uint64_t v41 = *(v39 - 2);
          uint64_t v42 = *(v39 - 1);
          uint64_t v43 = *v39;
          v62._uint64_t countAndFlagsBits = 538976288LL;
          v62._uint64_t object = (void *)0xE400000000000000LL;
          swift_bridgeObjectRetain(v43);
          v44._uint64_t countAndFlagsBits = static String._fromSubstring(_:)(v40, v41, v42, v43);
          int v45 = v44._object;
          String.append(_:)(v44);
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v45);
          uint64_t v46 = v62._countAndFlagsBits;
          uint64_t v47 = v62._object;
          unint64_t v49 = _swiftEmptyArrayStorage[2];
          unint64_t v48 = _swiftEmptyArrayStorage[3];
          if (v49 >= v48 >> 1) {
            sub_10000CC84(v48 > 1, v49 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v49 + 1;
          __int128 v50 = &_swiftEmptyArrayStorage[2 * v49];
          v50[4] = v46;
          v50[5] = v47;
          v39 += 4;
          --v37;
        }

        while (v37);
        swift_bridgeObjectRelease(v38);
        uint64_t v11 = v52;
        uint64_t v16 = v53;
        uint64_t countAndFlagsBits = v55;
        uint64_t v12 = v56;
        __int128 v14 = v54;
      }

      else
      {
        swift_bridgeObjectRelease(v35);
      }

      v62._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v22 = sub_100005FB4((uint64_t *)&unk_10015A5A0);
      uint64_t v23 = sub_100012B78( (unint64_t *)&qword_10015BA60,  (uint64_t *)&unk_10015A5A0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v24 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v22, v23);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v62._uint64_t countAndFlagsBits = v24;
      v62._uint64_t object = v26;
      swift_bridgeObjectRetain(v26);
      v27._uint64_t countAndFlagsBits = 10LL;
      v27._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v26);
      unint64_t v28 = v62._object;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v28);
      sub_100067DE8(countAndFlagsBits, (uint64_t)v14, v11, v16, v61, v60, v59, v58, v57);
      sub_100062550((uint64_t)&v62);
      uint64_t countAndFlagsBits = v62._countAndFlagsBits;
      __int128 v14 = v62._object;
      uint64_t v11 = v63;
      uint64_t v16 = v64;
      uint64_t v15 = v65;
      uint64_t v17 = v66;
      uint64_t v18 = v67;
      uint64_t v19 = v68;
      unint64_t v20 = v69;
      char v21 = v70;
    }

    while (v63);
    unint64_t v5 = v77;
  }

  sub_10000610C(v71);
  return v5;
}

void sub_100062550(uint64_t a1@<X8>)
{
  int64_t v3 = v1[3];
  unint64_t v2 = v1[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = *(void *)(*v1 + 48LL) + 72 * v6;
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    __int128 v11 = *(_OWORD *)(v7 + 24);
    uint64_t v12 = *(void *)(v7 + 40);
    uint64_t v13 = *(void *)(v7 + 48);
    unint64_t v14 = *(void *)(v7 + 56);
    char v15 = *(_BYTE *)(v7 + 64);
    v1[3] = v4;
    v1[4] = v5;
    uint64_t v16 = v1[5];
    if (!__OFADD__(v16, 1LL))
    {
      v1[5] = v16 + 1;
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v11;
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v14;
      uint64_t v17 = v11;
      *(_BYTE *)(a1 + 7sub_100006034(v0 + 2) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v17);
      sub_10002B568(v13, v14);
      return;
    }

    __break(1u);
    goto LABEL_25;
  }

  int64_t v18 = v3 + 1;
  if (!__OFADD__(v3, 1LL))
  {
    int64_t v19 = (unint64_t)(v1[2] + 64LL) >> 6;
    if (v18 < v19)
    {
      uint64_t v20 = v1[1];
      unint64_t v21 = *(void *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_8:
        uint64_t v5 = (v21 - 1) & v21;
        unint64_t v6 = __clz(__rbit64(v21)) + (v18 << 6);
        int64_t v4 = v18;
        goto LABEL_3;
      }

      int64_t v22 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_11:
          int64_t v18 = v22;
          goto LABEL_8;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * (v3 + 3));
          if (v21)
          {
            int64_t v18 = v3 + 3;
            goto LABEL_8;
          }

          int64_t v22 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v19)
          {
            unint64_t v21 = *(void *)(v20 + 8 * v22);
            if (v21) {
              goto LABEL_11;
            }
            int64_t v18 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v19)
            {
              unint64_t v21 = *(void *)(v20 + 8 * v18);
              if (v21) {
                goto LABEL_8;
              }
              int64_t v4 = v19 - 1;
              int64_t v23 = v3 + 6;
              while (v19 != v23)
              {
                unint64_t v21 = *(void *)(v20 + 8 * v23++);
                if (v21)
                {
                  int64_t v18 = v23 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }

    v1[3] = v4;
    v1[4] = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 57) = 0u;
    return;
  }

uint64_t ApprovalSettingsStateEntry.debugDescription.getter()
{
  v37[0] = 0LL;
  v37[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(83LL);
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v1._uint64_t object = (void *)0x8000000100123A60LL;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)v0;
  int64_t v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._uint64_t object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 0x79616C707369440ALL;
  v5._uint64_t object = (void *)0xEF203A656D614E20LL;
  String.append(_:)(v5);
  sub_100067E40(v0 + 16, (uint64_t)v37);
  sub_100067E40((uint64_t)v37, (uint64_t)v36);
  sub_100066F7C((uint64_t)v37);
  uint64_t v6 = sub_100005FB4(&qword_100159470);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)(v36, v6);
  uint64_t object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._uint64_t countAndFlagsBits = 0x542065676173550ALL;
  v9._uint64_t object = (void *)0xED0000203A747865LL;
  String.append(_:)(v9);
  sub_100067E40(v0 + 32, (uint64_t)v36);
  sub_100067E40((uint64_t)v36, (uint64_t)&v32);
  sub_100066F7C((uint64_t)v36);
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v32, v6);
  __int128 v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._uint64_t countAndFlagsBits = 0x3A656372756F530ALL;
  v12._uint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)(v0 + 48);
  unint64_t v14 = *(void *)(v0 + 56);
  if (v14 >> 60 == 15)
  {
    unint64_t v15 = 0xE600000000000000LL;
    uint64_t v16 = 0x6D6574737973LL;
  }

  else
  {
    unint64_t v32 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
    sub_10002B568(v13, v14);
    sub_1000125E0(v13, v14);
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(v33);
    unint64_t v32 = 0xD000000000000024LL;
    unint64_t v33 = 0x8000000100123930LL;
    v17._uint64_t countAndFlagsBits = sub_100013B60(v13, v14);
    int64_t v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    sub_10002193C(v13, v14);
    uint64_t v16 = v32;
    unint64_t v15 = v33;
  }

  unint64_t v19 = v15;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v15);
  sub_10002193C(v13, v14);
  v20._uint64_t object = (void *)0x8000000100123A80LL;
  v20._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v20);
  char v22 = *(_BYTE *)(v0 + 64);
  if (qword_10015FB30 != -1) {
    uint64_t v21 = swift_once(&qword_10015FB30, sub_10005C880);
  }
  uint64_t v23 = qword_10015FB38;
  __chkstk_darwin(v21);
  v31[16] = v22;
  swift_bridgeObjectRetain(v23);
  uint64_t v25 = sub_10006657C(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10006A038, (uint64_t)v31);
  swift_bridgeObjectRelease(v23);
  uint64_t v26 = sub_10005CB14(v25);
  unint64_t v28 = v27;
  uint64_t result = swift_release(v25);
  if (v28)
  {
    v30._uint64_t countAndFlagsBits = (uint64_t)v26;
    v30._uint64_t object = v28;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v28);
    return v34;
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_100062A1C(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  unint64_t v7 = a4;
  uint64_t v9 = swift_allocObject(&unk_100148248, 24LL, 7LL);
  *(void *)(v9 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = swift_allocObject(&unk_100148270, 24LL, 7LL);
  uint64_t v6 = (char *)v13;
  *(void *)(v13 + 16) = 15LL;
  unint64_t v14 = v7 >> 60;
  uint64_t v15 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(v7) & 0xF) : (uint64_t v16 = a3 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v17 = (v14 & ((a3 & 0x800000000000000LL) == 0)) == 0;
    uint64_t v38 = 7LL;
    if (!v17) {
      uint64_t v38 = 11LL;
    }
    sub_1000297BC(v38 | (v15 << 16), v13, a2 & 1, v9, a3, v7);
    swift_bridgeObjectRelease(v7);
    uint64_t v39 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain(v39);
    swift_release(v9);
    swift_release(v6);
    return v39;
  }

  uint64_t v49 = a1;
  BOOL v17 = (v14 & ((a3 & 0x800000000000000LL) == 0)) == 0;
  uint64_t v18 = 7LL;
  if (!v17) {
    uint64_t v18 = 11LL;
  }
  uint64_t v48 = v18 | (v16 << 16);
  unint64_t v54 = 4 * v16;
  uint64_t v56 = (char *)_swiftEmptyArrayStorage;
  unint64_t v19 = 15LL;
  unint64_t v4 = 15LL;
  unint64_t v52 = v7;
  uint64_t v53 = v13;
  char v50 = a2;
  uint64_t v51 = a3;
  do
  {
    uint64_t v20 = String.subscript.getter(v19, a3, v7);
    unint64_t v5 = v21;
    if ((v21 & 0x2000000000000000LL) != 0) {
      uint64_t v22 = HIBYTE(v21) & 0xF;
    }
    else {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v22)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    if ((v21 & 0x1000000000000000LL) != 0)
    {
      uint64_t v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0LL, v20, v21);
    }

    else
    {
      if ((v21 & 0x2000000000000000LL) != 0)
      {
        v55[0] = v20;
        v55[1] = v21 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v23 = v55;
      }

      else if ((v20 & 0x1000000000000000LL) != 0)
      {
        uint64_t v23 = (void *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }

      else
      {
        uint64_t v23 = (void *)_StringObject.sharedUTF8.getter(v20, v21);
      }

      uint64_t v24 = _decodeScalar(_:startingAt:)(v23);
    }

    uint64_t v8 = v24;
    swift_bridgeObjectRelease(v5);
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && (_DWORD)v8 != 133)
    {
      unint64_t v19 = String.index(after:)(v19, a3, v7);
      continue;
    }

    if (v4 >> 14 == v19 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v19 = String.index(after:)(v19, a3, v7);
      *((void *)v6 + sub_100006034(v0 + 2) = v19;
      unint64_t v4 = v19;
      continue;
    }

    if (v19 >> 14 < v4 >> 14) {
      goto LABEL_53;
    }
    uint64_t v25 = a3;
    uint64_t v26 = v9;
    uint64_t v27 = String.subscript.getter(v4, v19, v25, v7);
    unint64_t v5 = v28;
    uint64_t v30 = v29;
    uint64_t v8 = v31;
    unint64_t v32 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0) {
      unint64_t v32 = sub_1000298C8(0LL, *((void *)v32 + 2) + 1LL, 1, v32);
    }
    unint64_t v34 = *((void *)v32 + 2);
    unint64_t v33 = *((void *)v32 + 3);
    uint64_t v56 = v32;
    if (v34 >= v33 >> 1) {
      uint64_t v56 = sub_1000298C8((char *)(v33 > 1), v34 + 1, 1, v56);
    }
    unint64_t v35 = v56;
    *((void *)v56 + sub_100006034(v0 + 2) = v34 + 1;
    int v36 = &v35[32 * v34];
    *((void *)v36 + 4) = v27;
    *((void *)v36 + 5) = v5;
    *((void *)v36 + 6) = v30;
    *((void *)v36 + 7) = v8;
    uint64_t v9 = v26;
    *(void *)(v26 + 16) = v35;
    a3 = v51;
    unint64_t v7 = v52;
    unint64_t v4 = String.index(after:)(v19, v51, v52);
    uint64_t v6 = (char *)v53;
    *(void *)(v53 + 16) = v4;
    uint64_t v37 = *((void *)v35 + 2);
    unint64_t v19 = v4;
    a2 = v50;
    if (v37 == v49) {
      break;
    }
  }

  while (v54 != v19 >> 14);
  if (v54 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v39 = v56;
    goto LABEL_50;
  }

  if (v54 >= v4 >> 14)
  {
    unint64_t v4 = String.subscript.getter(v4, v48, a3, v7);
    unint64_t v5 = v40;
    unint64_t v41 = v7;
    unint64_t v7 = v42;
    uint64_t v8 = v43;
    swift_bridgeObjectRelease(v41);
    uint64_t v6 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_47;
  }

unint64_t sub_100062E80()
{
  return ApprovalSettingsState.debugDescription.getter(*v0);
}

uint64_t ApprovalSettingsStateEntry.driverIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t ApprovalSettingsStateEntry.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t ApprovalSettingsStateEntry.source.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_10002B568(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t ApprovalSettingsStateEntry.approvalState.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_100062F18()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100062F4C + 4 * byte_100110D70[*v0]))( 0xD000000000000010LL,  0x8000000100123B30LL);
}

uint64_t sub_100062F4C()
{
  return 0x4E79616C70736964LL;
}

uint64_t sub_100062F6C()
{
  return 0x7865546567617375LL;
}

uint64_t sub_100062F88()
{
  return 0x656372756F73LL;
}

uint64_t sub_100062F9C()
{
  return 0x6C61766F72707061LL;
}

uint64_t sub_100062FC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100067ECC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100062FE4(uint64_t a1)
{
  unint64_t v2 = sub_100067E88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006300C(uint64_t a1)
{
  unint64_t v2 = sub_100067E88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100063034@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 3sub_100006034(v0 + 2) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10;
  return result;
}

uint64_t ApprovalSettingsStateEntry.encode(to:)(void *a1)
{
  int64_t v3 = v1;
  uint64_t v5 = sub_100005FB4(&qword_100159478);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100067E88();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ApprovalSettingsStateEntry.CodingKeys,  &type metadata for ApprovalSettingsStateEntry.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v23) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v23, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    sub_100066FE8((_OWORD *)v3 + 3, &v24);
    sub_100066FE8(&v24, &v23);
    char v22 = 3;
    unint64_t v18 = sub_100066FF8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for ApprovalDBEntrySource, v18);
    LOBYTE(v23) = *((_BYTE *)v3 + 64);
    char v22 = 4;
    unint64_t v19 = sub_10006703C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for ApprovalState, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 ApprovalSettingsStateEntry.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 3sub_100006034(v0 + 2) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_10006326C(void *a1)
{
  return ApprovalSettingsStateEntry.encode(to:)(a1);
}

BOOL sub_1000632B0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  char v8 = *(_BYTE *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  char v10 = *(_BYTE *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v7, (uint64_t)v9);
}

void ApprovalSettingsStateEntry.hash(into:)(uint64_t a1)
{
  __int128 v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = v2[3];
  if (v6)
  {
    uint64_t v7 = v2[2];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    String.hash(into:)(a1, v7, v6);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = v2[5];
    if (v8)
    {
LABEL_3:
      uint64_t v9 = v2[4];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(a1, v9, v8);
      swift_bridgeObjectRelease(v8);
      goto LABEL_6;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v8 = v2[5];
    if (v8) {
      goto LABEL_3;
    }
  }

  Hasher._combine(_:)(0);
LABEL_6:
  unint64_t v10 = v2[7];
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    uint64_t v11 = v2[6];
    Hasher._combine(_:)(1uLL);
    sub_1000125E0(v11, v10);
    Data.hash(into:)(a1, v11, v10);
    sub_10002193C(v11, v10);
  }

  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 64));
}

Swift::Int ApprovalSettingsStateEntry.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100063470(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000634A8()
{
  return ApprovalSettingsStateEntry.debugDescription.getter();
}

uint64_t ApprovalStateUpdateRequest.__allocating_init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  __int128 v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 3sub_100006034(v0 + 2) = v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(a1 + 32);
  *(void *)(v7 + 56) = a2;
  *(void *)(v7 + 64) = a3;
  static Date.now.getter();
  return v7;
}

uint64_t ApprovalStateUpdateRequest.init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 3sub_100006034(v0 + 2) = v12;
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a1 + 32);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  static Date.now.getter(v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v3 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp,  v11,  v7);
  return v3;
}

void *ApprovalStateUpdateRequest.deinit()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  swift_bridgeObjectRelease(v0[3]);
  sub_10002193C(v1, v2);
  swift_release(v0[8]);
  uint64_t v3 = (char *)v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return v0;
}

uint64_t ApprovalStateUpdateRequest.__deallocating_deinit()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  swift_bridgeObjectRelease(v0[3]);
  sub_10002193C(v1, v2);
  swift_release(v0[8]);
  uint64_t v3 = (char *)v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

unint64_t ApprovalStateUpdateRequest.description.getter()
{
  *(void *)&v10[0] = 0LL;
  *((void *)&v10[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v1 = type metadata accessor for Date(0LL);
  unint64_t v2 = sub_100068510();
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  uint64_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._uint64_t countAndFlagsBits = 8250LL;
  v5._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  __int128 v6 = *(_OWORD *)(v0 + 32);
  v10[0] = *(_OWORD *)(v0 + 16);
  v10[1] = v6;
  char v11 = *(_BYTE *)(v0 + 48);
  sub_100067618(v10);
  v7._uint64_t countAndFlagsBits = ApprovalDBEntry.description.getter();
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  sub_10006769C(v10);
  return 0xD000000000000014LL;
}

unint64_t sub_1000637D8()
{
  return ApprovalStateUpdateRequest.description.getter();
}

uint64_t sub_1000637FC(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

BOOL sub_100063808(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return *(unsigned __int8 *)(v3 + 16) == a3;
}

Swift::Int sub_100063818(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005FB4(&qword_100159600);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

char *sub_100063ABC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005FB4(&qword_1001595D0);
    Swift::Int v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100006034(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    Swift::Int v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + sub_100006034(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100063BCC(uint64_t a1)
{
  return sub_100063ABC(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100063BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(v53, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v6);
  ApprovalSettingsStateEntry.hash(into:)((uint64_t)v53);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = v6;
  uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v10 = v7 & ~v9;
  uint64_t v49 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_34;
  }

  unint64_t v44 = v2;
  uint64_t v45 = a1;
  uint64_t v46 = v6;
  uint64_t v47 = ~v9;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v51 = *(void *)a2;
  do
  {
    uint64_t v12 = *(void *)(v8 + 48) + 72 * v10;
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v16 = *(void *)(v12 + 32);
    uint64_t v17 = *(void *)(v12 + 40);
    unint64_t v18 = *(void *)(v12 + 56);
    uint64_t v50 = *(void *)(v12 + 48);
    int v48 = *(unsigned __int8 *)(v12 + 64);
    BOOL v19 = *(void *)v12 == v51 && v13 == v11;
    if (v19
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v12, v13, v51, v11, 0LL), uint64_t v8 = v46,
                                                                                                 (v20 & 1) != 0))
    {
      uint64_t v21 = *(void *)(a2 + 24);
      if (v14)
      {
        if (!v21) {
          goto LABEL_4;
        }
        uint64_t v22 = *(void *)(a2 + 16);
        if (v15 != v22 || v14 != v21)
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v22, v21, 0LL);
          uint64_t v8 = v46;
          if ((v24 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }

      else if (v21)
      {
        goto LABEL_4;
      }

      uint64_t v25 = *(void *)(a2 + 40);
      if (v17)
      {
        if (!v25) {
          goto LABEL_4;
        }
        uint64_t v26 = *(void *)(a2 + 32);
        if (v16 != v26 || v17 != v25)
        {
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v26, v25, 0LL);
          uint64_t v8 = v46;
          if ((v28 & 1) == 0) {
            goto LABEL_4;
          }
        }
      }

      else if (v25)
      {
        goto LABEL_4;
      }

      sub_100066FE8((_OWORD *)(a2 + 48), &v54);
      if (v18 >> 60 == 15)
      {
        sub_100066FE8(&v54, v53);
        uint64_t v8 = v46;
        if (*((void *)&v53[0] + 1) >> 60 == 15LL)
        {
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          sub_10002B568(v50, v18);
          int v29 = *(unsigned __int8 *)(a2 + 64);
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v13);
          sub_10002193C(v50, v18);
          uint64_t v8 = v46;
          if (v48 == v29)
          {
            swift_bridgeObjectRelease(v46);
            sub_100069D18((void *)a2);
            uint64_t v34 = *(void *)(*v44 + 48LL) + 72 * v10;
            uint64_t v35 = *(void *)(v34 + 8);
            uint64_t v36 = *(void *)(v34 + 16);
            uint64_t v37 = *(void *)(v34 + 40);
            uint64_t v38 = *(void *)(v34 + 48);
            unint64_t v39 = *(void *)(v34 + 56);
            char v40 = *(_BYTE *)(v34 + 64);
            *(void *)uint64_t v45 = *(void *)v34;
            *(void *)(v45 + 8) = v35;
            *(void *)(v45 + 16) = v36;
            __int128 v41 = *(_OWORD *)(v34 + 24);
            *(_OWORD *)(v45 + 24) = v41;
            *(void *)(v45 + 40) = v37;
            *(void *)(v45 + 48) = v38;
            *(void *)(v45 + 56) = v39;
            *(_BYTE *)(v45 + 64) = v40;
            uint64_t v42 = v41;
            swift_bridgeObjectRetain(v37);
            swift_bridgeObjectRetain(v35);
            swift_bridgeObjectRetain(v42);
            sub_10002B568(v38, v39);
            return 0LL;
          }
        }
      }

      else
      {
        sub_100066FE8(&v54, &v55);
        uint64_t v8 = v46;
        if (*((void *)&v55 + 1) >> 60 != 15LL) {
          __asm { BR              X8 }
        }
      }
    }

Swift::Int sub_100064A84(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_1001595C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    __int128 v41 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    unint64_t v39 = v2;
    int64_t v40 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    uint64_t v42 = v3;
    uint64_t v43 = v6;
    while (1)
    {
      if (v9)
      {
        uint64_t v44 = (v9 - 1) & v9;
        int64_t v46 = v12;
        unint64_t v15 = __clz(__rbit64(v9)) | (v12 << 6);
      }

      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }

        if (v16 >= v40) {
          goto LABEL_45;
        }
        unint64_t v17 = v41[v16];
        int64_t v18 = v12 + 1;
        if (!v17)
        {
          int64_t v18 = v12 + 2;
          if (v12 + 2 >= v40) {
            goto LABEL_45;
          }
          unint64_t v17 = v41[v18];
          if (!v17)
          {
            int64_t v18 = v12 + 3;
            if (v12 + 3 >= v40) {
              goto LABEL_45;
            }
            unint64_t v17 = v41[v18];
            if (!v17)
            {
              uint64_t v19 = v12 + 4;
              if (v12 + 4 >= v40)
              {
LABEL_45:
                swift_release(v3);
                unint64_t v2 = v39;
                uint64_t v38 = 1LL << *(_BYTE *)(v3 + 32);
                if (v38 > 63) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *__int128 v41 = -1LL << v38;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v41[v19];
              if (!v17)
              {
                while (1)
                {
                  int64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_51;
                  }
                  if (v18 >= v40) {
                    goto LABEL_45;
                  }
                  unint64_t v17 = v41[v18];
                  ++v19;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v18 = v12 + 4;
            }
          }
        }

uint64_t sub_100064EBC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100064A84(v8);
    }

    else
    {
      if (v7 > v6)
      {
        Swift::Int result = (uint64_t)sub_100065CE4();
        goto LABEL_39;
      }

      sub_100065EF8(v8);
    }

    uint64_t v9 = *v3;
    Hasher.init(_seed:)(v42, *(void *)(*v3 + 40));
    ApprovalSettingsStateEntry.hash(into:)((uint64_t)v42);
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    uint64_t v39 = v9 + 56;
    uint64_t v40 = v9;
    if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v37 = ~v10;
      uint64_t v11 = *(void *)v5;
      uint64_t v12 = *(void *)(v5 + 8);
      do
      {
        uint64_t v13 = *(void *)(v40 + 48) + 72 * a2;
        Swift::Int result = *(void *)v13;
        uint64_t v14 = *(void *)(v13 + 8);
        uint64_t v16 = *(void *)(v13 + 16);
        uint64_t v15 = *(void *)(v13 + 24);
        uint64_t v17 = *(void *)(v13 + 32);
        uint64_t v18 = *(void *)(v13 + 40);
        unint64_t v19 = *(void *)(v13 + 56);
        uint64_t v41 = *(void *)(v13 + 48);
        int v38 = *(unsigned __int8 *)(v13 + 64);
        if (*(void *)v13 != v11 || v14 != v12)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v11, v12, 0LL);
          if ((result & 1) == 0) {
            goto LABEL_11;
          }
        }

        uint64_t v21 = *(void *)(v5 + 24);
        if (v15)
        {
          if (!v21) {
            goto LABEL_11;
          }
          uint64_t v22 = *(void *)(v5 + 16);
          if (v16 != v22 || v15 != v21)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v22, v21, 0LL);
            if ((result & 1) == 0) {
              goto LABEL_11;
            }
          }
        }

        else if (v21)
        {
          goto LABEL_11;
        }

        uint64_t v24 = *(void *)(v5 + 40);
        if (v18)
        {
          if (v24)
          {
            uint64_t v25 = *(void *)(v5 + 32);
            BOOL v26 = v17 == v25 && v18 == v24;
            if (v26
              || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v25, v24, 0LL), (result & 1) != 0))
            {
LABEL_33:
              sub_100066FE8((_OWORD *)(v5 + 48), &v43);
              if (v19 >> 60 == 15)
              {
                Swift::Int result = (uint64_t)sub_100066FE8(&v43, v42);
                if (*((void *)&v42[0] + 1) >> 60 == 15LL)
                {
                  swift_bridgeObjectRetain(v18);
                  swift_bridgeObjectRetain(v14);
                  swift_bridgeObjectRetain(v15);
                  sub_10002B568(v41, v19);
                  int v27 = *(unsigned __int8 *)(v5 + 64);
                  swift_bridgeObjectRelease(v18);
                  swift_bridgeObjectRelease(v15);
                  swift_bridgeObjectRelease(v14);
                  Swift::Int result = sub_10002193C(v41, v19);
                  if (v38 == v27)
                  {
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ApprovalSettingsStateEntry);
                    __break(1u);
                    JUMPOUT(0x100065CB4LL);
                  }
                }
              }

              else
              {
                Swift::Int result = (uint64_t)sub_100066FE8(&v43, &v44);
                if (*((void *)&v44 + 1) >> 60 != 15LL) {
                  __asm { BR              X8 }
                }
              }
            }
          }
        }

        else if (!v24)
        {
          goto LABEL_33;
        }

void *sub_100065CE4()
{
  uint64_t v29 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v1);
    *uint64_t v29 = v3;
    return result;
  }

  Swift::Int result = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  int64_t v8 = 0LL;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }

    int64_t v26 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v12) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v5 + 8 * v26);
    ++v8;
    if (!v27)
    {
      int64_t v8 = v26 + 1;
      if (v26 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v27 = *(void *)(v5 + 8 * v8);
      if (!v27)
      {
        int64_t v8 = v26 + 2;
        if (v26 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v27 = *(void *)(v5 + 8 * v8);
        if (!v27) {
          break;
        }
      }
    }

Swift::Int sub_100065EF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005FB4(&qword_1001595C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_47:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v39 = v2;
  uint64_t v40 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v41 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  uint64_t v42 = v3;
  uint64_t v43 = v6;
  while (1)
  {
    if (v9)
    {
      uint64_t v44 = (v9 - 1) & v9;
      int64_t v46 = v12;
      unint64_t v15 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    if (v16 >= v41) {
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v40 + 8 * v16);
    int64_t v18 = v12 + 1;
    if (!v17)
    {
      int64_t v18 = v12 + 2;
      if (v12 + 2 >= v41) {
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v40 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v12 + 3;
        if (v12 + 3 >= v41) {
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v40 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }

LABEL_49:
  __break(1u);
  return result;
}

_BYTE *sub_100066320(_BYTE *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    *Swift::Int result = *(_BYTE *)(*(void *)(a5 + 56) + a2);
    swift_bridgeObjectRetain(v7);
    return (_BYTE *)v6;
  }

uint64_t sub_1000663A4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v23 = (unint64_t *)result;
  int64_t v6 = 0LL;
  uint64_t v25 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v18 >= v10) {
      return sub_100063818(v23, a2, v24, a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v6;
    if (!v19)
    {
      int64_t v6 = v18 + 1;
      if (v18 + 1 >= v10) {
        return sub_100063818(v23, a2, v24, a3);
      }
      unint64_t v19 = *(void *)(v25 + 8 * v6);
      if (!v19)
      {
        int64_t v6 = v18 + 2;
        if (v18 + 2 >= v10) {
          return sub_100063818(v23, a2, v24, a3);
        }
        unint64_t v19 = *(void *)(v25 + 8 * v6);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_10006657C( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    uint64_t v12 = sub_1000663A4((uint64_t)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10, v6, a2);
    if (v3) {
      swift_willThrow(v12);
    }
    else {
      return v12;
    }
  }

  else
  {
    unint64_t v13 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v13, v11);
    a3 = sub_1000663A4((uint64_t)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return a3;
}

uint64_t sub_1000666EC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000666F4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

unint64_t sub_1000666FC()
{
  unint64_t result = qword_10015FB40;
  if (!qword_10015FB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111B68, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB40);
  }

  return result;
}

unint64_t sub_100066740()
{
  unint64_t result = qword_10015FB48;
  if (!qword_10015FB48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111B18, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB48);
  }

  return result;
}

unint64_t sub_100066784()
{
  unint64_t result = qword_10015FB50;
  if (!qword_10015FB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111AC8, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB50);
  }

  return result;
}

uint64_t sub_1000667C8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7261507473726966LL && a2 == 0xEA00000000007974LL)
  {
    unint64_t v5 = 0xEA00000000007974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261507473726966LL, 0xEA00000000007974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7261506472696874LL && a2 == 0xEA00000000007974LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007974LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261506472696874LL, 0xEA00000000007974LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000668D0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100123B10LL)
  {
    swift_bridgeObjectRelease(0x8000000100123B10LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100123B10LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

void *sub_100066954(void *a1)
{
  uint64_t v2 = sub_100005FB4(&qword_1001595E0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  uint64_t v35 = v3;
  __chkstk_darwin(v2);
  unint64_t v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005FB4(&qword_1001595E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005FB4(&qword_1001595F0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  BOOL v37 = a1;
  uint64_t v15 = sub_100005110(a1, v13);
  unint64_t v16 = sub_1000666FC();
  uint64_t v17 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalDBEntrySource.CodingKeys,  &type metadata for ApprovalDBEntrySource.CodingKeys,  v16,  v13,  v14);
  if (!v17)
  {
    uint64_t v33 = v5;
    int64_t v18 = v36;
    uint64_t v39 = v10;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter(v9);
    uint64_t v20 = v19;
    if (*(void *)(v19 + 16) == 1LL)
    {
      if ((*(_BYTE *)(v19 + 32) & 1) != 0)
      {
        LOBYTE(v38) = 1;
        unint64_t v21 = sub_100066740();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys,  &v38,  v9,  &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys,  v21);
        unint64_t v22 = sub_10001AEC4();
        uint64_t v23 = v34;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v24, v34, &type metadata for Data, v22);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v23);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
        uint64_t v15 = v38;
      }

      else
      {
        LOBYTE(v38) = 0;
        unint64_t v30 = sub_100066784();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys,  &v38,  v9,  &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys,  v30);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
        uint64_t v15 = 0LL;
      }
    }

    else
    {
      uint64_t v25 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v25, &protocol witness table for DecodingError, 0LL, 0LL);
      uint64_t v27 = v26;
      uint64_t v15 = v12;
      sub_100005FB4(&qword_1001595F8);
      *uint64_t v27 = &type metadata for ApprovalDBEntrySource;
      uint64_t v28 = KeyedDecodingContainer.codingPath.getter(v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v28,  0xD00000000000002BLL,  0x8000000100123B50LL,  0LL);
      uint64_t v29 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  enum case for DecodingError.typeMismatch(_:),  v25);
      swift_willThrow(v29);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
    }
  }

  sub_100006034(v37);
  return v15;
}

uint64_t _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a3 + 16))
  {
    if (!v3) {
      return 1LL;
    }
    swift_bridgeObjectRetain(a1);
    for (unint64_t i = (unsigned __int8 *)(v6 + 64); ; i += 40)
    {
      uint64_t v8 = *((void *)i - 2);
      unint64_t v9 = *((void *)i - 1);
      int v10 = *i;
      uint64_t v11 = *((void *)i - 4);
      uint64_t v12 = *((void *)i - 3);
      swift_bridgeObjectRetain(v12);
      sub_10002B568(v8, v9);
      unsigned __int8 v13 = sub_10005E3D0(v11, v12, v8, v9, a3);
      swift_bridgeObjectRelease(v12);
      if (v13 == 3)
      {
        swift_bridgeObjectRelease(a1);
        sub_10002193C(v8, v9);
        return 0LL;
      }

      sub_10002193C(v8, v9);
      if (v10 != v13) {
        break;
      }
      if (!--v3)
      {
        swift_bridgeObjectRelease(a1);
        return 1LL;
      }
    }

    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    if (a4 >> 60 == 15) {
      return 1LL;
    }
  }

  else if (a4 >> 60 != 15)
  {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_100066F7C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100066FA4()
{
  unint64_t result = qword_10015FB58;
  if (!qword_10015FB58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111A78, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB58);
  }

  return result;
}

_OWORD *sub_100066FE8(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_100066FF8()
{
  unint64_t result = qword_100159428;
  if (!qword_100159428)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntrySource,  &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_100159428);
  }

  return result;
}

unint64_t sub_10006703C()
{
  unint64_t result = qword_100159430;
  if (!qword_100159430)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100159430);
  }

  return result;
}

BOOL _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4 != *(void *)a2 || v5 != v6)
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0LL);
    BOOL result = 0LL;
    if ((v8 & 1) == 0) {
      return result;
    }
  }

  uint64_t v10 = a1[3];
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v10)
  {
    if (v11) {
      return 0LL;
    }
    goto LABEL_15;
  }

  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = a1[2];
  uint64_t v13 = *(void *)(a2 + 16);
  BOOL v14 = v12 == v13 && v10 == v11;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0LL), BOOL result = 0LL, (v15 & 1) != 0))
  {
LABEL_15:
    uint64_t v16 = a1[5];
    uint64_t v17 = *(void *)(a2 + 40);
    if (v16)
    {
      if (v17)
      {
        uint64_t v18 = a1[4];
        uint64_t v19 = *(void *)(a2 + 32);
        if (v18 != v19 || v16 != v17)
        {
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0LL);
          BOOL result = 0LL;
          if ((v20 & 1) == 0) {
            return result;
          }
        }

        goto LABEL_22;
      }
    }

    else if (!v17)
    {
LABEL_22:
      if ((_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0( a1[6],  a1[7],  *(void *)(a2 + 48),  *(void *)(a2 + 56)) & 1) != 0) {
        return *((unsigned __int8 *)a1 + 64) == *(unsigned __int8 *)(a2 + 64);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  int v8 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v12 = *(void *)(a2 + 40);
  int v13 = *(unsigned __int8 *)(a2 + 48);
  BOOL v14 = v4 == v9 && v5 == v10;
  if ((v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v9, v10, 0LL) & 1) != 0)
    && (_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v11, v12) & 1) != 0
    && v8 == v13)
  {
    return static Date.== infix(_:_:)( a1 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp,  a2 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100067230(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100123B30LL;
    if (a2 == 0x8000000100123B30LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100123B30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v6 = 0xE600000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x6C61766F72707061LL && a2 == 0xED00006574617453LL)
  {
    swift_bridgeObjectRelease(0xED00006574617453LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061LL, 0xED00006574617453LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10006739C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_1001595D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100066FA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalDBEntry.CodingKeys,  &type metadata for ApprovalDBEntry.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100006034(a1);
  }
  LOBYTE(v25) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  uint64_t v14 = v13;
  uint64_t v24 = v12;
  char v27 = 1;
  unint64_t v15 = sub_100069C5C();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ApprovalDBEntrySource,  &v27,  v5,  &type metadata for ApprovalDBEntrySource,  v15);
  char v27 = 2;
  unint64_t v22 = v26;
  uint64_t v23 = v25;
  sub_10002B568(v25, v26);
  unint64_t v16 = sub_100069CA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ApprovalState,  &v27,  v5,  &type metadata for ApprovalState,  v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v17 = v25;
  swift_bridgeObjectRetain(v14);
  unint64_t v19 = v22;
  uint64_t v18 = v23;
  sub_10002B568(v23, v22);
  sub_10002193C(v18, v19);
  swift_bridgeObjectRelease(v14);
  sub_100006034(a1);
  swift_bridgeObjectRelease(v14);
  uint64_t result = sub_10002193C(v18, v19);
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 3sub_100006034(v0 + 2) = v17;
  return result;
}

void *sub_100067618(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  swift_bridgeObjectRetain(a1[1]);
  sub_10002B568(v2, v3);
  return a1;
}

unint64_t sub_100067658()
{
  unint64_t result = qword_100159438;
  if (!qword_100159438)
  {
    unint64_t result = swift_getWitnessTable(&unk_100110F20, &type metadata for ApprovalsError);
    atomic_store(result, (unint64_t *)&qword_100159438);
  }

  return result;
}

void *sub_10006769C(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  swift_bridgeObjectRelease(a1[1]);
  sub_10002193C(v2, v3);
  return a1;
}

uint64_t sub_1000676DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100067708(uint64_t a1)
{
  return a1;
}

unint64_t sub_100067734()
{
  unint64_t result = qword_10015FB60;
  if (!qword_10015FB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111A28, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB60);
  }

  return result;
}

unint64_t sub_100067778()
{
  unint64_t result = qword_10015FB68;
  if (!qword_10015FB68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111A00, &type metadata for ApprovalDB.V0);
    atomic_store(result, (unint64_t *)&qword_10015FB68);
  }

  return result;
}

void *sub_1000677BC(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_100159578);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100005110(a1, v7);
  unint64_t v10 = sub_100069B90();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalDB.V0.CodingKeys,  &type metadata for ApprovalDB.V0.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    uint64_t v11 = sub_100005FB4(&qword_100159560);
    uint64_t v12 = sub_100069D78( &qword_100159580,  &qword_100159560,  (void (*)(void))sub_100069C18,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = (void *)v15[1];
    sub_100006034(a1);
  }

  return v9;
}

uint64_t sub_100067908(uint64_t a1, unint64_t a2)
{
  if (a1 == 12406 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12406LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000679E0(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_1001595C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100005110(a1, v7);
  unint64_t v9 = sub_100067734();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalDB.CodingKeys,  &type metadata for ApprovalDB.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    HIBYTE(v13) = 0;
    unint64_t v10 = sub_100069E20();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ApprovalDB.V0,  (char *)&v13 + 7,  v3,  &type metadata for ApprovalDB.V0,  v10);
    uint64_t v7 = v14;
    BYTE6(v13) = 1;
    __n128 v12 = swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v13 + 6, v3, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100006034(a1);
    swift_bridgeObjectRelease(v7);
  }

  return v7;
}

unint64_t sub_100067B70()
{
  unint64_t result = qword_100159448;
  if (!qword_100159448)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsStateEntry,  &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_100159448);
  }

  return result;
}

void *sub_100067BB4(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10002B568(v4, v5);
  return a1;
}

unint64_t sub_100067C14()
{
  unint64_t result = qword_10015FB70;
  if (!qword_10015FB70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001119B0, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB70);
  }

  return result;
}

unint64_t sub_100067C58()
{
  unint64_t result = qword_100159468;
  if (!qword_100159468)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsStateEntry,  &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_100159468);
  }

  return result;
}

void *sub_100067C9C(void *a1)
{
  uint64_t v3 = sub_100005FB4(&qword_1001595A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100005110(a1, v7);
  unint64_t v10 = sub_100067C14();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalSettingsState.CodingKeys,  &type metadata for ApprovalSettingsState.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100006034(a1);
  }

  else
  {
    uint64_t v11 = sub_100005FB4(&qword_100159458);
    uint64_t v12 = sub_100069D78( &qword_1001595B0,  &qword_100159458,  (void (*)(void))sub_100069DDC,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = (void *)v15[1];
    sub_100006034(a1);
  }

  return v9;
}

uint64_t sub_100067DE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return sub_10002193C(a8, a9);
  }

  return result;
}

uint64_t sub_100067E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100067E88()
{
  unint64_t result = qword_10015FB78[0];
  if (!qword_10015FB78[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111960, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_10015FB78);
  }

  return result;
}

uint64_t sub_100067ECC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100123B30LL;
    if (a2 == 0x8000000100123B30LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100123B30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4E79616C70736964LL && a2 == 0xEB00000000656D61LL)
  {
    unint64_t v6 = 0xEB00000000656D61LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964LL, 0xEB00000000656D61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x7865546567617375LL && a2 == 0xE900000000000074LL)
  {
    unint64_t v7 = 0xE900000000000074LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865546567617375LL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0x6C61766F72707061LL && a2 == 0xED00006574617453LL)
  {
    swift_bridgeObjectRelease(0xED00006574617453LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061LL, 0xED00006574617453LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100068124@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005FB4(&qword_100159590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005110(a1, v9);
  unint64_t v11 = sub_100067E88();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ApprovalSettingsStateEntry.CodingKeys,  &type metadata for ApprovalSettingsStateEntry.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100006034(a1);
  }
  LOBYTE(v36) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  uint64_t v14 = v13;
  uint64_t v34 = v12;
  LOBYTE(v36) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  uint64_t v35 = v16;
  uint64_t v31 = v15;
  LOBYTE(v36) = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v33 = 0LL;
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  char v38 = 3;
  uint64_t v18 = v17;
  unint64_t v19 = sub_100069C5C();
  swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ApprovalDBEntrySource,  &v38,  v5,  &type metadata for ApprovalDBEntrySource,  v19);
  uint64_t v32 = v18;
  uint64_t v20 = v36;
  char v38 = 4;
  unint64_t v29 = v37;
  sub_10002B568(v36, v37);
  unint64_t v21 = sub_100069CA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ApprovalState,  &v38,  v5,  &type metadata for ApprovalState,  v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v22 = v36;
  swift_bridgeObjectRetain(v14);
  uint64_t v23 = v20;
  uint64_t v24 = v35;
  swift_bridgeObjectRetain(v35);
  uint64_t v25 = v32;
  swift_bridgeObjectRetain(v32);
  unint64_t v26 = v29;
  sub_10002B568(v23, v29);
  sub_10002193C(v23, v26);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  sub_100006034(a1);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v14);
  uint64_t result = sub_10002193C(v23, v26);
  *(void *)a2 = v34;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v31;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 3sub_100006034(v0 + 2) = v30;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v26;
  *(_BYTE *)(a2 + 64) = v22;
  return result;
}

unint64_t sub_100068510()
{
  unint64_t result = qword_10015ABD0;
  if (!qword_10015ABD0)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_10015ABD0);
  }

  return result;
}

uint64_t sub_10006855C()
{
  return sub_100012B78(&qword_100159480, &qword_100159488, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10006858C()
{
  unint64_t result = qword_100159490;
  if (!qword_100159490)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntrySource,  &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_100159490);
  }

  return result;
}

unint64_t sub_1000685D4()
{
  unint64_t result = qword_100159498;
  if (!qword_100159498)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsStateEntry,  &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_100159498);
  }

  return result;
}

ValueMetadata *type metadata accessor for ApprovalState()
{
  return &type metadata for ApprovalState;
}

uint64_t destroy for ApprovalsError(uint64_t *a1)
{
  return sub_1000666F4(*a1, a1[1]);
}

uint64_t _s10driverkitd14ApprovalsErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000666EC(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ApprovalsError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000666EC(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000666F4(v6, v7);
  return a1;
}

__n128 initializeWithTake for ApprovalsError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ApprovalsError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000666F4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalsError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000687C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000687CC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalsError()
{
  return &type metadata for ApprovalsError;
}

uint64_t *destroy for ApprovalDBEntrySource(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000LL) == 0) {
    return (uint64_t *)sub_10001226C(*result, v1);
  }
  return result;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000LL) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v4 = *a2;
    sub_1000125E0(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }

  return a1;
}

uint64_t *assignWithCopy for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000LL;
  if ((v4 & 0x3000000000000000LL) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_1000125E0(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_10001226C(v10, v11);
      return a1;
    }

    sub_10001226C(*a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  uint64_t v7 = *a2;
  sub_1000125E0(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for CodeSigningHash(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000LL) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000LL) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001226C(v7, v4);
      return a1;
    }

    sub_10001226C(*a1, v4);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntrySource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntrySource( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

uint64_t sub_1000689F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0LL;
  }
}

void *sub_100068A20(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *__n128 result = a2 - 13;
    result[1] = 0LL;
  }

  else if (a2)
  {
    *__n128 result = 0LL;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }

  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource()
{
  return &type metadata for ApprovalDBEntrySource;
}

uint64_t destroy for ApprovalDBEntry(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  unint64_t v3 = a1[3];
  if (v3 >> 60 != 15) {
    return sub_10001226C(a1[2], v3);
  }
  return result;
}

uint64_t initializeWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1000125E0(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }

  *(_BYTE *)(a1 + 3sub_100006034(v0 + 2) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = (uint64_t *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v9 = *v6;
      sub_1000125E0(*v6, *(void *)(a2 + 24));
      uint64_t v10 = *(void *)(a1 + 16);
      unint64_t v11 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v7;
      sub_10001226C(v10, v11);
      goto LABEL_8;
    }

    sub_100068BF4(a1 + 16);
    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v8 = *v6;
  sub_1000125E0(*v6, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
LABEL_8:
  *(_BYTE *)(a1 + 3sub_100006034(v0 + 2) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_100068BF4(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_1001594A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 initializeWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 3sub_100006034(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = (void *)(a2 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v6;
      *(void *)(a1 + 24) = v8;
      sub_10001226C(v9, v7);
      goto LABEL_6;
    }

    sub_100068BF4(a1 + 16);
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 3sub_100006034(v0 + 2) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 3sub_100006034(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry()
{
  return &type metadata for ApprovalDBEntry;
}

uint64_t *initializeBufferWithCopyOfBuffer for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ApprovalDB(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDB(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDB(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB()
{
  return &type metadata for ApprovalDB;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState()
{
  return &type metadata for ApprovalSettingsState;
}

uint64_t destroy for ApprovalSettingsStateEntry(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[5]);
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    return sub_10001226C(a1[6], v3);
  }
  return result;
}

uint64_t initializeWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  unint64_t v7 = (uint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  }

  else
  {
    uint64_t v9 = *v7;
    sub_1000125E0(*v7, v8);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v8;
  }

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = (uint64_t *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 != 15LL)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      sub_1000125E0(*v10, *(void *)(a2 + 56));
      uint64_t v14 = *(void *)(a1 + 48);
      unint64_t v15 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v11;
      sub_10001226C(v14, v15);
      goto LABEL_8;
    }

    sub_100068BF4(a1 + 48);
    goto LABEL_6;
  }

  if (v11 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
    goto LABEL_8;
  }

  uint64_t v12 = *v10;
  sub_1000125E0(*v10, *(void *)(a2 + 56));
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v11;
LABEL_8:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 3sub_100006034(v0 + 2) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = (void *)(a2 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = *(void *)(a2 + 56);
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = *v10;
      *(void *)(a1 + 56) = v12;
      sub_10001226C(v13, v11);
      goto LABEL_6;
    }

    sub_100068BF4(a1 + 48);
  }

  *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100006034(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry()
{
  return &type metadata for ApprovalSettingsStateEntry;
}

uint64_t sub_100069260()
{
  return type metadata accessor for ApprovalStateUpdateRequest(0LL);
}

uint64_t type metadata accessor for ApprovalStateUpdateRequest(uint64_t a1)
{
  uint64_t result = qword_100160C00;
  if (!qword_100160C00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApprovalStateUpdateRequest);
  }
  return result;
}

uint64_t sub_1000692A4(uint64_t a1)
{
  v4[0] = "!";
  v4[1] = (char *)&value witness table for () + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ApprovalSettingsStateEntry.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100069374 + 4 * byte_100110D7A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000693A8 + 4 * byte_100110D75[v4]))();
}

uint64_t sub_1000693A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000693B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000693B8LL);
  }
  return result;
}

uint64_t sub_1000693C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000693CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000693D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000693D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry.CodingKeys()
{
  return &type metadata for ApprovalSettingsStateEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState.CodingKeys()
{
  return &type metadata for ApprovalSettingsState.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0()
{
  return &type metadata for ApprovalDB.V0;
}

ValueMetadata *type metadata accessor for ApprovalDB.CodingKeys()
{
  return &type metadata for ApprovalDB.CodingKeys;
}

uint64_t _s10driverkitd13ApprovalStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100069484 + 4 * byte_100110D84[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000694B8 + 4 * byte_100110D7F[v4]))();
}

uint64_t sub_1000694B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000694C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000694C8LL);
  }
  return result;
}

uint64_t sub_1000694D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000694DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000694E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000694E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry.CodingKeys()
{
  return &type metadata for ApprovalDBEntry.CodingKeys;
}

uint64_t _s10driverkitd10ApprovalDBV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100069550 + 4 * byte_100110D8E[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100069584 + 4 * byte_100110D89[v4]))();
}

uint64_t sub_100069584(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006958C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100069594LL);
  }
  return result;
}

uint64_t sub_1000695A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000695A8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000695AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000695B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.CodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.FirstPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.ThirdPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys;
}

unint64_t sub_1000695F4()
{
  unint64_t result = qword_100160D10[0];
  if (!qword_100160D10[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111528, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, qword_100160D10);
  }

  return result;
}

unint64_t sub_10006963C()
{
  unint64_t result = qword_100161020[0];
  if (!qword_100161020[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111630, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, qword_100161020);
  }

  return result;
}

unint64_t sub_100069684()
{
  unint64_t result = qword_100161230[0];
  if (!qword_100161230[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001116E8, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, qword_100161230);
  }

  return result;
}

unint64_t sub_1000696CC()
{
  unint64_t result = qword_100161440[0];
  if (!qword_100161440[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001117A0, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, qword_100161440);
  }

  return result;
}

unint64_t sub_100069714()
{
  unint64_t result = qword_1001616D0[0];
  if (!qword_1001616D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111880, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, qword_1001616D0);
  }

  return result;
}

unint64_t sub_10006975C()
{
  unint64_t result = qword_1001618E0[0];
  if (!qword_1001618E0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111938, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_1001618E0);
  }

  return result;
}

unint64_t sub_1000697A4()
{
  unint64_t result = qword_1001619F0;
  if (!qword_1001619F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001118A8, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001619F0);
  }

  return result;
}

unint64_t sub_1000697EC()
{
  unint64_t result = qword_1001619F8[0];
  if (!qword_1001619F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001118D0, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_1001619F8);
  }

  return result;
}

unint64_t sub_100069834()
{
  unint64_t result = qword_100161A80;
  if (!qword_100161A80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001117F0, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161A80);
  }

  return result;
}

unint64_t sub_10006987C()
{
  unint64_t result = qword_100161A88[0];
  if (!qword_100161A88[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111818, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, qword_100161A88);
  }

  return result;
}

unint64_t sub_1000698C4()
{
  unint64_t result = qword_100161B90;
  if (!qword_100161B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111710, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161B90);
  }

  return result;
}

unint64_t sub_10006990C()
{
  unint64_t result = qword_100161B98[0];
  if (!qword_100161B98[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111738, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, qword_100161B98);
  }

  return result;
}

unint64_t sub_100069954()
{
  unint64_t result = qword_100161C20;
  if (!qword_100161C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111658, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161C20);
  }

  return result;
}

unint64_t sub_10006999C()
{
  unint64_t result = qword_100161C28[0];
  if (!qword_100161C28[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111680, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, qword_100161C28);
  }

  return result;
}

unint64_t sub_1000699E4()
{
  unint64_t result = qword_100161CB0;
  if (!qword_100161CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111550, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161CB0);
  }

  return result;
}

unint64_t sub_100069A2C()
{
  unint64_t result = qword_100161CB8[0];
  if (!qword_100161CB8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111578, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, qword_100161CB8);
  }

  return result;
}

unint64_t sub_100069A74()
{
  unint64_t result = qword_100161D40;
  if (!qword_100161D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111498, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161D40);
  }

  return result;
}

unint64_t sub_100069ABC()
{
  unint64_t result = qword_100161D48[0];
  if (!qword_100161D48[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001114C0, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, qword_100161D48);
  }

  return result;
}

unint64_t sub_100069B04()
{
  unint64_t result = qword_100161DD0;
  if (!qword_100161DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001115A0, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161DD0);
  }

  return result;
}

unint64_t sub_100069B4C()
{
  unint64_t result = qword_100161DD8[0];
  if (!qword_100161DD8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001115C8, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, qword_100161DD8);
  }

  return result;
}

unint64_t sub_100069B90()
{
  unint64_t result = qword_100161E60;
  if (!qword_100161E60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111C70, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161E60);
  }

  return result;
}

unint64_t sub_100069BD4()
{
  unint64_t result = qword_100159570;
  if (!qword_100159570)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntry,  &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_100159570);
  }

  return result;
}

unint64_t sub_100069C18()
{
  unint64_t result = qword_100159588;
  if (!qword_100159588)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntry,  &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_100159588);
  }

  return result;
}

unint64_t sub_100069C5C()
{
  unint64_t result = qword_100159598;
  if (!qword_100159598)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalDBEntrySource,  &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_100159598);
  }

  return result;
}

unint64_t sub_100069CA0()
{
  unint64_t result = qword_1001595A0;
  if (!qword_1001595A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_1001595A0);
  }

  return result;
}

uint64_t sub_100069CE4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100069D08()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_100069D18(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10002193C(v4, v5);
  return a1;
}

uint64_t sub_100069D78(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_100012010(a2);
    a3();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100069DDC()
{
  unint64_t result = qword_1001595B8;
  if (!qword_1001595B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ApprovalSettingsStateEntry,  &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_1001595B8);
  }

  return result;
}

unint64_t sub_100069E20()
{
  unint64_t result = qword_100161E68[0];
  if (!qword_100161E68[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001117C8, &type metadata for ApprovalDB.V0);
    atomic_store(result, qword_100161E68);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s10driverkitd21ApprovalSettingsStateV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100069EF4 + 4 * byte_100110D93[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100069F14 + 4 * byte_100110D98[v4]))();
  }
}

_BYTE *sub_100069EF4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100069F14(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100069F1C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100069F24(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100069F2C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100069F34(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0.CodingKeys()
{
  return &type metadata for ApprovalDB.V0.CodingKeys;
}

unint64_t sub_100069F54()
{
  unint64_t result = qword_100161F70[0];
  if (!qword_100161F70[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111C48, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, qword_100161F70);
  }

  return result;
}

unint64_t sub_100069F9C()
{
  unint64_t result = qword_100162080;
  if (!qword_100162080)
  {
    unint64_t result = swift_getWitnessTable(&unk_100111BB8, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162080);
  }

  return result;
}

unint64_t sub_100069FE4()
{
  unint64_t result = qword_100162088[0];
  if (!qword_100162088[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100111BE0, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, qword_100162088);
  }

  return result;
}

uint64_t sub_10006A03C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for POSIXError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10006A6AC(0xD000000000000010LL, 0x8000000100123B80LL, v25);
  uint64_t v6 = v22;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = (void *)_CFXPCCreateXPCObjectFromCFObject(isa);

  if (!v8)
  {
    unint64_t v9 = sub_100012624();
    uint64_t v10 = swift_allocError(&type metadata for KMError, v9, 0LL, 0LL);
    *(void *)uint64_t v11 = 0xD000000000000026LL;
    *(void *)(v11 + 8) = 0x8000000100123BA0LL;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)(v11 + 64) = 0LL;
    *(_BYTE *)(v11 + 7sub_100006034(v0 + 2) = 4;
    swift_willThrow(v10);
    return sub_10006A7A4((uint64_t)v25);
  }

  sub_10001A148((uint64_t)v25, (uint64_t)v23, &qword_100157FF8);
  if (v24)
  {
  }

  else
  {
    sub_10006A7A4((uint64_t)v23);
  }

  v23[0] = 0;
  uint64_t v12 = sub_100004DA4(v8, v23);
  if ((_DWORD)v12)
  {
    uint64_t v13 = POSIXErrorCode.init(rawValue:)(v12);
    else {
      int v14 = v13;
    }
    unsigned int v21 = v14;
    unint64_t v15 = sub_10006A420((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v16 = sub_10006A7E4();
    uint64_t v17 = _BridgedStoredNSError.init(_:userInfo:)(&v21, v15, v2, v16);
    POSIXError._nsError.getter(v17);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_willThrow(v18);
    swift_unknownObjectRelease(v8);
    return sub_10006A7A4((uint64_t)v25);
  }

  sub_10006A7A4((uint64_t)v25);
  swift_unknownObjectRelease(v8);
  return v23[0];
}

uint64_t sub_10006A2C8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80LL))();
}

uint64_t sub_10006A2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10006A368(v10, v7, v8);
}

uint64_t sub_10006A368(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100159608);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10006A3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159608);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

unint64_t sub_10006A420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100005FB4(&qword_100158228);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001A148(v7, (uint64_t)&v17, (uint64_t *)&unk_100159E40);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_10006A84C(v17, v18, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10006A568);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100017790(&v19, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10006A568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

double sub_10006A6AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10006A84C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100006178);
  LOBYTE(asub_100006034(v0 + 2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100017228();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100017790((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_100035F88(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_10006A7A4(uint64_t a1)
{
  uint64_t v2 = sub_100005FB4(&qword_100157FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10006A7E4()
{
  unint64_t result = qword_100159CF0;
  if (!qword_100159CF0)
  {
    uint64_t v1 = type metadata accessor for POSIXError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for POSIXError, v1);
    atomic_store(result, (unint64_t *)&qword_100159CF0);
  }

  return result;
}

uint64_t type metadata accessor for RealDaemonLauncher()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd18RealDaemonLauncher);
}

uint64_t sub_10006A84C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v6 = Hasher._finalize()();
  return a3(a1, a2, v6);
}

void sub_10006A8B8(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6 = (uint64_t *)sub_100090308();
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = sub_100005FB4((uint64_t *)&unk_1001596B0);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_10010F110;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v11 = sub_100026B64();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(v10 + 40) = v8;
  sub_100026BA8();
  uint64_t v12 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  swift_bridgeObjectRelease(v10);

  uint64_t v15 = swift_allocObject(&unk_100148450, 32LL, 7LL);
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  aBlock[4] = sub_10006AAE0;
  uint64_t v23 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10006AB00;
  aBlock[3] = &unk_100148468;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v23;
  swift_retain(a3);
  swift_release(v17);
  uint64_t v18 = String.utf8CString.getter(v7);
  xpc_set_event_stream_handler((const char *)(v18 + 32), a1, v16);
  swift_release(v18);
  _Block_release(v16);
  uint64_t v19 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_10010F110;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = v11;
  *(void *)(v19 + 3sub_100006034(v0 + 2) = v7;
  *(void *)(v19 + 40) = v8;
  uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  swift_bridgeObjectRelease(v19);
}

uint64_t sub_10006AABC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006AAE0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10006AB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10006AB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006034(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006AB58(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10006AB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[3] = a2;
  v10[4] = a3;
  Swift::Int v6 = sub_100005F0C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v6, v3, a2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_100005F48(a1, v7);
  return sub_10006ABD8(v10, v7, v8);
}

uint64_t sub_10006ABD8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100159728);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + 40LL))(v8, v6, v6, a2);
  return sub_100006034(a1);
}

uint64_t sub_10006AC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100159728);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 32LL))(v4, v4, a1);
}

uint64_t type metadata accessor for RealDistNote()
{
  return objc_opt_self(&OBJC_CLASS____TtC10driverkitd12RealDistNote);
}

unint64_t sub_10006ACB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v4, v24);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  uint64_t v6 = (uint64_t *)sub_10008F664();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *(void *)(inited + 3sub_100006034(v0 + 2) = v8;
  *(void *)(inited + 40) = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 8);
  __n128 v10 = swift_bridgeObjectRetain(v7);
  uint64_t v11 = v9(a1, a2, v10);
  *(void *)(inited + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  unint64_t v13 = sub_100015D14(inited);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t *)sub_10008F6B8();
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v23 = sub_100005FB4((uint64_t *)&unk_10015BA50);
    *(void *)&__int128 v22 = v15;
    sub_100017790(&v22, v21);
    swift_bridgeObjectRetain(v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    sub_100017090(v21, v17, v18, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v13;
}

unint64_t sub_10006ADD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005FB4(&qword_100159CA0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    __int128 v15 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100006114(v7, v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006AEF4(uint64_t a1)
{
  if (!a1)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_13;
  }

  swift_bridgeObjectRetain(a1);
  uint64_t v2 = sub_10008F2B8();
  if (!*(void *)(a1 + 16))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(a1);
    goto LABEL_13;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_12;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v10 + 1))
  {
LABEL_13:
    sub_100012824((uint64_t)&v9, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10006AFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16LL))();
  if (!v2)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    goto LABEL_13;
  }

  uint64_t v3 = v2;
  uint64_t v4 = sub_10008F2B8();
  if (!*(void *)(v3 + 16))
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(v3);
    goto LABEL_13;
  }

  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  unint64_t v7 = sub_100006114(v6, v5);
  if ((v8 & 1) == 0)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_12;
  }

  sub_100006054(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v12 + 1))
  {
LABEL_13:
    sub_100012824((uint64_t)&v11, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10006B104@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100005110(a1, v8);
  uint64_t v10 = *(void *)(a3 + 8);
  v14[3] = a2;
  v14[4] = v10;
  __int128 v11 = sub_100005F0C(v14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v11, v4, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3, a2, &unk_100132F3C, &unk_100132F4C);
  sub_10006B1D0(v14, AssociatedTypeWitness, v8, AssociatedTypeWitness, v9, a4);
  return sub_100006034(v14);
}

uint64_t sub_10006B1D0@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100005110(a1, v11);
  unint64_t v13 = sub_10006ACB0(v11, v12);
  sub_10006CE64(v13, a2, a3, a4, a5, a6);
  return swift_bridgeObjectRelease(v13);
}

double sub_10006B278()
{
  uint64_t v0 = sub_100005FB4(&qword_100159CA8);
  uint64_t v1 = swift_allocObject(v0, 304LL, 7LL);
  *(void *)&double result = 17LL;
  *(_OWORD *)(v1 + 16) = xmmword_100111D40;
  *(void *)(v1 + 3sub_100006034(v0 + 2) = &type metadata for KernelRequests.GetRequests;
  *(void *)(v1 + 40) = &off_100148530;
  *(void *)(v1 + 48) = &type metadata for KernelRequests.GetLoaded;
  *(void *)(v1 + 56) = &off_100148548;
  *(void *)(v1 + 64) = &type metadata for KernelRequests.LoadExtension;
  *(void *)(v1 + 7sub_100006034(v0 + 2) = &off_100148578;
  *(void *)(v1 + 80) = &type metadata for KernelRequests.UnloadExtension;
  *(void *)(v1 + 88) = &off_1001485A8;
  *(void *)(v1 + 96) = &type metadata for KernelRequests.SendResource;
  *(void *)(v1 + 104) = &off_1001485C0;
  *(void *)(v1 + 11sub_100006034(v0 + 2) = &type metadata for KernelRequests.LoadFileset;
  *(void *)(v1 + 120) = &off_1001485D8;
  *(void *)(v1 + 128) = &type metadata for KernelRequests.DextLaunch;
  *(void *)(v1 + 136) = &off_100148640;
  *(void *)(v1 + 144) = &type metadata for KernelRequests.RequestResource;
  *(void *)(v1 + 15sub_100006034(v0 + 2) = &off_100148690;
  *(void *)(v1 + 160) = &type metadata for KernelRequests.LoadRequest;
  *(void *)(v1 + 168) = &off_1001486E0;
  *(void *)(v1 + 176) = &type metadata for KernelRequests.LoadNotification;
  *(void *)(v1 + 184) = &off_100148730;
  *(void *)(v1 + 19sub_100006034(v0 + 2) = &type metadata for KernelRequests.UnloadNotification;
  *(void *)(v1 + 200) = &off_100148780;
  *(void *)(v1 + 208) = &type metadata for KernelRequests.RequestExit;
  *(void *)(v1 + 216) = &off_1001487B8;
  *(void *)(v1 + 224) = &type metadata for KernelRequests.MissingAuxKCBundles;
  *(void *)(v1 + 23sub_100006034(v0 + 2) = &off_1001487D0;
  *(void *)(v1 + 240) = &type metadata for KernelRequests.AuxKCBundleAvailable;
  *(void *)(v1 + 248) = &off_100148800;
  *(void *)(v1 + 256) = &type metadata for KernelRequests.GetDaemonActive;
  *(void *)(v1 + 264) = &off_100148818;
  *(void *)(v1 + 27sub_100006034(v0 + 2) = &type metadata for KernelRequests.GetDrivers;
  *(void *)(v1 + 280) = &off_100148830;
  *(void *)(v1 + 288) = &type metadata for KernelRequests.DextUpdateNotification;
  *(void *)(v1 + 296) = &off_100148868;
  qword_1001753B0 = v1;
  return result;
}

void *sub_10006B408@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t *)sub_10008F664();
  if (!*(void *)(a1 + 16))
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    goto LABEL_16;
  }

  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  unint64_t v9 = sub_100006114(v7, v8);
  if ((v10 & 1) == 0)
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v43);
  swift_bridgeObjectRelease(v8);
  if (!*((void *)&v44 + 1))
  {
LABEL_16:
    sub_100012824((uint64_t)&v43, &qword_100157FF8);
    goto LABEL_17;
  }

  if ((swift_dynamicCast(v42, &v43, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_17:
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(*((void *)&v43 + 1));
    *(void *)&__int128 v43 = 0x2074736575716552LL;
    *((void *)&v43 + 1) = 0xE800000000000000LL;
    v25._uint64_t countAndFlagsBits = Dictionary.description.getter(v24);
    uint64_t object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    unint64_t v27 = 0x8000000100123CE0LL;
    unint64_t v28 = 0xD000000000000011LL;
LABEL_18:
    String.append(_:)(*(Swift::String *)&v28);
LABEL_19:
    __int128 v29 = v43;
    unint64_t v30 = sub_100012624();
    uint64_t v31 = swift_allocError(&type metadata for KMError, v30, 0LL, 0LL);
    *(_OWORD *)uint64_t v32 = v29;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(void *)(v32 + 64) = 0LL;
    *(_BYTE *)(v32 + 7sub_100006034(v0 + 2) = 9;
    return (void *)swift_willThrow(v31);
  }

  uint64_t v12 = v42[0];
  uint64_t v11 = (void *)v42[1];
  uint64_t v13 = sub_100072480();
  if (!*(void *)(v13 + 16))
  {
LABEL_22:
    swift_bridgeObjectRelease(v13);
LABEL_23:
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(*((void *)&v43 + 1));
    *(void *)&__int128 v43 = 0xD000000000000017LL;
    *((void *)&v43 + 1) = 0x8000000100123D00LL;
    v34._uint64_t countAndFlagsBits = v12;
    v34._uint64_t object = v11;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v11);
    goto LABEL_19;
  }

  swift_bridgeObjectRetain(v11);
  unint64_t v14 = sub_100006114(v12, (uint64_t)v11);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
    goto LABEL_22;
  }

  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 16 * v14);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v13);
  uint64_t v17 = swift_conformsToProtocol2(v16, &protocol descriptor for KernelRequestFromKernel);
  if (v17)
  {
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  if (!v16) {
    goto LABEL_23;
  }
  uint64_t v19 = (uint64_t *)sub_10008F6B8();
  if (*(void *)(a1 + 16))
  {
    uint64_t v45 = v18;
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain(v21);
    unint64_t v22 = sub_100006114(v20, v21);
    if ((v23 & 1) != 0)
    {
      sub_100006054(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v43);
    }

    else
    {
      __int128 v43 = 0u;
      __int128 v44 = 0u;
    }

    swift_bridgeObjectRelease(v21);
    uint64_t v18 = v45;
    if (*((void *)&v44 + 1))
    {
      uint64_t v35 = sub_100005FB4((uint64_t *)&unk_10015BA50);
      int v36 = swift_dynamicCast(v42, &v43, (char *)&type metadata for Any + 8, v35, 6LL);
      uint64_t v37 = v42[0];
      if (v36) {
        uint64_t v38 = v42[0];
      }
      else {
        uint64_t v38 = 0LL;
      }
      if (v38)
      {
        uint64_t v38 = v37;
        goto LABEL_36;
      }

      goto LABEL_34;
    }
  }

  else
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
  }

  sub_100012824((uint64_t)&v43, &qword_100157FF8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v16, v18) & 1) != 0)
  {
LABEL_34:
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(53LL);
    v39._uint64_t countAndFlagsBits = 0x2074736575716552LL;
    v39._uint64_t object = (void *)0xE800000000000000LL;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = v12;
    v40._uint64_t object = v11;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v11);
    unint64_t v28 = 0xD00000000000002BLL;
    unint64_t v27 = 0x8000000100123D20LL;
    goto LABEL_18;
  }

  uint64_t v38 = 0LL;
LABEL_36:
  swift_bridgeObjectRelease(v11);
  int64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  a2[3] = v16;
  a2[4] = v18;
  sub_100005F0C(a2);
  double result = (void *)v41(v38, v16, v18);
  if (v3) {
    return sub_100072694(a2);
  }
  return result;
}

uint64_t sub_10006B83C(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F700, qword_1001753B8, &qword_1001753B8[1]);
}

uint64_t sub_10006B854()
{
  return 0LL;
}

uint64_t sub_10006B85C(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162118, qword_1001753B8, &qword_1001753B8[1], (uint64_t)sub_10006B83C);
}

uint64_t sub_10006B87C(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F76C, qword_1001753C8, &qword_1001753C8[1]);
}

double sub_10006B894()
{
  uint64_t v0 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v1 = swift_allocObject(v0, 224LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100111D50;
  uint64_t v2 = sub_10008F368();
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *(void *)(v1 + 3sub_100006034(v0 + 2) = v4;
  *(void *)(v1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_10008F52C();
  uint64_t v7 = *(void *)v5;
  uint64_t v6 = *((void *)v5 + 1);
  *(void *)(v1 + 48) = v7;
  *(void *)(v1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  uint64_t v8 = sub_10008F2B8();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(v1 + 64) = v10;
  *(void *)(v1 + 7sub_100006034(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = sub_10008F5F8();
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)(v1 + 80) = v13;
  *(void *)(v1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  unint64_t v14 = sub_10008F484();
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *(void *)(v1 + 96) = v16;
  *(void *)(v1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v17 = (uint64_t *)sub_10008F64C();
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(v1 + 11sub_100006034(v0 + 2) = v19;
  *(void *)(v1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = (uint64_t *)sub_10008F538();
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *(void *)(v1 + 128) = v22;
  *(void *)(v1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  char v23 = (uint64_t *)sub_10008F448();
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)(v1 + 144) = v25;
  *(void *)(v1 + 15sub_100006034(v0 + 2) = v24;
  swift_bridgeObjectRetain(v24);
  unint64_t v26 = (uint64_t *)sub_10008F4FC();
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *(void *)(v1 + 160) = v28;
  *(void *)(v1 + 168) = v27;
  swift_bridgeObjectRetain(v27);
  __int128 v29 = (uint64_t *)sub_10008F550();
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *(void *)(v1 + 176) = v31;
  *(void *)(v1 + 184) = v30;
  swift_bridgeObjectRetain(v30);
  uint64_t v32 = (uint64_t *)sub_10008F544();
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *(void *)(v1 + 19sub_100006034(v0 + 2) = v34;
  *(void *)(v1 + 200) = v33;
  swift_bridgeObjectRetain(v33);
  uint64_t v35 = (uint64_t *)sub_10008F43C();
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)(v1 + 208) = v37;
  *(void *)(v1 + 216) = v36;
  qword_1001753D8 = v1;
  *(void *)&double result = swift_bridgeObjectRetain(v36).n128_u64[0];
  return result;
}

uint64_t *sub_10006B998()
{
  if (qword_100162128 != -1) {
    swift_once(&qword_100162128, sub_10006B894);
  }
  return &qword_1001753D8;
}

double sub_10006B9D8()
{
  uint64_t v0 = sub_100005FB4((uint64_t *)&unk_100159E30);
  uint64_t v1 = swift_allocObject(v0, 176LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100111D60;
  uint64_t v2 = (uint64_t *)sub_10008F634();
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *(void *)(v1 + 3sub_100006034(v0 + 2) = v4;
  *(void *)(v1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = (uint64_t *)sub_10008F604();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v1 + 48) = v7;
  *(void *)(v1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  uint64_t v8 = (uint64_t *)sub_10008F640();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(v1 + 64) = v10;
  *(void *)(v1 + 7sub_100006034(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = (uint64_t *)sub_10008F5E0();
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(v1 + 80) = v13;
  *(void *)(v1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  unint64_t v14 = (uint64_t *)sub_10008F5EC();
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *(void *)(v1 + 96) = v16;
  *(void *)(v1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v17 = (uint64_t *)sub_10008F5D4();
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(v1 + 11sub_100006034(v0 + 2) = v19;
  *(void *)(v1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = (uint64_t *)sub_10008F628();
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *(void *)(v1 + 128) = v22;
  *(void *)(v1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  char v23 = (uint64_t *)sub_10008F61C();
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)(v1 + 144) = v25;
  *(void *)(v1 + 15sub_100006034(v0 + 2) = v24;
  swift_bridgeObjectRetain(v24);
  unint64_t v26 = (uint64_t *)sub_10008F610();
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *(void *)(v1 + 160) = v28;
  *(void *)(v1 + 168) = v27;
  qword_1001753E0 = v1;
  *(void *)&double result = swift_bridgeObjectRetain(v27).n128_u64[0];
  return result;
}

uint64_t *sub_10006BAAC()
{
  if (qword_100162130 != -1) {
    swift_once(&qword_100162130, sub_10006B9D8);
  }
  return &qword_1001753E0;
}

uint64_t sub_10006BAEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10006BAF8(*a1, *a2);
}

uint64_t sub_10006BAF8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x646564616F4CLL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x646564616F6C6E55LL;
    }
    else {
      uint64_t v4 = 7958081LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE800000000000000LL;
    }
    else {
      unint64_t v5 = 0xE300000000000000LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x646564616F6C6E55LL;
      }
      else {
        uint64_t v2 = 7958081LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE800000000000000LL;
      }
      else {
        unint64_t v7 = 0xE300000000000000LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE600000000000000LL;
    uint64_t v4 = 0x646564616F4CLL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE600000000000000LL;
  if (v4 != 0x646564616F4CLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

Swift::Int sub_10006BBF8()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE800000000000000LL;
  uint64_t v3 = 0x646564616F6C6E55LL;
  if (v1 != 1)
  {
    uint64_t v3 = 7958081LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x646564616F4CLL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE600000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10006BC8C(uint64_t a1)
{
  unint64_t v2 = 0xE800000000000000LL;
  uint64_t v3 = 0x646564616F6C6E55LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 7958081LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x646564616F4CLL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE600000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10006BCFC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE800000000000000LL;
  uint64_t v4 = 0x646564616F6C6E55LL;
  if (v2 != 1)
  {
    uint64_t v4 = 7958081LL;
    unint64_t v3 = 0xE300000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x646564616F4CLL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE600000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10006BD8C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000726C8(*a1);
  *a2 = result;
  return result;
}

void sub_10006BDB8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000LL;
  unint64_t v4 = 0xE800000000000000LL;
  uint64_t v5 = 0x646564616F6C6E55LL;
  if (v2 != 1)
  {
    uint64_t v5 = 7958081LL;
    unint64_t v4 = 0xE300000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x646564616F4CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_10006BE0C(void *a1@<X8>)
{
  *a1 = &off_100148508;
}

void sub_10006BE1C(char a1)
{
  __asm { BR              X10 }

unint64_t sub_10006BE58()
{
  int v2 = sub_10008F7D8();
  uint64_t v4 = *(void *)v2;
  uint64_t v3 = *((void *)v2 + 1);
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v5, &v18);
  *(_OWORD *)(inited + 16) = xmmword_100111D70;
  uint64_t v7 = (uint64_t *)sub_10008F7A8();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(inited + 3sub_100006034(v0 + 2) = v9;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 7sub_100006034(v0 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v3;
  swift_bridgeObjectRetain(v8);
  uint64_t v10 = sub_10008F7F0();
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)(inited + 80) = v12;
  *(void *)(inited + 88) = v11;
  if (v1)
  {
    if (v1 == 1)
    {
      unint64_t v13 = 0xE800000000000000LL;
      uint64_t v14 = 0x646564616F6C6E55LL;
    }

    else
    {
      unint64_t v13 = 0xE300000000000000LL;
      uint64_t v14 = 7958081LL;
    }
  }

  else
  {
    unint64_t v13 = 0xE600000000000000LL;
    uint64_t v14 = 0x646564616F4CLL;
  }

  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v14;
  *(void *)(inited + 104) = v13;
  swift_bridgeObjectRetain(v11);
  uint64_t v15 = sub_10008F718();
  uint64_t v16 = v15[1];
  *(void *)(inited + 128) = *v15;
  *(void *)(inited + 136) = v16;
  *(void *)(inited + 168) = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  *(void *)(inited + 144) = v0;
  swift_bridgeObjectRetain(v16);
  return sub_100015D14(inited);
}

uint64_t sub_10006BF74(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162120, qword_1001753C8, &qword_1001753C8[1], (uint64_t)sub_10006B87C);
}

uint64_t sub_10006BF94(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  uint64_t v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_10006BFE8(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F790, qword_1001753E8, &qword_1001753E8[1]);
}

uint64_t sub_10006C000(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162140, qword_1001753E8, &qword_1001753E8[1], (uint64_t)sub_10006BFE8);
}

uint64_t sub_10006C020(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F724, qword_1001753F8, &qword_1001753F8[1]);
}

unint64_t sub_10006C038(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100015D14((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = (uint64_t *)sub_10008F6D0();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v17 = &type metadata for String;
  *(void *)&__int128 v16 = a1;
  *((void *)&v16 + 1) = a2;
  sub_100017790(&v16, v15);
  swift_bridgeObjectRetain(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  sub_100017090(v15, v6, v7, isUniquelyReferenced_nonNull_native);
  unint64_t v9 = v4;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v10 = (uint64_t *)sub_10008F730();
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v17 = &type metadata for Bool;
  LOBYTE(v16) = 1;
  sub_100017790(&v16, v15);
  swift_bridgeObjectRetain(v12);
  char v13 = swift_isUniquelyReferenced_nonNull_native(v9);
  sub_100017090(v15, v11, v12, v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v9;
}

uint64_t sub_10006C150(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162148, qword_1001753F8, &qword_1001753F8[1], (uint64_t)sub_10006C020);
}

uint64_t sub_10006C170(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F6AC, qword_100175408, &qword_100175408[1]);
}

uint64_t sub_10006C188(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162150, qword_100175408, &qword_100175408[1], (uint64_t)sub_10006C170);
}

uint64_t sub_10006C1A8(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F754, qword_100175418, &qword_100175418[1]);
}

unint64_t sub_10006C1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100015D14((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v28 = v10;
  uint64_t v11 = (uint64_t *)sub_10008F73C();
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (a2)
  {
    uint64_t v27 = &type metadata for String;
    *(void *)&__int128 v26 = a1;
    *((void *)&v26 + 1) = a2;
    sub_100017790(&v26, v25);
    swift_bridgeObjectRetain(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    sub_100017090(v25, v13, v12, isUniquelyReferenced_nonNull_native);
    unint64_t v28 = v10;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    swift_bridgeObjectRetain(v11[1]);
    sub_10006A6AC(v13, v12, &v26);
    swift_bridgeObjectRelease(v12);
    sub_100012824((uint64_t)&v26, &qword_100157FF8);
  }

  uint64_t v15 = (uint64_t *)sub_10008F748();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (a4)
  {
    uint64_t v27 = &type metadata for String;
    *(void *)&__int128 v26 = a3;
    *((void *)&v26 + 1) = a4;
    sub_100017790(&v26, v25);
    swift_bridgeObjectRetain(v16);
    unint64_t v18 = v28;
    char v19 = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_100017090(v25, v17, v16, v19);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    swift_bridgeObjectRetain(v15[1]);
    sub_10006A6AC(v17, v16, &v26);
    swift_bridgeObjectRelease(v16);
    sub_100012824((uint64_t)&v26, &qword_100157FF8);
    unint64_t v18 = v28;
  }

  uint64_t v20 = (uint64_t *)sub_10008F760();
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v27 = (void *)sub_100005FB4(&qword_1001587B0);
  *(void *)&__int128 v26 = a5;
  sub_100017790(&v26, v25);
  swift_bridgeObjectRetain(v22);
  char v23 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_100017090(v25, v21, v22, v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v18;
}

uint64_t sub_10006C3D8(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162158, qword_100175418, &qword_100175418[1], (uint64_t)sub_10006C1A8);
}

uint64_t sub_10006C3F8(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F79C, qword_100175428, &qword_100175428[1]);
}

uint64_t sub_10006C410(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162160, qword_100175428, &qword_100175428[1], (uint64_t)sub_10006C3F8);
}

uint64_t sub_10006C430(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F670, qword_100175438, &qword_100175438[1]);
}

uint64_t sub_10006C448(uint64_t a1)
{
  return sub_10006C69C(a1, (uint64_t (*)(void))sub_10008F6DC);
}

uint64_t sub_10006C454(uint64_t a1)
{
  return sub_10006C780(a1, (uint64_t (*)(void))sub_10008F6E8, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_10006C468(uint64_t a1)
{
  if (!a1 || (int v2 = (uint64_t *)sub_10008F6F4(), !*(void *)(a1 + 16)))
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    goto LABEL_10;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v10 + 1))
  {
LABEL_10:
    sub_100012824((uint64_t)&v9, &qword_100157FF8);
    return 2LL;
  }

  else {
    return 2LL;
  }
}

unint64_t sub_10006C548(uint64_t a1)
{
  if (!a1 || (int v2 = (uint64_t *)sub_10008F70C(), !*(void *)(a1 + 16)))
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    goto LABEL_10;
  }

  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_100006114(v4, v3);
  if ((v6 & 1) == 0)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v12);
  swift_bridgeObjectRelease(v3);
  if (!*((void *)&v13 + 1))
  {
LABEL_10:
    sub_100012824((uint64_t)&v12, &qword_100157FF8);
    uint64_t v8 = 0LL;
    unsigned __int8 v9 = 1;
    return v8 | ((unint64_t)v9 << 32);
  }

  int v7 = swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6LL);
  uint64_t v8 = v11;
  unsigned __int8 v9 = v7 ^ 1;
  if (!v7) {
    uint64_t v8 = 0LL;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_10006C638(uint64_t a1)
{
  return sub_10006C910(a1, (uint64_t (*)(void))sub_10008F5A4);
}

uint64_t sub_10006C644@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10006C64C()
{
  return sub_10006AEF4(*v0);
}

uint64_t sub_10006C664(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162168, qword_100175438, &qword_100175438[1], (uint64_t)sub_10006C430);
}

uint64_t sub_10006C684(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F6A0, qword_100175448, &qword_100175448[1]);
}

uint64_t sub_10006C69C(uint64_t a1, uint64_t (*a2)(void))
{
  if (!a1 || (uint64_t v3 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_11;
  }

  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  unint64_t v6 = sub_100006114(v5, v4);
  if ((v7 & 1) == 0)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_11;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease(v4);
  if (!*((void *)&v11 + 1))
  {
LABEL_11:
    sub_100012824((uint64_t)&v10, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10006C780(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (!a1 || (uint64_t v5 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    goto LABEL_11;
  }

  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  unint64_t v8 = sub_100006114(v7, v6);
  if ((v9 & 1) == 0)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_11;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v12);
  swift_bridgeObjectRelease(v6);
  if (!*((void *)&v13 + 1))
  {
LABEL_11:
    sub_100012824((uint64_t)&v12, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10006C868(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162170, qword_100175448, &qword_100175448[1], (uint64_t)sub_10006C684);
}

uint64_t sub_10006C888(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F694, qword_100175458, &qword_100175458[1]);
}

uint64_t sub_10006C8A0(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162178, qword_100175458, &qword_100175458[1], (uint64_t)sub_10006C888);
}

uint64_t sub_10006C8C0(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F67C, qword_100175468, &qword_100175468[1]);
}

uint64_t sub_10006C8D8(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162180, qword_100175468, &qword_100175468[1], (uint64_t)sub_10006C8C0);
}

uint64_t sub_10006C8F8(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F688, qword_100175478, &qword_100175478[1]);
}

uint64_t sub_10006C910(uint64_t a1, uint64_t (*a2)(void))
{
  if (!a1 || (uint64_t v3 = (uint64_t *)a2(), !*(void *)(a1 + 16)))
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_11;
  }

  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  unint64_t v6 = sub_100006114(v5, v4);
  if ((v7 & 1) == 0)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_11;
  }

  sub_100006054(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease(v4);
  if (!*((void *)&v11 + 1))
  {
LABEL_11:
    sub_100012824((uint64_t)&v10, &qword_100157FF8);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10006C9F8(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162188, qword_100175478, &qword_100175478[1], (uint64_t)sub_10006C8F8);
}

uint64_t sub_10006CA18(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F6C4, qword_100175488, &qword_100175488[1]);
}

uint64_t sub_10006CA30(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162190, qword_100175488, &qword_100175488[1], (uint64_t)sub_10006CA18);
}

uint64_t sub_10006CA50(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F778, qword_100175498, &qword_100175498[1]);
}

uint64_t sub_10006CA68(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_100162198, qword_100175498, &qword_100175498[1], (uint64_t)sub_10006CA50);
}

uint64_t sub_10006CA88(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F784, qword_1001754A8, &qword_1001754A8[1]);
}

uint64_t sub_10006CAA0(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_1001621A0, qword_1001754A8, &qword_1001754A8[1], (uint64_t)sub_10006CA88);
}

uint64_t sub_10006CAC0(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F808, qword_1001754B8, &qword_1001754B8[1]);
}

uint64_t sub_10006CAD8(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_1001621A8, qword_1001754B8, &qword_1001754B8[1], (uint64_t)sub_10006CAC0);
}

uint64_t sub_10006CAF8(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F838, qword_1001754C8, &qword_1001754C8[1]);
}

unint64_t sub_10006CB10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100005FB4(&qword_100158210);
  uint64_t inited = swift_initStackObject(v6, &v15);
  *(_OWORD *)(inited + 16) = xmmword_10010F110;
  unint64_t v8 = (uint64_t *)sub_10008F718();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)(inited + 3sub_100006034(v0 + 2) = v10;
  *(void *)(inited + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0) {
    a3 = sub_10000C82C(0LL, a3[2] + 1LL, 1, a3);
  }
  unint64_t v12 = a3[2];
  unint64_t v11 = a3[3];
  if (v12 >= v11 >> 1) {
    a3 = sub_10000C82C((void *)(v11 > 1), v12 + 1, 1, a3);
  }
  a3[2] = v12 + 1;
  __int128 v13 = &a3[2 * v12];
  v13[4] = a1;
  void v13[5] = a2;
  swift_bridgeObjectRelease(a2);
  *(void *)(inited + 7sub_100006034(v0 + 2) = sub_100005FB4((uint64_t *)&unk_10015A5A0);
  *(void *)(inited + 48) = a3;
  return sub_100015D14(inited);
}

uint64_t sub_10006CC14(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, &qword_1001621B0, qword_1001754C8, &qword_1001754C8[1], (uint64_t)sub_10006CAF8);
}

uint64_t sub_10006CC34(uint64_t a1)
{
  return sub_10006CC4C(a1, (uint64_t (*)(void))sub_10008F82C, qword_1001754D8, &qword_1001754D8[1]);
}

uint64_t sub_10006CC4C(uint64_t a1, uint64_t (*a2)(void), void *a3, void *a4)
{
  uint64_t v6 = (uint64_t *)a2();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  *a3 = v8;
  *a4 = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10006CC7C(uint64_t a1)
{
  return sub_10006C69C(a1, (uint64_t (*)(void))sub_10008F814);
}

uint64_t sub_10006CC88(uint64_t a1)
{
  return sub_10006C910(a1, (uint64_t (*)(void))sub_10008F820);
}

uint64_t sub_10006CC94(uint64_t a1, uint64_t a2)
{
  return sub_10006BF94(a1, a2, qword_1001621B8, qword_1001754D8, &qword_1001754D8[1], (uint64_t)sub_10006CC34);
}

uint64_t sub_10006CCB4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

unint64_t sub_10006CCE0(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v5 = 0xD00000000000001ELL;
  }

  else
  {
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v5 = 0x6B2064616F6C6E75LL;
  }

  unint64_t v9 = v5;
  v6._uint64_t countAndFlagsBits = a1;
  v6._uint64_t object = a2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 39LL;
  v7._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v9;
}

unint64_t sub_10006CDAC()
{
  return sub_10006CCE0(*(void *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10006CDB8()
{
  id v1 = [*v0 processName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_10006CE0C()
{
  id v1 = [*v0 environment];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  return v2;
}

uint64_t sub_10006CE64@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v21[3] = sub_100005FB4((uint64_t *)&unk_10015BA50);
  v21[0] = a1;
  type metadata accessor for CFDictionary(0LL);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain(a1);
  CFDataRef v14 = sub_1000D3770((uint64_t)v21, v13, v13);
  unint64_t v16 = v15;
  sub_100006034(v21);
  if (v16 >> 60 == 15)
  {
    unint64_t v17 = sub_100012624();
    uint64_t v18 = swift_allocError(&type metadata for KMError, v17, 0LL, 0LL);
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(void *)(v19 + 64) = 0LL;
    *(_BYTE *)(v19 + 7sub_100006034(v0 + 2) = 73;
    return swift_willThrow(v18);
  }

  else
  {
    sub_10006CF88((uint64_t)v14, v16, a2, a3, a4, a5, a6);
    return sub_10002193C((uint64_t)v14, v16);
  }

uint64_t sub_10006CF88@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v58 = (char *)a7;
  uint64_t v59 = (void *)a4;
  uint64_t v12 = sub_100012010(&qword_100159838);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v12, a5, "logs response ", 0LL);
  uint64_t v14 = __chkstk_darwin(TupleTypeMetadata2);
  unint64_t v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v52 - v18);
  uint64_t v73 = _swiftEmptyArrayStorage;
  uint64_t v20 = (char *)&v52 + *(int *)(v17 + 48) - v18;
  uint64_t v21 = v61;
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(a6 + 136))( v20,  a1,  a2,  a3,  a5,  v59,  a6);
  uint64_t v23 = v21;
  if (v21)
  {
    uint64_t v72 = v21;
    swift_errorRetain(v21);
    uint64_t v24 = sub_100005FB4(&qword_10015AB20);
    uint64_t v25 = swift_dynamicCast(&v62, &v72, v24, &type metadata for KMError, 6LL);
    if ((v25 & 1) != 0)
    {
      __int128 v26 = v62;
      uint64_t v27 = v63;
      uint64_t v29 = v64;
      uint64_t v28 = v65;
      unint64_t v31 = v66;
      uint64_t v30 = v67;
      uint64_t v32 = v68;
      uint64_t v33 = v69;
      if (v71 == 3)
      {
        uint64_t v61 = v70;
        swift_bridgeObjectRetain(v62);
        int64_t v34 = v26[2];
        if (v34)
        {
          uint64_t v52 = v27;
          uint64_t v53 = v29;
          uint64_t v54 = v28;
          unint64_t v55 = v31;
          uint64_t v56 = v30;
          uint64_t v57 = v32;
          uint64_t v58 = (char *)v33;
          uint64_t v60 = v23;
          Swift::String v62 = _swiftEmptyArrayStorage;
          sub_100071D18(0LL, v34, 0);
          uint64_t v35 = v62;
          uint64_t v59 = v26;
          uint64_t v36 = v26 + 5;
          do
          {
            uint64_t v37 = *(v36 - 1);
            uint64_t v38 = *v36;
            swift_bridgeObjectRetain(*v36);
            char v40 = static os_log_type_t.error.getter(v39);
            Swift::String v62 = v35;
            unint64_t v42 = v35[2];
            unint64_t v41 = v35[3];
            if (v42 >= v41 >> 1)
            {
              sub_100071D18((char *)(v41 > 1), v42 + 1, 1);
              uint64_t v35 = v62;
            }

            v35[2] = v42 + 1;
            __int128 v43 = &v35[3 * v42];
            *((_BYTE *)v43 + 3sub_100006034(v0 + 2) = v40;
            v36 += 2;
            v43[5] = v37;
            v43[6] = v38;
            --v34;
          }

          while (v34);
          __int128 v26 = v59;
          sub_100039508((uint64_t)v59, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v61, 3);
        }

        else
        {
          sub_100039508((uint64_t)v26, v27, v29, v28, v31, v30, v32, v33, v61, 3);
          uint64_t v35 = _swiftEmptyArrayStorage;
        }

        swift_bridgeObjectRelease(v26);
        uint64_t v25 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        uint64_t v73 = v35;
        goto LABEL_15;
      }

      uint64_t v25 = sub_100039508((uint64_t)v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
    }

    uint64_t v35 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_willThrow(v25);
    goto LABEL_16;
  }

  uint64_t v35 = (void *)v22;
  *uint64_t v19 = v22;
  __int128 v44 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t *v16 = v22;
  uint64_t v45 = *(void *)(a5 - 8);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v20, a5);
  uint64_t v73 = v35;
  int64_t v46 = *(void (**)(char *, uint64_t, __n128))(v45 + 8);
  __n128 v47 = swift_bridgeObjectRetain(v35);
  v46(v44, a5, v47);
  int v48 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v49 = *v19;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v50(v48, v20, a5);
  swift_bridgeObjectRelease(v49);
  v50(v58, v48, a5);
LABEL_16:
  sub_10006D328((uint64_t *)&v73);
  return swift_bridgeObjectRelease(v35);
}

uint64_t sub_10006D328(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(result);
    uint64_t v12 = v3;
    uint64_t v4 = (void *)(v3 + 48);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = *((unsigned __int8 *)v4 - 16);
      swift_bridgeObjectRetain(*v4);
      uint64_t v8 = (void *)*sub_1000D2F10();
      uint64_t v9 = sub_100005FB4((uint64_t *)&unk_1001596B0);
      uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
      *(_OWORD *)(v10 + 16) = xmmword_10010F110;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 64) = sub_100026B64();
      *(void *)(v10 + 3sub_100006034(v0 + 2) = v6;
      *(void *)(v10 + 40) = v5;
      swift_bridgeObjectRetain(v5);
      id v11 = v8;
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v11, "(kernel): %{public}s", 20LL, 2LL, v10);
      swift_bridgeObjectRelease(v5);

      swift_bridgeObjectRelease(v10);
      v4 += 3;
      --v2;
    }

    while (v2);
    return swift_bridgeObjectRelease(v12);
  }

  return result;
}

uint64_t sub_10006D464(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_100005FB4(&qword_1001587C0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(void))(*(void *)v2 + 424LL);
  uint64_t v71 = ((uint64_t (*)(uint64_t))v9)(v6);
  uint64_t v72 = v10;
  uint64_t v75 = a1;
  unint64_t v76 = a2;
  swift_bridgeObjectRetain(a2);
  v11._uint64_t countAndFlagsBits = 61LL;
  v11._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  uint64_t v12 = type metadata accessor for Locale(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  unint64_t v13 = sub_10002657C();
  StringProtocol.range<A>(of:options:range:locale:)( &v75,  0LL,  0LL,  0LL,  1LL,  v8,  &type metadata for String,  &type metadata for String,  v13,  v13);
  uint64_t v15 = v14;
  char v17 = v16;
  sub_100012824((uint64_t)v8, &qword_1001587C0);
  swift_bridgeObjectRelease(v76);
  uint64_t v18 = swift_bridgeObjectRelease(v72);
  if ((v17 & 1) != 0) {
    return 0LL;
  }
  uint64_t v19 = ((uint64_t (*)(uint64_t))v9)(v18);
  uint64_t v21 = v20;
  v9();
  swift_bridgeObjectRelease(v22);
  unint64_t v23 = String.distance(from:to:)(15LL, v15, v19, v21);
  uint64_t v24 = swift_bridgeObjectRelease(v21);
  uint64_t v25 = ((uint64_t (*)(uint64_t))v9)(v24);
  unint64_t v27 = v26;
  unint64_t v28 = sub_10007277C(v23, v25, v26);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(v27);
  uint64_t v71 = v28;
  uint64_t v72 = v30;
  uint64_t v73 = v32;
  uint64_t v74 = v34;
  uint64_t v75 = 32LL;
  unint64_t v76 = 0xE100000000000000LL;
  unint64_t v35 = sub_100072818();
  uint64_t v36 = (void *)StringProtocol.components<A>(separatedBy:)( &v75,  &type metadata for Substring,  &type metadata for String,  v35,  v13);
  swift_bridgeObjectRelease(v34);
  if (!v36[2]) {
    goto LABEL_10;
  }
  uint64_t v38 = v36[4];
  unint64_t v37 = v36[5];
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  uint64_t result = sub_100032F98(30768LL, 0xE200000000000000LL, v38, v37);
  if ((result & 1) == 0)
  {
    uint64_t v51 = HIBYTE(v37) & 0xF;
    uint64_t v52 = v38 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0x2000000000000000LL) != 0) {
      uint64_t v53 = HIBYTE(v37) & 0xF;
    }
    else {
      uint64_t v53 = v38 & 0xFFFFFFFFFFFFLL;
    }
    if (!v53)
    {
      uint64_t v50 = (void *)v37;
      goto LABEL_11;
    }

    if ((v37 & 0x1000000000000000LL) != 0)
    {
      uint64_t v55 = (uint64_t)sub_100072050(v38, v37, 10LL);
      LOBYTE(v38) = v69;
LABEL_62:
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) != 0) {
        return 0LL;
      }
      else {
        return v55;
      }
    }

    if ((v37 & 0x2000000000000000LL) == 0)
    {
      if ((v38 & 0x1000000000000000LL) != 0) {
        uint64_t v54 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v37);
      }
      uint64_t v55 = (uint64_t)sub_100072134(v54, v52, 10LL);
      LOBYTE(v38) = v56 & 1;
      goto LABEL_62;
    }

    uint64_t v71 = v38;
    uint64_t v72 = v37 & 0xFFFFFFFFFFFFFFLL;
    if (v38 == 43)
    {
      if (v51)
      {
        uint64_t v55 = (BYTE1(v38) - 48);
        if (v51 != 2)
        {
          uint64_t v55 = 10LL * (BYTE1(v38) - 48) + (BYTE2(v38) - 48);
          if (v51 != 3)
          {
            uint64_t v55 = 10LL * v55 + (BYTE3(v38) - 48);
            uint64_t v57 = v51 - 4;
            if (v57)
            {
              uint64_t v58 = (unsigned __int8 *)&v71 + 4;
              while (1)
              {
                unsigned int v59 = *v58 - 48;
                if (v59 > 9) {
                  goto LABEL_45;
                }
                uint64_t v60 = 10 * v55;
                uint64_t v55 = v60 + v59;
                LOBYTE(v38) = 0;
                ++v58;
                if (!--v57) {
                  goto LABEL_62;
                }
              }
            }
          }
        }

LABEL_61:
        LOBYTE(v38) = 0;
        goto LABEL_62;
      }
    }

    else
    {
      if (v38 != 45)
      {
        uint64_t v55 = (v38 - 48);
        if (v51 != 1)
        {
          uint64_t v55 = 10LL * (v38 - 48) + (BYTE1(v38) - 48);
          if (v51 != 2)
          {
            uint64_t v55 = 10LL * v55 + (BYTE2(v38) - 48);
            uint64_t v61 = v51 - 3;
            if (v61)
            {
              Swift::String v62 = (unsigned __int8 *)&v71 + 3;
              while (1)
              {
                unsigned int v63 = *v62 - 48;
                if (v63 > 9) {
                  goto LABEL_45;
                }
                uint64_t v64 = 10 * v55;
                uint64_t v55 = v64 + v63;
                LOBYTE(v38) = 0;
                ++v62;
                if (!--v61) {
                  goto LABEL_62;
                }
              }
            }
          }
        }

        goto LABEL_61;
      }

      if (v51)
      {
        if (v51 == 2)
        {
          LOBYTE(v38) = 0;
          uint64_t v55 = -(uint64_t)(BYTE1(v38) - 48);
          goto LABEL_62;
        }

        uint64_t v55 = -10LL * (BYTE1(v38) - 48) - (BYTE2(v38) - 48);
        if (v51 != 3)
        {
          if ((BYTE3(v38) - 48) <= 9u)
          {
            uint64_t v55 = 10LL * (int)v55 - (BYTE3(v38) - 48);
            uint64_t v65 = v51 - 4;
            if (!v65) {
              goto LABEL_61;
            }
            unint64_t v66 = (unsigned __int8 *)&v71 + 4;
            while (1)
            {
              unsigned int v67 = *v66 - 48;
              if (v67 > 9) {
                break;
              }
              uint64_t v68 = 10 * v55;
              uint64_t v55 = v68 - v67;
              LOBYTE(v38) = 0;
              ++v66;
              if (!--v65) {
                goto LABEL_62;
              }
            }
          }

uint64_t sub_10006DA48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005FB4(&qword_1001587C0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v11 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 72);
  uint64_t v71 = v11(a3, a4);
  uint64_t v72 = v12;
  uint64_t v75 = a1;
  unint64_t v76 = a2;
  swift_bridgeObjectRetain(a2);
  v13._uint64_t countAndFlagsBits = 61LL;
  v13._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  uint64_t v14 = type metadata accessor for Locale(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v10, 1LL, 1LL, v14);
  unint64_t v15 = sub_10002657C();
  StringProtocol.range<A>(of:options:range:locale:)( &v75,  0LL,  0LL,  0LL,  1LL,  v10,  &type metadata for String,  &type metadata for String,  v15,  v15);
  uint64_t v17 = v16;
  char v19 = v18;
  sub_100012824((uint64_t)v10, &qword_1001587C0);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v72);
  if ((v19 & 1) != 0) {
    return 0LL;
  }
  uint64_t v20 = v11(a3, a4);
  uint64_t v22 = v21;
  v11(a3, a4);
  swift_bridgeObjectRelease(v23);
  unint64_t v24 = String.distance(from:to:)(15LL, v17, v20, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v25 = v11(a3, a4);
  unint64_t v27 = v26;
  unint64_t v28 = sub_10007277C(v24, v25, v26);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease(v27);
  uint64_t v71 = v28;
  uint64_t v72 = v30;
  uint64_t v73 = v32;
  uint64_t v74 = v34;
  uint64_t v75 = 32LL;
  unint64_t v76 = 0xE100000000000000LL;
  unint64_t v35 = sub_100072818();
  uint64_t v36 = (void *)StringProtocol.components<A>(separatedBy:)( &v75,  &type metadata for Substring,  &type metadata for String,  v35,  v15);
  swift_bridgeObjectRelease(v34);
  if (!v36[2]) {
    goto LABEL_10;
  }
  uint64_t v38 = v36[4];
  unint64_t v37 = v36[5];
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  uint64_t result = sub_100032F98(30768LL, 0xE200000000000000LL, v38, v37);
  if ((result & 1) == 0)
  {
    uint64_t v51 = HIBYTE(v37) & 0xF;
    uint64_t v52 = v38 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0x2000000000000000LL) != 0) {
      uint64_t v53 = HIBYTE(v37) & 0xF;
    }
    else {
      uint64_t v53 = v38 & 0xFFFFFFFFFFFFLL;
    }
    if (!v53)
    {
      uint64_t v50 = (void *)v37;
      goto LABEL_11;
    }

    if ((v37 & 0x1000000000000000LL) != 0)
    {
      uint64_t v55 = (uint64_t)sub_100072050(v38, v37, 10LL);
      LOBYTE(v38) = v69;
LABEL_56:
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) != 0) {
        return 0LL;
      }
      else {
        return v55;
      }
    }

    if ((v37 & 0x2000000000000000LL) == 0)
    {
      if ((v38 & 0x1000000000000000LL) != 0) {
        uint64_t v54 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v37);
      }
      uint64_t v55 = (uint64_t)sub_100072134(v54, v52, 10LL);
      LOBYTE(v38) = v56 & 1;
      goto LABEL_56;
    }

    uint64_t v71 = v38;
    uint64_t v72 = v37 & 0xFFFFFFFFFFFFFFLL;
    if (v38 == 43)
    {
      if (!v51) {
        goto LABEL_69;
      }
      uint64_t v55 = (BYTE1(v38) - 48);
      if (v51 != 2)
      {
        uint64_t v55 = 10LL * (BYTE1(v38) - 48) + (BYTE2(v38) - 48);
        uint64_t v57 = v51 - 3;
        if (v57)
        {
          uint64_t v58 = (unsigned __int8 *)&v71 + 3;
          while (1)
          {
            unsigned int v59 = *v58 - 48;
            if (v59 > 9) {
              goto LABEL_43;
            }
            uint64_t v60 = 10 * v55;
            uint64_t v55 = v60 + v59;
            LOBYTE(v38) = 0;
            ++v58;
            if (!--v57) {
              goto LABEL_56;
            }
          }
        }
      }
    }

    else
    {
      if (v38 == 45)
      {
        if (v51)
        {
          if (v51 != 1 && (BYTE1(v38) - 48) <= 9u)
          {
            if (v51 == 2)
            {
              LOBYTE(v38) = 0;
              uint64_t v55 = -(uint64_t)(BYTE1(v38) - 48);
              goto LABEL_56;
            }

            if ((BYTE2(v38) - 48) <= 9u)
            {
              uint64_t v55 = -10LL * (BYTE1(v38) - 48) - (BYTE2(v38) - 48);
              uint64_t v65 = v51 - 3;
              if (!v65) {
                goto LABEL_55;
              }
              unint64_t v66 = (unsigned __int8 *)&v71 + 3;
              while (1)
              {
                unsigned int v67 = *v66 - 48;
                if (v67 > 9) {
                  break;
                }
                uint64_t v68 = 10 * v55;
                uint64_t v55 = v68 - v67;
                LOBYTE(v38) = 0;
                ++v66;
                if (!--v65) {
                  goto LABEL_56;
                }
              }
            }
          }

LABEL_43:
          uint64_t v55 = 0LL;
          LOBYTE(v38) = 1;
          goto LABEL_56;
        }

        __break(1u);
LABEL_69:
        __break(1u);
        return result;
      }

      uint64_t v55 = (v38 - 48);
      if (v51 != 1)
      {
        uint64_t v55 = 10LL * (v38 - 48) + (BYTE1(v38) - 48);
        uint64_t v61 = v51 - 2;
        if (v61)
        {
          Swift::String v62 = (unsigned __int8 *)&v71 + 2;
          while (1)
          {
            unsigned int v63 = *v62 - 48;
            if (v63 > 9) {
              goto LABEL_43;
            }
            uint64_t v64 = 10 * v55;
            uint64_t v55 = v64 + v63;
            LOBYTE(v38) = 0;
            ++v62;
            if (!--v61) {
              goto LABEL_56;
            }
          }
        }
      }
    }

      unint64_t v41 = v42;
      goto LABEL_44;
    }

    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      uint64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_36;
      }
      unint64_t v27 = v47[v20];
      if (!v27) {
        break;
      }
    }

    __break(1u);
LABEL_44:
    if (v6 < 0) {
      unint64_t v26 = v6;
    }
    else {
      unint64_t v26 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  }

  while (!v7);
LABEL_5:
  uint64_t v8 = 4LL;
  while (1)
  {
    if ((v6 & 0xC000000000000001LL) != 0) {
      uint64_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
    }
    else {
      uint64_t v9 = *(id *)(v6 + 8 * v8);
    }
    uint64_t v10 = v9;
    Swift::String v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_43;
    }

    uint64_t v12 = Dictionary._bridgeToObjectiveC()().super.isa;
    Swift::String v13 = [v10 evaluateWithObject:v12];

    if (!v13) {
      break;
    }
    ++v8;
    if (v11 == v7) {
      goto LABEL_12;
    }
  }

  char v18 = v6;
LABEL_26:
  swift_bridgeObjectRelease(v18);
  return 1LL;
}

    if (v6 >= 8)
    {
      nfat_arch = a1[1];
      fat_header.magic = *a1;
      fat_header.nfat_arch = nfat_arch;
      if (v13 == -1095041334)
      {
        j__swap_fat_header(&fat_header, NX_LittleEndian);
        nfat_arch = fat_header.nfat_arch;
      }

      uint64_t v48 = nfat_arch;
      char v49 = 20LL * nfat_arch;
      if (v6 >= v49 + 8)
      {
        unint64_t v77 = a4;
        uint64_t v51 = (fat_arch *)swift_slowAlloc(v49, -1LL);
        uint64_t v52 = v51;
        if (v48) {
          memcpy(v51, a1 + 2, v49);
        }
        if (v13 == -1095041334) {
          j__swap_fat_arch(v52, v48, NX_LittleEndian);
        }
        unint64_t v76 = v52;
        if (v48)
        {
          uint64_t v53 = &v52[v48];
          uint64_t v21 = _swiftEmptyArrayStorage;
          p_cputype = &v52->cputype;
          do
          {
            uint64_t v57 = j__NXGetArchInfoFromCpuType(*p_cputype, p_cputype[1]);
            if (v57 && (name = v57->name) != 0LL)
            {
              unsigned int v59 = String.init(cString:)(name);
              uint64_t v61 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
                uint64_t v21 = sub_10000C82C(0LL, v21[2] + 1LL, 1, v21);
              }
              unsigned int v63 = v21[2];
              Swift::String v62 = v21[3];
              uint64_t v64 = v63 + 1;
              if (v63 >= v62 >> 1)
              {
                uint64_t v75 = sub_10000C82C((void *)(v62 > 1), v63 + 1, 1, v21);
                uint64_t v64 = v63 + 1;
                uint64_t v21 = v75;
              }

              _OWORD v21[2] = v64;
              uint64_t v65 = &v21[2 * v63];
              v65[4] = v59;
              char v56 = v65 + 4;
            }

            else
            {
              *(void *)&mh.magic = 0x286E776F6E6B6E55LL;
              *(void *)&mh.cpusubtype = 0xE800000000000000LL;
              v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
              uint64_t object = v66._object;
              String.append(_:)(v66);
              swift_bridgeObjectRelease(object);
              v68._uint64_t countAndFlagsBits = 44LL;
              v68._uint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v68);
              v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
              uint64_t v70 = v69._object;
              String.append(_:)(v69);
              swift_bridgeObjectRelease(v70);
              v71._uint64_t countAndFlagsBits = 41LL;
              v71._uint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v71);
              uint64_t v72 = *(void *)&mh.magic;
              uint64_t v61 = *(void *)&mh.cpusubtype;
              if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
                uint64_t v21 = sub_10000C82C(0LL, v21[2] + 1LL, 1, v21);
              }
              uint64_t v74 = v21[2];
              uint64_t v73 = v21[3];
              if (v74 >= v73 >> 1) {
                uint64_t v21 = sub_10000C82C((void *)(v73 > 1), v74 + 1, 1, v21);
              }
              _OWORD v21[2] = v74 + 1;
              uint64_t v55 = &v21[2 * v74];
              v55[4] = v72;
              char v56 = v55 + 4;
            }

            v56[1] = v61;
            p_cputype += 5;
          }

          while (p_cputype != (cpu_type_t *)v53);
        }

        else
        {
          uint64_t v21 = _swiftEmptyArrayStorage;
        }

        goto LABEL_71;
      }

uint64_t sub_10006DFDC()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_10006DFFC(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

_BYTE *(*sub_10006E004(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006DFDC() & 1;
  return sub_10006E03C;
}

_BYTE *sub_10006E03C(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 16LL) = result[8];
  return result;
}

uint64_t sub_10006E04C()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t sub_10006E06C(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*sub_10006E074(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E04C() & 1;
  return sub_10006E0AC;
}

_BYTE *sub_10006E0AC(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 1swift_allocObject(v3, 160LL, 7LL) = result[8];
  return result;
}

uint64_t sub_10006E0BC()
{
  int v1 = *(unsigned __int8 *)(v0 + 18);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t sub_10006E0DC(uint64_t result)
{
  *(_BYTE *)(v1 + 18) = result;
  return result;
}

_BYTE *(*sub_10006E0E4(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E0BC() & 1;
  return sub_10006E11C;
}

_BYTE *sub_10006E11C(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 18LL) = result[8];
  return result;
}

uint64_t sub_10006E12C()
{
  int v1 = *(unsigned __int8 *)(v0 + 19);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 19) = 0;
  return result;
}

uint64_t sub_10006E14C(uint64_t result)
{
  *(_BYTE *)(v1 + 19) = result;
  return result;
}

_BYTE *(*sub_10006E154(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E12C() & 1;
  return sub_10006E18C;
}

_BYTE *sub_10006E18C(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 19LL) = result[8];
  return result;
}

uint64_t sub_10006E19C()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 20) = 0;
  return result;
}

uint64_t sub_10006E1BC(uint64_t result)
{
  *(_BYTE *)(v1 + 20) = result;
  return result;
}

_BYTE *(*sub_10006E1C4(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E19C() & 1;
  return sub_10006E1FC;
}

_BYTE *sub_10006E1FC(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 2Hasher.init(_seed:)(v1, 0LL) = result[8];
  return result;
}

uint64_t sub_10006E20C()
{
  int v1 = *(unsigned __int8 *)(v0 + 21);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + 21) = 0;
  return result;
}

uint64_t sub_10006E22C(uint64_t result)
{
  *(_BYTE *)(v1 + 21) = result;
  return result;
}

_BYTE *(*sub_10006E234(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E20C() & 1;
  return sub_10006E26C;
}

_BYTE *sub_10006E26C(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 21LL) = result[8];
  return result;
}

uint64_t sub_10006E27C()
{
  int v1 = v0[22];
  if (v1 == 2)
  {
    if (((*(uint64_t (**)(void))(*(void *)v0 + 328LL))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 232LL))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 280LL))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v0 + 304LL))() & 1) != 0)
    {
      char v2 = 0;
    }

    else
    {
      char v2 = sub_1000D8050() ^ 1;
    }

    v0[22] = v2 & 1;
  }

  else
  {
    char v2 = v1 & 1;
  }

  return v2 & 1;
}

uint64_t sub_10006E2FC(uint64_t result)
{
  *(_BYTE *)(v1 + 2sub_100006034(v0 + 2) = result;
  return result;
}

_BYTE *(*sub_10006E304(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E27C() & 1;
  return sub_10006E33C;
}

_BYTE *sub_10006E33C(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 22LL) = result[8];
  return result;
}

BOOL sub_10006E34C()
{
  int v1 = v0[23];
  if (v1 != 2) {
    return v1 & 1;
  }
  char v2 = sub_10008FAE4();
  uint64_t v4 = *(void *)v2;
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v0 + 592LL);
  __n128 v6 = swift_bridgeObjectRetain(v3);
  uint64_t v7 = v5(v4, v3, v6);
  swift_bridgeObjectRelease(v3);
  BOOL result = v7 != 0;
  v0[23] = result;
  return result;
}

uint64_t sub_10006E3E4(uint64_t result)
{
  *(_BYTE *)(v1 + 23) = result;
  return result;
}

_BYTE *(*sub_10006E3EC(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E34C();
  return sub_10006E424;
}

_BYTE *sub_10006E424(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 23LL) = result[8];
  return result;
}

uint64_t sub_10006E434()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v4 = (uint64_t *)sub_100090140();
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*v0 + 600LL);
    __n128 v8 = swift_bridgeObjectRetain(v6);
    uint64_t v3 = v7(v5, v6, v8);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(v6);
    uint64_t v11 = v0[3];
    uint64_t v12 = v0[4];
    v0[3] = v3;
    v0[4] = v10;
    swift_bridgeObjectRetain(v10);
    sub_10007285C(v11, v12);
  }

  sub_100072870(v1, v2);
  return v3;
}

uint64_t sub_10006E508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_100006034(v0 + 2) = a2;
  return sub_10007285C(v3, v4);
}

uint64_t (*sub_10006E51C(uint64_t *a1))(void *a1, char a2)
{
  a1[2] = v1;
  *a1 = sub_10006E434();
  a1[1] = v3;
  return sub_10006E550;
}

uint64_t sub_10006E550(void *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = *a1;
  *(void *)(v2 + 3sub_100006034(v0 + 2) = v3;
  if ((a2 & 1) == 0) {
    return sub_10007285C(v4, v5);
  }
  swift_bridgeObjectRetain(v3);
  sub_10007285C(v4, v5);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10006E5B4()
{
  uint64_t v1 = v0[6];
  if (v1)
  {
    uint64_t v2 = v0[5];
  }

  else
  {
    uint64_t v3 = sub_10008FAD8();
    uint64_t v4 = *(void *)v3;
    uint64_t v5 = *((void *)v3 + 1);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*v0 + 600LL);
    __n128 v7 = swift_bridgeObjectRetain(v5);
    uint64_t v2 = v6(v4, v5, v7);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease(v5);
    uint64_t v10 = v0[6];
    v0[5] = v2;
    v0[6] = v9;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v10);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10006E678(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10006E688(uint64_t *a1))(uint64_t *a1)
{
  a1[2] = v1;
  *a1 = sub_10006E5B4();
  a1[1] = v3;
  return sub_10006E6BC;
}

uint64_t sub_10006E6BC(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10006E6D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005FB4(&qword_1001587C0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v6;
  if (v7 == 1)
  {
    uint64_t v9 = *(void (**)(void))(*v1 + 424LL);
    uint64_t v41 = ((uint64_t (*)(uint64_t))v9)(v3);
    uint64_t v42 = v10;
    uint64_t v45 = 0x786966667573636BLL;
    unint64_t v46 = 0xE800000000000000LL;
    v11._uint64_t countAndFlagsBits = 61LL;
    v11._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    uint64_t v12 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v5, 1LL, 1LL, v12);
    unint64_t v13 = sub_10002657C();
    StringProtocol.range<A>(of:options:range:locale:)( &v45,  0LL,  0LL,  0LL,  1LL,  v5,  &type metadata for String,  &type metadata for String,  v13,  v13);
    uint64_t v15 = v14;
    char v17 = v16;
    sub_100012824((uint64_t)v5, &qword_1001587C0);
    swift_bridgeObjectRelease(v46);
    uint64_t v18 = swift_bridgeObjectRelease(v42);
    uint64_t v8 = 0LL;
    uint64_t v19 = 0LL;
    if ((v17 & 1) == 0)
    {
      uint64_t v20 = ((uint64_t (*)(uint64_t))v9)(v18);
      uint64_t v22 = v21;
      v9();
      swift_bridgeObjectRelease(v23);
      unint64_t v24 = String.distance(from:to:)(15LL, v15, v20, v22);
      uint64_t v25 = swift_bridgeObjectRelease(v22);
      uint64_t v26 = ((uint64_t (*)(uint64_t))v9)(v25);
      unint64_t v28 = v27;
      unint64_t v29 = sub_10007277C(v24, v26, v27);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      swift_bridgeObjectRelease(v28);
      uint64_t v41 = v29;
      uint64_t v42 = v31;
      uint64_t v43 = v33;
      uint64_t v44 = v35;
      uint64_t v45 = 32LL;
      unint64_t v46 = 0xE100000000000000LL;
      unint64_t v36 = sub_100072818();
      unint64_t v37 = (void *)StringProtocol.components<A>(separatedBy:)( &v45,  &type metadata for Substring,  &type metadata for String,  v36,  v13);
      swift_bridgeObjectRelease(v35);
      if (v37[2])
      {
        uint64_t v8 = v37[4];
        uint64_t v19 = v37[5];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRelease(v37);
      }

      else
      {
        swift_bridgeObjectRelease(v37);
        uint64_t v8 = 0LL;
        uint64_t v19 = 0LL;
      }
    }

    uint64_t v38 = v1[7];
    uint64_t v39 = v1[8];
    v1[7] = v8;
    v1[8] = v19;
    swift_bridgeObjectRetain(v19);
    sub_10007285C(v38, v39);
  }

  sub_100072870(v6, v7);
  return v8;
}

uint64_t sub_10006E954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return sub_10007285C(v3, v4);
}

uint64_t (*sub_10006E968(uint64_t *a1))(void *a1, char a2)
{
  a1[2] = v1;
  *a1 = sub_10006E6D0();
  a1[1] = v3;
  return sub_10006E99C;
}

uint64_t sub_10006E99C(void *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = *a1;
  *(void *)(v2 + 64) = v3;
  if ((a2 & 1) == 0) {
    return sub_10007285C(v4, v5);
  }
  swift_bridgeObjectRetain(v3);
  sub_10007285C(v4, v5);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10006EA00()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005FB4(&qword_1001587C0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v6 = v0[72];
  if (v6 == 2)
  {
    uint64_t v7 = *(void (**)(void))(*(void *)v0 + 424LL);
    uint64_t v39 = ((uint64_t (*)(uint64_t))v7)(v3);
    uint64_t v40 = v8;
    uint64_t v43 = 0x427441434B787561LL;
    unint64_t v44 = 0xEB00000000746F6FLL;
    v9._uint64_t countAndFlagsBits = 61LL;
    v9._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    uint64_t v10 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 1LL, 1LL, v10);
    unint64_t v11 = sub_10002657C();
    StringProtocol.range<A>(of:options:range:locale:)( &v43,  0LL,  0LL,  0LL,  1LL,  v5,  &type metadata for String,  &type metadata for String,  v11,  v11);
    uint64_t v13 = v12;
    char v15 = v14;
    sub_100012824((uint64_t)v5, &qword_1001587C0);
    swift_bridgeObjectRelease(v44);
    uint64_t v16 = swift_bridgeObjectRelease(v40);
    if ((v15 & 1) != 0)
    {
      char v37 = 0;
    }

    else
    {
      uint64_t v17 = ((uint64_t (*)(uint64_t))v7)(v16);
      uint64_t v19 = v18;
      v7();
      swift_bridgeObjectRelease(v20);
      unint64_t v21 = String.distance(from:to:)(15LL, v13, v17, v19);
      uint64_t v22 = swift_bridgeObjectRelease(v19);
      uint64_t v23 = ((uint64_t (*)(uint64_t))v7)(v22);
      unint64_t v25 = v24;
      unint64_t v26 = sub_10007277C(v21, v23, v24);
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      swift_bridgeObjectRelease(v25);
      uint64_t v39 = v26;
      uint64_t v40 = v28;
      uint64_t v41 = v30;
      uint64_t v42 = v32;
      uint64_t v43 = 32LL;
      unint64_t v44 = 0xE100000000000000LL;
      unint64_t v33 = sub_100072818();
      uint64_t v34 = (void *)StringProtocol.components<A>(separatedBy:)( &v43,  &type metadata for Substring,  &type metadata for String,  v33,  v11);
      swift_bridgeObjectRelease(v32);
      if (v34[2])
      {
        uint64_t v36 = v34[4];
        uint64_t v35 = v34[5];
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRelease(v34);
        if (v36 == 0x65736C6166LL && v35 == 0xE500000000000000LL)
        {
          swift_bridgeObjectRelease(0xE500000000000000LL);
          char v37 = 1;
        }

        else
        {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v35, 0x65736C6166LL, 0xE500000000000000LL, 0LL);
          swift_bridgeObjectRelease(v35);
        }
      }

      else
      {
        swift_bridgeObjectRelease(v34);
        char v37 = 0;
      }
    }

    v1[72] = v37 & 1;
  }

  else
  {
    char v37 = v6 & 1;
  }

  return v37 & 1;
}

uint64_t sub_10006ECB4(uint64_t result)
{
  *(_BYTE *)(v1 + 7sub_100006034(v0 + 2) = result;
  return result;
}

_BYTE *(*sub_10006ECBC(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006EA00() & 1;
  return sub_10006ECF4;
}

_BYTE *sub_10006ECF4(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 72LL) = result[8];
  return result;
}

BOOL sub_10006ED04()
{
  int v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = v0;
  uint64_t v3 = sub_10006D464(0x676F6C6D6BLL, 0xE500000000000000LL);
  if ((v4 & 1) != 0)
  {
    uint64_t v6 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
    uint64_t v8 = static os_log_type_t.default.getter(v7);
    os_log(_:dso:log:type:_:)("kmlog not specified", 19LL, 2LL, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

    BOOL result = 0LL;
  }

  else
  {
    BOOL result = v3 == 1;
  }

  *(_BYTE *)(v2 + 73) = result;
  return result;
}

uint64_t sub_10006EDB8(uint64_t result)
{
  *(_BYTE *)(v1 + 73) = result;
  return result;
}

_BYTE *(*sub_10006EDC0(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006ED04();
  return sub_10006EDF8;
}

_BYTE *sub_10006EDF8(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 73LL) = result[8];
  return result;
}

uint64_t sub_10006EE08()
{
  if ((*(_BYTE *)(v0 + 76) & 1) != 0)
  {
    uint64_t v1 = sub_10006D464(0x676F6C6D6BLL, 0xE500000000000000LL);
    if ((v2 & 1) != 0 || v1 != 1)
    {
      uint64_t v5 = sub_1000D8050();
      if ((v5 & 1) == 0)
      {
        LOBYTE(v3) = 0;
        __int16 v6 = 256;
        int v4 = 1;
        goto LABEL_10;
      }

      LOBYTE(v3) = static os_log_type_t.error.getter(v5);
    }

    else
    {
      LOBYTE(v3) = static os_log_type_t.default.getter(1LL);
    }

    int v4 = 0;
    __int16 v6 = v3;
LABEL_10:
    *(_WORD *)(v0 + 74) = v6;
    *(_BYTE *)(v0 + 76) = 0;
    return v3 | (v4 << 8);
  }

  unsigned int v3 = *(unsigned __int16 *)(v0 + 74);
  int v4 = (v3 >> 8) & 1;
  return v3 | (v4 << 8);
}

uint64_t sub_10006EE90(uint64_t result)
{
  *(_WORD *)(v1 + 74) = result & 0x1FF;
  *(_BYTE *)(v1 + 76) = 0;
  return result;
}

uint64_t *(*sub_10006EEA0(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  __int16 v3 = sub_10006EE08();
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = HIBYTE(v3) & 1;
  return sub_10006EEDC;
}

uint64_t *sub_10006EEDC(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*((_BYTE *)result + 9)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(v1 + 74) = v2 | *((unsigned __int8 *)result + 8);
  *(_BYTE *)(v1 + 76) = 0;
  return result;
}

BOOL sub_10006EF04()
{
  int v1 = *(unsigned __int8 *)(v0 + 77);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t v2 = v0;
  uint64_t v3 = sub_10006D464(0x6173615F74786564LL, 0xEC00000062735F6ELL);
  if ((v4 & 1) != 0)
  {
    BOOL result = 0LL;
  }

  else
  {
    uint64_t v5 = v3;
    uint64_t v6 = sub_100005FB4((uint64_t *)&unk_1001596B0);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_10010F110;
    *(void *)(v7 + 56) = &type metadata for Int;
    *(void *)(v7 + 64) = &protocol witness table for Int;
    *(void *)(v7 + 3sub_100006034(v0 + 2) = v5;
    uint64_t v8 = sub_100006094(0LL, (unint64_t *)&qword_1001596C0, &OBJC_CLASS___OS_os_log_ptr);
    Swift::String v9 = (void *)static OS_os_log.default.getter(v8);
    static os_log_type_t.default.getter(v9);
    os_log(_:dso:log:type:_:)("dext_asan_sb boot-arg present: %d", v11);
    swift_bridgeObjectRelease(v7);

    BOOL result = v5 == 1;
  }

  *(_BYTE *)(v2 + 77) = result;
  return result;
}

uint64_t sub_10006F014(uint64_t result)
{
  *(_BYTE *)(v1 + 77) = result;
  return result;
}

_BYTE *(*sub_10006F01C(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006EF04();
  return sub_10006F054;
}

_BYTE *sub_10006F054(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 7swift_allocObject(v3, 160LL, 7LL) = result[8];
  return result;
}

uint64_t sub_10006F064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess(v3, v11, 0LL, 0LL);
  sub_10001A148(v3, (uint64_t)&v8, &qword_100159848);
  if (!v9)
  {
    sub_100012824((uint64_t)&v8, &qword_100159848);
    id v4 = [objc_allocWithZone(NSProcessInfo) init];
    uint64_t v9 = sub_100006094(0LL, &qword_100159850, &OBJC_CLASS___NSProcessInfo_ptr);
    uint64_t v10 = &off_100148880;
    *(void *)&__int128 v8 = v4;
    sub_100005F70((uint64_t)&v8, (uint64_t)v7);
    swift_beginAccess(v3, v6, 33LL, 0LL);
    sub_100072884((uint64_t)v7, v3);
    swift_endAccess(v6);
  }

  return sub_100005158(&v8, a1);
}

uint64_t sub_10006F158(__int128 *a1)
{
  return swift_endAccess(v3);
}

void (*sub_10006F1AC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  sub_10006F064((uint64_t)v3);
  return sub_10006F1F8;
}

void sub_10006F1F8(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (__int128 *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[18];
    sub_100005F70(*a1, (uint64_t)v3);
    sub_100005158(v3, v4);
    swift_beginAccess(v5 + 80, v2 + 15, 33LL, 0LL);
    sub_100072884(v4, v5 + 80);
    swift_endAccess(v2 + 15);
    sub_100006034(v2);
  }

  else
  {
    uint64_t v6 = v2[18];
    sub_100005158((__int128 *)*a1, (uint64_t)v3);
    v6 += 80LL;
    swift_beginAccess(v6, v4, 33LL, 0LL);
    sub_100072884((uint64_t)v3, v6);
    swift_endAccess(v4);
  }

  free(v2);
}

uint64_t sub_10006F2C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for POSIXError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t v11 = 8LL;
  uint64_t v12 = 0LL;
  uint64_t v6 = String.utf8CString.getter(a1);
  LODWORD(a1) = sysctlbyname((const char *)(v6 + 32), &v12, &v11, 0LL, 0LL);
  swift_release(v6);
  if (!(_DWORD)a1) {
    return v12;
  }
  uint64_t v7 = sub_1000BCBB8((uint64_t)v5);
  POSIXError._nsError.getter(v7);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_willThrow(v8);
}

char *sub_10006F3DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for POSIXError(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  size_t v16 = 0LL;
  uint64_t v6 = String.utf8CString.getter(a1);
  int v7 = sysctlbyname((const char *)(v6 + 32), 0LL, &v16, 0LL, 0LL);
  swift_release(v6);
  if (v7)
  {
    uint64_t v8 = sub_1000BCBB8((uint64_t)v5);
    POSIXError._nsError.getter(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_willThrow(v9);
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v16, -1LL);
    uint64_t v11 = String.utf8CString.getter(a1);
    int v12 = sysctlbyname((const char *)(v11 + 32), v10, &v16, 0LL, 0LL);
    swift_release(v11);
    if (v12)
    {
      uint64_t v13 = sub_1000BCBB8((uint64_t)v5);
      POSIXError._nsError.getter(v13);
      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_willThrow(v14);
    }

    else
    {
      uint64_t v5 = (char *)String.init(cString:)(v10);
    }

    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v5;
}

uint64_t sub_10006F59C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    __asm { BR              X10 }
  }

  mach_port_t v4 = sub_1000D7FF4();
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (HIDWORD(a1))
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x10006F800LL);
  }

  return IOCatalogueSendData(v4, a1, 0LL, 0);
}

void sub_10006F824(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    sub_1000D7FF4();
    if ((a2 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (!HIDWORD(a2))
    {
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x10006F8E0LL);
  }

  __break(1u);
  JUMPOUT(0x10006F8F4LL);
}

uint64_t sub_10006F904(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v7 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = sub_100072CF0((uint64_t)&v6, a1, a2);
  swift_bridgeObjectRelease(v7);
  return v4;
}

uint64_t sub_10006F964(uint64_t a1, uint64_t a2, char a3)
{
  mach_port_t v6 = sub_1000D7FF4();
  if ((a3 & 1) != 0) {
    uint32_t v7 = 3;
  }
  else {
    uint32_t v7 = 1;
  }
  sub_1000666EC(a1, a2);
  uint64_t v8 = (char *)sub_1000D1860();
  sub_1000666F4(a1, a2);
  uint64_t result = IOCatalogueTerminate(v6, v7, v8);
  if ((_DWORD)result)
  {
    _StringGuts.grow(_:)(55LL);
    v10._uint64_t object = (void *)0x8000000100123DF0LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000034LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    uint64_t object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._uint64_t countAndFlagsBits = 41LL;
    v13._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    unint64_t v14 = sub_100012624();
    uint64_t v15 = swift_allocError(&type metadata for KMError, v14, 0LL, 0LL);
    *(void *)uint64_t v16 = 0LL;
    *(void *)(v16 + 8) = 0xE000000000000000LL;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(void *)(v16 + 64) = 0LL;
    *(_BYTE *)(v16 + 7sub_100006034(v0 + 2) = 38;
    return swift_willThrow(v15);
  }

  return result;
}

void sub_10006FAD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v15[7] = (char *)v15 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  int v12 = (char *)&loc_10006FB88 + dword_1000703F4[a3 >> 62];
  v15[8] = a1;
  void v15[3] = v13;
  v15[4] = v10;
  void v15[5] = v14;
  v15[6] = a4;
  _OWORD v15[2] = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __asm { BR              X9 }

void *sub_10006FBA8()
{
  mach_port_t v5 = mach_host_self();
  *(void *)(v4 - 11sub_100006034(v0 + 2) = 0LL;
  *(_DWORD *)(v4 - 116) = 0;
  *(void *)(v4 - 136) = 0LL;
  *(void *)(v4 - 128) = 0LL;
  *(void *)(v4 - 104) = v3;
  *(_WORD *)(v4 - 96) = v1;
  *(_BYTE *)(v4 - 94) = BYTE2(v1);
  *(_BYTE *)(v4 - 93) = BYTE3(v1);
  *(_BYTE *)(v4 - 9sub_100006034(v0 + 2) = BYTE4(v1);
  *(_BYTE *)(v4 - 91) = BYTE5(v1);
  uint64_t v6 = kext_request( v5,  0xFF2u,  v4 - 104,  BYTE6(v1),  (vm_offset_t *)(v4 - 112),  (mach_msg_type_number_t *)(v4 - 116),  (vm_offset_t *)(v4 - 128),  (mach_msg_type_number_t *)(v4 - 132),  (kern_return_t *)(v4 - 136));
  if ((_DWORD)v6)
  {
    uint64_t v8 = (void *)sub_1000D13E0(v6);
    uint64_t v10 = v9;
    unint64_t v11 = sub_100012624();
    uint64_t v12 = swift_allocError(&type metadata for KMError, v11, 0LL, 0LL);
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(void *)(v13 + 64) = 0LL;
    char v14 = 2;
    goto LABEL_39;
  }

  uint64_t v15 = *(const char **)(v4 - 128);
  if (!v15)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v24 = *(unsigned int *)(v4 - 136);
    if ((_DWORD)v24) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  if (!*(_DWORD *)(v4 - 132))
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v24 = *(unsigned int *)(v4 - 136);
    if ((_DWORD)v24) {
      goto LABEL_13;
    }
LABEL_20:
    if (v2 == (char *)&type metadata for () + 8)
    {
      swift_dynamicCast( *(void *)(v4 - 160),  v7,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  7LL);
      vm_address_t v58 = *(void *)(v4 - 112);
      if (v58)
      {
        vm_size_t v59 = *(unsigned int *)(v4 - 116);
        if ((_DWORD)v59) {
          vm_deallocate(mach_task_self_, v58, v59);
        }
      }

      vm_address_t v60 = *(void *)(v4 - 128);
      if (v60)
      {
        vm_map_t v61 = mach_task_self_;
        vm_size_t v62 = *(unsigned int *)(v4 - 132);
LABEL_49:
        vm_deallocate(v61, v60, v62);
      }

LABEL_50:
      if (!v5) {
        return v8;
      }
      goto LABEL_45;
    }

    vm_address_t v33 = *(void *)(v4 - 112);
    if (v33)
    {
      uint64_t v34 = *(unsigned int *)(v4 - 116);
      if ((_DWORD)v34)
      {
        uint64_t v35 = *(void *)(v4 - 168);
        uint64_t v36 = *(const char **)(v4 - 112);
        *(void *)(v4 - 216) = v34;
        sub_1000D3564(v36, (uint64_t)v2, v35);
        uint64_t v37 = *(void *)(v4 - 184);
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v37 + 48))(v35, 1LL, v2) == 1)
        {
          swift_bridgeObjectRelease(v8);
          (*(void (**)(uint64_t, void))(*(void *)(v4 - 200) + 8LL))(v35, *(void *)(v4 - 192));
          unint64_t v38 = sub_100012624();
          uint64_t v12 = swift_allocError(&type metadata for KMError, v38, 0LL, 0LL);
          unint64_t v39 = 0xD000000000000026LL;
          uint64_t v40 = "Unable to deserialize kernel response.";
LABEL_37:
          *(void *)uint64_t v13 = v39;
          *(void *)(v13 + 8) = (unint64_t)(v40 - 32) | 0x8000000000000000LL;
          goto LABEL_38;
        }

        unsigned int v67 = *(void (**)(void, uint64_t, char *))(v37 + 32);
        uint64_t v68 = *(void *)(v4 - 208);
        uint64_t v69 = v35;
        uint64_t v70 = v67;
        v67(v68, v69, v2);
        v70(*(void *)(v4 - 160), v68, v2);
        vm_deallocate(mach_task_self_, v33, *(void *)(v4 - 216));
        if (v15)
        {
          vm_map_t v61 = mach_task_self_;
          vm_size_t v62 = *(unsigned int *)(v4 - 132);
          vm_address_t v60 = (vm_address_t)v15;
          goto LABEL_49;
        }

        goto LABEL_50;
      }
    }

    swift_bridgeObjectRelease(v8);
    *(void *)(v4 - 104) = 0LL;
    *(void *)(v4 - 96) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(58LL);
    uint64_t v52 = *(void *)(v4 - 96);
    *(void *)(v4 - 104) = *(void *)(v4 - 104);
    *(void *)(v4 - 96) = v52;
    v53._uint64_t countAndFlagsBits = 0xD000000000000038LL;
    v53._uint64_t object = (void *)0x8000000100123EB0LL;
    String.append(_:)(v53);
    v54._uint64_t countAndFlagsBits = Data.description.getter(v3, v1);
    uint64_t object = v54._object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    uint64_t v8 = *(void **)(v4 - 104);
    uint64_t v56 = *(void *)(v4 - 96);
    unint64_t v57 = sub_100012624();
    uint64_t v12 = swift_allocError(&type metadata for KMError, v57, 0LL, 0LL);
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v56;
LABEL_38:
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 3sub_100006034(v0 + 2) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(void *)(v13 + 64) = 0LL;
    char v14 = 1;
LABEL_39:
    *(_BYTE *)(v13 + 7sub_100006034(v0 + 2) = v14;
    swift_willThrow(v12);
    vm_address_t v50 = *(void *)(v4 - 112);
    if (!v50) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }

  uint64_t v16 = sub_100005FB4(&qword_100159858);
  sub_1000D3564(v15, v16, v4 - 104);
  uint64_t v8 = *(void **)(v4 - 104);
  if (!v8)
  {
    unint64_t v51 = sub_100012624();
    uint64_t v12 = swift_allocError(&type metadata for KMError, v51, 0LL, 0LL);
    *(void *)uint64_t v13 = 0xD00000000000001FLL;
    *(void *)(v13 + 8) = 0x8000000100123E30LL;
    goto LABEL_38;
  }

  *(void *)(v4 - 224) = v0;
  if (!v8[2])
  {
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v17 = v8[4];
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = sub_100070404(v18);
  swift_bridgeObjectRelease(v17);
  *(void *)(v4 - 216) = v19;
  if (!v19)
  {
LABEL_36:
    swift_bridgeObjectRelease(v8);
    unint64_t v63 = sub_100012624();
    uint64_t v12 = swift_allocError(&type metadata for KMError, v63, 0LL, 0LL);
    uint64_t v40 = "Unable to get log flags and messages.";
    unint64_t v39 = 0xD000000000000025LL;
    goto LABEL_37;
  }

  if (v8[2] < 2uLL) {
LABEL_53:
  }
    __break(1u);
  mach_port_t v20 = v5;
  uint64_t v21 = v8[5];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v8);
  uint64_t v22 = sub_100070540(v21);
  swift_bridgeObjectRelease(v21);
  if (!v22)
  {
    uint64_t v8 = *(void **)(v4 - 216);
    mach_port_t v5 = v20;
    goto LABEL_36;
  }

  uint64_t v23 = *(void *)(v4 - 216);
  uint64_t v8 = sub_100070684(v23, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  mach_port_t v5 = v20;
  uint64_t v24 = *(unsigned int *)(v4 - 136);
  if (!(_DWORD)v24) {
    goto LABEL_20;
  }
LABEL_13:
  int64_t v25 = v8[2];
  if (v25)
  {
    *(_DWORD *)(v4 - 168) = v24;
    *(_DWORD *)(v4 - 160) = v5;
    *(void *)(v4 - 104) = _swiftEmptyArrayStorage;
    sub_10000CC84(0, v25, 0);
    unint64_t v26 = *(void **)(v4 - 104);
    uint64_t v27 = v8 + 6;
    do
    {
      uint64_t v29 = *(v27 - 1);
      uint64_t v28 = *v27;
      *(void *)(v4 - 104) = v26;
      unint64_t v31 = v26[2];
      unint64_t v30 = v26[3];
      swift_bridgeObjectRetain(v28);
      if (v31 >= v30 >> 1)
      {
        sub_10000CC84(v30 > 1, v31 + 1, 1);
        unint64_t v26 = *(void **)(v4 - 104);
      }

      _OWORD v26[2] = v31 + 1;
      uint64_t v32 = &v26[2 * v31];
      v32[4] = v29;
      v32[5] = v28;
      v27 += 3;
      --v25;
    }

    while (v25);
    swift_bridgeObjectRelease(v8);
    mach_port_t v5 = *(_DWORD *)(v4 - 160);
    uint64_t v24 = *(unsigned int *)(v4 - 168);
  }

  else
  {
    swift_bridgeObjectRelease(v8);
    unint64_t v26 = _swiftEmptyArrayStorage;
  }

  *(void *)(v4 - 104) = sub_1000D13E0(v24);
  *(void *)(v4 - 96) = v41;
  v42._uint64_t countAndFlagsBits = 10272LL;
  v42._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v42);
  *(_DWORD *)(v4 - 148) = v24;
  v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  unint64_t v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v44);
  v45._uint64_t countAndFlagsBits = 41LL;
  v45._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v45);
  uint64_t v8 = *(void **)(v4 - 104);
  uint64_t v46 = *(void *)(v4 - 96);
  unint64_t v47 = sub_100012624();
  uint64_t v48 = swift_allocError(&type metadata for KMError, v47, 0LL, 0LL);
  *(void *)uint64_t v49 = v26;
  *(void *)(v49 + 8) = v8;
  *(void *)(v49 + 16) = v46;
  *(_OWORD *)(v49 + 24) = 0u;
  *(_OWORD *)(v49 + 40) = 0u;
  *(_OWORD *)(v49 + 56) = 0u;
  *(_BYTE *)(v49 + 7sub_100006034(v0 + 2) = 3;
  swift_willThrow(v48);
  vm_address_t v50 = *(void *)(v4 - 112);
  if (v50)
  {
LABEL_40:
    vm_size_t v64 = *(unsigned int *)(v4 - 116);
    if ((_DWORD)v64) {
      vm_deallocate(mach_task_self_, v50, v64);
    }
  }

      vm_address_t v50 = sub_100012624();
      uint64_t v8 = swift_allocError(&type metadata for KMError, v50, 0LL, 0LL);
      uint64_t v10 = "Binary not large enough to accomodate fat arch headers";
      unint64_t v11 = 0xD000000000000036LL;
      goto LABEL_4;
    }

void *sub_100070404(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_100071D34(0LL, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_100006054(i, (uint64_t)v11);
      uint64_t v5 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100071D34(0LL, v3[2] + 1LL, 1);
        uint64_t v3 = v12;
      }

      unint64_t v7 = v3[2];
      unint64_t v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_100071D34((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v3 = v12;
      }

      v3[2] = v7 + 1;
      v3[v7 + 4] = v5;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v9 = 0LL;
    char v10 = 1;
    swift_release(v3);
    return 0LL;
  }

  return v3;
}

void *sub_100070540(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  char v14 = _swiftEmptyArrayStorage;
  sub_10000CC84(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_100006054(i, (uint64_t)v13);
      if (!swift_dynamicCast( &v11,  v13,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10000CC84(0, v3[2] + 1LL, 1);
        uint64_t v3 = v14;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10000CC84(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v14;
      }

      v3[2] = v8 + 1;
      uint64_t v9 = &v3[2 * v8];
      _OWORD v9[4] = v5;
      v9[5] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0LL;
  }

  return v3;
}