void sub_100310E1C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2F0]) && SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (LOBYTE(STACK[0x3C0]))
  {
    if (SLOBYTE(STACK[0x3A7]) < 0) {
      operator delete((void *)STACK[0x390]);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100310EFC(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v7 = a4;
  uint64_t v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t))(*(void *)v4 + 48LL))(v4, &v7, &v6, a3);
}

void sub_100310F40(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)a1;
  sub_1002AEE40((char *)v9, &v12);
  LOBYTE(__p) = 0;
  char v8 = 0;
  v5[0] = 0;
  v5[184] = 0;
  sub_100310498(a1 + 8, v4, (uint64_t)v9, (uint64_t)&__p, (uint64_t)v5, 0x13F800000LL, 1, a2);
  if (v8 && v7 < 0) {
    operator delete(__p);
  }
  if (v11 && v10 < 0) {
    operator delete(v9[0]);
  }
  if (v14)
  {
    if (v13 < 0) {
      operator delete((void *)v12);
    }
  }

void sub_100311014( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  if (a43 && a39 < 0) {
    operator delete(__p);
  }
  if (*(_BYTE *)(v43 - 56))
  {
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_100311070(char *__dst, std::string *__str)
{
  if (__dst[48] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (__dst[48])
    {
      std::string::operator=((std::string *)__dst, __str);
      __int16 v4 = __str[1].__r_.__value_.__r.__words[2];
      __n128 result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
      *(__n128 *)(__dst + 24) = result;
      *((_WORD *)__dst + 20) = v4;
    }
  }

  else if (__dst[48])
  {
    if (__dst[23] < 0) {
      operator delete(*(void **)__dst);
    }
    __dst[48] = 0;
  }

  else
  {
    if ((char)__str->__r_.__value_.__s.__size_ < 0)
    {
      sub_1000063A8(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }

    else
    {
      __int128 v6 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *((void *)__dst + 2) = __str->__r_.__value_.__l.__cap_;
      *(_OWORD *)__dst = v6;
    }

    __n128 result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
    *((_WORD *)__dst + 20) = __str[1].__r_.__value_.__r.__words[2];
    *(__n128 *)(__dst + 24) = result;
    __dst[48] = 1;
  }

  return result;
}

__n128 sub_100311120(uint64_t a1, __int128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      __int128 v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      __n128 result = *(__n128 *)((char *)a2 + 24);
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      *(__n128 *)(a1 + 24) = result;
    }
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 0;
  }

  else
  {
    __int128 v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 48) = 1;
  }

  return result;
}

__n128 sub_1003111DC(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(*(_BYTE **)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }

  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(_WORD *)(v4 + 40) = *((_WORD *)a2 + 20);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_100311248(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100311250(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555LL) {
    sub_10001E11C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v20 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_100290108(v7, v9);
  }
  else {
    char v10 = 0LL;
  }
  char v11 = &v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(v11, *(void **)a2, *((void *)a2 + 1));
    char v11 = v18;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v12;
  }

  char v13 = &v10[48 * v4];
  __int128 v14 = *(__int128 *)((char *)a2 + 24);
  *((_WORD *)v13 + 20) = *((_WORD *)a2 + 20);
  *(_OWORD *)(v13 + 24) = v14;
  v18 = v11 + 48;
  sub_1002AE840(a1, v17);
  uint64_t v15 = a1[1];
  sub_1002AE9D8((uint64_t)v17);
  return v15;
}

void sub_100311374(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100311388()
{
  v8[0] = xmmword_1004306D8;
  v8[1] = unk_1004306E8;
  sub_10015EABC((uint64_t)&unk_1007FF430, (int *)v8, 4LL);
  xmmword_1007FF448 = xmmword_100423CB0;
  unk_1007FF458 = xmmword_100423CC0;
  qword_1007FF470 = 0LL;
  unk_1007FF478 = 0LL;
  qword_1007FF468 = 0x3FD999999999999ALL;
  unk_1007FF480 = xmmword_100423CD0;
  dword_1007FF490 = 5;
  qword_1007FF498 = 0x4000000000000000LL;
  dword_1007FF4A0 = 5;
  byte_1007FF4A8 = 0;
  unk_1007FF4AC = 0x30000000ALL;
  xmmword_1007FF4B8 = xmmword_100423CE0;
  unk_1007FF4C8 = xmmword_100423CF0;
  xmmword_1007FF4D8 = xmmword_100423D00;
  qword_1007FF4E8 = 0x3FE3333333333333LL;
  dword_1007FF4F0 = 3;
  xmmword_1007FF4F8 = xmmword_100423D10;
  unk_1007FF508 = xmmword_100423CF0;
  xmmword_1007FF518 = xmmword_100423CE0;
  qword_1007FF528 = 0x3FE3333333333333LL;
  byte_1007FF530 = 0;
  xmmword_1007FF538 = xmmword_100423D20;
  unk_1007FF548 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v6 = _Q0;
  xmmword_1007FF558 = _Q0;
  qword_1007FF568 = 0xBFD3333333333333LL;
  xmmword_1007FF570 = xmmword_100423D40;
  qword_1007FF580 = 0x3E99999A40000000LL;
  xmmword_1007FF588 = xmmword_100423CC0;
  qword_1007FF5A0 = 0LL;
  unk_1007FF5A8 = 0LL;
  qword_1007FF598 = 0x3FD999999999999ALL;
  xmmword_1007FF5B0 = xmmword_100423CD0;
  dword_1007FF5C0 = 5;
  qword_1007FF5C8 = 0x4000000000000000LL;
  dword_1007FF5D0 = 4;
  qword_1007FF5D8 = 0x300000008LL;
  qword_1007FF5E0 = 0xC04E800000000000LL;
  unint64_t v7 = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)algn_1007FF5E8, (double *)&v7, 1LL);
  xmmword_1007FF600 = xmmword_100423D50;
  qword_1007FF610 = 0x4024000000000000LL;
  dword_1007FF618 = 45;
  byte_1007FF620 = 0;
  byte_1007FF638 = 0;
  qword_1007FF640 = 0LL;
  byte_1007FF648 = 0;
  dword_1007FF64C = 1;
  byte_1007FF650 = 1;
  xmmword_1007FF658 = xmmword_100423D60;
  unk_1007FF668 = xmmword_100423D70;
  xmmword_1007FF678 = v6;
  qword_1007FF688 = 0xC059000000000000LL;
  xmmword_1007FF690 = xmmword_100423D80;
  qword_1007FF6A0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007FF6A8 = xmmword_100423CC0;
  qword_1007FF6B8 = 0x3FD999999999999ALL;
  qword_1007FF6C8 = 0LL;
  qword_1007FF6C0 = 0LL;
  xmmword_1007FF6D0 = xmmword_100423CD0;
  dword_1007FF6E0 = 5;
  qword_1007FF6E8 = 0x4000000000000000LL;
  dword_1007FF6F0 = 10;
  qword_1007FF6F8 = 0x4034000000000000LL;
  dword_1007FF700 = 3;
  xmmword_1007FF708 = xmmword_100423D90;
  return __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007FF430, (void *)&_mh_execute_header);
}

void sub_100311630(_Unwind_Exception *a1)
{
}

__n128 sub_100311650(uint64_t a1, __n128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 40) = *a2;
  return result;
}

double sub_100311664(double *a1)
{
  double result = 0.0;
  if (*((_BYTE *)a1 + 32))
  {
    double v2 = *a1;
    uint64_t v3 = *((void *)a1 + 1);
    if (*(void *)a1 != v3)
    {
      unint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        if (*(double *)(*(void *)&v2 + 8LL) >= a1[6])
        {
          ++v4;
          v5 += *(unsigned __int8 *)(*(void *)&v2 + 41LL);
        }

        *(void *)&v2 += 48LL;
      }

      while (*(void *)&v2 != v3);
      if (v4) {
        return (double)v5 / (double)v4;
      }
    }
  }

  return result;
}

void sub_1003116C0(uint64_t a1, uint64_t a2, double a3)
{
  *(_OWORD *)__p = 0u;
  __int128 v7 = 0u;
  char v8 = 1;
  sub_100311894(a1, (__n128 *)__p);
  if (v8 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (a1 != a2) {
    sub_10031192C( (char *)a1,  *(char **)a2,  *(void *)(a2 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(double *)(a1 + 24) = a3;
}

BOOL sub_100311754(uint64_t a1, uint64_t *a2, double a3)
{
  if (!*(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  if (vabdd_f64(*(double *)(a1 + 24), a3) <= 3.0)
  {
    double v7 = sub_100311664((double *)a1);
    double v8 = *(double *)(a1 + 40);
    BOOL v5 = v7 >= v8;
    unint64_t v9 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315650;
      __int128 v12 = a2;
      __int16 v13 = 2048;
      double v14 = v7;
      __int16 v15 = 1024;
      BOOL v16 = v7 >= v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#gri,%s,tracked_ratio,%.1lf,has_good_gnss_conditions,%d",  (uint8_t *)&v11,  0x1Cu);
    }
  }

  else
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }

    BOOL v5 = 0LL;
    *(_BYTE *)(a1 + 32) = 0;
  }

  return v5;
}

double sub_100311894(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 32))
    {
      sub_10011B6E4(a1, a2);
      double result = a2[1].n128_f64[1];
      *(double *)(a1 + 24) = result;
    }
  }

  else if (*(_BYTE *)(a1 + 32))
  {
    BOOL v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v5;
      operator delete(v5);
    }

    *(_BYTE *)(a1 + 32) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    a2->n128_u64[0] = 0LL;
    double result = a2[1].n128_f64[1];
    *(double *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }

  return result;
}

char *sub_10031192C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *double v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 > 0x555555555555555LL) {
      sub_10001E11C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555LL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_1002AF2AC(v7, v12);
    double v14 = (char *)v7[1];
    __int16 v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  __int16 v13 = (void **)(result + 8);
  __int16 v15 = (_BYTE *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }

uint64_t sub_100311A64( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v34 = sub_10001E914(a1, a3) + 32;
  sub_10001E914(v34, a4);
  sub_10001E914(a1 + 64, a5);
  sub_10001E914(a1 + 96, a10);
  sub_10001E914(a1 + 128, a11);
  sub_10001E914(a1 + 160, a12);
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0LL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  sub_1002AEA60((uint64_t *)(a1 + 376), a6);
  memcpy((void *)(a1 + 400), (const void *)(a6 + 24), 0x18CuLL);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a6 + 424);
  sub_100201E2C((uint64_t *)(a1 + 816), a6 + 440);
  __int128 v20 = *(_OWORD *)(a6 + 464);
  *(_OWORD *)(a1 + 852) = *(_OWORD *)(a6 + 476);
  *(_OWORD *)(a1 + 840) = v20;
  sub_100201F04(a1 + 872, (__int128 *)(a6 + 496));
  __int128 v21 = *(_OWORD *)(a6 + 544);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a6 + 528);
  *(_OWORD *)(a1 + 920) = v21;
  __int128 v22 = *(_OWORD *)(a6 + 560);
  __int128 v23 = *(_OWORD *)(a6 + 576);
  __int128 v24 = *(_OWORD *)(a6 + 608);
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a6 + 592);
  *(_OWORD *)(a1 + 984) = v24;
  *(_OWORD *)(a1 + 936) = v22;
  *(_OWORD *)(a1 + 952) = v23;
  __int128 v25 = *(_OWORD *)(a6 + 624);
  __int128 v26 = *(_OWORD *)(a6 + 640);
  __int128 v27 = *(_OWORD *)(a6 + 672);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a6 + 656);
  *(_OWORD *)(a1 + 1048) = v27;
  *(_OWORD *)(a1 + 1000) = v25;
  *(_OWORD *)(a1 + 1016) = v26;
  __int128 v28 = *(_OWORD *)(a6 + 688);
  __int128 v29 = *(_OWORD *)(a6 + 704);
  __int128 v30 = *(_OWORD *)(a6 + 720);
  *(void *)(a1 + 1112) = *(void *)(a6 + 736);
  *(_OWORD *)(a1 + 1080) = v29;
  *(_OWORD *)(a1 + 1096) = v30;
  *(_OWORD *)(a1 + 1064) = v28;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(void *)(a1 + 1152) = 0LL;
  *(void *)(a1 + 1160) = 0LL;
  *(void *)(a1 + 1144) = 0LL;
  *(float *)(a1 + 1168) = a9;
  __int128 v31 = *a8;
  __int128 v32 = a8[1];
  *(void *)(a1 + 1208) = *((void *)a8 + 4);
  *(_OWORD *)(a1 + 1176) = v31;
  *(_OWORD *)(a1 + 1192) = v32;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  sub_100311EA8((void *)a1, a2);
  sub_100201B78((std::string *)(a1 + 1216), (const std::string *)a7);
  sub_100201B78((std::string *)(a1 + 1248), (const std::string *)(a7 + 32));
  return a1;
}

void sub_100311C9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  __int128 v22 = (void **)(v16 + 1144);
  if (*(_BYTE *)(v16 + 1312))
  {
    for (uint64_t i = 0LL; i != -32; i -= 16LL)
      sub_100012390(v16 + 1296 + i);
  }

  sub_100254488(v18);
  __int128 v24 = *v22;
  if (*v22)
  {
    *(void *)(v16 + 1152) = v24;
    operator delete(v24);
  }

  if (*(_BYTE *)(v16 + 1128)) {

  }
  sub_10015CF8C(a10);
  sub_100315348(v17);
  sub_100315348(v19);
  sub_1003152D4(v21);
  sub_1003150E4(a11);
  sub_100315098(v20, *(void **)(v16 + 200));
  __int128 v25 = *(void **)(v16 + 184);
  if (v25 == a12)
  {
    uint64_t v26 = 4LL;
    __int128 v25 = a12;
  }

  else
  {
    if (!v25) {
      goto LABEL_13;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_13:
  __int128 v27 = *(void **)(v16 + 152);
  if (v27 == a13)
  {
    uint64_t v28 = 4LL;
    __int128 v27 = a13;
  }

  else
  {
    if (!v27) {
      goto LABEL_18;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_18:
  __int128 v29 = *(void **)(v16 + 120);
  if (v29 == a14)
  {
    uint64_t v30 = 4LL;
    __int128 v29 = a14;
  }

  else
  {
    if (!v29) {
      goto LABEL_23;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_23:
  __int128 v31 = *(void **)(v16 + 88);
  if (v31 == a15)
  {
    uint64_t v32 = 4LL;
    __int128 v31 = a15;
  }

  else
  {
    if (!v31) {
      goto LABEL_28;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_28:
  v33 = *(void **)(v16 + 56);
  if (v33 == a16)
  {
    uint64_t v34 = 4LL;
    v33 = a16;
  }

  else
  {
    if (!v33) {
      goto LABEL_33;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_33:
  uint64_t v35 = *(void *)(v16 + 24);
  if (v35 == v16)
  {
    uint64_t v36 = 4LL;
  }

  else
  {
    if (!v35) {
      goto LABEL_38;
    }
    uint64_t v36 = 5LL;
    uint64_t v16 = *(void *)(v16 + 24);
  }

  (*(void (**)(uint64_t))(*(void *)v16 + 8 * v36))(v16);
LABEL_38:
  _Unwind_Resume(a1);
}

void sub_100311EA8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Region vector is empty.");
  }

  unint64_t v4 = a1 + 24;
  v46 = a1 + 25;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    int v51 = v5;
    __int128 v6 = v46;
    while (1)
    {
      __int128 v6 = (void *)*v6;
      if (!v6) {
        break;
      }
      int v7 = *((_DWORD *)v6 + 8);
      if (v5 >= v7)
      {
        if (v7 >= v5) {
          goto LABEL_18;
        }
        ++v6;
      }
    }

    uint64_t v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0LL;
    v8->__shared_weak_owners_ = 0LL;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD7E0;
    v8[1].__shared_owners_ = 0LL;
    v8[1].__shared_weak_owners_ = 0LL;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1].__shared_owners_;
    v49 = &v8[1].__vftable;
    v50 = v8;
    unint64_t v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0LL;
    v9->__shared_weak_owners_ = 0LL;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD7E0;
    v9[1].__shared_weak_owners_ = 0LL;
    v9[1].__shared_owners_ = 0LL;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&v9[1].__shared_owners_;
    v47 = &v9[1].__vftable;
    v48 = v9;
    *(void *)&buf[8] = 0LL;
    *(void *)&buf[16] = 0LL;
    v53 = &v51;
    *(void *)buf = &buf[8];
    v52 = buf;
    sub_100315410((uint64_t)v4, &v51, (uint64_t)&unk_1004242F8, &v53, &v52);
    sub_10026C090((uint64_t)buf, *(void **)&buf[8]);
    unint64_t v10 = sub_100312710((uint64_t)v4, &v51);
    v53 = (int *)&v49;
    *(void *)buf = &unk_10043072C;
    sub_100315554( (uint64_t **)v10,  (unsigned __int8 *)&unk_10043072C,  (uint64_t)&unk_1004242F8,  (_BYTE **)buf,  (void **)&v53);
    uint64_t v11 = sub_100312710((uint64_t)v4, &v51);
    LOBYTE(v52) = 1;
    *(void *)buf = &v52;
    v53 = (int *)&v47;
    sub_100315554((uint64_t **)v11, (unsigned __int8 *)&v52, (uint64_t)&unk_1004242F8, (_BYTE **)buf, (void **)&v53);
    unint64_t v12 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    __int16 v15 = v50;
    if (v50)
    {
      uint64_t v16 = (unint64_t *)&v50->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

void sub_10031240C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22)
{
}

uint64_t sub_100312468( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_100311A64(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_10031247C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regionmon ~RegionMonitor", v22, 2u);
  }

  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  if (v3 == (void *)a1)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)a1;
  }

  else
  {
    if (!v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (*(_BYTE *)(a1 + 1312))
  {
    for (uint64_t i = 0LL; i != -32; i -= 16LL)
      sub_100012390(a1 + 1296 + i);
  }

  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    uint64_t v7 = a1 + j;
  }

  uint64_t v8 = *(void **)(a1 + 1144);
  if (v8)
  {
    *(void *)(a1 + 1152) = v8;
    operator delete(v8);
  }

  if (*(_BYTE *)(a1 + 1128)) {

  }
  sub_100034A98(a1 + 816, *(void **)(a1 + 824));
  sub_100034A98(a1 + 376, *(void **)(a1 + 384));
  sub_100315348(a1 + 336);
  sub_100315348(a1 + 296);
  sub_1003152D4(a1 + 256);
  sub_1003150E4(a1 + 216);
  sub_100315098(a1 + 192, *(void **)(a1 + 200));
  unint64_t v9 = *(void **)(a1 + 184);
  if (v9 == (void *)(a1 + 160))
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = (void *)(a1 + 160);
  }

  else
  {
    if (!v9) {
      goto LABEL_28;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_28:
  uint64_t v11 = *(void **)(a1 + 152);
  if (v11 == (void *)(a1 + 128))
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = (void *)(a1 + 128);
  }

  else
  {
    if (!v11) {
      goto LABEL_33;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_33:
  __int16 v13 = *(void **)(a1 + 120);
  if (v13 == (void *)(a1 + 96))
  {
    uint64_t v14 = 4LL;
    __int16 v13 = (void *)(a1 + 96);
  }

  else
  {
    if (!v13) {
      goto LABEL_38;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_38:
  __int16 v15 = *(void **)(a1 + 88);
  if (v15 == (void *)(a1 + 64))
  {
    uint64_t v16 = 4LL;
    __int16 v15 = (void *)(a1 + 64);
  }

  else
  {
    if (!v15) {
      goto LABEL_43;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_43:
  unint64_t v17 = *(void **)(a1 + 56);
  if (v17 == (void *)(a1 + 32))
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = (void *)(a1 + 32);
  }

  else
  {
    if (!v17) {
      goto LABEL_48;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_48:
  uint64_t v19 = *(void **)(a1 + 24);
  if (v19 == (void *)a1)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = (void *)a1;
    goto LABEL_52;
  }

  if (v19)
  {
    uint64_t v20 = 5LL;
LABEL_52:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }

  return a1;
}

uint64_t *sub_100312710(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_100126B2C("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

uint64_t *sub_100312764(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_100126B2C("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

uint64_t sub_1003127B8(uint64_t a1, void *a2)
{
  if (a2[2] >= 2uLL)
  {
    uint64_t v2 = a2 + 1;
    unsigned int v3 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      do
      {
        unsigned int v4 = (void *)v3[1];
        int v5 = v4;
        __int128 v6 = v3;
        if (v4)
        {
          do
          {
            uint64_t v7 = v5;
            int v5 = (void *)*v5;
          }

          while (v5);
        }

        else
        {
          do
          {
            uint64_t v7 = (void *)v6[2];
            BOOL v8 = *v7 == (void)v6;
            __int128 v6 = v7;
          }

          while (!v8);
        }

        if (v7 != v2)
        {
          int v9 = *((_DWORD *)v3 + 15);
          while (v9 == *((_DWORD *)v7 + 15))
          {
            uint64_t v10 = *((unsigned __int8 *)v3 + 55);
            if ((v10 & 0x80u) == 0LL) {
              uint64_t v11 = *((unsigned __int8 *)v3 + 55);
            }
            else {
              uint64_t v11 = v3[5];
            }
            uint64_t v12 = *((unsigned __int8 *)v7 + 55);
            int v13 = (char)v12;
            if ((v12 & 0x80u) != 0LL) {
              uint64_t v12 = v7[5];
            }
            if (v11 == v12)
            {
              if (v13 >= 0) {
                uint64_t v14 = (unsigned __int8 *)(v7 + 4);
              }
              else {
                uint64_t v14 = (unsigned __int8 *)v7[4];
              }
              if ((v10 & 0x80) != 0)
              {
                if (!memcmp((const void *)v3[4], v14, v3[5]))
                {
LABEL_43:
                  char v23 = (os_log_s *)qword_1008000A0;
                  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
                    sub_1003AC334((char *)v3 + 55, v3 + 4, v23);
                  }
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Region names are not unique.");
                  goto LABEL_46;
                }
              }

              else
              {
                if (!*((_BYTE *)v3 + 55)) {
                  goto LABEL_43;
                }
                __int16 v15 = (unsigned __int8 *)(v3 + 4);
                while (*v15 == *v14)
                {
                  ++v15;
                  ++v14;
                  if (!--v10) {
                    goto LABEL_43;
                  }
                }
              }
            }

            float v16 = *((float *)v7 + 14);
            float v17 = *((float *)v3 + 14);
            if (v16 <= v17) {
              sub_1003AC3AC();
            }
            float v18 = v16 - v17;
            if (v18 < 0.1)
            {
              float v26 = v18;
              BOOL v25 = (os_log_s *)qword_1008000A0;
              if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
                sub_1003AC3D4(v25, v26);
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Regions are too close together.");
              goto LABEL_46;
            }

            uint64_t v19 = (void *)v7[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = (void *)*v19;
              }

              while (v19);
            }

            else
            {
              do
              {
                uint64_t v20 = (void *)v7[2];
                BOOL v8 = *v20 == (void)v7;
                uint64_t v7 = v20;
              }

              while (!v8);
            }

            uint64_t v7 = v20;
            if (v20 == v2) {
              goto LABEL_35;
            }
          }

          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
            sub_1003AC464();
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Region categories in set doesn't match");
LABEL_46:
        }

void sub_100312A60(_Unwind_Exception *a1)
{
}

BOOL sub_100312A7C(std::string::size_type a1, std::string::size_type a2, int a3, int a4, int a5, double a6)
{
  std::string::size_type v54 = a2;
  int v52 = a4;
  int v53 = a3;
  switch(a3)
  {
    case 1:
      int v6 = a5;
      int v51 = a5;
      goto LABEL_10;
    case 2:
    case 5:
      int v51 = 0;
      int v9 = (os_log_s *)qword_1008000A0;
      int v6 = 0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#regionmon Setting typePredictor as None since WifiToF/ObjectTracking based ranging does not use user intent score.",  (uint8_t *)&buf,  2u);
        int v6 = 0;
      }

      goto LABEL_10;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AC58C();
      }
      return 0LL;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AC5B8();
      }
      return 0LL;
    default:
LABEL_10:
      sub_1003157C8((void *)(a1 + 216), &v54);
      v49 = 0LL;
      v50 = 0LL;
      uint64_t v11 = *(uint64_t **)(a1 + 200);
      if (!v11) {
        goto LABEL_15;
      }
      break;
  }

  while (1)
  {
    int v12 = *((_DWORD *)v11 + 8);
    if (v52 >= v12) {
      break;
    }
LABEL_14:
    uint64_t v11 = (uint64_t *)*v11;
    if (!v11)
    {
LABEL_15:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AC49C();
      }
      BOOL v10 = 0LL;
      goto LABEL_62;
    }
  }

  if (v12 < v52)
  {
    ++v11;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003AC514();
  }
  int v13 = sub_100312710(a1 + 192, &v52);
  uint64_t v14 = sub_100312764((uint64_t)v13, (unsigned __int8 *)&unk_10043072C);
  sub_100018E60(&v49, v14);
  v46 = 0LL;
  v47 = 0LL;
  unint64_t v48 = 0LL;
  __int16 v15 = v49 + 1;
  float v16 = (void *)*v49;
  if ((void *)*v49 != v49 + 1)
  {
    float v17 = 0LL;
    do
    {
      float v18 = (__int128 *)(v16 + 4);
      if ((unint64_t)v17 >= v48)
      {
        float v17 = (__int128 *)sub_100311250((uint64_t *)&v46, v18);
      }

      else
      {
        sub_1003111DC((uint64_t)&v46, v18);
        v17 += 3;
      }

      v47 = v17;
      uint64_t v19 = (void *)v16[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          uint64_t v20 = (void *)v16[2];
          BOOL v21 = *v20 == (void)v16;
          float v16 = v20;
        }

        while (!v21);
      }

      float v16 = v20;
    }

    while (v20 != v15);
    int v6 = v51;
  }

  if ((v6 & 0xFFFFFFFD) == 1 && (!*(_BYTE *)(a1 + 1312) || !*(void *)(a1 + 1280)))
  {
    memset(&buf, 0, sizeof(buf));
    uint64_t v58 = 0x3FE8000000000000LL;
    __int128 v57 = *(_OWORD *)(a1 + 1184);
    if (!*(_BYTE *)(a1 + 1240)) {
      __assert_rtn( "initStateForDevice",  "NRBYRegionMonitor.mm",  255,  "_pathToModelWeights[kIdxUwbSpatialGesturePredictor].has_value()");
    }
    std::string::operator=(&buf, (const std::string *)(a1 + 1216));
    if (*(_BYTE *)(a1 + 1312))
    {
      LODWORD(v55) = 0;
      sub_100315858(&v42);
      if (!*(_BYTE *)(a1 + 1312)) {
        sub_100006080();
      }
      sub_10000EE54(a1 + 1280, &v42);
      __int128 v22 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      if (*((void *)&v42 + 1))
      {
        char v23 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }

    else
    {
      LODWORD(v55) = 0;
      sub_100315858(&v42);
      uint64_t v43 = 0LL;
      uint64_t v44 = 0LL;
      sub_1003131D0(a1 + 1280, (uint64_t)&v42);
      for (uint64_t i = 16LL; i != -16; i -= 16LL)
        sub_100012390((uint64_t)&v42 + i);
    }

    int v6 = v51;
  }

  switch(v6)
  {
    case 0:
      std::string::size_type v26 = *(void *)(a1 + 1200);
      std::string::size_type v45 = v26;
      double v27 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
      uint64_t v28 = "#regionmon No intent classifier threshold set to %f for dev 0x%llx";
      break;
    case 1:
      std::string::size_type v31 = *(void *)(a1 + 1184);
      std::string::size_type v45 = v31;
      double v27 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
      uint64_t v28 = "#regionmon Single antenna spatial gesture threshold set to %f for dev 0x%llx";
      break;
    case 2:
      std::string::size_type v29 = *(void *)(a1 + 1176);
      std::string::size_type v45 = v29;
      double v27 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v29;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
      uint64_t v28 = "#regionmon AoA intent threshold set to %f for dev 0x%llx";
      break;
    case 3:
      std::string::size_type v30 = *(void *)(a1 + 1192);
      std::string::size_type v45 = v30;
      double v27 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_58;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
      uint64_t v28 = "#regionmon Dual antenna spatial gesture threshold set to %f for dev 0x%llx";
      break;
    case 4:
      __assert_rtn("initStateForDevice", "NRBYRegionMonitor.mm", 287, "0");
    default:
      goto LABEL_58;
  }

  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&buf, 0x16u);
LABEL_58:
  v55 = &v54;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  buf.__r_.__value_.__l.__size_ = a1;
  buf.__r_.__value_.__l.__cap_ = a1 + 64;
  *(void *)&__int128 v57 = &v49;
  *((void *)&v57 + 1) = a1 + 376;
  uint64_t v58 = (uint64_t)&v53;
  v59 = &v51;
  v60 = &v45;
  v61 = &v52;
  std::string::size_type v62 = a1 + 1280;
  sub_100315940(a1 + 216, (uint64_t *)&v54, (uint64_t)&unk_1004242F8, &v55, &buf);
  int v33 = v32;
  if (v32)
  {
    uint64_t v34 = v54;
    int v35 = v52;
    memset(v40, 0, sizeof(v40));
    sub_1002AF228((char *)v40, v46, v47, 0xAAAAAAAAAAAAAAABLL * (v47 - v46));
    char v41 = 1;
    sub_100313244(a1 + 32, 1, v34, v35, (uint64_t)v40, v51, a6);
    if (v41)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      sub_1002AE7B4((void ***)&buf);
    }
  }

  BOOL v10 = v33 != 0;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_1002AE7B4((void ***)&buf);
LABEL_62:
  uint64_t v36 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  return v10;
}

void sub_100313120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  for (uint64_t i = 16LL; i != -16; i -= 16LL)
    sub_100012390(v34 + i);
  if (a34 < 0) {
    operator delete(__p);
  }
  a14 = &a19;
  sub_1002AE7B4((void ***)&a14);
  sub_100012390((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1003131D0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    for (uint64_t i = 0LL; i != 32; i += 16LL)
      sub_10000EE54(a1 + i, (__int128 *)(a2 + i));
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(_BYTE *)(a1 + 32) = 1;
  }

  return a1;
}

uint64_t sub_100313244(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, int a6, double a7)
{
  char v13 = a2;
  uint64_t v12 = a3;
  double v11 = a7;
  int v9 = a6;
  int v10 = a4;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *, double *, int *, uint64_t, int *))(*(void *)v7 + 48LL))( v7,  &v13,  &v12,  &v11,  &v10,  a5,  &v9);
}

uint64_t sub_1003132A0( uint64_t a1, std::string::size_type a2, std::string::size_type a3, void *a4, int a5, unsigned __int8 a6, int a7, double a8)
{
  std::string::size_type v115 = a2;
  std::string::size_type v114 = a3;
  unsigned __int8 v113 = a6;
  int v112 = a7;
  uint64_t v12 = (void *)(a1 + 256);
  if (sub_1002B003C((void *)(a1 + 256), &v115))
  {
    char v13 = sub_100046FEC(v12, &v115);
    if (!v13) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    sub_1003157C8(v13 + 3, &v114);
  }

  uint64_t v14 = sub_100312710(a1 + 192, &v112);
  __int16 v15 = sub_100312764((uint64_t)v14, &v113);
  uint64_t v16 = v15[1];
  v110 = (void *)*v15;
  v111 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    float v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  sub_1002AEA60(v89, a1 + 376);
  memcpy(v90, (const void *)(a1 + 400), sizeof(v90));
  __int128 v91 = *(_OWORD *)(a1 + 800);
  sub_100201E2C((uint64_t *)v92, a1 + 816);
  *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)(a1 + 852);
  v93[0] = *(_OWORD *)(a1 + 840);
  sub_100201F04((uint64_t)&v94, (__int128 *)(a1 + 872));
  uint64_t v109 = *(void *)(a1 + 1112);
  __int128 v19 = *(_OWORD *)(a1 + 984);
  __int128 v100 = *(_OWORD *)(a1 + 968);
  __int128 v101 = v19;
  __int128 v20 = *(_OWORD *)(a1 + 952);
  __int128 v98 = *(_OWORD *)(a1 + 936);
  __int128 v99 = v20;
  __int128 v21 = *(_OWORD *)(a1 + 1048);
  __int128 v104 = *(_OWORD *)(a1 + 1032);
  __int128 v105 = v21;
  __int128 v22 = *(_OWORD *)(a1 + 1016);
  __int128 v102 = *(_OWORD *)(a1 + 1000);
  __int128 v103 = v22;
  __int128 v23 = *(_OWORD *)(a1 + 1096);
  __int128 v24 = *(_OWORD *)(a1 + 1064);
  __int128 v107 = *(_OWORD *)(a1 + 1080);
  __int128 v108 = v23;
  __int128 v106 = v24;
  __int128 v25 = *(_OWORD *)(a1 + 920);
  __int128 v96 = *(_OWORD *)(a1 + 904);
  __int128 v97 = v25;
  uint64_t v26 = *a4;
  __int128 v91 = *(_OWORD *)(*a4 + 32LL);
  __int128 v27 = *(_OWORD *)(v26 + 72);
  *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)(v26 + 84);
  v93[0] = v27;
  sub_100201B78(&v94, (const std::string *)(v26 + 104));
  __int128 v28 = *(_OWORD *)(v26 + 152);
  __int128 v96 = *(_OWORD *)(v26 + 136);
  __int128 v97 = v28;
  __int128 v29 = *(_OWORD *)(v26 + 168);
  __int128 v30 = *(_OWORD *)(v26 + 184);
  __int128 v31 = *(_OWORD *)(v26 + 216);
  __int128 v100 = *(_OWORD *)(v26 + 200);
  __int128 v101 = v31;
  __int128 v98 = v29;
  __int128 v99 = v30;
  __int128 v32 = *(_OWORD *)(v26 + 232);
  __int128 v33 = *(_OWORD *)(v26 + 248);
  __int128 v34 = *(_OWORD *)(v26 + 280);
  __int128 v104 = *(_OWORD *)(v26 + 264);
  __int128 v105 = v34;
  __int128 v102 = v32;
  __int128 v103 = v33;
  __int128 v35 = *(_OWORD *)(v26 + 296);
  __int128 v36 = *(_OWORD *)(v26 + 312);
  __int128 v37 = *(_OWORD *)(v26 + 328);
  uint64_t v109 = *(void *)(v26 + 344);
  __int128 v107 = v36;
  __int128 v108 = v37;
  __int128 v106 = v35;
  BYTE8(v96) = *(_BYTE *)(a1 + 912);
  HIDWORD(v96) = *(_DWORD *)(a1 + 916);
  v82 = (const std::string *)a1;
  LOBYTE(v97) = *(_BYTE *)(a1 + 920);
  memset(&v88, 0, sizeof(v88));
  unint64_t v38 = (void *)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    do
    {
      *(_OWORD *)&__val.__r_.__value_.__l.__data_ = *((_OWORD *)v38 + 2);
      sub_100201E2C((uint64_t *)&__val.__r_.__value_.__l.__cap_, (uint64_t)(v38 + 6));
      *(_OWORD *)&v124[16] = *(_OWORD *)(v38 + 9);
      *(_OWORD *)&v124[28] = *(_OWORD *)((char *)v38 + 84);
      sub_100201F04((uint64_t)v125, (__int128 *)(v38 + 13));
      __int128 v39 = *(_OWORD *)(v38 + 31);
      __int128 v134 = *(_OWORD *)(v38 + 29);
      __int128 v135 = v39;
      __int128 v40 = *(_OWORD *)(v38 + 23);
      __int128 v130 = *(_OWORD *)(v38 + 21);
      __int128 v131 = v40;
      __int128 v41 = *(_OWORD *)(v38 + 27);
      __int128 v132 = *(_OWORD *)(v38 + 25);
      __int128 v133 = v41;
      __int128 v42 = *(_OWORD *)(v38 + 19);
      __int128 v128 = *(_OWORD *)(v38 + 17);
      __int128 v129 = v42;
      __int128 v43 = *(_OWORD *)(v38 + 39);
      __int128 v138 = *(_OWORD *)(v38 + 37);
      __int128 v139 = v43;
      __int128 v140 = *(_OWORD *)(v38 + 41);
      uint64_t v141 = v38[43];
      __int128 v44 = *(_OWORD *)(v38 + 35);
      __int128 v136 = *(_OWORD *)(v38 + 33);
      __int128 v137 = v44;
      sub_1002CD978(v92, (double *)&__val.__r_.__value_.__l.__size_, (uint64_t *)&__val.__r_.__value_.__l.__size_);
      std::to_string(&v117, *(double *)&__val.__r_.__value_.__l.__size_);
      std::string::size_type v45 = std::string::append(&v117, " ");
      __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      int64_t cap = v45->__r_.__value_.__l.__cap_;
      *(_OWORD *)__p = v46;
      v45->__r_.__value_.__l.__size_ = 0LL;
      v45->__r_.__value_.__l.__cap_ = 0LL;
      v45->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        v47 = __p;
      }
      else {
        v47 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v48 = HIBYTE(cap);
      }
      else {
        std::string::size_type v48 = (std::string::size_type)__p[1];
      }
      std::string::append(&v88, (const std::string::value_type *)v47, v48);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      if (v127 && v126 < 0) {
        operator delete(v125[0]);
      }
      sub_100034A98((uint64_t)&__val.__r_.__value_.__l.__cap_, *(void **)v124);
      v49 = (void *)v38[1];
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (void *)*v49;
        }

        while (v49);
      }

      else
      {
        do
        {
          v50 = (void *)v38[2];
          BOOL v51 = *v50 == (void)v38;
          unint64_t v38 = v50;
        }

        while (!v51);
      }

      unint64_t v38 = v50;
    }

    while (v50 != a4 + 1);
  }

  int v52 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v54 = *(_DWORD *)(*a4 + 32LL);
    int v53 = *(_DWORD *)(*a4 + 36LL);
    v55 = &v88;
    if ((v88.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v55 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    LODWORD(__val.__r_.__value_.__l.__data_) = 134219010;
    *(std::string::size_type *)((char *)__val.__r_.__value_.__r.__words + 4) = v115;
    WORD2(__val.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__val.__r_.__value_.__r.__words[1] + 6) = v114;
    HIWORD(__val.__r_.__value_.__r.__words[2]) = 1024;
    *(_DWORD *)v124 = v54;
    *(_WORD *)&v124[4] = 1024;
    *(_DWORD *)&v124[6] = v53;
    *(_WORD *)&v124[10] = 2080;
    *(void *)&v124[12] = v55;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "#regionmon setting threshold detector parameters for device-part:0x%llx-0x%llx -- sample size: %d, filter type: %d , rssi thresholds: %s",  (uint8_t *)&__val,  0x2Cu);
  }

  v56 = sub_1002B003C(v12, &v115);
  if (!v56)
  {
    int v122 = 1065353216;
    *(_OWORD *)&__val.__r_.__value_.__l.__data_ = v115;
    v121 = 0LL;
    int64_t cap = 0LL;
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&v124[8] = 0LL;
    __val.__r_.__value_.__l.__cap_ = 0LL;
    *(void *)v124 = 0LL;
    *(_DWORD *)&v124[16] = 1065353216;
    sub_100315FC4((uint64_t)v12, (unint64_t *)&__val, &__val);
    sub_1003150E4((uint64_t)&__val.__r_.__value_.__l.__size_);
    sub_1003150E4((uint64_t)__p);
  }

  std::string::size_type size = v82[50].__r_.__value_.__r.__words[0];
  __val.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  if (v113) {
    __int128 v57 = sub_100314F98;
  }
  else {
    __int128 v57 = sub_100314E50;
  }
  __val.__r_.__value_.__l.__size_ = 3221225472LL;
  __val.__r_.__value_.__l.__cap_ = (std::string::size_type)v57;
  *(void *)v124 = &unk_1007BD7B0;
  *(void *)&v124[8] = v82;
  __p[0] = off_1007BD880;
  __p[1] = objc_retainBlock(&__val);
  v121 = __p;
  switch(a5)
  {
    case 1:
    case 2:
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AC5E4();
      }
      goto LABEL_64;
    case 3:
      v61 = sub_100046FEC(v12, &v115);
      if (!v61) {
        sub_100126B2C("unordered_map::at: key not found");
      }
      LODWORD(v116) = 3;
      int v86 = 0;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
      __val.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
      __val.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
      __val.__r_.__value_.__l.__cap_ = (std::string::size_type)&v82[2].__r_.__value_.__l.__cap_;
      *(void *)v124 = &v110;
      *(void *)&v124[8] = v89;
      *(void *)&v124[16] = &v116;
      *(void *)&v124[24] = &v86;
      *(void *)&v124[32] = &size;
      *(void *)&v124[40] = &v112;
      v125[0] = &unk_10043072D;
      sub_100316268((uint64_t)(v61 + 3), (uint64_t *)&v114, (uint64_t)&unk_1004242F8, &v117, &__val);
      goto LABEL_63;
    case 5:
      if (!v82[54].__r_.__value_.__s.__data_[16] || !v82[54].__r_.__value_.__r.__words[0])
      {
        memset(&__val, 0, sizeof(__val));
        *(int64x2_t *)v124 = vdupq_n_s64(0x3FEB333333333333uLL);
        *(void *)&v124[16] = v82[50].__r_.__value_.__l.__size_;
        if (!v82[53].__r_.__value_.__s.__data_[0]) {
          __assert_rtn( "initStateForBluetoothDevice",  "NRBYRegionMonitor.mm",  360,  "_pathToModelWeights[kIdxMotionBasedSpatialGesturePredictor].has_value()");
        }
        std::string::operator=(&__val, v82 + 52);
        std::string::size_type size = v82[50].__r_.__value_.__l.__size_;
        if (v82[54].__r_.__value_.__s.__data_[16])
        {
          LODWORD(v116) = 1;
          sub_100315858(&v117);
          if (!v82[54].__r_.__value_.__s.__data_[16]) {
            sub_100006080();
          }
          sub_10000EE54((uint64_t)&v82[54], (__int128 *)&v117);
          uint64_t v58 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
          if (v117.__r_.__value_.__l.__size_)
          {
            v59 = (unint64_t *)(v117.__r_.__value_.__l.__size_ + 8);
            do
              unint64_t v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }

        else
        {
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = 0uLL;
          LODWORD(v116) = 1;
          sub_100315858(&v117.__r_.__value_.__l.__cap_);
          sub_1003131D0((uint64_t)&v82[53].__r_.__value_.__l.__size_, (uint64_t)&v117);
          for (uint64_t i = 16LL; i != -16; i -= 16LL)
            sub_100012390((uint64_t)&v117 + i);
        }
      }

      v118 = 0LL;
      v63 = sub_100046FEC(v12, &v115);
      if (!v63) {
        sub_100126B2C("unordered_map::at: key not found");
      }
      int v85 = 4;
      int v86 = 3;
      v116 = &v114;
      __val.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
      __val.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
      __val.__r_.__value_.__l.__cap_ = (std::string::size_type)&v82[2].__r_.__value_.__l.__cap_;
      *(void *)v124 = &v110;
      *(void *)&v124[8] = v89;
      *(void *)&v124[16] = &v86;
      *(void *)&v124[24] = &v85;
      *(void *)&v124[32] = &size;
      *(void *)&v124[40] = &v112;
      v125[0] = &v82[53].__r_.__value_.__r.__words[1];
      v125[1] = &v117;
      sub_100316808((uint64_t)(v63 + 3), (uint64_t *)&v114, (uint64_t)&unk_1004242F8, &v116, (uint64_t)&__val);
      v64 = v118;
      if (v118 == &v117)
      {
        uint64_t v65 = 4LL;
        v64 = &v117;
      }

      else
      {
        if (!v118) {
          goto LABEL_63;
        }
        uint64_t v65 = 5LL;
      }

      (*(void (**)(void))(v64->__r_.__value_.__r.__words[0] + 8 * v65))();
LABEL_63:
      if (v56)
      {
LABEL_64:
        uint64_t v66 = 0LL;
      }

      else
      {
        memset(&__val, 0, sizeof(__val));
        v73 = v110 + 1;
        v74 = (void *)*v110;
        if ((void *)*v110 == v110 + 1)
        {
          v75 = 0LL;
          v79 = 0LL;
        }

        else
        {
          v75 = 0LL;
          do
          {
            v76 = (__int128 *)(v74 + 4);
            if ((unint64_t)v75 >= __val.__r_.__value_.__l.__cap_)
            {
              v75 = (__int128 *)sub_100311250((uint64_t *)&__val, v76);
            }

            else
            {
              sub_1003111DC((uint64_t)&__val, v76);
              v75 += 3;
            }

            __val.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
            v77 = (void *)v74[1];
            if (v77)
            {
              do
              {
                v78 = v77;
                v77 = (void *)*v77;
              }

              while (v77);
            }

            else
            {
              do
              {
                v78 = (void *)v74[2];
                BOOL v51 = *v78 == (void)v74;
                v74 = v78;
              }

              while (!v51);
            }

            v74 = v78;
          }

          while (v78 != v73);
          v79 = (__int128 *)__val.__r_.__value_.__r.__words[0];
        }

        uint64_t v80 = v115;
        int v81 = v112;
        memset(v83, 0, sizeof(v83));
        sub_1002AF228((char *)v83, v79, v75, 0xAAAAAAAAAAAAAAABLL * (v75 - v79));
        char v84 = 1;
        sub_100313244((uint64_t)&v82[1].__r_.__value_.__l.__size_, 1, v80, v81, (uint64_t)v83, 0, a8);
        if (v84)
        {
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
          sub_1002AE7B4((void ***)&v117);
        }

        v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__val;
        sub_1002AE7B4((void ***)&v117);
        uint64_t v66 = 1LL;
      }

      v67 = v121;
      if (v121 == __p)
      {
        uint64_t v68 = 4LL;
        v67 = __p;
      }

      else
      {
        if (!v121) {
          goto LABEL_70;
        }
        uint64_t v68 = 5LL;
      }

      (*((void (**)(void))*v67 + v68))();
LABEL_70:
      sub_100034A98((uint64_t)v92, v92[1]);
      sub_100034A98((uint64_t)v89, (void *)v89[1]);
      v69 = v111;
      if (v111)
      {
        p_shared_owners = (unint64_t *)&v111->__shared_owners_;
        do
          unint64_t v71 = __ldaxr(p_shared_owners);
        while (__stlxr(v71 - 1, p_shared_owners));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }

      return v66;
    default:
      goto LABEL_63;
  }

void sub_100313D50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, ...)
{
  for (uint64_t i = 16LL; i != -16; i -= 16LL)
    sub_100012390(v17 + i);
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  __int128 v20 = (unint64_t *)STACK[0x3B8];
  if ((unint64_t *)STACK[0x3B8] == &STACK[0x3A0])
  {
    uint64_t v21 = 4LL;
    __int128 v20 = &STACK[0x3A0];
  }

  else
  {
    if (!v20) {
      goto LABEL_10;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_10:
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_10015CF8C((uint64_t)va);
  sub_100012390((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_100313F34(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v13 = a2;
  uint64_t v7 = (void *)(a1 + 216);
  if (sub_1002B003C((void *)(a1 + 216), (unint64_t *)&v13))
  {
    BOOL v8 = sub_100046FEC(v7, (unint64_t *)&v13);
    if (!v8) {
      goto LABEL_11;
    }
    sub_1003106F4((uint64_t)(v8 + 3), a4);
  }

  int v9 = sub_100046FEC((void *)(a1 + 256), (unint64_t *)&v13);
  if (!v9) {
LABEL_11:
  }
    sub_100126B2C("unordered_map::at: key not found");
  for (uint64_t i = (void *)v9[5]; i; uint64_t i = (void *)*i)
    sub_1003106F4((uint64_t)(i + 3), a4);
LABEL_8:
  sub_1003157C8(v7, (unint64_t *)&v13);
  sub_100316E04((void *)(a1 + 256), (unint64_t *)&v13);
  v11[0] = 0;
  char v12 = 0;
  sub_100313244(a1 + 32, 0, v13, a3, (uint64_t)v11, 0, a4);
  if (v12)
  {
    uint64_t v14 = (void **)v11;
    sub_1002AE7B4(&v14);
  }

void sub_100314050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14)
{
  if (a12)
  {
    a14 = &a9;
    sub_1002AE7B4((void ***)&a14);
  }

  _Unwind_Resume(exception_object);
}

void sub_100314074(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *(uint64_t **)(a1 + 200);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v9 = a1 + 192;
  int v10 = *(_DWORD *)(a2 + 120);
  while (1)
  {
    int v11 = *((_DWORD *)v6 + 8);
    if (v10 >= v11) {
      break;
    }
LABEL_6:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_7;
    }
  }

  if (v11 < v10)
  {
    ++v6;
    goto LABEL_6;
  }

  uint64_t v17 = sub_100312710(a1 + 192, (int *)(a2 + 120))[1];
  if (!v17) {
    goto LABEL_7;
  }
  while (*(_BYTE *)(v17 + 32))
  {
    uint64_t v17 = *(void *)v17;
    if (!v17) {
      goto LABEL_7;
    }
  }

  unint64_t v18 = sub_100312710(v9, (int *)(a2 + 120));
  std::string::size_type v23 = *(void *)a2;
  if (!sub_1002B003C((void *)(a1 + 216), &v23))
  {
    goto LABEL_7;
  }

  __int128 v19 = sub_100046FEC((void *)(a1 + 216), &v23);
  if (!v19) {
    goto LABEL_24;
  }
  if (!sub_1003106E0((uint64_t)(v19 + 3), a2))
  {
    __int128 v20 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)std::string buf = 134218240;
      std::string::size_type v25 = v23;
      __int16 v26 = 1024;
      int v27 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#regionmon updating technology for device monitor: %llu, new tech: %d",  buf,  0x12u);
    }

    sub_100313F34(a1, v23, 0, *(double *)(a2 + 8));
    if (!sub_100312A7C( a1,  v23,  *(_DWORD *)(a2 + 20),  *(_DWORD *)(a2 + 120),  *(_DWORD *)(a2 + 124),  *(double *)(a2 + 8)))
    {
LABEL_7:
      __int128 v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a4 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a4 + 144) = v12;
      *(_OWORD *)(a4 + 160) = *(_OWORD *)(a2 + 160);
      *(void *)(a4 + 176) = *(void *)(a2 + 176);
      __int128 v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a4 + 80) = v13;
      __int128 v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a4 + 112) = v14;
      __int128 v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_OWORD *)(a4 + 16) = v15;
      __int128 v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a4 + 48) = v16;
      *(_BYTE *)(a4 + 184) = 1;
      return;
    }
  }

void sub_1003142D4(void *a1, double *a2, char a3)
{
  for (uint64_t i = (void *)a1[29]; i; uint64_t i = (void *)*i)
  {
  }

  for (uint64_t j = (void *)a1[34]; j; uint64_t j = (void *)*j)
  {
    BOOL v8 = (void *)a1[143];
    uint64_t v9 = (void *)a1[144];
    if (v8 != v9)
    {
      while (*v8 != j[2])
      {
        if (++v8 == v9)
        {
          BOOL v8 = (void *)a1[144];
          break;
        }
      }
    }

    if ((a3 & 1) != 0 || v8 != v9)
    {
      for (k = (void *)j[5]; k; k = (void *)*k)
      {
      }
    }
  }

void sub_1003143AC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, int a6, int a7)
{
  if (a4 - *(double *)a2 <= 60.0)
  {
    if (sub_1003148A4(a1, *(void *)(a2 + 72), *(void *)(a2 + 80)))
    {
      sub_1002B03C8(v37, a3);
      if (!v37[2])
      {
        __int128 v15 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
        {
          __int128 v31 = (void *)(a2 + 24);
          uint64_t v32 = *(void *)(a2 + 72);
          uint64_t v33 = *(void *)(a2 + 80);
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v33;
          __int16 v39 = 2080;
          __int128 v40 = v31;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "#regionmon init bluetooth device with no thresholds for device-part: 0x%llx-0x%llx with model: %s. Using default threshold",  buf,  0x20u);
        }

        *(void *)std::string buf = 0x300000008LL;
        *(void *)&buf[8] = 0xC04E800000000000LL;
        unint64_t v68 = 0xC04E800000000000LL;
        sub_10015ED64((uint64_t)&buf[16], (double *)&v68, 1LL);
        __int128 v41 = xmmword_100423D50;
        uint64_t v42 = 0x4024000000000000LL;
        int v43 = 45;
        LOBYTE(__p) = 0;
        char v46 = 0;
        uint64_t v47 = 0LL;
        char v48 = 0;
        int v49 = 1;
        char v50 = 1;
        __int128 v51 = xmmword_100423D60;
        __int128 v52 = xmmword_100423D70;
        __asm { FMOV            V0.2D, #1.0 }

        __int128 v53 = _Q0;
        unint64_t v54 = 0xC059000000000000LL;
        __int128 v55 = xmmword_100423D80;
        int32x2_t v56 = vdup_n_s32(0x3DCCCCCDu);
        __int128 v57 = xmmword_100423CC0;
        uint64_t v59 = 0LL;
        uint64_t v60 = 0LL;
        uint64_t v58 = 0x3FD999999999999ALL;
        __int128 v61 = xmmword_100423CD0;
        int v62 = 5;
        uint64_t v63 = 0x4000000000000000LL;
        int v64 = 10;
        uint64_t v65 = 0x4034000000000000LL;
        int v66 = 3;
        __int128 v67 = xmmword_100423D90;
        sub_1002B0174((uint64_t)v37, (uint64_t)buf, (uint64_t)buf);
        if (v46 && v45 < 0) {
          operator delete(__p);
        }
        sub_100034A98((uint64_t)&buf[16], v40);
      }

      int v21 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v22 = (void *)(a2 + 24);
        uint64_t v23 = *(void *)(a2 + 72);
        uint64_t v24 = *(void *)(a2 + 80);
        *(_DWORD *)std::string buf = 134218498;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v24;
        __int16 v39 = 2080;
        __int128 v40 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#regionmon init bluetooth device-part: 0x%llx-0x%llx with model: %s",  buf,  0x20u);
      }

      if (*(char *)(a2 + 47) < 0)
      {
        sub_1000063A8(__dst, *(void **)(a2 + 24), *(void *)(a2 + 32));
      }

      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a2 + 24);
        uint64_t v36 = *(void *)(a2 + 40);
      }

      if (SHIBYTE(v36) < 0) {
        operator delete(__dst[0]);
      }
      std::string::size_type v25 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#regionmon Initializing BT device monitoring without spatial gesture detection, allowCoarseEstimation: %d.",  buf,  8u);
      }

      std::string::size_type v26 = *(void *)(a2 + 72);
      std::string::size_type v27 = *(void *)(a2 + 80);
      sub_1002B03C8(v34, (uint64_t)v37);
      sub_1003132A0(a1, v26, v27, v34, 3, a6, a7, *(double *)a2);
      sub_1002B00F0((uint64_t)v34, (void *)v34[1]);
      sub_1002B00F0((uint64_t)v37, (void *)v37[1]);
    }

    __int128 v28 = sub_100046FEC((void *)(a1 + 256), (unint64_t *)(a2 + 72));
    if (!v28) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    __int128 v29 = sub_100046FEC(v28 + 3, (unint64_t *)(a2 + 80));
    if (!v29) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    uint64_t v30 = (uint64_t)(v29 + 3);
  }

  else
  {
    uint64_t v9 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(double *)a2;
      *(_DWORD *)std::string buf = 134218240;
      *(double *)&uint8_t buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#regionmon stale sample being ignored, current time: %f, sample timestamp: %f",  buf,  0x16u);
    }
  }

void sub_10031485C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  __int128 v12 = va_arg(va1, void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1001FDEF8((uint64_t)va1);
  sub_1002B00F0((uint64_t)va, v12);
  _Unwind_Resume(a1);
}

BOOL sub_1003148A4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  unsigned int v3 = (void *)(a1 + 256);
  if (!sub_100046FEC((void *)(a1 + 256), &v7)) {
    return 1LL;
  }
  unsigned int v4 = sub_100046FEC(v3, &v7);
  if (!v4) {
    sub_100126B2C("unordered_map::at: key not found");
  }
  return !sub_1002B003C(v4 + 3, &v6);
}

void sub_100314914(uint64_t a1, double a2)
{
  for (uint64_t i = *(void **)(a1 + 232); i; uint64_t i = (void *)*i)
    sub_100310F40((uint64_t)(i + 3), a2);
  for (uint64_t j = *(void **)(a1 + 272); j; uint64_t j = (void *)*j)
  {
    for (k = (void *)j[5]; k; k = (void *)*k)
      sub_100310F40((uint64_t)(k + 3), a2);
  }

uint64_t *sub_100314984@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v16 = a2;
  int v15 = a3;
  if (!result[26]) {
    goto LABEL_9;
  }
  uint64_t v5 = result[25];
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v7 = (uint64_t)(result + 24);
  while (1)
  {
    int v8 = *(_DWORD *)(v5 + 32);
    if (v8 <= a3) {
      break;
    }
LABEL_8:
    uint64_t v5 = *(void *)v5;
    if (!v5) {
      goto LABEL_9;
    }
  }

  if (v8 < a3)
  {
    v5 += 8LL;
    goto LABEL_8;
  }

  double result = sub_100312710((uint64_t)(result + 24), &v15);
  uint64_t v9 = result[1];
  if (!v9)
  {
LABEL_9:
    *a4 = 0LL;
    a4[1] = 0LL;
    return result;
  }

  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(v9 + 32);
    if (v10 <= a2) {
      break;
    }
LABEL_15:
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      goto LABEL_9;
    }
  }

  if (v10 < a2)
  {
    v9 += 8LL;
    goto LABEL_15;
  }

  int v11 = sub_100312710(v7, &v15);
  double result = sub_100312764((uint64_t)v11, &v16);
  uint64_t v12 = result[1];
  *a4 = *result;
  a4[1] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  return result;
}

void sub_100314A5C( uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, char a8, int a9)
{
  uint64_t v33 = a2;
  if ((sub_100314BF8(a1, a2) & 1) != 0 || a9)
  {
    unsigned __int8 v16 = sub_100046FEC((void *)(a1 + 296), (unint64_t *)&v33);
    if (!v16) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    sub_1002AEE40((char *)v30, (__int128 *)(v16 + 3));
    uint64_t v17 = sub_100046FEC((void *)(a1 + 336), (unint64_t *)&v33);
    if (!v17) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    sub_1002AEE40((char *)__p, (__int128 *)(v17 + 3));
    __int128 v18 = a6[9];
    v26[8] = a6[8];
    v26[9] = v18;
    __int128 v19 = a6[11];
    v26[10] = a6[10];
    v26[11] = v19;
    __int128 v20 = a6[5];
    v26[4] = a6[4];
    v26[5] = v20;
    __int128 v21 = a6[7];
    v26[6] = a6[6];
    v26[7] = v21;
    __int128 v22 = a6[1];
    v26[0] = *a6;
    v26[1] = v22;
    __int128 v24 = a6[3];
    if (a8)
    {
      *(float *)&unsigned int v23 = *(double *)&a7;
      unint64_t v25 = v23 | (unint64_t)&_mh_execute_header;
    }

    else
    {
      unint64_t v25 = 0LL;
    }

    v26[2] = a6[2];
    v26[3] = v24;
    sub_100310498(a1, a2, (uint64_t)v30, (uint64_t)__p, (uint64_t)v26, v25, a9, a3);
    if (v29 && v28 < 0) {
      operator delete(__p[0]);
    }
    if (v32)
    {
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }

void sub_100314BB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  if (a43 && a39 < 0) {
    operator delete(__p);
  }
  if (*(_BYTE *)(v43 - 96))
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100314BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  LOBYTE(__dst) = 0;
  char v18 = 0;
  LOBYTE(v12[0]) = 0;
  unsigned int v3 = (void *)(a1 + 296);
  char v15 = 0;
  if (sub_1002B003C((void *)(a1 + 296), (unint64_t *)&v19))
  {
    unsigned int v4 = (std::string *)sub_100046FEC(v3, (unint64_t *)&v19);
    if (!v4) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    sub_100311070((char *)&__dst, v4 + 1);
  }

  uint64_t v5 = sub_100046FEC((void *)(a1 + 256), (unint64_t *)&v19);
  if (!v5) {
    sub_100126B2C("unordered_map::at: key not found");
  }
  for (uint64_t i = (__int128 *)v5[5]; i; uint64_t i = *(__int128 **)i)
  {
    sub_1002AEE40((char *)&__p, i + 17);
    if (v11)
    {
      if (v15 && v10 >= v14 || (sub_100311070((char *)v12, &__p), v11))
      {
      }
    }
  }

  if (!v18 || !v15)
  {
    if ((v18 != 0) != (v15 != 0)) {
      goto LABEL_16;
    }
LABEL_18:
    uint64_t v7 = 0LL;
    goto LABEL_19;
  }

void sub_100314D9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if (a28 && a24 < 0) {
    operator delete(__p);
  }
  if (*(_BYTE *)(v28 - 48))
  {
  }

  _Unwind_Resume(exception_object);
}

char *sub_100314E00(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  unsigned int v4 = (char *)sub_100316E50(a1, a2, a2, a3);
  uint64_t v5 = v4;
  if (!v6) {
    sub_100311070(v4 + 24, (std::string *)a3);
  }
  return v5;
}

void sub_100314E50( uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _OWORD *a5, uint64_t a6, int a7, double a8)
{
  uint64_t v14 = *(void *)(a1 + 32);
  sub_1002AEE40((char *)&v28, a3);
  sub_1002AEE40((char *)&__p, a4);
  __int128 v17 = a5[9];
  v24[8] = a5[8];
  v24[9] = v17;
  __int128 v18 = a5[11];
  v24[10] = a5[10];
  v24[11] = v18;
  __int128 v19 = a5[5];
  v24[4] = a5[4];
  v24[5] = v19;
  __int128 v20 = a5[7];
  v24[6] = a5[6];
  v24[7] = v20;
  __int128 v21 = a5[1];
  v24[0] = *a5;
  v24[1] = v21;
  __int128 v22 = a5[3];
  if ((a6 & 0xFF00000000LL) != 0) {
    double v23 = *(float *)&a6;
  }
  else {
    double v23 = 0.0;
  }
  v24[2] = a5[2];
  v24[3] = v22;
  sub_100314A5C(v14, a2, a8, v15, v16, v24, *(uint64_t *)&v23, (a6 & 0xFF00000000LL) != 0, a7);
  if (v27 && v26 < 0) {
    operator delete(__p);
  }
  if (v30)
  {
    if (v29 < 0) {
      operator delete(v28);
    }
  }

void sub_100314F54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42)
{
  if (a42 && a38 < 0) {
    operator delete(__p);
  }
  if (*(_BYTE *)(v42 - 88))
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_100314F98(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  if (v7 && v6 < 0) {
    operator delete(__p);
  }
  if (v10)
  {
    if (v9 < 0) {
      operator delete(v8);
    }
  }

void sub_100315004( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (a25)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100315028(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)double result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v5 = a2[2];
  unsigned int v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 16;
    *unsigned int v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

void sub_100315098(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100315098(a1, *a2);
    sub_100315098(a1, a2[1]);
    sub_10026C090((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }

uint64_t sub_1003150E4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10031511C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unsigned int v3 = (void *)*v2;
      sub_100315158((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_100315158(uint64_t a1)
{
  for (uint64_t i = 1216LL; i != 1200; i -= 8LL)
  {
    uint64_t v3 = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  sub_100034A98(a1 + 872, *(void **)(a1 + 880));
  sub_100034A98(a1 + 432, *(void **)(a1 + 440));
  sub_100012390(a1 + 232);
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100012390(a1 + 104);
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5 == (void *)(a1 + 72))
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = (void *)(a1 + 72);
  }

  else
  {
    if (!v5) {
      goto LABEL_24;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_24:
  unint64_t v7 = *(void **)(a1 + 64);
  if (v7 == (void *)(a1 + 40))
  {
    uint64_t v8 = 4LL;
    unint64_t v7 = (void *)(a1 + 40);
  }

  else
  {
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_29:
  char v9 = *(void **)(a1 + 32);
  if (v9 == (void *)(a1 + 8))
  {
    uint64_t v10 = 4LL;
    char v9 = (void *)(a1 + 8);
    goto LABEL_33;
  }

  if (v9)
  {
    uint64_t v10 = 5LL;
LABEL_33:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  return a1;
}

uint64_t sub_1003152D4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10031530C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1003150E4((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_100315348(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100315380(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      if (*((_BYTE *)v3 + 72))
      {
      }

      operator delete(v3);
    }

    while (v2);
  }

void sub_1003153CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD7E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003153DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD7E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1003153FC(uint64_t a1)
{
}

uint64_t *sub_100315410(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4, void **a5)
{
  unint64_t v7 = (uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    char v9 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_1003154C8(a1, a4, a5, (uint64_t)&v12);
    sub_10001E548((uint64_t **)a1, (uint64_t)v9, v7, v12);
    return v12;
  }

  return (uint64_t *)v9;
}

_DWORD *sub_1003154C8@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  double result = operator new(0x40uLL);
  char v9 = *a3;
  result[8] = **a2;
  *((void *)result + 5) = *v9;
  int v10 = v9 + 1;
  uint64_t v11 = v9[1];
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *((void *)result + 6) = v11;
  uint64_t v12 = (char *)(result + 12);
  uint64_t v13 = v9[2];
  *((void *)result + 7) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *char v9 = v10;
    *int v10 = 0LL;
    v9[2] = 0LL;
  }

  else
  {
    *((void *)result + 5) = v12;
  }

  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t **sub_100315554(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4, void **a5)
{
  char v9 = a1 + 1;
  int v8 = a1[1];
  int v10 = a1 + 1;
  uint64_t v11 = a1 + 1;
  if (v8)
  {
    unsigned int v12 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v8;
        unsigned int v13 = *((unsigned __int8 *)v8 + 32);
        if (v12 >= v13) {
          break;
        }
        int v8 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_9;
        }
      }

      if (v13 >= v12) {
        return v11;
      }
      int v8 = v11[1];
      if (!v8)
      {
        int v10 = v11 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v14 = operator new(0x38uLL);
    v20[1] = v9;
    uint64_t v15 = *a5;
    v14[32] = **a4;
    *((void *)v14 + 5) = *v15;
    uint64_t v16 = v15[1];
    *((void *)v14 + 6) = v16;
    if (v16)
    {
      __int128 v17 = (unint64_t *)(v16 + 8);
      do
        unint64_t v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }

    char v21 = 1;
    sub_10001E548(a1, (uint64_t)v11, v10, (uint64_t *)v14);
    v20[0] = 0LL;
    sub_10026C20C((uint64_t)v20, 0LL);
  }

  return (uint64_t **)v14;
}

uint64_t *sub_10031566C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    float v6 = *(float *)(a2 + 24);
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        float v8 = *((float *)v4 + 14);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_10031571C(a1, a3, (uint64_t)&v10);
    sub_10001E548((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }

  return (uint64_t *)v7;
}

__n128 sub_10031571C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  float v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000063A8(v7, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }

  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_WORD *)v6 + 36) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1003157AC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1001AE0A4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003157C8(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100046FEC(a1, a2);
  if (result)
  {
    sub_100021814(a1, (void *)result, (uint64_t)v4);
    sub_100315814((uint64_t)v4, 0LL);
    return 1LL;
  }

  return result;
}

void sub_100315814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100315158((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

void *sub_100315858@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  uint64_t result = sub_1003158B8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1003158A4(_Unwind_Exception *a1)
{
}

void *sub_1003158B8(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1007BD830;
  sub_1002DB654(a1 + 3);
  return a1;
}

void sub_1003158EC(_Unwind_Exception *a1)
{
}

void sub_100315900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100315910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007BD830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100315930(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_100315940(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, _OWORD *a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }

    int v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v5) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  sub_100315B84(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100021B74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }

  __int128 v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    void *v19 = v22[0];
  }

  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }

      else
      {
        v20 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }

  uint64_t v11 = (void *)v22[0];
  v22[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100315814((uint64_t)v22, 0LL);
  return v11;
}

void sub_100315B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100315B84@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *int v10 = 0LL;
  v10[1] = a2;
  uint64_t v11 = *a3;
  __int128 v12 = a4[3];
  v15[2] = a4[2];
  v15[3] = v12;
  v15[4] = a4[4];
  __int128 v13 = a4[1];
  v15[0] = *a4;
  v15[1] = v13;
  unint64_t v16 = v11;
  uint64_t result = sub_100315C28(v10 + 2, &v16, (uint64_t)v15);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100315C10(_Unwind_Exception *a1)
{
}

void *sub_100315C28(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v6 = **(void **)a3;
  sub_10001E914((uint64_t)v35, *(void *)(a3 + 8));
  sub_10001E914((uint64_t)v33, *(void *)(a3 + 16));
  unint64_t v7 = *(unint64_t **)(a3 + 24);
  unint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  unint64_t v29 = v9;
  char v30 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  uint64_t v12 = *(void *)(a3 + 32);
  int v13 = **(_DWORD **)(a3 + 40);
  unsigned int v14 = **(_DWORD **)(a3 + 48);
  double v15 = **(double **)(a3 + 56);
  int v16 = **(_DWORD **)(a3 + 64);
  sub_100315F1C(v28, *(void *)(a3 + 72));
  char v32 = 0LL;
  sub_10030FACC(v5, v6, (uint64_t)v35, (uint64_t)v33, &v29, v12, v13, v14, v15, v16, (uint64_t)v28, (uint64_t)v31);
  unint64_t v17 = v32;
  if (v32 == v31)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = v31;
  }

  else
  {
    if (!v32) {
      goto LABEL_9;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_9:
  if (v28[32])
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)&v28[i]);
  }

  unint64_t v20 = v30;
  if (v30)
  {
    char v21 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  double v23 = v34;
  if (v34 == v33)
  {
    uint64_t v24 = 4LL;
    double v23 = v33;
  }

  else
  {
    if (!v34) {
      goto LABEL_22;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  unint64_t v25 = v36;
  if (v36 == v35)
  {
    uint64_t v26 = 4LL;
    unint64_t v25 = v35;
    goto LABEL_26;
  }

  if (v36)
  {
    uint64_t v26 = 5LL;
LABEL_26:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }

  return a1;
}

void sub_100315E40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25, uint64_t a26, uint64_t a27, char *a28)
{
  char v31 = a24;
  if (a24 == v28)
  {
    uint64_t v32 = 4LL;
    char v31 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_6;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*(void *)v31 + 8 * v32))();
LABEL_6:
  if (a17)
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)(&a13 + i));
  }

  sub_100012390((uint64_t)&a19);
  __int128 v34 = a28;
  if (a28 == &a25)
  {
    uint64_t v35 = 4LL;
    __int128 v34 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_14;
    }
    uint64_t v35 = 5LL;
  }

  (*(void (**)(void))(*(void *)v34 + 8 * v35))();
LABEL_14:
  uint64_t v36 = *(void **)(v29 - 112);
  if (v36 == (void *)(v29 - 136))
  {
    uint64_t v37 = 4LL;
    uint64_t v36 = (void *)(v29 - 136);
  }

  else
  {
    if (!v36) {
      goto LABEL_19;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_19:
  _Unwind_Resume(a1);
}

_BYTE *sub_100315F1C(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  sub_100315F7C((uint64_t)a1, a2);
  return a1;
}

void sub_100315F50(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32))
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390(v1 + i);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100315F7C(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
  {
    for (uint64_t i = 0LL; i != 2; ++i)
    {
      __int128 v3 = *(_OWORD *)(a2 + 16 * i);
      *(_OWORD *)(result + 16 * i) = v3;
      if (*((void *)&v3 + 1))
      {
        uint64_t v4 = (unint64_t *)(*((void *)&v3 + 1) + 8LL);
        do
          unint64_t v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
    }

    *(_BYTE *)(result + 32) = 1;
  }

  return result;
}

void *sub_100315FC4(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          int v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v12 = a1 + 16;
  int v13 = operator new(0x40uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *int v13 = 0LL;
  v13[1] = v6;
  v13[2] = *a3;
  sub_100315028((uint64_t)(v13 + 3), a3 + 1);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1LL;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }

  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }

      else
      {
        v21 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }

  int v10 = (void *)v23[0];
  v23[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100316224((uint64_t)v23, 0LL);
  return v10;
}

void sub_10031620C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100316224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1003150E4((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

void *sub_100316268(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, _OWORD *a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }

    int v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v5) {
              break;
            }
          }

          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  sub_1003164AC(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100021B74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }

  size_t v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    void *v19 = v22[0];
  }

  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }

      else
      {
        v20 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }

  unint64_t v11 = (void *)v22[0];
  v22[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100315814((uint64_t)v22, 0LL);
  return v11;
}

void sub_100316494(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1003164AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *int v10 = 0LL;
  v10[1] = a2;
  unint64_t v11 = *a3;
  __int128 v12 = a4[3];
  v15[2] = a4[2];
  v15[3] = v12;
  v15[4] = a4[4];
  __int128 v13 = a4[1];
  v15[0] = *a4;
  v15[1] = v13;
  unint64_t v16 = v11;
  uint64_t result = sub_100316550(v10 + 2, &v16, (uint64_t)v15);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100316538(_Unwind_Exception *a1)
{
}

void *sub_100316550(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = **(void **)a3;
  sub_10001E914((uint64_t)v35, *(void *)(a3 + 8));
  sub_10001E914((uint64_t)v33, *(void *)(a3 + 16));
  unint64_t v6 = *(unint64_t **)(a3 + 24);
  unint64_t v8 = *v6;
  unint64_t v7 = (std::__shared_weak_count *)v6[1];
  unint64_t v29 = v8;
  char v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v11 = *(void *)(a3 + 32);
  int v12 = **(_DWORD **)(a3 + 40);
  unsigned int v13 = **(_DWORD **)(a3 + 48);
  double v14 = **(double **)(a3 + 56);
  int v15 = **(_DWORD **)(a3 + 64);
  v27[0] = 0;
  char v28 = 0;
  uint64_t v32 = 0LL;
  sub_10030FACC( (uint64_t)(a1 + 1),  v5,  (uint64_t)v35,  (uint64_t)v33,  &v29,  v11,  v12,  v13,  v14,  v15,  (uint64_t)v27,  (uint64_t)v31);
  unint64_t v16 = v32;
  if (v32 == v31)
  {
    uint64_t v17 = 4LL;
    unint64_t v16 = v31;
  }

  else
  {
    if (!v32) {
      goto LABEL_9;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_9:
  if (v28)
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)&v27[i]);
  }

  size_t v19 = v30;
  if (v30)
  {
    unint64_t v20 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v34;
  if (v34 == v33)
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = v33;
  }

  else
  {
    if (!v34) {
      goto LABEL_22;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_22:
  char v24 = v36;
  if (v36 == v35)
  {
    uint64_t v25 = 4LL;
    char v24 = v35;
    goto LABEL_26;
  }

  if (v36)
  {
    uint64_t v25 = 5LL;
LABEL_26:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }

  return a1;
}

void sub_100316734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char *a24)
{
  char v27 = a24;
  if (a24 == v24)
  {
    uint64_t v28 = 4LL;
    char v27 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_6;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*(void *)v27 + 8 * v28))();
LABEL_6:
  if (a17)
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)(&a13 + i));
  }

  sub_100012390((uint64_t)&a19);
  char v30 = *(void **)(v25 - 80);
  if (v30 == (void *)(v25 - 104))
  {
    uint64_t v31 = 4LL;
    char v30 = (void *)(v25 - 104);
  }

  else
  {
    if (!v30) {
      goto LABEL_14;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_14:
  uint64_t v32 = *(void **)(v25 - 48);
  if (v32 == (void *)(v25 - 72))
  {
    uint64_t v33 = 4LL;
    uint64_t v32 = (void *)(v25 - 72);
  }

  else
  {
    if (!v32) {
      goto LABEL_19;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_19:
  _Unwind_Resume(a1);
}

void *sub_100316808(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }

    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v5) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  sub_100316A4C(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100021B74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }

    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }

  size_t v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    void *v19 = v22[0];
  }

  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }

      else
      {
        v20 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }

  uint64_t v11 = (void *)v22[0];
  v22[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100315814((uint64_t)v22, 0LL);
  return v11;
}

void sub_100316A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100316A4C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *unint64_t v10 = 0LL;
  v10[1] = a2;
  uint64_t v11 = *a3;
  __int128 v12 = *(_OWORD *)(a4 + 48);
  v15[2] = *(_OWORD *)(a4 + 32);
  v15[3] = v12;
  v15[4] = *(_OWORD *)(a4 + 64);
  uint64_t v16 = *(void *)(a4 + 80);
  __int128 v13 = *(_OWORD *)(a4 + 16);
  v15[0] = *(_OWORD *)a4;
  v15[1] = v13;
  unint64_t v17 = v11;
  uint64_t result = sub_100316AF8(v10 + 2, &v17, (uint64_t)v15);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100316AE0(_Unwind_Exception *a1)
{
}

void *sub_100316AF8(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v6 = **(void **)a3;
  sub_10001E914((uint64_t)v35, *(void *)(a3 + 8));
  sub_10001E914((uint64_t)v33, *(void *)(a3 + 16));
  unint64_t v7 = *(unint64_t **)(a3 + 24);
  unint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  unint64_t v29 = v9;
  char v30 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  uint64_t v12 = *(void *)(a3 + 32);
  int v13 = **(_DWORD **)(a3 + 40);
  unsigned int v14 = **(_DWORD **)(a3 + 48);
  double v15 = **(double **)(a3 + 56);
  int v16 = **(_DWORD **)(a3 + 64);
  sub_100315F1C(v28, *(void *)(a3 + 72));
  sub_10001E914((uint64_t)v31, *(void *)(a3 + 80));
  sub_10030FACC(v5, v6, (uint64_t)v35, (uint64_t)v33, &v29, v12, v13, v14, v15, v16, (uint64_t)v28, (uint64_t)v31);
  unint64_t v17 = v32;
  if (v32 == v31)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = v31;
  }

  else
  {
    if (!v32) {
      goto LABEL_9;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_9:
  if (v28[32])
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)&v28[i]);
  }

  unint64_t v20 = v30;
  if (v30)
  {
    unint64_t v21 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v34;
  if (v34 == v33)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v33;
  }

  else
  {
    if (!v34) {
      goto LABEL_22;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  uint64_t v25 = v36;
  if (v36 == v35)
  {
    uint64_t v26 = 4LL;
    uint64_t v25 = v35;
    goto LABEL_26;
  }

  if (v36)
  {
    uint64_t v26 = 5LL;
LABEL_26:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }

  return a1;
}

void sub_100316D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25, uint64_t a26, uint64_t a27, char *a28)
{
  char v30 = a24;
  if (a24 == &a21)
  {
    uint64_t v31 = 4LL;
    char v30 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*(void *)v30 + 8 * v31))();
LABEL_6:
  if (a17)
  {
    for (uint64_t i = 16LL; i != -16; i -= 16LL)
      sub_100012390((uint64_t)(&a13 + i));
  }

  sub_100012390((uint64_t)&a19);
  uint64_t v33 = a28;
  if (a28 == &a25)
  {
    uint64_t v34 = 4LL;
    uint64_t v33 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_14;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*(void *)v33 + 8 * v34))();
LABEL_14:
  uint64_t v35 = *(void **)(v28 - 112);
  if (v35 == (void *)(v28 - 136))
  {
    uint64_t v36 = 4LL;
    uint64_t v35 = (void *)(v28 - 136);
  }

  else
  {
    if (!v35) {
      goto LABEL_19;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_19:
  _Unwind_Resume(a1);
}

uint64_t sub_100316E04(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100046FEC(a1, a2);
  if (result)
  {
    sub_100021814(a1, (void *)result, (uint64_t)v4);
    sub_100316224((uint64_t)v4, 0LL);
    return 1LL;
  }

  return result;
}

void *sub_100316E50(uint64_t a1, uint64_t *a2, void *a3, __int128 *a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }

    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }

    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v4) {
              break;
            }
          }

          uint64_t result = (void *)*result;
        }

        while (result);
      }
    }
  }

  sub_100317084(a1, *a2, a3, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100021B74(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }

    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    void *v20 = *v18;
    void *v18 = v20;
  }

  else
  {
    void *v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }

      else
      {
        v19 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }

  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100317060( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100317120((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100317084@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x50uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0LL;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  uint64_t result = sub_1002AEE40((char *)v10 + 24, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100317104(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100317120(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100317120(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 72))
    {
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100317174(uint64_t a1)
{
  return a1;
}

void sub_10031719C(id *a1)
{
}

uint64_t sub_1003171C4()
{
  return 0LL;
}

id sub_1003171CC(uint64_t a1, void *a2)
{
  *a2 = off_1007BD880;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100317200(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0LL;
}

void sub_100317210( uint64_t a1, unint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, _OWORD *a6, void *a7, unsigned __int8 *a8, __n128 a9)
{
}

uint64_t sub_100317218(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100317254()
{
  return &off_1007BD8E0;
}

void sub_100317260( uint64_t *a1, unint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, _OWORD *a6, void *a7, unsigned __int8 *a8, __n128 a9)
{
  uint64_t v9 = *a1;
  a9.n128_u64[0] = *a2;
  uint64_t v10 = *a3;
  LOBYTE(v23) = 0;
  char v27 = 0;
  if (*((_BYTE *)a4 + 48))
  {
    __int128 v23 = *a4;
    uint64_t v24 = *((void *)a4 + 2);
    *((void *)a4 + 1) = 0LL;
    *((void *)a4 + 2) = 0LL;
    *(void *)a4 = 0LL;
    __int128 v25 = *(__int128 *)((char *)a4 + 24);
    __int16 v26 = *((_WORD *)a4 + 20);
    char v27 = 1;
  }

  LOBYTE(v18) = 0;
  char v22 = 0;
  if (*((_BYTE *)a5 + 48))
  {
    __int128 v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    *((void *)a5 + 1) = 0LL;
    *((void *)a5 + 2) = 0LL;
    *(void *)a5 = 0LL;
    __int128 v20 = *(__int128 *)((char *)a5 + 24);
    __int16 v21 = *((_WORD *)a5 + 20);
    char v22 = 1;
  }

  __int128 v11 = a6[3];
  void v17[2] = a6[2];
  v17[3] = v11;
  __int128 v12 = a6[7];
  v17[6] = a6[6];
  v17[7] = v12;
  __int128 v13 = a6[5];
  v17[4] = a6[4];
  v17[5] = v13;
  __int128 v14 = a6[11];
  v17[10] = a6[10];
  v17[11] = v14;
  __int128 v15 = a6[9];
  v17[8] = a6[8];
  v17[9] = v15;
  __int128 v16 = a6[1];
  v17[0] = *a6;
  v17[1] = v16;
  (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *, void, void, __n128))(v9 + 16))( v9,  v10,  &v23,  &v18,  v17,  *a7,  *a8,  a9);
  if (v22 && SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (v27)
  {
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
  }

void sub_10031739C(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 - 112))
  {
  }

  sub_1003AC610(v1, v2 - 96);
  _Unwind_Resume(a1);
}

void sub_1003173CC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1003173D8()
{
  v0 = objc_autoreleasePoolPush();
  v8[0] = xmmword_10043070C;
  v8[1] = unk_10043071C;
  sub_10015EABC((uint64_t)&unk_1007FF718, (int *)v8, 4LL);
  xmmword_1007FF730 = xmmword_100423CB0;
  unk_1007FF740 = xmmword_100423CC0;
  qword_1007FF758 = 0LL;
  unk_1007FF760 = 0LL;
  qword_1007FF750 = 0x3FD999999999999ALL;
  unk_1007FF768 = xmmword_100423CD0;
  dword_1007FF778 = 5;
  qword_1007FF780 = 0x4000000000000000LL;
  dword_1007FF788 = 5;
  byte_1007FF790 = 0;
  *(void *)&algn_1007FF791[3] = 0x30000000ALL;
  xmmword_1007FF7A0 = xmmword_100423CE0;
  unk_1007FF7B0 = xmmword_100423CF0;
  xmmword_1007FF7C0 = xmmword_100423D00;
  qword_1007FF7D0 = 0x3FE3333333333333LL;
  dword_1007FF7D8 = 3;
  xmmword_1007FF7E0 = xmmword_100423D10;
  unk_1007FF7F0 = xmmword_100423CF0;
  xmmword_1007FF800 = xmmword_100423CE0;
  qword_1007FF810 = 0x3FE3333333333333LL;
  byte_1007FF818 = 0;
  xmmword_1007FF820 = xmmword_100423D20;
  unk_1007FF830 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v6 = _Q0;
  xmmword_1007FF840 = _Q0;
  qword_1007FF850 = 0xBFD3333333333333LL;
  xmmword_1007FF858 = xmmword_100423D40;
  qword_1007FF868 = 0x3E99999A40000000LL;
  xmmword_1007FF870 = xmmword_100423CC0;
  qword_1007FF888 = 0LL;
  unk_1007FF890 = 0LL;
  qword_1007FF880 = 0x3FD999999999999ALL;
  xmmword_1007FF898 = xmmword_100423CD0;
  dword_1007FF8A8 = 5;
  qword_1007FF8B0 = 0x4000000000000000LL;
  dword_1007FF8B8 = 4;
  qword_1007FF8C0 = 0x300000008LL;
  qword_1007FF8C8 = 0xC04E800000000000LL;
  unint64_t v7 = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)&unk_1007FF8D0, (double *)&v7, 1LL);
  xmmword_1007FF8E8 = xmmword_100423D50;
  qword_1007FF8F8 = 0x4024000000000000LL;
  dword_1007FF900 = 45;
  byte_1007FF908 = 0;
  byte_1007FF920 = 0;
  qword_1007FF928 = 0LL;
  byte_1007FF930 = 0;
  dword_1007FF934 = 1;
  byte_1007FF938 = 1;
  xmmword_1007FF940 = xmmword_100423D60;
  unk_1007FF950 = xmmword_100423D70;
  xmmword_1007FF960 = v6;
  qword_1007FF970 = 0xC059000000000000LL;
  xmmword_1007FF978 = xmmword_100423D80;
  qword_1007FF988 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007FF990 = xmmword_100423CC0;
  qword_1007FF9A0 = 0x3FD999999999999ALL;
  qword_1007FF9B0 = 0LL;
  qword_1007FF9A8 = 0LL;
  xmmword_1007FF9B8 = xmmword_100423CD0;
  dword_1007FF9C8 = 5;
  qword_1007FF9D0 = 0x4000000000000000LL;
  dword_1007FF9D8 = 10;
  qword_1007FF9E0 = 0x4034000000000000LL;
  dword_1007FF9E8 = 3;
  xmmword_1007FF9F0 = xmmword_100423D90;
  __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007FF718, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100317698(_Unwind_Exception *a1)
{
}

double sub_1003176B8(double *a1)
{
  double v1 = (*a1 + 1.57079633) * 6378137.0;
  double v2 = round(v1 * 0.0009765625) * 1024.0;
  double v3 = v1 - v2;
  cos(v2 / 6378137.0 + -1.57079633);
  return v3;
}

double sub_100317760(double *a1, double *a2)
{
  double v4 = round(((*a1 + 1.57079633) * 6378137.0 - *a2) * 0.0009765625) * 1024.0;
  double v5 = (*a2 + v4) / 6378137.0 + -1.57079633 + 1.57079633;
  double v6 = fmod(v5, 3.14159265);
  if (v5 >= 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = 3.14159265;
  }
  double v8 = v6 + v7 + -1.57079633;
  double v9 = cos(v4 / 6378137.0 + -1.57079633);
  fmod( (a2[1] + round(((a1[1] + 3.14159265) * (v9 * 6378137.0) - a2[1]) * 0.0009765625) * 1024.0) / (v9 * 6378137.0)
  + -3.14159265
  + 3.14159265,
    6.28318531);
  return v8;
}

uint64_t sub_100317890(double a1)
{
  int v1 = llround(log(a1 * 0.5) * 15.0 / 4.60517019);
  if (v1 >= 15) {
    int v1 = 15;
  }
  return v1 & ~(v1 >> 31);
}

double sub_1003178D4(unsigned int a1)
{
  double v1 = exp((double)a1 / 15.0 * 4.60517019);
  double result = v1 + v1;
  if (result < 2.0) {
    double result = 2.0;
  }
  if (result > 200.0) {
    return 200.0;
  }
  return result;
}

void sub_100317A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100317A8C(uint64_t a1, void *a2)
{
  id v16 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  double v4 = (id *)(a1 + 264);
  objc_storeStrong((id *)(a1 + 264), a2);
  if (*(void *)(a1 + 264))
  {
    id v5 = [*(id *)(a1 + 304) mutableCopy];
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*v4 horizontalDistanceNumber]);
    double v7 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = v6;

    uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 264) horizontalAngleNumber]);
    double v9 = *(void **)(a1 + 280);
    *(void *)(a1 + 280) = v8;

    uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 264) horizontalAngleAccuracyNumber]);
    __int128 v11 = *(void **)(a1 + 288);
    *(void *)(a1 + 288) = v10;

    uint64_t v12 = *(void *)(a1 + 272);
    if (v12) {
      [v5 setObject:v12 forKey:@"CMA_DISTANCE"];
    }
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*v4 revokeReason]));
    [v5 setObject:v13 forKey:@"REVOKE_REASON"];

    id v14 = [v5 copy];
    __int128 v15 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v14;
  }
}

void sub_100317BA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100317CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100317CF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  id v4 = [*(id *)(a1 + 304) mutableCopy];
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9, (void)v13));
        [v4 setObject:v10 forKey:v9];
      }

      id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }

  id v11 = [v4 copy];
  uint64_t v12 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v11;
}

void sub_100317E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100317E90(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(void *)a1 = off_1007BD900;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 320) = 0LL;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  id v5 = -[CMAPrecisionFindingManagerAdapter initWithFindingManager:]( objc_alloc(&OBJC_CLASS___CMAPrecisionFindingManagerAdapter),  "initWithFindingManager:",  a1);
  id v6 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = v5;

  if (!v4) {
    __assert_rtn("DeviceFinderAlgorithms", "DeviceFinderAlgorithms.mm", 83, "externalQueue");
  }
  objc_storeStrong((id *)(a1 + 240), a2);
  id v7 = [[CMAPrecisionFindingManager alloc] initWithDelegate:*(void *)(a1 + 256) dispatchQueue:*(void *)(a1 + 240)];
  uint64_t v8 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = v7;

  [*(id *)(a1 + 248) startDeviceFindingUpdates];
  uint64_t v9 = operator new(0x188uLL);
  sub_1002E1828();
  uint64_t v10 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v9;
  if (v10) {
    operator delete(v10);
  }
  id v11 = objc_alloc_init(&OBJC_CLASS___CMAPeerState);
  uint64_t v12 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v11;

  [*(id *)(a1 + 296) setMotionState:0];
  __int128 v13 = *(void **)(a1 + 272);
  *(void *)(a1 + 272) = 0LL;

  __int128 v14 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;

  __int128 v15 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = 0LL;

  __int128 v16 = objc_alloc_init(&OBJC_CLASS___NSDictionary);
  size_t v17 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v16;

  return a1;
}

void sub_10031800C(_Unwind_Exception *a1)
{
  id v5 = *(void **)(v2 + 320);
  *(void *)(v2 + 320) = 0LL;
  if (v5) {
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_100318090(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 336) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_BYTE *)(a2 + 364) = 0;
  *(_BYTE *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 372) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  id v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 232)) {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = *(void **)(a1 + 272);
  if (!v6 || ([v6 doubleValue], !*(void *)(a1 + 264)))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 56) = 0;
      *(_BYTE *)(a2 + 60) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 68) = 0;
      *(void *)(a2 + 32) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      *(void *)(a2 + 24) = 0x100800000LL;
      *(void *)(a2 + 72) = 0LL;
      *(void *)(a2 + 80) = 0LL;
      *(_WORD *)(a2 + 88) = 0;
      *(_BYTE *)(a2 + 160) = 0;
      *(void *)(a2 + 176) = 0LL;
      *(void *)(a2 + 184) = 0LL;
      *(void *)(a2 + 168) = 0LL;
      *(_OWORD *)(a2 + 121) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_BYTE *)(a2 + 192) = 1;
      *(_DWORD *)(a2 + 364) = 0;
      *(_BYTE *)(a2 + 368) = 1;
      *(_DWORD *)(a2 + 372) = sub_100318454(a1);
      *(_BYTE *)(a2 + 376) = 1;
      goto LABEL_12;
    }

void sub_1003182D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1003182F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 264) convergenceStatus];
  double v7 = *(void **)(a1 + 280);
  uint64_t v8 = 0LL;
  if (v7)
  {
    [v7 doubleValue];
    uint64_t v10 = v9;
    char v11 = 1;
  }

  else
  {
    char v11 = 0;
    uint64_t v10 = 0LL;
  }

  id v12 = *(void **)(a1 + 288);
  if (v12)
  {
    [v12 doubleValue];
    uint64_t v8 = v13;
    char v14 = 1;
  }

  else
  {
    char v14 = 0;
  }

  *(_DWORD *)a2 = v6 == (id)2;
  if (v6 == (id)2)
  {
    if (*(unsigned __int8 *)(a2 + 224) == BYTE4(a3))
    {
      if (*(_BYTE *)(a2 + 224)) {
        *(double *)(a2 + 216) = *(float *)&a3;
      }
    }

    else if (*(_BYTE *)(a2 + 224))
    {
      *(_BYTE *)(a2 + 224) = 0;
    }

    else
    {
      *(double *)(a2 + 216) = *(float *)&a3;
      *(_BYTE *)(a2 + 224) = 1;
    }

    *(void *)(a2 + 200) = v10;
    *(_BYTE *)(a2 + 208) = v11;
    *(void *)(a2 + 320) = v8;
    *(_BYTE *)(a2 + 328) = v14;
    *(_DWORD *)(a2 + 364) = 6;
    *(_BYTE *)(a2 + 368) = 1;
  }

  if ([*(id *)(a1 + 264) revokeReason])
  {
    if ([*(id *)(a1 + 264) revokeReason] == (id)2) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = 1;
    }
  }

  else
  {
    unsigned int v15 = sub_100318454(a1);
  }

  *(_DWORD *)(a2 + 372) = v15;
  *(_BYTE *)(a2 + 376) = 1;
  id result = [*(id *)(a1 + 264) verticalState];
  if (result)
  {
    id result = [*(id *)(a1 + 264) verticalState];
    int v17 = 4 * (result == (id)2);
    if (result == (id)1) {
      int v17 = 1;
    }
    *(_DWORD *)(a2 + 232) = v17;
  }

  return result;
}

void *sub_100318454(uint64_t a1)
{
  id result = *(void **)(a1 + 296);
  if (result)
  {
    unsigned int v3 = [result motionState];
    if (v3 < 8 && ((0x8Bu >> v3) & 1) != 0)
    {
      return (void *)dword_100430A18[v3];
    }

    else
    {
      id v4 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1003AC690(v5, (int)[*(id *)(a1 + 296) motionState], v4);
      }

      return 0LL;
    }
  }

  return result;
}

void sub_100318514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031852C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 181)) {
    BOOL v3 = *(unsigned __int8 *)(a2 + 180) > 2u;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    sub_100318640(a1, a2);
  }

  else
  {
    id v4 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a2 + 181)) {
        sub_100006080();
      }
      int v6 = *(unsigned __int8 *)(a2 + 180);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#findalgs-devicefinder,mmsValStatus %d does not pass check, rejecting range result event",  (uint8_t *)v7,  8u);
    }
  }

void sub_100318628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100318640(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  sub_1001A3CF0(0x2B730480u, 1, 0LL, 0LL, 0LL, 0LL);
  sub_1003187E4(a1, a2, *(unsigned __int8 *)(a1 + 312));
  sub_1001A3CF0(0x2B730480u, 2, 0LL, 0LL, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 232);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)a2;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  __int128 v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  __int128 v13 = *(_OWORD *)(a2 + 144);
  __int128 v12 = *(_OWORD *)(a2 + 160);
  __int128 v14 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 224) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 176) = v14;
  if (!v5) {
    *(_BYTE *)(a1 + 232) = 1;
  }
  unsigned int v15 = (void *)objc_opt_new(&OBJC_CLASS___CMARange);
  [v15 setTimestamp:*(double *)(a2 + 8)];
  [v15 setRange:*(float *)(a2 + 16)];
  [v15 setRangeError:*(double *)(a2 + 40)];
  if (*(_BYTE *)(a2 + 72)) {
    [v15 setRssi:*(double *)(a2 + 64)];
  }
  if ((*(_DWORD *)(a2 + 176) & 0xFF0000) != 0) {
    [v15 setCycleIndex:(unsigned __int16)*(_DWORD *)(a2 + 176)];
  }
  if (*(void *)(a1 + 248))
  {
    sub_1001A3CF0(0x2B730484u, 1, 0LL, 0LL, 0LL, 0LL);
    [*(id *)(a1 + 248) updateRanging:v15];
    sub_1001A3CF0(0x2B730484u, 2, 0LL, 0LL, 0LL, 0LL);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_1003187CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003187E4(uint64_t a1, uint64_t a2, int a3)
{
  double v6 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 360) && v6 <= *(double *)(a1 + 352))
  {
    __int128 v10 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 360)) {
        sub_100006080();
      }
      uint64_t v11 = *(void *)(a2 + 8);
      double v12 = *(float *)(a2 + 16);
      uint64_t v13 = *(void *)(a1 + 352);
      *(_DWORD *)std::string buf = 134218496;
      *(double *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v11;
      *(_WORD *)&_BYTE buf[22] = 2048;
      uint64_t v16 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#findalgs-devicefinder,Not passing range measurement to range filter, range: %0.2f m, timestamp: %f s, range filter time: %f s",  buf,  0x20u);
    }
  }

  else
  {
    double v7 = *(float *)(a2 + 16);
    *(void *)std::string buf = *(void *)(a2 + 8);
    *(double *)&buf[8] = v7;
    *(void *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v16) = 0;
    __int128 v8 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 v14 = 134218240;
      *(double *)&v14[4] = v7;
      *(_WORD *)&v14[12] = 2048;
      *(double *)&v14[14] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#findalgs-devicefinder,Passing range measurement to range filter, range: %0.2f m, timestamp: %f s",  v14,  0x16u);
    }

    sub_1002E2218(*(void *)(a1 + 320), (double *)buf, a3, 1, (uint64_t)v14);
    if (*(_BYTE *)(a1 + 360)) {
      *(_BYTE *)(a1 + 360) = 0;
    }
    __int128 v9 = *(_OWORD *)&v14[16];
    *(_OWORD *)(a1 + 328) = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 344) = v9;
    *(_BYTE *)(a1 + 360) = 1;
  }

void sub_1003189B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003189CC(uint64_t a1, double *a2)
{
  id v4 = objc_autoreleasePoolPush();
  int v5 = (void *)objc_opt_new(&OBJC_CLASS___CMADeviceMotion);
  [v5 setTimestamp:*a2];
  objc_msgSend(v5, "setQuaternion:", a2[8], a2[9], a2[10], a2[7]);
  objc_msgSend(v5, "setRotationRate:", a2[4], a2[5], a2[6]);
  objc_msgSend(v5, "setAcceleration:", a2[1], a2[2], a2[3]);
  double v6 = *(void **)(a1 + 248);
  if (v6) {
    [v6 updateDeviceMotion:v5];
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100318A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100318A78(uint64_t a1, _BYTE *a2)
{
  id v4 = objc_autoreleasePoolPush();
  int v5 = (void *)objc_opt_new(&OBJC_CLASS___CMAWatchOrientation);
  double v6 = v5;
  if (*a2) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  [v5 setCrown:v7];
  if (a2[1]) {
    uint64_t v8 = 2LL;
  }
  else {
    uint64_t v8 = 1LL;
  }
  [v6 setWrist:v8];
  __int128 v9 = *(void **)(a1 + 248);
  if (v9) {
    [v9 updateWatchOrientation:v6];
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100318B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100318B1C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a2 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 312) = v5 != 0;
    if (v5 == 2)
    {
      uint64_t v7 = *(void **)(a1 + 296);
      uint64_t v6 = 3LL;
    }

    else
    {
      uint64_t v7 = *(void **)(a1 + 296);
      if (v5 == 1) {
        uint64_t v6 = 7LL;
      }
      else {
        uint64_t v6 = v5 == 0;
      }
    }

    [v7 setMotionState:v6];
  }

  else
  {
    [*(id *)(a1 + 296) setMotionState:0];
    *(_BYTE *)(a1 + 312) = 1;
  }

  if (*(_BYTE *)(a2 + 128))
  {
    if (sub_10030DAB8(a1, &v9, *(double *)(a2 + 120)))
    {
      [*(id *)(a1 + 296) setTimestamp:v9];
      uint64_t v8 = *(void **)(a1 + 248);
      if (v8) {
        [v8 updatePeerState:*(void *)(a1 + 296)];
      }
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003AC6D4();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
    {
      sub_1003AC70C();
    }
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100318C64(uint64_t a1, double *a2)
{
  id v4 = objc_autoreleasePoolPush();
  int v5 = (void *)objc_opt_new(&OBJC_CLASS___CMAAltimeterData);
  [v5 setMachAbsoluteTimestamp:*a2];
  [v5 setRelativeAltitude:a2[1]];
  [v5 setPressure:a2[2]];
  uint64_t v6 = *(void **)(a1 + 248);
  if (v6) {
    [v6 updateAltimeterData:v5];
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100318CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100318CF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0LL;

  BOOL v3 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = 0LL;
}

uint64_t sub_100318D34()
{
  return 1LL;
}

uint64_t sub_100318D3C()
{
  return 1LL;
}

uint64_t sub_100318D44()
{
  return 1LL;
}

uint64_t sub_100318D4C()
{
  return 1LL;
}

uint64_t sub_100318D54()
{
  return 1LL;
}

uint64_t sub_100318D5C()
{
  return 1LL;
}

uint64_t sub_100318D64()
{
  return 1LL;
}

uint64_t sub_100318D6C()
{
  return 1LL;
}

uint64_t sub_100318D74(uint64_t a1)
{
  return *(void *)(a1 + 304);
}

void sub_100318D80(uint64_t a1)
{
  double v1 = (void *)sub_100318D94(a1);
  operator delete(v1);
}

uint64_t sub_100318D94(uint64_t a1)
{
  *(void *)a1 = off_1007BD900;
  uint64_t v2 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0LL;
  if (v2) {
    operator delete(v2);
  }

  return a1;
}

void sub_100318E18()
{
  v0 = objc_autoreleasePoolPush();
  qword_1007FFA08 = 0LL;
  unk_1007FFA10 = 0LL;
  qword_1007FFA00 = 0LL;
  double v1 = operator new(0x40uLL);
  qword_1007FFA08 = (uint64_t)(v1 + 4);
  unk_1007FFA10 = v1 + 4;
  *double v1 = xmmword_100430990;
  v1[1] = unk_1004309A0;
  v1[2] = xmmword_1004309B0;
  v1[3] = unk_1004309C0;
  qword_1007FFA00 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA00, (void *)&_mh_execute_header);
  qword_1007FFA20 = 0LL;
  unk_1007FFA28 = 0LL;
  qword_1007FFA18 = 0LL;
  uint64_t v2 = operator new(0x10uLL);
  qword_1007FFA20 = (uint64_t)(v2 + 1);
  unk_1007FFA28 = v2 + 1;
  *uint64_t v2 = xmmword_1004309D0;
  qword_1007FFA18 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA18, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

double *sub_100318EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0x100000003LL;
  uint64_t v13 = &off_1007BC4C0;
  __int128 v14 = xmmword_10042DB70;
  uint64_t v16 = &v17;
  sub_1002CB44C(a1, a2, (uint64_t)&v13);
  uint64_t v30 = 0x100000003LL;
  uint64_t v28 = &off_1007BC4C0;
  __int128 v29 = xmmword_10042DB70;
  uint64_t v31 = &v32;
  uint64_t v25 = 0x100000134LL;
  __int128 v23 = &off_1007BC598;
  __int128 v24 = xmmword_10042DB90;
  __int16 v26 = &v27;
  uint64_t v20 = 0x100000003LL;
  __int128 v18 = &off_1007BC4C0;
  __int128 v19 = xmmword_10042DB70;
  __int16 v21 = &v22;
  sub_1002CB6A8((uint64_t)&v13, (uint64_t)&v28, (uint64_t)&v23, (uint64_t)&v18, "2");
  double v7 = v6;
  *(double *)sub_1002CB32C(a3, 0) = v6;
  if (v7 == 0.0)
  {
    *(void *)sub_1002CB40C(a4, 0, 0) = 0LL;
    *(void *)sub_1002CB40C(a4, 0, 1) = 0LL;
    id result = (double *)sub_1002CB40C(a4, 0, 2);
    *id result = 0.0;
  }

  else
  {
    double v8 = sub_1002405E4((uint64_t)&v13, 0);
    double v9 = 1.0 / v7;
    *(double *)sub_1002CB40C(a4, 0, 0) = 1.0 / v7 * v8;
    double v10 = sub_1002405E4((uint64_t)&v13, 1u);
    *(double *)sub_1002CB40C(a4, 0, 1) = v9 * v10;
    double v11 = sub_1002405E4((uint64_t)&v13, 2u);
    id result = (double *)sub_1002CB40C(a4, 0, 2);
    *id result = v9 * v11;
  }

  return result;
}

void sub_1003190BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0x100000003LL;
  uint64_t v25 = &off_1007BC4C0;
  __int128 v26 = xmmword_10042DB70;
  uint64_t v28 = &v29;
  sub_1002CB44C(a1, a2, (uint64_t)&v25);
  uint64_t v22 = 0x100000003LL;
  uint64_t v20 = &off_1007BC4C0;
  __int128 v21 = xmmword_10042DB70;
  __int128 v23 = &v24;
  sub_1002CB548(a3, (uint64_t)&v25, (uint64_t)&v20);
  uint64_t v42 = 0x100000003LL;
  __int128 v40 = &off_1007BC4C0;
  __int128 v41 = xmmword_10042DB70;
  uint64_t v43 = &v44;
  uint64_t v37 = 0x100000134LL;
  uint64_t v35 = &off_1007BC598;
  __int128 v36 = xmmword_10042DB90;
  unint64_t v38 = v39;
  uint64_t v32 = 0x100000003LL;
  uint64_t v30 = &off_1007BC4C0;
  __int128 v31 = xmmword_10042DB70;
  uint64_t v33 = &v34;
  sub_1002CB6A8((uint64_t)&v20, (uint64_t)&v40, (uint64_t)&v35, (uint64_t)&v30, "2");
  double v9 = v8;
  double v10 = sub_1002405E4((uint64_t)&v20, 0);
  double v11 = sub_1002405E4((uint64_t)&v20, 1u);
  double v12 = sub_1002405E4((uint64_t)&v20, 2u);
  if (v9 != 0.0)
  {
    double v13 = v12;
    __int128 v14 = (double *)sub_1002CB32C(a4, 0);
    *__int128 v14 = atan2(v13, v11);
    uint64_t v15 = (double *)sub_1002CB32C(a4, 1u);
    *uint64_t v15 = asin(v10 / v9);
    double v16 = v13 * v13 + v11 * v11;
    double v17 = 1.0 / (v9 * v9);
    *(void *)sub_1002CB40C(a5, 0, 0) = 0LL;
    double v18 = sqrt(v16);
    *(double *)sub_1002CB40C(a5, 1, 0) = v17 * v18;
    __int128 v19 = (double *)sub_1002CB40C(a5, 0, 1);
    if (v16 == 0.0)
    {
      double *v19 = 0.0;
      *(void *)sub_1002CB40C(a5, 0, 2) = 0LL;
      *(void *)sub_1002CB40C(a5, 1, 1) = 0LL;
      *(void *)sub_1002CB40C(a5, 1, 2) = 0LL;
    }

    else
    {
      double *v19 = -v13 / v16;
      *(double *)sub_1002CB40C(a5, 0, 2) = v11 / v16;
      *(double *)sub_1002CB40C(a5, 1, 1) = v17 * (-(v10 * v11) / v18);
      *(double *)sub_1002CB40C(a5, 1, 2) = v17 * (-(v10 * v13) / v18);
    }
  }

  uint64_t v37 = 0x300000002LL;
  uint64_t v35 = &off_1007BD1E8;
  __int128 v36 = xmmword_10042E870;
  unint64_t v38 = v39;
  sub_1002CB548(a5, a3, (uint64_t)&v35);
  sub_1002CBDC8(a5, (uint64_t)&v35);
}

void sub_1003193C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0x300000001LL;
  double v13 = &off_1007BD1A0;
  __int128 v14 = xmmword_10042E860;
  double v16 = &v17;
  sub_100318EE4(a3, a4, a5, (uint64_t)&v13);
  uint64_t v10 = 0x300000001LL;
  double v8 = &off_1007BD1A0;
  __int128 v9 = xmmword_10042E860;
  double v11 = &v12;
  sub_1002CB548((uint64_t)&v13, a2, (uint64_t)&v8);
  sub_1002CBDC8(a6, (uint64_t)&v8);
}

void sub_10031947C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = 0x300000002LL;
  __int128 v14 = &off_1007BD1E8;
  __int128 v15 = xmmword_10042E870;
  uint64_t v17 = &v18;
  sub_1003190BC(a3, a4, a5, a6, (uint64_t)&v14);
  uint64_t v11 = 0x300000002LL;
  __int128 v9 = &off_1007BD1E8;
  __int128 v10 = xmmword_10042E870;
  uint64_t v12 = &v13;
  sub_1002CB548((uint64_t)&v14, a2, (uint64_t)&v9);
  sub_1002CBDC8(a7, (uint64_t)&v9);
}

double *sub_10031953C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1002405E4(a1, 0);
  double v7 = sub_1002405E4(a1, 1u);
  double v8 = sub_1002405E4(a1, 2u);
  __double2 v9 = __sincos_stret(v8);
  __double2 v10 = __sincos_stret(v7);
  double v11 = v6 * v9.__cosval;
  *(double *)sub_1002CB32C(a2, 0) = v10.__sinval * (v6 * v9.__cosval);
  *(double *)sub_1002CB32C(a2, 1u) = v6 * v9.__sinval;
  double v12 = v10.__cosval * (v6 * v9.__cosval);
  *(double *)sub_1002CB32C(a2, 2u) = v12;
  *(double *)sub_1002CB40C(a3, 0, 0) = v10.__sinval * v9.__cosval;
  *(double *)sub_1002CB40C(a3, 1, 0) = v9.__sinval;
  *(double *)sub_1002CB40C(a3, 2, 0) = v10.__cosval * v9.__cosval;
  *(double *)sub_1002CB40C(a3, 0, 1) = v12;
  *(void *)sub_1002CB40C(a3, 1, 1) = 0LL;
  *(double *)sub_1002CB40C(a3, 2, 1) = v10.__sinval * -(v6 * v9.__cosval);
  double v13 = -(v6 * v9.__sinval);
  *(double *)sub_1002CB40C(a3, 0, 2) = v10.__sinval * v13;
  *(double *)sub_1002CB40C(a3, 1, 2) = v11;
  id result = (double *)sub_1002CB40C(a3, 2, 2);
  *id result = v10.__cosval * v13;
  return result;
}

void sub_1003196DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_1002405E4(a1, 0);
  double v5 = sub_1002405E4(a1, 1u);
  double v6 = sub_1002405E4(a1, 2u);
  *(void *)(a2 + 24) = 0x100000003LL;
  *(void *)a2 = &off_1007BC4C0;
  *(_OWORD *)(a2 + 8) = xmmword_10042DB70;
  *(void *)(a2 + 32) = a2 + 40;
  *(double *)sub_1002CB32C(a2, 0) = sqrt(v5 * v5 + v4 * v4 + v6 * v6);
  if (*(double *)sub_1002CB32C(a2, 0) <= 0.0)
  {
    *(void *)sub_1002CB32C(a2, 1u) = 0LL;
    *(void *)sub_1002CB32C(a2, 2u) = 0LL;
  }

  else
  {
    double v7 = (double *)sub_1002CB32C(a2, 1u);
    *double v7 = atan2(v4, v6);
    double v8 = *(double *)sub_1002CB32C(a2, 0);
    __double2 v9 = (double *)sub_1002CB32C(a2, 2u);
    *__double2 v9 = asin(v5 / v8);
  }

void sub_10031980C(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double sub_10031981C@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(void *)(a1 + 24) = 0x100000003LL;
  *(void *)a1 = &off_1007BC4C0;
  *(_OWORD *)(a1 + 8) = xmmword_10042DB70;
  *(void *)(a1 + 32) = a1 + 40;
  double v8 = (double *)sub_1002CB32C(a1, 0);
  *double v8 = sin(a3) * a2;
  __double2 v9 = (double *)sub_1002CB32C(a1, 1u);
  double v10 = cos(a3) * a2;
  *__double2 v9 = v10 * cos(a4);
  double v11 = (double *)sub_1002CB32C(a1, 2u);
  double result = v10 * sin(a4);
  *double v11 = result;
  return result;
}

void sub_1003198EC(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double sub_1003198FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003LL;
  *(void *)a2 = &off_1007BC508;
  *(_OWORD *)(a2 + 8) = xmmword_10042DE90;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1002CAEDC((_DWORD *)a2, 3, 3);
  sub_1002CAF28(a2, 0.0);
  double v4 = sub_1002405E4(a1, 0);
  double v5 = sub_1002405E4(a1, 1u);
  double v6 = sub_1002405E4(a1, 2u);
  double v7 = sub_1002405E4(a1, 3u);
  double v14 = v5 * v5;
  double v15 = v4 * v4;
  *(double *)sub_1002CB40C(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_1002CB40C(a2, 1, 0) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  double v8 = v4 * v6;
  double v9 = v5 * v7;
  *(double *)sub_1002CB40C(a2, 2, 0) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_1002CB40C(a2, 0, 1) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_1002CB40C(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  double v10 = v4 * v7;
  double v11 = v5 * v6;
  *(double *)sub_1002CB40C(a2, 2, 1) = v11 + v10 + v11 + v10;
  *(double *)sub_1002CB40C(a2, 0, 2) = v8 + v9 + v8 + v9;
  *(double *)sub_1002CB40C(a2, 1, 2) = v11 - v10 + v11 - v10;
  double v12 = (double *)sub_1002CB40C(a2, 2, 2);
  double result = -v15 - v14 + v6 * v6 + v7 * v7;
  *double v12 = result;
  return result;
}

void sub_100319B1C(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double sub_100319B40(double a1)
{
  double v1 = 1.0;
  if (a1 <= 1.0) {
    return v1;
  }
  double v1 = 5.0;
  if (a1 >= 10.0) {
    return v1;
  }
  else {
    return (a1 + -1.0) * 0.444444444 + 1.0;
  }
}

void sub_100319B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = 0x100000003LL;
  __int128 v26 = &off_1007BC4C0;
  __int128 v27 = xmmword_10042DB70;
  uint64_t v29 = &v30;
  double v6 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB32C((uint64_t)&v26, 0) = v6;
  double v7 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB32C((uint64_t)&v26, 1u) = v7;
  double v8 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB32C((uint64_t)&v26, 2u) = v8;
  double v9 = sub_1002405E4(a1, 3u);
  __double2 v10 = __sincos_stret(v9);
  uint64_t v23 = 0x300000003LL;
  __int128 v21 = &off_1007BC508;
  __int128 v22 = xmmword_10042DE90;
  uint64_t v24 = &v25;
  *(double *)sub_1002CB40C((uint64_t)&v21, 0, 0) = v10.__cosval;
  *(void *)sub_1002CB40C((uint64_t)&v21, 1, 0) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v21, 2, 0) = -v10.__sinval;
  *(void *)sub_1002CB40C((uint64_t)&v21, 0, 1) = 0LL;
  *(void *)sub_1002CB40C((uint64_t)&v21, 1, 1) = 0x3FF0000000000000LL;
  *(void *)sub_1002CB40C((uint64_t)&v21, 2, 1) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v21, 0, 2) = v10.__sinval;
  *(void *)sub_1002CB40C((uint64_t)&v21, 1, 2) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v21, 2, 2) = v10.__cosval;
  uint64_t v13 = 0x100000003LL;
  double v11 = &off_1007BC4C0;
  __int128 v12 = xmmword_10042DB70;
  double v14 = &v15;
  sub_1002CB548((uint64_t)&v21, a2, (uint64_t)&v11);
  uint64_t v18 = 0x100000003LL;
  uint64_t v16 = &off_1007BC4C0;
  __int128 v17 = xmmword_10042DB70;
  __int128 v19 = &v20;
  sub_1002CC25C((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v16);
  sub_1002CBDC8(a3, (uint64_t)&v16);
}

double sub_100319DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = 0x100000003LL;
  uint64_t v34 = &off_1007BC4C0;
  __int128 v35 = xmmword_10042DB70;
  uint64_t v37 = &v38;
  double v8 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB32C((uint64_t)&v34, 0) = v8;
  double v9 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB32C((uint64_t)&v34, 1u) = v9;
  double v10 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB32C((uint64_t)&v34, 2u) = v10;
  double v11 = sub_1002405E4(a1, 3u);
  __double2 v12 = __sincos_stret(v11);
  uint64_t v31 = 0x300000003LL;
  uint64_t v29 = &off_1007BC508;
  __int128 v30 = xmmword_10042DE90;
  uint64_t v32 = &v33;
  *(double *)sub_1002CB40C((uint64_t)&v29, 0, 0) = v12.__cosval;
  *(void *)sub_1002CB40C((uint64_t)&v29, 1, 0) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v29, 2, 0) = -v12.__sinval;
  *(void *)sub_1002CB40C((uint64_t)&v29, 0, 1) = 0LL;
  *(void *)sub_1002CB40C((uint64_t)&v29, 1, 1) = 0x3FF0000000000000LL;
  *(void *)sub_1002CB40C((uint64_t)&v29, 2, 1) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v29, 0, 2) = v12.__sinval;
  *(void *)sub_1002CB40C((uint64_t)&v29, 1, 2) = 0LL;
  *(double *)sub_1002CB40C((uint64_t)&v29, 2, 2) = v12.__cosval;
  uint64_t v26 = 0x100000003LL;
  uint64_t v24 = &off_1007BC4C0;
  __int128 v25 = xmmword_10042DB70;
  __int128 v27 = &v28;
  sub_1002CB548((uint64_t)&v29, a2, (uint64_t)&v24);
  uint64_t v21 = 0x100000003LL;
  __int128 v19 = &off_1007BC4C0;
  __int128 v20 = xmmword_10042DB70;
  __int128 v22 = v23;
  sub_1002CC25C((uint64_t)&v24, (uint64_t)&v34, (uint64_t)&v19);
  sub_1002CBDC8(a3, (uint64_t)&v19);
  uint64_t v21 = 0x400000003LL;
  __int128 v19 = &off_1007BC8A8;
  __int128 v20 = xmmword_10042DE80;
  __int128 v22 = v23;
  sub_1002CAEDC(&v19, 3, 4);
  sub_1002CAF28((uint64_t)&v19, 0.0);
  sub_1002CBDC8(a4, (uint64_t)&v19);
  *(void *)sub_1002CB40C(a4, 0, 0) = 0x3FF0000000000000LL;
  *(void *)sub_1002CB40C(a4, 1, 1) = 0x3FF0000000000000LL;
  *(void *)sub_1002CB40C(a4, 2, 2) = 0x3FF0000000000000LL;
  double v13 = sub_1002405E4(a2, 0);
  double v14 = sub_1002405E4(a2, 2u);
  *(double *)sub_1002CB40C(a4, 0, 3) = v12.__cosval * v14 + -v12.__sinval * v13;
  double v15 = sub_1002405E4(a2, 0);
  double v16 = sub_1002405E4(a2, 2u);
  __int128 v17 = (double *)sub_1002CB40C(a4, 2, 3);
  double result = v16 * -v12.__sinval - v12.__cosval * v15;
  *__int128 v17 = result;
  return result;
}

double *sub_10031A130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10 = sub_1002405E4(a1, 3u);
  uint64_t v32 = 0x100000003LL;
  __int128 v30 = &off_1007BC4C0;
  __int128 v31 = xmmword_10042DB70;
  uint64_t v33 = &v34;
  sub_100319B80(a1, a3, (uint64_t)&v30);
  uint64_t v27 = 0x100000003LL;
  __int128 v25 = &off_1007BC4C0;
  __int128 v26 = xmmword_10042DB70;
  uint64_t v28 = &v29;
  sub_1002CB44C((uint64_t)&v30, a2, (uint64_t)&v25);
  uint64_t v47 = 0x100000003LL;
  char v45 = &off_1007BC4C0;
  __int128 v46 = xmmword_10042DB70;
  char v48 = &v49;
  uint64_t v42 = 0x100000134LL;
  __int128 v40 = &off_1007BC598;
  __int128 v41 = xmmword_10042DB90;
  uint64_t v43 = &v44;
  uint64_t v37 = 0x100000003LL;
  __int128 v35 = &off_1007BC4C0;
  __int128 v36 = xmmword_10042DB70;
  uint64_t v38 = &v39;
  sub_1002CB6A8((uint64_t)&v25, (uint64_t)&v45, (uint64_t)&v40, (uint64_t)&v35, "2");
  double v12 = v11;
  *(double *)sub_1002CB32C(a4, 0) = v11;
  if (v12 == 0.0)
  {
    *(void *)sub_1002CB40C(a5, 0, 0) = 0LL;
    *(void *)sub_1002CB40C(a5, 0, 1) = 0LL;
    *(void *)sub_1002CB40C(a5, 0, 2) = 0LL;
    double result = (double *)sub_1002CB40C(a5, 0, 3);
    *double result = 0.0;
  }

  else
  {
    __double2 v13 = __sincos_stret(v10);
    double v14 = 1.0 / v12;
    double v15 = sub_1002405E4((uint64_t)&v25, 0);
    *(double *)sub_1002CB40C(a5, 0, 0) = v14 * v15;
    double v16 = sub_1002405E4((uint64_t)&v25, 1u);
    *(double *)sub_1002CB40C(a5, 0, 1) = v14 * v16;
    double v17 = sub_1002405E4((uint64_t)&v25, 2u);
    *(double *)sub_1002CB40C(a5, 0, 2) = v14 * v17;
    double v18 = sub_1002405E4(a3, 0);
    double v19 = v13.__cosval * sub_1002405E4(a3, 2u) - v13.__sinval * v18;
    double v20 = sub_1002405E4(a3, 0);
    double v21 = -(v13.__sinval * sub_1002405E4(a3, 2u)) - v13.__cosval * v20;
    double v22 = sub_1002405E4((uint64_t)&v25, 0);
    double v23 = sub_1002405E4((uint64_t)&v25, 2u);
    double result = (double *)sub_1002CB40C(a5, 0, 3);
    *double result = v14 * (v21 * v23 + v19 * v22);
  }

  return result;
}

void sub_10031A418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1002405E4(a1, 0);
  double v7 = sub_1002405E4(a1, 1u);
  double v8 = sub_1002405E4(a1, 2u);
  double v9 = sqrt(v7 * v7 + v6 * v6 + v8 * v8);
  *(double *)sub_1002CB32C(a2, 0) = v9;
  if (v9 <= 0.0)
  {
    *(void *)sub_1002CB32C(a2, 1u) = 0LL;
    *(void *)sub_1002CB32C(a2, 2u) = 0LL;
    uint64_t v20 = 0x300000003LL;
    double v18 = &off_1007BC508;
    __int128 v19 = xmmword_10042DE90;
    double v21 = &v22;
    sub_1002CAEDC(&v18, 3, 3);
    sub_1002CAF28((uint64_t)&v18, 0.0);
    sub_1002CBDC8(a3, (uint64_t)&v18);
  }

  else
  {
    double v10 = atan2(v6, v8);
    *(double *)sub_1002CB32C(a2, 1u) = v10;
    double v11 = asin(v7 / v9);
    *(double *)sub_1002CB32C(a2, 2u) = v11;
    double v12 = sub_1002405E4(a1, 0) / v9;
    *(double *)sub_1002CB40C(a3, 0, 0) = v12;
    double v13 = sub_1002405E4(a1, 1u) / v9;
    *(double *)sub_1002CB40C(a3, 0, 1) = v13;
    double v14 = sub_1002405E4(a1, 2u) / v9;
    *(double *)sub_1002CB40C(a3, 0, 2) = v14;
    double v15 = v8 * v8 + v6 * v6;
    double v16 = 1.0 / (v9 * v9);
    *(void *)sub_1002CB40C(a3, 1, 1) = 0LL;
    double v17 = sqrt(v15);
    *(double *)sub_1002CB40C(a3, 2, 1) = v17 * v16;
    if (v15 <= 0.0)
    {
      *(void *)sub_1002CB40C(a3, 1, 0) = 0LL;
      *(void *)sub_1002CB40C(a3, 1, 2) = 0LL;
      *(void *)sub_1002CB40C(a3, 2, 0) = 0LL;
      *(void *)sub_1002CB40C(a3, 2, 2) = 0LL;
    }

    else
    {
      *(double *)sub_1002CB40C(a3, 1, 0) = v8 / v15;
      *(double *)sub_1002CB40C(a3, 1, 2) = -v6 / v15;
      *(double *)sub_1002CB40C(a3, 2, 0) = -(v7 * v6) / v17 * v16;
      *(double *)sub_1002CB40C(a3, 2, 2) = -(v7 * v8) / v17 * v16;
    }
  }

uint64_t sub_10031A6F4()
{
  qword_1007FFA30 = 0LL;
  qword_1007FFA38 = 0LL;
  qword_1007FFA40 = 0LL;
  v0 = operator new(0x40uLL);
  qword_1007FFA38 = (uint64_t)(v0 + 4);
  qword_1007FFA40 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_100430A40;
  v0[1] = unk_100430A50;
  v0[2] = xmmword_100430A60;
  v0[3] = unk_100430A70;
  qword_1007FFA30 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA30, (void *)&_mh_execute_header);
  qword_1007FFA50 = 0LL;
  unk_1007FFA58 = 0LL;
  qword_1007FFA48 = 0LL;
  double v1 = operator new(0x10uLL);
  qword_1007FFA50 = (uint64_t)(v1 + 1);
  unk_1007FFA58 = v1 + 1;
  *double v1 = xmmword_100430A80;
  qword_1007FFA48 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA48, (void *)&_mh_execute_header);
}

uint64_t sub_10031A7B0(uint64_t a1, int a2, int a3)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0LL;
  double v6 = (char **)(a1 + 64);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  double v7 = (char *)operator new(0x278uLL);
  sub_1002D0DE0((uint64_t)v7, a2, a3);
  double v8 = *v6;
  *double v6 = v7;
  if (v8) {
    sub_10030AFB0((uint64_t)v6, v8);
  }
  double v9 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Moving findee SA initialized",  (uint8_t *)v11,  2u);
  }

  return a1;
}

void sub_10031A8C4(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 120))
  {
    double v6 = *(void **)(v1 + 88);
    if (v6)
    {
      *(void *)(v1 + 96) = v6;
      operator delete(v6);
    }
  }

  double v7 = *v2;
  *uint64_t v2 = 0LL;
  if (v7) {
    sub_10030AFB0((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void sub_10031A930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 408);
  if (!v4
    || *(double *)a2 > *(double *)(*(void *)(*(void *)(a1 + 376)
                                             + (((unint64_t)(v4 + *(void *)(a1 + 400) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8LL))
                                 + (((v4 + *(void *)(a1 + 400) - 1) & 0x1F) << 7)))
  {
    int v5 = *(_DWORD *)(a1 + 416);
    *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 80);
    uint64_t v6 = *(void *)(a2 + 88);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 96);
    *(void *)(a1 + 424) = v6;
    double v7 = *(double *)a2;
    if (!*(_BYTE *)(a1 + 24) || *(double *)(a1 + 16) < v7)
    {
      *(double *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 24) = 1;
    }

    int v8 = *(_DWORD *)(a2 + 80);
    if (v5 == v8) {
      goto LABEL_19;
    }
    if (v8 == 2)
    {
      double v9 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v12 = *(double *)a2;
      *(_DWORD *)std::string buf = 134217984;
      *(double *)&uint8_t buf[4] = v12;
      double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Normal at %f s";
    }

    else if (v8 == 1)
    {
      double v9 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v13 = *(double *)a2;
      *(_DWORD *)std::string buf = 134217984;
      *(double *)&uint8_t buf[4] = v13;
      double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Limited at %f s";
    }

    else
    {
      if (v8) {
        goto LABEL_19;
      }
      double v9 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v10 = *(double *)a2;
      *(_DWORD *)std::string buf = 134217984;
      *(double *)&uint8_t buf[4] = v10;
      double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Not Available at %f s";
    }

    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_19:
    sub_10031AE24(a1, a2);
    int v19 = *(_DWORD *)(a2 + 80);
    if (v5 == 2 && v19 != 2)
    {
      uint64_t v20 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,VIO Tracking not normal anymore - resetting",  buf,  2u);
      }

      if (*(_BYTE *)(a1 + 312))
      {
        double v21 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,VIO Tracking not normal before the cached measurement can be interpolated - passing t he cached measurement to the range filter without VIO",  buf,  2u);
        }
      }

      sub_10031B16C(a1);
      int v19 = *(_DWORD *)(a2 + 80);
    }

    if (v19 == 2)
    {
      if (*(_BYTE *)(a2 + 84))
      {
        uint64_t v22 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          double v23 = *(double *)a2;
          if (*(_BYTE *)(a2 + 85)) {
            uint64_t v24 = "YES";
          }
          else {
            uint64_t v24 = "NO";
          }
          *(_DWORD *)std::string buf = 134218498;
          *(double *)&uint8_t buf[4] = v23;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "YES";
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&_BYTE buf[24] = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting",  buf,  0x20u);
        }

        sub_10031B16C(a1);
      }

      else
      {
        if (*(_BYTE *)(a2 + 85))
        {
          __int128 v25 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            double v26 = *(double *)a2;
            *(_DWORD *)std::string buf = 134217984;
            *(double *)&uint8_t buf[4] = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,VIO reported MINOR relocalization event at %f s",  buf,  0xCu);
          }
        }

        uint64_t v27 = 0LL;
        float32x4_t v28 = *(float32x4_t *)(a2 + 16);
        float32x4_t v29 = *(float32x4_t *)(a2 + 32);
        float32x4_t v30 = *(float32x4_t *)(a2 + 48);
        float32x4_t v31 = *(float32x4_t *)(a2 + 64);
        __int128 v38 = xmmword_10042DB30;
        *(_OWORD *)std::string __p = xmmword_10042DB40;
        __int128 v40 = xmmword_10042DB50;
        __int128 v41 = xmmword_10042DB60;
        do
        {
          *(float32x4_t *)&buf[v27 * 8] = vmlaq_laneq_f32( vmlaq_laneq_f32( vmlaq_lane_f32( vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&__p[v27 - 2])),  v29,  (float32x2_t)__p[v27 - 2],  1),  v30,  *(float32x4_t *)&__p[v27 - 2],  2),  v31,  *(float32x4_t *)&__p[v27 - 2],  3);
          v27 += 2LL;
        }

        while (v27 != 8);
        __int128 v32 = *(_OWORD *)buf;
        __int128 v33 = *(_OWORD *)&buf[16];
        __int128 v34 = v43;
        __int128 v35 = v44;
        int v36 = *(_DWORD *)(a2 + 80);
        __int16 v37 = *(_WORD *)(a2 + 84);
        *(void *)std::string buf = *(void *)a2;
        *(_OWORD *)&buf[16] = v32;
        __int128 v43 = v33;
        __int128 v44 = v34;
        __int128 v45 = v35;
        int v46 = v36;
        __int16 v47 = v37;
        char v48 = 0;
        char v49 = 0;
        char v50 = 0;
        char v51 = 0;
        char v52 = 0;
        char v53 = 0;
        sub_1002C6AFC((void *)(a1 + 368), (__int128 *)buf);
        sub_1002D0DE4( *(void *)(a1 + 64),  (uint64_t)&v38,  *(double *)buf,  *(float *)&v45,  *((float *)&v45 + 1),  *((float *)&v45 + 2));
        sub_1002C6BA0(a1 + 72, (uint64_t *)&v38);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }

    sub_10031B214(a1, v14, v15, v16, v17, v18);
    sub_10031B8C0((uint64_t *)a1);
    sub_10031BFAC((void *)a1);
    return;
  }

  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_1003AC744();
  }
}

void sub_10031AE00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031AE24(uint64_t result, uint64_t a2)
{
  double v3 = *(double *)a2;
  if (!*(_BYTE *)(result + 40) || v3 - *(double *)(result + 32) >= 0.2)
  {
    *(double *)(result + 32) = v3;
    *(_BYTE *)(result + 40) = 1;
    sub_1001DF764((uint64_t)&v26);
    sub_100046B94(&v26, (uint64_t)"tracking state: ", 16LL);
    uint64_t v4 = *(int *)(a2 + 80);
    sub_100046B94(&v26, (uint64_t)", light intensity ", 18LL);
    if (*(_BYTE *)(a2 + 96))
    {
      uint64_t v5 = v26;
      *(_DWORD *)((char *)&v26 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)&v26 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
      *(std::locale::__imp **)((char *)&v27.__loc_.__locale_ + *(void *)(v5 - 24)) = (std::locale::__imp *)2;
      std::ostream::operator<<(&v26, *(double *)(a2 + 88));
    }

    else
    {
      sub_100046B94(&v26, (uint64_t)"-", 1LL);
    }

    uint64_t v6 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)a2;
      std::stringbuf::str(&__p, &v27);
      int v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
         ? &__p
         : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      double v9 = *(float *)(a2 + 16);
      double v10 = *(float *)(a2 + 20);
      double v11 = *(float *)(a2 + 24);
      double v12 = *(float *)(a2 + 28);
      double v13 = *(float *)(a2 + 32);
      double v14 = *(float *)(a2 + 36);
      double v15 = *(float *)(a2 + 40);
      double v16 = *(float *)(a2 + 44);
      double v17 = *(float *)(a2 + 48);
      double v18 = *(float *)(a2 + 52);
      double v19 = *(float *)(a2 + 56);
      double v20 = *(float *)(a2 + 60);
      double v21 = *(float *)(a2 + 64);
      double v22 = *(float *)(a2 + 68);
      double v23 = *(float *)(a2 + 72);
      double v24 = *(float *)(a2 + 76);
      *(_DWORD *)std::string buf = 134222338;
      double v30 = v7;
      __int16 v31 = 2080;
      __int128 v32 = v8;
      __int16 v33 = 2048;
      double v34 = v9;
      __int16 v35 = 2048;
      double v36 = v10;
      __int16 v37 = 2048;
      double v38 = v11;
      __int16 v39 = 2048;
      double v40 = v12;
      __int16 v41 = 2048;
      double v42 = v13;
      __int16 v43 = 2048;
      double v44 = v14;
      __int16 v45 = 2048;
      double v46 = v15;
      __int16 v47 = 2048;
      double v48 = v16;
      __int16 v49 = 2048;
      double v50 = v17;
      __int16 v51 = 2048;
      double v52 = v18;
      __int16 v53 = 2048;
      double v54 = v19;
      __int16 v55 = 2048;
      double v56 = v20;
      __int16 v57 = 2048;
      double v58 = v21;
      __int16 v59 = 2048;
      double v60 = v22;
      __int16 v61 = 2048;
      double v62 = v23;
      __int16 v63 = 2048;
      double v64 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Pose timestamp: %f, %s, pose [%3.2f, %3.2f, %3.2f, %3.2f, ...\n \t%3.2f, %3.2f, %3.2f, %3.2f, ...\n \t%3.2f, %3.2f, %3.2f, %3.2f, ... \n \t%3.2f, %3.2f, %3.2f, %3.2f]",  buf,  0xB6u);
    }

    std::streambuf::~streambuf(&v27);
    return std::ios::~ios(&v28);
  }

  return result;
}

void sub_10031B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_10031B16C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 312)) {
    *(_BYTE *)(a1 + 312) = 0;
  }
  uint64_t v2 = *(void ***)(a1 + 376);
  uint64_t v3 = *(void *)(a1 + 384);
  *(void *)(a1 + 408) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 384);
      uint64_t v2 = (void **)(*(void *)(a1 + 376) + 8LL);
      *(void *)(a1 + 376) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 16LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v6 = 32LL;
  }

  *(void *)(a1 + 400) = v6;
LABEL_10:
  if (*(_BYTE *)(a1 + 120))
  {
    double v7 = *(void **)(a1 + 88);
    if (v7)
    {
      *(void *)(a1 + 96) = v7;
      operator delete(v7);
    }

    *(_BYTE *)(a1 + 120) = 0;
  }

  sub_1002D2AA0(*(void *)(a1 + 64));
  *(_BYTE *)(a1 + 488) = 0;
}

void sub_10031B214(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  if (!*(_BYTE *)(a1 + 312)) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (!v7) {
    return;
  }
  unint64_t v8 = *(void *)(a1 + 400);
  unint64_t v9 = v8 >> 5;
  uint64_t v11 = *(void *)(a1 + 376);
  uint64_t v10 = *(void *)(a1 + 384);
  double v12 = (char *)(v11 + 8 * (v8 >> 5));
  if (v10 == v11)
  {
    uint64_t v13 = 0LL;
    unint64_t v16 = 0LL;
    double v15 = (char *)(v11 + 8 * ((v8 + v7) >> 5));
  }

  else
  {
    uint64_t v13 = *(void *)v12 + ((*(void *)(a1 + 400) & 0x1FLL) << 7);
    char v14 = v8 + v7;
    double v15 = (char *)(v11 + 8 * ((v8 + v7) >> 5));
    unint64_t v16 = *(void *)v15 + ((unint64_t)(v14 & 0x1F) << 7);
  }

  double v17 = *(double *)(a1 + 136);
  float v18 = *(float *)(a1 + 144);
  *(void *)std::string buf = v11 + 8 * (v8 >> 5);
  *(void *)&buf[8] = v13;
  if (v16 != v13)
  {
    uint64_t v19 = ((uint64_t)(v16 - *(void *)v15) >> 7) + 4 * (v15 - v12);
    uint64_t v20 = v13 - *(void *)v12;
    unint64_t v21 = v19 - (v20 >> 7);
    if (v19 != v20 >> 7)
    {
      do
      {
        unint64_t v22 = v21 >> 1;
        double v23 = sub_1002CBE78((uint64_t)buf, v21 >> 1);
        if (v17 >= *v24)
        {
          __int128 v25 = v24 + 16;
          if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
          {
            uint64_t v26 = (double *)v23[1];
            ++v23;
            __int128 v25 = v26;
          }

          *(void *)std::string buf = v23;
          *(void *)&buf[8] = v25;
          unint64_t v22 = v21 + ~v22;
        }

        unint64_t v21 = v22;
      }

      while (v22);
      double v12 = *(char **)buf;
      uint64_t v13 = *(void *)&buf[8];
      unint64_t v8 = *(void *)(a1 + 400);
      uint64_t v11 = *(void *)(a1 + 376);
      uint64_t v10 = *(void *)(a1 + 384);
      unint64_t v9 = v8 >> 5;
    }
  }

  if (v10 == v11)
  {
    if (v13)
    {
      uint64_t v28 = 0LL;
      uint64_t v27 = *(void *)(a1 + 408);
      goto LABEL_19;
    }

void sub_10031B8C0(uint64_t *a1)
{
  if (a1[45] && a1[60])
  {
    float v65 = (int64x2_t *)(a1 + 40);
    float v64 = a1 + 55;
    unint64_t v2 = a1[44];
    uint64_t v3 = a1[41];
    uint64_t v4 = a1[42];
    uint64_t v5 = (void *)(v3 + 8 * (v2 / 0x1A));
    if (v4 == v3) {
      unint64_t v6 = 0LL;
    }
    else {
      unint64_t v6 = *v5 + 152 * (v2 % 0x1A);
    }
    uint64_t v63 = (uint64_t)(a1 + 9);
    while (1)
    {
      if (v4 == v3)
      {
        unint64_t v8 = 0LL;
      }

      else
      {
        unint64_t v7 = a1[45] + a1[44];
        unint64_t v8 = *(void *)(v3 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
      }

      if (v6 == v8) {
        return;
      }
      __int128 v9 = *(_OWORD *)v6;
      int v10 = *(_DWORD *)(v6 + 24);
      __int128 v11 = *(_OWORD *)(v6 + 28);
      __int128 v12 = *(_OWORD *)(v6 + 44);
      __int128 v13 = *(_OWORD *)(v6 + 60);
      __int128 v14 = *(_OWORD *)(v6 + 92);
      __int128 v87 = *(_OWORD *)(v6 + 76);
      v88[0] = v14;
      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v6 + 104);
      __int128 v85 = v12;
      __int128 v86 = v13;
      __int128 v15 = *(_OWORD *)(v6 + 120);
      __int128 v83 = *(_OWORD *)(v6 + 136);
      __int128 v84 = v11;
      __int128 v82 = v15;
      uint64_t v16 = a1[56];
      unint64_t v17 = a1[59];
      float v18 = (uint64_t *)(v16 + 8 * (v17 >> 7));
      uint64_t v19 = *v18;
      uint64_t v20 = *v18 + 32 * (v17 & 0x7F);
      double v21 = *(double *)v20;
      uint64_t v24 = a1[60];
      double v25 = *(double *)(*(void *)(v16 + (((v17 + v24 - 1) >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32
                                                                                          * ((v17 + v24 - 1) & 0x7F));
      if (*(double *)&v9 - v25 <= 0.21)
      {
        if (a1[57] != v16)
        {
          uint64_t v28 = *(void *)(v16 + (((v24 + v17) >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * ((v24 + v17) & 0x7F);
          if (v20 != v28)
          {
            __int128 v68 = v9;
            while (1)
            {
              double v29 = *(double *)v20;
              uint64_t v30 = (os_log_s *)qword_1008000A0;
              if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 134218240;
                *(double *)&uint8_t buf[4] = v29;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v68;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "#sa_algo_moving_findee,Peer VIO position at %f s NOT matching with cached range measurement at %f s",  buf,  0x16u);
                uint64_t v19 = *v18;
              }

              v20 += 32LL;
              if (v20 - v19 == 4096)
              {
                uint64_t v31 = v18[1];
                ++v18;
                uint64_t v19 = v31;
                uint64_t v20 = v31;
              }

              *(void *)&__int128 v9 = v68;
              if (v20 == v28) {
                goto LABEL_29;
              }
            }

            if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 134218240;
              *(double *)&uint8_t buf[4] = v29;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v68;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Peer VIO position at %f s matching with cached range measurement at %f s",  buf,  0x16u);
            }

            unint64_t v33 = a1[59];
            uint64_t v34 = a1[56];
            uint64_t v35 = a1[57];
            uint64_t v36 = (char *)(v34 + 8 * (v33 >> 7));
            if (v35 == v34)
            {
              uint64_t v37 = 0LL;
              uint64_t v40 = 0LL;
              unint64_t v39 = (char *)(v34 + 8 * ((a1[60] + v33) >> 7));
            }

            else
            {
              uint64_t v37 = *(void *)v36 + 32 * (a1[59] & 0x7F);
              unint64_t v38 = a1[60] + v33;
              unint64_t v39 = (char *)(v34 + 8 * (v38 >> 7));
              uint64_t v40 = *(void *)v39 + 32 * (v38 & 0x7F);
            }

            if (v40 == v37
              || (unint64_t v41 = ((v40 - *(void *)v39) >> 5) + 16 * (v39 - v36) - ((v37 - *(void *)v36) >> 5)) == 0)
            {
              float32x4_t v42 = (char *)(v34 + 8 * (v33 >> 7));
            }

            else
            {
              float32x4_t v42 = (char *)(v34 + 8 * (v33 >> 7));
              do
              {
                unint64_t v43 = v41 >> 1;
                if (v41 == 1)
                {
                  float32x4_t v44 = (double *)v37;
                  int8x16_t v45 = v42;
                }

                else
                {
                  uint64_t v46 = v43 + ((v37 - *(void *)v42) >> 5);
                  if (v46 < 1)
                  {
                    unint64_t v47 = 127 - v46;
                    LOBYTE(v46) = ~(127 - v46);
                    int8x16_t v45 = &v42[-8 * (v47 >> 7)];
                  }

                  else
                  {
                    int8x16_t v45 = &v42[8 * ((unint64_t)v46 >> 7)];
                  }

                  float32x4_t v44 = (double *)(*(void *)v45 + 32 * (v46 & 0x7F));
                }

                if (*v44 < *(double *)v20)
                {
                  uint64_t v37 = (uint64_t)(v44 + 4);
                  if ((double *)((char *)v44 - *(void *)v45 + 32) == (double *)4096)
                  {
                    uint64_t v48 = *((void *)v45 + 1);
                    v45 += 8;
                    uint64_t v37 = v48;
                  }

                  unint64_t v43 = v41 + ~v43;
                  float32x4_t v42 = v45;
                }

                unint64_t v41 = v43;
              }

              while (v43);
            }

            if (v35 == v34) {
              uint64_t v49 = 0LL;
            }
            else {
              uint64_t v49 = *(void *)v36 + 32 * (a1[59] & 0x7F);
            }
            sub_10031E028(v64, v36, v49, v42, v37);
            uint64_t v50 = a1[60];
            int8x16_t v51 = (os_log_s *)qword_1008000A0;
            if (!v50)
            {
              if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
                sub_1003AC7A8(v51, v56, v57, v58, v59, v60, v61, v62);
              }
              return;
            }

            if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v53 = a1[56];
              *(_DWORD *)std::string buf = 134218240;
              *(void *)&uint8_t buf[4] = v54;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v55;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "#sa_algo_moving_findee,Peer VIO history from %f s to %f s after pruning",  buf,  0x16u);
            }

            *(_OWORD *)std::string buf = v68;
            *(void *)&buf[16] = 0x3FB999999999999ALL;
            int v73 = v10;
            char v74 = 0;
            char v75 = 0;
            __int128 v76 = *(_OWORD *)((char *)v88 + 4);
            uint64_t v77 = *(void *)((char *)&v88[1] + 4);
            __int128 v78 = v82;
            __int128 v79 = v83;
            uint64_t v52 = *(void *)(v20 + 24);
            __int128 v80 = *(_OWORD *)(v20 + 8);
            uint64_t v81 = v52;
            sub_1002D1F4C(a1[8], (uint64_t)buf, v69);
            sub_1002C6BA0(v63, v69);
            if (__p)
            {
              float32x2_t v71 = __p;
              operator delete(__p);
            }

            goto LABEL_14;
          }
        }

void sub_10031BF88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031BFAC(void *a1)
{
  uint64_t v1 = a1[51];
  if (v1)
  {
    unint64_t v3 = a1[50];
    uint64_t v4 = a1[47];
    unint64_t v5 = v3 >> 5;
    if (v6 > 5.0)
    {
      unint64_t v7 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v33 = 134217984;
        *(double *)&v33[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Pose history spans %f s - pruning down past poses from history",  v33,  0xCu);
        unint64_t v3 = a1[50];
        uint64_t v1 = a1[51];
        uint64_t v4 = a1[47];
        unint64_t v5 = v3 >> 5;
      }

      unint64_t v8 = v3 + v1;
      unint64_t v9 = v3 + v1 - 1;
      uint64_t v10 = *(void *)(v4 + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8LL));
      unint64_t v11 = (v9 & 0x1F) << 7;
      __int128 v12 = (char *)(v4 + 8 * v5);
      uint64_t v13 = a1[48];
      if (v13 == v4)
      {
        uint64_t v14 = 0LL;
        unint64_t v16 = 0LL;
        __int128 v15 = (char *)(v4 + 8 * (v8 >> 5));
      }

      else
      {
        uint64_t v14 = *(void *)v12 + ((v3 & 0x1F) << 7);
        __int128 v15 = (char *)(v4 + 8 * (v8 >> 5));
        unint64_t v16 = *(void *)v15 + ((v8 & 0x1F) << 7);
      }

      double v17 = *(double *)(v10 + v11);
      *(void *)unint64_t v33 = v4 + 8 * v5;
      *(void *)&v33[8] = v14;
      if (v16 != v14)
      {
        uint64_t v18 = ((uint64_t)(v16 - *(void *)v15) >> 7) + 4 * (v15 - v12);
        uint64_t v19 = v14 - *(void *)v12;
        unint64_t v20 = v18 - (v19 >> 7);
        if (v18 != v19 >> 7)
        {
          double v21 = v17 + -2.0;
          do
          {
            unint64_t v22 = v20 >> 1;
            unint64_t v23 = sub_1002CBE78((uint64_t)v33, v20 >> 1);
            if (v21 >= *v24)
            {
              double v25 = v24 + 16;
              if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
              {
                uint64_t v26 = (double *)v23[1];
                ++v23;
                double v25 = v26;
              }

              *(void *)unint64_t v33 = v23;
              *(void *)&v33[8] = v25;
              unint64_t v22 = v20 + ~v22;
            }

            unint64_t v20 = v22;
          }

          while (v22);
          __int128 v12 = *(char **)v33;
          uint64_t v14 = *(void *)&v33[8];
          unint64_t v3 = a1[50];
          uint64_t v4 = a1[47];
          uint64_t v13 = a1[48];
          unint64_t v5 = v3 >> 5;
        }
      }

      unint64_t v27 = (char *)(v4 + 8 * v5);
      if (v13 == v4) {
        uint64_t v28 = 0LL;
      }
      else {
        uint64_t v28 = *(void *)v27 + ((v3 & 0x1F) << 7);
      }
      sub_1002CA580(a1 + 46, v27, v28, v12, v14);
      double v29 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = a1[47];
        uint64_t v31 = *(void *)(*(void *)(v30 + ((a1[50] >> 2) & 0x3FFFFFFFFFFFFFF8LL)) + ((a1[50] & 0x1FLL) << 7));
        *(_DWORD *)unint64_t v33 = 134218240;
        *(void *)&v33[4] = v31;
        *(_WORD *)&v33[12] = 2048;
        *(void *)&v33[14] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Pose history now between %f s and %f s",  v33,  0x16u);
      }
    }
  }

void sub_10031C280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 480);
  if (v4
    && *(double *)a2 <= *(double *)(*(void *)(*(void *)(a1 + 448)
                                              + (((unint64_t)(v4 + *(void *)(a1 + 472) - 1) >> 4) & 0xFFFFFFFFFFFFFF8LL))
                                  + 32 * ((v4 + *(void *)(a1 + 472) - 1) & 0x7F)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AC7D8();
    }
  }

  else
  {
    unint64_t v5 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = *(double *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      int v11 = 134218752;
      double v12 = v6;
      __int16 v13 = 2048;
      *(void *)std::stringbuf::string_type __p = v7;
      *(_WORD *)&__p[8] = 2048;
      uint64_t v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,Received peer pose at %f s, peer position:[%0.2f,%0.2f,%0.2f] m",  (uint8_t *)&v11,  0x2Au);
    }

    double v10 = *(double *)a2;
    if (!*(_BYTE *)(a1 + 24) || *(double *)(a1 + 16) < v10)
    {
      *(double *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 24) = 1;
      double v10 = *(double *)a2;
    }

    sub_1002D1E74( *(void *)(a1 + 64),  (uint64_t)&v11,  v10,  *(double *)(a2 + 8),  *(double *)(a2 + 16),  *(double *)(a2 + 24));
    sub_1002C6BA0(a1 + 72, (uint64_t *)&v11);
    if (*(void *)&__p[2])
    {
      uint64_t v15 = *(void *)&__p[2];
      operator delete(*(void **)&__p[2]);
    }

    sub_10031C454((void *)(a1 + 440), a2);
    sub_10031B8C0((uint64_t *)a1);
  }

void sub_10031C430( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10031C454(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10031E25C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *uint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10031C4E0(uint64_t a1, __int128 *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 36);
  uint64_t v5 = qword_1008000A0;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v8 = *((void *)a2 + 1);
    double v9 = *((float *)a2 + 4);
    double v10 = *((float *)a2 + 6);
    double v11 = *((float *)a2 + 7);
    int v31 = 134218752;
    uint64_t v32 = v8;
    __int16 v33 = 2048;
    double v34 = v9;
    __int16 v35 = 2048;
    double v36 = v10;
    __int16 v37 = 2048;
    double v38 = v11;
    double v12 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m, az: %3.2f rad, el: %3.2f rad";
    __int16 v13 = (os_log_s *)v5;
    uint32_t v14 = 42;
  }

  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v15 = *((void *)a2 + 1);
    double v16 = *((float *)a2 + 4);
    int v31 = 134218240;
    uint64_t v32 = v15;
    __int16 v33 = 2048;
    double v34 = v16;
    double v12 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m";
    __int16 v13 = (os_log_s *)v5;
    uint32_t v14 = 22;
  }

  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v31, v14);
LABEL_7:
  if (!*(_BYTE *)(a1 + 8))
  {
    *(void *)a1 = *(void *)a2;
    *(_BYTE *)(a1 + 8) = 1;
  }

  if (*(_DWORD *)(a1 + 416) != 2)
  {
    uint64_t v18 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31) = 0;
      uint64_t v19 = "#sa_algo_moving_findee,VIO Tracking is not normal";
      goto LABEL_18;
    }

void sub_10031C7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (!*(_BYTE *)(a1 + 120))
  {
    *(void *)a2 = 0LL;
LABEL_5:
    sub_10031CE7C(a1, a2);
    return;
  }

  uint64_t v4 = *(void *)(a1 + 77);
  v60[0] = *(void *)(a1 + 72);
  *(void *)((char *)v60 + 5) = v4;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v5 = (uint64_t)sub_1002D5CBC( &__p,  *(const void **)(a1 + 88),  *(void *)(a1 + 96),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6));
  uint64_t v64 = *(void *)(a1 + 112);
  switch(LODWORD(v60[0]))
  {
    case 0:
    case 1:
    case 6:
      *(_DWORD *)a2 = 0;
      int v6 = 1;
      goto LABEL_7;
    case 2:
    case 3:
      *(_DWORD *)a2 = 0;
      int v6 = 256;
LABEL_7:
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_8;
    case 4:
      *(void *)a2 = 0LL;
      goto LABEL_8;
    case 5:
      uint64_t v8 = *(void *)(a1 + 480);
      if (!v8)
      {
        __int128 v25 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_1003AC83C(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        goto LABEL_47;
      }

      uint64_t v9 = *(void *)(a1 + 408);
      if (!v9)
      {
        __int16 v33 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_1003AC86C(v33, v34, v35, v36, v37, v38, v39, v40);
        }
LABEL_47:
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 366) = 0u;
        sub_10031CE7C(a1, a2);
        goto LABEL_48;
      }

      unint64_t v10 = v9 + *(void *)(a1 + 400) - 1;
      uint64_t v11 = *(void *)(a1 + 376);
      unint64_t v12 = v10 >> 5;
      unint64_t v13 = v10 & 0x1F;
      double v14 = *(double *)(*(void *)(v11 + 8 * (v10 >> 5)) + (v13 << 7));
      double v15 = *(double *)(*(void *)(*(void *)(a1 + 448)
      double v16 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134218496;
        *(double *)&uint8_t buf[4] = v14 - v15;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v14;
        *(_WORD *)&_BYTE buf[22] = 2048;
        double v67 = v15;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#sa_algo_moving_findee,#stalePeerVIO Peer VIO is stale by %f s, last self pose time %f s, last peer pose time %f s",  buf,  0x20u);
        uint64_t v11 = *(void *)(a1 + 376);
        unint64_t v56 = *(void *)(a1 + 408) + *(void *)(a1 + 400) - 1LL;
        unint64_t v12 = v56 >> 5;
        unint64_t v13 = v56 & 0x1F;
      }

      uint64_t v17 = *((void *)__p + 2);
      *(_OWORD *)std::string buf = *(_OWORD *)__p;
      *(void *)&buf[16] = v17;
      sub_1002C9108((float64x2_t *)buf, (float32x4_t *)(*(void *)(v11 + 8 * v12) + (v13 << 7)), (uint64_t)v57);
      if (v14 - v15 >= 2.0)
      {
        double v41 = sub_10031D958(v14 - v15, v18, (uint64_t)v57);
        BOOL v42 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
        if (v41 < 22.5)
        {
          if (v42) {
            sub_1003AC9E0();
          }
          goto LABEL_25;
        }

        if (v42) {
          sub_1003ACA48();
        }
        sub_10031D9D8(a1, 1);
        *(_OWORD *)(a2 + 366) = 0u;
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        sub_10031CE7C(a1, a2);
LABEL_48:
        char v7 = 0;
        goto LABEL_10;
      }

void sub_10031CE48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031CE7C(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(result + 24)) {
    return result;
  }
  uint64_t v3 = result;
  double v4 = *(double *)(result + 16);
  if (*(_BYTE *)(result + 56))
  {
  }

  *(double *)(result + 48) = v4;
  *(_BYTE *)(result + 56) = 1;
  sub_1001DF764((uint64_t)&v89);
  sub_1001DF764((uint64_t)&v86);
  sub_1001DF764((uint64_t)&v83);
  sub_1001DF764((uint64_t)&v80);
  sub_1001DF764((uint64_t)&v77);
  sub_1001DF764((uint64_t)&v74);
  sub_1001DF764((uint64_t)&v71);
  sub_1001DF764((uint64_t)&v68);
  uint64_t v5 = v86;
  *(_DWORD *)((char *)&v86 + *(void *)(v86 - 24) + 8) = *(_DWORD *)((_BYTE *)&v86 + *(void *)(v86 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v87.__loc_.__locale_ + *(void *)(v5 - 24)) = (std::locale::__imp *)2;
  uint64_t v6 = v83;
  *(_DWORD *)((char *)&v83 + *(void *)(v83 - 24) + 8) = *(_DWORD *)((_BYTE *)&v83 + *(void *)(v83 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v84.__loc_.__locale_ + *(void *)(v6 - 24)) = (std::locale::__imp *)1;
  uint64_t v7 = v80;
  *(_DWORD *)((char *)&v80 + *(void *)(v80 - 24) + 8) = *(_DWORD *)((_BYTE *)&v80 + *(void *)(v80 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v81.__loc_.__locale_ + *(void *)(v7 - 24)) = (std::locale::__imp *)2;
  uint64_t v8 = v74;
  *(_DWORD *)((char *)&v74 + *(void *)(v74 - 24) + 8) = *(_DWORD *)((_BYTE *)&v74 + *(void *)(v74 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v75.__loc_.__locale_ + *(void *)(v8 - 24)) = (std::locale::__imp *)2;
  uint64_t v9 = v71;
  *(_DWORD *)((char *)&v71 + *(void *)(v71 - 24) + 8) = *(_DWORD *)((_BYTE *)&v71 + *(void *)(v71 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v72.__loc_.__locale_ + *(void *)(v9 - 24)) = (std::locale::__imp *)2;
  uint64_t v10 = v68;
  *(_DWORD *)((char *)&v68 + *(void *)(v68 - 24) + 8) = *(_DWORD *)((_BYTE *)&v68 + *(void *)(v68 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v69.__loc_.__locale_ + *(void *)(v10 - 24)) = (std::locale::__imp *)2;
  if (*(_BYTE *)(a2 + 192))
  {
    std::ostream::operator<<(&v89, *(void *)(a2 + 8));
    if (!*(_BYTE *)(a2 + 192)) {
      goto LABEL_104;
    }
    uint64_t v11 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 24));
    unint64_t v12 = " m";
    uint64_t v13 = 2LL;
  }

  else
  {
    unint64_t v12 = "-";
    uint64_t v13 = 1LL;
    sub_100046B94(&v89, (uint64_t)"-", 1LL);
    uint64_t v11 = &v86;
  }

  sub_100046B94(v11, (uint64_t)v12, v13);
  if (*(_BYTE *)(a2 + 208))
  {
    double v14 = (uint64_t *)std::ostream::operator<<(&v83, *(double *)(a2 + 200));
    double v15 = " deg";
    uint64_t v16 = 4LL;
  }

  else
  {
    double v15 = "-";
    double v14 = &v83;
    uint64_t v16 = 1LL;
  }

  sub_100046B94(v14, (uint64_t)v15, v16);
  if (*(_BYTE *)(a2 + 224))
  {
    uint64_t v17 = (uint64_t *)std::ostream::operator<<(&v80, *(double *)(a2 + 216));
    uint64_t v18 = " m";
    uint64_t v19 = 2LL;
  }

  else
  {
    uint64_t v18 = "-";
    uint64_t v17 = &v80;
    uint64_t v19 = 1LL;
  }

  sub_100046B94(v17, (uint64_t)v18, v19);
  if (*(_BYTE *)(a2 + 248))
  {
    uint64_t v20 = (uint64_t *)std::ostream::operator<<(&v74, *(double *)(a2 + 240));
    uint64_t v21 = " m";
    uint64_t v22 = 2LL;
  }

  else
  {
    uint64_t v21 = "-";
    uint64_t v20 = &v74;
    uint64_t v22 = 1LL;
  }

  sub_100046B94(v20, (uint64_t)v21, v22);
  uint64_t v23 = *(int *)(a2 + 232);
  if (*(_BYTE *)(a2 + 272))
  {
    sub_100046B94(&v71, (uint64_t)"[", 1LL);
    if (!*(_BYTE *)(a2 + 272)) {
      goto LABEL_104;
    }
    int v24 = (void *)std::ostream::operator<<(*(float *)(a2 + 256));
    sub_100046B94(v24, (uint64_t)", ", 2LL);
    if (!*(_BYTE *)(a2 + 272)) {
      goto LABEL_104;
    }
    __int128 v25 = (void *)std::ostream::operator<<(*(float *)(a2 + 260));
    sub_100046B94(v25, (uint64_t)", ", 2LL);
    if (!*(_BYTE *)(a2 + 272)) {
      goto LABEL_104;
    }
    uint64_t v26 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 264));
    uint64_t v27 = "]";
  }

  else
  {
    uint64_t v27 = "-";
    uint64_t v26 = &v71;
  }

  sub_100046B94(v26, (uint64_t)v27, 1LL);
  if (!*(_BYTE *)(a2 + 304))
  {
    uint64_t v31 = "-";
    uint64_t v30 = &v68;
    uint64_t v32 = 1LL;
    goto LABEL_31;
  }

  sub_100046B94(&v68, (uint64_t)"[", 1LL);
  if (!*(_BYTE *)(a2 + 304)
    || (uint64_t v28 = (void *)std::ostream::operator<<(*(float *)(a2 + 288)),
        sub_100046B94(v28, (uint64_t)", ", 2LL),
        !*(_BYTE *)(a2 + 304))
    || (uint64_t v29 = (void *)std::ostream::operator<<(*(float *)(a2 + 292)),
        sub_100046B94(v29, (uint64_t)", ", 2LL),
        !*(_BYTE *)(a2 + 304)))
  {
LABEL_104:
    sub_100006080();
  }

  uint64_t v30 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 296));
  uint64_t v31 = "] m";
  uint64_t v32 = 3LL;
LABEL_31:
  sub_100046B94(v30, (uint64_t)v31, v32);
  uint64_t v33 = qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str(&v67, &v90);
    if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v67;
    }
    else {
      uint64_t v34 = (std::stringbuf::string_type *)v67.__r_.__value_.__r.__words[0];
    }
    if (!*(_BYTE *)(v3 + 24)) {
      sub_100006080();
    }
    uint64_t v35 = *(void *)(v3 + 16);
    if (*(_DWORD *)a2 == 1) {
      uint64_t v36 = "YES";
    }
    else {
      uint64_t v36 = "NO";
    }
    if (*(_BYTE *)(a2 + 4)) {
      uint64_t v37 = "YES";
    }
    else {
      uint64_t v37 = "NO";
    }
    if (*(_BYTE *)(a2 + 5)) {
      uint64_t v38 = "YES";
    }
    else {
      uint64_t v38 = "NO";
    }
    if (*(_BYTE *)(a2 + 6)) {
      uint64_t v39 = "YES";
    }
    else {
      uint64_t v39 = "NO";
    }
    if (*(_BYTE *)(a2 + 7)) {
      uint64_t v40 = "YES";
    }
    else {
      uint64_t v40 = "NO";
    }
    std::stringbuf::str(&v66, &v87);
    if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v41 = &v66;
    }
    else {
      double v41 = (std::stringbuf::string_type *)v66.__r_.__value_.__r.__words[0];
    }
    std::stringbuf::str(&v65, &v84);
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v42 = &v65;
    }
    else {
      BOOL v42 = (std::stringbuf::string_type *)v65.__r_.__value_.__r.__words[0];
    }
    char v59 = v42;
    std::stringbuf::str(&v64, &v81);
    if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v43 = &v64;
    }
    else {
      unint64_t v43 = (std::stringbuf::string_type *)v64.__r_.__value_.__r.__words[0];
    }
    uint64_t v57 = (os_log_s *)v33;
    float v58 = v43;
    std::stringbuf::str(&v63, &v75);
    __int128 v54 = v41;
    int v55 = v40;
    unint64_t v56 = v39;
    if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v44 = &v63;
    }
    else {
      int v44 = (std::stringbuf::string_type *)v63.__r_.__value_.__r.__words[0];
    }
    float v45 = &v62;
    std::stringbuf::str(&v62, &v78);
    uint64_t v46 = v36;
    uint64_t v47 = v34;
    if ((v62.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      float v45 = (std::stringbuf::string_type *)v62.__r_.__value_.__r.__words[0];
    }
    std::stringbuf::str(&v61, &v72);
    int size = (char)v61.__r_.__value_.__s.__size_;
    std::string::size_type v49 = v61.__r_.__value_.__r.__words[0];
    std::stringbuf::str(&v60, &v69);
    uint64_t v50 = &v61;
    if (size < 0) {
      uint64_t v50 = (std::stringbuf::string_type *)v49;
    }
    if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v51 = &v60;
    }
    else {
      uint64_t v51 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136318466;
    float64x2_t v93 = v47;
    __int16 v94 = 2048;
    uint64_t v95 = v35;
    __int16 v96 = 2080;
    uint64_t v97 = v46;
    __int16 v98 = 2080;
    uint64_t v99 = v37;
    __int16 v100 = 2080;
    double v101 = v38;
    __int16 v102 = 2080;
    float64_t v103 = v56;
    __int16 v104 = 2080;
    float64_t v105 = v55;
    __int16 v106 = 2080;
    double v107 = v54;
    __int16 v108 = 2080;
    float64_t v109 = v59;
    __int16 v110 = 2080;
    float64_t v111 = v58;
    __int16 v112 = 2080;
    double v113 = v44;
    __int16 v114 = 2080;
    float64x2_t v115 = v45;
    __int16 v116 = 2080;
    float64x2_t v117 = v50;
    __int16 v118 = 2080;
    v119 = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,DeviceID: %s\n \tTimestamp: %f\n \tSolution convergence: %s, insufficientDisplacement: %s, insufficientHorizontalPositionDiversity: %s, insufficien tVerticalPositionDiversity: %s, insufficientLighting: %s\n \tRange: %s, Horizontal angle: %s, Horizontal distance: %s, Vertical distance: %s, Vertical state: %s, Direction: %s, World Position: %s",  buf,  0x8Eu);
  }

  std::streambuf::~streambuf(&v69);
  std::ios::~ios(&v70);
  uint64_t v71 = v52;
  *(uint64_t *)((char *)&v71 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v72);
  std::ios::~ios(&v73);
  uint64_t v74 = v52;
  *(uint64_t *)((char *)&v74 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v75);
  std::ios::~ios(&v76);
  uint64_t v77 = v52;
  *(uint64_t *)((char *)&v77 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v78);
  std::ios::~ios(&v79);
  uint64_t v80 = v52;
  *(uint64_t *)((char *)&v80 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v81);
  std::ios::~ios(&v82);
  uint64_t v83 = v52;
  *(uint64_t *)((char *)&v83 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v84);
  std::ios::~ios(&v85);
  uint64_t v86 = v52;
  *(uint64_t *)((char *)&v86 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v87);
  std::ios::~ios(&v88);
  uint64_t v89 = v52;
  *(uint64_t *)((char *)&v89 + *(void *)(v52 - 24)) = v53;
  std::streambuf::~streambuf(&v90);
  return std::ios::~ios(&v91);
}

void sub_10031D81C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  sub_1001DF850((uint64_t)&a60);
  sub_1001DF850((uint64_t)&a72);
  sub_1001DF850((uint64_t)&STACK[0x300]);
  sub_1001DF850((uint64_t)&STACK[0x408]);
  sub_1001DF850((uint64_t)&STACK[0x510]);
  sub_1001DF850((uint64_t)&STACK[0x618]);
  sub_1001DF850((uint64_t)&STACK[0x720]);
  sub_1001DF850((uint64_t)&STACK[0x828]);
  _Unwind_Resume(a1);
}

double sub_10031D958(double a1, uint64_t a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003ACACC();
  }
  return atan(a1 / *(float *)(a3 + 8)) * 180.0 / 3.14159265;
}

void sub_10031D9D8(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 488) != a2)
  {
    double v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "NO";
      unint64_t v6 = *(void *)(a1 + 408) + *(void *)(a1 + 400) - 1LL;
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 376) + ((v6 >> 2) & 0x3FFFFFFFFFFFFFF8LL)) + ((v6 & 0x1F) << 7));
      unint64_t v8 = *(void *)(a1 + 480) + *(void *)(a1 + 472) - 1LL;
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 448) + ((v8 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v8 & 0x7F));
      if (a2) {
        uint64_t v5 = "YES";
      }
      int v10 = 136315650;
      uint64_t v11 = v5;
      __int16 v12 = 2048;
      uint64_t v13 = v7;
      __int16 v14 = 2048;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#sa_algo_moving_findee,#stalePeerVIO Peer pose history stale status changed to %s, last self pose at %f s, last peer pose at %f s ",  (uint8_t *)&v10,  0x20u);
    }

    *(_BYTE *)(a1 + 488) = a2;
  }

void sub_10031DB10(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003ACB38();
      }
      break;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003ACB9C();
      }
      break;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003ACC00();
      }
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003ACC64();
      }
      break;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003ACCC8();
      }
      break;
    default:
      return;
  }

__n128 sub_10031DC34(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10031E570(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v14 = *(_OWORD *)(a2 + 112);
  __int128 v15 = *(_OWORD *)(a2 + 128);
  *(void *)(v8 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

unint64_t sub_10031DD08(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (char **)(v5 + 8 * (v4 / 0x1A));
  if (a1[1].i64[0] == v5) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = &(*v6)[152 * (v4 % 0x1A)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = 26 * ((char **)a2 - v6)
  }
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0x1A);
  v27[0].n128_u64[1] = (unint64_t)v7;
  sub_10031E954(v27, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v27[0].n128_u64[1] - *(void *)v27[0].n128_u64[0];
  unint64_t v11 = 0x86BCA1AF286BCA1BLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -151)
    {
      __int128 v15 = (void *)(v27[0].n128_u64[0] - 8 * ((24 - v11) / 0x1A));
      uint64_t v16 = (char *)(*v15 + 152 * (26 * ((24 - v11) / 0x1A) - (24 - v11)) + 3800);
    }

    else
    {
      __int128 v15 = (void *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0x1A));
      uint64_t v16 = (char *)(*v15 + 152 * ((v11 + 1) % 0x1A));
    }

    sub_10031EA08(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100422120);
    sub_10031E884((uint64_t)a1, 1);
  }

  else
  {
    if (v10 < -151)
    {
      unint64_t v17 = 24 - v11;
      uint64_t v13 = (void *)(v27[0].n128_u64[0] - 8 * (v17 / 0x1A));
      __int128 v14 = (_BYTE *)(*v13 + 152 * (26 * (v17 / 0x1A) - v17) + 3800);
    }

    else
    {
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (void *)(v27[0].n128_u64[0] + 8 * (v12 / 0x1A));
      __int128 v14 = (_BYTE *)(*v13 + 152 * (v12 % 0x1A));
    }

    unint64_t v18 = a1[2].i64[0] + v9;
    uint64_t v19 = a1->i64[1];
    uint64_t v20 = (_BYTE **)(v19 + 8 * (v18 / 0x1A));
    if (a1[1].i64[0] == v19) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = &(*v20)[152 * (v18 % 0x1A)];
    }
    sub_10031EBB4(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    sub_10031E8E0(a1, 1);
  }

  unint64_t v22 = a1[2].u64[0];
  uint64_t v23 = a1->i64[1];
  int v24 = (void *)(v23 + 8 * (v22 / 0x1A));
  if (a1[1].i64[0] == v23) {
    unint64_t v25 = 0LL;
  }
  else {
    unint64_t v25 = *v24 + 152 * (v22 % 0x1A);
  }
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  sub_10031E954(v27, v8);
  return v27[0].n128_u64[0];
}

void *sub_10031E028(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(void *)a2) >> 5);
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = (char *)(v7 + 8LL * (a1[4] >> 7));
  if (a1[2] == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 32 * (a1[4] & 0x7FLL);
  }
  uint64_t v33 = (char **)(v7 + 8LL * (a1[4] >> 7));
  uint64_t v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(void *)v8) >> 5);
  }
  unint64_t v11 = (char **)sub_10031ED30((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      uint64_t v21 = v33;
      unint64_t v22 = v34;
      uint64_t v23 = sub_10031ED30((uint64_t)&v32, v6);
      sub_10031ED94(v21, v22, v19, v20, v23, v24, &v35);
      unint64_t v25 = v34;
      if (v34 != v36)
      {
        uint64_t v26 = v33;
        do
        {
          v25 += 32;
          uint64_t v34 = v25;
          if (v25 - *v26 == 4096)
          {
            uint64_t v27 = v26[1];
            ++v26;
            unint64_t v25 = v27;
            uint64_t v33 = v26;
            uint64_t v34 = v27;
          }
        }

        while (v25 != v36);
      }

      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
    }

    else
    {
      uint64_t v13 = (char **)sub_10031ED30((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      unint64_t v17 = (char **)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16) {
        unint64_t v18 = 0LL;
      }
      else {
        unint64_t v18 = &(*v17)[32 * (v15 & 0x7F)];
      }
      __n128 v35 = v32;
      sub_10031EF18(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100304ED0(a1, 1) & 1) != 0)
        ;
    }
  }

  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8LL * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  }
  v35.n128_u64[0] = v29 + 8LL * (a1[4] >> 7);
  v35.n128_u64[1] = v30;
  return sub_10031ED30((uint64_t)&v35, v10);
}

void sub_10031E25C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10031E524( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10031E570(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10031E838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10031E884(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1A) {
    a2 = 1;
  }
  if (v2 < 0x34) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 26LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10031E8E0(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 26 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A) {
    a2 = 1;
  }
  if (v5 < 0x34) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void *sub_10031E954(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x79435E50D79435E5LL * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 25 - v3;
      uint64_t v6 = &v2[-(v5 / 0x1A)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 152 * (26 * (v5 / 0x1A) - v5) + 3800;
    }

    else
    {
      *__n128 result = &v2[v3 / 0x1A];
      unint64_t v4 = v2[v3 / 0x1A] + 152 * (v3 % 0x1A);
    }

    result[1] = v4;
  }

  return result;
}

__n128 sub_10031EA08@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10031EAD4(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 3952;
    }

    uint64_t v18 = *a1 + 3952;
    uint64_t v19 = a2;
  }

  sub_10031EAD4(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10031EAD4@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a4[-v10] >> 3);
      v11 -= 152 * v12;
      a4 -= 152 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 152 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 3952);
    }

    if ((char *)(*v6 + 3952LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10031EBB4(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 3952LL); ; uint64_t i = v12 + 3952)
    {
      sub_10031EC44(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_10031EC44(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10031EC44@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }

  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x86BCA1AF286BCA1BLL * ((v10 - __dst + 3952) >> 3);
      unint64_t v12 = (uint64_t)(0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 152 * v12);
      }
      v7 += 152 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __int128 __dst = v14;
    }

    __dst += 152 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_10031ED30(uint64_t a1, uint64_t a2)
{
  double result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 5);
    if (v4 < 1) {
      result -= (unint64_t)(127 - v4) >> 7;
    }
    else {
      result += (unint64_t)v4 >> 7;
    }
  }

  return result;
}

__n128 sub_10031ED94@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    unint64_t v12 = *a3;
    uint64_t v14 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10031EE60(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      unint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }

    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }

  sub_10031EE60(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10031EE60@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    int64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5) {
        uint64_t v13 = v12 >> 5;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 5;
      }
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 32 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10031EF18(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    int64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    unint64_t v8 = a1 + 1;
    sub_10031EFE4(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_10031EFE4(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    int64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_10031EFE4(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10031EFE4@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 5 >= v11 >> 5 ? v11 >> 5 : (a3 - v9) >> 5;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 32 * v12);
      }
      v9 += 32 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __int128 __dst = v13;
    }

    __dst += 32 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

  ;
}

void sub_10031F0C4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10031F0D4()
{
  qword_1007FFA60 = 0LL;
  qword_1007FFA68 = 0LL;
  qword_1007FFA70 = 0LL;
  v0 = operator new(0x40uLL);
  qword_1007FFA68 = (uint64_t)(v0 + 4);
  qword_1007FFA70 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_100430AB0;
  v0[1] = unk_100430AC0;
  v0[2] = xmmword_100430AD0;
  v0[3] = unk_100430AE0;
  qword_1007FFA60 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA60, (void *)&_mh_execute_header);
  qword_1007FFA80 = 0LL;
  unk_1007FFA88 = 0LL;
  qword_1007FFA78 = 0LL;
  uint64_t v1 = operator new(0x10uLL);
  qword_1007FFA80 = (uint64_t)(v1 + 1);
  unk_1007FFA88 = v1 + 1;
  *uint64_t v1 = xmmword_100430AF0;
  qword_1007FFA78 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007FFA78, (void *)&_mh_execute_header);
}

uint64_t sub_10031F190(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  if (!v3) {
    __assert_rtn("RoseSupervisorInterface", "RoseSupervisorInterface.mm", 44, "fDispatchQueue");
  }
  uint64_t v4 = v3;
  unint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = &stru_1007BDAF0;

  return a1;
}

void sub_10031F208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031F22C(id a1, const void *a2)
{
  id v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)a2 + 2) - *((void *)a2 + 1);
    int v5 = 134217984;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received HID event, but no handler defined. Data len: %zu",  (uint8_t *)&v5,  0xCu);
  }

uint64_t sub_10031F2D8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~RoseSupervisorInterface()", v5, 2u);
  }

  io_connect_t v3 = *(_DWORD *)(a1 + 8);
  if (v3) {
    IOServiceClose(v3);
  }

  return a1;
}

BOOL sub_10031F370(uint64_t a1)
{
  kern_return_t v6;
  os_log_s *v7;
  os_log_s *v8;
  uint8_t v9[32];
  uint8_t buf[24];
  uint64_t v1 = (io_connect_t *)(a1 + 8);
  if (*(_DWORD *)(a1 + 8)) {
    return 1LL;
  }
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003ACDD4();
  }
  io_connect_t v3 = IOServiceNameMatching("rose-supervisor");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  io_object_t v5 = MatchingService;
  if (MatchingService)
  {
    uint64_t v6 = IOServiceOpen(MatchingService, mach_task_self_, 0, v1);
    IOObjectRelease(v5);
    int v7 = (os_log_s *)qword_1008000A0;
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[RoseSupervisorInterface] Successfully connected to RoseSupervisor",  v9,  2u);
      }

      return 1LL;
    }

    unint64_t v8 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10031F500(v6, v9);
      sub_1003ACD64((char *)v9, buf, v8);
    }
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1003ACD2C();
  }

  return 0LL;
}

void sub_10031F4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10031F500@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case -536870212:
      uint64_t v2 = "kIOReturnError";
      break;
    case -536870211:
      uint64_t v2 = "kIOReturnNoMemory";
      break;
    case -536870210:
      uint64_t v2 = "kIOReturnNoResources";
      break;
    case -536870209:
      uint64_t v2 = "kIOReturnIPCError";
      break;
    case -536870208:
      uint64_t v2 = "kIOReturnNoDevice";
      break;
    case -536870207:
      uint64_t v2 = "kIOReturnNotPrivileged";
      break;
    case -536870206:
      uint64_t v2 = "kIOReturnBadArgument";
      break;
    case -536870205:
      uint64_t v2 = "kIOReturnLockedRead";
      break;
    case -536870204:
      uint64_t v2 = "kIOReturnLockedWrite";
      break;
    case -536870203:
      uint64_t v2 = "kIOReturnExclusiveAccess";
      break;
    case -536870202:
      uint64_t v2 = "kIOReturnBadMessageID";
      break;
    case -536870201:
      uint64_t v2 = "kIOReturnUnsupported";
      break;
    case -536870200:
      uint64_t v2 = "kIOReturnVMError";
      break;
    case -536870199:
      uint64_t v2 = "kIOReturnInternalError";
      break;
    case -536870198:
      uint64_t v2 = "kIOReturnIOError";
      break;
    case -536870197:
    case -536870180:
      goto LABEL_7;
    case -536870196:
      uint64_t v2 = "kIOReturnCannotLock";
      break;
    case -536870195:
      uint64_t v2 = "kIOReturnNotOpen";
      break;
    case -536870194:
      uint64_t v2 = "kIOReturnNotReadable";
      break;
    case -536870193:
      uint64_t v2 = "kIOReturnNotWritable";
      break;
    case -536870192:
      uint64_t v2 = "kIOReturnNotAligned";
      break;
    case -536870191:
      uint64_t v2 = "kIOReturnBadMedia";
      break;
    case -536870190:
      uint64_t v2 = "kIOReturnStillOpen";
      break;
    case -536870189:
      uint64_t v2 = "kIOReturnRLDError";
      break;
    case -536870188:
      uint64_t v2 = "kIOReturnDMAError";
      break;
    case -536870187:
      uint64_t v2 = "kIOReturnBusy";
      break;
    case -536870186:
      uint64_t v2 = "kIOReturnTimeout";
      break;
    case -536870185:
      uint64_t v2 = "kIOReturnOffline";
      break;
    case -536870184:
      uint64_t v2 = "kIOReturnNotReady";
      break;
    case -536870183:
      uint64_t v2 = "kIOReturnNotAttached";
      break;
    case -536870182:
      uint64_t v2 = "kIOReturnNoChannels";
      break;
    case -536870181:
      uint64_t v2 = "kIOReturnNoSpace";
      break;
    case -536870179:
      uint64_t v2 = "kIOReturnPortExists";
      break;
    case -536870178:
      uint64_t v2 = "kIOReturnCannotWire";
      break;
    case -536870177:
      uint64_t v2 = "kIOReturnNoInterrupt";
      break;
    case -536870176:
      uint64_t v2 = "kIOReturnNoFrames";
      break;
    case -536870175:
      uint64_t v2 = "kIOReturnMessageTooLarge";
      break;
    case -536870174:
      uint64_t v2 = "kIOReturnNotPermitted";
      break;
    case -536870173:
      uint64_t v2 = "kIOReturnNoPower";
      break;
    case -536870172:
      uint64_t v2 = "kIOReturnNoMedia";
      break;
    case -536870171:
      uint64_t v2 = "kIOReturnUnformattedMedia";
      break;
    case -536870170:
      uint64_t v2 = "kIOReturnUnsupportedMode";
      break;
    case -536870169:
      uint64_t v2 = "kIOReturnUnderrun";
      break;
    case -536870168:
      uint64_t v2 = "kIOReturnOverrun";
      break;
    case -536870167:
      uint64_t v2 = "kIOReturnDeviceError";
      break;
    case -536870166:
      uint64_t v2 = "kIOReturnNoCompletion";
      break;
    case -536870165:
      uint64_t v2 = "kIOReturnAborted";
      break;
    case -536870164:
      uint64_t v2 = "kIOReturnNoBandwidth";
      break;
    case -536870163:
      uint64_t v2 = "kIOReturnNotResponding";
      break;
    case -536870162:
      uint64_t v2 = "kIOReturnIsoTooOld";
      break;
    case -536870161:
      uint64_t v2 = "kIOReturnIsoTooNew";
      break;
    case -536870160:
      uint64_t v2 = "kIOReturnNotFound";
      break;
    default:
      if (a1 == -536870911)
      {
        uint64_t v2 = "kIOReturnInvalid";
      }

      else if (a1)
      {
LABEL_7:
        uint64_t v2 = "<Unknown IOReturn Value>";
      }

      else
      {
        uint64_t v2 = "kIOReturnSuccess";
      }

      break;
  }

  return sub_1000065CC(a2, v2);
}

void sub_10031F7CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    sub_1003ACE28();
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    sub_1003ACE00();
  }

  if (!v3) {
    goto LABEL_5;
  }
LABEL_3:
  id v4 = objc_retainBlock(v3);
  io_object_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
}

BOOL sub_10031F840(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4)
{
  kern_return_t v8;
  size_t v9;
  int v10;
  size_t v11;
  os_log_s *v12;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void v22[4];
  unsigned int v23;
  int v24;
  size_t __n;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;
  _BYTE __src[1024];
  uint64_t input;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003ACE7C();
  }
  input = a2;
  bzero(__src, 0x400uLL);
  __n = 1024LL;
  unint64_t v8 = IOConnectCallMethod( *(_DWORD *)(a1 + 8),  3u,  &input,  1u,  *(const void **)a3,  *(void *)(a3 + 8) - *(void *)a3,  0LL,  0LL,  __src,  &__n);
  uint64_t v9 = __n;
  if (__n >= 0x401) {
    sub_1003ACE54();
  }
  uint64_t v10 = v8;
  uint64_t v11 = a4[1] - *a4;
  if (__n <= v11)
  {
    if (__n < v11) {
      a4[1] = *a4 + __n;
    }
  }

  else
  {
    sub_1000353EC(a4, __n - v11);
    uint64_t v9 = __n;
  }

  if (v9) {
    memcpy((void *)*a4, __src, v9);
  }
  if (v10)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10031FAB4;
    void v22[3] = &unk_1007B5580;
    uint64_t v23 = a2;
    uint64_t v24 = v10;
    AnalyticsSendEventLazy(@"com.apple.nearbyd.RoseSupervisorCommandError", v22);
    uint64_t v12 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(a2, v20);
      uint64_t v14 = v21;
      __int128 v15 = (void **)v20[0];
      sub_10031F500(v10, __p);
      uint64_t v16 = v20;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      if (v19 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v27 = v16;
      uint64_t v28 = 2080;
      uint64_t v29 = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Failed to send command packet type: %s, return: %s",  buf,  0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
  }

  return v10 == 0;
}

void sub_10031FA84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10031FAB4(uint64_t a1)
{
  v6[0] = @"CommandType";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

void sub_10031FB80(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void *sub_10031FBA8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x3E) {
    uint64_t v2 = "<Unknown Command Type>";
  }
  else {
    uint64_t v2 = off_1007BDB70[a1];
  }
  return sub_1000065CC(a2, v2);
}

BOOL sub_10031FBD4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  kern_return_t v6;
  int v7;
  os_log_s *v8;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void v18[4];
  unsigned int v19;
  kern_return_t v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;
  uint64_t input;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003ACEA8();
  }
  input = a2;
  uint64_t v6 = IOConnectCallMethod( *(_DWORD *)(a1 + 8),  1u,  &input,  1u,  *(const void **)a3,  *(void *)(a3 + 8) - *(void *)a3,  0LL,  0LL,  0LL,  0LL);
  int v7 = v6;
  if (v6)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10031FDD0;
    v18[3] = &unk_1007B5580;
    uint64_t v19 = a2;
    int64_t v20 = v6;
    AnalyticsSendEventLazy(@"com.apple.nearbyd.RoseSupervisorSetPropertyError", v18);
    unint64_t v8 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10031FEC4(a2, v16);
      uint64_t v10 = v17;
      uint64_t v11 = (void **)v16[0];
      sub_10031F500(v7, __p);
      uint64_t v12 = v16;
      if (v10 < 0) {
        uint64_t v12 = v11;
      }
      if (v15 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      __n128 v22 = v12;
      uint64_t v23 = 2080;
      uint64_t v24 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to set property type: %s, return: %s",  buf,  0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
  }

  return v7 == 0;
}

void sub_10031FDA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10031FDD0(uint64_t a1)
{
  v6[0] = @"PropertyType";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

void sub_10031FE9C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void *sub_10031FEC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_1007BDD68[a1 - 208];
  }
  return sub_1000065CC(a2, v2);
}

BOOL sub_10031FEF4(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  kern_return_t v8;
  int v9;
  size_t v10;
  os_log_s *v11;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void v21[4];
  unsigned int v22;
  int v23;
  size_t v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  void **v28;
  uint64_t input;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003ACEFC();
  }
  input = a2;
  uint64_t v24 = 1024LL;
  LOBYTE(v19[0]) = 0;
  outputStruct = (char *)*a3;
  unint64_t v7 = a3[1] - *a3;
  if (v7 > 0x3FF)
  {
    if (v7 != 1024) {
      a3[1] = (unint64_t)(outputStruct + 1024);
    }
  }

  else
  {
    sub_1001C9BC8(a3, 1024 - v7, v19);
    outputStruct = (char *)*a3;
  }

  unint64_t v8 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 2u, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, &v24);
  if (v24 >= 0x401) {
    sub_1003ACED4();
  }
  uint64_t v9 = v8;
  uint64_t v10 = a3[1] - *a3;
  if (v24 <= v10)
  {
    if (v24 < v10) {
      a3[1] = *a3 + v24;
    }
  }

  else
  {
    sub_1000353EC(a3, v24 - v10);
  }

  if (v9)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100320178;
    v21[3] = &unk_1007B5580;
    __n128 v22 = a2;
    uint64_t v23 = v9;
    AnalyticsSendEventLazy(@"com.apple.nearbyd.RoseSupervisorGetPropertyError", v21);
    uint64_t v11 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_10031FEC4(a2, v19);
      uint64_t v13 = v20;
      uint64_t v14 = (void **)v19[0];
      sub_10031F500(v9, __p);
      __int128 v15 = v19;
      if (v13 < 0) {
        __int128 v15 = v14;
      }
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v26 = v15;
      uint64_t v27 = 2080;
      uint64_t v28 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to get property type: %s, return: %s",  buf,  0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
  }

  return v9 == 0;
}

void sub_100320148( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_100320178(uint64_t a1)
{
  v6[0] = @"PropertyType";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36)));
  v7[1] = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

void sub_100320244(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

id sub_10032026C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "RoseSupervisorInterface::startReceivingHIDEvents()",  buf,  2u);
  }

  id v3 = *(void **)(a1 + 24);
  if (!v3)
  {
    id v4 = [[HIDEventSystemClient alloc] initWithType:1];
    io_object_t v5 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v4;

    [*(id *)(a1 + 24) setDispatchQueue:*(void *)a1];
    [*(id *)(a1 + 24) setMatching:&off_1007D2868];
    uint64_t v6 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_10032037C;
    v8[3] = &unk_1007BDB10;
    v8[4] = a1;
    [v6 setEventHandler:v8];
    [*(id *)(a1 + 24) setResetHandler:&stru_1007BDB30];
    [*(id *)(a1 + 24) setCancelHandler:&stru_1007BDB50];
    id v3 = *(void **)(a1 + 24);
  }

  return [v3 activate];
}

void sub_10032037C(uint64_t a1, void *a2, void *a3)
{
}

void sub_100320384(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v9 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    LOWORD(v11) = 0;
    uint64_t v10 = "onHIDEvent HIDServiceClient is nil";
    goto LABEL_11;
  }

  sub_1003ACF28();
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v6)
  {
    uint64_t v9 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    LOWORD(v11) = 0;
    uint64_t v10 = "onHIDEvent HIDEvent is nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v11, 2u);
    goto LABEL_12;
  }

  DataValue = (const void *)IOHIDEventGetDataValue(v6, 65540LL);
  id v8 = [v6 integerValueForField:65539];
  double v11 = sub_100023BEC((unint64_t)[v6 timestamp]);
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  sub_100030B3C(&__p, DataValue, (uint64_t)v8 + (void)DataValue, (size_t)v8);
  (*(void (**)(void))(*(void *)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }

void sub_1003204E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100320520(id a1)
{
  uint64_t v1 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Reset handler", v2, 2u);
  }

void sub_100320584(id a1)
{
  uint64_t v1 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Cancel handler", v2, 2u);
  }

double sub_1003205EC(unint64_t a1)
{
  return (double)a1 / 38400000.0;
}

double sub_100320600(unint64_t a1)
{
  return (double)a1 / 9.984e11;
}

double sub_100320614(uint64_t a1)
{
  return (double)a1 / 9.984e11;
}

uint64_t sub_10032062C@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  *(void *)((char *)v6
  uint64_t v7 = v4;
  std::streambuf::~streambuf(&v8);
  return std::ios::~ios(&v9);
}

void sub_1003206E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1003206F4(int a1)
{
  return ((a1 - 997) & 0xFFFFFFFD) != 0;
}

uint64_t sub_100320704(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 199)
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_100320754(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 199)
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1003207A4(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 99)
  {
    return 0LL;
  }

  if (a1 <= 199)
  {
    return 0LL;
  }

  return result;
}

BOOL sub_1003207FC(int a1)
{
  return (a1 - 100) < 0x16 || (a1 - 3) <= 0x14;
}

BOOL sub_100320824(int a1)
{
  return (a1 - 100) >= 0x16 && (a1 - 200) >= 2 && a1 != 999 && a1 != 997;
}

BOOL sub_10032085C(unsigned int a1)
{
  return a1 >= 0x18 && a1 - 200 >= 2 && a1 != 999 && a1 != 997;
}

uint64_t sub_100320890(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 99)
  {
    return 0LL;
  }

  if (a1 > 199)
  {
  }

  else
  {
    unsigned int v3 = a1 - 100;
    if (v3 <= 0x13 && ((1 << v3) & 0xC6333) != 0) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100320900(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 99)
  {
    return 0LL;
  }

  return result;
}

BOOL sub_100320944(unsigned int a1)
{
  return a1 >= 0x17 && a1 != 997 && a1 != 999;
}

uint64_t sub_10032096C(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 199)
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1003209B8(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 99)
  {
    return 0LL;
  }

  if (a1 <= 199)
  {
    return 0LL;
  }

  if (a1 == 200 || a1 == 999 || a1 == 997) {
    return 0LL;
  }
  return result;
}

uint64_t sub_100320A0C(int a1)
{
  if (a1 == 201) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = a1 == 200;
  }
  if (a1 == 999) {
    return 999LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100320A34(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_100320A4C@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  *(void *)((char *)v6
  uint64_t v7 = v4;
  std::streambuf::~streambuf(&v8);
  return std::ios::~ios(&v9);
}

void sub_100320B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_DWORD *sub_100320B14@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      unsigned int v3 = operator new(4uLL);
      *a2 = v3;
      int v4 = 1;
      goto LABEL_7;
    case 1:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      unsigned int v3 = operator new(4uLL);
      *a2 = v3;
      int v4 = 2;
      goto LABEL_7;
    case 2:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      unsigned int v3 = operator new(4uLL);
      *a2 = v3;
      int v4 = 3;
      goto LABEL_7;
    case 3:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      unsigned int v3 = operator new(4uLL);
      *a2 = v3;
      int v4 = 7;
LABEL_7:
      *unsigned int v3 = v4;
      uint64_t result = v3 + 1;
      a2[1] = result;
      a2[2] = result;
      break;
    default:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      break;
  }

  return result;
}

uint64_t sub_100320BE8(uint64_t a1, __int128 *a2)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 1018212795LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8((_BYTE *)(a1 + 64), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    *(void *)(a1 + 80) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v3;
  }

  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 850045863LL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0LL;
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 87)) {
      goto LABEL_6;
    }
LABEL_9:
    __assert_rtn("DispatchQueue", "roseDispatchQueue.cpp", 17, "fName.size() > 0");
  }

  if (!*(void *)(a1 + 72)) {
    goto LABEL_9;
  }
LABEL_6:
  atomic_store(1u, (unsigned __int8 *)(a1 + 8));
  sub_100320D64((std::__thread_struct *)a1, &v5.__t_);
  if (*(void *)a1) {
    std::terminate();
  }
  *(std::thread *)a1 = v5;
  v5.__t_ = 0LL;
  std::thread::~thread(&v5);
  return a1;
}

void sub_100320D1C()
{
}

void sub_100320D64(std::__thread_struct *a1@<X0>, pthread_t *a2@<X8>)
{
  int v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  std::thread v5 = (std::__thread_struct **)operator new(0x30uLL);
  *std::thread v5 = v4;
  v5[1] = a1 + 1;
  v5[2] = a1 + 2;
  v5[3] = a1 + 11;
  v5[4] = a1 + 17;
  v5[5] = a1 + 8;
  uint64_t v7 = v5;
  int v6 = pthread_create(a2, 0LL, (void *(__cdecl *)(void *))sub_100321408, v5);
  if (v6)
  {
    std::__throw_system_error(v6, "thread constructor failed");
    __break(1u);
  }

  else
  {
    uint64_t v7 = 0LL;
    sub_1003215F0(&v7);
  }

void sub_100320E08()
{
}

void sub_100320E28()
{
}

void sub_100320E40(uint64_t a1)
{
  uint64_t v2 = (std::condition_variable *)(a1 + 16);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
  if (*(void *)a1) {
    std::thread::join((std::thread *)a1);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  sub_100320F14((void *)(a1 + 88));
  std::condition_variable::~condition_variable(v2);
  std::thread::~thread((std::thread *)a1);
}

void sub_100320EB4(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  sub_100321060((void *)(a1 + 88), a2);
  std::mutex::unlock(v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
}

void sub_100320F00(_Unwind_Exception *a1)
{
}

uint64_t sub_100320F14(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  __int128 v3 = (void **)a1[2];
  if (v3 != v2)
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 == v9) {
      goto LABEL_13;
    }
    while (1)
    {
      uint64_t v10 = *(void **)(v8 + 24);
      if (v10 == (void *)v8) {
        break;
      }
      if (v10)
      {
        uint64_t v11 = 5LL;
LABEL_7:
        (*(void (**)(void))(*v10 + 8 * v11))();
        uint64_t v7 = (uint64_t)*v6;
      }

      v8 += 32LL;
      if (v8 - v7 == 4096)
      {
        uint64_t v12 = (uint64_t)v6[1];
        ++v6;
        uint64_t v7 = v12;
        uint64_t v8 = v12;
      }

      if (v8 == v9)
      {
        uint64_t v2 = (void **)a1[1];
        __int128 v3 = (void **)a1[2];
        goto LABEL_13;
      }
    }

    uint64_t v10 = (void *)v8;
    uint64_t v11 = 4LL;
    goto LABEL_7;
  }

  int v4 = a1 + 5;
  __int128 v3 = (void **)a1[1];
LABEL_13:
  *int v4 = 0LL;
  unint64_t v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      __int128 v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v13 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v14 = v13 >> 3;
  if (v14 == 1)
  {
    uint64_t v15 = 64LL;
  }

  else
  {
    if (v14 != 2) {
      goto LABEL_21;
    }
    uint64_t v15 = 128LL;
  }

  a1[4] = v15;
LABEL_21:
  while (v2 != v3)
  {
    uint64_t v16 = *v2++;
    operator delete(v16);
  }

  return sub_100030AF0((uint64_t)a1);
}

uint64_t sub_100321060(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0LL;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_1003210F4(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }

  if (v5 == v4)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F);
  }

  uint64_t result = sub_10001E914(v8, a2);
  ++a1[5];
  return result;
}

void sub_1003210F4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1003213BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100321408(std::__thread_struct **a1)
{
  uint64_t v12 = a1;
  unsigned int v1 = std::__thread_local_data();
  unint64_t v2 = *v12;
  *uint64_t v12 = 0LL;
  pthread_setspecific(v1->__key_, v2);
  BOOL v3 = v12[5];
  if (SHIBYTE(v3[2].__p_) < 0) {
    BOOL v3 = (std::__thread_struct *)v3->__p_;
  }
  pthread_setname_np((const char *)v3);
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v12[4];
    __lk.__owns_ = 1;
    std::mutex::lock(__lk.__m_);
    uint64_t v5 = (unsigned __int8 *)v12[1];
    unint64_t v4 = (std::condition_variable *)v12[2];
    uint64_t v6 = v12[3];
    while (1)
    {
      unsigned __int8 v7 = atomic_load(v5);
      if ((v7 & 1) == 0 || v6[5].__p_) {
        break;
      }
      std::condition_variable::wait(v4, &__lk);
    }

    unsigned __int8 v8 = atomic_load((unsigned __int8 *)v12[1]);
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
    sub_10001E914( (uint64_t)v14,  *(void *)((char *)v12[3][1].__p_ + (((unint64_t)v12[3][4].__p_ >> 4) & 0xFFFFFFFFFFFFFF8LL))
    + 32 * ((uint64_t)v12[3][4].__p_ & 0x7F));
    sub_100321630(v12[3]);
    sub_100178F30((uint64_t)&__lk);
    if (!v15) {
      sub_10001EEF0();
    }
    (*(void (**)(_BYTE *))(*(void *)v15 + 48LL))(v15);
    uint64_t v9 = v15;
    if (v15 == v14)
    {
      uint64_t v9 = v14;
      uint64_t v10 = 4LL;
    }

    else
    {
      if (!v15) {
        goto LABEL_15;
      }
      uint64_t v10 = 5LL;
    }

    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }

  while ((v8 & 1) != 0);
  sub_1003215F0(&v12);
  return 0LL;
}

void sub_100321584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

std::__thread_struct ***sub_1003215F0(std::__thread_struct ***a1)
{
  unint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    sub_1003216B0(v2, 0LL);
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_100321630(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v2 & 0x7F);
  unint64_t v4 = *(void **)(v3 + 24);
  if (v4 == (void *)v3)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = (void *)v3;
    goto LABEL_5;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
    unint64_t v2 = a1[4];
  }

  uint64_t v6 = a1[5] - 1LL;
  a1[4] = v2 + 1;
  a1[5] = v6;
  return sub_10030164C((uint64_t)a1, 1);
}

void sub_1003216B0(std::__thread_struct **a1, std::__thread_struct *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    std::__thread_struct::~__thread_struct(v3);
    operator delete(v4);
  }

uint64_t sub_1003216DC()
{
  v0 = sub_100005150();
  sub_1000062D0(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "getConnectionDescriptorSize: no cached hello response. Cannot guarantee correct parsing.");
  }

  else {
    uint64_t v3 = 24LL;
  }
  sub_1000060B4((uint64_t)__dst);
  return v3;
}

void sub_10032177C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003217A0()
{
  v0 = sub_100005150();
  sub_1000062D0(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "getTimeStatusSize: no cached hello response. Cannot guarantee correct parsing.");
  }

  else {
    uint64_t v3 = 48LL;
  }
  sub_1000060B4((uint64_t)__dst);
  return v3;
}

void sub_100321840(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_100321864@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::to_string(&v15, *(void *)(a1 + 8));
  unint64_t v4 = std::string::append(&v15, ":");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = *(char *)(a1 + 16);
  if (v8 >= 4) {
    uint64_t v9 = "RFU_Critical requests ";
  }
  else {
    uint64_t v9 = off_1007BDDC8[v8];
  }
  std::string::append(a2, v9);
  uint64_t v10 = "unknown operation, ";
  if (*(_BYTE *)(a1 + 17) == 1) {
    uint64_t v10 = "to resume, ";
  }
  if (*(_BYTE *)(a1 + 17)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = "to pause, ";
  }
  std::string::append(a2, v11);
  uint64_t v12 = "r1 status unknown";
  if (*(_BYTE *)(a1 + 18) == 1) {
    uint64_t v12 = "r1 active";
  }
  if (*(_BYTE *)(a1 + 18)) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = "r1 paused";
  }
  return std::string::append(a2, v13);
}

void sub_1003219A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003219F0( uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, void *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20, __int128 a21, __int16 a22, int a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, int a32, __int16 a33, int a34, int a35, int a36, __int16 a37, __int16 a38, __int16 a39, __int16 a40, __int16 a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, __int128 a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  __int128 v132 = a17;
  __int128 v131 = a18;
  __int128 v130 = a19;
  __int128 v129 = a20;
  __int128 v128 = a21;
  uint64_t v127 = a26;
  uint64_t v126 = a25;
  uint64_t v125 = a28;
  uint64_t v124 = a27;
  uint64_t v123 = a30;
  uint64_t v122 = a29;
  __int16 v121 = a33;
  int v120 = a35;
  __int16 v119 = a41;
  uint64_t v118 = a43;
  uint64_t v117 = a42;
  uint64_t v116 = a45;
  uint64_t v115 = a44;
  uint64_t v114 = a47;
  uint64_t v113 = a46;
  uint64_t v112 = a49;
  uint64_t v111 = a48;
  __int128 v110 = a50;
  __int16 v109 = a51;
  __int16 v108 = a53;
  __int16 v107 = a55;
  int v106 = a57;
  int v105 = a59;
  int v104 = a61;
  __int16 v103 = a63;
  uint64_t v102 = a65;
  uint64_t v101 = a64;
  uint64_t v100 = a67;
  uint64_t v99 = a66;
  __int16 v98 = a68;
  __int16 v97 = a69;
  __int16 v96 = a70;
  __int16 v95 = a71;
  __int16 v94 = a72;
  uint64_t v93 = a1;
  __int16 v92 = a2;
  __int16 v91 = a3;
  char v90 = a4;
  double v89 = a9;
  __int16 v88 = a5;
  char v87 = a6;
  uint64_t v86 = a7;
  double v85 = a10;
  int v84 = a8;
  double v83 = a11;
  double v82 = a12;
  double v81 = a13;
  double v80 = a14;
  double v79 = a15;
  uint64_t v133 = a1;
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = v91;
  *(_BYTE *)(a1 + 4) = v90;
  *(double *)(a1 + 8) = v89;
  *(_WORD *)(a1 + 16) = v88;
  *(_BYTE *)(a1 + 18) = v87;
  *(void *)(a1 + 19) = *v86;
  *(double *)(a1 + 32) = v85;
  sub_100321F70((void *)(a1 + 40), a16);
  *(double *)(a1 + 64) = v83;
  *(double *)(a1 + 72) = v82;
  *(_OWORD *)(a1 + 80) = v110;
  *(_OWORD *)(a1 + 96) = v132;
  *(_OWORD *)(a1 + 112) = v131;
  *(_OWORD *)(a1 + 128) = v130;
  *(double *)(a1 + 144) = v81;
  *(double *)(a1 + 152) = v80;
  *(_OWORD *)(a1 + 160) = v129;
  *(_OWORD *)(a1 + 176) = v128;
  *(_WORD *)(a1 + 192) = a22;
  *(_DWORD *)(a1 + 196) = a23;
  *(double *)(a1 + 200) = v79;
  *(double *)(a1 + 208) = sub_100026A3C(v85);
  *(_BYTE *)(a1 + 216) = a24;
  *(void *)(a1 + 224) = v126;
  *(void *)(a1 + 232) = v127;
  *(void *)(a1 + 240) = v124;
  *(void *)(a1 + 248) = v125;
  *(void *)(a1 + 256) = v122;
  *(void *)(a1 + 264) = v123;
  *(_BYTE *)(a1 + 272) = a31;
  *(_WORD *)(a1 + 273) = v121;
  *(_DWORD *)(a1 + 276) = v120;
  *(_WORD *)(a1 + 280) = a37;
  *(_WORD *)(a1 + 282) = a38;
  *(_WORD *)(a1 + 284) = a39;
  *(_WORD *)(a1 + 286) = v119;
  *(void *)(a1 + 288) = v117;
  *(void *)(a1 + 296) = v118;
  *(void *)(a1 + 304) = v115;
  *(void *)(a1 + 312) = v116;
  *(void *)(a1 + 320) = v113;
  *(void *)(a1 + 328) = v114;
  *(void *)(a1 + 336) = v111;
  *(void *)(a1 + 344) = v112;
  *(_WORD *)(a1 + 352) = v109;
  *(_WORD *)(a1 + 354) = v108;
  *(_WORD *)(a1 + 356) = v107;
  *(_DWORD *)(a1 + 358) = v106;
  *(_DWORD *)(a1 + 362) = v105;
  *(_DWORD *)(a1 + 366) = v104;
  *(_WORD *)(a1 + 370) = v103;
  *(void *)(a1 + 376) = v101;
  *(void *)(a1 + 384) = v102;
  *(void *)(a1 + 392) = v99;
  *(void *)(a1 + 400) = v100;
  *(_WORD *)(a1 + 408) = v98;
  *(_WORD *)(a1 + 410) = v97;
  *(_WORD *)(a1 + 412) = v96;
  *(_WORD *)(a1 + 414) = v95;
  *(_WORD *)(a1 + 416) = v94;
  sub_100321FC0((_BYTE *)(a1 + 424));
  sub_100321FC0((_BYTE *)(a1 + 440));
  if (!v84)
  {
    v78[1] = a1 + 40;
    v78[0] = sub_100321FCC(a1 + 40);
    uint64_t v77 = sub_100321FD4(a1 + 40);
    while (sub_100321FDC(v78, &v77))
    {
      uint64_t v76 = (double *)sub_100321FCC((uint64_t)v78);
      sub_100026AC4((double *)&v75, (double *)&v74, *v76, v76[1]);
      *(void *)uint64_t v76 = v75;
      *((void *)v76 + 1) = v74;
      sub_100321FF0(v78);
    }
  }

  return v133;
}

void *sub_100321F70(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_10011B618( a1,  *(const void **)a2,  *(void *)(a2 + 8),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  return a1;
}

_BYTE *sub_100321FC0(_BYTE *result)
{
  *uint64_t result = 0;
  result[8] = 0;
  return result;
}

uint64_t sub_100321FCC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100321FD4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_100321FDC(void *a1, void *a2)
{
  return *a1 != *a2;
}

void *sub_100321FF0(void *result)
{
  *result += 56LL;
  return result;
}

uint64_t sub_100322000(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_100322030( uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, void *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20, __int128 a21, __int16 a22, int a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, int a32, __int16 a33, int a34, int a35, int a36, __int16 a37, __int16 a38, __int16 a39, __int16 a40, __int16 a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, __int128 a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  return sub_1003219F0( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  v64,  a33,  v73,  a35,  v72,  a37,  a38,  a39,  v65,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
           a50,
           a51,
           v71,
           a53,
           v70,
           a55,
           v69,
           a57,
           v68,
           a59,
           v67,
           a61,
           v66,
           a63);
}

uint64_t sub_1003225F8( uint64_t a1, __int16 a2, __int16 a3, char a4, uint64_t a5, __int16 a6, __int16 a7, __int16 a8, double a9, double a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, uint64_t a21)
{
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_BYTE *)(a1 + 4) = a4;
  *(double *)(a1 + 8) = a9;
  *(void *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 24) = a6;
  *(_WORD *)(a1 + 26) = a7;
  *(_WORD *)(a1 + 28) = a8;
  *(_BYTE *)(a1 + 30) = a11;
  *(_BYTE *)(a1 + 31) = a12;
  *(_BYTE *)(a1 + 32) = a13;
  *(_BYTE *)(a1 + 33) = a14;
  *(_BYTE *)(a1 + 34) = a15;
  *(_BYTE *)(a1 + 35) = a16;
  *(double *)(a1 + 40) = a10;
  *(_BYTE *)(a1 + 48) = a17;
  *(_BYTE *)(a1 + 49) = a18;
  *(_BYTE *)(a1 + 50) = a19;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  unint64_t v22 = *(const void **)a21;
  uint64_t v23 = *(void *)(a21 + 8);
  unint64_t v24 = (v23 - *(void *)a21) >> 4;
  *(_BYTE *)(a1 + 51) = a20;
  sub_100130F40((void *)(a1 + 56), v22, v23, v24);
  return a1;
}

uint64_t sub_1003226AC(uint64_t result, void *a2, uint64_t a3, int a4)
{
  *(void *)uint64_t result = 850045863LL;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 56) = 0LL;
  uint64_t v4 = a2[1];
  *(void *)(result + 64) = *a2;
  *(void *)(result + 72) = v4;
  if (v4)
  {
    __int128 v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  *(_DWORD *)(result + 96) = a4;
  *(_BYTE *)(result + 100) = 1;
  *(_OWORD *)(result + 101) = 0uLL;
  *(_OWORD *)(result + 117) = 0uLL;
  *(_OWORD *)(result + 133) = 0uLL;
  *(_DWORD *)(result + 148) = 0;
  return result;
}

void sub_100322714( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v125 = 0LL;
  uint64_t v126 = 0LL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v9)
  {
    uint64_t v12 = 0LL;
LABEL_16:
    sub_10032C3DC("No event listener, ignoring event packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v98);
    goto LABEL_17;
  }

  uint64_t v12 = std::__shared_weak_count::lock(v9);
  uint64_t v126 = v12;
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v125 = v13;
  if (!v13) {
    goto LABEL_16;
  }
  int v14 = sub_10032A158(a2);
  if (!v14)
  {
    int v37 = sub_10032A1C0(a2);
    if (v37 > 511)
    {
      switch(v37)
      {
        case 512:
          sub_10032C51C( "handleEvent: got time sync event packet - expected AOP to handle this for us!",  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v98);
          goto LABEL_84;
        case 513:
          sub_100323694(a3, (uint64_t)&v181);
          v170[0] = v13;
          v170[1] = v12;
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v62 = __ldxr(p_shared_owners);
          while (__stxr(v62 + 1, p_shared_owners));
          uint64_t v173 = *(void *)&v182[16];
          __int128 v171 = v181;
          __int128 v172 = *(_OWORD *)v182;
          __int128 v174 = *(_OWORD *)&v182[24];
          uint64_t v175 = *(void *)&v182[40];
          memset(&v182[24], 0, 24);
          memcpy(v176, v183, sizeof(v176));
          sub_1003244DC((uint64_t)&v177, (uint64_t)v170);
          sub_100324570((uint64_t)v170);
          uint64_t v63 = *(void *)(a1 + 80);
          uint64_t v64 = (uint64_t)v180;
          if (!v180) {
            goto LABEL_56;
          }
          if (v180 == &v177)
          {
            v169 = v168;
            (*((void (**)(void **, _BYTE *))v177 + 3))(&v177, v168);
          }

          else
          {
            uint64_t v64 = (*((uint64_t (**)(void))*v180 + 2))();
LABEL_56:
            v169 = (_BYTE *)v64;
          }

          sub_100320EB4(v63, (uint64_t)v168);
          char v90 = v169;
          if (v169 == v168)
          {
            uint64_t v91 = 4LL;
            char v90 = v168;
          }

          else
          {
            if (!v169) {
              goto LABEL_111;
            }
            uint64_t v91 = 5LL;
          }

          (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_111:
          __int16 v92 = v180;
          if (v180 == &v177)
          {
            uint64_t v93 = 4LL;
            __int16 v92 = &v177;
          }

          else
          {
            if (!v180) {
              goto LABEL_116;
            }
            uint64_t v93 = 5LL;
          }

          (*((void (**)(void))*v92 + v93))();
LABEL_116:
          if (*(void *)&v182[24])
          {
            *(void *)&v182[32] = *(void *)&v182[24];
            operator delete(*(void **)&v182[24]);
          }

          goto LABEL_84;
        case 515:
          unint64_t v65 = sub_1003245A0((uint64_t)a3);
          uint64_t v121 = v13;
          uint64_t v122 = v12;
          int v66 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          int v123 = v65;
          __int16 v124 = WORD2(v65);
          int v68 = operator new(0x20uLL);
          *int v68 = off_1007BDE78;
          v68[1] = v13;
          v68[2] = v12;
          uint64_t v121 = 0LL;
          uint64_t v122 = 0LL;
          *((_DWORD *)v68 + 6) = v123;
          *((_WORD *)v68 + 14) = v124;
          *(void *)&v182[8] = v68;
          sub_100012390((uint64_t)&v121);
          uint64_t v69 = *(void *)(a1 + 80);
          v167 = (char *)(*(uint64_t (**)(void *))(*v68 + 16LL))(v68);
          sub_100320EB4(v69, (uint64_t)v166);
          __int128 v30 = v167;
          if (v167 != v166) {
            goto LABEL_13;
          }
          uint64_t v31 = 4LL;
          __int128 v30 = v166;
          goto LABEL_44;
        case 516:
          sub_10032463C(a3, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v181);
          uint64_t v148 = v13;
          v149 = v12;
          uint64_t v50 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          __int128 v162 = *(_OWORD *)&v183[128];
          __int128 v163 = *(_OWORD *)&v183[144];
          __int128 v164 = *(_OWORD *)&v183[160];
          uint64_t v165 = *(void *)&v183[176];
          __int128 v158 = *(_OWORD *)&v183[64];
          __int128 v159 = *(_OWORD *)&v183[80];
          __int128 v160 = *(_OWORD *)&v183[96];
          __int128 v161 = *(_OWORD *)&v183[112];
          __int128 v154 = *(_OWORD *)v183;
          __int128 v155 = *(_OWORD *)&v183[16];
          __int128 v156 = *(_OWORD *)&v183[32];
          __int128 v157 = *(_OWORD *)&v183[48];
          __int128 v150 = v181;
          __int128 v151 = *(_OWORD *)v182;
          __int128 v152 = *(_OWORD *)&v182[16];
          __int128 v153 = *(_OWORD *)&v182[32];
          uint64_t v52 = (char *)operator new(0x110uLL);
          __int128 v53 = *(_OWORD *)&v183[144];
          *(_OWORD *)(v52 + 216) = *(_OWORD *)&v183[128];
          *(_OWORD *)(v52 + 232) = v53;
          *(_OWORD *)(v52 + 248) = *(_OWORD *)&v183[160];
          __int128 v54 = *(_OWORD *)&v183[80];
          *(_OWORD *)(v52 + 152) = *(_OWORD *)&v183[64];
          *(_OWORD *)(v52 + 168) = v54;
          __int128 v55 = *(_OWORD *)&v183[112];
          *(_OWORD *)(v52 + 184) = *(_OWORD *)&v183[96];
          *(_OWORD *)(v52 + 200) = v55;
          __int128 v56 = *(_OWORD *)&v183[16];
          *(_OWORD *)(v52 + 88) = *(_OWORD *)v183;
          *(_OWORD *)(v52 + 104) = v56;
          __int128 v57 = *(_OWORD *)&v183[48];
          *(_OWORD *)(v52 + 120) = *(_OWORD *)&v183[32];
          *(_OWORD *)(v52 + 136) = v57;
          __int128 v58 = *(_OWORD *)v182;
          *(_OWORD *)(v52 + 24) = v181;
          *(_OWORD *)(v52 + 40) = v58;
          __int128 v59 = *(_OWORD *)&v182[32];
          *(_OWORD *)(v52 + 56) = *(_OWORD *)&v182[16];
          *(void *)uint64_t v52 = off_1007BDEF8;
          *((void *)v52 + 1) = v13;
          *((void *)v52 + 2) = v12;
          v149 = 0LL;
          uint64_t v148 = 0LL;
          *((void *)v52 + 33) = *(void *)&v183[176];
          *(_OWORD *)(v52 + 72) = v59;
          v180 = (void **)v52;
          sub_100012390((uint64_t)&v148);
          uint64_t v60 = *(void *)(a1 + 80);
          v147 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v52 + 16LL))(v52);
          sub_100320EB4(v60, (uint64_t)v146);
          unint64_t v46 = v147;
          if (v147 != v146) {
            goto LABEL_76;
          }
          uint64_t v47 = 4LL;
          unint64_t v46 = v146;
          goto LABEL_78;
        case 517:
          sub_10032A5A8(a1 + 96, (uint64_t)a3, &v181);
          if (!v183[8]) {
            goto LABEL_129;
          }
          v139[0] = v13;
          v139[1] = v12;
          int v70 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          if (!v183[8]) {
            sub_100006080();
          }
          uint64_t v141 = *(void *)v182;
          __int128 v140 = v181;
          __int128 v142 = *(_OWORD *)&v182[8];
          uint64_t v143 = *(void *)&v182[24];
          memset(&v182[8], 0, 40);
          __int128 v144 = *(_OWORD *)&v182[32];
          uint64_t v145 = *(void *)v183;
          *(void *)v183 = 0LL;
          sub_100324B3C((uint64_t)&v177, (uint64_t)v139);
          sub_100324BC0((uint64_t)v139);
          uint64_t v72 = *(void *)(a1 + 80);
          uint64_t v73 = (uint64_t)v180;
          if (!v180) {
            goto LABEL_68;
          }
          if (v180 == &v177)
          {
            __int128 v138 = v137;
            (*((void (**)(void **, _BYTE *))v177 + 3))(&v177, v137);
          }

          else
          {
            uint64_t v73 = (*((uint64_t (**)(void))*v180 + 2))();
LABEL_68:
            __int128 v138 = (_BYTE *)v73;
          }

          sub_100320EB4(v72, (uint64_t)v137);
          __int16 v94 = v138;
          if (v138 == v137)
          {
            uint64_t v95 = 4LL;
            __int16 v94 = v137;
          }

          else
          {
            if (!v138) {
              goto LABEL_124;
            }
            uint64_t v95 = 5LL;
          }

          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_124:
          __int16 v96 = v180;
          if (v180 == &v177)
          {
            uint64_t v97 = 4LL;
            __int16 v96 = &v177;
          }

          else
          {
            if (!v180) {
              goto LABEL_129;
            }
            uint64_t v97 = 5LL;
          }

          (*((void (**)(void))*v96 + v97))();
LABEL_129:
          sub_100148A24((uint64_t)&v181);
          break;
        case 522:
          goto LABEL_84;
        default:
          goto LABEL_89;
      }

      goto LABEL_84;
    }

    switch(v37)
    {
      case 'Q':
        sub_100324C0C((uint64_t)a3, (uint64_t)&v181);
        uint64_t v116 = v13;
        uint64_t v117 = v12;
        uint64_t v74 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
        __int128 v118 = v181;
        __int128 v119 = *(_OWORD *)v182;
        uint64_t v120 = *(void *)&v182[16];
        uint64_t v76 = (char *)operator new(0x40uLL);
        *(void *)uint64_t v76 = off_1007BDFF8;
        *((void *)v76 + 1) = v13;
        *((void *)v76 + 2) = v12;
        uint64_t v116 = 0LL;
        uint64_t v117 = 0LL;
        __int128 v77 = *(_OWORD *)v182;
        *(_OWORD *)(v76 + 24) = v181;
        *(_OWORD *)(v76 + 40) = v77;
        *((void *)v76 + 7) = *(void *)&v182[16];
        v180 = (void **)v76;
        sub_100012390((uint64_t)&v116);
        uint64_t v78 = *(void *)(a1 + 80);
        __int128 v136 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v76 + 16LL))(v76);
        sub_100320EB4(v78, (uint64_t)v135);
        unint64_t v46 = v136;
        if (v136 == v135)
        {
          uint64_t v47 = 4LL;
          unint64_t v46 = v135;
          goto LABEL_78;
        }

        break;
      case 'T':
        sub_100324D08((uint64_t)a3, (uint64_t)&v181);
        uint64_t v111 = v13;
        uint64_t v112 = v12;
        double v79 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        __int128 v113 = v181;
        __int128 v114 = *(_OWORD *)v182;
        __int128 v115 = *(_OWORD *)&v182[16];
        double v81 = (char *)operator new(0x48uLL);
        *(void *)double v81 = off_1007BE078;
        *((void *)v81 + 1) = v13;
        *((void *)v81 + 2) = v12;
        uint64_t v111 = 0LL;
        uint64_t v112 = 0LL;
        __int128 v82 = *(_OWORD *)v182;
        *(_OWORD *)(v81 + 24) = v181;
        *(_OWORD *)(v81 + 40) = v82;
        *(_OWORD *)(v81 + 56) = *(_OWORD *)&v182[16];
        v180 = (void **)v81;
        sub_100012390((uint64_t)&v111);
        uint64_t v83 = *(void *)(a1 + 80);
        __int128 v134 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v81 + 16LL))(v81);
        sub_100320EB4(v83, (uint64_t)v133);
        unint64_t v46 = v134;
        if (v134 == v133)
        {
          uint64_t v47 = 4LL;
          unint64_t v46 = v133;
          goto LABEL_78;
        }

        break;
      case 'U':
        sub_100324FDC((uint64_t)a3, (uint64_t)&v181);
        uint64_t v105 = v13;
        int v106 = v12;
        uint64_t v40 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        __int128 v107 = v181;
        __int128 v108 = *(_OWORD *)v182;
        __int128 v109 = *(_OWORD *)&v182[16];
        __int128 v110 = *(_OWORD *)&v182[32];
        uint64_t v42 = (char *)operator new(0x58uLL);
        __int128 v43 = *(_OWORD *)v182;
        *(_OWORD *)(v42 + 24) = v181;
        *(_OWORD *)(v42 + 40) = v43;
        __int128 v44 = *(_OWORD *)&v182[32];
        *(_OWORD *)(v42 + 56) = *(_OWORD *)&v182[16];
        *(void *)uint64_t v42 = off_1007BE0F8;
        *((void *)v42 + 1) = v13;
        *((void *)v42 + 2) = v12;
        uint64_t v105 = 0LL;
        int v106 = 0LL;
        *(_OWORD *)(v42 + 72) = v44;
        v180 = (void **)v42;
        sub_100012390((uint64_t)&v105);
        uint64_t v45 = *(void *)(a1 + 80);
        __int128 v132 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v42 + 16LL))(v42);
        sub_100320EB4(v45, (uint64_t)v131);
        unint64_t v46 = v132;
        if (v132 == v131)
        {
          uint64_t v47 = 4LL;
          unint64_t v46 = v131;
          goto LABEL_78;
        }

        break;
      default:
LABEL_89:
        uint64_t v38 = *(unsigned __int16 *)(a2 + 2);
        uint64_t v39 = "got ranging event with unknown message ID 0x%02x";
        goto LABEL_35;
    }

void sub_1003232B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
  uint64_t v47 = (unint64_t *)STACK[0x5A8];
  if ((unint64_t *)STACK[0x5A8] == &STACK[0x590])
  {
    uint64_t v48 = 4LL;
    uint64_t v47 = &STACK[0x590];
  }

  else
  {
    if (!v47) {
      goto LABEL_6;
    }
    uint64_t v48 = 5LL;
  }

  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_6:
  sub_100148A24((uint64_t)&STACK[0x5B0]);
  sub_100012390((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_100323694@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v6 = sub_100005150();
  sub_1000062D0(v199, (uint64_t)v6);
  if (!v201)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "Got event, but no cached hello response. Cannot guarantee correct parsing.");
  }

  uint64_t v14 = __rev16(v200);
  sub_10032C124("RoseEventHandler::decodeRangeResultEvent: hsiVersion %hu", v7, v8, v9, v10, v11, v12, v13, v14);
  if (v14 <= 0x1D)
  {
    sub_10032C51C("Unsupported HSI version.", v15, v16, v17, v18, v19, v20, v21, v135);
    __int128 v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Unsupported HSI version.");
  }

  size_t v29 = *((unsigned int *)sub_100005150() + 187);
  if ((_DWORD)v29 == 2)
  {
    int v30 = 112;
    uint64_t v31 = 89LL;
    uint64_t v162 = 86LL;
    uint64_t v32 = 85LL;
    uint64_t v158 = 98LL;
    uint64_t v160 = 93LL;
    uint64_t v33 = 88LL;
    uint64_t v34 = 83LL;
    uint64_t v35 = 82LL;
    uint64_t v36 = 80LL;
    uint64_t v37 = 78LL;
    uint64_t v38 = 76LL;
  }

  else
  {
    if (!(_DWORD)v29)
    {
      uint64_t v133 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v133, "HSI version error");
    }

    if ((_DWORD)v29 == 1) {
      int v30 = 112;
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = 88LL;
    uint64_t v162 = 85LL;
    uint64_t v32 = 84LL;
    uint64_t v158 = 97LL;
    uint64_t v160 = 92LL;
    uint64_t v33 = 87LL;
    uint64_t v34 = 82LL;
    uint64_t v35 = 81LL;
    uint64_t v36 = 79LL;
    uint64_t v37 = 77LL;
    uint64_t v38 = 75LL;
  }

  uint64_t v39 = *a1;
  if (a1[1] - *a1 != v30)
  {
    sub_10032C51C("Range result event (%zu) not of expected size (%u)", v22, v23, v24, v25, v26, v27, v28, a1[1] - *a1);
    __int128 v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Range result event not of expected size");
  }

  int __dst = 0;
  unsigned __int8 v197 = 0;
  unint64_t v196 = 0LL;
  __int16 v195 = 0;
  uint64_t v194 = 0LL;
  int v193 = 0;
  int v192 = 0;
  int v191 = 0;
  int v190 = 0;
  int v189 = 0;
  int v188 = 0;
  __int16 v187 = 0;
  unsigned int v186 = 0;
  __int16 v185 = 0;
  char v184 = 0;
  int v183 = 0;
  char v182 = 0;
  __int16 v181 = 0;
  int v180 = 0;
  __int16 v179 = 0;
  __int16 v178 = 0;
  int v177 = 0;
  unsigned __int8 v176 = 0;
  __int16 v175 = 0;
  uint64_t v174 = 0LL;
  uint64_t v173 = 0LL;
  uint64_t v172 = 0LL;
  uint64_t v171 = 0LL;
  __int16 v170 = 0;
  unsigned __int8 v169 = 0;
  sub_1003619AC((char *)(v39 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*a1 + 8LL), 1uLL, &v197, 1);
  sub_1003619AC((char *)(*a1 + 9LL), 8uLL, &v196, 1);
  sub_1003619AC((char *)(*a1 + 17LL), 2uLL, &v195, 1);
  char v164 = *(_BYTE *)(*a1 + 19LL);
  sub_1003619AC((char *)(*a1 + 22LL), 4uLL, &v193, 1);
  sub_1003619AC((char *)(*a1 + 26LL), 2uLL, (_BYTE *)&v192 + 2, 1);
  sub_1003619AC((char *)(*a1 + 28LL), 2uLL, &v192, 1);
  sub_1003619AC((char *)(*a1 + 30LL), 2uLL, (_BYTE *)&v191 + 2, 1);
  sub_1003619AC((char *)(*a1 + 32LL), 2uLL, &v191, 1);
  sub_1003619AC((char *)(*a1 + 34LL), 4uLL, &v190, 1);
  sub_1003619AC((char *)(*a1 + 38LL), 2uLL, (_BYTE *)&v189 + 2, 1);
  sub_1003619AC((char *)(*a1 + 40LL), 2uLL, &v189, 1);
  sub_1003619AC((char *)(*a1 + 42LL), 2uLL, (_BYTE *)&v188 + 2, 1);
  sub_1003619AC((char *)(*a1 + 44LL), 2uLL, &v188, 1);
  sub_1003619AC((char *)(*a1 + 46LL), 2uLL, &v187, 1);
  sub_1003619AC((char *)(*a1 + 48LL), 4uLL, &v186, 1);
  sub_1003619AC((char *)(*a1 + 52LL), 1uLL, (_BYTE *)&v185 + 1, 1);
  sub_1003619AC((char *)(*a1 + 53LL), 1uLL, &v185, 1);
  sub_1003619AC((char *)(*a1 + 54LL), 1uLL, &v184, 1);
  sub_1003619AC((char *)(*a1 + 55LL), 2uLL, (_BYTE *)&v183 + 2, 1);
  sub_1003619AC((char *)(*a1 + 57LL), 2uLL, &v183, 1);
  sub_1003619AC((char *)(*a1 + 59LL), 8uLL, &v194, 1);
  sub_1003619AC((char *)(*a1 + 67LL), 1uLL, &v182, 1);
  sub_1003619AC((char *)(*a1 + 68LL), 2uLL, &v181, 1);
  sub_1003619AC((char *)(*a1 + 70LL), 2uLL, (_BYTE *)&v180 + 2, 1);
  sub_1003619AC((char *)(*a1 + 72LL), 2uLL, &v180, 1);
  if ((_DWORD)v29 == 1)
  {
    uint64_t v40 = (__int16 *)((char *)&v179 + 1);
    size_t v41 = v29;
  }

  else
  {
    if ((_DWORD)v29 != 2) {
      goto LABEL_16;
    }
    uint64_t v40 = &v179;
    size_t v41 = 2LL;
  }

  sub_1003619AC((char *)(*a1 + 74LL), v41, v40, 1);
LABEL_16:
  sub_1003619AC((char *)(*a1 + v38), 2uLL, &v178, 1);
  sub_1003619AC((char *)(*a1 + v37), 2uLL, (_BYTE *)&v177 + 2, 1);
  sub_1003619AC((char *)(*a1 + v36), 2uLL, &v177, 1);
  sub_1003619AC((char *)(*a1 + v35), 1uLL, &v176, 1);
  if ((_DWORD)v29 == 2)
  {
    sub_1003619AC((char *)(*a1 + v34), 2uLL, &v175, 1);
    sub_1003619AC((char *)(*a1 + v32), 1uLL, (_BYTE *)&v170 + 1, 1);
    sub_1003619AC((char *)(*a1 + v162), 1uLL, &v170, 1);
    int v49 = 1;
    sub_1003619AC((char *)(*a1 + v31), 1uLL, &v169, 1);
  }

  else
  {
    if ((_DWORD)v29 == 1)
    {
      sub_1003619AC((char *)(*a1 + v34), 5uLL, &v174, 1);
      sub_1003619AC((char *)(*a1 + v33), 5uLL, &v173, 1);
      sub_1003619AC((char *)(*a1 + v160), 5uLL, &v172, 1);
      sub_1003619AC((char *)(*a1 + v158), 5uLL, &v171, 1);
    }

    int v49 = 0;
  }

  __int16 v50 = sub_10032B26C(HIWORD(__dst), v42, v43, v44, v45, v46, v47, v48);
  char v58 = sub_10032AF88(v197, v51, v52, v53, v54, v55, v56, v57);
  int v59 = SHIWORD(v191);
  int v60 = (__int16)v191;
  int v61 = SHIBYTE(v185);
  int v62 = (char)v185;
  int v63 = v184;
  LOWORD(v4) = v181;
  LOWORD(v3) = HIWORD(v180);
  LOWORD(v2) = v180;
  int v70 = *((_DWORD *)sub_100005150() + 187);
  double v71 = 0.0;
  int v163 = v60;
  int v161 = v59;
  switch(v70)
  {
    case 1:
      char v72 = sub_10032BABC(HIBYTE(v179), 1LL, v64, v65, v66, v67, v68, v69);
      LOBYTE(v157) = 0;
      uint64_t v159 = 0LL;
      unsigned __int8 v154 = 0;
      uint64_t v155 = 0LL;
      unsigned __int8 v156 = 0;
      __int16 v153 = 0;
      break;
    case 2:
      unint64_t v73 = sub_10032BCC4(v179);
      char v72 = 9;
      if (v74)
      {
        unsigned __int8 v156 = v73;
        __int16 v153 = 256;
        uint64_t v157 = HIDWORD(v73) & 0xFFFFFF;
        if ((v73 & 0xFF0000) != 0) {
          char v72 = BYTE1(v73);
        }
        else {
          char v72 = 9;
        }
        unsigned __int8 v154 = BYTE5(v73);
        uint64_t v155 = BYTE6(v73);
      }

      else
      {
        unsigned __int8 v156 = 0;
        LOBYTE(v157) = 0;
        unsigned __int8 v154 = 0;
        uint64_t v155 = 0LL;
        __int16 v153 = 0;
      }

      double v71 = (double)v175 * 0.25;
      uint64_t v159 = 1LL;
      break;
    case 0:
      __int128 v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v134, "Unknown HSI version");
    default:
      LOBYTE(v157) = 0;
      uint64_t v159 = 0LL;
      unsigned __int8 v154 = 0;
      uint64_t v155 = 0LL;
      unsigned __int8 v156 = 0;
      __int16 v153 = 0;
      char v72 = 9;
      break;
  }

  std::stringbuf::string_type __p = 0LL;
  v166 = 0LL;
  unint64_t v168 = 0LL;
  unsigned __int8 v75 = v189;
  unsigned int v76 = v189 & 0xF;
  unsigned int v145 = v76;
  if (v76 == 15)
  {
    __int128 v77 = 0LL;
  }

  else
  {
    __int16 v78 = HIWORD(v192);
    __int16 v79 = v192;
    unint64_t v80 = (double *)sub_10001FD64((uint64_t)&v168, 1uLL);
    __int128 v82 = &v80[7 * v81];
    *unint64_t v80 = (double)v78;
    v80[1] = (double)v79;
    v80[2] = (double)v76 * 0.0666666667;
    *((_BYTE *)v80 + 24) = 0;
    *((_BYTE *)v80 + 32) = 0;
    *((_BYTE *)v80 + 40) = 0;
    *((_BYTE *)v80 + 48) = 0;
    __int128 v77 = v80 + 7;
    uint64_t v83 = (double *)__p;
    int v84 = (double *)v166;
    if (__p != v166)
    {
      do
      {
        __int128 v85 = *(_OWORD *)(v83 - 7);
        __int128 v86 = *(_OWORD *)(v83 - 5);
        __int128 v87 = *(_OWORD *)(v83 - 3);
        *(v80 - 1) = *(v83 - 1);
        *(_OWORD *)(v80 - 3) = v87;
        *(_OWORD *)(v80 - 5) = v86;
        *(_OWORD *)(v80 - 7) = v85;
        v80 -= 7;
        v83 -= 7;
      }

      while (v83 != v84);
      uint64_t v83 = v84;
    }

    v166 = v80;
    std::stringbuf::string_type __p = v77;
    unint64_t v168 = (unint64_t)v82;
    if (v83) {
      operator delete(v83);
    }
    std::stringbuf::string_type __p = v77;
    unsigned __int8 v75 = v189;
  }

  int v152 = v63;
  unsigned int v88 = v75 >> 4;
  if (v88 != 15)
  {
    double v89 = (double)SHIWORD(v183);
    double v90 = (double)v88 * 0.0666666667;
    double v91 = (double)(__int16)v183;
    if ((unint64_t)v77 >= v168)
    {
      uint64_t v93 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v77 - (_BYTE *)v166) >> 3);
      unint64_t v94 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v168 - (void)v166) >> 3);
      if (v94 <= v93 + 1) {
        unint64_t v94 = v93 + 1;
      }
      else {
        unint64_t v95 = v94;
      }
      if (v95) {
        __int16 v96 = (char *)sub_10001FD64((uint64_t)&v168, v95);
      }
      else {
        __int16 v96 = 0LL;
      }
      uint64_t v97 = (double *)&v96[8 * (((char *)v77 - (_BYTE *)v166) >> 3)];
      uint64_t v98 = &v96[56 * v95];
      *uint64_t v97 = v89;
      v97[1] = v91;
      v97[2] = v90;
      *((_BYTE *)v97 + 24) = 0;
      *((_BYTE *)v97 + 32) = 0;
      *((_BYTE *)v97 + 40) = 0;
      *((_BYTE *)v97 + 48) = 0;
      __int16 v92 = v97 + 7;
      int v99 = (double *)__p;
      __int16 v100 = (double *)v166;
      if (__p != v166)
      {
        do
        {
          __int128 v101 = *(_OWORD *)(v99 - 7);
          __int128 v102 = *(_OWORD *)(v99 - 5);
          __int128 v103 = *(_OWORD *)(v99 - 3);
          *(v97 - 1) = *(v99 - 1);
          *(_OWORD *)(v97 - 3) = v103;
          *(_OWORD *)(v97 - 5) = v102;
          *(_OWORD *)(v97 - 7) = v101;
          v97 -= 7;
          v99 -= 7;
        }

        while (v99 != v100);
        int v99 = v100;
      }

      v166 = v97;
      std::stringbuf::string_type __p = v92;
      unint64_t v168 = (unint64_t)v98;
      if (v99) {
        operator delete(v99);
      }
    }

    else
    {
      double *v77 = v89;
      v77[1] = v91;
      v77[2] = v90;
      *((_BYTE *)v77 + 24) = 0;
      *((_BYTE *)v77 + 32) = 0;
      *((_BYTE *)v77 + 40) = 0;
      __int16 v92 = v77 + 7;
      *((_BYTE *)v77 + 48) = 0;
    }

    std::stringbuf::string_type __p = v92;
  }

  unsigned int v147 = v88;
  char v149 = v72;
  char v151 = v58;
  __int16 v150 = v50;
  uint64_t v202 = v194;
  __int16 v148 = __dst;
  double v104 = sub_1003205EC(v196);
  __int16 v146 = v195;
  int v105 = v193;
  int v106 = v190;
  unsigned int v107 = HIWORD(v189);
  __int16 v108 = HIWORD(v188);
  __int16 v109 = v188;
  __int16 v110 = v187;
  int v111 = v186;
  double v112 = sub_1003205EC(v186);
  uint64_t v113 = HIBYTE(v170) | 0x100LL;
  if (v49) {
    uint64_t v113 = 0LL;
  }
  uint64_t v114 = v170 | 0x100LL;
  if (v49) {
    uint64_t v114 = 0LL;
  }
  *((void *)&v144 + 1) = v159;
  *(double *)&__int128 v144 = v71;
  unint64_t v142 = v157 | (unint64_t)(v155 << 16) | ((unint64_t)v154 << 8);
  *((void *)&v140 + 1) = 1LL;
  *(double *)&__int128 v140 = (double)v109;
  *((void *)&v139 + 1) = 1LL;
  *(double *)&__int128 v139 = (double)v108;
  *((void *)&v138 + 1) = 1LL;
  *(double *)&__int128 v138 = (double)v152;
  *((void *)&v137 + 1) = 1LL;
  *(double *)&__int128 v137 = (double)v62;
  *((void *)&v136 + 1) = 1LL;
  *(double *)&__int128 v136 = (double)v61;
  sub_100322030( a2,  v150,  v148,  v151,  v146,  v164,  &v202,  0,  v104,  (double)v105,  (double)v161 * 0.25,  (double)v163 * 0.25,  (double)v106,  (double)v107,  v112,  (uint64_t)&v166,  v136,  v137,  v138,  v139,  v140,  v110,  v111,  v182,  COERCE__INT64((double)v4 * 0.01),  1LL,  COERCE__INT64((double)v3 * 0.01),  1LL,  COERCE__INT64((double)v2 * 0.01),  1LL,  v149,  v141,  v153 & 0x100 | v156,  (v153 & 0x100 | (unint64_t)v156) >> 32,  v142,  SHIDWORD(v142),  v178,  SHIWORD(v177),  v177,  v143,  v176 | 0x100,  v174,  v174 != 0,  v173,  v173 != 0,  v172,  v172 != 0,  v171,  v171 != 0,
    v144,
    v113,
    SHIDWORD(v113),
    v114,
    SHIDWORD(v114),
    v169 | 0x100,
    (v169 | 0x100uLL) >> 32,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  if (*(_BYTE *)(a2 + 4) != 16)
  {
    if (v145 == 15) {
      sub_10032C3DC( "Ignoring AOA hypothesis primary with az %d el %d intunc %d",  v115,  v116,  v117,  v118,  v119,  v120,  v121,  SHIWORD(v192));
    }
    else {
      sub_10032C124( "AOA hypothesis primary: az %f el %f unc %f",  v115,  v116,  v117,  v118,  v119,  v120,  v121,  *(void *)v166);
    }
    if (v147 == 15) {
      sub_10032C3DC( "Ignoring AOA hypothesis alt1 with az %d el %d intunc %d",  v122,  v123,  v124,  v125,  v126,  v127,  v128,  SHIWORD(v183));
    }
    else {
      sub_10032C124( "AOA hypothesis alt1: az %f el %f unc %f",  v122,  v123,  v124,  v125,  v126,  v127,  v128,  *((void *)__p - 7));
    }
  }

  if (v166)
  {
    std::stringbuf::string_type __p = v166;
    operator delete(v166);
  }

  return sub_1000060B4((uint64_t)v199);
}

void sub_100324434(_Unwind_Exception *a1)
{
}

uint64_t sub_1003244DC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  unint64_t v4 = (char *)operator new(0x1E0uLL);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)unint64_t v4 = off_1007BDDF8;
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 56);
  *((void *)v4 + 10) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *((_OWORD *)v4 + 4) = v6;
  memcpy(v4 + 88, (const void *)(a2 + 80), 0x181uLL);
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_100324570(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  return sub_100012390(a1);
}

unint64_t sub_1003245A0(uint64_t a1)
{
  uint64_t v1 = a1;
  int __dst = 0;
  unsigned __int16 v18 = 0;
  sub_1003619AC((char *)(*(void *)a1 + 4LL), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*(void *)v1 + 6LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*(void *)v1 + 8LL), 2uLL, &v18, 1);
  LODWORD(v1) = sub_10032B26C(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  uint64_t v16 = sub_10032B26C(v18, v9, v10, v11, v12, v13, v14, v15);
  return (v16 << 32) | ((unint64_t)(unsigned __int16)__dst << 16) | v1;
}

double sub_10032463C@<D0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 != 96LL)
  {
    sub_10032C51C("Range debug event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Range debug event not of expected size");
  }

  uint64_t v11 = a1;
  __int16 __dst = 0;
  unsigned __int8 v69 = 0;
  __int16 v68 = 0;
  char v67 = 0;
  unint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  unint64_t v64 = 0LL;
  unint64_t v62 = 0LL;
  unint64_t v63 = 0LL;
  unint64_t v60 = 0LL;
  unint64_t v61 = 0LL;
  int v58 = 0;
  int v59 = 0;
  int v56 = 0;
  int v57 = 0;
  int v54 = 0;
  int v55 = 0;
  int v53 = 0;
  sub_1003619AC((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*v11 + 6LL), 1uLL, &v69, 1);
  sub_1003619AC((char *)(*v11 + 7LL), 2uLL, &v68, 1);
  sub_1003619AC((char *)(*v11 + 9LL), 1uLL, &v67, 1);
  sub_1003619AC((char *)(*v11 + 12LL), 8uLL, &v65, 1);
  sub_1003619AC((char *)(*v11 + 20LL), 8uLL, &v64, 1);
  sub_1003619AC((char *)(*v11 + 28LL), 8uLL, &v63, 1);
  sub_1003619AC((char *)(*v11 + 36LL), 8uLL, &v62, 1);
  sub_1003619AC((char *)(*v11 + 44LL), 8uLL, &v61, 1);
  sub_1003619AC((char *)(*v11 + 52LL), 8uLL, &v60, 1);
  sub_1003619AC((char *)(*v11 + 60LL), 2uLL, (_BYTE *)&v59 + 2, 1);
  sub_1003619AC((char *)(*v11 + 62LL), 2uLL, &v59, 1);
  sub_1003619AC((char *)(*v11 + 64LL), 2uLL, (_BYTE *)&v58 + 2, 1);
  sub_1003619AC((char *)(*v11 + 66LL), 2uLL, &v58, 1);
  sub_1003619AC((char *)(*v11 + 68LL), 2uLL, (_BYTE *)&v57 + 2, 1);
  sub_1003619AC((char *)(*v11 + 70LL), 2uLL, &v57, 1);
  sub_1003619AC((char *)(*v11 + 72LL), 2uLL, (_BYTE *)&v56 + 2, 1);
  sub_1003619AC((char *)(*v11 + 74LL), 2uLL, &v56, 1);
  sub_1003619AC((char *)(*v11 + 76LL), 2uLL, (_BYTE *)&v55 + 2, 1);
  sub_1003619AC((char *)(*v11 + 78LL), 2uLL, &v55, 1);
  sub_1003619AC((char *)(*v11 + 80LL), 2uLL, (_BYTE *)&v54 + 2, 1);
  sub_1003619AC((char *)(*v11 + 82LL), 2uLL, &v54, 1);
  sub_1003619AC((char *)(*v11 + 84LL), 2uLL, (_BYTE *)&v53 + 2, 1);
  sub_1003619AC((char *)(*v11 + 86LL), 2uLL, &v53, 1);
  sub_1003619AC((char *)(*v11 + 88LL), 8uLL, &v66, 1);
  LOBYTE(v11) = sub_10032AF88(v69, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v19 = v66;
  double v51 = (double)SHIWORD(v57) * 0.25;
  double v52 = (double)SHIWORD(v58) * 0.25;
  double v49 = (double)(__int16)v57 * 0.25;
  double v50 = (double)(__int16)v58 * 0.25;
  double v47 = (double)SHIWORD(v56) * 0.25;
  double v48 = (double)(__int16)v56 * 0.25;
  double v45 = (double)SHIWORD(v54) * 0.25;
  double v46 = (double)SHIWORD(v55) * 0.25;
  double v43 = (double)(__int16)v54 * 0.25;
  double v44 = (double)(__int16)v55 * 0.25;
  double v20 = (double)SHIWORD(v53) * 0.25;
  double v42 = (double)(__int16)v53 * 0.25;
  __int16 v21 = __dst;
  __int16 v22 = v68;
  char v23 = v67;
  double v24 = sub_100320600(v65);
  double v25 = sub_100320600(v64);
  double v26 = sub_100320600(v63);
  double v27 = sub_100320600(v62);
  double v28 = sub_100320600(v61);
  double v29 = sub_100320600(v60);
  double v30 = sub_100320600(HIWORD(v59));
  double v31 = sub_100320600((unsigned __int16)v59);
  unint64_t v33 = v64;
  unint64_t v32 = v65;
  unint64_t v35 = v62;
  unint64_t v34 = v63;
  unint64_t v37 = v60;
  unint64_t v36 = v61;
  uint64_t v38 = HIWORD(v59);
  uint64_t v39 = (unsigned __int16)v59;
  *(_WORD *)a9 = v21;
  *(_BYTE *)(a9 + 2) = (_BYTE)v11;
  *(_WORD *)(a9 + 4) = v22;
  *(_BYTE *)(a9 + 6) = v23;
  *(void *)(a9 + 7) = v19;
  *(double *)(a9 + 24) = v24;
  *(double *)(a9 + 32) = v25;
  *(double *)(a9 + 40) = v26;
  *(double *)(a9 + 48) = v27;
  *(double *)(a9 + 56) = v28;
  *(double *)(a9 + 64) = v29;
  *(double *)(a9 + 72) = v30;
  *(double *)(a9 + 80) = v31;
  *(void *)(a9 + 88) = v32;
  *(void *)(a9 + 96) = v33;
  *(void *)(a9 + 104) = v34;
  *(void *)(a9 + 112) = v35;
  *(void *)(a9 + 120) = v36;
  *(void *)(a9 + 128) = v37;
  *(void *)(a9 + 136) = v38;
  *(void *)(a9 + 144) = v39;
  *(double *)(a9 + 152) = v52;
  *(double *)(a9 + 160) = v50;
  *(double *)(a9 + 168) = v51;
  *(double *)(a9 + 176) = v49;
  *(double *)(a9 + 184) = v47;
  *(double *)(a9 + 192) = v48;
  *(double *)(a9 + 200) = v46;
  *(double *)(a9 + 208) = v44;
  *(double *)(a9 + 216) = v45;
  *(double *)(a9 + 224) = v43;
  double result = v42;
  *(double *)(a9 + 232) = v20;
  *(double *)(a9 + 240) = v42;
  *(void *)(a9 + 16) = v19;
  return result;
}

void sub_100324B28(_Unwind_Exception *a1)
{
}

uint64_t sub_100324B3C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  uint64_t v4 = (char *)operator new(0x60uLL);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)uint64_t v4 = off_1007BDF78;
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(v4 + 24) = v5;
  *((void *)v4 + 5) = *(void *)(a2 + 32);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 40);
  *((void *)v4 + 8) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 64);
  *((void *)v4 + 11) = *(void *)(a2 + 80);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_100324BC0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  sub_100130C0C(&v3);
  uint64_t v3 = (void **)(a1 + 40);
  sub_100130C98(&v3);
  return sub_100012390(a1);
}

uint64_t sub_100324C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10032B26C(__dst, v4, v5, v6, v7, v8, v9, v10);
  int v12 = v23;
  char v13 = v22;
  uint64_t v15 = v20;
  uint64_t v14 = v21;
  int v17 = v18;
  int v16 = v19;
  *(_WORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v12;
  *(_BYTE *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 36) = v17;
  return result;
}

uint64_t sub_100324D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  sub_1003619AC((char *)(*(void *)a1 + 4LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*(void *)v2 + 6LL), 2uLL, &v50, 1);
  sub_1003619AC((char *)(*(void *)v2 + 8LL), 1uLL, &v49, 1);
  sub_1003619AC((char *)(*(void *)v2 + 9LL), 2uLL, &v48, 1);
  sub_1003619AC((char *)(*(void *)v2 + 12LL), 4uLL, &v47, 1);
  sub_1003619AC((char *)(*(void *)v2 + 16LL), 8uLL, &v46, 1);
  sub_1003619AC((char *)(*(void *)v2 + 24LL), 2uLL, &v45, 1);
  sub_1003619AC((char *)(*(void *)v2 + 26LL), 2uLL, &v44, 1);
  sub_1003619AC((char *)(*(void *)v2 + 28LL), 4uLL, &v43, 1);
  sub_1003619AC((char *)(*(void *)v2 + 32LL), 2uLL, &v42, 1);
  sub_1003619AC((char *)(*(void *)v2 + 34LL), 2uLL, &v41, 1);
  sub_1003619AC((char *)(*(void *)v2 + 36LL), 1uLL, &v40, 1);
  sub_1003619AC((char *)(*(void *)v2 + 65LL), 1uLL, &v39, 1);
  sub_1003619AC((char *)(*(void *)v2 + 66LL), 1uLL, &v38, 1);
  sub_1003619AC((char *)(*(void *)v2 + 67LL), 1uLL, &v37, 1);
  sub_1003619AC((char *)(*(void *)v2 + 68LL), 2uLL, &v36, 1);
  sub_1003619AC((char *)(*(void *)v2 + 70LL), 1uLL, &v35, 1);
  sub_1003619AC((char *)(*(void *)v2 + 71LL), 1uLL, &v34, 1);
  sub_1003619AC((char *)(*(void *)v2 + 72LL), 1uLL, &v33, 1);
  sub_1003619AC((char *)(*(void *)v2 + 73LL), 1uLL, &v32, 1);
  sub_1003619AC((char *)(*(void *)v2 + 74LL), 2uLL, &v31, 1);
  uint64_t result = sub_10032B26C(__dst, v4, v5, v6, v7, v8, v9, v10);
  __int16 v12 = v50;
  char v13 = v49;
  __int16 v14 = v48;
  int v15 = v47;
  uint64_t v16 = v46;
  __int16 v17 = v45;
  __int16 v18 = v44;
  int v19 = v43;
  __int16 v20 = v42;
  __int16 v21 = v41;
  char v22 = v40;
  char v23 = v39;
  char v24 = v38;
  char v25 = v37;
  __int16 v26 = v36;
  char v27 = v35;
  char v28 = v34;
  LOBYTE(v2) = v33;
  char v29 = v32;
  __int16 v30 = v31;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v12;
  *(_BYTE *)(a2 + 4) = v13;
  *(_WORD *)(a2 + 6) = v14;
  *(_DWORD *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(_WORD *)(a2 + 24) = v17;
  *(_WORD *)(a2 + 26) = v18;
  *(_DWORD *)(a2 + 28) = v19;
  *(_WORD *)(a2 + 32) = v20;
  *(_WORD *)(a2 + 34) = v21;
  *(_BYTE *)(a2 + 36) = v22;
  *(_BYTE *)(a2 + 37) = v23;
  *(_BYTE *)(a2 + 38) = v24;
  *(_BYTE *)(a2 + 39) = v25;
  *(_WORD *)(a2 + 40) = v26;
  *(_BYTE *)(a2 + 42) = v27;
  *(_BYTE *)(a2 + 43) = v28;
  *(_BYTE *)(a2 + 44) = v2;
  *(_BYTE *)(a2 + 45) = v29;
  *(_WORD *)(a2 + 46) = v30;
  return result;
}

uint64_t sub_100324FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  sub_1003619AC((char *)(*(void *)a1 + 4LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*(void *)v2 + 6LL), 2uLL, &v58, 1);
  sub_1003619AC((char *)(*(void *)v2 + 8LL), 1uLL, &v57, 1);
  sub_1003619AC((char *)(*(void *)v2 + 9LL), 2uLL, &v56, 1);
  sub_1003619AC((char *)(*(void *)v2 + 11LL), 1uLL, &v55, 1);
  sub_1003619AC((char *)(*(void *)v2 + 12LL), 4uLL, &v54, 1);
  sub_1003619AC((char *)(*(void *)v2 + 16LL), 8uLL, &v53, 1);
  sub_1003619AC((char *)(*(void *)v2 + 24LL), 2uLL, &v52, 1);
  sub_1003619AC((char *)(*(void *)v2 + 26LL), 2uLL, &v51, 1);
  sub_1003619AC((char *)(*(void *)v2 + 28LL), 4uLL, &v50, 1);
  sub_1003619AC((char *)(*(void *)v2 + 32LL), 2uLL, &v49, 1);
  sub_1003619AC((char *)(*(void *)v2 + 34LL), 2uLL, &v48, 1);
  sub_1003619AC((char *)(*(void *)v2 + 36LL), 1uLL, &v47, 1);
  sub_1003619AC((char *)(*(void *)v2 + 37LL), 1uLL, &v46, 1);
  sub_1003619AC((char *)(*(void *)v2 + 38LL), 2uLL, &v45, 1);
  sub_1003619AC((char *)(*(void *)v2 + 40LL), 4uLL, &v44, 1);
  sub_1003619AC((char *)(*(void *)v2 + 44LL), 4uLL, &v43, 1);
  sub_1003619AC((char *)(*(void *)v2 + 48LL), 1uLL, &v42, 1);
  sub_1003619AC((char *)(*(void *)v2 + 49LL), 2uLL, &v41, 1);
  sub_1003619AC((char *)(*(void *)v2 + 51LL), 1uLL, &v40, 1);
  sub_1003619AC((char *)(*(void *)v2 + 52LL), 2uLL, &v39, 1);
  sub_1003619AC((char *)(*(void *)v2 + 54LL), 1uLL, &v38, 1);
  sub_1003619AC((char *)(*(void *)v2 + 55LL), 2uLL, &v37, 1);
  sub_1003619AC((char *)(*(void *)v2 + 57LL), 1uLL, &v36, 1);
  sub_1003619AC((char *)(*(void *)v2 + 58LL), 2uLL, &v35, 1);
  uint64_t result = sub_10032B26C(__dst, v4, v5, v6, v7, v8, v9, v10);
  __int16 v12 = v58;
  char v13 = v57;
  __int16 v14 = v56;
  char v15 = v55;
  int v16 = v54;
  uint64_t v17 = v53;
  __int16 v18 = v52;
  __int16 v19 = v51;
  int v20 = v50;
  __int16 v21 = v49;
  __int16 v22 = v48;
  char v23 = v47;
  char v24 = v46;
  __int16 v25 = v45;
  int v27 = v43;
  int v26 = v44;
  char v28 = v42;
  LOWORD(v2) = v41;
  char v29 = v40;
  __int16 v30 = v39;
  char v31 = v38;
  __int16 v32 = v37;
  char v33 = v36;
  __int16 v34 = v35;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v12;
  *(_BYTE *)(a2 + 4) = v13;
  *(_WORD *)(a2 + 6) = v14;
  *(_BYTE *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v16;
  *(void *)(a2 + 16) = v17;
  *(_WORD *)(a2 + 24) = v18;
  *(_WORD *)(a2 + 26) = v19;
  *(_DWORD *)(a2 + 28) = v20;
  *(_WORD *)(a2 + 32) = v21;
  *(_WORD *)(a2 + 34) = v22;
  *(_BYTE *)(a2 + 36) = v23;
  *(_BYTE *)(a2 + 37) = v24;
  *(_WORD *)(a2 + 38) = v25;
  *(_DWORD *)(a2 + 40) = v26;
  *(_DWORD *)(a2 + 44) = v27;
  *(_BYTE *)(a2 + 48) = v28;
  *(_WORD *)(a2 + 50) = v2;
  *(_BYTE *)(a2 + 52) = v29;
  *(_WORD *)(a2 + 54) = v30;
  *(_BYTE *)(a2 + 56) = v31;
  *(_WORD *)(a2 + 58) = v32;
  *(_BYTE *)(a2 + 60) = v33;
  *(_WORD *)(a2 + 62) = v34;
  return result;
}

uint64_t sub_100325338(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_10036193C((unsigned int **)a2);
  unint64_t v5 = sub_100361914(v4);
  int v26 = v5;
  __int16 v27 = WORD2(v5);
  if (!sub_10032A06C((uint64_t)&v26))
  {
    unint64_t v20 = *(void *)(a1 + 128);
    __int16 v19 = (unint64_t *)(a1 + 128);
    v19[1] = v20;
    sub_1000C939C(v19, *(void *)(a2 + 8) - *(void *)a2);
    __int16 v21 = *(_BYTE **)(a2 + 8);
    __int16 v22 = (_BYTE *)(*(void *)a2 + 4LL);
    char v28 = v19;
    while (v22 != v21)
      sub_100327338(&v28, v22++);
    return 1LL;
  }

  BOOL v6 = sub_10032A094((uint64_t)&v26);
  unint64_t v14 = *(void *)(a1 + 128);
  uint64_t v15 = *(void *)(a1 + 136);
  int v16 = (unint64_t *)(a1 + 128);
  if (v6)
  {
    if (v14 != v15)
    {
      sub_10032C51C( "%s: fDebugLogBufferData not emptied: int size = %zu",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"collectLogBufferDataEvent");
      unint64_t v14 = *v16;
    }

    *(void *)(a1 + 136) = v14;
    uint64_t v17 = *(_BYTE **)(a2 + 8);
    __int16 v18 = (_BYTE *)(*(void *)a2 + 4LL);
    char v28 = v16;
    while (v18 != v17)
      sub_100327338(&v28, v18++);
    return 0LL;
  }

  if (v14 == v15)
  {
    sub_10032C51C( "%s: start of this multipart packet missing, so this packet is discarded: int size = %zu",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"collectLogBufferDataEvent");
  }

  else
  {
    char v23 = *(_BYTE **)(a2 + 8);
    char v24 = (_BYTE *)(*(void *)a2 + 4LL);
    char v28 = v16;
    while (v24 != v23)
      sub_100327338(&v28, v24++);
  }

  return 0LL;
}

uint64_t sub_10032549C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return sub_100012390(a1);
}

unint64_t sub_1003254CC(uint64_t a1)
{
  int __dst = 0;
  unsigned __int16 v11 = 0;
  sub_1003619AC((char *)(*(void *)a1 + 4LL), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*(void *)a1 + 6LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*(void *)a1 + 8LL), 2uLL, &v11, 1);
  unsigned int v9 = sub_10032B26C(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)(unsigned __int16)__dst << 16) | ((unint64_t)v11 << 32);
}

void sub_10032555C(void *a1, _OWORD *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[8];
      if (!v7) {
        goto LABEL_18;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v10 = off_1007BE278;
      *((void *)v10 + 1) = v7;
      *((void *)v10 + 2) = v6;
      *(_OWORD *)(v10 + 24) = *a2;
      char v23 = v10;
      uint64_t v11 = a1[10];
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v12 = off_1007BE278;
      *((void *)v12 + 1) = v7;
      *((void *)v12 + 2) = v6;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v10 + 24);
      __int16 v21 = v12;
      sub_100320EB4(v11, (uint64_t)v20);
      unint64_t v14 = v21;
      if (v21 == v20)
      {
        uint64_t v15 = 4LL;
        unint64_t v14 = v20;
      }

      else
      {
        if (!v21) {
          goto LABEL_13;
        }
        uint64_t v15 = 5LL;
      }

      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_13:
      int v16 = v23;
      if (v23 == v22)
      {
        uint64_t v17 = 4LL;
        int v16 = v22;
      }

      else
      {
        if (!v23) {
          goto LABEL_18;
        }
        uint64_t v17 = 5LL;
      }

      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
      __int16 v18 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_100325708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  __int16 v25 = a19;
  if (a19 == v23)
  {
    uint64_t v26 = 4LL;
    __int16 v25 = &a16;
  }

  else
  {
    if (!a19) {
      goto LABEL_6;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_6:
  __int16 v27 = a23;
  if (a23 == &a20)
  {
    uint64_t v28 = 4LL;
    __int16 v27 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_11;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(char *))(*(void *)v27 + 8 * v28))(v27);
LABEL_11:
  sub_100012390((uint64_t)&a14);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_100325794(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_1003257B8@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 != 68LL)
  {
    sub_10032C51C("Range debug V2 event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Range debug V2 event not of expected size");
  }

  __int16 __dst = 0;
  unsigned __int8 v35 = 0;
  __int16 v34 = 0;
  uint64_t v33 = 0LL;
  int v32 = 0;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  sub_1003619AC((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 1uLL, &v35, 1);
  sub_1003619AC((char *)(*a1 + 7LL), 2uLL, &v34, 1);
  sub_1003619AC((char *)(*a1 + 9LL), 8uLL, &v33, 1);
  sub_1003619AC((char *)(*a1 + 17LL), 4uLL, &v32, 1);
  sub_1003619AC((char *)(*a1 + 28LL), 5uLL, &v31, 1);
  sub_1003619AC((char *)(*a1 + 33LL), 5uLL, &v30, 1);
  sub_1003619AC((char *)(*a1 + 38LL), 5uLL, &v29, 1);
  sub_1003619AC((char *)(*a1 + 43LL), 5uLL, &v28, 1);
  uint64_t result = sub_10032AF88(v35, v12, v13, v14, v15, v16, v17, v18);
  __int16 v20 = v34;
  uint64_t v21 = v33;
  int v22 = v32;
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  uint64_t v26 = v28;
  uint64_t v25 = v29;
  *(_WORD *)a9 = __dst;
  *(_BYTE *)(a9 + 2) = result;
  *(_WORD *)(a9 + 4) = v20;
  *(void *)(a9 + 8) = v21;
  *(_DWORD *)(a9 + 16) = v22;
  *(void *)(a9 + 24) = v23;
  *(void *)(a9 + 32) = v24;
  *(void *)(a9 + 40) = v25;
  *(void *)(a9 + 48) = v26;
  return result;
}

void sub_100325960(_Unwind_Exception *a1)
{
}

uint64_t sub_100325974@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 __dst = 0;
  uint64_t v18 = 0LL;
  __int16 v17 = 0;
  char v16 = 0;
  if (a1[1] - *a1 != 17LL) {
    sub_1003ACF54();
  }
  sub_1003619AC((char *)(*a1 + 4LL), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 8uLL, &v18, 1);
  sub_1003619AC((char *)(*a1 + 14LL), 1uLL, (_BYTE *)&v17 + 1, 1);
  sub_1003619AC((char *)(*a1 + 15LL), 1uLL, &v17, 1);
  sub_1003619AC((char *)(*a1 + 16LL), 1uLL, &v16, 1);
  uint64_t result = sub_10032B26C(__dst, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = v18;
  char v13 = HIBYTE(v17);
  char v14 = v17;
  char v15 = v16;
  *(_WORD *)a2 = result;
  *(void *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 17) = v14;
  *(_BYTE *)(a2 + 18) = v15;
  return result;
}

void sub_100325A60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v11 = *((_DWORD *)sub_100005150() + 187);
  uint64_t v154 = a2;
  if (v11 == 1)
  {
    uint64_t v35 = *a1;
    __int128 v36 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)uint64_t v155 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v155[16] = v36;
    *(_OWORD *)&v155[30] = *(_OWORD *)(v35 + 34);
    __int16 v151 = *(_WORD *)&v155[2];
    __int16 v153 = sub_10032B26C(*(unsigned __int16 *)v155, v4, v5, v6, v7, v8, v9, v10);
    char v149 = sub_10032AF88(v155[4], v37, v38, v39, v40, v41, v42, v43);
    double v44 = sub_1003205EC(*(unint64_t *)&v155[5]);
    uint64_t v147 = *(void *)&v155[15];
    __int16 v142 = *(_WORD *)&v155[23];
    __int16 v144 = *(_WORD *)&v155[13];
    char v138 = v155[27];
    __int16 v140 = *(_WORD *)&v155[25];
    char v136 = v155[28];
    char v134 = sub_10032AD20(v155[29], 1);
    char v131 = v155[31];
    char v133 = sub_10032AD20(v155[30], 1);
    char v129 = sub_10032B870(v155[32], v45, v46, v47, v48, v49, v50, v51);
    char v128 = v155[35];
    int v126 = *(__int16 *)&v155[33];
    char v127 = v155[36];
    char v59 = sub_10032B054(v155[37], v52, v53, v54, v55, v56, v57, v58);
    char v73 = sub_10032BABC(v155[38], 1LL, v60, v61, v62, v63, v64, v65);
    uint64_t v74 = v155[45];
    unsigned __int8 v156 = 0LL;
    uint64_t v157 = 0LL;
    v158[0] = 0LL;
    if (v155[45])
    {
      uint64_t v75 = 0LL;
      do
      {
        unsigned int v76 = &v155[3 * v75];
        __int16 v77 = *(_WORD *)(v76 + 47);
        char v78 = sub_10032B870(v76[46], v66, v67, v68, v69, v70, v71, v72);
        char v79 = v78;
        double v80 = (double)v77 * 0.25;
        uint64_t v81 = v157;
        if ((unint64_t)v157 >= v158[0])
        {
          uint64_t v83 = (v157 - v156) >> 4;
          unint64_t v84 = v83 + 1;
          uint64_t v85 = v158[0] - (void)v156;
          else {
            unint64_t v66 = v84;
          }
          if (v66) {
            __int128 v86 = (char *)sub_10011E44C((uint64_t)v158, v66);
          }
          else {
            __int128 v86 = 0LL;
          }
          __int128 v87 = &v86[16 * v83];
          *__int128 v87 = v79;
          *((double *)v87 + 1) = v80;
          double v89 = v156;
          unsigned int v88 = v157;
          double v90 = v87;
          if (v157 != v156)
          {
            do
            {
              *((_OWORD *)v90 - 1) = *((_OWORD *)v88 - 1);
              v90 -= 16;
              v88 -= 16;
            }

            while (v88 != v89);
            unsigned int v88 = v156;
          }

          __int128 v82 = v87 + 16;
          unsigned __int8 v156 = v90;
          uint64_t v157 = v87 + 16;
          v158[0] = &v86[16 * v66];
          if (v88) {
            operator delete(v88);
          }
        }

        else
        {
          *uint64_t v157 = v78;
          *((double *)v81 + 1) = v80;
          __int128 v82 = v81 + 16;
        }

        uint64_t v157 = v82;
        ++v75;
      }

      while (v75 != v74);
    }

    sub_1003225F8( v154,  v153,  v151,  v149,  v147,  v144,  v142,  v140,  v44,  (double)v126 * 0.25,  v138,  v136,  v134,  v133,  v131,  v129,  v128,  v127,  v59,  v73,  (uint64_t)&v156);
  }

  else
  {
    if (v11 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Unknown HSI version");
    }

    uint64_t v12 = *a1;
    __int128 v13 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)uint64_t v155 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v155[16] = v13;
    *(_OWORD *)&v155[31] = *(_OWORD *)(v12 + 35);
    __int16 v14 = sub_10032B26C(*(unsigned __int16 *)v155, v4, v5, v6, v7, v8, v9, v10);
    char v22 = sub_10032AF88(v155[4], v15, v16, v17, v18, v19, v20, v21);
    double v30 = sub_1003205EC(*(unint64_t *)&v155[5]);
    uint64_t v31 = *(void *)&v155[15];
    __int16 v32 = *(_WORD *)&v155[13];
    char v33 = 9;
    __int16 v150 = *(_WORD *)&v155[25];
    __int16 v152 = *(_WORD *)&v155[23];
    char v148 = v155[27];
    char v146 = v155[28];
    if (v155[29])
    {
      char v34 = 9;
      if (v155[30])
      {
        char v34 = sub_10032AD20(v155[29], 2);
        char v33 = sub_10032AD20(v155[30], 2);
      }
    }

    else
    {
      char v34 = 9;
    }

    char v145 = v33;
    char v91 = v155[31];
    int v135 = *(__int16 *)&v155[33];
    char v141 = v155[35];
    char v143 = sub_10032B870(v155[32], v23, v24, v25, v26, v27, v28, v29);
    char v139 = v155[36];
    char v137 = sub_10032B054(v155[37], v92, v93, v94, v95, v96, v97, v98);
    unint64_t v99 = sub_10032BCC4(*(unsigned __int16 *)&v155[38]);
    if (!(_BYTE)v100 || (char v107 = BYTE1(v99), (v99 & 0xFF0000) == 0)) {
      sub_1003ACF7C();
    }
    char v130 = v22;
    __int16 v132 = *(_WORD *)&v155[2];
    uint64_t v108 = v155[46];
    unsigned __int8 v156 = 0LL;
    uint64_t v157 = 0LL;
    v158[0] = 0LL;
    if (v155[46])
    {
      uint64_t v109 = 0LL;
      do
      {
        __int16 v110 = &v155[3 * v109];
        __int16 v111 = *((_WORD *)v110 + 24);
        char v112 = sub_10032B870(v110[47], v100, v101, v102, v103, v104, v105, v106);
        char v113 = v112;
        double v114 = (double)v111 * 0.25;
        uint64_t v115 = v157;
        if ((unint64_t)v157 >= v158[0])
        {
          uint64_t v117 = (v157 - v156) >> 4;
          unint64_t v118 = v117 + 1;
          uint64_t v119 = v158[0] - (void)v156;
          else {
            unint64_t v100 = v118;
          }
          if (v100) {
            uint64_t v120 = (char *)sub_10011E44C((uint64_t)v158, v100);
          }
          else {
            uint64_t v120 = 0LL;
          }
          uint64_t v121 = &v120[16 * v117];
          *uint64_t v121 = v113;
          *((double *)v121 + 1) = v114;
          uint64_t v123 = v156;
          uint64_t v122 = v157;
          uint64_t v124 = v121;
          if (v157 != v156)
          {
            do
            {
              *((_OWORD *)v124 - 1) = *((_OWORD *)v122 - 1);
              v124 -= 16;
              v122 -= 16;
            }

            while (v122 != v123);
            uint64_t v122 = v156;
          }

          uint64_t v116 = v121 + 16;
          unsigned __int8 v156 = v124;
          uint64_t v157 = v121 + 16;
          v158[0] = &v120[16 * v100];
          if (v122) {
            operator delete(v122);
          }
        }

        else
        {
          *uint64_t v157 = v112;
          *((double *)v115 + 1) = v114;
          uint64_t v116 = v115 + 16;
        }

        uint64_t v157 = v116;
        ++v109;
      }

      while (v109 != v108);
    }

    sub_1003225F8( v154,  v14,  v132,  v130,  v31,  v32,  v152,  v150,  v30,  (double)v135 * 0.25,  v148,  v146,  v34,  v145,  v91,  v143,  v141,  v139,  v137,  v107,  (uint64_t)&v156);
  }

  if (v156)
  {
    uint64_t v157 = v156;
    operator delete(v156);
  }

void sub_100326024(_Unwind_Exception *a1)
{
}

void *sub_10032606C(void *a1)
{
  *a1 = off_1007BDDF8;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }

  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003260B0(void *a1)
{
  *a1 = off_1007BDDF8;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }

  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_1003260F4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1E0uLL);
  *uint64_t v2 = off_1007BDDF8;
  sub_1003261F4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100326134(_Unwind_Exception *a1)
{
}

uint64_t sub_100326148(uint64_t a1, void *a2)
{
  *a2 = off_1007BDDF8;
  return sub_1003261F4((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100326164(uint64_t a1)
{
  return sub_100324570(a1 + 8);
}

void sub_10032616C(void *a1)
{
}

uint64_t sub_100326194(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003261AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003261E8()
{
}

uint64_t sub_1003261F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __int128 v7 = *(_OWORD *)(a2 + 16);
  __int128 v8 = *(_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_10011B618( (void *)(a1 + 56),  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x181uLL);
  return a1;
}

void sub_10032628C(_Unwind_Exception *a1)
{
}

void *sub_1003262A0(void *a1)
{
  *a1 = off_1007BDE78;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003262D0(void *a1)
{
  *a1 = off_1007BDE78;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100326300(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BDE78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    uint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_100326360(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BDE78;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  int v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_1003263A0(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_1003263A8(void *a1)
{
}

uint64_t sub_1003263D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003263E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326424()
{
}

void *sub_100326430(void *a1)
{
  *a1 = off_1007BDEF8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100326460(void *a1)
{
  *a1 = off_1007BDEF8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100326490(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x110uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BDEF8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  *((void *)v2 + 33) = *(void *)(a1 + 264);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_100326560(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BDEF8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __int128 v6 = *(_OWORD *)(a1 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  __int128 v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 24) = v6;
  __int128 v9 = *(_OWORD *)(a1 + 88);
  __int128 v10 = *(_OWORD *)(a1 + 104);
  __int128 v11 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v11;
  *(_OWORD *)(a2 + 104) = v10;
  *(_OWORD *)(a2 + 88) = v9;
  __int128 v12 = *(_OWORD *)(a1 + 152);
  __int128 v13 = *(_OWORD *)(a1 + 168);
  __int128 v14 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 184) = v14;
  *(_OWORD *)(a2 + 168) = v13;
  *(_OWORD *)(a2 + 152) = v12;
  __n128 result = *(__n128 *)(a1 + 216);
  __int128 v16 = *(_OWORD *)(a1 + 232);
  __int128 v17 = *(_OWORD *)(a1 + 248);
  *(void *)(a2 + 264) = *(void *)(a1 + 264);
  *(_OWORD *)(a2 + 248) = v17;
  *(_OWORD *)(a2 + 232) = v16;
  *(__n128 *)(a2 + 216) = result;
  return result;
}

uint64_t sub_100326610(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100326618(void *a1)
{
}

uint64_t sub_100326640(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100326658(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326694()
{
}

uint64_t sub_1003266A0(uint64_t a1)
{
  *(void *)a1 = off_1007BDF78;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 72);
  sub_100130C0C(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_100130C98(&v4);
  sub_100012390(v2);
  return a1;
}

void sub_100326700(char *a1)
{
  *(void *)a1 = off_1007BDF78;
  uint64_t v2 = (uint64_t)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 72);
  sub_100130C0C(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_100130C98(&v3);
  sub_100012390(v2);
  operator delete(a1);
}

void *sub_100326764(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = off_1007BDF78;
  sub_100326864((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003267A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1003267B8(uint64_t a1, void *a2)
{
  *a2 = off_1007BDF78;
  return sub_100326864((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1003267D4(uint64_t a1)
{
  return sub_100324BC0(a1 + 8);
}

void sub_1003267DC(void *a1)
{
}

uint64_t sub_100326804(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_10032681C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326858()
{
}

uint64_t sub_100326864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    unint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __int128 v7 = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_1001306E8( (void *)(a1 + 40),  *(__int16 **)(a2 + 40),  *(__int16 **)(a2 + 48),  0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_100130D1C( (void *)(a1 + 64),  *(void *)(a2 + 64),  *(void *)(a2 + 72),  (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 5);
  return a1;
}

void sub_100326918(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100326940(void *a1)
{
  *a1 = off_1007BDFF8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100326970(void *a1)
{
  *a1 = off_1007BDFF8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_1003269A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BDFF8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_100326A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BDFF8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100326A50(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100326A58(void *a1)
{
}

uint64_t sub_100326A80(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 72LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100326A98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326AD4()
{
}

void *sub_100326AE0(void *a1)
{
  *a1 = off_1007BE078;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100326B10(void *a1)
{
  *a1 = off_1007BE078;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100326B40(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BE078;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_100326BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BE078;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100326BF0(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100326BF8(void *a1)
{
}

uint64_t sub_100326C20(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 80LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100326C38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326C74()
{
}

void *sub_100326C80(void *a1)
{
  *a1 = off_1007BE0F8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100326CB0(void *a1)
{
  *a1 = off_1007BE0F8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100326CE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BE0F8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_100326D50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BE0F8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  __int128 v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100326DA0(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100326DA8(void *a1)
{
}

uint64_t sub_100326DD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 88LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100326DE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326E24()
{
}

void *sub_100326E30(void *a1)
{
  *a1 = off_1007BE178;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100326E74(void *a1)
{
  *a1 = off_1007BE178;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100326EB8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = off_1007BE178;
  sub_100326FB8(v2 + 1, v1);
  return v2;
}

void sub_100326EF8(_Unwind_Exception *a1)
{
}

void *sub_100326F0C(uint64_t a1, void *a2)
{
  *a2 = off_1007BE178;
  return sub_100326FB8(a2 + 1, a1 + 8);
}

uint64_t sub_100326F28(uint64_t a1)
{
  return sub_10032549C(a1 + 8);
}

void sub_100326F30(void *a1)
{
}

uint64_t sub_100326F58(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 56LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100326F70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100326FAC()
{
}

void *sub_100326FB8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  sub_1001309C0(a1 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  return a1;
}

void sub_100327014(_Unwind_Exception *a1)
{
}

void *sub_100327028(void *a1)
{
  *a1 = off_1007BE1F8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100327058(void *a1)
{
  *a1 = off_1007BE1F8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100327088(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_1007BE1F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_1003270E8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BE1F8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  int v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100327128(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100327130(void *a1)
{
}

uint64_t sub_100327158(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100327170(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003271AC()
{
}

void *sub_1003271B8(void *a1)
{
  *a1 = off_1007BE278;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003271E8(void *a1)
{
  *a1 = off_1007BE278;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100327218(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BE278;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100327270(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BE278;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1003272A8(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_1003272B0(void *a1)
{
}

uint64_t sub_1003272D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003272F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10032732C()
{
}

unint64_t **sub_100327338(unint64_t **a1, _BYTE *a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = (_BYTE *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    __int128 v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    __int128 v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }

    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }

      while (v6 != (_BYTE *)v8);
      unint64_t v6 = (_BYTE *)*v4;
    }

    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *unint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }

  v4[1] = v7;
  return a1;
}

void sub_10032743C(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t __dst = 0LL;
  uint64_t v205 = 0LL;
  unint64_t v206 = 0LL;
  unint64_t v207 = 0LL;
  uint64_t v202 = 0LL;
  v203 = 0LL;
  unint64_t v204 = 0LL;
  if (sub_10032A59C(*a1, 5))
  {
    sub_1000065CC(v200, "CIRData");
    if (a2[1] != *a2)
    {
      unint64_t v10 = 0LL;
      uint64_t v196 = 1LL;
      unint64_t v194 = 256LL;
      do
      {
        sub_100045754((uint64_t)&v209);
        unint64_t v11 = sub_100046B94(&v209.__r_.__value_.__l.__cap_, (uint64_t)"CIR packet part ", 16LL);
        size_t v12 = (void *)std::ostream::operator<<(v11, v196);
        sub_100046B94(v12, (uint64_t)":", 1LL);
        std::stringbuf::str(&v208, &v210);
        sub_100045754((uint64_t)__src);
        if ((v208.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v13 = &v208;
        }
        else {
          unint64_t v13 = (std::stringbuf::string_type *)v208.__r_.__value_.__r.__words[0];
        }
        if ((v208.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = v208.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = v208.__r_.__value_.__l.__size_;
        }
        uint64_t v15 = sub_100046B94(&__src[2], (uint64_t)v13, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
        char v16 = std::locale::use_facet(&v214, &std::ctype<char>::id);
        uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
        std::locale::~locale(&v214);
        std::ostream::put(v15, v17);
        std::ostream::flush(v15);
        unint64_t v18 = v10 + 256;
        unint64_t v19 = a2[1] - *a2;
        if (v19 >= v10 + 256) {
          unint64_t v20 = v10 + 256;
        }
        else {
          unint64_t v20 = a2[1] - *a2;
        }
        if (v20 > v10)
        {
          if (v194 >= v19) {
            unint64_t v21 = a2[1] - *a2;
          }
          else {
            unint64_t v21 = v194;
          }
          do
          {
            v213.__r_.__value_.__s.__data_[0] = 48;
            char v22 = sub_100138E6C(&__src[2], (char *)&v213);
            uint64_t v23 = *v22;
            *(uint64_t *)((char *)v22 + *(void *)(v23 - 24) + 24) = 2LL;
            uint64_t v24 = (void *)std::ostream::operator<<(v22, *(unsigned __int8 *)(*a2 + v10));
            sub_100046B94(v24, (uint64_t)" ", 1LL);
            if ((~(_BYTE)v10 & 0xF) == 0 || v21 - 1 == v10)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__src[2] + *((void *)__src[2] - 3)));
              uint64_t v25 = std::locale::use_facet(&v214, &std::ctype<char>::id);
              uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
              std::locale::~locale(&v214);
              std::ostream::put(&__src[2], v26);
              std::ostream::flush(&__src[2]);
            }

            ++v10;
          }

          while (v21 != v10);
        }

        std::stringbuf::str(&v213, (const std::stringbuf *)&__src[3]);
        char v34 = &v213;
        if ((v213.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v34 = (std::stringbuf::string_type *)v213.__r_.__value_.__r.__words[0];
        }
        sub_10032C3DC("%s", v27, v28, v29, v30, v31, v32, v33, (uint64_t)v34);
        __src[0] = v192;
        *(void **)((char *)__src + *((void *)v192 - 3)) = v190;
        __src[2] = v188;
        if (SHIBYTE(v219[0]) < 0) {
          operator delete(*((void **)&v218 + 1));
        }
        std::streambuf::~streambuf(&__src[3]);
        std::ios::~ios(&v220);
        v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
        *(std::string::size_type *)((char *)v209.__r_.__value_.__r.__words + *((void *)v192 - 3)) = (std::string::size_type)v190;
        v209.__r_.__value_.__l.__cap_ = (std::string::size_type)v188;
        uint64_t v196 = (v196 + 1);
        std::streambuf::~streambuf(&v210);
        std::ios::~ios(&v211);
        v194 += 256LL;
        unint64_t v10 = v18;
      }

      while (v18 < a2[1] - *a2);
    }

    if (v201 < 0) {
      operator delete(v200[0]);
    }
  }

  uint64_t v35 = *a2;
  unint64_t v36 = a2[1] - *a2;
  if (!v36)
  {
LABEL_220:
    sub_10032C51C("RoseCIRDecoder::decodeRangeCIREventVersion2: no NumPackets field", v3, v4, v5, v6, v7, v8, v9, v176);
    goto LABEL_221;
  }

  unint64_t v37 = 0LL;
  int v187 = 0;
  __int16 v182 = 0;
  int v186 = 0;
  char v180 = 0;
  int v185 = 0;
  int v38 = 0;
  int v184 = 0;
  char v183 = 0;
  int v193 = 0;
  uint64_t v39 = 0LL;
  int v195 = 0;
  int v197 = 0;
  p_uint64_t size = &v209.__r_.__value_.__l.__size_;
  while (2)
  {
    unint64_t v41 = v36 - v37;
    if (v36 - v37 <= 3)
    {
      sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %zu for tag and len",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v36 - v37);
      goto LABEL_221;
    }

    LOWORD(v200[0]) = 0;
    LOWORD(v214.__locale_) = 0;
    sub_1003619AC((char *)(v35 + v37), 2uLL, v200, 1);
    sub_1003619AC((char *)(v37 + *a2 + 2), 2uLL, &v214, 1);
    if (!LOWORD(v214.__locale_))
    {
      sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: got 0 length for tag %hu",  v42,  v43,  v44,  v45,  v46,  v47,  v48,  LOWORD(v200[0]));
      goto LABEL_221;
    }

    if (v41 - 4 < LOWORD(v214.__locale_))
    {
      sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %hu for val",  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v41 - 4);
      goto LABEL_221;
    }

    unint64_t v49 = v37 + 4;
    switch(LOWORD(v200[0]))
    {
      case 0x100:
        sub_10032C124("decodeRangeCIREventVersion2: SessionId", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v214.__locale_) >= 3uLL) {
          __assert_rtn("decodeSessionId", "roseCIRDataDecoderV2.cpp", 306, "len <= sizeof sessionId");
        }
        sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
        __int16 v182 = (__int16)__src[0];
        int v187 = 1;
        goto LABEL_193;
      case 0x101:
        sub_10032C124("decodeRangeCIREventVersion2: SessionType", v42, v43, v44, v45, v46, v47, v48, v176);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v214.__locale_) >= 2uLL) {
          __assert_rtn("decodeSessionType", "roseCIRDataDecoderV2.cpp", 314, "len <= sizeof sessionTypeInt");
        }
        sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
        char v180 = sub_10032AF88(LOBYTE(__src[0]), v81, v82, v83, v84, v85, v86, v87);
        int v186 = 1;
        goto LABEL_193;
      case 0x102:
        sub_10032C124("decodeRangeCIREventVersion2: CycleIndex", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v214.__locale_) >= 3uLL) {
          __assert_rtn("decodeCycleIdx", "roseCIRDataDecoderV2.cpp", 322, "len <= sizeof cycleIdx");
        }
        sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
        int v38 = LOWORD(__src[0]);
        int v185 = 1;
        goto LABEL_193;
      case 0x103:
        sub_10032C124("decodeRangeCIREventVersion2: DeviceIndex", v42, v43, v44, v45, v46, v47, v48, v176);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v214.__locale_) >= 2uLL) {
          __assert_rtn("decodeDeviceIdx", "roseCIRDataDecoderV2.cpp", 330, "len <= sizeof deviceIdx");
        }
        sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
        char v183 = (char)__src[0];
        int v184 = 1;
        goto LABEL_193;
      case 0x104:
        sub_100328F98(a2, v37 + 4, LOWORD(v214.__locale_), (unint64_t *)__src);
        else {
          size_t v53 = (char *)__src[1] - (char *)__src[0];
        }
        memcpy(&__dst, __src[0], v53);
        sub_1000065CC(&v213, "");
        sub_1000065CC(&v208, "");
        sub_100361C98((uint64_t)&v213, (uint64_t)&__dst, 8uLL, 0x10u, (uint64_t)&v208, &v209);
        sub_10032C124( "decodeRangeCIREventVersion2: MacAddress: len %hu, val: %s",  v54,  v55,  v56,  v57,  v58,  v59,  v60,  LOWORD(v214.__locale_));
        uint64_t v61 = __src[0];
        if (!__src[0]) {
          goto LABEL_193;
        }
        __src[1] = __src[0];
        goto LABEL_192;
      case 0x105:
        sub_10032C124("decodeRangeCIREventVersion2: NumPackets", v42, v43, v44, v45, v46, v47, v48, v176);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v214.__locale_) >= 3uLL) {
          __assert_rtn("decodeNumPackets", "roseCIRDataDecoderV2.cpp", 349, "len <= sizeof numPackets");
        }
        sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
        uint64_t v39 = LOWORD(__src[0]);
        int v193 = 1;
        goto LABEL_193;
      case 0x106:
        sub_10032C124("decodeRangeCIREventVersion2: PacketContainer", v42, v43, v44, v45, v46, v47, v48, v176);
        if (!v193)
        {
          __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketContainer tag but no NumPackets tag";
          goto LABEL_231;
        }

        if (v195) {
          int v102 = v197 + 1;
        }
        else {
          int v102 = 0;
        }
        sub_10032C124( "decodeRangeCIREventVersion2: PacketContainer: PacketIdx %hu",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  (unsigned __int16)v102);
        if ((unsigned __int16)v102 >= (unsigned __int16)v39)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: currentPacketIdx %hu out of range: expected NumPackets %hu",  v103,  v104,  v105,  v106,  v107,  v108,  v109,  (unsigned __int16)v102);
          goto LABEL_221;
        }

        *(void *)&__int128 v220 = 0LL;
        memset(v219, 0, sizeof(v219));
        __int128 v218 = 0u;
        memset(v217, 0, sizeof(v217));
        memset(__src, 0, sizeof(__src));
        unint64_t v110 = v206;
        if (v206 >= v207)
        {
          uint64_t v111 = sub_1003295E4(&v205, (int *)__src);
        }

        else
        {
          sub_1003296EC((uint64_t)&v207, v206, (int *)__src);
          uint64_t v111 = v110 + 136;
        }

        unint64_t v206 = v111;
        v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219[1];
        sub_100130C0C((void ***)&v209);
        if (v217[1])
        {
          v217[2] = v217[1];
          operator delete(v217[1]);
        }

        if (__src[4])
        {
          __src[5] = __src[4];
          operator delete(__src[4]);
        }

        if (__src[1])
        {
          __src[2] = __src[1];
          operator delete(__src[1]);
        }

        int v195 = 1;
        int v197 = v102;
LABEL_193:
        unint64_t v37 = v49 + LOWORD(v214.__locale_);
        uint64_t v35 = *a2;
        unint64_t v36 = a2[1] - *a2;
        if (v37 < v36) {
          continue;
        }
        if (v37 > v36)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: readIdx %zu exceeds packet size %zu",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v49 + LOWORD(v214.__locale_));
          goto LABEL_221;
        }

        if (!v193) {
          goto LABEL_220;
        }
        if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) != (unsigned __int16)v39)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: got %zu packets, expected NumPackets %hu",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3));
          goto LABEL_221;
        }

        if (v206 == v205)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: no packets in CIR message",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v176);
LABEL_221:
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 72) = 0;
          goto LABEL_222;
        }

        if (!v187)
        {
          sub_10032C51C("RoseCIRDecoder::decodeRangeCIREventVersion2: no session ID", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }

        if (!v186)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: no session type",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v176);
          goto LABEL_221;
        }

        if (!v185)
        {
          sub_10032C51C("RoseCIRDecoder::decodeRangeCIREventVersion2: no cycle index", v3, v4, v5, v6, v7, v8, v9, v176);
          goto LABEL_221;
        }

        if (!v184)
        {
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: no device index",  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v176);
          goto LABEL_221;
        }

        sub_10032C124("decodeRangeCIREventVersion2: converting to libRose format", v3, v4, v5, v6, v7, v8, v9, v176);
        memset(&v213, 0, sizeof(v213));
        uint64_t v160 = v205;
        unint64_t v199 = v206;
        if (v205 == v206)
        {
LABEL_219:
          sub_10032C124( "decodeRangeCIREventVersion2: returning RangeCIREvent",  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v177);
          sub_100329440((uint64_t)__src, v182, v180, v38, v183, &__dst, (__int16 **)&v213, &v202);
          unsigned __int8 v169 = __src[5];
          *(void **)(a3 + 16) = __src[2];
          *(_OWORD *)a3 = *(_OWORD *)__src;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)&__src[3];
          *(void *)(a3 + 40) = v169;
          __src[3] = 0LL;
          __src[4] = 0LL;
          *(_OWORD *)(a3 + 48) = *(_OWORD *)v217;
          *(void **)(a3 + 64) = v217[2];
          __src[5] = 0LL;
          memset(v217, 0, 24);
          *(_BYTE *)(a3 + 72) = 1;
          sub_10012E628((uint64_t)__src);
        }

        else
        {
          while (1)
          {
            if (!*(_BYTE *)(v160 + 2))
            {
              sub_10032C51C( "convertCIRPacketToLibRoseFormat: no packet type",  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v177);
              goto LABEL_242;
            }

            if (!*(_BYTE *)(v160 + 4))
            {
              sub_10032C51C( "convertCIRPacketToLibRoseFormat: no RX chain bit mask",  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v177);
              goto LABEL_242;
            }

            if (!*(_BYTE *)(v160 + 88))
            {
              sub_10032C51C( "convertCIRPacketToLibRoseFormat: no first path index",  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v177);
              goto LABEL_242;
            }

            if (!*(_BYTE *)(v160 + 104)) {
              break;
            }
            LOWORD(v209.__r_.__value_.__l.__data_) = *(_WORD *)v160;
            v209.__r_.__value_.__s.__data_[2] = *(_BYTE *)(v160 + 3);
            *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = *(_OWORD *)(v160 + 8);
            v210.__vftable = *(std::stringbuf_vtbl **)(v160 + 24);
            *(void *)(v160 + 8) = 0LL;
            *(void *)(v160 + 16) = 0LL;
            *(void *)(v160 + 24) = 0LL;
            *(_OWORD *)&v210.__loc_.__locale_ = *(_OWORD *)(v160 + 32);
            v210.__ninp_ = *(std::streambuf::char_type **)(v160 + 48);
            *(void *)(v160 + 32) = 0LL;
            *(void *)(v160 + 40) = 0LL;
            *(void *)(v160 + 48) = 0LL;
            *(_OWORD *)&v210.__einp_ = *(_OWORD *)(v160 + 56);
            v210.__nout_ = *(std::streambuf::char_type **)(v160 + 72);
            *(void *)(v160 + 64) = 0LL;
            *(void *)(v160 + 72) = 0LL;
            *(void *)(v160 + 56) = 0LL;
            *(double *)&v210.__eout_ = (double)*(unint64_t *)(v160 + 80) * 0.01;
            v210.__str_.__r_.__value_.__s.__data_[0] = 1;
            v210.__str_.__r_.__value_.__l.__size_ = sub_1003205EC(*(void *)(v160 + 96));
            v210.__str_.__r_.__value_.__s.__data_[16] = 1;
            int v161 = *(std::stringbuf::char_type **)(v160 + 96);
            LOBYTE(v210.__mode_) = *(_BYTE *)(v160 + 104);
            v210.__hm_ = v161;
            __int128 v211 = *(_OWORD *)(v160 + 112);
            uint64_t v212 = *(void *)(v160 + 128);
            *(void *)(v160 + 112) = 0LL;
            *(void *)(v160 + 120) = 0LL;
            *(void *)(v160 + 128) = 0LL;
            LOWORD(__src[0]) = v209.__r_.__value_.__l.__data_;
            BYTE2(__src[0]) = v209.__r_.__value_.__s.__data_[2];
            *(_OWORD *)&__src[1] = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
            __src[3] = v210.__vftable;
            memset(&v210, 0, 56);
            *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)&__src[4] = *(_OWORD *)&v210.__loc_.__locale_;
            *(_OWORD *)&v217[1] = *(_OWORD *)&v210.__einp_;
            v217[0] = v210.__ninp_;
            v217[3] = v210.__nout_;
            *(_OWORD *)((char *)v219 + 9) = *(_OWORD *)((char *)&v210.__str_.__r_.__value_.__r.__words[2] + 1);
            __int128 v218 = *(_OWORD *)&v210.__eout_;
            v219[0] = *(_OWORD *)&v210.__str_.__r_.__value_.__r.__words[1];
            __int128 v220 = v211;
            uint64_t v221 = v212;
            __int128 v211 = 0uLL;
            uint64_t v212 = 0LL;
            char v222 = 1;
            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
            sub_100130C0C((void ***)&v208);
            if (v210.__einp_)
            {
              v210.__bout_ = v210.__einp_;
              operator delete(v210.__einp_);
            }

            if (v210.__loc_.__locale_)
            {
              v210.__binp_ = (std::streambuf::char_type *)v210.__loc_.__locale_;
              operator delete(v210.__loc_.__locale_);
            }

            if (v209.__r_.__value_.__l.__size_)
            {
              v209.__r_.__value_.__l.__cap_ = v209.__r_.__value_.__l.__size_;
              operator delete((void *)v209.__r_.__value_.__l.__size_);
            }

            if (!v222) {
              goto LABEL_243;
            }
            sub_100329380((uint64_t *)&v213, (__int16 *)__src);
            sub_1003293D0((uint64_t)__src);
            v160 += 136LL;
            if (v160 == v199) {
              goto LABEL_219;
            }
          }

          sub_10032C51C( "convertCIRPacketToLibRoseFormat: no rx start time",  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v177);
LABEL_242:
          LOBYTE(__src[0]) = 0;
          char v222 = 0;
LABEL_243:
          sub_10032C51C( "RoseCIRDecoder::decodeRangeCIREventVersion2: error converting packet to libRose format",  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v177);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 72) = 0;
          sub_1003293D0((uint64_t)__src);
        }

        __src[0] = &v213;
        sub_100130C98((void ***)__src);
LABEL_222:
        __src[0] = &v202;
        sub_100130C0C((void ***)__src);
        __src[0] = &v205;
        sub_1003294FC((void ***)__src);
        return;
      default:
        switch(LOWORD(v200[0]))
        {
          case 0x120:
            sub_10032C124("decodeRangeCIREventVersion2: PacketType", v42, v43, v44, v45, v46, v47, v48, v176);
            if (!v195)
            {
              __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketType but no PacketContainer";
              break;
            }

            if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
            {
              int v171 = 171;
              goto LABEL_257;
            }

            int locale_low = LOWORD(v214.__locale_);
            uint64_t v51 = (uint64_t)sub_100005150();
            int v52 = *(_DWORD *)(v51 + 748);
            switch(v52)
            {
              case 1:
                LOBYTE(__src[0]) = 0;
                if (locale_low == 1)
                {
                  sub_1003619AC((char *)(*a2 + v49), 1uLL, __src, 1);
                  uint64_t v51 = sub_10032BE44(LOBYTE(__src[0]));
                  if ((v51 & 0xFF0000) == 0)
                  {
LABEL_267:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Could not decode packet type");
                  }

                  goto LABEL_171;
                }

                int v172 = 360;
                uint64_t v173 = "len == sizeof(r1PacketTypeInt)";
                break;
              case 2:
                LOWORD(__src[0]) = 0;
                if (locale_low == 2)
                {
                  sub_1003619AC((char *)(*a2 + v49), 2uLL, __src, 1);
                  uint64_t v51 = sub_10032BE44(LOWORD(__src[0]));
                  if ((v51 & 0xFF0000) == 0) {
                    goto LABEL_267;
                  }
                  goto LABEL_171;
                }

                int v172 = 372;
                uint64_t v173 = "len == sizeof(packetTypeAsInt)";
                break;
              case 0:
                uint64_t v174 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v174, "HSI version error");
              default:
LABEL_171:
                uint64_t v136 = v205 + 136LL * (unsigned __int16)v197;
                if (!*(_BYTE *)(v136 + 2)) {
                  *(_BYTE *)(v136 + 2) = 1;
                }
                *(_WORD *)uint64_t v136 = v51;
                goto LABEL_193;
            }

            __assert_rtn("decodePacketType", "roseCIRDataDecoderV2.cpp", v172, v173);
          case 0x121:
            sub_10032C124("decodeRangeCIREventVersion2: RxChainMask", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                int v171 = 180;
                goto LABEL_257;
              }

              LOBYTE(__src[0]) = 0;
              if (LOWORD(v214.__locale_) >= 2uLL) {
                __assert_rtn("decodeRxChainBitMask", "roseCIRDataDecoderV2.cpp", 393, "len <= sizeof rxChainBitMask");
              }
              sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
              *(_WORD *)(v205 + 136LL * (unsigned __int16)v197 + 3) = LOBYTE(__src[0]) | 0x100;
              goto LABEL_193;
            }

            __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxChainMask but no PacketContainer";
            break;
          case 0x122:
            sub_10032C124( "decodeRangeCIREventVersion2: HwConnectionDescriptor",  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v176);
            if (!v195) {
              goto LABEL_224;
            }
            uint64_t v67 = v205;
            if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
            {
              int v171 = 189;
              goto LABEL_257;
            }

            uint64_t v189 = v39;
            int v191 = p_size;
            memset(__src, 0, 24);
            unint64_t v68 = v49 + LOWORD(v214.__locale_);
            if (v68 <= v49)
            {
              uint64_t v71 = 0LL;
              uint64_t v69 = 0LL;
              unint64_t v70 = 0LL;
            }

            else
            {
              int v178 = v38;
              uint64_t v69 = 0LL;
              unint64_t v70 = 0LL;
              uint64_t v71 = 0LL;
              unint64_t v72 = v49;
              do
              {
                uint64_t v73 = *a2;
                if (v69 >= v71)
                {
                  uint64_t v74 = &v69[-v70];
                  uint64_t v75 = (uint64_t)&v69[-v70 + 1];
                  if (v75 < 0)
                  {
                    __src[2] = v71;
                    __src[0] = (void *)v70;
                    __src[1] = v69;
                    sub_10001E11C();
                  }

                  else {
                    size_t v76 = v75;
                  }
                  if (v76) {
                    unint64_t v77 = (unint64_t)operator new(v76);
                  }
                  else {
                    unint64_t v77 = 0LL;
                  }
                  v74[v77] = *(_BYTE *)(v73 + v72);
                  uint64_t v78 = (uint64_t)&v74[v77 + 1];
                  if (v69 == (char *)v70)
                  {
                    unint64_t v70 = (unint64_t)&v74[v77];
                  }

                  else
                  {
                    char v79 = &v69[~v70];
                    do
                    {
                      char v80 = *--v69;
                      (v79--)[v77] = v80;
                    }

                    while (v69 != (char *)v70);
                    uint64_t v69 = (char *)v70;
                    unint64_t v70 = v77;
                  }

                  uint64_t v71 = (char *)(v77 + v76);
                  if (v69) {
                    operator delete(v69);
                  }
                  uint64_t v69 = (char *)v78;
                }

                else
                {
                  *v69++ = *(_BYTE *)(v73 + v72);
                }

                ++v72;
              }

              while (v72 != v68);
              uint64_t v67 = v205;
              int v38 = v178;
            }

            uint64_t v124 = v67 + 136LL * (unsigned __int16)v197;
            char v127 = *(void **)(v124 + 8);
            int v126 = (unint64_t *)(v124 + 8);
            uint64_t v125 = v127;
            if (v127)
            {
              *(void *)(v67 + 136LL * (unsigned __int16)v197 + 16) = v125;
              operator delete(v125);
              *int v126 = 0LL;
              v126[1] = 0LL;
              v126[2] = 0LL;
            }

            *int v126 = v70;
            uint64_t v128 = v67 + 136LL * (unsigned __int16)v197;
            *(void *)(v128 + 16) = v69;
            *(void *)(v128 + 24) = v71;
            goto LABEL_155;
          case 0x123:
            sub_10032C124("decodeRangeCIREventVersion2: HwRxTimeStatus", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              uint64_t v88 = v205;
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                int v171 = 198;
                goto LABEL_257;
              }

              uint64_t v189 = v39;
              int v191 = p_size;
              memset(__src, 0, 24);
              unint64_t v89 = v49 + LOWORD(v214.__locale_);
              if (v89 <= v49)
              {
                uint64_t v92 = 0LL;
                double v90 = 0LL;
                unint64_t v91 = 0LL;
              }

              else
              {
                int v179 = v38;
                double v90 = 0LL;
                unint64_t v91 = 0LL;
                uint64_t v92 = 0LL;
                unint64_t v93 = v49;
                do
                {
                  uint64_t v94 = *a2;
                  if (v90 >= v92)
                  {
                    uint64_t v95 = &v90[-v91];
                    uint64_t v96 = (uint64_t)&v90[-v91 + 1];
                    if (v96 < 0)
                    {
                      __src[2] = v92;
                      __src[0] = (void *)v91;
                      __src[1] = v90;
                      sub_10001E11C();
                    }

                    else {
                      size_t v97 = v96;
                    }
                    if (v97) {
                      unint64_t v98 = (unint64_t)operator new(v97);
                    }
                    else {
                      unint64_t v98 = 0LL;
                    }
                    v95[v98] = *(_BYTE *)(v94 + v93);
                    uint64_t v99 = (uint64_t)&v95[v98 + 1];
                    if (v90 == (char *)v91)
                    {
                      unint64_t v91 = (unint64_t)&v95[v98];
                    }

                    else
                    {
                      unint64_t v100 = &v90[~v91];
                      do
                      {
                        char v101 = *--v90;
                        (v100--)[v98] = v101;
                      }

                      while (v90 != (char *)v91);
                      double v90 = (char *)v91;
                      unint64_t v91 = v98;
                    }

                    uint64_t v92 = (char *)(v98 + v97);
                    if (v90) {
                      operator delete(v90);
                    }
                    double v90 = (char *)v99;
                  }

                  else
                  {
                    *v90++ = *(_BYTE *)(v94 + v93);
                  }

                  ++v93;
                }

                while (v93 != v89);
                uint64_t v88 = v205;
                int v38 = v179;
              }

              uint64_t v129 = v88 + 136LL * (unsigned __int16)v197;
              __int16 v132 = *(void **)(v129 + 32);
              char v131 = (unint64_t *)(v129 + 32);
              char v130 = v132;
              if (v132)
              {
                *(void *)(v88 + 136LL * (unsigned __int16)v197 + 40) = v130;
                operator delete(v130);
                *char v131 = 0LL;
                v131[1] = 0LL;
                v131[2] = 0LL;
              }

              *char v131 = v91;
              uint64_t v133 = v88 + 136LL * (unsigned __int16)v197;
              *(void *)(v133 + 40) = v90;
              *(void *)(v133 + 48) = v92;
LABEL_155:
              uint64_t v39 = v189;
              p_uint64_t size = v191;
              goto LABEL_193;
            }

LABEL_224:
            __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got HwConnectionDescriptor but no PacketContainer";
            break;
          case 0x124:
            sub_10032C124("decodeRangeCIREventVersion2: CIR", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) > (unsigned __int16)v197)
              {
                sub_10032915C(a2, v49, LOWORD(v214.__locale_), __src);
                uint64_t v62 = v205;
                uint64_t v63 = v205 + 136LL * (unsigned __int16)v197;
                unint64_t v66 = *(void **)(v63 + 56);
                uint64_t v65 = (void *)(v63 + 56);
                uint64_t v64 = v66;
                if (v66)
                {
                  *(void *)(v205 + 136LL * (unsigned __int16)v197 + 64) = v64;
                  operator delete(v64);
                  *uint64_t v65 = 0LL;
                  v65[1] = 0LL;
                  v65[2] = 0LL;
                }

                *(_OWORD *)uint64_t v65 = *(_OWORD *)__src;
                *(void **)(v62 + 136LL * (unsigned __int16)v197 + 72) = __src[2];
                goto LABEL_193;
              }

              int v171 = 207;
              goto LABEL_257;
            }

            __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got CIR but no PacketContainer";
            break;
          case 0x125:
            sub_10032C124("decodeRangeCIREventVersion2: FirstPathIndex", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197)
              {
                int v171 = 216;
                goto LABEL_257;
              }

              __src[0] = 0LL;
              if (LOWORD(v214.__locale_) >= 9uLL) {
                __assert_rtn("decodeFirstPathIndex", "roseCIRDataDecoderV2.cpp", 443, "len <= sizeof firstPathIndex");
              }
              sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
              uint64_t v112 = v205 + 136LL * (unsigned __int16)v197;
              *(void **)(v112 + 80) = __src[0];
              *(_BYTE *)(v112 + 88) = 1;
              goto LABEL_193;
            }

            __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got FirstPathIndex but no PacketContainer";
            break;
          case 0x126:
            sub_10032C124("decodeRangeCIREventVersion2: RxStartTime", v42, v43, v44, v45, v46, v47, v48, v176);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) > (unsigned __int16)v197)
              {
                __src[0] = 0LL;
                if (LOWORD(v214.__locale_) >= 9uLL) {
                  __assert_rtn("decodeRxStartTime", "roseCIRDataDecoderV2.cpp", 451, "len <= sizeof rxStartTime");
                }
                sub_1003619AC((char *)(*a2 + v49), LOWORD(v214.__locale_), __src, 1);
                uint64_t v113 = v205 + 136LL * (unsigned __int16)v197;
                *(void **)(v113 + 96) = __src[0];
                *(_BYTE *)(v113 + 104) = 1;
                goto LABEL_193;
              }

              int v171 = 225;
LABEL_257:
              __assert_rtn( "decodeRangeCIREventVersion2",  "roseCIRDataDecoderV2.cpp",  v171,  "currentPacketIdx.value() < packets.size()");
            }

            __int16 v170 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxStartTime but no PacketContainer";
            break;
          default:
            sub_10032C124( "Ignoring unrecognized RangeCIREventTag %02x",  v42,  v43,  v44,  v45,  v46,  v47,  v48,  LOWORD(v200[0]));
            LOWORD(v209.__r_.__value_.__l.__data_) = v200[0];
            size_t v114 = LOWORD(v214.__locale_);
            *(_WORD *)&v209.__r_.__value_.__s.__data_[2] = v214.__locale_;
            uint64_t v115 = (const void *)(*a2 + v49);
            uint64_t v116 = (uint64_t)v115 + LOWORD(v214.__locale_);
            p_size[1] = 0LL;
            p_size[2] = 0LL;
            *p_uint64_t size = 0LL;
            sub_1001FC59C(p_size, v115, v116, v114);
            if (v195)
            {
              if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v206 - v205) >> 3) <= (unsigned __int16)v197) {
                __assert_rtn( "decodeRangeCIREventVersion2",  "roseCIRDataDecoderV2.cpp",  237,  "currentPacketIdx.value() < packets.size()");
              }
              uint64_t v117 = v205 + 136LL * (unsigned __int16)v197;
              unint64_t v120 = *(void *)(v117 + 128);
              unint64_t v118 = (void *)(v117 + 128);
              unint64_t v119 = v120;
              uint64_t v122 = v118 - 1;
              unint64_t v121 = *(v118 - 1);
              if (v121 >= v120)
              {
                char v137 = v118 - 2;
                uint64_t v138 = *(v118 - 2);
                uint64_t v139 = (uint64_t)(v121 - v138) >> 5;
                unint64_t v140 = v139 + 1;
                uint64_t v141 = v119 - v138;
                if (v141 >> 4 > v140) {
                  unint64_t v140 = v141 >> 4;
                }
                else {
                  unint64_t v142 = v140;
                }
                __src[4] = v118;
                char v143 = (char *)sub_100130DE0((uint64_t)v118, v142);
                __int16 v144 = &v143[32 * v139];
                __src[0] = v143;
                __src[1] = v144;
                __src[3] = &v143[32 * v145];
                *(_DWORD *)__int16 v144 = v209.__r_.__value_.__l.__data_;
                *((void *)v144 + 2) = 0LL;
                *((void *)v144 + 3) = 0LL;
                *((void *)v144 + 1) = 0LL;
                *(_OWORD *)(v144 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
                *((void *)v144 + 3) = v210.__vftable;
                *p_uint64_t size = 0LL;
                p_size[1] = 0LL;
                p_size[2] = 0LL;
                __src[2] = v144 + 32;
                sub_1003299B0(v137, __src);
                unint64_t v123 = *v122;
                sub_100329B44((uint64_t)__src);
              }

              else
              {
                *(_DWORD *)unint64_t v121 = v209.__r_.__value_.__l.__data_;
                *(void *)(v121 + 16) = 0LL;
                *(void *)(v121 + 24) = 0LL;
                *(void *)(v121 + 8) = 0LL;
                *(_OWORD *)(v121 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
                *(void *)(v121 + 24) = v210.__vftable;
                *p_uint64_t size = 0LL;
                p_size[1] = 0LL;
                p_size[2] = 0LL;
                unint64_t v123 = v121 + 32;
              }

              *uint64_t v122 = v123;
            }

            else
            {
              char v134 = v203;
              if ((unint64_t)v203 >= v204)
              {
                uint64_t v146 = ((uint64_t)v203 - v202) >> 5;
                unint64_t v147 = v146 + 1;
                if ((unint64_t)(v146 + 1) >> 59) {
LABEL_268:
                }
                  sub_10001E11C();
                uint64_t v148 = v204 - v202;
                else {
                  unint64_t v149 = v147;
                }
                __src[4] = &v204;
                __int16 v150 = (char *)sub_100130DE0((uint64_t)&v204, v149);
                __int16 v151 = &v150[32 * v146];
                __src[0] = v150;
                __src[1] = v151;
                __src[3] = &v150[32 * v152];
                *(_DWORD *)__int16 v151 = v209.__r_.__value_.__l.__data_;
                *((void *)v151 + 2) = 0LL;
                *((void *)v151 + 3) = 0LL;
                *((void *)v151 + 1) = 0LL;
                *(_OWORD *)(v151 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
                *((void *)v151 + 3) = v210.__vftable;
                *p_uint64_t size = 0LL;
                p_size[1] = 0LL;
                p_size[2] = 0LL;
                __src[2] = v151 + 32;
                sub_1003299B0(&v202, __src);
                int v135 = v203;
                sub_100329B44((uint64_t)__src);
              }

              else
              {
                _DWORD *v203 = v209.__r_.__value_.__l.__data_;
                v134[2] = 0LL;
                v134[3] = 0LL;
                v134[1] = 0LL;
                *(_OWORD *)(v134 + 1) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
                v134[3] = v210.__vftable;
                *p_uint64_t size = 0LL;
                p_size[1] = 0LL;
                p_size[2] = 0LL;
                int v135 = v134 + 4;
              }

              v203 = v135;
            }

            uint64_t v61 = (void *)v209.__r_.__value_.__l.__size_;
            if (v209.__r_.__value_.__l.__size_)
            {
              v209.__r_.__value_.__l.__cap_ = v209.__r_.__value_.__l.__size_;
LABEL_192:
              operator delete(v61);
            }

            goto LABEL_193;
        }

LABEL_231:
        sub_10032C51C(v170, v3, v4, v5, v6, v7, v8, v9, v176);
        goto LABEL_221;
    }
  }

void sub_100328D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, char a39)
{
  STACK[0x260] = (unint64_t)&STACK[0x238];
  sub_100130C98((void ***)&STACK[0x260]);
  STACK[0x238] = (unint64_t)&a36;
  sub_100130C0C((void ***)&STACK[0x238]);
  STACK[0x238] = (unint64_t)&a39;
  sub_1003294FC((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_100328F98(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  uint64_t v4 = a3 + a2;
  if (a3 + a2 > a2)
  {
    unint64_t v5 = a2;
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *a1;
      unint64_t v10 = a4[2];
      if ((unint64_t)v8 >= v10)
      {
        unint64_t v12 = *a4;
        unint64_t v13 = &v8[-*a4];
        unint64_t v14 = (unint64_t)(v13 + 1);
        unint64_t v15 = v10 - v12;
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)operator new(v16);
        }
        else {
          uint64_t v17 = 0LL;
        }
        unint64_t v18 = &v13[(void)v17];
        v13[(void)v17] = *(_BYTE *)(v9 + v5);
        uint64_t v11 = (uint64_t)&v13[(void)v17 + 1];
        if (v8 != (_BYTE *)v12)
        {
          unint64_t v19 = &v8[~v12];
          do
          {
            char v20 = *--v8;
            (v19--)[(void)v17] = v20;
          }

          while (v8 != (_BYTE *)v12);
          uint64_t v8 = (_BYTE *)*a4;
          unint64_t v18 = v17;
        }

        *a4 = (unint64_t)v18;
        a4[1] = v11;
        a4[2] = (unint64_t)&v17[v16];
        if (v8) {
          operator delete(v8);
        }
      }

      else
      {
        *uint64_t v8 = *(_BYTE *)(v9 + v5);
        uint64_t v11 = (uint64_t)(v8 + 1);
      }

      a4[1] = v11;
      ++v5;
      uint64_t v8 = (_BYTE *)v11;
    }

    while (v5 != v4);
  }

void sub_1003290CC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1003290F4(uint64_t a1)
{
  uint64_t v6 = (void **)(a1 + 112);
  sub_100130C0C(&v6);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }

  return a1;
}

void sub_10032915C(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  if ((a3 & 0x3FF) != 0) {
    sub_1003ACFA4();
  }
  if (a3 >= 0x400)
  {
    uint64_t v6 = a4;
    uint64_t v7 = 0LL;
    if (a3 >> 10 <= 1) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = a3 >> 10;
    }
    uint64_t v24 = (uint64_t)(a4 + 2);
    uint64_t v25 = v8;
    do
    {
      bzero(__src, 0x400uLL);
      for (uint64_t i = 0LL; i != 1024; i += 4LL)
      {
        int __dst = 0;
        sub_1003619AC((char *)(*a1 + a2 + i), 2uLL, (_BYTE *)&__dst + 2, 1);
        sub_1003619AC((char *)(*a1 + a2 + i + 2), 2uLL, &__dst, 1);
        __int16 v10 = HIWORD(__dst);
        uint64_t v11 = &__src[i];
        *uint64_t v11 = __dst;
        v11[1] = v10;
      }

      unint64_t v13 = (char *)v6[1];
      unint64_t v12 = v6[2];
      if ((unint64_t)v13 >= v12)
      {
        unint64_t v15 = (char *)*v6;
        uint64_t v16 = (uint64_t)&v13[-*v6] >> 10;
        unint64_t v17 = v16 + 1;
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 9 > v17) {
          unint64_t v17 = v18 >> 9;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          char v20 = (char *)sub_100130AF0(v24, v19);
          uint64_t v27 = v21;
          unint64_t v15 = (char *)*v6;
          unint64_t v13 = (char *)v6[1];
        }

        else
        {
          char v20 = 0LL;
          uint64_t v27 = 0LL;
        }

        char v22 = &v20[1024 * v16];
        memcpy(v22, __src, 0x400uLL);
        uint64_t v23 = v22;
        while (v13 != v15)
        {
          v13 -= 1024;
          v23 -= 1024;
          memcpy(v23, v13, 0x400uLL);
        }

        unint64_t v14 = v22 + 1024;
        *a4 = v23;
        a4[1] = v22 + 1024;
        uint64_t v6 = a4;
        a4[2] = &v20[1024 * v27];
        if (v15) {
          operator delete(v15);
        }
        uint64_t v8 = v25;
      }

      else
      {
        memcpy((void *)v6[1], __src, 0x400uLL);
        unint64_t v14 = v13 + 1024;
      }

      a2 += 1024LL;
      v6[1] = v14;
      ++v7;
    }

    while (v7 != v8);
  }

void sub_100329354( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100329380(uint64_t *a1, __int16 *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_100329BD0(a1, a2);
  }

  else
  {
    sub_100329CF0(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 152;
  }

  a1[1] = result;
  return result;
}

uint64_t sub_1003293D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))
  {
    uint64_t v6 = (void **)(a1 + 128);
    sub_100130C0C(&v6);
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }

    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }

    unint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(void *)(a1 + 16) = v4;
      operator delete(v4);
    }
  }

  return a1;
}

uint64_t sub_100329440( uint64_t a1, __int16 a2, char a3, __int16 a4, char a5, void *a6, __int16 **a7, uint64_t *a8)
{
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a4;
  *(_BYTE *)(a1 + 6) = a5;
  *(void *)(a1 + 7) = *a6;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_1001306E8((void *)(a1 + 24), *a7, a7[1], 0x86BCA1AF286BCA1BLL * (((char *)a7[1] - (char *)*a7) >> 3));
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  sub_100130D1C((void *)(a1 + 48), *a8, a8[1], (a8[1] - *a8) >> 5);
  *(void *)(a1 + 16) = *(void *)(a1 + 7);
  return a1;
}

void sub_1003294E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1003294FC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136LL;
        sub_100329580((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100329580(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void **)(a2 + 112);
  sub_100130C0C(&v6);
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(void *)(a2 + 40) = v4;
    operator delete(v4);
  }

  unint64_t v5 = *(void **)(a2 + 8);
  if (v5)
  {
    *(void *)(a2 + 16) = v5;
    operator delete(v5);
  }

uint64_t sub_1003295E4(uint64_t *a1, int *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1LL) {
    sub_10001E11C();
  }
  if (0xE1E1E1E1E1E1E1E2LL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2LL * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1LL * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0LL) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1LL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_1002EDD90((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  __int16 v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  unint64_t v13 = &v7[136 * v6];
  sub_1003296EC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 136;
  sub_100329790(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10032993C(&v10);
  return v8;
}

void sub_1003296D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_1003296EC(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 2);
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *((void *)a3 + 3) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0LL;
  *((void *)a3 + 5) = 0LL;
  *((void *)a3 + 6) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 14);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *((void *)a3 + 7) = 0LL;
  *((void *)a3 + 8) = 0LL;
  *((void *)a3 + 9) = 0LL;
  __int128 v4 = *((_OWORD *)a3 + 5);
  *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 80) = v4;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  *(void *)(a2 + 112) = 0LL;
  __n128 result = *((__n128 *)a3 + 7);
  *(__n128 *)(a2 + 112) = result;
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  *((void *)a3 + 16) = 0LL;
  return result;
}

uint64_t sub_100329790(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100329804((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100329804(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 34;
      sub_1003296EC(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136LL;
      *((void *)&v16 + 1) -= 136LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_1003298B8((uint64_t)v13);
  return v11;
}

uint64_t sub_1003298B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1003298EC((uint64_t *)a1);
  }
  return a1;
}

void sub_1003298EC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100329580(v3, v1);
      v1 += 136LL;
    }

    while (v1 != v2);
  }

void **sub_10032993C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10032996C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    sub_100329580(v4, i - 136);
  }

uint64_t sub_1003299B0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100329A24((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100329A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32LL;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      *(void *)(v7 - 24) = 0LL;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 32LL;
      *((void *)&v14 + 1) -= 32LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_100329ACC((uint64_t)v11);
  return v9;
}

uint64_t sub_100329ACC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100329B00(a1);
  }
  return a1;
}

void sub_100329B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }

    v1 += 32LL;
  }

uint64_t sub_100329B44(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100329B78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 32LL;
    }
  }

uint64_t sub_100329BD0(uint64_t *a1, __int16 *a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286LL) {
    sub_10001E11C();
  }
  if (0xD79435E50D79436LL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436LL * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943LL) {
    unint64_t v6 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v6 = v4;
  }
  __int128 v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_1001307C0((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  __int16 v10 = v7;
  uint64_t v11 = &v7[152 * v3];
  __int128 v13 = &v7[152 * v6];
  sub_100329CF0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 152;
  sub_100329D94(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100329F40(&v10);
  return v8;
}

void sub_100329CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_100329CF0(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3 = *a3;
  *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)a2 = v3;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 4);
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *((void *)a3 + 3) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0LL;
  *((void *)a3 + 5) = 0LL;
  *((void *)a3 + 6) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 28);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *((void *)a3 + 7) = 0LL;
  *((void *)a3 + 8) = 0LL;
  *((void *)a3 + 9) = 0LL;
  __int128 v4 = *((_OWORD *)a3 + 5);
  __int128 v5 = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a2 + 105) = *(_OWORD *)((char *)a3 + 105);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 96) = v5;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  __n128 result = *((__n128 *)a3 + 8);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *((void *)a3 + 18);
  *((void *)a3 + 16) = 0LL;
  *((void *)a3 + 17) = 0LL;
  *((void *)a3 + 18) = 0LL;
  return result;
}

uint64_t sub_100329D94(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100329E08((uint64_t)(a1 + 2), a1[1], (__int16 *)a1[1], *a1, (__int16 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100329E08(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, __int16 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 76;
      sub_100329CF0(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152LL;
      *((void *)&v16 + 1) -= 152LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_100329EBC((uint64_t)v13);
  return v11;
}

uint64_t sub_100329EBC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100329EF0((uint64_t *)a1);
  }
  return a1;
}

void sub_100329EF0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100130BA8(v3, v1);
      v1 += 152LL;
    }

    while (v1 != v2);
  }

void **sub_100329F40(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100329F70(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_100130BA8(v4, i - 152);
  }

uint64_t sub_100329FB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = a2;
  sub_10001E914(a1 + 16, a3);
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0LL;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

std::thread *sub_100329FF0(std::thread *this)
{
  uint64_t v2 = this + 7;
  if (this[7].__t_) {
    std::thread::join(this + 7);
  }
  std::thread::~thread(v2);
  t = (std::thread *)this[5].__t_;
  if (t == &this[2])
  {
    uint64_t v4 = 4LL;
    t = this + 2;
    goto LABEL_7;
  }

  if (t)
  {
    uint64_t v4 = 5LL;
LABEL_7:
    (*((void (**)(void))&t->__t_->__sig + v4))();
  }

  return this;
}

BOOL sub_10032A06C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 5) == 1 && *(unsigned __int8 *)(a1 + 4) < 3u;
}

BOOL sub_10032A094(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 5) == 1;
}

BOOL sub_10032A0B4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4) == 2 && *(_BYTE *)(a1 + 5) == 1;
}

BOOL sub_10032A0D8(unsigned __int8 *a1)
{
  return *a1 - 1 < 3;
}

uint64_t sub_10032A0EC(unsigned __int8 *a1)
{
  uint64_t result = *a1;
  if ((result - 1) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Unknown message type");
  }

  return result;
}

void sub_10032A144(_Unwind_Exception *a1)
{
}

uint64_t sub_10032A158(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 1);
  if (result >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Unknown group ID");
  }

  return result;
}

void sub_10032A1AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10032A1C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10032A158(a1))
  {
    sub_100045754((uint64_t)v11);
    uint64_t v4 = sub_100046B94(&v12, (uint64_t)"not ranging group ID: ", 22LL);
    std::ostream::operator<<(v4, *(unsigned __int8 *)(a1 + 1));
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(&v10, v13);
    std::runtime_error::runtime_error(exception, &v10);
  }

  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  BOOL v3 = result > 0x16 || ((1 << result) & 0x60023F) == 0;
  if (v3
    && ((result - 80) > 0x20 || ((1LL << (result - 80)) & 0x10001003FLL) == 0)
    && ((result - 512) > 0xD || ((1 << result) & 0x243B) == 0))
  {
    sub_100045754((uint64_t)v11);
    uint64_t v6 = sub_100046B94(&v12, (uint64_t)"Unknown ranging group message ID: ", 34LL);
    *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24LL) + 8) = *(_DWORD *)((_BYTE *)v6 + *(void *)(*v6 - 24LL) + 8) & 0xFFFFFFB5 | 8;
    uint64_t v7 = sub_100046B94(v6, (uint64_t)"0x", 2LL);
    *(void *)((char *)v7 + *(void *)(*v7 - 24LL) + 24) = 3LL;
    v10.__r_.__value_.__s.__data_[0] = 48;
    uint64_t v8 = sub_100138E6C(v7, (char *)&v10);
    std::ostream::operator<<(v8, *(unsigned __int16 *)(a1 + 2));
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(&v10, v13);
    std::runtime_error::runtime_error(v9, &v10);
  }

  return result;
}

void sub_10032A3CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_100045880((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v16)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_10032A424(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10032A158(a1) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "not debug group ID");
    goto LABEL_7;
  }

  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  if ((result - 82) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Debug group message IDs not defined");
LABEL_7:
  }

  return result;
}

void sub_10032A4B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10032A4CC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_10032A158(a1) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "not factory test group ID");
LABEL_12:
  }

  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  BOOL v3 = result > 0x20 || ((1LL << result) & 0x104090011LL) == 0;
  if (v3 && (_DWORD)result != 78 && (_DWORD)result != 128)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Unknown factory test group message ID");
    goto LABEL_12;
  }

  return result;
}

void sub_10032A584(_Unwind_Exception *a1)
{
}

BOOL sub_10032A59C(int a1, int a2)
{
  return a1 >= a2;
}

void sub_10032A5A8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (sub_10032A694(a1, a2))
  {
    sub_10032C124( "RoseCIRDecoder::getBufferedCIREvent, version %d",  v5,  v6,  v7,  v8,  v9,  v10,  v11,  *(unsigned __int8 *)(a1 + 5));
    int v19 = *(unsigned __int8 *)(a1 + 5);
    if (v19 == 2)
    {
      sub_10032743C((int *)a1, (uint64_t *)(a1 + 8), (uint64_t)a3);
    }

    else
    {
      if (v19 != 1)
      {
        sub_10032C51C( "collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.",  v12,  v13,  v14,  v15,  v16,  v17,  v18,  *(unsigned __int8 *)(a1 + 5));
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_100325794(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
      }

      sub_100353A78((char **)(a1 + 8), (uint64_t)a3);
    }
  }

  else
  {
    *a3 = 0;
    a3[72] = 0;
  }

void sub_10032A680(_Unwind_Exception *a1)
{
}

BOOL sub_10032A694(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_10036193C((unsigned int **)a2);
  unint64_t v5 = sub_100361914(v4);
  int v39 = v5;
  __int16 v40 = WORD2(v5);
  if (*(_BYTE *)(a1 + 4) && !sub_10032A094((uint64_t)&v39))
  {
    sub_10032C3DC( "collectRangeCIREvent: waiting for start of multipart message; ignoring partial data",
      v6,
      v7,
      v8,
      v9,
      v10,
      v11,
      v12,
      v38);
    return 0LL;
  }

  if (sub_10032A094((uint64_t)&v39))
  {
    uint64_t v13 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 4) = 0;
    *(void *)(a1 + 16) = v13;
    sub_1003619AC((char *)(*(void *)a2 + 4LL), 1uLL, (_BYTE *)(a1 + 5), 1);
    sub_1003619AC((char *)(*(void *)a2 + 5LL), 2uLL, (_BYTE *)(a1 + 6), 1);
    if (*(unsigned __int8 *)(a1 + 5) - 1 >= 2)
    {
      sub_10032C51C( "collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *(unsigned __int8 *)(a1 + 5));
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
    }

    sub_1000C939C((unint64_t *)(a1 + 8), *(unsigned __int16 *)(a1 + 6));
    uint64_t v21 = 7LL;
  }

  else
  {
    uint64_t v21 = 4LL;
  }

  sub_1001FC3C0( a1 + 8,  *(char **)(a1 + 16),  (char *)(*(void *)a2 + v21),  *(char **)(a2 + 8),  *(void *)(a2 + 8) - (*(void *)a2 + v21));
  if (*(void *)(a1 + 16) - *(void *)(a1 + 8) > (unint64_t)*(unsigned __int16 *)(a1 + 6))
  {
    sub_10032C51C( "collectRangeCIREvent: Collected CIR data exceeds expected size %hu",  v22,  v23,  v24,  v25,  v26,  v27,  v28,  *(unsigned __int16 *)(a1 + 6));
    BOOL result = 0LL;
    *(_BYTE *)(a1 + 4) = 1;
    return result;
  }

  BOOL result = sub_10032A0B4((uint64_t)&v39);
  if (result)
  {
    BOOL result = 1LL;
    *(_BYTE *)(a1 + 4) = 1;
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) != *(unsigned __int16 *)(a1 + 6))
    {
      sub_10032C51C( "collectRangeCIREvent: end of multipart message, expected %hu bytes but received %zu",  v30,  v31,  v32,  v33,  v34,  v35,  v36,  *(unsigned __int16 *)(a1 + 6));
      return 0LL;
    }
  }

  return result;
}

void sub_10032A840(_Unwind_Exception *a1)
{
}

void sub_10032A854(void *a1, __int16 **a2)
{
  uint64_t v2 = a1 + 1;
  BOOL v3 = (_BYTE *)a1[1];
  a1[2] = v3;
  unsigned int v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      __int16 v7 = *v4;
      unint64_t v8 = a1[3];
      if ((unint64_t)v3 >= v8)
      {
        unint64_t v10 = *v2;
        uint64_t v11 = &v3[-*v2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)operator new(v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        uint64_t v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        *uint64_t v17 = v7;
        uint64_t v9 = v17 + 1;
        if (v3 != (_BYTE *)v10)
        {
          uint64_t v18 = &v3[~v10];
          do
          {
            char v19 = *--v3;
            (v18--)[(void)v15] = v19;
          }

          while (v3 != (_BYTE *)v10);
          BOOL v3 = (_BYTE *)*v2;
          uint64_t v16 = v15;
        }

        a1[1] = v16;
        a1[2] = v9;
        a1[3] = &v15[v14];
        if (v3) {
          operator delete(v3);
        }
      }

      else
      {
        *BOOL v3 = v7;
        uint64_t v9 = v3 + 1;
      }

      a1[2] = v9;
      unint64_t v20 = a1[3];
      if ((unint64_t)v9 >= v20)
      {
        unint64_t v21 = *v2;
        uint64_t v22 = &v9[-*v2];
        unint64_t v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0) {
LABEL_39:
        }
          sub_10001E11C();
        unint64_t v24 = v20 - v21;
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          uint64_t v26 = operator new(v25);
        }
        else {
          uint64_t v26 = 0LL;
        }
        uint64_t v27 = (char *)v26 + v25;
        v22[(void)v26] = HIBYTE(v7);
        BOOL v3 = &v22[(void)v26 + 1];
        if (v9 == (_BYTE *)v21)
        {
          a1[1] = &v22[(void)v26];
          a1[2] = v3;
          a1[3] = v27;
        }

        else
        {
          uint64_t v28 = &v9[~v21];
          do
          {
            char v29 = *--v9;
            (v28--)[(void)v26] = v29;
          }

          while (v9 != (_BYTE *)v21);
          uint64_t v9 = (_BYTE *)a1[1];
          a1[1] = v26;
          a1[2] = v3;
          a1[3] = v27;
          if (!v9) {
            goto LABEL_37;
          }
        }

        operator delete(v9);
      }

      else
      {
        *uint64_t v9 = HIBYTE(v7);
        BOOL v3 = v9 + 1;
      }

uint64_t sub_10032AA2C@<X0>(unsigned __int8 *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  unsigned int v4 = std::string::append(&v14, ": [");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    uint64_t v7 = HIBYTE(cap);
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_100046B94(&v17, (uint64_t)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 48;
  unint64_t v8 = sub_100138E6C(&v17, (char *)__p);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24LL) + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(*v8 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  if (*((void *)a1 + 2) != *((void *)a1 + 1))
  {
    unint64_t v9 = 0LL;
    do
    {
      unint64_t v10 = sub_100046B94(&v17, (uint64_t)"0x", 2LL);
      *(void *)((char *)v10 + *(void *)(*v10 - 24LL) + 24) = 2LL;
      std::ostream::operator<<(v10, *(unsigned __int8 *)(*((void *)a1 + 1) + v9));
      uint64_t v12 = *((void *)a1 + 1);
      uint64_t v11 = *((void *)a1 + 2);
      if (v9 != ~v12 + v11)
      {
        sub_100046B94(&v17, (uint64_t)", ", 2LL);
        uint64_t v12 = *((void *)a1 + 1);
        uint64_t v11 = *((void *)a1 + 2);
      }

      ++v9;
    }

    while (v9 < v11 - v12);
  }

  sub_100046B94(&v17, (uint64_t)"]", 1LL);
  std::stringbuf::str(a2, &v18);
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10032AC2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
}

void *sub_10032AC80@<X0>(int a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_1007BE2E8[(char)(a1 - 1)];
  }
  return sub_1000065CC(a2, v2);
}

uint64_t sub_10032ACB4(uint64_t a1, int a2)
{
  int v2 = 0;
  if (a2 < 0)
  {
    int v4 = 0;
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v4 = 0;
    if (*(void *)(a1 + 16) - v3 > (unint64_t)a2)
    {
      int v4 = *(unsigned __int8 *)(v3 + a2);
      int v2 = 1;
    }
  }

  return v4 | (v2 << 8);
}

BOOL sub_10032ACEC(uint64_t a1, int a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16) - v3;
  if (v4 > a2) {
    *(_BYTE *)(v3 + a2) = a3;
  }
  return v4 > a2;
}

BOOL sub_10032AD10(int a1)
{
  return (a1 - 9) < 4;
}

uint64_t sub_10032AD20(unsigned int a1, int a2)
{
  if (a2 == 2)
  {
    if (a1 < 0x21 && ((0x1FFFFFE01uLL >> a1) & 1) != 0) {
      return algn_10043175A[(char)a1];
    }
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid raw value for extended preamble");
  }

  if (a2 != 1 || a1 >= 4) {
    goto LABEL_9;
  }
  return (a1 + 9);
}

void sub_10032ADB4(_Unwind_Exception *a1)
{
}

uint64_t sub_10032ADC8( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 == 1)
  {
    int v8 = result;
    BOOL result = 0LL;
    switch(v8)
    {
      case 0:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        sub_10032C51C("Preambles not supported in HSI 1.x", a2, a3, a4, a5, a6, a7, a8, v10);
        goto LABEL_9;
      case 9:
        return result;
      case 10:
        return 1LL;
      case 11:
        return 2LL;
      case 12:
        return 3LL;
      default:
        goto LABEL_9;
    }
  }

  if ((_DWORD)a2 != 2)
  {
    if ((_DWORD)a2)
    {
LABEL_9:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Invalid extended preamble");
    }

    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Unknown HSI version");
    }
  }

  return result;
}

void sub_10032AE8C(_Unwind_Exception *a1)
{
}

uint64_t sub_10032AEA4@<X0>(char a1@<W0>, std::stringbuf::string_type *a2@<X8>)
{
  unint64_t v4 = sub_100046B94(&v8, (uint64_t)"Preamble_", 9LL);
  char v11 = a1;
  sub_100046B94(v4, (uint64_t)&v11, 1LL);
  std::stringbuf::str(a2, &v9);
  *(void *)((char *)v7
  uint64_t v8 = v5;
  std::streambuf::~streambuf(&v9);
  return std::ios::~ios(&v10);
}

void sub_10032AF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10032AF88( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 0x1B || ((1 << result) & 0xFDB548F) == 0)
  {
    sub_10032C51C("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session type");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid session type");
  }

  return result;
}

void sub_10032B010(_Unwind_Exception *a1)
{
}

void *sub_10032B024@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x1B) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_1007BE498[(char)a1];
  }
  return sub_1000065CC(a2, v2);
}

uint64_t sub_10032B054( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 4)
  {
    sub_10032C51C("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid gr superframe format");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid session type");
  }

  return result;
}

void sub_10032B0C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10032B0DC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 1)
  {
    sub_10032C51C("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session role");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid session role");
  }

  return result;
}

void sub_10032B14C(_Unwind_Exception *a1)
{
}

uint64_t sub_10032B160( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 0x36 || ((1LL << result) & 0x49E3C884FAA1F2LL) == 0)
  {
    sub_10032C51C("Exception: Invalid config parameter ID %d", a2, a3, a4, a5, a6, a7, a8, result);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid config parameter ID");
  }

  return result;
}

void sub_10032B1EC(_Unwind_Exception *a1)
{
}

_WORD *sub_10032B200@<X0>(_WORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (result < 0x33 && (__int16 v4 = a2, (a2 - 1) > 0xFFFFFFCC))
  {
    __int16 v6 = (__int16)result;
    uint64_t v7 = operator new(2uLL);
    *(void *)a3 = v7;
    *uint64_t v7 = v6 | (v4 << 8);
    BOOL result = v7 + 1;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = result;
    char v5 = 1;
  }

  else
  {
    char v5 = 0;
    *(_BYTE *)a3 = 0;
  }

  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

uint64_t sub_10032B26C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result >= 0x62 && (_DWORD)result != 16398 && (_DWORD)result != 0xFFFF)
  {
    sub_10032C6B0("Fault: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown error code");
    return 0xFFFFLL;
  }

  return result;
}

void *sub_10032B2C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "SUCCESS";
  switch(a1)
  {
    case 0:
      return sub_1000065CC(a2, v2);
    case 1:
      int v2 = "INVALID_CMD_PARAM";
      break;
    case 2:
      int v2 = "UNKNOWN_CMD";
      break;
    case 3:
      int v2 = "INVALID_CMD_LEN";
      break;
    case 4:
      int v2 = "MEMORY_FAILURE";
      break;
    case 5:
      int v2 = "INTERNAL";
      break;
    case 6:
      int v2 = "BUSY";
      break;
    case 7:
      int v2 = "CMD_DISALLOWED";
      break;
    case 8:
      int v2 = "SES_MAX_LIMIT_REACHED";
      break;
    case 9:
      int v2 = "SES_NOT_FOUND";
      break;
    case 10:
      int v2 = "TBD3";
      break;
    case 11:
      int v2 = "TBD4";
      break;
    case 12:
      int v2 = "SES_TIMEOUT";
      break;
    case 13:
      int v2 = "SES_SYNC_TIMEOUT";
      break;
    case 14:
      int v2 = "MISSED_RANGING_CYCLE";
      break;
    case 15:
      int v2 = "LOCAL_SES_REMOVE_SUCCESS";
      break;
    case 16:
      int v2 = "LOCAL_SES_DISABLE_SUCCESS";
      break;
    case 17:
      int v2 = "SES_COMPLETED";
      break;
    case 18:
      int v2 = "SES_ALREADY_ACTIVE";
      break;
    case 19:
      int v2 = "SES_ALREADY_DISABLED";
      break;
    case 20:
      int v2 = "SES_SCHEDULING_CONFLICT";
      break;
    case 21:
      int v2 = "SES_COEX_CONFLICT";
      break;
    case 22:
      int v2 = "SES_WRONG_SYNC";
      break;
    case 23:
      int v2 = "START_TIME_ELAPSED";
      break;
    case 24:
      int v2 = "SES_UAP_ALREADY_PENDING";
      break;
    case 25:
      int v2 = "COEX_UNSUPPORTED";
      break;
    case 26:
      int v2 = "INVALID_TX_MINI_SLOT_SIZE";
      break;
    case 27:
      int v2 = "INVALID_RX_MINI_SLOT_SIZE";
      break;
    case 28:
      int v2 = "INVALID_SES_ROLE";
      break;
    case 29:
      int v2 = "INVALID_ANTENNA_CFG";
      break;
    case 30:
      int v2 = "INVALID_NACCESS_SLOTS";
      break;
    case 31:
      int v2 = "INVALID_PREAMBLE";
      break;
    case 32:
      int v2 = "INVALID_FEM_CFG";
      break;
    case 33:
      int v2 = "SUPERFRAMES_OVERLAP";
      break;
    case 34:
      int v2 = "INVALID_INTERVAL";
      break;
    case 35:
      int v2 = "INVALID_PKT_TYPE";
      break;
    case 36:
      int v2 = "INVALID_MAC_ADDR";
      break;
    case 37:
      int v2 = "MUTE_UNMUTE_DISALLOWED";
      break;
    case 38:
      int v2 = "SES_MUTED";
      break;
    case 39:
      int v2 = "INVALID_CHANNEL";
      break;
    case 40:
      int v2 = "DTM_CMD_UNSUPPORTED";
      break;
    case 41:
      int v2 = "DTM_SES_NOT_READY";
      break;
    case 42:
      int v2 = "DTM_SES_BUSY";
      break;
    case 43:
      int v2 = "DTM_PAYLOAD_INVALID_LEN";
      break;
    case 44:
      int v2 = "DTM_INVALID_SES_TO";
      break;
    case 45:
      int v2 = "MP_CMD_INTERLEAVED";
      break;
    case 46:
      int v2 = "MP_CMD_LEN_OVERFLOW";
      break;
    case 47:
      int v2 = "INVALID_SES_TYPE";
      break;
    case 48:
      int v2 = "INVALID_ALISHA_UWB_CFG_ID";
      break;
    case 49:
      int v2 = "INVALID_ALISHA_RAN_MULTIPLIER";
      break;
    case 50:
      int v2 = "INVALID_ALISHA_NRESPONDERS";
      break;
    case 51:
      int v2 = "INVALID_ALISHA_NCHAPS_PER_SLOT";
      break;
    case 52:
      int v2 = "INVALID_ALISHA_NSLOTS_PER_ROUND";
      break;
    case 53:
      int v2 = "INVALID_ALISHA_RBLOCK_CFG";
      break;
    case 54:
      int v2 = "ALISHA_UWB_SES_ID_NOT_FOUND";
      break;
    case 55:
      int v2 = "ALISHA_UWB_SES_ID_ALREADY_IN_USE";
      break;
    case 56:
      int v2 = "ALISHA_KEY_STORE_FULL";
      break;
    case 57:
      int v2 = "INVALID_ALISHA_RESPONDER_IDX";
      break;
    case 58:
      int v2 = "SES_GRUAP_ALREADY_PENDING";
      break;
    case 59:
      int v2 = "INVALID_CHANNEL_HOP_PATTERN";
      break;
    case 60:
      int v2 = "INVALID_ACCESS_SLOT_IDX";
      break;
    case 61:
      int v2 = "INVALID_GR_TYPE";
      break;
    case 62:
      int v2 = "SLOT_TIME_ELAPSED";
      break;
    case 63:
      int v2 = "INVALID_ALISHA_PULSE_SHAPE_COMBO";
      break;
    case 64:
      int v2 = "INVALID_ALISHA_HOP_MODE";
      break;
    case 65:
      int v2 = "INVALID_ALISHA_HOP_SEQUENCE";
      break;
    case 66:
      int v2 = "INVALID_SUBRATE";
      break;
    case 67:
      int v2 = "SES_NOT_ACTIVE";
      break;
    case 68:
      int v2 = "SES_SUBRATE_ALREADY_PENDING";
      break;
    case 69:
      int v2 = "SES_SUBRATE_ALREADY_EFFECTIVE";
      break;
    case 70:
      int v2 = "UAP_RX_FAILED";
      break;
    case 71:
      int v2 = "ALISHA_URSK_RETRIEVAL_FAILED";
      break;
    case 72:
      int v2 = "ALISHA_GET_KEY_ALREADY_PENDING";
      break;
    case 73:
      int v2 = "ALISHA_STS_INDEX_EXHAUSTED";
      break;
    case 74:
      int v2 = "ALISHA_BLOCK_IDX_EXHAUSTED";
      break;
    case 75:
      int v2 = "ALISHA_URSK_TTL_EXPIRED";
      break;
    case 76:
      int v2 = "INVALID_ALISHA_STS_INDEX_0";
      break;
    case 77:
      int v2 = "ALISHA_RESPONSE_TIMEOUT";
      break;
    case 78:
      int v2 = "ALISHA_TOTAL_TIMEOUT";
      break;
    case 79:
      int v2 = "UNAUTHENTICATED_CAL_BLOB";
      break;
    case 80:
      int v2 = "INVALID_SFD";
      break;
    case 81:
      int v2 = "INVALID_ALISHA_NSIMRESPONDERS";
      break;
    case 82:
      int v2 = "DUPLICATE";
      break;
    case 83:
      int v2 = "NMI_NAP_RX_FAILED";
      break;
    case 84:
      int v2 = "NMI_NAR_RX_FAILED";
      break;
    case 85:
      int v2 = "NMI_SOR_RX_FAILED";
      break;
    case 86:
      int v2 = "NMI_NAP_WRONG_SYNC";
      break;
    case 87:
      int v2 = "NMI_WRONG_IRK";
      break;
    case 88:
      int v2 = "NMI_RNG_DIS_BOTH_SIDES";
      break;
    case 89:
      int v2 = "NMI_POLL_RSP_RX_OTHER_FAILURE";
      break;
    case 90:
      int v2 = "NMI_DATA_RX_OTHER_FAILURE";
      break;
    case 91:
      int v2 = "NMI_POLL_RSP_WRONG_SYNC";
      break;
    case 92:
      int v2 = "NMI_DATA_WRONG_SYNC";
      break;
    case 93:
      int v2 = "SES_EXCLUSIVE_MAC_DISALLOWED";
      break;
    case 94:
      int v2 = "NMI_NAR_WRONG_SYNC";
      break;
    case 95:
      int v2 = "NMI_SOR_WRONG_SYNC";
      break;
    case 96:
      int v2 = "NMI_INVALID_RTT_TAT";
      break;
    case 97:
      int v2 = "NMI_POLL_RSP_MISSED_CYCLE";
      break;
    default:
      uint64_t v3 = "UNKNOWN";
      if (a1 == 0xFFFF) {
        uint64_t v3 = "UNKNOWN_ERROR";
      }
      if (a1 == 16398) {
        int v2 = "FACTORY_STOP_TEST";
      }
      else {
        int v2 = (char *)v3;
      }
      break;
  }

  return sub_1000065CC(a2, v2);
}

uint64_t sub_10032B7BC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 6)
  {
    sub_10032C51C("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose hardware version");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid Rose hardware version");
  }

  return result;
}

void sub_10032B82C(_Unwind_Exception *a1)
{
}

void *sub_10032B840@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_1007BE578[(__int16)a1];
  }
  return sub_1000065CC(a2, v2);
}

uint64_t sub_10032B870( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((result - 208) > 0x2E || ((1LL << (result + 48)) & 0x7FFF47FF1FFFLL) == 0)
    && (result > 0x18 || ((1 << result) & 0x116003F) == 0))
  {
    sub_10032C51C("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid rx status.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid rx status.");
  }

  return result;
}

void sub_10032B920(_Unwind_Exception *a1)
{
}

uint64_t sub_10032B934(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  if (*a1 == v2)
  {
    LOBYTE(v3) = 0;
  }

  else
  {
    int v3 = 0;
    int v4 = 0;
    do
    {
      int v5 = *v1++;
      unsigned int v6 = v5 - 2;
      int v7 = v3 | 2;
      if (v5 == 1) {
        v3 |= 1u;
      }
      if (v6 < 4)
      {
        ++v4;
        int v3 = v7;
      }
    }

    while (v1 != v2);
    if ((v4 & 0xFFFFFFFB) != 0) {
      sub_1003ACFCC();
    }
  }

  return v3;
}

uint64_t sub_10032B998(unsigned int a1)
{
  if (a1 >= 4) {
    sub_1003ACFF4();
  }
  return a1 & 1;
}

uint64_t sub_10032B9B4(unsigned int a1)
{
  if (a1 >= 4) {
    sub_1003AD01C();
  }
  return (a1 >> 1) & 1;
}

void *sub_10032B9D0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  else {
    int v2 = off_1007BE5B0[(char)(a1 - 1)];
  }
  return sub_1000065CC(a2, v2);
}

void *sub_10032BA04@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "UNKNOWN";
  if (a1 == 9) {
    int v2 = "CHANNEL9";
  }
  if (a1 == 5) {
    int v3 = "CHANNEL5";
  }
  else {
    int v3 = (char *)v2;
  }
  return sub_1000065CC(a2, v3);
}

void *sub_10032BA34@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_1007BE5D8[(char)a1];
  }
  return sub_1000065CC(a2, v2);
}

_BYTE *sub_10032BA64(_BYTE *result, int a2)
{
  if (a2 == 5)
  {
    char v2 = 1;
  }

  else
  {
    if (a2 != 9) {
      return result;
    }
    char v2 = 2;
  }

  *result |= v2;
  return result;
}

_WORD *sub_10032BA90(_WORD *result, int a2)
{
  return result;
}

uint64_t sub_10032BABC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8 = a1;
  switch((_DWORD)a2)
  {
    case 1:
      if ((_DWORD)a1)
      {
        if ((_DWORD)a1 != 1)
        {
          sub_10032C51C( "Exception: %s - %d",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t)"Invalid Rose channel config for HSI V1");
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_100325794(exception, "Invalid Rose channel config");
LABEL_12:
        }

        return 9;
      }

      else
      {
        return 5;
      }

    case 2:
      sub_10032BBB0(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 0:
      sub_10032C51C("Exception: %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown HSI version");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Unknown HSI version");
      goto LABEL_12;
  }

  return v8;
}

void sub_10032BB98(_Unwind_Exception *a1)
{
}

uint64_t sub_10032BBB0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)result != 9 && (_DWORD)result != 5)
  {
    sub_10032C51C("Exception: %s - %d", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose channel config for HSI V2");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Invalid Rose channel config");
  }

  return result;
}

void sub_10032BC2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10032BC40(int a1, int a2)
{
  if (a2 == 2)
  {
    if (a1 == 5) {
      return 5LL;
    }
    else {
      return 9LL;
    }
  }

  else
  {
    if (a2 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "Unknown HSI version");
    }

    return a1 != 5;
  }

void sub_10032BCB0(_Unwind_Exception *a1)
{
}

unint64_t sub_10032BCC4(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if ((a1 >> 11) - 1 >= 6)
  {
    if (!v1 && (a1 == 9 || a1 == 5))
    {
      LOBYTE(v1) = 0;
      unint64_t v2 = ((unint64_t)a1 << 8) | 0x10000;
    }

    else
    {
      LOBYTE(v1) = 0;
      unint64_t v2 = 0LL;
    }
  }

  else
  {
    unint64_t v2 = ((unint64_t)(a1 & 0x7FF) << 32) | 0x1000000000000LL;
  }

  return v2 | v1;
}

uint64_t sub_10032BD2C(unsigned __int8 *a1)
{
  int v1 = *a1;
  __int16 v2 = (_WORD)v1 << 11;
  unsigned __int16 v3 = v1 - 1;
  if ((v1 - 1) >= 6)
  {
    if (*a1) {
      return v3;
    }
    if (a1[2]) {
      return (unsigned __int16)(v2 | a1[1]);
    }
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Missing channel-select for band");
  }

  if (!a1[6]) {
    goto LABEL_8;
  }
  return (unsigned __int16)(*((_WORD *)a1 + 2) | v2);
}

void sub_10032BDD0(_Unwind_Exception *a1)
{
}

uint64_t sub_10032BDE8(int a1)
{
  if ((*(void *)&a1 & 0xFF0000LL) != 0 && (unint64_t v1 = sub_10032BCC4((unsigned __int16)a1), v2))
  {
    BOOL v3 = v1 == 0LL;
    unint64_t v4 = v1 >> 16;
    if ((_BYTE)v1) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = BYTE1(v1);
    }
    if (v3) {
      int v6 = v4;
    }
    else {
      int v6 = 0;
    }
  }

  else
  {
    unsigned __int8 v5 = 0;
    int v6 = 0;
  }

  return v5 | (v6 << 8);
}

BOOL sub_10032BE34(_BYTE *a1)
{
  return *a1 == 0;
}

uint64_t sub_10032BE44(unsigned int a1)
{
  unsigned int v1 = a1 >> 8;
  unsigned __int8 v2 = __rev16(a1);
  unsigned int v3 = bswap32(a1) >> 24;
  if (((1 << SBYTE1(a1)) & 0x101F7) == 0)
  {
    unsigned __int8 v2 = 0;
    unsigned int v3 = a1 >> 8;
  }

  BOOL v4 = v1 > 0x10;
  int v5 = v1 <= 0x10 && ((1 << SBYTE1(a1)) & 0x101F7) != 0;
  if (v4)
  {
    unsigned __int8 v2 = 0;
    LOWORD(v3) = v5;
  }

  return (unsigned __int16)(v2 | (unsigned __int16)((_WORD)v3 << 8)) | (v5 << 16);
}

uint64_t sub_10032BE98(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t sub_10032BEA8(unsigned __int8 *a1)
{
  int v1 = a1[1];
  int v2 = *a1;
  if (*a1)
  {
    if (v2 == 16 && v1 == 1)
    {
      int v1 = 1;
      int v2 = 16;
    }
  }

  else
  {
    unsigned int v3 = v1 - 1;
    if (v3 >= 0xD)
    {
      int v1 = 0;
      int v2 = 0;
    }

    else
    {
      int v2 = 0;
      int v1 = byte_100431788[(char)v3];
    }
  }

  return v1 | (v2 << 8);
}

uint64_t sub_10032BF0C@<X0>(_BYTE *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  switch(*a1)
  {
    case 0:
      BOOL v4 = &v17;
      int v5 = "Legacy_";
      uint64_t v6 = 7LL;
      goto LABEL_7;
    case 1:
      BOOL v4 = &v17;
      int v5 = "IEEE_";
      uint64_t v6 = 5LL;
      goto LABEL_7;
    case 2:
      int v7 = &v17;
      unsigned __int8 v8 = "IEEE_";
      uint64_t v9 = 5LL;
      goto LABEL_9;
    case 4:
      int v7 = &v17;
      unsigned __int8 v8 = "Proprietary_";
      uint64_t v9 = 12LL;
      goto LABEL_9;
    case 5:
      BOOL v4 = sub_100046B94(&v17, (uint64_t)"Split", 5LL);
      int v5 = "ND_";
      uint64_t v6 = 3LL;
LABEL_7:
      uint64_t v10 = sub_100046B94(v4, (uint64_t)v5, v6);
      char v11 = "BPRF";
      goto LABEL_10;
    case 6:
      int v7 = sub_100046B94(&v17, (uint64_t)"Split", 5LL);
      unsigned __int8 v8 = "ND_";
      uint64_t v9 = 3LL;
LABEL_9:
      uint64_t v10 = sub_100046B94(v7, (uint64_t)v8, v9);
      char v11 = "HPRF";
LABEL_10:
      uint64_t v12 = 4LL;
      goto LABEL_15;
    case 7:
      uint64_t v10 = &v17;
      goto LABEL_13;
    case 8:
      uint64_t v10 = sub_100046B94(&v17, (uint64_t)"Mixed_", 6LL);
LABEL_13:
      char v11 = "MMS";
      uint64_t v12 = 3LL;
      goto LABEL_15;
    case 0x10:
      uint64_t v10 = &v17;
      char v11 = "NB";
      uint64_t v12 = 2LL;
LABEL_15:
      sub_100046B94(v10, (uint64_t)v11, v12);
      break;
    default:
      break;
  }

  unint64_t v13 = sub_100046B94(&v17, (uint64_t)" PktIdx ", 8LL);
  std::ostream::operator<<(v13, a1[1]);
  std::stringbuf::str(a2, &v18);
  *(void *)((char *)v16
  uint64_t v17 = v14;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10032C110(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10032C124( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_10032C204();
  sub_10032C2A8((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_1000065CC(&v15, a1);
  char v11 = std::string::append(&v15, "\n");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t cap = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v13 = (std::mutex *)sub_10032C308();
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_10032C38C(v13, (const char *)v14, v18);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10032C1D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10032C204()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F46D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1007F46D0))
  {
    qword_1007F4690 = 850045863LL;
    xmmword_1007F4698 = 0u;
    unk_1007F46A8 = 0u;
    xmmword_1007F46B8 = 0u;
    qword_1007F46C8 = 0LL;
    qword_1007F4688 = (uint64_t)os_log_create("com.apple.librose", "client");
    __cxa_atexit((void (*)(void *))sub_10032C7F0, &qword_1007F4688, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F46D0);
  }

  return &qword_1007F4688;
}

void sub_10032C2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(void *)a1, 2LL, a2, a3, v3);
  std::mutex::unlock(v7);
}

uint64_t *sub_10032C308()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F4718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1007F4718))
  {
    qword_1007F46D8 = 850045863LL;
    unk_1007F46E0 = 0u;
    unk_1007F46F0 = 0u;
    unk_1007F4700 = 0u;
    qword_1007F4710 = 0LL;
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &qword_1007F46D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F4718);
  }

  return &qword_1007F46D8;
}

void sub_10032C38C(std::mutex *a1, const char *a2, va_list a3)
{
}

void sub_10032C3DC( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_10032C204();
  sub_10032C4BC((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_1000065CC(&v15, a1);
  char v11 = std::string::append(&v15, "\n");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t cap = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v13 = (std::mutex *)sub_10032C308();
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_10032C38C(v13, (const char *)v14, v18);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10032C48C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032C4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(void *)a1, 0LL, a2, a3, v3);
  std::mutex::unlock(v7);
}

void sub_10032C51C( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_10032C204();
  sub_10032C5FC((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_1000065CC(&v15, a1);
  char v11 = std::string::append(&v15, "\n");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t cap = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v13 = (std::mutex *)sub_10032C308();
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_10032C65C(v13, (const char *)v14, v18);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10032C5CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032C5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(void *)a1, 16LL, a2, a3, v3);
  std::mutex::unlock(v7);
}

void sub_10032C65C(std::mutex *a1, const char *a2, va_list a3)
{
}

void sub_10032C6B0( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_10032C204();
  sub_10032C790((uint64_t)v10, (uint64_t)a1, (uint64_t)&a9);
  sub_1000065CC(&v15, a1);
  char v11 = std::string::append(&v15, "\n");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t cap = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v13 = (std::mutex *)sub_10032C308();
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_10032C65C(v13, (const char *)v14, v18);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10032C760( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args(*(void *)a1, 17LL, a2, a3, v3);
  std::mutex::unlock(v7);
}

uint64_t sub_10032C7F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10032C82C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10032C8A0;
  block[3] = &unk_1007BE610;
  block[4] = a1;
  if (qword_1007FFA90 != -1) {
    dispatch_once(&qword_1007FFA90, block);
  }
  return byte_1007FFA98;
}

void sub_10032C8A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (void **)(v1 + 48);
  if (*(void *)(v1 + 48)) {
    sub_1003AD044();
  }
  uint64_t v3 = dlopen("/usr/lib/libRoseBooter.dylib", 1);
  *int v2 = v3;
  if (!v3)
  {
    dlerror();
    sub_10032C51C( "Failed to dlopen %s, error: %s",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  (uint64_t)"/usr/lib/libRoseBooter.dylib");
LABEL_7:
    char v12 = 0;
    goto LABEL_8;
  }

  BOOL v4 = "RoseBooterHasFailedForward";
  *(void *)(v1 + 56) = dlsym(v3, "RoseBooterHasFailedForward");
  if (!dlerror())
  {
    if (*(void *)(v1 + 56))
    {
      BOOL v4 = "RoseBooterPerformHealing";
      *(void *)(v1 + 64) = dlsym(*(void **)(v1 + 48), "RoseBooterPerformHealing");
      if (!dlerror())
      {
        if (*(void *)(v1 + 64))
        {
          BOOL v4 = "RoseBooterAllocate";
          *(void *)(v1 + 72) = dlsym(*(void **)(v1 + 48), "RoseBooterAllocate");
          if (!dlerror())
          {
            if (*(void *)(v1 + 72))
            {
              BOOL v4 = "RoseBooterPreflight";
              *(void *)(v1 + 80) = dlsym(*(void **)(v1 + 48), "RoseBooterPreflight");
              if (!dlerror())
              {
                if (*(void *)(v1 + 80))
                {
                  BOOL v4 = "RoseBooterBootChip";
                  *(void *)(v1 + 88) = dlsym(*(void **)(v1 + 48), "RoseBooterBootChip");
                  if (!dlerror())
                  {
                    if (*(void *)(v1 + 88))
                    {
                      BOOL v4 = "RoseBooterSendCalWithOptions";
                      *(void *)(v1 + 96) = dlsym(*(void **)(v1 + 48), "RoseBooterSendCalWithOptions");
                      if (!dlerror())
                      {
                        if (*(void *)(v1 + 96))
                        {
                          BOOL v4 = "RoseBooterGetCal";
                          *(void *)(v1 + 104) = dlsym(*(void **)(v1 + 48), "RoseBooterGetCal");
                          if (!dlerror())
                          {
                            if (*(void *)(v1 + 104))
                            {
                              BOOL v4 = "RoseBooterDestroy";
                              *(void *)(v1 + 112) = dlsym(*(void **)(v1 + 48), "RoseBooterDestroy");
                              if (!dlerror())
                              {
                                if (*(void *)(v1 + 112))
                                {
                                  char v12 = 1;
                                  goto LABEL_8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  sub_10032C51C("Failed to dlsym %s, error: %s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)v4);
  if (!*v2) {
    goto LABEL_7;
  }
  dlclose(*v2);
  char v12 = 0;
  *(_OWORD *)int v2 = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 112) = 0LL;
LABEL_8:
  byte_1007FFA98 = v12;
}

uint64_t sub_10032CA90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)child = 0LL;
  if (qword_1007FFAA0 != -1) {
    dispatch_once(&qword_1007FFAA0, &stru_1007BE650);
  }
  if (byte_1007FFA99 != 1) {
    return 0LL;
  }
  uint64_t v10 = (void *)(a1 + 8);
  if (*(void *)(a1 + 8)) {
    return 1LL;
  }
  if (!*(void *)(a1 + 40))
  {
    uint64_t v27 = "packet receive callback uninitialized";
LABEL_25:
    sub_10032C51C(v27, a2, a3, a4, a5, a6, a7, a8, byte7);
    return 0LL;
  }

  if (!*(void *)(a1 + 144))
  {
    uint64_t v27 = "crash callback needs to be registered first";
    goto LABEL_25;
  }

  if (!*(void *)(a1 + 176))
  {
    uint64_t v27 = "state change available callback needs to be registered first";
    goto LABEL_25;
  }

  if (!*(void *)(a1 + 208))
  {
    uint64_t v27 = "error reporting callback needs to be registered first";
    goto LABEL_25;
  }

  if (!a2)
  {
    uint64_t v27 = "invalid dispatch queue parameter";
    goto LABEL_25;
  }

  if ((sub_10032C82C(a1) & 1) == 0)
  {
    uint64_t v27 = "unable to load booter library";
    goto LABEL_25;
  }

  char v12 = IOServiceNameMatching("rose");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
  if (!MatchingService)
  {
    uint64_t v27 = "failed to get rose service";
    goto LABEL_25;
  }

  io_object_t v14 = MatchingService;
  uint64_t ChildEntry = IORegistryEntryGetChildEntry(MatchingService, "IOService", child);
  IOObjectRelease(v14);
  if ((_DWORD)ChildEntry || (io_service_t v16 = child[0]) == 0)
  {
    sub_10032CE84(a1);
    uint64_t byte7 = ChildEntry;
    uint64_t v27 = "failed to get rose driver: 0x%x";
    goto LABEL_25;
  }

  uint64_t v17 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0xAu,  0x3Au,  0xB3u,  0x17u,  0x88u,  0xE7u,  0x40u,  0xA0u,  0x89u,  0x68u,  0x33u,  0x55u,  0x58u,  0x14u,  0x66u,  0x63u);
  uint64_t v18 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xC2u,  0x44u,  0xE8u,  0x58u,  0x10u,  0x9Cu,  0x11u,  0xD4u,  0x91u,  0xD4u,  0,  0x50u,  0xE4u,  0xC6u,  0x42u,  0x6Fu);
  uint64_t v19 = IOCreatePlugInInterfaceForService(v16, v17, v18, (IOCFPlugInInterface ***)a1, (SInt32 *)&child[1]);
  IOObjectRelease(child[0]);
  if ((_DWORD)v19 || (uint64_t v28 = *(IOCFPlugInInterface ***)a1) == 0LL)
  {
    sub_10032CE84(a1);
    sub_10032C51C("creating rose plugin interface failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0LL;
  }

  QueryInterface = (*v28)->QueryInterface;
  uint64_t v30 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0x10u,  0x3Au,  0xBDu,  0x4Au,  0x60u,  0x94u,  0x4Bu,  0xC0u,  0xAEu,  0xEEu,  0x3Eu,  0x37u,  0xF5u,  0xA2u,  0xFu,  0x3Bu);
  CFUUIDBytes v31 = CFUUIDGetUUIDBytes(v30);
  ((void (*)(IOCFPlugInInterface **, void, void, uint64_t))QueryInterface)( v28,  *(void *)&v31.byte0,  *(void *)&v31.byte8,  a1 + 8);
  if (!*v10)
  {
    sub_10032CE84(a1);
    uint64_t v27 = "failed to query rose plugin interface";
    goto LABEL_25;
  }

  (*(void (**)(void, uint64_t))(*(void *)*v10 + 72LL))(*v10, a2);
  uint64_t v32 = (*(uint64_t (**)(void, void (*)(uint64_t, const void *, size_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 336LL))( *(void *)(a1 + 8),  sub_10032CEDC,  a1);
  if ((_DWORD)v32)
  {
    sub_10032C51C("failed to register event callback: 0x%x", v33, v34, v35, v36, v37, v38, v39, v32);
  }

  else
  {
    uint64_t v40 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 384LL))( *(void *)(a1 + 8),  sub_10032CEF0,  a1);
    if ((_DWORD)v40)
    {
      sub_10032C51C("failed to register crashHandlerCallback: 0x%x", v41, v42, v43, v44, v45, v46, v47, v40);
    }

    else
    {
      uint64_t v48 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 392LL))( *(void *)(a1 + 8),  sub_10032CF30,  a1);
      if ((_DWORD)v48)
      {
        sub_10032C51C("failed to register fwStateChangeCallback: 0x%x", v49, v50, v51, v52, v53, v54, v55, v48);
      }

      else
      {
        uint64_t v56 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 400LL))( *(void *)(a1 + 8),  sub_10032CFB0,  a1);
        if (!(_DWORD)v56) {
          return 1LL;
        }
        sub_10032C51C("failed to register errorReportCallback: 0x%x", v57, v58, v59, v60, v61, v62, v63, v56);
      }
    }
  }

  sub_10032CE84(a1);
  return 0LL;
}

uint64_t sub_10032CE44()
{
  if (qword_1007FFAA0 != -1) {
    dispatch_once(&qword_1007FFAA0, &stru_1007BE650);
  }
  return byte_1007FFA99;
}

IOCFPlugInInterface **sub_10032CE84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 72LL))(v2, 0LL);
    (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
    *(void *)(a1 + 8) = 0LL;
  }

  BOOL result = *(IOCFPlugInInterface ***)a1;
  if (*(void *)a1)
  {
    BOOL result = (IOCFPlugInInterface **)IODestroyPlugInInterface(result);
    *(void *)a1 = 0LL;
  }

  return result;
}

void sub_10032CEDC( uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    sub_10032D088(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  else
  {
    uint64_t v8 = sub_1003AD06C(0LL, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    sub_10032CEF0(v8);
  }

uint64_t sub_10032CEF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 144);
    if (v8)
    {
      uint64_t v11 = a2;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 48LL))(v8, &v11);
    }
  }

  else
  {
    uint64_t v8 = sub_1003AD088(0LL, a2, a3, a4, a5, a6, a7, a8);
  }

  uint64_t v10 = sub_1003AD0A4(v8, a2, a3, a4, a5, a6, a7, a8);
  return sub_10032CF30(v10);
}

uint64_t sub_10032CF30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    uint64_t v9 = sub_1003AD0C0(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(a1 + 176);
  if (!v9)
  {
LABEL_8:
    sub_1003AD0EC(v9, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }

  if (a2 > 3)
  {
    sub_10032C51C( "RoseControllerInterface::fwStateChangeCallback() unknown state: 0x%x",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a2);
    uint64_t v9 = *(void *)(a1 + 176);
    int v11 = 4;
    if (v9) {
      return (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 48LL))(v9, &v11);
    }
LABEL_9:
    sub_10001EEF0();
  }

  int v11 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 48LL))(v9, &v11);
}

uint64_t sub_10032CFB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    a1 = sub_1003AD108(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }

  uint64_t v8 = a1;
  if (!*(void *)(a1 + 208))
  {
LABEL_7:
    uint64_t v12 = sub_1003AD134(a1, a2, a3, a4, a5, a6, a7, a8);
    return sub_10032D024(v12, v13, v14, v15, v16, v17, v18, v19);
  }

  if (a2 >= 0xB)
  {
    sub_10032C51C("errorReportCallback: UnknownError: %d", a2, a3, a4, a5, a6, a7, a8, a2);
    LODWORD(a2) = 12;
  }

  return sub_10032D17C(v8 + 184, a2, a3, a4);
}

uint64_t sub_10032D024( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("%s: rose not connected", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"reset");
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("RoseController reset failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

void sub_10032D088( uint64_t a1, const void *a2, size_t __sz, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && __sz - 113 > 0xFFFFFFFFFFFFFF92LL)
  {
    std::stringbuf::string_type __p = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    sub_1001309C0(&__p, a2, (uint64_t)a2 + __sz, __sz);
    char v15 = 0;
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11) {
      sub_10001EEF0();
    }
    (*(void (**)(uint64_t, void **, char *))(*(void *)v11 + 48LL))(v11, &__p, &v15);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
  }

  else
  {
    sub_10032C51C("invalid event parameter (size: %zu)", (uint64_t)a2, __sz, a4, a5, a6, a7, a8, __sz);
    if (*(void *)(a1 + 208)) {
      sub_10032D17C(a1 + 184, 11, (uint64_t)a2, __sz);
    }
  }

void sub_10032D160( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D17C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(void *)v4 + 48LL))(v4, &v8, &v7, &v6);
}

uint64_t sub_10032D1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0LL;
  uint64_t v9 = *(void *)(a1 + 8);
  if (!v9)
  {
    uint64_t v19 = "driver interface not created";
LABEL_10:
    sub_10032C51C(v19, a2, a3, a4, a5, a6, a7, a8, v21);
    return 0LL;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v22) & 1) == 0)
  {
    uint64_t v19 = "creating RoseBooter failed";
    goto LABEL_10;
  }

  uint64_t v10 = (*(uint64_t (**)(uint64_t))(a1 + 80))(v22);
  if (v10)
  {
    uint64_t v18 = v10;
    goto LABEL_9;
  }

  sub_10032C51C("rose preflight failed", v11, v12, v13, v14, v15, v16, v17, v21);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v22) & 1) == 0)
  {
LABEL_9:
    uint64_t v19 = "destroying RoseBooter failed";
    goto LABEL_10;
  }

  return 0LL;
}

uint64_t sub_10032D270( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v24 = -1;
  int v25 = -1;
  uint64_t v23 = 0LL;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v23) & 1) != 0)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, int *, int *))(a1 + 88))(v23, &v25, &v24);
      int v19 = v24;
      a2[1] = v25;
      a2[2] = v19;
      *a2 = v11;
      if ((_DWORD)v11)
      {
        sub_10032C51C("rose boot failed: %d, driver state %d, status reg %d", v12, v13, v14, v15, v16, v17, v18, v11);
      }

      else if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v23) & 1) != 0)
      {
        return 1LL;
      }

      uint64_t v20 = "destroying RoseBooter failed";
    }

    else
    {
      uint64_t v20 = "creating RoseBooter failed";
    }
  }

  else
  {
    uint64_t v20 = "driver interface not created";
  }

  sub_10032C51C(v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v22);
  return 0LL;
}

BOOL sub_10032D348( uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = 0LL;
  *a3 = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v13 = "driver interface not created";
LABEL_12:
    sub_10032C51C(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v24);
    return 0LL;
  }

  unsigned int v10 = a4;
  else {
    uint64_t v12 = dword_1004317A0[(int)a2 - 1];
  }
  if (((*(uint64_t (**)(void))(a1 + 72))() & 1) == 0)
  {
    uint64_t v13 = "creating RoseBooter failed";
    goto LABEL_12;
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, void))(a1 + 96))(v26, v12, v25, v10);
  *(_DWORD *)(a6 + 12) = v14;
  BOOL v22 = (_DWORD)v14 == 0;
  if ((_DWORD)v14) {
    sub_10032C51C("send calibration failed: %d", v15, v16, v17, v18, v19, v20, v21, v14);
  }
  *a3 = ((v25[0] & 2) != 0) + (v25[0] & 1) + ((v25[0] & 4) != 0);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v26) & 1) == 0)
  {
    uint64_t v13 = "destroying RoseBooter failed";
    goto LABEL_12;
  }

  return v22;
}

uint64_t sub_10032D458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v27) = 0;
  sub_10016C2CC(&__p, 0x70uLL, &v27);
  unint64_t v27 = 0LL;
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  if (!v13)
  {
    sub_10032C51C("%s: rose not connected", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"send");
    goto LABEL_10;
  }

  uint64_t v14 = *v13;
  if ((a4 & 0xFF00000000LL) != 0)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(v14 + 464))();
    if ((_DWORD)v15)
    {
      sub_10032C51C("PerformCommandWithTimeout failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v15);
LABEL_10:
      uint64_t v24 = 0LL;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v23 = (*(uint64_t (**)(void))(v14 + 256))();
    if ((_DWORD)v23)
    {
      sub_10032C51C("PerformCommand failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v23);
      goto LABEL_10;
    }
  }

  if (v27 - 113 <= 0xFFFFFFFFFFFFFF92LL)
  {
    sub_10032C51C("invalid response (length: %zu)", v16, v17, v18, v19, v20, v21, v22, v27);
    goto LABEL_10;
  }

  if (v27 <= v29 - (_BYTE *)__p)
  {
    if (v27 < v29 - (_BYTE *)__p) {
      char v29 = (char *)__p + v27;
    }
  }

  else
  {
    sub_1000353EC((unint64_t *)&__p, v27 - (v29 - (_BYTE *)__p));
  }

  char v30 = 1;
  uint64_t v26 = *(void *)(a1 + 40);
  if (!v26) {
    sub_10001EEF0();
  }
  (*(void (**)(uint64_t, void **, char *))(*(void *)v26 + 48LL))(v26, &__p, &v30);
  uint64_t v24 = 1LL;
LABEL_11:
  if (__p)
  {
    char v29 = (char *)__p;
    operator delete(__p);
  }

  return v24;
}

void sub_10032D5D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D5F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v18 = "driver interface not created";
LABEL_29:
    sub_10032C51C(v18, a2, a3, a4, a5, a6, a7, a8, v71);
    return 0LL;
  }

  if (!a2)
  {
    uint64_t v18 = "invalid parameter";
    goto LABEL_29;
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8), a2 + 8);
  if ((_DWORD)v10)
  {
    sub_10032C51C("get chip id failed: 0x%x", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0LL;
  }

  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128LL))(*(void *)(a1 + 8), a2 + 10);
  if ((_DWORD)v19)
  {
    sub_10032C51C("get board id failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0LL;
  }

  uint64_t v27 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136LL))(*(void *)(a1 + 8), a2);
  if ((_DWORD)v27)
  {
    sub_10032C51C("get ecid failed: 0x%x", v28, v29, v30, v31, v32, v33, v34, v27);
    return 0LL;
  }

  uint64_t v35 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 192LL))(*(void *)(a1 + 8), a2 + 12);
  if ((_DWORD)v35)
  {
    sub_10032C51C("get boot mode failed: 0x%x", v36, v37, v38, v39, v40, v41, v42, v35);
    return 0LL;
  }

  uint64_t v43 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 224LL))(*(void *)(a1 + 8), a2 + 17);
  if ((_DWORD)v43) {
    BOOL v51 = 1;
  }
  else {
    BOOL v51 = *(unsigned __int8 *)(a2 + 17) >= 2u;
  }
  if (v51)
  {
    sub_10032C51C("get secure mode failed: 0x%08x secureMode: 0x%x", v44, v45, v46, v47, v48, v49, v50, v43);
    return 0LL;
  }

  uint64_t v52 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 216LL))(*(void *)(a1 + 8), a2 + 16);
  if ((_DWORD)v52) {
    BOOL v60 = 1;
  }
  else {
    BOOL v60 = *(unsigned __int8 *)(a2 + 16) >= 2u;
  }
  if (v60)
  {
    sub_10032C51C("get production mode failed: 0x%08x prodMode: 0x%02x", v53, v54, v55, v56, v57, v58, v59, v52);
    return 0LL;
  }

  uint64_t v61 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 232LL))(*(void *)(a1 + 8), a2 + 18);
  if ((_DWORD)v61)
  {
    sub_10032C51C("get security domain failed: 0x%08x", v62, v63, v64, v65, v66, v67, v68, v61);
    return 0LL;
  }

  uint64_t v69 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 352LL))(*(void *)(a1 + 8), a2 + 20);
  if ((_DWORD)v69)
  {
    uint64_t v71 = v69;
    uint64_t v18 = "get chip revision failed: 0x%08x";
    goto LABEL_29;
  }

  return 1LL;
}

uint64_t sub_10032D7B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_7:
    sub_10032C51C(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0LL;
  }

  if (!a2)
  {
    uint64_t v17 = "invalid time dictionary";
    goto LABEL_7;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 208LL))(v8);
  if (!(_DWORD)v9) {
    return 1LL;
  }
  sub_10032C51C("perform timesync failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0LL;
}

uint64_t sub_10032D818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v18 = "driver interface not created";
LABEL_7:
    sub_10032C51C(v18, a2, a3, a4, a5, a6, a7, a8, v20);
    return 0LL;
  }

  if (!a6)
  {
    uint64_t v18 = "Invalid arguments";
    goto LABEL_7;
  }

  unsigned int v10 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 360LL))(v8))
  {
    sub_10032C51C( "error while trying to dequeue FirwmareCrashLogs for core - %d: 0x%x",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v10);
    return 0LL;
  }

  if (a3 && *(unsigned __int8 *)(a3 + 13) != v10)
  {
    sub_10032C51C( "Expecting a crash log for core: %d. But, got a crash log for core: %d",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v10);
    return 0LL;
  }

  return 1LL;
}

BOOL sub_10032D8B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unsigned int v9 = a2;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 368LL))(v8);
    BOOL v18 = v10 == -536870160 || v10 == 0;
    if (v10 != -536870160 && v10 != 0) {
      sub_10032C51C( "error while trying to read the coredump information for core - %d: 0x%x",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v9);
    }
  }

  else
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v21);
    return 0LL;
  }

  return v18;
}

uint64_t sub_10032D93C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  unsigned int v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 376LL))(v8))
  {
    sub_10032C51C("error while trying to read the coredump for core - %d: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10032D9A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("error while trying to pause firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10032D9FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 288LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("error while trying to resume firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10032DA54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_9:
    sub_10032C51C(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0LL;
  }

  if (!a2 || !a3 || !a4)
  {
    uint64_t v17 = "Invalid arguments";
    goto LABEL_9;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 280LL))(v8);
  if (!(_DWORD)v9) {
    return 1LL;
  }
  sub_10032C51C("error while trying to dequeue FirwmareCrashLogs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0LL;
}

void *sub_10032DAC4(uint64_t a1, uint64_t a2)
{
  return sub_10032DACC((void *)(a1 + 120), a2);
}

void *sub_10032DACC(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10032DB64(uint64_t a1, uint64_t a2)
{
  return sub_10032DB6C((void *)(a1 + 152), a2);
}

void *sub_10032DB6C(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10032DC04(uint64_t a1, uint64_t a2)
{
  return sub_10032DC0C((void *)(a1 + 184), a2);
}

void *sub_10032DC0C(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_10032DCA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 344LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("error while trying to trigger a crashlog: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10032DCFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v10 = "driver interface not created";
LABEL_7:
    sub_10032C51C(v10, a2, a3, a4, a5, a6, a7, a8, v12);
    return 4LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 304LL))(v8, &v13);
  if (!(_DWORD)v9)
  {
    uint64_t result = v13;
    if (v13 < 4u) {
      return result;
    }
    uint64_t v12 = v13;
    uint64_t v10 = "RoseControllerInterface::getFirmwareState() unknown state: 0x%x";
    goto LABEL_7;
  }

  sub_10032C51C("error while trying to get the firmware state: 0x%x", a2, a3, a4, a5, a6, a7, a8, v9);
  return 4LL;
}

void sub_10032DD6C(id a1)
{
  uint64_t v1 = IOServiceNameMatching("rose");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    uint64_t v12 = "failed to find rose service";
LABEL_6:
    sub_10032C51C(v12, v3, v4, v5, v6, v7, v8, v9, v13);
    char v11 = 0;
    goto LABEL_7;
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"ECID", kCFAllocatorDefault, 0);
  if (!CFProperty)
  {
    uint64_t v12 = "rose ECID property not found in registry";
    goto LABEL_6;
  }

  CFRelease(CFProperty);
  char v11 = 1;
LABEL_7:
  byte_1007FFA99 = v11;
}

uint64_t sub_10032DDFC(uint64_t a1, _BYTE *a2)
{
  if ((sub_10032C82C(a1) & 1) == 0)
  {
    sub_10032C3DC( "couldn't load booter library, so we are answering to the best of our ability",  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v22);
    LOBYTE(v20) = 0;
    goto LABEL_5;
  }

  uint64_t v11 = (*(uint64_t (**)(void))(a1 + 56))();
  int v12 = v11;
  sub_10032C3DC("fail forward state %d", v13, v14, v15, v16, v17, v18, v19, v11);
  if ((v12 - 1) <= 2)
  {
    unsigned int v20 = 0x10001u >> (8 * (v12 - 1));
LABEL_5:
    *a2 = v20;
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_10032DE84(uint64_t a1)
{
  if ((sub_10032C82C(a1) & 1) != 0) {
    return (*(uint64_t (**)(void))(a1 + 64))();
  }
  sub_10032C3DC( "couldn't load booter library, so we are answering to the best of our ability",  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v10);
  return 0LL;
}

uint64_t sub_10032DEC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 432LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("error while trying to deallocate firmware log cache: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  sub_10032C3DC("successfully deallocated firmware log cache", v10, v11, v12, v13, v14, v15, v16, v18);
  return 1LL;
}

uint64_t sub_10032DF2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_10032C51C("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 408LL))(v8);
  if ((_DWORD)v9)
  {
    sub_10032C51C("error while trying to SetPowerState : 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10032DF84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    int v9 = a2;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 456LL))(v8);
    if (!(_DWORD)v10) {
      return 1LL;
    }
    if ((_DWORD)v10 == -536870203)
    {
      uint64_t v11 = "off";
      if (v9) {
        uint64_t v11 = "on";
      }
      sub_10032C3DC( "deep sleep state %s was requested, which was already the current state, so the request was a no-op",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t)v11);
      return 1LL;
    }

    uint64_t v14 = v10;
    uint64_t v13 = "error while trying to SetDeepSleepState : 0x%x";
  }

  else
  {
    uint64_t v13 = "driver interface not created";
  }

  sub_10032C51C(v13, a2, a3, a4, a5, a6, a7, a8, v14);
  return 0LL;
}

uint64_t sub_10032E020( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_7:
    sub_10032C51C(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0LL;
  }

  if (!a2)
  {
    uint64_t v17 = "invalid time dictionary";
    goto LABEL_7;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 248LL))(v8);
  if (!(_DWORD)v9) {
    return 1LL;
  }
  sub_10032C51C("error getting debug info: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0LL;
}

CFDataRef sub_10032E088( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_14:
    sub_10032C51C(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0LL;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, const CFAllocatorRef, const UInt8 **, uint64_t *))(*(void *)v8 + 440LL))( v8,  kCFAllocatorDefault,  &v21,  &v20);
  if ((_DWORD)v9) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v21 == 0LL;
  }
  if (v15 || v20 == 0)
  {
    sub_10032C51C("get sik public key failed: 0x%x, size %zu", (uint64_t)v21, v20, v10, v11, v12, v13, v14, v9);
    return 0LL;
  }

  CFDataRef result = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v21, v20, kCFAllocatorDefault);
  if (!result)
  {
    uint64_t v17 = "failed to package sik public key";
    goto LABEL_14;
  }

  return result;
}

void *sub_10032E128(void *a1)
{
  uint64_t v2 = (void *)a1[26];
  if (v2 == a1 + 23)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 23;
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  uint64_t v4 = (void *)a1[22];
  if (v4 == a1 + 19)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1 + 19;
  }

  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  uint64_t v6 = (void *)a1[18];
  if (v6 == a1 + 15)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = a1 + 15;
  }

  else
  {
    if (!v6) {
      goto LABEL_16;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  uint64_t v8 = (void *)a1[5];
  if (v8 == a1 + 2)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = a1 + 2;
    goto LABEL_20;
  }

  if (v8)
  {
    uint64_t v9 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  return a1;
}

void *sub_10032E214(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10032E37C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000DE88(a1);
}

void *sub_10032E388(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10032E4F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000DE88(a1);
}

void *sub_10032E4FC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_10032E664(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000DE88(a1);
}

uint64_t sub_10032E670()
{
  return abort_report_np(v0);
}

void sub_10032E678( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10032E680(uint64_t a1)
{
  return a1;
}

char *sub_10032E6D8(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v5;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1000063A8(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }

  uint64_t v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000063A8(v7, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a3 + 24);
    *((void *)__dst + 8) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v7 = v8;
  }

  __int16 v9 = *((_WORD *)a3 + 24);
  __dst[74] = *((_BYTE *)a3 + 50);
  *((_WORD *)__dst + 36) = v9;
  return __dst;
}

void sub_10032E798(_Unwind_Exception *exception_object)
{
}

char *sub_10032E7CC(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v5;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1000063A8(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }

  uint64_t v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000063A8(v7, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a3 + 24);
    *((void *)__dst + 8) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v7 = v8;
  }

  *((_WORD *)__dst + 36) = *((_WORD *)a3 + 24);
  return __dst;
}

void sub_10032E884(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10032E8B8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 80 * a3;
    do
    {
      sub_10032E930(a1, a2, (__int128 *)a2);
      a2 += 80;
      v5 -= 80LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10032E91C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10032E930(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10003118C(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100031634(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10032EBB0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100021B74(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_10032ED18((uint64_t)v25, 0LL);
  return i;
}

void sub_10032EB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_10032EBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  CFDataRef result = sub_10032EC24((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10032EC0C(_Unwind_Exception *a1)
{
}

char *sub_10032EC24(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_1000063A8(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  __int128 v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000063A8(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)__int128 v6 = v7;
  }

  __int16 v8 = *((_WORD *)a2 + 36);
  __dst[74] = *((_BYTE *)a2 + 74);
  *((_WORD *)__dst + 36) = v8;
  return __dst;
}

void sub_10032ECE4(_Unwind_Exception *exception_object)
{
}

void sub_10032ED18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1001ACEF4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

uint64_t sub_10032ED5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 80 * a3;
    do
    {
      sub_10032EDD4(a1, a2, (__int128 *)a2);
      a2 += 80;
      v5 -= 80LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10032EDC0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10032EDD4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10003118C(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100031634(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10032F054(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100021B74(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_10032ED18((uint64_t)v25, 0LL);
  return i;
}

void sub_10032F03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_10032F054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  CFDataRef result = sub_10032F0C8((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10032F0B0(_Unwind_Exception *a1)
{
}

char *sub_10032F0C8(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_1000063A8(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  __int128 v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000063A8(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)__int128 v6 = v7;
  }

  *((_WORD *)__dst + 36) = *((_WORD *)a2 + 36);
  return __dst;
}

void sub_10032F180(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10032F1B4()
{
  __int16 v1943 = 257;
  char v1944 = 0;
  sub_10032E6D8((char *)v1947, (__int128 *)v1945, (__int128 *)v1939);
  sub_1000065CC(v1937, "CA");
  sub_1000065CC(v1931, "Canada");
  sub_1000065CC(&v1933, "CA");
  __int16 v1935 = 257;
  char v1936 = 0;
  sub_10032E6D8(v1948, (__int128 *)v1937, (__int128 *)v1931);
  sub_1000065CC(v1929, "MX");
  sub_1000065CC(v1923, "Mexico");
  sub_1000065CC(&v1925, "MX");
  __int16 v1927 = 257;
  char v1928 = 0;
  sub_10032E6D8(v1949, (__int128 *)v1929, (__int128 *)v1923);
  sub_1000065CC(v1921, "SV");
  sub_1000065CC(v1915, "El Salvador");
  sub_1000065CC(&v1917, "SV");
  __int16 v1919 = 257;
  char v1920 = 0;
  sub_10032E6D8(v1950, (__int128 *)v1921, (__int128 *)v1915);
  sub_1000065CC(v1913, "CO");
  sub_1000065CC(v1907, "Colombia");
  sub_1000065CC(&v1909, "CO");
  __int16 v1911 = 257;
  char v1912 = 0;
  sub_10032E6D8(v1951, (__int128 *)v1913, (__int128 *)v1907);
  sub_1000065CC(v1905, "PR");
  sub_1000065CC(v1899, "Puerto Rico");
  sub_1000065CC(&v1901, "PR");
  __int16 v1903 = 257;
  char v1904 = 0;
  sub_10032E6D8(v1952, (__int128 *)v1905, (__int128 *)v1899);
  sub_1000065CC(v1897, "CR");
  sub_1000065CC(v1891, "Costa Rica");
  sub_1000065CC(&v1893, "CR");
  __int16 v1895 = 257;
  char v1896 = 0;
  sub_10032E6D8(v1953, (__int128 *)v1897, (__int128 *)v1891);
  sub_1000065CC(v1889, "EC");
  sub_1000065CC(v1883, "Ecuador");
  sub_1000065CC(&v1885, "EC");
  __int16 v1887 = 257;
  char v1888 = 0;
  sub_10032E6D8(v1954, (__int128 *)v1889, (__int128 *)v1883);
  sub_1000065CC(v1881, "AR");
  sub_1000065CC(v1875, "Argentina");
  sub_1000065CC(&v1877, "AR");
  __int16 v1879 = 257;
  char v1880 = 7;
  sub_10032E6D8(v1955, (__int128 *)v1881, (__int128 *)v1875);
  sub_1000065CC(v1873, "VI");
  sub_1000065CC(v1867, "US Virgin Islands");
  sub_1000065CC(&v1869, "VI");
  __int16 v1871 = 257;
  char v1872 = 0;
  sub_10032E6D8(v1956, (__int128 *)v1873, (__int128 *)v1867);
  sub_1000065CC(v1865, "GT");
  sub_1000065CC(v1859, "Guatemala");
  sub_1000065CC(&v1861, "GT");
  __int16 v1863 = 257;
  char v1864 = 0;
  sub_10032E6D8(v1957, (__int128 *)v1865, (__int128 *)v1859);
  sub_1000065CC(v1857, "BR");
  sub_1000065CC(v1851, "Brazil");
  sub_1000065CC(&v1853, "BR");
  __int16 v1855 = 257;
  char v1856 = 0;
  sub_10032E6D8(v1958, (__int128 *)v1857, (__int128 *)v1851);
  sub_1000065CC(v1849, "UM");
  sub_1000065CC(v1843, "United States Minor Outlying Islands");
  sub_1000065CC(&v1845, "UM");
  __int16 v1847 = 257;
  char v1848 = 0;
  sub_10032E6D8(v1959, (__int128 *)v1849, (__int128 *)v1843);
  sub_1000065CC(v1841, "JP");
  sub_1000065CC(v1835, "Japan");
  sub_1000065CC(&v1837, "JP");
  __int16 v1839 = 256;
  char v1840 = 4;
  sub_10032E6D8(v1960, (__int128 *)v1841, (__int128 *)v1835);
  sub_1000065CC(v1833, "AT");
  sub_1000065CC(v1827, "Austria");
  sub_1000065CC(&v1829, "AT");
  __int16 v1831 = 257;
  char v1832 = 1;
  sub_10032E6D8(v1961, (__int128 *)v1833, (__int128 *)v1827);
  sub_1000065CC(v1825, "BE");
  sub_1000065CC(v1819, "Belgium");
  sub_1000065CC(&v1821, "BE");
  __int16 v1823 = 257;
  char v1824 = 1;
  sub_10032E6D8(v1962, (__int128 *)v1825, (__int128 *)v1819);
  sub_1000065CC(v1817, "BG");
  sub_1000065CC(v1811, "Bulgaria");
  sub_1000065CC(&v1813, "BG");
  __int16 v1815 = 257;
  char v1816 = 1;
  sub_10032E6D8(v1963, (__int128 *)v1817, (__int128 *)v1811);
  sub_1000065CC(v1809, "CY");
  sub_1000065CC(v1803, "Cyprus");
  sub_1000065CC(&v1805, "CY");
  __int16 v1807 = 257;
  char v1808 = 1;
  sub_10032E6D8(v1964, (__int128 *)v1809, (__int128 *)v1803);
  sub_1000065CC(v1801, "CZ");
  sub_1000065CC(v1795, "Czech Republic");
  sub_1000065CC(&v1797, "CZ");
  __int16 v1799 = 257;
  char v1800 = 1;
  sub_10032E6D8(v1965, (__int128 *)v1801, (__int128 *)v1795);
  sub_1000065CC(v1793, "DK");
  sub_1000065CC(v1787, "Denmark");
  sub_1000065CC(&v1789, "DK");
  __int16 v1791 = 257;
  char v1792 = 1;
  sub_10032E6D8(v1966, (__int128 *)v1793, (__int128 *)v1787);
  sub_1000065CC(v1785, "EE");
  sub_1000065CC(v1779, "Estonia");
  sub_1000065CC(&v1781, "EE");
  __int16 v1783 = 257;
  char v1784 = 1;
  sub_10032E6D8(v1967, (__int128 *)v1785, (__int128 *)v1779);
  sub_1000065CC(v1777, "FR");
  sub_1000065CC(v1771, "France");
  sub_1000065CC(&v1773, "FR");
  __int16 v1775 = 257;
  char v1776 = 1;
  sub_10032E6D8(v1968, (__int128 *)v1777, (__int128 *)v1771);
  sub_1000065CC(v1769, "FI");
  sub_1000065CC(v1763, "Finland");
  sub_1000065CC(&v1765, "FI");
  __int16 v1767 = 257;
  char v1768 = 1;
  sub_10032E6D8(v1969, (__int128 *)v1769, (__int128 *)v1763);
  sub_1000065CC(v1761, "DE");
  sub_1000065CC(v1755, "Germany");
  sub_1000065CC(&v1757, "DE");
  __int16 v1759 = 257;
  char v1760 = 1;
  sub_10032E6D8(v1970, (__int128 *)v1761, (__int128 *)v1755);
  sub_1000065CC(v1753, "GR");
  sub_1000065CC(v1747, "Greece");
  sub_1000065CC(&v1749, "GR");
  __int16 v1751 = 257;
  char v1752 = 1;
  sub_10032E6D8(v1971, (__int128 *)v1753, (__int128 *)v1747);
  sub_1000065CC(v1745, "HU");
  sub_1000065CC(v1739, "Hungary");
  sub_1000065CC(&v1741, "HU");
  __int16 v1743 = 257;
  char v1744 = 1;
  sub_10032E6D8(v1972, (__int128 *)v1745, (__int128 *)v1739);
  sub_1000065CC(v1737, "IS");
  sub_1000065CC(v1731, "Iceland");
  sub_1000065CC(&v1733, "IS");
  __int16 v1735 = 257;
  char v1736 = 1;
  sub_10032E6D8(v1973, (__int128 *)v1737, (__int128 *)v1731);
  sub_1000065CC(v1729, "IT");
  sub_1000065CC(v1723, "Italy");
  sub_1000065CC(&v1725, "IT");
  __int16 v1727 = 257;
  char v1728 = 1;
  sub_10032E6D8(v1974, (__int128 *)v1729, (__int128 *)v1723);
  sub_1000065CC(v1721, "IE");
  sub_1000065CC(v1715, "Ireland");
  sub_1000065CC(&v1717, "IE");
  __int16 v1719 = 257;
  char v1720 = 1;
  sub_10032E6D8(v1975, (__int128 *)v1721, (__int128 *)v1715);
  sub_1000065CC(v1713, "LV");
  sub_1000065CC(v1707, "Latvia");
  sub_1000065CC(&v1709, "LV");
  __int16 v1711 = 257;
  char v1712 = 1;
  sub_10032E6D8(v1976, (__int128 *)v1713, (__int128 *)v1707);
  sub_1000065CC(v1705, "LI");
  sub_1000065CC(v1699, "Liechtenstein");
  sub_1000065CC(&v1701, "LI");
  __int16 v1703 = 257;
  char v1704 = 1;
  sub_10032E6D8(v1977, (__int128 *)v1705, (__int128 *)v1699);
  sub_1000065CC(v1697, "LT");
  sub_1000065CC(v1691, "Lithuania");
  sub_1000065CC(&v1693, "LT");
  __int16 v1695 = 257;
  char v1696 = 1;
  sub_10032E6D8(v1978, (__int128 *)v1697, (__int128 *)v1691);
  sub_1000065CC(v1689, "LU");
  sub_1000065CC(v1683, "Luxembourg");
  sub_1000065CC(&v1685, "LU");
  __int16 v1687 = 257;
  char v1688 = 1;
  sub_10032E6D8(v1979, (__int128 *)v1689, (__int128 *)v1683);
  sub_1000065CC(v1681, "MT");
  sub_1000065CC(v1675, "Malta");
  sub_1000065CC(&v1677, "MT");
  __int16 v1679 = 257;
  char v1680 = 1;
  sub_10032E6D8(v1980, (__int128 *)v1681, (__int128 *)v1675);
  sub_1000065CC(v1673, "NL");
  sub_1000065CC(v1667, "Netherlands");
  sub_1000065CC(&v1669, "NL");
  __int16 v1671 = 257;
  char v1672 = 1;
  sub_10032E6D8(v1981, (__int128 *)v1673, (__int128 *)v1667);
  sub_1000065CC(v1665, "NO");
  sub_1000065CC(v1659, "Norway");
  sub_1000065CC(&v1661, "NO");
  __int16 v1663 = 257;
  char v1664 = 1;
  sub_10032E6D8(v1982, (__int128 *)v1665, (__int128 *)v1659);
  sub_1000065CC(v1657, "PL");
  sub_1000065CC(v1651, "Poland");
  sub_1000065CC(&v1653, "PL");
  __int16 v1655 = 257;
  char v1656 = 1;
  sub_10032E6D8(v1983, (__int128 *)v1657, (__int128 *)v1651);
  sub_1000065CC(v1649, "PT");
  sub_1000065CC(v1643, "Portugal");
  sub_1000065CC(&v1645, "PT");
  __int16 v1647 = 257;
  char v1648 = 1;
  sub_10032E6D8(v1984, (__int128 *)v1649, (__int128 *)v1643);
  sub_1000065CC(v1641, "RO");
  sub_1000065CC(v1635, "Romania");
  sub_1000065CC(&v1637, "RO");
  __int16 v1639 = 257;
  char v1640 = 1;
  sub_10032E6D8(v1985, (__int128 *)v1641, (__int128 *)v1635);
  sub_1000065CC(v1633, "SK");
  sub_1000065CC(v1627, "Slovak Republic");
  sub_1000065CC(&v1629, "SK");
  __int16 v1631 = 257;
  char v1632 = 1;
  sub_10032E6D8(v1986, (__int128 *)v1633, (__int128 *)v1627);
  sub_1000065CC(v1625, "SI");
  sub_1000065CC(v1619, "Slovenia");
  sub_1000065CC(&v1621, "SI");
  __int16 v1623 = 257;
  char v1624 = 1;
  sub_10032E6D8(v1987, (__int128 *)v1625, (__int128 *)v1619);
  sub_1000065CC(v1617, "ES");
  sub_1000065CC(v1611, "Spain");
  sub_1000065CC(&v1613, "ES");
  __int16 v1615 = 257;
  char v1616 = 1;
  sub_10032E6D8(v1988, (__int128 *)v1617, (__int128 *)v1611);
  sub_1000065CC(v1609, "SE");
  sub_1000065CC(v1603, "Sweden");
  sub_1000065CC(&v1605, "SE");
  __int16 v1607 = 257;
  char v1608 = 1;
  sub_10032E6D8(v1989, (__int128 *)v1609, (__int128 *)v1603);
  sub_1000065CC(v1601, "CH");
  sub_1000065CC(v1595, "Switzerland");
  sub_1000065CC(&v1597, "CH");
  __int16 v1599 = 257;
  char v1600 = 1;
  sub_10032E6D8(v1990, (__int128 *)v1601, (__int128 *)v1595);
  sub_1000065CC(v1593, "GB");
  sub_1000065CC(v1587, "United Kingdom");
  sub_1000065CC(&v1589, "GB");
  __int16 v1591 = 257;
  char v1592 = 1;
  sub_10032E6D8(v1991, (__int128 *)v1593, (__int128 *)v1587);
  sub_1000065CC(v1585, "ZA");
  sub_1000065CC(v1579, "South Africa");
  sub_1000065CC(&v1581, "ZA");
  __int16 v1583 = 257;
  char v1584 = 1;
  sub_10032E6D8(v1992, (__int128 *)v1585, (__int128 *)v1579);
  sub_1000065CC(v1577, "TR");
  sub_1000065CC(v1571, "Turkey");
  sub_1000065CC(&v1573, "TR");
  __int16 v1575 = 257;
  char v1576 = 1;
  sub_10032E6D8(v1993, (__int128 *)v1577, (__int128 *)v1571);
  sub_1000065CC(v1569, "AE");
  sub_1000065CC(v1563, "United Arab Emirates");
  sub_1000065CC(&v1565, "AE");
  __int16 v1567 = 257;
  char v1568 = 1;
  sub_10032E6D8(v1994, (__int128 *)v1569, (__int128 *)v1563);
  sub_1000065CC(v1561, "SA");
  sub_1000065CC(v1555, "Saudi Arabia");
  sub_1000065CC(&v1557, "SA");
  __int16 v1559 = 257;
  char v1560 = 1;
  sub_10032E6D8(v1995, (__int128 *)v1561, (__int128 *)v1555);
  sub_1000065CC(v1553, "HR");
  sub_1000065CC(v1547, "Croatia");
  sub_1000065CC(&v1549, "HR");
  __int16 v1551 = 257;
  char v1552 = 1;
  sub_10032E6D8(v1996, (__int128 *)v1553, (__int128 *)v1547);
  sub_1000065CC(v1545, "RS");
  sub_1000065CC(v1539, "Serbia");
  sub_1000065CC(&v1541, "RS");
  __int16 v1543 = 257;
  char v1544 = 1;
  sub_10032E6D8(v1997, (__int128 *)v1545, (__int128 *)v1539);
  sub_1000065CC(v1537, "AU");
  sub_1000065CC(v1531, "Australia");
  sub_1000065CC(&v1533, "AU");
  __int16 v1535 = 257;
  char v1536 = 1;
  sub_10032E6D8(v1998, (__int128 *)v1537, (__int128 *)v1531);
  sub_1000065CC(v1529, "HK");
  sub_1000065CC(v1523, "Hong Kong");
  sub_1000065CC(&v1525, "HK");
  __int16 v1527 = 257;
  char v1528 = 1;
  sub_10032E6D8(v1999, (__int128 *)v1529, (__int128 *)v1523);
  sub_1000065CC(v1521, "NZ");
  sub_1000065CC(v1515, "New Zealand");
  sub_1000065CC(&v1517, "NZ");
  __int16 v1519 = 257;
  char v1520 = 1;
  sub_10032E6D8(v2000, (__int128 *)v1521, (__int128 *)v1515);
  sub_1000065CC(v1513, "SG");
  sub_1000065CC(v1507, "Singapore");
  sub_1000065CC(&v1509, "SG");
  __int16 v1511 = 257;
  char v1512 = 1;
  sub_10032E6D8(v2001, (__int128 *)v1513, (__int128 *)v1507);
  sub_1000065CC(v1505, "MY");
  sub_1000065CC(v1499, "Malaysia");
  sub_1000065CC(&v1501, "MY");
  __int16 v1503 = 257;
  char v1504 = 1;
  sub_10032E6D8(v2002, (__int128 *)v1505, (__int128 *)v1499);
  sub_1000065CC(v1497, "VN");
  sub_1000065CC(v1491, "Vietnam");
  sub_1000065CC(&v1493, "VN");
  __int16 v1495 = 256;
  char v1496 = 1;
  sub_10032E6D8(v2003, (__int128 *)v1497, (__int128 *)v1491);
  sub_1000065CC(v1489, "BN");
  sub_1000065CC(v1483, "Brunei");
  sub_1000065CC(&v1485, "BN");
  __int16 v1487 = 257;
  char v1488 = 1;
  sub_10032E6D8(v2004, (__int128 *)v1489, (__int128 *)v1483);
  sub_1000065CC(v1481, "TH");
  sub_1000065CC(v1475, "Thailand");
  sub_1000065CC(&v1477, "TH");
  __int16 v1479 = 257;
  char v1480 = 1;
  sub_10032E6D8(v2005, (__int128 *)v1481, (__int128 *)v1475);
  sub_1000065CC(v1473, "KH");
  sub_1000065CC(v1467, "Cambodia");
  sub_1000065CC(&v1469, "KH");
  __int16 v1471 = 257;
  char v1472 = 1;
  sub_10032E6D8(v2006, (__int128 *)v1473, (__int128 *)v1467);
  sub_1000065CC(v1465, "LA");
  sub_1000065CC(v1459, "Laos");
  sub_1000065CC(&v1461, "LA");
  __int16 v1463 = 257;
  char v1464 = 1;
  sub_10032E6D8(v2007, (__int128 *)v1465, (__int128 *)v1459);
  sub_1000065CC(v1457, "MM");
  sub_1000065CC(v1451, "Myanmar");
  sub_1000065CC(&v1453, "MM");
  __int16 v1455 = 257;
  char v1456 = 1;
  sub_10032E6D8(v2008, (__int128 *)v1457, (__int128 *)v1451);
  sub_1000065CC(v1449, "CN");
  sub_1000065CC(v1443, "China");
  sub_1000065CC(&v1445, "CN");
  __int16 v1447 = 257;
  char v1448 = 3;
  sub_10032E6D8(v2009, (__int128 *)v1449, (__int128 *)v1443);
  sub_1000065CC(v1441, "TW");
  sub_1000065CC(v1435, "Taiwan");
  sub_1000065CC(&v1437, "TW");
  __int16 v1439 = 257;
  char v1440 = 2;
  sub_10032E6D8(v2010, (__int128 *)v1441, (__int128 *)v1435);
  sub_1000065CC(v1433, "PK");
  sub_1000065CC(v1427, "Pakistan");
  sub_1000065CC(&v1429, "PK");
  __int16 v1431 = 257;
  char v1432 = 1;
  sub_10032E6D8(v2011, (__int128 *)v1433, (__int128 *)v1427);
  sub_1000065CC(v1425, "NP");
  sub_1000065CC(v1419, "Nepal");
  sub_1000065CC(&v1421, "NP");
  __int16 v1423 = 0;
  char v1424 = 1;
  sub_10032E6D8(v2012, (__int128 *)v1425, (__int128 *)v1419);
  sub_1000065CC(v1417, "BD");
  sub_1000065CC(v1411, "Bangladesh");
  sub_1000065CC(&v1413, "BD");
  __int16 v1415 = 257;
  char v1416 = 1;
  sub_10032E6D8(v2013, (__int128 *)v1417, (__int128 *)v1411);
  sub_1000065CC(v1409, "KR");
  sub_1000065CC(v1403, "South Korea");
  sub_1000065CC(&v1405, "KR");
  __int16 v1407 = 256;
  char v1408 = 5;
  sub_10032E6D8(v2014, (__int128 *)v1409, (__int128 *)v1403);
  sub_1000065CC(v1401, "CL");
  sub_1000065CC(v1395, "Chile");
  sub_1000065CC(&v1397, "CL");
  __int16 v1399 = 257;
  char v1400 = 0;
  sub_10032E6D8(v2015, (__int128 *)v1401, (__int128 *)v1395);
  sub_1000065CC(v1393, "PA");
  sub_1000065CC(v1387, "Panama");
  sub_1000065CC(&v1389, "PA");
  __int16 v1391 = 257;
  char v1392 = 0;
  sub_10032E6D8(v2016, (__int128 *)v1393, (__int128 *)v1387);
  sub_1000065CC(v1385, "VE");
  sub_1000065CC(v1379, "Venezuela");
  sub_1000065CC(&v1381, "VE");
  __int16 v1383 = 257;
  char v1384 = 0;
  sub_10032E6D8(v2017, (__int128 *)v1385, (__int128 *)v1379);
  sub_1000065CC(v1377, "UY");
  sub_1000065CC(v1371, "Uruguay");
  sub_1000065CC(&v1373, "UY");
  __int16 v1375 = 257;
  char v1376 = 0;
  sub_10032E6D8(v2018, (__int128 *)v1377, (__int128 *)v1371);
  sub_1000065CC(v1369, "LK");
  sub_1000065CC(v1363, "Sri Lanka");
  sub_1000065CC(&v1365, "LK");
  __int16 v1367 = 257;
  char v1368 = 1;
  sub_10032E6D8(v2019, (__int128 *)v1369, (__int128 *)v1363);
  sub_1000065CC(v1361, "MV");
  sub_1000065CC(v1355, "Maldives");
  sub_1000065CC(&v1357, "MV");
  __int16 v1359 = 257;
  char v1360 = 1;
  sub_10032E6D8(v2020, (__int128 *)v1361, (__int128 *)v1355);
  sub_1000065CC(v1353, "AF");
  sub_1000065CC(v1347, "Afghanistan");
  sub_1000065CC(&v1349, "AF");
  __int16 v1351 = 257;
  char v1352 = 1;
  sub_10032E6D8(v2021, (__int128 *)v1353, (__int128 *)v1347);
  sub_1000065CC(v1345, "MN");
  sub_1000065CC(v1339, "Mongolia");
  sub_1000065CC(&v1341, "MN");
  __int16 v1343 = 257;
  char v1344 = 1;
  sub_10032E6D8(v2022, (__int128 *)v1345, (__int128 *)v1339);
  sub_1000065CC(v1337, "BT");
  sub_1000065CC(v1331, "Bhutan");
  sub_1000065CC(&v1333, "BT");
  __int16 v1335 = 257;
  char v1336 = 1;
  sub_10032E6D8(v2023, (__int128 *)v1337, (__int128 *)v1331);
  sub_1000065CC(v1329, "MO");
  sub_1000065CC(v1323, "Macau");
  sub_1000065CC(&v1325, "MO");
  __int16 v1327 = 257;
  char v1328 = 1;
  sub_10032E6D8(v2024, (__int128 *)v1329, (__int128 *)v1323);
  sub_1000065CC(v1321, "IN");
  sub_1000065CC(v1315, "India");
  sub_1000065CC(&v1317, "IN");
  __int16 v1319 = 257;
  char v1320 = 1;
  sub_10032E6D8(v2025, (__int128 *)v1321, (__int128 *)v1315);
  sub_1000065CC(v1313, "PH");
  sub_1000065CC(v1307, "Philippines");
  sub_1000065CC(&v1309, "PH");
  __int16 v1311 = 257;
  char v1312 = 1;
  sub_10032E6D8(v2026, (__int128 *)v1313, (__int128 *)v1307);
  sub_1000065CC(v1305, "PE");
  sub_1000065CC(v1299, "Peru");
  sub_1000065CC(&v1301, "PE");
  __int16 v1303 = 257;
  char v1304 = 0;
  sub_10032E6D8(v2027, (__int128 *)v1305, (__int128 *)v1299);
  sub_1000065CC(v1297, "DO");
  sub_1000065CC(v1291, "Dominican Republic");
  sub_1000065CC(&v1293, "DO");
  __int16 v1295 = 257;
  char v1296 = 0;
  sub_10032E6D8(v2028, (__int128 *)v1297, (__int128 *)v1291);
  sub_1000065CC(v1289, "GU");
  sub_1000065CC(v1283, "Guam");
  sub_1000065CC(&v1285, "GU");
  __int16 v1287 = 257;
  char v1288 = 0;
  sub_10032E6D8(v2029, (__int128 *)v1289, (__int128 *)v1283);
  sub_1000065CC(v1281, "FJ");
  sub_1000065CC(v1275, "Fiji");
  sub_1000065CC(&v1277, "FJ");
  __int16 v1279 = 257;
  char v1280 = 1;
  sub_10032E6D8(v2030, (__int128 *)v1281, (__int128 *)v1275);
  sub_1000065CC(v1273, "NC");
  sub_1000065CC(v1267, "New Caledonia");
  sub_1000065CC(&v1269, "NC");
  __int16 v1271 = 257;
  char v1272 = 1;
  sub_10032E6D8(v2031, (__int128 *)v1273, (__int128 *)v1267);
  sub_1000065CC(v1265, "PG");
  sub_1000065CC(v1259, "Papua New Guinea");
  sub_1000065CC(&v1261, "PG");
  __int16 v1263 = 257;
  char v1264 = 1;
  sub_10032E6D8(v2032, (__int128 *)v1265, (__int128 *)v1259);
  sub_1000065CC(v1257, "WS");
  sub_1000065CC(v1251, "Samoa");
  sub_1000065CC(&v1253, "WS");
  __int16 v1255 = 257;
  char v1256 = 1;
  sub_10032E6D8(v2033, (__int128 *)v1257, (__int128 *)v1251);
  sub_1000065CC(v1249, "VU");
  sub_1000065CC(v1243, "Vanuatu");
  sub_1000065CC(&v1245, "VU");
  __int16 v1247 = 257;
  char v1248 = 1;
  sub_10032E6D8(v2034, (__int128 *)v1249, (__int128 *)v1243);
  sub_1000065CC(v1241, "RU");
  sub_1000065CC(v1235, "Russia");
  sub_1000065CC(&v1237, "RU");
  __int16 v1239 = 0;
  char v1240 = 6;
  sub_10032E6D8(v2035, (__int128 *)v1241, (__int128 *)v1235);
  sub_1000065CC(v1233, "IL");
  sub_1000065CC(v1227, "Israel");
  sub_1000065CC(&v1229, "IL");
  __int16 v1231 = 257;
  char v1232 = 1;
  sub_10032E6D8(v2036, (__int128 *)v1233, (__int128 *)v1227);
  sub_1000065CC(v1225, "EG");
  sub_1000065CC(v1219, "Egypt");
  sub_1000065CC(&v1221, "EG");
  __int16 v1223 = 257;
  char v1224 = 1;
  sub_10032E6D8(v2037, (__int128 *)v1225, (__int128 *)v1219);
  sub_1000065CC(v1217, "KW");
  sub_1000065CC(v1211, "Kuwait");
  sub_1000065CC(&v1213, "KW");
  __int16 v1215 = 257;
  char v1216 = 1;
  sub_10032E6D8(v2038, (__int128 *)v1217, (__int128 *)v1211);
  sub_1000065CC(v1209, "MA");
  sub_1000065CC(v1203, "Morocco");
  sub_1000065CC(&v1205, "MA");
  __int16 v1207 = 257;
  char v1208 = 1;
  sub_10032E6D8(v2039, (__int128 *)v1209, (__int128 *)v1203);
  sub_1000065CC(v1201, "UA");
  sub_1000065CC(v1195, "Ukraine");
  sub_1000065CC(&v1197, "UA");
  __int16 v1199 = 0;
  char v1200 = 6;
  sub_10032E6D8(v2040, (__int128 *)v1201, (__int128 *)v1195);
  sub_1000065CC(v1193, "BY");
  sub_1000065CC(v1187, "Belarus");
  sub_1000065CC(&v1189, "BY");
  __int16 v1191 = 0;
  char v1192 = 6;
  sub_10032E6D8(v2041, (__int128 *)v1193, (__int128 *)v1187);
  sub_1000065CC(v1185, "AZ");
  sub_1000065CC(v1179, "Azerbaijan");
  sub_1000065CC(&v1181, "AZ");
  __int16 v1183 = 0;
  char v1184 = 6;
  sub_10032E6D8(v2042, (__int128 *)v1185, (__int128 *)v1179);
  sub_1000065CC(v1177, "KZ");
  sub_1000065CC(v1171, "Kazakhstan");
  sub_1000065CC(&v1173, "KZ");
  __int16 v1175 = 0;
  char v1176 = 6;
  sub_10032E6D8(v2043, (__int128 *)v1177, (__int128 *)v1171);
  sub_1000065CC(v1169, "ID");
  sub_1000065CC(v1163, "Indonesia");
  sub_1000065CC(&v1165, "ID");
  __int16 v1167 = 0;
  char v1168 = 1;
  sub_10032E6D8(v2044, (__int128 *)v1169, (__int128 *)v1163);
  sub_1000065CC(v1161, "HN");
  sub_1000065CC(v1155, "Honduras");
  sub_1000065CC(&v1157, "HN");
  __int16 v1159 = 257;
  char v1160 = 0;
  sub_10032E6D8(v2045, (__int128 *)v1161, (__int128 *)v1155);
  sub_1000065CC(v1153, "AI");
  sub_1000065CC(v1147, "Anguilla");
  sub_1000065CC(&v1149, "AI");
  __int16 v1151 = 257;
  char v1152 = 0;
  sub_10032E6D8(v2046, (__int128 *)v1153, (__int128 *)v1147);
  sub_1000065CC(v1145, "AG");
  sub_1000065CC(v1139, "Antigua/Barbuda");
  sub_1000065CC(&v1141, "AG");
  __int16 v1143 = 257;
  char v1144 = 0;
  sub_10032E6D8(v2047, (__int128 *)v1145, (__int128 *)v1139);
  sub_1000065CC(v1137, "AW");
  sub_1000065CC(v1131, "Aruba");
  sub_1000065CC(&v1133, "AW");
  __int16 v1135 = 257;
  char v1136 = 0;
  sub_10032E6D8(v2048, (__int128 *)v1137, (__int128 *)v1131);
  sub_1000065CC(v1129, "BS");
  sub_1000065CC(v1123, "Bahamas");
  sub_1000065CC(&v1125, "BS");
  __int16 v1127 = 257;
  char v1128 = 0;
  sub_10032E6D8(v2049, (__int128 *)v1129, (__int128 *)v1123);
  sub_1000065CC(v1121, "BB");
  sub_1000065CC(v1115, "Barbados");
  sub_1000065CC(&v1117, "BB");
  __int16 v1119 = 257;
  char v1120 = 0;
  sub_10032E6D8(v2050, (__int128 *)v1121, (__int128 *)v1115);
  sub_1000065CC(v1113, "BM");
  sub_1000065CC(v1107, "Bermuda");
  sub_1000065CC(&v1109, "BM");
  __int16 v1111 = 257;
  char v1112 = 0;
  sub_10032E6D8(v2051, (__int128 *)v1113, (__int128 *)v1107);
  sub_1000065CC(v1105, "VG");
  sub_1000065CC(v1099, "British Virgin Islands");
  sub_1000065CC(&v1101, "VG");
  __int16 v1103 = 257;
  char v1104 = 0;
  sub_10032E6D8(v2052, (__int128 *)v1105, (__int128 *)v1099);
  sub_1000065CC(v1097, "KY");
  sub_1000065CC(v1091, "Cayman Islands");
  sub_1000065CC(&v1093, "KY");
  __int16 v1095 = 257;
  char v1096 = 0;
  sub_10032E6D8(v2053, (__int128 *)v1097, (__int128 *)v1091);
  sub_1000065CC(v1089, "DM");
  sub_1000065CC(v1083, "Dominica");
  sub_1000065CC(&v1085, "DM");
  __int16 v1087 = 257;
  char v1088 = 0;
  sub_10032E6D8(v2054, (__int128 *)v1089, (__int128 *)v1083);
  sub_1000065CC(v1081, "GD");
  sub_1000065CC(v1075, "Grenada");
  sub_1000065CC(&v1077, "GD");
  __int16 v1079 = 257;
  char v1080 = 0;
  sub_10032E6D8(v2055, (__int128 *)v1081, (__int128 *)v1075);
  sub_1000065CC(v1073, "MS");
  sub_1000065CC(v1067, "Montserrat");
  sub_1000065CC(&v1069, "MS");
  __int16 v1071 = 257;
  char v1072 = 0;
  sub_10032E6D8(v2056, (__int128 *)v1073, (__int128 *)v1067);
  sub_1000065CC(v1065, "NI");
  sub_1000065CC(v1059, "Nicaragua");
  sub_1000065CC(&v1061, "NI");
  __int16 v1063 = 257;
  char v1064 = 0;
  sub_10032E6D8(v2057, (__int128 *)v1065, (__int128 *)v1059);
  sub_1000065CC(v1057, "KN");
  sub_1000065CC(v1051, "St Kitts/Nevis");
  sub_1000065CC(&v1053, "KN");
  __int16 v1055 = 257;
  char v1056 = 0;
  sub_10032E6D8(v2058, (__int128 *)v1057, (__int128 *)v1051);
  sub_1000065CC(v1049, "LC");
  sub_1000065CC(v1043, "St Lucia");
  sub_1000065CC(&v1045, "LC");
  __int16 v1047 = 257;
  char v1048 = 0;
  sub_10032E6D8(v2059, (__int128 *)v1049, (__int128 *)v1043);
  sub_1000065CC(v1041, "VC");
  sub_1000065CC(v1035, "St Vincent/Grenadines");
  sub_1000065CC(&v1037, "VC");
  __int16 v1039 = 257;
  char v1040 = 0;
  sub_10032E6D8(v2060, (__int128 *)v1041, (__int128 *)v1035);
  sub_1000065CC(v1033, "TC");
  sub_1000065CC(v1027, "Turks and Caicos");
  sub_1000065CC(&v1029, "TC");
  __int16 v1031 = 257;
  char v1032 = 0;
  sub_10032E6D8(v2061, (__int128 *)v1033, (__int128 *)v1027);
  sub_1000065CC(v1025, "BO");
  sub_1000065CC(v1019, "Bolivia");
  sub_1000065CC(&v1021, "BO");
  __int16 v1023 = 257;
  char v1024 = 0;
  sub_10032E6D8(v2062, (__int128 *)v1025, (__int128 *)v1019);
  sub_1000065CC(v1017, "JM");
  sub_1000065CC(v1011, "Jamaica");
  sub_1000065CC(&v1013, "JM");
  __int16 v1015 = 257;
  char v1016 = 0;
  sub_10032E6D8(v2063, (__int128 *)v1017, (__int128 *)v1011);
  sub_1000065CC(v1009, "PY");
  sub_1000065CC(v1003, "Paraguay");
  sub_1000065CC(&v1005, "PY");
  __int16 v1007 = 257;
  char v1008 = 0;
  sub_10032E6D8(v2064, (__int128 *)v1009, (__int128 *)v1003);
  sub_1000065CC(v1001, "TT");
  sub_1000065CC(v995, "Trinidad/Tobago");
  sub_1000065CC(&v997, "TT");
  __int16 v999 = 257;
  char v1000 = 0;
  sub_10032E6D8(v2065, (__int128 *)v1001, (__int128 *)v995);
  sub_1000065CC(v993, "AL");
  sub_1000065CC(v987, "Albania");
  sub_1000065CC(&v989, "AL");
  __int16 v991 = 257;
  char v992 = 1;
  sub_10032E6D8(v2066, (__int128 *)v993, (__int128 *)v987);
  sub_1000065CC(v985, "DZ");
  sub_1000065CC(v979, "Algeria");
  sub_1000065CC(&v981, "DZ");
  __int16 v983 = 257;
  char v984 = 1;
  sub_10032E6D8(v2067, (__int128 *)v985, (__int128 *)v979);
  sub_1000065CC(v977, "AO");
  sub_1000065CC(v971, "Angola");
  sub_1000065CC(&v973, "AO");
  __int16 v975 = 257;
  char v976 = 1;
  sub_10032E6D8(v2068, (__int128 *)v977, (__int128 *)v971);
  sub_1000065CC(v969, "AM");
  sub_1000065CC(v963, "Armenia");
  sub_1000065CC(&v965, "AM");
  __int16 v967 = 0;
  char v968 = 6;
  sub_10032E6D8(v2069, (__int128 *)v969, (__int128 *)v963);
  sub_1000065CC(v961, "BJ");
  sub_1000065CC(v955, "Benin");
  sub_1000065CC(&v957, "BJ");
  __int16 v959 = 257;
  char v960 = 1;
  sub_10032E6D8(v2070, (__int128 *)v961, (__int128 *)v955);
  sub_1000065CC(v953, "BA");
  sub_1000065CC(v947, "Bosina & Herzegovina");
  sub_1000065CC(&v949, "BA");
  __int16 v951 = 257;
  char v952 = 1;
  sub_10032E6D8(v2071, (__int128 *)v953, (__int128 *)v947);
  sub_1000065CC(v945, "BI");
  sub_1000065CC(v939, "Burundi");
  sub_1000065CC(&v941, "BI");
  __int16 v943 = 257;
  char v944 = 1;
  sub_10032E6D8(v2072, (__int128 *)v945, (__int128 *)v939);
  sub_1000065CC(v937, "BF");
  sub_1000065CC(v931, "Burkina Faso");
  sub_1000065CC(&v933, "BF");
  __int16 v935 = 257;
  char v936 = 1;
  sub_10032E6D8(v2073, (__int128 *)v937, (__int128 *)v931);
  sub_1000065CC(v929, "CF");
  sub_1000065CC(v923, "Central Africa Republic");
  sub_1000065CC(&v925, "CF");
  __int16 v927 = 257;
  char v928 = 1;
  sub_10032E6D8(v2074, (__int128 *)v929, (__int128 *)v923);
  sub_1000065CC(v921, "TD");
  sub_1000065CC(v915, "Chad");
  sub_1000065CC(&v917, "TD");
  __int16 v919 = 257;
  char v920 = 1;
  sub_10032E6D8(v2075, (__int128 *)v921, (__int128 *)v915);
  sub_1000065CC(v913, "CD");
  sub_1000065CC(v907, "Congo (Brazzaville)");
  sub_1000065CC(&v909, "CD");
  __int16 v911 = 257;
  char v912 = 1;
  sub_10032E6D8(v2076, (__int128 *)v913, (__int128 *)v907);
  sub_1000065CC(v905, "CG");
  sub_1000065CC(v899, "Democratic Republic of Congo");
  sub_1000065CC(&v901, "CG");
  __int16 v903 = 257;
  char v904 = 1;
  sub_10032E6D8(v2077, (__int128 *)v905, (__int128 *)v899);
  sub_1000065CC(v897, "GQ");
  sub_1000065CC(v891, "Equatorial Guinea");
  sub_1000065CC(&v893, "GQ");
  __int16 v895 = 257;
  char v896 = 1;
  sub_10032E6D8(v2078, (__int128 *)v897, (__int128 *)v891);
  sub_1000065CC(v889, "ET");
  sub_1000065CC(v883, "Ethiopia");
  sub_1000065CC(&v885, "ET");
  __int16 v887 = 257;
  char v888 = 1;
  sub_10032E6D8(v2079, (__int128 *)v889, (__int128 *)v883);
  sub_1000065CC(v881, "PF");
  sub_1000065CC(v875, "French Polynesia");
  sub_1000065CC(&v877, "PF");
  __int16 v879 = 257;
  char v880 = 1;
  sub_10032E6D8(v2080, (__int128 *)v881, (__int128 *)v875);
  sub_1000065CC(v873, "GA");
  sub_1000065CC(v867, "Gabon");
  sub_1000065CC(&v869, "GA");
  __int16 v871 = 257;
  char v872 = 1;
  sub_10032E6D8(v2081, (__int128 *)v873, (__int128 *)v867);
  sub_1000065CC(v865, "GM");
  sub_1000065CC(v859, "Gambia");
  sub_1000065CC(&v861, "GM");
  __int16 v863 = 257;
  char v864 = 1;
  sub_10032E6D8(v2082, (__int128 *)v865, (__int128 *)v859);
  sub_1000065CC(v857, "GH");
  sub_1000065CC(v851, "Ghana");
  sub_1000065CC(&v853, "GH");
  __int16 v855 = 257;
  char v856 = 1;
  sub_10032E6D8(v2083, (__int128 *)v857, (__int128 *)v851);
  sub_1000065CC(v849, "GI");
  sub_1000065CC(v843, "Gibraltar");
  sub_1000065CC(&v845, "GI");
  __int16 v847 = 257;
  char v848 = 1;
  sub_10032E6D8(v2084, (__int128 *)v849, (__int128 *)v843);
  sub_1000065CC(v841, "GL");
  sub_1000065CC(v835, "Greenland");
  sub_1000065CC(&v837, "GL");
  __int16 v839 = 257;
  char v840 = 1;
  sub_10032E6D8(v2085, (__int128 *)v841, (__int128 *)v835);
  sub_1000065CC(v833, "GP");
  sub_1000065CC(v827, "Guadeloupe");
  sub_1000065CC(&v829, "GP");
  __int16 v831 = 257;
  char v832 = 1;
  sub_10032E6D8(v2086, (__int128 *)v833, (__int128 *)v827);
  sub_1000065CC(v825, "GW");
  sub_1000065CC(v819, "Guinea Bissau");
  sub_1000065CC(&v821, "GW");
  __int16 v823 = 257;
  char v824 = 1;
  sub_10032E6D8(v2087, (__int128 *)v825, (__int128 *)v819);
  sub_1000065CC(v817, "GN");
  sub_1000065CC(v811, "Guinea Conakry");
  sub_1000065CC(&v813, "GN");
  __int16 v815 = 257;
  char v816 = 1;
  sub_10032E6D8(v2088, (__int128 *)v817, (__int128 *)v811);
  sub_1000065CC(v809, "IQ");
  sub_1000065CC(v803, "Iraq");
  sub_1000065CC(&v805, "IQ");
  __int16 v807 = 257;
  char v808 = 1;
  sub_10032E6D8(v2089, (__int128 *)v809, (__int128 *)v803);
  sub_1000065CC(v801, "CI");
  sub_1000065CC(v795, "Ivory Coast");
  sub_1000065CC(&v797, "CI");
  __int16 v799 = 257;
  char v800 = 1;
  sub_10032E6D8(v2090, (__int128 *)v801, (__int128 *)v795);
  sub_1000065CC(v793, "KE");
  sub_1000065CC(v787, "Kenya");
  sub_1000065CC(&v789, "KE");
  __int16 v791 = 257;
  char v792 = 1;
  sub_10032E6D8(v2091, (__int128 *)v793, (__int128 *)v787);
  sub_1000065CC(v785, "KG");
  sub_1000065CC(v779, "Kyrgzstan");
  sub_1000065CC(&v781, "KG");
  __int16 v783 = 0;
  char v784 = 6;
  sub_10032E6D8(v2092, (__int128 *)v785, (__int128 *)v779);
  sub_1000065CC(v777, "LB");
  sub_1000065CC(v771, "Lebanon");
  sub_1000065CC(&v773, "LB");
  __int16 v775 = 257;
  char v776 = 1;
  sub_10032E6D8(v2093, (__int128 *)v777, (__int128 *)v771);
  sub_1000065CC(v769, "LS");
  sub_1000065CC(v763, "Lesotho");
  sub_1000065CC(&v765, "LS");
  __int16 v767 = 257;
  char v768 = 1;
  sub_10032E6D8(v2094, (__int128 *)v769, (__int128 *)v763);
  sub_1000065CC(v761, "LR");
  sub_1000065CC(v755, "Liberia");
  sub_1000065CC(&v757, "LR");
  __int16 v759 = 257;
  char v760 = 1;
  sub_10032E6D8(v2095, (__int128 *)v761, (__int128 *)v755);
  sub_1000065CC(v753, "LY");
  sub_1000065CC(v747, "Libya");
  sub_1000065CC(&v749, "LY");
  __int16 v751 = 257;
  char v752 = 1;
  sub_10032E6D8(v2096, (__int128 *)v753, (__int128 *)v747);
  sub_1000065CC(v745, "MK");
  sub_1000065CC(v739, "Macedonia");
  sub_1000065CC(&v741, "MK");
  __int16 v743 = 257;
  char v744 = 1;
  sub_10032E6D8(v2097, (__int128 *)v745, (__int128 *)v739);
  sub_1000065CC(v737, "MG");
  sub_1000065CC(v731, "Madagascar");
  sub_1000065CC(&v733, "MG");
  __int16 v735 = 257;
  char v736 = 1;
  sub_10032E6D8(v2098, (__int128 *)v737, (__int128 *)v731);
  sub_1000065CC(v729, "ML");
  sub_1000065CC(v723, "Mali");
  sub_1000065CC(&v725, "ML");
  __int16 v727 = 257;
  char v728 = 1;
  sub_10032E6D8(v2099, (__int128 *)v729, (__int128 *)v723);
  sub_1000065CC(v721, "MQ");
  sub_1000065CC(v715, "Martinique");
  sub_1000065CC(&v717, "MQ");
  __int16 v719 = 257;
  char v720 = 1;
  sub_10032E6D8(v2100, (__int128 *)v721, (__int128 *)v715);
  sub_1000065CC(v713, "MU");
  sub_1000065CC(v707, "Mauritius");
  sub_1000065CC(&v709, "MU");
  __int16 v711 = 257;
  char v712 = 1;
  sub_10032E6D8(v2101, (__int128 *)v713, (__int128 *)v707);
  sub_1000065CC(v705, "MD");
  sub_1000065CC(v699, "Moldova");
  sub_1000065CC(&v701, "MD");
  __int16 v703 = 257;
  char v704 = 1;
  sub_10032E6D8(v2102, (__int128 *)v705, (__int128 *)v699);
  sub_1000065CC(v697, "MC");
  sub_1000065CC(v691, "Monaco");
  sub_1000065CC(&v693, "MC");
  __int16 v695 = 257;
  char v696 = 1;
  sub_10032E6D8(v2103, (__int128 *)v697, (__int128 *)v691);
  sub_1000065CC(v689, "ME");
  sub_1000065CC(v683, "Montenegro");
  sub_1000065CC(&v685, "ME");
  __int16 v687 = 257;
  char v688 = 1;
  sub_10032E6D8(v2104, (__int128 *)v689, (__int128 *)v683);
  sub_1000065CC(v681, "MZ");
  sub_1000065CC(v675, "Mozambique");
  sub_1000065CC(&v677, "MZ");
  __int16 v679 = 257;
  char v680 = 1;
  sub_10032E6D8(v2105, (__int128 *)v681, (__int128 *)v675);
  sub_1000065CC(v673, "NA");
  sub_1000065CC(v667, "Namibia");
  sub_1000065CC(&v669, "NA");
  __int16 v671 = 257;
  char v672 = 1;
  sub_10032E6D8(v2106, (__int128 *)v673, (__int128 *)v667);
  sub_1000065CC(v665, "NE");
  sub_1000065CC(v659, "Niger");
  sub_1000065CC(&v661, "NE");
  __int16 v663 = 257;
  char v664 = 1;
  sub_10032E6D8(v2107, (__int128 *)v665, (__int128 *)v659);
  sub_1000065CC(v657, "OM");
  sub_1000065CC(v651, "Oman");
  sub_1000065CC(&v653, "OM");
  __int16 v655 = 257;
  char v656 = 1;
  sub_10032E6D8(v2108, (__int128 *)v657, (__int128 *)v651);
  sub_1000065CC(v649, "RE");
  sub_1000065CC(v643, "Reunion");
  sub_1000065CC(&v645, "RE");
  __int16 v647 = 257;
  char v648 = 1;
  sub_10032E6D8(v2109, (__int128 *)v649, (__int128 *)v643);
  sub_1000065CC(v641, "SN");
  sub_1000065CC(v635, "Senegal");
  sub_1000065CC(&v637, "SN");
  __int16 v639 = 257;
  char v640 = 1;
  sub_10032E6D8(v2110, (__int128 *)v641, (__int128 *)v635);
  sub_1000065CC(v633, "TZ");
  sub_1000065CC(v627, "Tanzania");
  sub_1000065CC(&v629, "TZ");
  __int16 v631 = 257;
  char v632 = 1;
  sub_10032E6D8(v2111, (__int128 *)v633, (__int128 *)v627);
  sub_1000065CC(v625, "TG");
  sub_1000065CC(v619, "Togo");
  sub_1000065CC(&v621, "TG");
  __int16 v623 = 257;
  char v624 = 1;
  sub_10032E6D8(v2112, (__int128 *)v625, (__int128 *)v619);
  sub_1000065CC(v617, "TN");
  sub_1000065CC(v611, "Tunisia");
  sub_1000065CC(&v613, "TN");
  __int16 v615 = 257;
  char v616 = 1;
  sub_10032E6D8(v2113, (__int128 *)v617, (__int128 *)v611);
  sub_1000065CC(v609, "UG");
  sub_1000065CC(v603, "Uganda");
  sub_1000065CC(&v605, "UG");
  __int16 v607 = 257;
  char v608 = 1;
  sub_10032E6D8(v2114, (__int128 *)v609, (__int128 *)v603);
  sub_1000065CC(v601, "UZ");
  sub_1000065CC(v595, "Uzbekistan");
  sub_1000065CC(&v597, "UZ");
  __int16 v599 = 0;
  char v600 = 6;
  sub_10032E6D8(v2115, (__int128 *)v601, (__int128 *)v595);
  sub_1000065CC(v593, "ZM");
  sub_1000065CC(v587, "Zambia");
  sub_1000065CC(&v589, "ZM");
  __int16 v591 = 257;
  char v592 = 1;
  sub_10032E6D8(v2116, (__int128 *)v593, (__int128 *)v587);
  sub_1000065CC(v585, "ZW");
  sub_1000065CC(v579, "Zimbabwe");
  sub_1000065CC(&v581, "ZW");
  __int16 v583 = 257;
  char v584 = 1;
  sub_10032E6D8(v2117, (__int128 *)v585, (__int128 *)v579);
  sub_1000065CC(v577, "GE");
  sub_1000065CC(v571, "Georgia");
  sub_1000065CC(&v573, "GE");
  __int16 v575 = 257;
  char v576 = 1;
  sub_10032E6D8(v2118, (__int128 *)v577, (__int128 *)v571);
  sub_1000065CC(v569, "MW");
  sub_1000065CC(v563, "Malawi");
  sub_1000065CC(&v565, "MW");
  __int16 v567 = 257;
  char v568 = 1;
  sub_10032E6D8(v2119, (__int128 *)v569, (__int128 *)v563);
  sub_1000065CC(v561, "RW");
  sub_1000065CC(v555, "Rwanda");
  sub_1000065CC(&v557, "RW");
  __int16 v559 = 257;
  char v560 = 1;
  sub_10032E6D8(v2120, (__int128 *)v561, (__int128 *)v555);
  sub_1000065CC(v553, "SC");
  sub_1000065CC(v547, "Seychelles");
  sub_1000065CC(&v549, "SC");
  __int16 v551 = 257;
  char v552 = 1;
  sub_10032E6D8(v2121, (__int128 *)v553, (__int128 *)v547);
  sub_1000065CC(v545, "SZ");
  sub_1000065CC(v539, "Swaziland");
  sub_1000065CC(&v541, "SZ");
  __int16 v543 = 257;
  char v544 = 1;
  sub_10032E6D8(v2122, (__int128 *)v545, (__int128 *)v539);
  sub_1000065CC(v537, "QA");
  sub_1000065CC(v531, "Qatar");
  sub_1000065CC(&v533, "QA");
  __int16 v535 = 257;
  char v536 = 1;
  sub_10032E6D8(v2123, (__int128 *)v537, (__int128 *)v531);
  sub_1000065CC(v529, "JO");
  sub_1000065CC(v523, "Jordan");
  sub_1000065CC(&v525, "JO");
  __int16 v527 = 257;
  char v528 = 1;
  sub_10032E6D8(v2124, (__int128 *)v529, (__int128 *)v523);
  sub_1000065CC(v521, "BH");
  sub_1000065CC(v515, "Bahrain");
  sub_1000065CC(&v517, "BH");
  __int16 v519 = 257;
  char v520 = 1;
  sub_10032E6D8(v2125, (__int128 *)v521, (__int128 *)v515);
  sub_1000065CC(v513, "AD");
  sub_1000065CC(v507, "ANDORRA (all EIRP locales)");
  sub_1000065CC(&v509, "AD");
  __int16 v511 = 257;
  char v512 = 1;
  sub_10032E6D8(v2126, (__int128 *)v513, (__int128 *)v507);
  sub_1000065CC(v505, "CW");
  sub_1000065CC(v499, "CURACAO");
  sub_1000065CC(&v501, "CW");
  __int16 v503 = 257;
  char v504 = 0;
  sub_10032E6D8(v2127, (__int128 *)v505, (__int128 *)v499);
  sub_1000065CC(v497, "BZ");
  sub_1000065CC(v491, "BELIZE");
  sub_1000065CC(&v493, "BZ");
  __int16 v495 = 257;
  char v496 = 0;
  sub_10032E6D8(v2128, (__int128 *)v497, (__int128 *)v491);
  sub_1000065CC(v489, "CC");
  sub_1000065CC(v483, "COCOS (KEELING) ISLANDS");
  sub_1000065CC(&v485, "CC");
  __int16 v487 = 257;
  char v488 = 1;
  sub_10032E6D8(v2129, (__int128 *)v489, (__int128 *)v483);
  sub_1000065CC(v481, "CK");
  sub_1000065CC(v475, "COOK ISLANDS");
  sub_1000065CC(&v477, "CK");
  __int16 v479 = 257;
  char v480 = 1;
  sub_10032E6D8(v2130, (__int128 *)v481, (__int128 *)v475);
  sub_1000065CC(v473, "CM");
  sub_1000065CC(v467, "CAMEROON");
  sub_1000065CC(&v469, "CM");
  __int16 v471 = 257;
  char v472 = 1;
  sub_10032E6D8(v2131, (__int128 *)v473, (__int128 *)v467);
  sub_1000065CC(v465, "CV");
  sub_1000065CC(v459, "CAPE VERDE");
  sub_1000065CC(&v461, "CV");
  __int16 v463 = 257;
  char v464 = 1;
  sub_10032E6D8(v2132, (__int128 *)v465, (__int128 *)v459);
  sub_1000065CC(v457, "CX");
  sub_1000065CC(v451, "CHRISTMAS ISLAND");
  sub_1000065CC(&v453, "CX");
  __int16 v455 = 257;
  char v456 = 1;
  sub_10032E6D8(v2133, (__int128 *)v457, (__int128 *)v451);
  sub_1000065CC(v449, "FM");
  sub_1000065CC(v443, "MICRONESIA. FEDERATED STATES OF");
  sub_1000065CC(&v445, "FM");
  __int16 v447 = 257;
  char v448 = 1;
  sub_10032E6D8(v2134, (__int128 *)v449, (__int128 *)v443);
  sub_1000065CC(v441, "GF");
  sub_1000065CC(v435, "FRENCH GUIANA");
  sub_1000065CC(&v437, "GF");
  __int16 v439 = 257;
  char v440 = 0;
  sub_10032E6D8(v2135, (__int128 *)v441, (__int128 *)v435);
  sub_1000065CC(v433, "GG");
  sub_1000065CC(v427, "Guernsey (All EIRP Locales)");
  sub_1000065CC(&v429, "GG");
  __int16 v431 = 257;
  char v432 = 1;
  sub_10032E6D8(v2136, (__int128 *)v433, (__int128 *)v427);
  sub_1000065CC(v425, "HM");
  sub_1000065CC(v419, "HEARD ISLAND AND MCDONALD ISLANDS");
  sub_1000065CC(&v421, "HM");
  __int16 v423 = 257;
  char v424 = 1;
  sub_10032E6D8(v2137, (__int128 *)v425, (__int128 *)v419);
  sub_1000065CC(v417, "HT");
  sub_1000065CC(v411, "HAITI");
  sub_1000065CC(&v413, "HT");
  __int16 v415 = 257;
  char v416 = 0;
  sub_10032E6D8(v2138, (__int128 *)v417, (__int128 *)v411);
  sub_1000065CC(v409, "IO");
  sub_1000065CC(v403, "BRITISH INDIAN OCEAN TERRITORY");
  sub_1000065CC(&v405, "IO");
  __int16 v407 = 257;
  char v408 = 1;
  sub_10032E6D8(v2139, (__int128 *)v409, (__int128 *)v403);
  sub_1000065CC(v401, "MF");
  sub_1000065CC(v395, "Saint Martin (North of Island)");
  sub_1000065CC(&v397, "MF");
  __int16 v399 = 257;
  char v400 = 0;
  sub_10032E6D8(v2140, (__int128 *)v401, (__int128 *)v395);
  sub_1000065CC(v393, "MH");
  sub_1000065CC(v387, "MARSHALL ISLANDS");
  sub_1000065CC(&v389, "MH");
  __int16 v391 = 257;
  char v392 = 1;
  sub_10032E6D8(v2141, (__int128 *)v393, (__int128 *)v387);
  sub_1000065CC(v385, "MR");
  sub_1000065CC(v379, "MAURITANIA");
  sub_1000065CC(&v381, "MR");
  __int16 v383 = 257;
  char v384 = 1;
  sub_10032E6D8(v2142, (__int128 *)v385, (__int128 *)v379);
  sub_1000065CC(v377, "NG");
  sub_1000065CC(v371, "NIGERIA");
  sub_1000065CC(&v373, "NG");
  __int16 v375 = 257;
  char v376 = 1;
  sub_10032E6D8(v2143, (__int128 *)v377, (__int128 *)v371);
  sub_1000065CC(v369, "NR");
  sub_1000065CC(v363, "NAURU");
  sub_1000065CC(&v365, "NR");
  __int16 v367 = 257;
  char v368 = 1;
  sub_10032E6D8(v2144, (__int128 *)v369, (__int128 *)v363);
  sub_1000065CC(v361, "NU");
  sub_1000065CC(v355, "NIUE");
  sub_1000065CC(&v357, "NU");
  __int16 v359 = 257;
  char v360 = 1;
  sub_10032E6D8(v2145, (__int128 *)v361, (__int128 *)v355);
  sub_1000065CC(v353, "PN");
  sub_1000065CC(v347, "PITCAIRN");
  sub_1000065CC(&v349, "PN");
  __int16 v351 = 257;
  char v352 = 1;
  sub_10032E6D8(v2146, (__int128 *)v353, (__int128 *)v347);
  sub_1000065CC(v345, "PW");
  sub_1000065CC(v339, "PALAU ");
  sub_1000065CC(&v341, "PW");
  __int16 v343 = 257;
  char v344 = 0;
  sub_10032E6D8(v2147, (__int128 *)v345, (__int128 *)v339);
  sub_1000065CC(v337, "SB");
  sub_1000065CC(v331, "SOLOMON ISLANDS");
  sub_1000065CC(&v333, "SB");
  __int16 v335 = 257;
  char v336 = 1;
  sub_10032E6D8(v2148, (__int128 *)v337, (__int128 *)v331);
  sub_1000065CC(v329, "SL");
  sub_1000065CC(v323, "SIERRA LEONE");
  sub_1000065CC(&v325, "SL");
  __int16 v327 = 257;
  char v328 = 1;
  sub_10032E6D8(v2149, (__int128 *)v329, (__int128 *)v323);
  sub_1000065CC(v321, "SR");
  sub_1000065CC(v315, "SURINAME");
  sub_1000065CC(&v317, "SR");
  __int16 v319 = 257;
  char v320 = 0;
  sub_10032E6D8(v2150, (__int128 *)v321, (__int128 *)v315);
  sub_1000065CC(v313, "ST");
  sub_1000065CC(v307, "SAO TOME AND PRINCIPE");
  sub_1000065CC(&v309, "ST");
  __int16 v311 = 257;
  char v312 = 1;
  sub_10032E6D8(v2151, (__int128 *)v313, (__int128 *)v307);
  sub_1000065CC(v305, "TF");
  sub_1000065CC(v299, "FRENCH SOUTHERN TERRITORIES");
  sub_1000065CC(&v301, "TF");
  __int16 v303 = 257;
  char v304 = 1;
  sub_10032E6D8(v2152, (__int128 *)v305, (__int128 *)v299);
  sub_1000065CC(v297, "TK");
  sub_1000065CC(v291, "TOKELAU");
  sub_1000065CC(&v293, "TK");
  __int16 v295 = 257;
  char v296 = 1;
  sub_10032E6D8(v2153, (__int128 *)v297, (__int128 *)v291);
  sub_1000065CC(v289, "TM");
  sub_1000065CC(v283, "TURKMENISTAN");
  sub_1000065CC(&v285, "TM");
  __int16 v287 = 0;
  char v288 = 6;
  sub_10032E6D8(v2154, (__int128 *)v289, (__int128 *)v283);
  sub_1000065CC(v281, "TO");
  sub_1000065CC(v275, "TONGA");
  sub_1000065CC(&v277, "TO");
  __int16 v279 = 257;
  char v280 = 1;
  sub_10032E6D8(v2155, (__int128 *)v281, (__int128 *)v275);
  sub_1000065CC(v273, "TV");
  sub_1000065CC(v267, "TUVALU");
  sub_1000065CC(&v269, "TV");
  __int16 v271 = 257;
  char v272 = 1;
  sub_10032E6D8(v2156, (__int128 *)v273, (__int128 *)v267);
  sub_1000065CC(v265, "VA");
  sub_1000065CC(v259, "HOLY SEE (VATICAN CITY STATE)");
  sub_1000065CC(&v261, "VA");
  __int16 v263 = 257;
  char v264 = 1;
  sub_10032E6D8(v2157, (__int128 *)v265, (__int128 *)v259);
  sub_1000065CC(v257, "WF");
  sub_1000065CC(v251, "WALLIS AND FUTUNA");
  sub_1000065CC(&v253, "WF");
  __int16 v255 = 257;
  char v256 = 1;
  sub_10032E6D8(v2158, (__int128 *)v257, (__int128 *)v251);
  sub_1000065CC(v249, "YE");
  sub_1000065CC(v243, "YEMEN");
  sub_1000065CC(&v245, "YE");
  __int16 v247 = 257;
  char v248 = 1;
  sub_10032E6D8(v2159, (__int128 *)v249, (__int128 *)v243);
  sub_1000065CC(v241, "YT");
  sub_1000065CC(v235, "MAYOTTE");
  sub_1000065CC(&v237, "YT");
  __int16 v239 = 257;
  char v240 = 1;
  sub_10032E6D8(v2160, (__int128 *)v241, (__int128 *)v235);
  sub_1000065CC(v233, "ER");
  sub_1000065CC(v227, "ERITREA");
  sub_1000065CC(&v229, "ER");
  __int16 v231 = 257;
  char v232 = 1;
  sub_10032E6D8(v2161, (__int128 *)v233, (__int128 *)v227);
  sub_1000065CC(v225, "FO");
  sub_1000065CC(v219, "FAROE ISLANDS");
  sub_1000065CC(&v221, "FO");
  __int16 v223 = 257;
  char v224 = 1;
  sub_10032E6D8(v2162, (__int128 *)v225, (__int128 *)v219);
  sub_1000065CC(v217, "SO");
  sub_1000065CC(v211, "SOMALIA");
  sub_1000065CC(&v213, "SO");
  __int16 v215 = 257;
  char v216 = 1;
  sub_10032E6D8(v2163, (__int128 *)v217, (__int128 *)v211);
  sub_1000065CC(v209, "BQ");
  sub_1000065CC(v203, "BES");
  sub_1000065CC(&v205, "BQ");
  __int16 v207 = 257;
  char v208 = 0;
  sub_10032E6D8(v2164, (__int128 *)v209, (__int128 *)v203);
  sub_1000065CC(v201, "GY");
  sub_1000065CC(v195, "Guyana");
  sub_1000065CC(&v197, "GY");
  __int16 v199 = 257;
  char v200 = 0;
  sub_10032E6D8(v2165, (__int128 *)v201, (__int128 *)v195);
  sub_1000065CC(v193, "AS");
  sub_1000065CC(v187, "America Samoa");
  sub_1000065CC(&v189, "AS");
  __int16 v191 = 257;
  char v192 = 0;
  sub_10032E6D8(v2166, (__int128 *)v193, (__int128 *)v187);
  sub_1000065CC(v185, "BW");
  sub_1000065CC(v179, "Botswana");
  sub_1000065CC(&v181, "BW");
  __int16 v183 = 257;
  char v184 = 1;
  sub_10032E6D8(v2167, (__int128 *)v185, (__int128 *)v179);
  sub_1000065CC(v177, "XK");
  sub_1000065CC(v171, "Kosovo");
  sub_1000065CC(&v173, "XK");
  __int16 v175 = 257;
  char v176 = 1;
  sub_10032E6D8(v2168, (__int128 *)v177, (__int128 *)v171);
  sub_1000065CC(v169, "PS");
  sub_1000065CC(v163, "Palestine");
  sub_1000065CC(&v165, "PS");
  __int16 v167 = 257;
  char v168 = 1;
  sub_10032E6D8(v2169, (__int128 *)v169, (__int128 *)v163);
  sub_1000065CC(v161, "TJ");
  sub_1000065CC(v155, "Tajikistan");
  sub_1000065CC(&v157, "TJ");
  __int16 v159 = 0;
  char v160 = 6;
  sub_10032E6D8(v2170, (__int128 *)v161, (__int128 *)v155);
  sub_1000065CC(v153, "SD");
  sub_1000065CC(v147, "SUDAN");
  sub_1000065CC(&v149, "SD");
  __int16 v151 = 257;
  char v152 = 1;
  sub_10032E6D8(v2171, (__int128 *)v153, (__int128 *)v147);
  sub_1000065CC(v145, "IM");
  sub_1000065CC(v139, "Isle of MAN");
  sub_1000065CC(&v141, "IM");
  __int16 v143 = 257;
  char v144 = 1;
  sub_10032E6D8(v2172, (__int128 *)v145, (__int128 *)v139);
  sub_1000065CC(v137, "TL");
  sub_1000065CC(v131, "East Timor");
  sub_1000065CC(&v133, "TL");
  __int16 v135 = 257;
  char v136 = 1;
  sub_10032E6D8(v2173, (__int128 *)v137, (__int128 *)v131);
  sub_1000065CC(v129, "DJ");
  sub_1000065CC(v123, "Djibouti ");
  sub_1000065CC(&v125, "DJ");
  __int16 v127 = 257;
  char v128 = 1;
  sub_10032E6D8(v2174, (__int128 *)v129, (__int128 *)v123);
  sub_1000065CC(v121, "FK");
  sub_1000065CC(v115, "Falkland Islands");
  sub_1000065CC(&v117, "FK");
  __int16 v119 = 257;
  char v120 = 1;
  sub_10032E6D8(v2175, (__int128 *)v121, (__int128 *)v115);
  sub_1000065CC(v113, "KI");
  sub_1000065CC(v107, "Kiribati");
  sub_1000065CC(&v109, "KI");
  __int16 v111 = 257;
  char v112 = 1;
  sub_10032E6D8(v2176, (__int128 *)v113, (__int128 *)v107);
  sub_1000065CC(v105, "KM");
  sub_1000065CC(v99, "Comoros ");
  sub_1000065CC(&v101, "KM");
  __int16 v103 = 257;
  char v104 = 1;
  sub_10032E6D8(v2177, (__int128 *)v105, (__int128 *)v99);
  sub_1000065CC(v97, "PM");
  sub_1000065CC(v91, "St. Pierre & Miquelon");
  sub_1000065CC(&v93, "PM");
  __int16 v95 = 257;
  char v96 = 1;
  sub_10032E6D8(v2178, (__int128 *)v97, (__int128 *)v91);
  sub_1000065CC(v89, "SM");
  sub_1000065CC(v83, "San Marino");
  sub_1000065CC(&v85, "SM");
  __int16 v87 = 257;
  char v88 = 1;
  sub_10032E6D8(v2179, (__int128 *)v89, (__int128 *)v83);
  sub_1000065CC(v81, "MP");
  sub_1000065CC(v75, "Northern Mariana Islands");
  sub_1000065CC(&v77, "MP");
  __int16 v79 = 257;
  char v80 = 0;
  sub_10032E6D8(v2180, (__int128 *)v81, (__int128 *)v75);
  sub_1000065CC(v73, "A2");
  sub_1000065CC(v67, "French West Indies");
  sub_1000065CC(&v69, "A2");
  __int16 v71 = 257;
  char v72 = 1;
  sub_10032E6D8(v2181, (__int128 *)v73, (__int128 *)v67);
  sub_1000065CC(v65, off_1007F4720[0]);
  sub_1000065CC(v59, "Shared MCC");
  sub_1000065CC(&v61, off_1007F4720[0]);
  __int16 v63 = 0;
  char v64 = 0;
  sub_10032E6D8(v2182, (__int128 *)v65, (__int128 *)v59);
  sub_1000065CC(v57, off_1007F4740[0]);
  sub_1000065CC(v51, "JPSS");
  sub_1000065CC(&v53, off_1007F4740[0]);
  __int16 v55 = 0;
  char v56 = 4;
  sub_10032E6D8(v2183, (__int128 *)v57, (__int128 *)v51);
  sub_1000065CC(v49, off_1007F4748[0]);
  sub_1000065CC(v43, "USCW");
  sub_1000065CC(&v45, off_1007F4748[0]);
  __int16 v47 = 0;
  char v48 = 0;
  sub_10032E6D8(v2184, (__int128 *)v49, (__int128 *)v43);
  sub_1000065CC(v41, off_1007F4750[0]);
  sub_1000065CC(v35, "GridRestricted");
  sub_1000065CC(&v37, off_1007F4750[0]);
  __int16 v39 = 0;
  char v40 = 0;
  sub_10032E6D8(v2185, (__int128 *)v41, (__int128 *)v35);
  sub_1000065CC(v33, off_1007F4768[0]);
  sub_1000065CC(v27, "BACKOFF");
  sub_1000065CC(&v29, off_1007F4768[0]);
  __int16 v31 = 0;
  char v32 = 0;
  sub_10032E6D8(v2186, (__int128 *)v33, (__int128 *)v27);
  sub_1000065CC(v25, off_1007F4728[0]);
  sub_1000065CC(v19, "TEST5");
  sub_1000065CC(&v21, off_1007F4728[0]);
  __int16 v23 = 1;
  char v24 = 0;
  sub_10032E6D8(v2187, (__int128 *)v25, (__int128 *)v19);
  sub_1000065CC(v17, off_1007F4738[0]);
  sub_1000065CC(v11, "ApFakeCountry");
  sub_1000065CC(&v13, off_1007F4738[0]);
  __int16 v15 = 0;
  char v16 = 0;
  sub_10032E6D8(v2188, (__int128 *)v17, (__int128 *)v11);
  sub_1000065CC(v9, off_1007F4730[0]);
  sub_1000065CC(v3, "kUnknownCountry");
  sub_1000065CC(&__p, off_1007F4730[0]);
  __int16 v7 = 0;
  char v8 = 0;
  sub_10032E6D8(v2189, (__int128 *)v9, (__int128 *)v3);
  sub_10032E8B8((uint64_t)qword_100800898, v1947, 243LL);
  unint64_t v0 = 19440LL;
  do
  {
    uint64_t v1 = &v1947[v0];
    if (SHIBYTE(v1945[v0 / 8 + 1]) < 0) {
      operator delete(*((void **)v1 - 4));
    }
    if (*(&v1940 + v0) < 0) {
      operator delete(*((void **)v1 - 10));
    }
    v0 -= 80LL;
  }

  while (v0);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  if (v82 < 0) {
    operator delete(v81[0]);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83[0]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  if (v94 < 0) {
    operator delete(v93);
  }
  if (v92 < 0) {
    operator delete(v91[0]);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v102 < 0) {
    operator delete(v101);
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  if (v110 < 0) {
    operator delete(v109);
  }
  if (v108 < 0) {
    operator delete(v107[0]);
  }
  if (v114 < 0) {
    operator delete(v113[0]);
  }
  if (v118 < 0) {
    operator delete(v117);
  }
  if (v116 < 0) {
    operator delete(v115[0]);
  }
  if (v122 < 0) {
    operator delete(v121[0]);
  }
  if (v126 < 0) {
    operator delete(v125);
  }
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  if (v134 < 0) {
    operator delete(v133);
  }
  if (v132 < 0) {
    operator delete(v131[0]);
  }
  if (v138 < 0) {
    operator delete(v137[0]);
  }
  if (v142 < 0) {
    operator delete(v141);
  }
  if (v140 < 0) {
    operator delete(v139[0]);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  if (v150 < 0) {
    operator delete(v149);
  }
  if (v148 < 0) {
    operator delete(v147[0]);
  }
  if (v154 < 0) {
    operator delete(v153[0]);
  }
  if (v158 < 0) {
    operator delete(v157);
  }
  if (v156 < 0) {
    operator delete(v155[0]);
  }
  if (v162 < 0) {
    operator delete(v161[0]);
  }
  if (v166 < 0) {
    operator delete(v165);
  }
  if (v164 < 0) {
    operator delete(v163[0]);
  }
  if (v170 < 0) {
    operator delete(v169[0]);
  }
  if (v174 < 0) {
    operator delete(v173);
  }
  if (v172 < 0) {
    operator delete(v171[0]);
  }
  if (v178 < 0) {
    operator delete(v177[0]);
  }
  if (v182 < 0) {
    operator delete(v181);
  }
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v186 < 0) {
    operator delete(v185[0]);
  }
  if (v190 < 0) {
    operator delete(v189);
  }
  if (v188 < 0) {
    operator delete(v187[0]);
  }
  if (v194 < 0) {
    operator delete(v193[0]);
  }
  if (v198 < 0) {
    operator delete(v197);
  }
  if (v196 < 0) {
    operator delete(v195[0]);
  }
  if (v202 < 0) {
    operator delete(v201[0]);
  }
  if (v206 < 0) {
    operator delete(v205);
  }
  if (v204 < 0) {
    operator delete(v203[0]);
  }
  if (v210 < 0) {
    operator delete(v209[0]);
  }
  if (v214 < 0) {
    operator delete(v213);
  }
  if (v212 < 0) {
    operator delete(v211[0]);
  }
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  if (v222 < 0) {
    operator delete(v221);
  }
  if (v220 < 0) {
    operator delete(v219[0]);
  }
  if (v226 < 0) {
    operator delete(v225[0]);
  }
  if (v230 < 0) {
    operator delete(v229);
  }
  if (v228 < 0) {
    operator delete(v227[0]);
  }
  if (v234 < 0) {
    operator delete(v233[0]);
  }
  if (v238 < 0) {
    operator delete(v237);
  }
  if (v236 < 0) {
    operator delete(v235[0]);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  if (v246 < 0) {
    operator delete(v245);
  }
  if (v244 < 0) {
    operator delete(v243[0]);
  }
  if (v250 < 0) {
    operator delete(v249[0]);
  }
  if (v254 < 0) {
    operator delete(v253);
  }
  if (v252 < 0) {
    operator delete(v251[0]);
  }
  if (v258 < 0) {
    operator delete(v257[0]);
  }
  if (v262 < 0) {
    operator delete(v261);
  }
  if (v260 < 0) {
    operator delete(v259[0]);
  }
  if (v266 < 0) {
    operator delete(v265[0]);
  }
  if (v270 < 0) {
    operator delete(v269);
  }
  if (v268 < 0) {
    operator delete(v267[0]);
  }
  if (v274 < 0) {
    operator delete(v273[0]);
  }
  if (v278 < 0) {
    operator delete(v277);
  }
  if (v276 < 0) {
    operator delete(v275[0]);
  }
  if (v282 < 0) {
    operator delete(v281[0]);
  }
  if (v286 < 0) {
    operator delete(v285);
  }
  if (v284 < 0) {
    operator delete(v283[0]);
  }
  if (v290 < 0) {
    operator delete(v289[0]);
  }
  if (v294 < 0) {
    operator delete(v293);
  }
  if (v292 < 0) {
    operator delete(v291[0]);
  }
  if (v298 < 0) {
    operator delete(v297[0]);
  }
  if (v302 < 0) {
    operator delete(v301);
  }
  if (v300 < 0) {
    operator delete(v299[0]);
  }
  if (v306 < 0) {
    operator delete(v305[0]);
  }
  if (v310 < 0) {
    operator delete(v309);
  }
  if (v308 < 0) {
    operator delete(v307[0]);
  }
  if (v314 < 0) {
    operator delete(v313[0]);
  }
  if (v318 < 0) {
    operator delete(v317);
  }
  if (v316 < 0) {
    operator delete(v315[0]);
  }
  if (v322 < 0) {
    operator delete(v321[0]);
  }
  if (v326 < 0) {
    operator delete(v325);
  }
  if (v324 < 0) {
    operator delete(v323[0]);
  }
  if (v330 < 0) {
    operator delete(v329[0]);
  }
  if (v334 < 0) {
    operator delete(v333);
  }
  if (v332 < 0) {
    operator delete(v331[0]);
  }
  if (v338 < 0) {
    operator delete(v337[0]);
  }
  if (v342 < 0) {
    operator delete(v341);
  }
  if (v340 < 0) {
    operator delete(v339[0]);
  }
  if (v346 < 0) {
    operator delete(v345[0]);
  }
  if (v350 < 0) {
    operator delete(v349);
  }
  if (v348 < 0) {
    operator delete(v347[0]);
  }
  if (v354 < 0) {
    operator delete(v353[0]);
  }
  if (v358 < 0) {
    operator delete(v357);
  }
  if (v356 < 0) {
    operator delete(v355[0]);
  }
  if (v362 < 0) {
    operator delete(v361[0]);
  }
  if (v366 < 0) {
    operator delete(v365);
  }
  if (v364 < 0) {
    operator delete(v363[0]);
  }
  if (v370 < 0) {
    operator delete(v369[0]);
  }
  if (v374 < 0) {
    operator delete(v373);
  }
  if (v372 < 0) {
    operator delete(v371[0]);
  }
  if (v378 < 0) {
    operator delete(v377[0]);
  }
  if (v382 < 0) {
    operator delete(v381);
  }
  if (v380 < 0) {
    operator delete(v379[0]);
  }
  if (v386 < 0) {
    operator delete(v385[0]);
  }
  if (v390 < 0) {
    operator delete(v389);
  }
  if (v388 < 0) {
    operator delete(v387[0]);
  }
  if (v394 < 0) {
    operator delete(v393[0]);
  }
  if (v398 < 0) {
    operator delete(v397);
  }
  if (v396 < 0) {
    operator delete(v395[0]);
  }
  if (v402 < 0) {
    operator delete(v401[0]);
  }
  if (v406 < 0) {
    operator delete(v405);
  }
  if (v404 < 0) {
    operator delete(v403[0]);
  }
  if (v410 < 0) {
    operator delete(v409[0]);
  }
  if (v414 < 0) {
    operator delete(v413);
  }
  if (v412 < 0) {
    operator delete(v411[0]);
  }
  if (v418 < 0) {
    operator delete(v417[0]);
  }
  if (v422 < 0) {
    operator delete(v421);
  }
  if (v420 < 0) {
    operator delete(v419[0]);
  }
  if (v426 < 0) {
    operator delete(v425[0]);
  }
  if (v430 < 0) {
    operator delete(v429);
  }
  if (v428 < 0) {
    operator delete(v427[0]);
  }
  if (v434 < 0) {
    operator delete(v433[0]);
  }
  if (v438 < 0) {
    operator delete(v437);
  }
  if (v436 < 0) {
    operator delete(v435[0]);
  }
  if (v442 < 0) {
    operator delete(v441[0]);
  }
  if (v446 < 0) {
    operator delete(v445);
  }
  if (v444 < 0) {
    operator delete(v443[0]);
  }
  if (v450 < 0) {
    operator delete(v449[0]);
  }
  if (v454 < 0) {
    operator delete(v453);
  }
  if (v452 < 0) {
    operator delete(v451[0]);
  }
  if (v458 < 0) {
    operator delete(v457[0]);
  }
  if (v462 < 0) {
    operator delete(v461);
  }
  if (v460 < 0) {
    operator delete(v459[0]);
  }
  if (v466 < 0) {
    operator delete(v465[0]);
  }
  if (v470 < 0) {
    operator delete(v469);
  }
  if (v468 < 0) {
    operator delete(v467[0]);
  }
  if (v474 < 0) {
    operator delete(v473[0]);
  }
  if (v478 < 0) {
    operator delete(v477);
  }
  if (v476 < 0) {
    operator delete(v475[0]);
  }
  if (v482 < 0) {
    operator delete(v481[0]);
  }
  if (v486 < 0) {
    operator delete(v485);
  }
  if (v484 < 0) {
    operator delete(v483[0]);
  }
  if (v490 < 0) {
    operator delete(v489[0]);
  }
  if (v494 < 0) {
    operator delete(v493);
  }
  if (v492 < 0) {
    operator delete(v491[0]);
  }
  if (v498 < 0) {
    operator delete(v497[0]);
  }
  if (v502 < 0) {
    operator delete(v501);
  }
  if (v500 < 0) {
    operator delete(v499[0]);
  }
  if (v506 < 0) {
    operator delete(v505[0]);
  }
  if (v510 < 0) {
    operator delete(v509);
  }
  if (v508 < 0) {
    operator delete(v507[0]);
  }
  if (v514 < 0) {
    operator delete(v513[0]);
  }
  if (v518 < 0) {
    operator delete(v517);
  }
  if (v516 < 0) {
    operator delete(v515[0]);
  }
  if (v522 < 0) {
    operator delete(v521[0]);
  }
  if (v526 < 0) {
    operator delete(v525);
  }
  if (v524 < 0) {
    operator delete(v523[0]);
  }
  if (v530 < 0) {
    operator delete(v529[0]);
  }
  if (v534 < 0) {
    operator delete(v533);
  }
  if (v532 < 0) {
    operator delete(v531[0]);
  }
  if (v538 < 0) {
    operator delete(v537[0]);
  }
  if (v542 < 0) {
    operator delete(v541);
  }
  if (v540 < 0) {
    operator delete(v539[0]);
  }
  if (v546 < 0) {
    operator delete(v545[0]);
  }
  if (v550 < 0) {
    operator delete(v549);
  }
  if (v548 < 0) {
    operator delete(v547[0]);
  }
  if (v554 < 0) {
    operator delete(v553[0]);
  }
  if (v558 < 0) {
    operator delete(v557);
  }
  if (v556 < 0) {
    operator delete(v555[0]);
  }
  if (v562 < 0) {
    operator delete(v561[0]);
  }
  if (v566 < 0) {
    operator delete(v565);
  }
  if (v564 < 0) {
    operator delete(v563[0]);
  }
  if (v570 < 0) {
    operator delete(v569[0]);
  }
  if (v574 < 0) {
    operator delete(v573);
  }
  if (v572 < 0) {
    operator delete(v571[0]);
  }
  if (v578 < 0) {
    operator delete(v577[0]);
  }
  if (v582 < 0) {
    operator delete(v581);
  }
  if (v580 < 0) {
    operator delete(v579[0]);
  }
  if (v586 < 0) {
    operator delete(v585[0]);
  }
  if (v590 < 0) {
    operator delete(v589);
  }
  if (v588 < 0) {
    operator delete(v587[0]);
  }
  if (v594 < 0) {
    operator delete(v593[0]);
  }
  if (v598 < 0) {
    operator delete(v597);
  }
  if (v596 < 0) {
    operator delete(v595[0]);
  }
  if (v602 < 0) {
    operator delete(v601[0]);
  }
  if (v606 < 0) {
    operator delete(v605);
  }
  if (v604 < 0) {
    operator delete(v603[0]);
  }
  if (v610 < 0) {
    operator delete(v609[0]);
  }
  if (v614 < 0) {
    operator delete(v613);
  }
  if (v612 < 0) {
    operator delete(v611[0]);
  }
  if (v618 < 0) {
    operator delete(v617[0]);
  }
  if (v622 < 0) {
    operator delete(v621);
  }
  if (v620 < 0) {
    operator delete(v619[0]);
  }
  if (v626 < 0) {
    operator delete(v625[0]);
  }
  if (v630 < 0) {
    operator delete(v629);
  }
  if (v628 < 0) {
    operator delete(v627[0]);
  }
  if (v634 < 0) {
    operator delete(v633[0]);
  }
  if (v638 < 0) {
    operator delete(v637);
  }
  if (v636 < 0) {
    operator delete(v635[0]);
  }
  if (v642 < 0) {
    operator delete(v641[0]);
  }
  if (v646 < 0) {
    operator delete(v645);
  }
  if (v644 < 0) {
    operator delete(v643[0]);
  }
  if (v650 < 0) {
    operator delete(v649[0]);
  }
  if (v654 < 0) {
    operator delete(v653);
  }
  if (v652 < 0) {
    operator delete(v651[0]);
  }
  if (v658 < 0) {
    operator delete(v657[0]);
  }
  if (v662 < 0) {
    operator delete(v661);
  }
  if (v660 < 0) {
    operator delete(v659[0]);
  }
  if (v666 < 0) {
    operator delete(v665[0]);
  }
  if (v670 < 0) {
    operator delete(v669);
  }
  if (v668 < 0) {
    operator delete(v667[0]);
  }
  if (v674 < 0) {
    operator delete(v673[0]);
  }
  if (v678 < 0) {
    operator delete(v677);
  }
  if (v676 < 0) {
    operator delete(v675[0]);
  }
  if (v682 < 0) {
    operator delete(v681[0]);
  }
  if (v686 < 0) {
    operator delete(v685);
  }
  if (v684 < 0) {
    operator delete(v683[0]);
  }
  if (v690 < 0) {
    operator delete(v689[0]);
  }
  if (v694 < 0) {
    operator delete(v693);
  }
  if (v692 < 0) {
    operator delete(v691[0]);
  }
  if (v698 < 0) {
    operator delete(v697[0]);
  }
  if (v702 < 0) {
    operator delete(v701);
  }
  if (v700 < 0) {
    operator delete(v699[0]);
  }
  if (v706 < 0) {
    operator delete(v705[0]);
  }
  if (v710 < 0) {
    operator delete(v709);
  }
  if (v708 < 0) {
    operator delete(v707[0]);
  }
  if (v714 < 0) {
    operator delete(v713[0]);
  }
  if (v718 < 0) {
    operator delete(v717);
  }
  if (v716 < 0) {
    operator delete(v715[0]);
  }
  if (v722 < 0) {
    operator delete(v721[0]);
  }
  if (v726 < 0) {
    operator delete(v725);
  }
  if (v724 < 0) {
    operator delete(v723[0]);
  }
  if (v730 < 0) {
    operator delete(v729[0]);
  }
  if (v734 < 0) {
    operator delete(v733);
  }
  if (v732 < 0) {
    operator delete(v731[0]);
  }
  if (v738 < 0) {
    operator delete(v737[0]);
  }
  if (v742 < 0) {
    operator delete(v741);
  }
  if (v740 < 0) {
    operator delete(v739[0]);
  }
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  if (v750 < 0) {
    operator delete(v749);
  }
  if (v748 < 0) {
    operator delete(v747[0]);
  }
  if (v754 < 0) {
    operator delete(v753[0]);
  }
  if (v758 < 0) {
    operator delete(v757);
  }
  if (v756 < 0) {
    operator delete(v755[0]);
  }
  if (v762 < 0) {
    operator delete(v761[0]);
  }
  if (v766 < 0) {
    operator delete(v765);
  }
  if (v764 < 0) {
    operator delete(v763[0]);
  }
  if (v770 < 0) {
    operator delete(v769[0]);
  }
  if (v774 < 0) {
    operator delete(v773);
  }
  if (v772 < 0) {
    operator delete(v771[0]);
  }
  if (v778 < 0) {
    operator delete(v777[0]);
  }
  if (v782 < 0) {
    operator delete(v781);
  }
  if (v780 < 0) {
    operator delete(v779[0]);
  }
  if (v786 < 0) {
    operator delete(v785[0]);
  }
  if (v790 < 0) {
    operator delete(v789);
  }
  if (v788 < 0) {
    operator delete(v787[0]);
  }
  if (v794 < 0) {
    operator delete(v793[0]);
  }
  if (v798 < 0) {
    operator delete(v797);
  }
  if (v796 < 0) {
    operator delete(v795[0]);
  }
  if (v802 < 0) {
    operator delete(v801[0]);
  }
  if (v806 < 0) {
    operator delete(v805);
  }
  if (v804 < 0) {
    operator delete(v803[0]);
  }
  if (v810 < 0) {
    operator delete(v809[0]);
  }
  if (v814 < 0) {
    operator delete(v813);
  }
  if (v812 < 0) {
    operator delete(v811[0]);
  }
  if (v818 < 0) {
    operator delete(v817[0]);
  }
  if (v822 < 0) {
    operator delete(v821);
  }
  if (v820 < 0) {
    operator delete(v819[0]);
  }
  if (v826 < 0) {
    operator delete(v825[0]);
  }
  if (v830 < 0) {
    operator delete(v829);
  }
  if (v828 < 0) {
    operator delete(v827[0]);
  }
  if (v834 < 0) {
    operator delete(v833[0]);
  }
  if (v838 < 0) {
    operator delete(v837);
  }
  if (v836 < 0) {
    operator delete(v835[0]);
  }
  if (v842 < 0) {
    operator delete(v841[0]);
  }
  if (v846 < 0) {
    operator delete(v845);
  }
  if (v844 < 0) {
    operator delete(v843[0]);
  }
  if (v850 < 0) {
    operator delete(v849[0]);
  }
  if (v854 < 0) {
    operator delete(v853);
  }
  if (v852 < 0) {
    operator delete(v851[0]);
  }
  if (v858 < 0) {
    operator delete(v857[0]);
  }
  if (v862 < 0) {
    operator delete(v861);
  }
  if (v860 < 0) {
    operator delete(v859[0]);
  }
  if (v866 < 0) {
    operator delete(v865[0]);
  }
  if (v870 < 0) {
    operator delete(v869);
  }
  if (v868 < 0) {
    operator delete(v867[0]);
  }
  if (v874 < 0) {
    operator delete(v873[0]);
  }
  if (v878 < 0) {
    operator delete(v877);
  }
  if (v876 < 0) {
    operator delete(v875[0]);
  }
  if (v882 < 0) {
    operator delete(v881[0]);
  }
  if (v886 < 0) {
    operator delete(v885);
  }
  if (v884 < 0) {
    operator delete(v883[0]);
  }
  if (v890 < 0) {
    operator delete(v889[0]);
  }
  if (v894 < 0) {
    operator delete(v893);
  }
  if (v892 < 0) {
    operator delete(v891[0]);
  }
  if (v898 < 0) {
    operator delete(v897[0]);
  }
  if (v902 < 0) {
    operator delete(v901);
  }
  if (v900 < 0) {
    operator delete(v899[0]);
  }
  if (v906 < 0) {
    operator delete(v905[0]);
  }
  if (v910 < 0) {
    operator delete(v909);
  }
  if (v908 < 0) {
    operator delete(v907[0]);
  }
  if (v914 < 0) {
    operator delete(v913[0]);
  }
  if (v918 < 0) {
    operator delete(v917);
  }
  if (v916 < 0) {
    operator delete(v915[0]);
  }
  if (v922 < 0) {
    operator delete(v921[0]);
  }
  if (v926 < 0) {
    operator delete(v925);
  }
  if (v924 < 0) {
    operator delete(v923[0]);
  }
  if (v930 < 0) {
    operator delete(v929[0]);
  }
  if (v934 < 0) {
    operator delete(v933);
  }
  if (v932 < 0) {
    operator delete(v931[0]);
  }
  if (v938 < 0) {
    operator delete(v937[0]);
  }
  if (v942 < 0) {
    operator delete(v941);
  }
  if (v940 < 0) {
    operator delete(v939[0]);
  }
  if (v946 < 0) {
    operator delete(v945[0]);
  }
  if (v950 < 0) {
    operator delete(v949);
  }
  if (v948 < 0) {
    operator delete(v947[0]);
  }
  if (v954 < 0) {
    operator delete(v953[0]);
  }
  if (v958 < 0) {
    operator delete(v957);
  }
  if (v956 < 0) {
    operator delete(v955[0]);
  }
  if (v962 < 0) {
    operator delete(v961[0]);
  }
  if (v966 < 0) {
    operator delete(v965);
  }
  if (v964 < 0) {
    operator delete(v963[0]);
  }
  if (v970 < 0) {
    operator delete(v969[0]);
  }
  if (v974 < 0) {
    operator delete(v973);
  }
  if (v972 < 0) {
    operator delete(v971[0]);
  }
  if (v978 < 0) {
    operator delete(v977[0]);
  }
  if (v982 < 0) {
    operator delete(v981);
  }
  if (v980 < 0) {
    operator delete(v979[0]);
  }
  if (v986 < 0) {
    operator delete(v985[0]);
  }
  if (v990 < 0) {
    operator delete(v989);
  }
  if (v988 < 0) {
    operator delete(v987[0]);
  }
  if (v994 < 0) {
    operator delete(v993[0]);
  }
  if (v998 < 0) {
    operator delete(v997);
  }
  if (v996 < 0) {
    operator delete(v995[0]);
  }
  if (v1002 < 0) {
    operator delete(v1001[0]);
  }
  if (v1006 < 0) {
    operator delete(v1005);
  }
  if (v1004 < 0) {
    operator delete(v1003[0]);
  }
  if (v1010 < 0) {
    operator delete(v1009[0]);
  }
  if (v1014 < 0) {
    operator delete(v1013);
  }
  if (v1012 < 0) {
    operator delete(v1011[0]);
  }
  if (v1018 < 0) {
    operator delete(v1017[0]);
  }
  if (v1022 < 0) {
    operator delete(v1021);
  }
  if (v1020 < 0) {
    operator delete(v1019[0]);
  }
  if (v1026 < 0) {
    operator delete(v1025[0]);
  }
  if (v1030 < 0) {
    operator delete(v1029);
  }
  if (v1028 < 0) {
    operator delete(v1027[0]);
  }
  if (v1034 < 0) {
    operator delete(v1033[0]);
  }
  if (v1038 < 0) {
    operator delete(v1037);
  }
  if (v1036 < 0) {
    operator delete(v1035[0]);
  }
  if (v1042 < 0) {
    operator delete(v1041[0]);
  }
  if (v1046 < 0) {
    operator delete(v1045);
  }
  if (v1044 < 0) {
    operator delete(v1043[0]);
  }
  if (v1050 < 0) {
    operator delete(v1049[0]);
  }
  if (v1054 < 0) {
    operator delete(v1053);
  }
  if (v1052 < 0) {
    operator delete(v1051[0]);
  }
  if (v1058 < 0) {
    operator delete(v1057[0]);
  }
  if (v1062 < 0) {
    operator delete(v1061);
  }
  if (v1060 < 0) {
    operator delete(v1059[0]);
  }
  if (v1066 < 0) {
    operator delete(v1065[0]);
  }
  if (v1070 < 0) {
    operator delete(v1069);
  }
  if (v1068 < 0) {
    operator delete(v1067[0]);
  }
  if (v1074 < 0) {
    operator delete(v1073[0]);
  }
  if (v1078 < 0) {
    operator delete(v1077);
  }
  if (v1076 < 0) {
    operator delete(v1075[0]);
  }
  if (v1082 < 0) {
    operator delete(v1081[0]);
  }
  if (v1086 < 0) {
    operator delete(v1085);
  }
  if (v1084 < 0) {
    operator delete(v1083[0]);
  }
  if (v1090 < 0) {
    operator delete(v1089[0]);
  }
  if (v1094 < 0) {
    operator delete(v1093);
  }
  if (v1092 < 0) {
    operator delete(v1091[0]);
  }
  if (v1098 < 0) {
    operator delete(v1097[0]);
  }
  if (v1102 < 0) {
    operator delete(v1101);
  }
  if (v1100 < 0) {
    operator delete(v1099[0]);
  }
  if (v1106 < 0) {
    operator delete(v1105[0]);
  }
  if (v1110 < 0) {
    operator delete(v1109);
  }
  if (v1108 < 0) {
    operator delete(v1107[0]);
  }
  if (v1114 < 0) {
    operator delete(v1113[0]);
  }
  if (v1118 < 0) {
    operator delete(v1117);
  }
  if (v1116 < 0) {
    operator delete(v1115[0]);
  }
  if (v1122 < 0) {
    operator delete(v1121[0]);
  }
  if (v1126 < 0) {
    operator delete(v1125);
  }
  if (v1124 < 0) {
    operator delete(v1123[0]);
  }
  if (v1130 < 0) {
    operator delete(v1129[0]);
  }
  if (v1134 < 0) {
    operator delete(v1133);
  }
  if (v1132 < 0) {
    operator delete(v1131[0]);
  }
  if (v1138 < 0) {
    operator delete(v1137[0]);
  }
  if (v1142 < 0) {
    operator delete(v1141);
  }
  if (v1140 < 0) {
    operator delete(v1139[0]);
  }
  if (v1146 < 0) {
    operator delete(v1145[0]);
  }
  if (v1150 < 0) {
    operator delete(v1149);
  }
  if (v1148 < 0) {
    operator delete(v1147[0]);
  }
  if (v1154 < 0) {
    operator delete(v1153[0]);
  }
  if (v1158 < 0) {
    operator delete(v1157);
  }
  if (v1156 < 0) {
    operator delete(v1155[0]);
  }
  if (v1162 < 0) {
    operator delete(v1161[0]);
  }
  if (v1166 < 0) {
    operator delete(v1165);
  }
  if (v1164 < 0) {
    operator delete(v1163[0]);
  }
  if (v1170 < 0) {
    operator delete(v1169[0]);
  }
  if (v1174 < 0) {
    operator delete(v1173);
  }
  if (v1172 < 0) {
    operator delete(v1171[0]);
  }
  if (v1178 < 0) {
    operator delete(v1177[0]);
  }
  if (v1182 < 0) {
    operator delete(v1181);
  }
  if (v1180 < 0) {
    operator delete(v1179[0]);
  }
  if (v1186 < 0) {
    operator delete(v1185[0]);
  }
  if (v1190 < 0) {
    operator delete(v1189);
  }
  if (v1188 < 0) {
    operator delete(v1187[0]);
  }
  if (v1194 < 0) {
    operator delete(v1193[0]);
  }
  if (v1198 < 0) {
    operator delete(v1197);
  }
  if (v1196 < 0) {
    operator delete(v1195[0]);
  }
  if (v1202 < 0) {
    operator delete(v1201[0]);
  }
  if (v1206 < 0) {
    operator delete(v1205);
  }
  if (v1204 < 0) {
    operator delete(v1203[0]);
  }
  if (v1210 < 0) {
    operator delete(v1209[0]);
  }
  if (v1214 < 0) {
    operator delete(v1213);
  }
  if (v1212 < 0) {
    operator delete(v1211[0]);
  }
  if (v1218 < 0) {
    operator delete(v1217[0]);
  }
  if (v1222 < 0) {
    operator delete(v1221);
  }
  if (v1220 < 0) {
    operator delete(v1219[0]);
  }
  if (v1226 < 0) {
    operator delete(v1225[0]);
  }
  if (v1230 < 0) {
    operator delete(v1229);
  }
  if (v1228 < 0) {
    operator delete(v1227[0]);
  }
  if (v1234 < 0) {
    operator delete(v1233[0]);
  }
  if (v1238 < 0) {
    operator delete(v1237);
  }
  if (v1236 < 0) {
    operator delete(v1235[0]);
  }
  if (v1242 < 0) {
    operator delete(v1241[0]);
  }
  if (v1246 < 0) {
    operator delete(v1245);
  }
  if (v1244 < 0) {
    operator delete(v1243[0]);
  }
  if (v1250 < 0) {
    operator delete(v1249[0]);
  }
  if (v1254 < 0) {
    operator delete(v1253);
  }
  if (v1252 < 0) {
    operator delete(v1251[0]);
  }
  if (v1258 < 0) {
    operator delete(v1257[0]);
  }
  if (v1262 < 0) {
    operator delete(v1261);
  }
  if (v1260 < 0) {
    operator delete(v1259[0]);
  }
  if (v1266 < 0) {
    operator delete(v1265[0]);
  }
  if (v1270 < 0) {
    operator delete(v1269);
  }
  if (v1268 < 0) {
    operator delete(v1267[0]);
  }
  if (v1274 < 0) {
    operator delete(v1273[0]);
  }
  if (v1278 < 0) {
    operator delete(v1277);
  }
  if (v1276 < 0) {
    operator delete(v1275[0]);
  }
  if (v1282 < 0) {
    operator delete(v1281[0]);
  }
  if (v1286 < 0) {
    operator delete(v1285);
  }
  if (v1284 < 0) {
    operator delete(v1283[0]);
  }
  if (v1290 < 0) {
    operator delete(v1289[0]);
  }
  if (v1294 < 0) {
    operator delete(v1293);
  }
  if (v1292 < 0) {
    operator delete(v1291[0]);
  }
  if (v1298 < 0) {
    operator delete(v1297[0]);
  }
  if (v1302 < 0) {
    operator delete(v1301);
  }
  if (v1300 < 0) {
    operator delete(v1299[0]);
  }
  if (v1306 < 0) {
    operator delete(v1305[0]);
  }
  if (v1310 < 0) {
    operator delete(v1309);
  }
  if (v1308 < 0) {
    operator delete(v1307[0]);
  }
  if (v1314 < 0) {
    operator delete(v1313[0]);
  }
  if (v1318 < 0) {
    operator delete(v1317);
  }
  if (v1316 < 0) {
    operator delete(v1315[0]);
  }
  if (v1322 < 0) {
    operator delete(v1321[0]);
  }
  if (v1326 < 0) {
    operator delete(v1325);
  }
  if (v1324 < 0) {
    operator delete(v1323[0]);
  }
  if (v1330 < 0) {
    operator delete(v1329[0]);
  }
  if (v1334 < 0) {
    operator delete(v1333);
  }
  if (v1332 < 0) {
    operator delete(v1331[0]);
  }
  if (v1338 < 0) {
    operator delete(v1337[0]);
  }
  if (v1342 < 0) {
    operator delete(v1341);
  }
  if (v1340 < 0) {
    operator delete(v1339[0]);
  }
  if (v1346 < 0) {
    operator delete(v1345[0]);
  }
  if (v1350 < 0) {
    operator delete(v1349);
  }
  if (v1348 < 0) {
    operator delete(v1347[0]);
  }
  if (v1354 < 0) {
    operator delete(v1353[0]);
  }
  if (v1358 < 0) {
    operator delete(v1357);
  }
  if (v1356 < 0) {
    operator delete(v1355[0]);
  }
  if (v1362 < 0) {
    operator delete(v1361[0]);
  }
  if (v1366 < 0) {
    operator delete(v1365);
  }
  if (v1364 < 0) {
    operator delete(v1363[0]);
  }
  if (v1370 < 0) {
    operator delete(v1369[0]);
  }
  if (v1374 < 0) {
    operator delete(v1373);
  }
  if (v1372 < 0) {
    operator delete(v1371[0]);
  }
  if (v1378 < 0) {
    operator delete(v1377[0]);
  }
  if (v1382 < 0) {
    operator delete(v1381);
  }
  if (v1380 < 0) {
    operator delete(v1379[0]);
  }
  if (v1386 < 0) {
    operator delete(v1385[0]);
  }
  if (v1390 < 0) {
    operator delete(v1389);
  }
  if (v1388 < 0) {
    operator delete(v1387[0]);
  }
  if (v1394 < 0) {
    operator delete(v1393[0]);
  }
  if (v1398 < 0) {
    operator delete(v1397);
  }
  if (v1396 < 0) {
    operator delete(v1395[0]);
  }
  if (v1402 < 0) {
    operator delete(v1401[0]);
  }
  if (v1406 < 0) {
    operator delete(v1405);
  }
  if (v1404 < 0) {
    operator delete(v1403[0]);
  }
  if (v1410 < 0) {
    operator delete(v1409[0]);
  }
  if (v1414 < 0) {
    operator delete(v1413);
  }
  if (v1412 < 0) {
    operator delete(v1411[0]);
  }
  if (v1418 < 0) {
    operator delete(v1417[0]);
  }
  if (v1422 < 0) {
    operator delete(v1421);
  }
  if (v1420 < 0) {
    operator delete(v1419[0]);
  }
  if (v1426 < 0) {
    operator delete(v1425[0]);
  }
  if (v1430 < 0) {
    operator delete(v1429);
  }
  if (v1428 < 0) {
    operator delete(v1427[0]);
  }
  if (v1434 < 0) {
    operator delete(v1433[0]);
  }
  if (v1438 < 0) {
    operator delete(v1437);
  }
  if (v1436 < 0) {
    operator delete(v1435[0]);
  }
  if (v1442 < 0) {
    operator delete(v1441[0]);
  }
  if (v1446 < 0) {
    operator delete(v1445);
  }
  if (v1444 < 0) {
    operator delete(v1443[0]);
  }
  if (v1450 < 0) {
    operator delete(v1449[0]);
  }
  if (v1454 < 0) {
    operator delete(v1453);
  }
  if (v1452 < 0) {
    operator delete(v1451[0]);
  }
  if (v1458 < 0) {
    operator delete(v1457[0]);
  }
  if (v1462 < 0) {
    operator delete(v1461);
  }
  if (v1460 < 0) {
    operator delete(v1459[0]);
  }
  if (v1466 < 0) {
    operator delete(v1465[0]);
  }
  if (v1470 < 0) {
    operator delete(v1469);
  }
  if (v1468 < 0) {
    operator delete(v1467[0]);
  }
  if (v1474 < 0) {
    operator delete(v1473[0]);
  }
  if (v1478 < 0) {
    operator delete(v1477);
  }
  if (v1476 < 0) {
    operator delete(v1475[0]);
  }
  if (v1482 < 0) {
    operator delete(v1481[0]);
  }
  if (v1486 < 0) {
    operator delete(v1485);
  }
  if (v1484 < 0) {
    operator delete(v1483[0]);
  }
  if (v1490 < 0) {
    operator delete(v1489[0]);
  }
  if (v1494 < 0) {
    operator delete(v1493);
  }
  if (v1492 < 0) {
    operator delete(v1491[0]);
  }
  if (v1498 < 0) {
    operator delete(v1497[0]);
  }
  if (v1502 < 0) {
    operator delete(v1501);
  }
  if (v1500 < 0) {
    operator delete(v1499[0]);
  }
  if (v1506 < 0) {
    operator delete(v1505[0]);
  }
  if (v1510 < 0) {
    operator delete(v1509);
  }
  if (v1508 < 0) {
    operator delete(v1507[0]);
  }
  if (v1514 < 0) {
    operator delete(v1513[0]);
  }
  if (v1518 < 0) {
    operator delete(v1517);
  }
  if (v1516 < 0) {
    operator delete(v1515[0]);
  }
  if (v1522 < 0) {
    operator delete(v1521[0]);
  }
  if (v1526 < 0) {
    operator delete(v1525);
  }
  if (v1524 < 0) {
    operator delete(v1523[0]);
  }
  if (v1530 < 0) {
    operator delete(v1529[0]);
  }
  if (v1534 < 0) {
    operator delete(v1533);
  }
  if (v1532 < 0) {
    operator delete(v1531[0]);
  }
  if (v1538 < 0) {
    operator delete(v1537[0]);
  }
  if (v1542 < 0) {
    operator delete(v1541);
  }
  if (v1540 < 0) {
    operator delete(v1539[0]);
  }
  if (v1546 < 0) {
    operator delete(v1545[0]);
  }
  if (v1550 < 0) {
    operator delete(v1549);
  }
  if (v1548 < 0) {
    operator delete(v1547[0]);
  }
  if (v1554 < 0) {
    operator delete(v1553[0]);
  }
  if (v1558 < 0) {
    operator delete(v1557);
  }
  if (v1556 < 0) {
    operator delete(v1555[0]);
  }
  if (v1562 < 0) {
    operator delete(v1561[0]);
  }
  if (v1566 < 0) {
    operator delete(v1565);
  }
  if (v1564 < 0) {
    operator delete(v1563[0]);
  }
  if (v1570 < 0) {
    operator delete(v1569[0]);
  }
  if (v1574 < 0) {
    operator delete(v1573);
  }
  if (v1572 < 0) {
    operator delete(v1571[0]);
  }
  if (v1578 < 0) {
    operator delete(v1577[0]);
  }
  if (v1582 < 0) {
    operator delete(v1581);
  }
  if (v1580 < 0) {
    operator delete(v1579[0]);
  }
  if (v1586 < 0) {
    operator delete(v1585[0]);
  }
  if (v1590 < 0) {
    operator delete(v1589);
  }
  if (v1588 < 0) {
    operator delete(v1587[0]);
  }
  if (v1594 < 0) {
    operator delete(v1593[0]);
  }
  if (v1598 < 0) {
    operator delete(v1597);
  }
  if (v1596 < 0) {
    operator delete(v1595[0]);
  }
  if (v1602 < 0) {
    operator delete(v1601[0]);
  }
  if (v1606 < 0) {
    operator delete(v1605);
  }
  if (v1604 < 0) {
    operator delete(v1603[0]);
  }
  if (v1610 < 0) {
    operator delete(v1609[0]);
  }
  if (v1614 < 0) {
    operator delete(v1613);
  }
  if (v1612 < 0) {
    operator delete(v1611[0]);
  }
  if (v1618 < 0) {
    operator delete(v1617[0]);
  }
  if (v1622 < 0) {
    operator delete(v1621);
  }
  if (v1620 < 0) {
    operator delete(v1619[0]);
  }
  if (v1626 < 0) {
    operator delete(v1625[0]);
  }
  if (v1630 < 0) {
    operator delete(v1629);
  }
  if (v1628 < 0) {
    operator delete(v1627[0]);
  }
  if (v1634 < 0) {
    operator delete(v1633[0]);
  }
  if (v1638 < 0) {
    operator delete(v1637);
  }
  if (v1636 < 0) {
    operator delete(v1635[0]);
  }
  if (v1642 < 0) {
    operator delete(v1641[0]);
  }
  if (v1646 < 0) {
    operator delete(v1645);
  }
  if (v1644 < 0) {
    operator delete(v1643[0]);
  }
  if (v1650 < 0) {
    operator delete(v1649[0]);
  }
  if (v1654 < 0) {
    operator delete(v1653);
  }
  if (v1652 < 0) {
    operator delete(v1651[0]);
  }
  if (v1658 < 0) {
    operator delete(v1657[0]);
  }
  if (v1662 < 0) {
    operator delete(v1661);
  }
  if (v1660 < 0) {
    operator delete(v1659[0]);
  }
  if (v1666 < 0) {
    operator delete(v1665[0]);
  }
  if (v1670 < 0) {
    operator delete(v1669);
  }
  if (v1668 < 0) {
    operator delete(v1667[0]);
  }
  if (v1674 < 0) {
    operator delete(v1673[0]);
  }
  if (v1678 < 0) {
    operator delete(v1677);
  }
  if (v1676 < 0) {
    operator delete(v1675[0]);
  }
  if (v1682 < 0) {
    operator delete(v1681[0]);
  }
  if (v1686 < 0) {
    operator delete(v1685);
  }
  if (v1684 < 0) {
    operator delete(v1683[0]);
  }
  if (v1690 < 0) {
    operator delete(v1689[0]);
  }
  if (v1694 < 0) {
    operator delete(v1693);
  }
  if (v1692 < 0) {
    operator delete(v1691[0]);
  }
  if (v1698 < 0) {
    operator delete(v1697[0]);
  }
  if (v1702 < 0) {
    operator delete(v1701);
  }
  if (v1700 < 0) {
    operator delete(v1699[0]);
  }
  if (v1706 < 0) {
    operator delete(v1705[0]);
  }
  if (v1710 < 0) {
    operator delete(v1709);
  }
  if (v1708 < 0) {
    operator delete(v1707[0]);
  }
  if (v1714 < 0) {
    operator delete(v1713[0]);
  }
  if (v1718 < 0) {
    operator delete(v1717);
  }
  if (v1716 < 0) {
    operator delete(v1715[0]);
  }
  if (v1722 < 0) {
    operator delete(v1721[0]);
  }
  if (v1726 < 0) {
    operator delete(v1725);
  }
  if (v1724 < 0) {
    operator delete(v1723[0]);
  }
  if (v1730 < 0) {
    operator delete(v1729[0]);
  }
  if (v1734 < 0) {
    operator delete(v1733);
  }
  if (v1732 < 0) {
    operator delete(v1731[0]);
  }
  if (v1738 < 0) {
    operator delete(v1737[0]);
  }
  if (v1742 < 0) {
    operator delete(v1741);
  }
  if (v1740 < 0) {
    operator delete(v1739[0]);
  }
  if (v1746 < 0) {
    operator delete(v1745[0]);
  }
  if (v1750 < 0) {
    operator delete(v1749);
  }
  if (v1748 < 0) {
    operator delete(v1747[0]);
  }
  if (v1754 < 0) {
    operator delete(v1753[0]);
  }
  if (v1758 < 0) {
    operator delete(v1757);
  }
  if (v1756 < 0) {
    operator delete(v1755[0]);
  }
  if (v1762 < 0) {
    operator delete(v1761[0]);
  }
  if (v1766 < 0) {
    operator delete(v1765);
  }
  if (v1764 < 0) {
    operator delete(v1763[0]);
  }
  if (v1770 < 0) {
    operator delete(v1769[0]);
  }
  if (v1774 < 0) {
    operator delete(v1773);
  }
  if (v1772 < 0) {
    operator delete(v1771[0]);
  }
  if (v1778 < 0) {
    operator delete(v1777[0]);
  }
  if (v1782 < 0) {
    operator delete(v1781);
  }
  if (v1780 < 0) {
    operator delete(v1779[0]);
  }
  if (v1786 < 0) {
    operator delete(v1785[0]);
  }
  if (v1790 < 0) {
    operator delete(v1789);
  }
  if (v1788 < 0) {
    operator delete(v1787[0]);
  }
  if (v1794 < 0) {
    operator delete(v1793[0]);
  }
  if (v1798 < 0) {
    operator delete(v1797);
  }
  if (v1796 < 0) {
    operator delete(v1795[0]);
  }
  if (v1802 < 0) {
    operator delete(v1801[0]);
  }
  if (v1806 < 0) {
    operator delete(v1805);
  }
  if (v1804 < 0) {
    operator delete(v1803[0]);
  }
  if (v1810 < 0) {
    operator delete(v1809[0]);
  }
  if (v1814 < 0) {
    operator delete(v1813);
  }
  if (v1812 < 0) {
    operator delete(v1811[0]);
  }
  if (v1818 < 0) {
    operator delete(v1817[0]);
  }
  if (v1822 < 0) {
    operator delete(v1821);
  }
  if (v1820 < 0) {
    operator delete(v1819[0]);
  }
  if (v1826 < 0) {
    operator delete(v1825[0]);
  }
  if (v1830 < 0) {
    operator delete(v1829);
  }
  if (v1828 < 0) {
    operator delete(v1827[0]);
  }
  if (v1834 < 0) {
    operator delete(v1833[0]);
  }
  if (v1838 < 0) {
    operator delete(v1837);
  }
  if (v1836 < 0) {
    operator delete(v1835[0]);
  }
  if (v1842 < 0) {
    operator delete(v1841[0]);
  }
  if (v1846 < 0) {
    operator delete(v1845);
  }
  if (v1844 < 0) {
    operator delete(v1843[0]);
  }
  if (v1850 < 0) {
    operator delete(v1849[0]);
  }
  if (v1854 < 0) {
    operator delete(v1853);
  }
  if (v1852 < 0) {
    operator delete(v1851[0]);
  }
  if (v1858 < 0) {
    operator delete(v1857[0]);
  }
  if (v1862 < 0) {
    operator delete(v1861);
  }
  if (v1860 < 0) {
    operator delete(v1859[0]);
  }
  if (v1866 < 0) {
    operator delete(v1865[0]);
  }
  if (v1870 < 0) {
    operator delete(v1869);
  }
  if (v1868 < 0) {
    operator delete(v1867[0]);
  }
  if (v1874 < 0) {
    operator delete(v1873[0]);
  }
  if (v1878 < 0) {
    operator delete(v1877);
  }
  if (v1876 < 0) {
    operator delete(v1875[0]);
  }
  if (v1882 < 0) {
    operator delete(v1881[0]);
  }
  if (v1886 < 0) {
    operator delete(v1885);
  }
  if (v1884 < 0) {
    operator delete(v1883[0]);
  }
  if (v1890 < 0) {
    operator delete(v1889[0]);
  }
  if (v1894 < 0) {
    operator delete(v1893);
  }
  if (v1892 < 0) {
    operator delete(v1891[0]);
  }
  if (v1898 < 0) {
    operator delete(v1897[0]);
  }
  if (v1902 < 0) {
    operator delete(v1901);
  }
  if (v1900 < 0) {
    operator delete(v1899[0]);
  }
  if (v1906 < 0) {
    operator delete(v1905[0]);
  }
  if (v1910 < 0) {
    operator delete(v1909);
  }
  if (v1908 < 0) {
    operator delete(v1907[0]);
  }
  if (v1914 < 0) {
    operator delete(v1913[0]);
  }
  if (v1918 < 0) {
    operator delete(v1917);
  }
  if (v1916 < 0) {
    operator delete(v1915[0]);
  }
  if (v1922 < 0) {
    operator delete(v1921[0]);
  }
  if (v1926 < 0) {
    operator delete(v1925);
  }
  if (v1924 < 0) {
    operator delete(v1923[0]);
  }
  if (v1930 < 0) {
    operator delete(v1929[0]);
  }
  if (v1934 < 0) {
    operator delete(v1933);
  }
  if (v1932 < 0) {
    operator delete(v1931[0]);
  }
  if (v1938 < 0) {
    operator delete(v1937[0]);
  }
  if (v1942 < 0) {
    operator delete(v1941);
  }
  if (v1940 < 0) {
    operator delete(v1939[0]);
  }
  if (v1946 < 0) {
    operator delete(v1945[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_10032E6D0, qword_100800898, (void *)&_mh_execute_header);
}

void sub_100338C28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  uint64_t v82 = -19440LL;
  uint64_t v83 = v76;
  do
  {
    uint64_t v83 = sub_10032E680(v83) - 80;
    v82 += 80LL;
  }

  while (v82);
  sub_1001A951C((uint64_t)&a10);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1001A951C((uint64_t)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_1001A951C((uint64_t)&a36);
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_1001A951C((uint64_t)&a49);
  if (a61 < 0) {
    operator delete(a56);
  }
  sub_1001A951C((uint64_t)&a62);
  if (a72 < 0) {
    operator delete(a69);
  }
  sub_1001A951C((uint64_t)&a73);
  if (a75 < 0) {
    operator delete(a74);
  }
  sub_1001A951C((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  sub_1001A951C((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  sub_1001A951C((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_1001A951C((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_1001A951C((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  sub_1001A951C((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  sub_1001A951C((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  sub_1001A951C((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  sub_1001A951C((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  sub_1001A951C((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  sub_1001A951C((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  sub_1001A951C((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_1001A951C((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  sub_1001A951C((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  sub_1001A951C((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  sub_1001A951C((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0) {
    operator delete((void *)STACK[0x950]);
  }
  sub_1001A951C((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  sub_1001A951C((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0) {
    operator delete((void *)STACK[0xA90]);
  }
  sub_1001A951C((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0) {
    operator delete((void *)STACK[0xB30]);
  }
  sub_1001A951C((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0) {
    operator delete((void *)STACK[0xB80]);
  }
  sub_1001A951C((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  sub_1001A951C((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0) {
    operator delete((void *)STACK[0xC70]);
  }
  sub_1001A951C((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  sub_1001A951C((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  sub_1001A951C((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0) {
    operator delete((void *)STACK[0xE00]);
  }
  sub_1001A951C((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0) {
    operator delete((void *)STACK[0xE50]);
  }
  sub_1001A951C((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0) {
    operator delete((void *)STACK[0xF40]);
  }
  sub_1001A951C((uint64_t)&STACK[0xF58]);
  if (v80[79] < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  sub_1001A951C((uint64_t)&STACK[0xFA8]);
  if (v80[159] < 0) {
    operator delete((void *)STACK[0xFE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xFF8]);
  if (v80[239] < 0) {
    operator delete((void *)STACK[0x1030]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1048]);
  if (v80[319] < 0) {
    operator delete((void *)STACK[0x1080]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1098]);
  if (v80[399] < 0) {
    operator delete((void *)STACK[0x10D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x10E8]);
  if (v80[479] < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1138]);
  if (v80[559] < 0) {
    operator delete((void *)STACK[0x1170]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1188]);
  if (v80[639] < 0) {
    operator delete((void *)STACK[0x11C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x11D8]);
  if (v80[719] < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1228]);
  if (v80[799] < 0) {
    operator delete((void *)STACK[0x1260]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1278]);
  if (v80[879] < 0) {
    operator delete((void *)STACK[0x12B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x12C8]);
  if (v80[959] < 0) {
    operator delete((void *)STACK[0x1300]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1318]);
  if (v80[1039] < 0) {
    operator delete((void *)STACK[0x1350]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1368]);
  if (v80[1119] < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x13B8]);
  if (v80[1199] < 0) {
    operator delete((void *)STACK[0x13F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1408]);
  if (v80[1279] < 0) {
    operator delete((void *)STACK[0x1440]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1458]);
  if (v80[1359] < 0) {
    operator delete((void *)STACK[0x1490]);
  }
  sub_1001A951C((uint64_t)&STACK[0x14A8]);
  if (v80[1439] < 0) {
    operator delete((void *)STACK[0x14E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x14F8]);
  if (v80[1519] < 0) {
    operator delete((void *)STACK[0x1530]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1548]);
  if (v80[1599] < 0) {
    operator delete((void *)STACK[0x1580]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1598]);
  if (v80[1679] < 0) {
    operator delete((void *)STACK[0x15D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x15E8]);
  if (v80[1759] < 0) {
    operator delete((void *)STACK[0x1620]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1638]);
  if (v80[1839] < 0) {
    operator delete((void *)STACK[0x1670]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1688]);
  if (v80[1919] < 0) {
    operator delete((void *)STACK[0x16C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x16D8]);
  if (v80[1999] < 0) {
    operator delete((void *)STACK[0x1710]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1728]);
  if (v80[2079] < 0) {
    operator delete((void *)STACK[0x1760]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1778]);
  if (v80[2159] < 0) {
    operator delete((void *)STACK[0x17B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x17C8]);
  if (v80[2239] < 0) {
    operator delete((void *)STACK[0x1800]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1818]);
  if (v80[2319] < 0) {
    operator delete((void *)STACK[0x1850]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1868]);
  if (v80[2399] < 0) {
    operator delete((void *)STACK[0x18A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x18B8]);
  if (v80[2479] < 0) {
    operator delete((void *)STACK[0x18F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1908]);
  if (v80[2559] < 0) {
    operator delete((void *)STACK[0x1940]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1958]);
  if (v80[2639] < 0) {
    operator delete((void *)STACK[0x1990]);
  }
  sub_1001A951C((uint64_t)&STACK[0x19A8]);
  if (v80[2719] < 0) {
    operator delete((void *)STACK[0x19E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x19F8]);
  if (v80[2799] < 0) {
    operator delete((void *)STACK[0x1A30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1A48]);
  if (v80[2879] < 0) {
    operator delete((void *)STACK[0x1A80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1A98]);
  if (v80[2959] < 0) {
    operator delete((void *)STACK[0x1AD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1AE8]);
  if (v80[3039] < 0) {
    operator delete((void *)STACK[0x1B20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1B38]);
  if (v80[3119] < 0) {
    operator delete((void *)STACK[0x1B70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1B88]);
  if (v80[3199] < 0) {
    operator delete((void *)STACK[0x1BC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1BD8]);
  if (v80[3279] < 0) {
    operator delete((void *)STACK[0x1C10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1C28]);
  if (v80[3359] < 0) {
    operator delete((void *)STACK[0x1C60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1C78]);
  if (v80[3439] < 0) {
    operator delete((void *)STACK[0x1CB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1CC8]);
  if (v80[3519] < 0) {
    operator delete((void *)STACK[0x1D00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1D18]);
  if (v80[3599] < 0) {
    operator delete((void *)STACK[0x1D50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1D68]);
  if (v80[3679] < 0) {
    operator delete((void *)STACK[0x1DA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1DB8]);
  if (v80[3759] < 0) {
    operator delete((void *)STACK[0x1DF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1E08]);
  if (v80[3839] < 0) {
    operator delete((void *)STACK[0x1E40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1E58]);
  if (v80[3919] < 0) {
    operator delete((void *)STACK[0x1E90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1EA8]);
  if (v80[3999] < 0) {
    operator delete((void *)STACK[0x1EE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1EF8]);
  if (v80[4079] < 0) {
    operator delete((void *)STACK[0x1F30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1F48]);
  if (v79[79] < 0) {
    operator delete((void *)STACK[0x1F80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1F98]);
  if (v79[159] < 0) {
    operator delete((void *)STACK[0x1FD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1FE8]);
  if (v79[239] < 0) {
    operator delete((void *)STACK[0x2020]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2038]);
  if (v79[319] < 0) {
    operator delete((void *)STACK[0x2070]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2088]);
  if (v79[399] < 0) {
    operator delete((void *)STACK[0x20C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x20D8]);
  if (v79[479] < 0) {
    operator delete((void *)STACK[0x2110]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2128]);
  if (v79[559] < 0) {
    operator delete((void *)STACK[0x2160]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2178]);
  if (v79[639] < 0) {
    operator delete((void *)STACK[0x21B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x21C8]);
  if (v79[719] < 0) {
    operator delete((void *)STACK[0x2200]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2218]);
  if (v79[799] < 0) {
    operator delete((void *)STACK[0x2250]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2268]);
  if (v79[879] < 0) {
    operator delete((void *)STACK[0x22A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x22B8]);
  if (v79[959] < 0) {
    operator delete((void *)STACK[0x22F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2308]);
  if (v79[1039] < 0) {
    operator delete((void *)STACK[0x2340]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2358]);
  if (v79[1119] < 0) {
    operator delete((void *)STACK[0x2390]);
  }
  sub_1001A951C((uint64_t)&STACK[0x23A8]);
  if (v79[1199] < 0) {
    operator delete((void *)STACK[0x23E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x23F8]);
  if (v79[1279] < 0) {
    operator delete((void *)STACK[0x2430]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2448]);
  if (v79[1359] < 0) {
    operator delete((void *)STACK[0x2480]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2498]);
  if (v79[1439] < 0) {
    operator delete((void *)STACK[0x24D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x24E8]);
  if (v79[1519] < 0) {
    operator delete((void *)STACK[0x2520]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2538]);
  if (v79[1599] < 0) {
    operator delete((void *)STACK[0x2570]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2588]);
  if (v79[1679] < 0) {
    operator delete((void *)STACK[0x25C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x25D8]);
  if (v79[1759] < 0) {
    operator delete((void *)STACK[0x2610]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2628]);
  if (v79[1839] < 0) {
    operator delete((void *)STACK[0x2660]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2678]);
  if (v79[1919] < 0) {
    operator delete((void *)STACK[0x26B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x26C8]);
  if (v79[1999] < 0) {
    operator delete((void *)STACK[0x2700]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2718]);
  if (v79[2079] < 0) {
    operator delete((void *)STACK[0x2750]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2768]);
  if (v79[2159] < 0) {
    operator delete((void *)STACK[0x27A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x27B8]);
  if (v79[2239] < 0) {
    operator delete((void *)STACK[0x27F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2808]);
  if (v79[2319] < 0) {
    operator delete((void *)STACK[0x2840]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2858]);
  if (v79[2399] < 0) {
    operator delete((void *)STACK[0x2890]);
  }
  sub_1001A951C((uint64_t)&STACK[0x28A8]);
  if (v79[2479] < 0) {
    operator delete((void *)STACK[0x28E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x28F8]);
  if (v79[2559] < 0) {
    operator delete((void *)STACK[0x2930]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2948]);
  if (v79[2639] < 0) {
    operator delete((void *)STACK[0x2980]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2998]);
  if (v79[2719] < 0) {
    operator delete((void *)STACK[0x29D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x29E8]);
  if (v79[2799] < 0) {
    operator delete((void *)STACK[0x2A20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2A38]);
  if (v79[2879] < 0) {
    operator delete((void *)STACK[0x2A70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2A88]);
  if (v79[2959] < 0) {
    operator delete((void *)STACK[0x2AC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2AD8]);
  if (v79[3039] < 0) {
    operator delete((void *)STACK[0x2B10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2B28]);
  if (v79[3119] < 0) {
    operator delete((void *)STACK[0x2B60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2B78]);
  if (v79[3199] < 0) {
    operator delete((void *)STACK[0x2BB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2BC8]);
  if (v79[3279] < 0) {
    operator delete((void *)STACK[0x2C00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2C18]);
  if (v79[3359] < 0) {
    operator delete((void *)STACK[0x2C50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2C68]);
  if (v79[3439] < 0) {
    operator delete((void *)STACK[0x2CA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2CB8]);
  if (v79[3519] < 0) {
    operator delete((void *)STACK[0x2CF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D08]);
  if (v79[3599] < 0) {
    operator delete((void *)STACK[0x2D40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D58]);
  if (v79[3679] < 0) {
    operator delete((void *)STACK[0x2D90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2DA8]);
  if (v79[3759] < 0) {
    operator delete((void *)STACK[0x2DE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2DF8]);
  if (v79[3839] < 0) {
    operator delete((void *)STACK[0x2E30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2E48]);
  if (v79[3919] < 0) {
    operator delete((void *)STACK[0x2E80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2E98]);
  if (v79[3999] < 0) {
    operator delete((void *)STACK[0x2ED0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2EE8]);
  if (v79[4079] < 0) {
    operator delete((void *)STACK[0x2F20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2F38]);
  if (v78[79] < 0) {
    operator delete((void *)STACK[0x2F70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2F88]);
  if (v78[159] < 0) {
    operator delete((void *)STACK[0x2FC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2FD8]);
  if (v78[239] < 0) {
    operator delete((void *)STACK[0x3010]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3028]);
  if (v78[319] < 0) {
    operator delete((void *)STACK[0x3060]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3078]);
  if (v78[399] < 0) {
    operator delete((void *)STACK[0x30B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x30C8]);
  if (v78[479] < 0) {
    operator delete((void *)STACK[0x3100]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3118]);
  if (v78[559] < 0) {
    operator delete((void *)STACK[0x3150]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3168]);
  if (v78[639] < 0) {
    operator delete((void *)STACK[0x31A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x31B8]);
  if (v78[719] < 0) {
    operator delete((void *)STACK[0x31F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3208]);
  if (v78[799] < 0) {
    operator delete((void *)STACK[0x3240]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3258]);
  if (v78[879] < 0) {
    operator delete((void *)STACK[0x3290]);
  }
  sub_1001A951C((uint64_t)&STACK[0x32A8]);
  if (v78[959] < 0) {
    operator delete((void *)STACK[0x32E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x32F8]);
  if (v78[1039] < 0) {
    operator delete((void *)STACK[0x3330]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3348]);
  if (v78[1119] < 0) {
    operator delete((void *)STACK[0x3380]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3398]);
  if (v78[1199] < 0) {
    operator delete((void *)STACK[0x33D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x33E8]);
  if (v78[1279] < 0) {
    operator delete((void *)STACK[0x3420]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3438]);
  if (v78[1359] < 0) {
    operator delete((void *)STACK[0x3470]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3488]);
  if (v78[1439] < 0) {
    operator delete((void *)STACK[0x34C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x34D8]);
  if (v78[1519] < 0) {
    operator delete((void *)STACK[0x3510]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3528]);
  if (v78[1599] < 0) {
    operator delete((void *)STACK[0x3560]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3578]);
  if (v78[1679] < 0) {
    operator delete((void *)STACK[0x35B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x35C8]);
  if (v78[1759] < 0) {
    operator delete((void *)STACK[0x3600]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3618]);
  if (v78[1839] < 0) {
    operator delete((void *)STACK[0x3650]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3668]);
  if (v78[1919] < 0) {
    operator delete((void *)STACK[0x36A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x36B8]);
  if (v78[1999] < 0) {
    operator delete((void *)STACK[0x36F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3708]);
  if (v78[2079] < 0) {
    operator delete((void *)STACK[0x3740]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3758]);
  if (v78[2159] < 0) {
    operator delete((void *)STACK[0x3790]);
  }
  sub_1001A951C((uint64_t)&STACK[0x37A8]);
  if (v78[2239] < 0) {
    operator delete((void *)STACK[0x37E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x37F8]);
  if (v78[2319] < 0) {
    operator delete((void *)STACK[0x3830]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3848]);
  if (v78[2399] < 0) {
    operator delete((void *)STACK[0x3880]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3898]);
  if (v78[2479] < 0) {
    operator delete((void *)STACK[0x38D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x38E8]);
  if (v78[2559] < 0) {
    operator delete((void *)STACK[0x3920]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3938]);
  if (v78[2639] < 0) {
    operator delete((void *)STACK[0x3970]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3988]);
  if (v78[2719] < 0) {
    operator delete((void *)STACK[0x39C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x39D8]);
  if (v78[2799] < 0) {
    operator delete((void *)STACK[0x3A10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3A28]);
  if (v78[2879] < 0) {
    operator delete((void *)STACK[0x3A60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3A78]);
  if (v78[2959] < 0) {
    operator delete((void *)STACK[0x3AB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3AC8]);
  if (v78[3039] < 0) {
    operator delete((void *)STACK[0x3B00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3B18]);
  if (v78[3119] < 0) {
    operator delete((void *)STACK[0x3B50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3B68]);
  if (v78[3199] < 0) {
    operator delete((void *)STACK[0x3BA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3BB8]);
  if (v78[3279] < 0) {
    operator delete((void *)STACK[0x3BF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C08]);
  if (v78[3359] < 0) {
    operator delete((void *)STACK[0x3C40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C58]);
  if (v78[3439] < 0) {
    operator delete((void *)STACK[0x3C90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3CA8]);
  if (v78[3519] < 0) {
    operator delete((void *)STACK[0x3CE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3CF8]);
  if (v78[3599] < 0) {
    operator delete((void *)STACK[0x3D30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3D48]);
  if (v78[3679] < 0) {
    operator delete((void *)STACK[0x3D80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3D98]);
  if (v78[3759] < 0) {
    operator delete((void *)STACK[0x3DD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3DE8]);
  if (v78[3839] < 0) {
    operator delete((void *)STACK[0x3E20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3E38]);
  if (v78[3919] < 0) {
    operator delete((void *)STACK[0x3E70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3E88]);
  if (v78[3999] < 0) {
    operator delete((void *)STACK[0x3EC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3ED8]);
  if (v78[4079] < 0) {
    operator delete((void *)STACK[0x3F10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3F28]);
  if (v77[79] < 0) {
    operator delete((void *)STACK[0x3F60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3F78]);
  if (v77[159] < 0) {
    operator delete((void *)STACK[0x3FB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3FC8]);
  if (v77[239] < 0) {
    operator delete((void *)STACK[0x4000]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4018]);
  if (v77[319] < 0) {
    operator delete((void *)STACK[0x4050]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4068]);
  if (v77[399] < 0) {
    operator delete((void *)STACK[0x40A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x40B8]);
  if (v77[479] < 0) {
    operator delete((void *)STACK[0x40F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4108]);
  if (v77[559] < 0) {
    operator delete((void *)STACK[0x4140]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4158]);
  if (v77[639] < 0) {
    operator delete((void *)STACK[0x4190]);
  }
  sub_1001A951C((uint64_t)&STACK[0x41A8]);
  if (v77[719] < 0) {
    operator delete((void *)STACK[0x41E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x41F8]);
  if (v77[799] < 0) {
    operator delete((void *)STACK[0x4230]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4248]);
  if (v77[879] < 0) {
    operator delete((void *)STACK[0x4280]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4298]);
  if (v77[959] < 0) {
    operator delete((void *)STACK[0x42D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x42E8]);
  if (v77[1039] < 0) {
    operator delete((void *)STACK[0x4320]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4338]);
  if (v77[1119] < 0) {
    operator delete((void *)STACK[0x4370]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4388]);
  if (v77[1199] < 0) {
    operator delete((void *)STACK[0x43C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x43D8]);
  if (v77[1279] < 0) {
    operator delete((void *)STACK[0x4410]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4428]);
  if (v77[1359] < 0) {
    operator delete((void *)STACK[0x4460]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4478]);
  if (v77[1439] < 0) {
    operator delete((void *)STACK[0x44B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x44C8]);
  if (v77[1519] < 0) {
    operator delete((void *)STACK[0x4500]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4518]);
  if (v77[1599] < 0) {
    operator delete((void *)STACK[0x4550]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4568]);
  if (v77[1679] < 0) {
    operator delete((void *)STACK[0x45A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x45B8]);
  if (v77[1759] < 0) {
    operator delete((void *)STACK[0x45F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4608]);
  if (v77[1839] < 0) {
    operator delete((void *)STACK[0x4640]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4658]);
  if (v77[1919] < 0) {
    operator delete((void *)STACK[0x4690]);
  }
  sub_1001A951C((uint64_t)&STACK[0x46A8]);
  if (v77[1999] < 0) {
    operator delete((void *)STACK[0x46E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x46F8]);
  if (v77[2079] < 0) {
    operator delete((void *)STACK[0x4730]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4748]);
  if (v77[2159] < 0) {
    operator delete((void *)STACK[0x4780]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4798]);
  if (v77[2239] < 0) {
    operator delete((void *)STACK[0x47D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x47E8]);
  if (v77[2319] < 0) {
    operator delete((void *)STACK[0x4820]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4838]);
  if (v77[2399] < 0) {
    operator delete((void *)STACK[0x4870]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4888]);
  if (v77[2479] < 0) {
    operator delete((void *)STACK[0x48C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x48D8]);
  if (v77[2559] < 0) {
    operator delete((void *)STACK[0x4910]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4928]);
  if (v77[2639] < 0) {
    operator delete((void *)STACK[0x4960]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4978]);
  if (v77[2719] < 0) {
    operator delete((void *)STACK[0x49B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x49C8]);
  if (v77[2799] < 0) {
    operator delete((void *)STACK[0x4A00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4A18]);
  if (v77[2879] < 0) {
    operator delete((void *)STACK[0x4A50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4A68]);
  if (v77[2959] < 0) {
    operator delete((void *)STACK[0x4AA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4AB8]);
  if (v77[3039] < 0) {
    operator delete((void *)STACK[0x4AF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B08]);
  if (v77[3119] < 0) {
    operator delete((void *)STACK[0x4B40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B58]);
  if (v77[3199] < 0) {
    operator delete((void *)STACK[0x4B90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4BA8]);
  if (v77[3279] < 0) {
    operator delete((void *)STACK[0x4BE0]);
  }
  _Unwind_Resume(a1);
}

void sub_10033A718( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100338D88LL);
}

void sub_10033A73C()
{
}

void sub_10033A74C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100338DA0LL);
}

void sub_10033A770()
{
}

void sub_10033A780( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100338DB8LL);
}

void sub_10033A7A4()
{
}

void sub_10033A7B4()
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  JUMPOUT(0x100338DD0LL);
}

void sub_10033A7D8()
{
}

void sub_10033A7E8()
{
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  JUMPOUT(0x100338DE8LL);
}

void sub_10033A80C()
{
}

void sub_10033A81C()
{
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  JUMPOUT(0x100338E00LL);
}

void sub_10033A840()
{
}

void sub_10033A850()
{
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  JUMPOUT(0x100338E18LL);
}

void sub_10033A874()
{
}

void sub_10033A884()
{
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  JUMPOUT(0x100338E30LL);
}

void sub_10033A8A8()
{
}

void sub_10033A8B8()
{
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  JUMPOUT(0x100338E48LL);
}

void sub_10033A8DC()
{
}

void sub_10033A8EC()
{
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  JUMPOUT(0x100338E60LL);
}

void sub_10033A910()
{
}

void sub_10033A920()
{
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  JUMPOUT(0x100338E78LL);
}

void sub_10033A944()
{
}

void sub_10033A954()
{
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  JUMPOUT(0x100338E90LL);
}

void sub_10033A978()
{
}

void sub_10033A988()
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  JUMPOUT(0x100338EA8LL);
}

void sub_10033A9AC()
{
}

void sub_10033A9BC()
{
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete((void *)STACK[0x558]);
  }
  JUMPOUT(0x100338EC0LL);
}

void sub_10033A9E0()
{
}

void sub_10033A9F0()
{
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  JUMPOUT(0x100338ED8LL);
}

void sub_10033AA14()
{
}

void sub_10033AA24()
{
  if (SLOBYTE(STACK[0x60F]) < 0) {
    operator delete((void *)STACK[0x5F8]);
  }
  JUMPOUT(0x100338EF0LL);
}

void sub_10033AA48()
{
}

void sub_10033AA58()
{
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  JUMPOUT(0x100338F08LL);
}

void sub_10033AA7C()
{
}

void sub_10033AA8C()
{
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  JUMPOUT(0x100338F20LL);
}

void sub_10033AAB0()
{
}

void sub_10033AAC0()
{
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  JUMPOUT(0x100338F38LL);
}

void sub_10033AAE4()
{
}

void sub_10033AAF4()
{
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  JUMPOUT(0x100338F50LL);
}

void sub_10033AB18()
{
}

void sub_10033AB28()
{
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  JUMPOUT(0x100338F68LL);
}

void sub_10033AB4C()
{
}

void sub_10033AB5C()
{
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  JUMPOUT(0x100338F80LL);
}

void sub_10033AB80()
{
}

void sub_10033AB90()
{
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  JUMPOUT(0x100338F98LL);
}

void sub_10033ABB4()
{
}

void sub_10033ABC4()
{
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  JUMPOUT(0x100338FB0LL);
}

void sub_10033ABE8()
{
}

void sub_10033ABF8()
{
  if (SLOBYTE(STACK[0x8DF]) < 0) {
    operator delete((void *)STACK[0x8C8]);
  }
  JUMPOUT(0x100338FC8LL);
}

void sub_10033AC1C()
{
}

void sub_10033AC2C()
{
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  JUMPOUT(0x100338FE0LL);
}

void sub_10033AC50()
{
}

void sub_10033AC60()
{
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  JUMPOUT(0x100338FF8LL);
}

void sub_10033AC84()
{
}

void sub_10033AC94()
{
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  JUMPOUT(0x100339010LL);
}

void sub_10033ACB8()
{
}

void sub_10033ACC8()
{
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  JUMPOUT(0x100339028LL);
}

void sub_10033ACEC()
{
}

void sub_10033ACFC()
{
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  JUMPOUT(0x100339040LL);
}

void sub_10033AD20()
{
}

void sub_10033AD30()
{
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  JUMPOUT(0x100339058LL);
}

void sub_10033AD54()
{
}

void sub_10033AD64()
{
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  JUMPOUT(0x100339070LL);
}

void sub_10033AD88()
{
}

void sub_10033AD98()
{
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  JUMPOUT(0x100339088LL);
}

void sub_10033ADBC()
{
}

void sub_10033ADCC()
{
  if (SLOBYTE(STACK[0xBAF]) < 0) {
    operator delete((void *)STACK[0xB98]);
  }
  JUMPOUT(0x1003390A0LL);
}

void sub_10033ADF0()
{
}

void sub_10033AE00()
{
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  JUMPOUT(0x1003390B8LL);
}

void sub_10033AE24()
{
}

void sub_10033AE34()
{
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  JUMPOUT(0x1003390D0LL);
}

void sub_10033AE58()
{
}

void sub_10033AE68()
{
  if (SLOBYTE(STACK[0xC9F]) < 0) {
    operator delete((void *)STACK[0xC88]);
  }
  JUMPOUT(0x1003390E8LL);
}

void sub_10033AE8C()
{
}

void sub_10033AE9C()
{
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  JUMPOUT(0x100339100LL);
}

void sub_10033AEC0()
{
}

void sub_10033AED0()
{
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  JUMPOUT(0x100339118LL);
}

void sub_10033AEF4()
{
}

void sub_10033AF04()
{
  if (SLOBYTE(STACK[0xD8F]) < 0) {
    operator delete((void *)STACK[0xD78]);
  }
  JUMPOUT(0x100339130LL);
}

void sub_10033AF28()
{
}

void sub_10033AF38()
{
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  JUMPOUT(0x100339148LL);
}

void sub_10033AF5C()
{
}

void sub_10033AF6C()
{
  if (SLOBYTE(STACK[0xE2F]) < 0) {
    operator delete((void *)STACK[0xE18]);
  }
  JUMPOUT(0x100339160LL);
}

void sub_10033AF90()
{
}

void sub_10033AFA0()
{
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  JUMPOUT(0x100339178LL);
}

void sub_10033AFC4()
{
}

void sub_10033AFD4()
{
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  JUMPOUT(0x100339190LL);
}

void sub_10033AFF8()
{
}

void sub_10033B008()
{
  if (SLOBYTE(STACK[0xF1F]) < 0) {
    operator delete((void *)STACK[0xF08]);
  }
  JUMPOUT(0x1003391A8LL);
}

void sub_10033B02C()
{
}

void sub_10033B03C()
{
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  JUMPOUT(0x1003391C0LL);
}

void sub_10033B060()
{
}

void sub_10033B070()
{
}

void sub_10033B094()
{
}

void sub_10033B0A4()
{
}

void sub_10033B0C8()
{
}

void sub_10033B0D8()
{
}

void sub_10033B0FC()
{
}

void sub_10033B10C()
{
}

void sub_10033B130()
{
}

void sub_10033B140()
{
}

void sub_10033B164()
{
}

void sub_10033B174()
{
}

void sub_10033B198()
{
}

void sub_10033B1A8()
{
}

void sub_10033B1CC()
{
}

void sub_10033B1DC()
{
}

void sub_10033B200()
{
}

void sub_10033B210()
{
}

void sub_10033B234()
{
}

void sub_10033B244()
{
}

void sub_10033B268()
{
}

void sub_10033B278()
{
}

void sub_10033B29C()
{
}

void sub_10033B2AC()
{
}

void sub_10033B2D0()
{
}

void sub_10033B2E0()
{
}

void sub_10033B304()
{
}

void sub_10033B314()
{
}

void sub_10033B338()
{
}

void sub_10033B348()
{
}

void sub_10033B36C()
{
}

void sub_10033B37C()
{
}

void sub_10033B3A0()
{
}

void sub_10033B3B0()
{
}

void sub_10033B3D4()
{
}

void sub_10033B3E4()
{
}

void sub_10033B408()
{
}

void sub_10033B418()
{
}

void sub_10033B43C()
{
}

void sub_10033B44C()
{
}

void sub_10033B470()
{
}

void sub_10033B480()
{
}

void sub_10033B4A4()
{
}

void sub_10033B4B4()
{
}

void sub_10033B4D8()
{
}

void sub_10033B4E8()
{
}

void sub_10033B50C()
{
}

void sub_10033B51C()
{
}

void sub_10033B540()
{
}

void sub_10033B550()
{
}

void sub_10033B574()
{
}

void sub_10033B584()
{
}

void sub_10033B5A8()
{
}

void sub_10033B5B8()
{
}

void sub_10033B5DC()
{
}

void sub_10033B5EC()
{
}

void sub_10033B610()
{
}

void sub_10033B620()
{
}

void sub_10033B644()
{
}

void sub_10033B654()
{
}

void sub_10033B678()
{
}

void sub_10033B688()
{
}

void sub_10033B6AC()
{
}

void sub_10033B6BC()
{
}

void sub_10033B6E0()
{
}

void sub_10033B6F0()
{
}

void sub_10033B714()
{
}

void sub_10033B724()
{
}

void sub_10033B748()
{
}

void sub_10033B758()
{
}

void sub_10033B77C()
{
}

void sub_10033B78C()
{
}

void sub_10033B7B0()
{
}

void sub_10033B7C0()
{
}

void sub_10033B7E4()
{
}

void sub_10033B7F4()
{
}

void sub_10033B818()
{
}

void sub_10033B828()
{
}

void sub_10033B84C()
{
}

void sub_10033B85C()
{
}

void sub_10033B880()
{
}

void sub_10033B890()
{
}

void sub_10033B8B4()
{
}

void sub_10033B8C4()
{
}

void sub_10033B8E8()
{
}

void sub_10033B8F8()
{
}

void sub_10033B91C()
{
}

void sub_10033B92C()
{
}

void sub_10033B950()
{
}

void sub_10033B960()
{
}

void sub_10033B984()
{
}

void sub_10033B994()
{
}

void sub_10033B9B8()
{
}

void sub_10033B9C8()
{
}

void sub_10033B9EC()
{
}

void sub_10033B9FC()
{
}

void sub_10033BA20()
{
}

void sub_10033BA30()
{
}

void sub_10033BA54()
{
}

void sub_10033BA64()
{
}

void sub_10033BA88()
{
}

void sub_10033BA98()
{
}

void sub_10033BABC()
{
}

void sub_10033BACC()
{
}

void sub_10033BAF0()
{
}

void sub_10033BB00()
{
}

void sub_10033BB24()
{
}

void sub_10033BB34()
{
}

void sub_10033BB58()
{
}

void sub_10033BB68()
{
}

void sub_10033BB8C()
{
}

void sub_10033BB9C()
{
}

void sub_10033BBC0()
{
}

void sub_10033BBD0()
{
}

void sub_10033BBF4()
{
}

void sub_10033BC04()
{
}

void sub_10033BC28()
{
}

void sub_10033BC38()
{
}

void sub_10033BC5C()
{
}

void sub_10033BC6C()
{
}

void sub_10033BC90()
{
}

void sub_10033BCA0()
{
}

void sub_10033BCC4()
{
}

void sub_10033BCD4()
{
}

void sub_10033BCF8()
{
}

void sub_10033BD08()
{
}

void sub_10033BD2C()
{
}

void sub_10033BD3C()
{
}

void sub_10033BD60()
{
}

void sub_10033BD70()
{
}

void sub_10033BD94()
{
}

void sub_10033BDA4()
{
}

void sub_10033BDC8()
{
}

void sub_10033BDD8()
{
}

void sub_10033BDFC()
{
}

void sub_10033BE0C()
{
}

void sub_10033BE30()
{
}

void sub_10033BE40()
{
}

void sub_10033BE64()
{
}

void sub_10033BE74()
{
}

void sub_10033BE98()
{
}

void sub_10033BEA8()
{
}

void sub_10033BECC()
{
}

void sub_10033BEDC()
{
}

void sub_10033BF00()
{
}

void sub_10033BF10()
{
}

void sub_10033BF34()
{
}

void sub_10033BF44()
{
}

void sub_10033BF68()
{
}

void sub_10033BF78()
{
}

void sub_10033BF9C()
{
}

void sub_10033BFAC()
{
}

void sub_10033BFD0()
{
}

void sub_10033BFE0()
{
}

void sub_10033C004()
{
}

void sub_10033C014()
{
}

void sub_10033C038()
{
}

void sub_10033C048()
{
}

void sub_10033C06C()
{
}

void sub_10033C07C()
{
}

void sub_10033C0A0()
{
}

void sub_10033C0B0()
{
}

void sub_10033C0D4()
{
}

void sub_10033C0E4()
{
}

void sub_10033C108()
{
}

void sub_10033C118()
{
}

void sub_10033C13C()
{
}

void sub_10033C14C()
{
}

void sub_10033C170()
{
}

void sub_10033C180()
{
}

void sub_10033C1A4()
{
}

void sub_10033C1B4()
{
}

void sub_10033C1D8()
{
}

void sub_10033C1E8()
{
}

void sub_10033C20C()
{
}

void sub_10033C21C()
{
}

void sub_10033C240()
{
}

void sub_10033C250()
{
}

void sub_10033C274()
{
}

void sub_10033C284()
{
}

void sub_10033C2A8()
{
}

void sub_10033C2B8()
{
}

void sub_10033C2DC()
{
}

void sub_10033C2EC()
{
}

void sub_10033C310()
{
}

void sub_10033C320()
{
}

void sub_10033C344()
{
}

void sub_10033C354()
{
}

void sub_10033C378()
{
}

void sub_10033C388()
{
}

void sub_10033C3AC()
{
}

void sub_10033C3BC()
{
}

void sub_10033C3E0()
{
}

void sub_10033C3F0()
{
}

void sub_10033C414()
{
}

void sub_10033C424()
{
}

void sub_10033C448()
{
}

void sub_10033C458()
{
}

void sub_10033C47C()
{
}

void sub_10033C48C()
{
}

void sub_10033C4B0()
{
}

void sub_10033C4C0()
{
}

void sub_10033C4E4()
{
}

void sub_10033C4F4()
{
}

void sub_10033C518()
{
}

void sub_10033C528()
{
}

void sub_10033C54C()
{
}

void sub_10033C55C()
{
}

void sub_10033C580()
{
}

void sub_10033C590()
{
}

void sub_10033C5B4()
{
}

void sub_10033C5C4()
{
}

void sub_10033C5E8()
{
}

void sub_10033C5F8()
{
}

void sub_10033C61C()
{
}

void sub_10033C62C()
{
}

void sub_10033C650()
{
}

void sub_10033C660()
{
}

void sub_10033C684()
{
}

void sub_10033C694()
{
}

void sub_10033C6B8()
{
}

void sub_10033C6C8()
{
}

void sub_10033C6EC()
{
}

void sub_10033C6FC()
{
}

void sub_10033C720()
{
}

void sub_10033C730()
{
}

void sub_10033C754()
{
}

void sub_10033C764()
{
}

void sub_10033C788()
{
}

void sub_10033C798()
{
}

void sub_10033C7BC()
{
}

void sub_10033C7CC()
{
}

void sub_10033C7F0()
{
}

void sub_10033C800()
{
}

void sub_10033C824()
{
}

void sub_10033C834()
{
}

void sub_10033C858()
{
}

void sub_10033C868()
{
}

void sub_10033C88C()
{
}

void sub_10033C89C()
{
}

void sub_10033C8C0()
{
}

void sub_10033C8D0()
{
}

void sub_10033C8F4()
{
}

void sub_10033C904()
{
}

void sub_10033C928()
{
}

void sub_10033C938()
{
}

void sub_10033C95C()
{
}

void sub_10033C96C()
{
}

void sub_10033C990()
{
}

void sub_10033C9A0()
{
}

void sub_10033C9C4()
{
}

void sub_10033C9D4()
{
}

void sub_10033C9F8()
{
}

void sub_10033CA08()
{
}

void sub_10033CA2C()
{
}

void sub_10033CA3C()
{
}

void sub_10033CA60()
{
}

void sub_10033CA70()
{
}

void sub_10033CA94()
{
}

void sub_10033CAA4()
{
}

void sub_10033CAC8()
{
}

void sub_10033CAD8()
{
}

void sub_10033CAFC()
{
}

void sub_10033CB0C()
{
}

void sub_10033CB30()
{
}

void sub_10033CB40()
{
}

void sub_10033CB64()
{
}

void sub_10033CB74()
{
}

void sub_10033CB98()
{
}

void sub_10033CBA8()
{
}

void sub_10033CBCC()
{
}

void sub_10033CBDC()
{
}

void sub_10033CC00()
{
}

void sub_10033CC10()
{
}

void sub_10033CC34()
{
}

void sub_10033CC44()
{
}

void sub_10033CC68()
{
}

void sub_10033CC78()
{
}

void sub_10033CC9C()
{
}

void sub_10033CCAC()
{
}

void sub_10033CCD0()
{
}

void sub_10033CCE0()
{
}

void sub_10033CD04()
{
}

void sub_10033CD14()
{
}

void sub_10033CD38()
{
}

void sub_10033CD48()
{
}

void sub_10033CD6C()
{
}

void sub_10033CD7C()
{
}

void sub_10033CDA0()
{
}

void sub_10033CDB0()
{
}

void sub_10033CDD4()
{
}

void sub_10033CDE4()
{
}

void sub_10033CE08()
{
}

void sub_10033CE18()
{
}

void sub_10033CE3C()
{
}

void sub_10033CE4C()
{
}

void sub_10033CE70()
{
}

void sub_10033CE80()
{
}

void sub_10033CEA4()
{
}

void sub_10033CEB4()
{
}

void sub_10033CED8()
{
}

void sub_10033CEE8()
{
}

void sub_10033CF0C()
{
}

void sub_10033CF1C()
{
}

void sub_10033CF40()
{
}

void sub_10033CF50()
{
}

void sub_10033CF74()
{
}

void sub_10033CF84()
{
}

void sub_10033CFA8()
{
}

void sub_10033CFB8()
{
}

void sub_10033CFDC()
{
}

void sub_10033CFEC()
{
}

void sub_10033D010()
{
}

void sub_10033D020()
{
}

void sub_10033D044()
{
}

void sub_10033D054()
{
}

void sub_10033D078()
{
}

void sub_10033D088()
{
}

void sub_10033D0AC()
{
}

void sub_10033D0BC()
{
}

void sub_10033D0E0()
{
}

void sub_10033D0F0()
{
}

void sub_10033D114()
{
}

void sub_10033D124()
{
}

void sub_10033D148()
{
}

void sub_10033D158()
{
}

void sub_10033D17C()
{
}

void sub_10033D18C()
{
}

void sub_10033D1B0()
{
}

void sub_10033D1C0()
{
}

void sub_10033D1E4()
{
}

void sub_10033D1F4()
{
}

void sub_10033D218()
{
}

void sub_10033D228()
{
}

void sub_10033D24C()
{
}

void sub_10033D25C()
{
}

void sub_10033D280()
{
}

void sub_10033D290()
{
}

void sub_10033D2B4()
{
}

void sub_10033D2C4()
{
}

void sub_10033D2E8()
{
}

void sub_10033D2F8()
{
}

void sub_10033D31C()
{
}

void sub_10033D32C()
{
}

void sub_10033D350()
{
}

void sub_10033D360()
{
}

void sub_10033D384()
{
}

void sub_10033D394()
{
}

void sub_10033D3B8()
{
}

void sub_10033D3C8()
{
}

void sub_10033D3EC()
{
}

void sub_10033D3FC()
{
}

void sub_10033D420()
{
}

void sub_10033D430()
{
}

void sub_10033D454()
{
}

void sub_10033D464()
{
}

void sub_10033D488()
{
}

void sub_10033D498()
{
}

void sub_10033D4BC()
{
}

void sub_10033D4CC()
{
}

void sub_10033D4F0()
{
}

void sub_10033D500()
{
}

void sub_10033D524()
{
}

void sub_10033D534()
{
}

void sub_10033D558()
{
}

void sub_10033D568()
{
}

void sub_10033D58C()
{
}

void sub_10033D59C()
{
}

void sub_10033D5C0()
{
}

void sub_10033D5D0()
{
}

void sub_10033D5F4()
{
}

void sub_10033D604()
{
}

void sub_10033D628()
{
}

void sub_10033D638()
{
}

void sub_10033D65C()
{
}

void sub_10033D66C()
{
}

void sub_10033D690()
{
}

void sub_10033D6A0()
{
}

void sub_10033D6C4()
{
}

void sub_10033D6D4()
{
}

void sub_10033D6F8()
{
}

void sub_10033D708()
{
}

void sub_10033D72C()
{
}

void sub_10033D73C()
{
}

void sub_10033D760()
{
}

void sub_10033D76C()
{
}

void sub_10033D780()
{
}

void sub_10033D7AC()
{
}

uint64_t sub_10033D7B4()
{
  __int16 v1799 = 1;
  sub_10032E7CC((char *)v1802, (__int128 *)v1800, (__int128 *)v1795);
  sub_1000065CC(v1793, "IN");
  sub_1000065CC(v1788, "India");
  sub_1000065CC(&v1790, "IN");
  __int16 v1792 = 1;
  sub_10032E7CC(v1803, (__int128 *)v1793, (__int128 *)v1788);
  sub_1000065CC(v1786, "PE");
  sub_1000065CC(v1781, "Peru");
  sub_1000065CC(&v1783, "PE");
  __int16 v1785 = 2;
  sub_10032E7CC(v1804, (__int128 *)v1786, (__int128 *)v1781);
  sub_1000065CC(v1779, "WS");
  sub_1000065CC(v1774, "Samoa");
  sub_1000065CC(&v1776, "WS");
  __int16 v1778 = 1;
  sub_10032E7CC(v1805, (__int128 *)v1779, (__int128 *)v1774);
  sub_1000065CC(v1772, "NI");
  sub_1000065CC(v1767, "Nicaragua");
  sub_1000065CC(&v1769, "NI");
  __int16 v1771 = 1;
  sub_10032E7CC(v1806, (__int128 *)v1772, (__int128 *)v1767);
  sub_1000065CC(v1765, "BO");
  sub_1000065CC(v1760, "Bolivia");
  sub_1000065CC(&v1762, "BO");
  __int16 v1764 = 1;
  sub_10032E7CC(v1807, (__int128 *)v1765, (__int128 *)v1760);
  sub_1000065CC(v1758, "JM");
  sub_1000065CC(v1753, "Jamaica");
  sub_1000065CC(&v1755, "JM");
  __int16 v1757 = 1;
  sub_10032E7CC(v1808, (__int128 *)v1758, (__int128 *)v1753);
  sub_1000065CC(v1751, "US");
  sub_1000065CC(v1746, "United States");
  sub_1000065CC(&v1748, "US");
  __int16 v1750 = 257;
  sub_10032E7CC(v1809, (__int128 *)v1751, (__int128 *)v1746);
  sub_1000065CC(v1744, "CA");
  sub_1000065CC(v1739, "Canada");
  sub_1000065CC(&v1741, "CA");
  __int16 v1743 = 257;
  sub_10032E7CC(v1810, (__int128 *)v1744, (__int128 *)v1739);
  sub_1000065CC(v1737, "CO");
  sub_1000065CC(v1732, "Colombia");
  sub_1000065CC(&v1734, "CO");
  __int16 v1736 = 258;
  sub_10032E7CC(v1811, (__int128 *)v1737, (__int128 *)v1732);
  sub_1000065CC(v1730, "PR");
  sub_1000065CC(v1725, "Puerto Rico");
  sub_1000065CC(&v1727, "PR");
  __int16 v1729 = 257;
  sub_10032E7CC(v1812, (__int128 *)v1730, (__int128 *)v1725);
  sub_1000065CC(v1723, "CR");
  sub_1000065CC(v1718, "Costa Rica");
  sub_1000065CC(&v1720, "CR");
  __int16 v1722 = 258;
  sub_10032E7CC(v1813, (__int128 *)v1723, (__int128 *)v1718);
  sub_1000065CC(v1716, "EC");
  sub_1000065CC(v1711, "Ecuador");
  sub_1000065CC(&v1713, "EC");
  __int16 v1715 = 257;
  sub_10032E7CC(v1814, (__int128 *)v1716, (__int128 *)v1711);
  sub_1000065CC(v1709, "AR");
  sub_1000065CC(v1704, "Argentina");
  sub_1000065CC(&v1706, "AR");
  __int16 v1708 = 257;
  sub_10032E7CC(v1815, (__int128 *)v1709, (__int128 *)v1704);
  sub_1000065CC(v1702, "VI");
  sub_1000065CC(v1697, "USVI");
  sub_1000065CC(&v1699, "VI");
  __int16 v1701 = 257;
  sub_10032E7CC(v1816, (__int128 *)v1702, (__int128 *)v1697);
  sub_1000065CC(v1695, "GT");
  sub_1000065CC(v1690, "Guatemala");
  sub_1000065CC(&v1692, "GT");
  __int16 v1694 = 257;
  sub_10032E7CC(v1817, (__int128 *)v1695, (__int128 *)v1690);
  sub_1000065CC(v1688, "UM");
  sub_1000065CC(v1683, "US Minor Outlying Islands");
  sub_1000065CC(&v1685, "UM");
  __int16 v1687 = 257;
  sub_10032E7CC(v1818, (__int128 *)v1688, (__int128 *)v1683);
  sub_1000065CC(v1681, "CL");
  sub_1000065CC(v1676, "Chile");
  sub_1000065CC(&v1678, "CL");
  __int16 v1680 = 257;
  sub_10032E7CC(v1819, (__int128 *)v1681, (__int128 *)v1676);
  sub_1000065CC(v1674, "PA");
  sub_1000065CC(v1669, "Panama");
  sub_1000065CC(&v1671, "PA");
  __int16 v1673 = 257;
  sub_10032E7CC(v1820, (__int128 *)v1674, (__int128 *)v1669);
  sub_1000065CC(v1667, "VE");
  sub_1000065CC(v1662, "Venezuela");
  sub_1000065CC(&v1664, "VE");
  __int16 v1666 = 257;
  sub_10032E7CC(v1821, (__int128 *)v1667, (__int128 *)v1662);
  sub_1000065CC(v1660, "UY");
  sub_1000065CC(v1655, "Uruguay");
  sub_1000065CC(&v1657, "UY");
  __int16 v1659 = 257;
  sub_10032E7CC(v1822, (__int128 *)v1660, (__int128 *)v1655);
  sub_1000065CC(v1653, "DO");
  sub_1000065CC(v1648, "Dominican Rep");
  sub_1000065CC(&v1650, "DO");
  __int16 v1652 = 258;
  sub_10032E7CC(v1823, (__int128 *)v1653, (__int128 *)v1648);
  sub_1000065CC(v1646, "GU");
  sub_1000065CC(v1641, "Guam");
  sub_1000065CC(&v1643, "GU");
  __int16 v1645 = 257;
  sub_10032E7CC(v1824, (__int128 *)v1646, (__int128 *)v1641);
  sub_1000065CC(v1639, "HN");
  sub_1000065CC(v1634, "Honduras");
  sub_1000065CC(&v1636, "HN");
  __int16 v1638 = 257;
  sub_10032E7CC(v1825, (__int128 *)v1639, (__int128 *)v1634);
  sub_1000065CC(v1632, "AI");
  sub_1000065CC(v1627, "Anguilla");
  sub_1000065CC(&v1629, "AI");
  __int16 v1631 = 257;
  sub_10032E7CC(v1826, (__int128 *)v1632, (__int128 *)v1627);
  sub_1000065CC(v1625, "AG");
  sub_1000065CC(v1620, "Antigua/ Barbuda");
  sub_1000065CC(&v1622, "AG");
  __int16 v1624 = 257;
  sub_10032E7CC(v1827, (__int128 *)v1625, (__int128 *)v1620);
  sub_1000065CC(v1618, "AW");
  sub_1000065CC(v1613, "Aruba");
  sub_1000065CC(&v1615, "AW");
  __int16 v1617 = 257;
  sub_10032E7CC(v1828, (__int128 *)v1618, (__int128 *)v1613);
  sub_1000065CC(v1611, "BS");
  sub_1000065CC(v1606, "Bahamas");
  sub_1000065CC(&v1608, "BS");
  __int16 v1610 = 257;
  sub_10032E7CC(v1829, (__int128 *)v1611, (__int128 *)v1606);
  sub_1000065CC(v1604, "BB");
  sub_1000065CC(v1599, "Barbados");
  sub_1000065CC(&v1601, "BB");
  __int16 v1603 = 257;
  sub_10032E7CC(v1830, (__int128 *)v1604, (__int128 *)v1599);
  sub_1000065CC(v1597, "BM");
  sub_1000065CC(v1592, "Bermuda");
  sub_1000065CC(&v1594, "BM");
  __int16 v1596 = 257;
  sub_10032E7CC(v1831, (__int128 *)v1597, (__int128 *)v1592);
  sub_1000065CC(v1590, "VG");
  sub_1000065CC(v1585, "British Virgin Islands");
  sub_1000065CC(&v1587, "VG");
  __int16 v1589 = 257;
  sub_10032E7CC(v1832, (__int128 *)v1590, (__int128 *)v1585);
  sub_1000065CC(v1583, "KY");
  sub_1000065CC(v1578, "Cayman Islands");
  sub_1000065CC(&v1580, "KY");
  __int16 v1582 = 257;
  sub_10032E7CC(v1833, (__int128 *)v1583, (__int128 *)v1578);
  sub_1000065CC(v1576, "DM");
  sub_1000065CC(v1571, "Dominica");
  sub_1000065CC(&v1573, "DM");
  __int16 v1575 = 257;
  sub_10032E7CC(v1834, (__int128 *)v1576, (__int128 *)v1571);
  sub_1000065CC(v1569, "GD");
  sub_1000065CC(v1564, "Grenada");
  sub_1000065CC(&v1566, "GD");
  __int16 v1568 = 257;
  sub_10032E7CC(v1835, (__int128 *)v1569, (__int128 *)v1564);
  sub_1000065CC(v1562, "MS");
  sub_1000065CC(v1557, "Montserrat");
  sub_1000065CC(&v1559, "MS");
  __int16 v1561 = 257;
  sub_10032E7CC(v1836, (__int128 *)v1562, (__int128 *)v1557);
  sub_1000065CC(v1555, "KN");
  sub_1000065CC(v1550, "St Kitts/ Nevis");
  sub_1000065CC(&v1552, "KN");
  __int16 v1554 = 257;
  sub_10032E7CC(v1837, (__int128 *)v1555, (__int128 *)v1550);
  sub_1000065CC(v1548, "LC");
  sub_1000065CC(v1543, "St Lucia");
  sub_1000065CC(&v1545, "LC");
  __int16 v1547 = 257;
  sub_10032E7CC(v1838, (__int128 *)v1548, (__int128 *)v1543);
  sub_1000065CC(v1541, "VC");
  sub_1000065CC(v1536, "St Vincent/ Grenadines");
  sub_1000065CC(&v1538, "VC");
  __int16 v1540 = 257;
  sub_10032E7CC(v1839, (__int128 *)v1541, (__int128 *)v1536);
  sub_1000065CC(v1534, "TC");
  sub_1000065CC(v1529, "Turks & Caicos");
  sub_1000065CC(&v1531, "TC");
  __int16 v1533 = 257;
  sub_10032E7CC(v1840, (__int128 *)v1534, (__int128 *)v1529);
  sub_1000065CC(v1527, "PY");
  sub_1000065CC(v1522, "Paraguay");
  sub_1000065CC(&v1524, "PY");
  __int16 v1526 = 258;
  sub_10032E7CC(v1841, (__int128 *)v1527, (__int128 *)v1522);
  sub_1000065CC(v1520, "TT");
  sub_1000065CC(v1515, "Trinidad & Tobago");
  sub_1000065CC(&v1517, "TT");
  __int16 v1519 = 257;
  sub_10032E7CC(v1842, (__int128 *)v1520, (__int128 *)v1515);
  sub_1000065CC(v1513, "CW");
  sub_1000065CC(v1508, "CURACAO");
  sub_1000065CC(&v1510, "CW");
  __int16 v1512 = 257;
  sub_10032E7CC(v1843, (__int128 *)v1513, (__int128 *)v1508);
  sub_1000065CC(v1506, "BZ");
  sub_1000065CC(v1501, "BELIZE");
  sub_1000065CC(&v1503, "BZ");
  __int16 v1505 = 257;
  sub_10032E7CC(v1844, (__int128 *)v1506, (__int128 *)v1501);
  sub_1000065CC(v1499, "HT");
  sub_1000065CC(v1494, "HAITI");
  sub_1000065CC(&v1496, "HT");
  __int16 v1498 = 257;
  sub_10032E7CC(v1845, (__int128 *)v1499, (__int128 *)v1494);
  sub_1000065CC(v1492, "SX");
  sub_1000065CC(v1487, "Sint Maarten");
  sub_1000065CC(&v1489, "SX");
  __int16 v1491 = 257;
  sub_10032E7CC(v1846, (__int128 *)v1492, (__int128 *)v1487);
  sub_1000065CC(v1485, "SR");
  sub_1000065CC(v1480, "SURINAME");
  sub_1000065CC(&v1482, "SR");
  __int16 v1484 = 257;
  sub_10032E7CC(v1847, (__int128 *)v1485, (__int128 *)v1480);
  sub_1000065CC(v1478, "BQ");
  sub_1000065CC(v1473, "BES");
  sub_1000065CC(&v1475, "BQ");
  __int16 v1477 = 257;
  sub_10032E7CC(v1848, (__int128 *)v1478, (__int128 *)v1473);
  sub_1000065CC(v1471, "GY");
  sub_1000065CC(v1466, "Guyana");
  sub_1000065CC(&v1468, "GY");
  __int16 v1470 = 257;
  sub_10032E7CC(v1849, (__int128 *)v1471, (__int128 *)v1466);
  sub_1000065CC(v1464, "AS");
  sub_1000065CC(v1459, "American Samoa ");
  sub_1000065CC(&v1461, "AS");
  __int16 v1463 = 257;
  sub_10032E7CC(v1850, (__int128 *)v1464, (__int128 *)v1459);
  sub_1000065CC(v1457, "MF");
  sub_1000065CC(v1452, "Saint Martin (North of Island)");
  sub_1000065CC(&v1454, "MF");
  __int16 v1456 = 259;
  sub_10032E7CC(v1851, (__int128 *)v1457, (__int128 *)v1452);
  sub_1000065CC(v1450, "MP");
  sub_1000065CC(v1445, "Northern Mariana Island");
  sub_1000065CC(&v1447, "MP");
  __int16 v1449 = 257;
  sub_10032E7CC(v1852, (__int128 *)v1450, (__int128 *)v1445);
  sub_1000065CC(v1443, "FM");
  sub_1000065CC(v1438, "MICRONESIA, FEDERATED STATES OF");
  sub_1000065CC(&v1440, "FM");
  __int16 v1442 = 257;
  sub_10032E7CC(v1853, (__int128 *)v1443, (__int128 *)v1438);
  sub_1000065CC(v1436, "MH");
  sub_1000065CC(v1431, "MARSHALL ISLANDS");
  sub_1000065CC(&v1433, "MH");
  __int16 v1435 = 257;
  sub_10032E7CC(v1854, (__int128 *)v1436, (__int128 *)v1431);
  sub_1000065CC(v1429, "PW");
  sub_1000065CC(v1424, "Palau");
  sub_1000065CC(&v1426, "PW");
  __int16 v1428 = 257;
  sub_10032E7CC(v1855, (__int128 *)v1429, (__int128 *)v1424);
  sub_1000065CC(v1422, "AT");
  sub_1000065CC(v1417, "Austria");
  sub_1000065CC(&v1419, "AT");
  __int16 v1421 = 1283;
  sub_10032E7CC(v1856, (__int128 *)v1422, (__int128 *)v1417);
  sub_1000065CC(v1415, "BE");
  sub_1000065CC(v1410, "Belgium");
  sub_1000065CC(&v1412, "BE");
  __int16 v1414 = 1283;
  sub_10032E7CC(v1857, (__int128 *)v1415, (__int128 *)v1410);
  sub_1000065CC(v1408, "BG");
  sub_1000065CC(v1403, "Bulgaria");
  sub_1000065CC(&v1405, "BG");
  __int16 v1407 = 1283;
  sub_10032E7CC(v1858, (__int128 *)v1408, (__int128 *)v1403);
  sub_1000065CC(v1401, "CY");
  sub_1000065CC(v1396, "Cyprus");
  sub_1000065CC(&v1398, "CY");
  __int16 v1400 = 1283;
  sub_10032E7CC(v1859, (__int128 *)v1401, (__int128 *)v1396);
  sub_1000065CC(v1394, "CZ");
  sub_1000065CC(v1389, "Czech Republic");
  sub_1000065CC(&v1391, "CZ");
  __int16 v1393 = 1283;
  sub_10032E7CC(v1860, (__int128 *)v1394, (__int128 *)v1389);
  sub_1000065CC(v1387, "DK");
  sub_1000065CC(v1382, "Denmark");
  sub_1000065CC(&v1384, "DK");
  __int16 v1386 = 1283;
  sub_10032E7CC(v1861, (__int128 *)v1387, (__int128 *)v1382);
  sub_1000065CC(v1380, "EE");
  sub_1000065CC(v1375, "Estonia");
  sub_1000065CC(&v1377, "EE");
  __int16 v1379 = 1283;
  sub_10032E7CC(v1862, (__int128 *)v1380, (__int128 *)v1375);
  sub_1000065CC(v1373, "FR");
  sub_1000065CC(v1368, "France");
  sub_1000065CC(&v1370, "FR");
  __int16 v1372 = 1283;
  sub_10032E7CC(v1863, (__int128 *)v1373, (__int128 *)v1368);
  sub_1000065CC(v1366, "FI");
  sub_1000065CC(v1361, "Finland");
  sub_1000065CC(&v1363, "FI");
  __int16 v1365 = 1283;
  sub_10032E7CC(v1864, (__int128 *)v1366, (__int128 *)v1361);
  sub_1000065CC(v1359, "DE");
  sub_1000065CC(v1354, "Germany");
  sub_1000065CC(&v1356, "DE");
  __int16 v1358 = 1283;
  sub_10032E7CC(v1865, (__int128 *)v1359, (__int128 *)v1354);
  sub_1000065CC(v1352, "GR");
  sub_1000065CC(v1347, "Greece");
  sub_1000065CC(&v1349, "GR");
  __int16 v1351 = 1283;
  sub_10032E7CC(v1866, (__int128 *)v1352, (__int128 *)v1347);
  sub_1000065CC(v1345, "HU");
  sub_1000065CC(v1340, "Hungary");
  sub_1000065CC(&v1342, "HU");
  __int16 v1344 = 1283;
  sub_10032E7CC(v1867, (__int128 *)v1345, (__int128 *)v1340);
  sub_1000065CC(v1338, "IS");
  sub_1000065CC(v1333, "Iceland");
  sub_1000065CC(&v1335, "IS");
  __int16 v1337 = 1283;
  sub_10032E7CC(v1868, (__int128 *)v1338, (__int128 *)v1333);
  sub_1000065CC(v1331, "IT");
  sub_1000065CC(v1326, "Italy");
  sub_1000065CC(&v1328, "IT");
  __int16 v1330 = 1283;
  sub_10032E7CC(v1869, (__int128 *)v1331, (__int128 *)v1326);
  sub_1000065CC(v1324, "IE");
  sub_1000065CC(v1319, "Ireland");
  sub_1000065CC(&v1321, "IE");
  __int16 v1323 = 1283;
  sub_10032E7CC(v1870, (__int128 *)v1324, (__int128 *)v1319);
  sub_1000065CC(v1317, "LV");
  sub_1000065CC(v1312, "Latvia");
  sub_1000065CC(&v1314, "LV");
  __int16 v1316 = 1283;
  sub_10032E7CC(v1871, (__int128 *)v1317, (__int128 *)v1312);
  sub_1000065CC(v1310, "LI");
  sub_1000065CC(v1305, "Liechtenstein");
  sub_1000065CC(&v1307, "LI");
  __int16 v1309 = 1283;
  sub_10032E7CC(v1872, (__int128 *)v1310, (__int128 *)v1305);
  sub_1000065CC(v1303, "LT");
  sub_1000065CC(v1298, "Lithuania");
  sub_1000065CC(&v1300, "LT");
  __int16 v1302 = 1283;
  sub_10032E7CC(v1873, (__int128 *)v1303, (__int128 *)v1298);
  sub_1000065CC(v1296, "LU");
  sub_1000065CC(v1291, "Luxembourg");
  sub_1000065CC(&v1293, "LU");
  __int16 v1295 = 1283;
  sub_10032E7CC(v1874, (__int128 *)v1296, (__int128 *)v1291);
  sub_1000065CC(v1289, "MT");
  sub_1000065CC(v1284, "Malta");
  sub_1000065CC(&v1286, "MT");
  __int16 v1288 = 1283;
  sub_10032E7CC(v1875, (__int128 *)v1289, (__int128 *)v1284);
  sub_1000065CC(v1282, "NL");
  sub_1000065CC(v1277, "Netherlands");
  sub_1000065CC(&v1279, "NL");
  __int16 v1281 = 1283;
  sub_10032E7CC(v1876, (__int128 *)v1282, (__int128 *)v1277);
  sub_1000065CC(v1275, "NO");
  sub_1000065CC(v1270, "Norway");
  sub_1000065CC(&v1272, "NO");
  __int16 v1274 = 1283;
  sub_10032E7CC(v1877, (__int128 *)v1275, (__int128 *)v1270);
  sub_1000065CC(v1268, "PL");
  sub_1000065CC(v1263, "Poland");
  sub_1000065CC(&v1265, "PL");
  __int16 v1267 = 1283;
  sub_10032E7CC(v1878, (__int128 *)v1268, (__int128 *)v1263);
  sub_1000065CC(v1261, "PT");
  sub_1000065CC(v1256, "Portugal");
  sub_1000065CC(&v1258, "PT");
  __int16 v1260 = 1283;
  sub_10032E7CC(v1879, (__int128 *)v1261, (__int128 *)v1256);
  sub_1000065CC(v1254, "RO");
  sub_1000065CC(v1249, "Romania");
  sub_1000065CC(&v1251, "RO");
  __int16 v1253 = 1283;
  sub_10032E7CC(v1880, (__int128 *)v1254, (__int128 *)v1249);
  sub_1000065CC(v1247, "SK");
  sub_1000065CC(v1242, "Slovakia");
  sub_1000065CC(&v1244, "SK");
  __int16 v1246 = 1283;
  sub_10032E7CC(v1881, (__int128 *)v1247, (__int128 *)v1242);
  sub_1000065CC(v1240, "SI");
  sub_1000065CC(v1235, "Slovenia");
  sub_1000065CC(&v1237, "SI");
  __int16 v1239 = 1283;
  sub_10032E7CC(v1882, (__int128 *)v1240, (__int128 *)v1235);
  sub_1000065CC(v1233, "ES");
  sub_1000065CC(v1228, "Spain");
  sub_1000065CC(&v1230, "ES");
  __int16 v1232 = 1283;
  sub_10032E7CC(v1883, (__int128 *)v1233, (__int128 *)v1228);
  sub_1000065CC(v1226, "SE");
  sub_1000065CC(v1221, "Sweden");
  sub_1000065CC(&v1223, "SE");
  __int16 v1225 = 1283;
  sub_10032E7CC(v1884, (__int128 *)v1226, (__int128 *)v1221);
  sub_1000065CC(v1219, "CH");
  sub_1000065CC(v1214, "Switzerland");
  sub_1000065CC(&v1216, "CH");
  __int16 v1218 = 1283;
  sub_10032E7CC(v1885, (__int128 *)v1219, (__int128 *)v1214);
  sub_1000065CC(v1212, "GB");
  sub_1000065CC(v1207, "UK");
  sub_1000065CC(&v1209, "GB");
  __int16 v1211 = 1283;
  sub_10032E7CC(v1886, (__int128 *)v1212, (__int128 *)v1207);
  sub_1000065CC(v1205, "ZA");
  sub_1000065CC(v1200, "South Africa");
  sub_1000065CC(&v1202, "ZA");
  __int16 v1204 = 1283;
  sub_10032E7CC(v1887, (__int128 *)v1205, (__int128 *)v1200);
  sub_1000065CC(v1198, "TR");
  sub_1000065CC(v1193, "Turkey");
  sub_1000065CC(&v1195, "TR");
  __int16 v1197 = 1283;
  sub_10032E7CC(v1888, (__int128 *)v1198, (__int128 *)v1193);
  sub_1000065CC(v1191, "AE");
  sub_1000065CC(v1186, "UAE");
  sub_1000065CC(&v1188, "AE");
  __int16 v1190 = 1283;
  sub_10032E7CC(v1889, (__int128 *)v1191, (__int128 *)v1186);
  sub_1000065CC(v1184, "SA");
  sub_1000065CC(v1179, "Saudi Arabia");
  sub_1000065CC(&v1181, "SA");
  __int16 v1183 = 1283;
  sub_10032E7CC(v1890, (__int128 *)v1184, (__int128 *)v1179);
  sub_1000065CC(v1177, "HR");
  sub_1000065CC(v1172, "Croatia");
  sub_1000065CC(&v1174, "HR");
  __int16 v1176 = 1283;
  sub_10032E7CC(v1891, (__int128 *)v1177, (__int128 *)v1172);
  sub_1000065CC(v1170, "RS");
  sub_1000065CC(v1165, "Serbia");
  sub_1000065CC(&v1167, "RS");
  __int16 v1169 = 1283;
  sub_10032E7CC(v1892, (__int128 *)v1170, (__int128 *)v1165);
  sub_1000065CC(v1163, "HK");
  sub_1000065CC(v1158, "Hong Kong ");
  sub_1000065CC(&v1160, "HK");
  __int16 v1162 = 514;
  sub_10032E7CC(v1893, (__int128 *)v1163, (__int128 *)v1158);
  sub_1000065CC(v1156, "SG");
  sub_1000065CC(v1151, "Singapore");
  sub_1000065CC(&v1153, "SG");
  __int16 v1155 = 514;
  sub_10032E7CC(v1894, (__int128 *)v1156, (__int128 *)v1151);
  sub_1000065CC(v1149, "VN");
  sub_1000065CC(v1144, "Vietnam");
  sub_1000065CC(&v1146, "VN");
  __int16 v1148 = 514;
  sub_10032E7CC(v1895, (__int128 *)v1149, (__int128 *)v1144);
  sub_1000065CC(v1142, "BN");
  sub_1000065CC(v1137, "Brunei");
  sub_1000065CC(&v1139, "BN");
  __int16 v1141 = 514;
  sub_10032E7CC(v1896, (__int128 *)v1142, (__int128 *)v1137);
  sub_1000065CC(v1135, "KH");
  sub_1000065CC(v1130, "Cambodia");
  sub_1000065CC(&v1132, "KH");
  __int16 v1134 = 514;
  sub_10032E7CC(v1897, (__int128 *)v1135, (__int128 *)v1130);
  sub_1000065CC(v1128, "LA");
  sub_1000065CC(v1123, "Laos");
  sub_1000065CC(&v1125, "LA");
  __int16 v1127 = 514;
  sub_10032E7CC(v1898, (__int128 *)v1128, (__int128 *)v1123);
  sub_1000065CC(v1121, "MM");
  sub_1000065CC(v1116, "Myanmar");
  sub_1000065CC(&v1118, "MM");
  __int16 v1120 = 514;
  sub_10032E7CC(v1899, (__int128 *)v1121, (__int128 *)v1116);
  sub_1000065CC(v1114, "CN");
  sub_1000065CC(v1109, "China ");
  sub_1000065CC(&v1111, "CN");
  __int16 v1113 = 514;
  sub_10032E7CC(v1900, (__int128 *)v1114, (__int128 *)v1109);
  sub_1000065CC(v1107, "PK");
  sub_1000065CC(v1102, "Pakistan");
  sub_1000065CC(&v1104, "PK");
  __int16 v1106 = 514;
  sub_10032E7CC(v1901, (__int128 *)v1107, (__int128 *)v1102);
  sub_1000065CC(v1100, "BD");
  sub_1000065CC(v1095, "Bangladesh");
  sub_1000065CC(&v1097, "BD");
  __int16 v1099 = 514;
  sub_10032E7CC(v1902, (__int128 *)v1100, (__int128 *)v1095);
  sub_1000065CC(v1093, "LK");
  sub_1000065CC(v1088, "Sri Lanka");
  sub_1000065CC(&v1090, "LK");
  __int16 v1092 = 514;
  sub_10032E7CC(v1903, (__int128 *)v1093, (__int128 *)v1088);
  sub_1000065CC(v1086, "MV");
  sub_1000065CC(v1081, "Maldives");
  sub_1000065CC(&v1083, "MV");
  __int16 v1085 = 514;
  sub_10032E7CC(v1904, (__int128 *)v1086, (__int128 *)v1081);
  sub_1000065CC(v1079, "AF");
  sub_1000065CC(v1074, "Afghanistan");
  sub_1000065CC(&v1076, "AF");
  __int16 v1078 = 514;
  sub_10032E7CC(v1905, (__int128 *)v1079, (__int128 *)v1074);
  sub_1000065CC(v1072, "MN");
  sub_1000065CC(v1067, "Mongolia");
  sub_1000065CC(&v1069, "MN");
  __int16 v1071 = 514;
  sub_10032E7CC(v1906, (__int128 *)v1072, (__int128 *)v1067);
  sub_1000065CC(v1065, "BT");
  sub_1000065CC(v1060, "Bhutan");
  sub_1000065CC(&v1062, "BT");
  __int16 v1064 = 514;
  sub_10032E7CC(v1907, (__int128 *)v1065, (__int128 *)v1060);
  sub_1000065CC(v1058, "MO");
  sub_1000065CC(v1053, "Macau");
  sub_1000065CC(&v1055, "MO");
  __int16 v1057 = 514;
  sub_10032E7CC(v1908, (__int128 *)v1058, (__int128 *)v1053);
  sub_1000065CC(v1051, "PH");
  sub_1000065CC(v1046, "Philippines");
  sub_1000065CC(&v1048, "PH");
  __int16 v1050 = 514;
  sub_10032E7CC(v1909, (__int128 *)v1051, (__int128 *)v1046);
  sub_1000065CC(v1044, "NC");
  sub_1000065CC(v1039, "New Caledonia");
  sub_1000065CC(&v1041, "NC");
  __int16 v1043 = 1283;
  sub_10032E7CC(v1910, (__int128 *)v1044, (__int128 *)v1039);
  sub_1000065CC(v1037, "PG");
  sub_1000065CC(v1032, "Papua New Guinea");
  sub_1000065CC(&v1034, "PG");
  __int16 v1036 = 514;
  sub_10032E7CC(v1911, (__int128 *)v1037, (__int128 *)v1032);
  sub_1000065CC(v1030, "VU");
  sub_1000065CC(v1025, "Vanuatu");
  sub_1000065CC(&v1027, "VU");
  __int16 v1029 = 514;
  sub_10032E7CC(v1912, (__int128 *)v1030, (__int128 *)v1025);
  sub_1000065CC(v1023, "EG");
  sub_1000065CC(v1018, "Egypt");
  sub_1000065CC(&v1020, "EG");
  __int16 v1022 = 1283;
  sub_10032E7CC(v1913, (__int128 *)v1023, (__int128 *)v1018);
  sub_1000065CC(v1016, "KW");
  sub_1000065CC(v1011, "Kuwait");
  sub_1000065CC(&v1013, "KW");
  __int16 v1015 = 1283;
  sub_10032E7CC(v1914, (__int128 *)v1016, (__int128 *)v1011);
  sub_1000065CC(v1009, "MA");
  sub_1000065CC(v1004, "Morocco");
  sub_1000065CC(&v1006, "MA");
  __int16 v1008 = 1283;
  sub_10032E7CC(v1915, (__int128 *)v1009, (__int128 *)v1004);
  sub_1000065CC(v1002, "UA");
  sub_1000065CC(v997, "Ukraine");
  sub_1000065CC(&v999, "UA");
  __int16 v1001 = 1283;
  sub_10032E7CC(v1916, (__int128 *)v1002, (__int128 *)v997);
  sub_1000065CC(v995, "BY");
  sub_1000065CC(v990, "Belarus");
  sub_1000065CC(&v992, "BY");
  __int16 v994 = 514;
  sub_10032E7CC(v1917, (__int128 *)v995, (__int128 *)v990);
  sub_1000065CC(v988, "AZ");
  sub_1000065CC(v983, "Azerbaijan");
  sub_1000065CC(&v985, "AZ");
  __int16 v987 = 1283;
  sub_10032E7CC(v1918, (__int128 *)v988, (__int128 *)v983);
  sub_1000065CC(v981, "KZ");
  sub_1000065CC(v976, "Kazakhstan");
  sub_1000065CC(&v978, "KZ");
  __int16 v980 = 514;
  sub_10032E7CC(v1919, (__int128 *)v981, (__int128 *)v976);
  sub_1000065CC(v974, "ID");
  sub_1000065CC(v969, "Indonesia");
  sub_1000065CC(&v971, "ID");
  __int16 v973 = 514;
  sub_10032E7CC(v1920, (__int128 *)v974, (__int128 *)v969);
  sub_1000065CC(v967, "AL");
  sub_1000065CC(v962, "Albania");
  sub_1000065CC(&v964, "AL");
  __int16 v966 = 1283;
  sub_10032E7CC(v1921, (__int128 *)v967, (__int128 *)v962);
  sub_1000065CC(v960, "DZ");
  sub_1000065CC(v955, "Algeria");
  sub_1000065CC(&v957, "DZ");
  __int16 v959 = 1283;
  sub_10032E7CC(v1922, (__int128 *)v960, (__int128 *)v955);
  sub_1000065CC(v953, "AO");
  sub_1000065CC(v948, "Angola");
  sub_1000065CC(&v950, "AO");
  __int16 v952 = 1283;
  sub_10032E7CC(v1923, (__int128 *)v953, (__int128 *)v948);
  sub_1000065CC(v946, "AM");
  sub_1000065CC(v941, "Armenia");
  sub_1000065CC(&v943, "AM");
  __int16 v945 = 514;
  sub_10032E7CC(v1924, (__int128 *)v946, (__int128 *)v941);
  sub_1000065CC(v939, "BJ");
  sub_1000065CC(v934, "Benin");
  sub_1000065CC(&v936, "BJ");
  __int16 v938 = 1283;
  sub_10032E7CC(v1925, (__int128 *)v939, (__int128 *)v934);
  sub_1000065CC(v932, "BA");
  sub_1000065CC(v927, "Bosnia & Hertzgovena");
  sub_1000065CC(&v929, "BA");
  __int16 v931 = 1283;
  sub_10032E7CC(v1926, (__int128 *)v932, (__int128 *)v927);
  sub_1000065CC(v925, "BI");
  sub_1000065CC(v920, "Burundi");
  sub_1000065CC(&v922, "BI");
  __int16 v924 = 1283;
  sub_10032E7CC(v1927, (__int128 *)v925, (__int128 *)v920);
  sub_1000065CC(v918, "BF");
  sub_1000065CC(v913, "Burkina-Faso");
  sub_1000065CC(&v915, "BF");
  __int16 v917 = 1283;
  sub_10032E7CC(v1928, (__int128 *)v918, (__int128 *)v913);
  sub_1000065CC(v911, "CF");
  sub_1000065CC(v906, "Central Africa Republic");
  sub_1000065CC(&v908, "CF");
  __int16 v910 = 1283;
  sub_10032E7CC(v1929, (__int128 *)v911, (__int128 *)v906);
  sub_1000065CC(v904, "TD");
  sub_1000065CC(v899, "Chad");
  sub_1000065CC(&v901, "TD");
  __int16 v903 = 1283;
  sub_10032E7CC(v1930, (__int128 *)v904, (__int128 *)v899);
  sub_1000065CC(v897, "CD");
  sub_1000065CC(v892, "Congo-Brazzaville");
  sub_1000065CC(&v894, "CD");
  __int16 v896 = 1283;
  sub_10032E7CC(v1931, (__int128 *)v897, (__int128 *)v892);
  sub_1000065CC(v890, "CG");
  sub_1000065CC(v885, "Congo, Democratic Rebuplic of");
  sub_1000065CC(&v887, "CG");
  __int16 v889 = 1283;
  sub_10032E7CC(v1932, (__int128 *)v890, (__int128 *)v885);
  sub_1000065CC(v883, "GQ");
  sub_1000065CC(v878, "Equatorial Guinea");
  sub_1000065CC(&v880, "GQ");
  __int16 v882 = 1283;
  sub_10032E7CC(v1933, (__int128 *)v883, (__int128 *)v878);
  sub_1000065CC(v876, "ET");
  sub_1000065CC(v871, "Ethiopia");
  sub_1000065CC(&v873, "ET");
  __int16 v875 = 1283;
  sub_10032E7CC(v1934, (__int128 *)v876, (__int128 *)v871);
  sub_1000065CC(v869, "PF");
  sub_1000065CC(v864, "French Polynesia, Tahiti");
  sub_1000065CC(&v866, "PF");
  __int16 v868 = 1283;
  sub_10032E7CC(v1935, (__int128 *)v869, (__int128 *)v864);
  sub_1000065CC(v862, "GA");
  sub_1000065CC(v857, "Gabon");
  sub_1000065CC(&v859, "GA");
  __int16 v861 = 1283;
  sub_10032E7CC(v1936, (__int128 *)v862, (__int128 *)v857);
  sub_1000065CC(v855, "GM");
  sub_1000065CC(v850, "Gambia");
  sub_1000065CC(&v852, "GM");
  __int16 v854 = 1283;
  sub_10032E7CC(v1937, (__int128 *)v855, (__int128 *)v850);
  sub_1000065CC(v848, "GH");
  sub_1000065CC(v843, "Ghana");
  sub_1000065CC(&v845, "GH");
  __int16 v847 = 1283;
  sub_10032E7CC(v1938, (__int128 *)v848, (__int128 *)v843);
  sub_1000065CC(v841, "GI");
  sub_1000065CC(v836, "Gibraltar");
  sub_1000065CC(&v838, "GI");
  __int16 v840 = 1283;
  sub_10032E7CC(v1939, (__int128 *)v841, (__int128 *)v836);
  sub_1000065CC(v834, "GL");
  sub_1000065CC(v829, "Greenland");
  sub_1000065CC(&v831, "GL");
  __int16 v833 = 1283;
  sub_10032E7CC(v1940, (__int128 *)v834, (__int128 *)v829);
  sub_1000065CC(v827, "GP");
  sub_1000065CC(v822, "Guadeloupe");
  sub_1000065CC(&v824, "GP");
  __int16 v826 = 1283;
  sub_10032E7CC(v1941, (__int128 *)v827, (__int128 *)v822);
  sub_1000065CC(v820, "GW");
  sub_1000065CC(v815, "Guinea - Bissau");
  sub_1000065CC(&v817, "GW");
  __int16 v819 = 1283;
  sub_10032E7CC(v1942, (__int128 *)v820, (__int128 *)v815);
  sub_1000065CC(v813, "GN");
  sub_1000065CC(v808, "Guinea-Conakry");
  sub_1000065CC(&v810, "GN");
  __int16 v812 = 1283;
  sub_10032E7CC(v1943, (__int128 *)v813, (__int128 *)v808);
  sub_1000065CC(v806, "IQ");
  sub_1000065CC(v801, "Iraq");
  sub_1000065CC(&v803, "IQ");
  __int16 v805 = 1283;
  sub_10032E7CC(v1944, (__int128 *)v806, (__int128 *)v801);
  sub_1000065CC(v799, "CI");
  sub_1000065CC(v794, "Ivory Coast");
  sub_1000065CC(&v796, "CI");
  __int16 v798 = 1283;
  sub_10032E7CC(v1945, (__int128 *)v799, (__int128 *)v794);
  sub_1000065CC(v792, "KE");
  sub_1000065CC(v787, "Kenya");
  sub_1000065CC(&v789, "KE");
  __int16 v791 = 1283;
  sub_10032E7CC(v1946, (__int128 *)v792, (__int128 *)v787);
  sub_1000065CC(v785, "KG");
  sub_1000065CC(v780, "Kyrgyzstan");
  sub_1000065CC(&v782, "KG");
  __int16 v784 = 514;
  sub_10032E7CC(v1947, (__int128 *)v785, (__int128 *)v780);
  sub_1000065CC(v778, "LB");
  sub_1000065CC(v773, "Lebanon");
  sub_1000065CC(&v775, "LB");
  __int16 v777 = 1283;
  sub_10032E7CC(v1948, (__int128 *)v778, (__int128 *)v773);
  sub_1000065CC(v771, "LS");
  sub_1000065CC(v766, "Lesotho");
  sub_1000065CC(&v768, "LS");
  __int16 v770 = 1283;
  sub_10032E7CC(v1949, (__int128 *)v771, (__int128 *)v766);
  sub_1000065CC(v764, "LR");
  sub_1000065CC(v759, "Liberia");
  sub_1000065CC(&v761, "LR");
  __int16 v763 = 1283;
  sub_10032E7CC(v1950, (__int128 *)v764, (__int128 *)v759);
  sub_1000065CC(v757, "LY");
  sub_1000065CC(v752, "Libya");
  sub_1000065CC(&v754, "LY");
  __int16 v756 = 1283;
  sub_10032E7CC(v1951, (__int128 *)v757, (__int128 *)v752);
  sub_1000065CC(v750, "MK");
  sub_1000065CC(v745, "Macedonia");
  sub_1000065CC(&v747, "MK");
  __int16 v749 = 1283;
  sub_10032E7CC(v1952, (__int128 *)v750, (__int128 *)v745);
  sub_1000065CC(v743, "MG");
  sub_1000065CC(v738, "Madagascar");
  sub_1000065CC(&v740, "MG");
  __int16 v742 = 1283;
  sub_10032E7CC(v1953, (__int128 *)v743, (__int128 *)v738);
  sub_1000065CC(v736, "ML");
  sub_1000065CC(v731, "Mali");
  sub_1000065CC(&v733, "ML");
  __int16 v735 = 1283;
  sub_10032E7CC(v1954, (__int128 *)v736, (__int128 *)v731);
  sub_1000065CC(v729, "MQ");
  sub_1000065CC(v724, "Martinique");
  sub_1000065CC(&v726, "MQ");
  __int16 v728 = 1283;
  sub_10032E7CC(v1955, (__int128 *)v729, (__int128 *)v724);
  sub_1000065CC(v722, "MU");
  sub_1000065CC(v717, "Mauritius");
  sub_1000065CC(&v719, "MU");
  __int16 v721 = 1283;
  sub_10032E7CC(v1956, (__int128 *)v722, (__int128 *)v717);
  sub_1000065CC(v715, "MD");
  sub_1000065CC(v710, "Moldova");
  sub_1000065CC(&v712, "MD");
  __int16 v714 = 1283;
  sub_10032E7CC(v1957, (__int128 *)v715, (__int128 *)v710);
  sub_1000065CC(v708, "MC");
  sub_1000065CC(v703, "Monaco");
  sub_1000065CC(&v705, "MC");
  __int16 v707 = 1283;
  sub_10032E7CC(v1958, (__int128 *)v708, (__int128 *)v703);
  sub_1000065CC(v701, "ME");
  sub_1000065CC(v696, "Montenegro");
  sub_1000065CC(&v698, "ME");
  __int16 v700 = 1283;
  sub_10032E7CC(v1959, (__int128 *)v701, (__int128 *)v696);
  sub_1000065CC(v694, "MZ");
  sub_1000065CC(v689, "Mozambique");
  sub_1000065CC(&v691, "MZ");
  __int16 v693 = 1283;
  sub_10032E7CC(v1960, (__int128 *)v694, (__int128 *)v689);
  sub_1000065CC(v687, "NA");
  sub_1000065CC(v682, "Namibia");
  sub_1000065CC(&v684, "NA");
  __int16 v686 = 1283;
  sub_10032E7CC(v1961, (__int128 *)v687, (__int128 *)v682);
  sub_1000065CC(v680, "NE");
  sub_1000065CC(v675, "Niger");
  sub_1000065CC(&v677, "NE");
  __int16 v679 = 1283;
  sub_10032E7CC(v1962, (__int128 *)v680, (__int128 *)v675);
  sub_1000065CC(v673, "OM");
  sub_1000065CC(v668, "Oman");
  sub_1000065CC(&v670, "OM");
  __int16 v672 = 1283;
  sub_10032E7CC(v1963, (__int128 *)v673, (__int128 *)v668);
  sub_1000065CC(v666, "RE");
  sub_1000065CC(v661, "Reunion");
  sub_1000065CC(&v663, "RE");
  __int16 v665 = 1283;
  sub_10032E7CC(v1964, (__int128 *)v666, (__int128 *)v661);
  sub_1000065CC(v659, "SN");
  sub_1000065CC(v654, "Senegal");
  sub_1000065CC(&v656, "SN");
  __int16 v658 = 1283;
  sub_10032E7CC(v1965, (__int128 *)v659, (__int128 *)v654);
  sub_1000065CC(v652, "TZ");
  sub_1000065CC(v647, "Tanzania");
  sub_1000065CC(&v649, "TZ");
  __int16 v651 = 1283;
  sub_10032E7CC(v1966, (__int128 *)v652, (__int128 *)v647);
  sub_1000065CC(v645, "TG");
  sub_1000065CC(v640, "Togo");
  sub_1000065CC(&v642, "TG");
  __int16 v644 = 1283;
  sub_10032E7CC(v1967, (__int128 *)v645, (__int128 *)v640);
  sub_1000065CC(v638, "UG");
  sub_1000065CC(v633, "Uganda");
  sub_1000065CC(&v635, "UG");
  __int16 v637 = 1283;
  sub_10032E7CC(v1968, (__int128 *)v638, (__int128 *)v633);
  sub_1000065CC(v631, "UZ");
  sub_1000065CC(v626, "Uzbekistan");
  sub_1000065CC(&v628, "UZ");
  __int16 v630 = 1283;
  sub_10032E7CC(v1969, (__int128 *)v631, (__int128 *)v626);
  sub_1000065CC(v624, "ZM");
  sub_1000065CC(v619, "Zambia");
  sub_1000065CC(&v621, "ZM");
  __int16 v623 = 1283;
  sub_10032E7CC(v1970, (__int128 *)v624, (__int128 *)v619);
  sub_1000065CC(v617, "ZW");
  sub_1000065CC(v612, "Zimbabwe");
  sub_1000065CC(&v614, "ZW");
  __int16 v616 = 1283;
  sub_10032E7CC(v1971, (__int128 *)v617, (__int128 *)v612);
  sub_1000065CC(v610, "GE");
  sub_1000065CC(v605, "Georgia");
  sub_1000065CC(&v607, "GE");
  __int16 v609 = 1283;
  sub_10032E7CC(v1972, (__int128 *)v610, (__int128 *)v605);
  sub_1000065CC(v603, "MW");
  sub_1000065CC(v598, "Malawi");
  sub_1000065CC(&v600, "MW");
  __int16 v602 = 1283;
  sub_10032E7CC(v1973, (__int128 *)v603, (__int128 *)v598);
  sub_1000065CC(v596, "RW");
  sub_1000065CC(v591, "Rwanda");
  sub_1000065CC(&v593, "RW");
  __int16 v595 = 1283;
  sub_10032E7CC(v1974, (__int128 *)v596, (__int128 *)v591);
  sub_1000065CC(v589, "SC");
  sub_1000065CC(v584, "Seychelles");
  sub_1000065CC(&v586, "SC");
  __int16 v588 = 1283;
  sub_10032E7CC(v1975, (__int128 *)v589, (__int128 *)v584);
  sub_1000065CC(v582, "SZ");
  sub_1000065CC(v577, "Swaziland");
  sub_1000065CC(&v579, "SZ");
  __int16 v581 = 1283;
  sub_10032E7CC(v1976, (__int128 *)v582, (__int128 *)v577);
  sub_1000065CC(v575, "QA");
  sub_1000065CC(v570, "Qatar");
  sub_1000065CC(&v572, "QA");
  __int16 v574 = 1283;
  sub_10032E7CC(v1977, (__int128 *)v575, (__int128 *)v570);
  sub_1000065CC(v568, "JO");
  sub_1000065CC(v563, "Jordan");
  sub_1000065CC(&v565, "JO");
  __int16 v567 = 1283;
  sub_10032E7CC(v1978, (__int128 *)v568, (__int128 *)v563);
  sub_1000065CC(v561, "BH");
  sub_1000065CC(v556, "Bahrain");
  sub_1000065CC(&v558, "BH");
  __int16 v560 = 1283;
  sub_10032E7CC(v1979, (__int128 *)v561, (__int128 *)v556);
  sub_1000065CC(v554, "AD");
  sub_1000065CC(v549, "Andorra");
  sub_1000065CC(&v551, "AD");
  __int16 v553 = 1283;
  sub_10032E7CC(v1980, (__int128 *)v554, (__int128 *)v549);
  sub_1000065CC(v547, "CM");
  sub_1000065CC(v542, "CAMEROON");
  sub_1000065CC(&v544, "CM");
  __int16 v546 = 1283;
  sub_10032E7CC(v1981, (__int128 *)v547, (__int128 *)v542);
  sub_1000065CC(v540, "CV");
  sub_1000065CC(v535, "CAPE VERDE");
  sub_1000065CC(&v537, "CV");
  __int16 v539 = 1283;
  sub_10032E7CC(v1982, (__int128 *)v540, (__int128 *)v535);
  sub_1000065CC(v533, "GF");
  sub_1000065CC(v528, "French Guinea");
  sub_1000065CC(&v530, "GF");
  __int16 v532 = 1283;
  sub_10032E7CC(v1983, (__int128 *)v533, (__int128 *)v528);
  sub_1000065CC(v526, "GG");
  sub_1000065CC(v521, "Guernsey");
  sub_1000065CC(&v523, "GG");
  __int16 v525 = 1283;
  sub_10032E7CC(v1984, (__int128 *)v526, (__int128 *)v521);
  sub_1000065CC(v519, "IO");
  sub_1000065CC(v514, "BRITISH INDIAN OCEAN TERRITORY");
  sub_1000065CC(&v516, "IO");
  __int16 v518 = 1283;
  sub_10032E7CC(v1985, (__int128 *)v519, (__int128 *)v514);
  sub_1000065CC(v512, "MR");
  sub_1000065CC(v507, "MAURITANIA");
  sub_1000065CC(&v509, "MR");
  __int16 v511 = 1283;
  sub_10032E7CC(v1986, (__int128 *)v512, (__int128 *)v507);
  sub_1000065CC(v505, "NG");
  sub_1000065CC(v500, "NIGERIA");
  sub_1000065CC(&v502, "NG");
  __int16 v504 = 1283;
  sub_10032E7CC(v1987, (__int128 *)v505, (__int128 *)v500);
  sub_1000065CC(v498, "NR");
  sub_1000065CC(v493, "NAURU");
  sub_1000065CC(&v495, "NR");
  __int16 v497 = 514;
  sub_10032E7CC(v1988, (__int128 *)v498, (__int128 *)v493);
  sub_1000065CC(v491, "PN");
  sub_1000065CC(v486, "PITCAIRN");
  sub_1000065CC(&v488, "PN");
  __int16 v490 = 514;
  sub_10032E7CC(v1989, (__int128 *)v491, (__int128 *)v486);
  sub_1000065CC(v484, "SB");
  sub_1000065CC(v479, "SOLOMON ISLANDS");
  sub_1000065CC(&v481, "SB");
  __int16 v483 = 514;
  sub_10032E7CC(v1990, (__int128 *)v484, (__int128 *)v479);
  sub_1000065CC(v477, "SL");
  sub_1000065CC(v472, "SIERRA LEONE");
  sub_1000065CC(&v474, "SL");
  __int16 v476 = 1283;
  sub_10032E7CC(v1991, (__int128 *)v477, (__int128 *)v472);
  sub_1000065CC(v470, "ST");
  sub_1000065CC(v465, "SAO TOME AND PRINCIPE");
  sub_1000065CC(&v467, "ST");
  __int16 v469 = 1283;
  sub_10032E7CC(v1992, (__int128 *)v470, (__int128 *)v465);
  sub_1000065CC(v463, "TF");
  sub_1000065CC(v458, "FRENCH SOUTHERN TERRITORIES");
  sub_1000065CC(&v460, "TF");
  __int16 v462 = 0;
  sub_10032E7CC(v1993, (__int128 *)v463, (__int128 *)v458);
  sub_1000065CC(v456, "TM");
  sub_1000065CC(v451, "TURKMENISTAN");
  sub_1000065CC(&v453, "TM");
  __int16 v455 = 1283;
  sub_10032E7CC(v1994, (__int128 *)v456, (__int128 *)v451);
  sub_1000065CC(v449, "VA");
  sub_1000065CC(v444, "HOLY SEE (VATICAN CITY STATE)");
  sub_1000065CC(&v446, "VA");
  __int16 v448 = 1283;
  sub_10032E7CC(v1995, (__int128 *)v449, (__int128 *)v444);
  sub_1000065CC(v442, "WF");
  sub_1000065CC(v437, "WALLIS AND FUTUNA");
  sub_1000065CC(&v439, "WF");
  __int16 v441 = 1283;
  sub_10032E7CC(v1996, (__int128 *)v442, (__int128 *)v437);
  sub_1000065CC(v435, "YT");
  sub_1000065CC(v430, "MAYOTTE");
  sub_1000065CC(&v432, "YT");
  __int16 v434 = 1283;
  sub_10032E7CC(v1997, (__int128 *)v435, (__int128 *)v430);
  sub_1000065CC(v428, "ER");
  sub_1000065CC(v423, "ERITREA");
  sub_1000065CC(&v425, "ER");
  __int16 v427 = 1283;
  sub_10032E7CC(v1998, (__int128 *)v428, (__int128 *)v423);
  sub_1000065CC(v421, "FO");
  sub_1000065CC(v416, "FAROE ISLANDS");
  sub_1000065CC(&v418, "FO");
  __int16 v420 = 1283;
  sub_10032E7CC(v1999, (__int128 *)v421, (__int128 *)v416);
  sub_1000065CC(v414, "SO");
  sub_1000065CC(v409, "SOMALIA");
  sub_1000065CC(&v411, "SO");
  __int16 v413 = 1283;
  sub_10032E7CC(v2000, (__int128 *)v414, (__int128 *)v409);
  sub_1000065CC(v407, "KM");
  sub_1000065CC(v402, "Comoros");
  sub_1000065CC(&v404, "KM");
  __int16 v406 = 1283;
  sub_10032E7CC(v2001, (__int128 *)v407, (__int128 *)v402);
  sub_1000065CC(v400, "DJ");
  sub_1000065CC(v395, "Djibouti");
  sub_1000065CC(&v397, "DJ");
  __int16 v399 = 1283;
  sub_10032E7CC(v2002, (__int128 *)v400, (__int128 *)v395);
  sub_1000065CC(v393, "FK");
  sub_1000065CC(v388, "Falklands");
  sub_1000065CC(&v390, "FK");
  __int16 v392 = 1283;
  sub_10032E7CC(v2003, (__int128 *)v393, (__int128 *)v388);
  sub_1000065CC(v386, "SM");
  sub_1000065CC(v381, "San Marino");
  sub_1000065CC(&v383, "SM");
  __int16 v385 = 1283;
  sub_10032E7CC(v2004, (__int128 *)v386, (__int128 *)v381);
  sub_1000065CC(v379, "SH");
  sub_1000065CC(v374, "Saint Helena Ascension");
  sub_1000065CC(&v376, "SH");
  __int16 v378 = 1283;
  sub_10032E7CC(v2005, (__int128 *)v379, (__int128 *)v374);
  sub_1000065CC(v372, "BW");
  sub_1000065CC(v367, "Botswana");
  sub_1000065CC(&v369, "BW");
  __int16 v371 = 1283;
  sub_10032E7CC(v2006, (__int128 *)v372, (__int128 *)v367);
  sub_1000065CC(v365, "PS");
  sub_1000065CC(v360, "Palestine");
  sub_1000065CC(&v362, "PS");
  __int16 v364 = 1283;
  sub_10032E7CC(v2007, (__int128 *)v365, (__int128 *)v360);
  sub_1000065CC(v358, "TJ");
  sub_1000065CC(v353, "Tajikistan");
  sub_1000065CC(&v355, "TJ");
  __int16 v357 = 1283;
  sub_10032E7CC(v2008, (__int128 *)v358, (__int128 *)v353);
  sub_1000065CC(v351, "PM");
  sub_1000065CC(v346, "Saint Pierre et Miquelon");
  sub_1000065CC(&v348, "PM");
  __int16 v350 = 1283;
  sub_10032E7CC(v2009, (__int128 *)v351, (__int128 *)v346);
  sub_1000065CC(v344, "IL");
  sub_1000065CC(v339, "Israel");
  sub_1000065CC(&v341, "IL");
  __int16 v343 = 1283;
  sub_10032E7CC(v2010, (__int128 *)v344, (__int128 *)v339);
  sub_1000065CC(v337, "XK");
  sub_1000065CC(v332, "Kosovo");
  sub_1000065CC(&v334, "XK");
  __int16 v336 = 1283;
  sub_10032E7CC(v2011, (__int128 *)v337, (__int128 *)v332);
  sub_1000065CC(v330, "TN");
  sub_1000065CC(v325, "Tunisia");
  sub_1000065CC(&v327, "TN");
  __int16 v329 = 1283;
  sub_10032E7CC(v2012, (__int128 *)v330, (__int128 *)v325);
  sub_1000065CC(v323, "TO");
  sub_1000065CC(v318, "TONGA");
  sub_1000065CC(&v320, "TO");
  __int16 v322 = 514;
  sub_10032E7CC(v2013, (__int128 *)v323, (__int128 *)v318);
  sub_1000065CC(v316, "YE");
  sub_1000065CC(v311, "YEMEN");
  sub_1000065CC(&v313, "YE");
  __int16 v315 = 1283;
  sub_10032E7CC(v2014, (__int128 *)v316, (__int128 *)v311);
  sub_1000065CC(v309, "TL");
  sub_1000065CC(v304, "East Timor ");
  sub_1000065CC(&v306, "TL");
  __int16 v308 = 514;
  sub_10032E7CC(v2015, (__int128 *)v309, (__int128 *)v304);
  sub_1000065CC(v302, "A0");
  sub_1000065CC(v297, "Abkhazia");
  sub_1000065CC(&v299, "A0");
  __int16 v301 = 1283;
  sub_10032E7CC(v2016, (__int128 *)v302, (__int128 *)v297);
  sub_1000065CC(v295, "A2");
  sub_1000065CC(v290, "French West Indies");
  sub_1000065CC(&v292, "A2");
  __int16 v294 = 515;
  sub_10032E7CC(v2017, (__int128 *)v295, (__int128 *)v290);
  sub_1000065CC(v288, "BV");
  sub_1000065CC(v283, "Bouvet Island [Norway]");
  sub_1000065CC(&v285, "BV");
  __int16 v287 = 1283;
  sub_10032E7CC(v2018, (__int128 *)v288, (__int128 *)v283);
  sub_1000065CC(v281, "IM");
  sub_1000065CC(v276, "Isle of Man [United Kingdom]");
  sub_1000065CC(&v278, "IM");
  __int16 v280 = 1283;
  sub_10032E7CC(v2019, (__int128 *)v281, (__int128 *)v276);
  sub_1000065CC(v274, "JE");
  sub_1000065CC(v269, "Jersey [United Kingdom]");
  sub_1000065CC(&v271, "JE");
  __int16 v273 = 1283;
  sub_10032E7CC(v2020, (__int128 *)v274, (__int128 *)v269);
  sub_1000065CC(v267, "KI");
  sub_1000065CC(v262, "Kiribati");
  sub_1000065CC(&v264, "KI");
  __int16 v266 = 514;
  sub_10032E7CC(v2021, (__int128 *)v267, (__int128 *)v262);
  sub_1000065CC(v260, "GS");
  sub_1000065CC(v255, "South Georgia and the South Sandwich Islands [United Kingdom]");
  sub_1000065CC(&v257, "GS");
  __int16 v259 = 1;
  sub_10032E7CC(v2022, (__int128 *)v260, (__int128 *)v255);
  sub_1000065CC(v253, "SJ");
  sub_1000065CC(v248, "Svalbard and Jan Mayen [Norway]");
  sub_1000065CC(&v250, "SJ");
  __int16 v252 = 1283;
  sub_10032E7CC(v2023, (__int128 *)v253, (__int128 *)v248);
  sub_1000065CC(v246, "EH");
  sub_1000065CC(v241, "Western Sahara");
  sub_1000065CC(&v243, "EH");
  __int16 v245 = 1283;
  sub_10032E7CC(v2024, (__int128 *)v246, (__int128 *)v241);
  sub_1000065CC(v239, "A4");
  sub_1000065CC(v234, "Netherlands Antilles [Netherlands]");
  sub_1000065CC(&v236, "A4");
  __int16 v238 = 1;
  sub_10032E7CC(v2025, (__int128 *)v239, (__int128 *)v234);
  sub_1000065CC(v232, "A5");
  sub_1000065CC(v227, "Tahiti");
  sub_1000065CC(&v229, "A5");
  __int16 v231 = 1283;
  sub_10032E7CC(v2026, (__int128 *)v232, (__int128 *)v227);
  sub_1000065CC(v225, "KR");
  sub_1000065CC(v220, "South Korea");
  sub_1000065CC(&v222, "KR");
  __int16 v224 = 769;
  sub_10032E7CC(v2027, (__int128 *)v225, (__int128 *)v220);
  sub_1000065CC(v218, "MX");
  sub_1000065CC(v213, "Mexico");
  sub_1000065CC(&v215, "MX");
  __int16 v217 = 1026;
  sub_10032E7CC(v2028, (__int128 *)v218, (__int128 *)v213);
  sub_1000065CC(v211, "BR");
  sub_1000065CC(v206, "Brazil");
  sub_1000065CC(&v208, "BR");
  __int16 v210 = 1026;
  sub_10032E7CC(v2029, (__int128 *)v211, (__int128 *)v206);
  sub_1000065CC(v204, "AU");
  sub_1000065CC(v199, "Australia");
  sub_1000065CC(&v201, "AU");
  __int16 v203 = 1026;
  sub_10032E7CC(v2030, (__int128 *)v204, (__int128 *)v199);
  sub_1000065CC(v197, "NZ");
  sub_1000065CC(v192, "New Zealand");
  sub_1000065CC(&v194, "NZ");
  __int16 v196 = 1026;
  sub_10032E7CC(v2031, (__int128 *)v197, (__int128 *)v192);
  sub_1000065CC(v190, "MY");
  sub_1000065CC(v185, "Malaysia");
  sub_1000065CC(&v187, "MY");
  __int16 v189 = 1026;
  sub_10032E7CC(v2032, (__int128 *)v190, (__int128 *)v185);
  sub_1000065CC(v183, "TH");
  sub_1000065CC(v178, "Thailand");
  sub_1000065CC(&v180, "TH");
  __int16 v182 = 1026;
  sub_10032E7CC(v2033, (__int128 *)v183, (__int128 *)v178);
  sub_1000065CC(v176, "TW");
  sub_1000065CC(v171, "Taiwan");
  sub_1000065CC(&v173, "TW");
  __int16 v175 = 1026;
  sub_10032E7CC(v2034, (__int128 *)v176, (__int128 *)v171);
  sub_1000065CC(v169, "NP");
  sub_1000065CC(v164, "Nepal");
  sub_1000065CC(&v166, "NP");
  __int16 v168 = 1026;
  sub_10032E7CC(v2035, (__int128 *)v169, (__int128 *)v164);
  sub_1000065CC(v162, "FJ");
  sub_1000065CC(v157, "Fiji");
  sub_1000065CC(&v159, "FJ");
  __int16 v161 = 1026;
  sub_10032E7CC(v2036, (__int128 *)v162, (__int128 *)v157);
  sub_1000065CC(v155, "CC");
  sub_1000065CC(v150, "Cocos Islands");
  sub_1000065CC(&v152, "CC");
  __int16 v154 = 1026;
  sub_10032E7CC(v2037, (__int128 *)v155, (__int128 *)v150);
  sub_1000065CC(v148, "CK");
  sub_1000065CC(v143, "COOK ISLANDS");
  sub_1000065CC(&v145, "CK");
  __int16 v147 = 1026;
  sub_10032E7CC(v2038, (__int128 *)v148, (__int128 *)v143);
  sub_1000065CC(v141, "CX");
  sub_1000065CC(v136, "Christmas Islands");
  sub_1000065CC(&v138, "CX");
  __int16 v140 = 1026;
  sub_10032E7CC(v2039, (__int128 *)v141, (__int128 *)v136);
  sub_1000065CC(v134, "HM");
  sub_1000065CC(v129, "Heard Island and MCDonald");
  sub_1000065CC(&v131, "HM");
  __int16 v133 = 1026;
  sub_10032E7CC(v2040, (__int128 *)v134, (__int128 *)v129);
  sub_1000065CC(v127, "NU");
  sub_1000065CC(v122, "NIUE");
  sub_1000065CC(&v124, "NU");
  __int16 v126 = 1026;
  sub_10032E7CC(v2041, (__int128 *)v127, (__int128 *)v122);
  sub_1000065CC(v120, "TK");
  sub_1000065CC(v115, "TOKELAU");
  sub_1000065CC(&v117, "TK");
  __int16 v119 = 1026;
  sub_10032E7CC(v2042, (__int128 *)v120, (__int128 *)v115);
  sub_1000065CC(v113, "TV");
  sub_1000065CC(v108, "TUVALU");
  sub_1000065CC(&v110, "TV");
  __int16 v112 = 1026;
  sub_10032E7CC(v2043, (__int128 *)v113, (__int128 *)v108);
  sub_1000065CC(v106, "RU");
  sub_1000065CC(v101, "Russia");
  sub_1000065CC(&v103, "RU");
  __int16 v105 = -510;
  sub_10032E7CC(v2044, (__int128 *)v106, (__int128 *)v101);
  sub_1000065CC(v99, "SS");
  sub_1000065CC(v94, "South Sudan");
  sub_1000065CC(&v96, "SS");
  __int16 v98 = -509;
  sub_10032E7CC(v2045, (__int128 *)v99, (__int128 *)v94);
  sub_1000065CC(v92, "XZ");
  sub_1000065CC(v87, "");
  sub_1000065CC(&v89, "XZ");
  __int16 v91 = -512;
  sub_10032E7CC(v2046, (__int128 *)v92, (__int128 *)v87);
  sub_1000065CC(v85, "A6");
  sub_1000065CC(v80, "International Water");
  sub_1000065CC(&v82, "A6");
  __int16 v84 = -512;
  sub_10032E7CC(v2047, (__int128 *)v85, (__int128 *)v80);
  sub_1000065CC(v78, "KP");
  sub_1000065CC(v73, "North Korea");
  sub_1000065CC(&v75, "KP");
  __int16 v77 = -512;
  sub_10032E7CC(v2048, (__int128 *)v78, (__int128 *)v73);
  sub_1000065CC(v71, "JP");
  sub_1000065CC(v66, "Japan");
  sub_1000065CC(&v68, "JP");
  __int16 v70 = -510;
  sub_10032E7CC(v2049, (__int128 *)v71, (__int128 *)v66);
  sub_1000065CC(v64, "CU");
  sub_1000065CC(v59, "Cuba");
  sub_1000065CC(&v61, "CU");
  __int16 v63 = -511;
  sub_10032E7CC(v2050, (__int128 *)v64, (__int128 *)v59);
  sub_1000065CC(v57, "IR");
  sub_1000065CC(v52, "Iran");
  sub_1000065CC(&v54, "IR");
  __int16 v56 = -509;
  sub_10032E7CC(v2051, (__int128 *)v57, (__int128 *)v52);
  sub_1000065CC(v50, "SD");
  sub_1000065CC(v45, "Sudan");
  sub_1000065CC(&v47, "SD");
  __int16 v49 = -509;
  sub_10032E7CC(v2052, (__int128 *)v50, (__int128 *)v45);
  sub_1000065CC(v43, "SY");
  sub_1000065CC(v38, "Syria");
  sub_1000065CC(&v40, "SY");
  __int16 v42 = -509;
  sub_10032E7CC(v2053, (__int128 *)v43, (__int128 *)v38);
  sub_1000065CC(v36, "A1");
  sub_1000065CC(v31, "Bajo Nueva Bank");
  sub_1000065CC(&v33, "A1");
  __int16 v35 = -512;
  sub_10032E7CC(v2054, (__int128 *)v36, (__int128 *)v31);
  sub_1000065CC(v29, "A3");
  sub_1000065CC(v24, "Serranilla Bank");
  sub_1000065CC(&v26, "A3");
  __int16 v28 = -512;
  sub_10032E7CC(v2055, (__int128 *)v29, (__int128 *)v24);
  sub_1000065CC(v22, "AQ");
  sub_1000065CC(v17, "Antartica");
  sub_1000065CC(&v19, "AQ");
  __int16 v21 = -512;
  sub_10032E7CC(v2056, (__int128 *)v22, (__int128 *)v17);
  sub_1000065CC(v15, "NF");
  sub_1000065CC(v10, "Norfolk Island [Australia]");
  sub_1000065CC(&v12, "NF");
  __int16 v14 = -512;
  sub_10032E7CC(v2057, (__int128 *)v15, (__int128 *)v10);
  sub_1000065CC(v8, off_1007F4730[0]);
  sub_1000065CC(v3, "kUnknownCountry");
  sub_1000065CC(&__p, off_1007F4730[0]);
  __int16 v7 = 1;
  sub_10032E7CC(v2058, (__int128 *)v8, (__int128 *)v3);
  sub_10032ED5C((uint64_t)qword_1008008C0, v1802, 257LL);
  unint64_t v0 = 20560LL;
  do
  {
    uint64_t v1 = &v1802[v0];
    if (SHIBYTE(v1800[v0 / 8 + 1]) < 0) {
      operator delete(*((void **)v1 - 4));
    }
    if (*(&v1796 + v0) < 0) {
      operator delete(*((void **)v1 - 10));
    }
    v0 -= 80LL;
  }

  while (v0);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (v69 < 0) {
    operator delete(v68);
  }
  if (v67 < 0) {
    operator delete(v66[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  if (v83 < 0) {
    operator delete(v82);
  }
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  if (v90 < 0) {
    operator delete(v89);
  }
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  if (v97 < 0) {
    operator delete(v96);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  if (v107 < 0) {
    operator delete(v106[0]);
  }
  if (v111 < 0) {
    operator delete(v110);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  if (v114 < 0) {
    operator delete(v113[0]);
  }
  if (v118 < 0) {
    operator delete(v117);
  }
  if (v116 < 0) {
    operator delete(v115[0]);
  }
  if (v121 < 0) {
    operator delete(v120[0]);
  }
  if (v125 < 0) {
    operator delete(v124);
  }
  if (v123 < 0) {
    operator delete(v122[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  if (v132 < 0) {
    operator delete(v131);
  }
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  if (v135 < 0) {
    operator delete(v134[0]);
  }
  if (v139 < 0) {
    operator delete(v138);
  }
  if (v137 < 0) {
    operator delete(v136[0]);
  }
  if (v142 < 0) {
    operator delete(v141[0]);
  }
  if (v146 < 0) {
    operator delete(v145);
  }
  if (v144 < 0) {
    operator delete(v143[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  if (v153 < 0) {
    operator delete(v152);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  if (v156 < 0) {
    operator delete(v155[0]);
  }
  if (v160 < 0) {
    operator delete(v159);
  }
  if (v158 < 0) {
    operator delete(v157[0]);
  }
  if (v163 < 0) {
    operator delete(v162[0]);
  }
  if (v167 < 0) {
    operator delete(v166);
  }
  if (v165 < 0) {
    operator delete(v164[0]);
  }
  if (v170 < 0) {
    operator delete(v169[0]);
  }
  if (v174 < 0) {
    operator delete(v173);
  }
  if (v172 < 0) {
    operator delete(v171[0]);
  }
  if (v177 < 0) {
    operator delete(v176[0]);
  }
  if (v181 < 0) {
    operator delete(v180);
  }
  if (v179 < 0) {
    operator delete(v178[0]);
  }
  if (v184 < 0) {
    operator delete(v183[0]);
  }
  if (v188 < 0) {
    operator delete(v187);
  }
  if (v186 < 0) {
    operator delete(v185[0]);
  }
  if (v191 < 0) {
    operator delete(v190[0]);
  }
  if (v195 < 0) {
    operator delete(v194);
  }
  if (v193 < 0) {
    operator delete(v192[0]);
  }
  if (v198 < 0) {
    operator delete(v197[0]);
  }
  if (v202 < 0) {
    operator delete(v201);
  }
  if (v200 < 0) {
    operator delete(v199[0]);
  }
  if (v205 < 0) {
    operator delete(v204[0]);
  }
  if (v209 < 0) {
    operator delete(v208);
  }
  if (v207 < 0) {
    operator delete(v206[0]);
  }
  if (v212 < 0) {
    operator delete(v211[0]);
  }
  if (v216 < 0) {
    operator delete(v215);
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  if (v219 < 0) {
    operator delete(v218[0]);
  }
  if (v223 < 0) {
    operator delete(v222);
  }
  if (v221 < 0) {
    operator delete(v220[0]);
  }
  if (v226 < 0) {
    operator delete(v225[0]);
  }
  if (v230 < 0) {
    operator delete(v229);
  }
  if (v228 < 0) {
    operator delete(v227[0]);
  }
  if (v233 < 0) {
    operator delete(v232[0]);
  }
  if (v237 < 0) {
    operator delete(v236);
  }
  if (v235 < 0) {
    operator delete(v234[0]);
  }
  if (v240 < 0) {
    operator delete(v239[0]);
  }
  if (v244 < 0) {
    operator delete(v243);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  if (v251 < 0) {
    operator delete(v250);
  }
  if (v249 < 0) {
    operator delete(v248[0]);
  }
  if (v254 < 0) {
    operator delete(v253[0]);
  }
  if (v258 < 0) {
    operator delete(v257);
  }
  if (v256 < 0) {
    operator delete(v255[0]);
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
  if (v265 < 0) {
    operator delete(v264);
  }
  if (v263 < 0) {
    operator delete(v262[0]);
  }
  if (v268 < 0) {
    operator delete(v267[0]);
  }
  if (v272 < 0) {
    operator delete(v271);
  }
  if (v270 < 0) {
    operator delete(v269[0]);
  }
  if (v275 < 0) {
    operator delete(v274[0]);
  }
  if (v279 < 0) {
    operator delete(v278);
  }
  if (v277 < 0) {
    operator delete(v276[0]);
  }
  if (v282 < 0) {
    operator delete(v281[0]);
  }
  if (v286 < 0) {
    operator delete(v285);
  }
  if (v284 < 0) {
    operator delete(v283[0]);
  }
  if (v289 < 0) {
    operator delete(v288[0]);
  }
  if (v293 < 0) {
    operator delete(v292);
  }
  if (v291 < 0) {
    operator delete(v290[0]);
  }
  if (v296 < 0) {
    operator delete(v295[0]);
  }
  if (v300 < 0) {
    operator delete(v299);
  }
  if (v298 < 0) {
    operator delete(v297[0]);
  }
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if (v307 < 0) {
    operator delete(v306);
  }
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if (v310 < 0) {
    operator delete(v309[0]);
  }
  if (v314 < 0) {
    operator delete(v313);
  }
  if (v312 < 0) {
    operator delete(v311[0]);
  }
  if (v317 < 0) {
    operator delete(v316[0]);
  }
  if (v321 < 0) {
    operator delete(v320);
  }
  if (v319 < 0) {
    operator delete(v318[0]);
  }
  if (v324 < 0) {
    operator delete(v323[0]);
  }
  if (v328 < 0) {
    operator delete(v327);
  }
  if (v326 < 0) {
    operator delete(v325[0]);
  }
  if (v331 < 0) {
    operator delete(v330[0]);
  }
  if (v335 < 0) {
    operator delete(v334);
  }
  if (v333 < 0) {
    operator delete(v332[0]);
  }
  if (v338 < 0) {
    operator delete(v337[0]);
  }
  if (v342 < 0) {
    operator delete(v341);
  }
  if (v340 < 0) {
    operator delete(v339[0]);
  }
  if (v345 < 0) {
    operator delete(v344[0]);
  }
  if (v349 < 0) {
    operator delete(v348);
  }
  if (v347 < 0) {
    operator delete(v346[0]);
  }
  if (v352 < 0) {
    operator delete(v351[0]);
  }
  if (v356 < 0) {
    operator delete(v355);
  }
  if (v354 < 0) {
    operator delete(v353[0]);
  }
  if (v359 < 0) {
    operator delete(v358[0]);
  }
  if (v363 < 0) {
    operator delete(v362);
  }
  if (v361 < 0) {
    operator delete(v360[0]);
  }
  if (v366 < 0) {
    operator delete(v365[0]);
  }
  if (v370 < 0) {
    operator delete(v369);
  }
  if (v368 < 0) {
    operator delete(v367[0]);
  }
  if (v373 < 0) {
    operator delete(v372[0]);
  }
  if (v377 < 0) {
    operator delete(v376);
  }
  if (v375 < 0) {
    operator delete(v374[0]);
  }
  if (v380 < 0) {
    operator delete(v379[0]);
  }
  if (v384 < 0) {
    operator delete(v383);
  }
  if (v382 < 0) {
    operator delete(v381[0]);
  }
  if (v387 < 0) {
    operator delete(v386[0]);
  }
  if (v391 < 0) {
    operator delete(v390);
  }
  if (v389 < 0) {
    operator delete(v388[0]);
  }
  if (v394 < 0) {
    operator delete(v393[0]);
  }
  if (v398 < 0) {
    operator delete(v397);
  }
  if (v396 < 0) {
    operator delete(v395[0]);
  }
  if (v401 < 0) {
    operator delete(v400[0]);
  }
  if (v405 < 0) {
    operator delete(v404);
  }
  if (v403 < 0) {
    operator delete(v402[0]);
  }
  if (v408 < 0) {
    operator delete(v407[0]);
  }
  if (v412 < 0) {
    operator delete(v411);
  }
  if (v410 < 0) {
    operator delete(v409[0]);
  }
  if (v415 < 0) {
    operator delete(v414[0]);
  }
  if (v419 < 0) {
    operator delete(v418);
  }
  if (v417 < 0) {
    operator delete(v416[0]);
  }
  if (v422 < 0) {
    operator delete(v421[0]);
  }
  if (v426 < 0) {
    operator delete(v425);
  }
  if (v424 < 0) {
    operator delete(v423[0]);
  }
  if (v429 < 0) {
    operator delete(v428[0]);
  }
  if (v433 < 0) {
    operator delete(v432);
  }
  if (v431 < 0) {
    operator delete(v430[0]);
  }
  if (v436 < 0) {
    operator delete(v435[0]);
  }
  if (v440 < 0) {
    operator delete(v439);
  }
  if (v438 < 0) {
    operator delete(v437[0]);
  }
  if (v443 < 0) {
    operator delete(v442[0]);
  }
  if (v447 < 0) {
    operator delete(v446);
  }
  if (v445 < 0) {
    operator delete(v444[0]);
  }
  if (v450 < 0) {
    operator delete(v449[0]);
  }
  if (v454 < 0) {
    operator delete(v453);
  }
  if (v452 < 0) {
    operator delete(v451[0]);
  }
  if (v457 < 0) {
    operator delete(v456[0]);
  }
  if (v461 < 0) {
    operator delete(v460);
  }
  if (v459 < 0) {
    operator delete(v458[0]);
  }
  if (v464 < 0) {
    operator delete(v463[0]);
  }
  if (v468 < 0) {
    operator delete(v467);
  }
  if (v466 < 0) {
    operator delete(v465[0]);
  }
  if (v471 < 0) {
    operator delete(v470[0]);
  }
  if (v475 < 0) {
    operator delete(v474);
  }
  if (v473 < 0) {
    operator delete(v472[0]);
  }
  if (v478 < 0) {
    operator delete(v477[0]);
  }
  if (v482 < 0) {
    operator delete(v481);
  }
  if (v480 < 0) {
    operator delete(v479[0]);
  }
  if (v485 < 0) {
    operator delete(v484[0]);
  }
  if (v489 < 0) {
    operator delete(v488);
  }
  if (v487 < 0) {
    operator delete(v486[0]);
  }
  if (v492 < 0) {
    operator delete(v491[0]);
  }
  if (v496 < 0) {
    operator delete(v495);
  }
  if (v494 < 0) {
    operator delete(v493[0]);
  }
  if (v499 < 0) {
    operator delete(v498[0]);
  }
  if (v503 < 0) {
    operator delete(v502);
  }
  if (v501 < 0) {
    operator delete(v500[0]);
  }
  if (v506 < 0) {
    operator delete(v505[0]);
  }
  if (v510 < 0) {
    operator delete(v509);
  }
  if (v508 < 0) {
    operator delete(v507[0]);
  }
  if (v513 < 0) {
    operator delete(v512[0]);
  }
  if (v517 < 0) {
    operator delete(v516);
  }
  if (v515 < 0) {
    operator delete(v514[0]);
  }
  if (v520 < 0) {
    operator delete(v519[0]);
  }
  if (v524 < 0) {
    operator delete(v523);
  }
  if (v522 < 0) {
    operator delete(v521[0]);
  }
  if (v527 < 0) {
    operator delete(v526[0]);
  }
  if (v531 < 0) {
    operator delete(v530);
  }
  if (v529 < 0) {
    operator delete(v528[0]);
  }
  if (v534 < 0) {
    operator delete(v533[0]);
  }
  if (v538 < 0) {
    operator delete(v537);
  }
  if (v536 < 0) {
    operator delete(v535[0]);
  }
  if (v541 < 0) {
    operator delete(v540[0]);
  }
  if (v545 < 0) {
    operator delete(v544);
  }
  if (v543 < 0) {
    operator delete(v542[0]);
  }
  if (v548 < 0) {
    operator delete(v547[0]);
  }
  if (v552 < 0) {
    operator delete(v551);
  }
  if (v550 < 0) {
    operator delete(v549[0]);
  }
  if (v555 < 0) {
    operator delete(v554[0]);
  }
  if (v559 < 0) {
    operator delete(v558);
  }
  if (v557 < 0) {
    operator delete(v556[0]);
  }
  if (v562 < 0) {
    operator delete(v561[0]);
  }
  if (v566 < 0) {
    operator delete(v565);
  }
  if (v564 < 0) {
    operator delete(v563[0]);
  }
  if (v569 < 0) {
    operator delete(v568[0]);
  }
  if (v573 < 0) {
    operator delete(v572);
  }
  if (v571 < 0) {
    operator delete(v570[0]);
  }
  if (v576 < 0) {
    operator delete(v575[0]);
  }
  if (v580 < 0) {
    operator delete(v579);
  }
  if (v578 < 0) {
    operator delete(v577[0]);
  }
  if (v583 < 0) {
    operator delete(v582[0]);
  }
  if (v587 < 0) {
    operator delete(v586);
  }
  if (v585 < 0) {
    operator delete(v584[0]);
  }
  if (v590 < 0) {
    operator delete(v589[0]);
  }
  if (v594 < 0) {
    operator delete(v593);
  }
  if (v592 < 0) {
    operator delete(v591[0]);
  }
  if (v597 < 0) {
    operator delete(v596[0]);
  }
  if (v601 < 0) {
    operator delete(v600);
  }
  if (v599 < 0) {
    operator delete(v598[0]);
  }
  if (v604 < 0) {
    operator delete(v603[0]);
  }
  if (v608 < 0) {
    operator delete(v607);
  }
  if (v606 < 0) {
    operator delete(v605[0]);
  }
  if (v611 < 0) {
    operator delete(v610[0]);
  }
  if (v615 < 0) {
    operator delete(v614);
  }
  if (v613 < 0) {
    operator delete(v612[0]);
  }
  if (v618 < 0) {
    operator delete(v617[0]);
  }
  if (v622 < 0) {
    operator delete(v621);
  }
  if (v620 < 0) {
    operator delete(v619[0]);
  }
  if (v625 < 0) {
    operator delete(v624[0]);
  }
  if (v629 < 0) {
    operator delete(v628);
  }
  if (v627 < 0) {
    operator delete(v626[0]);
  }
  if (v632 < 0) {
    operator delete(v631[0]);
  }
  if (v636 < 0) {
    operator delete(v635);
  }
  if (v634 < 0) {
    operator delete(v633[0]);
  }
  if (v639 < 0) {
    operator delete(v638[0]);
  }
  if (v643 < 0) {
    operator delete(v642);
  }
  if (v641 < 0) {
    operator delete(v640[0]);
  }
  if (v646 < 0) {
    operator delete(v645[0]);
  }
  if (v650 < 0) {
    operator delete(v649);
  }
  if (v648 < 0) {
    operator delete(v647[0]);
  }
  if (v653 < 0) {
    operator delete(v652[0]);
  }
  if (v657 < 0) {
    operator delete(v656);
  }
  if (v655 < 0) {
    operator delete(v654[0]);
  }
  if (v660 < 0) {
    operator delete(v659[0]);
  }
  if (v664 < 0) {
    operator delete(v663);
  }
  if (v662 < 0) {
    operator delete(v661[0]);
  }
  if (v667 < 0) {
    operator delete(v666[0]);
  }
  if (v671 < 0) {
    operator delete(v670);
  }
  if (v669 < 0) {
    operator delete(v668[0]);
  }
  if (v674 < 0) {
    operator delete(v673[0]);
  }
  if (v678 < 0) {
    operator delete(v677);
  }
  if (v676 < 0) {
    operator delete(v675[0]);
  }
  if (v681 < 0) {
    operator delete(v680[0]);
  }
  if (v685 < 0) {
    operator delete(v684);
  }
  if (v683 < 0) {
    operator delete(v682[0]);
  }
  if (v688 < 0) {
    operator delete(v687[0]);
  }
  if (v692 < 0) {
    operator delete(v691);
  }
  if (v690 < 0) {
    operator delete(v689[0]);
  }
  if (v695 < 0) {
    operator delete(v694[0]);
  }
  if (v699 < 0) {
    operator delete(v698);
  }
  if (v697 < 0) {
    operator delete(v696[0]);
  }
  if (v702 < 0) {
    operator delete(v701[0]);
  }
  if (v706 < 0) {
    operator delete(v705);
  }
  if (v704 < 0) {
    operator delete(v703[0]);
  }
  if (v709 < 0) {
    operator delete(v708[0]);
  }
  if (v713 < 0) {
    operator delete(v712);
  }
  if (v711 < 0) {
    operator delete(v710[0]);
  }
  if (v716 < 0) {
    operator delete(v715[0]);
  }
  if (v720 < 0) {
    operator delete(v719);
  }
  if (v718 < 0) {
    operator delete(v717[0]);
  }
  if (v723 < 0) {
    operator delete(v722[0]);
  }
  if (v727 < 0) {
    operator delete(v726);
  }
  if (v725 < 0) {
    operator delete(v724[0]);
  }
  if (v730 < 0) {
    operator delete(v729[0]);
  }
  if (v734 < 0) {
    operator delete(v733);
  }
  if (v732 < 0) {
    operator delete(v731[0]);
  }
  if (v737 < 0) {
    operator delete(v736[0]);
  }
  if (v741 < 0) {
    operator delete(v740);
  }
  if (v739 < 0) {
    operator delete(v738[0]);
  }
  if (v744 < 0) {
    operator delete(v743[0]);
  }
  if (v748 < 0) {
    operator delete(v747);
  }
  if (v746 < 0) {
    operator delete(v745[0]);
  }
  if (v751 < 0) {
    operator delete(v750[0]);
  }
  if (v755 < 0) {
    operator delete(v754);
  }
  if (v753 < 0) {
    operator delete(v752[0]);
  }
  if (v758 < 0) {
    operator delete(v757[0]);
  }
  if (v762 < 0) {
    operator delete(v761);
  }
  if (v760 < 0) {
    operator delete(v759[0]);
  }
  if (v765 < 0) {
    operator delete(v764[0]);
  }
  if (v769 < 0) {
    operator delete(v768);
  }
  if (v767 < 0) {
    operator delete(v766[0]);
  }
  if (v772 < 0) {
    operator delete(v771[0]);
  }
  if (v776 < 0) {
    operator delete(v775);
  }
  if (v774 < 0) {
    operator delete(v773[0]);
  }
  if (v779 < 0) {
    operator delete(v778[0]);
  }
  if (v783 < 0) {
    operator delete(v782);
  }
  if (v781 < 0) {
    operator delete(v780[0]);
  }
  if (v786 < 0) {
    operator delete(v785[0]);
  }
  if (v790 < 0) {
    operator delete(v789);
  }
  if (v788 < 0) {
    operator delete(v787[0]);
  }
  if (v793 < 0) {
    operator delete(v792[0]);
  }
  if (v797 < 0) {
    operator delete(v796);
  }
  if (v795 < 0) {
    operator delete(v794[0]);
  }
  if (v800 < 0) {
    operator delete(v799[0]);
  }
  if (v804 < 0) {
    operator delete(v803);
  }
  if (v802 < 0) {
    operator delete(v801[0]);
  }
  if (v807 < 0) {
    operator delete(v806[0]);
  }
  if (v811 < 0) {
    operator delete(v810);
  }
  if (v809 < 0) {
    operator delete(v808[0]);
  }
  if (v814 < 0) {
    operator delete(v813[0]);
  }
  if (v818 < 0) {
    operator delete(v817);
  }
  if (v816 < 0) {
    operator delete(v815[0]);
  }
  if (v821 < 0) {
    operator delete(v820[0]);
  }
  if (v825 < 0) {
    operator delete(v824);
  }
  if (v823 < 0) {
    operator delete(v822[0]);
  }
  if (v828 < 0) {
    operator delete(v827[0]);
  }
  if (v832 < 0) {
    operator delete(v831);
  }
  if (v830 < 0) {
    operator delete(v829[0]);
  }
  if (v835 < 0) {
    operator delete(v834[0]);
  }
  if (v839 < 0) {
    operator delete(v838);
  }
  if (v837 < 0) {
    operator delete(v836[0]);
  }
  if (v842 < 0) {
    operator delete(v841[0]);
  }
  if (v846 < 0) {
    operator delete(v845);
  }
  if (v844 < 0) {
    operator delete(v843[0]);
  }
  if (v849 < 0) {
    operator delete(v848[0]);
  }
  if (v853 < 0) {
    operator delete(v852);
  }
  if (v851 < 0) {
    operator delete(v850[0]);
  }
  if (v856 < 0) {
    operator delete(v855[0]);
  }
  if (v860 < 0) {
    operator delete(v859);
  }
  if (v858 < 0) {
    operator delete(v857[0]);
  }
  if (v863 < 0) {
    operator delete(v862[0]);
  }
  if (v867 < 0) {
    operator delete(v866);
  }
  if (v865 < 0) {
    operator delete(v864[0]);
  }
  if (v870 < 0) {
    operator delete(v869[0]);
  }
  if (v874 < 0) {
    operator delete(v873);
  }
  if (v872 < 0) {
    operator delete(v871[0]);
  }
  if (v877 < 0) {
    operator delete(v876[0]);
  }
  if (v881 < 0) {
    operator delete(v880);
  }
  if (v879 < 0) {
    operator delete(v878[0]);
  }
  if (v884 < 0) {
    operator delete(v883[0]);
  }
  if (v888 < 0) {
    operator delete(v887);
  }
  if (v886 < 0) {
    operator delete(v885[0]);
  }
  if (v891 < 0) {
    operator delete(v890[0]);
  }
  if (v895 < 0) {
    operator delete(v894);
  }
  if (v893 < 0) {
    operator delete(v892[0]);
  }
  if (v898 < 0) {
    operator delete(v897[0]);
  }
  if (v902 < 0) {
    operator delete(v901);
  }
  if (v900 < 0) {
    operator delete(v899[0]);
  }
  if (v905 < 0) {
    operator delete(v904[0]);
  }
  if (v909 < 0) {
    operator delete(v908);
  }
  if (v907 < 0) {
    operator delete(v906[0]);
  }
  if (v912 < 0) {
    operator delete(v911[0]);
  }
  if (v916 < 0) {
    operator delete(v915);
  }
  if (v914 < 0) {
    operator delete(v913[0]);
  }
  if (v919 < 0) {
    operator delete(v918[0]);
  }
  if (v923 < 0) {
    operator delete(v922);
  }
  if (v921 < 0) {
    operator delete(v920[0]);
  }
  if (v926 < 0) {
    operator delete(v925[0]);
  }
  if (v930 < 0) {
    operator delete(v929);
  }
  if (v928 < 0) {
    operator delete(v927[0]);
  }
  if (v933 < 0) {
    operator delete(v932[0]);
  }
  if (v937 < 0) {
    operator delete(v936);
  }
  if (v935 < 0) {
    operator delete(v934[0]);
  }
  if (v940 < 0) {
    operator delete(v939[0]);
  }
  if (v944 < 0) {
    operator delete(v943);
  }
  if (v942 < 0) {
    operator delete(v941[0]);
  }
  if (v947 < 0) {
    operator delete(v946[0]);
  }
  if (v951 < 0) {
    operator delete(v950);
  }
  if (v949 < 0) {
    operator delete(v948[0]);
  }
  if (v954 < 0) {
    operator delete(v953[0]);
  }
  if (v958 < 0) {
    operator delete(v957);
  }
  if (v956 < 0) {
    operator delete(v955[0]);
  }
  if (v961 < 0) {
    operator delete(v960[0]);
  }
  if (v965 < 0) {
    operator delete(v964);
  }
  if (v963 < 0) {
    operator delete(v962[0]);
  }
  if (v968 < 0) {
    operator delete(v967[0]);
  }
  if (v972 < 0) {
    operator delete(v971);
  }
  if (v970 < 0) {
    operator delete(v969[0]);
  }
  if (v975 < 0) {
    operator delete(v974[0]);
  }
  if (v979 < 0) {
    operator delete(v978);
  }
  if (v977 < 0) {
    operator delete(v976[0]);
  }
  if (v982 < 0) {
    operator delete(v981[0]);
  }
  if (v986 < 0) {
    operator delete(v985);
  }
  if (v984 < 0) {
    operator delete(v983[0]);
  }
  if (v989 < 0) {
    operator delete(v988[0]);
  }
  if (v993 < 0) {
    operator delete(v992);
  }
  if (v991 < 0) {
    operator delete(v990[0]);
  }
  if (v996 < 0) {
    operator delete(v995[0]);
  }
  if (v1000 < 0) {
    operator delete(v999);
  }
  if (v998 < 0) {
    operator delete(v997[0]);
  }
  if (v1003 < 0) {
    operator delete(v1002[0]);
  }
  if (v1007 < 0) {
    operator delete(v1006);
  }
  if (v1005 < 0) {
    operator delete(v1004[0]);
  }
  if (v1010 < 0) {
    operator delete(v1009[0]);
  }
  if (v1014 < 0) {
    operator delete(v1013);
  }
  if (v1012 < 0) {
    operator delete(v1011[0]);
  }
  if (v1017 < 0) {
    operator delete(v1016[0]);
  }
  if (v1021 < 0) {
    operator delete(v1020);
  }
  if (v1019 < 0) {
    operator delete(v1018[0]);
  }
  if (v1024 < 0) {
    operator delete(v1023[0]);
  }
  if (v1028 < 0) {
    operator delete(v1027);
  }
  if (v1026 < 0) {
    operator delete(v1025[0]);
  }
  if (v1031 < 0) {
    operator delete(v1030[0]);
  }
  if (v1035 < 0) {
    operator delete(v1034);
  }
  if (v1033 < 0) {
    operator delete(v1032[0]);
  }
  if (v1038 < 0) {
    operator delete(v1037[0]);
  }
  if (v1042 < 0) {
    operator delete(v1041);
  }
  if (v1040 < 0) {
    operator delete(v1039[0]);
  }
  if (v1045 < 0) {
    operator delete(v1044[0]);
  }
  if (v1049 < 0) {
    operator delete(v1048);
  }
  if (v1047 < 0) {
    operator delete(v1046[0]);
  }
  if (v1052 < 0) {
    operator delete(v1051[0]);
  }
  if (v1056 < 0) {
    operator delete(v1055);
  }
  if (v1054 < 0) {
    operator delete(v1053[0]);
  }
  if (v1059 < 0) {
    operator delete(v1058[0]);
  }
  if (v1063 < 0) {
    operator delete(v1062);
  }
  if (v1061 < 0) {
    operator delete(v1060[0]);
  }
  if (v1066 < 0) {
    operator delete(v1065[0]);
  }
  if (v1070 < 0) {
    operator delete(v1069);
  }
  if (v1068 < 0) {
    operator delete(v1067[0]);
  }
  if (v1073 < 0) {
    operator delete(v1072[0]);
  }
  if (v1077 < 0) {
    operator delete(v1076);
  }
  if (v1075 < 0) {
    operator delete(v1074[0]);
  }
  if (v1080 < 0) {
    operator delete(v1079[0]);
  }
  if (v1084 < 0) {
    operator delete(v1083);
  }
  if (v1082 < 0) {
    operator delete(v1081[0]);
  }
  if (v1087 < 0) {
    operator delete(v1086[0]);
  }
  if (v1091 < 0) {
    operator delete(v1090);
  }
  if (v1089 < 0) {
    operator delete(v1088[0]);
  }
  if (v1094 < 0) {
    operator delete(v1093[0]);
  }
  if (v1098 < 0) {
    operator delete(v1097);
  }
  if (v1096 < 0) {
    operator delete(v1095[0]);
  }
  if (v1101 < 0) {
    operator delete(v1100[0]);
  }
  if (v1105 < 0) {
    operator delete(v1104);
  }
  if (v1103 < 0) {
    operator delete(v1102[0]);
  }
  if (v1108 < 0) {
    operator delete(v1107[0]);
  }
  if (v1112 < 0) {
    operator delete(v1111);
  }
  if (v1110 < 0) {
    operator delete(v1109[0]);
  }
  if (v1115 < 0) {
    operator delete(v1114[0]);
  }
  if (v1119 < 0) {
    operator delete(v1118);
  }
  if (v1117 < 0) {
    operator delete(v1116[0]);
  }
  if (v1122 < 0) {
    operator delete(v1121[0]);
  }
  if (v1126 < 0) {
    operator delete(v1125);
  }
  if (v1124 < 0) {
    operator delete(v1123[0]);
  }
  if (v1129 < 0) {
    operator delete(v1128[0]);
  }
  if (v1133 < 0) {
    operator delete(v1132);
  }
  if (v1131 < 0) {
    operator delete(v1130[0]);
  }
  if (v1136 < 0) {
    operator delete(v1135[0]);
  }
  if (v1140 < 0) {
    operator delete(v1139);
  }
  if (v1138 < 0) {
    operator delete(v1137[0]);
  }
  if (v1143 < 0) {
    operator delete(v1142[0]);
  }
  if (v1147 < 0) {
    operator delete(v1146);
  }
  if (v1145 < 0) {
    operator delete(v1144[0]);
  }
  if (v1150 < 0) {
    operator delete(v1149[0]);
  }
  if (v1154 < 0) {
    operator delete(v1153);
  }
  if (v1152 < 0) {
    operator delete(v1151[0]);
  }
  if (v1157 < 0) {
    operator delete(v1156[0]);
  }
  if (v1161 < 0) {
    operator delete(v1160);
  }
  if (v1159 < 0) {
    operator delete(v1158[0]);
  }
  if (v1164 < 0) {
    operator delete(v1163[0]);
  }
  if (v1168 < 0) {
    operator delete(v1167);
  }
  if (v1166 < 0) {
    operator delete(v1165[0]);
  }
  if (v1171 < 0) {
    operator delete(v1170[0]);
  }
  if (v1175 < 0) {
    operator delete(v1174);
  }
  if (v1173 < 0) {
    operator delete(v1172[0]);
  }
  if (v1178 < 0) {
    operator delete(v1177[0]);
  }
  if (v1182 < 0) {
    operator delete(v1181);
  }
  if (v1180 < 0) {
    operator delete(v1179[0]);
  }
  if (v1185 < 0) {
    operator delete(v1184[0]);
  }
  if (v1189 < 0) {
    operator delete(v1188);
  }
  if (v1187 < 0) {
    operator delete(v1186[0]);
  }
  if (v1192 < 0) {
    operator delete(v1191[0]);
  }
  if (v1196 < 0) {
    operator delete(v1195);
  }
  if (v1194 < 0) {
    operator delete(v1193[0]);
  }
  if (v1199 < 0) {
    operator delete(v1198[0]);
  }
  if (v1203 < 0) {
    operator delete(v1202);
  }
  if (v1201 < 0) {
    operator delete(v1200[0]);
  }
  if (v1206 < 0) {
    operator delete(v1205[0]);
  }
  if (v1210 < 0) {
    operator delete(v1209);
  }
  if (v1208 < 0) {
    operator delete(v1207[0]);
  }
  if (v1213 < 0) {
    operator delete(v1212[0]);
  }
  if (v1217 < 0) {
    operator delete(v1216);
  }
  if (v1215 < 0) {
    operator delete(v1214[0]);
  }
  if (v1220 < 0) {
    operator delete(v1219[0]);
  }
  if (v1224 < 0) {
    operator delete(v1223);
  }
  if (v1222 < 0) {
    operator delete(v1221[0]);
  }
  if (v1227 < 0) {
    operator delete(v1226[0]);
  }
  if (v1231 < 0) {
    operator delete(v1230);
  }
  if (v1229 < 0) {
    operator delete(v1228[0]);
  }
  if (v1234 < 0) {
    operator delete(v1233[0]);
  }
  if (v1238 < 0) {
    operator delete(v1237);
  }
  if (v1236 < 0) {
    operator delete(v1235[0]);
  }
  if (v1241 < 0) {
    operator delete(v1240[0]);
  }
  if (v1245 < 0) {
    operator delete(v1244);
  }
  if (v1243 < 0) {
    operator delete(v1242[0]);
  }
  if (v1248 < 0) {
    operator delete(v1247[0]);
  }
  if (v1252 < 0) {
    operator delete(v1251);
  }
  if (v1250 < 0) {
    operator delete(v1249[0]);
  }
  if (v1255 < 0) {
    operator delete(v1254[0]);
  }
  if (v1259 < 0) {
    operator delete(v1258);
  }
  if (v1257 < 0) {
    operator delete(v1256[0]);
  }
  if (v1262 < 0) {
    operator delete(v1261[0]);
  }
  if (v1266 < 0) {
    operator delete(v1265);
  }
  if (v1264 < 0) {
    operator delete(v1263[0]);
  }
  if (v1269 < 0) {
    operator delete(v1268[0]);
  }
  if (v1273 < 0) {
    operator delete(v1272);
  }
  if (v1271 < 0) {
    operator delete(v1270[0]);
  }
  if (v1276 < 0) {
    operator delete(v1275[0]);
  }
  if (v1280 < 0) {
    operator delete(v1279);
  }
  if (v1278 < 0) {
    operator delete(v1277[0]);
  }
  if (v1283 < 0) {
    operator delete(v1282[0]);
  }
  if (v1287 < 0) {
    operator delete(v1286);
  }
  if (v1285 < 0) {
    operator delete(v1284[0]);
  }
  if (v1290 < 0) {
    operator delete(v1289[0]);
  }
  if (v1294 < 0) {
    operator delete(v1293);
  }
  if (v1292 < 0) {
    operator delete(v1291[0]);
  }
  if (v1297 < 0) {
    operator delete(v1296[0]);
  }
  if (v1301 < 0) {
    operator delete(v1300);
  }
  if (v1299 < 0) {
    operator delete(v1298[0]);
  }
  if (v1304 < 0) {
    operator delete(v1303[0]);
  }
  if (v1308 < 0) {
    operator delete(v1307);
  }
  if (v1306 < 0) {
    operator delete(v1305[0]);
  }
  if (v1311 < 0) {
    operator delete(v1310[0]);
  }
  if (v1315 < 0) {
    operator delete(v1314);
  }
  if (v1313 < 0) {
    operator delete(v1312[0]);
  }
  if (v1318 < 0) {
    operator delete(v1317[0]);
  }
  if (v1322 < 0) {
    operator delete(v1321);
  }
  if (v1320 < 0) {
    operator delete(v1319[0]);
  }
  if (v1325 < 0) {
    operator delete(v1324[0]);
  }
  if (v1329 < 0) {
    operator delete(v1328);
  }
  if (v1327 < 0) {
    operator delete(v1326[0]);
  }
  if (v1332 < 0) {
    operator delete(v1331[0]);
  }
  if (v1336 < 0) {
    operator delete(v1335);
  }
  if (v1334 < 0) {
    operator delete(v1333[0]);
  }
  if (v1339 < 0) {
    operator delete(v1338[0]);
  }
  if (v1343 < 0) {
    operator delete(v1342);
  }
  if (v1341 < 0) {
    operator delete(v1340[0]);
  }
  if (v1346 < 0) {
    operator delete(v1345[0]);
  }
  if (v1350 < 0) {
    operator delete(v1349);
  }
  if (v1348 < 0) {
    operator delete(v1347[0]);
  }
  if (v1353 < 0) {
    operator delete(v1352[0]);
  }
  if (v1357 < 0) {
    operator delete(v1356);
  }
  if (v1355 < 0) {
    operator delete(v1354[0]);
  }
  if (v1360 < 0) {
    operator delete(v1359[0]);
  }
  if (v1364 < 0) {
    operator delete(v1363);
  }
  if (v1362 < 0) {
    operator delete(v1361[0]);
  }
  if (v1367 < 0) {
    operator delete(v1366[0]);
  }
  if (v1371 < 0) {
    operator delete(v1370);
  }
  if (v1369 < 0) {
    operator delete(v1368[0]);
  }
  if (v1374 < 0) {
    operator delete(v1373[0]);
  }
  if (v1378 < 0) {
    operator delete(v1377);
  }
  if (v1376 < 0) {
    operator delete(v1375[0]);
  }
  if (v1381 < 0) {
    operator delete(v1380[0]);
  }
  if (v1385 < 0) {
    operator delete(v1384);
  }
  if (v1383 < 0) {
    operator delete(v1382[0]);
  }
  if (v1388 < 0) {
    operator delete(v1387[0]);
  }
  if (v1392 < 0) {
    operator delete(v1391);
  }
  if (v1390 < 0) {
    operator delete(v1389[0]);
  }
  if (v1395 < 0) {
    operator delete(v1394[0]);
  }
  if (v1399 < 0) {
    operator delete(v1398);
  }
  if (v1397 < 0) {
    operator delete(v1396[0]);
  }
  if (v1402 < 0) {
    operator delete(v1401[0]);
  }
  if (v1406 < 0) {
    operator delete(v1405);
  }
  if (v1404 < 0) {
    operator delete(v1403[0]);
  }
  if (v1409 < 0) {
    operator delete(v1408[0]);
  }
  if (v1413 < 0) {
    operator delete(v1412);
  }
  if (v1411 < 0) {
    operator delete(v1410[0]);
  }
  if (v1416 < 0) {
    operator delete(v1415[0]);
  }
  if (v1420 < 0) {
    operator delete(v1419);
  }
  if (v1418 < 0) {
    operator delete(v1417[0]);
  }
  if (v1423 < 0) {
    operator delete(v1422[0]);
  }
  if (v1427 < 0) {
    operator delete(v1426);
  }
  if (v1425 < 0) {
    operator delete(v1424[0]);
  }
  if (v1430 < 0) {
    operator delete(v1429[0]);
  }
  if (v1434 < 0) {
    operator delete(v1433);
  }
  if (v1432 < 0) {
    operator delete(v1431[0]);
  }
  if (v1437 < 0) {
    operator delete(v1436[0]);
  }
  if (v1441 < 0) {
    operator delete(v1440);
  }
  if (v1439 < 0) {
    operator delete(v1438[0]);
  }
  if (v1444 < 0) {
    operator delete(v1443[0]);
  }
  if (v1448 < 0) {
    operator delete(v1447);
  }
  if (v1446 < 0) {
    operator delete(v1445[0]);
  }
  if (v1451 < 0) {
    operator delete(v1450[0]);
  }
  if (v1455 < 0) {
    operator delete(v1454);
  }
  if (v1453 < 0) {
    operator delete(v1452[0]);
  }
  if (v1458 < 0) {
    operator delete(v1457[0]);
  }
  if (v1462 < 0) {
    operator delete(v1461);
  }
  if (v1460 < 0) {
    operator delete(v1459[0]);
  }
  if (v1465 < 0) {
    operator delete(v1464[0]);
  }
  if (v1469 < 0) {
    operator delete(v1468);
  }
  if (v1467 < 0) {
    operator delete(v1466[0]);
  }
  if (v1472 < 0) {
    operator delete(v1471[0]);
  }
  if (v1476 < 0) {
    operator delete(v1475);
  }
  if (v1474 < 0) {
    operator delete(v1473[0]);
  }
  if (v1479 < 0) {
    operator delete(v1478[0]);
  }
  if (v1483 < 0) {
    operator delete(v1482);
  }
  if (v1481 < 0) {
    operator delete(v1480[0]);
  }
  if (v1486 < 0) {
    operator delete(v1485[0]);
  }
  if (v1490 < 0) {
    operator delete(v1489);
  }
  if (v1488 < 0) {
    operator delete(v1487[0]);
  }
  if (v1493 < 0) {
    operator delete(v1492[0]);
  }
  if (v1497 < 0) {
    operator delete(v1496);
  }
  if (v1495 < 0) {
    operator delete(v1494[0]);
  }
  if (v1500 < 0) {
    operator delete(v1499[0]);
  }
  if (v1504 < 0) {
    operator delete(v1503);
  }
  if (v1502 < 0) {
    operator delete(v1501[0]);
  }
  if (v1507 < 0) {
    operator delete(v1506[0]);
  }
  if (v1511 < 0) {
    operator delete(v1510);
  }
  if (v1509 < 0) {
    operator delete(v1508[0]);
  }
  if (v1514 < 0) {
    operator delete(v1513[0]);
  }
  if (v1518 < 0) {
    operator delete(v1517);
  }
  if (v1516 < 0) {
    operator delete(v1515[0]);
  }
  if (v1521 < 0) {
    operator delete(v1520[0]);
  }
  if (v1525 < 0) {
    operator delete(v1524);
  }
  if (v1523 < 0) {
    operator delete(v1522[0]);
  }
  if (v1528 < 0) {
    operator delete(v1527[0]);
  }
  if (v1532 < 0) {
    operator delete(v1531);
  }
  if (v1530 < 0) {
    operator delete(v1529[0]);
  }
  if (v1535 < 0) {
    operator delete(v1534[0]);
  }
  if (v1539 < 0) {
    operator delete(v1538);
  }
  if (v1537 < 0) {
    operator delete(v1536[0]);
  }
  if (v1542 < 0) {
    operator delete(v1541[0]);
  }
  if (v1546 < 0) {
    operator delete(v1545);
  }
  if (v1544 < 0) {
    operator delete(v1543[0]);
  }
  if (v1549 < 0) {
    operator delete(v1548[0]);
  }
  if (v1553 < 0) {
    operator delete(v1552);
  }
  if (v1551 < 0) {
    operator delete(v1550[0]);
  }
  if (v1556 < 0) {
    operator delete(v1555[0]);
  }
  if (v1560 < 0) {
    operator delete(v1559);
  }
  if (v1558 < 0) {
    operator delete(v1557[0]);
  }
  if (v1563 < 0) {
    operator delete(v1562[0]);
  }
  if (v1567 < 0) {
    operator delete(v1566);
  }
  if (v1565 < 0) {
    operator delete(v1564[0]);
  }
  if (v1570 < 0) {
    operator delete(v1569[0]);
  }
  if (v1574 < 0) {
    operator delete(v1573);
  }
  if (v1572 < 0) {
    operator delete(v1571[0]);
  }
  if (v1577 < 0) {
    operator delete(v1576[0]);
  }
  if (v1581 < 0) {
    operator delete(v1580);
  }
  if (v1579 < 0) {
    operator delete(v1578[0]);
  }
  if (v1584 < 0) {
    operator delete(v1583[0]);
  }
  if (v1588 < 0) {
    operator delete(v1587);
  }
  if (v1586 < 0) {
    operator delete(v1585[0]);
  }
  if (v1591 < 0) {
    operator delete(v1590[0]);
  }
  if (v1595 < 0) {
    operator delete(v1594);
  }
  if (v1593 < 0) {
    operator delete(v1592[0]);
  }
  if (v1598 < 0) {
    operator delete(v1597[0]);
  }
  if (v1602 < 0) {
    operator delete(v1601);
  }
  if (v1600 < 0) {
    operator delete(v1599[0]);
  }
  if (v1605 < 0) {
    operator delete(v1604[0]);
  }
  if (v1609 < 0) {
    operator delete(v1608);
  }
  if (v1607 < 0) {
    operator delete(v1606[0]);
  }
  if (v1612 < 0) {
    operator delete(v1611[0]);
  }
  if (v1616 < 0) {
    operator delete(v1615);
  }
  if (v1614 < 0) {
    operator delete(v1613[0]);
  }
  if (v1619 < 0) {
    operator delete(v1618[0]);
  }
  if (v1623 < 0) {
    operator delete(v1622);
  }
  if (v1621 < 0) {
    operator delete(v1620[0]);
  }
  if (v1626 < 0) {
    operator delete(v1625[0]);
  }
  if (v1630 < 0) {
    operator delete(v1629);
  }
  if (v1628 < 0) {
    operator delete(v1627[0]);
  }
  if (v1633 < 0) {
    operator delete(v1632[0]);
  }
  if (v1637 < 0) {
    operator delete(v1636);
  }
  if (v1635 < 0) {
    operator delete(v1634[0]);
  }
  if (v1640 < 0) {
    operator delete(v1639[0]);
  }
  if (v1644 < 0) {
    operator delete(v1643);
  }
  if (v1642 < 0) {
    operator delete(v1641[0]);
  }
  if (v1647 < 0) {
    operator delete(v1646[0]);
  }
  if (v1651 < 0) {
    operator delete(v1650);
  }
  if (v1649 < 0) {
    operator delete(v1648[0]);
  }
  if (v1654 < 0) {
    operator delete(v1653[0]);
  }
  if (v1658 < 0) {
    operator delete(v1657);
  }
  if (v1656 < 0) {
    operator delete(v1655[0]);
  }
  if (v1661 < 0) {
    operator delete(v1660[0]);
  }
  if (v1665 < 0) {
    operator delete(v1664);
  }
  if (v1663 < 0) {
    operator delete(v1662[0]);
  }
  if (v1668 < 0) {
    operator delete(v1667[0]);
  }
  if (v1672 < 0) {
    operator delete(v1671);
  }
  if (v1670 < 0) {
    operator delete(v1669[0]);
  }
  if (v1675 < 0) {
    operator delete(v1674[0]);
  }
  if (v1679 < 0) {
    operator delete(v1678);
  }
  if (v1677 < 0) {
    operator delete(v1676[0]);
  }
  if (v1682 < 0) {
    operator delete(v1681[0]);
  }
  if (v1686 < 0) {
    operator delete(v1685);
  }
  if (v1684 < 0) {
    operator delete(v1683[0]);
  }
  if (v1689 < 0) {
    operator delete(v1688[0]);
  }
  if (v1693 < 0) {
    operator delete(v1692);
  }
  if (v1691 < 0) {
    operator delete(v1690[0]);
  }
  if (v1696 < 0) {
    operator delete(v1695[0]);
  }
  if (v1700 < 0) {
    operator delete(v1699);
  }
  if (v1698 < 0) {
    operator delete(v1697[0]);
  }
  if (v1703 < 0) {
    operator delete(v1702[0]);
  }
  if (v1707 < 0) {
    operator delete(v1706);
  }
  if (v1705 < 0) {
    operator delete(v1704[0]);
  }
  if (v1710 < 0) {
    operator delete(v1709[0]);
  }
  if (v1714 < 0) {
    operator delete(v1713);
  }
  if (v1712 < 0) {
    operator delete(v1711[0]);
  }
  if (v1717 < 0) {
    operator delete(v1716[0]);
  }
  if (v1721 < 0) {
    operator delete(v1720);
  }
  if (v1719 < 0) {
    operator delete(v1718[0]);
  }
  if (v1724 < 0) {
    operator delete(v1723[0]);
  }
  if (v1728 < 0) {
    operator delete(v1727);
  }
  if (v1726 < 0) {
    operator delete(v1725[0]);
  }
  if (v1731 < 0) {
    operator delete(v1730[0]);
  }
  if (v1735 < 0) {
    operator delete(v1734);
  }
  if (v1733 < 0) {
    operator delete(v1732[0]);
  }
  if (v1738 < 0) {
    operator delete(v1737[0]);
  }
  if (v1742 < 0) {
    operator delete(v1741);
  }
  if (v1740 < 0) {
    operator delete(v1739[0]);
  }
  if (v1745 < 0) {
    operator delete(v1744[0]);
  }
  if (v1749 < 0) {
    operator delete(v1748);
  }
  if (v1747 < 0) {
    operator delete(v1746[0]);
  }
  if (v1752 < 0) {
    operator delete(v1751[0]);
  }
  if (v1756 < 0) {
    operator delete(v1755);
  }
  if (v1754 < 0) {
    operator delete(v1753[0]);
  }
  if (v1759 < 0) {
    operator delete(v1758[0]);
  }
  if (v1763 < 0) {
    operator delete(v1762);
  }
  if (v1761 < 0) {
    operator delete(v1760[0]);
  }
  if (v1766 < 0) {
    operator delete(v1765[0]);
  }
  if (v1770 < 0) {
    operator delete(v1769);
  }
  if (v1768 < 0) {
    operator delete(v1767[0]);
  }
  if (v1773 < 0) {
    operator delete(v1772[0]);
  }
  if (v1777 < 0) {
    operator delete(v1776);
  }
  if (v1775 < 0) {
    operator delete(v1774[0]);
  }
  if (v1780 < 0) {
    operator delete(v1779[0]);
  }
  if (v1784 < 0) {
    operator delete(v1783);
  }
  if (v1782 < 0) {
    operator delete(v1781[0]);
  }
  if (v1787 < 0) {
    operator delete(v1786[0]);
  }
  if (v1791 < 0) {
    operator delete(v1790);
  }
  if (v1789 < 0) {
    operator delete(v1788[0]);
  }
  if (v1794 < 0) {
    operator delete(v1793[0]);
  }
  if (v1798 < 0) {
    operator delete(v1797);
  }
  if (v1796 < 0) {
    operator delete(v1795[0]);
  }
  if (v1801 < 0) {
    operator delete(v1800[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_10032E6D4, qword_1008008C0, (void *)&_mh_execute_header);
}

void sub_10034748C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  for (uint64_t i = 20480LL; i != -80; i -= 80LL)
    sub_10032E680(v81 + i);
  sub_1001A951C((uint64_t)&a10);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1001A951C((uint64_t)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_1001A951C((uint64_t)&a36);
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_1001A951C((uint64_t)&a49);
  if (a61 < 0) {
    operator delete(a56);
  }
  sub_1001A951C((uint64_t)&a62);
  if (a72 < 0) {
    operator delete(a69);
  }
  sub_1001A951C((uint64_t)&a73);
  if (a75 < 0) {
    operator delete(a74);
  }
  sub_1001A951C((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  sub_1001A951C((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  sub_1001A951C((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_1001A951C((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_1001A951C((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  sub_1001A951C((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  sub_1001A951C((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  sub_1001A951C((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  sub_1001A951C((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  sub_1001A951C((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  sub_1001A951C((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  sub_1001A951C((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_1001A951C((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  sub_1001A951C((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  sub_1001A951C((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  sub_1001A951C((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0) {
    operator delete((void *)STACK[0x950]);
  }
  sub_1001A951C((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  sub_1001A951C((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0) {
    operator delete((void *)STACK[0xA90]);
  }
  sub_1001A951C((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0) {
    operator delete((void *)STACK[0xB30]);
  }
  sub_1001A951C((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0) {
    operator delete((void *)STACK[0xB80]);
  }
  sub_1001A951C((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  sub_1001A951C((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0) {
    operator delete((void *)STACK[0xC70]);
  }
  sub_1001A951C((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  sub_1001A951C((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  sub_1001A951C((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0) {
    operator delete((void *)STACK[0xE00]);
  }
  sub_1001A951C((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0) {
    operator delete((void *)STACK[0xE50]);
  }
  sub_1001A951C((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0) {
    operator delete((void *)STACK[0xF40]);
  }
  sub_1001A951C((uint64_t)&STACK[0xF58]);
  if (v80[23] < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  sub_1001A951C((uint64_t)&STACK[0xFA8]);
  if (v80[103] < 0) {
    operator delete((void *)STACK[0xFE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0xFF8]);
  if (v80[183] < 0) {
    operator delete((void *)STACK[0x1030]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1048]);
  if (v80[263] < 0) {
    operator delete((void *)STACK[0x1080]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1098]);
  if (v80[343] < 0) {
    operator delete((void *)STACK[0x10D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x10E8]);
  if (v80[423] < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1138]);
  if (v80[503] < 0) {
    operator delete((void *)STACK[0x1170]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1188]);
  if (v80[583] < 0) {
    operator delete((void *)STACK[0x11C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x11D8]);
  if (v80[663] < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1228]);
  if (v80[743] < 0) {
    operator delete((void *)STACK[0x1260]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1278]);
  if (v80[823] < 0) {
    operator delete((void *)STACK[0x12B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x12C8]);
  if (v80[903] < 0) {
    operator delete((void *)STACK[0x1300]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1318]);
  if (v80[983] < 0) {
    operator delete((void *)STACK[0x1350]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1368]);
  if (v80[1063] < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x13B8]);
  if (v80[1143] < 0) {
    operator delete((void *)STACK[0x13F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1408]);
  if (v80[1223] < 0) {
    operator delete((void *)STACK[0x1440]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1458]);
  if (v80[1303] < 0) {
    operator delete((void *)STACK[0x1490]);
  }
  sub_1001A951C((uint64_t)&STACK[0x14A8]);
  if (v80[1383] < 0) {
    operator delete((void *)STACK[0x14E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x14F8]);
  if (v80[1463] < 0) {
    operator delete((void *)STACK[0x1530]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1548]);
  if (v80[1543] < 0) {
    operator delete((void *)STACK[0x1580]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1598]);
  if (v80[1623] < 0) {
    operator delete((void *)STACK[0x15D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x15E8]);
  if (v80[1703] < 0) {
    operator delete((void *)STACK[0x1620]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1638]);
  if (v80[1783] < 0) {
    operator delete((void *)STACK[0x1670]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1688]);
  if (v80[1863] < 0) {
    operator delete((void *)STACK[0x16C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x16D8]);
  if (v80[1943] < 0) {
    operator delete((void *)STACK[0x1710]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1728]);
  if (v80[2023] < 0) {
    operator delete((void *)STACK[0x1760]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1778]);
  if (v80[2103] < 0) {
    operator delete((void *)STACK[0x17B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x17C8]);
  if (v80[2183] < 0) {
    operator delete((void *)STACK[0x1800]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1818]);
  if (v80[2263] < 0) {
    operator delete((void *)STACK[0x1850]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1868]);
  if (v80[2343] < 0) {
    operator delete((void *)STACK[0x18A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x18B8]);
  if (v80[2423] < 0) {
    operator delete((void *)STACK[0x18F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1908]);
  if (v80[2503] < 0) {
    operator delete((void *)STACK[0x1940]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1958]);
  if (v80[2583] < 0) {
    operator delete((void *)STACK[0x1990]);
  }
  sub_1001A951C((uint64_t)&STACK[0x19A8]);
  if (v80[2663] < 0) {
    operator delete((void *)STACK[0x19E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x19F8]);
  if (v80[2743] < 0) {
    operator delete((void *)STACK[0x1A30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1A48]);
  if (v80[2823] < 0) {
    operator delete((void *)STACK[0x1A80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1A98]);
  if (v80[2903] < 0) {
    operator delete((void *)STACK[0x1AD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1AE8]);
  if (v80[2983] < 0) {
    operator delete((void *)STACK[0x1B20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1B38]);
  if (v80[3063] < 0) {
    operator delete((void *)STACK[0x1B70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1B88]);
  if (v80[3143] < 0) {
    operator delete((void *)STACK[0x1BC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1BD8]);
  if (v80[3223] < 0) {
    operator delete((void *)STACK[0x1C10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1C28]);
  if (v80[3303] < 0) {
    operator delete((void *)STACK[0x1C60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1C78]);
  if (v80[3383] < 0) {
    operator delete((void *)STACK[0x1CB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1CC8]);
  if (v80[3463] < 0) {
    operator delete((void *)STACK[0x1D00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1D18]);
  if (v80[3543] < 0) {
    operator delete((void *)STACK[0x1D50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1D68]);
  if (v80[3623] < 0) {
    operator delete((void *)STACK[0x1DA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1DB8]);
  if (v80[3703] < 0) {
    operator delete((void *)STACK[0x1DF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1E08]);
  if (v80[3783] < 0) {
    operator delete((void *)STACK[0x1E40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1E58]);
  if (v80[3863] < 0) {
    operator delete((void *)STACK[0x1E90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1EA8]);
  if (v80[3943] < 0) {
    operator delete((void *)STACK[0x1EE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1EF8]);
  if (v80[4023] < 0) {
    operator delete((void *)STACK[0x1F30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1F48]);
  if (v79[23] < 0) {
    operator delete((void *)STACK[0x1F80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1F98]);
  if (v79[103] < 0) {
    operator delete((void *)STACK[0x1FD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x1FE8]);
  if (v79[183] < 0) {
    operator delete((void *)STACK[0x2020]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2038]);
  if (v79[263] < 0) {
    operator delete((void *)STACK[0x2070]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2088]);
  if (v79[343] < 0) {
    operator delete((void *)STACK[0x20C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x20D8]);
  if (v79[423] < 0) {
    operator delete((void *)STACK[0x2110]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2128]);
  if (v79[503] < 0) {
    operator delete((void *)STACK[0x2160]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2178]);
  if (v79[583] < 0) {
    operator delete((void *)STACK[0x21B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x21C8]);
  if (v79[663] < 0) {
    operator delete((void *)STACK[0x2200]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2218]);
  if (v79[743] < 0) {
    operator delete((void *)STACK[0x2250]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2268]);
  if (v79[823] < 0) {
    operator delete((void *)STACK[0x22A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x22B8]);
  if (v79[903] < 0) {
    operator delete((void *)STACK[0x22F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2308]);
  if (v79[983] < 0) {
    operator delete((void *)STACK[0x2340]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2358]);
  if (v79[1063] < 0) {
    operator delete((void *)STACK[0x2390]);
  }
  sub_1001A951C((uint64_t)&STACK[0x23A8]);
  if (v79[1143] < 0) {
    operator delete((void *)STACK[0x23E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x23F8]);
  if (v79[1223] < 0) {
    operator delete((void *)STACK[0x2430]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2448]);
  if (v79[1303] < 0) {
    operator delete((void *)STACK[0x2480]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2498]);
  if (v79[1383] < 0) {
    operator delete((void *)STACK[0x24D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x24E8]);
  if (v79[1463] < 0) {
    operator delete((void *)STACK[0x2520]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2538]);
  if (v79[1543] < 0) {
    operator delete((void *)STACK[0x2570]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2588]);
  if (v79[1623] < 0) {
    operator delete((void *)STACK[0x25C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x25D8]);
  if (v79[1703] < 0) {
    operator delete((void *)STACK[0x2610]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2628]);
  if (v79[1783] < 0) {
    operator delete((void *)STACK[0x2660]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2678]);
  if (v79[1863] < 0) {
    operator delete((void *)STACK[0x26B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x26C8]);
  if (v79[1943] < 0) {
    operator delete((void *)STACK[0x2700]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2718]);
  if (v79[2023] < 0) {
    operator delete((void *)STACK[0x2750]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2768]);
  if (v79[2103] < 0) {
    operator delete((void *)STACK[0x27A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x27B8]);
  if (v79[2183] < 0) {
    operator delete((void *)STACK[0x27F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2808]);
  if (v79[2263] < 0) {
    operator delete((void *)STACK[0x2840]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2858]);
  if (v79[2343] < 0) {
    operator delete((void *)STACK[0x2890]);
  }
  sub_1001A951C((uint64_t)&STACK[0x28A8]);
  if (v79[2423] < 0) {
    operator delete((void *)STACK[0x28E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x28F8]);
  if (v79[2503] < 0) {
    operator delete((void *)STACK[0x2930]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2948]);
  if (v79[2583] < 0) {
    operator delete((void *)STACK[0x2980]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2998]);
  if (v79[2663] < 0) {
    operator delete((void *)STACK[0x29D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x29E8]);
  if (v79[2743] < 0) {
    operator delete((void *)STACK[0x2A20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2A38]);
  if (v79[2823] < 0) {
    operator delete((void *)STACK[0x2A70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2A88]);
  if (v79[2903] < 0) {
    operator delete((void *)STACK[0x2AC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2AD8]);
  if (v79[2983] < 0) {
    operator delete((void *)STACK[0x2B10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2B28]);
  if (v79[3063] < 0) {
    operator delete((void *)STACK[0x2B60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2B78]);
  if (v79[3143] < 0) {
    operator delete((void *)STACK[0x2BB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2BC8]);
  if (v79[3223] < 0) {
    operator delete((void *)STACK[0x2C00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2C18]);
  if (v79[3303] < 0) {
    operator delete((void *)STACK[0x2C50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2C68]);
  if (v79[3383] < 0) {
    operator delete((void *)STACK[0x2CA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2CB8]);
  if (v79[3463] < 0) {
    operator delete((void *)STACK[0x2CF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D08]);
  if (v79[3543] < 0) {
    operator delete((void *)STACK[0x2D40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2D58]);
  if (v79[3623] < 0) {
    operator delete((void *)STACK[0x2D90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2DA8]);
  if (v79[3703] < 0) {
    operator delete((void *)STACK[0x2DE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2DF8]);
  if (v79[3783] < 0) {
    operator delete((void *)STACK[0x2E30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2E48]);
  if (v79[3863] < 0) {
    operator delete((void *)STACK[0x2E80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2E98]);
  if (v79[3943] < 0) {
    operator delete((void *)STACK[0x2ED0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2EE8]);
  if (v79[4023] < 0) {
    operator delete((void *)STACK[0x2F20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2F38]);
  if (v78[23] < 0) {
    operator delete((void *)STACK[0x2F70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2F88]);
  if (v78[103] < 0) {
    operator delete((void *)STACK[0x2FC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x2FD8]);
  if (v78[183] < 0) {
    operator delete((void *)STACK[0x3010]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3028]);
  if (v78[263] < 0) {
    operator delete((void *)STACK[0x3060]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3078]);
  if (v78[343] < 0) {
    operator delete((void *)STACK[0x30B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x30C8]);
  if (v78[423] < 0) {
    operator delete((void *)STACK[0x3100]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3118]);
  if (v78[503] < 0) {
    operator delete((void *)STACK[0x3150]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3168]);
  if (v78[583] < 0) {
    operator delete((void *)STACK[0x31A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x31B8]);
  if (v78[663] < 0) {
    operator delete((void *)STACK[0x31F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3208]);
  if (v78[743] < 0) {
    operator delete((void *)STACK[0x3240]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3258]);
  if (v78[823] < 0) {
    operator delete((void *)STACK[0x3290]);
  }
  sub_1001A951C((uint64_t)&STACK[0x32A8]);
  if (v78[903] < 0) {
    operator delete((void *)STACK[0x32E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x32F8]);
  if (v78[983] < 0) {
    operator delete((void *)STACK[0x3330]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3348]);
  if (v78[1063] < 0) {
    operator delete((void *)STACK[0x3380]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3398]);
  if (v78[1143] < 0) {
    operator delete((void *)STACK[0x33D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x33E8]);
  if (v78[1223] < 0) {
    operator delete((void *)STACK[0x3420]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3438]);
  if (v78[1303] < 0) {
    operator delete((void *)STACK[0x3470]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3488]);
  if (v78[1383] < 0) {
    operator delete((void *)STACK[0x34C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x34D8]);
  if (v78[1463] < 0) {
    operator delete((void *)STACK[0x3510]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3528]);
  if (v78[1543] < 0) {
    operator delete((void *)STACK[0x3560]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3578]);
  if (v78[1623] < 0) {
    operator delete((void *)STACK[0x35B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x35C8]);
  if (v78[1703] < 0) {
    operator delete((void *)STACK[0x3600]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3618]);
  if (v78[1783] < 0) {
    operator delete((void *)STACK[0x3650]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3668]);
  if (v78[1863] < 0) {
    operator delete((void *)STACK[0x36A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x36B8]);
  if (v78[1943] < 0) {
    operator delete((void *)STACK[0x36F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3708]);
  if (v78[2023] < 0) {
    operator delete((void *)STACK[0x3740]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3758]);
  if (v78[2103] < 0) {
    operator delete((void *)STACK[0x3790]);
  }
  sub_1001A951C((uint64_t)&STACK[0x37A8]);
  if (v78[2183] < 0) {
    operator delete((void *)STACK[0x37E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x37F8]);
  if (v78[2263] < 0) {
    operator delete((void *)STACK[0x3830]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3848]);
  if (v78[2343] < 0) {
    operator delete((void *)STACK[0x3880]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3898]);
  if (v78[2423] < 0) {
    operator delete((void *)STACK[0x38D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x38E8]);
  if (v78[2503] < 0) {
    operator delete((void *)STACK[0x3920]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3938]);
  if (v78[2583] < 0) {
    operator delete((void *)STACK[0x3970]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3988]);
  if (v78[2663] < 0) {
    operator delete((void *)STACK[0x39C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x39D8]);
  if (v78[2743] < 0) {
    operator delete((void *)STACK[0x3A10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3A28]);
  if (v78[2823] < 0) {
    operator delete((void *)STACK[0x3A60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3A78]);
  if (v78[2903] < 0) {
    operator delete((void *)STACK[0x3AB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3AC8]);
  if (v78[2983] < 0) {
    operator delete((void *)STACK[0x3B00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3B18]);
  if (v78[3063] < 0) {
    operator delete((void *)STACK[0x3B50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3B68]);
  if (v78[3143] < 0) {
    operator delete((void *)STACK[0x3BA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3BB8]);
  if (v78[3223] < 0) {
    operator delete((void *)STACK[0x3BF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C08]);
  if (v78[3303] < 0) {
    operator delete((void *)STACK[0x3C40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3C58]);
  if (v78[3383] < 0) {
    operator delete((void *)STACK[0x3C90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3CA8]);
  if (v78[3463] < 0) {
    operator delete((void *)STACK[0x3CE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3CF8]);
  if (v78[3543] < 0) {
    operator delete((void *)STACK[0x3D30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3D48]);
  if (v78[3623] < 0) {
    operator delete((void *)STACK[0x3D80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3D98]);
  if (v78[3703] < 0) {
    operator delete((void *)STACK[0x3DD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3DE8]);
  if (v78[3783] < 0) {
    operator delete((void *)STACK[0x3E20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3E38]);
  if (v78[3863] < 0) {
    operator delete((void *)STACK[0x3E70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3E88]);
  if (v78[3943] < 0) {
    operator delete((void *)STACK[0x3EC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3ED8]);
  if (v78[4023] < 0) {
    operator delete((void *)STACK[0x3F10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3F28]);
  if (v77[23] < 0) {
    operator delete((void *)STACK[0x3F60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3F78]);
  if (v77[103] < 0) {
    operator delete((void *)STACK[0x3FB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x3FC8]);
  if (v77[183] < 0) {
    operator delete((void *)STACK[0x4000]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4018]);
  if (v77[263] < 0) {
    operator delete((void *)STACK[0x4050]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4068]);
  if (v77[343] < 0) {
    operator delete((void *)STACK[0x40A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x40B8]);
  if (v77[423] < 0) {
    operator delete((void *)STACK[0x40F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4108]);
  if (v77[503] < 0) {
    operator delete((void *)STACK[0x4140]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4158]);
  if (v77[583] < 0) {
    operator delete((void *)STACK[0x4190]);
  }
  sub_1001A951C((uint64_t)&STACK[0x41A8]);
  if (v77[663] < 0) {
    operator delete((void *)STACK[0x41E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x41F8]);
  if (v77[743] < 0) {
    operator delete((void *)STACK[0x4230]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4248]);
  if (v77[823] < 0) {
    operator delete((void *)STACK[0x4280]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4298]);
  if (v77[903] < 0) {
    operator delete((void *)STACK[0x42D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x42E8]);
  if (v77[983] < 0) {
    operator delete((void *)STACK[0x4320]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4338]);
  if (v77[1063] < 0) {
    operator delete((void *)STACK[0x4370]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4388]);
  if (v77[1143] < 0) {
    operator delete((void *)STACK[0x43C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x43D8]);
  if (v77[1223] < 0) {
    operator delete((void *)STACK[0x4410]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4428]);
  if (v77[1303] < 0) {
    operator delete((void *)STACK[0x4460]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4478]);
  if (v77[1383] < 0) {
    operator delete((void *)STACK[0x44B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x44C8]);
  if (v77[1463] < 0) {
    operator delete((void *)STACK[0x4500]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4518]);
  if (v77[1543] < 0) {
    operator delete((void *)STACK[0x4550]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4568]);
  if (v77[1623] < 0) {
    operator delete((void *)STACK[0x45A0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x45B8]);
  if (v77[1703] < 0) {
    operator delete((void *)STACK[0x45F0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4608]);
  if (v77[1783] < 0) {
    operator delete((void *)STACK[0x4640]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4658]);
  if (v77[1863] < 0) {
    operator delete((void *)STACK[0x4690]);
  }
  sub_1001A951C((uint64_t)&STACK[0x46A8]);
  if (v77[1943] < 0) {
    operator delete((void *)STACK[0x46E0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x46F8]);
  if (v77[2023] < 0) {
    operator delete((void *)STACK[0x4730]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4748]);
  if (v77[2103] < 0) {
    operator delete((void *)STACK[0x4780]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4798]);
  if (v77[2183] < 0) {
    operator delete((void *)STACK[0x47D0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x47E8]);
  if (v77[2263] < 0) {
    operator delete((void *)STACK[0x4820]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4838]);
  if (v77[2343] < 0) {
    operator delete((void *)STACK[0x4870]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4888]);
  if (v77[2423] < 0) {
    operator delete((void *)STACK[0x48C0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x48D8]);
  if (v77[2503] < 0) {
    operator delete((void *)STACK[0x4910]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4928]);
  if (v77[2583] < 0) {
    operator delete((void *)STACK[0x4960]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4978]);
  if (v77[2663] < 0) {
    operator delete((void *)STACK[0x49B0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x49C8]);
  if (v77[2743] < 0) {
    operator delete((void *)STACK[0x4A00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4A18]);
  if (v77[2823] < 0) {
    operator delete((void *)STACK[0x4A50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4A68]);
  if (v77[2903] < 0) {
    operator delete((void *)STACK[0x4AA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4AB8]);
  if (v77[2983] < 0) {
    operator delete((void *)STACK[0x4AF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B08]);
  if (v77[3063] < 0) {
    operator delete((void *)STACK[0x4B40]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4B58]);
  if (v77[3143] < 0) {
    operator delete((void *)STACK[0x4B90]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4BA8]);
  if (v77[3223] < 0) {
    operator delete((void *)STACK[0x4BE0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4BF8]);
  if (v77[3303] < 0) {
    operator delete((void *)STACK[0x4C30]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4C48]);
  if (v77[3383] < 0) {
    operator delete((void *)STACK[0x4C80]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4C98]);
  if (v77[3463] < 0) {
    operator delete((void *)STACK[0x4CD0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4CE8]);
  if (v77[3543] < 0) {
    operator delete((void *)STACK[0x4D20]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4D38]);
  if (v77[3623] < 0) {
    operator delete((void *)STACK[0x4D70]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4D88]);
  if (v77[3703] < 0) {
    operator delete((void *)STACK[0x4DC0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4DD8]);
  if (v77[3783] < 0) {
    operator delete((void *)STACK[0x4E10]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4E28]);
  if (v77[3863] < 0) {
    operator delete((void *)STACK[0x4E60]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4E78]);
  if (v77[3943] < 0) {
    operator delete((void *)STACK[0x4EB0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4EC8]);
  if (v77[4023] < 0) {
    operator delete((void *)STACK[0x4F00]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4F18]);
  if (v76[23] < 0) {
    operator delete((void *)STACK[0x4F50]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4F68]);
  if (v76[103] < 0) {
    operator delete((void *)STACK[0x4FA0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x4FB8]);
  if (v76[183] < 0) {
    operator delete((void *)STACK[0x4FF0]);
  }
  sub_1001A951C((uint64_t)&STACK[0x5008]);
  if (v76[263] < 0) {
    operator delete((void *)STACK[0x5040]);
  }
  _Unwind_Resume(a1);
}

void sub_100349108( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003475F0LL);
}

void sub_10034912C()
{
}

void sub_10034913C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100347608LL);
}

void sub_100349160()
{
}

void sub_100349170( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100347620LL);
}

void sub_100349194()
{
}

void sub_1003491A4()
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  JUMPOUT(0x100347638LL);
}

void sub_1003491C8()
{
}

void sub_1003491D8()
{
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  JUMPOUT(0x100347650LL);
}

void sub_1003491FC()
{
}

void sub_10034920C()
{
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  JUMPOUT(0x100347668LL);
}

void sub_100349230()
{
}

void sub_100349240()
{
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  JUMPOUT(0x100347680LL);
}

void sub_100349264()
{
}

void sub_100349274()
{
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  JUMPOUT(0x100347698LL);
}

void sub_100349298()
{
}

void sub_1003492A8()
{
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  JUMPOUT(0x1003476B0LL);
}

void sub_1003492CC()
{
}

void sub_1003492DC()
{
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  JUMPOUT(0x1003476C8LL);
}

void sub_100349300()
{
}

void sub_100349310()
{
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  JUMPOUT(0x1003476E0LL);
}

void sub_100349334()
{
}

void sub_100349344()
{
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  JUMPOUT(0x1003476F8LL);
}

void sub_100349368()
{
}

void sub_100349378()
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  JUMPOUT(0x100347710LL);
}

void sub_10034939C()
{
}

void sub_1003493AC()
{
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete((void *)STACK[0x558]);
  }
  JUMPOUT(0x100347728LL);
}

void sub_1003493D0()
{
}

void sub_1003493E0()
{
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  JUMPOUT(0x100347740LL);
}

void sub_100349404()
{
}

void sub_100349414()
{
  if (SLOBYTE(STACK[0x60F]) < 0) {
    operator delete((void *)STACK[0x5F8]);
  }
  JUMPOUT(0x100347758LL);
}

void sub_100349438()
{
}

void sub_100349448()
{
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  JUMPOUT(0x100347770LL);
}

void sub_10034946C()
{
}

void sub_10034947C()
{
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  JUMPOUT(0x100347788LL);
}

void sub_1003494A0()
{
}

void sub_1003494B0()
{
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  JUMPOUT(0x1003477A0LL);
}

void sub_1003494D4()
{
}

void sub_1003494E4()
{
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  JUMPOUT(0x1003477B8LL);
}

void sub_100349508()
{
}

void sub_100349518()
{
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  JUMPOUT(0x1003477D0LL);
}

void sub_10034953C()
{
}

void sub_10034954C()
{
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  JUMPOUT(0x1003477E8LL);
}

void sub_100349570()
{
}

void sub_100349580()
{
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  JUMPOUT(0x100347800LL);
}

void sub_1003495A4()
{
}

void sub_1003495B4()
{
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  JUMPOUT(0x100347818LL);
}

void sub_1003495D8()
{
}

void sub_1003495E8()
{
  if (SLOBYTE(STACK[0x8DF]) < 0) {
    operator delete((void *)STACK[0x8C8]);
  }
  JUMPOUT(0x100347830LL);
}

void sub_10034960C()
{
}

void sub_10034961C()
{
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  JUMPOUT(0x100347848LL);
}

void sub_100349640()
{
}

void sub_100349650()
{
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  JUMPOUT(0x100347860LL);
}

void sub_100349674()
{
}

void sub_100349684()
{
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  JUMPOUT(0x100347878LL);
}

void sub_1003496A8()
{
}

void sub_1003496B8()
{
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  JUMPOUT(0x100347890LL);
}

void sub_1003496DC()
{
}

void sub_1003496EC()
{
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  JUMPOUT(0x1003478A8LL);
}

void sub_100349710()
{
}

void sub_100349720()
{
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  JUMPOUT(0x1003478C0LL);
}

void sub_100349744()
{
}

void sub_100349754()
{
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  JUMPOUT(0x1003478D8LL);
}

void sub_100349778()
{
}

void sub_100349788()
{
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  JUMPOUT(0x1003478F0LL);
}

void sub_1003497AC()
{
}

void sub_1003497BC()
{
  if (SLOBYTE(STACK[0xBAF]) < 0) {
    operator delete((void *)STACK[0xB98]);
  }
  JUMPOUT(0x100347908LL);
}

void sub_1003497E0()
{
}

void sub_1003497F0()
{
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  JUMPOUT(0x100347920LL);
}

void sub_100349814()
{
}

void sub_100349824()
{
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  JUMPOUT(0x100347938LL);
}

void sub_100349848()
{
}

void sub_100349858()
{
  if (SLOBYTE(STACK[0xC9F]) < 0) {
    operator delete((void *)STACK[0xC88]);
  }
  JUMPOUT(0x100347950LL);
}

void sub_10034987C()
{
}

void sub_10034988C()
{
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  JUMPOUT(0x100347968LL);
}

void sub_1003498B0()
{
}

void sub_1003498C0()
{
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  JUMPOUT(0x100347980LL);
}

void sub_1003498E4()
{
}

void sub_1003498F4()
{
  if (SLOBYTE(STACK[0xD8F]) < 0) {
    operator delete((void *)STACK[0xD78]);
  }
  JUMPOUT(0x100347998LL);
}

void sub_100349918()
{
}

void sub_100349928()
{
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  JUMPOUT(0x1003479B0LL);
}

void sub_10034994C()
{
}

void sub_10034995C()
{
  if (SLOBYTE(STACK[0xE2F]) < 0) {
    operator delete((void *)STACK[0xE18]);
  }
  JUMPOUT(0x1003479C8LL);
}

void sub_100349980()
{
}

void sub_100349990()
{
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  JUMPOUT(0x1003479E0LL);
}

void sub_1003499B4()
{
}

void sub_1003499C4()
{
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  JUMPOUT(0x1003479F8LL);
}

void sub_1003499E8()
{
}

void sub_1003499F8()
{
  if (SLOBYTE(STACK[0xF1F]) < 0) {
    operator delete((void *)STACK[0xF08]);
  }
  JUMPOUT(0x100347A10LL);
}

void sub_100349A1C()
{
}

void sub_100349A2C()
{
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  JUMPOUT(0x100347A28LL);
}

void sub_100349A50()
{
}

void sub_100349A60()
{
}

void sub_100349A84()
{
}

void sub_100349A94()
{
}

void sub_100349AB8()
{
}

void sub_100349AC8()
{
}

void sub_100349AEC()
{
}

void sub_100349AFC()
{
}

void sub_100349B20()
{
}

void sub_100349B30()
{
}

void sub_100349B54()
{
}

void sub_100349B64()
{
}

void sub_100349B88()
{
}

void sub_100349B98()
{
}

void sub_100349BBC()
{
}

void sub_100349BCC()
{
}

void sub_100349BF0()
{
}

void sub_100349C00()
{
}

void sub_100349C24()
{
}

void sub_100349C34()
{
}

void sub_100349C58()
{
}

void sub_100349C68()
{
}

void sub_100349C8C()
{
}

void sub_100349C9C()
{
}

void sub_100349CC0()
{
}

void sub_100349CD0()
{
}

void sub_100349CF4()
{
}

void sub_100349D04()
{
}

void sub_100349D28()
{
}

void sub_100349D38()
{
}

void sub_100349D5C()
{
}

void sub_100349D6C()
{
}

void sub_100349D90()
{
}

void sub_100349DA0()
{
}

void sub_100349DC4()
{
}

void sub_100349DD4()
{
}

void sub_100349DF8()
{
}

void sub_100349E08()
{
}

void sub_100349E2C()
{
}

void sub_100349E3C()
{
}

void sub_100349E60()
{
}

void sub_100349E70()
{
}

void sub_100349E94()
{
}

void sub_100349EA4()
{
}

void sub_100349EC8()
{
}

void sub_100349ED8()
{
}

void sub_100349EFC()
{
}

void sub_100349F0C()
{
}

void sub_100349F30()
{
}

void sub_100349F40()
{
}

void sub_100349F64()
{
}

void sub_100349F74()
{
}

void sub_100349F98()
{
}

void sub_100349FA8()
{
}

void sub_100349FCC()
{
}

void sub_100349FDC()
{
}

void sub_10034A000()
{
}

void sub_10034A010()
{
}

void sub_10034A034()
{
}

void sub_10034A044()
{
}

void sub_10034A068()
{
}

void sub_10034A078()
{
}

void sub_10034A09C()
{
}

void sub_10034A0AC()
{
}

void sub_10034A0D0()
{
}

void sub_10034A0E0()
{
}

void sub_10034A104()
{
}

void sub_10034A114()
{
}

void sub_10034A138()
{
}

void sub_10034A148()
{
}

void sub_10034A16C()
{
}

void sub_10034A17C()
{
}

void sub_10034A1A0()
{
}

void sub_10034A1B0()
{
}

void sub_10034A1D4()
{
}

void sub_10034A1E4()
{
}

void sub_10034A208()
{
}

void sub_10034A218()
{
}

void sub_10034A23C()
{
}

void sub_10034A24C()
{
}

void sub_10034A270()
{
}

void sub_10034A280()
{
}

void sub_10034A2A4()
{
}

void sub_10034A2B4()
{
}

void sub_10034A2D8()
{
}

void sub_10034A2E8()
{
}

void sub_10034A30C()
{
}

void sub_10034A31C()
{
}

void sub_10034A340()
{
}

void sub_10034A350()
{
}

void sub_10034A374()
{
}

void sub_10034A384()
{
}

void sub_10034A3A8()
{
}

void sub_10034A3B8()
{
}

void sub_10034A3DC()
{
}

void sub_10034A3EC()
{
}

void sub_10034A410()
{
}

void sub_10034A420()
{
}

void sub_10034A444()
{
}

void sub_10034A454()
{
}

void sub_10034A478()
{
}

void sub_10034A488()
{
}

void sub_10034A4AC()
{
}

void sub_10034A4BC()
{
}

void sub_10034A4E0()
{
}

void sub_10034A4F0()
{
}

void sub_10034A514()
{
}

void sub_10034A524()
{
}

void sub_10034A548()
{
}

void sub_10034A558()
{
}

void sub_10034A57C()
{
}

void sub_10034A58C()
{
}

void sub_10034A5B0()
{
}

void sub_10034A5C0()
{
}

void sub_10034A5E4()
{
}

void sub_10034A5F4()
{
}

void sub_10034A618()
{
}

void sub_10034A628()
{
}

void sub_10034A64C()
{
}

void sub_10034A65C()
{
}

void sub_10034A680()
{
}

void sub_10034A690()
{
}

void sub_10034A6B4()
{
}

void sub_10034A6C4()
{
}

void sub_10034A6E8()
{
}

void sub_10034A6F8()
{
}

void sub_10034A71C()
{
}

void sub_10034A72C()
{
}

void sub_10034A750()
{
}

void sub_10034A760()
{
}

void sub_10034A784()
{
}

void sub_10034A794()
{
}

void sub_10034A7B8()
{
}

void sub_10034A7C8()
{
}

void sub_10034A7EC()
{
}

void sub_10034A7FC()
{
}

void sub_10034A820()
{
}

void sub_10034A830()
{
}

void sub_10034A854()
{
}

void sub_10034A864()
{
}

void sub_10034A888()
{
}

void sub_10034A898()
{
}

void sub_10034A8BC()
{
}

void sub_10034A8CC()
{
}

void sub_10034A8F0()
{
}

void sub_10034A900()
{
}

void sub_10034A924()
{
}

void sub_10034A934()
{
}

void sub_10034A958()
{
}

void sub_10034A968()
{
}

void sub_10034A98C()
{
}

void sub_10034A99C()
{
}

void sub_10034A9C0()
{
}

void sub_10034A9D0()
{
}

void sub_10034A9F4()
{
}

void sub_10034AA04()
{
}

void sub_10034AA28()
{
}

void sub_10034AA38()
{
}

void sub_10034AA5C()
{
}

void sub_10034AA6C()
{
}

void sub_10034AA90()
{
}

void sub_10034AAA0()
{
}

void sub_10034AAC4()
{
}

void sub_10034AAD4()
{
}

void sub_10034AAF8()
{
}

void sub_10034AB08()
{
}

void sub_10034AB2C()
{
}

void sub_10034AB3C()
{
}

void sub_10034AB60()
{
}

void sub_10034AB70()
{
}

void sub_10034AB94()
{
}

void sub_10034ABA4()
{
}

void sub_10034ABC8()
{
}

void sub_10034ABD8()
{
}

void sub_10034ABFC()
{
}

void sub_10034AC0C()
{
}

void sub_10034AC30()
{
}

void sub_10034AC40()
{
}

void sub_10034AC64()
{
}

void sub_10034AC74()
{
}

void sub_10034AC98()
{
}

void sub_10034ACA8()
{
}

void sub_10034ACCC()
{
}

void sub_10034ACDC()
{
}

void sub_10034AD00()
{
}

void sub_10034AD10()
{
}

void sub_10034AD34()
{
}

void sub_10034AD44()
{
}

void sub_10034AD68()
{
}

void sub_10034AD78()
{
}

void sub_10034AD9C()
{
}

void sub_10034ADAC()
{
}

void sub_10034ADD0()
{
}

void sub_10034ADE0()
{
}

void sub_10034AE04()
{
}

void sub_10034AE14()
{
}

void sub_10034AE38()
{
}

void sub_10034AE48()
{
}

void sub_10034AE6C()
{
}

void sub_10034AE7C()
{
}

void sub_10034AEA0()
{
}

void sub_10034AEB0()
{
}

void sub_10034AED4()
{
}

void sub_10034AEE4()
{
}

void sub_10034AF08()
{
}

void sub_10034AF18()
{
}

void sub_10034AF3C()
{
}

void sub_10034AF4C()
{
}

void sub_10034AF70()
{
}

void sub_10034AF80()
{
}

void sub_10034AFA4()
{
}

void sub_10034AFB4()
{
}

void sub_10034AFD8()
{
}

void sub_10034AFE8()
{
}

void sub_10034B00C()
{
}

void sub_10034B01C()
{
}

void sub_10034B040()
{
}

void sub_10034B050()
{
}

void sub_10034B074()
{
}

void sub_10034B084()
{
}

void sub_10034B0A8()
{
}

void sub_10034B0B8()
{
}

void sub_10034B0DC()
{
}

void sub_10034B0EC()
{
}

void sub_10034B110()
{
}

void sub_10034B120()
{
}

void sub_10034B144()
{
}

void sub_10034B154()
{
}

void sub_10034B178()
{
}

void sub_10034B188()
{
}

void sub_10034B1AC()
{
}

void sub_10034B1BC()
{
}

void sub_10034B1E0()
{
}

void sub_10034B1F0()
{
}

void sub_10034B214()
{
}

void sub_10034B224()
{
}

void sub_10034B248()
{
}

void sub_10034B258()
{
}

void sub_10034B27C()
{
}

void sub_10034B28C()
{
}

void sub_10034B2B0()
{
}

void sub_10034B2C0()
{
}

void sub_10034B2E4()
{
}

void sub_10034B2F4()
{
}

void sub_10034B318()
{
}

void sub_10034B328()
{
}

void sub_10034B34C()
{
}

void sub_10034B35C()
{
}

void sub_10034B380()
{
}

void sub_10034B390()
{
}

void sub_10034B3B4()
{
}

void sub_10034B3C4()
{
}

void sub_10034B3E8()
{
}

void sub_10034B3F8()
{
}

void sub_10034B41C()
{
}

void sub_10034B42C()
{
}

void sub_10034B450()
{
}

void sub_10034B460()
{
}

void sub_10034B484()
{
}

void sub_10034B494()
{
}

void sub_10034B4B8()
{
}

void sub_10034B4C8()
{
}

void sub_10034B4EC()
{
}

void sub_10034B4FC()
{
}

void sub_10034B520()
{
}

void sub_10034B530()
{
}

void sub_10034B554()
{
}

void sub_10034B564()
{
}

void sub_10034B588()
{
}

void sub_10034B598()
{
}

void sub_10034B5BC()
{
}

void sub_10034B5CC()
{
}

void sub_10034B5F0()
{
}

void sub_10034B600()
{
}

void sub_10034B624()
{
}

void sub_10034B634()
{
}

void sub_10034B658()
{
}

void sub_10034B668()
{
}

void sub_10034B68C()
{
}

void sub_10034B69C()
{
}

void sub_10034B6C0()
{
}

void sub_10034B6D0()
{
}

void sub_10034B6F4()
{
}

void sub_10034B704()
{
}

void sub_10034B728()
{
}

void sub_10034B738()
{
}

void sub_10034B75C()
{
}

void sub_10034B76C()
{
}

void sub_10034B790()
{
}

void sub_10034B7A0()
{
}

void sub_10034B7C4()
{
}

void sub_10034B7D4()
{
}

void sub_10034B7F8()
{
}

void sub_10034B808()
{
}

void sub_10034B82C()
{
}

void sub_10034B83C()
{
}

void sub_10034B860()
{
}

void sub_10034B870()
{
}

void sub_10034B894()
{
}

void sub_10034B8A4()
{
}

void sub_10034B8C8()
{
}

void sub_10034B8D8()
{
}

void sub_10034B8FC()
{
}

void sub_10034B90C()
{
}

void sub_10034B930()
{
}

void sub_10034B940()
{
}

void sub_10034B964()
{
}

void sub_10034B974()
{
}

void sub_10034B998()
{
}

void sub_10034B9A8()
{
}

void sub_10034B9CC()
{
}

void sub_10034B9DC()
{
}

void sub_10034BA00()
{
}

void sub_10034BA10()
{
}

void sub_10034BA34()
{
}

void sub_10034BA44()
{
}

void sub_10034BA68()
{
}

void sub_10034BA78()
{
}

void sub_10034BA9C()
{
}

void sub_10034BAAC()
{
}

void sub_10034BAD0()
{
}

void sub_10034BAE0()
{
}

void sub_10034BB04()
{
}

void sub_10034BB14()
{
}

void sub_10034BB38()
{
}

void sub_10034BB48()
{
}

void sub_10034BB6C()
{
}

void sub_10034BB7C()
{
}

void sub_10034BBA0()
{
}

void sub_10034BBB0()
{
}

void sub_10034BBD4()
{
}

void sub_10034BBE4()
{
}

void sub_10034BC08()
{
}

void sub_10034BC18()
{
}

void sub_10034BC3C()
{
}

void sub_10034BC4C()
{
}

void sub_10034BC70()
{
}

void sub_10034BC80()
{
}

void sub_10034BCA4()
{
}

void sub_10034BCB4()
{
}

void sub_10034BCD8()
{
}

void sub_10034BCE8()
{
}

void sub_10034BD0C()
{
}

void sub_10034BD1C()
{
}

void sub_10034BD40()
{
}

void sub_10034BD50()
{
}

void sub_10034BD74()
{
}

void sub_10034BD84()
{
}

void sub_10034BDA8()
{
}

void sub_10034BDB8()
{
}

void sub_10034BDDC()
{
}

void sub_10034BDEC()
{
}

void sub_10034BE10()
{
}

void sub_10034BE20()
{
}

void sub_10034BE44()
{
}

void sub_10034BE54()
{
}

void sub_10034BE78()
{
}

void sub_10034BE88()
{
}

void sub_10034BEAC()
{
}

void sub_10034BEBC()
{
}

void sub_10034BEE0()
{
}

void sub_10034BEF0()
{
}

void sub_10034BF14()
{
}

void sub_10034BF24()
{
}

void sub_10034BF48()
{
}

void sub_10034BF58()
{
}

void sub_10034BF7C()
{
}

void sub_10034BF8C()
{
}

void sub_10034BFB0()
{
}

void sub_10034BFC0()
{
}

void sub_10034BFE4()
{
}

void sub_10034BFF4()
{
}

void sub_10034C018()
{
}

void sub_10034C028()
{
}

void sub_10034C04C()
{
}

void sub_10034C05C()
{
}

void sub_10034C080()
{
}

void sub_10034C090()
{
}

void sub_10034C0B4()
{
}

void sub_10034C0C4()
{
}

void sub_10034C0E8()
{
}

void sub_10034C0F8()
{
}

void sub_10034C11C()
{
}

void sub_10034C12C()
{
}

void sub_10034C150()
{
}

void sub_10034C160()
{
}

void sub_10034C184()
{
}

void sub_10034C194()
{
}

void sub_10034C1B8()
{
}

void sub_10034C1C8()
{
}

void sub_10034C1EC()
{
}

void sub_10034C1FC()
{
}

void sub_10034C220()
{
}

void sub_10034C230()
{
}

void sub_10034C254()
{
}

void sub_10034C264()
{
}

void sub_10034C288()
{
}

void sub_10034C298()
{
}

void sub_10034C2BC()
{
}

void sub_10034C2CC()
{
}

void sub_10034C2F0()
{
}

void sub_10034C300()
{
}

void sub_10034C324()
{
}

void sub_10034C334()
{
}

void sub_10034C358()
{
}

void sub_10034C368()
{
}

void sub_10034C38C()
{
}

void sub_10034C39C()
{
}

void sub_10034C3C0()
{
}

void sub_10034C3D0()
{
}

void sub_10034C3F4()
{
}

void sub_10034C404()
{
}

void sub_10034C428()
{
}

void sub_10034C434()
{
}

void sub_10034C448()
{
}

void sub_10034C474()
{
}

uint64_t sub_10034C47C()
{
  return sub_10033D7B4();
}

uint64_t sub_10034C490@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  char v4 = sub_100046B94(&v64, (uint64_t)"Hello response:", 15LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  __int128 v5 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  __int16 v7 = sub_100046B94(&v64, (uint64_t)"    Rose firmware version: ", 27LL);
  else {
    std::string __p = *(std::string *)a1;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v9 = strlen((const char *)p_p);
  char v10 = sub_100046B94(v7, (uint64_t)p_p, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
  char v11 = std::locale::use_facet(&v67, &std::ctype<char>::id);
  uint64_t v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10LL);
  std::locale::~locale(&v67);
  std::ostream::put(v10, v12);
  std::ostream::flush(v10);
  char v13 = sub_100046B94(&v64, (uint64_t)"    Rose interface version: ", 28LL);
  sub_10034CC94(a1, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v14 = &__p;
  }
  else {
    __int16 v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  char v16 = sub_100046B94(v13, (uint64_t)v14, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24LL)));
  float v17 = std::locale::use_facet(&v67, &std::ctype<char>::id);
  uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
  std::locale::~locale(&v67);
  std::ostream::put(v16, v18);
  std::ostream::flush(v16);
  unint64_t v19 = sub_100046B94(&v64, (uint64_t)"    Rose hardware version: ", 27LL);
  sub_10032B840(*(unsigned __int16 *)(a1 + 26), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v20 = &__p;
  }
  else {
    char v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v21 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v21 = __p.__r_.__value_.__l.__size_;
  }
  char v22 = sub_100046B94(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
  char v23 = std::locale::use_facet(&v67, &std::ctype<char>::id);
  uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale(&v67);
  std::ostream::put(v22, v24);
  std::ostream::flush(v22);
  if (*(_BYTE *)(a1 + 96))
  {
    char v25 = sub_100046B94(&v64, (uint64_t)"    Rose AP firmware version: ", 30LL);
    char v26 = (void *)std::ostream::operator<<(v25, *(unsigned __int16 *)(a1 + 34));
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24LL)));
    char v27 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v26, v28);
    std::ostream::flush(v26);
    uint64_t v29 = sub_100046B94(&v64, (uint64_t)"    Rose DSP firmware version: ", 31LL);
    char v30 = (void *)std::ostream::operator<<(v29, *(unsigned __int16 *)(a1 + 36));
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
    __int16 v31 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v30, v32);
    std::ostream::flush(v30);
    uint64_t v33 = sub_100046B94(&v64, (uint64_t)"    Rose target: ", 17LL);
    char v34 = (const char *)(a1 + 40);
    size_t v35 = strlen(v34);
    char v36 = sub_100046B94(v33, (uint64_t)v34, v35);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
    char v37 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v36, v38);
    std::ostream::flush(v36);
    char v39 = sub_100046B94(&v64, (uint64_t)"    Rose calibration data version: ", 35LL);
    char v40 = (void *)std::ostream::operator<<(v39, *(unsigned __int16 *)(a1 + 64));
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24LL)));
    char v41 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v40, v42);
    std::ostream::flush(v40);
    uint64_t v43 = sub_100046B94(&v64, (uint64_t)"    Rose module ID: ", 20LL);
    char v44 = (void *)std::ostream::operator<<(v43, *(unsigned __int8 *)(a1 + 66));
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
    uint64_t v45 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v44, v46);
    std::ostream::flush(v44);
    __int16 v47 = sub_100046B94(&v64, (uint64_t)"    Rose modem init version: ", 29LL);
    char v48 = (void *)std::ostream::operator<<(v47, *(unsigned int *)(a1 + 68));
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24LL)));
    __int16 v49 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v48, v50);
    std::ostream::flush(v48);
    if (*(_BYTE *)(a1 + 108))
    {
      char v51 = sub_100046B94(&v64, (uint64_t)"    Rose board ID: ", 19LL);
      uint64_t v52 = *(void *)(a1 + 104);
      if ((v52 & 0xFF00000000LL) == 0) {
        sub_100006080();
      }
      char v53 = (void *)std::ostream::operator<<(v51, v52);
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24LL)));
      char v54 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put(v53, v55);
      std::ostream::flush(v53);
    }

    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(void *)(a1 + 80)) {
        goto LABEL_38;
      }
    }

    else if (!*(_BYTE *)(a1 + 95))
    {
      goto LABEL_38;
    }

    __int16 v56 = sub_100046B94(&v64, (uint64_t)"    Extra bytes in the Hello Response: ", 39LL);
    uint64_t v57 = (const char *)(a1 + 72);
    size_t v58 = strlen(v57);
    uint64_t v59 = sub_100046B94(v56, (uint64_t)v57, v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24LL)));
    char v60 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v61 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v59, v61);
    std::ostream::flush(v59);
  }

void sub_10034CC04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void sub_10034CC94(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char v4 = std::string::append(&v10, ".");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 25));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10034CD68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034CDB4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10034CDE4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10034CE14(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10034CE4C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(_BYTE *)(a1 + 41) = 1;
  if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
    sub_1003AD22C();
  }
  if (*(_BYTE *)(a1 + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD1BC();
    }
    sub_10034CF44((std::string *)a1, (const std::string *)a1, *(CFAbsoluteTime *)(a1 + 32));
  }

  else
  {
    sub_10034D35C((std::string *)a1, (std::string *)a1, (std::string::size_type *)(a1 + 32));
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD150();
    }
  }

  std::mutex::unlock(v2);
}

void sub_10034CF30(_Unwind_Exception *a1)
{
}

uint64_t sub_10034CF44(std::string *a1, const std::string *a2, CFAbsoluteTime Current)
{
  size_t v6 = strlen(off_1007F4738[0]);
  size_t v7 = v6;
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    if (v6 != a2->__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    if (v6 == -1LL) {
      goto LABEL_45;
    }
    char v8 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }

  else
  {
    if (v6 != a2->__r_.__value_.__s.__size_) {
      goto LABEL_9;
    }
    char v8 = a2;
    if (v7 == -1LL) {
LABEL_45:
    }
      sub_10015B79C();
  }

  if (memcmp(v8, off_1007F4738[0], v7))
  {
LABEL_9:
    size_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", off_1007F4778[0]));
    std::string v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", off_1007F4780[0]));
    std::string::operator=(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (Current == 0.0) {
      Current = CFAbsoluteTimeGetCurrent();
    }
    *(CFAbsoluteTime *)&a1[1].__r_.__value_.__l.__size_ = Current;
    p_std::string::size_type size = (double *)&a1[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD3E8();
    }
    if (!a1[1].__r_.__value_.__s.__data_[17])
    {
      if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
        sub_1003AD29C();
      }
      uint64_t v12 = 1LL;
      goto LABEL_43;
    }

    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      if (!a2->__r_.__value_.__l.__size_)
      {
LABEL_23:
        a2 = (const std::string *)off_1007F4760[0];
        NSStringEncoding v13 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
LABEL_24:
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  a2,  v13));
        uint64_t v28 = v10;
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        char v16 = objc_alloc(&OBJC_CLASS___NSNumber);
        double v17 = *p_size;
        *(float *)&double v17 = *p_size;
        uint64_t v18 = -[NSNumber initWithFloat:](v16, "initWithFloat:", v17);
        [v15 setObject:v14 forKey:v9];
        [v15 setObject:v18 forKey:v10];
        id v31 = 0LL;
        unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v15,  200LL,  0LL,  &v31));
        id v20 = v31;
        id v21 = v20;
        if (!v19 || v20)
        {
          if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
            sub_1003AD2C8();
          }
          uint64_t v12 = 0LL;
        }

        else
        {
          char v27 = v9;
          sub_100005150();
          sub_1003550BC(off_1007F4788[0], &__p);
          char v22 = objc_alloc(&OBJC_CLASS___NSString);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v24 = -[NSString initWithCString:encoding:](v22, "initWithCString:encoding:", p_p, 4LL);
          id v29 = 0LL;
          uint64_t v12 = (uint64_t)[v19 writeToFile:v24 options:1073741825 error:&v29];
          id v21 = v29;
          BOOL v25 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
          if ((v12 & 1) != 0)
          {
            if (v25) {
              sub_1003AD328();
            }
            a1[1].__r_.__value_.__s.__data_[16] = 1;
          }

          else if (v25)
          {
            sub_1003AD388();
          }

          size_t v9 = v27;
        }

        std::string v10 = v28;
LABEL_43:

        return v12;
      }

      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }

    else if (!a2->__r_.__value_.__s.__size_)
    {
      goto LABEL_23;
    }

    NSStringEncoding v13 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
    goto LABEL_24;
  }

  return 1LL;
}

void sub_10034D2C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_10034D35C(std::string *__str, std::string *this, std::string::size_type *a3)
{
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    this->__r_.__value_.__s.__size_ = 0;
  }

  if (__str[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    *a3 = __str[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD608();
    }
    return 1LL;
  }

  if (!__str[1].__r_.__value_.__s.__data_[17])
  {
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD454();
    }
    return 1LL;
  }

  sub_100005150();
  sub_1003550BC(off_1007F4788[0], &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  char v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  p_p,  4LL));
  id v22 = 0LL;
  size_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfFile:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfFile:options:error:",  v8,  0LL,  &v22));
  id v10 = v22;
  std::string v11 = v10;
  if (!v9 || v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003AD480();
    }
    BOOL v6 = 0LL;
  }

  else
  {
    id v20 = 0LL;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v9,  0LL,  v21,  &v20));
    id v13 = v20;
    std::string v11 = v13;
    if (!v12 || v13)
    {
      if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
        sub_1003AD4E0();
      }
      BOOL v6 = 0LL;
    }

    else
    {
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  off_1007F4778[0]));
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v14]);

      if (v15)
      {
        char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  off_1007F4780[0]));
        double v17 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v16]);

        BOOL v6 = v17 != 0LL;
        if (v17)
        {
          std::string::assign( this, (const std::string::value_type *)[v15 UTF8String]);
          [v17 doubleValue];
          *a3 = v18;
          __str[1].__r_.__value_.__s.__data_[16] = 1;
          if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
            sub_1003AD56C();
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG))
        {
          sub_1003AD5DC();
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
          sub_1003AD540();
        }
        BOOL v6 = 0LL;
      }
    }
  }

  return v6;
}

void sub_10034D69C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10034D70C(uint64_t a1, const std::string *a2, CFAbsoluteTime a3)
{
  BOOL v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = sub_10034CF44((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_10034D76C(_Unwind_Exception *a1)
{
}

BOOL sub_10034D780(uint64_t a1, std::string *a2, std::string::size_type *a3)
{
  BOOL v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  BOOL v7 = sub_10034D35C((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_10034D7D8(_Unwind_Exception *a1)
{
}

void *sub_10034D7EC@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_1007BE730[(char)a1];
  }
  return sub_1000065CC(a2, v2);
}

void *sub_10034D81C@<X0>(char a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = (char *)*((void *)&off_1007BE748 + (char)(a1 + 1));
  }
  return sub_1000065CC(a2, v2);
}

void *sub_10034D854@<X0>(char a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = (&off_1007BE790)[(char)(a1 + 2)];
  }
  return sub_1000065CC(a2, v2);
}

void *sub_10034D88C@<X0>(char a1@<W0>, void *a2@<X8>)
{
  else {
    uint64_t v2 = (&off_1007BE7C0)[(char)(a1 + 2)];
  }
  return sub_1000065CC(a2, v2);
}

uint64_t sub_10034D8C4(uint64_t a1)
{
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 850045863LL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(void *)(a1 + 136) = 0LL;
  sub_10034D99C(a1 + 152);
  if (qword_1007FFB28 != -1) {
    dispatch_once(&qword_1007FFB28, &stru_1007BE670);
  }
  *(_BYTE *)(a1 + 216) = byte_1007FFB20;
  sub_10034EB64();
  return a1;
}

void sub_10034D970(_Unwind_Exception *a1)
{
}

uint64_t sub_10034D99C@<X0>(uint64_t a1@<X8>)
{
  int v2 = *((_DWORD *)sub_100005150() + 144);
  int v3 = sub_10034F160();
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  if (v2 <= 99)
  {
    switch(v2)
    {
      case 0:
        sub_1003635F4(0, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v23 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v23 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        sub_1003635F4(0, v3, 1u, (uint64_t)&v30);
        int v29 = 1;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v24 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v24 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        char v30 = 0LL;
        id v31 = 0LL;
        uint64_t v32 = 0LL;
        sub_1000065CC(&__str, "A2183");
        sub_100352210((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 1:
        sub_1003635F4(1, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v25 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v25 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        sub_1003635F4(1, v3, 2u, (uint64_t)&v30);
        int v29 = 2;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v26 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v26 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        char v30 = 0LL;
        id v31 = 0LL;
        uint64_t v32 = 0LL;
        sub_1000065CC(&__str, "A2184");
        sub_100352210((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 2:
        sub_1003635F4(2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v27 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v27 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        sub_1003635F4(2, v3, 3u, (uint64_t)&v30);
        int v29 = 3;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v28 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_10034F3D4((uint64_t)(v28 + 3), (uint64_t *)&v30);
        sub_10034F41C((uint64_t)&v30);
        char v30 = 0LL;
        id v31 = 0LL;
        uint64_t v32 = 0LL;
        sub_1000065CC(&__str, "A2180");
        sub_100352210((uint64_t)&v30, &__str, &v40, 1uLL);
LABEL_94:
        goto LABEL_90;
      case 3:
      case 4:
      case 5:
      case 6:
        sub_1003635F4(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v6 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v6 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v6 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v6 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 4u, (uint64_t)&v30);
        int v29 = 4;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v7 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v7 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v7 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v7 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 5u, (uint64_t)&v30);
        int v29 = 5;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v8 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v8 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v8 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v8 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 6u, (uint64_t)&v30);
        int v29 = 6;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        size_t v9 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v9 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v9 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v9 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 7u, (uint64_t)&v30);
        int v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v10 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v10 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v10 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v10 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 8u, (uint64_t)&v30);
        int v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::string v11 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v11 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v11 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v11 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 9u, (uint64_t)&v30);
        int v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v12 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v12 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v12 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v12 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 0xAu, (uint64_t)&v30);
        int v29 = 10;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v13 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v13 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v13 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v13 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        goto LABEL_76;
      case 7:
      case 8:
      case 9:
      case 10:
        sub_1003635F4(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        __int16 v14 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v14 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v14 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v14 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 0xBu, (uint64_t)&v30);
        int v29 = 11;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        __int16 v15 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v15 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v15 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v15 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 0xCu, (uint64_t)&v30);
        int v29 = 12;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v16 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v16 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v16 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v16 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 0xDu, (uint64_t)&v30);
        int v29 = 13;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        double v17 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v17 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v17 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v17 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 7u, (uint64_t)&v30);
        int v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::string::size_type v18 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v18 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v18 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v18 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 8u, (uint64_t)&v30);
        int v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        unint64_t v19 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v19 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v19 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v19 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 9u, (uint64_t)&v30);
        int v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v20 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v20 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v20 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v20 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
        goto LABEL_76;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        sub_1003635F4(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        __int128 v5 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v5 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v5 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v5 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001ACE04((uint64_t)v35);
        }
        if (v34) {
          sub_1001ACE04((uint64_t)v33);
        }
LABEL_76:
        sub_1001ACE04((uint64_t)&v30);
        sub_1003635F4(v2, v3, 0x3E7u, (uint64_t)&v30);
        int v29 = 999;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v21 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
        sub_100351970((uint64_t)(v21 + 3), (uint64_t *)&v30);
        sub_100351A64((uint64_t)(v21 + 8), (uint64_t)v33);
        sub_100351A64((uint64_t)(v21 + 14), (uint64_t)v35);
        break;
      default:
        goto LABEL_82;
    }
  }

  else
  {
    if (v2 > 199)
    {
    }

    else if ((v2 - 100) >= 0x16)
    {
      goto LABEL_82;
    }

    sub_1003635F4(v2, v3, 0, (uint64_t)&v30);
    int v29 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    char v4 = sub_100351F44((uint64_t)v37, &v29, (uint64_t)&unk_1004242F8, &__str);
    sub_100351970((uint64_t)(v4 + 3), (uint64_t *)&v30);
    sub_100351A64((uint64_t)(v4 + 8), (uint64_t)v33);
    sub_100351A64((uint64_t)(v4 + 14), (uint64_t)v35);
  }

  if (v36) {
    sub_1001ACE04((uint64_t)v35);
  }
  if (v34) {
    sub_1001ACE04((uint64_t)v33);
  }
  sub_1001ACE04((uint64_t)&v30);
LABEL_82:
  char v30 = 0LL;
  id v31 = 0LL;
  uint64_t v32 = 0LL;
  if (v2 > 199)
  {
LABEL_89:
    sub_100352210((uint64_t)&v30, 0LL, 0LL, 0LL);
    goto LABEL_90;
  }

void sub_10034E978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  *(void *)(v27 + 48) = &a10;
  sub_10013EAD4((void ***)(v28 - 96));
  sub_1001ACD50((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_10034EB64()
{
  BOOL v0 = sub_10035129C((uint64_t)off_1007F4790[0], &v30);
  BOOL v1 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v0)
  {
    if (v1) {
      sub_1003AD674();
    }
  }

  else if (v1)
  {
    sub_1003AD6D4();
  }

  BOOL v2 = sub_100351204((uint64_t)off_1007F4798[0], &v30);
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3) {
      sub_1003AD734();
    }
  }

  else if (v3)
  {
    sub_1003AD6D4();
  }

  BOOL v4 = sub_100351204((uint64_t)off_1007F47A0[0], &v30);
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (v5) {
      sub_1003AD734();
    }
  }

  else if (v5)
  {
    sub_1003AD6D4();
  }

  BOOL v6 = sub_100351204((uint64_t)off_1007F47A8[0], &v30);
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v7) {
      sub_1003AD734();
    }
  }

  else if (v7)
  {
    sub_1003AD6D4();
  }

  sub_1003518C0((uint64_t)off_1007F47B0[0]);
  BOOL v8 = sub_10035129C((uint64_t)off_1007F47B8[0], &v30);
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    if (v9) {
      sub_1003AD674();
    }
  }

  else if (v9)
  {
    sub_1003AD6D4();
  }

  BOOL v10 = sub_10035129C((uint64_t)off_1007F47C0[0], &v30);
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v11) {
      sub_1003AD674();
    }
  }

  else if (v11)
  {
    sub_1003AD6D4();
  }

  BOOL v12 = sub_10035129C((uint64_t)off_1007F47C8[0], &v30);
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    if (v13) {
      sub_1003AD674();
    }
  }

  else if (v13)
  {
    sub_1003AD6D4();
  }

  sub_1003518C0((uint64_t)off_1007F47D0[0]);
  BOOL v14 = sub_10035129C((uint64_t)off_1007F47E0[0], &v30);
  BOOL v15 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v14)
  {
    if (v15) {
      sub_1003AD674();
    }
  }

  else if (v15)
  {
    sub_1003AD6D4();
  }

  sub_1003518C0((uint64_t)off_1007F47D8[0]);
  BOOL v16 = sub_10035129C((uint64_t)off_1007F47E8[0], &v30);
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v17) {
      sub_1003AD674();
    }
  }

  else if (v17)
  {
    sub_1003AD6D4();
  }

  BOOL v18 = sub_10035129C((uint64_t)off_1007F47F0[0], &v30);
  BOOL v19 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v18)
  {
    if (v19) {
      sub_1003AD674();
    }
  }

  else if (v19)
  {
    sub_1003AD6D4();
  }

  BOOL v20 = sub_10035129C((uint64_t)off_1007F47F8[0], &v30);
  BOOL v21 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v20)
  {
    if (v21) {
      sub_1003AD674();
    }
  }

  else if (v21)
  {
    sub_1003AD6D4();
  }

  BOOL v22 = sub_10035129C((uint64_t)off_1007F4800[0], &v30);
  BOOL v23 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23) {
      sub_1003AD674();
    }
  }

  else if (v23)
  {
    sub_1003AD6D4();
  }

  BOOL v24 = sub_10035129C((uint64_t)off_1007F4808[0], &v30);
  BOOL v25 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v24)
  {
    if (v25) {
      sub_1003AD674();
    }
  }

  else if (v25)
  {
    sub_1003AD6D4();
  }

  BOOL v26 = sub_10035129C((uint64_t)off_1007F4810[0], &v30);
  BOOL v27 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v26)
  {
    if (v27) {
      sub_1003AD674();
    }
  }

  else if (v27)
  {
    sub_1003AD6D4();
  }

  BOOL v28 = sub_10035129C((uint64_t)off_1007F4820, &v30);
  BOOL v29 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v28)
  {
    if (v29) {
      sub_1003AD674();
    }
  }

  else if (v29)
  {
    sub_1003AD6D4();
  }

uint64_t sub_10034F0E8(uint64_t a1)
{
  BOOL v3 = (void **)(a1 + 40);
  sub_10013EAD4(&v3);
  return sub_1001ACD50(a1);
}

uint64_t sub_10034F124(uint64_t a1)
{
  return a1;
}

uint64_t sub_10034F160()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"RegulatoryTestBasebandSupportsFR2Override"]);
  if (v2 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v1), (objc_opt_isKindOfClass(v2, v3) & 1) != 0))
  {
    unsigned int v4 = [v2 BOOLValue];
    BOOL v5 = (os_log_s *)qword_1007FFAA8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDeviceBasebandType,set by default,SUPPORTS_5G_NR_FR2",  buf,  2u);
      }

      uint64_t v7 = 0LL;
    }

    else
    {
      if (v6)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDeviceBasebandType,set by default,DOES_NOT_SUPPORT_5G_NR_FR2",  buf,  2u);
      }

      uint64_t v7 = 1LL;
    }
  }

  else
  {
    BOOL v8 = sub_1001CD9FC();
    id v9 = objc_claimAutoreleasedReturnValue(v8);
    sub_1000065CC(buf, (char *)[v9 UTF8String]);

    BOOL v10 = sub_100351E44(qword_1008008E8, buf);
    if (v10) {
      uint64_t v7 = *((unsigned int *)v10 + 10);
    }
    else {
      uint64_t v7 = 2LL;
    }
    BOOL v11 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000065CC(__p, (&off_1007BE800)[(int)v7]);
      BOOL v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)BOOL v18 = 136315138;
      BOOL v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDeviceBasebandType,%s",  v18,  0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
  }

  return v7;
}

void sub_10034F37C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10034F3D4(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t sub_10034F41C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128)) {
    sub_1001ACE04(a1 + 88);
  }
  if (*(_BYTE *)(a1 + 80)) {
    sub_1001ACE04(a1 + 40);
  }
  return sub_1001ACE04(a1);
}

BOOL sub_10034F45C(uint64_t a1, std::string *a2, std::string *a3)
{
  unsigned int v4 = a2;
  p_std::string::size_type size = (char *)&a2->__r_.__value_.__s.__size_;
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    if (!size) {
      return size != 0;
    }
  }

  else
  {
    std::string::size_type size = a2->__r_.__value_.__s.__size_;
    if (!a2->__r_.__value_.__s.__size_) {
      return size != 0;
    }
  }

  uint64_t v7 = sub_1003533F8((void *)(a1 + 112), (unsigned __int8 *)a2);
  if (!v7)
  {
    uint64_t v7 = sub_1003533F8(qword_100800898, (unsigned __int8 *)v4);
    if (!v7)
    {
      BOOL v8 = (os_log_s *)qword_1007FFAA8;
      if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = v4;
        if (*p_size < 0) {
          id v9 = (std::string *)v4->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getRegulatoryCountryParams,cantFind,country,%s",  __p,  0xCu);
      }

      sub_1000065CC(__p, off_1007F4730[0]);
      uint64_t v7 = sub_1003533F8(qword_100800898, __p);
      if (v26 < 0) {
        operator delete(*(void **)__p);
      }
      BOOL v10 = (os_log_s *)qword_1007FFAA8;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEFAULT);
      if (!v7) {
        sub_1003AD798(v11, v10, v12, v13, v14, v15, v16, v17);
      }
      if (v11)
      {
        BOOL v18 = v4;
        if (*p_size < 0) {
          BOOL v18 = (std::string *)v4->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getRegulatoryCountryParams,cantFind,country,%s,setting it to unknown.",  __p,  0xCu);
      }

      std::string::assign(v4, off_1007F4730[0]);
    }
  }

  BOOL v19 = (os_log_s *)qword_1007FFAA8;
  if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
    sub_1003AD80C(p_size, v4, v19);
  }
  std::string::operator=(a3, (const std::string *)(v7 + 40));
  std::string::operator=(a3 + 1, (const std::string *)(v7 + 64));
  unsigned __int8 v20 = v7[90];
  LOWORD(a3[2].__r_.__value_.__l.__data_) = *((_WORD *)v7 + 44);
  BOOL v21 = a3 + 2;
  v21->__r_.__value_.__s.__data_[2] = v20;
  int v22 = *p_size;
  if (v22 < 0)
  {
    if (v4->__r_.__value_.__l.__size_ != 2) {
      return size != 0;
    }
    unsigned int v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }

  else if (v22 != 2)
  {
    return size != 0;
  }

  if (LOWORD(v4->__r_.__value_.__l.__data_) == 20035)
  {
    int v23 = *((_DWORD *)sub_100005150() + 144);
    if ((v23 - 19) < 5 || (v23 - 118) <= 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
        sub_1003AD7E0();
      }
      v21->__r_.__value_.__s.__data_[0] = 0;
    }
  }

  return size != 0;
}

void sub_10034F6E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10034F704(uint64_t a1, std::string *a2, uint64_t a3)
{
  p_std::string::size_type size = (char *)&a2->__r_.__value_.__s.__size_;
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    if (!size) {
      return size != 0;
    }
  }

  else
  {
    std::string::size_type size = a2->__r_.__value_.__s.__size_;
    if (!a2->__r_.__value_.__s.__size_) {
      return size != 0;
    }
  }

  uint64_t v7 = sub_1003533F8(qword_1008008C0, (unsigned __int8 *)a2);
  if (!v7)
  {
    BOOL v8 = (os_log_s *)qword_1007FFAA8;
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = a2;
      if (*p_size < 0) {
        id v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s",  __p,  0xCu);
    }

    sub_1000065CC(__p, off_1007F4730[0]);
    uint64_t v7 = sub_1003533F8(qword_1008008C0, __p);
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v10 = (os_log_s *)qword_1007FFAA8;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEFAULT);
    if (!v7) {
      sub_1003AD884(v11, v10, v12, v13, v14, v15, v16, v17);
    }
    if (v11)
    {
      BOOL v18 = a2;
      if (*p_size < 0) {
        BOOL v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s,setting it to unknown.",  __p,  0xCu);
    }

    std::string::assign(a2, off_1007F4730[0]);
  }

  BOOL v19 = (os_log_s *)qword_1007FFAA8;
  if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
    sub_1003AD8CC(p_size, a2, v19);
  }
  std::string::operator=((std::string *)a3, (const std::string *)(v7 + 40));
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v7 + 64));
  *(_WORD *)(a3 + 48) = *((_WORD *)v7 + 44);
  return size != 0;
}

void sub_10034F8F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10034F91C(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v18 = a2;
  unsigned int v17 = (a3 << 31 >> 31) & a4;
  BOOL v6 = (void *)(a1 + 152);
  uint64_t v7 = sub_100021720((void *)(a1 + 152), (int *)&v17);
  if (!v7)
  {
    BOOL v8 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100320A4C(v17, &__p);
      id v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
         ? &__p
         : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67109634;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2080;
      BOOL v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s",  buf,  0x18u);
    }

    unsigned int v17 = 0;
    uint64_t v7 = sub_100021720(v6, (int *)&v17);
    if (!v7)
    {
      uint64_t v12 = (os_log_s *)(id)qword_1007FFAA8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        goto LABEL_14;
      }
      sub_100320A4C(v17, &__p);
      uint64_t v15 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67109634;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2080;
      BOOL v24 = v15;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags ,%d,accessory,%s",  buf,  0x18u);
      goto LABEL_24;
    }
  }

  BOOL v10 = sub_1003534F8(v7 + 3, &v18);
  if (v10) {
    return (uint64_t *)(v10 + 3);
  }
  uint64_t v12 = (os_log_s *)(id)qword_1007FFAA8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    int v13 = v18;
    sub_100320A4C(v17, &__p);
    uint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 67109634;
    int v20 = v13;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2080;
    BOOL v24 = v14;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s",  buf,  0x18u);
    if ((char)__p.__r_.__value_.__s.__size_ < 0) {
LABEL_24:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }

void sub_10034FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10034FBD8(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v18 = a2;
  unsigned int v17 = (a3 << 31 >> 31) & a4;
  BOOL v6 = (void *)(a1 + 152);
  uint64_t v7 = sub_100021720((void *)(a1 + 152), (int *)&v17);
  if (!v7)
  {
    BOOL v8 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100320A4C(v17, &__p);
      id v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
         ? &__p
         : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67109634;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2080;
      BOOL v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s",  buf,  0x18u);
    }

    unsigned int v17 = 0;
    uint64_t v7 = sub_100021720(v6, (int *)&v17);
    if (!v7)
    {
      uint64_t v12 = (os_log_s *)(id)qword_1007FFAA8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        goto LABEL_16;
      }
      sub_100320A4C(v17, &__p);
      uint64_t v15 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67109634;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2080;
      BOOL v24 = v15;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,fl ags,%d,accessory,%s",  buf,  0x18u);
      goto LABEL_27;
    }
  }

  if (*((_BYTE *)v7 + 104))
  {
    BOOL v10 = sub_1003534F8(v7 + 8, &v18);
    if (!*((_BYTE *)v7 + 104)) {
      sub_100006080();
    }
    if (v10) {
      return (uint64_t *)(v10 + 3);
    }
    uint64_t v12 = (os_log_s *)(id)qword_1007FFAA8;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
      goto LABEL_16;
    }
    int v13 = v18;
    sub_100320A4C(v17, &__p);
    uint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 67109634;
    int v20 = v13;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2080;
    BOOL v24 = v14;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s",  buf,  0x18u);
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  }

  return &qword_1007FFAC8;
}

void sub_10034FE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10034FEB4(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v18 = a2;
  unsigned int v17 = (a3 << 31 >> 31) & a4;
  BOOL v6 = (void *)(a1 + 152);
  uint64_t v7 = sub_100021720((void *)(a1 + 152), (int *)&v17);
  if (!v7)
  {
    BOOL v8 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100320A4C(v17, &__p);
      id v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
         ? &__p
         : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67109634;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 2080;
      BOOL v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s",  buf,  0x18u);
    }

    unsigned int v17 = 0;
    uint64_t v7 = sub_100021720(v6, (int *)&v17);
    if (!v7)
    {
      uint64_t v12 = (os_log_s *)(id)qword_1007FFAA8;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_100320A4C(v17, &__p);
        uint64_t v15 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__p
            : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string buf = 67109634;
        int v20 = a2;
        __int16 v21 = 1024;
        int v22 = a3;
        __int16 v23 = 2080;
        BOOL v24 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,% d,flags,%d,accessory,%s",  buf,  0x18u);
      }

void sub_100350168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100350188(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  BOOL v6 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      __int16 v26 = 0;
      *(_OWORD *)BOOL v24 = 0u;
      __int128 v25 = 0u;
      *(_OWORD *)__int16 v23 = 0u;
      unsigned __int8 v27 = -1;
      sub_1000063A8(&__p, (void *)*a2, v8);
      goto LABEL_6;
    }

    return &qword_1007FFAB0;
  }

  if (!*((_BYTE *)a2 + 23)) {
    return &qword_1007FFAB0;
  }
  __int16 v26 = 0;
  *(_OWORD *)BOOL v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__int16 v23 = 0u;
  unsigned __int8 v27 = -1;
  std::string __p = *(std::string *)a2;
LABEL_6:
  BOOL v9 = sub_10034F45C(a1, &__p, (std::string *)v23);
  if (v9)
  {
    int v10 = v27;
    BOOL v11 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10034D81C(v10, &v21);
      int size = (char)v21.__r_.__value_.__s.__size_;
      std::string::size_type v13 = v21.__r_.__value_.__r.__words[0];
      sub_100320A4C(a4, &v20);
      uint64_t v14 = &v21;
      if (size < 0) {
        uint64_t v14 = (std::stringbuf::string_type *)v13;
      }
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v15 = &v20;
      }
      else {
        uint64_t v15 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      BOOL v29 = v6;
      __int16 v30 = 2080;
      *(void *)id v31 = v14;
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = a3;
      __int16 v32 = 2080;
      uint64_t v33 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDesignatedTx_UWB_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s",  buf,  0x26u);
    }

    uint64_t v16 = sub_10034F91C(a1, v10, a3, a4);
  }

  else
  {
    unsigned int v17 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      sub_100320A4C(a4, &v21);
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v19 = &v21;
      }
      else {
        BOOL v19 = (std::stringbuf::string_type *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      BOOL v29 = v6;
      __int16 v30 = 1024;
      *(_DWORD *)id v31 = a3;
      *(_WORD *)&v31[4] = 2080;
      *(void *)&v31[6] = v19;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getDesignatedTx_UWB_PowerTable,country not found,country,%s,flags,%d,accessory,%s",  buf,  0x1Cu);
    }

    uint64_t v16 = &qword_1007FFAB0;
  }

  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  return v16;
}

void sub_100350478( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001A951C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003504E0(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  BOOL v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)BOOL v24 = 0u;
      __int128 v25 = 0u;
      *(_OWORD *)__int16 v23 = 0u;
      __int16 v26 = -1;
      a1 = sub_1000063A8(&__p, (void *)*a2, v8);
      goto LABEL_6;
    }

    return &qword_1007FFAC8;
  }

  if (!*((_BYTE *)a2 + 23)) {
    return &qword_1007FFAC8;
  }
  *(_OWORD *)BOOL v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__int16 v23 = 0u;
  __int16 v26 = -1;
  std::string __p = *(std::string *)a2;
LABEL_6:
  BOOL v9 = sub_10034F704((uint64_t)a1, &__p, (uint64_t)v23);
  if (v9)
  {
    int v10 = v26;
    BOOL v11 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10034D854(v10, &v21);
      int size = (char)v21.__r_.__value_.__s.__size_;
      std::string::size_type v13 = v21.__r_.__value_.__r.__words[0];
      sub_100320A4C(a4, &v20);
      uint64_t v14 = &v21;
      if (size < 0) {
        uint64_t v14 = (std::stringbuf::string_type *)v13;
      }
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v15 = &v20;
      }
      else {
        uint64_t v15 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      BOOL v28 = v6;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = v14;
      *(_WORD *)&v30[8] = 1024;
      *(_DWORD *)&v30[10] = a3;
      __int16 v31 = 2080;
      __int16 v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s",  buf,  0x26u);
    }

    uint64_t v16 = sub_10034FBD8(v7, v10, a3, a4);
  }

  else
  {
    unsigned int v17 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      sub_100320A4C(a4, &v21);
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v19 = &v21;
      }
      else {
        BOOL v19 = (std::stringbuf::string_type *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      BOOL v28 = v6;
      __int16 v29 = 1024;
      *(_DWORD *)__int16 v30 = a3;
      *(_WORD *)&v30[4] = 2080;
      *(void *)&v30[6] = v19;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country not found,country,%s,flags,%d,accessory,%s",  buf,  0x1Cu);
    }

    uint64_t v16 = &qword_1007FFAC8;
  }

  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  return v16;
}

void sub_1003507C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001A951C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_10035082C(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  BOOL v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)BOOL v24 = 0u;
      __int128 v25 = 0u;
      *(_OWORD *)__int16 v23 = 0u;
      __int16 v26 = -1;
      a1 = sub_1000063A8(&__p, (void *)*a2, v8);
      goto LABEL_6;
    }

    return &qword_1007FFAE0;
  }

  if (!*((_BYTE *)a2 + 23)) {
    return &qword_1007FFAE0;
  }
  *(_OWORD *)BOOL v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__int16 v23 = 0u;
  __int16 v26 = -1;
  std::string __p = *(std::string *)a2;
LABEL_6:
  BOOL v9 = sub_10034F704((uint64_t)a1, &__p, (uint64_t)v23);
  if (v9)
  {
    int v10 = HIBYTE(v26);
    BOOL v11 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10034D88C(v10, &v21);
      int size = (char)v21.__r_.__value_.__s.__size_;
      std::string::size_type v13 = v21.__r_.__value_.__r.__words[0];
      sub_100320A4C(a4, &v20);
      uint64_t v14 = &v21;
      if (size < 0) {
        uint64_t v14 = (std::stringbuf::string_type *)v13;
      }
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v15 = &v20;
      }
      else {
        uint64_t v15 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      BOOL v28 = v6;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = v14;
      *(_WORD *)&v30[8] = 1024;
      *(_DWORD *)&v30[10] = a3;
      __int16 v31 = 2080;
      __int16 v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s",  buf,  0x26u);
    }

    uint64_t v16 = sub_10034FEB4(v7, v10, a3, a4);
  }

  else
  {
    unsigned int v17 = (os_log_s *)(id)qword_1007FFAA8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      sub_100320A4C(a4, &v21);
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v19 = &v21;
      }
      else {
        BOOL v19 = (std::stringbuf::string_type *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      BOOL v28 = v6;
      __int16 v29 = 1024;
      *(_DWORD *)__int16 v30 = a3;
      *(_WORD *)&v30[4] = 2080;
      *(void *)&v30[6] = v19;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country not found,country,%s,flags,%d,accessory,%s",  buf,  0x1Cu);
    }

    uint64_t v16 = &qword_1007FFAE0;
  }

  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  return v16;
}

void sub_100350B10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001A951C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100350B78(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = (void *)a2;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  __int16 v41 = 0;
  *(_OWORD *)char v39 = 0u;
  __int128 v40 = 0u;
  *(_OWORD *)int v38 = 0u;
  char v42 = -1;
  BOOL v6 = (char *)(a2 + 23);
  else {
    std::string __p = *(std::string *)a2;
  }
  BOOL v7 = sub_10034F45C(a1, &__p, (std::string *)v38);
  BOOL v8 = v7;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_6;
    }
  }

  else if (v7)
  {
LABEL_6:
    if (HIBYTE(v41))
    {
      int v10 = (_BYTE *)a3[1];
      unint64_t v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        unint64_t v14 = *a3;
        uint64_t v15 = &v10[-*a3];
        unint64_t v16 = (unint64_t)(v15 + 1);
        unint64_t v17 = v9 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          unint64_t v19 = (unint64_t)operator new(v18);
        }
        else {
          unint64_t v19 = 0LL;
        }
        std::stringbuf::string_type v20 = (char *)(v19 + v18);
        v15[v19] = 9;
        uint64_t v11 = (uint64_t)&v15[v19 + 1];
        if (v10 == (_BYTE *)v14)
        {
          v19 += (unint64_t)v15;
        }

        else
        {
          std::stringbuf::string_type v21 = &v10[~v14];
          do
          {
            char v22 = *--v10;
            (v21--)[v19] = v22;
          }

          while (v10 != (_BYTE *)v14);
        }

        *a3 = v19;
        a3[1] = v11;
        a3[2] = (unint64_t)v20;
        if (v14) {
          operator delete((void *)v14);
        }
      }

      else
      {
        *int v10 = 9;
        uint64_t v11 = (uint64_t)(v10 + 1);
      }

      a3[1] = v11;
      int v13 = 1;
    }

    else
    {
      int v13 = 0;
    }

    if ((_BYTE)v41)
    {
      BOOL v24 = (_BYTE *)a3[1];
      unint64_t v23 = a3[2];
      if ((unint64_t)v24 >= v23)
      {
        unint64_t v27 = *a3;
        BOOL v28 = &v24[-*a3];
        unint64_t v29 = (unint64_t)(v28 + 1);
        unint64_t v30 = v23 - v27;
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v29;
        }
        if (v31) {
          unint64_t v32 = (unint64_t)operator new(v31);
        }
        else {
          unint64_t v32 = 0LL;
        }
        uint64_t v33 = (char *)(v32 + v31);
        v28[v32] = 5;
        uint64_t v25 = (uint64_t)&v28[v32 + 1];
        if (v24 == (_BYTE *)v27)
        {
          v32 += (unint64_t)v28;
        }

        else
        {
          char v34 = &v24[~v27];
          do
          {
            char v35 = *--v24;
            (v34--)[v32] = v35;
          }

          while (v24 != (_BYTE *)v27);
        }

        *a3 = v32;
        a3[1] = v25;
        a3[2] = (unint64_t)v33;
        if (v27) {
          operator delete((void *)v27);
        }
      }

      else
      {
        *BOOL v24 = 5;
        uint64_t v25 = (uint64_t)(v24 + 1);
      }

      a3[1] = v25;
      int v26 = 1;
    }

    else
    {
      int v26 = 0;
    }

    char v36 = (os_log_s *)qword_1007FFAA8;
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG))
    {
      if (*v6 < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315906;
      char v44 = v3;
      __int16 v45 = 1024;
      int v46 = v26;
      __int16 v47 = 1024;
      int v48 = v13;
      __int16 v49 = 2080;
      uint64_t v50 = "fromCountryTable";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "regulatory,comp,getDesignatedRfChannels,country,%s,ch5,%d,ch9,%d,note,%s",  buf,  0x22u);
    }

    goto LABEL_52;
  }

  uint64_t v12 = (os_log_s *)qword_1007FFAA8;
  if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
    sub_1003AD944(v6, v3, v12);
  }
LABEL_52:
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[1]);
  }
  if (SHIBYTE(v39[0]) < 0) {
    operator delete(v38[0]);
  }
}

void sub_100350EE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void sub_100350F2C(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  *(_OWORD *)unint64_t v9 = 0u;
  __int128 v10 = 0u;
  *(_OWORD *)BOOL v8 = 0u;
  __int16 v11 = -1;
  else {
    std::string __p = *(std::string *)a2;
  }
  BOOL v4 = sub_10034F704((uint64_t)a1, &__p, (uint64_t)v8);
  BOOL v5 = v4;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_6;
    }
  }

  else if (v4)
  {
LABEL_6:
    if (HIBYTE(v11) <= 0xFDu && v11 != 254 && v11 != 255)
    {
      BOOL v6 = operator new(1uLL);
      *BOOL v6 = 1;
      a3[1] = v6 + 1;
      a3[2] = v6 + 1;
      *a3 = v6;
    }

    goto LABEL_13;
  }

  if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
    sub_1003AD9F0();
  }
LABEL_13:
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_100351044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  size_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100351084(uint64_t a1, std::string *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  BOOL v5 = v4;
  if (v4)
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v4 stringForKey:v3]);
    BOOL v7 = v6;
    if (v6)
    {
      std::string::assign(a2, (const std::string::value_type *)[v6 UTF8String]);
    }

    else
    {
      a2->__r_.__value_.__r.__words[0] = 0LL;
      a2->__r_.__value_.__l.__size_ = 0LL;
      a2->__r_.__value_.__l.__cap_ = 0LL;
    }
  }

  return v5 != 0LL;
}

void sub_100351148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100351170(uint64_t a1, _BYTE *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  BOOL v5 = v4;
  if (v4) {
    *a2 = [v4 BOOLForKey:v3];
  }

  return v5 != 0LL;
}

void sub_1003511E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100351204(uint64_t a1, double *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  BOOL v5 = v4;
  if (v4)
  {
    [v4 floatForKey:v3];
    *a2 = v6;
  }

  return v5 != 0LL;
}

void sub_100351280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10035129C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  BOOL v5 = v4;
  if (v4) {
    *a2 = [v4 integerForKey:v3];
  }

  return v5 != 0LL;
}

void sub_100351314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100351330(uint64_t a1, const std::string *a2)
{
  return sub_10034D70C(a1, a2, 0.0);
}

BOOL sub_100351338(uint64_t a1, std::string *a2)
{
  return sub_10034D780(a1, a2, &v3);
}

uint64_t sub_100351358(uint64_t a1, double *a2, double *a3, void *a4, double *a5)
{
  char v15 = 0;
  BOOL v9 = 0;
  BOOL v10 = 0;
  if (sub_100351170((uint64_t)off_1007F4790[0], &v15) && v15 != 0)
  {
    BOOL v10 = sub_100351204((uint64_t)off_1007F4798[0], a2);
    BOOL v9 = sub_100351204((uint64_t)off_1007F47A0[0], a3);
    BOOL v12 = sub_100351204((uint64_t)off_1007F47A8[0], a5);
    if (v10 && v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
        sub_1003ADA1C();
      }
      *a4 = 0LL;
    }

    if (!v12) {
      *a5 = 0.0;
    }
  }

  return v10 & v9;
}

void sub_100351450(id a1)
{
}

uint64_t sub_100351480()
{
  char v1 = 0;
  LODWORD(result) = sub_100351170((uint64_t)off_1007F4820, &v1);
  if (v1) {
    return result;
  }
  else {
    return 0LL;
  }
}

void sub_1003514B8(uint64_t a1, int *a2, int a3)
{
  int v8 = 0;
  if (!sub_10035129C((uint64_t)off_1007F47C8[0], &v8) || v8 < 1)
  {
    *a2 = a3;
  }

  else
  {
    *a2 = v8;
    float v6 = (os_log_s *)qword_1007FFAA8;
    if (os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG)) {
      sub_1003ADA84(a2, v6);
    }
  }

BOOL sub_100351538(uint64_t a1, double *a2)
{
  if (qword_1007FFB38 != -1) {
    dispatch_once(&qword_1007FFB38, &stru_1007BE690);
  }
  int v3 = dword_1007FFB30;
  *a2 = (double)dword_1007FFB30;
  return v3 != 0;
}

void sub_100351594(id a1)
{
}

BOOL sub_1003515C4(uint64_t a1, double *a2)
{
  if (qword_1007FFB48 != -1) {
    dispatch_once(&qword_1007FFB48, &stru_1007BE6B0);
  }
  int v3 = dword_1007FFB40;
  *a2 = (double)dword_1007FFB40;
  return v3 != 0;
}

void sub_100351620(id a1)
{
}

BOOL sub_100351650(uint64_t a1, void *a2)
{
  if (qword_1007FFB58 != -1) {
    dispatch_once(&qword_1007FFB58, &stru_1007BE6D0);
  }
  int v3 = dword_1007FFB50;
  if (dword_1007FFB50) {
    *a2 = dword_1007FFB50;
  }
  return v3 != 0;
}

void sub_1003516AC(id a1)
{
}

BOOL sub_1003516DC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (qword_1007FFB70 != -1) {
    dispatch_once(&qword_1007FFB70, &stru_1007BE6F0);
  }
  int v5 = byte_1007FFB68;
  if (byte_1007FFB68)
  {
    *a2 = dword_1007FFB60;
    *a3 = dword_1007FFB64;
  }

  return v5 != 0;
}

void sub_100351750(id a1)
{
  BOOL v1 = sub_100351170((uint64_t)off_1007F47F8[0], &byte_1007FFB68);
  char v2 = byte_1007FFB68;
  if (!v1 && !byte_1007FFB68) {
    goto LABEL_11;
  }
  if (byte_1007FFB68)
  {
    BOOL v3 = sub_10035129C((uint64_t)off_1007F4800[0], &dword_1007FFB60);
    BOOL v4 = dword_1007FFB60 && v3;
    byte_1007FFB68 = v4;
    if (v4)
    {
      BOOL v5 = sub_10035129C((uint64_t)off_1007F4808[0], &dword_1007FFB64);
      if (dword_1007FFB64) {
        char v2 = v5;
      }
      else {
        char v2 = 0;
      }
LABEL_11:
      byte_1007FFB68 = v2;
    }
  }

BOOL sub_1003517F0(uint64_t a1, _DWORD *a2)
{
  if (qword_1007FFB80 != -1) {
    dispatch_once(&qword_1007FFB80, &stru_1007BE710);
  }
  int v3 = byte_1007FFB7C;
  if (byte_1007FFB7C) {
    *a2 = dword_1007FFB78;
  }
  return v3 != 0;
}

void sub_100351854(id a1)
{
  BOOL v1 = sub_100351170((uint64_t)off_1007F47F8[0], &byte_1007FFB7C);
  char v2 = byte_1007FFB7C;
  if (v1 || byte_1007FFB7C)
  {
    if (!byte_1007FFB7C) {
      return;
    }
    BOOL v3 = sub_10035129C((uint64_t)off_1007F4810[0], &dword_1007FFB78);
    if (dword_1007FFB78) {
      char v2 = v3;
    }
    else {
      char v2 = 0;
    }
  }

  byte_1007FFB7C = v2;
}

void sub_1003518C0(uint64_t a1)
{
  BOOL v1 = sub_100351084(a1, &__p);
  BOOL v2 = os_log_type_enabled((os_log_t)qword_1007FFAA8, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v2) {
      sub_1003ADAF8();
    }
  }

  else if (v2)
  {
    sub_1003AD6D4();
  }

void sub_100351954( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100351970(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  BOOL v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  BOOL v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0LL;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }

    else
    {
      v11 &= v12 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *BOOL v7 = 0LL;
    v7[1] = 0LL;
  }

void sub_100351A10(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001ACE3C(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void sub_100351A64(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40)) {
      sub_100351970(a1, (uint64_t *)a2);
    }
  }

  else if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(sub_1001ACE04(a1) + 40) = 0;
  }

  else
  {
    *(_BYTE *)(sub_100315028(a1, (uint64_t *)a2) + 40) = 1;
  }

uint64_t sub_100351AAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_100351B20(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100351B0C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100351B20(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10003118C(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100031634(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100351D9C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100021B74(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *char v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_100351D78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1000316D8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100351D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_1000063A8(result, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }

  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100351E28(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1000316D8(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100351E44(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_10003118C((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_100031634(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

uint64_t *sub_100351F44(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = a1 + 16;
  unint64_t v14 = (char *)operator new(0xA0uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)unint64_t v14 = 0LL;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *((void *)v14 + 19) = 0LL;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100021B74(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *size_t v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1003521CC((uint64_t)v24, 0LL);
  return i;
}

void sub_1003521B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1003521CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1001ACDC4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_100352210(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100352384((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_10001E11C();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10001E0CC((void *)a1, v11);
    unint64_t v12 = sub_10013E9A0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_1003523BC(__str, v13, v9);
    unint64_t v12 = sub_10013E9A0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }

  sub_1003523BC(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 24LL;
    }

    while (v16 != v15);
  }

  *(void *)(a1 + 8) = v15;
}

void sub_100352374(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10035237C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100352384(uint64_t *a1)
{
  if (*a1)
  {
    sub_10013EB14(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

std::string *sub_1003523BC(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }

  return (std::string *)v4;
}

uint64_t sub_100352418(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100021B74(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_100352474(_Unwind_Exception *a1)
{
}

uint64_t *sub_10035248C(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }

    uint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5) {
            return i;
          }
        }

        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }

          else
          {
            v10 &= v6 - 1;
          }

          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_1003526D0(a1, *a2, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100021B74(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }

  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    *BOOL v17 = v20[0];
  }

  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }

  uint64_t i = (uint64_t *)v20[0];
  v20[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_1003521CC((uint64_t)v20, 0LL);
  return i;
}

void sub_1003526B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003526D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xA0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  uint64_t result = sub_100352744((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10035272C(_Unwind_Exception *a1)
{
}

uint64_t sub_100352744(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 12);
  *(_DWORD *)a1 = *a2;
  unint64_t v5 = (_BYTE *)(a1 + 48);
  sub_1003527DC(a1 + 8, (uint64_t)(a2 + 2));
  sub_100352B70(v5, v4);
  sub_100352F14((_BYTE *)(a1 + 96), (uint64_t)(a2 + 24));
  return a1;
}

void sub_1003527B0(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 + 88)) {
    sub_1001ACE04(v3);
  }
  sub_1001ACE04(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003527DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100021B74(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_100352838(_Unwind_Exception *a1)
{
}

uint64_t **sub_100352850(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }

    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
        }

        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }

          else
          {
            v10 &= v6 - 1;
          }

          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100352A88(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100021B74(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }
  }

  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }

  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }

  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100352A64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100352A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0LL;
  void v8[5] = 0LL;
  v8[3] = 0LL;
  uint64_t result = sub_1001DF3F4( v8 + 3,  *(const void **)(a3 + 8),  *(void *)(a3 + 16),  (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100352B08(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100352B24(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

_BYTE *sub_100352B70(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_100352BCC((uint64_t)a1, a2);
    a1[40] = 1;
  }

  return a1;
}

void sub_100352BB0(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 40)) {
    sub_1001ACE04(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100352BCC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100021B74(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_100352C28(_Unwind_Exception *a1)
{
}

uint64_t **sub_100352C40(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }

    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
        }

        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }

          else
          {
            v10 &= v6 - 1;
          }

          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100352E78(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100021B74(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }
  }

  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }

  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }

  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100352E54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100352E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0LL;
  void v8[5] = 0LL;
  v8[3] = 0LL;
  uint64_t result = sub_1001DF46C( v8 + 3,  *(const void **)(a3 + 8),  *(void *)(a3 + 16),  (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100352EF8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

_BYTE *sub_100352F14(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_100352F70((uint64_t)a1, a2);
    a1[40] = 1;
  }

  return a1;
}

void sub_100352F54(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 40)) {
    sub_1001ACE04(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100352F70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100021B74(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_100352FCC(_Unwind_Exception *a1)
{
}

uint64_t **sub_100352FE4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }

    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
        }

        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }

          else
          {
            v10 &= v6 - 1;
          }

          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10035321C(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100021B74(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v6 - 1) & v5;
    }
  }

  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }

  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }

  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1003531F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10035321C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint64_t v8 = 0LL;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = *(_BYTE *)a3;
  v8[4] = 0LL;
  void v8[5] = 0LL;
  v8[3] = 0LL;
  uint64_t result = sub_1001DF4E4( v8 + 3,  *(const void **)(a3 + 8),  *(void *)(a3 + 16),  (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10035329C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1003532B8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10001E0CC(result, a4);
    uint64_t result = sub_10035333C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_10035331C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10013EAD4(&a9);
  _Unwind_Resume(a1);
}

char *sub_10035333C(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  float v11 = __dst;
  float v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000063A8(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      unint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      float v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10013EA5C((uint64_t)v9);
  return v4;
}

void sub_1003533E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_1003533F8(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_10003118C((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  float v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_100031634(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      float v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

uint64_t **sub_1003534F8(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

  ;
}

  ;
}

void sub_1003535DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1003535E8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1003535F8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100353608(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100353614()
{
  BOOL v0 = objc_autoreleasePoolPush();
  qword_1007FFAA8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  qword_1007FFAB8 = 0LL;
  unk_1007FFAC0 = 0LL;
  qword_1007FFAB0 = 0LL;
  __cxa_atexit((void (*)(void *))sub_10034CDB4, &qword_1007FFAB0, (void *)&_mh_execute_header);
  qword_1007FFAD0 = 0LL;
  unk_1007FFAD8 = 0LL;
  qword_1007FFAC8 = 0LL;
  __cxa_atexit((void (*)(void *))sub_10034CDE4, &qword_1007FFAC8, (void *)&_mh_execute_header);
  qword_1007FFAE8 = 0LL;
  unk_1007FFAF0 = 0LL;
  qword_1007FFAE0 = 0LL;
  __cxa_atexit((void (*)(void *))sub_10034CE14, &qword_1007FFAE0, (void *)&_mh_execute_header);
  xmmword_1007FFAF8 = 0u;
  unk_1007FFB08 = 0u;
  dword_1007FFB18 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10034CE44, &xmmword_1007FFAF8, (void *)&_mh_execute_header);
  sub_1000065CC(v2, "01000000000000004D47575700000000");
  int v3 = 0;
  sub_1000065CC(v4, "01000000000000004757570000000000");
  int v5 = 1;
  sub_1000065CC(v6, "01000000000000004752530000000000");
  int v7 = 1;
  sub_1000065CC(v8, "01000000000000005253000000000000");
  int v9 = 1;
  sub_1000065CC(v10, "0100000000000000554D525300000000");
  int v11 = 1;
  sub_1000065CC(v12, "0100000000000000524F570000000000");
  int v13 = 1;
  sub_1000065CC(v14, "01000000000000005757000000000000");
  int v15 = 1;
  sub_1000065CC(v16, "01000000000000004D57574A00000000");
  int v17 = 0;
  sub_1000065CC(v18, "01000000000000004450450000000000");
  int v19 = 1;
  sub_1000065CC(v20, "01000000000000004450000000000000");
  int v21 = 1;
  sub_1000065CC(v22, "01000000000000004D57570000000000");
  int v23 = 0;
  sub_1000065CC(v24, "01000000000000004D44500000000000");
  int v25 = 0;
  sub_100351AAC((uint64_t)qword_1008008E8, v2, 12LL);
  uint64_t v1 = 384LL;
  do
  {
    v1 -= 32LL;
  }

  while (v1);
  __cxa_atexit((void (*)(void *))sub_10034CE48, qword_1008008E8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1003538BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 384LL;
  while (1)
  {
    v12 -= 32LL;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }

void sub_100353938()
{
}

uint64_t sub_100353940()
{
  if (qword_1007FFB88 != -1) {
    dispatch_once(&qword_1007FFB88, &stru_1007BE838);
  }
  return dword_1007F4828;
}

void sub_100353980(id a1)
{
  uint64_t v1 = (const __CFNumber *)MGCopyAnswer(@"nhGhVMyvrWYe9U2ltAUImg", 0LL);
  if (!v1)
  {
    sub_10032C51C("Failed to get ChipID", v2, v3, v4, v5, v6, v7, v8, v22);
    return;
  }

  int v9 = v1;
  CFTypeID v10 = CFGetTypeID(v1);
  if (v10 != CFNumberGetTypeID())
  {
    int v19 = "ChipID has unexpected type";
LABEL_13:
    sub_10032C51C(v19, v11, v12, v13, v14, v15, v16, v17, v20);
    goto LABEL_14;
  }

  unsigned int valuePtr = 0;
  if (!CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr))
  {
    int v19 = "Failed to extract ChipID as a number";
    goto LABEL_13;
  }

  if (valuePtr == 8228)
  {
    dword_1007F4828 = 1;
    unint64_t v18 = "Chip type 2";
    goto LABEL_11;
  }

  if (valuePtr != 8198)
  {
    uint64_t v20 = valuePtr;
    int v19 = "Unrecognized ChipID 0x%x";
    goto LABEL_13;
  }

  dword_1007F4828 = 0;
  unint64_t v18 = "Chip type 1";
LABEL_11:
  sub_10032C3DC(v18, v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_14:
  CFRelease(v9);
}

void sub_100353A78(char **a1@<X1>, uint64_t a2@<X8>)
{
  __int16 __dst = 0;
  unsigned __int8 v71 = 0;
  __int16 v70 = 0;
  char v69 = 0;
  __int16 v68 = 0;
  unsigned __int8 v67 = 0;
  sub_1003619AC(*a1, 2uLL, &__dst, 1);
  sub_1003619AC(*a1 + 2, 1uLL, &v71, 1);
  sub_1003619AC(*a1 + 3, 2uLL, &v70, 1);
  sub_1003619AC(*a1 + 5, 1uLL, &v69, 1);
  sub_1003619AC(*a1 + 6, 2uLL, &v68, 1);
  uint64_t v75 = 0LL;
  sub_1003619AC(*a1 + 8, 1uLL, &v67, 1);
  sub_100354464(v66, v67);
  if (v67)
  {
    unint64_t v10 = 0LL;
    int v11 = 9;
    do
    {
      LOWORD(v57) = 0;
      __p[32] = 0;
      v62[0] = 0;
      v62[8] = 0;
      v62[16] = 0;
      v62[24] = 0;
      uint64_t v64 = 0LL;
      uint64_t v65 = 0LL;
      uint64_t v63 = 0LL;
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      memset(__p, 0, 25);
      uint64_t v12 = &(*a1)[v11];
      unsigned __int8 v56 = 0;
      sub_1003619AC(v12, 1uLL, &v56, 1);
      uint64_t v13 = sub_10032BE44(v56);
      if ((v13 & 0xFF0000) == 0) {
        __assert_rtn("decodeRangeCIREventVersion1", "roseCIRDataDecoderV1.cpp", 61, "packetType.has_value()");
      }
      uint64_t v14 = v11;
      LOWORD(v57) = v13;
      sub_1003619AC(&(*a1)[v11 + 1], 1uLL, (_BYTE *)&v57 + 2, 1);
      int v15 = sub_1003216DC();
      size_t v16 = v15;
      LOBYTE(__src[0]) = 0;
      uint64_t v17 = (_BYTE *)v58;
      if ((unint64_t)v15 <= *((void *)&v58 + 1) - (void)v58)
      {
      }

      else
      {
        sub_1001C9BC8(&v58, v15 - (*((void *)&v58 + 1) - v58), __src);
        uint64_t v17 = (_BYTE *)v58;
      }

      uint64_t v18 = v14 + 2;
      sub_1003619AC(&(*a1)[v18], v16, v17, 1);
      int v19 = sub_1003217A0();
      int v20 = v19;
      size_t v21 = v19;
      LOBYTE(__src[0]) = 0;
      uint64_t v22 = (_BYTE *)*((void *)&v59 + 1);
      if ((unint64_t)v19 <= (void)v60 - *((void *)&v59 + 1))
      {
      }

      else
      {
        sub_1001C9BC8((void *)&v59 + 1, v19 - (v60 - *((void *)&v59 + 1)), __src);
        uint64_t v22 = (_BYTE *)*((void *)&v59 + 1);
      }

      size_t v23 = v16 + (int)v18;
      sub_1003619AC(&(*a1)[v23], v21, v22, 1);
      int v24 = 0;
      int v11 = v20 + v23;
      unint64_t v53 = v10;
      do
      {
        if (((BYTE2(v57) >> v24) & 1) != 0)
        {
          bzero(__src, 0x400uLL);
          for (uint64_t i = 0LL; i != 1024; i += 4LL)
          {
            LOWORD(v73) = 0;
            __int16 v55 = 0;
            sub_1003619AC(&(*a1)[v11 + i], 2uLL, &v73, 1);
            sub_1003619AC(&(*a1)[v11 + 2 + i], 2uLL, &v55, 1);
            __int16 v26 = (__int16)v73;
            unint64_t v27 = (_WORD *)((char *)__src + i);
            *unint64_t v27 = v55;
            v27[1] = v26;
          }

          int v54 = v11;
          BOOL v28 = *(char **)&__p[8];
          if (*(void *)&__p[8] >= *(void *)&__p[16])
          {
            unint64_t v30 = *(char **)__p;
            uint64_t v31 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 10;
            unint64_t v32 = v31 + 1;
            uint64_t v33 = *(void *)&__p[16] - *(void *)__p;
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              char v35 = (char *)sub_100130AF0((uint64_t)&__p[16], v34);
              uint64_t v37 = v36;
              unint64_t v30 = *(char **)__p;
              BOOL v28 = *(char **)&__p[8];
            }

            else
            {
              char v35 = 0LL;
              uint64_t v37 = 0LL;
            }

            int v38 = &v35[1024 * v31];
            memcpy(v38, __src, 0x400uLL);
            char v39 = v38;
            while (v28 != v30)
            {
              v28 -= 1024;
              v39 -= 1024;
              memcpy(v39, v28, 0x400uLL);
            }

            __int128 v40 = &v35[1024 * v37];
            unint64_t v29 = v38 + 1024;
            *(void *)std::string __p = v39;
            *(void *)&__p[8] = v38 + 1024;
            *(void *)&__p[16] = v40;
            if (v30) {
              operator delete(v30);
            }
            unint64_t v10 = v53;
          }

          else
          {
            memcpy(*(void **)&__p[8], __src, 0x400uLL);
            unint64_t v29 = v28 + 1024;
          }

          int v11 = v54 + 1024;
          *(void *)&__p[8] = v29;
        }

        ++v24;
      }

      while (v24 != 3);
      __int16 v41 = v66[0];
      char v42 = &v66[0][76 * v10];
      __int16 v43 = v57;
      *((_BYTE *)v42 + 2) = BYTE2(v57);
      *char v42 = v43;
      if (v42 == (__int16 *)&v57)
      {
        __int16 v47 = &v41[76 * v10];
        __int128 v48 = *(_OWORD *)&__p[24];
        __int128 v49 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v47 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v47 + 5) = v48;
        *((_OWORD *)v47 + 6) = v49;
      }

      else
      {
        sub_100178F70(&v41[76 * v10 + 4], (char *)v58, *((char **)&v58 + 1), *((void *)&v58 + 1) - v58);
        sub_100178F70(&v41[76 * v10 + 16], *((char **)&v59 + 1), (char *)v60, v60 - *((void *)&v59 + 1));
        sub_100354160( (char *)&v41[76 * v10 + 28],  *(char **)__p,  *(uint64_t *)&__p[8],  (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 10);
        char v44 = &v41[76 * v10];
        __int128 v45 = *(_OWORD *)&__p[24];
        __int128 v46 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v44 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v44 + 5) = v45;
        *((_OWORD *)v44 + 6) = v46;
        sub_100354268((uint64_t *)v44 + 16, v63, v64, (v64 - v63) >> 5);
      }

      *(void *)&__src[0] = &v63;
      sub_100130C0C((void ***)__src);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }

      if (*((void *)&v59 + 1))
      {
        *(void *)&__int128 v60 = *((void *)&v59 + 1);
        operator delete(*((void **)&v59 + 1));
      }

      if ((void)v58)
      {
        *((void *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }

      ++v10;
    }

    while (v10 < v67);
  }

  __int16 v50 = __dst;
  char v51 = sub_10032AF88(v71, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v57 = 0LL;
  __int128 v58 = 0uLL;
  sub_100329440((uint64_t)__src, v50, v51, v70, v69, &v75, v66, &v57);
  *(_OWORD *)a2 = __src[0];
  *(void *)(a2 + 16) = *(void *)&__src[1];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
  *(void *)(a2 + 40) = *((void *)&__src[2] + 1);
  *((void *)&__src[1] + 1) = 0LL;
  *(void *)&__src[2] = 0LL;
  *(_OWORD *)(a2 + 48) = __src[3];
  *(void *)(a2 + 64) = *(void *)&__src[4];
  *((void *)&__src[2] + 1) = 0LL;
  memset(&__src[3], 0, 24);
  *(_BYTE *)(a2 + 72) = 1;
  uint64_t v73 = (void **)&__src[3];
  sub_100130C0C(&v73);
  uint64_t v73 = (void **)&__src[1] + 1;
  sub_100130C98(&v73);
  uint64_t v73 = (void **)&v57;
  sub_100130C0C(&v73);
  *(void *)&__src[0] = v66;
  sub_100130C98((void ***)__src);
}

void sub_1003540B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void **a45, void **a46)
{
  *(void *)(v47 + 192) = v46;
  sub_100130C0C(&a45);
  a46 = (void **)&a40;
  sub_100130C98(&a46);
  _Unwind_Resume(a1);
}

char *sub_100354160(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 10)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      void v7[2] = 0LL;
    }

    if (a4 >> 54) {
      sub_10001E11C();
    }
    uint64_t v10 = v8 >> 9;
    if (v8 >> 9 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_100130AB0(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 10;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[1024 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

void sub_100354268(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003543BC(a1);
    if (a4 >> 59) {
      sub_10001E11C();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100130DA0(a1, v12);
    uint64_t v13 = sub_100130E14(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }

  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_1003543F4((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = sub_100130E14(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }

  sub_1003543F4((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      int v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(void *)(v18 - 16) = v19;
        operator delete(v19);
      }

      v18 -= 32LL;
    }

    while (v18 != v17);
  }

  a1[1] = v17;
}

void sub_1003543AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003543B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003543BC(uint64_t *a1)
{
  if (*a1)
  {
    sub_100130C4C(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_1003543F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      if (v5 != a4) {
        sub_100178F70( (void *)(a4 + 8),  *(char **)(v5 + 8),  *(char **)(v5 + 16),  *(void *)(v5 + 16) - *(void *)(v5 + 8));
      }
      v5 += 32LL;
      a4 += 32LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void *sub_100354464(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10013076C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }

  return a1;
}

void sub_1003544F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10035450C(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + sub_1001ACE80(v1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 213) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 999;
  *(void *)(a1 + 584) = 850045863LL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0LL;
  *(void *)(a1 + 648) = 850045863LL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = 0LL;
  *(void *)(a1 + 736) = 0LL;
  sub_100354620(a1);
  unsigned int v2 = sub_100353940();
  *(_DWORD *)(a1 + 744) = v2;
  if (v2 <= 2) {
    *(_DWORD *)(a1 + 748) = dword_1004317E0[v2];
  }
  return a1;
}

void sub_1003545C0(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  uint64_t v8 = *(void **)(v1 + 736);
  if (v8 == v6)
  {
    uint64_t v9 = v6;
    uint64_t v10 = 4LL;
  }

  else
  {
    if (!v8) {
      goto LABEL_6;
    }
    uint64_t v10 = 5LL;
    uint64_t v9 = *(void **)(v1 + 736);
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  std::mutex::~mutex(v4);
  std::mutex::~mutex(v3);
  sub_1000061A4(v2);
  sub_1000060B4(v1);
  _Unwind_Resume(a1);
}

void sub_100354620(uint64_t a1)
{
  uint64_t v2 = MGGetProductType();
  if (v2 > 2625074842LL)
  {
    if (v2 > 3571532205LL)
    {
      if (v2 > 3825599859LL)
      {
        if (v2 > 3885279869LL)
        {
          switch(v2)
          {
            case 3885279870LL:
              uint64_t v10 = 3LL;
              goto LABEL_113;
            case 4068102502LL:
              uint64_t v10 = 120LL;
              goto LABEL_113;
            case 4201643249LL:
              uint64_t v10 = 6LL;
              goto LABEL_113;
          }
        }

        else
        {
          switch(v2)
          {
            case 3825599860LL:
              uint64_t v10 = 16LL;
              goto LABEL_113;
            case 3839750255LL:
              uint64_t v10 = 117LL;
              goto LABEL_113;
            case 3867318491LL:
              uint64_t v10 = 113LL;
              goto LABEL_113;
          }
        }
      }

      else if (v2 > 3742999857LL)
      {
        switch(v2)
        {
          case 3742999858LL:
            uint64_t v10 = 110LL;
            goto LABEL_113;
          case 3767261006LL:
            uint64_t v10 = 104LL;
            goto LABEL_113;
          case 3819635030LL:
            uint64_t v10 = 112LL;
            goto LABEL_113;
        }
      }

      else
      {
        switch(v2)
        {
          case 3571532206LL:
            uint64_t v10 = 102LL;
            goto LABEL_113;
          case 3585085679LL:
            uint64_t v10 = 8LL;
            goto LABEL_113;
          case 3663011141LL:
            uint64_t v10 = 109LL;
            goto LABEL_113;
        }
      }
    }

    else if (v2 > 2941181570LL)
    {
      if (v2 > 3001488777LL)
      {
        switch(v2)
        {
          case 3001488778LL:
            uint64_t v10 = 5LL;
            goto LABEL_113;
          case 3143587592LL:
            uint64_t v10 = 118LL;
            goto LABEL_113;
          case 3348380076LL:
            uint64_t v10 = 200LL;
            goto LABEL_113;
        }
      }

      else
      {
        switch(v2)
        {
          case 2941181571LL:
            uint64_t v10 = 18LL;
            goto LABEL_113;
          case 2943112657LL:
            uint64_t v10 = 100LL;
            goto LABEL_113;
          case 2979575960LL:
            uint64_t v10 = 106LL;
            goto LABEL_113;
        }
      }
    }

    else if (v2 > 2793418700LL)
    {
      switch(v2)
      {
        case 2793418701LL:
          uint64_t v10 = 15LL;
          goto LABEL_113;
        case 2795618603LL:
          uint64_t v10 = 21LL;
          goto LABEL_113;
        case 2940697645LL:
          uint64_t v10 = 13LL;
          goto LABEL_113;
      }
    }

    else
    {
      switch(v2)
      {
        case 2625074843LL:
          uint64_t v10 = 114LL;
          goto LABEL_113;
        case 2688879999LL:
          uint64_t v10 = 14LL;
          goto LABEL_113;
        case 2722529672LL:
          uint64_t v10 = 2LL;
          goto LABEL_113;
      }
    }

void sub_100354BCC(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  sub_10017938C(a1);
  sub_100006324((void *)a1, a2);
  *(_BYTE *)(a1 + sub_1001ACE80(v1 + 112) = 1;
  sub_10032C3DC("RoseParameterCache::cacheHelloResponse", v5, v6, v7, v8, v9, v10, v11, v19);
  sub_100354C48((_BYTE *)a1, v12, v13, v14, v15, v16, v17, v18);
  std::mutex::unlock(v4);
}

void sub_100354C34(_Unwind_Exception *a1)
{
}

void sub_100354C48( _BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[112]) {
    uint64_t v9 = "cached";
  }
  else {
    uint64_t v9 = "not cached";
  }
  sub_10032C3DC("RoseParameterCache: HelloResponse %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  if (a1[213]) {
    uint64_t v17 = "cached";
  }
  else {
    uint64_t v17 = "not cached";
  }
  sub_10032C3DC("RoseParameterCache: AlishaCapabilities %s", v10, v11, v12, v13, v14, v15, v16, (uint64_t)v17);
  if (a1[568]) {
    int v25 = "cached";
  }
  else {
    int v25 = "not cached";
  }
  sub_10032C3DC("RoseParameterCache: RoseCalFileParser %s", v18, v19, v20, v21, v22, v23, v24, (uint64_t)v25);
  if (a1[568])
  {
    __int16 v26 = sub_1000065CC(__p, "AOAtoPDOAMapping_CV_Ch5");
    sub_100355190((uint64_t)v26, (uint64_t)(a1 + 280), (uint64_t)__p, v27, v28, v29, v30, v31);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
      goto LABEL_23;
    }
    unint64_t v32 = sub_1000065CC(__p, "AOAtoPDOAMapping_CH_Ch5");
    sub_100355190((uint64_t)v32, (uint64_t)(a1 + 344), (uint64_t)__p, v33, v34, v35, v36, v37);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
      goto LABEL_23;
    }
    int v38 = sub_1000065CC(__p, "AOAtoPDOAMapping_CV_Ch9");
    sub_100355190((uint64_t)v38, (uint64_t)(a1 + 408), (uint64_t)__p, v39, v40, v41, v42, v43);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
LABEL_23:
    }
      sub_100006080();
    char v44 = sub_1000065CC(__p, "AOAtoPDOAMapping_CH_Ch9");
    sub_100355190((uint64_t)v44, (uint64_t)(a1 + 472), (uint64_t)__p, v45, v46, v47, v48, v49);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100354DBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100354DE4( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 213)) {
    *(_BYTE *)(a1 + 213) = 0;
  }
  __int128 v9 = *a2;
  *(_OWORD *)(a1 + 136) = a2[1];
  *(_OWORD *)(a1 + 120) = v9;
  __int128 v10 = a2[2];
  __int128 v11 = a2[3];
  __int128 v12 = a2[4];
  *(_OWORD *)(a1 + 197) = *(__int128 *)((char *)a2 + 77);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_BYTE *)(a1 + 213) = 1;
  sub_10032C3DC("RoseParameterCache::cacheAlishaCapabilities", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v20);
  sub_100354C48((_BYTE *)a1, v13, v14, v15, v16, v17, v18, v19);
}

void sub_100354E4C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1007FFBA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1007FFBA8))
  {
    xmmword_1007FFB90 = 0uLL;
    unk_1007FFBA0 = 0LL;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFB90, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007FFBA8);
  }

  if (qword_1007FFBB0 != -1) {
    dispatch_once(&qword_1007FFBB0, &stru_1007BE878);
  }
  if (byte_1007FFBA7 < 0)
  {
    sub_1000063A8((_BYTE *)a1, (void *)xmmword_1007FFB90, *((unint64_t *)&xmmword_1007FFB90 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_1007FFB90;
    *(void *)(a1 + 16) = unk_1007FFBA0;
  }

void sub_100354F24(id a1)
{
  uint64_t v25 = 1LL;
  uint64_t v8 = (char *)container_system_group_path_for_identifier(0LL, "systemgroup.com.apple.nearbyd.datastore", &v25);
  if (!v8) {
    sub_1003ADB74(&v25, v1, v2, v3, v4, v5, v6, v7);
  }
  sub_1000065CC(&v24, v8);
  sub_1000065CC(__p, "/Library/");
  if ((v23 & 0x80u) == 0) {
    __int128 v9 = __p;
  }
  else {
    __int128 v9 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v10 = v23;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  __int128 v11 = std::string::append(&v24, (const std::string::value_type *)v9, v10);
  std::string::size_type v19 = v11->__r_.__value_.__r.__words[0];
  v26[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char size = v11->__r_.__value_.__s.__size_;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  if (byte_1007FFBA7 < 0) {
    operator delete((void *)xmmword_1007FFB90);
  }
  *(void *)&xmmword_1007FFB90 = v19;
  *((void *)&xmmword_1007FFB90 + 1) = v26[0];
  *(void *)((char *)&xmmword_1007FFB90 + 15) = *(void *)((char *)v26 + 7);
  byte_1007FFBA7 = size;
  if (byte_1007FFBA7 >= 0) {
    uint64_t v21 = &xmmword_1007FFB90;
  }
  else {
    uint64_t v21 = (__int128 *)xmmword_1007FFB90;
  }
  sub_10032C3DC("system group container path: %s", v12, v13, v14, v15, v16, v17, v18, (uint64_t)v21);
  free(v8);
}

void sub_100355080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003550BC(char *a1@<X1>, std::string *a2@<X8>)
{
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10035515C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100355190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (*(_BYTE *)(a2 + 56)) {
    sub_10032C3DC("RoseParameterCache: mapping %s cached (%zu x %zu)", a2, a3, a4, a5, a6, a7, a8, v8);
  }
  else {
    sub_10032C3DC("RoseParameterCache: mapping %s not cached", a2, a3, a4, a5, a6, a7, a8, v8);
  }
}

uint64_t sub_1003551E8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  if (*(_BYTE *)(a1 + 112))
  {
    __int16 v3 = *(_WORD *)(a1 + 26);
    int v4 = v3 & 0xFF00;
    int v5 = v3;
    int v6 = 0x10000;
  }

  else
  {
    int v6 = 0;
    int v5 = 0;
    int v4 = 0;
  }

  std::mutex::unlock(v2);
  return v5 | v6 | v4;
}

BOOL sub_100355250(uint64_t a1)
{
  return sub_1003206F4(*(_DWORD *)(a1 + 576));
}

uint64_t sub_100355258(uint64_t a1)
{
  return sub_100320704(*(_DWORD *)(a1 + 576));
}

BOOL sub_100355260(uint64_t a1)
{
  return sub_1003207FC(*(_DWORD *)(a1 + 576));
}

uint64_t sub_100355268(uint64_t a1)
{
  return sub_1003207A4(*(_DWORD *)(a1 + 576));
}

BOOL sub_100355270(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 744) & 0xFFFFFFFD) != 0;
}

uint64_t sub_100355280(uint64_t a1)
{
  uint64_t result = sub_1003207A4(*(_DWORD *)(a1 + 576));
  if ((_DWORD)result)
  {
    uint64_t v3 = sub_1003551E8(a1);
    return (v3 & 0xFF0000) != 0 && (unsigned __int16)v3 == 6;
  }

  return result;
}

BOOL sub_1003552C4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1;
}

BOOL sub_1003552D4(uint64_t a1)
{
  return sub_100320944(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003552DC(uint64_t a1)
{
  return sub_10032096C(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003552E4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1 && sub_100320824(*(_DWORD *)(a1 + 576));
}

uint64_t sub_100355300(uint64_t a1)
{
  uint64_t v1 = sub_1003551E8(a1);
  else {
    unsigned int v2 = 310;
  }
  if ((v1 & 0xFF0000) != 0) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100355334(uint64_t result, void *a2, uint64_t a3, int a4)
{
  *(void *)uint64_t result = 850045863LL;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 56) = 0LL;
  uint64_t v4 = a2[1];
  *(void *)(result + 64) = *a2;
  *(void *)(result + 72) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  return result;
}

uint64_t sub_100355380( void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v233 = 0LL;
  uint64_t v232 = 0LL;
  std::string v9 = (std::__shared_weak_count *)a1[9];
  if (!v9 || (uint64_t v12 = std::__shared_weak_count::lock(v9), (v233 = v12) == 0LL) || (v13 = a1[8], (v232 = v13) == 0))
  {
    sub_10032C3DC("No response listener, ignoring response packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v178);
    goto LABEL_14;
  }

  uint64_t v14 = v12;
  int v15 = sub_10032A158(a2);
  if (!v15)
  {
    int v40 = sub_10032A1C0(a2);
    if (v40 <= 79)
    {
      switch(v40)
      {
        case 0:
          sub_1003568D4(a3, v270);
          uint64_t v41 = sub_100005150();
          sub_100354BCC((uint64_t)v41, (__int128 *)v270);
          v230[0] = v13;
          v230[1] = v14;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          sub_100356D64(v231, (__int128 *)v270);
          sub_100356DE8((uint64_t)&v266, (uint64_t)v230);
          sub_100356ECC((uint64_t)v230);
          uint64_t v44 = a1[10];
          uint64_t v45 = (uint64_t)v269;
          if (!v269) {
            goto LABEL_33;
          }
          if (v269 == (char *)&v266)
          {
            char v265 = v264;
            (*(void (**)(__int128 *, _BYTE *))(v266 + 24))(&v266, v264);
          }

          else
          {
            uint64_t v45 = (*(uint64_t (**)(void))(*(void *)v269 + 16LL))();
LABEL_33:
            char v265 = (_BYTE *)v45;
          }

          sub_100320EB4(v44, (uint64_t)v264);
          char v174 = v265;
          if (v265 == v264)
          {
            uint64_t v175 = 4LL;
            char v174 = v264;
          }

          else
          {
            if (!v265) {
              goto LABEL_175;
            }
            uint64_t v175 = 5LL;
          }

          (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_175:
          char v176 = v269;
          if (v269 == (char *)&v266)
          {
            uint64_t v177 = 4LL;
            char v176 = (char *)&v266;
          }

          else
          {
            if (!v269) {
              goto LABEL_180;
            }
            uint64_t v177 = 5LL;
          }

          (*(void (**)(void))(*(void *)v176 + 8 * v177))();
LABEL_180:
          sub_1001787E4((uint64_t)v270);
          goto LABEL_14;
        case 1:
          int v132 = sub_100356F04(a3);
          int v133 = v132;
          uint64_t v227 = v13;
          char v228 = v14;
          char v134 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
          int v229 = v132;
          char v136 = operator new(0x20uLL);
          *char v136 = off_1007BE928;
          v136[1] = v13;
          v136[2] = v14;
          uint64_t v227 = 0LL;
          char v228 = 0LL;
          *((_DWORD *)v136 + 6) = v133;
          *(void *)&v270[24] = v136;
          sub_100012390((uint64_t)&v227);
          uint64_t v137 = a1[10];
          char v263 = (_BYTE *)(*(uint64_t (**)(void *))(*v136 + 16LL))(v136);
          sub_100320EB4(v137, (uint64_t)v262);
          int v54 = v263;
          if (v263 != v262) {
            goto LABEL_43;
          }
          uint64_t v55 = 4LL;
          int v54 = v262;
          goto LABEL_77;
        case 2:
          int v117 = sub_100356FBC(a3);
          int v118 = v117;
          uint64_t v224 = v13;
          v225 = v14;
          __int16 v119 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
          int v226 = v117;
          char v121 = operator new(0x20uLL);
          *char v121 = off_1007BE9A8;
          v121[1] = v13;
          v121[2] = v14;
          uint64_t v224 = 0LL;
          v225 = 0LL;
          *((_DWORD *)v121 + 6) = v118;
          *(void *)&v270[24] = v121;
          sub_100012390((uint64_t)&v224);
          uint64_t v122 = a1[10];
          char v261 = (_BYTE *)(*(uint64_t (**)(void *))(*v121 + 16LL))(v121);
          sub_100320EB4(v122, (uint64_t)v260);
          int v54 = v261;
          if (v261 != v260) {
            goto LABEL_43;
          }
          uint64_t v55 = 4LL;
          int v54 = v260;
          goto LABEL_77;
        case 3:
          int v138 = sub_10035729C(a3);
          int v139 = v138;
          uint64_t v212 = v13;
          std::stringbuf::string_type v213 = v14;
          __int16 v140 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
          int v214 = v138;
          char v142 = operator new(0x20uLL);
          *char v142 = off_1007BEBA8;
          v142[1] = v13;
          v142[2] = v14;
          uint64_t v212 = 0LL;
          std::stringbuf::string_type v213 = 0LL;
          *((_DWORD *)v142 + 6) = v139;
          *(void *)&v270[24] = v142;
          sub_100012390((uint64_t)&v212);
          uint64_t v143 = a1[10];
          v253 = (_BYTE *)(*(uint64_t (**)(void *))(*v142 + 16LL))(v142);
          sub_100320EB4(v143, (uint64_t)v252);
          int v54 = v253;
          if (v253 != v252) {
            goto LABEL_43;
          }
          uint64_t v55 = 4LL;
          int v54 = v252;
          goto LABEL_77;
        case 4:
          sub_100357354(a3, (uint64_t)v270);
          v209[0] = v13;
          v209[1] = v14;
          char v144 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
          __int16 v210 = *(_WORD *)v270;
          memset(v211, 0, sizeof(v211));
          sub_1001DF8D4( v211,  *(uint64_t *)&v270[8],  *(uint64_t *)&v270[16],  (uint64_t)(*(void *)&v270[16] - *(void *)&v270[8]) >> 5);
          sub_100357634((uint64_t)&v266, (uint64_t)v209);
          sub_1003576CC((uint64_t)v209);
          uint64_t v146 = a1[10];
          uint64_t v147 = (uint64_t)v269;
          if (!v269) {
            goto LABEL_135;
          }
          if (v269 == (char *)&v266)
          {
            char v251 = v250;
            (*(void (**)(__int128 *, _BYTE *))(v266 + 24))(&v266, v250);
          }

          else
          {
            uint64_t v147 = (*(uint64_t (**)(char *))(*(void *)v269 + 16LL))(v269);
LABEL_135:
            char v251 = (_BYTE *)v147;
          }

          sub_100320EB4(v146, (uint64_t)v250);
          char v170 = v251;
          if (v251 == v250)
          {
            uint64_t v171 = 4LL;
            char v170 = v250;
          }

          else
          {
            if (!v251) {
              goto LABEL_163;
            }
            uint64_t v171 = 5LL;
          }

          (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_163:
          char v172 = v269;
          if (v269 == (char *)&v266)
          {
            uint64_t v173 = 4LL;
            char v172 = (char *)&v266;
          }

          else
          {
            if (!v269) {
              goto LABEL_168;
            }
            uint64_t v173 = 5LL;
          }

          (*(void (**)(void))(*(void *)v172 + 8 * v173))();
LABEL_168:
          *(void *)&__int128 v266 = &v270[8];
          sub_100130C0C((void ***)&v266);
          goto LABEL_14;
        case 5:
          unint64_t v112 = sub_100357708(a3);
          uint64_t v205 = v13;
          char v206 = v14;
          uint64_t v113 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
          int v207 = v112;
          LOBYTE(v208) = BYTE4(v112);
          uint64_t v115 = operator new(0x20uLL);
          *uint64_t v115 = off_1007BECA8;
          v115[1] = v13;
          v115[2] = v14;
          uint64_t v205 = 0LL;
          char v206 = 0LL;
          *((_DWORD *)v115 + 6) = v207;
          *((_WORD *)v115 + 14) = v208;
          *(void *)&v270[24] = v115;
          sub_100012390((uint64_t)&v205);
          uint64_t v116 = a1[10];
          char v249 = (_BYTE *)(*(uint64_t (**)(void *))(*v115 + 16LL))(v115);
          sub_100320EB4(v116, (uint64_t)v248);
          int v54 = v249;
          if (v249 != v248) {
            goto LABEL_43;
          }
          uint64_t v55 = 4LL;
          int v54 = v248;
          goto LABEL_77;
        case 9:
          sub_100357B1C((uint64_t)a3, (uint64_t)v270);
          uint64_t v187 = v13;
          char v188 = v14;
          __int16 v105 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
          __int128 v189 = *(_OWORD *)v270;
          __int128 v190 = *(_OWORD *)&v270[16];
          v191[0] = v271[0];
          *(_OWORD *)((char *)v191 + 12) = *(_OWORD *)((char *)v271 + 12);
          char v107 = (char *)operator new(0x58uLL);
          __int128 v108 = *(_OWORD *)&v270[16];
          *(_OWORD *)(v107 + 24) = *(_OWORD *)v270;
          *(void *)char v107 = off_1007BEF28;
          *((void *)v107 + 1) = v13;
          *((void *)v107 + 2) = v14;
          uint64_t v187 = 0LL;
          char v188 = 0LL;
          *(_OWORD *)(v107 + 40) = v108;
          *(_OWORD *)(v107 + 56) = v271[0];
          *(_OWORD *)(v107 + 68) = *(_OWORD *)((char *)v271 + 12);
          v269 = v107;
          sub_100012390((uint64_t)&v187);
          uint64_t v109 = a1[10];
          __int16 v239 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v107 + 16LL))(v107);
          sub_100320EB4(v109, (uint64_t)v238);
          char v110 = v239;
          if (v239 == v238)
          {
            uint64_t v111 = 4LL;
            char v110 = v238;
          }

          else
          {
            if (!v239) {
              goto LABEL_155;
            }
            uint64_t v111 = 5LL;
          }

          (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_155:
          __int16 v84 = v269;
          uint64_t v85 = 4LL;
          __int16 v84 = (char *)&v266;
          break;
        case 13:
          int v99 = sub_1003571C0(a3);
          int v100 = v99;
          uint64_t v215 = v13;
          char v216 = v14;
          char v101 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
          int v217 = v99;
          __int16 v103 = operator new(0x20uLL);
          *__int16 v103 = off_1007BEB28;
          v103[1] = v13;
          v103[2] = v14;
          uint64_t v215 = 0LL;
          char v216 = 0LL;
          *((_DWORD *)v103 + 6) = v100;
          *(void *)&v270[24] = v103;
          sub_100012390((uint64_t)&v215);
          uint64_t v104 = a1[10];
          __int16 v255 = (_BYTE *)(*(uint64_t (**)(void *))(*v103 + 16LL))(v103);
          sub_100320EB4(v104, (uint64_t)v254);
          int v54 = v255;
          if (v255 != v254) {
            goto LABEL_43;
          }
          uint64_t v55 = 4LL;
          int v54 = v254;
          goto LABEL_77;
        case 21:
          unsigned __int16 v123 = sub_1003577E8(a3, v16, v17, v18, v19, v20, v21, v22);
          sub_10032B2C8(v123, v270);
          if (v270[23] >= 0) {
            char v131 = v270;
          }
          else {
            char v131 = *(_BYTE **)v270;
          }
          sub_10032C3DC( "got tx power backoff response packet with status: %s",  v124,  v125,  v126,  v127,  v128,  v129,  v130,  (uint64_t)v131);
          goto LABEL_54;
        case 22:
          unsigned __int16 v90 = sub_10035784C(a3, v16, v17, v18, v19, v20, v21, v22);
          sub_10032B2C8(v90, v270);
          if (v270[23] >= 0) {
            __int16 v98 = v270;
          }
          else {
            __int16 v98 = *(_BYTE **)v270;
          }
          sub_10032C3DC( "got measure temperature response packet with status: %s, temperature (%f degree Celsius)",  v91,  v92,  v93,  v94,  v95,  v96,  v97,  (uint64_t)v98);
          goto LABEL_54;
        default:
          goto LABEL_152;
      }

      goto LABEL_82;
    }

    switch(v40)
    {
      case 'P':
        int v48 = sub_100357AB8((uint64_t)a3);
        int v49 = v48;
        uint64_t v192 = v13;
        char v193 = v14;
        __int16 v50 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        int v194 = v48;
        uint64_t v52 = operator new(0x20uLL);
        void *v52 = off_1007BEEA8;
        v52[1] = v13;
        v52[2] = v14;
        uint64_t v192 = 0LL;
        char v193 = 0LL;
        *((_DWORD *)v52 + 6) = v49;
        *(void *)&v270[24] = v52;
        sub_100012390((uint64_t)&v192);
        uint64_t v53 = a1[10];
        v241 = (_BYTE *)(*(uint64_t (**)(void *))(*v52 + 16LL))(v52);
        sub_100320EB4(v53, (uint64_t)v240);
        int v54 = v241;
        if (v241 != v240) {
          goto LABEL_43;
        }
        uint64_t v55 = 4LL;
        int v54 = v240;
        goto LABEL_77;
      case 'Q':
        unint64_t v158 = sub_100357A50((uint64_t)a3);
        unint64_t v159 = v158;
        uint64_t v195 = v13;
        __int16 v196 = v14;
        char v160 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
        unint64_t v197 = v158;
        char v162 = operator new(0x20uLL);
        *char v162 = off_1007BEE28;
        v162[1] = v13;
        uint64_t v195 = 0LL;
        __int16 v196 = 0LL;
        v162[2] = v14;
        v162[3] = v159;
        *(void *)&v270[24] = v162;
        sub_100012390((uint64_t)&v195);
        uint64_t v163 = a1[10];
        v243 = (_BYTE *)(*(uint64_t (**)(void *))(*v162 + 16LL))(v162);
        sub_100320EB4(v163, (uint64_t)v242);
        int v54 = v243;
        if (v243 != v242) {
          goto LABEL_43;
        }
        uint64_t v55 = 4LL;
        int v54 = v242;
        goto LABEL_77;
      case 'R':
        unint64_t v148 = sub_100357A50((uint64_t)a3);
        unint64_t v149 = v148;
        uint64_t v198 = v13;
        __int16 v199 = v14;
        char v150 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
        unint64_t v200 = v148;
        char v152 = operator new(0x20uLL);
        *char v152 = off_1007BEDA8;
        v152[1] = v13;
        uint64_t v198 = 0LL;
        __int16 v199 = 0LL;
        v152[2] = v14;
        v152[3] = v149;
        *(void *)&v270[24] = v152;
        sub_100012390((uint64_t)&v198);
        uint64_t v153 = a1[10];
        __int16 v245 = (_BYTE *)(*(uint64_t (**)(void *))(*v152 + 16LL))(v152);
        sub_100320EB4(v153, (uint64_t)v244);
        int v54 = v245;
        if (v245 != v244) {
          goto LABEL_43;
        }
        uint64_t v55 = 4LL;
        int v54 = v244;
        goto LABEL_77;
      case 'S':
        sub_1003578E4((uint64_t)a3, (uint64_t)&v266);
        uint64_t v201 = v13;
        char v202 = v14;
        __int16 v154 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        __int128 v203 = v266;
        int v204 = v267;
        char v156 = (char *)operator new(0x30uLL);
        *(void *)char v156 = off_1007BED28;
        *((void *)v156 + 1) = v13;
        *((void *)v156 + 2) = v14;
        uint64_t v201 = 0LL;
        char v202 = 0LL;
        *(_OWORD *)(v156 + 24) = v266;
        *((_DWORD *)v156 + 10) = v267;
        *(void *)&v270[24] = v156;
        sub_100012390((uint64_t)&v201);
        uint64_t v157 = a1[10];
        char v247 = (_BYTE *)(*(uint64_t (**)(char *))(*(void *)v156 + 16LL))(v156);
        sub_100320EB4(v157, (uint64_t)v246);
        int v54 = v247;
        if (v247 != v246) {
          goto LABEL_43;
        }
        uint64_t v55 = 4LL;
        int v54 = v246;
        goto LABEL_77;
      default:
        if (v40 == 96)
        {
          int v164 = sub_100357074(a3);
          int v165 = v164;
          uint64_t v221 = v13;
          char v222 = v14;
          char v166 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v167 = __ldxr(v166);
          while (__stxr(v167 + 1, v166));
          int v223 = v164;
          __int16 v168 = operator new(0x20uLL);
          *__int16 v168 = off_1007BEA28;
          v168[1] = v13;
          v168[2] = v14;
          uint64_t v221 = 0LL;
          char v222 = 0LL;
          *((_DWORD *)v168 + 6) = v165;
          *(void *)&v270[24] = v168;
          sub_100012390((uint64_t)&v221);
          uint64_t v169 = a1[10];
          __int16 v259 = (_BYTE *)(*(uint64_t (**)(void *))(*v168 + 16LL))(v168);
          sub_100320EB4(v169, (uint64_t)v258);
          int v54 = v259;
          if (v259 == v258)
          {
            uint64_t v55 = 4LL;
            int v54 = v258;
            goto LABEL_77;
          }
        }

        else
        {
          if (v40 != 112)
          {
LABEL_152:
            uint64_t v46 = *(unsigned __int16 *)(a2 + 2);
            uint64_t v47 = "got ranging response with unknown message ID 0x%02x";
            goto LABEL_46;
          }

          __int16 v72 = sub_10035712C(a3);
          __int16 v73 = v72;
          uint64_t v218 = v13;
          char v219 = v14;
          char v74 = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
          __int16 v220 = v72;
          char v76 = operator new(0x20uLL);
          void *v76 = off_1007BEAA8;
          v76[1] = v13;
          v76[2] = v14;
          uint64_t v218 = 0LL;
          char v219 = 0LL;
          *((_WORD *)v76 + 12) = v73;
          *(void *)&v270[24] = v76;
          sub_100012390((uint64_t)&v218);
          uint64_t v77 = a1[10];
          v257 = (_BYTE *)(*(uint64_t (**)(void *))(*v76 + 16LL))(v76);
          sub_100320EB4(v77, (uint64_t)v256);
          int v54 = v257;
          if (v257 == v256)
          {
            uint64_t v55 = 4LL;
            int v54 = v256;
            goto LABEL_77;
          }
        }

        break;
    }

    goto LABEL_43;
  }

  if (v15 != 1)
  {
    if (v15 == 2)
    {
      unsigned int v30 = sub_10032A4CC(a2) - 19;
      if (v30 <= 0x3B && ((1LL << v30) & 0x800000000000081LL) != 0)
      {
        sub_1003619AC((char *)(*a3 + 4), 2uLL, &__dst, 1);
        int v31 = sub_10032A4CC(a2);
        switch(v31)
        {
          case 78:
            unint64_t v32 = "TEST_NB_TX";
            break;
          case 26:
            unint64_t v32 = "TEST_TX2";
            break;
          case 19:
            unint64_t v32 = "TEST_UWB_TX";
            break;
          default:
            __assert_rtn("factoryTestMsgIdToString", "roseResponseHandler.cpp", 55, "false");
        }

        sub_1000065CC(v270, v32);
        int v61 = v270[23];
        char v62 = *(_BYTE **)v270;
        sub_10032B2C8(__dst, &v266);
        __int16 v70 = v270;
        if (v61 < 0) {
          __int16 v70 = v62;
        }
        sub_10032C3DC( "got factory %s response packet with  0x%02x, status %s",  v63,  v64,  v65,  v66,  v67,  v68,  v69,  (uint64_t)v70);
        if (v268 < 0) {
          operator delete((void *)v266);
        }
LABEL_54:
        if ((v270[23] & 0x80000000) != 0)
        {
          unsigned __int8 v71 = *(void **)v270;
LABEL_96:
          operator delete(v71);
          goto LABEL_14;
        }
      }

      else
      {
        sub_10032C3DC( "got factory test response packet with  0x%02x",  v23,  v24,  v25,  v26,  v27,  v28,  v29,  *(unsigned __int8 *)(a2 + 1));
      }

      goto LABEL_14;
    }

    uint64_t v46 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v47 = "got response packet with unknown groupID 0x%02x";
LABEL_46:
    sub_10032C51C(v47, v16, v17, v18, v19, v20, v21, v22, v46);
    goto LABEL_14;
  }

  int v37 = sub_10032A424(a2);
  if (v37 == 84)
  {
    uint64_t v56 = sub_100357E9C(a3, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v180 = v13;
    char v181 = v14;
    uint64_t v57 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    LOWORD(v182) = v56;
    BYTE2(v182) = BYTE2(v56);
    __int128 v59 = operator new(0x20uLL);
    void *v59 = off_1007BF028;
    v59[1] = v13;
    v59[2] = v14;
    uint64_t v180 = 0LL;
    char v181 = 0LL;
    *((_DWORD *)v59 + 6) = v182;
    *(void *)&v270[24] = v59;
    uint64_t v60 = a1[10];
    char v235 = sub_10035A1FC((uint64_t)v59);
    sub_100320EB4(v60, (uint64_t)v234);
    int v54 = v235;
    if (v235 == v234)
    {
      uint64_t v55 = 4LL;
      int v54 = v234;
      goto LABEL_77;
    }

void sub_10035638C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 1088);
  if (v4 == (void *)(v2 - 216))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(v2 - 216);
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_1001787E4(v2 - 184);
  sub_100012390((uint64_t)&STACK[0x288]);
  _Unwind_Resume(a1);
}

void sub_1003568D4(void *a1@<X0>, void *a2@<X8>)
{
  if (*((_DWORD *)sub_100005150() + 187) == 1)
  {
    sub_100357F30(a1, (uint64_t)a2);
    return;
  }

  uint64_t v11 = *a1;
  if (a1[1] - *a1 <= 0x48uLL)
  {
    sub_10032C51C("Not enough bytes in Hello Response (%zu < %u)", v4, v5, v6, v7, v8, v9, v10, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Not enough bytes in Hello Response");
    goto LABEL_31;
  }

  __dst[0] = 0;
  sub_1003619AC((char *)(v11 + 4), 2uLL, __dst, 1);
  if (__dst[0])
  {
    sub_10032C51C("Error status in Hello Response: 0x%x", v12, v13, v14, v15, v16, v17, v18, __dst[0]);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Error status in Hello Response");
LABEL_31:
  }

  uint64_t v19 = *a1;
  uint64_t v20 = operator new(0x28uLL);
  __int128 v59 = v20;
  __int128 v60 = xmmword_100432A00;
  __int128 v21 = *(_OWORD *)(v19 + 22);
  _OWORD *v20 = *(_OWORD *)(v19 + 6);
  v20[1] = v21;
  *((_BYTE *)v20 + 32) = 0;
  int v57 = 0;
  int v58 = 0;
  sub_1003619AC((char *)(v19 + 38), 2uLL, (_BYTE *)&v58 + 2, 1);
  sub_1003619AC((char *)(*a1 + 40LL), 2uLL, &v58, 1);
  sub_1003619AC((char *)(*a1 + 69LL), 4uLL, &v57, 1);
  __int16 v22 = HIWORD(v58);
  int v49 = 0;
  sub_1000065CC(__p, "");
  __int16 v53 = 0;
  v54[0] = 0;
  int v55 = 0;
  sub_1000065CC(&v56, "");
  char v48 = 0;
  sub_1003619AC((char *)(*a1 + 42LL), 2uLL, &v49, 1);
  sub_1003619AC((char *)(*a1 + 44LL), 2uLL, (_BYTE *)&v49 + 2, 1);
  uint64_t v23 = *a1;
  uint64_t v24 = *(void **)(*a1 + 46LL);
  uint64_t v25 = *(void **)(*a1 + 54LL);
  if (v52 < 0)
  {
    operator delete(__p[0]);
    uint64_t v23 = *a1;
  }

  __p[0] = v24;
  __p[1] = v25;
  char v51 = 0;
  char v52 = 16;
  sub_1003619AC((char *)(v23 + 62), 2uLL, &v53, 1);
  sub_1003619AC((char *)(*a1 + 64LL), 1uLL, v54, 1);
  sub_1003619AC((char *)(*a1 + 65LL), 4uLL, &v55, 1);
  uint64_t v33 = (*((_BYTE *)a1 + 8) - *(_DWORD *)a1 - 73);
  if (*((_BYTE *)a1 + 8) - *(_DWORD *)a1 != 73)
  {
    uint64_t v34 = 0LL;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v34 + 73));
      sub_1000065CC(&v43, __str);
      unint64_t v35 = std::string::insert(&v43, 0LL, "0x");
      __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0LL;
      v35->__r_.__value_.__l.__cap_ = 0LL;
      v35->__r_.__value_.__r.__words[0] = 0LL;
      int v37 = std::string::append(&v44, " ");
      __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      int64_t cap = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v45 = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        unint64_t v39 = v45;
      }
      else {
        unint64_t v39 = (void **)v45[0];
      }
      if (cap >= 0) {
        std::string::size_type v40 = HIBYTE(cap);
      }
      else {
        std::string::size_type v40 = (std::string::size_type)v45[1];
      }
      std::string::append(&v56, (const std::string::value_type *)v39, v40);
      if (SHIBYTE(cap) < 0) {
        operator delete(v45[0]);
      }
      ++v34;
    }

    while (v33 != v34);
  }

  __int16 v41 = sub_10032B7BC((unsigned __int16)v58, v26, v27, v28, v29, v30, v31, v32);
  sub_1003585E0(a2, (__int128 *)&v59, SHIBYTE(v22), v22, v41, (int *)&v48, v57);
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v59);
  }
}

void sub_100356CB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

void *sub_100356D64(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)unsigned __int16 __dst = v4;
  }

  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_1000064BC((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  return __dst;
}

void sub_100356DCC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100356DE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  __int128 v4 = (char *)operator new(0x88uLL);
  uint64_t v5 = v4;
  *(void *)__int128 v4 = off_1007BE8A8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000063A8(v4 + 24, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 5) = *(void *)(a2 + 32);
  }

  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 40);
  sub_1000064BC(v5 + 56, a2 + 48);
  *((void *)v5 + 16) = *(void *)(a2 + 120);
  *(void *)(a1 + 24) = v5;
  return a1;
}

void sub_100356E98(_Unwind_Exception *a1)
{
}

uint64_t sub_100356ECC(uint64_t a1)
{
  return sub_100012390(a1);
}

uint64_t sub_100356F04(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Range config response not of expected size");
  }

  int __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 2uLL, &__dst, 1);
  int v10 = sub_10032B26C(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100356FA8(_Unwind_Exception *a1)
{
}

uint64_t sub_100356FBC(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Range enable response not of expected size");
  }

  int __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 2uLL, &__dst, 1);
  int v10 = sub_10032B26C(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100357060(_Unwind_Exception *a1)
{
}

uint64_t sub_100357074(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Test NMI range enable response not of expected size");
  }

  int __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 2uLL, &__dst, 1);
  int v10 = sub_10032B26C(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100357118(_Unwind_Exception *a1)
{
}

uint64_t sub_10035712C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "GPIO power switch disable response not of expected size");
  }

  unsigned __int16 __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, &__dst, 1);
  return sub_10032B26C(__dst, v2, v3, v4, v5, v6, v7, v8);
}

void sub_1003571AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1003571C0(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "SAR state response not of expected size");
  }

  unsigned __int16 __dst = 0;
  __int16 v13 = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, &__dst, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 1uLL, (_BYTE *)&v13 + 1, 1);
  sub_1003619AC((char *)(*a1 + 7LL), 1uLL, &v13, 1);
  int v10 = sub_10032B26C(__dst, v3, v4, v5, v6, v7, v8, v9);
  return v10 | (HIBYTE(v13) << 16) | (v13 << 24);
}

void sub_100357288(_Unwind_Exception *a1)
{
}

uint64_t sub_10035729C(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8LL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Range disable response not of expected size");
  }

  int __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 6LL), 2uLL, &__dst, 1);
  int v10 = sub_10032B26C(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_100357340(_Unwind_Exception *a1)
{
}

void sub_100357354(void *a1@<X0>, uint64_t a2@<X8>)
{
  __dst[0] = 0;
  sub_1003619AC((char *)(*a1 + 4LL), 2uLL, __dst, 1);
  __int16 v11 = sub_10032B26C(__dst[0], v4, v5, v6, v7, v8, v9, v10);
  int v19 = *(unsigned __int8 *)(*a1 + 6LL);
  uint64_t v43 = 0LL;
  std::string v44 = 0LL;
  unint64_t v45 = 0LL;
  if (v19)
  {
    __int16 v41 = v11;
    uint64_t v42 = a2;
    LODWORD(v20) = 7;
    do
    {
      unint64_t v21 = (int)v20 + 2LL;
      if (a1[1] - *a1 < v21)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Get config response not of expected size");
      }

      char v22 = sub_10032B160(*(unsigned __int8 *)(*a1 + (int)v20), v12, v13, v14, v15, v16, v17, v18);
      uint64_t v23 = *a1;
      size_t v24 = *(unsigned __int8 *)((int)v20 + *a1 + 1LL);
      size_t v20 = v24 + (int)v21;
      if (a1[1] - *a1 < v20)
      {
        std::string::size_type v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Get config response not of expected size");
      }

      char v25 = v22;
      uint64_t v47 = 0LL;
      char v48 = 0LL;
      int v49 = 0LL;
      sub_1001FC59C(&v47, (const void *)(v23 + v21), v23 + v21 + v24, v24);
      uint64_t v27 = v47;
      uint64_t v26 = v48;
      uint64_t v28 = v49;
      uint64_t v29 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v31 = (uint64_t)&v44[-v43] >> 5;
        unint64_t v32 = v31 + 1;
        uint64_t v33 = v45 - v43;
        else {
          unint64_t v34 = v32;
        }
        char v51 = &v45;
        unint64_t v35 = (void **)sub_100130DE0((uint64_t)&v45, v34);
        __int128 v36 = &v35[4 * v31];
        uint64_t v47 = v35;
        char v48 = v36;
        __int16 v50 = &v35[4 * v37];
        *(_BYTE *)__int128 v36 = v25;
        v36[1] = v27;
        v36[2] = 0LL;
        v36[2] = v26;
        v36[3] = v28;
        int v49 = v36 + 4;
        sub_10035A31C(&v43, &v47);
        uint64_t v30 = (uint64_t)v44;
        sub_100329B44((uint64_t)&v47);
      }

      else
      {
        *std::string v44 = v25;
        v29[1] = v27;
        v29[2] = v26;
        uint64_t v30 = (uint64_t)(v29 + 4);
        v29[3] = v28;
      }

      std::string v44 = (_BYTE *)v30;
      --v19;
    }

    while (v19);
    a2 = v42;
    uint64_t v38 = v43;
    __int16 v11 = v41;
  }

  else
  {
    uint64_t v30 = 0LL;
    uint64_t v38 = 0LL;
  }

  *(_WORD *)a2 = v11;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  sub_1001DF8D4((void *)(a2 + 8), v38, v30, (v30 - v38) >> 5);
  uint64_t v47 = (void **)&v43;
  sub_100130C0C(&v47);
}

void sub_1003575CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_100130C0C(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100357634(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  uint64_t v4 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v4 = off_1007BEC28;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 16);
  *((void *)v4 + 5) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((void *)v4 + 4) = 0LL;
  sub_1001DF8D4( (void *)v4 + 4,  *(void *)(a2 + 24),  *(void *)(a2 + 32),  (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_1003576B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1003576CC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_100130C0C(&v3);
  return sub_100012390(a1);
}

unint64_t sub_100357708(void *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(a1[1] - *a1 - 7LL) >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Set config response not of expected size");
  }

  unsigned __int16 __dst = 0;
  sub_1003619AC((char *)(v1 + 4), 2uLL, &__dst, 1);
  int v10 = sub_10032B26C(__dst, v3, v4, v5, v6, v7, v8, v9);
  if (a1[1] - *a1 == 8LL)
  {
    __int16 v11 = *(unsigned __int8 *)(*a1 + 7LL);
    __int16 v12 = 256;
  }

  else
  {
    __int16 v11 = 0;
    __int16 v12 = 0;
  }

  sub_1003587FC((uint64_t)&v16, v10, *(unsigned __int8 *)(*a1 + 6LL), v12 | v11);
  return v16 | ((unint64_t)v17 << 32);
}

void sub_1003577D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1003577E8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  if (a1[1] - *a1 == 6LL)
  {
    sub_1003619AC((char *)(*a1 + 4LL), 2uLL, &__dst, 1);
    return sub_10032B26C(__dst, v8, v9, v10, v11, v12, v13, v14);
  }

  else
  {
    sub_10032C51C( "got tx power backoff response packet with wrong size: expect %d, actual %zu",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  6LL);
    return 5LL;
  }

unint64_t sub_10035784C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  unsigned int v18 = 0;
  if (a1[1] - *a1 == 10LL)
  {
    sub_1003619AC((char *)(*a1 + 4LL), 2uLL, &__dst, 1);
    sub_1003619AC((char *)(*a1 + 6LL), 4uLL, &v18, 1);
    unsigned int v16 = sub_10032B26C(__dst, v9, v10, v11, v12, v13, v14, v15);
    return v16 | ((unint64_t)v18 << 32);
  }

  else
  {
    sub_10032C51C( "got measure temperature response packet with wrong size: expect %d, actual %zu",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  10LL);
    return 5LL;
  }

uint64_t sub_1003578E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10032B26C(__dst, v4, v5, v6, v7, v8, v9, v10);
  char v12 = v29;
  __int16 v13 = v28;
  __int16 v14 = v27;
  char v15 = v26;
  int v16 = v25;
  char v17 = v24;
  char v18 = v23;
  char v19 = v22;
  char v20 = v21;
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = v12;
  *(_WORD *)(a2 + 4) = v13;
  *(_WORD *)(a2 + 6) = v14;
  *(_BYTE *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v16;
  *(_BYTE *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 17) = v18;
  *(_BYTE *)(a2 + 18) = v19;
  *(_BYTE *)(a2 + 19) = v20;
  return result;
}

unint64_t sub_100357A50(uint64_t a1)
{
  unsigned int v9 = sub_10032B26C(__dst, v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)v11 << 32);
}

uint64_t sub_100357AB8(uint64_t a1)
{
  int v9 = sub_10032B26C(__dst, v2, v3, v4, v5, v6, v7, v8);
  return v9 | (v11 << 16);
}

uint64_t sub_100357B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = 0LL;
  uint64_t __dst = 0LL;
  int v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0LL;
  int v24 = 0;
  int v25 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v4 = (char *)(*(void *)a1 + 4LL);
  int v21 = 0;
  sub_1003619AC(v4, 4uLL, (_BYTE *)&__dst + 4, 1);
  sub_1003619AC((char *)(*(void *)a1 + 8LL), 4uLL, &__dst, 1);
  sub_1003619AC((char *)(*(void *)a1 + 12LL), 4uLL, (_BYTE *)&v29 + 4, 1);
  sub_1003619AC((char *)(*(void *)a1 + 16LL), 4uLL, &v29, 1);
  sub_1003619AC((char *)(*(void *)a1 + 20LL), 4uLL, &v28, 1);
  sub_1003619AC((char *)(*(void *)a1 + 24LL), 4uLL, &v27, 1);
  sub_1003619AC((char *)(*(void *)a1 + 28LL), 4uLL, (_BYTE *)&v26 + 4, 1);
  sub_1003619AC((char *)(*(void *)a1 + 32LL), 4uLL, &v26, 1);
  sub_1003619AC((char *)(*(void *)a1 + 36LL), 4uLL, &v25, 1);
  sub_1003619AC((char *)(*(void *)a1 + 40LL), 2uLL, (_BYTE *)&v24 + 2, 1);
  sub_1003619AC((char *)(*(void *)a1 + 42LL), 2uLL, &v24, 1);
  sub_1003619AC((char *)(*(void *)a1 + 44LL), 4uLL, (_BYTE *)&v23 + 4, 1);
  sub_1003619AC((char *)(*(void *)a1 + 48LL), 4uLL, &v23, 1);
  uint64_t v5 = sub_100005150();
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  if (v5[187] == 2)
  {
    sub_1003619AC((char *)(*(void *)a1 + 52LL), 4uLL, (_BYTE *)&v22 + 4, 1);
    sub_1003619AC((char *)(*(void *)a1 + 56LL), 4uLL, &v22, 1);
    sub_1003619AC((char *)(*(void *)a1 + 60LL), 4uLL, &v21, 1);
    int v7 = v22;
    int v8 = HIDWORD(v22);
    int v6 = v21;
  }

  int v9 = __dst;
  int v11 = v29;
  int v10 = HIDWORD(v29);
  int v12 = v28;
  int v14 = HIDWORD(v26);
  int v13 = v27;
  int v16 = v25;
  uint64_t result = v26;
  __int16 v17 = HIWORD(v24);
  __int16 v18 = v24;
  int v20 = v23;
  int v19 = HIDWORD(v23);
  *(_DWORD *)a2 = HIDWORD(__dst);
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 32) = v16;
  *(_WORD *)(a2 + 36) = v17;
  *(_WORD *)(a2 + 38) = v18;
  *(_DWORD *)(a2 + 40) = v19;
  *(_DWORD *)(a2 + 44) = v20;
  *(_DWORD *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 52) = v7;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

void sub_100357D4C( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 == 10LL)
  {
    unsigned __int16 __dst = 0;
    sub_1003619AC((char *)(v10 + 4), 2uLL, &__dst, 1);
    __int16 v19 = sub_10032B26C(__dst, v12, v13, v14, v15, v16, v17, v18);
    memset(&v22, 0, sizeof(v22));
    std::string::resize(&v22, 4uLL, 0);
    if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v20 = &v22;
    }
    else {
      int v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    sub_1003619AC((char *)(*a1 + 6LL), 4uLL, v20, 1);
    *(_WORD *)a9 = v19;
    int v21 = (std::string *)(a9 + 8);
    if ((char)v22.__r_.__value_.__s.__size_ < 0)
    {
      sub_1000063A8(v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }

    else
    {
      *int v21 = v22;
    }
  }

  else
  {
    sub_10032C51C( "got log request response packet with wrong size: expect %d, actual %zu",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  10LL);
    *(_WORD *)a9 = 0;
    *(void *)(a9 + 16) = 0LL;
    *(void *)(a9 + 24) = 0LL;
    *(void *)(a9 + 8) = 0LL;
  }

void sub_100357E50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100357E6C(uint64_t a1)
{
  return sub_100012390(a1);
}

uint64_t sub_100357E9C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  if (a1[1] - *a1 == 7LL)
  {
    sub_1003619AC((char *)(*a1 + 4LL), 2uLL, &__dst, 1);
    int v16 = sub_10032B26C(__dst, v9, v10, v11, v12, v13, v14, v15);
    sub_1003619AC((char *)(*a1 + 6LL), 1uLL, &v18, 1);
    return v16 | (v18 << 16);
  }

  else
  {
    sub_10032C51C( "got log config response packet with wrong size: expect %d, actual %zu",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  7LL);
    return 0x40000LL;
  }

void sub_100357F30(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1] - *a1 <= 0x27uLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "Not enough bytes in Hello Response");
  }

  uint64_t v5 = operator new(0x28uLL);
  unsigned __int8 v71 = v5;
  __int128 v72 = xmmword_100432A00;
  __int128 v6 = *(_OWORD *)(v3 + 20);
  *uint64_t v5 = *(_OWORD *)(v3 + 4);
  v5[1] = v6;
  *((_BYTE *)v5 + 32) = 0;
  int __dst = 0;
  sub_1003619AC((char *)(v3 + 36), 2uLL, (_BYTE *)&__dst + 2, 1);
  sub_1003619AC((char *)(*a1 + 38LL), 2uLL, &__dst, 1);
  __int16 v14 = HIWORD(__dst);
  unint64_t v15 = a1[1] - *a1;
  if (HIWORD(__dst) <= 0x13u)
  {
    if (v15 == 40)
    {
      __int16 v16 = sub_10032B7BC((unsigned __int16)__dst, v7, v8, v9, v10, v11, v12, v13);
      sub_1000063A8((_BYTE *)a2, v5, 0x20uLL);
      *(_BYTE *)(a2 + 24) = HIBYTE(v14);
      *(_BYTE *)(a2 + 25) = v14;
      *(_WORD *)(a2 + 26) = v16;
      *(_BYTE *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 96) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      *(_BYTE *)(a2 + 108) = 0;
LABEL_31:
      operator delete(v71);
      return;
    }

    sub_10032C51C("Hello Response (%zu) not of expected size (%u)", v7, v8, v9, v10, v11, v12, v13, a1[1] - *a1);
    std::string v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response not of expected size");
LABEL_36:
  }

  if (v15 <= 0x43)
  {
    sub_10032C51C( "Hello Response (%zu) size is less than the expected size (%u)",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  a1[1] - *a1);
    std::string v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response size is less than the expected size");
    goto LABEL_36;
  }

  v61[0] = 0;
  int v62 = 0;
  sub_1000065CC(v63, "");
  __int16 v66 = 0;
  v67[0] = 0;
  int v68 = 0;
  sub_1000065CC(&v69, "");
  sub_1003619AC((char *)(*a1 + 40LL), 1uLL, v61, 1);
  unsigned __int8 v24 = v61[0] - 27;
  if (a1[1] - *a1 != (v61[0] - 27) + 68)
  {
    sub_10032C51C("Hello Response (%zu) not of expected size (%u)", v17, v18, v19, v20, v21, v22, v23, a1[1] - *a1);
    unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Hello Response not of expected size");
  }

  if (v61[0] <= 0x1Au)
  {
    sub_100045754((uint64_t)__p);
    uint64_t v46 = sub_100046B94( &cap,  (uint64_t)"Additional Info Len as reported by the packet is less than expected. HSI Major: ",  80LL);
    v57.__r_.__value_.__s.__data_[0] = HIBYTE(v14);
    uint64_t v47 = sub_100046B94(v46, (uint64_t)&v57, 1LL);
    char v48 = sub_100046B94(v47, (uint64_t)", HSI Minor: ", 13LL);
    v57.__r_.__value_.__s.__data_[0] = v14;
    int v49 = sub_100046B94(v48, (uint64_t)&v57, 1LL);
    __int16 v50 = sub_100046B94(v49, (uint64_t)", expected len: ", 16LL);
    v57.__r_.__value_.__s.__data_[0] = v61[0];
    char v51 = sub_100046B94(v50, (uint64_t)&v57, 1LL);
    char v52 = sub_100046B94(v51, (uint64_t)", reported len: ", 16LL);
    __int16 v53 = (void *)std::ostream::operator<<(v52, 28LL);
    sub_10030A8E0(v53);
    int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str(&v57, v60);
    std::runtime_error::runtime_error(v54, &v57);
  }

  sub_1003619AC((char *)(*a1 + 41LL), 2uLL, &v62, 1);
  sub_1003619AC((char *)(*a1 + 43LL), 2uLL, (_BYTE *)&v62 + 2, 1);
  uint64_t v25 = *a1;
  uint64_t v26 = *(void **)(*a1 + 45LL);
  int v27 = *(void **)(*a1 + 53LL);
  if (v65 < 0)
  {
    operator delete(v63[0]);
    uint64_t v25 = *a1;
  }

  v63[0] = v26;
  v63[1] = v27;
  char v64 = 0;
  char v65 = 16;
  sub_1003619AC((char *)(v25 + 61), 2uLL, &v66, 1);
  sub_1003619AC((char *)(*a1 + 63LL), 1uLL, v67, 1);
  sub_1003619AC((char *)(*a1 + 64LL), 4uLL, &v68, 1);
  if (v61[0] >= 0x1Cu && v24)
  {
    uint64_t v35 = 0LL;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v35 + 68));
      sub_1000065CC(&v55, __str);
      __int128 v36 = std::string::insert(&v55, 0LL, "0x");
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v38 = std::string::append(&v57, " ");
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      int64_t cap = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)__int128 __p = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        std::string::size_type v40 = __p;
      }
      else {
        std::string::size_type v40 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v41 = HIBYTE(cap);
      }
      else {
        std::string::size_type v41 = (std::string::size_type)__p[1];
      }
      std::string::append(&v69, (const std::string::value_type *)v40, v41);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      ++v35;
    }

    while (v24 != v35);
  }

  __int16 v42 = sub_10032B7BC((unsigned __int16)__dst, v28, v29, v30, v31, v32, v33, v34);
  sub_100358754((void *)a2, (__int128 *)&v71, SHIBYTE(v14), v14, v42, (int *)v61);
  if (v65 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v72) < 0) {
    goto LABEL_31;
  }
}

void sub_1003584C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      sub_100045880((uint64_t)&a25);
      sub_100156AD8(v32 - 192);
      _Unwind_Resume(a1);
    }
  }

  else if (!v31)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v30);
  goto LABEL_6;
}

void *sub_1003585E0(void *__dst, __int128 *a2, char a3, char a4, __int16 a5, int *a6, int a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v13 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v13;
  }

  *((_BYTE *)__dst + 24) = a3;
  *((_BYTE *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_100358690((uint64_t)(__dst + 4), a6);
  *((_DWORD *)__dst + 26) = a7;
  *((_BYTE *)__dst + 108) = 1;
  return __dst;
}

void sub_100358674(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100358690(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_1000063A8((_BYTE *)(a1 + 8), *((void **)a2 + 1), *((void *)a2 + 2));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }

  *(void *)(a1 + 32) = *((void *)a2 + 4);
  __int128 v6 = (_BYTE *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_1000063A8(v6, *((void **)a2 + 5), *((void *)a2 + 6));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 10);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)__int128 v6 = v7;
  }

  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_100358738(_Unwind_Exception *exception_object)
{
}

void *sub_100358754(void *__dst, __int128 *a2, char a3, char a4, __int16 a5, int *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v11 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v11;
  }

  *((_BYTE *)__dst + 24) = a3;
  *((_BYTE *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_100358690((uint64_t)(__dst + 4), a6);
  *((_BYTE *)__dst + 104) = 0;
  *((_BYTE *)__dst + 108) = 0;
  return __dst;
}

void sub_1003587E0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003587FC(uint64_t result, int a2, int a3, __int16 a4)
{
  *(_WORD *)uint64_t result = a2;
  *(_BYTE *)(result + 2) = a3;
  *(_WORD *)(result + 3) = a4;
  if (a2 == 1)
  {
    if (a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "expect numConfigsSetSuccessfully == 0 when status == INVALID_CMD_PARAM");
    }
  }

  return result;
}

void sub_10035885C(_Unwind_Exception *a1)
{
}

uint64_t sub_100358870(uint64_t a1)
{
  *(void *)a1 = off_1007BE8A8;
  sub_1000060F4(a1 + 56);
  sub_100012390(a1 + 8);
  return a1;
}

void sub_1003588B8(void **a1)
{
  *a1 = off_1007BE8A8;
  sub_1000060F4((uint64_t)(a1 + 7));
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100358900(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x88uLL);
  *uint64_t v2 = off_1007BE8A8;
  sub_100358A00((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100358940(_Unwind_Exception *a1)
{
}

uint64_t sub_100358954(uint64_t a1, void *a2)
{
  *a2 = off_1007BE8A8;
  return sub_100358A00((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100358970(uint64_t a1)
{
  return sub_100356ECC(a1 + 8);
}

void sub_100358978(void *a1)
{
}

uint64_t sub_1003589A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003589B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003589F4()
{
}

uint64_t sub_100358A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    __int128 v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000063A8((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v7;
  }

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_1000064BC((_BYTE *)(a1 + 48), a2 + 48);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

void sub_100358A98(_Unwind_Exception *a1)
{
}

void *sub_100358AC4(void *a1)
{
  *a1 = off_1007BE928;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100358AF4(void *a1)
{
  *a1 = off_1007BE928;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100358B24(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BE928;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    __int128 v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100358B7C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BE928;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100358BB4(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100358BBC(void *a1)
{
}

uint64_t sub_100358BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100358BFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100358C38()
{
}

void *sub_100358C44(void *a1)
{
  *a1 = off_1007BE9A8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100358C74(void *a1)
{
  *a1 = off_1007BE9A8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100358CA4(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BE9A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100358CFC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BE9A8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100358D34(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100358D3C(void *a1)
{
}

uint64_t sub_100358D64(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100358D7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100358DB8()
{
}

void *sub_100358DC4(void *a1)
{
  *a1 = off_1007BEA28;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100358DF4(void *a1)
{
  *a1 = off_1007BEA28;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100358E24(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BEA28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100358E7C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BEA28;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100358EB4(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100358EBC(void *a1)
{
}

uint64_t sub_100358EE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100358EFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100358F38()
{
}

void *sub_100358F44(void *a1)
{
  *a1 = off_1007BEAA8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100358F74(void *a1)
{
  *a1 = off_1007BEAA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100358FA4(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BEAA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  return result;
}

uint64_t sub_100358FFC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BEAA8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  return result;
}

uint64_t sub_100359034(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_10035903C(void *a1)
{
}

uint64_t sub_100359064(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 56LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_10035907C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003590B8()
{
}

void *sub_1003590C4(void *a1)
{
  *a1 = off_1007BEB28;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003590F4(void *a1)
{
  *a1 = off_1007BEB28;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100359124(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BEB28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_10035917C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BEB28;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_1003591B4(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_1003591BC(void *a1)
{
}

uint64_t sub_1003591E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003591FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100359238()
{
}

void *sub_100359244(void *a1)
{
  *a1 = off_1007BEBA8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359274(void *a1)
{
  *a1 = off_1007BEBA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_1003592A4(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BEBA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003592FC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BEBA8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100359334(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_10035933C(void *a1)
{
}

uint64_t sub_100359364(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_10035937C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003593B8()
{
}

uint64_t sub_1003593C4(uint64_t a1)
{
  *(void *)a1 = off_1007BEC28;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 32);
  sub_100130C0C(&v4);
  sub_100012390(v2);
  return a1;
}

void sub_100359414(char *a1)
{
  *(void *)a1 = off_1007BEC28;
  uint64_t v2 = (uint64_t)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 32);
  sub_100130C0C(&v3);
  sub_100012390(v2);
  operator delete(a1);
}

void *sub_100359468(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_1007BEC28;
  sub_1003595BC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003594A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1003594BC(uint64_t a1, void *a2)
{
  *a2 = off_1007BEC28;
  return sub_1003595BC((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1003594D8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = (void **)(a1 + 32);
  sub_100130C0C(&v3);
  return sub_100012390(v1);
}

void sub_100359514(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  uint64_t v3 = a1 + 4;
  sub_100130C0C(&v3);
  sub_100012390(v2);
  operator delete(a1);
}

uint64_t sub_10035955C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 72LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359574(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003595B0()
{
}

uint64_t sub_1003595BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __int16 v6 = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(_WORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_1001DF8D4( (void *)(a1 + 24),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  return a1;
}

void sub_100359624(_Unwind_Exception *a1)
{
}

void *sub_100359638(void *a1)
{
  *a1 = off_1007BECA8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359668(void *a1)
{
  *a1 = off_1007BECA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100359698(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1007BECA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_1003596F8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BECA8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  int v6 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100359738(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100359740(void *a1)
{
}

uint64_t sub_100359768(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 80LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359780(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003597BC()
{
}

void *sub_1003597C8(void *a1)
{
  *a1 = off_1007BED28;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_1003597F8(void *a1)
{
  *a1 = off_1007BED28;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100359828(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BED28;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

__n128 sub_100359888(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BED28;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1003598C8(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_1003598D0(void *a1)
{
}

uint64_t sub_1003598F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359910(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10035994C()
{
}

void *sub_100359958(void *a1)
{
  *a1 = off_1007BEDA8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359988(void *a1)
{
  *a1 = off_1007BEDA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_1003599B8(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = off_1007BEDA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  result[3] = a1[3];
  return result;
}

void *sub_100359A10(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_1007BEDA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  a2[3] = result[3];
  return result;
}

uint64_t sub_100359A48(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100359A50(void *a1)
{
}

uint64_t sub_100359A78(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359A90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100359ACC()
{
}

void *sub_100359AD8(void *a1)
{
  *a1 = off_1007BEE28;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359B08(void *a1)
{
  *a1 = off_1007BEE28;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100359B38(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = off_1007BEE28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  result[3] = a1[3];
  return result;
}

void *sub_100359B90(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_1007BEE28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  a2[3] = result[3];
  return result;
}

uint64_t sub_100359BC8(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100359BD0(void *a1)
{
}

uint64_t sub_100359BF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359C10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100359C4C()
{
}

void *sub_100359C58(void *a1)
{
  *a1 = off_1007BEEA8;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359C88(void *a1)
{
  *a1 = off_1007BEEA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100359CB8(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_1007BEEA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_100359D10(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BEEA8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_100359D48(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100359D50(void *a1)
{
}

uint64_t sub_100359D78(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359D90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100359DCC()
{
}

void *sub_100359DD8(void *a1)
{
  *a1 = off_1007BEF28;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100359E08(void *a1)
{
  *a1 = off_1007BEF28;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

__n128 sub_100359E38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1007BEF28;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 68);
  *(__n128 *)(v2 + 68) = result;
  return result;
}

__n128 sub_100359EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1007BEF28;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __n128 result = *(__n128 *)(a1 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  __int128 v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100359EF8(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_100359F00(void *a1)
{
}

uint64_t sub_100359F28(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 88LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_100359F40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100359F7C()
{
}

uint64_t sub_100359F88(uint64_t a1)
{
  *(void *)a1 = off_1007BEFA8;
  sub_100012390(a1 + 8);
  return a1;
}

void sub_100359FCC(void **a1)
{
  *a1 = off_1007BEFA8;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10035A010(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_1007BEFA8;
  sub_10035A110((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10035A050(_Unwind_Exception *a1)
{
}

uint64_t sub_10035A064(uint64_t a1, void *a2)
{
  *a2 = off_1007BEFA8;
  return sub_10035A110((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_10035A080(uint64_t a1)
{
  return sub_100357E6C(a1 + 8);
}

void sub_10035A088(void *a1)
{
}

uint64_t sub_10035A0B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 96LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_10035A0C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10035A104()
{
}

uint64_t sub_10035A110(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  unint64_t v6 = (_BYTE *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000063A8(v6, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t v6 = v7;
  }

  return a1;
}

void sub_10035A188(_Unwind_Exception *a1)
{
}

void *sub_10035A19C(void *a1)
{
  *a1 = off_1007BF028;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_10035A1CC(void *a1)
{
  *a1 = off_1007BF028;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10035A1FC(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_1007BF028;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_10035A254(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1007BF028;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_10035A28C(uint64_t a1)
{
  return sub_100012390(a1 + 8);
}

void sub_10035A294(void *a1)
{
}

uint64_t sub_10035A2BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 104LL))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_10035A2D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10035A310()
{
}

uint64_t sub_10035A31C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10035A390((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10035A390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      char v8 = *(_BYTE *)(a3 - 32);
      a3 -= 32LL;
      *(_BYTE *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      *(void *)(v7 - 24) = 0LL;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 32LL;
      *((void *)&v14 + 1) -= 32LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_10035A438((uint64_t)v11);
  return v9;
}

uint64_t sub_10035A438(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100329B00(a1);
  }
  return a1;
}

uint64_t sub_10035A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a2;
  sub_10001E914(a1 + 56, a3);
  sub_10001E914(a1 + 88, a4);
  *(void *)(a1 + 120) = 0LL;
  *(_WORD *)(a1 + 128) = 0;
  if (!*(void *)(a1 + 80)) {
    __assert_rtn("RoseDebugManager", "roseDebugManager.cpp", 47, "fClientCallback");
  }
  return a1;
}

void sub_10035A500(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v1 + 80);
  if (v4 == v2)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v2;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10035A58C(uint64_t a1, int a2)
{
  int v16 = a2;
  LODWORD(v17) = 0;
  sub_1000065CC(v18, "Idle");
  int v19 = 1;
  sub_1000065CC(v20, "ClientTriggeredFatal");
  int v21 = 2;
  sub_1000065CC(v22, "ClientTriggeredNonFatal");
  sub_1003601C8((uint64_t)v15, (int *)&v17, 3LL);
  for (uint64_t i = 0LL; i != -12; i -= 4LL)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }

  if (!a2)
  {
    if (*(char *)(a1 + 47) < 0)
    {
      **(_BYTE **)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0LL;
    }

    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 47) = 0;
    }
  }

  uint64_t v5 = (int *)(a1 + 4);
  uint64_t v17 = v5;
  uint64_t v6 = sub_10036036C(v15, v5, (uint64_t)&unk_1004242F8, &v17);
  uint64_t v7 = v6 + 5;
  uint64_t v17 = &v16;
  sub_10036036C(v15, &v16, (uint64_t)&unk_1004242F8, &v17);
  sub_10032C3DC("DebugLogState transition from: %s to: %s", v8, v9, v10, v11, v12, v13, v14, (uint64_t)v7);
  *uint64_t v5 = v16;
  sub_10020233C((uint64_t)v15, (char *)v15[1]);
}

void sub_10035A72C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v18 = 0LL;
  while (1)
  {
    v18 -= 32LL;
    if (v18 == -96) {
      _Unwind_Resume(exception_object);
    }
  }

uint64_t sub_10035A7A4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(_BYTE *)a1)
  {
    if (!a2)
    {
      sub_10032C51C("RoseDebugManager: queue shouldn't be null", v9, v10, v11, v12, v13, v14, v15, v37[0]);
LABEL_23:
      os_unfair_lock_unlock(v8);
      return a2;
    }

    *(void *)(a1 + 120) = a2;
    *(_BYTE *)(a1 + 129) = a3;
    *(_BYTE *)(a1 + 128) = a4;
    uint64_t v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, (dispatch_queue_t)a2);
    *(void *)(a1 + 16) = v16;
    if (!v16)
    {
      sub_10032C51C("Unable to create the timer", v17, v18, v19, v20, v21, v22, v23, v37[0]);
      *(void *)(a1 + 120) = 0LL;
      os_unfair_lock_unlock(v8);
      return 0LL;
    }

    v37[0] = (uint64_t)_NSConcreteStackBlock;
    v37[1] = 0x40000000LL;
    v37[2] = (uint64_t)sub_10035AA98;
    uint64_t v37[3] = (uint64_t)&unk_1007BF098;
    v37[4] = a1;
    dispatch_source_set_event_handler(v16, v37);
    *(_BYTE *)(a1 + 1) = 1;
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = operator new(0x20uLL);
    *uint64_t v25 = &off_1007BF0E8;
    v25[1] = sub_10035BC14;
    v25[2] = 0LL;
    void v25[3] = a1;
    uint64_t v43 = v25;
    sub_10032DAC4(v24, (uint64_t)v42);
    uint64_t v26 = v43;
    if (v43 == v42)
    {
      uint64_t v27 = 4LL;
      uint64_t v26 = v42;
    }

    else
    {
      if (!v43) {
        goto LABEL_12;
      }
      uint64_t v27 = 5LL;
    }

    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_12:
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = operator new(0x20uLL);
    *uint64_t v29 = &off_1007BF1A8;
    v29[1] = sub_10035BE2C;
    v29[2] = 0LL;
    v29[3] = a1;
    std::string::size_type v41 = v29;
    sub_10032DB64(v28, (uint64_t)v40);
    uint64_t v30 = v41;
    if (v41 == v40)
    {
      uint64_t v31 = 4LL;
      uint64_t v30 = v40;
    }

    else
    {
      if (!v41) {
        goto LABEL_17;
      }
      uint64_t v31 = 5LL;
    }

    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_17:
    uint64_t v32 = *(void *)(a1 + 48);
    uint64_t v33 = operator new(0x20uLL);
    void *v33 = &off_1007BF268;
    v33[1] = sub_10035BF44;
    v33[2] = 0LL;
    v33[3] = a1;
    __int128 v39 = v33;
    sub_10032DC04(v32, (uint64_t)v38);
    uint64_t v34 = v39;
    if (v39 == v38)
    {
      uint64_t v35 = 4LL;
      uint64_t v34 = v38;
    }

    else
    {
      if (!v39)
      {
LABEL_22:
        a2 = 1LL;
        *(_BYTE *)a1 = 1;
        goto LABEL_23;
      }

      uint64_t v35 = 5LL;
    }

    (*(void (**)(void))(*v34 + 8 * v35))();
    goto LABEL_22;
  }

  os_unfair_lock_unlock(v8);
  return 1LL;
}

void sub_10035AA20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = a17;
  if (a17 == v21)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10035AA98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10032C51C("Crashlog callback timer expired", a2, a3, a4, a5, a6, a7, a8, v19);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 8));
  sub_10032C3DC("RoseDebugManager: Suspending the crashlog timer", v9, v10, v11, v12, v13, v14, v15, v20);
  dispatch_suspend(*(dispatch_object_t *)(v8 + 16));
  *(_BYTE *)(v8 + 1) = 1;
  int v16 = *(_DWORD *)(v8 + 4);
  if (v16 == 2)
  {
    sub_1000065CC(v21, "Crashlog callback timer expired");
    sub_10035ABFC(v8, v8 + 24, 0LL, (uint64_t)v21);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    sub_10035A58C(v8, 0);
    int v17 = 3;
  }

  else
  {
    if (v16 != 1) {
      goto LABEL_11;
    }
    sub_1000065CC(__p, "Crashlog callback timer expired");
    sub_10035ABFC(v8, v8 + 24, 0LL, (uint64_t)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    sub_10035A58C(v8, 0);
    int v17 = 1;
  }

  int v25 = v17;
  uint64_t v18 = *(void *)(v8 + 80);
  if (!v18) {
    sub_10001EEF0();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v18 + 48LL))(v18, &v25);
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
}

void sub_10035ABC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035ABFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v196 = std::chrono::system_clock::to_time_t(&__t);
  sub_100045754((uint64_t)&v193);
  uint64_t v8 = localtime(&v196);
  strftime(__s, 0x32uLL, "%Y-%m-%d-%H-%M-%S", v8);
  __int128 v191 = 0uLL;
  binp = 0LL;
  if ((v199 & 0x80u) == 0) {
    uint64_t v9 = v198;
  }
  else {
    uint64_t v9 = (void **)v198[0];
  }
  if ((v199 & 0x80u) == 0) {
    uint64_t v10 = v199;
  }
  else {
    uint64_t v10 = (uint64_t)v198[1];
  }
  uint64_t v11 = sub_100046B94(&v193.__sb_.__binp_, (uint64_t)v9, v10);
  uint64_t v12 = sub_100046B94(v11, (uint64_t)"Rose-", 5LL);
  sub_1000065CC(__p, __s);
  if ((v201 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v201 & 0x80u) == 0) {
    uint64_t v14 = v201;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  uint64_t v15 = sub_100046B94(v12, (uint64_t)v13, v14);
  int v16 = sub_100046B94(v15, (uint64_t)".", 1LL);
  LOBYTE(v202) = 48;
  int v17 = sub_100138E6C(v16, (char *)&v202);
  *(void *)((char *)v17 + *(void *)(*v17 - 24LL) + 24) = 3LL;
  uint64_t v18 = (void *)std::ostream::operator<<();
  sub_100046B94(v18, (uint64_t)"/", 1LL);
  uint64_t v169 = a4;
  std::stringbuf::str(&v190, (const std::stringbuf *)&v193.__sb_.__ninp_);
  __int128 v188 = 0uLL;
  __int128 v189 = 0LL;
  sub_10035F0C0(v187);
  sub_10035F0C0(v186);
  char v202 = v19;
  *(void *)((char *)&v203[-1] + (void)*(v19 - 3)) = v20;
  uint64_t v21 = (std::ios_base *)((char *)&v203[-1] + (void)*(v202 - 3));
  std::ios_base::init(v21, v203);
  v21[1].__vftable = 0LL;
  v21[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v203);
  sub_100361008(v185, 2uLL);
  bzero(__p, 0x400uLL);
  char v22 = getpwnam("mobile");
  __int16 v184 = 0;
  if (!*(_BYTE *)a1)
  {
    uint64_t v31 = 0LL;
    goto LABEL_58;
  }

  uint64_t v23 = v22;
  if (confstr(65537, (char *)__p, 0x400uLL) - 1024 <= 0xFFFFFFFFFFFFFC00LL)
  {
    sub_10032C51C("failed to get process temp directory path", v24, v25, v26, v27, v28, v29, v30, v168);
LABEL_50:
    uint64_t v31 = 0LL;
LABEL_51:
    LOBYTE(v184) = 1;
    goto LABEL_52;
  }

  sub_100045754((uint64_t)&__rhs);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=(&v193, &__rhs);
  *(std::stringbuf_vtbl **)((char *)&__rhs.__sb_.__vftable
  __rhs.__sb_.__binp_ = v32;
  if (v182 < 0) {
    operator delete(__rhs.__sb_.__hm_);
  }
  std::streambuf::~streambuf(&__rhs.__sb_.__ninp_);
  std::ios::~ios(&v183);
  size_t v33 = strlen((const char *)__p);
  uint64_t v34 = sub_100046B94(&v193.__sb_.__binp_, (uint64_t)__p, v33);
  uint64_t v35 = sub_100046B94(v34, (uint64_t)"/Rose-", 6LL);
  sub_1000065CC(&__rhs, __s);
  if (SHIBYTE(__rhs.__sb_.__binp_) >= 0) {
    p_rhs = &__rhs;
  }
  else {
    p_rhs = __rhs.__sb_.__vftable;
  }
  if (SHIBYTE(__rhs.__sb_.__binp_) >= 0) {
    uint64_t binp_high = HIBYTE(__rhs.__sb_.__binp_);
  }
  else {
    uint64_t binp_high = (uint64_t)__rhs.__sb_.__loc_.__locale_;
  }
  uint64_t v38 = sub_100046B94(v35, (uint64_t)p_rhs, binp_high);
  __int128 v39 = sub_100046B94(v38, (uint64_t)".", 1LL);
  v170.__r_.__value_.__s.__data_[0] = 48;
  std::string::size_type v40 = sub_100138E6C(v39, (char *)&v170);
  *(void *)((char *)v40 + *(void *)(*v40 - 24LL) + 24) = 3LL;
  std::string::size_type v41 = (void *)std::ostream::operator<<();
  sub_100046B94(v41, (uint64_t)"/", 1LL);
  if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
    operator delete(__rhs.__sb_.__vftable);
  }
  std::stringbuf::str((std::stringbuf::string_type *)&__rhs, (const std::stringbuf *)&v193.__sb_.__ninp_);
  if (SHIBYTE(binp) < 0) {
    operator delete((void *)v191);
  }
  binp = __rhs.__sb_.__binp_;
  __int128 v191 = *(_OWORD *)&__rhs.__sb_.__vftable;
  if (SHIBYTE(__rhs.__sb_.__binp_) >= 0) {
    size_t v42 = (unint64_t)__rhs.__sb_.__binp_ >> 56;
  }
  else {
    size_t v42 = *((void *)&v191 + 1);
  }
  uint64_t v43 = &__rhs;
  sub_10015CEB8((uint64_t)&__rhs, v42 + 12);
  if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
    uint64_t v43 = __rhs.__sb_.__vftable;
  }
  if (v42)
  {
    if (SHIBYTE(binp) >= 0) {
      uint64_t v47 = &v191;
    }
    else {
      uint64_t v47 = (__int128 *)v191;
    }
    memmove(v43, v47, v42);
  }

  strcpy((char *)v43 + v42, "summary.json");
  if (SHIBYTE(v189) < 0) {
    operator delete((void *)v188);
  }
  __int128 v188 = *(_OWORD *)&__rhs.__sb_.__vftable;
  __int128 v189 = __rhs.__sb_.__binp_;
  if (*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 129))
  {
    if (SHIBYTE(binp) >= 0) {
      char v48 = (const char *)&v191;
    }
    else {
      char v48 = (const char *)v191;
    }
    if (mkdir(v48, 0x1F8u))
    {
      int v49 = __error();
      sub_10032C51C( "Unable to create a temp directory location: %d",  v50,  v51,  v52,  v53,  v54,  v55,  v56,  *v49);
      goto LABEL_50;
    }

    if (v23)
    {
      int v61 = SHIBYTE(binp) >= 0 ? (const char *)&v191 : (const char *)v191;
      if (chown(v61, v23->pw_uid, 0xFFFFFFFF))
      {
        int v62 = __error();
        sub_10032C51C( "Error changing the ownership of the temp directory to _nearbyd: %d",  v63,  v64,  v65,  v66,  v67,  v68,  v69,  *v62);
        LOBYTE(v184) = 1;
      }
    }

    if (SHIBYTE(binp) >= 0) {
      __int16 v70 = (const char *)&v191;
    }
    else {
      __int16 v70 = (const char *)v191;
    }
    if (chmod(v70, 0x1F8u))
    {
      int v71 = SHIBYTE(binp);
      __int128 v72 = (__int128 *)v191;
      __error();
      char v80 = &v191;
      if (v71 < 0) {
        char v80 = v72;
      }
      sub_10032C51C("Unable to chmod '%s': %d", v73, v74, v75, v76, v77, v78, v79, (uint64_t)v80);
      LOBYTE(v184) = 1;
    }

    std::ofstream::open(&v202);
    if (SHIBYTE(v189) >= 0) {
      char v88 = (const char *)&v188;
    }
    else {
      char v88 = (const char *)v188;
    }
    if (!v203[15])
    {
      sub_10032C51C("Error trying to open file: %s", v81, v82, v83, v84, v85, v86, v87, (uint64_t)v88);
      goto LABEL_50;
    }

    if (chmod(v88, 0x1B0u))
    {
      int v89 = SHIBYTE(v189);
      unsigned __int16 v90 = (__int128 *)v188;
      __error();
      __int16 v98 = &v188;
      if (v89 < 0) {
        __int16 v98 = v90;
      }
      sub_10032C51C("Unable to chmod '%s': %d", v91, v92, v93, v94, v95, v96, v97, (uint64_t)v98);
      LOBYTE(v184) = 1;
    }

    else {
      int v99 = *(std::stringbuf_vtbl **)a2;
    }
    uint64_t v180 = 0LL;
    __rhs.__sb_.__vftable = v99;
    v179[0] = 0;
    sub_10036081C((uint64_t)v179, (char **)&__rhs);
    sub_100360074(v179);
    uint64_t v100 = sub_10035D474(v187, "Reason");
    sub_10035D62C(v100, (uint64_t)v179);
    sub_10035FFE8(v179);
    if (*(_BYTE *)(a1 + 129)) {
      char v101 = "Enabled";
    }
    else {
      char v101 = "Disabled";
    }
    __rhs.__sb_.__vftable = (std::stringbuf_vtbl *)v101;
    v177[0] = 0;
    uint64_t v178 = 0LL;
    sub_10036081C((uint64_t)v177, (char **)&__rhs);
    sub_100360074(v177);
    uint64_t v102 = sub_10035D474(v187, "Firmware Logs");
    sub_10035D62C(v102, (uint64_t)v177);
    sub_10035FFE8(v177);
    if (*(_BYTE *)(a1 + 128)) {
      __int16 v103 = "Enabled";
    }
    else {
      __int16 v103 = "Disabled";
    }
    __rhs.__sb_.__vftable = (std::stringbuf_vtbl *)v103;
    v175[0] = 0;
    uint64_t v176 = 0LL;
    sub_10036081C((uint64_t)v175, (char **)&__rhs);
    sub_100360074(v175);
    uint64_t v104 = sub_10035D474(v187, "Crash Logs");
    __int16 v105 = (std::stringbuf_vtbl *)v169;
    sub_10035D62C(v104, (uint64_t)v175);
    sub_10035FFE8(v175);
    __rhs.__sb_.__vftable = v105;
    v173[0] = 0;
    uint64_t v174 = 0LL;
    sub_10036081C((uint64_t)v173, (char **)&__rhs);
    sub_100360074(v173);
    uint64_t v106 = sub_10035D474(v187, "Log Collection Error");
    sub_10035D62C(v106, (uint64_t)v173);
    sub_10035FFE8(v173);
  }

  uint64_t v31 = sub_10035C8F0(a1, (const void **)&v191, a3, v185, v186, (_BYTE *)&v184 + 1, &v184);
  if ((_DWORD)v31 == 2)
  {
    else {
      uint64_t v31 = 3LL;
    }
  }

  sub_1003610A8((uint64_t)v172, (uint64_t)v186);
  uint64_t v116 = sub_10035D474(v187, "Files Collected");
  sub_10035D62C(v116, (uint64_t)v172);
  sub_10035FFE8(v172);
  sub_10035F0F4((uint64_t)v187, 4, (std::stringbuf::string_type *)&__rhs);
  if (SHIBYTE(__rhs.__sb_.__binp_) >= 0) {
    int v117 = &__rhs;
  }
  else {
    int v117 = __rhs.__sb_.__vftable;
  }
  if (SHIBYTE(__rhs.__sb_.__binp_) >= 0) {
    uint64_t locale = HIBYTE(__rhs.__sb_.__binp_);
  }
  else {
    uint64_t locale = (uint64_t)__rhs.__sb_.__loc_.__locale_;
  }
  __int16 v119 = sub_100046B94(&v202, (uint64_t)v117, locale);
  std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(void *)(*v119 - 24LL)));
  unint64_t v120 = std::locale::use_facet((const std::locale *)&v170, &std::ctype<char>::id);
  uint64_t v121 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10LL);
  std::locale::~locale((std::locale *)&v170);
  std::ostream::put(v119, v121);
  std::ostream::flush(v119);
  if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
    operator delete(__rhs.__sb_.__vftable);
  }
  if (!std::filebuf::close(v203)) {
    std::ios_base::clear( (std::ios_base *)((char *)&v203[-1] + (void)*(v202 - 3)),  *(_DWORD *)((char *)&v203[3] + (void)*(v202 - 3)) | 4);
  }
  if (*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 129))
  {
    uint64_t v122 = (char *)v198;
    if ((v199 & 0x80u) != 0) {
      uint64_t v122 = (char *)v198[0];
    }
    uint64_t v171 = v122;
    sub_100254554((std::string *)&__rhs, &v171);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__rhs, 0LL);
    unsigned __int8 v123 = v170.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
      operator delete(__rhs.__sb_.__vftable);
    }
    if (v123 == 255 || !v123)
    {
      if ((v199 & 0x80u) == 0) {
        uint64_t v124 = v198;
      }
      else {
        uint64_t v124 = (void **)v198[0];
      }
      if (mkdir((const char *)v124, 0x1F8u) && *__error() != 17)
      {
        char v136 = __error();
        sub_10032C51C( "Unable to create the parent directory for debug logs: %d",  v137,  v138,  v139,  v140,  v141,  v142,  v143,  *v136);
        goto LABEL_51;
      }

      if ((v199 & 0x80u) == 0) {
        uint64_t v125 = v198;
      }
      else {
        uint64_t v125 = (void **)v198[0];
      }
      if (chmod((const char *)v125, 0x1F8u))
      {
        int v126 = (char)v199;
        uint64_t v127 = (void **)v198[0];
        __error();
        unint64_t v135 = v198;
        if (v126 < 0) {
          unint64_t v135 = v127;
        }
        sub_10032C51C("Unable to chmod '%s': %d", v128, v129, v130, v131, v132, v133, v134, (uint64_t)v135);
        goto LABEL_51;
      }

      if (v23)
      {
        char v144 = (v199 & 0x80u) == 0 ? (const char *)v198 : (const char *)v198[0];
        if (chown(v144, v23->pw_uid, 0xFFFFFFFF))
        {
          unint64_t v145 = __error();
          sub_10032C51C( "Error changing the ownership of parent directory to _nearbyd: %d",  v146,  v147,  v148,  v149,  v150,  v151,  v152,  *v145);
          goto LABEL_51;
        }
      }
    }

    if ((sub_10035EAC8((char *)v198) & 1) == 0)
    {
      sub_10032C51C("Unable to make room for new logs", v153, v154, v155, v156, v157, v158, v159, v168);
      goto LABEL_51;
    }

    sub_10015B520((std::string *)&__rhs, (char *)&v191);
    sub_10015B520(&v170, (char *)&v190);
    std::__fs::filesystem::__copy( (const std::__fs::filesystem::path *)&__rhs,  (const std::__fs::filesystem::path *)&v170,  recursive,  0LL);
    if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
      operator delete(__rhs.__sb_.__vftable);
    }
    unint64_t v167 = &v190;
    if ((v190.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v167 = (std::stringbuf::string_type *)v190.__r_.__value_.__r.__words[0];
    }
    sub_10032C3DC("Logs can be found in this directory: %s", v160, v161, v162, v163, v164, v165, v166, (uint64_t)v167);
    sub_10015B520((std::string *)&__rhs, (char *)&v191);
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__rhs, 0LL);
    if (SHIBYTE(__rhs.__sb_.__binp_) < 0) {
      operator delete(__rhs.__sb_.__vftable);
    }
  }

#error "10035B8D0: call analysis failed (funcsize=60)"
void sub_10035BC14( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  __int128 v30;
  uint64_t v31;
  sub_10032C3DC("crashReceived", a2, a3, a4, a5, a6, a7, a8, (uint64_t)__p[0]);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(_BYTE *)a1)
  {
    if (a2)
    {
      if (!*(_DWORD *)(a1 + 4))
      {
        sub_1000065CC(&v30, "FW Generated");
        int v17 = (void **)(a1 + 24);
        *(_OWORD *)int v17 = v30;
        *(void *)(a1 + 40) = v31;
      }

      sub_1000065CC(__p, "");
      uint64_t v25 = sub_10035ABFC(a1, a1 + 24, a2, (uint64_t)__p);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      switch(v25)
      {
        case 0:
          sub_10032C51C("No crashlogs were available to dequeue", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
          goto LABEL_23;
        case 1:
          if (*(_DWORD *)(a1 + 4) != 2) {
            goto LABEL_23;
          }
          sub_10032C3DC( "RoseDebugManager: Suspending the crashlog timer",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  (uint64_t)__p[0]);
          dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
          *(_BYTE *)(a1 + 1) = 1;
          sub_10035A58C(a1, 0);
          uint64_t v26 = 4;
          break;
        case 2:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_10032C3DC( "RoseDebugManager: Suspending the crashlog timer",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(_BYTE *)(a1 + 1) = 1;
            sub_10035A58C(a1, 0);
          }

          uint64_t v26 = 2;
          break;
        case 3:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_10032C3DC( "RoseDebugManager: Suspending the crashlog timer",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(_BYTE *)(a1 + 1) = 1;
            sub_10035A58C(a1, 0);
          }

          uint64_t v26 = 1;
          break;
        default:
          goto LABEL_23;
      }
    }

    else
    {
      sub_10032C51C("descriptor is null", v10, v11, v12, v13, v14, v15, v16, (uint64_t)__p[0]);
      uint64_t v26 = 5;
    }

    LODWORD(v30) = v26;
    uint64_t v27 = *(void *)(a1 + 80);
    if (!v27) {
      sub_10001EEF0();
    }
    (*(void (**)(uint64_t, __int128 *))(*(void *)v27 + 48LL))(v27, &v30);
LABEL_23:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }

void sub_10035BE10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035BE2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  switch((int)a2)
  {
    case 0:
      sub_10032C3DC("fwStateChangeReceived: FW is in SecureROM", a2, a3, a4, a5, a6, a7, a8, v21);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      if (*(_DWORD *)(a1 + 4) == 2)
      {
        sub_10032C3DC("RoseDebugManager: Suspending the crashlog timer", v10, v11, v12, v13, v14, v15, v16, v22);
        dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
        *(_BYTE *)(a1 + 1) = 1;
        sub_10035A58C(a1, 0);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      uint64_t v17 = *(void *)(a1 + 80);
      if (!v17) {
        goto LABEL_13;
      }
      uint64_t v18 = *(void (**)(void))(*(void *)v17 + 48LL);
      goto LABEL_8;
    case 1:
      uint64_t v20 = "fwStateChangeReceived: FW is in FirmwareRunning";
      goto LABEL_12;
    case 2:
      sub_10032C3DC("fwStateChangeReceived: FW is in FirmwareLogCollectionInProgress", a2, a3, a4, a5, a6, a7, a8, v21);
      uint64_t v19 = *(void *)(a1 + 80);
      if (!v19) {
LABEL_13:
      }
        sub_10001EEF0();
      uint64_t v18 = *(void (**)(void))(*(void *)v19 + 48LL);
LABEL_8:
      v18();
      return;
    case 3:
      uint64_t v20 = "fwStateChangeReceived: FW is in FirmwareCrashed";
      goto LABEL_12;
    case 4:
      uint64_t v20 = "fwStateChangeReceived: Unable to decode the FW state.";
LABEL_12:
      sub_10032C3DC(v20, a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    default:
      return;
  }

void sub_10035BF44( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    unint64_t v10 = a4;
    if (a4)
    {
      if (a4 >= 0x101)
      {
        sub_10032C51C("Received error packet of size %zu, truncating to %d", a2, a3, a4, a5, a6, a7, a8, a4);
        unint64_t v10 = 256LL;
      }

      if ((_DWORD)a2 == 4 || (_DWORD)a2 == 2)
      {
        sub_1000065CC(v17, "Error Reporting Packet:\n");
        sub_1000065CC(__p, "\n");
        sub_100361E98((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
      }

      else
      {
        sub_1000065CC(v17, "Error Reporting Packet Header:\n");
        sub_1000065CC(__p, "\n");
        if (v10 > 0x13) {
          sub_100361E98((uint64_t)v17, a3, 0x14uLL, 4u, (uint64_t)__p);
        }
        else {
          sub_100361E98((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
        }
      }

      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
  }

  switch((int)a2)
  {
    case 0:
      sub_10032C51C("errorReportReceived: FWPktSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 8;
      goto LABEL_30;
    case 1:
      sub_10032C51C("errorReportReceived: FWPktDroppedMagicMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 9;
      goto LABEL_30;
    case 2:
      sub_10032C51C("errorReportReceived: FWPktDroppedTooLarge", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 10;
      goto LABEL_30;
    case 3:
      sub_10032C51C("errorReportReceived: FWPktDroppedFWFailure", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 11;
      goto LABEL_30;
    case 4:
      sub_10032C51C("errorReportReceived: FWPktDroppedCRCMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 12;
      goto LABEL_30;
    case 5:
      sub_10032C51C("errorReportReceived: FWPktDroppedRespSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 13;
      goto LABEL_30;
    case 6:
      sub_10032C51C("errorReportReceived: FWPktDroppedUnhandledType", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 14;
      goto LABEL_30;
    case 7:
      sub_10032C51C("errorReportReceived: FWPktDroppedUnhandledInterface", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 15;
      goto LABEL_30;
    case 8:
      sub_10032C51C("errorReportReceived: FWPktDroppedUnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 16;
      goto LABEL_30;
    case 9:
      sub_10032C51C("errorReportReceived: DriverCrashlogPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 17;
      goto LABEL_30;
    case 10:
      sub_10032C51C("errorReportReceived: RKOSPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 18;
      goto LABEL_30;
    case 11:
      sub_10032C51C("errorReportReceived: InvalidEventParameter", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 19;
      goto LABEL_30;
    case 12:
      sub_10032C51C("errorReportReceived: UnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      int v12 = 20;
LABEL_30:
      LODWORD(v17[0]) = v12;
      uint64_t v13 = *(void *)(a1 + 80);
      if (!v13) {
        sub_10001EEF0();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 48LL))(v13, v17);
      break;
    default:
      sub_10032C51C("errorReportReceived: Error Undefined (%d)", a2, a3, a4, a5, a6, a7, a8, a2);
      break;
  }

void sub_10035C1D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035C21C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 120);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_10035C278;
    block[3] = &unk_1007BF0B8;
    block[4] = a1;
    dispatch_sync(v2, block);
  }

void sub_10035C278(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
  if (*(_BYTE *)v1)
  {
    if (*(_BYTE *)(v1 + 1)) {
      dispatch_resume(*(dispatch_object_t *)(v1 + 16));
    }
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 16));
    dispatch_release(*(dispatch_object_t *)(v1 + 16));
    uint64_t v2 = *(void *)(v1 + 48);
    uint64_t v6 = 0LL;
    sub_10032DAC4(v2, (uint64_t)v5);
    uint64_t v3 = v6;
    if (v6 == v5)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v5;
    }

    else
    {
      if (!v6)
      {
LABEL_9:
        *(_BYTE *)uint64_t v1 = 0;
        *(void *)(v1 + 16) = 0LL;
        *(void *)(v1 + 120) = 0LL;
        goto LABEL_10;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_9;
  }

void sub_10035C358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10035C390( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(dispatch_source_s **)(a1 + 16);
  dispatch_time_t v10 = dispatch_time(0LL, 5000000000LL);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(_BYTE *)(a1 + 1) = 0;
}

void sub_10035C3F4( uint64_t a1, uint64_t a2, unint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3 - 32;
  if (a3 - 32 < 0x31) {
    return;
  }
  uint64_t v11 = a2;
  uint64_t v12 = 32LL;
  while (1)
  {
    uint64_t v13 = v11 + v12;
    uint64_t v14 = *(unsigned int *)(v11 + v12 + 12);
    uint64_t v15 = *(unsigned int *)(v11 + v12);
    if (v14 <= 0xF)
    {
      sub_10032C51C( "crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d",  a2,  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  v15);
      return;
    }

    if ((_DWORD)v15 == 1130587248) {
      break;
    }
LABEL_7:
    v12 += v14;
    if (v12 + 16 >= v8) {
      return;
    }
  }

  if (*(_DWORD *)(v13 + 8) != 512)
  {
    sub_10032C51C( "CoredumpRegions version mismatch. Expected: 0x%x Version in Crashlog: 0x%x",  a2,  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  512LL);
    LODWORD(v14) = *(_DWORD *)(v13 + 12);
    goto LABEL_7;
  }

  if (v12 + v14 <= a3)
  {
    if (v14 >= 0x24)
    {
      uint64_t v16 = (unint64_t *)(a4 + 2);
      uint64_t v17 = 16LL;
      uint64_t v18 = 36LL;
      while (1)
      {
        uint64_t v19 = (_OWORD *)(v13 + v17);
        __int128 v33 = *(_OWORD *)(v13 + v17);
        unsigned int v20 = *(_DWORD *)(v13 + v17 + 16);
        if (v20 > 0x200000)
        {
          sub_10032C51C( "Coredump region size is too large: %d",  a2,  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  *(unsigned int *)(v13 + v17 + 16));
          goto LABEL_37;
        }

        uint64_t v17 = v18;
        unint64_t v21 = (unint64_t)a4[1];
        uint64_t v22 = v21 - (void)*a4;
        if (v22 == 1280) {
          break;
        }
        if (v21 >= *v16)
        {
          uint64_t v24 = v22 / 20;
          unint64_t v25 = v22 / 20 + 1;
          if (v25 > 0xCCCCCCCCCCCCCCCLL) {
            sub_10001E11C();
          }
          else {
            a2 = v25;
          }
          if (a2) {
            uint64_t v26 = (char *)sub_1003606C0((uint64_t)(a4 + 2), a2);
          }
          else {
            uint64_t v26 = 0LL;
          }
          uint64_t v27 = &v26[20 * v24];
          *(_OWORD *)uint64_t v27 = v33;
          *((_DWORD *)v27 + 4) = v20;
          uint64_t v29 = *a4;
          uint64_t v28 = a4[1];
          uint64_t v30 = v27;
          if (v28 != *a4)
          {
            do
            {
              __int128 v31 = *(_OWORD *)(v28 - 20);
              *((_DWORD *)v30 - 1) = *((_DWORD *)v28 - 1);
              *(_OWORD *)(v30 - 20) = v31;
              v30 -= 20;
              v28 -= 20;
            }

            while (v28 != v29);
            uint64_t v28 = *a4;
          }

          uint64_t v23 = v27 + 20;
          *a4 = v30;
          a4[1] = v27 + 20;
          a4[2] = &v26[20 * a2];
          if (v28) {
            operator delete(v28);
          }
        }

        else
        {
          *(_OWORD *)unint64_t v21 = *v19;
          *(_DWORD *)(v21 + 16) = v20;
          uint64_t v23 = (char *)(v21 + 20);
        }

        a4[1] = v23;
        uint64_t v18 = v17 + 20;
      }

      sub_10032C51C( "There are more coredump regions than expected in the crashlog",  a2,  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  v32);
LABEL_37:
      a4[1] = *a4;
    }
  }

  else
  {
    sub_10032C51C( "Parsing error while extracting the coredump regions. crashlog size: %zu offset and section size: %lu",  a2,  a3,  (uint64_t)a4,  a5,  a6,  a7,  a8,  a3);
  }

void sub_10035C660( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, std::string *__str, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3 <= 0x1F)
  {
    sub_10032C51C("crashLogSize is too small", a2, a3, a4, (uint64_t)__str, a6, a7, a8, a9);
    return;
  }

  int v9 = a6;
  std::string::value_type v11 = a4;
  int v14 = *(unsigned __int8 *)(a2 + 12);
  if (a3 - 32 < 0x31)
  {
LABEL_10:
    std::string::value_type v19 = 0;
    std::string::value_type v20 = 0;
  }

  else
  {
    uint64_t v15 = 32LL;
    while (1)
    {
      uint64_t v16 = a2 + v15;
      uint64_t v17 = *(unsigned int *)(a2 + v15 + 12);
      uint64_t v18 = *(unsigned int *)(a2 + v15);
      if (v17 <= 0xF)
      {
        sub_10032C51C( "crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d",  a2,  a3,  a4,  (uint64_t)__str,  a6,  a7,  a8,  v18);
        goto LABEL_10;
      }

      if ((_DWORD)v18 == 1131639922) {
        break;
      }
      v15 += v17;
      if (v15 + 16 >= a3 - 32) {
        goto LABEL_10;
      }
    }

    if (*(_DWORD *)(v16 + 8) == 257)
    {
      if (v15 + v17 <= a3)
      {
        sub_10024065C(&__dst, (void *)(v16 + 20), (int)v17 - 20);
        *std::string __str = __dst;
        if ((__str->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v31 = __str;
        }
        else {
          __int128 v31 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        sub_10032C3DC("CrashString is: %s", v24, v25, v26, v27, v28, v29, v30, (uint64_t)v31);
      }

      else
      {
        sub_10032C51C( "Parsing error while extracting the crash string reason. crashlog size: %zu offset and section size: %lu",  a2,  a3,  a4,  (uint64_t)__str,  a6,  a7,  a8,  a3);
      }

      std::string::value_type v19 = 1;
    }

    else
    {
      sub_10032C51C( "Crash string section version mismatch. Expected: 0x%x Version in Crashlog: 0x%x",  a2,  a3,  a4,  (uint64_t)__str,  a6,  a7,  a8,  257LL);
      std::string::value_type v19 = 0;
    }

    std::string::value_type v20 = 1;
  }

  unsigned int v21 = v14 - 1;
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v23 = *(void *)(a1 + 112);
    if (v23 && v9)
    {
      memset(&__dst, 0, sizeof(__dst));
      std::string::operator=(&__dst, __str);
      int v33 = *(_DWORD *)(a2 + 12);
      BOOL v34 = v21 < 0x3F;
      std::string::value_type v35 = v11;
      sub_10035C8B0(a1 + 88, 0, (uint64_t)&__dst);
      return;
    }
  }

  else
  {
    uint64_t v23 = *(void *)(a1 + 112);
  }

  if (v23 && v9)
  {
    __dst.__r_.__value_.__s.__data_[0] = v20;
    __dst.__r_.__value_.__s.__data_[1] = v19;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 12);
    __dst.__r_.__value_.__s.__data_[8] = v21 < 0x3F;
    __dst.__r_.__value_.__s.__data_[9] = v11;
    sub_10035C8B0(a1 + 88, 1, (uint64_t)&__dst);
  }

void sub_10035C894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035C8B0(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

uint64_t sub_10035C8F0( uint64_t a1, const void **a2, uint64_t a3, void *a4, unsigned __int8 *a5, _BYTE *a6, _BYTE *a7)
{
  size_t v152 = 0LL;
  *(void *)uint64_t v153 = 0LL;
  sub_1000065CC(&v151, "");
  char v14 = 0;
  uint64_t v15 = 0LL;
  unsigned __int8 v16 = 0;
  char v133 = 0;
  char v17 = 1;
  do
  {
    v157[v15] = 1;
    v150[v15] = 0;
    char v18 = v17;
    std::string::value_type v139 = v14 & 1;
    uint64_t v19 = a3;
    uint64_t v20 = a3 + 30 * v15;
    unsigned int v21 = 1;
    while (sub_10035D2D0(a1, v16, &v152, a6, v10, v11, v12, v13))
    {
      memset(v149, 0, 15);
      size_t v25 = v152;
      v154.__r_.__value_.__s.__data_[0] = 0;
      sub_10016C2CC(v148, v152, &v154);
      char v28 = sub_10032D818( *(void *)(a1 + 48),  v16,  (uint64_t)v149,  (uint64_t)v148[0],  (char *)v148[2] - (char *)v148[0],  (uint64_t)v153,  v26,  v27);
      if (*(void *)v153 == v25) {
        char v36 = v28;
      }
      else {
        char v36 = 0;
      }
      if ((v36 & 1) != 0)
      {
        if (BYTE4(v149[1]))
        {
          std::string::assign(&v151, "Corrupted");
          v154.__r_.__value_.__s.__data_[0] = v139;
          if (*(void *)(a1 + 112)) {
            sub_10035C8B0(a1 + 88, 2, (uint64_t)&v154);
          }
LABEL_18:
          if ((v18 & 1) != 0) {
            goto LABEL_19;
          }
LABEL_35:
          if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            size_t size = v151.__r_.__value_.__s.__size_;
          }
          else {
            size_t size = v151.__r_.__value_.__l.__size_;
          }
          sub_10015CEB8((uint64_t)&v154, size + 4);
          if ((v154.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v68 = &v154;
          }
          else {
            uint64_t v68 = (std::string *)v154.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v69 = &v151;
            }
            else {
              uint64_t v69 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            memmove(v68, v69, size);
          }

          strcpy((char *)v68 + size, "-DSP");
        }

        else
        {
          if (*((_DWORD *)v148[0] + 3) > 0x3Fu)
          {
            std::string::assign(&v151, "NonFatal");
            goto LABEL_18;
          }

          std::string::assign(&v151, "Fatal");
          if (v19)
          {
            *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 7) = 0LL;
            v154.__r_.__value_.__r.__words[0] = 0LL;
            if (sub_10032D8B8(*(void *)(a1 + 48), v16, (uint64_t)&v154, v40, v41, v42, v43, v44))
            {
              if (*(void *)(v20 + 15) == v154.__r_.__value_.__r.__words[0])
              {
                sub_10032C3DC( "Crashlog's log_id matches the coredump's log_id. Extracting the coredump regions.",  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v129);
                sub_10035C3F4( v52,  (uint64_t)v148[0],  *(unint64_t *)v153,  (char **)(*a4 + 24 * v15),  v53,  v54,  v55,  v56);
              }

              else
              {
                sub_10032C51C( "The coredump log_id does not match with the crashlog log_id",  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v129);
              }
            }

            else
            {
              sub_10032C51C("No coredump to be dequeued for core: %d", v45, v46, v47, v48, v49, v50, v51, v15);
            }
          }

          else
          {
            sub_10032C51C("No crashlog descriptor available.", v38, v39, v40, v41, v42, v43, v44, v129);
          }

          char v133 = 1;
          if ((v18 & 1) == 0) {
            goto LABEL_35;
          }
LABEL_19:
          if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            size_t v57 = v151.__r_.__value_.__s.__size_;
          }
          else {
            size_t v57 = v151.__r_.__value_.__l.__size_;
          }
          sub_10015CEB8((uint64_t)&v154, v57 + 3);
          if ((v154.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v65 = &v154;
          }
          else {
            uint64_t v65 = (std::string *)v154.__r_.__value_.__r.__words[0];
          }
          if (v57)
          {
            if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v66 = &v151;
            }
            else {
              uint64_t v66 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            memmove(v65, v66, v57);
          }

          *(_DWORD *)((char *)&v65->__r_.__value_.__l.__data_ + v57) = 5259565;
        }

        std::string v151 = v154;
        __int16 v70 = &v151;
        if ((v154.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int16 v70 = (std::string *)v154.__r_.__value_.__r.__words[0];
        }
        sub_10032C3DC("Received %s crash log", v58, v59, v60, v61, v62, v63, v64, (uint64_t)v70);
        memset(&__str, 0, sizeof(__str));
        int v73 = *(char *)(a1 + 47);
        if (v73 < 0)
        {
          if (*(void *)(a1 + 32) != 12LL) {
            goto LABEL_62;
          }
          uint64_t v74 = *(void *)(a1 + 24);
        }

        else
        {
          uint64_t v74 = a1 + 24;
          if (v73 != 12)
          {
LABEL_62:
            BOOL v78 = 0;
            goto LABEL_63;
          }
        }

        uint64_t v75 = *(void *)v74;
        int v76 = *(_DWORD *)(v74 + 8);
        BOOL v78 = v75 == 0x72656E6547205746LL && v76 == 1684370529;
LABEL_63:
        if (BYTE4(v149[1])) {
          uint64_t v79 = 0LL;
        }
        else {
          uint64_t v79 = v78;
        }
        sub_10035C660(a1, (uint64_t)v148[0], *(unint64_t *)v153, v16, &__str, v79, v71, v72, v130);
        if (*(_BYTE *)(a1 + 128))
        {
          std::operator+<char>(&v143, "RoseCrashLog", &v151);
          uint64_t v87 = std::string::append(&v143, "-");
          __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__l.__cap_ = v87->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0LL;
          v87->__r_.__value_.__l.__cap_ = 0LL;
          v87->__r_.__value_.__r.__words[0] = 0LL;
          unsigned int v89 = v21 + 1;
          v157[v15] = v21 + 1;
          std::to_string(&v142, v21);
          if ((v142.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unsigned __int16 v90 = &v142;
          }
          else {
            unsigned __int16 v90 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          if ((v142.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v91 = v142.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v91 = v142.__r_.__value_.__l.__size_;
          }
          uint64_t v92 = std::string::append(&v144, (const std::string::value_type *)v90, v91);
          __int128 v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__l.__cap_ = v92->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v93;
          v92->__r_.__value_.__l.__size_ = 0LL;
          v92->__r_.__value_.__l.__cap_ = 0LL;
          v92->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v94 = std::string::append(&v154, ".bin");
          __int128 v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          int64_t cap = v94->__r_.__value_.__l.__cap_;
          *(_OWORD *)__int128 __p = v95;
          v94->__r_.__value_.__l.__size_ = 0LL;
          v94->__r_.__value_.__l.__cap_ = 0LL;
          v94->__r_.__value_.__r.__words[0] = 0LL;
          sub_10028D0F8(a2, (const void **)__p, (uint64_t)&v144);
          sub_10035D360((void (__cdecl ***)(std::ofstream *__hidden))&v154, (uint64_t *)&v144, 4);
          if (v155)
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            v143.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            v140[0] = 0;
            uint64_t v141 = 0LL;
            sub_10036081C((uint64_t)v140, &v143.__r_.__value_.__l.__data_);
            sub_100360074(v140);
            if (cap >= 0) {
              uint64_t v104 = (char *)__p;
            }
            else {
              uint64_t v104 = (char *)__p[0];
            }
            uint64_t v105 = sub_10035D474(a5, v104);
            sub_10035D62C(v105, (uint64_t)v140);
            sub_10035FFE8(v140);
            if ((v144.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v106 = &v144;
            }
            else {
              uint64_t v106 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            if (chmod((const char *)v106, 0x1B0u))
            {
              int v114 = (char)v144.__r_.__value_.__s.__size_;
              std::string::size_type v115 = v144.__r_.__value_.__r.__words[0];
              __error();
              unsigned __int8 v123 = &v144;
              if (v114 < 0) {
                unsigned __int8 v123 = (std::string *)v115;
              }
              sub_10032C51C("Unable to chmod file '%s': %d", v116, v117, v118, v119, v120, v121, v122, (uint64_t)v123);
              *a7 = 1;
            }

            uint64_t v124 = &v151;
            if ((v151.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v124 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            sub_10032C3DC("Writing %s crash log to %s", v107, v108, v109, v110, v111, v112, v113, (uint64_t)v124);
            std::ostream::write(&v154, v148[0], *(void *)v153);
          }

          else
          {
            uint64_t v125 = &v144;
            if ((v144.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v125 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            sub_10032C51C("Error trying to open file: %s", v96, v97, v98, v99, v100, v101, v102, (uint64_t)v125);
            *a7 = 1;
          }

          v154.__r_.__value_.__r.__words[0] = v137;
          *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + *(void *)(v137 - 24)) = v136;
          std::filebuf::~filebuf(&v154.__r_.__value_.__r.__words[1]);
          std::ios::~ios(&v156);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          unsigned int v21 = v89;
          if (v19)
          {
LABEL_107:
            if (v149[0] == *(void *)v20)
            {
              v150[v15] = 1;
              if (LODWORD(v149[1]) != *(_DWORD *)(v20 + 8))
              {
                sub_10032C51C( "Size of the dequeued crash log does not match the size in descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
                *a6 = 1;
              }

              if (BYTE5(v149[1]) != *(unsigned __int8 *)(v20 + 13))
              {
                sub_10032C51C( "core type of the dequeued crash log does not match the core type in descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
                *a6 = 1;
              }

              if (BYTE6(v149[1]) != *(unsigned __int8 *)(v20 + 14))
              {
                sub_10032C51C( "log type of the dequeued crash log does not match the log type in descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
                *a6 = 1;
              }

              if (BYTE4(v149[1]) != *(unsigned __int8 *)(v20 + 12))
              {
                sub_10032C51C( "is_corrupted flag of the dequeued crash log does not match the flag in descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
                *a6 = 1;
              }

              int v37 = 6;
              goto LABEL_118;
            }
          }
        }

        else
        {
          sub_10032C3DC("Crash log saving is disabled", v80, v81, v82, v83, v84, v85, v86, v131);
          if (v19) {
            goto LABEL_107;
          }
        }

        int v37 = 0;
LABEL_118:
        goto LABEL_120;
      }

      sub_10032C51C( "DequeueCrashLog for core: %d failed. Buffer Size: %zu, received Size: %zu",  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v15);
      *a6 = 1;
      int v37 = 6;
LABEL_120:
      if (v148[0])
      {
        v148[1] = v148[0];
        operator delete(v148[0]);
      }

      if (v37) {
        break;
      }
    }

    char v17 = 0;
    ++v16;
    char v14 = 1;
    uint64_t v15 = 1LL;
    a3 = v19;
  }

  while ((v18 & 1) != 0);
  if (v19)
  {
    if (*(_DWORD *)(v19 + 8) && !v150[0])
    {
      sub_10032C51C( "No AP crashlog available with ID that matches the descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
      *a6 = 1;
    }

    if (*(_DWORD *)(v19 + 38) && !v150[1])
    {
      sub_10032C51C( "No DSP crashlog available with ID that matches the descriptor",  v22,  v23,  v24,  v10,  v11,  v12,  v13,  v129);
      *a6 = 1;
    }
  }

  if ((v133 & 1) != 0) {
    uint64_t v126 = 2LL;
  }
  else {
    uint64_t v126 = v157[0] > 1u || v157[1] > 1u;
  }
  return v126;
}

void sub_10035D1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10035D2D0( uint64_t a1, uint64_t a2, unint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v20 = 0LL;
  int v10 = sub_10032D818(*(void *)(a1 + 48), a2, 0LL, 0LL, 0LL, (uint64_t)&v20, a7, a8);
  if (v10) {
    BOOL v18 = v20 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if ((v10 & 1) != 0) {
      return 0LL;
    }
    goto LABEL_10;
  }

  if (v20 > 0x200000)
  {
    sub_10032C51C("Unexpectedly large crashlog of size:%zu is available", v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_10:
    uint64_t result = 0LL;
    *a4 = 1;
    return result;
  }

  *a3 = v20;
  return 1LL;
}

void (__cdecl ***sub_10035D360( void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t *a2, int a3))(std::ofstream *__hidden this)
{
  int v6 = a1 + 1;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  int v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    int v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 0x10u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10035D43C(_Unwind_Exception *a1)
{
}

uint64_t sub_10035D474(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    uint64_t v5 = operator new(0x18uLL);
    v5[2] = 0LL;
    v5[1] = 0LL;
    *uint64_t v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_100360074(a1);
    int v4 = *a1;
  }

  if (v4 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_100360704((char *)a1, &v12);
    int v10 = std::string::insert(&v12, 0LL, "cannot use operator[] with ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    std::logic_error::logic_error(exception, &__p);
  }

  int v6 = (uint64_t **)*((void *)a1 + 1);
  sub_1000065CC(&__p, __s);
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v7 = sub_100360734(v6, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1004242F8, &v12);
  return (uint64_t)v7 + 56;
}

void sub_10035D5B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10035D62C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + std::ostream::~ostream(v1, v2 + 8) = v5;
  sub_100360074((unsigned __int8 *)a1);
  return a1;
}

void sub_10035D684(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned __int8 v5 = -51 * ((uint64_t)(a2[1] - *a2) >> 2);
  __int128 v32 = xmmword_1004332A0;
  uint64_t v6 = v5;
  uint64_t v7 = v5;
  unint64_t v8 = (unint64_t)v5 << 6;
  uint64_t v9 = 56LL * v5;
  int v33 = v5 + 1;
  int v34 = v9 + 84;
  int v35 = 0;
  uint64_t v31 = 0x5400000004LL;
  uint64_t v30 = 0x1100000001LL;
  memset(v28, 0, sizeof(v28));
  int v29 = 0;
  sub_1003608FC(&__p, v5);
  uint64_t v17 = __p;
  if (v27 - (_BYTE *)__p >= 1)
  {
    unint64_t v18 = (v27 - (_BYTE *)__p) / 0x38uLL + 1;
    do
    {
      v17[6] = 0LL;
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_OWORD *)v17 + 2) = 0uLL;
      *(_OWORD *)uint64_t v17 = 0uLL;
      v17 += 7;
      --v18;
    }

    while (v18 > 1);
  }

  sub_10032C3DC("Number of coredump sections available for AP is: %d", v10, v11, v12, v13, v14, v15, v16, v6);
  if ((_DWORD)v6)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    int v21 = v9 + 112;
    int v22 = (char *)__p;
    do
    {
      uint64_t v23 = &v22[v20];
      *(void *)uint64_t v23 = 0x3800000001LL;
      v23[8] = 95;
      *((_BYTE *)__p + v20 + 9) = 95;
      *((_BYTE *)__p + v20 + 10) = 84;
      *((_BYTE *)__p + v20 + 11) = 69;
      *((_BYTE *)__p + v20 + 12) = 88;
      *((_BYTE *)__p + v20 + 13) = 84;
      uint64_t v24 = *a2 + v19;
      int v22 = (char *)__p;
      size_t v25 = (char *)__p + v20;
      v25[6] = *(void *)v24;
      LODWORD(v24) = *(_DWORD *)(v24 + 16);
      v25[7] = v24;
      v25[8] = v21;
      v25[9] = v24;
      v21 += v24;
      v20 += 56LL;
      v19 += 20LL;
    }

    while (v8 - 8 * v7 != v20);
  }

  std::ostream::write(a3, &v32, 28LL);
  std::ostream::write(a3, &v31, 8LL);
  std::ostream::write(a3, &v30, 8LL);
  std::ostream::write(a3, v28, 68LL);
  std::ostream::write(a3, __p, v9);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }

void sub_10035D89C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035D8BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)(a2[1] - *a2) >> 2;
  int v33 = 0;
  __int128 v30 = xmmword_1004332B0;
  unint64_t v6 = (-51 * v5);
  uint64_t v7 = 72 * v6;
  int v31 = v6 + 1;
  uint64_t v32 = (72 * v6 + 288);
  uint64_t v29 = 0x12000000004LL;
  uint64_t v28 = 0x4400000001LL;
  memset(v27, 0, sizeof(v27));
  sub_10036099C(&__p, v6);
  uint64_t v15 = __p;
  if (v26 - (_BYTE *)__p >= 1)
  {
    unint64_t v16 = (v26 - (_BYTE *)__p) / 0x48uLL + 1;
    do
    {
      v15[8] = 0LL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *(_OWORD *)uint64_t v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      v15 += 9;
      --v16;
    }

    while (v16 > 1);
  }

  sub_10032C3DC("Number of coredump sections available for DSP is: %d", v8, v9, v10, v11, v12, v13, v14, v6);
  if ((_DWORD)v6)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    unsigned int v19 = v7 + 320;
    uint64_t v20 = (char *)__p;
    do
    {
      int v21 = &v20[v18];
      *(void *)int v21 = 0x4800000019LL;
      char v21[8] = 95;
      *((_BYTE *)__p + v18 + 9) = 95;
      *((_BYTE *)__p + v18 + 10) = 84;
      *((_BYTE *)__p + v18 + 11) = 69;
      *((_BYTE *)__p + v18 + 12) = 88;
      *((_BYTE *)__p + v18 + 13) = 84;
      uint64_t v22 = *a2 + v17;
      uint64_t v20 = (char *)__p;
      uint64_t v23 = (char *)__p + v18;
      v23[3] = *(void *)v22;
      uint64_t v24 = *(unsigned int *)(v22 + 16);
      v23[4] = v24;
      v23[5] = v19;
      v23[6] = v24;
      v19 += v24;
      v18 += 72LL;
      v17 += 20LL;
    }

    while (72 * v6 != v18);
  }

  std::ostream::write(a3, &v30, 32LL);
  std::ostream::write(a3, &v29, 8LL);
  std::ostream::write(a3, &v28, 8LL);
  std::ostream::write(a3, v27, 272LL);
  std::ostream::write(a3, __p, v7);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }

void sub_10035DB00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035DB20( uint64_t a1, const void **a2, void *a3, unsigned __int8 *a4, _BYTE *a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)(a1 + 128))
  {
    sub_10032C3DC( "Core dump saving is disabled",  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)a4,  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  v94);
    char v91 = 1;
    return v91 & 1;
  }

  v112.__r_.__value_.__s.__data_[0] = 0;
  sub_10016C2CC(v110, 0x1000uLL, &v112);
  sub_1000065CC(&v109, "");
  uint64_t v15 = 0LL;
  unsigned __int8 v16 = 0;
  char v18 = 1;
  char v95 = 1;
  while (1)
  {
    char v19 = v18;
    *(void *)((char *)v108 + 7) = 0LL;
    v108[0] = 0LL;
    if (!sub_10032D8B8(*(void *)(a1 + 48), v16, (uint64_t)v108, v10, v11, v12, v13, v14))
    {
      uint64_t v92 = "Unable to get the coredump info for core: %d";
      uint64_t v27 = v15;
LABEL_88:
      sub_10032C51C(v92, v20, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_89;
    }

    uint64_t v27 = LODWORD(v108[1]);
    if (LODWORD(v108[1])) {
      break;
    }
    sub_10032C3DC("No coredumps to read for core: %d", v20, v21, v22, v23, v24, v25, v26, v15);
LABEL_81:
    char v18 = 0;
    ++v16;
    uint64_t v15 = 1LL;
    if ((v19 & 1) == 0) {
      goto LABEL_90;
    }
  }

  if (LODWORD(v108[1]) > 0x200000)
  {
    uint64_t v92 = "Coredump size is unexpectedly large: %d";
    goto LABEL_88;
  }

  if (v15 != BYTE5(v108[1]))
  {
    sub_10032C51C( "Descriptor core: %d doesn't match the requested core: %d",  v20,  v21,  v22,  v23,  v24,  v25,  v26,  BYTE5(v108[1]));
LABEL_89:
    char v95 = 0;
    *a5 = 1;
    goto LABEL_90;
  }

  uint64_t v27 = BYTE6(v108[1]);
  if (BYTE6(v108[1]) != 1)
  {
    uint64_t v92 = "Invalid log type: %d in the coredump descriptor";
    goto LABEL_88;
  }

  if ((v19 & 1) != 0) {
    uint64_t v28 = "AP";
  }
  else {
    uint64_t v28 = "DSP";
  }
  std::string::assign(&v109, v28);
  if (BYTE4(v108[1]))
  {
    if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = v109.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = v109.__r_.__value_.__l.__size_;
    }
    sub_10015CEB8((uint64_t)&v112, size + 10);
    if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v37 = &v112;
    }
    else {
      int v37 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v38 = &v109;
      }
      else {
        uint64_t v38 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      memmove(v37, v38, size);
    }

    strcpy((char *)v37 + size, "-Corrupted");
    std::string v109 = v112;
  }

  if (*(void *)(*a3 + 24 * v15) == *(void *)(*a3 + 24 * v15 + 8))
  {
    sub_10032C51C( "No coredump regions available for core %d. Saving the raw coredump.",  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v15);
    if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v39 = v109.__r_.__value_.__s.__size_;
    }
    else {
      size_t v39 = v109.__r_.__value_.__l.__size_;
    }
    sub_10015CEB8((uint64_t)&v112, v39 + 4);
    if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v40 = &v112;
    }
    else {
      uint64_t v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if (v39)
    {
      if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v41 = &v109;
      }
      else {
        uint64_t v41 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      memmove(v40, v41, v39);
    }

    strcpy((char *)v40 + v39, "-Raw");
    std::string v109 = v112;
    *a5 = 1;
  }

  uint64_t v42 = &v109;
  if ((v109.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v42 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  sub_10032C3DC("Received %s coredump", v29, v30, v31, v32, v33, v34, v35, (uint64_t)v42);
  std::operator+<char>(&v112, "RoseCoreDump-", &v109);
  uint64_t v43 = std::string::append(&v112, ".bin");
  __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  int64_t cap = v43->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v106 = v44;
  v43->__r_.__value_.__l.__size_ = 0LL;
  v43->__r_.__value_.__l.__cap_ = 0LL;
  v43->__r_.__value_.__r.__words[0] = 0LL;
  sub_10028D0F8(a2, (const void **)v106, (uint64_t)__p);
  sub_10035D360((void (__cdecl ***)(std::ofstream *__hidden))&v112, (uint64_t *)__p, 4);
  uint64_t v52 = v113;
  if (v105 >= 0) {
    uint64_t v53 = __p;
  }
  else {
    uint64_t v53 = (void **)__p[0];
  }
  if (!v113)
  {
    sub_10032C51C("Error trying to open file: %s", v45, v46, v47, v48, v49, v50, v51, (uint64_t)v53);
    uint64_t v74 = a6;
    goto LABEL_75;
  }

  if (chmod((const char *)v53, 0x1B0u))
  {
    int v61 = v105;
    uint64_t v62 = (void **)__p[0];
    __error();
    __int16 v70 = __p;
    if (v61 < 0) {
      __int16 v70 = v62;
    }
    sub_10032C51C("Unable to chmod file '%s': %d", v63, v64, v65, v66, v67, v68, v69, (uint64_t)v70);
    *a6 = 1;
  }

  uint64_t v71 = v106;
  if (cap < 0) {
    uint64_t v71 = (void **)v106[0];
  }
  sub_10032C3DC("Writing coredump to %s", v54, v55, v56, v57, v58, v59, v60, (uint64_t)v71);
  int v73 = (void *)*a3;
  if ((v19 & 1) != 0)
  {
    if (*v73 != v73[1]) {
      sub_10035D684(v72, v73, (uint64_t)&v112);
    }
  }

  else
  {
    uint64_t v75 = &v73[3 * v15];
    if (*v75 != v75[1]) {
      sub_10035D8BC(v72, v75, (uint64_t)&v112);
    }
  }

  v102[0] = 0;
  uint64_t v103 = 0LL;
  sub_100360A90((uint64_t)v102, "");
  sub_100360074(v102);
  if (cap >= 0) {
    int v76 = (char *)v106;
  }
  else {
    int v76 = (char *)v106[0];
  }
  uint64_t v77 = sub_10035D474(a4, v76);
  sub_10035D62C(v77, (uint64_t)v102);
  sub_10035FFE8(v102);
  if (LODWORD(v108[1]))
  {
    unsigned int v80 = 0;
    while (1)
    {
      unint64_t v101 = 0LL;
      int v81 = sub_10032D93C( *(void *)(a1 + 48),  v16,  v80,  v111 - (unint64_t)v110[0],  (uint64_t)v110[0],  (uint64_t)&v101,  v78,  v79);
      int v89 = v101;
      int v90 = v101 ? v81 : 0;
      if (v90 != 1) {
        break;
      }
      uint64_t v82 = v110[0];
      std::ostream::write(&v112, v110[0], v101);
      v80 += v89;
      if (v80 >= LODWORD(v108[1])) {
        goto LABEL_76;
      }
    }

    sub_10032C51C("reading coredump failed. received size is: %zu", (uint64_t)v82, v83, v84, v85, v86, v87, v88, v101);
    char v95 = 0;
    uint64_t v74 = a5;
LABEL_75:
    _BYTE *v74 = 1;
  }

void sub_10035E12C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a44) {
    operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035E1E4( uint64_t a1, const void **a2, unsigned __int8 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 129))
  {
    uint64_t v9 = (_BYTE *)a4;
    unint64_t v77 = 0LL;
    sub_1000065CC(v75, "RoseFirmwareLogs.bin");
    sub_10028D0F8(a2, (const void **)v75, (uint64_t)v73);
    sub_10035D360(&v78, (uint64_t *)v73, 4);
    char v70 = 0;
    sub_10016C2CC(__p, 0x1000uLL, &v70);
    if (v74 >= 0) {
      uint64_t v20 = v73;
    }
    else {
      uint64_t v20 = (void **)v73[0];
    }
    if (v79[15])
    {
      if (chmod((const char *)v20, 0x1B0u))
      {
        int v28 = v74;
        uint64_t v29 = (void **)v73[0];
        __error();
        int v37 = v73;
        if (v28 < 0) {
          int v37 = v29;
        }
        sub_10032C51C("Unable to chmod file '%s': %d", v30, v31, v32, v33, v34, v35, v36, (uint64_t)v37);
        *a5 = 1;
      }

      uint64_t v38 = v75;
      if (v76 < 0) {
        uint64_t v38 = (void **)v75[0];
      }
      sub_10032C3DC("Writing firmware logs to %s", v21, v22, v23, v24, v25, v26, v27, (uint64_t)v38);
      v68[0] = 0;
      uint64_t v69 = 0LL;
      sub_100360A90((uint64_t)v68, "");
      sub_100360074(v68);
      if (v76 >= 0) {
        size_t v39 = (char *)v75;
      }
      else {
        size_t v39 = (char *)v75[0];
      }
      uint64_t v40 = sub_10035D474(a3, v39);
      sub_10035D62C(v40, (uint64_t)v68);
      sub_10035FFE8(v68);
      if (sub_10032D9A4(*(void *)(a1 + 48), v41, v42, v43, v44, v45, v46, v47))
      {
        while (1)
        {
          int v55 = sub_10032DA54( *(void *)(a1 + 48),  (uint64_t)__p[0],  v72 - (unint64_t)__p[0],  (uint64_t)&v77,  v51,  v52,  v53,  v54);
          int v62 = v77 ? v55 : 0;
          if (v62 != 1) {
            break;
          }
          if (v77 > v72 - (unint64_t)__p[0])
          {
            sub_10032C51C( "dequeued more data (%zu) than the buffer capacity.",  (uint64_t)__p[0],  v77,  v57,  v58,  v59,  v60,  v61,  v77);
            std::ostream::write(&v78, __p[0], v72 - (unint64_t)__p[0]);
            goto LABEL_30;
          }

          std::ostream::write(&v78, __p[0], v77);
        }

        if (!v55) {
          goto LABEL_30;
        }
        if ((sub_10032D9FC(*(void *)(a1 + 48), v56, v77, v57, v58, v59, v60, v61) & 1) != 0)
        {
          uint64_t v63 = 1LL;
          goto LABEL_31;
        }

        uint64_t v64 = "Error while resuming the firmware logs";
      }

      else
      {
        uint64_t v64 = "Error while pausing the firmware logs";
      }

      sub_10032C51C(v64, v48, v49, v50, v51, v52, v53, v54, v67);
    }

    else
    {
      sub_10032C51C("Error trying to open file: %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)v20);
      uint64_t v9 = a5;
    }

void sub_10035E4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100265748(&a31);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10035E548( uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  if ((char)a3->__r_.__value_.__s.__size_ < 0)
  {
    if (!a3->__r_.__value_.__l.__size_)
    {
LABEL_9:
      sub_10032C51C("reason can't be empty", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v56);
      return 4LL;
    }

    uint64_t v11 = a3->__r_.__value_.__r.__words[0];
  }

  else
  {
    uint64_t v11 = (uint64_t)a3;
    if (!a3->__r_.__value_.__s.__size_) {
      goto LABEL_9;
    }
  }

  sub_10032C3DC("Request to dump logs for reason: %s", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v11);
  uint64_t v12 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(_BYTE *)a1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    return 5LL;
  }

  int v20 = *(_DWORD *)(a1 + 4);
  if (v20 != 1)
  {
    if (v9 && v20 == 2)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      return 2LL;
    }

    if (!v9 && v20 == 2)
    {
      sub_10032C3DC( "Promoting crashlog trigger from NonFatal to Fatal. Cancel the existing timer.",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v57);
      sub_10032C3DC("RoseDebugManager: Suspending the crashlog timer", v22, v23, v24, v25, v26, v27, v28, v58);
      dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
      int v29 = 1;
      *(_BYTE *)(a1 + 1) = 1;
      std::string::operator=((std::string *)(a1 + 24), a3);
LABEL_29:
      sub_10035A58C(a1, v29);
      if (!sub_10032DCA4(*(void *)(a1 + 48), v9 == 0, v35, v36, v37, v38, v39, v40))
      {
        sub_10032C51C("Triggering crashlog failed", v41, v42, v43, v44, v45, v46, v47, v57);
        sub_1000065CC(v59, "Triggering crashlog failed");
        sub_10035ABFC(a1, (uint64_t)a3, 0LL, (uint64_t)v59);
        if (v60 < 0) {
          operator delete(v59[0]);
        }
        sub_10035A58C(a1, 0);
        uint64_t v21 = 1LL;
        goto LABEL_35;
      }

      sub_10032C3DC("Successfully triggered a crashlog. Start timer.", v41, v42, v43, v44, v45, v46, v47, v57);
      sub_10035C390(a1, v48, v49, v50, v51, v52, v53, v54);
LABEL_31:
      uint64_t v21 = 0LL;
LABEL_35:
      os_unfair_lock_unlock(v12);
      return v21;
    }

    if (v9 == 2)
    {
      if ((sub_10035D2D0(a1, 0LL, &v64, &v63, v16, v17, v18, v19) & 1) == 0
        && !sub_10035D2D0(a1, 1LL, &v64, &v63, v31, v32, v33, v34))
      {
        goto LABEL_31;
      }

      sub_1000065CC(__p, "");
      sub_10035ABFC(a1, (uint64_t)a3, 0LL, (uint64_t)__p);
      if ((v62 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v30 = __p[0];
    }

    else
    {
      if (v9 != 3)
      {
        std::string::operator=((std::string *)(a1 + 24), a3);
        if (v9) {
          int v29 = 2;
        }
        else {
          int v29 = 1;
        }
        goto LABEL_29;
      }

      sub_1000065CC(v65, "");
      sub_10035ABFC(a1, (uint64_t)a3, 0LL, (uint64_t)v65);
      if ((v66 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v30 = (void *)v65[0];
    }

    operator delete(v30);
    goto LABEL_31;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return 3LL;
}

void sub_10035E7C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uintmax_t sub_10035E80C(char *a1)
{
  if (__p.__pn_.__r_.__value_.__s.__data_[0] == 2)
  {
    sub_10015B520(&__p.__pn_, a1);
    std::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator( (std::__fs::filesystem::recursive_directory_iterator *)&v19,  &__p,  skip_permission_denied,  0LL);
    __int128 v2 = *(_OWORD *)&v19.__pn_.__r_.__value_.__l.__data_;
    if (v19.__pn_.__r_.__value_.__l.__size_)
    {
      uint64_t v3 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
      size_t size = (std::__shared_weak_count *)v19.__pn_.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v2;
      __p.__pn_.__r_.__value_.__s.__data_[16] = v19.__pn_.__r_.__value_.__s.__data_[16];
      if (v19.__pn_.__r_.__value_.__l.__size_)
      {
        unint64_t v6 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        do
          unint64_t v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }

    else
    {
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v19.__pn_.__r_.__value_.__r.__words[0];
      __p.__pn_.__r_.__value_.__s.__data_[16] = v19.__pn_.__r_.__value_.__s.__data_[16];
    }

    uintmax_t v9 = 0LL;
    while (__p.__pn_.__r_.__value_.__r.__words[0])
    {
      uint64_t v10 = std::__fs::filesystem::recursive_directory_iterator::__dereference((const std::__fs::filesystem::recursive_directory_iterator *)&__p);
      std::__fs::filesystem::__status(&v10->__p_, 0LL);
      if (v20 != 2) {
        v9 += std::__fs::filesystem::__file_size(&v10->__p_, 0LL);
      }
      std::__fs::filesystem::recursive_directory_iterator::__increment( (std::__fs::filesystem::recursive_directory_iterator *)&__p,  0LL);
    }

    uint64_t v11 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
    if (__p.__pn_.__r_.__value_.__l.__size_)
    {
      uint64_t v12 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    uint64_t v14 = (std::__shared_weak_count *)v19.__pn_.__r_.__value_.__l.__size_;
    if (v19.__pn_.__r_.__value_.__l.__size_)
    {
      uint64_t v15 = (unint64_t *)(v19.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  else
  {
    sub_10015B520(&v19.__pn_, a1);
    uintmax_t v9 = std::__fs::filesystem::__file_size(&v19, 0LL);
  }

  return v9;
}

void sub_10035EA70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035EAC8(char *a1)
{
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uintmax_t v2 = sub_10035E80C(a1);
  if ((v2 + 0x200000) >> 26)
  {
    uintmax_t v11 = v2;
    v101[0] = &off_1007BF310;
    uint64_t v102 = v101;
    v100[3] = v100;
    uint64_t v99 = 0LL;
    v100[0] = &off_1007BF310;
    uint64_t v97 = &v98;
    uint64_t v98 = 0LL;
    sub_10015B520(&__dst.__pn_, a1);
    std::__fs::filesystem::directory_iterator::directory_iterator(&v95, &__dst, 0LL, none);
    ptr = v95.__imp_.__ptr_;
    cntrl = v95.__imp_.__cntrl_;
    if (v95.__imp_.__cntrl_)
    {
      p_shared_owners = &v95.__imp_.__cntrl_->__shared_owners_;
      do
        unint64_t v22 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v22 + 1, (unint64_t *)p_shared_owners));
      uint64_t v23 = v95.__imp_.__cntrl_;
      v94.__imp_.__ptr_ = ptr;
      v94.__imp_.__cntrl_ = cntrl;
      if (v95.__imp_.__cntrl_)
      {
        uint64_t v24 = &v95.__imp_.__cntrl_->__shared_owners_;
        do
          unint64_t v25 = __ldxr((unint64_t *)v24);
        while (__stxr(v25 + 1, (unint64_t *)v24));
        uint64_t v92 = 0LL;
        __int128 v93 = 0LL;
        do
          unint64_t v26 = __ldaxr((unint64_t *)v24);
        while (__stlxr(v26 - 1, (unint64_t *)v24));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }

        goto LABEL_17;
      }
    }

    else
    {
      v94.__imp_.__ptr_ = v95.__imp_.__ptr_;
      v94.__imp_.__cntrl_ = 0LL;
    }

    uint64_t v92 = 0LL;
    __int128 v93 = 0LL;
LABEL_17:
    uint64_t v27 = v92;
    while (v94.__imp_.__ptr_ != v27)
    {
      uint64_t v28 = std::__fs::filesystem::directory_iterator::__dereference(&v94);
      v29.__d_.__rep_ = std::__fs::filesystem::__last_write_time(&v28->__p_, &__ec).__d_.__rep_;
      if (__ec.__val_)
      {
        std::error_code::message(&__dst.__pn_, &__ec);
        if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
        }
        sub_10032C51C( "Error: %s while getting the last write time of %s",  v60,  v61,  v62,  v63,  v64,  v65,  v66,  (uint64_t)p_dst);
        uint64_t v68 = v93;
        if (v93)
        {
          uint64_t v69 = (unint64_t *)&v93->__shared_owners_;
          do
            unint64_t v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }

        uint64_t v71 = v94.__imp_.__cntrl_;
        if (v94.__imp_.__cntrl_)
        {
          uint64_t v72 = &v94.__imp_.__cntrl_->__shared_owners_;
          do
            unint64_t v73 = __ldaxr((unint64_t *)v72);
          while (__stlxr(v73 - 1, (unint64_t *)v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }

        char v74 = v95.__imp_.__cntrl_;
        if (v95.__imp_.__cntrl_)
        {
          uint64_t v75 = &v95.__imp_.__cntrl_->__shared_owners_;
          do
            unint64_t v76 = __ldaxr((unint64_t *)v75);
          while (__stlxr(v76 - 1, (unint64_t *)v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }

        goto LABEL_84;
      }

      else {
        std::__fs::filesystem::path __dst = v28->__p_;
      }
      std::chrono::duration<__int128, std::ratio<1, 1000000000>>::rep rep = v29.__d_.__rep_;
      sub_100360C60(&v97, (__int128 *)&__dst, (uint64_t)&__dst);
      std::__fs::filesystem::directory_iterator::__increment(&v94, 0LL);
    }

    uint64_t v30 = v93;
    if (v93)
    {
      uint64_t v31 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    uint64_t v33 = v94.__imp_.__cntrl_;
    if (v94.__imp_.__cntrl_)
    {
      uint64_t v34 = &v94.__imp_.__cntrl_->__shared_owners_;
      do
        unint64_t v35 = __ldaxr((unint64_t *)v34);
      while (__stlxr(v35 - 1, (unint64_t *)v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    uint64_t v36 = v95.__imp_.__cntrl_;
    if (v95.__imp_.__cntrl_)
    {
      uint64_t v37 = &v95.__imp_.__cntrl_->__shared_owners_;
      do
        unint64_t v38 = __ldaxr((unint64_t *)v37);
      while (__stlxr(v38 - 1, (unint64_t *)v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    if (v99)
    {
      uint64_t v39 = v97;
      if (v97 == &v98)
      {
LABEL_57:
        uint64_t v10 = 1LL;
        goto LABEL_85;
      }

      while (1)
      {
        uintmax_t v47 = sub_10035E80C((char *)v39 + 32);
        uint64_t v48 = (uint64_t)(v39 + 4);
        sub_10032C3DC("removing directory: %s of size: %ju", v40, v41, v42, v43, v44, v45, v46, v48);
        sub_10015B520(&__dst.__pn_, (char *)v39 + 32);
        std::__fs::filesystem::__remove_all(&__dst, &__ec);
        if (__ec.__val_) {
          break;
        }
        BOOL v56 = v11 >= v47;
        v11 -= v47;
        if (!v56)
        {
          sub_10032C51C("Error while deleting the oldest directory", v49, v50, v51, v52, v53, v54, v55, v89);
          goto LABEL_84;
        }

        if ((v11 + 0x200000) >> 26)
        {
          uint64_t v57 = (uint64_t *)v39[1];
          if (v57)
          {
            do
            {
              uint64_t v58 = v57;
              uint64_t v57 = (uint64_t *)*v57;
            }

            while (v57);
          }

          else
          {
            do
            {
              uint64_t v58 = (uint64_t *)v39[2];
              BOOL v59 = *v58 == (void)v39;
              uint64_t v39 = v58;
            }

            while (!v59);
          }

          uint64_t v39 = v58;
          if (v58 != &v98) {
            continue;
          }
        }

        goto LABEL_57;
      }

      std::error_code::message(&__dst.__pn_, &__ec);
      if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v84 = &__dst;
      }
      else {
        uint64_t v84 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      }
      sub_10032C51C("Error: %s while deleting the directory: %s", v77, v78, v79, v80, v81, v82, v83, (uint64_t)v84);
    }

    else
    {
      sub_10032C51C("Unable to iterate through the directory", v12, v13, v14, v15, v16, v17, v18, v88);
    }

void sub_10035EFF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  uint64_t v30 = *(void **)(v28 - 80);
  if (v30 == (void *)(v28 - 104))
  {
    uint64_t v31 = 4LL;
    uint64_t v30 = (void *)(v28 - 104);
  }

  else
  {
    if (!v30) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10035F0C0(unsigned __int8 *a1)
{
  *a1 = 0;
  sub_100360074(a1);
  sub_100360074(a1);
  return a1;
}

uint64_t sub_10035F0F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, std::stringbuf::string_type *a3@<X8>)
{
  sub_10035F254(a1, &v9, a2 >= 0, a2 & ~(a2 >> 31), 0LL);
  std::stringbuf::str(a3, &v10);
  *(void *)((char *)v8
  uint64_t v9 = v6;
  std::streambuf::~streambuf(&v10);
  return std::ios::~ios(&v11);
}

void sub_10035F1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10035F1D8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007BF390[a1]);
}

std::runtime_error *sub_10035F1EC(std::runtime_error *a1, uint64_t a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[2].__imp_.__imp_ = (const char *)v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

void sub_10035F254(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(*(_BYTE *)a1)
  {
    case 0:
      sub_100046B94(a2, (uint64_t)"null", 4LL);
      break;
    case 1:
      if (!*(void *)(*(void *)(a1 + 8) + 16LL))
      {
        uint64_t v46 = "{}";
        goto LABEL_112;
      }

      sub_100046B94(a2, (uint64_t)"{", 1LL);
      if ((_DWORD)a3)
      {
        a5 = (a5 + a4);
        sub_100046B94(a2, (uint64_t)"\n", 1LL);
      }

      std::stringbuf v10 = *(void **)(a1 + 8);
      uint64_t v11 = (void *)*v10;
      if ((void *)*v10 != v10 + 1)
      {
        if ((_DWORD)a3) {
          uint64_t v12 = ",\n";
        }
        else {
          uint64_t v12 = ",";
        }
        uint64_t v13 = 1LL;
        if ((_DWORD)a3) {
          uint64_t v13 = 2LL;
        }
        uint64_t v55 = v13;
        uint64_t v56 = (uint64_t)v12;
        if ((_DWORD)a3) {
          uint64_t v14 = " ";
        }
        else {
          uint64_t v14 = "";
        }
        do
        {
          if (v11 != (void *)*v10) {
            sub_100046B94(a2, v56, v55);
          }
          sub_100046E34(__b, a5, 32);
          if ((SBYTE7(v59) & 0x80u) == 0) {
            uint64_t v15 = __b;
          }
          else {
            uint64_t v15 = (void **)__b[0];
          }
          if ((SBYTE7(v59) & 0x80u) == 0) {
            uint64_t v16 = BYTE7(v59);
          }
          else {
            uint64_t v16 = (uint64_t)__b[1];
          }
          uint64_t v17 = sub_100046B94(a2, (uint64_t)v15, v16);
          uint64_t v18 = sub_100046B94(v17, (uint64_t)"", 1LL);
          sub_10035F964((uint64_t)(v11 + 4), (uint64_t *)&__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t size = __p.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t size = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v21 = sub_100046B94(v18, (uint64_t)p_p, size);
          unint64_t v22 = sub_100046B94(v21, (uint64_t)":", 2LL);
          sub_100046B94(v22, (uint64_t)v14, a3);
          if (SBYTE7(v59) < 0) {
            operator delete(__b[0]);
          }
          sub_10035F254(v11 + 7, a2, a3, a4, a5);
          uint64_t v23 = (void *)v11[1];
          if (v23)
          {
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = (void *)*v23;
            }

            while (v23);
          }

          else
          {
            do
            {
              uint64_t v24 = (void *)v11[2];
              BOOL v25 = *v24 == (void)v11;
              uint64_t v11 = v24;
            }

            while (!v25);
          }

          std::stringbuf v10 = *(void **)(a1 + 8);
          uint64_t v11 = v24;
        }

        while (v24 != v10 + 1);
      }

      if ((a3 & 1) != 0)
      {
        sub_100046B94(a2, (uint64_t)"\n", 1LL);
        LODWORD(a5) = a5 - a4;
      }

      sub_100046E34(&__p, a5, 32);
      unint64_t v26 = std::string::append(&__p, "}");
      __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      *(void *)&__int128 v59 = v26->__r_.__value_.__l.__cap_;
      *(_OWORD *)__b = v27;
      v26->__r_.__value_.__l.__size_ = 0LL;
      v26->__r_.__value_.__l.__cap_ = 0LL;
      v26->__r_.__value_.__r.__words[0] = 0LL;
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v28 = __b;
      }
      else {
        uint64_t v28 = (void **)__b[0];
      }
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v29 = BYTE7(v59);
      }
      else {
        uint64_t v29 = (uint64_t)__b[1];
      }
      sub_100046B94(a2, (uint64_t)v28, v29);
      if (SBYTE7(v59) < 0) {
        operator delete(__b[0]);
      }
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v30 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_97;
      }

      break;
    case 2:
      if (**(void **)(a1 + 8) != *(void *)(*(void *)(a1 + 8) + 8LL))
      {
        sub_100046B94(a2, (uint64_t)"[", 1LL);
        if ((_DWORD)a3)
        {
          a5 = (a5 + a4);
          sub_100046B94(a2, (uint64_t)"\n", 1LL);
        }

        uint64_t v31 = *(uint64_t **)(a1 + 8);
        uint64_t v32 = *v31;
        if (*v31 != v31[1])
        {
          if ((_DWORD)a3) {
            uint64_t v33 = ",\n";
          }
          else {
            uint64_t v33 = ",";
          }
          if ((_DWORD)a3) {
            uint64_t v34 = 2LL;
          }
          else {
            uint64_t v34 = 1LL;
          }
          do
          {
            if (v32 != *v31) {
              sub_100046B94(a2, (uint64_t)v33, v34);
            }
            sub_100046E34(__b, a5, 32);
            if ((SBYTE7(v59) & 0x80u) == 0) {
              unint64_t v35 = __b;
            }
            else {
              unint64_t v35 = (void **)__b[0];
            }
            if ((SBYTE7(v59) & 0x80u) == 0) {
              uint64_t v36 = BYTE7(v59);
            }
            else {
              uint64_t v36 = (uint64_t)__b[1];
            }
            sub_100046B94(a2, (uint64_t)v35, v36);
            if (SBYTE7(v59) < 0) {
              operator delete(__b[0]);
            }
            sub_10035F254(v32, a2, a3, a4, a5);
            v32 += 16LL;
            uint64_t v31 = *(uint64_t **)(a1 + 8);
          }

          while (v32 != v31[1]);
        }

        if ((a3 & 1) != 0)
        {
          sub_100046B94(a2, (uint64_t)"\n", 1LL);
          LODWORD(a5) = a5 - a4;
        }

        sub_100046E34(__b, a5, 32);
        if ((SBYTE7(v59) & 0x80u) == 0) {
          uint64_t v37 = __b;
        }
        else {
          uint64_t v37 = (void **)__b[0];
        }
        if ((SBYTE7(v59) & 0x80u) == 0) {
          uint64_t v38 = BYTE7(v59);
        }
        else {
          uint64_t v38 = (uint64_t)__b[1];
        }
        uint64_t v39 = sub_100046B94(a2, (uint64_t)v37, v38);
        sub_100046B94(v39, (uint64_t)"]", 1LL);
        goto LABEL_95;
      }

      uint64_t v46 = "[]";
LABEL_112:
      uint64_t v48 = a2;
      uint64_t v47 = 2LL;
      goto LABEL_113;
    case 3:
      sub_1000065CC(__b, "");
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v40 = __b;
      }
      else {
        uint64_t v40 = (void **)__b[0];
      }
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v41 = BYTE7(v59);
      }
      else {
        uint64_t v41 = (uint64_t)__b[1];
      }
      uint64_t v42 = sub_100046B94(a2, (uint64_t)v40, v41);
      sub_10035F964(*(void *)(a1 + 8), (uint64_t *)&__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v43 = &__p;
      }
      else {
        uint64_t v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v44 = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v44 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = sub_100046B94(v42, (uint64_t)v43, v44);
      sub_100046B94(v45, (uint64_t)"", 1LL);
LABEL_95:
      if (SBYTE7(v59) < 0)
      {
        uint64_t v30 = __b[0];
LABEL_97:
        operator delete(v30);
      }

      break;
    case 4:
      if (*(_BYTE *)(a1 + 8)) {
        uint64_t v46 = "true";
      }
      else {
        uint64_t v46 = "false";
      }
      if (*(_BYTE *)(a1 + 8)) {
        uint64_t v47 = 4LL;
      }
      else {
        uint64_t v47 = 5LL;
      }
      uint64_t v48 = a2;
LABEL_113:
      sub_100046B94(v48, (uint64_t)v46, v47);
      break;
    case 5:
      uint64_t v49 = *(void *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      sub_10035FC44(__b, v49);
      size_t v50 = strlen((const char *)__b);
      sub_100046B94(a2, (uint64_t)__b, v50);
      break;
    case 6:
      unint64_t v51 = *(void *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      sub_10035FD10(__b, v51);
      size_t v52 = strlen((const char *)__b);
      sub_100046B94(a2, (uint64_t)__b, v52);
      break;
    case 7:
      double v53 = *(double *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      sub_10035FDA8((char *)__b, v53);
      size_t v54 = strlen((const char *)__b);
      sub_100046B94(a2, (uint64_t)__b, v54);
      break;
    case 8:
      sub_100046B94(a2, (uint64_t)"<discarded>", 11LL);
      break;
    default:
      return;
  }

void sub_10035F8E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035F964@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10035FBA8((uint64_t *)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if (result)
  {
    if ((v5 & 0x80u) != 0LL) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    uint64_t result = (uint64_t)sub_100046E34(a2, v5 + result, 92);
    int v6 = *(char *)(a1 + 23);
    BOOL v7 = v6 < 0;
    if (v6 >= 0) {
      uint64_t v8 = (_BYTE *)a1;
    }
    else {
      uint64_t v8 = *(_BYTE **)a1;
    }
    if (v7) {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    if (v9)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = &v8[v9];
      uint64_t result = 110LL;
      while (2)
      {
        int v12 = (char)*v8;
        switch(*v8)
        {
          case 8:
            else {
              uint64_t v13 = (uint64_t *)*a2;
            }
            *((_BYTE *)v13 + v10 + 1) = 98;
            goto LABEL_46;
          case 9:
            else {
              uint64_t v18 = (uint64_t *)*a2;
            }
            *((_BYTE *)v18 + v10 + 1) = 116;
            goto LABEL_46;
          case 0xA:
            else {
              std::__fs::filesystem::path v19 = (uint64_t *)*a2;
            }
            *((_BYTE *)v19 + v10 + 1) = 110;
            goto LABEL_46;
          case 0xB:
            goto LABEL_23;
          case 0xC:
            else {
              char v20 = (uint64_t *)*a2;
            }
            *((_BYTE *)v20 + v10 + 1) = 102;
            goto LABEL_46;
          case 0xD:
            else {
              uint64_t v21 = (uint64_t *)*a2;
            }
            *((_BYTE *)v21 + v10 + 1) = 114;
            goto LABEL_46;
          default:
            if (v12 == 92) {
              goto LABEL_46;
            }
            if (v12 == 34)
            {
              else {
                uint64_t v14 = (uint64_t *)*a2;
              }
              *((_BYTE *)v14 + v10 + 1) = 34;
LABEL_46:
              v10 += 2LL;
            }

            else
            {
LABEL_23:
              if (*v8 > 0x1Fu)
              {
                else {
                  unint64_t v22 = (uint64_t *)*a2;
                }
                *((_BYTE *)v22 + v10) = *v8;
              }

              else
              {
                uint64_t v15 = 0LL;
                unint64_t v16 = *v8;
                qmemcpy(v23, "u00", sizeof(v23));
                char v24 = a0123456789abcd[v16 >> 4];
                char v25 = a0123456789abcd[v16 & 0xF];
                do
                {
                  else {
                    uint64_t v17 = (uint64_t *)*a2;
                  }
                  *((_BYTE *)v17 + v10 + v15 + 1) = v23[v15];
                  ++v15;
                }

                while (v15 != 5);
                v10 += 5LL;
              }

              ++v10;
            }

            if (++v8 == v11) {
              return result;
            }
            continue;
        }
      }
    }
  }

  else if ((v5 & 0x80) != 0)
  {
    return (uint64_t)sub_1000063A8(a2, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(void *)(a1 + 16);
  }

  return result;
}

uint64_t sub_10035FBA8(uint64_t *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  uint64_t v2 = a1[1];
  if ((v1 & 0x80u) != 0LL)
  {
    a1 = (uint64_t *)*a1;
    uint64_t v1 = v2;
  }

  return sub_10035FBE0(a1, (_BYTE *)a1 + v1, 0LL);
}

uint64_t sub_10035FBE0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  for (; a1 != a2; ++a1)
  {
    unsigned int v3 = (char)*a1;
    BOOL v4 = v3 > 0x22 || ((1LL << *a1) & 0x400003700LL) == 0;
    if (!v4 || v3 == 92)
    {
      ++a3;
    }

    else if (*a1 < 0x20u)
    {
      a3 += 5LL;
    }
  }

  return a3;
}

_BYTE *sub_10035FC44(_BYTE *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = a2;
    do
    {
      if (v2 == 63) {
        sub_1003ADBB0();
      }
      uint64_t v4 = v3 % 10;
      if (v3 % 10 < 0) {
        LOBYTE(v4) = 10 * (v3 / 10) - v3;
      }
      char v5 = v4 + 48;
      uint64_t v6 = v2 + 1;
      result[v2] = v5;
      unint64_t v7 = v3 + 9;
      v3 /= 10LL;
      ++v2;
    }

    while (v7 >= 0x13);
    if (a2 < 0)
    {
      result[v6++] = 45;
    }

    uint64_t v8 = &result[v6 - 1];
    if (v8 > result)
    {
      uint64_t v9 = result + 1;
      do
      {
        char v10 = *(v9 - 1);
        *(v9 - 1) = *v8;
        *v8-- = v10;
      }

      while (v9++ < v8);
    }
  }

  else
  {
    *uint64_t result = 48;
  }

  return result;
}

_BYTE *sub_10035FD10(_BYTE *result, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0LL;
    do
    {
      if (v2 == 63) {
        sub_1003ADBB0();
      }
      uint64_t v3 = v2 + 1;
      result[v2++] = (a2 % 0xA) | 0x30;
      BOOL v4 = a2 >= 0xA;
      a2 /= 0xAuLL;
    }

    while (v4);
    char v5 = &result[v3 - 1];
    if (v5 > result)
    {
      uint64_t v6 = result + 1;
      do
      {
        char v7 = *(v6 - 1);
        *(v6 - 1) = *v5;
        *v5-- = v7;
        BOOL v4 = v6++ >= v5;
      }

      while (!v4);
    }
  }

  else
  {
    *uint64_t result = 48;
  }

  return result;
}

void sub_10035FDA8(char *__str, double a2)
{
  if (a2 == 0.0)
  {
    if ((*(void *)&a2 & 0x8000000000000000LL) != 0)
    {
      *std::string __str = 45;
      uint64_t v3 = 1LL;
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    uint64_t v9 = &__str[v3];
    *(_WORD *)uint64_t v9 = 11824;
    v9[2] = 48;
    return;
  }

  int v4 = snprintf(__str, 0x40uLL, "%.*g", 15, a2);
  if (v4 <= 0) {
    sub_1003ADC00();
  }
  int v5 = v4;
  uint64_t v6 = localeconv();
  if (!v6) {
    sub_1003ADC28();
  }
  thousands_sep = v6->thousands_sep;
  if (thousands_sep) {
    LODWORD(thousands_sep) = *thousands_sep;
  }
  unsigned __int8 v16 = thousands_sep;
  if (!v6->decimal_point)
  {
    int v8 = 0;
    if (!(_DWORD)thousands_sep) {
      goto LABEL_18;
    }
LABEL_16:
    char v10 = sub_10035FF84(__str, (unsigned __int8 *)&__str[v5], &v16);
    int64_t v11 = __str - (char *)v10 + 64;
    if (v11 >= 1) {
      bzero(v10, v11);
    }
    goto LABEL_18;
  }

  int v8 = *v6->decimal_point;
  if ((_DWORD)thousands_sep) {
    goto LABEL_16;
  }
LABEL_18:
  if (v8 && v8 != 46)
  {
    uint64_t v12 = 0LL;
    while (v8 != __str[v12])
    {
      if (++v12 == 64) {
        goto LABEL_25;
      }
    }

    __str[v12] = 46;
  }

unsigned __int8 *sub_10035FF84(const void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }

    while (v6 != a2);
  }

  return result;
}

unsigned __int8 *sub_10035FFE8(unsigned __int8 *a1)
{
  int v2 = *a1;
  switch(v2)
  {
    case 3:
      uint64_t v3 = (char *)*((void *)a1 + 1);
      if ((v3[23] & 0x80000000) == 0)
      {
LABEL_9:
        operator delete(v3);
        return a1;
      }

      operator delete(*(void **)v3);
LABEL_8:
      uint64_t v3 = (char *)*((void *)a1 + 1);
      goto LABEL_9;
    case 2:
      int v5 = (void **)*((void *)a1 + 1);
      sub_100360158(&v5);
      goto LABEL_8;
    case 1:
      sub_1003600C4(*((void *)a1 + 1), *(char **)(*((void *)a1 + 1) + 8LL));
      goto LABEL_8;
  }

  return a1;
}

unsigned __int8 *sub_100360074(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 == 3)
  {
    if (!*((void *)result + 1)) {
      sub_1003ADD40();
    }
  }

  else if (v1 == 2)
  {
    if (!*((void *)result + 1)) {
      sub_1003ADD18();
    }
  }

  else if (v1 == 1 && !*((void *)result + 1))
  {
    sub_1003ADCF0();
  }

  return result;
}

void sub_1003600C4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1003600C4(a1, *(void *)a2);
    sub_1003600C4(a1, *((void *)a2 + 1));
    sub_10035FFE8(a2 + 56);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void sub_10036011C(uint64_t a1, uint64_t a2)
{
}

void sub_100360158(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10035FFE8(v4 - 16);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1003601C8(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_100360244((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_10036022C(_Unwind_Exception *a1)
{
}

uint64_t *sub_100360244(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1001E10B4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1003602C4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10001E548(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

void *sub_1003602C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(void *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_1000063A8(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }

  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100360350(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1002022F0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_10036036C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  char v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int64_t v11 = operator new(0x40uLL);
    __int16 v11[8] = **a4;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 5) = 0LL;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

__n128 sub_100360438(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &off_1007BF0E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100360478(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF0E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_1003604A0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_1003604C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003604FC()
{
}

__n128 sub_100360510(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007BF1A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100360550(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF1A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_100360578(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_100360598(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003605D4()
{
}

__n128 sub_1003605E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007BF268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100360628(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_100360650(void *a1, unsigned int *a2, void *a3, void *a4)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t (*)(void *, void, void, void))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0) {
    uint64_t v5 = *(uint64_t (**)(void *, void, void, void))(*v6 + v5);
  }
  return v5(v6, *a2, *a3, *a4);
}

uint64_t sub_100360678(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1003606B4()
{
}

void *sub_1003606C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_10001D350();
  }
  return operator new(20 * a2);
}

void *sub_100360704@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  if (v4 > 8) {
    uint64_t v5 = "number";
  }
  else {
    uint64_t v5 = off_1007BF3B0[v4];
  }
  return sub_1000065CC(a2, v5);
}

void *sub_100360734(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_10001E444((uint64_t)a1, &v12, a2);
  char v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    char v7 = operator new(0x48uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = **a4;
    *((void *)v7 + 6) = v10;
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    v9[2] = 0LL;
    sub_10035F0C0((unsigned __int8 *)v7 + 56);
    sub_10001E548(a1, v12, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_1003607D4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_10036011C(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_10036081C(uint64_t a1, char **a2)
{
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = sub_100360894((uint64_t)__p);
  sub_100360074((unsigned __int8 *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100360878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100360894(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000063A8(v2, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
    v2[2] = *(void *)(a1 + 16);
  }

  return v3;
}

void sub_1003608E8(_Unwind_Exception *a1)
{
}

void *sub_1003608FC(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10011B690(a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }

  return a1;
}

void sub_100360980(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10036099C(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100360A3C(a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }

  return a1;
}

void sub_100360A20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100360A3C(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_10001E11C();
  }
  __n128 result = (char *)sub_10022F3F4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_100360A90(uint64_t a1, char *a2)
{
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = sub_100360894((uint64_t)__p);
  sub_100360074((unsigned __int8 *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100360AE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100360B0C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_1007BF310;
  return result;
}

void sub_100360B30(uint64_t a1, void *a2)
{
  *a2 = &off_1007BF310;
}

BOOL sub_100360B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  int v4 = *(char *)(a2 + 23);
  *(void *)(a2 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  unint64_t v6 = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  char v7 = *(void **)a3;
  int v8 = *(char *)(a3 + 23);
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = 0LL;
  unint64_t v10 = *(void *)(a3 + 32);
  unint64_t v9 = *(void *)(a3 + 40);
  if (v8 < 0)
  {
    operator delete(v7);
    if ((v4 & 0x80000000) == 0) {
      return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
    }
LABEL_5:
    operator delete(v3);
    return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
  }

  if (v4 < 0) {
    goto LABEL_5;
  }
  return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
}

uint64_t sub_100360BC0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100360BFC()
{
}

uint64_t sub_100360C08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 == (void *)(a1 + 24))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 24);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *sub_100360C60(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)sub_100360CDC((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    sub_100360F64((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10001E548(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

uint64_t *sub_100360CDC(uint64_t a1, void *a2, __int128 *a3)
{
  int v4 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    char v7 = a3 + 2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v3;
        if (*((char *)a3 + 23) < 0)
        {
          sub_1000063A8(&__dst, *(void **)a3, *((void *)a3 + 1));
        }

        else
        {
          __int128 __dst = *a3;
          uint64_t v26 = *((void *)a3 + 2);
        }

        __int128 v27 = *v7;
        unint64_t v9 = v8 + 4;
        if (*((char *)v8 + 55) < 0)
        {
          sub_1000063A8(__p, (void *)v8[4], v8[5]);
        }

        else
        {
          *(_OWORD *)std::string __p = *v9;
          uint64_t v23 = v8[6];
        }

        __int128 v24 = *((_OWORD *)v8 + 4);
        uint64_t v10 = *(void *)(a1 + 48);
        if (!v10) {
          sub_10001EEF0();
        }
        int v11 = (*(uint64_t (**)(uint64_t, __int128 *, void **))(*(void *)v10 + 48LL))(v10, &__dst, __p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        if ((SHIBYTE(v26) & 0x80000000) == 0) {
          break;
        }
        operator delete((void *)__dst);
        if (v11) {
          goto LABEL_14;
        }
LABEL_17:
        if (*((char *)v8 + 55) < 0)
        {
          sub_1000063A8(v19, (void *)v8[4], v8[5]);
        }

        else
        {
          *(_OWORD *)std::__fs::filesystem::path v19 = *v9;
          uint64_t v20 = v8[6];
        }

        __int128 v21 = *((_OWORD *)v8 + 4);
        if (*((char *)a3 + 23) < 0)
        {
          sub_1000063A8(v16, *(void **)a3, *((void *)a3 + 1));
        }

        else
        {
          *(_OWORD *)unsigned __int8 v16 = *a3;
          uint64_t v17 = *((void *)a3 + 2);
        }

        __int128 v18 = *v7;
        uint64_t v12 = *(void *)(a1 + 48);
        if (!v12) {
          sub_10001EEF0();
        }
        int v13 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)v12 + 48LL))(v12, v19, v16);
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[0]);
        }
        if (v13)
        {
          int v4 = v8 + 1;
          uint64_t v3 = (uint64_t *)v8[1];
          if (v3) {
            continue;
          }
        }

        goto LABEL_32;
      }

      if (!v11) {
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v3 = (uint64_t *)*v8;
      int v4 = v8;
      if (!*v8) {
        goto LABEL_32;
      }
    }
  }

  uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_32:
  *a2 = v8;
  return v4;
}

void sub_100360EF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100360F64@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (__n128 *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  char v7 = v6 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000063A8(v7, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *char v7 = *(__n128 *)a2;
    v6[3].n128_u64[0] = *(void *)(a2 + 16);
  }

  __n128 result = *(__n128 *)(a2 + 32);
  v6[4] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100360FEC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1001AE0A4(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_100361008(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001E0CC(a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }

  return a1;
}

void sub_100361094( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1003610A8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  sub_100360074((unsigned __int8 *)a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      int v4 = sub_100361144(*(const void ****)(a2 + 8));
      goto LABEL_7;
    case 2:
      int v4 = sub_1003613D8(*(uint64_t **)(a2 + 8));
      goto LABEL_7;
    case 3:
      int v4 = sub_100360894(*(void *)(a2 + 8));
      goto LABEL_7;
    case 4:
      int v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_7;
    case 5:
    case 6:
    case 7:
      int v4 = *(uint64_t **)(a2 + 8);
LABEL_7:
      *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v4;
      break;
    default:
      break;
  }

  sub_100360074((unsigned __int8 *)a1);
  return a1;
}

uint64_t *sub_100361144(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  sub_10036118C(v2, a1);
  return v2;
}

void sub_100361178(_Unwind_Exception *a1)
{
}

uint64_t *sub_10036118C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1003611E0(a1, *a2, a2 + 1);
  return a1;
}

void sub_1003611C8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003611E0(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    size_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_100361264(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      char v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          char v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }

        while (!v9);
      }

      int v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100361264(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  unint64_t v6 = (uint64_t **)sub_1002025F4(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_1003612E4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10001E548(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

char *sub_1003612E4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __n128 result = sub_100361364(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100361348(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1003607D4(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_100361364(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_1003610A8(__dst + 24, (char *)a2 + 24);
  return __dst;
}

void sub_1003613BC(_Unwind_Exception *exception_object)
{
}

void *sub_1003613D8(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  *uint64_t v2 = 0LL;
  sub_100361430(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_10036141C(_Unwind_Exception *a1)
{
}

void *sub_100361430(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1001205C0(result, a4);
    __n128 result = (void *)sub_1003614B4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100361494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v1, v2 + 8) = v10;
  sub_100360158(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003614B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      sub_1003610A8(a4 + v7, a2 + v7);
      v7 += 16LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_100361510(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_10035FFE8((unsigned __int8 *)(v4 + v2));
      v2 -= 16LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100361534( void *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v9 = a3;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 v11 = *(_OWORD *)a2;
    __dst[2] = *(void *)(a2 + 16);
    *(_OWORD *)__int128 __dst = v11;
  }

  *((_DWORD *)__dst + 6) = 0;
  __dst[4] = 0LL;
  if (v8 && (sub_100361704((uint64_t)__dst, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    sub_1003617A4((uint64_t)__dst, v12, v13, v14, v15, v16, v17, v18);
    sub_10032C6B0("Unable to create an OS transaction", v19, v20, v21, v22, v23, v24, v25, v27);
  }

  return __dst;
}

void sub_1003615D8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003615F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  int v9 = (IOPMAssertionID *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
  {
    sub_10032C3DC( "power assertion (%u) is already taken for %s",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  *(unsigned int *)(a1 + 24));
    return 1LL;
  }

  __int128 v11 = (const char *)a1;
  uint64_t v12 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
  if (v12)
  {
    uint64_t v20 = v12;
    IOReturn v21 = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v12, v9);
    CFRelease(v20);
    if (!v21)
    {
      sub_10032C3DC( "Successfully taken powerAssertionId (%u) for %s",  v22,  v23,  v24,  v25,  v26,  v27,  v28,  *(unsigned int *)(v8 + 24));
      return 1LL;
    }

    sub_10032C51C("Failed to take powerAssertionId for %s, return value: 0x%x", v22, v23, v24, v25, v26, v27, v28, v8);
  }

  else
  {
    sub_10032C51C("Failed to create CFString for %s", v13, v14, v15, v16, v17, v18, v19, v8);
  }

  return 0LL;
}

uint64_t sub_100361704( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  int v9 = *(char *)(a1 + 23);
  if (*(void *)(a1 + 32))
  {
    if (v9 < 0) {
      uint64_t v8 = *(void *)a1;
    }
    sub_10032C3DC("os transaction ID already created for %s", a2, a3, a4, a5, a6, a7, a8, v8);
    return 1LL;
  }

  if (v9 < 0) {
    a1 = *(void *)a1;
  }
  uint64_t v10 = os_transaction_create(a1);
  *(void *)(v8 + 32) = v10;
  int v18 = *(char *)(v8 + 23);
  if (v10)
  {
    if (v18 < 0) {
      uint64_t v8 = *(void *)v8;
    }
    sub_10032C3DC("Successfully created os transaction for %s", v11, v12, v13, v14, v15, v16, v17, v8);
    return 1LL;
  }

  if (v18 < 0) {
    uint64_t v8 = *(void *)v8;
  }
  sub_10032C51C("Failed to create os transaction for %s", v11, v12, v13, v14, v15, v16, v17, v8);
  return 0LL;
}

uint64_t sub_1003617A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  IOPMAssertionID v9 = *(_DWORD *)(a1 + 24);
  if (v9)
  {
    if (IOPMAssertionRelease(v9))
    {
      sub_10032C51C( "Failed to release powerAssertionId (%u) for %s, return value: 0x%x",  v10,  v11,  v12,  v13,  v14,  v15,  v16,  *(unsigned int *)(v8 + 24));
      return 0LL;
    }

    sub_10032C3DC( "Successfully released powerAssertionId (%u) for %s",  v10,  v11,  v12,  v13,  v14,  v15,  v16,  *(unsigned int *)(v8 + 24));
    *(_DWORD *)(v8 + 24) = 0;
  }

  else
  {
    sub_10032C3DC("power assertion ID is already null for %s", a2, a3, a4, a5, a6, a7, a8, v8);
  }

  return 1LL;
}

uint64_t sub_10036184C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = sub_1003617A4(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1003618A0(a1, v10, v11, v12, v13, v14, v15, v16);
  if ((v9 & 1) == 0) {
    sub_10032C6B0("Unable to release a power assertion", v17, v18, v19, v20, v21, v22, v23, v25);
  }
  return a1;
}

uint64_t sub_1003618A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  char v9 = *(void **)(a1 + 32);
  if (v9)
  {
    os_release(v9);
    *(void *)(v8 + 32) = 0LL;
    sub_10032C3DC("Successfully released os transaction for %s", v10, v11, v12, v13, v14, v15, v16, v8);
  }

  else
  {
    sub_10032C3DC("os transaction ID is already null for %s", a2, a3, a4, a5, a6, a7, a8, v8);
  }

  return 1LL;
}

unint64_t sub_100361914(unsigned int a1)
{
  return ((unint64_t)((a1 >> 17) & 3) << 32) | ((unint64_t)(HIWORD(a1) & 1) << 40) | ((unint64_t)(a1 & 0x3FF) << 16) | (((a1 >> 10) & 0xFLL) << 8) | ((unsigned __int16)a1 >> 14);
}

uint64_t sub_10036193C(unsigned int **a1)
{
  if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100325794(exception, "packet too short to contain a 4-byte header");
  }

  return **a1;
}

void sub_100361998(_Unwind_Exception *a1)
{
}

_BYTE *sub_1003619AC(char *__src, size_t __len, _BYTE *__dst, int a4)
{
  uint64_t v4 = __dst;
  size_t v5 = __len;
  if (a4 == 1)
  {
    if (__len) {
      memmove(__dst, __src, __len);
    }
    v4 += v5;
  }

  else if (__len)
  {
    do
      *v4++ = __src[--v5];
    while (v5);
  }

  return v4;
}

void sub_100361A0C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v5 = v4 - *(void *)a1;
  if (v5 > 0x30)
  {
    if (v5 >= 0x89)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_100325794(exception, "logical packet too long to split into multiple physical packets");
    }

    int v8 = sub_10036193C((unsigned int **)a1);
    a2[1] = 0LL;
    a2[2] = 0LL;
    *a2 = 0LL;
    int v9 = *(_DWORD *)(a1 + 8) - *(void *)a1 - 4;
    if (*(_BYTE *)(a1 + 8) - *(void *)a1 != 4)
    {
      int v10 = v8;
      uint64_t v11 = (char *)(*(void *)a1 + 4LL);
      do
      {
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
        else {
          size_t v14 = v9;
        }
        LOBYTE(v20) = 0;
        sub_10016C2CC(&__p, v14 + 4, &v20);
        else {
          int v15 = 196608;
        }
        if (v12 == v13) {
          int v15 = 0x10000;
        }
        uint64_t v16 = (char *)__p;
        *(_DWORD *)std::string __p = v10 | v15;
        memmove(v16 + 4, v11, v14);
        uint64_t v17 = (void *)a2[1];
        if ((unint64_t)v17 >= a2[2])
        {
          uint64_t v18 = sub_100361FBC(a2, (uint64_t)&__p);
        }

        else
        {
          *uint64_t v17 = 0LL;
          v17[1] = 0LL;
          void v17[2] = 0LL;
          sub_1001309C0(v17, __p, (uint64_t)v23, v23 - (_BYTE *)__p);
          uint64_t v18 = (uint64_t)(v17 + 3);
          a2[1] = (uint64_t)(v17 + 3);
        }

        a2[1] = v18;
        if (__p)
        {
          uint64_t v23 = __p;
          operator delete(__p);
        }

        v11 += v14;
        LOBYTE(v9) = v9 - v14;
      }

      while ((_BYTE)v9);
    }
  }

  else
  {
    std::string __p = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    sub_1001309C0(&__p, v3, v4, v5);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    uint64_t v20 = a2;
    char v21 = 0;
    unint64_t v6 = operator new(0x18uLL);
    *a2 = (uint64_t)v6;
    a2[1] = (uint64_t)v6;
    a2[2] = (uint64_t)(v6 + 3);
    a2[1] = (uint64_t)sub_100361F10((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v25, v6);
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
  }

void sub_100361C18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
}

uint64_t sub_100361C98@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, std::stringbuf::string_type *a6@<X8>)
{
  int v11 = *(char *)(a1 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)a1;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 8);
  }
  sub_100046B94(&v23, v12, v13);
  char v22 = 48;
  size_t v14 = sub_100138E6C(&v23, &v22);
  *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24LL) + std::ostream::~ostream(v1, v2 + 8) = *(_DWORD *)((_BYTE *)v14 + *(void *)(*v14 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  if (a3)
  {
    unint64_t v15 = 0LL;
    do
    {
      *(std::streambuf::char_type **)((char *)&v24.__binp_ + *(void *)(v23 - 24)) = (std::streambuf::char_type *)2;
      uint64_t v16 = (void *)std::ostream::operator<<(&v23, *(unsigned __int8 *)(a2 + v15));
      sub_100046B94(v16, (uint64_t)" ", 1LL);
      if (v15 % a4 == a4 - 1LL) {
        sub_100046B94(&v23, (uint64_t)"\n", 1LL);
      }
      ++v15;
    }

    while (a3 != v15);
  }

  if (a3 % a4) {
    sub_100046B94(&v23, (uint64_t)"\n", 1LL);
  }
  int v17 = *(char *)(a5 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a5;
  }
  else {
    uint64_t v18 = *(void *)a5;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a5 + 8);
  }
  sub_100046B94(&v23, v18, v19);
  std::stringbuf::str(a6, &v24);
  std::streambuf::~streambuf(&v24);
  return std::ios::~ios(&v25);
}

void sub_100361E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100361E98(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10032C124("%s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)p_p);
}

void sub_100361EF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100361F10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      sub_1001309C0(v4, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_1002BAC18((uint64_t)v8);
  return v4;
}

void sub_100361FA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100361FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10001E11C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10001E130(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_1001309C0(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  sub_1002BAC98(a1, v14);
  uint64_t v12 = a1[1];
  sub_100129C30((uint64_t)v14);
  return v12;
}

void sub_1003620B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003620CC(char *a1, _DWORD *__dst)
{
  __dst[8] = 0;
  *(_OWORD *)__int128 __dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  int __src = 0x4000;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 0x20uLL, v4, 1);
  if (__dst + 9 >= (_DWORD *)v5)
  {
    if (__dst + 9 > (_DWORD *)v5) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildHelloCommandPacket");
    }
    if (*((_BYTE *)__dst + 35))
    {
      sub_10032C3DC( "%s: software version string was overrun.",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildHelloCommandPacket");
      uint64_t result = 0LL;
      *((_BYTE *)__dst + 35) = 0;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildHelloCommandPacket");
    return 1LL;
  }

  return result;
}

uint64_t sub_1003621A0( uint64_t a1, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if (v8 >= 0x11)
  {
    uint64_t v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_10032C51C(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v27);
    return 1LL;
  }

  if (v8 <= 3)
  {
    uint64_t v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }

  a2[1] = *a2;
  char v30 = 0;
  sub_1001C9BC8(a2, v8 + 24, &v30);
  uint64_t v12 = (_BYTE *)*a2;
  int __src = 16385;
  uint64_t v13 = sub_1003619AC((char *)&__src, 4uLL, v12, 1);
  size_t v14 = sub_1003619AC((char *)a1, 2uLL, v13, 1);
  unint64_t v15 = sub_1003619AC((char *)(a1 + 2), 1uLL, v14, 1);
  uint64_t v16 = sub_1003619AC((char *)(a1 + 3), 1uLL, v15, 1);
  int v17 = sub_1003619AC((char *)(a1 + 4), 2uLL, v16, 1);
  uint64_t v18 = sub_1003619AC((char *)(a1 + 6), 2uLL, v17, 1);
  uint64_t v19 = sub_1003619AC((char *)(a1 + 8), 1uLL, v18, 1);
  uint64_t v20 = sub_1003619AC((char *)(a1 + 9), 1uLL, v19, 1);
  char v21 = sub_1003619AC((char *)(a1 + 10), 1uLL, v20, 1);
  unsigned __int8 v28 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  char v22 = sub_1003619AC((char *)&v28, 1uLL, v21 + 7, 1);
  a3 = sub_1003619AC((char *)(a1 + 11), 1uLL, v22, 1);
  if (v28)
  {
    uint64_t v23 = 0LL;
    for (unint64_t i = 0LL; i < v28; ++i)
    {
      a3 = sub_1003619AC((char *)(*(void *)(a1 + 16) + v23), 2uLL, a3, 1);
      v23 += 2LL;
    }
  }

  unint64_t v25 = a2[1];
  if (v25 < (unint64_t)a3)
  {
    uint64_t v27 = "buildRangingConfigCommandPacket";
    uint64_t v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }

  if (v25 > (unint64_t)a3) {
    sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  (uint64_t)a2,  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t)"buildRangingConfigCommandPacket");
  }
  return 0LL;
}

uint64_t sub_1003623A0( uint64_t a1, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if (v8 >= 0x11)
  {
    uint64_t v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_10032C51C(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v33);
    return 1LL;
  }

  if (v8 <= 3)
  {
    uint64_t v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }

  uint64_t v12 = (char *)(a1 + 48);
  a2[1] = *a2;
  char v36 = 0;
  sub_1001C9BC8(a2, v8 + 28, &v36);
  uint64_t v13 = (_BYTE *)*a2;
  int __src = 16385;
  size_t v14 = sub_1003619AC((char *)&__src, 4uLL, v13, 1);
  unint64_t v15 = sub_1003619AC((char *)a1, 2uLL, v14, 1);
  uint64_t v16 = sub_1003619AC((char *)(a1 + 2), 1uLL, v15, 1);
  int v17 = sub_1003619AC((char *)(a1 + 3), 1uLL, v16, 1);
  uint64_t v18 = sub_1003619AC((char *)(a1 + 4), 2uLL, v17, 1);
  uint64_t v19 = sub_1003619AC((char *)(a1 + 6), 2uLL, v18, 1);
  uint64_t v20 = sub_1003619AC((char *)(a1 + 8), 1uLL, v19, 1);
  char v21 = sub_1003619AC((char *)(a1 + 9), 1uLL, v20, 1);
  char v22 = sub_1003619AC((char *)(a1 + 10), 1uLL, v21, 1);
  uint64_t v23 = sub_1003619AC(v12, 2uLL, v22, 1);
  std::stringbuf v24 = sub_1003619AC((char *)(a1 + 50), 2uLL, v23, 1);
  unsigned __int8 v34 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  unint64_t v25 = sub_1003619AC((char *)&v34, 1uLL, v24 + 3, 1);
  uint64_t v26 = sub_1003619AC((char *)(a1 + 11), 1uLL, v25, 1);
  uint64_t v27 = sub_1003619AC((char *)(a1 + 52), 1uLL, v26, 1);
  unsigned __int8 v28 = sub_1003619AC((char *)(a1 + 53), 1uLL, v27, 1);
  a3 = sub_1003619AC((char *)(a1 + 54), 2uLL, v28, 1);
  if (v34)
  {
    uint64_t v29 = 0LL;
    for (unint64_t i = 0LL; i < v34; ++i)
    {
      a3 = sub_1003619AC((char *)(*(void *)(a1 + 16) + v29), 2uLL, a3, 1);
      v29 += 2LL;
    }
  }

  unint64_t v31 = a2[1];
  if (v31 < (unint64_t)a3)
  {
    uint64_t v33 = "buildRangingConfigCommandPacketR2";
    uint64_t v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }

  if (v31 > (unint64_t)a3) {
    sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  (uint64_t)a2,  (uint64_t)a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t)"buildRangingConfigCommandPacketR2");
  }
  return 0LL;
}

uint64_t sub_100362608(char *a1, void *__dst)
{
  *__int128 __dst = 0LL;
  __dst[1] = 0LL;
  *(void *)((char *)__dst + 14) = 0LL;
  int __src = 16386;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003619AC(a1 + 8, 8uLL, v5, 1);
  uint64_t v7 = sub_1003619AC(a1 + 16, 4uLL, v6, 1);
  unint64_t v8 = sub_1003619AC(a1 + 20, 4uLL, v7, 1);
  if ((char *)__dst + 22 >= v8)
  {
    if ((char *)__dst + 22 > v8) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"buildRangingEnableCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"buildRangingEnableCommandPacket");
    return 1LL;
  }

uint64_t sub_1003626F0(char *a1, char *__dst)
{
  *(_DWORD *)(__dst + 3) = 0;
  *(_DWORD *)__int128 __dst = 0;
  int __src = 16387;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003619AC(a1 + 2, 1uLL, v5, 1);
  if (__dst + 7 >= v6)
  {
    if (__dst + 7 > v6) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"buildRangingDisableCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"buildRangingDisableCommandPacket");
    return 1LL;
  }

uint64_t sub_1003627B0(char *a1, char *__dst)
{
  *(void *)(__dst + 7std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  *((_OWORD *)__dst + 2) = 0u;
  *(_OWORD *)__int128 __dst = 0u;
  int __src = 16480;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003619AC(a1 + 2, 1uLL, v5, 1);
  uint64_t v7 = sub_1003619AC(a1 + 3, 1uLL, v6, 1);
  uint64_t v8 = sub_1003619AC(a1 + 4, 1uLL, v7, 1);
  uint64_t v9 = sub_1003619AC(a1 + 6, 2uLL, v8, 1);
  uint64_t v10 = sub_1003619AC(a1 + 8, 2uLL, v9, 1);
  uint64_t v11 = sub_1003619AC(a1 + 22, 1uLL, v10 + 12, 1);
  uint64_t v12 = sub_1003619AC(a1 + 23, 1uLL, v11, 1);
  uint64_t v13 = sub_1003619AC(a1 + 24, 1uLL, v12, 1);
  uint64_t v14 = sub_1003619AC(a1 + 26, 2uLL, v13, 1);
  uint64_t v15 = sub_1003619AC(a1 + 28, 1uLL, v14, 1);
  uint64_t v16 = sub_1003619AC(a1 + 30, 2uLL, v15, 1);
  int v17 = sub_1003619AC(a1 + 43, 1uLL, v16 + 11, 1);
  uint64_t v18 = sub_1003619AC(a1 + 44, 1uLL, v17, 1);
  uint64_t v19 = sub_1003619AC(a1 + 62, 2uLL, v18 + 16, 1);
  uint64_t v20 = sub_1003619AC(a1 + 64, 8uLL, v19, 1);
  char v21 = sub_1003619AC(a1 + 72, 4uLL, v20, 1);
  char v22 = sub_1003619AC(a1 + 76, 2uLL, v21, 1);
  uint64_t v23 = sub_1003619AC(a1 + 80, 8uLL, v22, 1);
  if (__dst + 86 >= v23)
  {
    if (__dst + 86 > v23) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v24,  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v24,  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    return 1LL;
  }

uint64_t sub_1003629D0(_DWORD *a1, unint64_t *a2)
{
  int __src = 16388;
  unint64_t v4 = (_BYTE *)*a2;
  unint64_t v5 = a2[1] - *a2;
  if (v5 > 3)
  {
    if (v5 != 4) {
      a2[1] = (unint64_t)(v4 + 4);
    }
  }

  else
  {
    sub_1000353EC(a2, 4 - v5);
    unint64_t v4 = (_BYTE *)*a2;
  }

  sub_1003619AC((char *)&__src, 4uLL, v4, 1);
  int v6 = a1[2] - *a1;
  uint64_t v8 = (_BYTE *)a2[1];
  unint64_t v7 = a2[2];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = *a2;
    uint64_t v11 = &v8[-*a2];
    unint64_t v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0) {
LABEL_44:
    }
      sub_10001E11C();
    unint64_t v13 = v7 - v10;
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (unint64_t)operator new(v14);
    }
    else {
      unint64_t v15 = 0LL;
    }
    uint64_t v16 = (char *)(v15 + v14);
    v11[v15] = v6;
    uint64_t v9 = &v11[v15 + 1];
    if (v8 == (_BYTE *)v10)
    {
      v15 += (unint64_t)v11;
    }

    else
    {
      int v17 = &v8[~v10];
      do
      {
        char v18 = *--v8;
        (v17--)[v15] = v18;
      }

      while (v8 != (_BYTE *)v10);
      uint64_t v8 = (_BYTE *)*a2;
    }

    *a2 = v15;
    a2[1] = (unint64_t)v9;
    a2[2] = (unint64_t)v16;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }

  a2[1] = (unint64_t)v9;
  uint64_t v19 = *(char **)a1;
  uint64_t v20 = (char *)*((void *)a1 + 1);
  if (*(char **)a1 != v20)
  {
    do
    {
      char v21 = *v19;
      unint64_t v22 = a2[2];
      if ((unint64_t)v9 >= v22)
      {
        unint64_t v24 = *a2;
        uint64_t v25 = &v9[-*a2];
        unint64_t v26 = (unint64_t)(v25 + 1);
        unint64_t v27 = v22 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unint64_t v29 = (unint64_t)operator new(v28);
        }
        else {
          unint64_t v29 = 0LL;
        }
        uint64_t v30 = (char *)(v29 + v28);
        v25[v29] = v21;
        uint64_t v23 = (uint64_t)&v25[v29 + 1];
        if (v9 == (_BYTE *)v24)
        {
          *a2 = (unint64_t)&v25[v29];
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
        }

        else
        {
          unint64_t v31 = &v9[~v24];
          do
          {
            char v32 = *--v9;
            (v31--)[v29] = v32;
          }

          while (v9 != (_BYTE *)v24);
          uint64_t v9 = (_BYTE *)*a2;
          *a2 = v29;
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
          if (!v9) {
            goto LABEL_42;
          }
        }

        operator delete(v9);
      }

      else
      {
        *uint64_t v9 = v21;
        uint64_t v23 = (uint64_t)(v9 + 1);
      }

uint64_t sub_100362C0C(char **a1, unint64_t *a2)
{
  int __src = 16389;
  unint64_t v5 = (_BYTE *)*a2;
  unint64_t v6 = a2[1] - *a2;
  if (v6 > 3)
  {
    if (v6 != 4) {
      a2[1] = (unint64_t)(v5 + 4);
    }
  }

  else
  {
    sub_1000353EC(a2, 4 - v6);
    unint64_t v5 = (_BYTE *)*a2;
  }

  sub_1003619AC((char *)&__src, 4uLL, v5, 1);
  unint64_t v7 = a1[1] - *a1;
  uint64_t v9 = (_BYTE *)a2[1];
  unint64_t v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *a2;
    unint64_t v12 = &v9[-*a2];
    unint64_t v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0) {
LABEL_87:
    }
      sub_10001E11C();
    unint64_t v14 = v8 - v11;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (unint64_t)operator new(v15);
    }
    else {
      unint64_t v16 = 0LL;
    }
    int v17 = (char *)(v16 + v15);
    v12[v16] = v7 >> 5;
    unint64_t v10 = &v12[v16 + 1];
    if (v9 == (_BYTE *)v11)
    {
      v16 += (unint64_t)v12;
    }

    else
    {
      char v18 = &v9[~v11];
      do
      {
        char v19 = *--v9;
        (v18--)[v16] = v19;
      }

      while (v9 != (_BYTE *)v11);
      uint64_t v9 = (_BYTE *)*a2;
    }

    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *uint64_t v9 = v7 >> 5;
    unint64_t v10 = v9 + 1;
  }

  a2[1] = (unint64_t)v10;
  uint64_t v20 = *a1;
  uint64_t v62 = a1[1];
  if (*a1 != v62)
  {
    while (1)
    {
      if (*((void *)v20 + 2) - *((void *)v20 + 1) > 0xFFuLL) {
        return 1LL;
      }
      char v21 = *v20;
      unint64_t v22 = a2[2];
      if ((unint64_t)v10 < v22)
      {
        *unint64_t v10 = v21;
        uint64_t v23 = v10 + 1;
        goto LABEL_45;
      }

      unint64_t v24 = *a2;
      uint64_t v25 = &v10[-*a2];
      unint64_t v26 = (unint64_t)(v25 + 1);
      unint64_t v27 = v22 - v24;
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      size_t v28 = v27 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v26;
      unint64_t v29 = v28 ? (unint64_t)operator new(v28) : 0LL;
      uint64_t v30 = &v25[v29];
      unint64_t v31 = (char *)(v29 + v28);
      char v32 = &v25[v29];
      *char v32 = v21;
      uint64_t v23 = v32 + 1;
      if (v10 == (_BYTE *)v24) {
        break;
      }
      uint64_t v33 = &v10[~v24];
      do
      {
        char v34 = *--v10;
        (v33--)[v29] = v34;
      }

      while (v10 != (_BYTE *)v24);
      unint64_t v10 = (_BYTE *)*a2;
      *a2 = v29;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v31;
      if (v10) {
        goto LABEL_44;
      }
LABEL_45:
      a2[1] = (unint64_t)v23;
      int v35 = *((_DWORD *)v20 + 4) - *((_DWORD *)v20 + 2);
      unint64_t v36 = a2[2];
      if ((unint64_t)v23 >= v36)
      {
        unint64_t v38 = *a2;
        uint64_t v39 = &v23[-*a2];
        unint64_t v40 = (unint64_t)(v39 + 1);
        unint64_t v41 = v36 - v38;
        if (2 * v41 > v40) {
          unint64_t v40 = 2 * v41;
        }
        if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v42 = v40;
        }
        if (v42) {
          unint64_t v43 = (unint64_t)operator new(v42);
        }
        else {
          unint64_t v43 = 0LL;
        }
        uint64_t v44 = &v39[v43];
        uint64_t v45 = (char *)(v43 + v42);
        uint64_t v46 = &v39[v43];
        _BYTE *v46 = v35;
        uint64_t v37 = v46 + 1;
        if (v23 == (_BYTE *)v38)
        {
          *a2 = (unint64_t)v44;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
        }

        else
        {
          uint64_t v47 = &v23[~v38];
          do
          {
            char v48 = *--v23;
            (v47--)[v43] = v48;
          }

          while (v23 != (_BYTE *)v38);
          uint64_t v23 = (_BYTE *)*a2;
          *a2 = v43;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
          if (!v23) {
            goto LABEL_63;
          }
        }

        operator delete(v23);
      }

      else
      {
        *uint64_t v23 = v35;
        uint64_t v37 = v23 + 1;
      }

uint64_t sub_100363018(char *a1, _WORD *__dst)
{
  __dst[4] = 0;
  *(void *)__int128 __dst = 0LL;
  int __src = 16390;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 1uLL, v4, 1);
  unint64_t v6 = sub_1003619AC(a1 + 1, 1uLL, v5, 1);
  unint64_t v7 = sub_1003619AC(a1 + 4, 4uLL, v6, 1);
  if (__dst + 5 >= (_WORD *)v7)
  {
    if (__dst + 5 > (_WORD *)v7) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v8,  v9,  v10,  v11,  v12,  v13,  v14,  (uint64_t)"buildSleepEnableCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v8,  v9,  v10,  v11,  v12,  v13,  v14,  (uint64_t)"buildSleepEnableCommandPacket");
    return 1LL;
  }

uint64_t sub_1003630EC(char *a1, _BYTE *__dst)
{
  __dst[4] = 0;
  *(_DWORD *)__int128 __dst = 0;
  int __src = 16397;
  unint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003619AC(a1, 1uLL, v4, 1);
  if (__dst + 5 >= v5)
  {
    if (__dst + 5 > v5) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildSetNBSARStateCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildSetNBSARStateCommandPacket");
    return 1LL;
  }

uint64_t sub_100363198(int a1, char *__dst)
{
  *(_DWORD *)__int128 __dst = 0;
  uint64_t v2 = __dst + 4;
  int __src = 16467;
  uint64_t v3 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  if (v2 >= v3)
  {
    if (v2 > v3) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v4,  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)"buildAlishaGetCapCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v4,  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)"buildAlishaGetCapCommandPacket");
    return 1LL;
  }

uint64_t sub_100363224(char *a1, void *__dst)
{
  __dst[4] = 0LL;
  *(_OWORD *)__int128 __dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  int __src = 16466;
  uint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003619AC(a1, 4uLL, v4, 1);
  uint64_t v6 = sub_1003619AC(a1 + 4, 0x20uLL, v5, 1);
  if (__dst + 5 >= (void *)v6)
  {
    if (__dst + 5 > (void *)v6) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v7,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    return 1LL;
  }

uint64_t sub_1003632E8(char *a1, char *__dst)
{
  *(void *)__int128 __dst = 0LL;
  uint64_t v3 = __dst + 8;
  int __src = 16465;
  uint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003619AC(a1, 4uLL, v4, 1);
  if (v3 >= v5)
  {
    if (v3 > v5) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildAlishaGetKeyCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)"buildAlishaGetKeyCommandPacket");
    return 1LL;
  }

uint64_t sub_10036338C(char *a1, _OWORD *__dst)
{
  __dst[1] = 0u;
  __dst[2] = 0u;
  *__int128 __dst = 0u;
  int __src = 16464;
  uint64_t v4 = sub_1003619AC((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003619AC(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003619AC(a1 + 2, 1uLL, v5, 1);
  uint64_t v7 = sub_1003619AC(a1 + 3, 1uLL, v6, 1);
  uint64_t v8 = sub_1003619AC(a1 + 4, 1uLL, v7, 1);
  uint64_t v9 = sub_1003619AC(a1 + 5, 1uLL, v8, 1);
  uint64_t v10 = sub_1003619AC(a1 + 6, 1uLL, v9, 1);
  uint64_t v11 = sub_1003619AC(a1 + 7, 1uLL, v10, 1);
  uint64_t v12 = sub_1003619AC(a1 + 8, 4uLL, v11, 1);
  uint64_t v13 = sub_1003619AC(a1 + 12, 2uLL, v12, 1);
  uint64_t v14 = sub_1003619AC(a1 + 14, 2uLL, v13, 1);
  size_t v15 = sub_1003619AC(a1 + 16, 2uLL, v14, 1);
  unint64_t v16 = sub_1003619AC(a1 + 18, 1uLL, v15, 1);
  int v17 = sub_1003619AC(a1 + 19, 1uLL, v16, 1);
  char v18 = sub_1003619AC(a1 + 20, 1uLL, v17, 1);
  char v19 = sub_1003619AC(a1 + 21, 1uLL, v18, 1);
  uint64_t v20 = sub_1003619AC(a1 + 24, 4uLL, v19, 1);
  char v21 = sub_1003619AC(a1 + 28, 4uLL, v20, 1);
  unint64_t v22 = sub_1003619AC(a1 + 32, 1uLL, v21, 1);
  uint64_t v23 = sub_1003619AC(a1 + 33, 1uLL, v22, 1);
  unint64_t v24 = sub_1003619AC(a1 + 34, 1uLL, v23, 1);
  uint64_t v25 = sub_1003619AC(a1 + 35, 1uLL, v24, 1);
  unint64_t v26 = sub_1003619AC(a1 + 36, 2uLL, v25, 1);
  unint64_t v27 = sub_1003619AC(a1 + 40, 8uLL, v26, 1);
  if (__dst + 3 >= (_OWORD *)v27)
  {
    if (__dst + 3 > (_OWORD *)v27) {
      sub_10032C3DC( "%s: Memory bounds of array not reached. struct member not copied?",  v28,  v29,  v30,  v31,  v32,  v33,  v34,  (uint64_t)"buildAlishaRangeEnableCommandPacket");
    }
    return 0LL;
  }

  else
  {
    sub_10032C51C( "%s: Memory bounds of array exceeded.",  v28,  v29,  v30,  v31,  v32,  v33,  v34,  (uint64_t)"buildAlishaRangeEnableCommandPacket");
    return 1LL;
  }

uint64_t sub_1003635F4@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  int v25 = 1065353216;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  int v22 = 1065353216;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  int v19 = 1065353216;
  unint64_t v16 = &v23;
  size_t v15 = &v20;
  uint64_t v14 = &v17;
  if (a1 <= 99)
  {
    switch(a1)
    {
      case 0:
        uint64_t v12 = &unk_10055F75F;
        if (a3 - 2 < 0xC || a3 - 998 < 2 || !a3) {
          goto LABEL_153;
        }
        if (a3 != 1) {
          goto LABEL_154;
        }
        uint64_t v12 = &unk_10055A4D7;
        goto LABEL_153;
      case 1:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2) {
            goto LABEL_154;
          }
LABEL_88:
          uint64_t v12 = &unk_100569C6F;
          goto LABEL_153;
        }

        if (a3 != 2) {
          goto LABEL_88;
        }
        uint64_t v12 = &unk_1005649E7;
        goto LABEL_153;
      case 2:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2) {
            goto LABEL_154;
          }
        }

        else if (a3 == 3)
        {
          uint64_t v12 = &unk_10056EEF7;
LABEL_153:
          sub_1003644BC((uint64_t *)&v16, v12);
          goto LABEL_154;
        }

        uint64_t v12 = &unk_10057417F;
        goto LABEL_153;
      case 3:
        uint64_t v12 = &unk_100579407;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_146;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_10057E68F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_100583917;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_100588B9F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_10058DE27;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_1005930AF;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_100598337;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_146:
            uint64_t v12 = &unk_10059D5BF;
            break;
        }

        goto LABEL_153;
      case 4:
        uint64_t v12 = &unk_1005A2847;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_142;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_1005A7ACF;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_1005ACD57;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_1005B1FDF;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_1005B7267;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_1005BC4EF;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_1005C1777;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_142:
            uint64_t v12 = &unk_1005C69FF;
            break;
        }

        goto LABEL_153;
      case 5:
        uint64_t v12 = &unk_1005CBC87;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_150;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_1005D0F0F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_1005D6197;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_1005DB41F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_1005E06A7;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_1005E592F;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_1005EABB7;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_150:
            uint64_t v12 = &unk_1005EFE3F;
            break;
        }

        goto LABEL_153;
      case 6:
        uint64_t v12 = &unk_1005F50C7;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_152;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_1005FA34F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_1005FF5D7;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_10060485F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_100609AE7;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_10060ED6F;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_100613FF7;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_152:
            uint64_t v12 = &unk_10061927F;
            break;
        }

        goto LABEL_153;
      case 7:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 540;
            goto LABEL_239;
          }

          uint64_t v12 = &unk_100632F27;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_125;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006381AF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_10063D437;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_125:
              uint64_t v12 = &unk_1006426BF;
              break;
          }
        }

        else
        {
          uint64_t v12 = &unk_10061E507;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_127;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10062378F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_100628A17;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_127:
              uint64_t v12 = &unk_10062DC9F;
              break;
          }
        }

        goto LABEL_153;
      case 8:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 611;
            goto LABEL_239;
          }

          uint64_t v12 = &unk_10065C367;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_136;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006615EF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_100666877;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_136:
              uint64_t v12 = &unk_10066BAFF;
              break;
          }
        }

        else
        {
          uint64_t v12 = &unk_100647947;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_140;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10064CBCF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_100651E57;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_140:
              uint64_t v12 = &unk_1006570DF;
              break;
          }
        }

        goto LABEL_153;
      case 9:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 682;
            goto LABEL_239;
          }

          uint64_t v12 = &unk_1006857A7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_121;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10068AA2F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_10068FCB7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_121:
              uint64_t v12 = &unk_100694F3F;
              break;
          }
        }

        else
        {
          uint64_t v12 = &unk_100670D87;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_123;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10067600F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_10067B297;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_123:
              uint64_t v12 = &unk_10068051F;
              break;
          }
        }

        goto LABEL_153;
      case 10:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 753;
            goto LABEL_239;
          }

          uint64_t v12 = &unk_1006AEBE7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_134;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006B3E6F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006B90F7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_134:
              uint64_t v12 = &unk_1006BE37F;
              break;
          }
        }

        else
        {
          uint64_t v12 = &unk_10069A1C7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_138;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10069F44F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006A46D7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_138:
              uint64_t v12 = &unk_1006A995F;
              break;
          }
        }

        goto LABEL_153;
      case 11:
        uint64_t v7 = &unk_1006C3607;
        goto LABEL_100;
      case 12:
        uint64_t v7 = &unk_1006C5F4F;
        goto LABEL_100;
      case 13:
        uint64_t v7 = &unk_1006C8897;
        goto LABEL_100;
      case 14:
        uint64_t v7 = &unk_1006CB1DF;
LABEL_100:
        if (a3 >= 0xE && a3 - 998 >= 2) {
          goto LABEL_154;
        }
        goto LABEL_101;
      case 15:
        sub_100364794((uint64_t *)&v16, byte_100433434);
        sub_100364900((uint64_t *)&v15, byte_1004475FC);
        uint64_t v6 = &unk_100447730;
        goto LABEL_132;
      case 16:
        sub_100364794((uint64_t *)&v16, byte_1004479BE);
        sub_100364900((uint64_t *)&v15, byte_10045BB86);
        uint64_t v6 = &unk_10045BCBA;
        goto LABEL_132;
      case 17:
      case 23:
        sub_100364794((uint64_t *)&v16, byte_1004D6084);
        sub_100364900((uint64_t *)&v15, byte_1004EA24C);
        uint64_t v6 = &unk_1004EA380;
        goto LABEL_132;
      case 18:
        sub_100364794((uint64_t *)&v16, byte_1004EA60E);
        sub_100364900((uint64_t *)&v15, byte_1004FE7D6);
        uint64_t v6 = &unk_1004FE90A;
        goto LABEL_132;
      case 19:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 900;
            goto LABEL_239;
          }

          sub_100364794((uint64_t *)&v16, byte_1004704D2);
          sub_100364900((uint64_t *)&v15, byte_10048469A);
          uint64_t v6 = &unk_1004847CE;
        }

        else
        {
          sub_100364794((uint64_t *)&v16, byte_10045BF48);
          sub_100364900((uint64_t *)&v15, byte_100470110);
          uint64_t v6 = &unk_100470244;
        }

        goto LABEL_132;
      case 20:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 928;
            goto LABEL_239;
          }

          sub_100364794((uint64_t *)&v16, byte_100498FE6);
          sub_100364900((uint64_t *)&v15, byte_1004AD1AE);
          uint64_t v6 = &unk_1004AD2E2;
        }

        else
        {
          sub_100364794((uint64_t *)&v16, byte_100484A5C);
          sub_100364900((uint64_t *)&v15, byte_100498C24);
          uint64_t v6 = &unk_100498D58;
        }

void sub_100364488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_10034F41C(v5);
  sub_1001ACE04((uint64_t)va);
  sub_1001ACE04((uint64_t)va1);
  sub_1001ACE04(v6 - 80);
  _Unwind_Resume(a1);
}

void sub_1003644BC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[2641 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      __int128 v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 80);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[2641 * v3];
  }

  while (v3 != 8);
}

void sub_100364628(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[1321 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      __int128 v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 40);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[1321 * v3];
  }

  while (v3 != 8);
}

void sub_100364794(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[10297 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      __int128 v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 312);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[10297 * v3];
  }

  while (v3 != 8);
}

void sub_100364900(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[77 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      int v9 = sub_100365730(v8, v4, (uint64_t)&unk_1004242F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 38 * v5;
    }

    while (v5 != 2);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[77 * v24 + 77];
  }

  while (v24 != 3);
}

void sub_100364A70(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[109 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      int v9 = sub_100365984(v8, v4, (uint64_t)&unk_1004242F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 18 * v5;
    }

    while (v5 != 6);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[109 * v24 + 109];
  }

  while (v24 != 5);
}

void sub_100364BE0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[661 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 20);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[661 * v3];
  }

  while (v3 != 8);
}

void sub_100364D4C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[529 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 16);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[529 * v3];
  }

  while (v3 != 8);
}

void sub_100364EB8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = (uint64_t)&a2[5149 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003654DC(v8, v4, (uint64_t)&unk_1004242F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        __int128 v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          __int128 v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }

    while (v5 != 156);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[5149 * v3];
  }

  while (v3 != 8);
}

void sub_100365024(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = 0LL; i != 4; a2 = &v2[39 * i])
  {
    uint64_t v5 = (uint64_t)&v2[39 * i + 1];
    uint64_t v6 = *a1;
    __int128 v21 = a2;
    uint64_t v7 = sub_100365730(v6, a2, (uint64_t)&unk_1004242F8, &v21);
    uint64_t v8 = (uint64_t *)v7[4];
    unint64_t v9 = v7[5];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = v7[3];
      uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
      uint64_t v13 = v9 - v11;
      uint64_t v14 = v13 >> 2;
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_1000472C0((uint64_t)(v7 + 5), v15);
      }
      else {
        uint64_t v16 = 0LL;
      }
      unint64_t v17 = (uint64_t *)&v16[8 * v12];
      *unint64_t v17 = v5;
      uint64_t v10 = v17 + 1;
      int v19 = (char *)v7[3];
      __int128 v18 = (char *)v7[4];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--unint64_t v17 = v20;
        }

        while (v18 != v19);
        __int128 v18 = (char *)v7[3];
      }

      v7[3] = v17;
      v7[4] = v10;
      v7[5] = &v16[8 * v15];
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      *uint64_t v8 = v5;
      uint64_t v10 = v8 + 1;
    }

    v7[4] = v10;
    ++i;
  }

void sub_100365164(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2;
  __int128 v23 = a2;
  do
  {
    uint64_t v5 = 0LL;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[55 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      unint64_t v9 = sub_100365984(v8, v4, (uint64_t)&unk_1004242F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          __int128 v18 = (char *)sub_1000472C0((uint64_t)(v9 + 5), v17);
        }
        else {
          __int128 v18 = 0LL;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v7;
        uint64_t v12 = v19 + 1;
        __int128 v21 = (char *)v9[3];
        uint64_t v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }

          while (v20 != v21);
          uint64_t v20 = (char *)v9[3];
        }

        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *uint64_t v10 = v7;
        uint64_t v12 = v10 + 1;
      }

      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 18 * v5;
    }

    while (v5 != 3);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[55 * v24 + 55];
  }

  while (v24 != 5);
}

void sub_1003652D4(uint64_t *a1)
{
  uint64_t v2 = &unk_1006DD30F;
  do
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = v2 + 397;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v20 = v2;
      uint64_t v6 = sub_1003654DC(v5, v2, (uint64_t)&unk_1004242F8, &v20);
      uint64_t v7 = (void *)v6[4];
      unint64_t v8 = v6[5];
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v10 = v6[3];
        uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
        uint64_t v12 = v8 - v10;
        uint64_t v13 = v12 >> 2;
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)sub_1000472C0((uint64_t)(v6 + 5), v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v3;
        unint64_t v9 = v16 + 8;
        __int128 v18 = (char *)v6[3];
        unint64_t v17 = (char *)v6[4];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }

          while (v17 != v18);
          unint64_t v17 = (char *)v6[3];
        }

        void v6[3] = v16;
        v6[4] = v9;
        v6[5] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *uint64_t v7 = v3;
        unint64_t v9 = v7 + 1;
      }

      v6[4] = v9;
      v3 += 33;
    }

    while (v3 != v4);
    v2 += 397;
  }

  while (v4 != (_BYTE *)&unk_1006DDF77);
}

uint64_t sub_100365424(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_1003662EC((void *)a1, *(void **)(a2 + 16), 0LL);
    }
  }

  else
  {
    sub_100352BCC(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }

  return a1;
}

uint64_t sub_100365480(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_10036652C((void *)a1, *(void **)(a2 + 16), 0LL);
    }
  }

  else
  {
    sub_100352F70(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }

  return a1;
}

void *sub_1003654DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0LL;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0LL;
  v11[5] = 0LL;
  void v11[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  __int128 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *__int128 v21 = v11;
    goto LABEL_39;
  }

  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    __int128 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_100365714( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void *sub_100365730(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0LL;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0LL;
  v11[5] = 0LL;
  void v11[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  __int128 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *__int128 v21 = v11;
    goto LABEL_39;
  }

  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    __int128 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_100365968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void *sub_100365984(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0LL;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0LL;
  v11[5] = 0LL;
  void v11[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  __int128 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *__int128 v21 = v11;
    goto LABEL_39;
  }

  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    __int128 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_100365BBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_100365BD8(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }

    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_100365CFC(v13, (uint64_t)(v4 + 2));
        uint64_t v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_100365D48((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_100365E9C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }

      while (v4 != a3);
    }

    sub_1001ACE3C((int)a1, v10);
  }

  while (v4 != a3)
  {
    sub_1003661D0(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }

void sub_100365CCC(void *a1)
{
}

void sub_100365CE8(_Unwind_Exception *a1)
{
}

_BYTE **sub_100365CFC(_BYTE **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  *unint64_t v4 = *(_BYTE *)a2;
  if (v3 != (char *)(a2 + 8)) {
    sub_1001252EC( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_100365D48(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_100365F84(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0LL;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }

    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }

    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(unsigned __int8 *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }

  while (v22 != 1);
  return result;
}

void *sub_100365E9C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

void sub_100365F84(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100366060(a1, prime);
  }

void sub_100366060(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10001D350();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vstd::ostream::~ostream(v1, v2 + 8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }

        else
        {
          v12 &= a2 - 1;
        }

        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }

        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }

            while (v13 && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v13 + 16));
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }

  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  }

void *sub_1003661D0(void *a1, uint64_t a2)
{
  int8x8_t v3 = (void *)v8[0];
  unint64_t v5 = (unsigned __int8 *)(v8[0] + 16LL);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16LL);
  *(void *)(v8[0] + 8LL) = v4;
  uint64_t v6 = (void *)sub_100365D48((uint64_t)a1, v4, v5);
  sub_100365E9C(a1, v3, v6);
  return v3;
}

void sub_100366228( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036624C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0LL;
  v6[5] = 0LL;
  void v6[3] = 0LL;
  uint64_t result = sub_1001DF3F4( v6 + 3,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003662D0(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003662EC(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      BOOL v10 = v8;
    }

    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_100365CFC(v13, (uint64_t)(v4 + 2));
        BOOL v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_100365D48((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_100365E9C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }

      while (v4 != a3);
    }

    sub_1001ACE3C((int)a1, v10);
  }

  while (v4 != a3)
  {
    sub_100366410(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }

void sub_1003663E0(void *a1)
{
}

void sub_1003663FC(_Unwind_Exception *a1)
{
}

void *sub_100366410(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (unsigned __int8 *)(v8[0] + 16LL);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16LL);
  *(void *)(v8[0] + 8LL) = v4;
  uint64_t v6 = (void *)sub_100365D48((uint64_t)a1, v4, v5);
  sub_100365E9C(a1, v3, v6);
  return v3;
}

void sub_100366468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036648C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0LL;
  v6[5] = 0LL;
  void v6[3] = 0LL;
  uint64_t result = sub_1001DF46C( v6 + 3,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_100366510(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10036652C(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      BOOL v10 = v8;
    }

    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_100365CFC(v13, (uint64_t)(v4 + 2));
        BOOL v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_100365D48((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_100365E9C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }

      while (v4 != a3);
    }

    sub_1001ACE3C((int)a1, v10);
  }

  while (v4 != a3)
  {
    sub_100366650(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }

void sub_100366620(void *a1)
{
}

void sub_10036663C(_Unwind_Exception *a1)
{
}

void *sub_100366650(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (unsigned __int8 *)(v8[0] + 16LL);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16LL);
  *(void *)(v8[0] + 8LL) = v4;
  uint64_t v6 = (void *)sub_100365D48((uint64_t)a1, v4, v5);
  sub_100365E9C(a1, v3, v6);
  return v3;
}

void sub_1003666A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100352B24((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003666CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  *((_BYTE *)v6 + 16) = *(_BYTE *)a2;
  v6[4] = 0LL;
  v6[5] = 0LL;
  void v6[3] = 0LL;
  uint64_t result = sub_1001DF4E4( v6 + 3,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_100366750(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  sub_100352B24(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10036676C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 1177));
  if ((v9 & 1) != 0)
  {
    sub_10032C3DC( "packetReceived: ignoring packet because fIgnorePacketsUntilFirmwareDownloaded == true",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9);
  }

  else
  {
    int v10 = a3;
    if (*(_BYTE *)(a1 + 1176))
    {
      std::mutex::lock((std::mutex *)(a1 + 8));
      size_t v13 = (void *)(a1 + 72);
      if (v10) {
        sub_1003673CC((uint64_t)v13, a2);
      }
      else {
        sub_10036746C(v13, a2);
      }
      std::mutex::unlock((std::mutex *)(a1 + 8));
    }

    else
    {
      unsigned int v14 = sub_10036193C((unsigned int **)a2);
      unint64_t v15 = sub_100361914(v14);
      int v16 = v15;
      int v56 = v15;
      __int16 v57 = WORD2(v15);
      if (sub_10032A59C(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_100045754((uint64_t)v52);
        int v17 = sub_100046B94(&v53, (uint64_t)"===========", 11LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
        unint64_t v18 = std::locale::use_facet((const std::locale *)&v51, &std::ctype<char>::id);
        uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
        std::locale::~locale((std::locale *)&v51);
        std::ostream::put(v17, v19);
        std::ostream::flush(v17);
        unint64_t v20 = sub_100046B94(&v53, (uint64_t)"RX Packet:", 10LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24LL)));
        BOOL v21 = std::locale::use_facet((const std::locale *)&v51, &std::ctype<char>::id);
        uint64_t v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10LL);
        std::locale::~locale((std::locale *)&v51);
        std::ostream::put(v20, v22);
        std::ostream::flush(v20);
        v51.__r_.__value_.__s.__data_[0] = 48;
        __int128 v23 = sub_100138E6C(&v53, (char *)&v51);
        uint64_t v24 = sub_100046B94(&v53, (uint64_t)"Message Type: ", 14LL);
        *(void *)((char *)v24 + *(void *)(*v24 - 24LL) + 24) = 2LL;
        std::ostream::operator<<(v24, v16);
        int v25 = sub_100046B94(&v53, (uint64_t)" Group ID: ", 11LL);
        *(void *)((char *)v25 + *(void *)(*v25 - 24LL) + 24) = 2LL;
        std::ostream::operator<<(v25, BYTE1(v16));
        unint64_t v26 = sub_100046B94(&v53, (uint64_t)" Message ID: ", 13LL);
        *(void *)((char *)v26 + *(void *)(*v26 - 24LL) + 24) = 2LL;
        unint64_t v27 = (void *)std::ostream::operator<<(v26, HIWORD(v16));
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
        uint64_t v28 = std::locale::use_facet((const std::locale *)&v51, &std::ctype<char>::id);
        uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
        std::locale::~locale((std::locale *)&v51);
        std::ostream::put(v27, v29);
        std::ostream::flush(v27);
        std::stringbuf::str(&v51, &v54);
        uint64_t v30 = *(unsigned int **)a2;
        uint64_t v31 = *(void *)(a2 + 8);
        sub_1000065CC(__p, "===========\n");
        sub_100361E98((uint64_t)&v51, (uint64_t)v30, v31 - (void)v30, 4u, (uint64_t)__p);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        *(void *)((char *)v52
        uint64_t v53 = v32;
        std::streambuf::~streambuf(&v54);
        std::ios::~ios(&v55);
      }

      if (sub_10032A0D8((unsigned __int8 *)&v56))
      {
        int v40 = sub_10032A0EC((unsigned __int8 *)&v56);
        switch(v40)
        {
          case 3:
            if (v10) {
              sub_10032C51C("Unexpected event received", v41, v42, v43, v44, v45, v46, v47, v48);
            }
            sub_1003675D8(a1, (uint64_t)&v56, (void *)a2);
            break;
          case 2:
            if ((v10 & 1) == 0) {
              sub_10032C51C("Unexpected response received", v41, v42, v43, v44, v45, v46, v47, v48);
            }
            sub_10036751C(a1, (uint64_t)&v56, a2);
            break;
          case 1:
            sub_10032C51C( "Packet received with unexpected message type 0x%02x (command), groupId 0x%02x, messageId 0x%02x",  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v56);
            break;
          default:
            sub_10032C51C( "Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x, isResponse %u",  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v56);
            break;
        }
      }

      else
      {
        sub_10032C51C( "Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x",  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v56);
      }
    }
  }

void sub_100366BF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19.__locale_);
  }
  sub_100045880((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100366C74(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  sub_10032555C((void *)(a1 + 600), &v2);
}

void sub_100366CA0(std::mutex *this)
{
  sig = (void *)this[2].__m_.__sig;
  if (sig)
  {
    *(void *)this[2].__m_.__opaque = sig;
    operator delete(sig);
  }

  uint64_t v3 = *(void **)&this[1].__m_.__opaque[32];
  if (v3)
  {
    *(void *)&this[1].__m_.__opaque[40] = v3;
    operator delete(v3);
  }

  unint64_t v4 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::mutex::~mutex(this);
}

void sub_100366CEC(std::mutex *this)
{
  __int128 v2 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::mutex::~mutex(this);
}

uint64_t sub_100366D18(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_1007BF408;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 850045863LL;
  *(void *)(a1 + 120) = 850045863LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 232) = 850045863LL;
  *(void *)(a1 + sub_1001ACE80(v1 + 112) = 0LL;
  *(_OWORD *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  sub_1000065CC(__p, "RoseCommunicationMgrQueue");
  sub_100320E3C(a1 + 304, (__int128 *)__p);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  sub_100355334(a1 + 504, &v30, a1 + 304, a3);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  sub_1003226AC(a1 + 600, &v28, a1 + 304, a3);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  int v10 = operator new(0x20uLL);
  v10[1] = sub_10036676C;
  *int v10 = &off_1007BF508;
  v10[2] = 0LL;
  void v10[3] = a1;
  *(void *)(a1 + 752) = 0LL;
  *(void *)(a1 + 760) = 0LL;
  unint64_t v11 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v11 = &off_1007BF508;
  *(_OWORD *)(v11 + std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(v10 + 1);
  *((void *)v11 + 3) = v10[3];
  *(void *)(a1 + 792) = v11;
  *(void *)(a1 + 896) = 0LL;
  *(void *)(a1 + 92std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 960) = 0LL;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 84std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 864) = 0LL;
  operator delete(v10);
  uint64_t v39 = 0LL;
  unint64_t v12 = operator new(0x20uLL);
  *unint64_t v12 = &off_1007BF5B0;
  v12[1] = sub_100366C74;
  v12[2] = 0LL;
  void v12[3] = a1;
  uint64_t v39 = v12;
  sub_100329FB4(a1 + 968, a1, (uint64_t)v38, a3);
  int v17 = v39;
  if (v39 == v38)
  {
    uint64_t v18 = 4LL;
    int v17 = v38;
  }

  else
  {
    if (!v39) {
      goto LABEL_12;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v17 + 8 * v18))(v17, v13, v14, v15, v16);
LABEL_12:
  sub_10001E914((uint64_t)v36, a4);
  sub_10001E914((uint64_t)v34, a5);
  sub_10035A588(a1 + 1040, a1 + 752, (uint64_t)v36, (uint64_t)v34);
  __int128 v23 = v35;
  if (v35 == v34)
  {
    uint64_t v24 = 4LL;
    __int128 v23 = v34;
  }

  else
  {
    if (!v35) {
      goto LABEL_17;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v23 + 8 * v24))(v23, v19, v20, v21, v22);
LABEL_17:
  int v25 = v37;
  if (v37 == v36)
  {
    uint64_t v26 = 4LL;
    int v25 = v36;
    goto LABEL_21;
  }

  if (v37)
  {
    uint64_t v26 = 5LL;
LABEL_21:
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v25 + 8 * v26))(v25, v19, v20, v21, v22);
  }

  *(_BYTE *)(a1 + 1176) = a2;
  *(_BYTE *)(a1 + 1177) = 0;
  *(_DWORD *)(a1 + 1180) = a3;
  *(_OWORD *)(a1 + 1184) = 0u;
  return a1;
}

void sub_100367014( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char *a24, char a25, uint64_t a26, uint64_t a27, char *a28)
{
  uint64_t v34 = a24;
  if (a24 == v29)
  {
    uint64_t v35 = 4LL;
    uint64_t v34 = &a21;
  }

  else
  {
    if (!a24) {
      goto LABEL_6;
    }
    uint64_t v35 = 5LL;
  }

  (*(void (**)(void))(*(void *)v34 + 8 * v35))();
LABEL_6:
  uint64_t v36 = a28;
  if (a28 == &a25)
  {
    uint64_t v37 = 4LL;
    uint64_t v36 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_11;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*(void *)v36 + 8 * v37))();
LABEL_11:
  sub_10032A068(v31);
  sub_10032E210(v32);
  sub_100366CA0(a9);
  sub_100366CEC(a10);
  sub_100320EB0(v30);
  std::mutex::~mutex(a11);
  sub_10036C918((void *)(v28 + 184));
  std::mutex::~mutex(a12);
  sub_10036CD28((void *)(v28 + 72));
  std::mutex::~mutex(a13);
  _Unwind_Resume(a1);
}

void sub_100367120()
{
}

void sub_100367130()
{
}

void sub_100367138( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  JUMPOUT(0x1003670D8LL);
}

void sub_10036714C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  JUMPOUT(0x1003670E0LL);
}

void sub_100367160( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003670E8LL);
}

void sub_100367178()
{
}

uint64_t sub_100367184(uint64_t a1)
{
  *(void *)a1 = off_1007BF408;
  sub_1003672B4(a1);
  __int128 v2 = *(void **)(a1 + 1152);
  if (v2 == (void *)(a1 + 1128))
  {
    uint64_t v3 = 4LL;
    __int128 v2 = (void *)(a1 + 1128);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  unint64_t v4 = *(void **)(a1 + 1120);
  if (v4 == (void *)(a1 + 1096))
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = (void *)(a1 + 1096);
  }

  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  sub_10032A068((std::thread *)(a1 + 968));
  sub_10032E210((void *)(a1 + 752));
  uint64_t v6 = *(void **)(a1 + 728);
  if (v6)
  {
    *(void *)(a1 + 736) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *(void **)(a1 + 704);
  if (v7)
  {
    *(void *)(a1 + 712) = v7;
    operator delete(v7);
  }

  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 672);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 600));
  unsigned __int8 v9 = *(std::__shared_weak_count **)(a1 + 576);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  sub_100320EB0(a1 + 304);
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  sub_10036C918((void *)(a1 + 184));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  sub_10036CD28((void *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_1003672B4(uint64_t a1)
{
  __int128 v2 = *(dispatch_object_s **)(a1 + 1192);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 1192) = 0LL;
  }

  *(_BYTE *)(a1 + 296) = 0;
}

void sub_1003672F8(uint64_t a1)
{
  int v1 = (void *)sub_100367184(a1);
  operator delete(v1);
}

uint64_t sub_10036730C(uint64_t a1, char a2, char a3)
{
  if (*(_BYTE *)(a1 + 296)) {
    return 1LL;
  }
  dispatch_queue_t v7 = dispatch_queue_create("RoseQueue", 0LL);
  *(void *)(a1 + 1192) = v7;
  if (!v7)
  {
    uint64_t v15 = "failed to create dispatch queue";
LABEL_12:
    sub_10032C51C(v15, v8, v9, v10, v11, v12, v13, v14, v16);
    return 0LL;
  }

  if ((sub_10035A7A4(a1 + 1040, (uint64_t)v7, a2, a3) & 1) == 0)
  {
    uint64_t v15 = "Failed to connect to rose debug manager";
    goto LABEL_12;
  }

  if ((sub_10032CA90(a1 + 752, *(void *)(a1 + 1192), v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    uint64_t v15 = "Failed to connect to rose service";
    goto LABEL_12;
  }

  if ((a2 & 1) == 0) {
    sub_10032DEC8(a1 + 752, v8, v9, v10, v11, v12, v13, v14);
  }
  uint64_t result = 1LL;
  *(_BYTE *)(a1 + 296) = 1;
  return result;
}

int64x2_t sub_1003673CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10036CE6C((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080LL;
  }
  *(void *)(v8 - 24) = 0LL;
  *(void *)(v8 - 16) = 0LL;
  uint64_t v9 = (void *)(v8 - 24);
  v9[2] = 0LL;
  sub_1001309C0(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1004301A0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void *sub_10036746C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10036D184(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = (void *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  void v8[2] = 0LL;
  int64x2_t result = sub_1001309C0(v8, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  ++a1[5];
  return result;
}

void sub_10036751C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  int v7 = *(_DWORD *)a2;
  __int16 v8 = *(_WORD *)(a2 + 4);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  sub_1001309C0(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  sub_10036D498((void *)(a1 + 184), &v7);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }

  std::mutex::unlock(v6);
}

void sub_1003675AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_1003675D8(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_10032A59C(*(_DWORD *)(a1 + 1180), 5)) {
    sub_10032C3DC( "got event packet with groupID 0x%02x, message ID 0x%02x",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  *(unsigned __int8 *)(a2 + 1));
  }
  int v13 = *(unsigned __int16 *)(a2 + 2);
  if (v13 == 515)
  {
    LOWORD(__dst) = 0;
    int v52 = 0;
    sub_1003619AC((char *)(*a3 + 4LL), 2uLL, &__dst, 1);
    sub_1003619AC((char *)(*a3 + 6LL), 2uLL, (_BYTE *)&v52 + 2, 1);
    sub_1003619AC((char *)(*a3 + 8LL), 2uLL, &v52, 1);
    sub_10032C3DC( "Range Complete Event: status (0x%04x), session (%d), reason (0x%04x)",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  (unsigned __int16)__dst);
    switch((__int16)v52)
    {
      case 15:
        uint64_t v28 = "Range Complete Event occurred for reason LOCAL_SESSION_REMOVAL_SUCCESS";
        goto LABEL_22;
      case 16:
        uint64_t v28 = "Range Complete Event occurred for reason LOCAL_SESSION_DISABLE_SUCCESS";
        goto LABEL_22;
      case 17:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_COMPLETED";
        goto LABEL_22;
      case 18:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_ALREADY_ACTIVE";
        goto LABEL_22;
      case 19:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_ALREADY_DISABLED";
LABEL_22:
        sub_10032C3DC(v28, v21, v22, v23, v24, v25, v26, v27, v50);
        break;
      default:
        sub_10032C51C( "Range Complete Event occurred for reason (0x%04x)",  v21,  v22,  v23,  v24,  v25,  v26,  v27,  (unsigned __int16)v52);
        break;
    }

    goto LABEL_29;
  }

  if (*(_BYTE *)(a2 + 1) == 2)
  {
    if (v13 == 144)
    {
      HIWORD(v52) = 0;
      uint64_t __dst = 0LL;
      sub_1003619AC((char *)(*a3 + 4LL), 2uLL, (_BYTE *)&v52 + 2, 1);
      sub_1003619AC((char *)(*a3 + 6LL), 8uLL, &__dst, 1);
      if (HIWORD(v52) || __dst || !*(void *)(a1 + 1184))
      {
        sub_10032C51C( "Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)",  v43,  v44,  v45,  v46,  v47,  v48,  v49,  HIWORD(v52));
        goto LABEL_29;
      }

      sub_10032C3DC( "Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)",  v43,  v44,  v45,  v46,  v47,  v48,  v49,  0LL);
    }

    else
    {
      if (v13 != 128) {
        goto LABEL_29;
      }
      LOWORD(__dst) = 0;
      HIWORD(v52) = 0;
      sub_1003619AC((char *)(*a3 + 4LL), 2uLL, &__dst, 1);
      sub_1003619AC((char *)(*a3 + 6LL), 2uLL, (_BYTE *)&v52 + 2, 1);
      if ((_WORD)__dst || HIWORD(v52) != 32 || !*(void *)(a1 + 1184))
      {
        sub_10032C51C( "Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)",  v36,  v37,  v38,  v39,  v40,  v41,  v42,  (unsigned __int16)__dst);
        goto LABEL_29;
      }

      sub_10032C3DC( "Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)",  v36,  v37,  v38,  v39,  v40,  v41,  v42,  0LL);
    }

BOOL sub_1003678A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 192) + ((*(void *)(a1 + 216) >> 4) & 0xFFFFFFFFFFFFFF8LL))
       + 32 * (*(void *)(a1 + 216) & 0x7FLL);
    int v7 = *(_DWORD *)v6;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v6 + 4);
    *(_DWORD *)a2 = v7;
    if (v6 != a2) {
      sub_100178F70( (void *)(a2 + 8),  *(char **)(v6 + 8),  *(char **)(v6 + 16),  *(void *)(v6 + 16) - *(void *)(v6 + 8));
    }
    sub_10036D860((void *)(a1 + 184));
  }

  std::mutex::unlock(v4);
  return v5 != 0;
}

void sub_10036793C(_Unwind_Exception *a1)
{
}

double sub_100367950@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v21 = 0;
  int v20 = 0;
  __p[1] = 0LL;
  uint64_t v23 = 0LL;
  __p[0] = 0LL;
  do
  {
    if (sub_1003678A0(a1, (uint64_t)&v20))
    {
      if (HIWORD(v20) == a2 && BYTE1(v20) == (_DWORD)a3)
      {
        *(_DWORD *)a5 = v20;
        *(_WORD *)(a5 + 4) = v21;
        double result = *(double *)__p;
        *(_OWORD *)(a5 + std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)__p;
        *(void *)(a5 + 24) = v23;
        *(_BYTE *)(a5 + 32) = 1;
        return result;
      }

      sub_10032C51C( "waitForResponse: unexpected response at front of responseQueue: expected groupID %02x messageID %02x, got groupI D %02x messageID %02x",  v10,  v11,  v12,  v13,  v14,  v15,  v16,  a3);
    }

    if (a4 >= 10) {
      unsigned int v18 = 10;
    }
    else {
      unsigned int v18 = a4;
    }
    if (a4 < 1) {
      break;
    }
    __ns.__rep_ = 1000000LL * v18;
    std::this_thread::sleep_for (&__ns);
    a4 -= v18;
  }

  while (a4 >= 0);
  sub_10032C51C("Timed out waiting for response: groupID %02x messageId %02x", v10, v11, v12, v13, v14, v15, v16, a3);
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 32) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return result;
}

void sub_100367A78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100367A9C(uint64_t a1, unsigned __int8 *a2)
{
  int v8 = v12;
  if (v12)
  {
    sub_100355380((void *)(a1 + 504), (uint64_t)v10, (uint64_t *)__p, v3, v4, v5, v6, v7);
    if (v12)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return v8 != 0;
}

void sub_100367B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_100367B34(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  if ((char)a2[23] < 0)
  {
    size_t v7 = *((void *)a2 + 1);
    if (v7 > 0x1F) {
      goto LABEL_9;
    }
    __int128 __dst = 0u;
    __int128 v14 = 0u;
    a2 = *(unsigned __int8 **)a2;
    if (v7) {
LABEL_4:
    }
      memmove(&__dst, a2, v7);
  }

  else
  {
    size_t v7 = a2[23];
    if (a2[23] >= 0x20u)
    {
LABEL_9:
      *a4 = 0;
      a4[32] = 0;
      return;
    }

    __int128 __dst = 0u;
    __int128 v14 = 0u;
    if (v7) {
      goto LABEL_4;
    }
  }

  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)v12, 0x24uLL, 0LL, v8, v9, v10, v11))
  {
    *a4 = 0;
    a4[32] = 0;
  }

  else
  {
    sub_100367950(a1, 0, 0LL, a3, (uint64_t)a4);
  }

  std::mutex::unlock((std::mutex *)(a1 + 232));
}

void sub_100367C48(_Unwind_Exception *a1)
{
}

void sub_100367C64(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (v9 && !sub_10032A1C0((uint64_t)v7))
  {
    if (!v9) {
      sub_100006080();
    }
    sub_1003568D4(v8, __p);
    sub_10036CA48((void *)a3, (__int128 *)__p);
    sub_1000060F4((uint64_t)&v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + sub_1001ACE80(v1 + 112) = 0;
  }

  if (v9)
  {
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }

void sub_100367D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (*(_BYTE *)(v2 - 24))
  {
    uint64_t v4 = *(void **)(v2 - 48);
    if (v4)
    {
      *(void *)(v2 - 40) = v4;
      operator delete(v4);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100367D4C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)(a1 + 296))
  {
    int v20 = "connect to Rose before sending commands";
LABEL_15:
    sub_10032C51C(v20, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v21);
    return 1LL;
  }

  if (!a2 || a3 - 49 <= 0xFFFFFFFFFFFFFFD2LL)
  {
    __int16 v21 = "sendRoseCommand";
    int v20 = "%s: Invalid payload %zu";
    goto LABEL_15;
  }

  if (sub_10032A59C(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_100045754((uint64_t)v25);
    unsigned __int8 v12 = sub_100046B94(&v26, (uint64_t)"===========", 11LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
    uint64_t v13 = std::locale::use_facet((const std::locale *)&v24, &std::ctype<char>::id);
    uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
    std::locale::~locale((std::locale *)&v24);
    std::ostream::put(v12, v14);
    std::ostream::flush(v12);
    uint64_t v15 = sub_100046B94(&v26, (uint64_t)"TX Packet:", 10LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
    uint64_t v16 = std::locale::use_facet((const std::locale *)&v24, &std::ctype<char>::id);
    uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
    std::locale::~locale((std::locale *)&v24);
    std::ostream::put(v15, v17);
    std::ostream::flush(v15);
    std::stringbuf::str(&v24, &v27);
    sub_1000065CC(__p, "===========");
    sub_100361E98((uint64_t)&v24, a2, a3, 4u, (uint64_t)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    *(void *)((char *)v25
    uint64_t v26 = v18;
    std::streambuf::~streambuf(&v27);
    std::ios::~ios(&v28);
  }

  return sub_10032D458(a1 + 752, a2, a3, a4) ^ 1;
}

void sub_100367FA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18.__locale_);
  }
  sub_100045880((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_100367FFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)((char *)v23 + 7) = 0;
  v23[0] = 0LL;
  __int16 v21 = 0LL;
  v22[0] = 0LL;
  *(void *)((char *)v22 + 7) = 0LL;
  uint64_t v15 = *(void *)a2;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v18 = v15;
  int v19 = *(_DWORD *)(a2 + 8);
  if (&v18 != (uint64_t *)a2) {
    sub_10018953C( (char *)&__p,  *(char **)(a2 + 16),  *(void *)(a2 + 24),  (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 1);
  }
  LODWORD(v23[0]) = *(_DWORD *)(a2 + 40);
  BYTE4(v23[0]) = *(_BYTE *)(a2 + 44);
  BYTE5(v23[0]) = *(_BYTE *)(a2 + 48);
  HIWORD(v23[0]) = *(_WORD *)(a2 + 46);
  int v16 = sub_1003680E8(a1, (unsigned __int16 *)&v18, 2000LL, v10, v11, v12, v13, v14);
  if (__p)
  {
    __int16 v21 = __p;
    operator delete(__p);
  }

  return v16 == 0;
}

void sub_1003680CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003680E8( uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  sub_10032C3DC("%s", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendRangingConfigCommandPacket");
  std::stringbuf v54 = 0LL;
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  int v18 = *((_DWORD *)sub_100005150() + 187);
  if (!v18)
  {
    sub_10032C51C("RangingConfig unknown HSI version", v11, (uint64_t)v12, v13, v14, v15, v16, v17, v45);
    goto LABEL_10;
  }

  if (v18 != 1)
  {
    if (v18 == 2)
    {
      uint64_t v19 = sub_1003623A0((uint64_t)a2, &v54, v12, v13, v14, v15, v16, v17);
      goto LABEL_7;
    }

void sub_100368290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 4std::ostream::~ostream(v1, v2 + 8) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_1003682E8(uint64_t a1, uint64_t a2)
{
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  return sub_10036832C(a1, v3, 2000) == 0;
}

uint64_t sub_10036832C(uint64_t a1, char *a2, int a3)
{
  uint64_t v13 = sub_100362608(a2, __dst);
  if ((_DWORD)v13) {
    return v13;
  }
  sub_10032C3DC("Sending RangingEnable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  char v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 0x16uLL, 0LL, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 2, 0LL, a3, (uint64_t)&v32);
    sub_10036CAD4((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_10032C3DC( "Ranging session enabled, sessionID %hu",  v19,  v20,  v21,  v22,  v23,  v24,  v25,  *(unsigned __int16 *)a2);
      sub_100355380((void *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      uint64_t v13 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("RangingEnable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }

  uint64_t v13 = 1LL;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }

  return v13;
}

void sub_100368498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_10000DE88(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003684E8(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  char v4 = *((_BYTE *)a2 + 2);
  return sub_100368524(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_100368524(uint64_t a1, char *a2, int a3)
{
  uint64_t v13 = sub_1003626F0(a2, __dst);
  if ((_DWORD)v13) {
    return v13;
  }
  sub_10032C3DC("Sending RangingDisable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  char v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 7uLL, 0LL, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 3, 0LL, a3, (uint64_t)&v32);
    sub_10036CAD4((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_10032C3DC( "Ranging session disabled, sessionID %hu",  v19,  v20,  v21,  v22,  v23,  v24,  v25,  *(unsigned __int16 *)a2);
      sub_100355380((void *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      uint64_t v13 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("RangingDisable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }

  uint64_t v13 = 1LL;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }

  return v13;
}

void sub_100368668( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_1003686A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v11 = *(_WORD *)a2;
  char v12 = *(_BYTE *)(a2 + 2);
  __int16 v13 = *(_WORD *)(a2 + 3);
  int v14 = *(_DWORD *)(a2 + 6);
  char v15 = *(_BYTE *)(a2 + 10);
  __int16 v16 = *(_WORD *)(a2 + 11);
  __int16 v17 = *(_WORD *)(a2 + 14);
  char v18 = *(_BYTE *)(a2 + 16);
  __int16 v19 = *(_WORD *)(a2 + 18);
  char v20 = *(_BYTE *)(a2 + 20);
  char v21 = *(_BYTE *)(a2 + 21);
  __int16 v22 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v23 = *(void *)(a2 + 24);
  int v24 = *(_DWORD *)(a2 + 32);
  __int16 v25 = *(_WORD *)(a2 + 36);
  uint64_t v26 = *(void *)(a2 + 40);
  return sub_1003687A4(a1, (char *)&v11, 2000LL) == 0;
}

uint64_t sub_1003687A4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v13 = sub_1003627B0(a2, __dst);
  if ((_DWORD)v13) {
    return v13;
  }
  sub_10032C3DC( "Sending test NMI range enable command, sessionID %hu",  v6,  v7,  v8,  v9,  v10,  v11,  v12,  *(unsigned __int16 *)a2);
  v38[0] = 0;
  char v40 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  int v37 = 0;
  uint64_t v13 = sub_1003689F8(a1, __dst, 0x56uLL, a3, &v37, v15, v16, v17);
  if ((_DWORD)v13)
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_19;
  }

  int v18 = v37;
  if (v37 >= 2)
  {
    do
    {
      sub_100367950(a1, 1, 4LL, a3, (uint64_t)&v33);
      sub_10036CAD4((uint64_t)v38, &v33);
      if (v36 && __p)
      {
        char v35 = __p;
        operator delete(__p);
      }
    }

    while (v18-- > 2);
    int v37 = 1;
    goto LABEL_13;
  }

  if (v37 == 1)
  {
LABEL_13:
    sub_100367950(a1, 96, 0LL, a3, (uint64_t)&v33);
    sub_10036CAD4((uint64_t)v38, &v33);
    if (v36 && __p)
    {
      char v35 = __p;
      operator delete(__p);
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (v40)
  {
    sub_10032C3DC( "Test NMI ranging session enabled, sessionID %hu",  v20,  v21,  v22,  v23,  v24,  v25,  v26,  *(unsigned __int16 *)a2);
    sub_100355380((void *)(a1 + 504), (uint64_t)v38, (uint64_t *)v39, v27, v28, v29, v30, v31);
    uint64_t v13 = 0LL;
  }

  else
  {
    sub_10032C51C("TestNMIRangeEnable response failed", v20, v21, v22, v23, v24, v25, v26, v32);
    uint64_t v13 = 1LL;
  }

void sub_100368990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
  if (a2) {
    sub_10000DE88(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003689F8( uint64_t a1, const void *a2, size_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  if (!*(_BYTE *)(a1 + 296))
  {
    char v36 = "connect to Rose before sending multi-part commands";
LABEL_29:
    sub_10032C51C(v36, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v39);
    return 1LL;
  }

  if (!a2 || a3 - 137 <= 0xFFFFFFFFFFFFFFA7LL)
  {
    uint64_t v39 = "sendRoseMultiPartCommand";
    char v36 = "%s: Invalid payload %zu";
    goto LABEL_29;
  }

  unsigned int v11 = a4;
  LOBYTE(v46[0]) = 0;
  sub_10016C2CC(v52, a3, v46);
  memmove(v52[0], a2, a3);
  sub_100361A0C((uint64_t)v52, (uint64_t *)&v50);
  char v40 = a5;
  if (sub_10032A59C(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_100045754((uint64_t)v46);
    uint64_t v13 = sub_100046B94(&v47, (uint64_t)"==================", 18LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
    int v14 = std::locale::use_facet((const std::locale *)&v45, &std::ctype<char>::id);
    uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
    std::locale::~locale((std::locale *)&v45);
    std::ostream::put(v13, v15);
    std::ostream::flush(v13);
    uint64_t v16 = sub_100046B94(&v47, (uint64_t)"TX Packet (orig):", 17LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24LL)));
    uint64_t v17 = std::locale::use_facet((const std::locale *)&v45, &std::ctype<char>::id);
    uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
    std::locale::~locale((std::locale *)&v45);
    std::ostream::put(v16, v18);
    std::ostream::flush(v16);
    std::stringbuf::str(&v45, &v48);
    sub_1000065CC(__p, "==================");
    sub_100361E98((uint64_t)&v45, (uint64_t)a2, a3, 4u, (uint64_t)__p);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    *(void ***)((char *)v46
    uint64_t v47 = v19;
    std::streambuf::~streambuf(&v48);
    std::ios::~ios(v49);
  }

  uint64_t v20 = v50;
  uint64_t v21 = (uint64_t *)v51;
  if (v50 == (uint64_t *)v51)
  {
    uint64_t v35 = (uint64_t)v50;
LABEL_31:
    uint64_t v37 = 0LL;
    _DWORD *v40 = -1431655765 * ((unint64_t)(v35 - (void)v20) >> 3);
  }

  else
  {
    while (1)
    {
      if (sub_10032A59C(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_100045754((uint64_t)v46);
        uint64_t v27 = sub_100046B94(&v47, (uint64_t)"===================", 19LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
        uint64_t v28 = std::locale::use_facet((const std::locale *)&v45, &std::ctype<char>::id);
        uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
        std::locale::~locale((std::locale *)&v45);
        std::ostream::put(v27, v29);
        std::ostream::flush(v27);
        uint64_t v30 = sub_100046B94(&v47, (uint64_t)"TX Packet (split):", 18LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
        uint64_t v31 = std::locale::use_facet((const std::locale *)&v45, &std::ctype<char>::id);
        uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
        std::locale::~locale((std::locale *)&v45);
        std::ostream::put(v30, v32);
        std::ostream::flush(v30);
        std::stringbuf::str(&v45, &v48);
        uint64_t v34 = *v20;
        uint64_t v33 = v20[1];
        sub_1000065CC(__p, "===================");
        sub_100361E98((uint64_t)&v45, v34, (v33 - v34), 4u, (uint64_t)__p);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        v46[0] = v22;
        *(void ***)((char *)v46 + (void)*(v22 - 3)) = v42;
        uint64_t v47 = v41;
        std::streambuf::~streambuf(&v48);
        std::ios::~ios(v49);
      }

      if (v11)
      {
        v45.__r_.__value_.__r.__words[0] = 1000000LL * v11;
        std::this_thread::sleep_for ((const std::chrono::nanoseconds *)&v45);
      }

      v20 += 3;
      if (v20 == v21)
      {
        uint64_t v20 = v50;
        uint64_t v35 = v51;
        goto LABEL_31;
      }
    }

    uint64_t v37 = 1LL;
  }

  v46[0] = (void **)&v50;
  sub_10011E3B8(v46);
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }

  return v37;
}

void sub_100368EE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, std::locale a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23.__locale_);
  }
  sub_100045880((uint64_t)&a29);
  a29 = v29 - 136;
  sub_10011E3B8((void ***)&a29);
  uint64_t v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(void *)(v29 - 104) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100368FA0(uint64_t a1, char **a2)
{
  std::stringbuf::string_type __p = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  int v3 = sub_100369034(a1, &__p, 2000);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }

  return v3 == 0;
}

void sub_100369018( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100369034(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v5 = sub_1003629D0(a2, (unint64_t *)&v23);
  if (!(_DWORD)v5)
  {
    v20[0] = 0;
    char v22 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_100367D4C(a1, (uint64_t)v23, v24 - v23, 0LL, v6, v7, v8, v9))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      uint64_t v5 = 1LL;
      goto LABEL_13;
    }

    sub_100367950(a1, 4, 0LL, a3, (uint64_t)&v16);
    sub_10036CAD4((uint64_t)v20, &v16);
    if (v19 && __p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v22) {
      goto LABEL_4;
    }
    sub_100355380((void *)(a1 + 504), (uint64_t)v20, (uint64_t *)v21, v10, v11, v12, v13, v14);
    if (v22 && v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }

    uint64_t v5 = 0LL;
  }

void sub_100369150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 4std::ostream::~ostream(v1, v2 + 8) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(exception_object);
}

void sub_1003691A8(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  v15[0] = 0;
  char v18 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__p, v20 - (_BYTE *)__p, 0LL, v7, v8, v9, v10))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 4, 0LL, a3, (uint64_t)&v11);
    sub_10036CAD4((uint64_t)v15, &v11);
    if (v14 && v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v18)
    {
LABEL_4:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      goto LABEL_7;
    }

    *(void *)a4 = 0LL;
    *(void *)(a4 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    sub_1001309C0((void *)a4, v16, (uint64_t)v17, v17 - (_BYTE *)v16);
    *(_BYTE *)(a4 + 24) = 1;
    if (v18 && v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }

void sub_10036930C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20)
{
  if (a18 && __p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  char v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 4std::ostream::~ostream(v1, v2 + 8) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10036937C(uint64_t a1, uint64_t *a2)
{
  BOOL v3 = sub_100369414(a1, v5, 2000) == 0;
  uint64_t v6 = v5;
  sub_100130C0C((void ***)&v6);
  return v3;
}

void sub_1003693F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100130C0C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100369414(uint64_t a1, char **a2, int a3)
{
  uint64_t v6 = a1 + 504;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &off_1007BF670;
  v7[1] = sub_100355380;
  void v7[2] = 0LL;
  v7[3] = v6;
  uint64_t v13 = v7;
  uint64_t v8 = sub_1003695C8(a1, a2, (uint64_t)v12, a3);
  uint64_t v9 = v13;
  if (v13 == v12)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v12;
    goto LABEL_5;
  }

  if (v13)
  {
    uint64_t v10 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  return v8;
}

void sub_1003694E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100369520(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v5 = sub_1003695C8(a1, v7, a3, 2000) == 0;
  uint64_t v8 = v7;
  sub_100130C0C((void ***)&v8);
  return v5;
}

void sub_1003695AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100130C0C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003695C8(uint64_t a1, char **a2, uint64_t a3, int a4)
{
  uint64_t v21 = 0LL;
  char v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v7 = sub_100362C0C(a2, (unint64_t *)&v21);
  if (!(_DWORD)v7)
  {
    v18[0] = 0;
    char v20 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_100367D4C(a1, (uint64_t)v21, v22 - v21, 0LL, v8, v9, v10, v11))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      uint64_t v7 = 1LL;
      goto LABEL_5;
    }

    sub_100367950(a1, 5, 0LL, a4, (uint64_t)&v14);
    sub_10036CAD4((uint64_t)v18, &v14);
    if (v17 && __p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v20) {
      goto LABEL_4;
    }
    uint64_t v13 = *(void *)(a3 + 24);
    if (!v13) {
      sub_10001EEF0();
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **))(*(void *)v13 + 48LL))(v13, v18, v19);
    if (v20 && v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }

void sub_100369700( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  char v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 4std::ostream::~ostream(v1, v2 + 8) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100369754(uint64_t a1, char *a2)
{
  return sub_100369778(a1, *a2, 2000) == 0;
}

uint64_t sub_100369778(uint64_t a1, char a2, int a3)
{
  char v31 = a2;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  int __src = 17490;
  sub_1000353EC((unint64_t *)&v28, 5uLL);
  BOOL v5 = sub_1003619AC((char *)&__src, 4uLL, v28, 1);
  sub_1003619AC(&v31, 1uLL, v5, 1);
  v24[0] = 0;
  char v26 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)v28, v29 - v28, 0LL, v6, v7, v8, v9))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 82, 1LL, a3, (uint64_t)&v20);
    sub_10036CAD4((uint64_t)v24, &v20);
    if (v23 && __p)
    {
      char v22 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v26)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v24, (uint64_t *)v25, v13, v14, v15, v16, v17);
      uint64_t v10 = 0LL;
      goto LABEL_9;
    }

    sub_10032C51C("no response from Rose for log request", v11, v12, v13, v14, v15, v16, v17, v19);
  }

  uint64_t v10 = 1LL;
LABEL_9:
  if (v26 && v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }

  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }

  return v10;
}

void sub_1003698CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 64);
  if (v21)
  {
    *(void *)(v19 - 56) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_100369928(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  return sub_10036995C(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_10036995C(uint64_t a1, char *a2, int a3)
{
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  int __src = 17492;
  sub_1000353EC((unint64_t *)&v29, 6uLL);
  uint64_t v6 = sub_1003619AC((char *)&__src, 4uLL, v29, 1);
  uint64_t v7 = sub_1003619AC(a2 + 1, 1uLL, v6, 1);
  sub_1003619AC(a2, 1uLL, v7, 1);
  v25[0] = 0;
  char v27 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)v29, v30 - v29, 0LL, v8, v9, v10, v11))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 84, 1LL, a3, (uint64_t)&v21);
    sub_10036CAD4((uint64_t)v25, (int *)&v21);
    if (v24 && __p)
    {
      char v23 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v27)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v25, (uint64_t *)v26, v15, v16, v17, v18, v19);
      uint64_t v12 = 0LL;
      goto LABEL_9;
    }

    sub_10032C51C("no response from Rose for log config", v13, v14, v15, v16, v17, v18, v19, v21);
  }

  uint64_t v12 = 1LL;
LABEL_9:
  if (v27 && v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }

  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }

  return v12;
}

void sub_100369AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18 && __p) {
    operator delete(__p);
  }
  int v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(void *)(v18 - 4std::ostream::~ostream(v1, v2 + 8) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(exception_object);
}

void sub_100369B20( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v63 = 0LL;
  uint64_t valuePtr = 0LL;
  if (!*(_BYTE *)(a1 + 296))
  {
    sub_10032C51C("connect to Rose before timesync", a2, a3, a4, a5, a6, a7, a8, v63);
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 16) = 0;
    return;
  }

  uint64_t v11 = (std::mutex *)(a1 + 232);
  std::mutex::lock((std::mutex *)(a1 + 232));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    sub_10032C51C("failed to create time dictionary", v12, v13, v14, v15, v16, v17, v18, v63);
LABEL_16:
    char v62 = 0;
    *(_BYTE *)a9 = 0;
    goto LABEL_17;
  }

  if ((sub_10032D7B0(a1 + 752, (uint64_t)Mutable, v13, v14, v15, v16, v17, v18) & 1) == 0)
  {
    sub_10032C51C("timesync failed", v20, v21, v22, v23, v24, v25, v26, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }

  Value = (const __CFNumber *)CFDictionaryGetValue(Mutable, @"rose_time");
  uint64_t v35 = Value;
  if (!Value)
  {
    sub_10032C51C("failed to get rose time entry", v28, v29, v30, v31, v32, v33, v34, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }

  CFTypeID v36 = CFGetTypeID(Value);
  if (v36 != CFNumberGetTypeID())
  {
    sub_10032C51C("invalid type for rose time", v37, v38, v39, v40, v41, v42, v43, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }

  CFNumberGetValue(v35, kCFNumberLongLongType, &valuePtr);
  char v44 = (const __CFNumber *)CFDictionaryGetValue(Mutable, @"continuous_time");
  int v52 = v44;
  if (!v44)
  {
    sub_10032C51C("unable to get continuous time entry", v45, v46, v47, v48, v49, v50, v51, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }

  CFTypeID v53 = CFGetTypeID(v44);
  if (v53 != CFNumberGetTypeID())
  {
    sub_10032C51C("invalid type for mach time", v54, v55, v56, v57, v58, v59, v60, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }

  CFNumberGetValue(v52, kCFNumberLongLongType, &v63);
  CFRelease(Mutable);
  uint64_t v61 = valuePtr;
  *(void *)a9 = v63;
  *(void *)(a9 + std::ostream::~ostream(v1, v2 + 8) = v61;
  char v62 = 1;
LABEL_17:
  *(_BYTE *)(a9 + 16) = v62;
  std::mutex::unlock(v11);
}

void sub_100369CF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100369D0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v81 = 0;
  *(void *)a3 = 0LL;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(_DWORD *)(a3 + 16) = 0;
  if (!*(_BYTE *)(a1 + 296))
  {
    uint64_t v50 = "perform connect before FW load";
LABEL_12:
    sub_10032C51C(v50, a2, a3, a4, a5, a6, a7, a8, v78);
    return 0LL;
  }

  int v9 = a2;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0LL);
  *(void *)(a1 + 1184) = v11;
  if (!v11)
  {
    uint64_t v50 = "failed to create event semaphore";
    goto LABEL_12;
  }

  if ((sub_100369F98((uint64_t)v11, 0) & 1) == 0)
  {
    sub_10032C51C("failed to set CalDataPushed property to false", v12, v13, v14, v15, v16, v17, v18, v78);
    *(_BYTE *)(a3 + 1std::ostream::~ostream(v1, v2 + 8) = 1;
    dispatch_release(*(dispatch_object_t *)(a1 + 1184));
    uint64_t v49 = 0LL;
    *(void *)(a1 + 1184) = 0LL;
    return v49;
  }

  if (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) <= 0x4614FF81FFLL) {
    uint64_t v26 = 15000000000LL;
  }
  else {
    uint64_t v26 = 5000000000LL;
  }
  sub_10032C124( "uwb init done timeout = %llu ns, cal event timeout = %llu ns, time since system boot = %llu s",  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26);
  if ((sub_10032D270(a1 + 752, (_DWORD *)a3, v27, v28, v29, v30, v31, v32) & 1) == 0)
  {
    sub_10032C51C("firmware download failed", v33, v34, v35, v36, v37, v38, v39, v79);
LABEL_15:
    uint64_t v49 = 0LL;
    goto LABEL_16;
  }

  uint64_t v40 = *(dispatch_semaphore_s **)(a1 + 1184);
  dispatch_time_t v41 = dispatch_time(0LL, v26);
  if (dispatch_semaphore_wait(v40, v41))
  {
    sub_10032C51C("timeout on uwb init done event", v42, v43, v44, v45, v46, v47, v48, v79);
    uint64_t v49 = 0LL;
    *(_BYTE *)(a3 + 17) = 1;
    goto LABEL_16;
  }

  if (v9)
  {
    uint64_t v52 = sub_10032D348(a1 + 752, 4LL, &v81, 0LL, 0LL, a3, v47, v48);
    char v60 = v52;
    if ((v52 & 1) == 0) {
      sub_10032C51C("failed to load calibration", v53, v54, v55, v56, v57, v58, v59, v79);
    }
    if (v81)
    {
      for (unsigned int i = 0; i < v81; ++i)
      {
        char v62 = *(dispatch_semaphore_s **)(a1 + 1184);
        dispatch_time_t v63 = dispatch_time(0LL, v26);
        uint64_t v52 = dispatch_semaphore_wait(v62, v63);
        if (v52)
        {
          sub_10032C51C("timeout on calibration event", v64, v65, v66, v67, v68, v69, v70, v79);
          char v60 = 0;
          *(_BYTE *)(a3 + 16) = 1;
        }
      }
    }

    if ((v60 & 1) == 0)
    {
      uint64_t v49 = v60 & 1;
      goto LABEL_16;
    }

    uint64_t v49 = 1LL;
    if ((sub_100369F98(v52, 1) & 1) == 0)
    {
      sub_10032C51C("failed to set CalDataPushed property to true", v71, v72, v73, v74, v75, v76, v77, v79);
      *(_BYTE *)(a3 + 19) = 1;
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v49 = 1LL;
  }

uint64_t sub_100369F98(uint64_t a1, char a2)
{
  char inputStruct = a2;
  io_connect_t connect = 0;
  strcpy(cStr, "rose-supervisor");
  int v9 = IOServiceMatching("AppleSPUInterface");
  if (!v9)
  {
    sub_10032C51C("Failed to create a matching dictionary", v2, v3, v4, v5, v6, v7, v8, (uint64_t)outputStruct);
    CFStringRef v19 = 0LL;
    goto LABEL_10;
  }

  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v9);
  CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  CFStringRef v19 = v11;
  if (MutableCopy) {
    BOOL v20 = v11 == 0LL;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
    sub_10032C51C("Unable to create CF Objects", v12, v13, v14, v15, v16, v17, v18, (uint64_t)outputStruct);
    if (!MutableCopy)
    {
LABEL_22:
      uint64_t v21 = 0LL;
      goto LABEL_23;
    }

    CFRelease(MutableCopy);
LABEL_10:
    uint64_t v21 = 0LL;
    LODWORD(MutableCopy) = 0;
    goto LABEL_23;
  }

  CFDictionarySetValue(MutableCopy, @"IONameMatch", v11);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, MutableCopy);
  LODWORD(MutableCopy) = MatchingService;
  if (!MatchingService)
  {
    uint64_t v39 = "Can't find the rose-supervisor service";
LABEL_21:
    sub_10032C51C(v39, v23, v24, v25, v26, v27, v28, v29, (uint64_t)outputStruct);
    goto LABEL_22;
  }

  uint64_t v37 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
  if ((_DWORD)v37) {
    BOOL v38 = 1;
  }
  else {
    BOOL v38 = connect == 0;
  }
  if (v38)
  {
    sub_10032C51C("Unable to open rose-supervisor service: 0x%X", v30, v31, v32, v33, v34, v35, v36, v37);
    goto LABEL_22;
  }

  uint64_t input = 213LL;
  uint64_t v21 = 1LL;
  uint64_t v40 = (void *)IOConnectCallMethod(connect, 1u, &input, 1u, &inputStruct, 1uLL, 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)v40)
  {
    outputStruct = v40;
    uint64_t v39 = "Error while trying to set the CalDataPushed property: 0x%X";
    goto LABEL_21;
  }

void sub_10036A18C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 1184));
  *(void *)(v1 + 1184) = 0LL;
}

uint64_t sub_10036A1B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 296))
  {
    uint64_t v15 = sub_10032D1C0(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
    if (v15) {
      sub_10032C3DC("successfully gathered rose preflight info", v8, v9, v10, v11, v12, v13, v14, v17);
    }
    else {
      sub_10032C51C("getting chip preflight info failed", v8, v9, v10, v11, v12, v13, v14, v17);
    }
  }

  else
  {
    sub_10032C51C("connect to Rose before querying preflight info", a2, a3, a4, a5, a6, a7, a8, v17);
    return 0LL;
  }

  return v15;
}

uint64_t sub_10036A218( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)(a1 + 296))
  {
    uint64_t v17 = "connect to Rose before querying chip info";
LABEL_8:
    sub_10032C51C(v17, a2, a3, a4, a5, a6, a7, a8, v18);
    return 0LL;
  }

  if (a2)
  {
    if ((sub_10032D5F4(a1 + 752, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    {
      sub_10032C3DC( "boardID: 0x%04hx chipID: 0x%04hx ECID: 0x%016llx",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  *(unsigned __int16 *)(a2 + 10));
      sub_10032C3DC( "bootMode: 0x%x prodMode: 0x%x secureMode: 0x%x securityDomain: 0x%x",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  *(unsigned int *)(a2 + 12));
      return 1LL;
    }

    uint64_t v17 = "getting chip info failed";
    goto LABEL_8;
  }

  sub_10032C51C("%s: invalid parameter", 0LL, a3, a4, a5, a6, a7, a8, (uint64_t)"getChipInfo");
  return 0LL;
}

uint64_t sub_10036A2D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)(a1 + 296))
  {
    sub_10032C51C("connect to Rose before resetting chip", a2, a3, a4, a5, a6, a7, a8, v36);
    return 0LL;
  }

  uint64_t v9 = sub_100005150();
  if (sub_100355268((uint64_t)v9))
  {
    uint64_t v16 = 0LL;
    __ns.__rep_ = 200000000LL;
    std::this_thread::sleep_for (&__ns);
  }

  uint64_t v17 = sub_100005150();
  if (sub_1003552C4((uint64_t)v17))
  {
    if (sub_10036A3D0(a1))
    {
      __ns.__rep_ = 70000000LL;
      std::this_thread::sleep_for (&__ns);
      uint64_t v32 = "successfully applied reset glitch workaround, proceeding with reset";
    }

    else
    {
      uint64_t v32 = "failed to apply reset glitch workaround, proceeding with reset anyway";
    }

    sub_10032C3DC(v32, v25, v26, v27, v28, v29, v30, v31, v36);
  }

  uint64_t v33 = a1 + 752;
  int v34 = 5;
  do
  {
    uint64_t v16 = sub_10032D024(v33, v18, v19, v20, v21, v22, v23, v24);
    if ((v16 & 1) != 0) {
      break;
    }
    __ns.__rep_ = 20000000LL;
    std::this_thread::sleep_for (&__ns);
    --v34;
  }

  while (v34);
  return v16;
}

BOOL sub_10036A3D0(uint64_t a1)
{
  dispatch_time_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  int __src = 16496;
  sub_1000353EC((unint64_t *)&v41, 4uLL);
  uint64_t v2 = v41;
  sub_10032C3DC("send out GPIO power switch disable command", v3, v4, v5, v6, v7, v8, v9, v31);
  sub_1003619AC((char *)&__src, 4uLL, v2, 1);
  v37[0] = 0;
  char v39 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)v41, v42 - v41, 0x100000096LL, v10, v11, v12, v13))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 112, 0LL, 150, (uint64_t)&v33);
    sub_10036CAD4((uint64_t)v37, &v33);
    if (v36 && __p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v39)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v37, (uint64_t *)v38, v17, v18, v19, v20, v21);
      unsigned __int16 v22 = sub_10035712C((uint64_t *)v38);
      sub_10032C3DC( "received GPIO power switch disable response with status 0x%04hx",  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v22);
      BOOL v14 = v22 == 0;
      goto LABEL_9;
    }

    sub_10032C51C("timed out waiting for GPIO power switch disable response", v15, v16, v17, v18, v19, v20, v21, v32);
  }

  BOOL v14 = 0LL;
LABEL_9:
  if (v39 && v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }

  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }

  return v14;
}

void sub_10036A53C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a20 && __p) {
    operator delete(__p);
  }
  unsigned __int16 v22 = *(void **)(v20 - 40);
  if (v22)
  {
    *(void *)(v20 - 32) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10036A5A4( uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10035E548(a1 + 1040, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10036A5AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10032DCFC(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
}

CFDataRef sub_10036A5B4(uint64_t a1)
{
  if (!*((_DWORD *)sub_100005150() + 186))
  {
    uint64_t v17 = "querying chip public key isn't supported for R1";
LABEL_7:
    sub_10032C51C(v17, v2, v3, v4, v5, v6, v7, v8, v19);
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 296))
  {
    uint64_t v17 = "connect to Rose before querying chip public key";
    goto LABEL_7;
  }

  CFDataRef v16 = sub_10032E088(a1 + 752, v2, v3, v4, v5, v6, v7, v8);
  if (v16) {
    sub_10032C3DC("successfully gathered rose chip public key", v9, v10, v11, v12, v13, v14, v15, v19);
  }
  else {
    sub_10032C51C("getting chip public key failed", v9, v10, v11, v12, v13, v14, v15, v19);
  }
  return v16;
}

uint64_t sub_10036A634(uint64_t a1, void *a2, int a3, int a4)
{
  int v7 = *((_DWORD *)sub_100005150() + 187);
  if (v7 == 1)
  {
    uint64_t v44 = a2[1];
    if (*a2 == v44)
    {
      char v81 = 1;
    }

    else
    {
      uint64_t v45 = *a2 + 8LL;
      char v81 = 1;
      do
      {
        uint64_t v46 = *(const void **)(v45 - 8);
        char v91 = 0LL;
        uint64_t v92 = 0LL;
        uint64_t v93 = 0LL;
        sub_100030B3C(&v91, v46, (uint64_t)v46 + 23, 0x17uLL);
        if (a4)
        {
          uint64_t v47 = (char *)v91;
          if (v92 - (_BYTE *)v91 != 23) {
            __assert_rtn( "sendUwbTxPowerTable",  "libRose.cpp",  1660,  "r1PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v2_t)");
          }
          if (*(_BYTE *)v91 != 2) {
            __assert_rtn( "sendUwbTxPowerTable",  "libRose.cpp",  1662,  "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V2_VERSION");
          }
          sub_1000065CC(&v96, "UWB PwrTblMax before:\n");
          uint64_t v49 = v91;
          uint64_t v48 = v92;
          sub_1000065CC(&__p, "==========");
          sub_100361C98((uint64_t)&v96, (uint64_t)v49, v48 - v49, 0x10u, (uint64_t)&__p, &v83);
          if (SHIBYTE(v90) < 0) {
            operator delete(__p);
          }
          uint64_t v57 = &v83;
          if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v57 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
          }
          sub_10032C124("%s", v50, v51, v52, v53, v54, v55, v56, (uint64_t)v57);
          *(_DWORD *)(v47 + 14) = 5242960;
          *((_WORD *)v47 + 9) = 80;
          sub_1000065CC(&__p, "UWB PwrTblMax after:\n");
          uint64_t v59 = v91;
          uint64_t v58 = v92;
          sub_1000065CC(&v85, "==========");
          sub_100361C98((uint64_t)&__p, (uint64_t)v59, v58 - v59, 0x10u, (uint64_t)&v85, &v96);
          std::stringbuf::string_type v83 = v96;
          v96.__r_.__value_.__s.__size_ = 0;
          v96.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v87) < 0) {
            operator delete(v85);
          }
          if (SHIBYTE(v90) < 0) {
            operator delete(__p);
          }
          uint64_t v67 = &v83;
          if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v67 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
          }
          sub_10032C124("%s", v60, v61, v62, v63, v64, v65, v66, (uint64_t)v67);
        }

        v83.__r_.__value_.__s.__data_[0] = 31;
        uint64_t v84 = 0LL;
        *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
        sub_1001309C0(&v83.__r_.__value_.__l.__size_, v91, (uint64_t)v92, v92 - (_BYTE *)v91);
        v96.__r_.__value_.__s.__data_[0] = v83.__r_.__value_.__s.__data_[0];
        uint64_t v97 = 0LL;
        *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = 0uLL;
        sub_1001309C0( &v96.__r_.__value_.__l.__size_,  (const void *)v83.__r_.__value_.__l.__size_,  v83.__r_.__value_.__l.__cap_,  v83.__r_.__value_.__l.__cap_ - v83.__r_.__value_.__l.__size_);
        uint64_t v85 = 0LL;
        uint64_t v86 = 0LL;
        uint64_t v87 = 0LL;
        std::__fs::filesystem::directory_iterator v94 = &v85;
        char v95 = 0;
        uint64_t v85 = operator new(0x20uLL);
        uint64_t v86 = (uint64_t)v85;
        uint64_t v87 = (char *)v85 + 32;
        uint64_t v86 = sub_1001DFBF4((uint64_t)&v87, (uint64_t)&v96, (uint64_t)v98, (uint64_t)v85);
        uint64_t v89 = 0LL;
        uint64_t v90 = 0LL;
        std::stringbuf::string_type __p = 0LL;
        sub_1001DF8D4(&__p, (uint64_t)v85, v86, (v86 - (uint64_t)v85) >> 5);
        std::__fs::filesystem::directory_iterator v94 = &v85;
        sub_100130C0C(&v94);
        if (v96.__r_.__value_.__l.__size_)
        {
          v96.__r_.__value_.__l.__cap_ = v96.__r_.__value_.__l.__size_;
          operator delete((void *)v96.__r_.__value_.__l.__size_);
        }

        char v75 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64LL))(a1, &__p);
        if ((v75 & 1) != 0)
        {
          if (a3)
          {
            uint64_t v76 = operator new(1uLL);
            _BYTE *v76 = 31;
            memset(&v96, 0, sizeof(v96));
            sub_1001309C0(&v96, v76, (uint64_t)(v76 + 1), 1uLL);
            operator delete(v76);
            (*(void (**)(uint64_t, std::stringbuf::string_type *))(*(void *)a1 + 56LL))(a1, &v96);
            if (v96.__r_.__value_.__r.__words[0])
            {
              v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
              operator delete(v96.__r_.__value_.__l.__data_);
            }
          }
        }

        else
        {
          sub_10032C51C( "PRRose::setConfigParameters: failed to set power table",  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v79);
          char v81 = 0;
        }

        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_100130C0C((void ***)&v96);
        if (v83.__r_.__value_.__l.__size_)
        {
          v83.__r_.__value_.__l.__cap_ = v83.__r_.__value_.__l.__size_;
          operator delete((void *)v83.__r_.__value_.__l.__size_);
        }

        if (v91)
        {
          uint64_t v92 = v91;
          operator delete(v91);
        }

        if (v45 == v44) {
          char v77 = 0;
        }
        else {
          char v77 = v75;
        }
        v45 += 8LL;
      }

      while ((v77 & 1) != 0);
    }

    char v43 = v81 & 1;
    goto LABEL_82;
  }

  if (v7 != 2)
  {
    if (!v7)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "HSI version error");
    }

    goto LABEL_42;
  }

  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
LABEL_42:
    char v43 = 1;
LABEL_82:
    char v80 = v43;
    return v80 & 1;
  }

  uint64_t v10 = *a2 + 8LL;
  char v80 = 1;
  do
  {
    uint64_t v11 = *(const void **)(v10 - 8);
    char v91 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    sub_100030B3C(&v91, v11, (uint64_t)v11 + 33, 0x21uLL);
    if (a4)
    {
      uint64_t v12 = (char *)v91;
      if (v92 - (_BYTE *)v91 != 33) {
        __assert_rtn( "sendUwbTxPowerTable",  "libRose.cpp",  1693,  "r2PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v3_t)");
      }
      if (*(_BYTE *)v91 != 3) {
        __assert_rtn( "sendUwbTxPowerTable",  "libRose.cpp",  1696,  "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V3_VERSION");
      }
      sub_1000065CC(&v96, "UWB PwrTblMax before:\n");
      uint64_t v14 = v91;
      uint64_t v13 = v92;
      sub_1000065CC(&__p, "==========");
      sub_100361C98((uint64_t)&v96, (uint64_t)v14, v13 - v14, 0x10u, (uint64_t)&__p, &v83);
      if (SHIBYTE(v90) < 0) {
        operator delete(__p);
      }
      unsigned __int16 v22 = &v83;
      if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unsigned __int16 v22 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
      }
      sub_10032C124("%s", v15, v16, v17, v18, v19, v20, v21, (uint64_t)v22);
      *(void *)(v12 + 19) = 0x50005000500050LL;
      sub_1000065CC(&__p, "UWB PwrTblMax after:\n");
      uint64_t v24 = v91;
      uint64_t v23 = v92;
      sub_1000065CC(&v85, "==========");
      sub_100361C98((uint64_t)&__p, (uint64_t)v24, v23 - v24, 0x10u, (uint64_t)&v85, &v96);
      std::stringbuf::string_type v83 = v96;
      v96.__r_.__value_.__s.__size_ = 0;
      v96.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v87) < 0) {
        operator delete(v85);
      }
      if (SHIBYTE(v90) < 0) {
        operator delete(__p);
      }
      uint64_t v32 = &v83;
      if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v32 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
      }
      sub_10032C124("%s", v25, v26, v27, v28, v29, v30, v31, (uint64_t)v32);
    }

    v83.__r_.__value_.__s.__data_[0] = 41;
    uint64_t v84 = 0LL;
    *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
    sub_1001309C0(&v83.__r_.__value_.__l.__size_, v91, (uint64_t)v92, v92 - (_BYTE *)v91);
    v96.__r_.__value_.__s.__data_[0] = v83.__r_.__value_.__s.__data_[0];
    uint64_t v97 = 0LL;
    *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = 0uLL;
    sub_1001309C0( &v96.__r_.__value_.__l.__size_,  (const void *)v83.__r_.__value_.__l.__size_,  v83.__r_.__value_.__l.__cap_,  v83.__r_.__value_.__l.__cap_ - v83.__r_.__value_.__l.__size_);
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    uint64_t v87 = 0LL;
    std::__fs::filesystem::directory_iterator v94 = &v85;
    char v95 = 0;
    uint64_t v85 = operator new(0x20uLL);
    uint64_t v86 = (uint64_t)v85;
    uint64_t v87 = (char *)v85 + 32;
    uint64_t v86 = sub_1001DFBF4((uint64_t)&v87, (uint64_t)&v96, (uint64_t)v98, (uint64_t)v85);
    uint64_t v89 = 0LL;
    uint64_t v90 = 0LL;
    std::stringbuf::string_type __p = 0LL;
    sub_1001DF8D4(&__p, (uint64_t)v85, v86, (v86 - (uint64_t)v85) >> 5);
    std::__fs::filesystem::directory_iterator v94 = &v85;
    sub_100130C0C(&v94);
    if (v96.__r_.__value_.__l.__size_)
    {
      v96.__r_.__value_.__l.__cap_ = v96.__r_.__value_.__l.__size_;
      operator delete((void *)v96.__r_.__value_.__l.__size_);
    }

    char v40 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64LL))(a1, &__p);
    if ((v40 & 1) != 0)
    {
      if (a3)
      {
        dispatch_time_t v41 = operator new(1uLL);
        _BYTE *v41 = 41;
        memset(&v96, 0, sizeof(v96));
        sub_1001309C0(&v96, v41, (uint64_t)(v41 + 1), 1uLL);
        operator delete(v41);
        (*(void (**)(uint64_t, std::stringbuf::string_type *))(*(void *)a1 + 56LL))(a1, &v96);
        if (v96.__r_.__value_.__r.__words[0])
        {
          v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
          operator delete(v96.__r_.__value_.__l.__data_);
        }
      }
    }

    else
    {
      sub_10032C51C("PRRose::setConfigParameters: failed to set power table", v33, v34, v35, v36, v37, v38, v39, v79);
      char v80 = 0;
    }

    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_100130C0C((void ***)&v96);
    if (v83.__r_.__value_.__l.__size_)
    {
      v83.__r_.__value_.__l.__cap_ = v83.__r_.__value_.__l.__size_;
      operator delete((void *)v83.__r_.__value_.__l.__size_);
    }

    if (v91)
    {
      uint64_t v92 = v91;
      operator delete(v91);
    }

    if (v10 == v9) {
      char v42 = 0;
    }
    else {
      char v42 = v40;
    }
    v10 += 8LL;
  }

  while ((v42 & 1) != 0);
  return v80 & 1;
}

void sub_10036AE64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
}

uint64_t sub_10036AFF4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v46 = a3;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    sub_10032C51C( "libRose::sendNBTxPowerTable failure: NB power tables are empty",  (uint64_t)a2,  a3,  a4,  a5,  a6,  a7,  a8,  v45);
    char v47 = 0;
  }

  else
  {
    int v9 = a4;
    uint64_t v11 = *a2 + 8LL;
    char v47 = 1;
    do
    {
      uint64_t v12 = *(const void **)(v11 - 8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      uint64_t v57 = 0LL;
      sub_100030B3C(&v55, v12, (uint64_t)v12 + 18, 0x12uLL);
      if (v9)
      {
        uint64_t v13 = (char *)v55;
        if (v56 - (_BYTE *)v55 != 18) {
          __assert_rtn( "sendNBTxPowerTable",  "libRose.cpp",  1743,  "powerTableRow.size() == sizeof(set_cfg_nb_reg_tbl_entry_t)");
        }
        if (*(_BYTE *)v55 != 1) {
          __assert_rtn( "sendNBTxPowerTable",  "libRose.cpp",  1747,  "ptEntry->ver_type == SET_CFG_NB_REG_TBL_ENTRY_VERSION");
        }
        sub_1000065CC(&v60, "NB PwrTblMax before:\n");
        uint64_t v14 = v55;
        uint64_t v15 = v56;
        sub_1000065CC(__p, "==========");
        sub_100361C98((uint64_t)&v60, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p, &v48);
        if (SHIBYTE(v54) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v23 = &v48;
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v23 = (std::stringbuf::string_type *)v48.__r_.__value_.__r.__words[0];
        }
        sub_10032C124("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        *(_DWORD *)(v13 + 6) = 26214800;
        *(_DWORD *)(v13 + 14) = 26214800;
        sub_1000065CC(__p, "NB PwrTblMax after:\n");
        uint64_t v24 = v55;
        uint64_t v25 = v56;
        sub_1000065CC(&v50, "==========");
        sub_100361C98((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v50, &v60);
        std::stringbuf::string_type v48 = v60;
        v60.__r_.__value_.__s.__size_ = 0;
        v60.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v52) < 0) {
          operator delete(v50);
        }
        if (SHIBYTE(v54) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v33 = &v48;
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v33 = (std::stringbuf::string_type *)v48.__r_.__value_.__r.__words[0];
        }
        sub_10032C124("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
      }

      v48.__r_.__value_.__s.__data_[0] = 46;
      uint64_t v49 = 0LL;
      *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1001309C0(&v48.__r_.__value_.__l.__size_, v55, (uint64_t)v56, v56 - (_BYTE *)v55);
      v60.__r_.__value_.__s.__data_[0] = v48.__r_.__value_.__s.__data_[0];
      uint64_t v61 = 0LL;
      *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1001309C0( &v60.__r_.__value_.__l.__size_,  (const void *)v48.__r_.__value_.__l.__size_,  v48.__r_.__value_.__l.__cap_,  v48.__r_.__value_.__l.__cap_ - v48.__r_.__value_.__l.__size_);
      uint64_t v50 = 0LL;
      uint64_t v51 = 0LL;
      uint64_t v52 = 0LL;
      uint64_t v58 = &v50;
      char v59 = 0;
      uint64_t v50 = operator new(0x20uLL);
      uint64_t v51 = (uint64_t)v50;
      uint64_t v52 = (char *)v50 + 32;
      uint64_t v51 = sub_1001DFBF4((uint64_t)&v52, (uint64_t)&v60, (uint64_t)&v62, (uint64_t)v50);
      __p[1] = 0LL;
      uint64_t v54 = 0LL;
      __p[0] = 0LL;
      sub_1001DF8D4(__p, (uint64_t)v50, v51, (v51 - (uint64_t)v50) >> 5);
      uint64_t v58 = &v50;
      sub_100130C0C(&v58);
      if (v60.__r_.__value_.__l.__size_)
      {
        v60.__r_.__value_.__l.__cap_ = v60.__r_.__value_.__l.__size_;
        operator delete((void *)v60.__r_.__value_.__l.__size_);
      }

      char v41 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64LL))(a1, __p);
      if ((v41 & 1) != 0)
      {
        if (v46)
        {
          char v42 = operator new(1uLL);
          *char v42 = 46;
          memset(&v60, 0, sizeof(v60));
          sub_1001309C0(&v60, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, std::stringbuf::string_type *))(*(void *)a1 + 56LL))(a1, &v60);
          if (v60.__r_.__value_.__r.__words[0])
          {
            v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
            operator delete(v60.__r_.__value_.__l.__data_);
          }
        }
      }

      else
      {
        sub_10032C51C( "libRose::sendNBTxPowerTable: failed to set NB power table",  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v45);
        char v47 = 0;
      }

      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_100130C0C((void ***)&v60);
      if (v48.__r_.__value_.__l.__size_)
      {
        v48.__r_.__value_.__l.__cap_ = v48.__r_.__value_.__l.__size_;
        operator delete((void *)v48.__r_.__value_.__l.__size_);
      }

      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
      }

      if (v11 == v8) {
        char v43 = 0;
      }
      else {
        char v43 = v41;
      }
      v11 += 8LL;
    }

    while ((v43 & 1) != 0);
  }

  return v47 & 1;
}

void sub_10036B428( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }

  a18 = &a24;
  sub_100130C0C(&a18);
  if (__p) {
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10036B560( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v46 = a3;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    sub_10032C51C("libRose::sendNBSARTable: failure: NB SAR tables are empty", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v45);
    char v47 = 0;
  }

  else
  {
    int v9 = a4;
    uint64_t v11 = *a2 + 8LL;
    char v47 = 1;
    do
    {
      uint64_t v12 = *(const void **)(v11 - 8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      uint64_t v57 = 0LL;
      sub_100030B3C(&v55, v12, (uint64_t)v12 + 38, 0x26uLL);
      if (v9)
      {
        uint64_t v13 = (char *)v55;
        if (v56 - (_BYTE *)v55 != 38) {
          __assert_rtn( "sendNBSARTable",  "libRose.cpp",  1791,  "powerTableRow.size() == sizeof(set_cfg_nb_sar_tbl_entry_t)");
        }
        if (*(_BYTE *)v55 != 2) {
          __assert_rtn("sendNBSARTable", "libRose.cpp", 1795, "sarEntry->ver_type == SET_CFG_NB_SAR_TBL_ENTRY_VERSION");
        }
        sub_1000065CC(&v60, "NB SARTbl before:\n");
        uint64_t v14 = v55;
        uint64_t v15 = v56;
        sub_1000065CC(__p, "==========");
        sub_100361C98((uint64_t)&v60, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p, &v48);
        if (SHIBYTE(v54) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v23 = &v48;
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v23 = (std::stringbuf::string_type *)v48.__r_.__value_.__r.__words[0];
        }
        sub_10032C124("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        memset_pattern16(v13 + 6, &unk_1004280E0, 0x20uLL);
        sub_1000065CC(__p, "NB SARTbl after:\n");
        uint64_t v24 = v55;
        uint64_t v25 = v56;
        sub_1000065CC(&v50, "==========");
        sub_100361C98((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v50, &v60);
        std::stringbuf::string_type v48 = v60;
        v60.__r_.__value_.__s.__size_ = 0;
        v60.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v52) < 0) {
          operator delete(v50);
        }
        if (SHIBYTE(v54) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v33 = &v48;
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v33 = (std::stringbuf::string_type *)v48.__r_.__value_.__r.__words[0];
        }
        sub_10032C124("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
      }

      v48.__r_.__value_.__s.__data_[0] = 47;
      uint64_t v49 = 0LL;
      *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1001309C0(&v48.__r_.__value_.__l.__size_, v55, (uint64_t)v56, v56 - (_BYTE *)v55);
      v60.__r_.__value_.__s.__data_[0] = v48.__r_.__value_.__s.__data_[0];
      uint64_t v61 = 0LL;
      *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
      sub_1001309C0( &v60.__r_.__value_.__l.__size_,  (const void *)v48.__r_.__value_.__l.__size_,  v48.__r_.__value_.__l.__cap_,  v48.__r_.__value_.__l.__cap_ - v48.__r_.__value_.__l.__size_);
      uint64_t v50 = 0LL;
      uint64_t v51 = 0LL;
      uint64_t v52 = 0LL;
      uint64_t v58 = &v50;
      char v59 = 0;
      uint64_t v50 = operator new(0x20uLL);
      uint64_t v51 = (uint64_t)v50;
      uint64_t v52 = (char *)v50 + 32;
      uint64_t v51 = sub_1001DFBF4((uint64_t)&v52, (uint64_t)&v60, (uint64_t)&v62, (uint64_t)v50);
      __p[1] = 0LL;
      uint64_t v54 = 0LL;
      __p[0] = 0LL;
      sub_1001DF8D4(__p, (uint64_t)v50, v51, (v51 - (uint64_t)v50) >> 5);
      uint64_t v58 = &v50;
      sub_100130C0C(&v58);
      if (v60.__r_.__value_.__l.__size_)
      {
        v60.__r_.__value_.__l.__cap_ = v60.__r_.__value_.__l.__size_;
        operator delete((void *)v60.__r_.__value_.__l.__size_);
      }

      char v41 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64LL))(a1, __p);
      if ((v41 & 1) != 0)
      {
        if (v46)
        {
          char v42 = operator new(1uLL);
          *char v42 = 47;
          memset(&v60, 0, sizeof(v60));
          sub_1001309C0(&v60, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, std::stringbuf::string_type *))(*(void *)a1 + 56LL))(a1, &v60);
          if (v60.__r_.__value_.__r.__words[0])
          {
            v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
            operator delete(v60.__r_.__value_.__l.__data_);
          }
        }
      }

      else
      {
        sub_10032C51C("libRose::sendNBSARTable: failed to set NB SAR table", v34, v35, v36, v37, v38, v39, v40, v45);
        char v47 = 0;
      }

      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_100130C0C((void ***)&v60);
      if (v48.__r_.__value_.__l.__size_)
      {
        v48.__r_.__value_.__l.__cap_ = v48.__r_.__value_.__l.__size_;
        operator delete((void *)v48.__r_.__value_.__l.__size_);
      }

      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
      }

      if (v11 == v8) {
        char v43 = 0;
      }
      else {
        char v43 = v41;
      }
      v11 += 8LL;
    }

    while ((v43 & 1) != 0);
  }

  return v47 & 1;
}

void sub_10036B998( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }

  a18 = &a24;
  sub_100130C0C(&a18);
  if (__p) {
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10036BAD0(uint64_t a1, unsigned int a2)
{
  char v33 = a2;
  sub_10032C3DC("Updating NB SAR state: %u", v4, v5, v6, v7, v8, v9, v10, a2);
  v28[0] = 0;
  char v31 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 5uLL, 0LL, v13, v14, v15, v16))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 13, 0LL, 2000, (uint64_t)&v24);
    sub_10036CAD4((uint64_t)v28, &v24);
    if (v27 && v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v31) {
      return 1LL;
    }
    if (v30 - (_BYTE *)__p == 8)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v28, (uint64_t *)&__p, v19, v20, v21, v22, v23);
      uint64_t v11 = 0LL;
      goto LABEL_7;
    }

    sub_10032C51C( "Size of response: %zu for SAR state command is different from the expected size: %zu",  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v30 - (_BYTE *)__p);
  }

  uint64_t v11 = 1LL;
LABEL_7:
  if (v31 && __p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }

  return v11;
}

void sub_10036BC0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
  if (a21)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10036BC48(uint64_t a1, _BYTE *a2)
{
  return sub_10032DDFC(a1 + 752, a2);
}

uint64_t sub_10036BC50(uint64_t a1)
{
  return sub_10032DE84(a1 + 752);
}

BOOL sub_10036BC58(uint64_t a1, uint64_t a2)
{
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 2);
  return sub_10036BC94(a1, v3, 2000) == 0;
}

uint64_t sub_10036BC94(uint64_t a1, char *a2, int a3)
{
  uint64_t v12 = sub_100363018(a2, v42);
  if ((_DWORD)v12) {
    return v12;
  }
  sub_10032C3DC("Sending SleepEnable command", v5, v6, v7, v8, v9, v10, v11, v32);
  v38[0] = 0;
  char v41 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)v42, 0xAuLL, 0LL, v14, v15, v16, v17))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_14;
  }

  sub_100367950(a1, 6, 0LL, a3, (uint64_t)&__dst);
  sub_10036CAD4((uint64_t)v38, &__dst);
  if (v37 && __p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }

  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (!v41)
  {
LABEL_13:
    sub_10032C51C("Sleep Enable response failed", v18, v19, v20, v21, v22, v23, v24, v33);
    goto LABEL_14;
  }

  if (v40 - (_BYTE *)v39 != 6)
  {
    sub_10032C51C( "Size of response: %zu for sleep enable command is different from the expected size: %zu",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v40 - (_BYTE *)v39);
    goto LABEL_13;
  }

  sub_1003619AC((char *)v39 + 4, 2uLL, &__dst, 1);
  if (!(_WORD)__dst)
  {
    sub_10032C3DC("Sleep enable command completed successfully.", v25, v26, v27, v28, v29, v30, v31, v33);
    uint64_t v12 = 0LL;
    goto LABEL_15;
  }

  sub_10032C51C( "Error response for the sleep enable command: %d",  v25,  v26,  v27,  v28,  v29,  v30,  v31,  (unsigned __int16)__dst);
LABEL_14:
  uint64_t v12 = 1LL;
LABEL_15:
  if (v41 && v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }

  return v12;
}

void sub_10036BE30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
  if (a21)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10036BE8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = sub_100005150();
    if (sub_1003552C4((uint64_t)v10))
    {
      if (sub_10036A3D0(a1))
      {
        __ns.__rep_ = 70000000LL;
        std::this_thread::sleep_for (&__ns);
        uint64_t v18 = "successfully applied reset glitch workaround, proceeding with power off";
      }

      else
      {
        uint64_t v18 = "failed to apply reset glitch workaround, proceeding with power off anyway";
      }

      sub_10032C3DC(v18, v11, v12, v13, v14, v15, v16, v17, v30);
    }
  }

  uint64_t v19 = a1 + 752;
  if ((sub_10032DF2C(v19, a2, a3, a4, a5, a6, a7, a8) & 1) != 0) {
    return 1LL;
  }
  unsigned int v21 = 0;
  do
  {
    unsigned int v22 = v21;
    __ns.__rep_ = 20000000LL;
    std::this_thread::sleep_for (&__ns);
    if (v22 == 4) {
      break;
    }
    char v29 = sub_10032DF2C(v19, a2, v23, v24, v25, v26, v27, v28);
    unsigned int v21 = v22 + 1;
  }

  while ((v29 & 1) == 0);
  return v22 < 4;
}

uint64_t sub_10036BF60(uint64_t a1, BOOL *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v12 = Mutable;
    if ((sub_10032E020(a1 + 752, (uint64_t)Mutable, v6, v7, v8, v9, v10, v11) & 1) != 0)
    {
      if (CFDictionaryGetValueIfPresent(v12, @"RosePowerState", (const void **)&value))
      {
        if (CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v23 + 4))
        {
          *a2 = HIDWORD(v23) != 0;
          uint64_t v20 = 1LL;
LABEL_12:
          CFRelease(v12);
          return v20;
        }

        unsigned int v21 = "Failed to read RosePowerState value from the dictionary";
      }

      else
      {
        unsigned int v21 = "RosePowerState isn't present in the dictionary";
      }

      sub_10032C51C(v21, v13, v14, v15, v16, v17, v18, v19, v23);
      uint64_t v20 = 0LL;
      goto LABEL_12;
    }

    CFRelease(v12);
  }

  else
  {
    sub_10032C51C("Failed to create a dictionary", v5, v6, v7, v8, v9, v10, v11, v23);
  }

  return 0LL;
}

BOOL sub_10036C058( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10036C0A0(a1, (int)&v11, 2000) == 0;
}

uint64_t sub_10036C0A0(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = sub_100363198(a2, __dst);
  if ((_DWORD)v5) {
    return v5;
  }
  v23[0] = 0;
  char v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 4uLL, 0LL, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 83, 0LL, a3, (uint64_t)&v19);
    sub_10036CAD4((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      unsigned int v21 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      uint64_t v5 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("Alisha Get Cap command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }

  uint64_t v5 = 1LL;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }

  return v5;
}

void sub_10036C1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10036C1F4( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10032C3DC( "Sending Alisha Dbg Set Key command\n    UwbSesId = %u (0x%08x)\n    URSK     = 0x%02x%02x%02x%02x",  (uint64_t)a2,  a3,  a4,  a5,  a6,  a7,  a8,  *a2);
  int v11 = *a2;
  __int128 v12 = *(_OWORD *)(a2 + 1);
  __int128 v13 = *(_OWORD *)(a2 + 5);
  return sub_10036C2A8(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_10036C2A8(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_100363224(a2, __dst);
  if ((_DWORD)v5) {
    return v5;
  }
  v22[0] = 0;
  char v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 0x28uLL, 0LL, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 82, 0LL, a3, (uint64_t)&v18);
    sub_10036CAD4((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      uint64_t v5 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("Alisha Dbg Set Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }

  uint64_t v5 = 1LL;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }

  return v5;
}

void sub_10036C3EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10036C43C( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10032C3DC("Sending Alisha Get Key command\n    UwbSesId = %u (0x%08x)", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *a2);
  int v11 = *a2;
  return sub_10036C498(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_10036C498(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_1003632E8(a2, __dst);
  if ((_DWORD)v5) {
    return v5;
  }
  v22[0] = 0;
  char v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 8uLL, 0LL, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 81, 0LL, a3, (uint64_t)&v18);
    sub_10036CAD4((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      uint64_t v5 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("Alisha Get Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }

  uint64_t v5 = 1LL;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }

  return v5;
}

void sub_10036C5DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10036C62C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v14 = 0;
  int v13 = 0;
  sub_10032C3DC( "Sending Alisha Range Enable command\n SesId = %u\n SesRole = %u\n TxAntMask = %u\n RxAntMask = %u\n RxSyncSearchAntMask = %u\n Channel = %u\n Preamble = %u\n UwbSesId = %u (0x%08x)\n ResponderDevId = %u\n SelProtocolVersion = %u\n SelUwbCfgId = %u\n RanMultiplier = %u\n NchapsPerSlot = %u\n NslotsPerRound = %u\n Nresponders = %u\n ResponderStsIndex0 = %u\n ResponderHopKey = %u\n ResponderIdx = %u\n SelHopCfgBitmask = 0x%02x\n SelPulseShapeCombo = %u\n DebugFlags = %u\n StartTime = %llu\n",  *((unsigned __int8 *)a2 + 19),  *((unsigned __int8 *)a2 + 20),  *((unsigned __int8 *)a2 + 21),  *((unsigned __int8 *)a2 + 32),  *((unsigned __int8 *)a2 + 33),  *((unsigned __int8 *)a2 + 34),  a2[18],  *a2);
  __int16 v5 = *a2;
  int v6 = *(_DWORD *)(a2 + 1);
  unsigned __int16 v7 = a2[3];
  int v8 = *((_DWORD *)a2 + 2);
  unsigned __int16 v9 = a2[6];
  int v10 = *(_DWORD *)(a2 + 7);
  int v11 = *(_DWORD *)(a2 + 9);
  uint64_t v12 = *((void *)a2 + 3);
  LOWORD(v13) = a2[16];
  BYTE2(v13) = *((_BYTE *)a2 + 34);
  unsigned __int16 v14 = a2[18];
  uint64_t v15 = *((void *)a2 + 5);
  return sub_10036C784(a1, (char *)&v5, 2000) == 0;
}

uint64_t sub_10036C784(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_10036338C(a2, __dst);
  if ((_DWORD)v5) {
    return v5;
  }
  v23[0] = 0;
  char v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_100367D4C(a1, (uint64_t)__dst, 0x30uLL, 0LL, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }

  else
  {
    sub_100367950(a1, 80, 0LL, a3, (uint64_t)&v19);
    sub_10036CAD4((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      char v21 = __p;
      operator delete(__p);
    }

    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_100355380((void *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      uint64_t v5 = 0LL;
      goto LABEL_11;
    }

    sub_10032C51C("Alisha Range Enable command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }

  uint64_t v5 = 1LL;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }

  return v5;
}

void sub_10036C8C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10036C918(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }

  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)(v8 + 8);
        if (v10)
        {
          *(void *)(v8 + 16) = v10;
          operator delete(v10);
          uint64_t v7 = (uint64_t)*v6;
        }

        v8 += 32LL;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }

  *int v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 64LL;
  }

  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 128LL;
  }

  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_100030AF0((uint64_t)a1);
}

void *sub_10036CA48(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    void __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }

  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_1000064BC((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  *((_BYTE *)__dst + sub_1001ACE80(v1 + 112) = 1;
  return __dst;
}

void sub_10036CAB8(_Unwind_Exception *exception_object)
{
}

__n128 sub_10036CAD4(uint64_t a1, int *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      int v3 = *a2;
      *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
      *(_DWORD *)a1 = v3;
      result.n128_u64[0] = sub_10011B6E4(a1 + 8, (__n128 *)(a2 + 2)).n128_u64[0];
    }
  }

  else if (*(_BYTE *)(a1 + 32))
  {
    unint64_t v5 = *(void **)(a1 + 8);
    if (v5)
    {
      *(void *)(a1 + 16) = v5;
      operator delete(v5);
    }

    *(_BYTE *)(a1 + 32) = 0;
  }

  else
  {
    int v6 = *a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)a1 = v6;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    __n128 result = *(__n128 *)(a2 + 2);
    *(__n128 *)(a1 + std::ostream::~ostream(v1, v2 + 8) = result;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *((void *)a2 + 3) = 0LL;
    *(_BYTE *)(a1 + 32) = 1;
  }

  return result;
}

__n128 sub_10036CB84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007BF508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10036CBC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_10036CBEC(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[2];
  __int128 v4 = (uint64_t (*)(void *, uint64_t, void))a1[1];
  unint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0) {
    __int128 v4 = *(uint64_t (**)(void *, uint64_t, void))(*v5 + v4);
  }
  return v4(v5, a2, *a3);
}

uint64_t sub_10036CC0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10036CC48()
{
}

__n128 sub_10036CC5C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007BF5B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10036CC9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF5B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_10036CCC4(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10036CCE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10036CD1C()
{
}

uint64_t sub_10036CD28(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    __int128 v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }

  else
  {
    __int128 v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + std::ostream::~ostream(v1, v2 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }

  *__int128 v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85LL;
  }

  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170LL;
  }

  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_10036CE6C(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  int v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int v46 = a1 + 3;
      std::stringbuf::string_type __p = sub_1000472C0(v7, v11);
      char v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0xFF0uLL);
      sub_10011CB88(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              char v24 = (char *)sub_1000472C0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                char v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)char v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              uint64_t v31 = __p;
              std::stringbuf::string_type __p = v24;
              char v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }

              char v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              char v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      char v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::stringbuf::string_type __p = v36;
      char v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        std::stringbuf::string_type __p = operator new(0xFF0uLL);
        sub_10011C958(a1, &__p);
        uint64_t v34 = a1[2];
        std::stringbuf::string_type __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        std::stringbuf::string_type __p = operator new(0xFF0uLL);
      }

      sub_10011CA6C((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 85LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 170;
    std::stringbuf::string_type __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10011CA6C((uint64_t)a1, &__p);
  }

void sub_10036D138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10036D184(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10036D44C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10036D498(void *a1, int *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10036D54C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = *(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F);
  int v9 = *a2;
  *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v8 = v9;
  *(void *)(v8 + 16) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  __n128 result = *(__n128 *)(a2 + 2);
  *(__n128 *)(v8 + std::ostream::~ostream(v1, v2 + 8) = result;
  *(void *)(v8 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  ++a1[5];
  return result;
}

void sub_10036D54C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10036D814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10036D860(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v2 & 0x7F);
  unint64_t v4 = *(void **)(v3 + 8);
  if (v4)
  {
    *(void *)(v3 + 16) = v4;
    operator delete(v4);
    unint64_t v2 = a1[4];
  }

  uint64_t v5 = a1[5] - 1LL;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return sub_10030164C((uint64_t)a1, 1);
}

void sub_10036D8C4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003543BC(a1);
    if (a4 >> 59) {
      sub_10001E11C();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100130DA0(a1, v12);
    uint64_t v13 = sub_1001DF958(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }

  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_10036DA18((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = sub_1001DF958(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }

  sub_10036DA18((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(void *)(v18 - 16) = v19;
        operator delete(v19);
      }

      v18 -= 32LL;
    }

    while (v18 != v17);
  }

  a1[1] = v17;
}

void sub_10036DA08(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10036DA10(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10036DA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_BYTE *)a4 = *(_BYTE *)v5;
      if (v5 != a4) {
        sub_100178F70( (void *)(a4 + 8),  *(char **)(v5 + 8),  *(char **)(v5 + 16),  *(void *)(v5 + 16) - *(void *)(v5 + 8));
      }
      v5 += 32LL;
      a4 += 32LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

__n128 sub_10036DA90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007BF670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10036DAD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007BF670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_10036DAF8(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10036DB14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10036DB50()
{
}

uint64_t sub_10036DB5C(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = 0;
  char v7 = sub_100320704(a2);
  uint64_t v8 = a3[1];
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = *a3;
  *(_BYTE *)(a1 + 5) = v7;
  *(void *)(a1 + 16) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  sub_10037039C(a1 + 240);
  sub_10037039C(a1 + 320);
  sub_10037039C(a1 + 400);
  __int128 v11 = *(_OWORD *)(a4 + 48);
  void v14[2] = *(_OWORD *)(a4 + 32);
  void v14[3] = v11;
  uint64_t v15 = *(void *)(a4 + 64);
  __int128 v12 = *(_OWORD *)(a4 + 16);
  v14[0] = *(_OWORD *)a4;
  v14[1] = v12;
  sub_10037D4B8((uint64_t)v14);
  sub_10037D53C(0.01, 0.000000961703842, 0.0000000194955149, 1.0);
  return a1;
}

void sub_10036DC90(_Unwind_Exception *a1)
{
}

BOOL sub_10036DD04(uint64_t a1, double *a2)
{
  if (!*(_BYTE *)(a1 + 5)) {
    return 0LL;
  }
  if (!sub_10036DFD4(a1, a2))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1003ADD68();
    return 0LL;
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 160);
    do
    {
      sub_100373F10((uint64_t)(v4 + 3));
      double v7 = v6;
      if (v6 <= 0.0 || *a2 - v6 <= 3.0)
      {
        sub_100371E14((uint64_t)(v4 + 3), (void *)(a1 + 24));
      }

      else
      {
        uint64_t v8 = v26;
        if (v26 >= v27)
        {
          unint64_t v10 = __p;
          uint64_t v11 = (v26 - __p) >> 3;
          unint64_t v12 = v11 + 1;
          uint64_t v13 = v27 - __p;
          if ((v27 - __p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_1000472C0((uint64_t)&v27, v14);
            unint64_t v10 = __p;
            uint64_t v8 = v26;
          }

          else
          {
            uint64_t v15 = 0LL;
          }

          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v4[2];
          uint64_t v9 = v16 + 8;
          while (v8 != v10)
          {
            uint64_t v17 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }

          std::stringbuf::string_type __p = v16;
          uint64_t v27 = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }

        else
        {
          *(void *)uint64_t v26 = v4[2];
          uint64_t v9 = v26 + 8;
        }

        uint64_t v26 = v9;
        uint64_t v18 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = v4[2];
          double v20 = *a2;
          *(_DWORD *)std::string buf = 134218496;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v29 = 2048;
          double v30 = v7;
          __int16 v31 = 2048;
          double v32 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx - Last received measurement time is %f s, last IMU data time is %f s",  buf,  0x20u);
        }
      }

      uint64_t v4 = (void *)*v4;
    }

    while (v4);
    uint64_t v23 = __p;
    unint64_t v22 = v26;
    if (__p != v26)
    {
      uint64_t v24 = (void *)(a1 + 200);
      do
      {
        *(void *)std::string buf = *(void *)v23;
        sub_100370CF0(v5, (unint64_t *)buf);
        sub_100370C74(v24, (unint64_t *)buf);
        v23 += 8;
      }

      while (v23 != v26);
      unint64_t v22 = __p;
    }

    if (v22) {
      operator delete(v22);
    }
  }

  return 1LL;
}

void sub_10036DFA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t sub_10036DFD4(uint64_t a1, double *a2)
{
  uint64_t v4 = (int64x2_t *)(a1 + 24);
  if (!sub_100387778(a1 + 24))
  {
    unint64_t v5 = *(void *)(a1 + 112) + *(void *)(a1 + 104) - 1LL;
  }

  if (sub_10036F10C((void *)a1, a2)) {
    sub_10036EB4C(a1);
  }
  sub_10037021C((uint64_t)v9, (uint64_t)a2);
  sub_10036F2F4((double *)a1, (uint64_t)v9);
  sub_100387638(v4, v9);
  if (!*(_BYTE *)(a1 + 4)) {
    *(_BYTE *)(a1 + 4) = 1;
  }
  if (sub_10038799C((uint64_t)v4))
  {
    double v6 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = sub_10038799C((uint64_t)v4);
      sub_1003ADD94((void *)a1, buf, v7, v6);
    }
  }

  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }

  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }

  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }

  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }

  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }

  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }

  return 1LL;
}

void sub_10036E184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10036E1A4(unsigned int *a1, uint64_t **a2)
{
  if (*((_BYTE *)a1 + 5))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    if (v4 == *a2)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1003ADE28();
    }

    else
    {
      uint64_t v6 = *v3;
      unint64_t v48 = *v3;
      uint64_t v7 = v3;
      do
      {
        if (*v7 != v6)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_1003ADE80();
          return 0LL;
        }

        v7 += 19;
      }

      while (v7 != v4);
      if (*((double *)v3 + 6) >= 0.0)
      {
        if (*((_BYTE *)a1 + 4))
        {
          uint64_t v11 = (uint64_t)(a1 + 40);
          if (!sub_1002B003C((void *)a1 + 20, &v48))
          {
            uint64_t v19 = *a1;
            uint64_t v20 = v48;
            char v21 = (std::__shared_weak_count *)*((void *)a1 + 2);
            uint64_t v46 = *((void *)a1 + 1);
            uint64_t v47 = v21;
            if (v21)
            {
              p_shared_owners = (unint64_t *)&v21->__shared_owners_;
              do
                unint64_t v23 = __ldxr(p_shared_owners);
              while (__stxr(v23 + 1, p_shared_owners));
            }

            sub_100371E10(buf, v19, v20, &v46);
            uint64_t v49 = (uint64_t *)&v48;
            uint64_t v24 = sub_1003706A4((uint64_t)(a1 + 40), (uint64_t *)&v48, (uint64_t)&unk_1004242F8, &v49);
            __int128 v26 = v53;
            __int128 v25 = v54;
            __int128 v27 = v52;
            *(_OWORD *)(v24 + 7) = v51;
            *(_OWORD *)(v24 + 9) = v27;
            __int128 v29 = v57;
            __int128 v28 = v58;
            __int128 v30 = v56;
            *(_OWORD *)(v24 + 15) = v55;
            *(_OWORD *)(v24 + 17) = v30;
            char v31 = v62;
            __int128 v32 = v61;
            __int128 v33 = v59;
            *(_OWORD *)(v24 + 25) = v60;
            *(_OWORD *)(v24 + 23) = v33;
            *(_OWORD *)(v24 + 27) = v32;
            *((_BYTE *)v24 + 232) = v31;
            *(_OWORD *)(v24 + 19) = v29;
            *(_OWORD *)(v24 + 21) = v28;
            *(_OWORD *)(v24 + 11) = v26;
            *(_OWORD *)(v24 + 13) = v25;
            __int128 v34 = *(_OWORD *)&buf[16];
            *(_OWORD *)(v24 + 3) = *(_OWORD *)buf;
            *(_OWORD *)(v24 + 5) = v34;
            sub_10036F384((uint64_t)(v24 + 30));
            *((_OWORD *)v24 + 15) = v63;
            v24[32] = v64;
            int v35 = v70;
            __int128 v37 = v68;
            __int128 v36 = v69;
            __int128 v39 = v66;
            __int128 v38 = v67;
            *(_OWORD *)(v24 + 33) = v65;
            uint64_t v64 = 0LL;
            __int128 v63 = 0uLL;
            *(_OWORD *)(v24 + 39) = v37;
            *(_OWORD *)(v24 + 41) = v36;
            *((_DWORD *)v24 + 86) = v35;
            *(_OWORD *)(v24 + 35) = v39;
            *(_OWORD *)(v24 + 37) = v38;
            sub_10036F49C(v24 + 44, (uint64_t)v71);
            *((_DWORD *)v24 + 100) = v72;
            *((_BYTE *)v24 + 40std::ostream::~ostream(v1, v2 + 8) = v73;
            sub_10036F49C(v24 + 52, (uint64_t)v74);
            v24[58] = v74[6];
            sub_1002CBDC8((uint64_t)(v24 + 59), (uint64_t)&v75);
            sub_10000EE54((uint64_t)(v24 + 73), &v76);
            uint64_t v40 = (std::__shared_weak_count *)*((void *)&v76 + 1);
            if (*((void *)&v76 + 1))
            {
              char v41 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
              do
                unint64_t v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }

            char v75 = off_1007AED90;
            sub_1001302F0(v74);
            sub_1001302F0(v71);
            uint64_t v49 = (uint64_t *)&v63;
            sub_1001304C8((void ***)&v49);
            char v43 = v47;
            if (v47)
            {
              uint64_t v44 = (unint64_t *)&v47->__shared_owners_;
              do
                unint64_t v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
          }

          *(void *)std::string buf = &v48;
          unint64_t v12 = sub_1003706A4((uint64_t)(a1 + 40), (uint64_t *)&v48, (uint64_t)&unk_1004242F8, (void **)buf);
          sub_100371FF8((uint64_t)(v12 + 3), a2, (void *)a1 + 3);
          uint64_t v13 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = v48;
            *(void *)std::string buf = &v48;
            uint64_t v15 = sub_1003706A4(v11, (uint64_t *)&v48, (uint64_t)&unk_1004242F8, (void **)buf);
            double v16 = sub_100373EDC((uint64_t)(v15 + 3));
            *(void *)std::string buf = &v48;
            uint64_t v17 = sub_1003706A4(v11, (uint64_t *)&v48, (uint64_t)&unk_1004242F8, (void **)buf);
            sub_100373F10((uint64_t)(v17 + 3));
            *(_DWORD *)std::string buf = 134218496;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(double *)&buf[14] = v16;
            *(_WORD *)&_BYTE buf[22] = 2048;
            *(void *)&_BYTE buf[24] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: TargetID 0x%llx, measurement update t ime ranges from %f to %f after consuming current rose measurements",  buf,  0x20u);
          }

          return 1LL;
        }

        BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_1003ADE54();
      }

      else
      {
        uint64_t v8 = (os_log_s *)qword_1008000A0;
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0LL;
        if (!v9) {
          return result;
        }
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionManager: negative range measurement, return",  buf,  2u);
      }
    }
  }

  return 0LL;
}

void sub_10036E63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10036E668(uint64_t a1)
{
  *(void *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = off_1007AED90;
  sub_1001302F0((void *)(a1 + 392));
  sub_1001302F0((void *)(a1 + 328));
  uint64_t v3 = (void **)(a1 + 216);
  sub_1001304C8(&v3);
  return a1;
}

BOOL sub_10036E6C4(uint64_t a1, uint64_t **a2, unsigned __int16 a3)
{
  unsigned __int16 v22 = a3;
  uint64_t v5 = a1 + 24;
  BOOL v6 = sub_100387778(a1 + 24);
  uint64_t v7 = qword_1008000A0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    *(_WORD *)std::string buf = 0;
    BOOL v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: Empty IMU buffer";
    unint64_t v10 = (os_log_s *)v7;
    uint32_t v11 = 2;
  }

  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v12 = sub_10038799C(v5);
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(*(void *)(v13 + ((*(void *)(a1 + 104) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                    + 8 * (*(void *)(a1 + 104) & 0x1FFLL));
    uint64_t v15 = *(void *)(*(void *)(v13
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v24 = 2048;
    uint64_t v25 = v14;
    __int16 v26 = 2048;
    uint64_t v27 = v15;
    BOOL v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: IMU buffer size is %lu, time from %f to %f"
         " before measurement update";
    unint64_t v10 = (os_log_s *)v7;
    uint32_t v11 = 32;
  }

  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_7:
  BOOL v16 = sub_10036E1A4((unsigned int *)a1, a2);
  if (v16)
  {
    *(void *)std::string buf = *a2;
    uint64_t v17 = (uint64_t **)sub_1003709A4(a1 + 200, *(unint64_t **)buf, (uint64_t)&unk_1004242F8, (uint64_t **)buf);
    sub_10028E458(v17 + 3, &v22, &v22);
  }

  else
  {
    BOOL v18 = sub_100387778(v5);
    uint64_t v19 = (os_log_s *)qword_1008000A0;
    BOOL v20 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v20) {
        sub_1003ADEAC();
      }
    }

    else if (v20)
    {
      sub_1003ADED8(v5, (void *)a1, v19);
    }
  }

  return v16;
}

uint64_t sub_10036E8A4(void *a1, unsigned __int16 a2)
{
  unsigned __int16 v16 = a2;
  uint64_t v3 = a1 + 25;
  sub_100370D3C((uint64_t)v14, (uint64_t)(a1 + 25));
  uint64_t v4 = v15;
  if (!v15) {
    return sub_100130384((uint64_t)v14);
  }
  uint64_t v5 = a1 + 15;
  BOOL v6 = a1 + 20;
  do
  {
    uint64_t v7 = (uint64_t **)v4[4];
    if (!v7) {
      goto LABEL_14;
    }
    BOOL v8 = v4 + 2;
    while (1)
    {
      unsigned int v9 = *((unsigned __int16 *)v7 + 13);
      if (v16 >= v9) {
        break;
      }
LABEL_8:
      uint64_t v7 = (uint64_t **)*v7;
      if (!v7) {
        goto LABEL_14;
      }
    }

    if (v9 < v16)
    {
      ++v7;
      goto LABEL_8;
    }

    *(void *)std::string buf = v4 + 2;
    unint64_t v10 = sub_1003709A4((uint64_t)v3, v4 + 2, (uint64_t)&unk_1004242F8, (uint64_t **)buf);
    sub_100371074((uint64_t)(v10 + 3), &v16);
    if (!v10[5])
    {
      uint32_t v11 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *v8;
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx since it has no attached service left",  buf,  0xCu);
      }

      *(void *)std::string buf = *v8;
      sub_100370C40(v5, (unint64_t *)buf);
      sub_100370C74(v3, (unint64_t *)buf);
      *(void *)std::string buf = *v8;
      sub_100370CF0(v6, (unint64_t *)buf);
      sub_100370C74(v3, (unint64_t *)buf);
    }

void sub_10036EA64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10036EA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100370060(a2, (uint64_t)v6, (uint64_t)v5, *(_DWORD *)(a1 + 440));
}

void *sub_10036EADC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v4 = (void *)(a1 + 160);
  BOOL result = sub_1002B003C((void *)(a1 + 160), &v7);
  if (result)
  {
    BOOL v6 = sub_1002B003C(v4, &v7);
    if (!v6) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    return (void *)sub_100373F38((uint64_t)(v6 + 3), a3);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

BOOL sub_10036EB4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003ADFB0();
    }
  }

  else
  {
    *(_BYTE *)(a1 + 4) = 0;
    sub_100387810((void *)(a1 + 24));
    uint64_t v2 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionManager: IMU history is cleared.",  v4,  2u);
    }
  }

  return v1 == 0;
}

void sub_10036EBF4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v21 = a2;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  uint64_t v4 = a3 + 152;
  *(_BYTE *)(a3 + 200) = 0;
  if (!*(_BYTE *)(a1 + 4))
  {
    uint64_t v19 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)std::string buf = 134217984;
    unint64_t v23 = a2;
    BOOL v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: no motion state";
    goto LABEL_27;
  }

  BOOL v6 = (void *)(a1 + 160);
  if (!sub_1002B003C((void *)(a1 + 160), &v21))
  {
    uint64_t v19 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)std::string buf = 134217984;
    unint64_t v23 = v21;
    BOOL v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: RoseEstimatorArrayMap count is zero";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    return;
  }

  unint64_t v7 = sub_100046FEC(v6, &v21);
  if (!v7) {
    sub_100126B2C("unordered_map::at: key not found");
  }
  sub_100373964((uint64_t)(v7 + 3), (uint64_t)buf);
  sub_1001310D8(a3, (uint64_t)buf);
  __int128 v8 = v27;
  *(_OWORD *)uint64_t v4 = v26;
  *(_OWORD *)(v4 + 16) = v8;
  *(_OWORD *)(v4 + 32) = v28;
  *(_BYTE *)(v4 + 4std::ostream::~ostream(v1, v2 + 8) = v29;
  if (v25) {
    sub_100034A98((uint64_t)v24, v24[1]);
  }
  if (*(_BYTE *)(a3 + 144))
  {
    if (v21 != *(void *)(a3 + 8)) {
      __assert_rtn( "getSolutionAndInternalsFromTrackingTargetSet",  "RoseSensorFusionManager.cpp",  421,  "targetID == solution.ID");
    }
    double v10 = *(double *)(a3 + 48);
    double v9 = *(double *)(a3 + 56);
    BOOL v11 = v10 >= -145.0;
    if (v10 > 0.0) {
      BOOL v11 = 0;
    }
    if (v9 < -55.0) {
      BOOL v11 = 0;
    }
    BOOL v12 = v9 <= 55.0 && v11;
    double v13 = *(double *)a3;
    uint64_t v14 = sub_100046FEC(v6, &v21);
    if (!v14) {
      sub_100126B2C("unordered_map::at: key not found");
    }
    sub_100373F10((uint64_t)(v14 + 3));
    if (v13 - v15 <= 1.0 && v12)
    {
      uint64_t v17 = (unsigned __int16 *)sub_100046FEC((void *)(a1 + 200), &v21);
      if (v17)
      {
      }
    }

    else if (*(_BYTE *)(a3 + 144))
    {
      sub_100034A98(a3 + 16, *(void **)(a3 + 24));
      *(_BYTE *)(a3 + 144) = 0;
    }
  }

void sub_10036EEA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  if (*(_BYTE *)(v29 + 144)) {
    sub_100034A98(v29 + 16, *(void **)(v29 + 24));
  }
  _Unwind_Resume(exception_object);
}

void sub_10036EEF4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    uint64_t v4 = (void *)(a1 + 200);
    do
    {
      sub_100373964((uint64_t)(v2 + 3), (uint64_t)v14);
      if (v16)
      {
        sub_100387A84(v12);
        if (v2[2] != v12[1]) {
          __assert_rtn("getSolutionFromAllTrackingTargetSets", "RoseSensorFusionManager.cpp", 447, "targetId == sol.ID");
        }
        uint64_t v5 = v13[4];
        BOOL v6 = v13[5];
        double v7 = *(double *)v12;
        sub_100373F10((uint64_t)(v2 + 3));
        if (*(double *)&v6 <= 55.0
          && *(double *)&v6 >= -55.0
          && *(double *)&v5 >= -145.0
          && *(double *)&v5 <= 0.0
          && v7 - v8 <= 1.0)
        {
          double v9 = (unsigned __int16 *)sub_100046FEC(v4, v2 + 2);
          unint64_t v10 = a2[1];
          if (v10 >= a2[2])
          {
            uint64_t v11 = sub_100371358(a2);
          }

          else
          {
            sub_100387A84(a2[1]);
            uint64_t v11 = v10 + 144;
            a2[1] = v10 + 144;
          }

          a2[1] = v11;
        }

        sub_100034A98((uint64_t)v13, v13[1]);
        if (v16) {
          sub_100034A98((uint64_t)v15, v15[1]);
        }
      }

      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

void sub_10036F0B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void **a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
  *(void *)(v45 + std::ostream::~ostream(v1, v2 + 8) = v48;
  sub_100034A98(v47, a12);
  if (a45) {
    sub_100034A98(v46, a30);
  }
  a27 = (void **)v45;
  sub_100131C6C(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_10036F10C(void *a1, double *a2)
{
  unint64_t v5 = a1[14] + a1[13] - 1LL;
  return *a2 - *(double *)(*(void *)(a1[10] + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v5 & 0x1FF)) > 1.0;
}

BOOL sub_10036F180(double *a1, double **a2)
{
  return a1[39] < 0.025 && a1[49] < 0.025 && a1[59] < 0.025;
}

double sub_10036F208(uint64_t a1, double a2)
{
  double v9 = a2;
  if (*(void *)(a1 + 40)) {
    *(void *)(a1 + 56) = *(void *)(*(void *)(*(void *)(a1 + 8)
  }
                                                 + ((*(void *)(a1 + 32) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                                     + 8 * (*(void *)(a1 + 32) & 0x1FFLL));
  sub_1002FE7B8((void *)a1, &v9);
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0x33)
  {
    ++*(void *)(a1 + 32);
    *(void *)(a1 + 40) = v3 - 1;
    sub_100301000(a1, 1);
    unint64_t v3 = *(void *)(a1 + 40);
  }

  if (v3 == 50)
  {
    double v4 = *(double *)(*(void *)(*(void *)(a1 + 8)
    *(double *)(a1 + 64) = v4;
  }

  else
  {
    double v4 = *(double *)(a1 + 64);
  }

  double v5 = *(double *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  double v7 = v5 + (v4 - v6) / 50.0;
  *(double *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v7;
  double result = (v4 - v6) * (v6 + v4 - v7 - v5);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_10036F2F4(double *a1, uint64_t a2)
{
  std::stringbuf::string_type __p = 0LL;
  double v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_10011B560( &__p,  *(const void **)(a2 + 16),  *(void *)(a2 + 24),  (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (sub_10036F180(a1, (double **)&__p))
  {
    double v4 = *(void **)(a2 + 16);
    *double v4 = 0LL;
    v4[1] = 0LL;
    v4[2] = 0LL;
  }

  if (__p)
  {
    double v6 = __p;
    operator delete(__p);
  }

void sub_10036F368( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036F384(uint64_t a1)
{
  uint64_t v2 = *(char **)a1;
  if (v2)
  {
    unint64_t v3 = *(char **)(a1 + 8);
    if (v3 != v2)
    {
      double v4 = v3 - 1016;
      do
      {
        *((void *)v4 + 64) = off_1007AED90;
        *((void *)v4 + 53) = off_1007AED90;
        *((void *)v4 + 11) = off_1007AED90;
        *(void *)double v4 = off_1007AED90;
        double v5 = v4 - 464;
        v4 -= 1480;
      }

      while (v5 != v2);
    }

    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v2;
    operator delete(v2);
    *(void *)a1 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

void *sub_10036F3F0(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void *sub_10036F400(void *result)
{
  *double result = off_1007AED90;
  return result;
}

uint64_t sub_10036F414(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10036F420(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10036F470(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10036F47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10036F49C(void *a1, uint64_t a2)
{
  double v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0LL;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      double v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }

    while (v6 > 0x10);
  }

  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256LL;
    goto LABEL_7;
  }

  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512LL;
LABEL_7:
    a1[4] = v8;
  }

  sub_10036F53C(a1);
  uint64_t result = sub_10036F66C((uint64_t)a1, a2);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10036F53C(void *a1)
{
  if (a1[5])
  {
    sub_100301000((uint64_t)a1, 0);
    sub_100189FD8(a1, 0);
  }

  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = a1[2] - 8LL;
    }

    a1[4] = 0LL;
  }

  sub_10036F5AC((uint64_t)a1);
}

void sub_10036F5AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    if (v5 == v4)
    {
      unint64_t v10 = 0LL;
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = (char *)sub_1000472C0(v2, v6);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      unint64_t v10 = &v7[8 * v9];
      uint64_t v11 = v5 - v8;
      if (v5 != v8)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * (v11 >> 3);
        do
        {
          *(void *)&v7[v12] = *(void *)(v8 + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a1 + 16);
        goto LABEL_9;
      }
    }

    uint64_t v14 = v5;
LABEL_9:
    uint64_t v15 = v14 - v5;
    char v16 = *(void **)a1;
    *(void *)a1 = v7;
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
    *(void *)(a1 + 16) = &v7[v15];
    *(void *)(a1 + 24) = v10;
    if (v16) {
      operator delete(v16);
    }
  }

uint64_t sub_10036F66C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  sub_10036F5AC(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_10036F6D8(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      char v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v28);
          char v31 = &v29[8 * (v28 >> 2)];
          __int128 v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          __int128 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          char v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }

          __int128 v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10011C958(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_10011CA6C((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 511LL;
          }
          else {
            uint64_t v64 = 512LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        __int128 v66 = (char *)a1[2];
        do
        {
          __int128 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          __int128 v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v78);
              char v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              __int128 v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                __int128 v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                __int128 v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              char v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                __int128 v66 = (char *)a1[1];
              }

              char v77 = &v66[-8 * (v74 >> 1)];
              __int128 v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)__int128 v66 = v69;
          __int128 v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      char v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_10011CB88(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        __int128 v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000472C0((uint64_t)v91, v48);
              __int128 v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int128 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int128 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              __int128 v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          __int128 v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      __int128 v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_10011CC9C((uint64_t)__p, v57);
      }

      __int128 v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_10036FBEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036FC60(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

__n128 sub_10036FCC4(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000006LL;
  *(void *)(a1 + 24) = 0x100000006LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_1007BF750;
  if (a1 == a2)
  {
    char v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }

  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    char v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }

  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    char v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    char v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }

  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    char v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }

  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(__int128 **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    unint64_t v14 = v11;
    do
    {
      __int128 v15 = *v14++;
      *v6++ = v15;
      --v13;
    }

    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    *unint64_t v12 = result;
  }

  else if ((_DWORD)v5)
  {
    unint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)unint64_t v6 = v9;
      unint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }

    while (v5);
  }

  return result;
}

void sub_10036FE20(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void sub_10036FE30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v11 = 0x600000006LL;
  unint64_t v6 = &off_1007BF708;
  if (v3 > 6) {
    sub_1003AB150(422, "this->max_num_rows_ >= num_rows");
  }
  if (v4 >= 7) {
    sub_1003AB150(423, "this->max_num_cols_ >= num_cols");
  }
  unsigned int v7 = v3;
  unsigned int v8 = v4;
  int v9 = v4 * v3;
  unsigned int v10 = v3;
  unint64_t v12 = &v13;
  sub_1002CB364(a1, &v6);
  uint64_t v16 = 0x600000006LL;
  unint64_t v14 = &off_1007BF708;
  __int128 v15 = xmmword_1006E0F10;
  int v17 = &v18;
  sub_1002CB548((uint64_t)&v6, a1, (uint64_t)&v14);
  *(void *)(a2 + 24) = 0x600000006LL;
  *(void *)a2 = &off_1007BF708;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F10;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v26 = 0x100000006LL;
  uint64_t v24 = &off_1007BF798;
  __int128 v25 = xmmword_1006E0F20;
  __int128 v27 = &v28;
  uint64_t v21 = 0x100000018LL;
  uint64_t v19 = &off_1007BF7E0;
  __int128 v20 = xmmword_1006E0F30;
  BOOL v22 = &v23;
  sub_1002D9BF0((uint64_t)&v14, (uint64_t)&v24, (uint64_t)&v19, a2);
}

void sub_10036FFA4(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_10036FFB4(void *result)
{
  *__n128 result = off_1007AED90;
  return result;
}

void *sub_10036FFC4(void *result)
{
  *__n128 result = off_1007BC9D8;
  return result;
}

uint64_t sub_10036FFD8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10036FFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100370008(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100370014(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100370060(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + std::ios::~ios(v1 + 416) = a4;
  return a1;
}

void sub_1003700A4(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

__n128 sub_1003700B4(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x600000006LL;
  *(void *)(a1 + 24) = 0x600000006LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_1007BF708;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }

  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }

  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 7)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }

  if (*(_DWORD *)(a2 + 12) > 6u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }

  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(__int128 **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    unint64_t v14 = v11;
    do
    {
      __int128 v15 = *v14++;
      *v6++ = v15;
      --v13;
    }

    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    *unint64_t v12 = result;
  }

  else if ((_DWORD)v5)
  {
    unsigned int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)unint64_t v6 = v9;
      unint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }

    while (v5);
  }

  return result;
}

void sub_10037020C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_10037021C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_10011B560( (void *)(a1 + 16),  *(const void **)(a2 + 16),  *(void *)(a2 + 24),  (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_10011B560( (void *)(a1 + 40),  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_10011B560( (void *)(a1 + 64),  *(const void **)(a2 + 64),  *(void *)(a2 + 72),  (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  sub_10011B560( (void *)(a1 + 88),  *(const void **)(a2 + 88),  *(void *)(a2 + 96),  (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  *(void *)(a1 + sub_1001ACE80(v1 + 112) = 0LL;
  *(void *)(a1 + sub_100021DA8(v1 + 120) = 0LL;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = 0LL;
  sub_10011B560( (void *)(a1 + 112),  *(const void **)(a2 + 112),  *(void *)(a2 + 120),  (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B560( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
  return a1;
}

void sub_100370320(_Unwind_Exception *exception_object)
{
  unsigned int v8 = *v6;
  if (*v6)
  {
    v1[15] = v8;
    operator delete(v8);
  }

  unint64_t v9 = *v5;
  if (*v5)
  {
    v1[12] = v9;
    operator delete(v9);
  }

  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[9] = v10;
    operator delete(v10);
  }

  uint64_t v11 = *v3;
  if (*v3)
  {
    v1[6] = v11;
    operator delete(v11);
  }

  unint64_t v12 = *v2;
  if (*v2)
  {
    v1[3] = v12;
    operator delete(v12);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10037039C(uint64_t a1)
{
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v3 = 0LL;
  sub_1003703F8((void *)a1, 0x32uLL, &v3);
  return a1;
}

void sub_1003703E4(_Unwind_Exception *a1)
{
}

void *sub_1003703F8(void *result, unint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5) {
    return sub_100370494(result, v6, a3);
  }
  if (!v5)
  {
    uint64_t v7 = result[1];
    if (result[2] == v7) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = *(void *)(v7 + 8LL * (result[4] >> 9)) + 8 * (result[4] & 0x1FFLL);
    }
    v11[0] = v7 + 8LL * (result[4] >> 9);
    v11[1] = v8;
    unint64_t v9 = (char *)sub_10036FC60((uint64_t)v11, a2);
    return (void *)sub_1003705AC(v3, v9, v10);
  }

  return result;
}

void *sub_100370494(void *a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_10036F6D8(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }

  uint64_t v13 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v9 & 0x1FF);
  }
  v21[0] = v6 + 8 * (v9 >> 9);
  v21[1] = v14;
  __n128 result = sub_10036FC60((uint64_t)v21, a2);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096LL;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }

      else
      {
        uint64_t v19 = (void *)v14;
        do
          *v19++ = *a3;
        while (v19 != (void *)v18);
      }

      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v20 = v13[1];
      ++v13;
      uint64_t v14 = v20;
    }

    while (v20 != v16);
    a1[5] = v17;
  }

  return result;
}

uint64_t sub_1003705AC(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 8 * (v5 & 0x1FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - a2) << 6);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      uint64_t v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = *(void *)v13 + 8 * (*(void *)(result + 32) & 0x1FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(void *)v13) >> 3);
      }
      sub_10036FC60((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        __n128 result = sub_100189FD8(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

void *sub_1003706A4(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }

    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }

    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v4) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  sub_1003708E8(a1, *a2, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100021B74(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }

    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }

  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8LL);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }

      else
      {
        v19 &= v7 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }

  uint64_t v10 = (void *)v21[0];
  v21[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100370960((uint64_t)v21, 0LL);
  return v10;
}

void sub_1003708D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003708E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x258uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0LL;
  v8[1] = a2;
  void v8[2] = **a3;
  uint64_t result = sub_100371CB8((uint64_t)(v8 + 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100370948(_Unwind_Exception *a1)
{
}

void sub_100370960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100130470((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void *sub_1003709A4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0LL;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0LL;
  i[4] = 0LL;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100021B74(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *BOOL v22 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v13;
  *float v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }

    else
    {
      v23 &= v8 - 1;
    }

    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }

void sub_100370BDC(_Unwind_Exception *a1)
{
}

void sub_100370BF8(uint64_t a1, void **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100034A98((uint64_t)(a2 + 3), a2[4]);
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *sub_100370C40(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100046FEC(a1, a2);
  if (result)
  {
    sub_1000217D4(a1, result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t *sub_100370C74(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100046FEC(a1, a2);
  if (result)
  {
    sub_100370CA8(a1, result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t sub_100370CA8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100021814(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  unint64_t v5 = 0LL;
  if (v3) {
    sub_100370BF8((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_100370CF0(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100046FEC(a1, a2);
  if (result)
  {
    sub_100021814(a1, (void *)result, (uint64_t)v4);
    sub_100370960((uint64_t)v4, 0LL);
    return 1LL;
  }

  return result;
}

uint64_t sub_100370D3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100021B74(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_100370DB0(a1, i + 2, i + 2);
  return a1;
}

void sub_100370D98(_Unwind_Exception *a1)
{
}

void *sub_100370DB0(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }

    unint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }

          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }

            else
            {
              v10 &= v6 - 1;
            }

            if (v10 != v3) {
              break;
            }
          }

          uint64_t result = (void *)*result;
        }

        while (result);
      }
    }
  }

  sub_100370FE4(a1, *a2, a3, (uint64_t)&v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100021B74(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }

  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    void *v19 = *v17;
    *BOOL v17 = v19;
  }

  else
  {
    void *v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v19)
    {
      unint64_t v18 = *(void *)(*v19 + 8LL);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }

      else
      {
        v18 &= v6 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v1std::ostream::~ostream(v1, v2 + 8) = v19;
    }
  }

  uint64_t result = v19;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100370FC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11)
{
  if (a10) {
    sub_100370BF8((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100370FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  void v8[2] = *a3;
  uint64_t result = sub_100131CE8(v8 + 3, (uint64_t)(a3 + 1));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100371058(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100370BF8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100371074(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 26);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  sub_10001EA5C((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1LL;
}

uint64_t sub_1003710EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003711A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100371160(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8LL) {
    sub_10001D350();
  }
  return operator new(144 * a2);
}

uint64_t sub_1003711A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 144LL;
      sub_100387A84(v7 - 144);
      uint64_t v7 = *((void *)&v15 + 1) - 144LL;
      *((void *)&v15 + 1) -= 144LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_100371260((uint64_t)v12);
  return v10;
}

void sub_10037124C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100371260(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100371294(a1);
  }
  return a1;
}

void sub_100371294(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 16;
    do
    {
      sub_100034A98(v3, *(void **)(v3 + 8));
      uint64_t v4 = v3 + 128;
      v3 += 144LL;
    }

    while (v4 != v2);
  }

void **sub_1003712E0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100371310(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_100034A98(i - 128, *(void **)(i - 120));
  }

uint64_t sub_100371358(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7LL) {
    sub_10001E11C();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x8E38E38E38E38E39LL * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0xE38E38E38E38E3LL) {
    unint64_t v7 = 0x1C71C71C71C71C7LL;
  }
  else {
    unint64_t v7 = v4;
  }
  __int128 v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_100371160(v5, v7);
  }
  else {
    uint64_t v8 = 0LL;
  }
  float v11 = v8;
  float v12 = &v8[144 * v3];
  __int128 v14 = &v8[144 * v7];
  sub_100387A84(v12);
  char v13 = v12 + 144;
  sub_1003710EC(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1003712E0(&v11);
  return v9;
}

void sub_100371460(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100371474()
{
  BOOL v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007FFBC8 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007FFBB8 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFBB8, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  unint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007FFBE0 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007FFBD0 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFBD0, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  uint64_t v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007FFBF8 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007FFBE8 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFBE8, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  float v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007FFC10 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007FFC00 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC00, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  size_t v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007FFC28 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007FFC18 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC18, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  size_t v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007FFC40 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007FFC30 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC30, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  uint64_t v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007FFC58 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007FFC48 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC48, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  uint64_t v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007FFC70 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007FFC60 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC60, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  __int128 v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007FFC88 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007FFC78 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007FFC78,  (void *)&_mh_execute_header);
}

void sub_100371A58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100371ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 1328);
  unint64_t v6 = *(void *)(a2 + 1328);
  if (v5 >= v6 + 15) {
    goto LABEL_10;
  }
  uint64_t v7 = a2;
  if (v6 >= v5 + 15)
  {
LABEL_11:
    uint64_t v11 = (uint64_t)a3;
    return sub_100374F7C(v11, a2);
  }

  double v8 = *(double *)(a1 + 1312);
  double v9 = *(double *)(a2 + 1312);
  if (v8 >= v9 + 50.0)
  {
LABEL_10:
    uint64_t v11 = (uint64_t)a3;
    a2 = a1;
    return sub_100374F7C(v11, a2);
  }

  if (v9 >= v8 + 50.0) {
    goto LABEL_11;
  }
  uint64_t result = sub_100371B98(a1, a2);
  if ((_DWORD)result)
  {
    if (*(void *)(a1 + 1328) >= *(void *)(v7 + 1328)) {
      a2 = a1;
    }
    else {
      a2 = v7;
    }
    uint64_t v11 = (uint64_t)a3;
    return sub_100374F7C(v11, a2);
  }

  *a3 = 0;
  a3[1480] = 0;
  return result;
}

BOOL sub_100371B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = a2 + 8;
  sub_100376C9C(a1 + 8, a2 + 8);
  BOOL result = 0;
  if (v4 < 40.0)
  {
    double v5 = sub_100377318(v2);
    if (vabdd_f64(v5, sub_100377318(v3)) < 10.0) {
      return 1;
    }
  }

  return result;
}

uint64_t sub_100371C0C(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 20std::ostream::~ostream(v1, v2 + 8) = 0;
  *(void *)(a1 + 216) = 0LL;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 32std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(_DWORD *)(a1 + 376) = 999;
  *(_BYTE *)(a1 + 240) = 0;
  sub_1003880E8(a1 + 384);
  *(_OWORD *)(a1 + 560) = 0u;
  return a1;
}

void sub_100371C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100371CBC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  uint64_t v7 = (_OWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 20std::ostream::~ostream(v1, v2 + 8) = 0;
  *(void *)(a1 + 216) = 0LL;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 32std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 376) = a2;
  sub_1003880E8(a1 + 384);
  *(void *)(a1 + 560) = *a4;
  uint64_t v8 = a4[1];
  *(void *)(a1 + 56std::ostream::~ostream(v1, v2 + 8) = v8;
  if (v8)
  {
    double v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_100387E28(0LL, a2, (uint64_t)v17);
  __int128 v11 = v17[9];
  _BYTE v7[8] = v17[8];
  v7[9] = v11;
  v7[10] = v18[0];
  *(_OWORD *)((char *)v7 + 169) = *(_OWORD *)((char *)v18 + 9);
  __int128 v12 = v17[5];
  v7[4] = v17[4];
  v7[5] = v12;
  __int128 v13 = v17[7];
  v7[6] = v17[6];
  v7[7] = v13;
  __int128 v14 = v17[1];
  *uint64_t v7 = v17[0];
  v7[1] = v14;
  __int128 v15 = v17[3];
  void v7[2] = v17[2];
  v7[3] = v15;
  return a1;
}

void sub_100371DCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 44std::ostream::~ostream(v1, v2 + 8) = off_1007AED90;
  sub_1001302F0((void *)(v9 + 392));
  sub_1001302F0(v10);
  sub_1001304C8(&a9);
  _Unwind_Resume(a1);
}

void sub_100371E14(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 216);
  for (uint64_t i = *(void *)(a1 + 224); v3 != i; v3 += 1480LL)
  {
  }

  sub_100371E98(a1);
  if (*(void *)(a1 + 224) == *(void *)(a1 + 216)) {
    sub_100371F40(a1);
  }
}

uint64_t sub_100371E98(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 216);
  if (v1 != *(void *)(result + 224))
  {
    uint64_t v2 = result;
    do
    {
      BOOL result = sub_100380CC4(v1 + 8);
      if ((_DWORD)result)
      {
        BOOL result = sub_100376508((uint64_t)&v7, v1 + 1480, *(void *)(v2 + 224), v1);
        double v4 = *(void **)(v2 + 224);
        if (v4 != v3)
        {
          double v5 = v4 - 127;
          do
          {
            v5[64] = off_1007AED90;
            v5[53] = off_1007AED90;
            v5[11] = off_1007AED90;
            *double v5 = off_1007AED90;
            unint64_t v6 = v5 - 58;
            v5 -= 185;
          }

          while (v6 != v3);
        }

        *(void *)(v2 + 224) = v3;
      }

      else
      {
        v1 += 1480LL;
        uint64_t v3 = *(void **)(v2 + 224);
      }
    }

    while ((void *)v1 != v3);
  }

  return result;
}

void sub_100371F40(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  uint64_t v2 = *(void **)(a1 + 216);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 != v2)
  {
    double v4 = v3 - 127;
    do
    {
      v4[64] = off_1007AED90;
      v4[53] = off_1007AED90;
      v4[11] = off_1007AED90;
      *double v4 = off_1007AED90;
      double v5 = v4 - 58;
      v4 -= 185;
    }

    while (v5 != v2);
  }

  *(void *)(a1 + 224) = v2;
  *(_DWORD *)(a1 + 320) = 0;
  unint64_t v6 = *(void ***)(a1 + 336);
  uint64_t v7 = *(void *)(a1 + 344);
  *(void *)(a1 + 36std::ostream::~ostream(v1, v2 + 8) = 0LL;
  unint64_t v8 = v7 - (void)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      uint64_t v9 = *(void *)(a1 + 344);
      unint64_t v6 = (void **)(*(void *)(a1 + 336) + 8LL);
      *(void *)(a1 + 336) = v6;
      unint64_t v8 = v9 - (void)v6;
    }

    while (v8 > 0x10);
  }

  if (v8 >> 3 == 1)
  {
    uint64_t v10 = 256LL;
  }

  else
  {
    if (v8 >> 3 != 2) {
      return;
    }
    uint64_t v10 = 512LL;
  }

  *(void *)(a1 + 360) = v10;
}

BOOL sub_100371FF8(uint64_t a1, void *a2, void *a3)
{
  if (a2[1] == *a2)
  {
    __int128 v19 = (os_log_s *)qword_1008000A0;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1003ADFDC(v19, v21, v22, v23, v24, v25, v26, v27);
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE010();
  }
  if (!*(_DWORD *)(a1 + 16) && *(_BYTE *)(*a2 + 144LL) == 5)
  {
    *(_DWORD *)(a1 + 16) = 1;
    sub_100387E28(1LL, *(_DWORD *)(a1 + 376), (uint64_t)buf);
    __int128 v6 = v112;
    *(_OWORD *)(a1 + 152) = v111;
    *(_OWORD *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = v6;
    *(_OWORD *)(a1 + 184) = v113[0];
    *(_OWORD *)(a1 + 193) = *(_OWORD *)((char *)v113 + 9);
    __int128 v7 = v108;
    *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v107;
    *(_OWORD *)(a1 + 104) = v7;
    __int128 v8 = v110;
    *(_OWORD *)(a1 + sub_100021DA8(v1 + 120) = v109;
    *(_OWORD *)(a1 + 136) = v8;
    __int128 v9 = v104;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 40) = v9;
    __int128 v10 = v106;
    *(_OWORD *)(a1 + 56) = v105;
    *(_OWORD *)(a1 + 72) = v10;
    if (!*(_BYTE *)(a1 + 208)) {
      sub_100006080();
    }
  }

  uint64_t v11 = *a2;
  if (*(_BYTE *)(*a2 + 145LL) == 1)
  {
    if (*(_BYTE *)a1)
    {
      uint64_t v28 = a2[1];
      uint64_t v29 = 168LL;
      if (v28 - v11 == 152) {
        uint64_t v29 = 176LL;
      }
      uint64_t v30 = 184LL;
      if (v28 - v11 == 152) {
        uint64_t v30 = 192LL;
      }
      __int128 v31 = *(unsigned int **)(a1 + 224);
      if (v31 == *(unsigned int **)(a1 + 216))
      {
        uint64_t v45 = *(unsigned int **)(a1 + 224);
      }

      else
      {
        unint64_t v32 = 0LL;
        double v33 = *(double *)(a1 + v29);
        double v34 = *(double *)(a1 + v30);
        double v35 = *(double *)(a1 + 160);
        unint64_t v36 = (v28 - v11) / 152;
        if (v36 <= 1) {
          unint64_t v36 = 1LL;
        }
        unint64_t v91 = v36;
        do
        {
          if (v28 == v11) {
            goto LABEL_46;
          }
          uint64_t v37 = 0LL;
          char v38 = 0;
          double v39 = 0.0;
          unint64_t v40 = v91;
          do
          {
            double v41 = COERCE_DOUBLE(sub_10037C774(*(void *)(a1 + 216) + 1480 * v32 + 8, a3, (double *)(*a2 + v37)));
            if (v42) {
              BOOL v43 = v33 <= v41;
            }
            else {
              BOOL v43 = 1;
            }
            if (!v43)
            {
              if (v33 <= v35) {
                sub_1003AE038();
              }
              double v44 = v34;
              if (v35 < v41)
              {
                double v44 = 0.0;
                if (v33 >= v41) {
                  double v44 = v34 + -v34 / (v33 - v35) * (v41 - v35);
                }
              }

              if (v44 > v39) {
                double v39 = v44;
              }
              char v38 = 1;
            }

            v37 += 152LL;
            --v40;
          }

          while (v40);
          if ((v38 & 1) == 0) {
LABEL_46:
          }
            double v39 = *(double *)(a1 + 200);
          uint64_t v45 = *(unsigned int **)(a1 + 216);
          *(double *)&v45[370 * v32++ + 330] = v39;
          __int128 v31 = *(unsigned int **)(a1 + 224);
        }

        while (0x9DC0588FE9DC0589LL * (((char *)v31 - (char *)v45) >> 3) > v32);
      }

      __int128 v60 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v61 = *(unsigned __int16 *)(*a2 + 8LL);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionTrackingTargetSet internal state after measurement update of cycle_index %d of aiding channel:",  buf,  8u);
        uint64_t v45 = *(unsigned int **)(a1 + 216);
        __int128 v31 = *(unsigned int **)(a1 + 224);
      }

      if (v45 != v31)
      {
        int v62 = 0;
        do
        {
          __int128 v63 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            sub_100373644(v45, (std::stringbuf::string_type *)buf);
            uint64_t v64 = (SBYTE7(v104) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
            LODWORD(__p) = 67109378;
            HIDWORD(__p) = v62;
            LOWORD(v102[0]) = 2080;
            *(void *)((char *)v102 + 2) = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "#sf,    tracking target %d:  %s",  (uint8_t *)&__p,  0x12u);
            if (SBYTE7(v104) < 0) {
              operator delete(*(void **)buf);
            }
          }

          ++v62;
          v45 += 370;
        }

        while (v45 != v31);
      }

      goto LABEL_117;
    }

    return 0LL;
  }

  if (!*(_BYTE *)(*a2 + 145LL))
  {
    uint64_t v12 = a2[1];
    if (!*(_BYTE *)a1)
    {
      if (v12 != v11)
      {
        uint64_t v46 = 0LL;
        unint64_t v47 = 0LL;
        do
        {
          *(_DWORD *)std::string buf = 0;
          sub_100375074((uint64_t)&buf[8]);
          char v114 = 0;
          uint64_t v116 = 0LL;
          uint64_t v117 = 0LL;
          uint64_t v115 = 0LL;
          uint64_t v118 = 0xFFFFFFFFLL;
          char v119 = 0;
          __int128 v120 = 0u;
          __int128 v121 = 0u;
          __int128 v122 = 0u;
          __int128 v123 = 0u;
          __int128 v124 = 0u;
          __int128 v125 = 0u;
          memset(v126, 0, sizeof(v126));
          int v48 = *(_DWORD *)(a1 + 320);
          *(_DWORD *)(a1 + 320) = v48 + 1;
          *(_DWORD *)std::string buf = v48;
          sub_1003810C4((uint64_t)&buf[8], (double *)(v11 + v46), a3);
          char v114 = 1;
          uint64_t v116 = 0LL;
          uint64_t v117 = 0LL;
          uint64_t v115 = 0LL;
          uint64_t v118 = v47;
          v126[3] = 0LL;
          v126[0] = *(void *)(v11 + v46 + 48);
          *(int8x16_t *)&v126[1] = vextq_s8(*(int8x16_t *)(v11 + v46 + 64), *(int8x16_t *)(v11 + v46 + 64), 8uLL);
          unint64_t v49 = *(void *)(a1 + 224);
          if (v49 >= *(void *)(a1 + 232))
          {
            uint64_t v50 = sub_100375314((uint64_t *)(a1 + 216), (uint64_t)buf);
          }

          else
          {
            sub_100375438(a1 + 232, *(void *)(a1 + 224), (uint64_t)buf);
            uint64_t v50 = v49 + 1480;
            *(void *)(a1 + 224) = v49 + 1480;
          }

          *(void *)(a1 + 224) = v50;
          ++v47;
          uint64_t v11 = *a2;
          v46 += 152LL;
        }

        while (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3) > v47);
      }

      *(_BYTE *)a1 = 1;
      goto LABEL_106;
    }

    unint64_t v13 = 0x86BCA1AF286BCA1BLL * ((v12 - v11) >> 3);
    unint64_t v14 = v13 - 0x623FA7701623FA77LL * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3);
    v99[0] = 0LL;
    sub_100120600(&__p, v14, v99);
    sub_1003756FC(buf, v13, (uint64_t)&__p);
    if (__p)
    {
      v102[0] = __p;
      operator delete(__p);
    }

    LOBYTE(v98[0]) = 0;
    sub_1003757B4(v99, v14, (unsigned __int8 *)v98);
    sub_100375A24(&__p, v13, (uint64_t)v99);
    if (v99[0]) {
      operator delete(v99[0]);
    }
    char v95 = (void *)0x408F400000000000LL;
    sub_100120600(v98, v14, &v95);
    sub_1003756FC(v99, v13, (uint64_t)v98);
    if (v98[0])
    {
      v98[1] = v98[0];
      operator delete(v98[0]);
    }

    *(void *)uint64_t v100 = 0x408F400000000000LL;
    sub_100120600(&v95, v14, v100);
    sub_1003756FC(v98, v13, (uint64_t)&v95);
    if (v95)
    {
      std::stringbuf::string_type v96 = v95;
      operator delete(v95);
    }

    char v95 = 0LL;
    std::stringbuf::string_type v96 = 0LL;
    uint64_t v97 = 0LL;
    sub_100372C7C(a1, a2, buf, &__p, v99, v98, a3);
    sub_100372E68(a1, (uint64_t **)buf, (uint64_t *)&__p, (char *)&v95);
    uint64_t v15 = (v96 - (_BYTE *)v95) >> 2;
    uint64_t v16 = *a2;
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
    if (v15 == v17)
    {
      memset(v100, 0, 24);
      sub_10011B560( v100,  *(const void **)(v16 + 120),  *(void *)(v16 + 128),  (uint64_t)(*(void *)(v16 + 128) - *(void *)(v16 + 120)) >> 3);
      if (*(void *)v100 == *(void *)&v100[8]) {
        uint64_t v18 = 0x3FC5604189374BC7LL;
      }
      else {
        uint64_t v18 = *(void *)(*(void *)&v100[8] - 8LL);
      }
      uint64_t v94 = v18;
      sub_1002FE7B8((void *)(a1 + 328), (double *)&v94);
      unint64_t v65 = *(void *)(a1 + 368);
      if (v65 > *(int *)(a1 + 24))
      {
        ++*(void *)(a1 + 360);
        *(void *)(a1 + 36std::ostream::~ostream(v1, v2 + 8) = v65 - 1;
        sub_100301000(a1 + 328, 1);
      }

      if (*(void *)v100 == *(void *)&v100[8])
      {
        sub_100120600(v92, 6uLL, &qword_1006E0F80);
        sub_100372FB8(a1, a2, &v95, v99, v98, a3, v92);
        if (*(void *)v92)
        {
          uint64_t v93 = *(void **)v92;
          operator delete(*(void **)v92);
        }
      }

      else
      {
        sub_100372FB8(a1, a2, &v95, v99, v98, a3, v100);
      }

      unint64_t v66 = *(void *)(a1 + 368);
      if (v66 == *(_DWORD *)(a1 + 24))
      {
        uint64_t v67 = *(void *)(a1 + 336);
        double v68 = 0.0;
        if (*(void *)(a1 + 344) != v67)
        {
          unint64_t v69 = *(void *)(a1 + 360);
          uint64_t v70 = (double **)(v67 + 8 * (v69 >> 9));
          uint64_t v71 = *v70;
          uint64_t v72 = &(*v70)[v69 & 0x1FF];
          uint64_t v73 = *(void *)(v67 + (((v69 + v66) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((v69 + v66) & 0x1FF);
          while (v72 != (double *)v73)
          {
            double v74 = *v72++;
            double v75 = v74;
            if ((char *)v72 - (char *)v71 == 4096)
            {
              int64_t v76 = v70[1];
              ++v70;
              uint64_t v71 = v76;
              uint64_t v72 = v76;
            }

            double v68 = v68 + v75;
          }
        }

        if (v68 / (double)v66 > *(double *)(a1 + 32))
        {
          *(_BYTE *)a1 = 0;
          char v77 = *(void **)(a1 + 216);
          unint64_t v78 = *(void **)(a1 + 224);
          if (v78 != v77)
          {
            uint64_t v79 = v78 - 127;
            do
            {
              v79[64] = off_1007AED90;
              v79[53] = off_1007AED90;
              v79[11] = off_1007AED90;
              void *v79 = off_1007AED90;
              uint64_t v80 = v79 - 58;
              v79 -= 185;
            }

            while (v80 != v77);
          }

          *(void *)(a1 + 224) = v77;
          *(_DWORD *)(a1 + 320) = 0;
          sub_100372F44((void *)(a1 + 328));
          char v81 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v92 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "#sf,RoseSensorFusionTrackingTargetSet:: killed all tracking targets because detected in NFOV consistently",  v92,  2u);
          }
        }
      }

      if (*(void *)v100)
      {
        *(void *)&v100[8] = *(void *)v100;
        operator delete(*(void **)v100);
      }

      goto LABEL_103;
    }

    *(_BYTE *)a1 = 0;
    __int128 v51 = *(void **)(a1 + 216);
    uint64_t v52 = *(void **)(a1 + 224);
    if (v52 != v51)
    {
      uint64_t v53 = v52 - 127;
      do
      {
        v53[64] = off_1007AED90;
        v53[53] = off_1007AED90;
        v53[11] = off_1007AED90;
        void *v53 = off_1007AED90;
        __int128 v54 = v53 - 58;
        v53 -= 185;
      }

      while (v54 != v51);
    }

    *(void *)(a1 + 224) = v51;
    *(_DWORD *)(a1 + 320) = 0;
    uint64_t v55 = *(void ***)(a1 + 336);
    uint64_t v56 = *(void *)(a1 + 344);
    *(void *)(a1 + 36std::ostream::~ostream(v1, v2 + 8) = 0LL;
    unint64_t v57 = v56 - (void)v55;
    if (v57 >= 0x11)
    {
      do
      {
        operator delete(*v55);
        uint64_t v58 = *(void *)(a1 + 344);
        uint64_t v55 = (void **)(*(void *)(a1 + 336) + 8LL);
        *(void *)(a1 + 336) = v55;
        unint64_t v57 = v58 - (void)v55;
      }

      while (v57 > 0x10);
    }

    if (v57 >> 3 == 1)
    {
      uint64_t v59 = 256LL;
    }

    else
    {
      if (v57 >> 3 != 2) {
        goto LABEL_101;
      }
      uint64_t v59 = 512LL;
    }

    *(void *)(a1 + 360) = v59;
LABEL_101:
    uint64_t v82 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      unint64_t v90 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
      *(_DWORD *)uint64_t v100 = 134218240;
      *(void *)&void v100[4] = (v96 - (_BYTE *)v95) >> 2;
      *(_WORD *)&v100[12] = 2048;
      *(void *)&v100[14] = v90;
      _os_log_error_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "#sf,RoseSensorFusionTrackingTargetSet error: assignmentVec size is %zu, measurement size is %zu, reset state",  v100,  0x16u);
    }

void sub_100372B5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char ****a18, char ****a19, uint64_t a20, char ***a21, uint64_t a22, uint64_t a23, char **a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, char *a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }

  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }

  a18 = &a21;
  sub_10011E3B8((void ***)&a18);
  a21 = &a24;
  sub_10011E3B8((void ***)&a21);
  a24 = &a31;
  sub_100375C48((void ***)&a24);
  a31 = &a35;
  sub_10011E3B8((void ***)&a31);
  _Unwind_Resume(a1);
}

void sub_100372C7C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE060();
  }
  uint64_t v8 = a3[1] - *a3;
  uint64_t v13 = 0LL;
  if (v9 <= 1) {
    uint64_t v14 = 1LL;
  }
  else {
    uint64_t v14 = v9;
  }
  uint64_t v25 = v14;
  unint64_t v15 = v10 - v9;
  do
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0LL;
    uint64_t v18 = 8LL;
    do
    {
      if (v11 <= v17)
      {
        if (v15 == v17)
        {
          *(void *)(*(void *)(*a4 + 24 * v13) + 8 * ((v11 + v13) >> 6)) |= 1LL << (v11
                                                                                     + v13);
          double v24 = *(double *)(a1 + 56);
          if (v24 <= 0.0) {
            sub_1003AE0B0();
          }
          *(double *)(*(void *)(*a3 + 24 * v13) + 8 * (v11 + v13)) = log(v24);
        }
      }

      else
      {
        int v19 = sub_100374054( a1,  *a2 + 152 * v13,  *(void *)(a1 + 216) + v18,  (double *)(*(void *)(*a3 + 24 * v13) + v16),  (void *)(*(void *)(*a5 + 24 * v13) + v16),  (double *)(*(void *)(*a6 + 24 * v13) + v16),  a7);
        uint64_t v20 = *(void *)(*a4 + 24 * v13);
        unint64_t v21 = v17 >> 6;
        uint64_t v22 = 1LL << v17;
        if (v19) {
          uint64_t v23 = *(void *)(v20 + 8 * v21) | v22;
        }
        else {
          uint64_t v23 = *(void *)(v20 + 8 * v21) & ~v22;
        }
        *(void *)(v20 + 8 * v21) = v23;
      }

      ++v17;
      v18 += 1480LL;
      v16 += 8LL;
    }

    while (v10 != v17);
    ++v13;
    ++v15;
  }

  while (v13 != v25);
}

void sub_100372E68(uint64_t a1, uint64_t **a2, uint64_t *a3, char *a4)
{
  std::stringbuf::string_type __p = 0LL;
  unint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  memset(v7, 0, sizeof(v7));
  sub_1003761F8(v7, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  unint64_t v11 = (void **)0xC1CDCD6500000000LL;
  sub_10037436C(a1, a2, v7, a4, (uint64_t)&__p, 0, (double *)&v11, 0.0);
  unint64_t v11 = v7;
  sub_100375C48(&v11);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }

void sub_100372F1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_100375C48((void ***)(v15 - 40));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100372F44(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
}

void sub_100372FB8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  if (a2[1] == *a2) {
    sub_1003AE0D8();
  }
  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE100();
  }
  unint64_t v11 = a2;
  uint64_t v12 = *(void *)(a1 + 216);
  unint64_t v66 = (uint64_t *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 224);
  unint64_t v14 = 0x9DC0588FE9DC0589LL * ((v13 - v12) >> 3);
  LOBYTE(v69) = 0;
  sub_1003757B4(&__p, v14, (unsigned __int8 *)&v69);
  uint64_t v59 = v12;
  if (v13 != v12)
  {
    if (v14 <= 1) {
      unint64_t v15 = 1LL;
    }
    else {
      unint64_t v15 = 0x9DC0588FE9DC0589LL * ((v13 - v12) >> 3);
    }
    uint64_t v16 = (_DWORD *)(*v66 + 1336);
    do
    {
      *uint64_t v16 = -1;
      v16 += 370;
      --v15;
    }

    while (v15);
  }

  uint64_t v17 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v18 = 0LL;
    double v68 = v11;
    __int128 v60 = a5;
    int v61 = a6;
    unint64_t v62 = 0x9DC0588FE9DC0589LL * ((v13 - v12) >> 3);
    __int128 v63 = a3;
    do
    {
      unint64_t v19 = *(int *)(v17 + 4 * v18);
      if (v14 <= v19)
      {
        LODWORD(v69) = 0;
        sub_100375074((uint64_t)&v70);
        char v79 = 0;
        __int128 v80 = 0u;
        __int128 v81 = 0u;
        __int128 v82 = 0u;
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        memset(v86, 0, sizeof(v86));
        v73[1264] = 1;
        uint64_t v74 = 0LL;
        uint64_t v75 = 0LL;
        int v37 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)(a1 + 320) = v37 + 1;
        LODWORD(v69) = v37;
        uint64_t v76 = 0LL;
        int v77 = v18;
        int v78 = 0;
        sub_1003810C4((uint64_t)&v70, (double *)(*v11 + 152 * v18), a6);
        char v38 = (int8x16_t *)(*v11 + 152 * v18);
        v86[0] = v38[3].i64[0];
        *(int8x16_t *)&v86[1] = vextq_s8(v38[4], v38[4], 8uLL);
        v86[3] = 0LL;
        unint64_t v39 = *(void *)(a1 + 224);
        if (v39 >= *(void *)(a1 + 232))
        {
          uint64_t v40 = sub_100375314(v66, (uint64_t)&v69);
        }

        else
        {
          sub_100375438(a1 + 232, *(void *)(a1 + 224), (uint64_t)&v69);
          uint64_t v40 = v39 + 1480;
          *(void *)(a1 + 224) = v39 + 1480;
        }

        unint64_t v11 = v68;
        *(void *)(a1 + 224) = v40;
      }

      else
      {
        uint64_t v20 = *v66;
        uint64_t v21 = *v66 + 1480LL * (int)v19;
        uint64_t v91 = 0x100000003LL;
        uint64_t v89 = &off_1007BC4C0;
        __int128 v90 = xmmword_10042DB70;
        uint64_t v92 = &v93;
        uint64_t v71 = 0x300000003LL;
        unint64_t v69 = &off_1007BC508;
        __int128 v70 = xmmword_10042DE90;
        uint64_t v72 = v73;
        uint64_t v67 = v21;
        uint64_t v22 = v21 + 8;
        if (sub_10037B5CC(v21 + 8, (uint64_t)&v89, (uint64_t)&v69, a6, *v11 + 152 * v18))
        {
          sub_1002D5F00((uint64_t)v88, (uint64_t)&v89);
          sub_1002D606C((uint64_t)&v87, (uint64_t)&v69);
          uint64_t v23 = 0LL;
          double v24 = &v95;
          do
          {
            for (uint64_t i = 0LL; i != 3; ++i)
              *((void *)v24 + i) = *(void *)sub_1002CB40C((uint64_t)&v87, v23, i);
            ++v23;
            double v24 = (__int128 *)((char *)v24 + 24);
          }

          while (v23 != 3);
          uint64_t v26 = *(void *)sub_1002CB32C((uint64_t)v88, 0);
          uint64_t v27 = (double *)sub_1002CB32C((uint64_t)v88, 1u);
          double v28 = sub_100026A20(*v27);
          uint64_t v29 = (double *)sub_1002CB32C((uint64_t)v88, 2u);
          double v30 = sub_100026A20(*v29);
          __int128 v31 = v97;
          __int128 v32 = v98;
          __int128 v102 = v97;
          __int128 v103 = v98;
          uint64_t v33 = v99;
          uint64_t v104 = v99;
          __int128 v34 = v96;
          __int128 v35 = v95;
          __int128 v100 = v95;
          __int128 v101 = v96;
          uint64_t v36 = v20 + 1480LL * (int)v19;
          *(_BYTE *)(v36 + 1344) = 1;
          *(void *)(v36 + 1352) = v26;
          *(double *)(v36 + 1360) = v28;
          *(double *)(v36 + 136std::ostream::~ostream(v1, v2 + 8) = v30;
          *(_OWORD *)(v36 + 1392) = v34;
          *(_OWORD *)(v36 + 140std::ostream::~ostream(v1, v2 + 8) = v31;
          *(_OWORD *)(v36 + 1424) = v32;
          *(void *)(v36 + 1440) = v33;
          *(_OWORD *)(v36 + 1376) = v35;
          int v87 = off_1007AED90;
          v88[0] = off_1007AED90;
          a5 = v60;
          a6 = v61;
        }

        else
        {
          uint64_t v41 = v20 + 1480LL * (int)v19;
          *(void *)(v41 + 1440) = 0LL;
          *(_OWORD *)(v41 + 1424) = 0u;
          *(_OWORD *)(v41 + 140std::ostream::~ostream(v1, v2 + 8) = 0u;
          *(_OWORD *)(v41 + 1392) = 0u;
          *(_OWORD *)(v41 + 1376) = 0u;
          *(_OWORD *)(v41 + 1360) = 0u;
          *(_OWORD *)(v41 + 1344) = 0u;
        }

        unint64_t v11 = v68;
        sub_1003810C4(v22, (double *)(*v68 + 152 * v18), a6);
        double v42 = sub_100026A20(*(double *)(*v68 + 152 * v18 + 72));
        double v43 = sub_100026A20(*(double *)(*v68 + 152 * v18 + 64));
        double v44 = sub_100374600(a1, a7, v42, v43);
        double v45 = *(double *)(*(void *)(*a4 + 24 * v18) + 8 * v19);
        double v46 = log(sqrt(*(double *)(*(void *)(*a5 + 24 * v18) + 8 * v19)));
        uint64_t v47 = v20 + 1480LL * (int)v19;
        int v48 = (double *)(v47 + 1312);
        double v49 = v44 * (5.0 - v46 + v45 * -0.5) + *(double *)(a1 + 64) * *(double *)(v47 + 1312);
        *(double *)(v47 + 1312) = v49;
        double v50 = *(double *)(v47 + 1320);
        if (v50 != 0.0)
        {
          double v49 = v50 + v49;
          double *v48 = v49;
          *(void *)(v47 + 1320) = 0LL;
        }

        double v51 = *(double *)(a1 + 96);
        if (v49 > v51) {
          double *v48 = v51;
        }
        uint64_t v52 = v20 + 1480LL * (int)v19;
        ++*(void *)(v52 + 1328);
        *(_DWORD *)(v52 + 1336) = v18;
        *(_DWORD *)(v52 + 1340) = 0;
        double v53 = sub_100374B48(v67);
        uint64_t v54 = v20 + 1480LL * (int)v19;
        a3 = v63;
        *(void *)((char *)__p + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
        unint64_t v14 = v62;
      }

      ++v18;
      uint64_t v17 = *a3;
    }

    while (v18 < (uint64_t)(a3[1] - *a3) >> 2);
  }

  if (v13 != v59)
  {
    unint64_t v55 = 0LL;
    if (v14 <= 1) {
      uint64_t v56 = 1LL;
    }
    else {
      uint64_t v56 = v14;
    }
    uint64_t v57 = 1344LL;
    do
    {
      if (((*(void *)((char *)__p + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v55) & 1) == 0)
      {
        uint64_t v58 = *(void *)(a1 + 216) + v57;
        *(double *)(v58 - 32) = *(double *)(a1 + 72) + *(double *)(v58 - 32);
        ++*(void *)(v58 - 16);
        ++*(_DWORD *)(v58 - 4);
        sub_100387A88(v58);
      }

      ++v55;
      v57 += 1480LL;
    }

    while (v56 != v55);
  }

  sub_100374C2C(a1);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1003735E0(_Unwind_Exception *a1)
{
  if (STACK[0x760]) {
    operator delete((void *)STACK[0x760]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100373644@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  unint64_t v4 = sub_100046B94(&v35, (uint64_t)"tid: ", 5LL);
  uint64_t v5 = (void *)std::ostream::operator<<(v4, *a1);
  sub_100046B94(v5, (uint64_t)", ", 2LL);
  uint64_t v6 = sub_100046B94(&v35, (uint64_t)"status: ", 8LL);
  sub_100387AA0(*((_BYTE *)a1 + 1304), __p);
  if ((v33 & 0x80u) == 0) {
    __int128 v7 = __p;
  }
  else {
    __int128 v7 = (void **)__p[0];
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v8 = v33;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  unint64_t v9 = sub_100046B94(v6, (uint64_t)v7, v8);
  sub_100046B94(v9, (uint64_t)", ", 2LL);
  uint64_t v10 = sub_100046B94(&v35, (uint64_t)"track score: ", 13LL);
  unint64_t v11 = (void *)std::ostream::operator<<(v10, *((double *)a1 + 164));
  sub_100046B94(v11, (uint64_t)", ", 2LL);
  uint64_t v12 = sub_100046B94(&v35, (uint64_t)"score delta: ", 13LL);
  uint64_t v13 = (void *)std::ostream::operator<<(v12, *((double *)a1 + 165));
  sub_100046B94(v13, (uint64_t)", ", 2LL);
  unint64_t v14 = sub_100046B94(&v35, (uint64_t)"track epochs count: ", 20LL);
  unint64_t v15 = (void *)std::ostream::operator<<(v14, *((void *)a1 + 166));
  sub_100046B94(v15, (uint64_t)", ", 2LL);
  uint64_t v16 = sub_100046B94(&v35, (uint64_t)"assigned measurement: ", 22LL);
  uint64_t v17 = (void *)std::ostream::operator<<(v16, a1[334]);
  sub_100046B94(v17, (uint64_t)", ", 2LL);
  unint64_t v18 = sub_100046B94(&v35, (uint64_t)"missed count: ", 14LL);
  unint64_t v19 = (void *)std::ostream::operator<<(v18, a1[335]);
  sub_100046B94(v19, (uint64_t)", ", 2LL);
  uint64_t v20 = v35;
  *(_DWORD *)((char *)&v35 + *(void *)(v35 - 24) + std::ostream::~ostream(v1, v2 + 8) = *(_DWORD *)((_BYTE *)&v35 + *(void *)(v35 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v36.__loc_.__locale_ + *(void *)(v20 - 24)) = (std::locale::__imp *)2;
  uint64_t v21 = sub_100046B94(&v35, (uint64_t)"az: ", 4LL);
  uint64_t v22 = (uint64_t)(a1 + 2);
  double v23 = sub_100377318(v22);
  double v24 = (void *)std::ostream::operator<<(v21, v23);
  sub_100046B94(v24, (uint64_t)",", 1LL);
  uint64_t v25 = sub_100046B94(&v35, (uint64_t)"el: ", 4LL);
  double v26 = sub_10037716C(v22);
  uint64_t v27 = (void *)std::ostream::operator<<(v25, v26);
  sub_100046B94(v27, (uint64_t)",", 1LL);
  double v28 = sub_100046B94(&v35, (uint64_t)"range: ", 7LL);
  sub_100376F24(v22);
  std::ostream::operator<<(v28, v29);
  std::stringbuf::str(a2, &v36);
  *(void *)((char *)v34
  uint64_t v35 = v30;
  std::streambuf::~streambuf(&v36);
  return std::ios::~ios(&v37);
}

void sub_100373934( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100373964(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE128();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  v51[0] = 0LL;
  v51[1] = v4;
  memset(v53, 0, sizeof(v53));
  uint64_t v52 = v53;
  int v54 = 8;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  if (*(_BYTE *)(a1 + 312))
  {
    *(_BYTE *)(a1 + 312) = 0;
    char v5 = 1;
  }

  else
  {
    char v5 = 0;
  }

  if (*(_BYTE *)(a1 + 384))
  {
    uint64_t v6 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      v56[0] = v4;
      __int128 v7 = "#sf,sensor fusion report is locked, no sensor fusion solution for target 0x%llx";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
      BOOL v8 = *(_BYTE *)(a2 + 200) == 0;
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  unint64_t v9 = *(void *)(a1 + 368);
  if (v9 == *(_DWORD *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 336);
    double v11 = 0.0;
    if (*(void *)(a1 + 344) != v10)
    {
      unint64_t v12 = *(void *)(a1 + 360);
      uint64_t v13 = (double **)(v10 + 8 * (v12 >> 9));
      unint64_t v14 = *v13;
      unint64_t v15 = &(*v13)[v12 & 0x1FF];
      uint64_t v16 = *(void *)(v10 + (((v12 + v9) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((v12 + v9) & 0x1FF);
      while (v15 != (double *)v16)
      {
        double v17 = *v15++;
        double v18 = v17;
        if ((char *)v15 - (char *)v14 == 4096)
        {
          unint64_t v19 = v13[1];
          ++v13;
          unint64_t v14 = v19;
          unint64_t v15 = v19;
        }

        double v11 = v11 + v18;
      }
    }

    if (v11 / (double)v9 > *(double *)(a1 + 40))
    {
      uint64_t v6 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        v56[0] = v4;
        __int128 v7 = "#sf,average p6 is above threshold, no sensor fusion solution for target 0x%llx";
        goto LABEL_8;
      }

void sub_100373E04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (*(_BYTE *)(v13 + 144)) {
    sub_100034A98(v13 + 16, *(void **)(v13 + 24));
  }
  sub_100034A98(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100373E40(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 144))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (a1 != a2) {
      sub_100131194((uint64_t **)(a1 + 16), *(unsigned __int16 **)(a2 + 16), (unsigned __int16 *)(a2 + 24));
    }
    __int128 v4 = *(_OWORD *)(a2 + 40);
    __int128 v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 40) = v4;
    __int128 v6 = *(_OWORD *)(a2 + 88);
    __int128 v7 = *(_OWORD *)(a2 + 104);
    __int128 v8 = *(_OWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_OWORD *)(a1 + sub_100021DA8(v1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v6;
  }

  else
  {
    sub_100387A84(a1);
    *(_BYTE *)(a1 + 144) = 1;
  }

  return a1;
}

double sub_100373EDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  uint64_t v1 = *(void *)(a1 + 224);
  if (v1 == v2) {
    return 0.0;
  }
  double result = *(double *)(v2 + 880);
  do
  {
    v2 += 1480LL;
  }

  while (v2 != v1);
  return result;
}

uint64_t sub_100373F10(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 216);
  double v2 = 0.0;
  while (v1 != *(void *)(result + 224))
  {
    v1 += 1480LL;
  }

  return result;
}

uint64_t sub_100373F38@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 216);
  uint64_t v4 = *(void *)(result + 224);
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  if (v4 != v3)
  {
    uint64_t v5 = v3 + 1344;
    do
    {
      char v6 = *(_BYTE *)v5;
      if (*(_BYTE *)v5)
      {
        __int128 v7 = *(_OWORD *)v5;
        __int128 v8 = *(_OWORD *)(v5 + 32);
        v21[1] = *(_OWORD *)(v5 + 16);
        void v21[2] = v8;
        v21[0] = v7;
        __int128 v9 = *(_OWORD *)(v5 + 48);
        __int128 v10 = *(_OWORD *)(v5 + 64);
        __int128 v11 = *(_OWORD *)(v5 + 80);
        uint64_t v22 = *(void *)(v5 + 96);
        v21[4] = v10;
        v21[5] = v11;
        void v21[3] = v9;
        char v6 = 1;
      }

      else
      {
        LOBYTE(v21[0]) = 0;
      }

      char v23 = v6;
      sub_10036EA80(v5 - 1336, (uint64_t)v20);
      uint64_t v12 = (int *)(v5 - 1344);
      uint64_t v13 = (char *)(v5 - 40);
      unint64_t v14 = (double *)(v5 - 32);
      unint64_t v15 = (double *)(v5 - 24);
      uint64_t v16 = (uint64_t *)(v5 - 16);
      double v17 = (int *)(v5 - 8);
      unint64_t v18 = a2[1];
      if (v18 >= a2[2])
      {
        double result = sub_100375D28(a2, v12, (uint64_t)v20, v13, v14, v15, v16, v17, (int *)(v5 - 4), v21);
      }

      else
      {
        sub_100375CCC((uint64_t)a2, v12, (uint64_t)v20, v13, v14, v15, v16, v17, (int *)(v5 - 4), v21);
        double result = v18 + 584;
      }

      a2[1] = result;
      uint64_t v19 = v5 + 136;
      v5 += 1480LL;
    }

    while (v19 != v4);
  }

  return result;
}

void sub_100374038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100374054(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, double *a6, void *a7)
{
  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE150();
  }
  uint64_t v38 = 0x100000003LL;
  BOOL v36 = &off_1007BC4C0;
  __int128 v37 = xmmword_10042DB70;
  int v39 = &v40;
  uint64_t v33 = 0x300000003LL;
  uint64_t v31 = &off_1007BC508;
  __int128 v32 = xmmword_10042DE90;
  uint64_t v34 = &v35;
  uint64_t result = sub_10037B5CC(a3, (uint64_t)&v36, (uint64_t)&v31, a7, a2);
  if ((_DWORD)result)
  {
    uint64_t v28 = 0x300000001LL;
    char v23 = &off_1007BD1A0;
    if (DWORD1(v37) > 1) {
      sub_1003AB150(422, "this->max_num_rows_ >= num_rows");
    }
    int v24 = DWORD1(v37);
    int v25 = v37;
    int v26 = v37 * DWORD1(v37);
    int v27 = DWORD1(v37);
    int v29 = &v30;
    sub_1002CB364((uint64_t)&v36, &v23);
    uint64_t v20 = 0x300000003LL;
    unint64_t v18 = &off_1007BC508;
    __int128 v19 = xmmword_10042DE90;
    uint64_t v21 = v22;
    uint64_t v48 = 0x100000003LL;
    int8x16_t v46 = &off_1007BD278;
    __int128 v47 = xmmword_10042DB70;
    int v49 = (double *)v50;
    uint64_t v43 = 0x10000000CLL;
    uint64_t v41 = &off_1007BD2C0;
    __int128 v42 = xmmword_10042E850;
    uint64_t v44 = v45;
    sub_1002D9BF0((uint64_t)&v31, (uint64_t)&v46, (uint64_t)&v41, (uint64_t)&v18);
    uint64_t v43 = 0x300000001LL;
    uint64_t v41 = &off_1007BD1A0;
    __int128 v42 = xmmword_10042E860;
    uint64_t v44 = v45;
    sub_1002CB548((uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v41);
    uint64_t v48 = 0x100000001LL;
    int8x16_t v46 = &off_1007BCA50;
    *(void *)&__int128 v12 = 0x100000001LL;
    *((void *)&v12 + 1) = 0x100000001LL;
    __int128 v47 = v12;
    int v49 = (double *)v50;
    sub_1002CB548((uint64_t)&v41, (uint64_t)&v36, (uint64_t)&v46);
    if (DWORD2(v47) != 1) {
      sub_1003AE178();
    }
    double v13 = *v49;
    *a5 = *(void *)v49;
    if (v13 > *(double *)(a1 + 48))
    {
      return 0LL;
    }

    else
    {
      sub_1002D5F00((uint64_t)v17, (uint64_t)&v36);
      sub_1002D606C((uint64_t)v16, (uint64_t)&v31);
      double v15 = sub_100374D08(v14, (uint64_t)v17, (uint64_t)v16);
      *a4 = log(v15 * 5.0);
      v16[0] = off_1007AED90;
      v17[0] = off_1007AED90;
      uint64_t v20 = 0x100000003LL;
      unint64_t v18 = &off_1007BD278;
      __int128 v19 = xmmword_10042DB70;
      uint64_t v21 = v22;
      uint64_t v43 = 0x300000003LL;
      uint64_t v41 = &off_1007BC508;
      __int128 v42 = xmmword_10042DE90;
      uint64_t v44 = v45;
      *a6 = sub_10037638C((uint64_t)&v31, (uint64_t)&v18, (uint64_t)&v41);
      return 1LL;
    }
  }

  return result;
}

void sub_10037436C( uint64_t a1, uint64_t **a2, void *a3, char *a4, uint64_t a5, int a6, double *a7, double a8)
{
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  if (v8)
  {
    double v10 = a8;
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) <= a6)
    {
      if (*a7 < a8)
      {
        *a7 = a8;
      }
    }

    else
    {
      uint64_t v13 = **a2;
      uint64_t v14 = (*a2)[1];
      if (v14 != v13)
      {
        unint64_t v17 = 0LL;
        unint64_t v18 = (v14 - v13) >> 3;
        uint64_t v45 = (void *)(a5 + 16);
        unsigned int v44 = a6 + 1;
        if (v18 <= 1) {
          uint64_t v20 = 1LL;
        }
        else {
          uint64_t v20 = v18;
        }
        do
        {
          if (((*(void *)(*(void *)(*a3 + 24LL * a6) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
          {
            uint64_t v21 = *(__int32 **)(a5 + 8);
            uint64_t v22 = wmemchr(*(const __int32 **)a5, v17, ((uint64_t)v21 - *(void *)a5) >> 2);
            char v23 = (char *)(v22 ? v22 : v21);
            int v24 = *(char **)(a5 + 8);
            if (v23 == v24)
            {
              double v25 = *(double *)((*a2)[3 * a6] + 8 * v17);
              if ((unint64_t)v23 >= *v45)
              {
                int v27 = *(char **)a5;
                uint64_t v28 = (uint64_t)&v24[-*(void *)a5] >> 2;
                unint64_t v29 = v28 + 1;
                uint64_t v30 = *v45 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  __int128 v32 = (char *)sub_100031724((uint64_t)v45, v31);
                  int v27 = *(char **)a5;
                  char v23 = *(char **)(a5 + 8);
                }

                else
                {
                  __int128 v32 = 0LL;
                }

                uint64_t v33 = &v32[4 * v28];
                *(_DWORD *)uint64_t v33 = v17;
                int v26 = v33 + 4;
                while (v23 != v27)
                {
                  int v34 = *((_DWORD *)v23 - 1);
                  v23 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }

                *(void *)a5 = v33;
                *(void *)(a5 + std::ostream::~ostream(v1, v2 + 8) = v26;
                *(void *)(a5 + 16) = &v32[4 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }

              else
              {
                *(_DWORD *)char v23 = v17;
                int v26 = v23 + 4;
              }

              double v35 = v10 + v25;
              *(void *)(a5 + std::ostream::~ostream(v1, v2 + 8) = v26;
              sub_10037436C(a1, a2, a3, a4, a5, v44, a7, v35);
              double v10 = v35 - *(double *)((*a2)[3 * a6] + 8 * v17);
              *(void *)(a5 + 8) -= 4LL;
            }
          }

          ++v17;
        }

        while (v17 != v20);
      }
    }
  }

  else
  {
    BOOL v36 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE1A0(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }

double sub_100374600(uint64_t a1, void *a2, double a3, double a4)
{
  if (!*(_BYTE *)(a1 + 208)) {
    sub_1003AE1D4();
  }
  sub_100026B68(&v58, &v57, a3, a4);
  if (v58 < 0.0 || v58 > 180.0 || (double v7 = v57, v57 < 0.0) || v57 > 180.0) {
    sub_1003AE224();
  }
  if (a2[1] - *a2 != 48LL) {
    sub_1003AE1FC();
  }
  if (!*(_DWORD *)(a1 + 376) && a4 >= -60.0 && a3 >= -10.0 && a3 <= 10.0 && a4 <= 0.0 && *(double *)(*a2 + 40LL) > 0.7)
  {
    double v51 = (os_log_s *)qword_1008000A0;
    double v50 = 1.7;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(void *)((char *)&__p + 4) = 0x3FFB333333333333LL;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "#sf,AoA is in golden area, use default scale factor %f and ignore neural network probability",  (uint8_t *)&__p,  0xCu);
    }

    return v50;
  }

  double v8 = *(double *)(a1 + 104);
  if (v58 - v8 >= 0.0) {
    double v9 = v58 - v8;
  }
  else {
    double v9 = 0.0;
  }
  if (v58 + v8 <= 180.0) {
    double v10 = v58 + v8;
  }
  else {
    double v10 = 180.0;
  }
  __int128 v11 = (double *)operator new(0x10uLL);
  *__int128 v11 = v9;
  v11[1] = v10;
  __int128 v12 = (double *)operator new(0x10uLL);
  uint64_t v13 = v12;
  uint64_t v14 = 0LL;
  double v15 = v7 + v8;
  if (v7 + v8 > 180.0) {
    double v15 = 180.0;
  }
  double v16 = v7 - v8;
  if (v7 - v8 < 0.0) {
    double v16 = 0.0;
  }
  *__int128 v12 = v16;
  v12[1] = v15;
  __int128 __p = 0uLL;
  __int128 v60 = 0LL;
  int v54 = 0LL;
  unint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  do
  {
    uint64_t v17 = 0LL;
    double v18 = v11[v14];
    do
    {
      uint64_t v19 = *(void *)(a1 + 560);
      if (v19)
      {
        unint64_t v20 = sub_100120230(v19, v18, v13[v17]);
        int v21 = v20;
        if ((v20 & 0xFF00000000LL) != 0)
        {
          uint64_t v22 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v60)
          {
            int v24 = (char *)__p;
            uint64_t v25 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v26 = v25 + 1;
            uint64_t v27 = (uint64_t)&v60[-__p];
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              unint64_t v29 = (char *)sub_100031724((uint64_t)&v60, v28);
              uint64_t v22 = (char *)*((void *)&__p + 1);
              int v24 = (char *)__p;
            }

            else
            {
              unint64_t v29 = 0LL;
            }

            uint64_t v30 = &v29[4 * v25];
            *(_DWORD *)uint64_t v30 = v21;
            char v23 = v30 + 4;
            while (v22 != v24)
            {
              int v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }

            *(void *)&__int128 __p = v30;
            *((void *)&__p + 1) = v23;
            __int128 v60 = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }

          else
          {
            **((_DWORD **)&__p + 1) = v20;
            char v23 = v22 + 4;
          }

          *((void *)&__p + 1) = v23;
        }
      }

      ++v17;
    }

    while (v17 != 2);
    ++v14;
  }

  while (v14 != 2);
  uint64_t v33 = (_DWORD *)*((void *)&__p + 1);
  __int128 v32 = (_DWORD *)__p;
  double v34 = 0.0;
  if ((void)__p == *((void *)&__p + 1)) {
    goto LABEL_79;
  }
  do
  {
    if ((*v32 - 7) <= 0xFFFFFFF9) {
      __assert_rtn( "getAoaScaleFactor",  "RoseSensorFusionTrackingTargetSet.cpp",  750,  "region > 0 && region <= kNumberOfRegions");
    }
    uint64_t v35 = (*v32 - 1);
    uint64_t v36 = *a2;
    uint64_t v37 = v55;
    if (v55 >= v56)
    {
      uint64_t v39 = v54;
      uint64_t v40 = (v55 - v54) >> 3;
      unint64_t v41 = v40 + 1;
      uint64_t v42 = v56 - v54;
      if ((v56 - v54) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        unsigned int v44 = (char *)sub_1000472C0((uint64_t)&v56, v43);
        uint64_t v39 = v54;
        uint64_t v37 = v55;
      }

      else
      {
        unsigned int v44 = 0LL;
      }

      uint64_t v45 = &v44[8 * v40];
      *(void *)uint64_t v45 = *(void *)(v36 + 8 * v35);
      uint64_t v38 = v45 + 8;
      while (v37 != v39)
      {
        uint64_t v46 = *((void *)v37 - 1);
        v37 -= 8;
        *((void *)v45 - 1) = v46;
        v45 -= 8;
      }

      int v54 = v45;
      uint64_t v56 = &v44[8 * v43];
      if (v39) {
        operator delete(v39);
      }
    }

    else
    {
      *(void *)unint64_t v55 = *(void *)(v36 + 8 * v35);
      uint64_t v38 = v55 + 8;
    }

    unint64_t v55 = v38;
    ++v32;
  }

  while (v32 != v33);
  __int128 v32 = (_DWORD *)__p;
  if (*((void *)&__p + 1) == (void)__p) {
    goto LABEL_79;
  }
  uint64_t v47 = 0LL;
  unint64_t v48 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
  if (v48 <= 1) {
    unint64_t v48 = 1LL;
  }
  int v49 = -1;
  double v34 = 0.0;
  do
  {
    if (*(double *)&v54[8 * v47] > v34)
    {
      int v49 = *(_DWORD *)(__p + 4 * v47);
      double v34 = *(double *)&v54[8 * v47];
    }

    ++v47;
  }

  while (v48 != v47);
  if (v49 != 2) {
    goto LABEL_79;
  }
  if (v34 <= *(double *)(a1 + 128))
  {
    if (v34 > *(double *)(a1 + 144))
    {
      double v50 = *(double *)(a1 + 152);
      goto LABEL_80;
    }

void sub_100374AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

double sub_100374B48(uint64_t a1)
{
  uint64_t v1 = a1;
  double v2 = *(double *)(a1 + 1464);
  __double2 v3 = __sincos_stret(*(double *)(a1 + 1456));
  __double2 v4 = __sincos_stret(v2);
  v1 += 8LL;
  sub_100377198(v1);
  double v6 = v5;
  sub_1003770C8(v1);
  double v8 = v7;
  __double2 v9 = __sincos_stret(v6);
  __double2 v10 = __sincos_stret(v8);
  double v11 = v3.__cosval * v4.__cosval * (v9.__cosval * v10.__cosval)
      + v3.__sinval * v9.__sinval
      + v3.__cosval * v4.__sinval * (v9.__cosval * v10.__sinval);
  double v12 = 0.0;
  if (v11 > 1.0) {
    return v12;
  }
  if (v11 < -1.0) {
    return 180.0;
  }
  double v14 = acos(v11);
  return sub_100026A20(v14);
}

uint64_t sub_100374C2C(uint64_t result)
{
  if (!*(_BYTE *)(result + 208)) {
    sub_1003AE24C();
  }
  uint64_t v1 = result;
  uint64_t v3 = *(void *)(result + 216);
  uint64_t v2 = *(void *)(result + 224);
  while (v3 != v2)
  {
    double v4 = *(double *)(v3 + 1312);
    if (v4 < *(double *)(v1 + 88) || *(_DWORD *)(v3 + 1340) >= *(_DWORD *)(v1 + 28))
    {
      uint64_t result = sub_100376508((uint64_t)&v10, v3 + 1480, v2, v3);
      uint64_t v2 = v6;
      uint64_t v7 = *(void *)(v1 + 224);
      if (v7 != v6)
      {
        double v8 = (void *)(v7 - 1016);
        do
        {
          v8[64] = off_1007AED90;
          v8[53] = off_1007AED90;
          v8[11] = off_1007AED90;
          *double v8 = off_1007AED90;
          __double2 v9 = v8 - 58;
          v8 -= 185;
        }

        while (v9 != (void *)v6);
      }

      *(void *)(v1 + 224) = v6;
    }

    else
    {
      else {
        char v5 = 2;
      }
      *(_BYTE *)(v3 + 1304) = v5;
      v3 += 1480LL;
      uint64_t v2 = *(void *)(v1 + 224);
    }
  }

  return result;
}

double sub_100374D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0x100000003LL;
  double v11 = &off_1007BD278;
  __int128 v12 = xmmword_10042DB70;
  double v14 = v15;
  uint64_t v31 = 0x300000003LL;
  unint64_t v29 = &off_1007BC508;
  __int128 v30 = xmmword_10042DE90;
  __int128 v32 = v33;
  double v5 = sub_10037638C(a3, (uint64_t)&v11, (uint64_t)&v29);
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v21 = 0x300000001LL;
  double v16 = &off_1007BD1A0;
  if (v6 > 1) {
    sub_1003AB150(422, "this->max_num_rows_ >= num_rows");
  }
  if (v7 >= 4) {
    sub_1003AB150(423, "this->max_num_cols_ >= num_cols");
  }
  double v8 = v5;
  unsigned int v17 = v6;
  unsigned int v18 = v7;
  int v19 = v7 * v6;
  unsigned int v20 = v6;
  uint64_t v22 = &v23;
  sub_1002CB364(a2, &v16);
  uint64_t v26 = 0x300000001LL;
  int v24 = &off_1007BD1A0;
  __int128 v25 = xmmword_10042E860;
  uint64_t v27 = &v28;
  sub_1002DA040((uint64_t)&v16, (uint64_t)&v24, -0.5);
  uint64_t v13 = 0x300000003LL;
  double v11 = &off_1007BC508;
  __int128 v12 = xmmword_10042DE90;
  double v14 = v15;
  uint64_t v36 = 0x100000003LL;
  double v34 = &off_1007BD278;
  __int128 v35 = xmmword_10042DB70;
  uint64_t v37 = (double *)v38;
  uint64_t v31 = 0x10000000CLL;
  unint64_t v29 = &off_1007BD2C0;
  __int128 v30 = xmmword_10042E850;
  __int128 v32 = v33;
  sub_1002D9BF0(a3, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v11);
  uint64_t v31 = 0x300000001LL;
  unint64_t v29 = &off_1007BD1A0;
  __int128 v30 = xmmword_10042E860;
  __int128 v32 = v33;
  sub_1002CB548((uint64_t)&v24, (uint64_t)&v11, (uint64_t)&v29);
  uint64_t v36 = 0x100000001LL;
  double v34 = &off_1007BCA50;
  *(void *)&__int128 v9 = 0x100000001LL;
  *((void *)&v9 + 1) = 0x100000001LL;
  __int128 v35 = v9;
  uint64_t v37 = (double *)v38;
  sub_1002CB548((uint64_t)&v29, a2, (uint64_t)&v34);
  if (DWORD2(v35) != 1) {
    sub_1003AE178();
  }
  return 0.0634936359 / sqrt(v8) * exp(*v37);
}

uint64_t sub_100374F7C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x1C8uLL);
  sub_10036FCC4(a1 + 464, a2 + 464);
  sub_1003700B4(a1 + 552, a2 + 552);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  sub_10036FCC4(a1 + 888, a2 + 888);
  sub_1003700B4(a1 + 976, a2 + 976);
  __int128 v4 = *(_OWORD *)(a2 + 1304);
  __int128 v5 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v5;
  *(_OWORD *)(a1 + 1304) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 1352);
  __int128 v7 = *(_OWORD *)(a2 + 1368);
  __int128 v8 = *(_OWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1400) = v8;
  *(_OWORD *)(a1 + 1352) = v6;
  *(_OWORD *)(a1 + 136std::ostream::~ostream(v1, v2 + 8) = v7;
  __int128 v9 = *(_OWORD *)(a2 + 1416);
  __int128 v10 = *(_OWORD *)(a2 + 1432);
  __int128 v11 = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 144std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = v11;
  *(_OWORD *)(a1 + 1std::ios::~ios(v1 + 416) = v9;
  *(_OWORD *)(a1 + 1432) = v10;
  *(_BYTE *)(a1 + 1480) = 1;
  return a1;
}

void sub_100375044(_Unwind_Exception *a1)
{
  *uint64_t v3 = off_1007AED90;
  *uint64_t v2 = off_1007AED90;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100375074(uint64_t a1)
{
  *(void *)a1 = 0x3200000032LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = xmmword_1006E0FA8;
  *(void *)(a1 + sub_100021DA8(v1 + 120) = 0x3FDA6B5764E3D198LL;
  *(_OWORD *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0FC0;
  *(void *)(a1 + 144) = 0x3FB144BFB34BD977LL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0FA8;
  *(void *)(a1 + 264) = 0x3FDA6B5764E3D198LL;
  *(_OWORD *)(a1 + 272) = xmmword_1006E0FC0;
  *(void *)(a1 + 28std::ostream::~ostream(v1, v2 + 8) = 0x3FB144BFB34BD977LL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = xmmword_1006E0FA8;
  *(void *)(a1 + 40std::ostream::~ostream(v1, v2 + 8) = 0x3FDA6B5764E3D198LL;
  *(void *)(a1 + 432) = 0x3FB144BFB34BD977LL;
  *(_OWORD *)(a1 + std::ios::~ios(v1 + 416) = xmmword_1006E0FC0;
  *(_DWORD *)(a1 + 440) = 8;
  *(_BYTE *)(a1 + 444) = 0;
  uint64_t v2 = a1 + 456;
  *(void *)(a1 + 480) = 0x100000006LL;
  *(void *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 456) = &off_1007BF750;
  *(_OWORD *)(a1 + 464) = xmmword_1006E0F20;
  *(void *)(a1 + 48std::ostream::~ostream(v1, v2 + 8) = a1 + 496;
  sub_1002CAEDC((_DWORD *)(a1 + 456), 6, 1);
  sub_1002CAF28(v2, 0.0);
  *(void *)(a1 + 56std::ostream::~ostream(v1, v2 + 8) = 0x600000006LL;
  *(void *)(a1 + 544) = &off_1007BF708;
  *(_OWORD *)(a1 + 552) = xmmword_1006E0F10;
  *(void *)(a1 + 576) = a1 + 584;
  sub_1002CAEDC((_DWORD *)(a1 + 544), 6, 6);
  sub_1002CAF28(a1 + 544, 0.0);
  for (int i = 0; i != 6; ++i)
    *(void *)sub_100304F3C(a1 + 544, i, i) = 0x3FF0000000000000LL;
  *(void *)(a1 + 872) = 0LL;
  *(void *)(a1 + 904) = 0x100000006LL;
  *(void *)(a1 + 880) = &off_1007BF750;
  *(_OWORD *)(a1 + 88std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F20;
  *(void *)(a1 + 912) = a1 + 920;
  sub_1002CAEDC((_DWORD *)(a1 + 880), 6, 1);
  sub_1002CAF28(a1 + 880, 0.0);
  *(void *)(a1 + 992) = 0x600000006LL;
  *(void *)(a1 + 96std::ostream::~ostream(v1, v2 + 8) = &off_1007BF708;
  *(_OWORD *)(a1 + 976) = xmmword_1006E0F10;
  *(void *)(a1 + 1000) = a1 + 1008;
  sub_1002CAEDC((_DWORD *)(a1 + 968), 6, 6);
  sub_1002CAF28(a1 + 968, 0.0);
  for (int j = 0; j != 6; ++j)
    *(void *)sub_100304F3C(a1 + 968, j, j) = 0x3FF0000000000000LL;
  return a1;
}

void sub_1003752CC(_Unwind_Exception *a1)
{
  *__int128 v4 = off_1007AED90;
  *uint64_t v3 = off_1007AED90;
  *uint64_t v2 = off_1007AED90;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100375314(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x9DC0588FE9DC0589LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2C47F4EE02C47FLL) {
    sub_10001E11C();
  }
  if (0x3B80B11FD3B80B12LL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x3B80B11FD3B80B12LL * ((a1[2] - *a1) >> 3);
  }
  if (0x9DC0588FE9DC0589LL * ((a1[2] - *a1) >> 3) >= 0x1623FA7701623FLL) {
    unint64_t v6 = 0x2C47F4EE02C47FLL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    __int128 v7 = (char *)sub_1003755A0((uint64_t)(a1 + 2), v6);
  }
  else {
    __int128 v7 = 0LL;
  }
  __int128 v10 = v7;
  __int128 v11 = &v7[1480 * v3];
  uint64_t v13 = &v7[1480 * v6];
  sub_100375438((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  __int128 v12 = v11 + 1480;
  sub_10037552C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100375694((uint64_t)&v10);
  return v8;
}

void sub_100375424(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_100375438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  memcpy((void *)(a2 + 8), (const void *)(a3 + 8), 0x1C8uLL);
  sub_10036FCC4(a2 + 464, a3 + 464);
  sub_1003700B4(a2 + 552, a3 + 552);
  *(void *)(a2 + 880) = *(void *)(a3 + 880);
  sub_10036FCC4(a2 + 888, a3 + 888);
  sub_1003700B4(a2 + 976, a3 + 976);
  __int128 v5 = *(_OWORD *)(a3 + 1304);
  __int128 v6 = *(_OWORD *)(a3 + 1336);
  *(_OWORD *)(a2 + 1320) = *(_OWORD *)(a3 + 1320);
  *(_OWORD *)(a2 + 1336) = v6;
  *(_OWORD *)(a2 + 1304) = v5;
  __int128 v7 = *(_OWORD *)(a3 + 1352);
  __int128 v8 = *(_OWORD *)(a3 + 1368);
  __int128 v9 = *(_OWORD *)(a3 + 1400);
  *(_OWORD *)(a2 + 1384) = *(_OWORD *)(a3 + 1384);
  *(_OWORD *)(a2 + 1400) = v9;
  *(_OWORD *)(a2 + 1352) = v7;
  *(_OWORD *)(a2 + 136std::ostream::~ostream(v1, v2 + 8) = v8;
  __n128 result = *(__n128 *)(a3 + 1416);
  __int128 v11 = *(_OWORD *)(a3 + 1432);
  __int128 v12 = *(_OWORD *)(a3 + 1464);
  *(_OWORD *)(a2 + 144std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(a3 + 1448);
  *(_OWORD *)(a2 + 1464) = v12;
  *(__n128 *)(a2 + 1std::ios::~ios(v1 + 416) = result;
  *(_OWORD *)(a2 + 1432) = v11;
  return result;
}

void sub_1003754FC(_Unwind_Exception *a1)
{
  *unint64_t v3 = off_1007AED90;
  *uint64_t v2 = off_1007AED90;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_10037552C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003755E8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003755A0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2C47F4EE02C480LL) {
    sub_10001D350();
  }
  return operator new(1480 * a2);
}

uint64_t sub_1003755E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = a7 - 1480;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 1480LL;
    sub_100375438(a1, v13, v11 + a3);
  }

  return a6;
}

uint64_t sub_100375694(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3 != v2)
  {
    unint64_t v4 = v3 - 127;
    do
    {
      v4[64] = off_1007AED90;
      v4[53] = off_1007AED90;
      v4[11] = off_1007AED90;
      *unint64_t v4 = off_1007AED90;
      uint64_t v5 = v4 - 58;
      v4 -= 185;
    }

    while (v5 != v2);
    *(void *)(a1 + 16) = v2;
  }

  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

void *sub_1003756FC(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001E0CC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0LL;
      v6[1] = 0LL;
      void v6[2] = 0LL;
      sub_10011B560(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24LL;
    }

    while (v9);
    a1[1] = v8;
  }

  return a1;
}

void sub_100375794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1003757B4(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100375884(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1003758C8(&v13, a2);
        }
        else {
          sub_100375978((uint64_t)&v13, a2);
        }
        return a1;
      }
    }

    else
    {
      unint64_t v9 = v8 - 1;
    }

    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0LL;
    }
    *(void *)(*a1 + 8 * v11) = 0LL;
    goto LABEL_10;
  }

  return a1;
}

void *sub_100375884(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_10001E11C();
  }
  uint64_t result = sub_1000472C0((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0LL;
  a1[2] = v4;
  return result;
}

void *sub_1003758C8(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1LL << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }

  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *unint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }

  return result;
}

void sub_100375978(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1LL << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }

  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }

void *sub_100375A24(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001E0CC(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      sub_100375ACC(v6, a3);
      v6 += 3;
      v9 -= 24LL;
    }

    while (v9);
    a1[1] = v8;
  }

  return a1;
}

void sub_100375AAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_100375ACC(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    sub_100375884(a1, v4);
    sub_100375B24( a1,  *(void **)a2,  0LL,  (void *)(*(void *)a2 + 8LL * (*(void *)(a2 + 8) >> 6)),  *(void *)(a2 + 8) & 0x3F,  *(void *)(a2 + 8));
  }

  return a1;
}

void sub_100375B24(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0LL;
    }
    *(void *)(*a1 + 8 * vstd::ostream::~ostream(v1, v2 + 8) = 0LL;
  }

  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  sub_100375BA0(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_100375BA0( void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      uint64_t v9 = 1LL << v8;
      if (((*a1 >> a2) & 1) != 0) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = (_DWORD)v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0LL;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }

      else
      {
        ++v8;
      }

      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000LL;
      *(_DWORD *)(a5 + std::ostream::~ostream(v1, v2 + 8) = v8;
    }

    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }

  *(void *)a6 = a1;
  *(void *)(a6 + std::ostream::~ostream(v1, v2 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_100375C48(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_100375C88((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100375C88(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
    uint64_t v5 = *(void **)(i - 24);
    uint64_t v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

uint64_t sub_100375CCC( uint64_t a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, __int128 *a10)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t result = sub_100375F18(v11, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v11 + 584;
  return result;
}

void sub_100375D20(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100375D28( uint64_t *a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, __int128 *a10)
{
  uint64_t v10 = a1;
  uint64_t v11 = *a1;
  uint64_t v12 = 0x7E3F1F8FC7E3F1F9LL * ((a1[1] - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  uint64_t v20 = (uint64_t)(a1 + 2);
  unint64_t v21 = 0x7E3F1F8FC7E3F1F9LL * ((v10[2] - v11) >> 3);
  if (2 * v21 > v13) {
    unint64_t v13 = 2 * v21;
  }
  if (v21 >= 0x381C0E070381C0LL) {
    unint64_t v22 = 0x70381C0E070381LL;
  }
  else {
    unint64_t v22 = v13;
  }
  uint64_t v36 = v10 + 2;
  if (v22)
  {
    uint64_t v23 = a3;
    uint64_t v31 = v10;
    uint64_t v24 = v12;
    __int128 v25 = (char *)sub_100376068(v20, v22);
    uint64_t v12 = v24;
    uint64_t v10 = v31;
    a3 = v23;
  }

  else
  {
    __int128 v25 = 0LL;
  }

  __int128 __p = v25;
  uint64_t v33 = &v25[584 * v12];
  uint64_t v34 = (uint64_t)v33;
  __int128 v35 = &v25[584 * v22];
  sub_100375F18((uint64_t)v33, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  uint64_t v34 = (uint64_t)(v33 + 584);
  sub_100375FF4(v10, &__p);
  uint64_t v26 = v10[1];
  uint64_t v27 = (uint64_t)v33;
  if ((char *)v34 != v33)
  {
    uint64_t v28 = (void *)(v34 - 576);
    do
    {
      v28[11] = off_1007AED90;
      *uint64_t v28 = off_1007AED90;
      unint64_t v29 = v28 - 1;
      v28 -= 73;
    }

    while (v29 != (void *)v27);
    uint64_t v34 = v27;
  }

  if (__p) {
    operator delete(__p);
  }
  return v26;
}

uint64_t sub_100375F18( uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, __int128 *a8, double a9, double a10)
{
  *(_DWORD *)a1 = a2;
  uint64_t v19 = a1 + 96;
  sub_10036FCC4(a1 + 8, a3);
  sub_1003700B4(v19, a3 + 88);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 416);
  *(_BYTE *)(a1 + 432) = a4;
  *(double *)(a1 + 440) = a9;
  *(double *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = a10;
  *(void *)(a1 + 456) = a5;
  *(_DWORD *)(a1 + 464) = a6;
  *(_DWORD *)(a1 + 46std::ostream::~ostream(v1, v2 + 8) = a7;
  __int128 v20 = *a8;
  __int128 v21 = a8[2];
  *(_OWORD *)(a1 + 48std::ostream::~ostream(v1, v2 + 8) = a8[1];
  *(_OWORD *)(a1 + 504) = v21;
  *(_OWORD *)(a1 + 472) = v20;
  __int128 v22 = a8[3];
  __int128 v23 = a8[4];
  __int128 v24 = a8[6];
  *(_OWORD *)(a1 + 552) = a8[5];
  *(_OWORD *)(a1 + 56std::ostream::~ostream(v1, v2 + 8) = v24;
  *(_OWORD *)(a1 + 520) = v22;
  *(_OWORD *)(a1 + 536) = v23;
  return a1;
}

void sub_100375FE4(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100375FF4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003760B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100376068(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x70381C0E070382LL) {
    sub_10001D350();
  }
  return operator new(584 * a2);
}

uint64_t sub_1003760B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = a7 - 584;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 584LL;
    sub_100376154(a1, v13, v11 + a3);
  }

  return a6;
}

__n128 sub_100376154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 96;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v6 = a2 + 96;
  sub_10036FCC4(a2 + 8, a3 + 8);
  sub_1003700B4(v6, v5);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  __int128 v7 = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(a2 + 432) = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(a2 + 44std::ostream::~ostream(v1, v2 + 8) = v7;
  __int128 v8 = *(_OWORD *)(a3 + 464);
  __int128 v9 = *(_OWORD *)(a3 + 480);
  __int128 v10 = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(a2 + 496) = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(a2 + 512) = v10;
  *(_OWORD *)(a2 + 464) = v8;
  *(_OWORD *)(a2 + 480) = v9;
  __n128 result = *(__n128 *)(a3 + 528);
  __int128 v12 = *(_OWORD *)(a3 + 544);
  __int128 v13 = *(_OWORD *)(a3 + 560);
  *(_BYTE *)(a2 + 576) = *(_BYTE *)(a3 + 576);
  *(_OWORD *)(a2 + 544) = v12;
  *(_OWORD *)(a2 + 560) = v13;
  *(__n128 *)(a2 + 52std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

void sub_1003761E8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_1003761F8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10001E0CC(result, a4);
    __n128 result = sub_10037627C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10037625C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v1, v2 + 8) = v10;
  sub_100375C48(&a9);
  _Unwind_Resume(a1);
}

void *sub_10037627C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100375ACC(v4, v6);
      v6 += 24LL;
      uint64_t v4 = v11 + 3;
      v11 += 3;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_10037631C((uint64_t)v8);
  return v4;
}

void sub_100376308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10037631C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100376350(a1);
  }
  return a1;
}

void sub_100376350(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v4 = *(void **)(v1 - 24);
    v1 -= 24LL;
    unint64_t v3 = v4;
    if (v4) {
      operator delete(v3);
    }
  }

double sub_10037638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *(_DWORD *)(a1 + 12)) {
    sub_1003AE33C();
  }
  if (*(_DWORD *)(a2 + 24) < v3) {
    sub_1003AE274();
  }
  if (*(_DWORD *)(a3 + 24) < v3) {
    sub_1003AE29C();
  }
  if (*(_DWORD *)(a3 + 28) < v3) {
    sub_1003AE2C4();
  }
  sub_1002CBDC8(a3, a1);
  uint64_t v6 = *(unsigned int *)(a3 + 8);
  unint64_t v7 = *(unsigned int *)(a3 + 12);
  __int128 v8 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v9 = *(_DWORD *)(a3 + 20);
  uint64_t v10 = *(void **)(a2 + 32);
  __CLPK_integer __n = *(_DWORD *)(a3 + 12);
  __CLPK_integer __m = v6;
  __CLPK_integer __lda = v9;
  size_t v11 = 4 * v6;
  __int128 v12 = (__CLPK_integer *)operator new[](4 * v6, &std::nothrow);
  if (!v12) {
    sub_1003AE2EC();
  }
  __int128 v13 = v12;
  dgetrf_(&__m, &__n, v8, &__lda, v12, &v20);
  memcpy(v10, v13, v11);
  operator delete[](v13);
  if (v20 < 0) {
LABEL_21:
  }
    sub_1003AE2EC();
  int v14 = *(double **)(a3 + 32);
  double result = *v14;
  if (v7 >= 2)
  {
    int v16 = v7 - 1;
    int v17 = v7 + 1;
    do
    {
      double result = result * v14[v17];
      v17 += v7 + 1;
      --v16;
    }

    while (v16);
  }

  if ((int)v7 >= 1)
  {
    char v18 = 0;
    do
      v18 += v7 != *(unsigned int *)(*(void *)(a2 + 32) + 4LL * (v7 - 1));
    while (v7-- > 1);
    if ((v18 & 1) != 0) {
      return -result;
    }
  }

  return result;
}

uint64_t sub_100376508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    memcpy((void *)(a4 + 8), (const void *)(v5 + 8), 0x1C8uLL);
    sub_1002CBDC8(a4 + 464, v5 + 464);
    sub_1002CBDC8(a4 + 552, v5 + 552);
    *(void *)(a4 + 880) = *(void *)(v5 + 880);
    sub_1002CBDC8(a4 + 888, v5 + 888);
    sub_1002CBDC8(a4 + 976, v5 + 976);
    __int128 v8 = *(_OWORD *)(v5 + 1320);
    __int128 v7 = *(_OWORD *)(v5 + 1336);
    *(_OWORD *)(a4 + 1304) = *(_OWORD *)(v5 + 1304);
    *(_OWORD *)(a4 + 1320) = v8;
    *(_OWORD *)(a4 + 1336) = v7;
    __int128 v9 = *(_OWORD *)(v5 + 1400);
    __int128 v11 = *(_OWORD *)(v5 + 1352);
    __int128 v10 = *(_OWORD *)(v5 + 1368);
    *(_OWORD *)(a4 + 1384) = *(_OWORD *)(v5 + 1384);
    *(_OWORD *)(a4 + 1400) = v9;
    *(_OWORD *)(a4 + 1352) = v11;
    *(_OWORD *)(a4 + 136std::ostream::~ostream(v1, v2 + 8) = v10;
    __int128 v12 = *(_OWORD *)(v5 + 1464);
    __int128 v14 = *(_OWORD *)(v5 + 1416);
    __int128 v13 = *(_OWORD *)(v5 + 1432);
    *(_OWORD *)(a4 + 144std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(v5 + 1448);
    *(_OWORD *)(a4 + 1464) = v12;
    *(_OWORD *)(a4 + 1std::ios::~ios(v1 + 416) = v14;
    *(_OWORD *)(a4 + 1432) = v13;
    a4 += 1480LL;
    v5 += 1480LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t sub_1003765EC()
{
  BOOL v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007FFCA0 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007FFC90 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFC90, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007FFCB8 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007FFCA8 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFCA8, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  __int128 v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007FFCD0 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007FFCC0 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFCC0, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  __int128 v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007FFCE8 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007FFCD8 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFCD8, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  int v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  char v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007FFD00 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007FFCF0 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFCF0, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  __CLPK_integer v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007FFD18 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007FFD08 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFD08, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  __int128 v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007FFD30 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007FFD20 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFD20, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  uint64_t v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007FFD48 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007FFD38 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007FFD38, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  __int128 v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007FFD60 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007FFD50 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007FFD50,  (void *)&_mh_execute_header);
}

void sub_100376BD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100376C44(void *result)
{
  result[16] = off_1007AED90;
  result[8] = off_1007AED90;
  *double result = off_1007AED90;
  return result;
}

void *sub_100376C5C(void *result)
{
  *double result = off_1007BC9D8;
  return result;
}

void *sub_100376C6C(void *result)
{
  *double result = off_1007BC9D8;
  return result;
}

void *sub_100376C7C(void *result)
{
  *double result = off_1007BC9D8;
  return result;
}

void *sub_100376C8C(void *result)
{
  *double result = off_1007BC9D8;
  return result;
}

void sub_100376C9C(uint64_t a1, uint64_t a2)
{
  double v3 = sub_100376EA8((uint64_t)v9, (uint64_t)v8);
  uint64_t v22 = 0x100000003LL;
  __CLPK_integer v20 = &off_1007BC4C0;
  __int128 v21 = xmmword_10042DB70;
  __int128 v23 = v24;
  uint64_t v17 = 0x100000134LL;
  __int128 v15 = &off_1007BC598;
  __int128 v16 = xmmword_10042DB90;
  char v18 = v19;
  uint64_t v12 = 0x100000003LL;
  __int128 v10 = &off_1007BC4C0;
  __int128 v11 = xmmword_10042DB70;
  __int128 v13 = v14;
  sub_1002CB6A8((uint64_t)v9, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  double v5 = v4;
  uint64_t v22 = 0x100000003LL;
  __CLPK_integer v20 = &off_1007BC4C0;
  __int128 v21 = xmmword_10042DB70;
  __int128 v23 = v24;
  uint64_t v17 = 0x100000134LL;
  __int128 v15 = &off_1007BC598;
  __int128 v16 = xmmword_10042DB90;
  char v18 = v19;
  uint64_t v12 = 0x100000003LL;
  __int128 v10 = &off_1007BC4C0;
  __int128 v11 = xmmword_10042DB70;
  __int128 v13 = v14;
  sub_1002CB6A8((uint64_t)v8, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  if (v5 > 0.0 && v6 > 0.0)
  {
    double v7 = acos(v3 / v5 / v6);
    sub_100026A20(v7);
  }

double sub_100376E2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0x300000001LL;
  double v5 = &off_1007BF828;
  __int128 v6 = xmmword_10042E860;
  __int128 v8 = &v9;
  sub_100382BC8(0, 2, &v5);
  return sub_100377034(a1 + 456, (uint64_t)&v5, 0, a2);
}

double sub_100376EA8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != 1 && *(_DWORD *)(a1 + 12) != 1) {
    sub_1003AE364();
  }
  if (*(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 12) != 1) {
    sub_1003AE38C();
  }
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 16)) {
    sub_1003AE3B4();
  }
  double v5 = *(double **)(a1 + 32);
  __int128 v6 = *(double **)(a2 + 32);
  double result = 0.0;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    double result = result + v9 * v10;
    --v4;
  }

  while (v4);
  return result;
}

void sub_100376F24(uint64_t a1)
{
  uint64_t v3 = 0x100000003LL;
  __int128 v1 = &off_1007BC4C0;
  __int128 v2 = xmmword_10042DB70;
  uint64_t v4 = &v5;
  sub_1002CB44C((uint64_t)&v11, (uint64_t)&unk_100800950, (uint64_t)&v1);
  uint64_t v18 = 0x100000003LL;
  __int128 v16 = &off_1007BC4C0;
  __int128 v17 = xmmword_10042DB70;
  __int128 v19 = &v20;
  uint64_t v13 = 0x100000134LL;
  __int128 v11 = &off_1007BC598;
  __int128 v12 = xmmword_10042DB90;
  __int128 v14 = &v15;
  uint64_t v8 = 0x100000003LL;
  __int128 v6 = &off_1007BC4C0;
  __int128 v7 = xmmword_10042DB70;
  double v9 = &v10;
  sub_1002CB6A8((uint64_t)&v1, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, "2");
}

double sub_100377034@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_100382D0C(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8LL * (sub_100382DD8(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }

  return result;
}

void sub_1003770B8(_Unwind_Exception *a1)
{
  *__int128 v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void sub_1003770C8(uint64_t a1)
{
  uint64_t v6 = 0x100000003LL;
  uint64_t v4 = &off_1007BC4C0;
  __int128 v5 = xmmword_10042DB70;
  __int128 v7 = &v8;
  sub_1002CB44C((uint64_t)v3, (uint64_t)&unk_100800990, (uint64_t)&v4);
  double v1 = sub_1002405E4((uint64_t)&v4, 2u);
  double v2 = sub_1002405E4((uint64_t)&v4, 1u);
  atan2(v1, v2);
}

double sub_10037716C(uint64_t a1)
{
  return v1 * 180.0 / 3.14159265;
}

void sub_100377198(uint64_t a1)
{
  uint64_t v15 = 0x100000003LL;
  uint64_t v13 = &off_1007BC4C0;
  __int128 v14 = xmmword_10042DB70;
  __int128 v16 = v17;
  sub_1002CB44C((uint64_t)&v6, (uint64_t)&unk_100800990, (uint64_t)&v13);
  sub_100382ECC((uint64_t)v5, (uint64_t)&v13);
  uint64_t v15 = 0x100000006LL;
  uint64_t v13 = &off_1007BF750;
  __int128 v14 = xmmword_1006E0F20;
  __int128 v16 = v17;
  sub_100383080((uint64_t)v11);
  uint64_t v8 = 0x100000006LL;
  uint64_t v6 = &off_1007BF750;
  __int128 v7 = xmmword_1006E0F20;
  double v9 = &v10;
  sub_1002CB6A8((uint64_t)v5, (uint64_t)&v13, (uint64_t)v11, (uint64_t)&v6, "2");
  double v2 = v1;
  uint64_t v3 = v12;
  v11[0] = &off_1007BF948;
  __int128 v12 = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  if (v2 != 0.0)
  {
    double v4 = sub_1002405E4((uint64_t)v5, 0);
    asin(v4 / v2);
  }

void sub_1003772E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 144);
  *(void *)(v1 - 184) = &off_1007BF948;
  *(void *)(v1 - 144) = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100377318(uint64_t a1)
{
  return v1 * 180.0 / 3.14159265;
}

double sub_100377344@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003LL;
  *(void *)a2 = &off_1007BC508;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DE90;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1002CAEDC((_DWORD *)a2, 3, 3);
  sub_1002CAF28(a2, 0.0);
  double v4 = sub_1002405E4(a1, 0);
  double v5 = sub_1002405E4(a1, 1u);
  double v6 = sub_1002405E4(a1, 2u);
  double v7 = sub_1002405E4(a1, 3u);
  double v14 = v5 * v5;
  double v15 = v4 * v4;
  *(double *)sub_1002CB40C(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_1002CB40C(a2, 0, 1) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  double v8 = v4 * v6;
  double v9 = v5 * v7;
  *(double *)sub_1002CB40C(a2, 0, 2) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_1002CB40C(a2, 1, 0) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_1002CB40C(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  double v10 = v4 * v7;
  double v11 = v5 * v6;
  *(double *)sub_1002CB40C(a2, 1, 2) = v11 + v10 + v11 + v10;
  *(double *)sub_1002CB40C(a2, 2, 0) = v8 + v9 + v8 + v9;
  *(double *)sub_1002CB40C(a2, 2, 1) = v11 - v10 + v11 - v10;
  __int128 v12 = (double *)sub_1002CB40C(a2, 2, 2);
  double result = -v15 - v14 + v6 * v6 + v7 * v7;
  *__int128 v12 = result;
  return result;
}

void sub_100377564(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double *sub_100377588(uint64_t a1)
{
  uint64_t v19 = 0x100000004LL;
  __int128 v17 = &off_1007BC550;
  __int128 v18 = xmmword_10042DB80;
  uint64_t v20 = &v21;
  uint64_t v14 = 0x10000018BLL;
  __int128 v12 = &off_1007BC938;
  __int128 v13 = xmmword_10042DEA0;
  double v15 = &v16;
  uint64_t v9 = 0x100000004LL;
  double v7 = &off_1007BC550;
  __int128 v8 = xmmword_10042DB80;
  double v10 = &v11;
  sub_1002CB6A8(a1, (uint64_t)&v17, (uint64_t)&v12, (uint64_t)&v7, "2");
  if (v2 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE3DC();
    }
    *(void *)sub_1002CB32C(a1, 0) = 0LL;
    *(void *)sub_1002CB32C(a1, 1u) = 0LL;
    *(void *)sub_1002CB32C(a1, 2u) = 0LL;
    double result = (double *)sub_1002CB32C(a1, 3u);
    *double result = 1.0;
  }

  else
  {
    double v4 = v2;
    for (unsigned int i = 0; i != 4; ++i)
    {
      double v6 = *(double *)sub_1002CB32C(a1, i) / v4;
      double result = (double *)sub_1002CB32C(a1, i);
      *double result = v6;
    }
  }

  return result;
}

double *sub_1003776FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003LL;
  *(void *)a2 = &off_1007BC508;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DE90;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1002CAEDC((_DWORD *)a2, 3, 3);
  sub_1002CAF28(a2, 0.0);
  double v4 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB40C(a2, 0, 1) = -v4;
  double v5 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 0, 2) = v5;
  double v6 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB40C(a2, 1, 0) = v6;
  double v7 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB40C(a2, 1, 2) = -v7;
  double v8 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 2, 0) = -v8;
  double v9 = sub_1002405E4(a1, 0);
  double result = (double *)sub_1002CB40C(a2, 2, 1);
  *double result = v9;
  return result;
}

void sub_10037784C(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double sub_100377860@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x400000004LL;
  *(void *)a2 = &off_1007BC860;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DEB0;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1002CAEDC((_DWORD *)a2, 4, 4);
  sub_1002CAF28(a2, 0.0);
  double v4 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB40C(a2, 0, 1) = v4;
  double v5 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 0, 2) = -v5;
  double v6 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB40C(a2, 0, 3) = v6;
  double v7 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB40C(a2, 1, 0) = -v7;
  double v8 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB40C(a2, 1, 2) = v8;
  double v9 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 1, 3) = v9;
  double v10 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 2, 0) = v10;
  double v11 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB40C(a2, 2, 1) = -v11;
  double v12 = sub_1002405E4(a1, 2u);
  *(double *)sub_1002CB40C(a2, 2, 3) = v12;
  double v13 = sub_1002405E4(a1, 0);
  *(double *)sub_1002CB40C(a2, 3, 0) = -v13;
  double v14 = sub_1002405E4(a1, 1u);
  *(double *)sub_1002CB40C(a2, 3, 1) = -v14;
  double v15 = sub_1002405E4(a1, 2u);
  uint64_t v16 = (double *)sub_1002CB40C(a2, 3, 2);
  double result = -v15;
  *uint64_t v16 = -v15;
  return result;
}

void sub_100377A94(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100377AA8(uint64_t a1, uint64_t a2, double *a3)
{
  if (!*(_BYTE *)(a1 + 444))
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    sub_1003AE408();
    return 0LL;
  }

  double v5 = *a3 - *(double *)(a1 + 448);
  if (v5 < 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE434();
    }
LABEL_5:
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 440) = 9;
    return result;
  }

  if (v5 == 0.0) {
    return 1LL;
  }
  uint64_t v24 = 0x600000006LL;
  uint64_t v22 = &off_1007BF708;
  __int128 v23 = xmmword_1006E0F10;
  __int128 v25 = &v26;
  sub_1002CAEDC(&v22, 6, 6);
  sub_1002CAF28((uint64_t)&v22, 0.0);
  for (int i = 0; i != 6; ++i)
    *(void *)sub_100304F3C((uint64_t)&v22, i, i) = 0x3FF0000000000000LL;
  uint64_t v19 = 0xC00000006LL;
  __int128 v17 = &off_1007BF990;
  __int128 v18 = xmmword_1006E10E0;
  uint64_t v20 = &v21;
  sub_1002CAEDC(&v17, 6, 12);
  sub_1002CAF28((uint64_t)&v17, 0.0);
  if (!sub_100377DCC(a1, a2, (uint64_t)a3, (uint64_t)&v22, (uint64_t)&v17))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE48C();
    }
    goto LABEL_5;
  }

  uint64_t v14 = 0x600000006LL;
  double v12 = &off_1007BF708;
  __int128 v13 = xmmword_1006E0F10;
  double v15 = &v16;
  uint64_t v39 = 0x100000006LL;
  std::string v37 = &off_1007BF798;
  __int128 v38 = xmmword_1006E0F20;
  uint64_t v40 = &v41;
  uint64_t v34 = 0x100000006LL;
  __int128 v32 = &off_1007BF798;
  __int128 v33 = xmmword_1006E0F20;
  __int128 v35 = &v36;
  uint64_t v29 = 0x100000018LL;
  __int128 v27 = &off_1007BF7E0;
  __int128 v28 = xmmword_1006E0F30;
  __int128 v30 = &v31;
  double v9 = sub_100383260((uint64_t)&v22, (uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v12);
  uint64_t v10 = a1 + 544;
  if (v9 >= *(double *)&qword_1007FFD68)
  {
    if ((sub_1003781A0((uint64_t)&v22, (uint64_t)&v17, v10, v5) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AE460();
      }
      LODWORD(result) = 9;
      goto LABEL_23;
    }
  }

  else
  {
    sub_100378858((uint64_t)&v12, (uint64_t)&v17, v10, v5);
  }

  *(double *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = *a3;
  BOOL v11 = sub_10038746C(a3);
  uint64_t result = 1LL;
  if (v11)
  {
LABEL_23:
    *(_DWORD *)(a1 + 440) = result;
    return 0LL;
  }

  return result;
}

BOOL sub_100377DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6 = *(double *)a2;
  double v7 = *(double *)a3;
  double v8 = *(double *)(a1 + 448);
  BOOL v9 = v8 >= *(double *)a2 && v8 <= *(double *)a3;
  if (v9)
  {
    uint64_t v55 = 0x100000003LL;
    *(void *)std::string buf = &off_1007BC4C0;
    *(_OWORD *)&uint8_t buf[8] = xmmword_10042DB70;
    uint64_t v56 = &v57;
    sub_1002CAEDC(buf, 3, 1);
    sub_1002CAF28((uint64_t)buf, 0.0);
    uint64_t v51 = 0x100000003LL;
    int v49 = &off_1007BC4C0;
    __int128 v50 = xmmword_10042DB70;
    uint64_t v52 = &v53;
    sub_1002CAEDC(&v49, 3, 1);
    sub_1002CAF28((uint64_t)&v49, 0.0);
    uint64_t v46 = 0x100000003LL;
    unsigned int v44 = &off_1007BC4C0;
    __int128 v45 = xmmword_10042DB70;
    uint64_t v47 = &v48;
    sub_1002CAEDC(&v44, 3, 1);
    sub_1002CAF28((uint64_t)&v44, 0.0);
    uint64_t v14 = 0LL;
    double v15 = v7 - v8;
    double v16 = v8 + (v7 - v8) * 0.5;
    double v17 = (v8 - v6) / (v7 - v6);
    double v18 = (v16 - v6) / (v7 - v6);
    do
    {
      uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 8 * v14);
      *(void *)sub_1002CB32C((uint64_t)buf, v14) = v19;
      uint64_t v20 = *(void *)(*(void *)(a3 + 40) + 8 * v14);
      *(void *)sub_1002CB32C((uint64_t)&v49, v14) = v20;
      uint64_t v21 = *(void *)(*(void *)(a2 + 16) + 8 * v14);
      *(void *)sub_1002CB32C((uint64_t)&v44, v14++) = v21;
    }

    while (v14 != 3);
    uint64_t v36 = 0x100000003LL;
    uint64_t v34 = &off_1007BC4C0;
    __int128 v35 = xmmword_10042DB70;
    std::string v37 = v38;
    sub_1003838C0((uint64_t)buf, (uint64_t)&v34, 1.0 - v17);
    uint64_t v31 = 0x100000003LL;
    uint64_t v29 = &off_1007BC4C0;
    __int128 v30 = xmmword_10042DB70;
    __int128 v32 = v33;
    sub_1003838C0((uint64_t)&v49, (uint64_t)&v29, v17);
    uint64_t v41 = 0x100000003LL;
    uint64_t v39 = &off_1007BC4C0;
    __int128 v40 = xmmword_10042DB70;
    uint64_t v42 = &v43;
    sub_1002CC25C((uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v39);
    uint64_t v31 = 0x100000003LL;
    uint64_t v29 = &off_1007BC4C0;
    __int128 v30 = xmmword_10042DB70;
    __int128 v32 = v33;
    sub_1003838C0((uint64_t)buf, (uint64_t)&v29, 1.0 - v18);
    uint64_t v26 = 0x100000003LL;
    uint64_t v24 = &off_1007BC4C0;
    __int128 v25 = xmmword_10042DB70;
    __int128 v27 = &v28;
    sub_1003838C0((uint64_t)&v49, (uint64_t)&v24, v18);
    uint64_t v36 = 0x100000003LL;
    uint64_t v34 = &off_1007BC4C0;
    __int128 v35 = xmmword_10042DB70;
    std::string v37 = v38;
    sub_1002CC25C((uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v34);
    sub_1002D5F00((uint64_t)&v29, (uint64_t)&v49);
    sub_100379A94(a1 + 456, a4, a5, (uint64_t)&v39, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v44, v15);
  }

  else
  {
    uint64_t v22 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      *(double *)&uint8_t buf[4] = v6;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v8;
      *(_WORD *)&_BYTE buf[22] = 2048;
      uint64_t v55 = *(void *)&v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "#sf,RoseEKF PropagateX1 error: Filter time is not between the two IMU timestamps - state propagation aborted, Pr eviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f",  buf,  0x20u);
    }

    *(_DWORD *)(a1 + 440) = 6;
  }

  return v9;
}

uint64_t sub_1003781A0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v55 = 0xC0000000CLL;
  uint64_t v53 = &off_1007BFAF8;
  __int128 v54 = xmmword_1006E10F0;
  uint64_t v56 = &v57;
  sub_1002CAEDC(&v53, 12, 12);
  sub_1002CAF28((uint64_t)&v53, 0.0);
  uint64_t v27 = 0x300000003LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BC508;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_10042DE90;
  uint64_t v28 = v29;
  sub_1003838C0((uint64_t)&qword_100800A40, (uint64_t)&v26, 1.0 / a4);
  sub_100383998((uint64_t)&v30, (uint64_t)&v53, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v30, (uint64_t)&v26, v8);
  uint64_t v27 = 0x300000003LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BC508;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_10042DE90;
  uint64_t v28 = v29;
  sub_1003838C0((uint64_t)&qword_100800AB0, (uint64_t)&v26, 1.0 / a4);
  sub_100383998((uint64_t)&v30, (uint64_t)&v53, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v30, (uint64_t)&v26, v9);
  uint64_t v27 = 0x300000003LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BC508;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_10042DE90;
  uint64_t v28 = v29;
  sub_1003838C0((uint64_t)&qword_1008009D0, (uint64_t)&v26, a4);
  sub_100383998((uint64_t)&v30, (uint64_t)&v53, (uint64_t)&qword_1007FFF50, (uint64_t)&qword_1007FFF50);
  sub_10037A98C((uint64_t)&v30, (uint64_t)&v26, v10);
  uint64_t v27 = 0x300000003LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BC508;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_10042DE90;
  uint64_t v28 = v29;
  sub_1003838C0((uint64_t)&qword_100800B20, (uint64_t)&v26, a4);
  sub_100383998((uint64_t)&v30, (uint64_t)&v53, (uint64_t)&qword_1007FFF88, (uint64_t)&qword_1007FFF88);
  sub_10037A98C((uint64_t)&v30, (uint64_t)&v26, v11);
  uint64_t v60 = 0x600000006LL;
  *(void *)std::string buf = &off_1007BF708;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1006E0F10;
  int v61 = &v62;
  sub_1002CB548(a1, (uint64_t)v58, (uint64_t)buf);
  unsigned int v13 = *(_DWORD *)(a1 + 8);
  unsigned int v12 = *(_DWORD *)(a1 + 12);
  uint64_t v42 = 0x600000006LL;
  uint64_t v43 = 0LL;
  uint64_t v41 = 0LL;
  unint64_t v40 = 0LL;
  uint64_t v39 = &off_1007BF708;
  if (v12 > 6)
  {
    uint64_t v22 = "this->max_num_rows_ >= num_rows";
    int v23 = 422;
    goto LABEL_18;
  }

  if (v13 >= 7)
  {
    uint64_t v22 = "this->max_num_cols_ >= num_cols";
    int v23 = 423;
LABEL_18:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v23, v22);
  }

  unint64_t v40 = __PAIR64__(v13, v12);
  LODWORD(v41) = v13 * v12;
  HIDWORD(v41) = v12;
  uint64_t v43 = &v44;
  sub_1002CB364(a1, &v39);
  uint64_t v46 = 0x600000006LL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF708;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1006E0F10;
  uint64_t v47 = v48;
  sub_1002CB548((uint64_t)buf, (uint64_t)&v39, (uint64_t)&__p);
  uint64_t v31 = 0xC00000006LL;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF990;
  *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = xmmword_1006E10E0;
  __int128 v32 = v33;
  sub_1002CB548(a2, (uint64_t)&v53, (uint64_t)&v30);
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  unsigned int v14 = *(_DWORD *)(a2 + 12);
  uint64_t v27 = 0x60000000CLL;
  uint64_t v28 = 0LL;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = 0uLL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BFB40;
  if (v14 > 0xC)
  {
    uint64_t v24 = "this->max_num_rows_ >= num_rows";
    int v25 = 422;
    goto LABEL_21;
  }

  if (v15 >= 7)
  {
    uint64_t v24 = "this->max_num_cols_ >= num_cols";
    int v25 = 423;
LABEL_21:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v25, v24);
  }

  v26.__r_.__value_.__l.__size_ = __PAIR64__(v15, v14);
  LODWORD(v26.__r_.__value_.__r.__words[2]) = v15 * v14;
  HIDWORD(v26.__r_.__value_.__r.__words[2]) = v14;
  uint64_t v28 = v29;
  sub_1002CB364(a2, &v26);
  uint64_t v36 = 0x600000006LL;
  uint64_t v34 = &off_1007BF708;
  __int128 v35 = xmmword_1006E0F10;
  std::string v37 = &v38;
  sub_1002CB548((uint64_t)&v30, (uint64_t)&v26, (uint64_t)&v34);
  uint64_t v50 = 0x600000006LL;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF708;
  *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = xmmword_1006E0F10;
  uint64_t v51 = &v52;
  sub_1002CC25C((uint64_t)&__p, (uint64_t)&v34, (uint64_t)&v49);
  uint64_t v31 = 0x600000006LL;
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF708;
  *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = xmmword_1006E0F10;
  __int128 v32 = v33;
  uint64_t v46 = 0x100000006LL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF798;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1006E0F20;
  uint64_t v47 = v48;
  uint64_t v27 = 0x100000018LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF7E0;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_1006E0F30;
  uint64_t v28 = v29;
  sub_1002D9BF0((uint64_t)&v49, (uint64_t)&__p, (uint64_t)&v26, (uint64_t)&v30);
  double v16 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    sub_10037CF50(&v49, &v26);
    int size = (char)v26.__r_.__value_.__s.__size_;
    std::string::size_type v19 = v26.__r_.__value_.__r.__words[0];
    sub_10037CF50(&v30, &__p);
    uint64_t v20 = &v26;
    if (size < 0) {
      uint64_t v20 = (std::string *)v19;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = p_p;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF propagateEFK: Pnew: %s Pinv: %s",  buf,  0x16u);
  }

  __p.__r_.__value_.__s.__data_[0] = 1;
  uint64_t v27 = 0x600000006LL;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF708;
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_1006E0F10;
  uint64_t v28 = v29;
  sub_100383E24((uint64_t)&v30, (uint64_t)&v26, (BOOL *)&__p);
  sub_1002CBDC8(a3, (uint64_t)&v26);
  return __p.__r_.__value_.__s.__data_[0];
}

void sub_1003787D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100378858(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v35 = 0x1200000012LL;
  __int128 v33 = &off_1007BFB88;
  __int128 v34 = xmmword_1006E1100;
  uint64_t v36 = &v37;
  sub_1002CAEDC(&v33, 18, 18);
  sub_1002CAF28((uint64_t)&v33, 0.0);
  uint64_t v30 = 0xC0000000CLL;
  uint64_t v28 = &off_1007BFAF8;
  __int128 v29 = xmmword_1006E10F0;
  uint64_t v31 = &v32;
  double v8 = sqrt(a4);
  sub_1002CAEDC(&v28, 12, 12);
  sub_1002CAF28((uint64_t)&v28, 0.0);
  uint64_t v19 = 0x300000003LL;
  double v17 = &off_1007BC508;
  __int128 v18 = xmmword_10042DE90;
  uint64_t v20 = v21;
  sub_1002DA040((uint64_t)&qword_100800C00, (uint64_t)&v17, v8);
  sub_100383998((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v38, (uint64_t)&v17, v9);
  uint64_t v19 = 0x300000003LL;
  double v17 = &off_1007BC508;
  __int128 v18 = xmmword_10042DE90;
  uint64_t v20 = v21;
  sub_1002DA040((uint64_t)&qword_100800C70, (uint64_t)&v17, v8);
  sub_100383998((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v38, (uint64_t)&v17, v10);
  uint64_t v19 = 0x300000003LL;
  double v17 = &off_1007BC508;
  __int128 v18 = xmmword_10042DE90;
  uint64_t v20 = v21;
  double v11 = 1.0 / v8;
  sub_1002DA040((uint64_t)&qword_100800B90, (uint64_t)&v17, v11);
  sub_100383998((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_1007FFF50, (uint64_t)&qword_1007FFF50);
  sub_10037A98C((uint64_t)&v38, (uint64_t)&v17, v12);
  uint64_t v19 = 0x300000003LL;
  double v17 = &off_1007BC508;
  __int128 v18 = xmmword_10042DE90;
  uint64_t v20 = v21;
  sub_1002DA040((uint64_t)&qword_100800CE0, (uint64_t)&v17, v11);
  sub_100383998((uint64_t)&v38, (uint64_t)&v28, (uint64_t)&qword_1007FFF88, (uint64_t)&qword_1007FFF88);
  sub_10037A98C((uint64_t)&v38, (uint64_t)&v17, v13);
  sub_100383FD0((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_1007FFD70, (uint64_t)&qword_1007FFD70);
  sub_10037D088((uint64_t)&v38, (uint64_t)&v28, v14);
  sub_10037D180(a3, (uint64_t)v22);
  uint64_t v25 = 0x600000006LL;
  int v23 = &off_1007BF708;
  __int128 v24 = xmmword_1006E0F10;
  std::string v26 = v27;
  sub_1002CB548((uint64_t)v22, a1, (uint64_t)&v23);
  uint64_t v19 = 0xC00000006LL;
  double v17 = &off_1007BF990;
  __int128 v18 = xmmword_1006E10E0;
  uint64_t v20 = v21;
  sub_1002CB548((uint64_t)&v23, a2, (uint64_t)&v17);
  sub_100384174((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_1007FFE70, (uint64_t)&qword_1007FFD70);
  sub_10037D1DC((uint64_t)&v38, (uint64_t)&v17, v15);
  uint64_t v19 = 0x600000006LL;
  double v17 = &off_1007BF708;
  __int128 v18 = xmmword_1006E0F10;
  uint64_t v20 = v21;
  sub_1002CB548(a3, a1, (uint64_t)&v17);
  sub_100384338((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&qword_1007FFE70, (uint64_t)&qword_1007FFE70);
  sub_10037D2D4((uint64_t)&v38, (uint64_t)&v17, v16);
  uint64_t v25 = 0x100000012LL;
  int v23 = &off_1007BFCA8;
  __int128 v24 = xmmword_1006E1110;
  std::string v26 = v27;
  uint64_t v40 = 0x1200000012LL;
  uint64_t v38 = &off_1007BFB88;
  __int128 v39 = xmmword_1006E1100;
  uint64_t v41 = &v42;
  uint64_t v19 = 0x1200000012LL;
  double v17 = &off_1007BFB88;
  __int128 v18 = xmmword_1006E1100;
  uint64_t v20 = v21;
  sub_1003844DC((uint64_t)&v33, (uint64_t)&v23, (uint64_t)&v38, (uint64_t)&v17);
  sub_10037D3CC((uint64_t)&v17, (uint64_t)&qword_1007FFE70, (uint64_t)&qword_1007FFE70, (uint64_t)&v38);
  sub_1002CBDC8(a3, (uint64_t)&v38);
}

void *sub_100378D7C(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_100378D8C(uint64_t a1, uint64_t *a2, double a3)
{
  if (!*(_BYTE *)(a1 + 444))
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    sub_1003AE408();
    return 0LL;
  }

  double v6 = *(double *)(a1 + 448);
  double v7 = a3 - v6;
  if (a3 - v6 >= 0.0)
  {
    if (a3 - v6 == 0.0) {
      return 1LL;
    }
    uint64_t v22 = 0x600000006LL;
    uint64_t v20 = &off_1007BF708;
    __int128 v21 = xmmword_1006E0F10;
    int v23 = &v24;
    sub_1002CAEDC(&v20, 6, 6);
    sub_1002CAF28((uint64_t)&v20, 0.0);
    for (int i = 0; i != 6; ++i)
      *(void *)sub_100304F3C((uint64_t)&v20, i, i) = 0x3FF0000000000000LL;
    uint64_t v36 = 0xC00000006LL;
    *(void *)uint64_t v35 = &off_1007BF990;
    *(_OWORD *)&v35[8] = xmmword_1006E10E0;
    uint64_t v37 = &v38;
    sub_1002CAEDC(v35, 6, 12);
    sub_1002CAF28((uint64_t)v35, 0.0);
    sub_100379144(a1, (uint64_t)a2, (uint64_t)&v20, (uint64_t)v35, a3);
    uint64_t v17 = 0x600000006LL;
    uint64_t v15 = &off_1007BF708;
    __int128 v16 = xmmword_1006E0F10;
    __int128 v18 = &v19;
    uint64_t v32 = 0x100000006LL;
    uint64_t v30 = &off_1007BF798;
    __int128 v31 = xmmword_1006E0F20;
    __int128 v33 = &v34;
    uint64_t v27 = 0x100000006LL;
    uint64_t v25 = &off_1007BF798;
    __int128 v26 = xmmword_1006E0F20;
    uint64_t v28 = &v29;
    buf[3] = 0x100000018LL;
    buf[0] = &off_1007BF7E0;
    *(_OWORD *)&buf[1] = xmmword_1006E0F30;
    uint8_t buf[4] = &v40;
    double v11 = sub_100383260((uint64_t)&v20, (uint64_t)&v30, (uint64_t)&v25, (uint64_t)buf, (uint64_t)&v15);
    if (v11 >= *(double *)&qword_1007FFD68)
    {
      uint64_t v12 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#sf,warning: Condition number of F = %.0f exceeds the threshold. F is not invertible. Attempting to propagate using EKF methods instead.",  (uint8_t *)buf,  0xCu);
      }

      if ((sub_1003781A0((uint64_t)&v20, (uint64_t)v35, a1 + 544, v7) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_1003AE460();
        }
        LODWORD(result) = 9;
LABEL_22:
        *(_DWORD *)(a1 + 440) = result;
        return 0LL;
      }
    }

    else
    {
      sub_100378858((uint64_t)&v15, (uint64_t)v35, a1 + 544, v7);
    }

    *(double *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = a3;
    BOOL v13 = sub_10038746C(a2);
    uint64_t result = 1LL;
    if (!v13) {
      return result;
    }
    goto LABEL_22;
  }

  double v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *a2;
    *(_DWORD *)uint64_t v35 = 134218496;
    *(double *)&v35[4] = v6;
    *(_WORD *)&v35[12] = 2048;
    *(double *)&v35[14] = a3;
    *(_WORD *)&v35[22] = 2048;
    uint64_t v36 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "#sf,Attempted to propagate state to the past during measurement update - Filter time is ahead of the event time, F ilterTime: %f, NewTime: %f, CurrentIMUTime: %f",  v35,  0x20u);
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 440) = 9;
  return result;
}

uint64_t sub_100379144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10 = *(double *)(a1 + 448);
  uint64_t v22 = 0x100000003LL;
  uint64_t v20 = &off_1007BC4C0;
  __int128 v21 = xmmword_10042DB70;
  int v23 = &v24;
  sub_1002CAEDC(&v20, 3, 1);
  sub_1002CAF28((uint64_t)&v20, 0.0);
  uint64_t v17 = 0x100000003LL;
  uint64_t v15 = &off_1007BC4C0;
  __int128 v16 = xmmword_10042DB70;
  __int128 v18 = &v19;
  sub_1002CAEDC(&v15, 3, 1);
  sub_1002CAF28((uint64_t)&v15, 0.0);
  for (uint64_t i = 0LL; i != 3; ++i)
  {
    uint64_t v12 = *(void *)(*(void *)(a2 + 40) + 8 * i);
    *(void *)sub_1002CB32C((uint64_t)&v20, i) = v12;
    uint64_t v13 = *(void *)(*(void *)(a2 + 16) + 8 * i);
    *(void *)sub_1002CB32C((uint64_t)&v15, i) = v13;
  }

  return sub_100379A94(a1 + 456, a3, a4, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v15, a5 - v10);
}

uint64_t sub_100379288(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  if (!*(_BYTE *)(a1 + 444))
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1003AE408();
      return 0LL;
    }

    return result;
  }

  double v6 = *(double *)(a1 + 448);
  double v7 = a4 - v6;
  if (a4 - v6 == 0.0) {
    return 1LL;
  }
  if (a4 - v6 < 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE434();
    }
    goto LABEL_17;
  }

  uint64_t v27 = 0x600000006LL;
  uint64_t v25 = &off_1007BF708;
  __int128 v26 = xmmword_1006E0F10;
  uint64_t v28 = &v29;
  sub_1002CAEDC(&v25, 6, 6);
  sub_1002CAF28((uint64_t)&v25, 0.0);
  for (int i = 0; i != 6; ++i)
    *(void *)sub_100304F3C((uint64_t)&v25, i, i) = 0x3FF0000000000000LL;
  uint64_t v22 = 0xC00000006LL;
  uint64_t v20 = &off_1007BF990;
  __int128 v21 = xmmword_1006E10E0;
  int v23 = &v24;
  sub_1002CAEDC(&v20, 6, 12);
  sub_1002CAF28((uint64_t)&v20, 0.0);
  if (!sub_10037962C(a1, a2, (uint64_t)a3, (uint64_t)&v25, (uint64_t)&v20, a4))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AE48C();
    }
LABEL_17:
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 440) = 9;
    return result;
  }

  uint64_t v17 = 0x600000006LL;
  uint64_t v15 = &off_1007BF708;
  __int128 v16 = xmmword_1006E0F10;
  __int128 v18 = &v19;
  uint64_t v37 = 0x100000006LL;
  uint64_t v35 = &off_1007BF798;
  __int128 v36 = xmmword_1006E0F20;
  uint64_t v38 = &v39;
  uint64_t v32 = 0x100000006LL;
  uint64_t v30 = &off_1007BF798;
  __int128 v31 = xmmword_1006E0F20;
  __int128 v33 = &v34;
  buf[3] = 0x100000018LL;
  buf[0] = &off_1007BF7E0;
  *(_OWORD *)&buf[1] = xmmword_1006E0F30;
  uint8_t buf[4] = &v41;
  double v12 = sub_100383260((uint64_t)&v25, (uint64_t)&v35, (uint64_t)&v30, (uint64_t)buf, (uint64_t)&v15);
  if (v12 >= *(double *)&qword_1007FFD68)
  {
    uint64_t v13 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(double *)((char *)buf + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#sf,warning: Condition number of F = %.0f exceeds the threshold. F is not invertible. Attempting to propagate us ing EKF methods instead.",  (uint8_t *)buf,  0xCu);
    }

    if ((sub_1003781A0((uint64_t)&v25, (uint64_t)&v20, a1 + 544, v7) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AE460();
      }
      LODWORD(result) = 9;
      goto LABEL_27;
    }
  }

  else
  {
    sub_100378858((uint64_t)&v15, (uint64_t)&v20, a1 + 544, v7);
  }

  *(double *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = a4;
  BOOL v14 = sub_10038746C(a3);
  uint64_t result = 1LL;
  if (v14)
  {
LABEL_27:
    *(_DWORD *)(a1 + 440) = result;
    return 0LL;
  }

  return result;
}

BOOL sub_10037962C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7 = *(double *)a2;
  double v8 = *(double *)a3;
  double v9 = *(double *)(a1 + 448);
  BOOL v10 = v9 >= *(double *)a2 && v9 <= *(double *)a3;
  if (v10)
  {
    uint64_t v64 = 0x100000003LL;
    *(void *)std::string buf = &off_1007BC4C0;
    *(_OWORD *)&uint8_t buf[8] = xmmword_10042DB70;
    unint64_t v65 = &v66;
    sub_1002CAEDC(buf, 3, 1);
    sub_1002CAF28((uint64_t)buf, 0.0);
    uint64_t v60 = 0x100000003LL;
    double v58 = &off_1007BC4C0;
    __int128 v59 = xmmword_10042DB70;
    int v61 = &v62;
    sub_1002CAEDC(&v58, 3, 1);
    sub_1002CAF28((uint64_t)&v58, 0.0);
    uint64_t v55 = 0x100000003LL;
    uint64_t v53 = &off_1007BC4C0;
    __int128 v54 = xmmword_10042DB70;
    uint64_t v56 = &v57;
    sub_1002CAEDC(&v53, 3, 1);
    sub_1002CAF28((uint64_t)&v53, 0.0);
    uint64_t v16 = 0LL;
    double v17 = a6 - v9;
    double v18 = v9 + (a6 - v9) * 0.5;
    double v19 = v8 - v7;
    double v20 = (v9 - v7) / (v8 - v7);
    double v21 = (v18 - v7) / (v8 - v7);
    double v22 = (a6 - v7) / v19;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(a2 + 40) + 8 * v16);
      *(void *)sub_1002CB32C((uint64_t)buf, v16) = v23;
      uint64_t v24 = *(void *)(*(void *)(a3 + 40) + 8 * v16);
      *(void *)sub_1002CB32C((uint64_t)&v58, v16) = v24;
      uint64_t v25 = *(void *)(*(void *)(a2 + 16) + 8 * v16);
      *(void *)sub_1002CB32C((uint64_t)&v53, v16++) = v25;
    }

    while (v16 != 3);
    uint64_t v45 = 0x100000003LL;
    uint64_t v43 = &off_1007BC4C0;
    __int128 v44 = xmmword_10042DB70;
    uint64_t v46 = v47;
    sub_1003838C0((uint64_t)buf, (uint64_t)&v43, 1.0 - v20);
    uint64_t v40 = 0x100000003LL;
    uint64_t v38 = &off_1007BC4C0;
    __int128 v39 = xmmword_10042DB70;
    uint64_t v41 = v42;
    sub_1003838C0((uint64_t)&v58, (uint64_t)&v38, v20);
    uint64_t v50 = 0x100000003LL;
    uint64_t v48 = &off_1007BC4C0;
    __int128 v49 = xmmword_10042DB70;
    uint64_t v51 = &v52;
    sub_1002CC25C((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v48);
    uint64_t v40 = 0x100000003LL;
    uint64_t v38 = &off_1007BC4C0;
    __int128 v39 = xmmword_10042DB70;
    uint64_t v41 = v42;
    sub_1003838C0((uint64_t)buf, (uint64_t)&v38, 1.0 - v21);
    uint64_t v35 = 0x100000003LL;
    __int128 v33 = &off_1007BC4C0;
    __int128 v34 = xmmword_10042DB70;
    __int128 v36 = v37;
    sub_1003838C0((uint64_t)&v58, (uint64_t)&v33, v21);
    uint64_t v45 = 0x100000003LL;
    uint64_t v43 = &off_1007BC4C0;
    __int128 v44 = xmmword_10042DB70;
    uint64_t v46 = v47;
    sub_1002CC25C((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&v43);
    uint64_t v35 = 0x100000003LL;
    __int128 v33 = &off_1007BC4C0;
    __int128 v34 = xmmword_10042DB70;
    __int128 v36 = v37;
    sub_1003838C0((uint64_t)buf, (uint64_t)&v33, 1.0 - v22);
    uint64_t v30 = 0x100000003LL;
    uint64_t v28 = &off_1007BC4C0;
    __int128 v29 = xmmword_10042DB70;
    __int128 v31 = &v32;
    sub_1003838C0((uint64_t)&v58, (uint64_t)&v28, v22);
    uint64_t v40 = 0x100000003LL;
    uint64_t v38 = &off_1007BC4C0;
    __int128 v39 = xmmword_10042DB70;
    uint64_t v41 = v42;
    sub_1002CC25C((uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v38);
    sub_100379A94(a1 + 456, a4, a5, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v53, v17);
  }

  else
  {
    __int128 v26 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v9;
      *(_WORD *)&_BYTE buf[22] = 2048;
      uint64_t v64 = *(void *)&v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#sf,RoseEKF PropagateX2 error: Filter time is not between the two IMU timestamps - state propagation aborted, Pr eviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f",  buf,  0x20u);
    }

    *(_DWORD *)(a1 + 440) = 6;
  }

  return v10;
}

uint64_t sub_100379A94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v129 = 0x100000004LL;
  uint64_t v127 = &off_1007BC550;
  __int128 v128 = xmmword_10042DB80;
  uint64_t v130 = &v131;
  sub_1002CAEDC(&v127, 4, 1);
  sub_1002CAF28((uint64_t)&v127, 0.0);
  *(void *)sub_1002CB32C((uint64_t)&v127, 0) = 0LL;
  *(void *)sub_1002CB32C((uint64_t)&v127, 1u) = 0LL;
  *(void *)sub_1002CB32C((uint64_t)&v127, 2u) = 0LL;
  *(void *)sub_1002CB32C((uint64_t)&v127, 3u) = 0x3FF0000000000000LL;
  sub_100377860(a4, (uint64_t)&v47);
  uint64_t v69 = 0x400000004LL;
  uint64_t v67 = &off_1007BC860;
  __int128 v68 = xmmword_10042DEB0;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v47, (uint64_t)&v67, 0.5);
  uint64_t v124 = 0x100000004LL;
  __int128 v122 = &off_1007BC550;
  __int128 v123 = xmmword_10042DB80;
  __int128 v125 = &v126;
  sub_1002CB548((uint64_t)&v67, (uint64_t)&v127, (uint64_t)&v122);
  uint64_t v69 = 0x100000004LL;
  uint64_t v67 = &off_1007BC550;
  __int128 v68 = xmmword_10042DB80;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v122, (uint64_t)&v67, a8 * 0.5);
  uint64_t v119 = 0x100000004LL;
  uint64_t v117 = &off_1007BC550;
  __int128 v118 = xmmword_10042DB80;
  __int128 v120 = &v121;
  sub_1002CC25C((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v117);
  sub_100377588((uint64_t)&v117);
  sub_100377860(a5, (uint64_t)&v47);
  uint64_t v69 = 0x400000004LL;
  uint64_t v67 = &off_1007BC860;
  __int128 v68 = xmmword_10042DEB0;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v47, (uint64_t)&v67, 0.5);
  uint64_t v114 = 0x100000004LL;
  __int128 v112 = &off_1007BC550;
  __int128 v113 = xmmword_10042DB80;
  uint64_t v115 = &v116;
  sub_1002CB548((uint64_t)&v67, (uint64_t)&v117, (uint64_t)&v112);
  uint64_t v69 = 0x100000004LL;
  uint64_t v67 = &off_1007BC550;
  __int128 v68 = xmmword_10042DB80;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v112, (uint64_t)&v67, a8 * 0.5);
  uint64_t v109 = 0x100000004LL;
  __int128 v107 = &off_1007BC550;
  __int128 v108 = xmmword_10042DB80;
  __int128 v110 = &v111;
  sub_1002CC25C((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v107);
  sub_100377588((uint64_t)&v107);
  sub_100377860(a5, (uint64_t)&v47);
  uint64_t v69 = 0x400000004LL;
  uint64_t v67 = &off_1007BC860;
  __int128 v68 = xmmword_10042DEB0;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v47, (uint64_t)&v67, 0.5);
  uint64_t v104 = 0x100000004LL;
  __int128 v102 = &off_1007BC550;
  __int128 v103 = xmmword_10042DB80;
  __int128 v105 = &v106;
  sub_1002CB548((uint64_t)&v67, (uint64_t)&v107, (uint64_t)&v102);
  uint64_t v69 = 0x100000004LL;
  uint64_t v67 = &off_1007BC550;
  __int128 v68 = xmmword_10042DB80;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v102, (uint64_t)&v67, a8);
  uint64_t v99 = 0x100000004LL;
  __int128 v97 = &off_1007BC550;
  __int128 v98 = xmmword_10042DB80;
  __int128 v100 = &v101;
  sub_1002CC25C((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v97);
  sub_100377588((uint64_t)&v97);
  sub_100377860(a6, (uint64_t)&v47);
  uint64_t v69 = 0x400000004LL;
  uint64_t v67 = &off_1007BC860;
  __int128 v68 = xmmword_10042DEB0;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v47, (uint64_t)&v67, 0.5);
  uint64_t v94 = 0x100000004LL;
  uint64_t v92 = &off_1007BC550;
  __int128 v93 = xmmword_10042DB80;
  __int128 v95 = &v96;
  sub_1002CB548((uint64_t)&v67, (uint64_t)&v97, (uint64_t)&v92);
  uint64_t v64 = 0x100000004LL;
  uint64_t v62 = &off_1007BC550;
  __int128 v63 = xmmword_10042DB80;
  unint64_t v65 = v66;
  sub_1002DA040((uint64_t)&v112, (uint64_t)&v62, 2.0);
  uint64_t v79 = 0x100000004LL;
  int v77 = &off_1007BC550;
  __int128 v78 = xmmword_10042DB80;
  __int128 v80 = &v81;
  sub_1002CC25C((uint64_t)&v122, (uint64_t)&v62, (uint64_t)&v77);
  uint64_t v59 = 0x100000004LL;
  uint64_t v57 = &off_1007BC550;
  __int128 v58 = xmmword_10042DB80;
  uint64_t v60 = v61;
  sub_1002DA040((uint64_t)&v102, (uint64_t)&v57, 2.0);
  uint64_t v49 = 0x100000004LL;
  uint64_t v47 = &off_1007BC550;
  __int128 v48 = xmmword_10042DB80;
  uint64_t v50 = v51;
  sub_1002CC25C((uint64_t)&v77, (uint64_t)&v57, (uint64_t)&v47);
  uint64_t v69 = 0x100000004LL;
  uint64_t v67 = &off_1007BC550;
  __int128 v68 = xmmword_10042DB80;
  __int128 v70 = v71;
  sub_1002CC25C((uint64_t)&v47, (uint64_t)&v92, (uint64_t)&v67);
  uint64_t v89 = 0x100000004LL;
  int v87 = &off_1007BC550;
  __int128 v88 = xmmword_10042DB80;
  __int128 v90 = &v91;
  sub_1002DA040((uint64_t)&v67, (uint64_t)&v87, 0.166666667);
  uint64_t v69 = 0x100000004LL;
  uint64_t v67 = &off_1007BC550;
  __int128 v68 = xmmword_10042DB80;
  __int128 v70 = v71;
  sub_1002DA040((uint64_t)&v87, (uint64_t)&v67, a8);
  uint64_t v84 = 0x100000004LL;
  __int128 v82 = &off_1007BC550;
  __int128 v83 = xmmword_10042DB80;
  __int128 v85 = &v86;
  sub_1002CC25C((uint64_t)&v127, (uint64_t)&v67, (uint64_t)&v82);
  sub_100377588((uint64_t)&v82);
  sub_100377344((uint64_t)&v82, (uint64_t)&v77);
  uint64_t v59 = 0x100000001LL;
  uint64_t v57 = &off_1007BD568;
  *(void *)&__int128 v15 = 0x100000001LL;
  *((void *)&v15 + 1) = 0x100000001LL;
  __int128 v58 = v15;
  uint64_t v60 = v61;
  v61[0] = 0;
  sub_100383650((uint64_t)&v67, a1, (uint64_t)&qword_1007FFF18, (uint64_t)&v57);
  uint64_t v64 = 0x100000003LL;
  uint64_t v62 = &off_1007BC4C0;
  __int128 v63 = xmmword_10042DB70;
  unint64_t v65 = v66;
  sub_1002CB548((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v62);
  uint64_t v49 = 0x100000003LL;
  uint64_t v47 = &off_1007BC4C0;
  __int128 v48 = xmmword_10042DB70;
  uint64_t v50 = v51;
  sub_1003838C0((uint64_t)&v62, (uint64_t)&v47, a8);
  uint64_t v54 = 0x100000003LL;
  uint64_t v52 = &off_1007BC4C0;
  __int128 v53 = xmmword_10042DB70;
  uint64_t v55 = v56;
  sub_1002CB548((uint64_t)&v77, a7, (uint64_t)&v52);
  uint64_t v59 = 0x100000003LL;
  uint64_t v57 = &off_1007BC4C0;
  __int128 v58 = xmmword_10042DB70;
  uint64_t v60 = v61;
  sub_1002DA040((uint64_t)&v52, (uint64_t)&v57, a8 * a8 * 0.5);
  uint64_t v74 = 0x100000003LL;
  uint64_t v72 = &off_1007BC4C0;
  __int128 v73 = xmmword_10042DB70;
  uint64_t v75 = &v76;
  sub_1002CC25C((uint64_t)&v47, (uint64_t)&v57, (uint64_t)&v72);
  uint64_t v64 = 0x100000003LL;
  uint64_t v62 = &off_1007BC4C0;
  __int128 v63 = xmmword_10042DB70;
  unint64_t v65 = v66;
  sub_1002CB548((uint64_t)&v77, (uint64_t)&unk_100800910, (uint64_t)&v62);
  uint64_t v49 = 0x100000003LL;
  uint64_t v47 = &off_1007BC4C0;
  __int128 v48 = xmmword_10042DB70;
  uint64_t v50 = v51;
  sub_1002CC25C((uint64_t)&v72, (uint64_t)&v62, (uint64_t)&v47);
  uint64_t v69 = 0x100000003LL;
  uint64_t v67 = &off_1007BC4C0;
  __int128 v68 = xmmword_10042DB70;
  __int128 v70 = v71;
  sub_1002CB44C((uint64_t)&v47, (uint64_t)&unk_100800910, (uint64_t)&v67);
  sub_1002CBDC8((uint64_t)&v72, (uint64_t)&v67);
  sub_100383998((uint64_t)&v67, a2, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&v77, v16);
  sub_10037AA84((uint64_t)&v77, (uint64_t)&v62);
  uint64_t v49 = 0x300000003LL;
  uint64_t v47 = &off_1007BC508;
  __int128 v48 = xmmword_10042DE90;
  uint64_t v50 = v51;
  sub_1003838C0((uint64_t)&v62, (uint64_t)&v47, a8);
  sub_100383998((uint64_t)&v67, a2, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&v47, v17);
  sub_100383998((uint64_t)&v67, a2, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&v77, v18);
  sub_100383998((uint64_t)&v67, a2, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_100800030, v19);
  uint64_t v64 = 0x300000003LL;
  uint64_t v62 = &off_1007BC508;
  __int128 v63 = xmmword_10042DE90;
  unint64_t v65 = v66;
  sub_1002DA040((uint64_t)&v77, (uint64_t)&v62, a8 * a8 / -3.0);
  uint64_t v59 = 0x300000003LL;
  uint64_t v57 = &off_1007BC508;
  __int128 v58 = xmmword_10042DE90;
  uint64_t v60 = v61;
  sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v57, a8 * a8 / 6.0);
  uint64_t v49 = 0x300000003LL;
  uint64_t v47 = &off_1007BC508;
  __int128 v48 = xmmword_10042DE90;
  uint64_t v50 = v51;
  sub_1002CB44C((uint64_t)&v62, (uint64_t)&v57, (uint64_t)&v47);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&v47, v20);
  uint64_t v69 = 0x100000001LL;
  uint64_t v67 = &off_1007BD568;
  *(void *)&__int128 v21 = 0x100000001LL;
  *((void *)&v21 + 1) = 0x100000001LL;
  __int128 v68 = v21;
  __int128 v70 = v71;
  v71[0] = 0;
  sub_100383650((uint64_t)&v47, a1, (uint64_t)&qword_1007FFEE0, (uint64_t)&v67);
  sub_1003776FC((uint64_t)&v47, (uint64_t)&v52);
  uint64_t v59 = 0x300000003LL;
  uint64_t v57 = &off_1007BC508;
  __int128 v58 = xmmword_10042DE90;
  uint64_t v60 = v61;
  sub_1002DA040((uint64_t)&v52, (uint64_t)&v57, a8);
  sub_1003776FC(a7, (uint64_t)v41);
  double v22 = pow(a8, 3.0);
  uint64_t v44 = 0x300000003LL;
  uint64_t v42 = &off_1007BC508;
  __int128 v43 = xmmword_10042DE90;
  uint64_t v45 = &v46;
  sub_1002DA040((uint64_t)v41, (uint64_t)&v42, v22 / 3.0);
  uint64_t v64 = 0x300000003LL;
  uint64_t v62 = &off_1007BC508;
  __int128 v63 = xmmword_10042DE90;
  unint64_t v65 = v66;
  sub_1002CB44C((uint64_t)&v57, (uint64_t)&v42, (uint64_t)&v62);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&v62, v23);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFF50);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_1007FFFC0, v24);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFF88);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_100800030, v25);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_100800030, v26);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF18);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_100800030, v27);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF50);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_100800030, v28);
  sub_100383998((uint64_t)&v67, a3, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF88);
  sub_10037A98C((uint64_t)&v67, (uint64_t)&qword_1007FFFC0, v29);
  uint64_t v49 = 0x100000001LL;
  uint64_t v47 = &off_1007BD568;
  *(void *)&__int128 v30 = 0x100000001LL;
  *((void *)&v30 + 1) = 0x100000001LL;
  __int128 v48 = v30;
  uint64_t v50 = v51;
  v51[0] = 0;
  sub_100383650((uint64_t)&v67, a1, (uint64_t)&qword_1007FFEE0, (uint64_t)&v47);
  uint64_t v59 = 0x100000003LL;
  uint64_t v57 = &off_1007BC4C0;
  __int128 v58 = xmmword_10042DB70;
  uint64_t v60 = v61;
  sub_1002CB548((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v57);
  uint64_t v64 = 0x100000003LL;
  uint64_t v62 = &off_1007BC4C0;
  __int128 v63 = xmmword_10042DB70;
  unint64_t v65 = v66;
  sub_1002CB44C((uint64_t)&v57, (uint64_t)&v72, (uint64_t)&v62);
  uint64_t v54 = 0x100000001LL;
  uint64_t v52 = &off_1007BD568;
  *(void *)&__int128 v31 = 0x100000001LL;
  *((void *)&v31 + 1) = 0x100000001LL;
  __int128 v53 = v31;
  uint64_t v55 = v56;
  v56[0] = 0;
  sub_100383650((uint64_t)&v47, a1, (uint64_t)&qword_1007FFEE0, (uint64_t)&v52);
  sub_10037AAE0((uint64_t)&v47, (uint64_t)&v62, v32);
  uint64_t v49 = 0x100000001LL;
  uint64_t v47 = &off_1007BD568;
  *(void *)&__int128 v33 = 0x100000001LL;
  *((void *)&v33 + 1) = 0x100000001LL;
  __int128 v48 = v33;
  uint64_t v50 = v51;
  v51[0] = 0;
  sub_100383650((uint64_t)&v67, a1, (uint64_t)&qword_1007FFF18, (uint64_t)&v47);
  uint64_t v59 = 0x100000003LL;
  uint64_t v57 = &off_1007BC4C0;
  __int128 v58 = xmmword_10042DB70;
  uint64_t v60 = v61;
  sub_1003838C0(a7, (uint64_t)&v57, a8);
  uint64_t v64 = 0x100000003LL;
  uint64_t v62 = &off_1007BC4C0;
  __int128 v63 = xmmword_10042DB70;
  unint64_t v65 = v66;
  sub_1002CC25C((uint64_t)&v67, (uint64_t)&v57, (uint64_t)&v62);
  uint64_t v54 = 0x100000001LL;
  uint64_t v52 = &off_1007BD568;
  *(void *)&__int128 v34 = 0x100000001LL;
  *((void *)&v34 + 1) = 0x100000001LL;
  __int128 v53 = v34;
  uint64_t v55 = v56;
  v56[0] = 0;
  sub_100383650((uint64_t)&v47, a1, (uint64_t)&qword_1007FFF18, (uint64_t)&v52);
  sub_10037AAE0((uint64_t)&v47, (uint64_t)&v62, v35);
  uint64_t v49 = 0x100000001LL;
  uint64_t v47 = &off_1007BD568;
  *(void *)&__int128 v36 = 0x100000001LL;
  *((void *)&v36 + 1) = 0x100000001LL;
  __int128 v48 = v36;
  uint64_t v50 = v51;
  v51[0] = 0;
  sub_100383650((uint64_t)&v67, a1, (uint64_t)&qword_1007FFF18, (uint64_t)&v47);
  uint64_t v64 = 0x100000003LL;
  uint64_t v62 = &off_1007BC4C0;
  __int128 v63 = xmmword_10042DB70;
  unint64_t v65 = v66;
  sub_1002CB548((uint64_t)&v77, (uint64_t)&v67, (uint64_t)&v62);
  uint64_t v59 = 0x100000001LL;
  uint64_t v57 = &off_1007BD568;
  *(void *)&__int128 v37 = 0x100000001LL;
  *((void *)&v37 + 1) = 0x100000001LL;
  __int128 v58 = v37;
  uint64_t v60 = v61;
  v61[0] = 0;
  sub_100383650((uint64_t)&v47, a1, (uint64_t)&qword_1007FFF18, (uint64_t)&v57);
  return sub_10037AAE0((uint64_t)&v47, (uint64_t)&v62, v38);
}

void *sub_10037A96C(void *result)
{
  result[16] = off_1007BC9D8;
  result[9] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037A98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 112),  *(_DWORD *)(*(void *)(a1 + 152) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 208) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037AA64(void *result)
{
  result[22] = off_1007BC9D8;
  result[15] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

double sub_10037AA84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003LL;
  *(void *)a2 = &off_1007BC508;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DE90;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_100383B3C(a1, a2);
  return result;
}

void sub_10037AAD0(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_10037AAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 64),  *(_DWORD *)(*(void *)(a1 + 104) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 160) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

BOOL sub_10037ABB8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v5 = a5 - a4;
  if (a5 - a4 == 0.0) {
    return 1LL;
  }
  if (a5 - a4 >= 0.0)
  {
    uint64_t v41 = 0x600000006LL;
    __int128 v39 = &off_1007BF708;
    __int128 v40 = xmmword_1006E0F10;
    uint64_t v42 = &v43;
    sub_1002CAEDC(&v39, 6, 6);
    sub_1002CAF28((uint64_t)&v39, 0.0);
    for (int i = 0; i != 6; ++i)
      *(void *)sub_100304F3C((uint64_t)&v39, i, i) = 0x3FF0000000000000LL;
    uint64_t v36 = 0xC00000006LL;
    __int128 v34 = &off_1007BF990;
    __int128 v35 = xmmword_1006E10E0;
    __int128 v37 = &v38;
    sub_1002CAEDC(&v34, 6, 12);
    sub_1002CAF28((uint64_t)&v34, 0.0);
    uint64_t v31 = 0x100000003LL;
    uint64_t v29 = &off_1007BC4C0;
    __int128 v30 = xmmword_10042DB70;
    uint64_t v32 = &v33;
    sub_1002CAEDC(&v29, 3, 1);
    sub_1002CAF28((uint64_t)&v29, 0.0);
    uint64_t v26 = 0x100000003LL;
    uint64_t v24 = &off_1007BC4C0;
    __int128 v25 = xmmword_10042DB70;
    uint64_t v27 = &v28;
    sub_1002CAEDC(&v24, 3, 1);
    sub_1002CAF28((uint64_t)&v24, 0.0);
    for (uint64_t j = 0LL; j != 3; ++j)
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8 * j);
      *(void *)sub_1002CB32C((uint64_t)&v29, j) = v17;
      uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8 * j);
      *(void *)sub_1002CB32C((uint64_t)&v24, j) = v18;
    }

    sub_100379A94(a2, (uint64_t)&v39, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v29, (uint64_t)&v29, (uint64_t)&v24, v5);
    uint64_t v21 = 0x600000006LL;
    uint64_t v19 = &off_1007BF708;
    __int128 v20 = xmmword_1006E0F10;
    double v22 = &v23;
    uint64_t v56 = 0x100000006LL;
    uint64_t v54 = &off_1007BF798;
    __int128 v55 = xmmword_1006E0F20;
    uint64_t v57 = &v58;
    uint64_t v51 = 0x100000006LL;
    uint64_t v49 = &off_1007BF798;
    __int128 v50 = xmmword_1006E0F20;
    uint64_t v52 = &v53;
    uint64_t v46 = 0x100000018LL;
    uint64_t v44 = &off_1007BF7E0;
    __int128 v45 = xmmword_1006E0F30;
    uint64_t v47 = &v48;
    if (sub_100383260((uint64_t)&v39, (uint64_t)&v54, (uint64_t)&v49, (uint64_t)&v44, (uint64_t)&v19) < *(double *)&qword_1007FFD68)
    {
      sub_100378858((uint64_t)&v19, (uint64_t)&v34, a3, v5);
      return 1LL;
    }

    return (sub_1003781A0((uint64_t)&v39, (uint64_t)&v34, a3, v5) & 1) != 0;
  }

  double v9 = (os_log_s *)qword_1008000A0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1003AE500(v9, a4, a5, v10, v11);
    return 0LL;
  }

  return result;
}

uint64_t sub_10037AF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double v8 = *(double *)a1;
  double v9 = *(double *)a2;
  double v10 = a6 - a5;
  if (a6 - a5 <= 0.0 || (double v11 = v9 - v8, v9 - v8 <= 0.0))
  {
    uint64_t v24 = qword_1008000A0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    *(_DWORD *)std::string buf = 134218752;
    *(double *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&buf[14] = v9;
    *(_WORD *)&_BYTE buf[22] = 2048;
    uint64_t v86 = *(void *)&a5;
    *(_WORD *)int v87 = 2048;
    *(double *)&v87[2] = a6;
    uint64_t v26 = "#sf,RoseEKF error: Either IMU data comes not in chronological order (PreviousIMUTime: %f, CurrentIMUTime: %f) "
          "or trying to propagate state backward (from time %f to time %f)";
    uint64_t v27 = (os_log_s *)v24;
    uint32_t v28 = 42;
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v26, buf, v28);
    return 0LL;
  }

  if (v9 < a6 || v9 < a5 || v8 > a5 || v8 > a6)
  {
    uint64_t v29 = qword_1008000A0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    *(_DWORD *)std::string buf = 134218496;
    *(double *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&buf[14] = a5;
    *(_WORD *)&_BYTE buf[22] = 2048;
    uint64_t v86 = *(void *)&v9;
    uint64_t v26 = "#sf,RoseEKF propagateStateAndCovariance error: Filter time is not between the two IMU timestamps - state propa"
          "gation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f";
    uint64_t v27 = (os_log_s *)v29;
    uint32_t v28 = 32;
    goto LABEL_17;
  }

  uint64_t v67 = 0x100000003LL;
  unint64_t v65 = &off_1007BC4C0;
  __int128 v66 = xmmword_10042DB70;
  __int128 v68 = &v69;
  sub_1002CAEDC(&v65, 3, 1);
  sub_1002CAF28((uint64_t)&v65, 0.0);
  uint64_t v62 = 0x100000003LL;
  uint64_t v60 = &off_1007BC4C0;
  __int128 v61 = xmmword_10042DB70;
  __int128 v63 = &v64;
  sub_1002CAEDC(&v60, 3, 1);
  sub_1002CAF28((uint64_t)&v60, 0.0);
  uint64_t v57 = 0x100000003LL;
  __int128 v55 = &off_1007BC4C0;
  __int128 v56 = xmmword_10042DB70;
  uint64_t v58 = &v59;
  sub_1002CAEDC(&v55, 3, 1);
  sub_1002CAF28((uint64_t)&v55, 0.0);
  uint64_t v16 = 0LL;
  double v17 = (a5 - v8) / v11;
  double v18 = (v10 * 0.5 + a5 - v8) / v11;
  double v19 = (a6 - v8) / v11;
  do
  {
    uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8 * v16);
    *(void *)sub_1002CB32C((uint64_t)&v65, v16) = v20;
    uint64_t v21 = *(void *)(*(void *)(a2 + 40) + 8 * v16);
    *(void *)sub_1002CB32C((uint64_t)&v60, v16) = v21;
    uint64_t v22 = *(void *)(*(void *)(a1 + 16) + 8 * v16);
    *(void *)sub_1002CB32C((uint64_t)&v55, v16++) = v22;
  }

  while (v16 != 3);
  uint64_t v86 = 0x100000003LL;
  *(void *)std::string buf = &off_1007BC4C0;
  *(_OWORD *)&uint8_t buf[8] = xmmword_10042DB70;
  *(void *)int v87 = &v87[8];
  sub_1003838C0((uint64_t)&v65, (uint64_t)buf, 1.0 - v17);
  uint64_t v37 = 0x100000003LL;
  __int128 v35 = &off_1007BC4C0;
  __int128 v36 = xmmword_10042DB70;
  uint64_t v38 = v39;
  sub_1003838C0((uint64_t)&v60, (uint64_t)&v35, v17);
  uint64_t v52 = 0x100000003LL;
  __int128 v50 = &off_1007BC4C0;
  __int128 v51 = xmmword_10042DB70;
  uint64_t v53 = &v54;
  sub_1002CC25C((uint64_t)buf, (uint64_t)&v35, (uint64_t)&v50);
  uint64_t v86 = 0x100000003LL;
  *(void *)std::string buf = &off_1007BC4C0;
  *(_OWORD *)&uint8_t buf[8] = xmmword_10042DB70;
  *(void *)int v87 = &v87[8];
  sub_1003838C0((uint64_t)&v65, (uint64_t)buf, 1.0 - v18);
  uint64_t v37 = 0x100000003LL;
  __int128 v35 = &off_1007BC4C0;
  __int128 v36 = xmmword_10042DB70;
  uint64_t v38 = v39;
  sub_1003838C0((uint64_t)&v60, (uint64_t)&v35, v18);
  uint64_t v47 = 0x100000003LL;
  __int128 v45 = &off_1007BC4C0;
  __int128 v46 = xmmword_10042DB70;
  uint64_t v48 = &v49;
  sub_1002CC25C((uint64_t)buf, (uint64_t)&v35, (uint64_t)&v45);
  uint64_t v86 = 0x100000003LL;
  *(void *)std::string buf = &off_1007BC4C0;
  *(_OWORD *)&uint8_t buf[8] = xmmword_10042DB70;
  *(void *)int v87 = &v87[8];
  sub_1003838C0((uint64_t)&v65, (uint64_t)buf, 1.0 - v19);
  uint64_t v37 = 0x100000003LL;
  __int128 v35 = &off_1007BC4C0;
  __int128 v36 = xmmword_10042DB70;
  uint64_t v38 = v39;
  sub_1003838C0((uint64_t)&v60, (uint64_t)&v35, v19);
  uint64_t v42 = 0x100000003LL;
  __int128 v40 = &off_1007BC4C0;
  __int128 v41 = xmmword_10042DB70;
  uint64_t v43 = &v44;
  sub_1002CC25C((uint64_t)buf, (uint64_t)&v35, (uint64_t)&v40);
  uint64_t v37 = 0x600000006LL;
  __int128 v35 = &off_1007BF708;
  __int128 v36 = xmmword_1006E0F10;
  uint64_t v38 = v39;
  sub_1002CAEDC(&v35, 6, 6);
  sub_1002CAF28((uint64_t)&v35, 0.0);
  for (int i = 0; i != 6; ++i)
    *(void *)sub_100304F3C((uint64_t)&v35, i, i) = 0x3FF0000000000000LL;
  uint64_t v86 = 0xC00000006LL;
  *(void *)std::string buf = &off_1007BF990;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1006E10E0;
  *(void *)int v87 = &v87[8];
  sub_1002CAEDC(buf, 6, 12);
  sub_1002CAF28((uint64_t)buf, 0.0);
  sub_100379A94(a3, (uint64_t)&v35, (uint64_t)buf, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, (uint64_t)&v55, v10);
  uint64_t v32 = 0x600000006LL;
  __int128 v30 = &off_1007BF708;
  __int128 v31 = xmmword_1006E0F10;
  uint64_t v33 = &v34;
  uint64_t v82 = 0x100000006LL;
  __int128 v80 = &off_1007BF798;
  __int128 v81 = xmmword_1006E0F20;
  __int128 v83 = &v84;
  uint64_t v77 = 0x100000006LL;
  uint64_t v75 = &off_1007BF798;
  __int128 v76 = xmmword_1006E0F20;
  __int128 v78 = &v79;
  uint64_t v72 = 0x100000018LL;
  __int128 v70 = &off_1007BF7E0;
  __int128 v71 = xmmword_1006E0F30;
  __int128 v73 = &v74;
  if (sub_100383260((uint64_t)&v35, (uint64_t)&v80, (uint64_t)&v75, (uint64_t)&v70, (uint64_t)&v30) < *(double *)&qword_1007FFD68)
  {
    sub_100378858((uint64_t)&v30, (uint64_t)buf, a4, v10);
    return 1LL;
  }

  return (sub_1003781A0((uint64_t)&v35, (uint64_t)buf, a4, v10) & 1) != 0;
}

uint64_t sub_10037B5CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  double v137 = *(double *)(a5 + 40);
  if (v137 >= *(double *)(a1 + 448))
  {
    unint64_t v18 = a4[5] + a4[4] - 1LL;
    sub_10037021C((uint64_t)&v123, *(void *)(a4[1] + 8 * (v18 / 0x19)) + 160 * (v18 % 0x19));
    sub_10036FCC4((uint64_t)&v118, a1 + 456);
    sub_1003700B4((uint64_t)v115, a1 + 544);
    if (!sub_10037ABB8((uint64_t)&v123, (uint64_t)&v118, (uint64_t)v115, *(double *)(a1 + 448), v137))
    {
      if (__p)
      {
        std::string::size_type v136 = __p;
        operator delete(__p);
      }

      if (v133)
      {
        uint64_t v134 = v133;
        operator delete(v133);
      }

      if (v131)
      {
        uint64_t v132 = v131;
        operator delete(v131);
      }

      if (v129)
      {
        uint64_t v130 = v129;
        operator delete(v129);
      }

      if (v127)
      {
        __int128 v128 = v127;
        operator delete(v127);
      }

      if (*((void *)&v124 + 1))
      {
        uint64_t v125 = *((void *)&v124 + 1);
        operator delete(*((void **)&v124 + 1));
      }

      return 0LL;
    }

    uint64_t v112 = 0x100000003LL;
    __int128 v110 = &off_1007BC4C0;
    __int128 v111 = xmmword_10042DB70;
    __int128 v113 = v114;
    sub_1002CAEDC(&v110, 3, 1);
    sub_1002CAF28((uint64_t)&v110, 0.0);
    uint64_t v107 = 0x600000003LL;
    __int128 v105 = &off_1007BFA68;
    __int128 v106 = xmmword_1006E1120;
    __int128 v108 = v109;
    sub_1002CAEDC(&v105, 3, 6);
    sub_1002CAF28((uint64_t)&v105, 0.0);
    sub_10037C4F0((uint64_t)&v110, (uint64_t)&v105, (uint64_t)&v118);
    uint64_t v102 = 0x100000003LL;
    __int128 v100 = &off_1007BC4C0;
    __int128 v101 = xmmword_10042DB70;
    __int128 v103 = &v104;
    sub_1002CAEDC(&v100, 3, 1);
    sub_1002CAF28((uint64_t)&v100, 0.0);
    uint64_t v19 = *(void *)(a5 + 48);
    *(void *)sub_1002CB32C((uint64_t)&v100, 0) = v19;
    uint64_t v20 = *(void *)(a5 + 64);
    *(void *)sub_1002CB32C((uint64_t)&v100, 1u) = v20;
    uint64_t v21 = *(void *)(a5 + 72);
    *(void *)sub_1002CB32C((uint64_t)&v100, 2u) = v21;
    uint64_t v92 = 0x100000003LL;
    __int128 v90 = &off_1007BC4C0;
    __int128 v91 = xmmword_10042DB70;
    __int128 v93 = v94;
    sub_1002CB44C((uint64_t)&v100, (uint64_t)&v110, (uint64_t)&v90);
    sub_1002CBDC8(a2, (uint64_t)&v90);
    uint64_t v97 = 0x300000003LL;
    __int128 v95 = &off_1007BC508;
    __int128 v96 = xmmword_10042DE90;
    __int128 v98 = v99;
    sub_1002CAEDC(&v95, 3, 3);
    sub_1002CAF28((uint64_t)&v95, 0.0);
    double v22 = *(double *)(a5 + 56);
    *(double *)sub_1002CB40C((uint64_t)&v95, 0, 0) = v22 * v22;
    double v23 = *(double *)(a5 + 80);
    *(double *)sub_1002CB40C((uint64_t)&v95, 1, 1) = v23 * v23;
    double v24 = *(double *)(a5 + 88);
    *(double *)sub_1002CB40C((uint64_t)&v95, 2, 2) = v24 * v24;
    uint64_t v82 = 0x600000006LL;
    __int128 v83 = 0LL;
    unint64_t v80 = 0LL;
    uint64_t v81 = 0LL;
    uint64_t v79 = &off_1007BF708;
    if (v117 > 6)
    {
      unint64_t v65 = "this->max_num_rows_ >= num_rows";
      int v66 = 422;
    }

    else
    {
      if (v116 < 7)
      {
        unint64_t v80 = __PAIR64__(v116, v117);
        LODWORD(v81) = v116 * v117;
        HIDWORD(v81) = v117;
        __int128 v83 = v84;
        sub_1002CB364((uint64_t)v115, &v79);
        uint64_t v87 = 0x600000006LL;
        __int128 v85 = &off_1007BF708;
        __int128 v86 = xmmword_1006E0F10;
        __int128 v88 = v89;
        sub_1002CB548((uint64_t)&v79, (uint64_t)v115, (uint64_t)&v85);
        uint64_t v92 = 0x600000006LL;
        __int128 v90 = &off_1007BF708;
        __int128 v91 = xmmword_1006E0F10;
        __int128 v93 = v94;
        uint64_t v76 = 0x100000006LL;
        uint64_t v74 = &off_1007BF798;
        __int128 v75 = xmmword_1006E0F20;
        uint64_t v77 = v78;
        uint64_t v140 = 0x100000018LL;
        uint64_t v138 = &off_1007BF7E0;
        __int128 v139 = xmmword_1006E0F30;
        uint64_t v141 = v142;
        sub_1002D9BF0((uint64_t)&v85, (uint64_t)&v74, (uint64_t)&v138, (uint64_t)&v90);
        uint64_t v87 = 0x600000003LL;
        __int128 v85 = &off_1007BFA68;
        __int128 v86 = xmmword_1006E1120;
        __int128 v88 = v89;
        sub_1002CB548((uint64_t)&v105, (uint64_t)&v90, (uint64_t)&v85);
        uint64_t v82 = 0x300000006LL;
        __int128 v83 = 0LL;
        unint64_t v80 = 0LL;
        uint64_t v81 = 0LL;
        uint64_t v79 = &off_1007BFAB0;
        if (DWORD1(v106) > 6)
        {
          uint64_t v67 = "this->max_num_rows_ >= num_rows";
          int v68 = 422;
        }

        else
        {
          if (v106 < 4)
          {
            unint64_t v80 = __PAIR64__(v106, DWORD1(v106));
            LODWORD(v81) = v106 * DWORD1(v106);
            HIDWORD(v81) = DWORD1(v106);
            __int128 v83 = v84;
            sub_1002CB364((uint64_t)&v105, &v79);
            uint64_t v76 = 0x300000003LL;
            uint64_t v74 = &off_1007BC508;
            __int128 v75 = xmmword_10042DE90;
            uint64_t v77 = v78;
            sub_1002CB548((uint64_t)&v85, (uint64_t)&v79, (uint64_t)&v74);
            uint64_t v140 = 0x300000003LL;
            uint64_t v138 = &off_1007BC508;
            __int128 v139 = xmmword_10042DE90;
            uint64_t v141 = v142;
            sub_1002CC25C((uint64_t)&v74, (uint64_t)&v95, (uint64_t)&v138);
            sub_1002CBDC8(a3, (uint64_t)&v138);
            if (__p)
            {
              std::string::size_type v136 = __p;
              operator delete(__p);
            }

            if (v133)
            {
              uint64_t v134 = v133;
              operator delete(v133);
            }

            if (v131)
            {
              uint64_t v132 = v131;
              operator delete(v131);
            }

            if (v129)
            {
              uint64_t v130 = v129;
              operator delete(v129);
            }

            if (v127)
            {
              __int128 v128 = v127;
              operator delete(v127);
            }

            if (*((void *)&v124 + 1))
            {
              uint64_t v125 = *((void *)&v124 + 1);
              operator delete(*((void **)&v124 + 1));
            }

            return 1LL;
          }

          uint64_t v67 = "this->max_num_cols_ >= num_cols";
          int v68 = 423;
        }

        __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v68, v67);
      }

      unint64_t v65 = "this->max_num_cols_ >= num_cols";
      int v66 = 423;
    }

    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v66, v65);
  }

  unint64_t v10 = a4[10];
  uint64_t v11 = a4[7];
  double v12 = (char *)(v11 + 8 * (v10 >> 9));
  if (a4[8] == v11)
  {
    uint64_t v13 = 0LL;
    double v17 = 0LL;
    BOOL v14 = a4 + 11;
    uint64_t v16 = (char *)(v11 + 8 * ((a4[11] + v10) >> 9));
  }

  else
  {
    uint64_t v13 = (double *)(*(void *)v12 + 8 * (a4[10] & 0x1FFLL));
    BOOL v14 = a4 + 11;
    unint64_t v15 = a4[11] + v10;
    uint64_t v16 = (char *)(v11 + 8 * (v15 >> 9));
    double v17 = (double *)(*(void *)v16 + 8 * (v15 & 0x1FF));
  }

  __int128 v25 = (double *)(a1 + 872);
  uint64_t v26 = sub_100383CC0(v12, v13, v16, v17, (double *)(a1 + 872));
  uint64_t v28 = v27;
  unint64_t v29 = a4[10];
  uint64_t v30 = a4[7];
  __int128 v31 = (char *)(v30 + 8 * (v29 >> 9));
  if (a4[8] == v30)
  {
    uint64_t v32 = 0LL;
    __int128 v35 = 0LL;
    uint64_t v34 = (char *)(v30 + 8 * ((*v14 + v29) >> 9));
  }

  else
  {
    uint64_t v32 = (double *)(*(void *)v31 + 8 * (a4[10] & 0x1FFLL));
    unint64_t v33 = *v14 + v29;
    uint64_t v34 = (char *)(v30 + 8 * (v33 >> 9));
    __int128 v35 = (double *)(*(void *)v34 + 8 * (v33 & 0x1FF));
  }

  uint64_t v37 = sub_100383CC0(v31, v32, v34, v35, &v137);
  uint64_t v38 = v36;
  uint64_t v39 = a4[7];
  if (a4[8] == v39)
  {
    if (!v28) {
      return 0LL;
    }
    uint64_t v40 = 0LL;
  }

  else
  {
    if (*(void *)(v39 + ((a4[10] >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (a4[10] & 0x1FFLL) == v28) {
      return 0LL;
    }
    uint64_t v40 = *(void *)(v39 + (((*v14 + a4[10]) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((*v14 + a4[10]) & 0x1FFLL);
    if (v40 == v28) {
      return 0LL;
    }
  }

  if (v40 != v36)
  {
    sub_10036FCC4((uint64_t)&v74, a1 + 880);
    sub_1003700B4((uint64_t)v115, a1 + 968);
    uint64_t v41 = a4[7];
    uint64_t v42 = a4[8];
    uint64_t v43 = (char *)(v41 + 8LL * (a4[10] >> 9));
    if (v42 == v41) {
      uint64_t v44 = 0LL;
    }
    else {
      uint64_t v44 = *(void *)v43 + 8 * (a4[10] & 0x1FFLL);
    }
    if (v28 == v44) {
      uint64_t v45 = 0LL;
    }
    else {
      uint64_t v45 = ((v28 - *(void *)v26) >> 3) + ((v26 - v43) << 6) - ((v44 - *(void *)v43) >> 3);
    }
    if (v42 == v41) {
      uint64_t v46 = 0LL;
    }
    else {
      uint64_t v46 = *(void *)v43 + 8 * (a4[10] & 0x1FFLL);
    }
    if (v38 == v46) {
      uint64_t v47 = 0LL;
    }
    else {
      uint64_t v47 = ((v38 - *(void *)v37) >> 3) + ((v37 - v43) << 6) - ((v46 - *(void *)v43) >> 3);
    }
    if (v45 < 1) {
      __assert_rtn("peekInnovationAndCovariance", "RoseSensorFusionEKF.cpp", 628, "indexFirstIMUDataToAdvanceTo > 0");
    }
    double v48 = *v25;
    if (v45 < v47)
    {
      do
      {
        double v49 = v48;
        unint64_t v50 = v45 + a4[4];
        uint64_t v51 = ((v50 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
        unint64_t v52 = (v51 + ((v50 - 1 - v51) >> 1)) >> 4;
        if ((sub_10037AF10( *(void *)(a4[1] + 8 * v52) + 160 * (v50 - 1 - 25 * v52),  *(void *)(a4[1] + 8 * (v50 / 0x19)) + 160 * (v50 % 0x19),  (uint64_t)&v74,  (uint64_t)v115,  v49,  v48) & 1) == 0) {
          return 0LL;
        }
      }

      while (v47 != ++v45);
    }

    uint64_t v53 = a4[4];
    uint64_t v54 = a4[1];
    uint64_t v55 = *(void *)(v54 + 8 * ((v47 - 1 + v53) / 0x19uLL)) + 160 * ((v47 - 1 + v53) % 0x19uLL);
    uint64_t v56 = v53 + v47;
    uint64_t v57 = ((unint64_t)(v53 + v47) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
    if (sub_10037AF10( v55,  *(void *)(v54 + 8 * ((v57 + ((unint64_t)(v56 - v57) >> 1)) >> 4))
                       + 160 * (v56 - 25 * ((v57 + ((unint64_t)(v56 - v57) >> 1)) >> 4)),
                         (uint64_t)&v74,
                         (uint64_t)v115,
                         v48,
                         v137))
    {
      uint64_t v120 = 0x100000003LL;
      __int128 v118 = &off_1007BC4C0;
      __int128 v119 = xmmword_10042DB70;
      uint64_t v121 = &v122;
      sub_1002CAEDC(&v118, 3, 1);
      sub_1002CAF28((uint64_t)&v118, 0.0);
      uint64_t v107 = 0x600000003LL;
      __int128 v105 = &off_1007BFA68;
      __int128 v106 = xmmword_1006E1120;
      __int128 v108 = v109;
      sub_1002CAEDC(&v105, 3, 6);
      sub_1002CAF28((uint64_t)&v105, 0.0);
      sub_10037C4F0((uint64_t)&v118, (uint64_t)&v105, (uint64_t)&v74);
      uint64_t v112 = 0x100000003LL;
      __int128 v110 = &off_1007BC4C0;
      __int128 v111 = xmmword_10042DB70;
      __int128 v113 = v114;
      sub_1002CAEDC(&v110, 3, 1);
      sub_1002CAF28((uint64_t)&v110, 0.0);
      uint64_t v58 = *(void *)(a5 + 48);
      *(void *)sub_1002CB32C((uint64_t)&v110, 0) = v58;
      uint64_t v59 = *(void *)(a5 + 64);
      *(void *)sub_1002CB32C((uint64_t)&v110, 1u) = v59;
      uint64_t v60 = *(void *)(a5 + 72);
      *(void *)sub_1002CB32C((uint64_t)&v110, 2u) = v60;
      uint64_t v92 = 0x100000003LL;
      __int128 v90 = &off_1007BC4C0;
      __int128 v91 = xmmword_10042DB70;
      __int128 v93 = v94;
      sub_1002CB44C((uint64_t)&v110, (uint64_t)&v118, (uint64_t)&v90);
      sub_1002CBDC8(a2, (uint64_t)&v90);
      uint64_t v125 = 0x300000003LL;
      __int128 v123 = &off_1007BC508;
      __int128 v124 = xmmword_10042DE90;
      uint64_t v126 = &v127;
      sub_1002CAEDC(&v123, 3, 3);
      sub_1002CAF28((uint64_t)&v123, 0.0);
      double v61 = *(double *)(a5 + 56);
      *(double *)sub_1002CB40C((uint64_t)&v123, 0, 0) = v61 * v61;
      double v62 = *(double *)(a5 + 80);
      *(double *)sub_1002CB40C((uint64_t)&v123, 1, 1) = v62 * v62;
      double v63 = *(double *)(a5 + 88);
      *(double *)sub_1002CB40C((uint64_t)&v123, 2, 2) = v63 * v63;
      uint64_t v82 = 0x600000006LL;
      __int128 v83 = 0LL;
      unint64_t v80 = 0LL;
      uint64_t v81 = 0LL;
      uint64_t v79 = &off_1007BF708;
      if (v117 > 6)
      {
        uint64_t v69 = "this->max_num_rows_ >= num_rows";
        int v70 = 422;
      }

      else
      {
        if (v116 < 7)
        {
          unint64_t v80 = __PAIR64__(v116, v117);
          LODWORD(v81) = v116 * v117;
          HIDWORD(v81) = v117;
          __int128 v83 = v84;
          sub_1002CB364((uint64_t)v115, &v79);
          uint64_t v87 = 0x600000006LL;
          __int128 v85 = &off_1007BF708;
          __int128 v86 = xmmword_1006E0F10;
          __int128 v88 = v89;
          sub_1002CB548((uint64_t)&v79, (uint64_t)v115, (uint64_t)&v85);
          uint64_t v92 = 0x600000006LL;
          __int128 v90 = &off_1007BF708;
          __int128 v91 = xmmword_1006E0F10;
          __int128 v93 = v94;
          uint64_t v97 = 0x100000006LL;
          __int128 v95 = &off_1007BF798;
          __int128 v96 = xmmword_1006E0F20;
          __int128 v98 = v99;
          uint64_t v140 = 0x100000018LL;
          uint64_t v138 = &off_1007BF7E0;
          __int128 v139 = xmmword_1006E0F30;
          uint64_t v141 = v142;
          sub_1002D9BF0((uint64_t)&v85, (uint64_t)&v95, (uint64_t)&v138, (uint64_t)&v90);
          uint64_t v87 = 0x600000003LL;
          __int128 v85 = &off_1007BFA68;
          __int128 v86 = xmmword_1006E1120;
          __int128 v88 = v89;
          sub_1002CB548((uint64_t)&v105, (uint64_t)&v90, (uint64_t)&v85);
          uint64_t v82 = 0x300000006LL;
          uint64_t v79 = &off_1007BFAB0;
          if (DWORD1(v106) > 6)
          {
            __int128 v71 = "this->max_num_rows_ >= num_rows";
            int v72 = 422;
          }

          else
          {
            if (v106 < 4)
            {
              unint64_t v80 = __PAIR64__(v106, DWORD1(v106));
              LODWORD(v81) = v106 * DWORD1(v106);
              HIDWORD(v81) = DWORD1(v106);
              __int128 v83 = v84;
              sub_1002CB364((uint64_t)&v105, &v79);
              uint64_t v97 = 0x300000003LL;
              __int128 v95 = &off_1007BC508;
              __int128 v96 = xmmword_10042DE90;
              __int128 v98 = v99;
              sub_1002CB548((uint64_t)&v85, (uint64_t)&v79, (uint64_t)&v95);
              uint64_t v140 = 0x300000003LL;
              uint64_t v138 = &off_1007BC508;
              __int128 v139 = xmmword_10042DE90;
              uint64_t v141 = v142;
              sub_1002CC25C((uint64_t)&v95, (uint64_t)&v123, (uint64_t)&v138);
              sub_1002CBDC8(a3, (uint64_t)&v138);
              return 1LL;
            }

            __int128 v71 = "this->max_num_cols_ >= num_cols";
            int v72 = 423;
          }

          __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v72, v71);
        }

        uint64_t v69 = "this->max_num_cols_ >= num_cols";
        int v70 = 423;
      }

      __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v70, v69);
    }
  }

  return 0LL;
}

void sub_10037C41C(_Unwind_Exception *a1)
{
}

uint64_t sub_10037C4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = 0x100000001LL;
  uint64_t v28 = &off_1007BCA50;
  *(void *)&__int128 v6 = 0x100000001LL;
  *((void *)&v6 + 1) = 0x100000001LL;
  __int128 v29 = v6;
  __int128 v31 = &v32;
  sub_1002CAEDC(&v28, 1, 1);
  sub_1002CAF28((uint64_t)&v28, 0.0);
  uint64_t v25 = 0x100000002LL;
  double v23 = &off_1007BCA98;
  __int128 v24 = xmmword_10042DEE0;
  uint64_t v26 = &v27;
  sub_1002CAEDC(&v23, 2, 1);
  sub_1002CAF28((uint64_t)&v23, 0.0);
  uint64_t v20 = 0x600000001LL;
  unint64_t v18 = &off_1007BFCF0;
  __int128 v19 = xmmword_1006E1130;
  uint64_t v21 = &v22;
  sub_1002CAEDC(&v18, 1, 6);
  sub_1002CAF28((uint64_t)&v18, 0.0);
  uint64_t v15 = 0x600000002LL;
  uint64_t v13 = &off_1007BFD38;
  __int128 v14 = xmmword_1006E1140;
  uint64_t v16 = &v17;
  sub_1002CAEDC(&v13, 2, 6);
  sub_1002CAF28((uint64_t)&v13, 0.0);
  sub_10037D9A0((uint64_t)&v28, (uint64_t)&v18, a3);
  sub_10037DB48((uint64_t)&v23, (uint64_t)&v13, a3);
  if (DWORD2(v29) != 1) {
    sub_1003AE178();
  }
  uint64_t v7 = *v31;
  *(void *)sub_1002CB32C(a1, 0) = v7;
  sub_100384818((uint64_t)v12, a1, (uint64_t)&qword_1007FFEB0);
  sub_10037DDB0((uint64_t)v12, (uint64_t)&v23);
  uint64_t v35 = 0x100000001LL;
  unint64_t v33 = &off_1007BD568;
  *(void *)&__int128 v8 = 0x100000001LL;
  *((void *)&v8 + 1) = 0x100000001LL;
  __int128 v34 = v8;
  uint64_t v36 = &v37;
  int v37 = 0;
  sub_100384988((uint64_t)v12, a2, (uint64_t)&v33, (uint64_t)&qword_1007FFDC8);
  sub_10037DE50((uint64_t)v12, (uint64_t)&v18, v9);
  sub_100384B30((uint64_t)v12, a2, (uint64_t)&qword_1007FFEB0, (uint64_t)&qword_1007FFDC8);
  return sub_10037DF48((uint64_t)v12, (uint64_t)&v13, v10);
}

void *sub_10037C754(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

void *sub_10037C764(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037C774(uint64_t a1, void *a2, double *a3)
{
  double v81 = a3[5];
  if (v81 >= *(double *)(a1 + 448))
  {
    unint64_t v14 = a2[5] + a2[4] - 1LL;
    sub_10037021C((uint64_t)&v68, *(void *)(a2[1] + 8 * (v14 / 0x19)) + 160 * (v14 % 0x19));
    sub_10036FCC4((uint64_t)v66, a1 + 456);
    sub_1003700B4((uint64_t)v65, a1 + 544);
    double v15 = 0.0;
    if (sub_10037ABB8((uint64_t)&v68, (uint64_t)v66, (uint64_t)v65, *(double *)(a1 + 448), v81))
    {
      uint64_t v91 = 0x100000006LL;
      uint64_t v89 = &off_1007BF750;
      __int128 v90 = xmmword_1006E0F20;
      uint64_t v92 = v93;
      sub_100383080((uint64_t)v87);
      uint64_t v84 = 0x100000006LL;
      uint64_t v82 = &off_1007BF750;
      __int128 v83 = xmmword_1006E0F20;
      __int128 v85 = &v86;
      sub_1002CB6A8((uint64_t)v66, (uint64_t)&v89, (uint64_t)v87, (uint64_t)&v82, "2");
      double v17 = v16;
      unint64_t v18 = __p;
      v87[0] = &off_1007BF948;
      std::string __p = 0LL;
      if (v18) {
        operator delete[](v18);
      }
      if (v17 > 0.0)
      {
        __double2 v19 = __sincos_stret(a3[9]);
        __double2 v20 = __sincos_stret(a3[8]);
        double v21 = *(double *)sub_1002CB32C((uint64_t)v66, 0);
        double v22 = *(double *)sub_1002CB32C((uint64_t)v66, 1u);
        double v23 = (double *)sub_1002CB32C((uint64_t)v66, 2u);
        double v15 = acos((v19.__cosval * v20.__cosval * v22 + v21 * v19.__sinval + *v23 * (v19.__cosval * v20.__sinval)) / v17)
            * 180.0
            / 3.14159265;
      }
    }

    if (v79)
    {
      unint64_t v80 = v79;
      operator delete(v79);
    }

    if (v77)
    {
      __int128 v78 = v77;
      operator delete(v77);
    }

    if (v75)
    {
      uint64_t v76 = v75;
      operator delete(v75);
    }

    if (v73)
    {
      uint64_t v74 = v73;
      operator delete(v73);
    }

    if (v72[0])
    {
      v72[1] = v72[0];
      operator delete(v72[0]);
    }

    if (*((void *)&v69 + 1))
    {
      uint64_t v70 = *((void *)&v69 + 1);
      operator delete(*((void **)&v69 + 1));
    }

    return *(void *)&v15;
  }

  unint64_t v6 = a2[10];
  uint64_t v7 = a2[7];
  __int128 v8 = (char *)(v7 + 8 * (v6 >> 9));
  if (a2[8] == v7)
  {
    uint64_t v9 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v10 = a2 + 11;
    double v12 = (char *)(v7 + 8 * ((a2[11] + v6) >> 9));
  }

  else
  {
    uint64_t v9 = (double *)(*(void *)v8 + 8 * (a2[10] & 0x1FFLL));
    uint64_t v10 = a2 + 11;
    unint64_t v11 = a2[11] + v6;
    double v12 = (char *)(v7 + 8 * (v11 >> 9));
    uint64_t v13 = (double *)(*(void *)v12 + 8 * (v11 & 0x1FF));
  }

  __int128 v24 = sub_100383CC0(v8, v9, v12, v13, (double *)(a1 + 872));
  uint64_t v26 = v25;
  unint64_t v27 = a2[10];
  uint64_t v28 = a2[7];
  __int128 v29 = (char *)(v28 + 8 * (v27 >> 9));
  if (a2[8] == v28)
  {
    uint64_t v30 = 0LL;
    unint64_t v33 = 0LL;
    uint64_t v32 = (char *)(v28 + 8 * ((*v10 + v27) >> 9));
  }

  else
  {
    uint64_t v30 = (double *)(*(void *)v29 + 8 * (a2[10] & 0x1FFLL));
    unint64_t v31 = *v10 + v27;
    uint64_t v32 = (char *)(v28 + 8 * (v31 >> 9));
    unint64_t v33 = (double *)(*(void *)v32 + 8 * (v31 & 0x1FF));
  }

  uint64_t v35 = sub_100383CC0(v29, v30, v32, v33, &v81);
  uint64_t v36 = v34;
  uint64_t v37 = a2[7];
  if (a2[8] == v37)
  {
    uint64_t v38 = 0LL;
    if (!v26)
    {
LABEL_44:
      double v15 = 0.0;
      return *(void *)&v15;
    }
  }

  else
  {
    double v15 = 0.0;
    if (*(void *)(v37 + ((a2[10] >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (a2[10] & 0x1FFLL) == v26) {
      return *(void *)&v15;
    }
    uint64_t v38 = *(void *)(v37 + (((*v10 + a2[10]) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((*v10 + a2[10]) & 0x1FFLL);
    if (v38 == v26) {
      return *(void *)&v15;
    }
  }

  if (v38 == v34) {
    goto LABEL_44;
  }
  sub_10036FCC4((uint64_t)&v82, a1 + 880);
  sub_1003700B4((uint64_t)v65, a1 + 968);
  uint64_t v39 = a2[7];
  uint64_t v40 = a2[8];
  uint64_t v41 = (char *)(v39 + 8LL * (a2[10] >> 9));
  if (v40 == v39) {
    uint64_t v42 = 0LL;
  }
  else {
    uint64_t v42 = *(void *)v41 + 8 * (a2[10] & 0x1FFLL);
  }
  if (v26 == v42
    || (uint64_t v43 = *(void *)v41,
        uint64_t v44 = ((v26 - *(void *)v24) >> 3) + ((v24 - v41) << 6) - ((v42 - *(void *)v41) >> 3),
        v44 <= 0))
  {
    __assert_rtn("peekDirectionalError", "RoseSensorFusionEKF.cpp", 714, "indexFirstIMUDataToAdvanceTo > 0");
  }

  double v45 = *(double *)(a1 + 872);
  if (v40 == v39) {
    uint64_t v46 = 0LL;
  }
  else {
    uint64_t v46 = v43 + 8 * (a2[10] & 0x1FFLL);
  }
  if (v36 == v46)
  {
    uint64_t v47 = 0LL;
    uint64_t v48 = -1LL;
  }

  else
  {
    uint64_t v47 = ((v36 - *(void *)v35) >> 3) + ((v35 - v41) << 6) - ((v46 - v43) >> 3);
    uint64_t v48 = v47 - 1;
    if (v44 < v47)
    {
      do
      {
        double v49 = v45;
        unint64_t v50 = v44 + a2[4];
        uint64_t v51 = ((v50 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
        unint64_t v52 = (v51 + ((v50 - 1 - v51) >> 1)) >> 4;
        if ((sub_10037AF10( *(void *)(a2[1] + 8 * v52) + 160 * (v50 - 1 - 25 * v52),  *(void *)(a2[1] + 8 * (v50 / 0x19)) + 160 * (v50 % 0x19),  (uint64_t)&v82,  (uint64_t)v65,  v49,  v45) & 1) == 0) {
          goto LABEL_44;
        }
      }

      while (++v44 < v47);
    }
  }

  uint64_t v53 = a2[4];
  uint64_t v54 = ((unint64_t)(v48 + v53) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
  unint64_t v55 = (v54 + ((unint64_t)(v48 + v53 - v54) >> 1)) >> 4;
  double v15 = 0.0;
  if (sub_10037AF10( *(void *)(a2[1] + 8 * v55) + 160 * (v48 + v53 - 25 * v55),  *(void *)(a2[1] + 8 * ((v53 + v47) / 0x19uLL)) + 160 * ((v53 + v47) % 0x19uLL),  (uint64_t)&v82,  (uint64_t)v65,  v45,  v81))
  {
    uint64_t v70 = 0x100000006LL;
    int v68 = &off_1007BF750;
    __int128 v69 = xmmword_1006E0F20;
    __int128 v71 = v72;
    sub_100383080((uint64_t)v66);
    uint64_t v91 = 0x100000006LL;
    uint64_t v89 = &off_1007BF750;
    __int128 v90 = xmmword_1006E0F20;
    uint64_t v92 = v93;
    sub_1002CB6A8((uint64_t)&v82, (uint64_t)&v68, (uint64_t)v66, (uint64_t)&v89, "2");
    double v57 = v56;
    uint64_t v58 = v67;
    v66[0] = &off_1007BF948;
    uint64_t v67 = 0LL;
    if (v58) {
      operator delete[](v58);
    }
    if (v57 > 0.0)
    {
      __double2 v59 = __sincos_stret(a3[9]);
      __double2 v60 = __sincos_stret(a3[8]);
      double v61 = *(double *)sub_1002CB32C((uint64_t)&v82, 0);
      double v62 = *(double *)sub_1002CB32C((uint64_t)&v82, 1u);
      double v63 = (double *)sub_1002CB32C((uint64_t)&v82, 2u);
      double v15 = acos((v59.__cosval * v60.__cosval * v62 + v61 * v59.__sinval + *v63 * (v59.__cosval * v60.__sinval)) / v57)
          * 180.0
          / 3.14159265;
    }
  }

  return *(void *)&v15;
}

void sub_10037CEB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10037CF40(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

std::string *sub_10037CF50@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2 = result->__r_.__value_.__r.__words[1];
  int v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  if (v2)
  {
    uint64_t v4 = (uint64_t)result;
    for (int i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (int j = 0; j != v3; ++j)
        {
          double v8 = sub_10024061C(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v9 = &v12;
          }
          else {
            uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          }
          if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v12.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v12.__r_.__value_.__l.__size_;
          }
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (j - v3 == -1) {
            unint64_t v11 = ";";
          }
          else {
            unint64_t v11 = ",";
          }
          uint64_t result = std::string::append(a2, v11);
        }
      }
    }
  }

  return result;
}

void sub_10037D040( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10037D078(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037D088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 1192),  *(_DWORD *)(*(void *)(a1 + 1232) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 1320) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037D160(void *result)
{
  result[161] = off_1007BC9D8;
  result[150] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

double sub_10037D180@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x600000006LL;
  *(void *)a2 = &off_1007BF708;
  *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F10;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_100383B3C(a1, a2);
  return result;
}

void sub_10037D1CC(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_10037D1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 616),  *(_DWORD *)(*(void *)(a1 + 656) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 720) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037D2B4(void *result)
{
  result[86] = off_1007BC9D8;
  result[78] = off_1007BC9D8;
  *double result = off_1007AED90;
  return result;
}

uint64_t sub_10037D2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 328),  *(_DWORD *)(*(void *)(a1 + 368) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 432) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037D3AC(void *result)
{
  result[50] = off_1007BC9D8;
  result[42] = off_1007BC9D8;
  *double result = off_1007AED90;
  return result;
}

uint64_t sub_10037D3CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  unsigned int v9 = *(_DWORD *)(a3 + 16);
  uint64_t result = sub_100382B24(a4, *(_DWORD *)(a2 + 16), v9);
  if (v9)
  {
    int v11 = 0;
    for (unsigned int i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (uint64_t j = 0LL; j != v8; ++j)
        {
          int v14 = sub_100382DD8(a2, j);
          uint64_t result = sub_100382DD8(a3, i);
          *(void *)(*(void *)(a4 + 32) + 8LL * (v11 + j)) = *(void *)(*(void *)(a1 + 32)
                                                                                        + 8LL
                                                                                        * (v14 + *(_DWORD *)(a1 + 20) * result));
        }
      }

      v11 += v8;
    }
  }

  return result;
}

void sub_10037D494(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_10037D4A8(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

void *sub_10037D4B8(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 3; ++i)
  {
    uint64_t v3 = (uint64_t *)(a1 + 8 * i);
    uint64_t v4 = *v3;
    *(void *)sub_1002CB32C((uint64_t)&unk_100800910, i) = v4;
    uint64_t v5 = v3[3];
    *(void *)sub_1002CB32C((uint64_t)&unk_100800950, i) = v5;
    uint64_t v6 = v3[6];
    uint64_t result = (void *)sub_1002CB32C((uint64_t)&unk_100800990, i);
    *uint64_t result = v6;
  }

  return result;
}

uint64_t sub_10037D53C(double a1, double a2, double a3, double a4)
{
  BOOL v8 = a2 <= 0.0;
  if (a3 <= 0.0) {
    BOOL v8 = 1;
  }
  int v9 = a1 <= 0.0 || v8;
  if (v9 == 1)
  {
    sub_100045754((uint64_t)&v21);
    uint64_t v10 = *((void *)&v22 + 1);
    *(_DWORD *)((char *)&v22 + *(void *)(*((void *)&v22 + 1) - 24LL) + 16) = *(_DWORD *)((_BYTE *)&v22
                                                                                           + *(void *)(*((void *)&v22 + 1) - 24LL)
                                                                                           + 16) & 0xFFFFFEFB | 4;
    *(std::locale::__imp **)((char *)&v23.__loc_.__locale_ + *(void *)(v10 - 24)) = (std::locale::__imp *)3;
    sub_100046B94( (void *)&v22 + 1,  (uint64_t)"RoseEKF error: Trying to set dynamics noise intensity values that are not positive\n",  83LL);
    int v11 = sub_100046B94((void *)&v22 + 1, (uint64_t)"qT: ", 4LL);
    std::string v12 = (void *)std::ostream::operator<<(v11, a1);
    uint64_t v13 = sub_100046B94(v12, (uint64_t)", qA: ", 6LL);
    int v14 = (void *)std::ostream::operator<<(v13, a2);
    uint64_t v15 = sub_100046B94(v14, (uint64_t)", qG: ", 6LL);
    double v16 = (void *)std::ostream::operator<<(v15, a3);
    double v17 = sub_100046B94(v16, (uint64_t)", qV:", 5LL);
    std::ostream::operator<<(v17, a4);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str(&v20, &v23);
      sub_1003AE578();
    }

    *(uint64_t (***)())((char *)&v21
    *((void *)&v22 + 1) = v18;
    std::streambuf::~streambuf(&v23);
    std::ios::~ios(&v24);
  }

  else
  {
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, a1);
    sub_1002CBDC8((uint64_t)&qword_1008009D0, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, a2);
    sub_1002CBDC8((uint64_t)&qword_100800A40, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, a3);
    sub_1002CBDC8((uint64_t)&qword_100800AB0, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, a4);
    sub_1002CBDC8((uint64_t)&qword_100800B20, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, 1.0 / sqrt(a1));
    sub_1002CBDC8((uint64_t)&qword_100800B90, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, 1.0 / sqrt(a2));
    sub_1002CBDC8((uint64_t)&qword_100800C00, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, 1.0 / sqrt(a3));
    sub_1002CBDC8((uint64_t)&qword_100800C70, (uint64_t)&v21);
    v23.__vftable = (std::stringbuf_vtbl *)0x300000003LL;
    double v21 = &off_1007BC508;
    __int128 v22 = xmmword_10042DE90;
    v23.__loc_.__locale_ = (std::locale::__imp *)&v23.__binp_;
    sub_1002DA040((uint64_t)&qword_1007FFFC0, (uint64_t)&v21, 1.0 / sqrt(a4));
    sub_1002CBDC8((uint64_t)&qword_100800CE0, (uint64_t)&v21);
  }

  return v9 ^ 1u;
}

void sub_10037D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

double *sub_10037D9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0x100000003LL;
  int v11 = &off_1007BC4C0;
  __int128 v12 = xmmword_10042DB70;
  int v14 = &v15;
  sub_1002CB44C((uint64_t)&v21, (uint64_t)&unk_100800950, (uint64_t)&v11);
  uint64_t v28 = 0x100000003LL;
  uint64_t v26 = &off_1007BC4C0;
  __int128 v27 = xmmword_10042DB70;
  __int128 v29 = &v30;
  uint64_t v23 = 0x100000134LL;
  double v21 = &off_1007BC598;
  __int128 v22 = xmmword_10042DB90;
  uint64_t v24 = &v25;
  uint64_t v18 = 0x100000003LL;
  double v16 = &off_1007BC4C0;
  __int128 v17 = xmmword_10042DB70;
  __double2 v19 = &v20;
  sub_1002CB6A8((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  double v6 = v5;
  uint64_t result = (double *)sub_1002CB32C(a1, 0);
  *uint64_t result = v6;
  if (v6 != 0.0)
  {
    double v8 = sub_1002405E4((uint64_t)&v11, 0);
    *(double *)sub_1002CB32C(a2, 0) = v8 / v6;
    double v9 = sub_1002405E4((uint64_t)&v11, 1u);
    *(double *)sub_1002CB32C(a2, 1u) = v9 / v6;
    double v10 = sub_1002405E4((uint64_t)&v11, 2u);
    uint64_t result = (double *)sub_1002CB32C(a2, 2u);
    *uint64_t result = v10 / v6;
  }

  return result;
}

void sub_10037DB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0x100000003LL;
  double v16 = &off_1007BC4C0;
  __int128 v17 = xmmword_10042DB70;
  __double2 v19 = &v20;
  sub_1002CB44C((uint64_t)&v26, (uint64_t)&unk_100800990, (uint64_t)&v16);
  uint64_t v33 = 0x100000003LL;
  unint64_t v31 = &off_1007BC4C0;
  __int128 v32 = xmmword_10042DB70;
  uint64_t v34 = &v35;
  uint64_t v28 = 0x100000134LL;
  uint64_t v26 = &off_1007BC598;
  __int128 v27 = xmmword_10042DB90;
  __int128 v29 = &v30;
  uint64_t v23 = 0x100000003LL;
  double v21 = &off_1007BC4C0;
  __int128 v22 = xmmword_10042DB70;
  uint64_t v24 = &v25;
  sub_1002CB6A8((uint64_t)&v16, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)&v21, "2");
  double v6 = v5;
  double v7 = sub_1002405E4((uint64_t)&v16, 0);
  double v8 = sub_1002405E4((uint64_t)&v16, 1u);
  double v9 = sub_1002405E4((uint64_t)&v16, 2u);
  if (v6 != 0.0)
  {
    double v10 = v9;
    int v11 = (double *)sub_1002CB32C(a1, 0);
    *int v11 = atan2(v10, v8);
    __int128 v12 = (double *)sub_1002CB32C(a1, 1u);
    *__int128 v12 = asin(v7 / v6);
    double v13 = v10 * v10 + v8 * v8;
    double v14 = 1.0 / (v6 * v6);
    *(void *)sub_1002CB40C(a2, 0, 0) = 0LL;
    double v15 = sqrt(v13);
    *(double *)sub_1002CB40C(a2, 1, 0) = v14 * v15;
    if (v13 != 0.0)
    {
      *(double *)sub_1002CB40C(a2, 0, 1) = -v10 / v13;
      *(double *)sub_1002CB40C(a2, 0, 2) = v8 / v13;
      *(double *)sub_1002CB40C(a2, 1, 1) = v14 * (-(v7 * v8) / v15);
      *(double *)sub_1002CB40C(a2, 1, 2) = v14 * (-(v7 * v10) / v15);
    }
  }

uint64_t sub_10037DDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16)) {
    sub_1003AE5D0();
  }
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * i);
      *(void *)sub_10038494C(*(void *)(a1 + 56), *(_DWORD *)(*(void *)(a1 + 96) + 4 * i)) = v6;
      *(void *)(*(void *)(a1 + 32) + 8 * i) = v6;
    }
  }

  return a1;
}

void *sub_10037DE34(void *result)
{
  result[8] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037DE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 88),  *(_DWORD *)(*(void *)(a1 + 128) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 176) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037DF28(void *result)
{
  result[18] = off_1007BC9D8;
  result[12] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037DF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 136),  *(_DWORD *)(*(void *)(a1 + 176) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 224) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037E020(void *result)
{
  result[24] = off_1007BC9D8;
  result[18] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

void *sub_10037E040(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

void *sub_10037E050(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

void sub_10037E060( uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v78 = 0x100000003LL;
  uint64_t v76 = &off_1007BC4C0;
  __int128 v77 = xmmword_10042DB70;
  uint64_t v79 = &v80;
  sub_1002CB44C((uint64_t)&unk_100800950, (uint64_t)&unk_100800990, (uint64_t)&v76);
  uint64_t v73 = 0x100000003LL;
  __int128 v71 = &off_1007BC4C0;
  __int128 v72 = xmmword_10042DB70;
  uint64_t v74 = v75;
  uint64_t v83 = 0x100000134LL;
  double v81 = &off_1007BC598;
  __int128 v82 = xmmword_10042DB90;
  uint64_t v84 = v85;
  uint64_t v68 = 0x100000003LL;
  int v66 = &off_1007BC4C0;
  __int128 v67 = xmmword_10042DB70;
  __int128 v69 = v70;
  sub_1002CB6A8((uint64_t)&v76, (uint64_t)&v71, (uint64_t)&v81, (uint64_t)&v66, "2");
  if (v16 == 0.0)
  {
    double v17 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 0);
    uint64_t v18 = (double *)sub_1002CB32C(a1, 0);
    __double2 v19 = __sincos_stret(a5);
    double *v18 = v17 + a3 * v19.__sinval;
    double v20 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 1u);
    double v21 = (double *)sub_1002CB32C(a1, 1u);
    __double2 v22 = __sincos_stret(a4);
    *double v21 = v20 + v19.__cosval * a3 * v22.__cosval;
    double v23 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 2u);
    uint64_t v24 = (double *)sub_1002CB32C(a1, 2u);
    double v25 = v23 + v19.__cosval * a3 * v22.__sinval;
  }

  else
  {
    __double2 v26 = __sincos_stret(a5);
    double v49 = a9;
    __double2 v27 = __sincos_stret(a4);
    double v52 = a4;
    double v28 = a8;
    double v29 = sub_1002405E4((uint64_t)&v76, 0);
    double v30 = sub_1002405E4((uint64_t)&v76, 1u);
    double v31 = sub_1002405E4((uint64_t)&v76, 2u);
    double v32 = (v27.__cosval * v26.__cosval * v30 + v29 * v26.__sinval + v31 * (v27.__sinval * v26.__cosval)) * -2.0;
    double v33 = (sqrt(fmax((v30 * v30 + v29 * v29 + v31 * v31 - a3 * a3) * -4.0 + v32 * v32, 0.0)) - v32) * 0.5;
    double v34 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 0);
    *(double *)sub_1002CB32C(a1, 0) = v34 + v33 * v26.__sinval;
    double v35 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 1u);
    uint64_t v36 = (double *)sub_1002CB32C(a1, 1u);
    double v37 = v35 + v33 * (v27.__cosval * v26.__cosval);
    a9 = v49;
    *uint64_t v36 = v37;
    double v38 = *(double *)sub_1002CB32C((uint64_t)&unk_100800990, 2u);
    uint64_t v24 = (double *)sub_1002CB32C(a1, 2u);
    double v25 = v38 + v33 * (v27.__sinval * v26.__cosval);
    a8 = v28;
    a4 = v52;
  }

  *uint64_t v24 = v25;
  if (1.57079633 - fabs(a5) > 0.01)
  {
    uint64_t v83 = 0x300000003LL;
    double v81 = &off_1007BC508;
    __int128 v82 = xmmword_10042DE90;
    uint64_t v84 = v85;
    sub_1002CAEDC(&v81, 3, 3);
    sub_1002CAF28((uint64_t)&v81, 0.0);
    *(double *)sub_1002CB40C((uint64_t)&v81, 0, 0) = a6 * a6;
    *(double *)sub_1002CB40C((uint64_t)&v81, 1, 1) = a7 * a7;
    *(double *)sub_1002CB40C((uint64_t)&v81, 2, 1) = a9;
    *(double *)sub_1002CB40C((uint64_t)&v81, 1, 2) = a9;
    *(double *)sub_1002CB40C((uint64_t)&v81, 2, 2) = a8 * a8;
    uint64_t v73 = 0x300000003LL;
    __int128 v71 = &off_1007BC508;
    __int128 v72 = xmmword_10042DE90;
    uint64_t v74 = v75;
    sub_1002CAEDC(&v71, 3, 3);
    sub_1002CAF28((uint64_t)&v71, 0.0);
    double v39 = sin(a5);
    *(double *)sub_1002CB40C((uint64_t)&v71, 0, 0) = v39;
    *(void *)sub_1002CB40C((uint64_t)&v71, 0, 1) = 0LL;
    double v40 = cos(a5);
    double v41 = v40 * a3;
    *(double *)sub_1002CB40C((uint64_t)&v71, 0, 2) = v40 * a3;
    double v42 = cos(a4);
    *(double *)sub_1002CB40C((uint64_t)&v71, 1, 0) = v42 * v40;
    double v43 = sin(a4);
    *(double *)sub_1002CB40C((uint64_t)&v71, 1, 1) = v43 * -(a3 * v40);
    double v44 = -(a3 * v39);
    *(double *)sub_1002CB40C((uint64_t)&v71, 1, 2) = v42 * v44;
    *(double *)sub_1002CB40C((uint64_t)&v71, 2, 0) = v43 * v40;
    *(double *)sub_1002CB40C((uint64_t)&v71, 2, 1) = v42 * v41;
    *(double *)sub_1002CB40C((uint64_t)&v71, 2, 2) = v43 * v44;
    uint64_t v63 = 0x300000003LL;
    double v61 = &off_1007BC508;
    __int128 v62 = xmmword_10042DE90;
    uint64_t v64 = &v65;
    sub_1002CB548((uint64_t)&v71, (uint64_t)&v81, (uint64_t)&v61);
    uint64_t v58 = 0x300000003LL;
    uint64_t v53 = &off_1007BC508;
    if (DWORD1(v72) > 3)
    {
      uint64_t v47 = "this->max_num_rows_ >= num_rows";
      int v48 = 422;
    }

    else
    {
      if (v72 < 4)
      {
        int v54 = DWORD1(v72);
        int v55 = v72;
        int v56 = v72 * DWORD1(v72);
        int v57 = DWORD1(v72);
        __double2 v59 = &v60;
        sub_1002CB364((uint64_t)&v71, &v53);
        uint64_t v68 = 0x300000003LL;
        int v66 = &off_1007BC508;
        __int128 v67 = xmmword_10042DE90;
        __int128 v69 = v70;
        sub_1002CB548((uint64_t)&v61, (uint64_t)&v53, (uint64_t)&v66);
        sub_1002CBDC8(a2, (uint64_t)&v66);
        return;
      }

      uint64_t v47 = "this->max_num_cols_ >= num_cols";
      int v48 = 423;
    }

    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v48, v47);
  }

  uint64_t v83 = 0x300000003LL;
  double v81 = &off_1007BC508;
  __int128 v82 = xmmword_10042DE90;
  uint64_t v84 = v85;
  sub_1002CAEDC(&v81, 3, 3);
  sub_1002CAF28((uint64_t)&v81, 0.0);
  sub_1002CBDC8(a2, (uint64_t)&v81);
  *(double *)sub_1002CB40C(a2, 0, 0) = a6 * a6;
  double v45 = a3 * a3 * (a8 * a8);
  *(double *)sub_1002CB40C(a2, 1, 1) = v45;
  *(double *)sub_1002CB40C(a2, 2, 2) = v45;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003AE5F8();
  }
}

std::string *sub_10037E754@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2 = result->__r_.__value_.__r.__words[1];
  int v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  if (v2)
  {
    uint64_t v4 = (uint64_t)result;
    for (int i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (int j = 0; j != v3; ++j)
        {
          double v8 = sub_10024061C(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            double v9 = &v12;
          }
          else {
            double v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          }
          if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v12.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v12.__r_.__value_.__l.__size_;
          }
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (j - v3 == -1) {
            int v11 = ";";
          }
          else {
            int v11 = ",";
          }
          uint64_t result = std::string::append(a2, v11);
        }
      }
    }
  }

  return result;
}

void sub_10037E844( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10037E87C@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7 = strcmp(__s1, ":");
  if ((_DWORD)v7) {
    sub_1003AE630(v7, v8, v9);
  }
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  uint64_t v16 = 0x100000006LL;
  double v14 = &off_1007BF798;
  if ((v10 & 0x80000000) != 0) {
    sub_1003AE624("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  if (v10 >= 7) {
    sub_1003AE624("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  }
  int32x4_t v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000LL), 0);
  v11.i32[1] = 1;
  int32x4_t v15 = v11;
  double v17 = &v18;
  if (v10)
  {
    for (unsigned int i = 0; i != v10; ++i)
      *(_DWORD *)sub_100384D4C((uint64_t)&v14, i) = i;
  }

  return sub_100384D84(a4, a2, a3, (uint64_t)&v14);
}

void *sub_10037E994(void *result)
{
  result[50] = off_1007BC9D8;
  result[42] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037E9B4@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7 = strcmp(__s1, ":");
  if ((_DWORD)v7) {
    sub_1003AE630(v7, v8, v9);
  }
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  uint64_t v16 = 0x100000006LL;
  double v14 = &off_1007BF798;
  if ((v10 & 0x80000000) != 0) {
    sub_1003AE624("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  if (v10 >= 7) {
    sub_1003AE624("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  }
  int32x4_t v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000LL), 0);
  v11.i32[1] = 1;
  int32x4_t v15 = v11;
  double v17 = &v18;
  if (v10)
  {
    for (unsigned int i = 0; i != v10; ++i)
      *(_DWORD *)sub_100384D4C((uint64_t)&v14, i) = i;
  }

  return sub_100384F40(a4, a2, a3, (uint64_t)&v14);
}

uint64_t sub_10037EACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 8)) {
    sub_1003AE4DC(a1, a2, a3);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 12)) {
    sub_1003AE4B8(a1, a2, a3);
  }
  if ((_DWORD)v6)
  {
    int v7 = 0;
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((_DWORD)v3)
      {
        for (uint64_t j = 0LL; j != v3; ++j)
        {
          uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8LL * (v7 + j));
          *(void *)sub_100304F3C( *(void *)(a1 + 184),  *(_DWORD *)(*(void *)(a1 + 224) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 280) + 4 * i)) = v10;
          *(void *)sub_1002CB40C(a1, j, i) = v10;
        }
      }

      v7 += v3;
    }
  }

  return a1;
}

void *sub_10037EBA4(void *result)
{
  result[31] = off_1007BC9D8;
  result[24] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_10037EBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16)) {
    sub_1003AE5D0();
  }
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * i);
      *(void *)sub_10038494C(*(void *)(a1 + 64), *(_DWORD *)(*(void *)(a1 + 104) + 4 * i)) = v6;
      *(void *)(*(void *)(a1 + 32) + 8 * i) = v6;
    }
  }

  return a1;
}

void *sub_10037EC48(void *result)
{
  result[9] = off_1007BC9D8;
  *uint64_t result = off_1007AED90;
  return result;
}

void *sub_10037EC64(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

double sub_10037EC74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_100385694(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8LL * (sub_100382DD8(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }

  return result;
}

void sub_10037ECF8(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_10037ED08(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void *sub_10037ED18(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void sub_10037ED28(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003AE678(a3, v6, v7, v8, v9, v10, v11, v12);
  }
  uint64_t v95 = 0x300000003LL;
  __int128 v93 = &off_1007BC508;
  __int128 v94 = xmmword_10042DE90;
  __int128 v96 = &v97;
  LOBYTE(v52) = 0;
  uint64_t v13 = sub_100383E24((uint64_t)a3, (uint64_t)&v93, (BOOL *)&v52);
  if (!(_BYTE)v52) {
    sub_1003AE654(v13, v14, v15);
  }
  uint64_t v39 = 0x300000003LL;
  double v40 = 0LL;
  __int128 v38 = 0uLL;
  double v37 = &off_1007BC508;
  if (DWORD1(v94) > 3)
  {
    __double2 v22 = "this->max_num_rows_ >= num_rows";
    int v23 = 422;
    goto LABEL_11;
  }

  if (v94 >= 4)
  {
    __double2 v22 = "this->max_num_cols_ >= num_cols";
    int v23 = 423;
LABEL_11:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v23, v22);
  }

  *(void *)&__int128 v38 = __PAIR64__(v94, DWORD1(v94));
  DWORD2(v3std::ostream::~ostream(v1, v2 + 8) = v94 * DWORD1(v94);
  HIDWORD(v3std::ostream::~ostream(v1, v2 + 8) = DWORD1(v94);
  double v40 = v41;
  sub_1002CB364((uint64_t)&v93, &v37);
  uint64_t v90 = 0x300000003LL;
  __int128 v88 = &off_1007BC508;
  __int128 v89 = xmmword_10042DE90;
  uint64_t v91 = &v92;
  uint64_t v64 = 0x100000003LL;
  __int128 v62 = &off_1007BD278;
  __int128 v63 = xmmword_10042DB70;
  uint64_t v65 = v66;
  uint64_t v54 = 0x10000000CLL;
  double v52 = &off_1007BD2C0;
  __int128 v53 = xmmword_10042E850;
  int v55 = v56;
  sub_1002D9BF0((uint64_t)&v37, (uint64_t)&v62, (uint64_t)&v52, (uint64_t)&v88);
  uint64_t v16 = a1 + 456;
  uint64_t v39 = 0x100000001LL;
  double v37 = &off_1007BD568;
  *(void *)&__int128 v17 = 0x100000001LL;
  *((void *)&v17 + 1) = 0x100000001LL;
  __int128 v38 = v17;
  double v40 = v41;
  v41[0] = 0;
  sub_100383650((uint64_t)&v52, a1 + 456, (uint64_t)&qword_1007FFEE0, (uint64_t)&v37);
  sub_1002D5F00((uint64_t)v87, (uint64_t)&v52);
  uint64_t v84 = 0x600000003LL;
  __int128 v82 = &off_1007BFA68;
  __int128 v83 = xmmword_1006E1120;
  __int128 v85 = &v86;
  sub_1002CAEDC(&v82, 3, 6);
  sub_1002CAF28((uint64_t)&v82, 0.0);
  sub_100383998((uint64_t)&v52, (uint64_t)&v82, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
  sub_10037A98C((uint64_t)&v52, (uint64_t)&qword_1007FFFC0, v18);
  uint64_t v79 = 0x100000003LL;
  __int128 v77 = &off_1007BC4C0;
  __int128 v78 = xmmword_10042DB70;
  uint64_t v80 = &v81;
  sub_1002CB44C(a2, (uint64_t)v87, (uint64_t)&v77);
  uint64_t v74 = 0x100000003LL;
  __int128 v72 = &off_1007BC4C0;
  __int128 v73 = xmmword_10042DB70;
  __int128 v75 = &v76;
  sub_1002CB548((uint64_t)&v88, (uint64_t)&v77, (uint64_t)&v72);
  uint64_t v69 = 0x600000003LL;
  __int128 v67 = &off_1007BFA68;
  __int128 v68 = xmmword_1006E1120;
  uint64_t v70 = &v71;
  sub_1002CB548((uint64_t)&v88, (uint64_t)&v82, (uint64_t)&v67);
  uint64_t v64 = 0x600000009LL;
  __int128 v62 = &off_1007BFE58;
  __int128 v63 = xmmword_1006E1150;
  uint64_t v65 = v66;
  sub_10037E87C(":", (uint64_t)&v62, (uint64_t)&qword_1007FFDC8, (uint64_t)&v52);
  uint64_t v19 = a1 + 544;
  sub_10037D2D4((uint64_t)&v52, v19, v20);
  sub_10037E9B4(":", (uint64_t)&v62, (uint64_t)&qword_1007FFE08, (uint64_t)&v52);
  sub_10037EACC((uint64_t)&v52, (uint64_t)&v67, v21);
  uint64_t v59 = 0x100000009LL;
  int v57 = &off_1007BFF30;
  __int128 v58 = xmmword_1006E1160;
  uint64_t v60 = &v61;
  sub_1002CAEDC(&v57, 9, 1);
  sub_1002CAF28((uint64_t)&v57, 0.0);
  sub_10038515C((uint64_t)&v52, (uint64_t)&v57, (uint64_t)&qword_1007FFE08);
  sub_10037EBC4((uint64_t)&v52, (uint64_t)&v72);
  uint64_t v54 = 0x900000009LL;
  double v52 = &off_1007BFFC0;
  __int128 v53 = xmmword_1006E1170;
  int v55 = v56;
  uint64_t v49 = 0x600000009LL;
  uint64_t v47 = &off_1007BFE58;
  __int128 v48 = xmmword_1006E1150;
  unint64_t v50 = &v51;
  uint64_t v100 = 0x100000009LL;
  __int128 v98 = &off_1007BFF30;
  __int128 v99 = xmmword_1006E1160;
  __int128 v101 = v102;
  uint64_t v39 = 0x600000006LL;
  double v37 = &off_1007BF708;
  __int128 v38 = xmmword_1006E0F10;
  double v40 = v41;
  sub_1003852F0((uint64_t)&v62, (uint64_t)&v98, (uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47);
  sub_100384338((uint64_t)&v37, (uint64_t)&v47, (uint64_t)&qword_1007FFDC8, (uint64_t)&qword_1007FFDC8);
  sub_1002CBDC8(v19, (uint64_t)&v37);
  uint64_t v39 = 0x900000009LL;
  double v37 = &off_1007BFFC0;
  if (DWORD1(v53) > 9)
  {
    uint64_t v24 = "this->max_num_rows_ >= num_rows";
    int v25 = 422;
    goto LABEL_14;
  }

  if (v53 >= 0xA)
  {
    uint64_t v24 = "this->max_num_cols_ >= num_cols";
    int v25 = 423;
LABEL_14:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v25, v24);
  }

  *(void *)&__int128 v38 = __PAIR64__(v53, DWORD1(v53));
  DWORD2(v3std::ostream::~ostream(v1, v2 + 8) = v53 * DWORD1(v53);
  HIDWORD(v3std::ostream::~ostream(v1, v2 + 8) = DWORD1(v53);
  double v40 = v41;
  sub_1002CB364((uint64_t)&v52, &v37);
  uint64_t v44 = 0x100000009LL;
  double v42 = &off_1007BFF30;
  __int128 v43 = xmmword_1006E1160;
  double v45 = &v46;
  sub_1002CB548((uint64_t)&v37, (uint64_t)&v57, (uint64_t)&v42);
  sub_10037EC74((uint64_t)&v42, (uint64_t)&qword_1007FFDC8, 0, (uint64_t)v36);
  uint64_t v39 = 0x600000006LL;
  double v37 = &off_1007BF708;
  __int128 v38 = xmmword_1006E0F10;
  double v40 = v41;
  uint64_t v105 = 0x100000006LL;
  __int128 v103 = &off_1007BF798;
  __int128 v104 = xmmword_1006E0F20;
  __int128 v106 = &v107;
  uint64_t v100 = 0x100000018LL;
  __int128 v98 = &off_1007BF7E0;
  __int128 v99 = xmmword_1006E0F30;
  __int128 v101 = v102;
  sub_1002D9BF0(v19, (uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v37);
  uint64_t v28 = 0x100000006LL;
  __double2 v26 = &off_1007BF750;
  __int128 v27 = xmmword_1006E0F20;
  double v29 = &v30;
  sub_1002CB548((uint64_t)&v37, (uint64_t)v36, (uint64_t)&v26);
  uint64_t v33 = 0x100000006LL;
  double v31 = &off_1007BF750;
  __int128 v32 = xmmword_1006E0F20;
  double v34 = &v35;
  sub_1002CC25C((uint64_t)&v26, v16, (uint64_t)&v31);
  sub_1002CBDC8(v16, (uint64_t)&v31);
}

void sub_10037F494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003AE708(a3, v6);
  }
  uint64_t v97 = 0x100000001LL;
  uint64_t v95 = &off_1007BCA50;
  *(void *)&__int128 v7 = 0x100000001LL;
  *((void *)&v7 + 1) = 0x100000001LL;
  __int128 v96 = v7;
  __int128 v98 = &v99;
  LOBYTE(v55) = 0;
  uint64_t v8 = sub_100383E24(a3, (uint64_t)&v95, (BOOL *)&v55);
  if (!(_BYTE)v55) {
    sub_1003AE654(v8, v9, v10);
  }
  uint64_t v62 = 0x100000001LL;
  __int128 v63 = 0LL;
  __int128 v61 = 0uLL;
  uint64_t v60 = &off_1007BCA50;
  if (DWORD1(v96) > 1)
  {
    uint64_t v20 = "this->max_num_rows_ >= num_rows";
    int v21 = 422;
    goto LABEL_11;
  }

  if (v96 >= 2)
  {
    uint64_t v20 = "this->max_num_cols_ >= num_cols";
    int v21 = 423;
LABEL_11:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v21, v20);
  }

  *(void *)&__int128 v61 = __PAIR64__(v96, DWORD1(v96));
  DWORD2(v61) = v96 * DWORD1(v96);
  HIDWORD(v61) = DWORD1(v96);
  __int128 v63 = v64;
  sub_1002CB364((uint64_t)&v95, &v60);
  uint64_t v92 = 0x100000001LL;
  uint64_t v90 = &off_1007BCA50;
  *(void *)&__int128 v11 = 0x100000001LL;
  *((void *)&v11 + 1) = 0x100000001LL;
  __int128 v91 = v11;
  __int128 v93 = &v94;
  uint64_t v47 = 0x100000001LL;
  double v45 = &off_1007BD568;
  __int128 v46 = v11;
  __int128 v48 = v49;
  uint64_t v57 = 0x100000004LL;
  int v55 = &off_1007BC550;
  __int128 v56 = xmmword_10042DB80;
  __int128 v58 = v59;
  sub_1002D9BF0((uint64_t)&v60, (uint64_t)&v45, (uint64_t)&v55, (uint64_t)&v90);
  uint64_t v87 = 0x100000001LL;
  __int128 v85 = &off_1007BCA50;
  *(void *)&__int128 v12 = 0x100000001LL;
  *((void *)&v12 + 1) = 0x100000001LL;
  __int128 v86 = v12;
  __int128 v88 = &v89;
  sub_1002CAEDC(&v85, 1, 1);
  sub_1002CAF28((uint64_t)&v85, 0.0);
  uint64_t v82 = 0x600000001LL;
  uint64_t v80 = &off_1007BFCF0;
  __int128 v81 = xmmword_1006E1130;
  __int128 v83 = &v84;
  sub_1002CAEDC(&v80, 1, 6);
  sub_1002CAF28((uint64_t)&v80, 0.0);
  uint64_t v13 = a1 + 456;
  sub_10037D9A0((uint64_t)&v85, (uint64_t)&v80, a1 + 456);
  uint64_t v77 = 0x100000001LL;
  __int128 v75 = &off_1007BCA50;
  *(void *)&__int128 v14 = 0x100000001LL;
  *((void *)&v14 + 1) = 0x100000001LL;
  __int128 v76 = v14;
  __int128 v78 = &v79;
  sub_1002CB44C(a2, (uint64_t)&v85, (uint64_t)&v75);
  uint64_t v72 = 0x100000001LL;
  uint64_t v70 = &off_1007BCA50;
  *(void *)&__int128 v15 = 0x100000001LL;
  *((void *)&v15 + 1) = 0x100000001LL;
  __int128 v71 = v15;
  __int128 v73 = &v74;
  sub_1002CB548((uint64_t)&v90, (uint64_t)&v75, (uint64_t)&v70);
  uint64_t v67 = 0x600000001LL;
  uint64_t v65 = &off_1007BFCF0;
  __int128 v66 = xmmword_1006E1130;
  __int128 v68 = &v69;
  sub_1002CB548((uint64_t)&v90, (uint64_t)&v80, (uint64_t)&v65);
  uint64_t v62 = 0x600000007LL;
  uint64_t v60 = &off_1007C0008;
  __int128 v61 = xmmword_1006E1180;
  __int128 v63 = v64;
  sub_1002CAEDC(&v60, 7, 6);
  sub_1002CAF28((uint64_t)&v60, 0.0);
  sub_10037E87C(":", (uint64_t)&v60, (uint64_t)&qword_1007FFDC8, (uint64_t)&v55);
  uint64_t v16 = a1 + 544;
  sub_10037D2D4((uint64_t)&v55, v16, v17);
  sub_10037FC10(":", (uint64_t)&v60, 6, (uint64_t)&v55);
  sub_10037DE50((uint64_t)&v55, (uint64_t)&v65, v18);
  uint64_t v52 = 0x100000007LL;
  unint64_t v50 = &off_1007C0098;
  __int128 v51 = xmmword_1006E1190;
  __int128 v53 = &v54;
  sub_1002CAEDC(&v50, 7, 1);
  sub_1002CAF28((uint64_t)&v50, 0.0);
  double v19 = sub_1002405E4((uint64_t)&v70, 0);
  *(double *)sub_1002CB32C((uint64_t)&v50, 6u) = v19;
  uint64_t v47 = 0x700000007LL;
  double v45 = &off_1007C00E0;
  __int128 v46 = xmmword_1006E11A0;
  __int128 v48 = v49;
  sub_1002CAEDC(&v45, 7, 7);
  sub_1002CAF28((uint64_t)&v45, 0.0);
  uint64_t v42 = 0x600000007LL;
  double v40 = &off_1007C0008;
  __int128 v41 = xmmword_1006E1180;
  __int128 v43 = &v44;
  sub_1002CAEDC(&v40, 7, 6);
  sub_1002CAF28((uint64_t)&v40, 0.0);
  uint64_t v102 = 0x100000007LL;
  uint64_t v100 = &off_1007C0098;
  __int128 v101 = xmmword_1006E1190;
  __int128 v103 = v104;
  uint64_t v57 = 0x600000006LL;
  int v55 = &off_1007BF708;
  __int128 v56 = xmmword_1006E0F10;
  __int128 v58 = v59;
  sub_1003852F0((uint64_t)&v60, (uint64_t)&v100, (uint64_t)&v55, (uint64_t)&v45, (uint64_t)&v40);
  sub_100384338((uint64_t)&v55, (uint64_t)&v40, (uint64_t)&qword_1007FFDC8, (uint64_t)&qword_1007FFDC8);
  sub_1002CBDC8(v16, (uint64_t)&v55);
  uint64_t v57 = 0x700000007LL;
  __int128 v58 = 0LL;
  __int128 v56 = 0uLL;
  int v55 = &off_1007C00E0;
  if (DWORD1(v46) > 7)
  {
    __double2 v22 = "this->max_num_rows_ >= num_rows";
    int v23 = 422;
    goto LABEL_14;
  }

  if (v46 >= 8)
  {
    __double2 v22 = "this->max_num_cols_ >= num_cols";
    int v23 = 423;
LABEL_14:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v23, v22);
  }

  *(void *)&__int128 v56 = __PAIR64__(v46, DWORD1(v46));
  DWORD2(v56) = v46 * DWORD1(v46);
  HIDWORD(v56) = DWORD1(v46);
  __int128 v58 = v59;
  sub_1002CB364((uint64_t)&v45, &v55);
  uint64_t v37 = 0x100000007LL;
  uint64_t v35 = &off_1007C0098;
  __int128 v36 = xmmword_1006E1190;
  __int128 v38 = &v39;
  sub_1002CB548((uint64_t)&v55, (uint64_t)&v50, (uint64_t)&v35);
  sub_10037FD48((uint64_t)&v35, (uint64_t)&qword_1007FFDC8, 0, (uint64_t)v34);
  uint64_t v57 = 0x600000006LL;
  int v55 = &off_1007BF708;
  __int128 v56 = xmmword_1006E0F10;
  __int128 v58 = v59;
  uint64_t v107 = 0x100000006LL;
  uint64_t v105 = &off_1007BF798;
  __int128 v106 = xmmword_1006E0F20;
  __int128 v108 = &v109;
  uint64_t v102 = 0x100000018LL;
  uint64_t v100 = &off_1007BF7E0;
  __int128 v101 = xmmword_1006E0F30;
  __int128 v103 = v104;
  sub_1002D9BF0(v16, (uint64_t)&v105, (uint64_t)&v100, (uint64_t)&v55);
  uint64_t v26 = 0x100000006LL;
  uint64_t v24 = &off_1007BF750;
  __int128 v25 = xmmword_1006E0F20;
  __int128 v27 = &v28;
  sub_1002CB548((uint64_t)&v55, (uint64_t)v34, (uint64_t)&v24);
  uint64_t v31 = 0x100000006LL;
  double v29 = &off_1007BF750;
  __int128 v30 = xmmword_1006E0F20;
  __int128 v32 = &v33;
  sub_1002CC25C((uint64_t)&v24, v13, (uint64_t)&v29);
  sub_1002CBDC8(v13, (uint64_t)&v29);
}

uint64_t sub_10037FC10@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_1003AE7B4();
  }
  uint64_t v19 = 0x100000001LL;
  uint64_t v17 = &off_1007BD568;
  *(void *)&__int128 v7 = 0x100000001LL;
  *((void *)&v7 + 1) = 0x100000001LL;
  __int128 v18 = v7;
  uint64_t v20 = &v21;
  *(_DWORD *)sub_100384D4C((uint64_t)&v17, 0) = a3;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  uint64_t v14 = 0x100000006LL;
  __int128 v12 = &off_1007BF798;
  if (v8 >= 7) {
    sub_1003AE78C();
  }
  int32x4_t v9 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000LL), 0);
  v9.i32[1] = 1;
  int32x4_t v13 = v9;
  __int128 v15 = &v16;
  if (v8)
  {
    for (unsigned int i = 0; i != v8; ++i)
      *(_DWORD *)sub_100384D4C((uint64_t)&v12, i) = i;
  }

  return sub_1003857BC(a4, a2, (uint64_t)&v17, (uint64_t)&v12);
}

void *sub_10037FD18(void *result)
{
  result[18] = off_1007BC9D8;
  result[12] = off_1007BC9D8;
  *double result = off_1007AED90;
  return result;
}

void *sub_10037FD38(void *result)
{
  *double result = off_1007AED90;
  return result;
}

double sub_10037FD48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_100385694(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8LL * (sub_100382DD8(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }

  return result;
}

void sub_10037FDCC(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_10037FDDC(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void *sub_10037FDEC(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void sub_10037FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003AE7DC(a3, v6);
  }
  uint64_t v91 = 0x200000002LL;
  uint64_t v89 = &off_1007BCB28;
  __int128 v90 = xmmword_10042DF00;
  uint64_t v92 = &v93;
  LOBYTE(v44) = 0;
  uint64_t v7 = sub_100383E24(a3, (uint64_t)&v89, (BOOL *)&v44);
  if (!(_BYTE)v44) {
    sub_1003AE654(v7, v8, v9);
  }
  uint64_t v31 = 0x200000002LL;
  __int128 v32 = 0LL;
  __int128 v30 = 0uLL;
  double v29 = &off_1007BCB28;
  if (DWORD1(v90) > 2)
  {
    uint64_t v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_11;
  }

  if (v90 >= 3)
  {
    uint64_t v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_11:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }

  *(void *)&__int128 v30 = __PAIR64__(v90, DWORD1(v90));
  DWORD2(v30) = v90 * DWORD1(v90);
  HIDWORD(v30) = DWORD1(v90);
  __int128 v32 = v33;
  sub_1002CB364((uint64_t)&v89, &v29);
  uint64_t v86 = 0x200000002LL;
  uint64_t v84 = &off_1007BCB28;
  __int128 v85 = xmmword_10042DF00;
  uint64_t v87 = &v88;
  uint64_t v56 = 0x100000002LL;
  uint64_t v54 = &off_1007C0128;
  __int128 v55 = xmmword_10042DEE0;
  uint64_t v57 = v58;
  uint64_t v46 = 0x100000008LL;
  uint64_t v44 = &off_1007C0170;
  __int128 v45 = xmmword_1006E11B0;
  uint64_t v47 = v48;
  sub_1002D9BF0((uint64_t)&v29, (uint64_t)&v54, (uint64_t)&v44, (uint64_t)&v84);
  uint64_t v81 = 0x100000002LL;
  uint64_t v79 = &off_1007BCA98;
  __int128 v80 = xmmword_10042DEE0;
  uint64_t v82 = &v83;
  sub_1002CAEDC(&v79, 2, 1);
  sub_1002CAF28((uint64_t)&v79, 0.0);
  uint64_t v76 = 0x600000002LL;
  uint64_t v74 = &off_1007BFD38;
  __int128 v75 = xmmword_1006E1140;
  uint64_t v77 = &v78;
  sub_1002CAEDC(&v74, 2, 6);
  sub_1002CAF28((uint64_t)&v74, 0.0);
  uint64_t v10 = a1 + 456;
  sub_10037DB48((uint64_t)&v79, (uint64_t)&v74, a1 + 456);
  uint64_t v71 = 0x100000002LL;
  uint64_t v69 = &off_1007BCA98;
  __int128 v70 = xmmword_10042DEE0;
  uint64_t v72 = &v73;
  sub_1002CB44C(a2, (uint64_t)&v79, (uint64_t)&v69);
  uint64_t v66 = 0x100000002LL;
  uint64_t v64 = &off_1007BCA98;
  __int128 v65 = xmmword_10042DEE0;
  uint64_t v67 = &v68;
  sub_1002CB548((uint64_t)&v84, (uint64_t)&v69, (uint64_t)&v64);
  uint64_t v61 = 0x600000002LL;
  uint64_t v59 = &off_1007BFD38;
  __int128 v60 = xmmword_1006E1140;
  uint64_t v62 = &v63;
  sub_1002CB548((uint64_t)&v84, (uint64_t)&v74, (uint64_t)&v59);
  uint64_t v56 = 0x600000008LL;
  uint64_t v54 = &off_1007C01B8;
  __int128 v55 = xmmword_1006E11C0;
  uint64_t v57 = v58;
  sub_1002CAEDC(&v54, 8, 6);
  sub_1002CAF28((uint64_t)&v54, 0.0);
  sub_10037E87C(":", (uint64_t)&v54, (uint64_t)&qword_1007FFDC8, (uint64_t)&v44);
  uint64_t v11 = a1 + 544;
  sub_10037D2D4((uint64_t)&v44, v11, v12);
  sub_100380588(":", (uint64_t)&v54, (uint64_t)&qword_1007FFE40, (uint64_t)&v44);
  sub_10037DF48((uint64_t)&v44, (uint64_t)&v59, v13);
  uint64_t v51 = 0x100000008LL;
  uint64_t v49 = &off_1007C0170;
  __int128 v50 = xmmword_1006E11B0;
  uint64_t v52 = &v53;
  sub_1002CAEDC(&v49, 8, 1);
  sub_1002CAF28((uint64_t)&v49, 0.0);
  sub_100384818((uint64_t)&v44, (uint64_t)&v49, (uint64_t)&qword_1007FFE40);
  sub_10037DDB0((uint64_t)&v44, (uint64_t)&v64);
  uint64_t v46 = 0x800000008LL;
  uint64_t v44 = &off_1007C0248;
  __int128 v45 = xmmword_1006E11D0;
  uint64_t v47 = v48;
  sub_1002CAEDC(&v44, 8, 8);
  sub_1002CAF28((uint64_t)&v44, 0.0);
  uint64_t v41 = 0x600000008LL;
  uint64_t v39 = &off_1007C01B8;
  __int128 v40 = xmmword_1006E11C0;
  uint64_t v42 = &v43;
  sub_1002CAEDC(&v39, 8, 6);
  sub_1002CAF28((uint64_t)&v39, 0.0);
  uint64_t v96 = 0x100000008LL;
  uint64_t v94 = &off_1007C0170;
  __int128 v95 = xmmword_1006E11B0;
  uint64_t v97 = v98;
  uint64_t v31 = 0x600000006LL;
  double v29 = &off_1007BF708;
  __int128 v30 = xmmword_1006E0F10;
  __int128 v32 = v33;
  sub_1003852F0((uint64_t)&v54, (uint64_t)&v94, (uint64_t)&v29, (uint64_t)&v44, (uint64_t)&v39);
  sub_100384338((uint64_t)&v29, (uint64_t)&v39, (uint64_t)&qword_1007FFDC8, (uint64_t)&qword_1007FFDC8);
  sub_1002CBDC8(v11, (uint64_t)&v29);
  uint64_t v31 = 0x800000008LL;
  __int128 v32 = 0LL;
  __int128 v30 = 0uLL;
  double v29 = &off_1007C0248;
  if (DWORD1(v45) > 8)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
    goto LABEL_14;
  }

  if (v45 >= 9)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
LABEL_14:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v17, v16);
  }

  *(void *)&__int128 v30 = __PAIR64__(v45, DWORD1(v45));
  DWORD2(v30) = v45 * DWORD1(v45);
  HIDWORD(v30) = DWORD1(v45);
  __int128 v32 = v33;
  sub_1002CB364((uint64_t)&v44, &v29);
  uint64_t v36 = 0x100000008LL;
  double v34 = &off_1007C0170;
  __int128 v35 = xmmword_1006E11B0;
  uint64_t v37 = &v38;
  sub_1002CB548((uint64_t)&v29, (uint64_t)&v49, (uint64_t)&v34);
  sub_1003806D0((uint64_t)&v34, (uint64_t)&qword_1007FFDC8, 0, (uint64_t)v28);
  uint64_t v31 = 0x600000006LL;
  double v29 = &off_1007BF708;
  __int128 v30 = xmmword_1006E0F10;
  __int128 v32 = v33;
  uint64_t v101 = 0x100000006LL;
  uint64_t v99 = &off_1007BF798;
  __int128 v100 = xmmword_1006E0F20;
  uint64_t v102 = &v103;
  uint64_t v96 = 0x100000018LL;
  uint64_t v94 = &off_1007BF7E0;
  __int128 v95 = xmmword_1006E0F30;
  uint64_t v97 = v98;
  sub_1002D9BF0(v11, (uint64_t)&v99, (uint64_t)&v94, (uint64_t)&v29);
  uint64_t v20 = 0x100000006LL;
  __int128 v18 = &off_1007BF750;
  __int128 v19 = xmmword_1006E0F20;
  uint64_t v21 = &v22;
  sub_1002CB548((uint64_t)&v29, (uint64_t)v28, (uint64_t)&v18);
  uint64_t v25 = 0x100000006LL;
  int v23 = &off_1007BF750;
  __int128 v24 = xmmword_1006E0F20;
  uint64_t v26 = &v27;
  sub_1002CC25C((uint64_t)&v18, v10, (uint64_t)&v23);
  sub_1002CBDC8(v10, (uint64_t)&v23);
}

uint64_t sub_100380588@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7 = strcmp(__s1, ":");
  if ((_DWORD)v7) {
    sub_1003AE630(v7, v8, v9);
  }
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  uint64_t v16 = 0x100000006LL;
  uint64_t v14 = &off_1007BF798;
  if ((v10 & 0x80000000) != 0) {
    sub_1003AE624("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  if (v10 >= 7) {
    sub_1003AE624("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
  }
  int32x4_t v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000LL), 0);
  v11.i32[1] = 1;
  int32x4_t v15 = v11;
  int v17 = &v18;
  if (v10)
  {
    for (unsigned int i = 0; i != v10; ++i)
      *(_DWORD *)sub_100384D4C((uint64_t)&v14, i) = i;
  }

  return sub_100385AF8(a4, a2, a3, (uint64_t)&v14);
}

void *sub_1003806A0(void *result)
{
  result[24] = off_1007BC9D8;
  result[18] = off_1007BC9D8;
  *double result = off_1007AED90;
  return result;
}

void *sub_1003806C0(void *result)
{
  *double result = off_1007AED90;
  return result;
}

double sub_1003806D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_100385694(a4, *(_DWORD *)(a2 + 16), 1u);
  if ((_DWORD)v8)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8LL * (sub_100382DD8(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }

  return result;
}

void sub_100380754(_Unwind_Exception *a1)
{
  *double v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

void *sub_100380764(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void *sub_100380774(void *result)
{
  *double result = off_1007AED90;
  return result;
}

void sub_100380784(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_BYTE *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_1003AE928();
    }
    if (fabs(*(double *)(a2 + 16)) <= 1.57079633 && fabs(*(double *)(a2 + 8)) <= 3.14159265)
    {
      if (sub_100378D8C(a1, a3, *(double *)a2))
      {
        uint64_t v19 = 0x100000002LL;
        int v17 = &off_1007BCA98;
        __int128 v18 = xmmword_10042DEE0;
        uint64_t v20 = &v21;
        sub_1002CAEDC(&v17, 2, 1);
        sub_1002CAF28((uint64_t)&v17, 0.0);
        uint64_t v14 = 0x200000002LL;
        uint64_t v12 = &off_1007BCB28;
        __int128 v13 = xmmword_10042DF00;
        int32x4_t v15 = &v16;
        sub_1002CAEDC(&v12, 2, 2);
        sub_1002CAF28((uint64_t)&v12, 0.0);
        uint64_t v6 = *(void *)(a2 + 8);
        *(void *)sub_1002CB32C((uint64_t)&v17, 0) = v6;
        uint64_t v7 = *(void *)(a2 + 16);
        *(void *)sub_1002CB32C((uint64_t)&v17, 1u) = v7;
        double v8 = *(double *)(a2 + 24);
        *(double *)sub_1002CB40C((uint64_t)&v12, 0, 0) = v8 * v8;
        uint64_t v9 = *(void *)(a2 + 40);
        *(void *)sub_1002CB40C((uint64_t)&v12, 1, 0) = v9;
        uint64_t v10 = *(void *)(a2 + 40);
        *(void *)sub_1002CB40C((uint64_t)&v12, 0, 1) = v10;
        double v11 = *(double *)(a2 + 32);
        *(double *)sub_1002CB40C((uint64_t)&v12, 1, 1) = v11 * v11;
        sub_10037FDFC(a1, (uint64_t)&v17, (uint64_t)&v12);
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AE8FC();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003AE8D0();
  }

void sub_1003809BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_BYTE *)(a1 + 444))
  {
    if (*(double *)(a2 + 8) <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AE980();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }

    else if (sub_100378D8C(a1, a3, *(double *)a2))
    {
      uint64_t v16 = 0x100000001LL;
      uint64_t v14 = &off_1007BCA50;
      *(void *)&__int128 v5 = 0x100000001LL;
      *((void *)&v5 + 1) = 0x100000001LL;
      __int128 v15 = v5;
      int v17 = &v18;
      sub_1002CAEDC(&v14, 1, 1);
      sub_1002CAF28((uint64_t)&v14, 0.0);
      uint64_t v11 = 0x100000001LL;
      uint64_t v9 = &off_1007BCA50;
      *(void *)&__int128 v6 = 0x100000001LL;
      *((void *)&v6 + 1) = 0x100000001LL;
      __int128 v10 = v6;
      uint64_t v12 = &v13;
      sub_1002CAEDC(&v9, 1, 1);
      sub_1002CAF28((uint64_t)&v9, 0.0);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)sub_1002CB32C((uint64_t)&v14, 0) = v7;
      double v8 = *(double *)(a2 + 16);
      *(double *)sub_1002CB40C((uint64_t)&v9, 0, 0) = v8 * v8;
      sub_10037F494(a1, (uint64_t)&v14, (uint64_t)&v9);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003AE954();
  }

void sub_100380B34(uint64_t a1, double *a2, uint64_t *a3)
{
  if (*(_BYTE *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_1003AEA04();
    }
    if (fabs(a2[9]) > 1.57079633 || fabs(a2[8]) > 3.14159265 || a2[6] <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AE9D8();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }

    else if (sub_100378D8C(a1, a3, a2[5]))
    {
      uint64_t v12 = 0x100000003LL;
      __int128 v10 = &off_1007BC4C0;
      __int128 v11 = xmmword_10042DB70;
      uint64_t v13 = &v14;
      uint64_t v7 = 0x300000003LL;
      v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BC508;
      *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_10042DE90;
      double v8 = &v9;
      sub_10037E060((uint64_t)&v10, (uint64_t)&v6, a2[6], a2[8], a2[9], a2[7], a2[10], a2[11], a2[12]);
      sub_10037ED28(a1, (uint64_t)&v10, &v6);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003AE9AC();
  }

uint64_t sub_100380CC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 440);
}

uint64_t sub_100380CCC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_BYTE *)(result + 444))
  {
    *(void *)a2 = *(void *)(result + 448);
    uint64_t v34 = 0x100000003LL;
    __int128 v32 = &off_1007BC4C0;
    __int128 v33 = xmmword_10042DB70;
    __int128 v35 = &v36;
    sub_1002CAEDC(&v32, 3, 1);
    sub_1002CAF28((uint64_t)&v32, 0.0);
    uint64_t v29 = 0x600000003LL;
    uint64_t v27 = &off_1007BFA68;
    __int128 v28 = xmmword_1006E1120;
    __int128 v30 = &v31;
    sub_1002CAEDC(&v27, 3, 6);
    sub_1002CAF28((uint64_t)&v27, 0.0);
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 176);
    uint64_t v6 = *(void *)(v3 + 320);
    sub_10036FCC4((uint64_t)v26, v3 + 456);
    *(void *)sub_1002CB32C((uint64_t)v26, 0) = v4;
    *(void *)sub_1002CB32C((uint64_t)v26, 1u) = v5;
    *(void *)sub_1002CB32C((uint64_t)v26, 2u) = v6;
    sub_10037C4F0((uint64_t)&v32, (uint64_t)&v27, (uint64_t)v26);
    sub_10036FE30(v3 + 544, (uint64_t)v15);
    uint64_t v18 = 0x600000003LL;
    uint64_t v16 = &off_1007BFA68;
    __int128 v17 = xmmword_1006E1120;
    uint64_t v19 = &v20;
    sub_1002CB548((uint64_t)&v27, (uint64_t)v15, (uint64_t)&v16);
    uint64_t v12 = 0x300000006LL;
    uint64_t v13 = 0LL;
    unint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v9 = &off_1007BFAB0;
    if (DWORD1(v28) > 6)
    {
      uint64_t v7 = "this->max_num_rows_ >= num_rows";
      int v8 = 422;
    }

    else
    {
      if (v28 < 4)
      {
        unint64_t v10 = __PAIR64__(v28, DWORD1(v28));
        LODWORD(v11) = v28 * DWORD1(v28);
        HIDWORD(v11) = DWORD1(v28);
        uint64_t v13 = &v14;
        sub_1002CB364((uint64_t)&v27, &v9);
        uint64_t v23 = 0x300000003LL;
        uint64_t v21 = &off_1007BC508;
        __int128 v22 = xmmword_10042DE90;
        __int128 v24 = &v25;
        sub_1002CB548((uint64_t)&v16, (uint64_t)&v9, (uint64_t)&v21);
        *(void *)(a2 + 40) = *(void *)sub_1002CB32C((uint64_t)&v32, 0);
        *(double *)(a2 + 4std::ostream::~ostream(v1, v2 + 8) = *(double *)sub_1002CB32C((uint64_t)&v32, 1u) * 180.0 / 3.14159265;
        *(double *)(a2 + 56) = *(double *)sub_1002CB32C((uint64_t)&v32, 2u) * 180.0 / 3.14159265;
        *(double *)(a2 + 64) = sqrt(*(double *)sub_1002CB40C((uint64_t)&v21, 0, 0));
        *(double *)(a2 + 72) = sqrt(*(double *)sub_1002CB40C((uint64_t)&v21, 1, 1)) * 180.0 / 3.14159265;
        *(double *)(a2 + 80) = sqrt(*(double *)sub_1002CB40C((uint64_t)&v21, 2, 2)) * 180.0 / 3.14159265;
        *(_DWORD *)(a2 + 136) = *(_DWORD *)(v3 + 440);
        *(double *)(a2 + 8std::ostream::~ostream(v1, v2 + 8) = sub_1002405E4(v3 + 456, 3u);
        *(double *)(a2 + 96) = sub_1002405E4(v3 + 456, 4u);
        *(double *)(a2 + 104) = sub_1002405E4(v3 + 456, 5u);
        sub_10036FE30(v3 + 544, (uint64_t)v15);
        *(void *)(a2 + sub_1001ACE80(v1 + 112) = *(void *)sub_1002CB40C((uint64_t)v15, 3, 3);
        *(void *)(a2 + sub_100021DA8(v1 + 120) = *(void *)sub_1002CB40C((uint64_t)v15, 4, 4);
        double result = sub_1002CB40C((uint64_t)v15, 5, 5);
        *(void *)(a2 + 12std::ostream::~ostream(v1, v2 + 8) = *(void *)result;
        return result;
      }

      uint64_t v7 = "this->max_num_cols_ >= num_cols";
      int v8 = 423;
    }

    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v8, v7);
  }

  *(void *)a2 = 0LL;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(result + 440);
  *(_OWORD *)(a2 + sub_100021DA8(v1 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 8std::ostream::~ostream(v1, v2 + 8) = 0u;
  return result;
}

void sub_1003810C4(uint64_t a1, double *a2, void *a3)
{
  uint64_t v3 = (uint64_t)a3;
  uint64_t v5 = a1;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    sub_1003AEF08();
    uint64_t v5 = a1;
    uint64_t v3 = (uint64_t)a3;
  }

  double v7 = a2[5];
  double v6 = a2[6];
  *(double *)uint64_t v126 = v7;
  *(double *)&v126[1] = v6;
  double v8 = a2[8];
  double v109 = a2[7];
  *(double *)&v126[2] = v109;
  *(double *)uint64_t v125 = v7;
  *(double *)&v125[1] = v8;
  double v9 = a2[10];
  double v110 = a2[9];
  *(double *)&v125[2] = v110;
  *(double *)&v125[3] = v9;
  double v10 = a2[11];
  double v11 = a2[12];
  *(double *)&v125[4] = v10;
  *(double *)&v125[5] = v11;
  double v124 = v7;
  if (!*(_BYTE *)(v5 + 444))
  {
    if (v6 <= 0.0)
    {
      uint64_t v26 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        std::string::size_type cap = *(void *)&v110;
        LOWORD(v146) = 2048;
        *(double *)((char *)&v146 + 2) = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#sf,RoseEKF error: Aborted initializing filter due to negative range measurement w/ range: %f m, El: %f rad, a nd Az: %f rad at t = %f s",  (uint8_t *)&buf,  0x2Au);
      }
    }

    else if (sub_100387778(v3) {
           || (double v12 = v124,
    }
               v124 < *(double *)(*(void *)(a3[7] + ((a3[10] >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (a3[10] & 0x1FFLL))))
    {
      BOOL v13 = sub_100387778((uint64_t)a3);
      BOOL v14 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
      if (v13)
      {
        if (v14) {
          sub_1003AEA5C();
        }
      }

      else if (v14)
      {
        sub_1003AEA88();
      }
    }

    else
    {
      *(double *)(a1 + 44std::ostream::~ostream(v1, v2 + 8) = v124;
      *(_BYTE *)(a1 + 444) = 1;
      __int128 v58 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        std::string::size_type cap = *(void *)&v110;
        LOWORD(v146) = 2048;
        *(double *)((char *)&v146 + 2) = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF: Initializing filter w/ range: %f m, El: %f rad, and Az: %f rad at t = %f s",  (uint8_t *)&buf,  0x2Au);
      }

      std::string::size_type cap = 0x600000006LL;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1007BF708;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1006E0F10;
      *(void *)&__int128 v146 = (char *)&v146 + 8;
      sub_1002CAEDC(&buf, 6, 6);
      sub_1002CAF28((uint64_t)&buf, 0.0);
      uint64_t v121 = 0x100000003LL;
      __int128 v119 = &off_1007BC4C0;
      __int128 v120 = xmmword_10042DB70;
      uint64_t v122 = &v123;
      sub_1002CAEDC(&v119, 3, 1);
      sub_1002CAF28((uint64_t)&v119, 0.0);
      uint64_t v116 = 0x300000003LL;
      uint64_t v114 = &off_1007BC508;
      __int128 v115 = xmmword_10042DE90;
      unsigned int v117 = &v118;
      sub_1002CAEDC(&v114, 3, 3);
      uint64_t v59 = a1;
      sub_1002CAF28((uint64_t)&v114, 0.0);
      sub_10037E060((uint64_t)&v119, (uint64_t)&v114, v6, v8, v110, v109, v9, v10, v11);
      uint64_t v138 = 0x100000001LL;
      *(void *)double v137 = &off_1007BD568;
      *(void *)&__int128 v60 = 0x100000001LL;
      *((void *)&v60 + 1) = 0x100000001LL;
      *(_OWORD *)&v137[8] = v60;
      __int128 v139 = v140;
      v140[0] = 0;
      sub_100383650((uint64_t)v141, a1 + 456, (uint64_t)&qword_1007FFEE0, (uint64_t)v137);
      sub_10037AAE0((uint64_t)v141, (uint64_t)&v119, v61);
      double v62 = *(double *)sub_1002CB32C(a1 + 456, 0);
      double v63 = *(double *)sub_1002CB32C(a1 + 456, 1u);
      uint64_t v64 = (double *)sub_1002CB32C(a1 + 456, 2u);
      sub_1003826B4(a1, v62, v63, *v64);
      sub_100383998((uint64_t)v141, (uint64_t)&buf, (uint64_t)&qword_1007FFEE0, (uint64_t)&qword_1007FFEE0);
      sub_10037A98C((uint64_t)v141, (uint64_t)&v114, v65);
      sub_100383998((uint64_t)v141, (uint64_t)&buf, (uint64_t)&qword_1007FFF18, (uint64_t)&qword_1007FFF18);
      sub_10037A98C((uint64_t)v141, (uint64_t)&qword_1007FFFC0, v66);
      uint64_t v67 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v103 = *(void *)sub_1002CB32C(a1 + 456, 0);
        uint64_t v104 = *(void *)sub_1002CB32C(a1 + 456, 1u);
        uint64_t v105 = *(void *)sub_1002CB32C(a1 + 456, 2u);
        *(_DWORD *)uint64_t v141 = 134218752;
        *(void *)&v141[4] = v103;
        *(_WORD *)&v141[12] = 2048;
        *(void *)&v141[14] = v104;
        *(_WORD *)&v141[22] = 2048;
        uint64_t v142 = v105;
        *(_WORD *)std::string v143 = 2048;
        *(double *)&v143[2] = v124;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF: Initializing filter w/ state: [%f,%f,%f] at t = %f s",  v141,  0x2Au);
        uint64_t v67 = (os_log_s *)qword_1008000A0;
      }

      if (1.57079633 - fabs(v110) <= 0.01 && os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v141 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF: Az angle close to singularity - initializing filter covariance without measurement Jacobian",  v141,  2u);
        uint64_t v67 = (os_log_s *)qword_1008000A0;
      }

      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        sub_10037CF50(&buf, &v113);
        sub_1003AEB0C();
        uint64_t v59 = a1;
      }

      uint64_t v138 = 0x600000006LL;
      *(void *)double v137 = &off_1007BF708;
      *(_OWORD *)&v137[8] = xmmword_1006E0F10;
      __int128 v139 = v140;
      uint64_t v134 = 0x100000006LL;
      uint64_t v132 = &off_1007BF798;
      __int128 v133 = xmmword_1006E0F20;
      unint64_t v135 = &v136;
      uint64_t v129 = 0x100000018LL;
      uint64_t v127 = &off_1007BF7E0;
      __int128 v128 = xmmword_1006E0F30;
      uint64_t v130 = v131;
      sub_1002D9BF0((uint64_t)&buf, (uint64_t)&v132, (uint64_t)&v127, (uint64_t)v137);
      uint64_t v142 = 0x600000006LL;
      *(void *)uint64_t v141 = &off_1007BF708;
      *(_OWORD *)&v141[8] = xmmword_1006E0F10;
      *(void *)std::string v143 = &v143[8];
      LOBYTE(v127) = 0;
      sub_100383E24((uint64_t)v137, (uint64_t)v141, (BOOL *)&v127);
      if (!(_BYTE)v127) {
        __assert_rtn("Chol", "cnmatrix.h", 4287, "false");
      }
      sub_1002CBDC8(v59 + 544, (uint64_t)v141);
      sub_100382580(v59);
      sub_100382748(v59, a3);
      *(_DWORD *)(v59 + 440) = 0;
    }

    goto LABEL_117;
  }

  if (sub_100387778(v3))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003AEB64();
    }
    return;
  }

  double v15 = *(double *)(a1 + 448);
  uint64_t v16 = (os_log_s *)qword_1008000A0;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
  if (v124 >= v15)
  {
    uint64_t v27 = a3;
    if (v17)
    {
      std::string::size_type v93 = *((void *)a2 + 6);
      uint64_t v95 = *((void *)a2 + 8);
      std::string::size_type v94 = *((void *)a2 + 9);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v124;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      std::string::size_type cap = v94;
      LOWORD(v146) = 2048;
      *(void *)((char *)&v146 + 2) = v95;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF: Measurement update with a non-delayed measurement at t = %f s , range = %f m, Az = %f rad, El = %f rad",  (uint8_t *)&buf,  0x2Au);
      uint64_t v16 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      sub_1003AEEDC();
      uint64_t v27 = a3;
    }

    unint64_t v28 = v27[5] + v27[4] - 1LL;
    sub_10037021C((uint64_t)&buf, *(void *)(v27[1] + 8 * (v28 / 0x19)) + 160 * (v28 % 0x19));
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_1003AEEB0();
    }
    uint64_t v29 = a1;
    sub_100377198(a1);
    double v31 = v30;
    double v32 = a2[9];
    if (1.57079633 - fabs(v32) <= 0.01 || 1.57079633 - fabs(v30) <= 0.01)
    {
      __int128 v33 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v141 = 134218496;
        *(double *)&v141[4] = v32;
        *(_WORD *)&v141[12] = 2048;
        *(double *)&v141[14] = v31;
        *(_WORD *)&v141[22] = 2048;
        uint64_t v142 = *(void *)&v124;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "#sf,RoseEKF: Measurement az: %f rad, state az: %f rad. Alternative Range&AoA measurement update done in the no n-delayed measurement at t = %f s",  v141,  0x20u);
      }

      sub_100380B34(a1, a2, (uint64_t *)&buf);
      goto LABEL_36;
    }

    sub_100380784(a1, (uint64_t)v125, (uint64_t *)&buf);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      sub_1003AEE4C();
      uint64_t v29 = a1;
    }

    if (v6 >= 0.0)
    {
      sub_1003809BC(v29, (uint64_t)v126, (uint64_t *)&buf);
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
      {
        sub_1003AEDE8();
        goto LABEL_81;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_1003AED84();
LABEL_81:
      uint64_t v29 = a1;
    }

void sub_100382524(_Unwind_Exception *a1)
{
}

double sub_100382580(uint64_t a1)
{
  unsigned int v2 = 0;
  *(void *)(a1 + 872) = *(void *)(a1 + 448);
  uint64_t v3 = a1 + 456;
  uint64_t v4 = a1 + 880;
  uint64_t v5 = a1 + 544;
  uint64_t v6 = a1 + 968;
  do
  {
    uint64_t v7 = *(void *)sub_1002CB32C(v3, v2);
    int v8 = 0;
    *(void *)sub_1002CB32C(v4, sub_1001ACE3C(v1, v2) = v7;
    do
    {
      uint64_t v9 = *(void *)sub_1002CB40C(v5, v2, v8);
      *(void *)sub_1002CB40C(v6, v2, v8++) = v9;
    }

    while (v8 != 6);
    ++v2;
  }

  while (v2 != 6);
  return sub_100382A44(a1);
}

double sub_100382640(uint64_t a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = a1 + 80;
  do
  {
    uint64_t v3 = v2 + v1;
    *(void *)(v3 - 72) = *(void *)(v2 + v1 - 24);
    *(void *)(v3 - 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v2 + v1);
    v1 += 8LL;
  }

  while (v1 != 24);
  uint64_t v4 = a1 + 224;
  uint64_t v5 = -24LL;
  do
  {
    uint64_t v6 = v4 + v5;
    *(void *)(v6 - 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v4 + v5);
    *(void *)(v6 - 24) = *(void *)(v4 + v5 + 24);
    v5 += 8LL;
  }

  while (v5);
  uint64_t v7 = a1 + 368;
  uint64_t v8 = -24LL;
  do
  {
    uint64_t v9 = v7 + v8;
    *(void *)(v9 - 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v7 + v8);
    double result = *(double *)(v7 + v8 + 24);
    *(double *)(v9 - 24) = result;
    v8 += 8LL;
  }

  while (v8);
  return result;
}

void sub_1003826B4(uint64_t a1, double a2, double a3, double a4)
{
  if (*(_DWORD *)(a1 + 4))
  {
    unsigned int v8 = 0;
    uint64_t v9 = a1 + 8;
    uint64_t v10 = a1 + 152;
    uint64_t v11 = a1 + 296;
    do
    {
      sub_100382ABC(v9, a2);
      sub_100382ABC(v10, a3);
      sub_100382ABC(v11, a4);
      ++v8;
    }

    while (v8 < *(_DWORD *)(a1 + 4));
  }

void sub_100382748(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 444))
  {
    if (sub_100387778((uint64_t)a2))
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003AEF34();
      }
    }

    else
    {
      unint64_t v4 = a2[10];
      uint64_t v5 = a2[7];
      uint64_t v6 = (char *)(v5 + 8 * (v4 >> 9));
      if (a2[8] == v5)
      {
        uint64_t v7 = 0LL;
        uint64_t v10 = 0LL;
        uint64_t v9 = (char *)(v5 + 8 * ((a2[11] + v4) >> 9));
      }

      else
      {
        uint64_t v7 = (double *)(*(void *)v6 + 8 * (a2[10] & 0x1FFLL));
        unint64_t v8 = a2[11] + v4;
        uint64_t v9 = (char *)(v5 + 8 * (v8 >> 9));
        uint64_t v10 = (double *)(*(void *)v9 + 8 * (v8 & 0x1FF));
      }

      uint64_t v11 = sub_100383CC0(v6, v7, v9, v10, (double *)(a1 + 448));
      unint64_t v13 = a2[10];
      uint64_t v14 = a2[7];
      double v15 = (char *)(v14 + 8 * (v13 >> 9));
      if (a2[8] == v14) {
        uint64_t v16 = 0LL;
      }
      else {
        uint64_t v16 = *(void *)v15 + 8 * (a2[10] & 0x1FFLL);
      }
      if (v12 == v16
        || (uint64_t v17 = ((v12 - *(void *)v11) >> 3) + ((v11 - v15) << 6),
            uint64_t v18 = v16 - *(void *)v15,
            unint64_t v19 = v17 - (v18 >> 3),
            v17 == v18 >> 3))
      {
        uint64_t v26 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = *(void *)(a1 + 448);
          uint64_t v28 = *(void *)(*(void *)v15 + 8 * (v13 & 0x1FF));
          *(_DWORD *)std::string buf = 134218240;
          uint64_t v30 = v27;
          __int16 v31 = 2048;
          uint64_t v32 = v28;
          _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#sf,RoseEKF error: Could not complete dynamic propagation because the filter tries to advance to a new IMUDa ta without a preceding one to interpolate from, Filter time = %f s, new IMU time = %f s",  buf,  0x16u);
        }
      }

      else
      {
        while (1)
        {
          unint64_t v20 = v19 + a2[4];
          uint64_t v21 = ((v20 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v22 = (v21 + ((v20 - 1 - v21) >> 1)) >> 4;
          if ((sub_100377AA8( a1,  *(void *)(a2[1] + 8 * v22) + 160 * (v20 - 1 - 25 * v22),  (double *)(*(void *)(a2[1] + 8 * (v20 / 0x19)) + 160 * (v20 % 0x19))) & 1) == 0) {
            break;
          }
          double v23 = *(double *)sub_1002CB32C(a1 + 456, 0);
          double v24 = *(double *)sub_1002CB32C(a1 + 456, 1u);
          double v25 = *(double *)sub_1002CB32C(a1 + 456, 2u);
          sub_100382ABC(a1 + 8, v23);
          sub_100382ABC(a1 + 152, v24);
          sub_100382ABC(a1 + 296, v25);
        }
      }

      *(_DWORD *)(a1 + 440) = 9;
    }
  }

double sub_100382A44(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = -24LL;
  do
  {
    uint64_t v3 = v1 + v2;
    *(void *)(v3 + 24) = *(void *)(v1 + v2 - 24);
    *(void *)(v3 + 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v1 + v2);
    v2 += 8LL;
  }

  while (v2);
  uint64_t v4 = 0LL;
  uint64_t v5 = a1 + 152;
  do
  {
    uint64_t v6 = v5 + v4;
    *(void *)(v6 + 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v5 + v4);
    *(void *)(v6 + 72) = *(void *)(v5 + v4 + 24);
    v4 += 8LL;
  }

  while (v4 != 24);
  uint64_t v7 = 0LL;
  uint64_t v8 = a1 + 296;
  do
  {
    uint64_t v9 = v8 + v7;
    *(void *)(v9 + 4std::ostream::~ostream(v1, v2 + 8) = *(void *)(v8 + v7);
    double result = *(double *)(v8 + v7 + 24);
    *(double *)(v9 + 72) = result;
    v7 += 8LL;
  }

  while (v7 != 24);
  return result;
}

double sub_100382ABC(uint64_t a1, double a2)
{
  uint64_t v2 = 0LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 24);
  *(double *)a1 = a2;
  double v3 = 0.0;
  do
  {
    if (v2) {
      double v3 = v3
    }
    else {
      double v3 = v3 + *(double *)(a1 + 120) * a2;
    }
    v2 += 8LL;
  }

  while (v2 != 24);
  *(double *)(a1 + 24) = v3;
  return v3;
}

uint64_t sub_100382B24(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x600000006LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = &off_1007BF708;
  if (a2 > 6)
  {
    double v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }

  if (a3 >= 7)
  {
    double v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }

  *(_DWORD *)(result + std::ostream::~ostream(v1, v2 + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382BB8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

_DWORD *sub_100382BC8(int a1, int a2, _DWORD *a3)
{
  if (!a3[6]) {
    sub_1003AEF60();
  }
  int v4 = a3[7];
  if (!v4) {
    sub_1003AEF88();
  }
  int v6 = a2 - a1;
  if (a2 == a1)
  {
    sub_1002CAEDC(a3, 1, 1);
    double result = (_DWORD *)sub_100382CD4((uint64_t)a3, 0);
    *double result = a1;
  }

  else if (a2 - a1 < 0)
  {
    return sub_1002CAEDC(a3, 0, 0);
  }

  else
  {
    if (v4 <= v6) {
      sub_1003AEFB0();
    }
    int v8 = v6 + 1;
    sub_1002CAEDC(a3, 1, v6 + 1);
    unsigned int v9 = 0;
    do
    {
      double result = (_DWORD *)sub_100382CD4((uint64_t)a3, v9);
      *double result = a1 + v9++;
    }

    while (v8 != v9);
  }

  return result;
}

uint64_t sub_100382CA8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100382CD4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_1003AEFD8();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_1003AF000();
  }
  return v2 + 4LL * a2;
}

uint64_t sub_100382D0C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = &off_1007BC4C0;
  if ((a3 & 0x80000000) != 0)
  {
    double v3 = "nc >= 0";
    int v4 = 487;
    uint64_t v5 = "cnmatrix.h";
    int v6 = "CNMatrix";
    goto LABEL_9;
  }

  if (a2 > 3)
  {
    double v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    uint64_t v5 = "cnmatrixbase.h";
    int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }

  if (a3 >= 2)
  {
    double v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }

  *(_DWORD *)(result + std::ostream::~ostream(v1, v2 + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382DC8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100382DD8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_1003A0AEC();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_1003A0B14();
  }
  return *(unsigned int *)(v2 + 4LL * a2);
}

uint64_t sub_100382E14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100382E70(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100382EA0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100382EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100382ECC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x100000006LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_1007BF750;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    unsigned int v9 = "this->max_num_rows_ >= num_rows";
    int v10 = 422;
LABEL_11:
    uint64_t v11 = "cnmatrixbase.h";
    uint64_t v12 = "SetMatrixSize";
    goto LABEL_15;
  }

  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    unsigned int v9 = "this->max_num_cols_ >= num_cols";
    int v10 = 423;
    goto LABEL_11;
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  int v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    unsigned int v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
LABEL_14:
    uint64_t v11 = "cnmatrix.h";
    uint64_t v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }

  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    unsigned int v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
    goto LABEL_14;
  }

  if (v6)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(double *)(*(void *)(a1 + 32) + 8 * v7) = sub_100383000(a2, v7);
      ++v7;
    }

    while (v7 < *(int *)(a1 + 16));
  }

  return a1;
}

void sub_100382FEC(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

double sub_100383000(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_1003AF050();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_1003AF078();
  }
  return *(double *)(v2 + 8LL * a2);
}

void *sub_100383038(void *a1)
{
  *a1 = &off_1007BF948;
  uint64_t v2 = (void *)a1[5];
  a1[5] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  *a1 = off_1007AED90;
  return a1;
}

uint64_t sub_100383080(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000245LL;
  *(void *)a1 = &off_1007BF948;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E11E0;
  sub_100383164(a1);
  *(void *)(a1 + 32) = *(void *)(a1 + 40);
  return a1;
}

void sub_1003830D4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = (void *)v1[5];
  v1[5] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(exception_object);
}

void sub_1003830FC(void *__p)
{
  void *__p = &off_1007BF948;
  uint64_t v2 = (void *)__p[5];
  __p[5] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_100383138(uint64_t a1)
{
  *(void *)(a1 + 32) = *(void *)(a1 + 40);
}

void sub_100383164(uint64_t a1)
{
  uint64_t v2 = operator new[](0x1228uLL);
  bzero(v2, 0x1228uLL);
  unsigned int v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v2;
  if (v3)
  {
    operator delete[](v3);
    if (!*(void *)(a1 + 40)) {
      sub_1003AF0C8();
    }
  }

void sub_1003831B0(uint64_t a1)
{
  uint64_t v2 = operator new[](0x245uLL);
  bzero(v2, 0x245uLL);
  sub_1002CAE0C(a1, (char *)v2, v3);
  operator delete[](v2);
}

void sub_1003831F0(_Unwind_Exception *a1)
{
}

uint64_t sub_100383208(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383214(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double sub_100383260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 != *(_DWORD *)(a1 + 12)) {
    sub_1003AF258();
  }
  if (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) < v5) {
    sub_1003AF0F0();
  }
  if (*(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24) < v5) {
    sub_1003AF118();
  }
  if (*(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24) < 4 * v5) {
    sub_1003AF140();
  }
  if (*(_DWORD *)(a5 + 24) < v5) {
    sub_1003AF168();
  }
  if (*(_DWORD *)(a5 + 28) < v5) {
    sub_1003AF190();
  }
  sub_1002CBDC8(a5, a1);
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  uint64_t v12 = *(unsigned int *)(a5 + 12);
  unint64_t v13 = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v14 = *(_DWORD *)(a5 + 20);
  double v15 = *(void **)(a2 + 32);
  __m[0] = v11;
  __n[0] = v12;
  __CLPK_integer __lda = v14;
  size_t v16 = 4 * v11;
  uint64_t v17 = (__CLPK_integer *)operator new[](4 * v11, &std::nothrow);
  if (!v17) {
    sub_1003AF1B8();
  }
  uint64_t v18 = v17;
  dgetrf_(__m, __n, v13, &__lda, v17, &__info);
  memcpy(v15, v18, v16);
  operator delete[](v18);
  if (__info)
  {
    if (__info >= 1)
    {
      LOWORD(__m[0]) = 4;
      LOBYTE(__n[0]) = 2;
      cnprint::CNPrinter::Print(__m, __n);
      goto LABEL_12;
    }

uint64_t sub_100383650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000003LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DB70;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BF9D8;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 96) = 0x300000001LL;
  *(void *)(a1 + 72) = &off_1007BF828;
  *(_OWORD *)(a1 + 80) = xmmword_10042E860;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = &off_1007BD568;
  *(void *)(a1 + 152) = 0x100000001LL;
  *(void *)&__int128 v7 = 0x100000001LL;
  *((void *)&v7 + 1) = 0x100000001LL;
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 160) = a1 + 168;
  sub_100383808(a1 + 72, a3);
  sub_100383808(a1 + 128, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    __CLPK_integer v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }

  uint64_t v9 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    __CLPK_integer v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    int v10 = 0;
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (uint64_t j = 0LL; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v10 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 104) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 160) + 4 * i));
      }

      v10 += v8;
    }
  }

  return a1;
}

void sub_1003837E0(_Unwind_Exception *a1)
{
  v1[16] = off_1007BC9D8;
  v1[9] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100383808(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 24) < v2) {
      sub_1003A85E0();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(result + 28) < v3) {
      sub_1003A8608();
    }
    *(_DWORD *)(result + std::ostream::~ostream(v1, v2 + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    int v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v9 = (v5 - 1);
      int v10 = *(_DWORD **)(result + 32);
      uint64_t v11 = *(int **)(a2 + 32);
      uint64_t v12 = v9;
      unint64_t v13 = v10;
      __CLPK_integer v14 = v11;
      do
      {
        int v15 = *v14++;
        *v13++ = v15;
        --v12;
      }

      while (v12);
      v10[v9] = v11[v9];
    }

    else if (v4 >= 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }

      while (v6 < *(int *)(result + 16));
    }
  }

  return result;
}

float64x2_t sub_1003838C0(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_1003AF280();
  }
  sub_1002CAEDC((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *(double **)(a1 + 32);
    uint64_t v8 = *(double **)(a2 + 32);
    uint64_t v9 = *(unsigned int *)(a2 + 16);
    do
    {
      double v10 = *v7++;
      *v8++ = v10 * a3;
      --v9;
    }

    while (v9);
    if ((int)v6 > 3)
    {
      __CLPK_integer v14 = *(float64x2_t **)(a1 + 32);
      int v15 = *(float64x2_t **)(a2 + 32);
      size_t v16 = (float64x2_t *)((char *)v14 + 8 * (v6 - 2));
      uint64_t v17 = (float64x2_t *)((char *)v15 + 8 * (v6 - 2));
      uint64_t v18 = (v6 - 1) >> 1;
      do
      {
        float64x2_t v19 = *v14++;
        *v15++ = vmulq_n_f64(v19, a3);
        --v18;
      }

      while (v18);
      float64x2_t result = vmulq_n_f64(*v16, a3);
      *uint64_t v17 = result;
    }

    else
    {
      uint64_t v11 = *(double **)(a1 + 32);
      uint64_t v12 = *(double **)(a2 + 32);
      do
      {
        double v13 = *v11++;
        result.f64[0] = v13 * a3;
        *v12++ = v13 * a3;
        --v6;
      }

      while (v6);
    }
  }

  return result;
}

uint64_t sub_100383998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000003LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DE90;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFA20;
  *(void *)(a1 + sub_1001ACE80(v1 + 112) = a2;
  *(void *)(a1 + 144) = 0x300000001LL;
  *(void *)(a1 + sub_100021DA8(v1 + 120) = &off_1007BF828;
  *(_OWORD *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = xmmword_10042E860;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 176) = &off_1007BF828;
  *(void *)(a1 + 200) = 0x300000001LL;
  *(_OWORD *)(a1 + 184) = xmmword_10042E860;
  *(void *)(a1 + 20std::ostream::~ostream(v1, v2 + 8) = a1 + 216;
  sub_100383808(a1 + 120, a3);
  sub_100383808(a1 + 176, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    double v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 192);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    double v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 152) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 208) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_100383B14(_Unwind_Exception *a1)
{
  v1[22] = off_1007BC9D8;
  v1[15] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

float64x2_t sub_100383B3C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    sub_1003AF2A8();
  }
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v4 < v5) {
    sub_1003AF2D0();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a2 + 28) < v6) {
    sub_1003AF2F8();
  }
  sub_1002CAEDC((_DWORD *)a2, v5, v6);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if ((int)v8 > 3)
  {
    uint64_t v12 = *(float64x2_t **)(a1 + 32);
    double v13 = *(float64x2_t **)(a2 + 32);
    int v14 = (float64x2_t *)((char *)v12 + 8 * (v8 - 2));
    int v15 = (float64x2_t *)((char *)v13 + 8 * (v8 - 2));
    uint64_t v16 = (v8 - 1) >> 1;
    do
    {
      float64x2_t v17 = *v12++;
      *v13++ = vnegq_f64(v17);
      --v16;
    }

    while (v16);
    float64x2_t result = vnegq_f64(*v14);
    *int v15 = result;
  }

  else if ((int)v8 >= 1)
  {
    int v9 = *(double **)(a1 + 32);
    double v10 = *(double **)(a2 + 32);
    do
    {
      double v11 = *v9++;
      result.f64[0] = -v11;
      *v10++ = -v11;
      --v8;
    }

    while (v8);
  }

  return result;
}

uint64_t sub_100383C0C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100383C68(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_100383CC0(char *result, double *a2, char *a3, double *a4, double *a5)
{
  int v14 = result;
  int v15 = a2;
  if (a4 != a2)
  {
    uint64_t v5 = (((uint64_t)a4 - *(void *)a3) >> 3) + ((a3 - result) << 6);
    uint64_t v6 = (uint64_t)a2 - *(void *)result;
    unint64_t v7 = v5 - (v6 >> 3);
    if (v5 != v6 >> 3)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        double v10 = (char *)sub_10036FC60((uint64_t)&v14, v7 >> 1);
        if (*a5 >= *v11)
        {
          uint64_t v12 = v11 + 1;
          if ((double *)((char *)v11 - *(void *)v10 + 8) == (double *)4096)
          {
            double v13 = (double *)*((void *)v10 + 1);
            v10 += 8;
            uint64_t v12 = v13;
          }

          int v14 = v10;
          int v15 = v12;
          unint64_t v9 = v7 + ~v9;
        }

        unint64_t v7 = v9;
      }

      while (v9);
      return v14;
    }
  }

  return result;
}

uint64_t sub_100383D70(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100383DCC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100383E24(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *(_DWORD *)(a1 + 12)) {
    sub_1003AF370();
  }
  if (*(_DWORD *)(a2 + 24) < v3) {
    sub_1003AF320();
  }
  if (*(_DWORD *)(a2 + 28) < v3) {
    sub_1003AF348();
  }
  sub_1002CBDC8(a2, a1);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  unint64_t v7 = *(__CLPK_doublereal **)(a2 + 32);
  __CLPK_integer v8 = *(_DWORD *)(a2 + 20);
  char __uplo = 85;
  __CLPK_integer __lda = v8;
  __CLPK_integer __n = v6;
  uint64_t result = dpotrf_(&__uplo, &__n, v7, &__lda, &__info);
  __CLPK_integer v10 = __info;
  *a3 = __info == 0;
  if (v10)
  {
    LOWORD(__n) = 4;
    if (v10 < 1) {
      LOBYTE(__lda) = 5;
    }
    else {
      LOBYTE(__lda) = 4;
    }
    return cnprint::CNPrinter::Print(&__n, &__lda);
  }

  else if (v6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = *(void *)(a2 + 32);
    unsigned int v13 = v6 - 1;
    int v14 = 1;
    do
    {
      ++v11;
      int v15 = v14;
      unsigned int v16 = v13;
      if (v11 < v6)
      {
        do
        {
          *(void *)(v12 + 8LL * v15++) = 0LL;
          --v16;
        }

        while (v16);
      }

      --v13;
      v14 += v6 + 1;
    }

    while (v11 != v6);
  }

  return result;
}

uint64_t sub_100383F70(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100383F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100383FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0xC0000000CLL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E10F0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFBD0;
  *(void *)(a1 + 1192) = a2;
  uint64_t v7 = a1 + 1200;
  *(void *)(a1 + 1224) = 0xC00000001LL;
  *(void *)(a1 + 1200) = &off_1007BF870;
  *(_OWORD *)(v7 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E11F0;
  *(void *)(a1 + 1232) = a1 + 1240;
  *(void *)(a1 + 1312) = 0xC00000001LL;
  *(void *)(a1 + 128std::ostream::~ostream(v1, v2 + 8) = &off_1007BF870;
  *(_OWORD *)(a1 + 1296) = xmmword_1006E11F0;
  *(void *)(a1 + 1320) = a1 + 1328;
  sub_100383808(v7, a3);
  sub_100383808(a1 + 1288, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 1216);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }

  uint64_t v9 = *(unsigned int *)(a1 + 1304);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    int v10 = 0;
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (uint64_t j = 0LL; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v10 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 1232) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 1320) + 4 * i));
      }

      v10 += v8;
    }
  }

  return a1;
}

void sub_10038414C(_Unwind_Exception *a1)
{
  v1[161] = off_1007BC9D8;
  v1[150] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100384174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0xC00000006LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E10E0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFC18;
  *(void *)(a1 + 616) = a2;
  *(void *)(a1 + 64std::ostream::~ostream(v1, v2 + 8) = 0x600000001LL;
  *(void *)(a1 + 624) = &off_1007BF8B8;
  *(_OWORD *)(a1 + 632) = xmmword_1006E1130;
  *(void *)(a1 + 656) = a1 + 664;
  *(void *)(a1 + 712) = 0xC00000001LL;
  *(void *)(a1 + 68std::ostream::~ostream(v1, v2 + 8) = &off_1007BF870;
  *(_OWORD *)(a1 + 696) = xmmword_1006E11F0;
  *(void *)(a1 + 720) = a1 + 728;
  sub_100383808(a1 + 624, a3);
  sub_100383808(a1 + 688, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 640);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    unsigned int v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 704);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    unsigned int v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 656) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 720) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_100384310(_Unwind_Exception *a1)
{
  v1[86] = off_1007BC9D8;
  v1[78] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100384338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000006LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F10;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFC60;
  *(void *)(a1 + 360) = 0x600000001LL;
  *(void *)(a1 + 32std::ostream::~ostream(v1, v2 + 8) = a2;
  *(void *)(a1 + 336) = &off_1007BF8B8;
  *(_OWORD *)(a1 + 344) = xmmword_1006E1130;
  *(void *)(a1 + 36std::ostream::~ostream(v1, v2 + 8) = a1 + 376;
  *(void *)(a1 + 424) = 0x600000001LL;
  *(void *)(a1 + 400) = &off_1007BF8B8;
  *(_OWORD *)(a1 + 40std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1130;
  *(void *)(a1 + 432) = a1 + 440;
  sub_100383808(a1 + 336, a3);
  sub_100383808(a1 + 400, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    unsigned int v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    unsigned int v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 368) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 432) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_1003844B4(_Unwind_Exception *a1)
{
  v1[50] = off_1007BC9D8;
  v1[42] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

_DWORD *sub_1003844DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a2) {
    sub_1003AF398();
  }
  if (a1 == a3) {
    sub_1003AF3C0();
  }
  if (a1 == a4) {
    sub_1003AF3E8();
  }
  if (a2 == a3) {
    sub_1003AF410();
  }
  if (a2 == a4) {
    sub_1003AF438();
  }
  if (a3 == a4) {
    sub_1003AF460();
  }
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 24) < v8) {
    sub_1003AF488();
  }
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a4 + 28) < v9) {
    sub_1003AF4B0();
  }
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  if (v8 >= v9)
  {
    if (v10 < v9) {
      sub_1003AF578();
    }
  }

  else if (v10 < v8)
  {
    sub_1003AF4D8();
  }

  if (*(_DWORD *)(a3 + 24) < v9) {
    sub_1003AF500();
  }
  if (*(_DWORD *)(a3 + 28) < v9) {
    sub_1003AF528();
  }
  sub_1002CBDC8(a4, a1);
  __CLPK_integer v11 = *(_DWORD *)(a4 + 8);
  uint64_t v12 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer v13 = *(_DWORD *)(a4 + 20);
  int v14 = *(__CLPK_doublereal **)(a2 + 32);
  int v15 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v16 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = *(_DWORD *)(a4 + 12);
  __CLPK_integer __m = v11;
  __CLPK_integer __lwork = v16;
  __CLPK_integer __lda = v13;
  float64x2_t v17 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v12, &__lda, v14, v15, &__lwork, &__info);
  __CLPK_integer v18 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    float64x2_t v17 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v16 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v18) {
    sub_1003AF550();
  }
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12)) {
    int v19 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v19 = *(_DWORD *)(a1 + 8);
  }
  sub_1002CAEDC((_DWORD *)a2, v19, 1);
  uint64_t result = sub_1002CAEDC((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  int v21 = *(_DWORD *)(a4 + 12);
  if (v21)
  {
    unsigned int v22 = 0;
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    uint64_t v24 = *(void *)(a4 + 32);
    unsigned int v25 = v23 - 1;
    int v26 = *(_DWORD *)(a4 + 20) + 1;
    int v27 = 1;
    do
    {
      ++v22;
      int v28 = v27;
      unsigned int v29 = v25;
      if (v22 < v23)
      {
        do
        {
          *(void *)(v24 + 8LL * v28++) = 0LL;
          --v29;
        }

        while (v29);
      }

      --v25;
      v27 += v26;
    }

    while (v22 != v21);
  }

  return result;
}

void *sub_100384720(void *result)
{
  *uint64_t result = off_1007AED90;
  return result;
}

uint64_t sub_100384734(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100384740(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100384790(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10038479C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1003847C0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003847CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100384818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x200000001LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1200;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFD80;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0x200000001LL;
  *(void *)(a1 + 64) = &off_1007BF900;
  *(_OWORD *)(a1 + 72) = xmmword_1006E1200;
  *(void *)(a1 + 96) = a1 + 104;
  sub_100383808(a1 + 64, a3);
  unsigned int v5 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    unsigned int v10 = "this->max_num_rows_ >= num_rows";
    int v11 = 422;
    goto LABEL_9;
  }

  unsigned int v6 = *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    unsigned int v10 = "this->max_num_cols_ >= num_cols";
    int v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
      *(void *)(*(void *)(a1 + 32) + 8 * i) = *(void *)sub_10038494C( a2,  *(_DWORD *)(*(void *)(a1 + 96) + 4 * i));
  }

  return a1;
}

void sub_10038492C(_Unwind_Exception *a1)
{
  v1[8] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_10038494C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_1003AEFD8();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_1003AF000();
  }
  return v2 + 8LL * a2;
}

uint64_t sub_100384988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000001LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1130;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFDC8;
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = a2;
  *(void *)(a1 + sub_100021DA8(v1 + 120) = 0x100000001LL;
  *(void *)(a1 + 96) = &off_1007BD568;
  *(void *)&__int128 v7 = 0x100000001LL;
  *((void *)&v7 + 1) = 0x100000001LL;
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = a1 + 136;
  *(void *)(a1 + 144) = &off_1007BF8B8;
  *(void *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = 0x600000001LL;
  *(_OWORD *)(a1 + 152) = xmmword_1006E1130;
  *(void *)(a1 + 176) = a1 + 184;
  sub_100383808(a1 + 96, a3);
  sub_100383808(a1 + 144, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }

  uint64_t v9 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    int v10 = 0;
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (uint64_t j = 0LL; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v10 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 128) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 176) + 4 * i));
      }

      v10 += v8;
    }
  }

  return a1;
}

void sub_100384B08(_Unwind_Exception *a1)
{
  v1[18] = off_1007BC9D8;
  v1[12] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100384B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000002LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1140;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFE10;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = 0x200000001LL;
  *(void *)(a1 + 144) = &off_1007BF900;
  *(_OWORD *)(a1 + 152) = xmmword_1006E1200;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = &off_1007BF8B8;
  *(void *)(a1 + 216) = 0x600000001LL;
  *(_OWORD *)(a1 + 200) = xmmword_1006E1130;
  *(void *)(a1 + 224) = a1 + 232;
  sub_100383808(a1 + 144, a3);
  sub_100383808(a1 + 192, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    __CLPK_integer v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    __CLPK_integer v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 176) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 224) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_100384CC8(_Unwind_Exception *a1)
{
  v1[24] = off_1007BC9D8;
  v1[18] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100384CF4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100384D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100384D4C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_1003A7FD0();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_1003A7FF8();
  }
  return v2 + 4LL * a2;
}

uint64_t sub_100384D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000006LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F10;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFEA0;
  *(void *)(a1 + 360) = 0x600000001LL;
  *(void *)(a1 + 32std::ostream::~ostream(v1, v2 + 8) = a2;
  *(void *)(a1 + 336) = &off_1007BF8B8;
  *(_OWORD *)(a1 + 344) = xmmword_1006E1130;
  *(void *)(a1 + 36std::ostream::~ostream(v1, v2 + 8) = a1 + 376;
  *(void *)(a1 + 424) = 0x100000006LL;
  *(void *)(a1 + 400) = &off_1007BF798;
  *(_OWORD *)(a1 + 40std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E0F20;
  *(void *)(a1 + 432) = a1 + 440;
  sub_100383808(a1 + 336, a3);
  sub_100383808(a1 + 400, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    __CLPK_integer v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    __CLPK_integer v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 368) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 432) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_100384F18(_Unwind_Exception *a1)
{
  v1[50] = off_1007BC9D8;
  v1[42] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100384F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000003LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1120;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFEE8;
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + 216) = 0x300000001LL;
  *(void *)(a1 + 192) = &off_1007BF828;
  *(_OWORD *)(a1 + 200) = xmmword_10042E860;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 24std::ostream::~ostream(v1, v2 + 8) = &off_1007BF798;
  *(void *)(a1 + 272) = 0x100000006LL;
  *(_OWORD *)(a1 + 256) = xmmword_1006E0F20;
  *(void *)(a1 + 280) = a1 + 288;
  sub_100383808(a1 + 192, a3);
  sub_100383808(a1 + 248, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    __CLPK_integer v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 264);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    __CLPK_integer v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 224) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 280) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_1003850D8(_Unwind_Exception *a1)
{
  v1[31] = off_1007BC9D8;
  v1[24] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100385104(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385110(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10038515C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000001LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042E860;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007BFF78;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 96) = 0x300000001LL;
  *(void *)(a1 + 72) = &off_1007BF828;
  *(_OWORD *)(a1 + 80) = xmmword_10042E860;
  *(void *)(a1 + 104) = a1 + 112;
  sub_100383808(a1 + 72, a3);
  unsigned int v5 = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    int v10 = "this->max_num_rows_ >= num_rows";
    int v11 = 422;
    goto LABEL_9;
  }

  unsigned int v6 = *(_DWORD *)(a1 + 84);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    int v10 = "this->max_num_cols_ >= num_cols";
    int v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
      *(void *)(*(void *)(a1 + 32) + 8 * i) = *(void *)sub_10038494C( a2,  *(_DWORD *)(*(void *)(a1 + 104) + 4 * i));
  }

  return a1;
}

void sub_100385270(_Unwind_Exception *a1)
{
  v1[9] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100385298(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003852A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

_DWORD *sub_1003852F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == a2) {
    sub_1003AF5A0();
  }
  if (a1 == a3) {
    sub_1003AF5C8();
  }
  if (a1 == a4) {
    sub_1003AF5F0();
  }
  if (a1 == a5) {
    sub_1003AF618();
  }
  if (a2 == a3) {
    sub_1003AF640();
  }
  if (a2 == a4) {
    sub_1003AF668();
  }
  if (a2 == a5) {
    sub_1003AF690();
  }
  if (a3 == a4) {
    sub_1003AF6B8();
  }
  if (a3 == a5) {
    sub_1003AF6E0();
  }
  if (a4 == a5) {
    sub_1003AF708();
  }
  unsigned int v10 = *(_DWORD *)(a4 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  if (v10 < v11) {
    sub_1003AF730();
  }
  unsigned int v12 = *(_DWORD *)(a1 + 12);
  if (v10 < v12) {
    sub_1003AF758();
  }
  unsigned int v13 = *(_DWORD *)(a4 + 28);
  if (v13 < v11) {
    sub_1003AF780();
  }
  if (v13 < v12) {
    sub_1003AF7A8();
  }
  if (*(_DWORD *)(a5 + 24) < v11) {
    sub_1003AF7D0();
  }
  if (*(_DWORD *)(a5 + 28) < v12) {
    sub_1003AF7F8();
  }
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  if (v11 >= v12)
  {
    if (v14 < v12) {
      sub_1003AF8E8();
    }
  }

  else if (v14 < v11)
  {
    sub_1003AF820();
  }

  if (*(_DWORD *)(a3 + 24) < v12) {
    sub_1003AF848();
  }
  if (*(_DWORD *)(a3 + 28) < v12) {
    sub_1003AF870();
  }
  sub_1002CBDC8(a5, a1);
  __CLPK_integer v15 = *(_DWORD *)(a5 + 8);
  __CLPK_integer v16 = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v17 = *(_DWORD *)(a5 + 20);
  __CLPK_integer v18 = *(__CLPK_doublereal **)(a2 + 32);
  int v19 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v20 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = *(_DWORD *)(a5 + 12);
  __CLPK_integer __m = v15;
  __CLPK_integer __lwork = v20;
  __CLPK_integer __lda = v17;
  __tau = v18;
  int v21 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v16, &__lda, v18, v19, &__lwork, &__info);
  __CLPK_integer v22 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    int v21 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v20 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v21) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v22) {
    sub_1003AF8C0();
  }
  sub_1002CBDC8(a4, a5);
  unsigned int v23 = *(_DWORD *)(a1 + 8);
  unsigned int v24 = *(_DWORD *)(a1 + 12);
  if (v24 >= v23) {
    unsigned int v24 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v25 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer __n = *(_DWORD *)(a1 + 8);
  __CLPK_integer __m = v23;
  __CLPK_integer __lwork = v17;
  __CLPK_integer __lda = v24;
  __CLPK_integer __info = v20;
  int v26 = (cnprint::CNPrinter *)dorgqr_(&__m, &__n, &__lda, v25, &__lwork, __tau, v19, &__info, &v40);
  __CLPK_integer v27 = v40;
  if (v40)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    int v26 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v20 < (int)**(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v26) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }

  if (v27) {
    sub_1003AF898();
  }
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12)) {
    int v28 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v28 = *(_DWORD *)(a1 + 8);
  }
  sub_1002CAEDC((_DWORD *)a2, v28, 1);
  sub_1002CAEDC((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  uint64_t result = sub_1002CAEDC((_DWORD *)a4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8));
  int v30 = *(_DWORD *)(a5 + 12);
  if (v30)
  {
    unsigned int v31 = 0;
    unsigned int v32 = *(_DWORD *)(a5 + 8);
    uint64_t v33 = *(void *)(a5 + 32);
    unsigned int v34 = v32 - 1;
    int v35 = *(_DWORD *)(a5 + 20) + 1;
    int v36 = 1;
    do
    {
      ++v31;
      int v37 = v36;
      unsigned int v38 = v34;
      if (v31 < v32)
      {
        do
        {
          *(void *)(v33 + 8LL * v37++) = 0LL;
          --v38;
        }

        while (v38);
      }

      --v34;
      v36 += v35;
    }

    while (v31 != v30);
  }

  return result;
}

uint64_t sub_100385694(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000006LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_1007BF750;
  if ((a3 & 0x80000000) != 0)
  {
    unsigned int v3 = "nc >= 0";
    int v4 = 487;
    unsigned int v5 = "cnmatrix.h";
    unsigned int v6 = "CNMatrix";
    goto LABEL_9;
  }

  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    unsigned int v5 = "cnmatrixbase.h";
    unsigned int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }

  if (a3 >= 2)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }

  *(_DWORD *)(result + std::ostream::~ostream(v1, v2 + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385750(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100385764(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385770(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1003857BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000001LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1130;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007C0050;
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = a2;
  *(void *)(a1 + 96) = &off_1007BD568;
  *(void *)(a1 + sub_100021DA8(v1 + 120) = 0x100000001LL;
  *(void *)&__int128 v7 = 0x100000001LL;
  *((void *)&v7 + 1) = 0x100000001LL;
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = a1 + 136;
  *(void *)(a1 + 144) = &off_1007BF798;
  *(void *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = 0x100000006LL;
  *(_OWORD *)(a1 + 152) = xmmword_1006E0F20;
  *(void *)(a1 + 176) = a1 + 184;
  sub_100383808(a1 + 96, a3);
  sub_100383808(a1 + 144, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    unsigned int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }

  uint64_t v9 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    unsigned int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    int v10 = 0;
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (uint64_t j = 0LL; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v10 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 128) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 176) + 4 * i));
      }

      v10 += v8;
    }
  }

  return a1;
}

void sub_10038594C(_Unwind_Exception *a1)
{
  v1[18] = off_1007BC9D8;
  v1[12] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100385978(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385984(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1003859A8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003859B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_100385A00(void *result)
{
  *uint64_t result = off_1007BC9D8;
  return result;
}

uint64_t sub_100385A14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100385A44(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100385AA0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100385AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000002LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_1006E1140;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &off_1007C0200;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 16std::ostream::~ostream(v1, v2 + 8) = 0x200000001LL;
  *(void *)(a1 + 144) = &off_1007BF900;
  *(_OWORD *)(a1 + 152) = xmmword_1006E1200;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = &off_1007BF798;
  *(void *)(a1 + 216) = 0x100000006LL;
  *(_OWORD *)(a1 + 200) = xmmword_1006E0F20;
  *(void *)(a1 + 224) = a1 + 232;
  sub_100383808(a1 + 144, a3);
  sub_100383808(a1 + 192, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v7)
  {
    unsigned int v13 = "this->max_num_rows_ >= num_rows";
    int v14 = 422;
    goto LABEL_12;
  }

  uint64_t v8 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v8)
  {
    unsigned int v13 = "this->max_num_cols_ >= num_cols";
    int v14 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v14, v13);
  }

  *(_DWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    int v9 = 0;
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((_DWORD)v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
          *(void *)(*(void *)(a1 + 32) + 8LL * (v9 + j)) = *(void *)sub_100304F3C( a2,  *(_DWORD *)(*(void *)(a1 + 176) + 4 * j),  *(_DWORD *)(*(void *)(a1 + 224) + 4 * i));
      }

      v9 += v7;
    }
  }

  return a1;
}

void sub_100385C90(_Unwind_Exception *a1)
{
  v1[24] = off_1007BC9D8;
  v1[18] = off_1007BC9D8;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100385CBC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100385CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100385D14(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100385D1C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100385D24(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100385D2C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

double sub_100385D34(uint64_t a1, int a2)
{
  return sub_10024061C(a1, a2, 0);
}

std::string *sub_100385D3C( std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10037E754(a1, (std::string *)&a10);
}

uint64_t sub_100385D48()
{
  __n128 v0 = sub_1003874F0((uint64_t)v11, &xmmword_1006E1210, &xmmword_1006E1228, &xmmword_1006E1240);
  sub_100387634(&unk_100800910, v11, v0);
  __cxa_atexit((void (*)(void *))sub_100376C44, &unk_100800910, (void *)&_mh_execute_header);
  qword_1008009E8 = 0x300000003LL;
  qword_1008009D0 = (uint64_t)&off_1007BC508;
  unk_1008009D8 = xmmword_10042DE90;
  qword_1008009F0 = (uint64_t)&unk_1008009F8;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_1008009D0, (void *)&_mh_execute_header);
  qword_100800A58 = 0x300000003LL;
  qword_100800A40 = (uint64_t)&off_1007BC508;
  unk_100800A48 = xmmword_10042DE90;
  qword_100800A60 = (uint64_t)&unk_100800A68;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800A40, (void *)&_mh_execute_header);
  qword_100800AC8 = 0x300000003LL;
  qword_100800AB0 = (uint64_t)&off_1007BC508;
  unk_100800AB8 = xmmword_10042DE90;
  qword_100800AD0 = (uint64_t)&unk_100800AD8;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800AB0, (void *)&_mh_execute_header);
  qword_100800B38 = 0x300000003LL;
  qword_100800B20 = (uint64_t)&off_1007BC508;
  unk_100800B28 = xmmword_10042DE90;
  qword_100800B40 = (uint64_t)&unk_100800B48;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800B20, (void *)&_mh_execute_header);
  qword_100800BA8 = 0x300000003LL;
  qword_100800B90 = (uint64_t)&off_1007BC508;
  unk_100800B98 = xmmword_10042DE90;
  qword_100800BB0 = (uint64_t)algn_100800BB8;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800B90, (void *)&_mh_execute_header);
  qword_100800C18 = 0x300000003LL;
  qword_100800C00 = (uint64_t)&off_1007BC508;
  unk_100800C08 = xmmword_10042DE90;
  qword_100800C20 = (uint64_t)&unk_100800C28;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800C00, (void *)&_mh_execute_header);
  qword_100800C88 = 0x300000003LL;
  qword_100800C70 = (uint64_t)&off_1007BC508;
  unk_100800C78 = xmmword_10042DE90;
  qword_100800C90 = (uint64_t)&unk_100800C98;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800C70, (void *)&_mh_execute_header);
  qword_100800CF8 = 0x300000003LL;
  qword_100800CE0 = (uint64_t)&off_1007BC508;
  unk_100800CE8 = xmmword_10042DE90;
  qword_100800D00 = (uint64_t)&unk_100800D08;
  __cxa_atexit((void (*)(void *))sub_1002C9684, &qword_100800CE0, (void *)&_mh_execute_header);
  qword_1007FFD68 = 0x40F86A0000000000LL;
  qword_1007FFD88 = 0xC00000001LL;
  qword_1007FFD70[0] = (uint64_t)&off_1007BF870;
  unk_1007FFD78 = xmmword_1006E11F0;
  qword_1007FFD90 = (uint64_t)&unk_1007FFD98;
  sub_1002CAEDC(qword_1007FFD70, 1, 12);
  for (unsigned int i = 0; i != 12; ++i)
    *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFD70, i) = i;
  __cxa_atexit((void (*)(void *))sub_100376C5C, qword_1007FFD70, (void *)&_mh_execute_header);
  qword_1007FFDE0 = 0x600000001LL;
  qword_1007FFDC8 = (uint64_t)&off_1007BF8B8;
  *(_OWORD *)algn_1007FFDD0 = xmmword_1006E1130;
  qword_1007FFDE8 = (uint64_t)&unk_1007FFDF0;
  sub_1002CAEDC(&qword_1007FFDC8, 1, 6);
  for (unsigned int j = 0; j != 6; ++j)
    *(_DWORD *)sub_100382CD4((uint64_t)&qword_1007FFDC8, j) = j;
  __cxa_atexit((void (*)(void *))sub_100376C6C, &qword_1007FFDC8, (void *)&_mh_execute_header);
  qword_1007FFE20 = 0x300000001LL;
  qword_1007FFE08 = (uint64_t)&off_1007BF828;
  *(_OWORD *)algn_1007FFE10 = xmmword_10042E860;
  qword_1007FFE28 = (uint64_t)algn_1007FFE30;
  sub_1002CAEDC(&qword_1007FFE08, 1, 3);
  for (unsigned int k = 0; k != 3; ++k)
    *(_DWORD *)sub_100382CD4((uint64_t)&qword_1007FFE08, k) = k + 6;
  __cxa_atexit((void (*)(void *))sub_100376C7C, &qword_1007FFE08, (void *)&_mh_execute_header);
  qword_1007FFE58 = 0x200000001LL;
  qword_1007FFE40[0] = (uint64_t)&off_1007BF900;
  unk_1007FFE48 = xmmword_1006E1200;
  qword_1007FFE60 = (uint64_t)algn_1007FFE68;
  sub_1002CAEDC(qword_1007FFE40, 1, 2);
  *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFE40, 0) = 6;
  *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFE40, 1u) = 7;
  __cxa_atexit((void (*)(void *))sub_100376C8C, qword_1007FFE40, (void *)&_mh_execute_header);
  qword_1007FFE88 = 0x600000001LL;
  qword_1007FFE70[0] = (uint64_t)&off_1007BF8B8;
  unk_1007FFE78 = xmmword_1006E1130;
  qword_1007FFE90 = (uint64_t)&unk_1007FFE98;
  sub_1002CAEDC(qword_1007FFE70, 1, 6);
  for (unsigned int m = 0; m != 6; ++m)
    *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFE70, m) = m + 12;
  __cxa_atexit((void (*)(void *))sub_100376C6C, qword_1007FFE70, (void *)&_mh_execute_header);
  qword_1007FFEC8 = 0x200000001LL;
  qword_1007FFEB0[0] = (uint64_t)&off_1007BF900;
  unk_1007FFEB8 = xmmword_1006E1200;
  qword_1007FFED0 = (uint64_t)algn_1007FFED8;
  sub_1002CAEDC(qword_1007FFEB0, 1, 2);
  *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFEB0, 0) = 1;
  *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFEB0, 1u) = 2;
  __cxa_atexit((void (*)(void *))sub_100376C8C, qword_1007FFEB0, (void *)&_mh_execute_header);
  qword_1007FFEF8 = 0x300000001LL;
  qword_1007FFEE0[0] = (uint64_t)&off_1007BF828;
  unk_1007FFEE8 = xmmword_10042E860;
  qword_1007FFF00 = (uint64_t)&unk_1007FFF08;
  sub_1002CAEDC(qword_1007FFEE0, 1, 3);
  for (unsigned int n = 0; n != 3; ++n)
    *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFEE0, n) = n;
  __cxa_atexit((void (*)(void *))sub_100376C7C, qword_1007FFEE0, (void *)&_mh_execute_header);
  qword_1007FFF30 = 0x300000001LL;
  qword_1007FFF18[0] = (uint64_t)&off_1007BF828;
  unk_1007FFF20 = xmmword_10042E860;
  qword_1007FFF38 = (uint64_t)&unk_1007FFF40;
  sub_1002CAEDC(qword_1007FFF18, 1, 3);
  for (iunsigned int i = 0; ii != 3; ++ii)
    *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFF18, ii) = ii + 3;
  __cxa_atexit((void (*)(void *))sub_100376C7C, qword_1007FFF18, (void *)&_mh_execute_header);
  qword_1007FFF68 = 0x300000001LL;
  qword_1007FFF50[0] = (uint64_t)&off_1007BF828;
  unk_1007FFF58 = xmmword_10042E860;
  qword_1007FFF70 = (uint64_t)&unk_1007FFF78;
  sub_1002CAEDC(qword_1007FFF50, 1, 3);
  for (junsigned int j = 0; jj != 3; ++jj)
    *(_DWORD *)sub_100382CD4((uint64_t)qword_1007FFF50, jj) = jj + 6;
  __cxa_atexit((void (*)(void *))sub_100376C7C, qword_1007FFF50, (void *)&_mh_execute_header);
  qword_1007FFFA0 = 0x300000001LL;
  qword_1007FFF88 = (uint64_t)&off_1007BF828;
  *(_OWORD *)algn_1007FFF90 = xmmword_10042E860;
  qword_1007FFFA8 = (uint64_t)algn_1007FFFB0;
  sub_1002CAEDC(&qword_1007FFF88, 1, 3);
  for (kunsigned int k = 0; kk != 3; ++kk)
    *(_DWORD *)sub_100382CD4((uint64_t)&qword_1007FFF88, kk) = kk + 9;
  __cxa_atexit((void (*)(void *))sub_100376C7C, &qword_1007FFF88, (void *)&_mh_execute_header);
  qword_1007FFFD8 = 0x300000003LL;
  qword_1007FFFC0[0] = (uint64_t)&off_1007BC508;
  unk_1007FFFC8 = xmmword_10042DE90;
  qword_1007FFFE0 = (uint64_t)&unk_1007FFFE8;
  sub_1002CAEDC(qword_1007FFFC0, 3, 3);
  sub_1002CAF28((uint64_t)qword_1007FFFC0, 0.0);
  for (munsigned int m = 0; mm != 3; ++mm)
    *(void *)sub_100304F3C((uint64_t)qword_1007FFFC0, mm, mm) = 0x3FF0000000000000LL;
  __cxa_atexit((void (*)(void *))sub_1002C9684, qword_1007FFFC0, (void *)&_mh_execute_header);
  qword_100800048 = 0x300000003LL;
  qword_100800030[0] = (uint64_t)&off_1007BC508;
  unk_100800038 = xmmword_10042DE90;
  qword_100800050 = (uint64_t)&unk_100800058;
  sub_1002CAEDC(qword_100800030, 3, 3);
  sub_1002CAF28((uint64_t)qword_100800030, 0.0);
  return __cxa_atexit((void (*)(void *))sub_1002C9684, qword_100800030, (void *)&_mh_execute_header);
}

void sub_10038652C(_Unwind_Exception *a1)
{
  qword_1007FFF88 = (uint64_t)off_1007BC9D8;
  _Unwind_Resume(a1);
}

void *sub_100386648@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007C0280)[a1]);
}

void *sub_10038665C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007C02D8)[a1]);
}

void *sub_100386670@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007C0320)[a1]);
}

void *sub_100386684@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007C0340)[a1]);
}

uint64_t sub_100386698@<X0>(double *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  for (uint64_t i = 0LL; i != 3; ++i)
    *(double *)&v7[i * 8] = a1[i + 3] * -9.80665;
  return sub_100387468(a2, v7, a1 + 6, a1 + 9, a1 + 13, a1 + 16, a3, *a1);
}

void sub_100386700(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  v40[0] = a3;
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  int v5 = *(unsigned __int8 *)(a1 + 368);
  if (v5 == 5)
  {
    char v39 = 1;
  }

  else if (v5 == 9)
  {
    char v39 = 0;
  }

  int v36 = 0LL;
  int v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v6 != v7)
  {
    uint64_t v8 = (char *)(a1 + 72);
    while (1)
    {
      if (*(_BYTE *)(a1 + 528) && *(_BYTE *)(v6 + 32) && *(_BYTE *)(v6 + 48))
      {
        uint64_t v34 = *(void *)(a1 + 64);
        double v35 = 0.0;
        __int16 v33 = *(_WORD *)(a1 + 112);
        char v32 = *(_BYTE *)(a1 + 114);
        std::string __p = 0LL;
        int v30 = 0LL;
        uint64_t v31 = 0LL;
        sub_100030B3C(&__p, (const void *)(a1 + 115), a1 + 123, 8uLL);
        double v28 = *(double *)(a1 + 304);
        double v27 = sub_100026A04(*(double *)(v6 + 8));
        double v26 = sub_100026A04(*(double *)v6);
        double v25 = 0.2;
        if (!*(_BYTE *)(v6 + 48)) {
          sub_100006080();
        }
        double v24 = sub_100026A04(*(double *)(v6 + 40));
        if (!*(_BYTE *)(v6 + 32)) {
          sub_100006080();
        }
        double v9 = sub_100026A04(*(double *)(v6 + 24));
        double v23 = v9;
        uint64_t v10 = *(void *)(a1 + 536);
        uint64_t v11 = *(void *)(a1 + 544);
        v22[0] = v10;
        v22[1] = v11;
        char v12 = *(_BYTE *)(a1 + 368);
        char v21 = v12;
        unint64_t v13 = a2[1];
        if (v13 >= a2[2])
        {
          uint64_t v17 = sub_100386B14( a2,  &v34,  &v33,  &v32,  (uint64_t)&__p,  v40,  &v28,  &v27,  &v26,  &v25,  &v24,  &v23,  &v35,  v22,  (uint64_t)&v36,  &v21,  &v39);
          goto LABEL_19;
        }

        sub_100386D5C( v13,  v34,  v33,  v32,  (uint64_t)&__p,  v10,  v11,  (uint64_t)&v36,  v40[0],  v28,  v27,  v26,  v25,  v24,  v9,  v35,  v12,  v39);
      }

      else
      {
        v22[0] = *(void *)(a1 + 64);
        LOWORD(v26) = *(_WORD *)(a1 + 112);
        LOBYTE(v25) = *(_BYTE *)(a1 + 114);
        std::string __p = 0LL;
        int v30 = 0LL;
        uint64_t v31 = 0LL;
        sub_100030B3C(&__p, (const void *)(a1 + 115), a1 + 123, 8uLL);
        double v14 = *(double *)(a1 + 48);
        uint64_t v34 = *(void *)(a1 + 304);
        double v35 = v14;
        double v28 = sub_100026A04(*(double *)(v6 + 8));
        double v15 = sub_100026A04(*(double *)v6);
        double v27 = v15;
        char v16 = *(_BYTE *)(a1 + 368);
        LOBYTE(v24) = v16;
        unint64_t v13 = a2[1];
        if (v13 >= a2[2])
        {
          uint64_t v17 = sub_1003870C4( a2,  v22,  (__int16 *)&v26,  (char *)&v25,  (uint64_t)&__p,  &v35,  (double *)&v34,  &v28,  &v27,  (uint64_t)&unk_10043072D,  (uint64_t)&v36,  (char *)&v24,  &v39);
          goto LABEL_19;
        }

        sub_100386D5C( v13,  v22[0],  SLOWORD(v26),  SLOBYTE(v25),  (uint64_t)&__p,  0LL,  0LL,  (uint64_t)&v36,  v35,  *(double *)&v34,  v28,  v15,  0.1,  0.174532925,  0.174532925,  0.0,  v16,  v39);
      }

      uint64_t v17 = v13 + 152;
      a2[1] = v13 + 152;
LABEL_19:
      a2[1] = v17;
      if (__p)
      {
        int v30 = __p;
        operator delete(__p);
      }

      __CLPK_integer v18 = *(char **)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 80);
      if (v18 != (char *)v19)
      {
        __CLPK_integer v20 = (char *)(a2[1] - 32);
        if (v20 != v8) {
          sub_1001252EC(v20, v18, v19, (v19 - (uint64_t)v18) >> 3);
        }
      }

      v6 += 56LL;
      if (v6 == v7)
      {
        if (v36)
        {
          int v37 = v36;
          operator delete(v36);
        }

        return;
      }
    }
  }

void sub_100386A98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  *(void *)(v28 + std::ostream::~ostream(v1, v2 + 8) = v29;
  if (__p) {
    operator delete(__p);
  }
  char v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }

  *(void *)(v30 - 144) = v28;
  sub_100131B5C((void ***)(v30 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_100386B14( uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, uint64_t *a14, uint64_t a15, char *a16, char *a17)
{
  unint64_t v18 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v19 = v18 + 1;
  if (v18 + 1 > 0x1AF286BCA1AF286LL) {
    sub_10001E11C();
  }
  double v23 = a4;
  double v27 = a16;
  double v26 = a17;
  uint64_t v29 = a14;
  uint64_t v28 = a15;
  uint64_t v31 = a12;
  uint64_t v30 = a13;
  __int16 v33 = a10;
  char v32 = a11;
  uint64_t v34 = a9;
  uint64_t v35 = (uint64_t)(a1 + 2);
  if (0xD79435E50D79436LL * ((a1[2] - *a1) >> 3) > v19) {
    unint64_t v19 = 0xD79435E50D79436LL * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943LL) {
    unint64_t v36 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v36 = v19;
  }
  uint64_t v49 = a1 + 2;
  if (v36)
  {
    int v37 = a6;
    uint64_t v44 = a5;
    unint64_t v43 = v18;
    char v39 = a8;
    __CLPK_integer v40 = (char *)sub_1001307C0((uint64_t)(a1 + 2), v36);
    uint64_t v30 = a13;
    uint64_t v29 = a14;
    double v27 = a16;
    uint64_t v28 = a15;
    double v26 = a17;
    uint64_t v31 = a12;
    a5 = v44;
    a8 = v39;
    unint64_t v18 = v43;
    double v23 = a4;
    uint64_t v34 = a9;
    __int16 v33 = a10;
    a6 = v37;
    char v32 = a11;
  }

  else
  {
    __CLPK_integer v40 = 0LL;
  }

  __int128 v45 = v40;
  uint64_t v46 = &v40[152 * v18];
  __int128 v48 = &v40[152 * v36];
  sub_100386CF4(v35, (uint64_t)v46, a2, a3, v23, a5, a6, a7, a8, v34, v33, v32, v31, v30, v29, v28, v27, v26);
  uint64_t v47 = v46 + 152;
  sub_100386E5C(a1, &v45);
  uint64_t v41 = a1[1];
  sub_100387050(&v45);
  return v41;
}

void sub_100386CE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100386CF4( uint64_t a1, uint64_t a2, uint64_t *a3, __int16 *a4, char *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, uint64_t *a15, uint64_t a16, char *a17, char *a18)
{
  return sub_100386D5C( a2,  *a3,  *a4,  *a5,  a6,  *a15,  a15[1],  a16,  *a7,  *a8,  *a9,  *a10,  *a11,  *a12,  *a13,  *a14,  *a17,  *a18);
}

uint64_t sub_100386D5C( uint64_t a1, uint64_t a2, __int16 a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, char a18)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = a3;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 10) = a4;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_1001309C0((void *)(a1 + 16), *(const void **)a5, *(void *)(a5 + 8), *(void *)(a5 + 8) - *(void *)a5);
  *(void *)(a1 + sub_100021DA8(v1 + 120) = 0LL;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = a10;
  *(double *)(a1 + 56) = a13;
  *(double *)(a1 + 64) = a11;
  *(double *)(a1 + 72) = a12;
  *(double *)(a1 + 80) = a14;
  *(double *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = a15;
  *(double *)(a1 + 96) = a16;
  *(void *)(a1 + 104) = a6;
  *(void *)(a1 + sub_1001ACE80(v1 + 112) = a7;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  sub_10011B560( (void *)(a1 + 120),  *(const void **)a8,  *(void *)(a8 + 8),  (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 3);
  *(_BYTE *)(a1 + 144) = a17;
  *(_BYTE *)(a1 + 145) = a18;
  return a1;
}

void sub_100386E40(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100386E5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100386ED0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100386ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v17 = a6;
  *((void *)&v17 + 1) = a7;
  __int128 v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }

  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 152);
      a3 -= 152LL;
      *(_DWORD *)(v7 - 145) = *(_DWORD *)(a3 + 7);
      *(void *)(v7 - 152) = v8;
      *(void *)(v7 - 12std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(v7 - sub_100021DA8(v1 + 120) = 0LL;
      *(void *)(v7 - 136) = 0LL;
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - sub_100021DA8(v1 + 120) = *(void *)(a3 + 32);
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 32) = 0LL;
      *(void *)(a3 + 16) = 0LL;
      __int128 v9 = *(_OWORD *)(a3 + 56);
      __int128 v10 = *(_OWORD *)(a3 + 72);
      __int128 v11 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 55) = *(_OWORD *)(a3 + 97);
      *(_OWORD *)(v7 - 80) = v10;
      *(_OWORD *)(v7 - 64) = v11;
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - sub_1001ACE80(v1 + 112) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 32) = 0LL;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 120);
      *(void *)(v7 - 16) = *(void *)(a3 + 136);
      *(void *)(a3 + sub_100021DA8(v1 + 120) = 0LL;
      *(void *)(a3 + 12std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(a3 + 136) = 0LL;
      *(_WORD *)(v7 - std::ostream::~ostream(v1, v2 + 8) = *(_WORD *)(a3 + 144);
      uint64_t v7 = *((void *)&v17 + 1) - 152LL;
      *((void *)&v17 + 1) -= 152LL;
    }

    while (a3 != a5);
    uint64_t v12 = v17;
  }

  char v15 = 1;
  sub_100386FCC((uint64_t)v14);
  return v12;
}

uint64_t sub_100386FCC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100387000((uint64_t *)a1);
  }
  return a1;
}

void sub_100387000(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100131BE0(v3, v1);
      v1 += 19;
    }

    while (v1 != v2);
  }

void **sub_100387050(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100387080(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_100131BE0(v4, (void *)(i - 152));
  }

uint64_t sub_1003870C4( uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, uint64_t a10, uint64_t a11, char *a12, char *a13)
{
  uint64_t v14 = *a1;
  unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v16 = v15 + 1;
  if (v15 + 1 > 0x1AF286BCA1AF286LL) {
    sub_10001E11C();
  }
  __CLPK_integer v22 = a12;
  double v23 = a9;
  uint64_t v24 = (uint64_t)(a1 + 2);
  unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v14) >> 3);
  if (2 * v25 > v16) {
    unint64_t v16 = 2 * v25;
  }
  if (v25 >= 0xD79435E50D7943LL) {
    unint64_t v26 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v26 = v16;
  }
  unint64_t v36 = a1 + 2;
  if (v26)
  {
    uint64_t v27 = a5;
    uint64_t v31 = a3;
    uint64_t v28 = (char *)sub_1001307C0(v24, v26);
    double v23 = a9;
    a3 = v31;
    __CLPK_integer v22 = a12;
    a5 = v27;
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  char v32 = v28;
  __int16 v33 = &v28[152 * v15];
  uint64_t v34 = (uint64_t)v33;
  uint64_t v35 = &v28[152 * v26];
  sub_100386D5C( (uint64_t)v33,  *a2,  *a3,  *a4,  a5,  0LL,  0LL,  a11,  *a6,  *a7,  *a8,  *v23,  0.1,  0.174532925,  0.174532925,  0.0,  *v22,  *a13);
  uint64_t v34 = (uint64_t)(v33 + 152);
  sub_100386E5C(a1, &v32);
  uint64_t v29 = a1[1];
  sub_100387050(&v32);
  return v29;
}

void sub_100387274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

double *sub_100387288( double *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, double a7, double a8)
{
  *a1 = 0.0;
  a1[1] = 0.0;
  uint64_t v23 = 0LL;
  sub_100120600((void *)a1 + 2, 3uLL, &v23);
  uint64_t v23 = 0LL;
  sub_100120600((void *)a1 + 5, 3uLL, &v23);
  uint64_t v23 = 0LL;
  sub_100120600((void *)a1 + 8, 4uLL, &v23);
  uint64_t v23 = 0LL;
  sub_100120600((void *)a1 + 11, 3uLL, &v23);
  uint64_t v23 = 0LL;
  sub_100120600((void *)a1 + 14, 3uLL, &v23);
  uint64_t v16 = 0LL;
  a1[17] = 0.0;
  a1[18] = 0.0;
  a1[19] = 0.0;
  *a1 = a7;
  a1[1] = a8;
  __int128 v17 = (void *)*((void *)a1 + 2);
  *__int128 v17 = *a2;
  v17[1] = a2[1];
  void v17[2] = a2[2];
  unint64_t v18 = (void *)*((void *)a1 + 5);
  void *v18 = *a3;
  v18[1] = a3[1];
  _OWORD v18[2] = a3[2];
  uint64_t v19 = *((void *)a1 + 8);
  do
  {
    *(void *)(v19 + v16) = *(void *)(a4 + v16);
    v16 += 8LL;
  }

  while (v16 != 32);
  __CLPK_integer v20 = (void *)*((void *)a1 + 11);
  void *v20 = *a5;
  v20[1] = a5[1];
  void v20[2] = a5[2];
  char v21 = (void *)*((void *)a1 + 14);
  *char v21 = *a6;
  v21[1] = a6[1];
  void v21[2] = a6[2];
  return a1;
}

void sub_100387404(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
  }

  uint64_t v8 = *v4;
  if (*v4)
  {
    v1[9] = v8;
    operator delete(v8);
  }

  __int128 v9 = *v3;
  if (*v3)
  {
    v1[6] = v9;
    operator delete(v9);
  }

  __int128 v10 = *v2;
  if (*v2)
  {
    v1[3] = v10;
    operator delete(v10);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10038746C(void *a1)
{
  uint64_t v1 = 0LL;
  LOBYTE(sub_1001ACE3C(v1, v2) = 1;
  do
  {
    BOOL v2 = v2 && *(double *)(a1[2] + v1) == 0.0 && *(double *)(a1[5] + v1) == 0.0;
    v1 += 8LL;
  }

  while (v1 != 24);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  LOBYTE(v4) = 1;
  do
  {
    BOOL v4 = v4 && *(double *)(a1[8] + v3) == 0.0;
    v3 += 8LL;
  }

  while (v3 != 32);
  return !v4;
}

__n128 sub_1003874F0(uint64_t a1, __int128 *a2, __int128 *a3, __n128 *a4)
{
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  __int128 v5 = *a3;
  *(void *)(a1 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  __n128 result = *a4;
  *(void *)(a1 + 64) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

uint64_t sub_100387534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  *(void *)a1 = &off_1007BC4C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 64) = &off_1007BC4C0;
  uint64_t v5 = a1 + 64;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 12std::ostream::~ostream(v1, v2 + 8) = &off_1007BC4C0;
  uint64_t v6 = a1 + 128;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 24) = 0x100000003LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = xmmword_10042DB70;
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0x100000003LL;
  *(_OWORD *)(a1 + 72) = xmmword_10042DB70;
  *(void *)(a1 + 152) = 0x100000003LL;
  *(_OWORD *)(a1 + 136) = xmmword_10042DB70;
  do
  {
    uint64_t v7 = *(void *)(a2 + 8 * v4);
    *(void *)sub_1002CB32C(a1, v4) = v7;
    uint64_t v8 = a2 + 8 * v4;
    uint64_t v9 = *(void *)(v8 + 24);
    *(void *)sub_1002CB32C(v5, v4) = v9;
    uint64_t v10 = *(void *)(v8 + 48);
    *(void *)sub_1002CB32C(v6, v4++) = v10;
  }

  while (v4 != 3);
  return a1;
}

void sub_10038761C(_Unwind_Exception *a1)
{
  v1[16] = off_1007AED90;
  v1[8] = off_1007AED90;
  *uint64_t v1 = off_1007AED90;
  _Unwind_Resume(a1);
}

uint64_t sub_100387638(void *a1, double *a2)
{
  return sub_100387668(a1, (uint64_t)a2);
}

uint64_t sub_100387668(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0LL;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_100387AB8(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }

  if (v5 == v4)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19);
  }

  uint64_t result = sub_10037021C(v8, a2);
  ++a1[5];
  return result;
}

uint64_t sub_100387724(int64x2_t *a1)
{
  uint64_t result = sub_10038799C((uint64_t)a1);
  if (result)
  {
    sub_100387794(a1);
    a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_100422120);
    return sub_100301000((uint64_t)a1[3].i64, 1);
  }

  return result;
}

BOOL sub_100387778(uint64_t a1)
{
  return sub_10038799C(a1) == 0;
}

uint64_t sub_100387794(int64x2_t *a1)
{
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100422120);
  return sub_100387DCC((uint64_t)a1, 1);
}

void sub_100387810(void *a1)
{
  BOOL v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1[4];
    uint64_t v5 = &v2[v4 / 0x19];
    uint64_t v6 = (char *)*v5 + 160 * (v4 % 0x19);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x19] + 160 * ((a1[5] + v4) % 0x19);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_100130664((uint64_t)(a1 + 5), v6);
        v6 += 160;
        if (v6 - (_BYTE *)*v5 == 4000)
        {
          uint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }

      while (v6 != (char *)v7);
      BOOL v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }

  a1[5] = 0LL;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v10 = a1[2];
      BOOL v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v9 = v10 - (void)v2;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 12LL;
    goto LABEL_15;
  }

  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 25LL;
LABEL_15:
    a1[4] = v11;
  }

  uint64_t v12 = (void **)a1[7];
  uint64_t v13 = a1[8];
  a1[11] = 0LL;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = a1[8];
      uint64_t v12 = (void **)(a1[7] + 8LL);
      a1[7] = v12;
      unint64_t v14 = v15 - (void)v12;
    }

    while (v14 > 0x10);
  }

  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 256LL;
  }

  else
  {
    if (v14 >> 3 != 2) {
      return;
    }
    uint64_t v16 = 512LL;
  }

  a1[10] = v16;
}

uint64_t sub_10038799C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != *(void *)(a1 + 88))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IMU data buffer and time buffer have different sizes.");
  }

  return result;
}

void sub_1003879F8(_Unwind_Exception *a1)
{
}

uint64_t sub_100387A0C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = *(void *)(a2 + 8);
  sub_100131CE8((uint64_t *)(a1 + 16), a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + sub_100021DA8(v1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

double sub_100387A88(uint64_t a1)
{
  *(void *)(a1 + 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void *sub_100387AA0@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007C0360)[a1]);
}

void sub_100387AB8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x19;
  unint64_t v4 = v2 - 25;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100387D80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100387DCC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x19) {
    a2 = 1;
  }
  if (v2 < 0x32) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 25LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_100387E28@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((_DWORD)result == 1)
  {
    if (a2 <= 99)
    {
      if (((1 << a2) & 0xFFFF80) == 0)
      {
        BOOL v3 = &xmmword_1006E1988;
LABEL_20:
        __int128 v5 = v3[9];
        *(_OWORD *)(a3 + 12std::ostream::~ostream(v1, v2 + 8) = v3[8];
        *(_OWORD *)(a3 + 144) = v5;
        *(_OWORD *)(a3 + 160) = v3[10];
        *(void *)(a3 + 176) = *((void *)v3 + 22);
        __int128 v6 = v3[5];
        *(_OWORD *)(a3 + 64) = v3[4];
        *(_OWORD *)(a3 + 80) = v6;
        __int128 v7 = v3[7];
        *(_OWORD *)(a3 + 96) = v3[6];
        *(_OWORD *)(a3 + sub_1001ACE80(v1 + 112) = v7;
        __int128 v8 = v3[1];
        *(_OWORD *)a3 = *v3;
        *(_OWORD *)(a3 + 16) = v8;
        __int128 v9 = v3[2];
        __int128 v10 = v3[3];
        char v4 = 1;
        *(_OWORD *)(a3 + 32) = v9;
        *(_OWORD *)(a3 + 4std::ostream::~ostream(v1, v2 + 8) = v10;
        goto LABEL_13;
      }

uint64_t sub_100387F20(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 64) = &off_1007BC508;
  uint64_t v2 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0x300000003LL;
  *(_OWORD *)(a1 + 72) = xmmword_10042DE90;
  *(void *)(a1 + 96) = a1 + 104;
  sub_1002CAEDC((_DWORD *)(a1 + 64), 3, 3);
  sub_1002CAF28(v2, 0.0);
  for (int i = 0; i != 3; ++i)
    *(void *)sub_100304F3C(v2, i, i) = 0x3FF0000000000000LL;
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v13 = 0x300000003LL;
  uint64_t v11 = &off_1007BC508;
  __int128 v12 = xmmword_10042DE90;
  BOOL v14 = &v15;
  sub_1002CAEDC(&v11, 3, 3);
  sub_1002CAF28((uint64_t)&v11, 0.0);
  for (int j = 0; j != 3; ++j)
    *(void *)sub_100304F3C((uint64_t)&v11, j, j) = 0x3FF0000000000000LL;
  sub_1002CBDC8(v2, (uint64_t)&v11);
  __int128 v5 = *(void ***)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0LL;
  unint64_t v7 = v6 - (void)v5;
  if (v7 >= 0x11)
  {
    do
    {
      operator delete(*v5);
      uint64_t v8 = *(void *)(a1 + 24);
      __int128 v5 = (void **)(*(void *)(a1 + 16) + 8LL);
      *(void *)(a1 + 16) = v5;
      unint64_t v7 = v8 - (void)v5;
    }

    while (v7 > 0x10);
  }

  if (v7 >> 3 == 1)
  {
    uint64_t v9 = 256LL;
    goto LABEL_11;
  }

  if (v7 >> 3 == 2)
  {
    uint64_t v9 = 512LL;
LABEL_11:
    *(void *)(a1 + 40) = v9;
  }

  return a1;
}

void sub_1003880B8(_Unwind_Exception *a1)
{
  *uint64_t v2 = off_1007AED90;
  sub_1001302F0(v1);
  _Unwind_Resume(a1);
}

void sub_1003880EC(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Accepting connection from an entitled client with pid %d",  (uint8_t *)v2,  8u);
  sub_100003DB4();
}

void sub_10038815C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Entitlement check failed! - rejecting unentitled client with pid %d",  (uint8_t *)v2,  8u);
  sub_100003DB4();
}

void sub_1003881CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[PRBTRangingService] shouldAcceptNewConnection",  v1,  2u);
  sub_100003DB4();
}

void sub_100388208(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Accepting connection from an entitled client with pid %d",  (uint8_t *)v2,  8u);
  sub_100003DB4();
}

void sub_100388278(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Entitlement check failed! - rejecting unentitled client with pid %d",  (uint8_t *)v2,  8u);
  sub_100003DB4();
}

void sub_1003882E8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[PRDiagnosticsService] shouldAcceptNewConnection",  v1,  2u);
  sub_100003DB4();
}

void sub_100388324( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100388388(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#reg-assist, given nil iso code.", v1, 2u);
  sub_100003DB4();
}

void sub_1003883C4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100388428( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10038848C()
{
  __assert_rtn( "-[PRDiagnosticsService publishBytes:amount:]",  "PRDiagnosticsService.mm",  509,  "amount <= kRemoteProtobufMaxMessageSize");
}

void sub_1003884B4()
{
}

void sub_1003884E0()
{
}

void sub_10038855C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1003885C0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100388624( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10038868C(uint64_t a1, os_log_s *a2, uint64_t a3, double a4)
{
  int v4 = 134218242;
  double v5 = a4;
  __int16 v6 = 2112;
  uint64_t v7 = a1;
  sub_10000AFC4((void *)&_mh_execute_header, a2, a3, "#ble,Activation failed [%0.6f s]. Error: %@", (uint8_t *)&v4);
  sub_10000668C();
}

void sub_100388700()
{
  if (!v5 & v4) {
    __int16 v6 = "Unknown";
  }
  else {
    __int16 v6 = off_1007A1ED0[v2];
  }
  int v7 = 136315394;
  uint64_t v8 = v6;
  __int16 v9 = 2048;
  uint64_t v10 = v3;
  sub_10000AFC4( (void *)&_mh_execute_header,  v0,  v1,  "#ble,Activation completed but session in unexpected state %s [%0.6f s]",  (uint8_t *)&v7);
  sub_10000668C();
}

void sub_100388790()
{
}

void sub_1003887F0()
{
}

void sub_100388850()
{
}

void sub_1003888CC()
{
}

void sub_100388948()
{
}

void sub_1003889C4()
{
}

void sub_100388A40(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "#ble,Overriding advertising T19 payload to burst adv rate: [%@]",  (uint8_t *)&v2,  0xCu);
  sub_10000668C();
}

void sub_100388AB0()
{
}

void sub_100388ADC()
{
}

void sub_100388B58()
{
}

void sub_100388B84()
{
}

void sub_100388C00()
{
}

void sub_100388C7C()
{
}

void sub_100388D14()
{
}

void sub_100388D40(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 134218240;
  *(void *)(buf + 4) = a2;
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = 6;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "#ble,PRBLEDiscoverySession addrBytes length %lu does not match expected value of %d",  buf,  0x12u);
}

void sub_100388D94()
{
}

void sub_100388E2C()
{
}

void sub_100388EA8()
{
}

void sub_100388ED4()
{
}

void sub_100388F00( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100388F64()
{
}

void sub_100388F90()
{
}

void sub_100388FBC()
{
}

void sub_100388FE8(uint64_t a1, int a2)
{
}

void sub_10038901C(uint64_t a1, int a2)
{
}

void sub_100389050()
{
}

void sub_10038907C()
{
}

void sub_1003890A8(uint64_t a1, int a2)
{
}

void sub_1003890DC(uint64_t a1, int a2)
{
}

void sub_100389110(uint64_t a1, int a2)
{
}

void sub_100389144(uint64_t a1, int a2)
{
}

void sub_100389178(uint64_t a1, int a2)
{
}

void sub_1003891AC(uint64_t a1, int a2)
{
}

void sub_1003891E0(uint64_t a1, int a2)
{
}

void sub_100389214(uint64_t a1, int a2)
{
}

void sub_100389248(uint64_t a1, int a2)
{
}

void sub_10038927C(uint64_t a1, int a2)
{
}

void sub_1003892B0(uint64_t a1, int a2)
{
}

void sub_1003892E4(uint64_t a1, int a2)
{
}

void sub_100389318(uint64_t a1, int a2)
{
}

void sub_10038934C(uint64_t a1, int a2)
{
}

void sub_100389380()
{
}

void sub_1003893E0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389410( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389440( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389470()
{
}

void sub_1003894D0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389538( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389568( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389598( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389600( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389630( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10038969C()
{
}

void sub_1003896C8()
{
}

void sub_1003896F4()
{
}

void sub_100389720()
{
}

void sub_10038974C()
{
}

void sub_100389778()
{
}

void sub_1003897A4()
{
}

void sub_1003897D0()
{
}

void sub_1003897FC(_BYTE *a1, _BYTE *a2)
{
}

void sub_100389828()
{
  sub_10002107C();
}

void sub_100389864()
{
}

void sub_100389890()
{
  sub_10002107C();
}

void sub_1003898CC()
{
  sub_10002107C();
}

void sub_100389908()
{
  sub_10000AFA4( (void *)&_mh_execute_header,  v0,  v1,  "#wifi-service,WiFiManagerClientCreate returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_100003DB4();
}

void sub_100389934( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1003899A4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389A14( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389A84( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100389AF4()
{
}

void sub_100389B20()
{
}

void sub_100389B4C()
{
}

void sub_100389B74()
{
}

void sub_100389BA0()
{
  sub_10002107C();
}

void sub_100389BDC()
{
}

void sub_100389C08()
{
}

void sub_100389C34()
{
}

void sub_100389C94()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100003DB4();
}

void sub_100389CC0()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100003DB4();
}

void sub_100389CEC()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100003DB4();
}

void sub_100389D18()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100003DB4();
}

void sub_100389D44()
{
}

void sub_100389D70()
{
}

void sub_100389D9C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a2 + 40);
  int v4 = 134218240;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "#wifi-service,No AWDL references to stop network: awdlInterface %p; fNetworkAwdl %p",
    (uint8_t *)&v4,
    0x16u);
  sub_10000668C();
}