void sub_10010DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10010DF68( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v5 = 0LL;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(*(void *)(v4 + 16) + 8 * v5++),  a3);
    while (v5 < *(int *)(v4 + 24));
  }

  v8 = *(void **)(v4 + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
    }
  }

  return this;
}

uint64_t sub_10010DFF0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*(int *)(a1 + 24) >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v3);
      *(_BYTE *)a2 = 9;
      *(void *)(a2 + 1) = v4;
      a2 += 9LL;
      ++v3;
    }

    while (v3 < *(int *)(a1 + 24));
  }

  v7 = *(void **)(a1 + 8);
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = v7;
  if (!v7 || *v6 == v6[1]) {
    return a2;
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray( v5,  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2,  a3);
  }
}

uint64_t sub_10010E080(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v3 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  uint64_t v4 = v5;
  uint64_t v6 = (9 * *((_DWORD *)v3 + 4));
  if (v5 && *v4 != v4[1]) {
  *(_DWORD *)(a1 + 32) = v6;
  }
  return v6;
}

uint64_t sub_10010E0C8( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  2196LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010DB58((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10010E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10010E188(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_10010E1D0()
{
  return 1LL;
}

uint64_t sub_10010E1D8()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F66E8;
}

void sub_10010E250(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10010E264(uint64_t a1)
{
  *(void *)a1 = off_1007AD710;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_10010E2A4(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E2B8(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v18,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  2486LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v18,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 6),  *(_DWORD *)(a2 + 32) + a1[8]);
  if (*(int *)(a2 + 32) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8 * v5);
      int v7 = a1[9];
      uint64_t v8 = (int)a1[8];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[10])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 6),  v7 + 1);
          int v7 = a1[9];
        }

        a1[9] = v7 + 1;
        v10 = sub_100118C2C();
        uint64_t v11 = *((void *)a1 + 3);
        uint64_t v12 = (int)a1[8];
        a1[8] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 3);
        a1[8] = v8 + 1;
        v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10010DB58((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 32));
  }

  LOBYTE(v13) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v13)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      int v14 = *(_DWORD *)(a2 + 16);
      a1[13] |= 1u;
      a1[4] = v14;
      int v13 = *(_DWORD *)(a2 + 52);
    }

    if ((v13 & 2) != 0)
    {
      int v15 = *(_DWORD *)(a2 + 20);
      a1[13] |= 2u;
      a1[5] = v15;
    }
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10010E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10010E43C(uint64_t a1)
{
  *(void *)a1 = off_1007AD710;
  sub_10005C420(a1 + 24);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10010E47C(uint64_t a1)
{
}

uint64_t sub_10010E490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

void *sub_10010E498()
{
  uint64_t v0 = operator new(0x38uLL);
  sub_10010E264((uint64_t)v0);
  return v0;
}

void sub_10010E4C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E4D8(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_BYTE *)(this + 52)) {
    *(void *)(this + 16) = 0LL;
  }
  if (*(int *)(this + 32) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 32));
  }

  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 11) = 0;
  if (v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  }
  return this;
}

uint64_t sub_10010E554( _DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 6);
  unsigned int v7 = (_DWORD)a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v8 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v10 = TagFallback >> 3;
          int v11 = TagFallback & 7;
          int v13 = (char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v14 = v37;
            int v15 = (_BYTE *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
          }

          else
          {
            unsigned int v14 = *v13;
            int v15 = v13 + 1;
            *((void *)this + 1) = v15;
          }

          a1[4] = v14;
          a1[13] |= 1u;
          if ((unint64_t)v15 < v12 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((void *)this + 1) = v16;
            goto LABEL_27;
          }
        }

        if (v10 != 2) {
          break;
        }
        int v11 = TagFallback & 7;
        v16 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
LABEL_27:
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v18 = v36;
          v19 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int v18 = *v16;
          v19 = v16 + 1;
          *((void *)this + 1) = v19;
        }

        a1[5] = v18;
        a1[13] |= 2u;
      }

      if (v10 != 3) {
        break;
      }
      int v11 = TagFallback & 7;
      if (v11 != 2) {
        goto LABEL_19;
      }
      while (1)
      {
        int v20 = a1[9];
        uint64_t v21 = (int)a1[8];
        if ((int)v21 >= v20)
        {
          if (v20 == a1[10])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v20 + 1);
            int v20 = a1[9];
          }

          a1[9] = v20 + 1;
          v23 = sub_100118C2C();
          uint64_t v24 = *((void *)a1 + 3);
          uint64_t v25 = (int)a1[8];
          a1[8] = v25 + 1;
          *(void *)(v24 + 8 * v25) = v23;
        }

        else
        {
          uint64_t v22 = *((void *)a1 + 3);
          a1[8] = v21 + 1;
          v23 = *(void **)(v22 + 8 * v21);
        }

        v26 = (char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v38)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v38 = *v26;
          *((void *)this + 1) = v26 + 1;
        }

        int v27 = *((_DWORD *)this + 14);
        int v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 >= v28) {
          return 0LL;
        }
        int v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v38);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
        int v32 = *((_DWORD *)this + 14);
        BOOL v33 = __OFSUB__(v32, 1);
        int v34 = v32 - 1;
        if (v34 < 0 == v33) {
          *((_DWORD *)this + 14) = v34;
        }
        v19 = (_BYTE *)*((void *)this + 1);
        v35 = (_BYTE *)*((void *)this + 2);
        if (v19 >= v35 || *v19 != 26) {
          break;
        }
LABEL_34:
        *((void *)this + 1) = v19 + 1;
      }

      if (v19 == v35 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v11 = TagFallback & 7;
LABEL_19:
    if (v11 == 4) {
      return 1LL;
    }
  }

uint64_t sub_10010E84C( uint64_t this, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(this + 16),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 52);
  }

  if ((v6 & 2) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(*(void *)(v5 + 24) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  unsigned int v10 = *(void **)(v5 + 8);
  uint64_t v9 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  uint64_t v8 = v10;
  if (v10)
  {
    if (*v8 != v8[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v9, a2, a3);
    }
  }

  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10010E904( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 4);
    *(_BYTE *)a2 = 8;
    int v6 = (char *)a2 + 1;
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v5,  (unint64_t)v6,  a3);
    }

    else
    {
      if (v5 <= 0x7F)
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v5;
        uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        goto LABEL_8;
      }

      uint64_t v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v5,  v6,  a3);
    }

    uint64_t v3 = v7;
  }

uint64_t sub_10010EA3C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  char v3 = *(_BYTE *)(a1 + 52);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_19;
  }

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 52) & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    int v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }

  else
  {
    int v7 = 2;
  }

  v4 += v7;
LABEL_19:
  int v8 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = (v8 + v4);
  if (v8 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010E080( *(void *)(*(void *)(a1 + 24) + 8 * v10),  a2);
      int v12 = (int)v11;
      else {
        int v13 = 1;
      }
      uint64_t v9 = (v12 + v9 + v13);
      ++v10;
    }

    while (v10 < *(int *)(a1 + 32));
  }

  uint64_t v14 = *(void **)(a1 + 8);
  if (v14 && *v14 != v14[1]) {
    uint64_t v9 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize( (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8),  a2)
  }
       + v9;
  *(_DWORD *)(a1 + 48) = v9;
  return v9;
}

uint64_t sub_10010EB60( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  2474LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010E2B8(a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10010EC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10010EC20(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_10010EC68()
{
  return 1LL;
}

uint64_t sub_10010EC70()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F66D8;
}

void sub_10010ECE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10010ECFC(uint64_t a1)
{
  *(void *)a1 = off_1007AD7C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 1LL;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_10010ED44(_Unwind_Exception *a1)
{
}

uint64_t sub_10010ED58(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  2829LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      int v6 = *(void **)(a1 + 16);
      if (!v6)
      {
        int v6 = operator new(0x30uLL);
        sub_10010CBBC((uint64_t)v6);
        *(void *)(a1 + 16) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 16);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_100800710 + 16);
      }
      sub_10010CC08((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 48);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      char v8 = *(void **)(a1 + 24);
      if (!v8)
      {
        char v8 = operator new(0x30uLL);
        sub_10010D364((uint64_t)v8);
        *(void *)(a1 + 24) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_100800710 + 24);
      }
      sub_10010D3B0((uint64_t)v8, v9);
      int v5 = *(_DWORD *)(a2 + 48);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 4u;
      uint64_t v10 = *(_DWORD **)(a1 + 32);
      if (!v10)
      {
        uint64_t v10 = operator new(0x38uLL);
        sub_10010E264((uint64_t)v10);
        *(void *)(a1 + 32) = v10;
      }

      uint64_t v11 = *(void *)(a2 + 32);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_100800710 + 32);
      }
      sub_10010E2B8(v10, v11);
      int v5 = *(_DWORD *)(a2 + 48);
    }

    if ((v5 & 8) != 0)
    {
      int v12 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) |= 8u;
      *(_DWORD *)(a1 + 40) = v12;
    }
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10010EEEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10010EF1C(void *a1)
{
  *a1 = off_1007AD7C0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_10010EF58(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_10010EF58(void *result)
{
  if ((void *)qword_100800710 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t result = (void *)v1[4];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_10010EFCC(void *a1)
{
}

uint64_t sub_10010EFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 44) = a2;
  return result;
}

void *sub_10010EFE8()
{
  uint64_t v0 = operator new(0x38uLL);
  sub_10010ECFC((uint64_t)v0);
  return v0;
}

void sub_10010F014(_Unwind_Exception *a1)
{
}

uint64_t sub_10010F028(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_BYTE *)(this + 48))
  {
    if ((*(_BYTE *)(this + 48) & 1) != 0)
    {
      this = *(void *)(this + 16);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(void *)(this + 16) = 0LL;
          *(void *)(this + 24) = 0LL;
          *(void *)(this + 32) = 0LL;
        }

        uint64_t v2 = *(void *)(this + 8);
        this += 8LL;
        *(_DWORD *)(this + 36) = 0;
        if (v2) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 48) & 2) != 0)
    {
      this = *(void *)(v1 + 24);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(void *)(this + 16) = 0LL;
          *(void *)(this + 24) = 0LL;
          *(void *)(this + 32) = 0LL;
        }

        uint64_t v3 = *(void *)(this + 8);
        this += 8LL;
        *(_DWORD *)(this + 36) = 0;
        if (v3) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 48) & 4) != 0)
    {
      this = *(void *)(v1 + 32);
      if (this) {
        this = sub_10010E4D8(this);
      }
    }

    *(_DWORD *)(v1 + 40) = 1;
  }

  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 10) = 0;
  if (v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  }
  return this;
}

uint64_t sub_10010F0E0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  int v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 < *((void *)this + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_7;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v10 = *(void **)(a1 + 16);
        if (!v10)
        {
          uint64_t v10 = operator new(0x30uLL);
          sub_10010CBBC((uint64_t)v10);
          *(void *)(a1 + 16) = v10;
        }

        uint64_t v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v45 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0LL;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        uint64_t v22 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v22 + 1;
        goto LABEL_33;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
LABEL_33:
        *(_DWORD *)(a1 + 48) |= 2u;
        v23 = *(void **)(a1 + 24);
        if (!v23)
        {
          v23 = operator new(0x30uLL);
          sub_10010D364((uint64_t)v23);
          *(void *)(a1 + 24) = v23;
        }

        uint64_t v24 = (char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v45 = *v24;
          *((void *)this + 1) = v24 + 1;
        }

        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0LL;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v30 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v20) {
          *((_DWORD *)this + 14) = v31;
        }
        int v32 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v32 + 1;
LABEL_47:
        *(_DWORD *)(a1 + 48) |= 4u;
        BOOL v33 = *(_DWORD **)(a1 + 32);
        if (!v33)
        {
          BOOL v33 = operator new(0x38uLL);
          sub_10010E264((uint64_t)v33);
          *(void *)(a1 + 32) = v33;
        }

        int v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v45)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v45 = *v34;
          *((void *)this + 1) = v34 + 1;
        }

        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0LL;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v40 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v40, 1);
        int v41 = v40 - 1;
        if (v41 < 0 == v20) {
          *((_DWORD *)this + 14) = v41;
        }
        v42 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v42 < v12 && *v42 == 32)
        {
          int v13 = v42 + 1;
          *((void *)this + 1) = v13;
LABEL_61:
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
            if (!(_DWORD)result) {
              return result;
            }
            signed int v43 = v45;
          }

          else
          {
            signed int v43 = *v13;
            *((void *)this + 1) = v13 + 1;
          }

          if ((v43 - 1) > 9)
          {
            wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 4, v43);
          }

          else
          {
            *(_DWORD *)(a1 + 48) |= 8u;
            *(_DWORD *)(a1 + 40) = v43;
          }

          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
        }

        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_47;
        }
        goto LABEL_21;
      case 4u:
        int v9 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_61;
      default:
        int v9 = TagFallback & 7;
LABEL_21:
        if (v9 == 4) {
          return 1LL;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField( this,  TagFallback,  v6,  a4) & 1) == 0) {
          return 0LL;
        }
        continue;
    }
  }

void sub_10010F50C(_Unwind_Exception *a1)
{
}

uint64_t sub_10010F528( uint64_t this, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    uint64_t v10 = *(void *)(this + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_100800710 + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v10,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v11 = *(void *)(v5 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_100800710 + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v11,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10010F610( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  int v5 = *((_DWORD *)this + 12);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = *((void *)this + 2);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_100800710 + 16);
    }
    *(_BYTE *)a2 = 10;
    unsigned int v7 = (_DWORD)a2 + 1;
    char v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v6 + 40);
    if (v8 > 0x7F)
    {
      uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v7, a3);
    }

    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v8;
      uint64_t v9 = (uint64_t)v3 + 2;
    }

    uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10010D030(v6, v9, a3);
    int v5 = *((_DWORD *)this + 12);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v10 = *((void *)this + 3);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_100800710 + 24);
  }
  *(_BYTE *)uint64_t v3 = 18;
  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v10 + 40);
  if (v11 > 0x7F)
  {
    uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v11,  (int)v3 + 1,  a3);
  }

  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v11;
    uint64_t v12 = (uint64_t)v3 + 2;
  }

  uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10010D7D8(v10, v12, a3);
  int v5 = *((_DWORD *)this + 12);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
LABEL_24:
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 10);
    *(_BYTE *)uint64_t v3 = 32;
    unint64_t v17 = (unint64_t)v3 + 1;
    if ((v16 & 0x80000000) != 0)
    {
      unsigned int v18 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v16,  v17,  a3);
    }

    else
    {
      if (v16 <= 0x7F)
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v16;
        uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        goto LABEL_30;
      }

      unsigned int v18 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v16,  v17,  a3);
    }

    uint64_t v3 = v18;
    goto LABEL_30;
  }

uint64_t sub_10010F7A8(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_33;
  }

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_100800710 + 16);
    }
    uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010D158(v5, a2);
    int v7 = (int)v6;
    else {
      int v8 = 1;
    }
    uint64_t v4 = (v7 + v8 + 1);
    int v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = 0LL;
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_100800710 + 24);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010D900(v9, a2);
    int v11 = (int)v10;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    int v3 = *(_DWORD *)(a1 + 48);
  }

uint64_t sub_10010F91C( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  2817LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010ED58((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10010F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10010F9DC(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_10010FA24()
{
  return 1LL;
}

uint64_t sub_10010FA2C()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F66A8;
}

void sub_10010FAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10010FAB8(uint64_t a1)
{
  *(void *)a1 = off_1007AD870;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10010FAF0(_Unwind_Exception *a1)
{
}

uint64_t sub_10010FB04(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  3115LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 44) & 4) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_7;
  }

  uint64_t v8 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 1u;
  *(void *)(a1 + 16) = v8;
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
LABEL_7:
    uint64_t v6 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(void *)(a1 + 32) = v6;
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10010FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10010FBF8(uint64_t a1)
{
  *(void *)a1 = off_1007AD870;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10010FC28(uint64_t a1)
{
  *(void *)a1 = off_1007AD870;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete(v2);
}

uint64_t sub_10010FC5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

void *sub_10010FC64()
{
  uint64_t v0 = operator new(0x30uLL);
  sub_10010FAB8((uint64_t)v0);
  return v0;
}

void sub_10010FC90(_Unwind_Exception *a1)
{
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10010FCA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 44))
  {
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 9) = 0;
  if (v2) {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  }
  return result;
}

uint64_t sub_10010FCC8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  do
  {
    while (1)
    {
      while (1)
      {
        int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v9 = TagFallback >> 3;
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_28;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        int v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 17)
        {
          *((void *)this + 1) = v11 + 1;
LABEL_18:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
            return 0LL;
          }
          *(void *)(a1 + 24) = v14;
          *(_DWORD *)(a1 + 44) |= 2u;
          int v12 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 25)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_22;
          }
        }
      }

      if (v9 == 2)
      {
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_28;
        }
        goto LABEL_18;
      }

      if (v9 != 3)
      {
        int v10 = TagFallback & 7;
        goto LABEL_28;
      }

      int v10 = TagFallback & 7;
      if (v10 == 1) {
        break;
      }
LABEL_28:
      if (v10 == 4) {
        return 1LL;
      }
    }

uint64_t sub_10010FE90( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 44);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v4 + 24),  a3);
  if ((*(_DWORD *)(v4 + 44) & 4) != 0) {
LABEL_4:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v4 + 32),  a3);
LABEL_5:
  uint64_t v8 = *(void **)(v4 + 8);
  int v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  unsigned int v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
    }
  }

  return this;
}

uint64_t sub_10010FF2C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v10 = *(void *)(a1 + 24);
    *(_BYTE *)a2 = 17;
    *(void *)(a2 + 1) = v10;
    a2 += 9LL;
    if ((*(_DWORD *)(a1 + 44) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  uint64_t v9 = *(void *)(a1 + 16);
  *(_BYTE *)a2 = 9;
  *(void *)(a2 + 1) = v9;
  a2 += 9LL;
  int v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v3 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 32);
    *(_BYTE *)a2 = 25;
    *(void *)(a2 + 1) = v4;
    a2 += 9LL;
  }

uint64_t sub_100110054(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    v4 += 9;
  }
  if (*(_BYTE *)(a1 + 44)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v8 = *(void **)(a1 + 8);
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  int v7 = v8;
  if (v8 && *v7 != v7[1]) {
  *(_DWORD *)(a1 + 40) = v5;
  }
  return v5;
}

uint64_t sub_1001100C4( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  3103LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010FB04((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10011016C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100110184(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_1001101CC()
{
  return 1LL;
}

uint64_t sub_1001101D4()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F66F8;
}

void sub_10011024C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100110260(uint64_t a1)
{
  *(void *)a1 = off_1007AD920;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_1001102A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001102B4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v17,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  3605LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v17,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }

  int v5 = *(_DWORD *)(a2 + 92);
  if (!(_BYTE)v5) {
    goto LABEL_13;
  }
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 92) |= 1u;
    *(void *)(a1 + 16) = v9;
    int v5 = *(_DWORD *)(a2 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 2u;
  *(void *)(a1 + 24) = v10;
  int v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

void sub_100110450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100110468(uint64_t a1)
{
  *(void *)a1 = off_1007AD920;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100110498(uint64_t a1)
{
  *(void *)a1 = off_1007AD920;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete(v2);
}

uint64_t sub_1001104CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

void *sub_1001104D4()
{
  uint64_t v0 = operator new(0x60uLL);
  sub_100110260((uint64_t)v0);
  return v0;
}

void sub_100110500(_Unwind_Exception *a1)
{
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100110514(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 92);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }

  if ((v1 & 0xFF00) != 0) {
    *(void *)(a1 + 80) = 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 21) = 0;
  if (v3) {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  }
  return result;
}

uint64_t sub_10011054C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_55;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 92) |= 1u;
        uint64_t v10 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_55;
        }
LABEL_15:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = v19;
        *(_DWORD *)(a1 + 92) |= 2u;
        uint64_t v11 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v11 + 1;
LABEL_20:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = v19;
        *(_DWORD *)(a1 + 92) |= 4u;
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v12 + 1;
LABEL_25:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = v19;
        *(_DWORD *)(a1 + 92) |= 8u;
        uint64_t v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 48) = v19;
        *(_DWORD *)(a1 + 92) |= 0x10u;
        uint64_t v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_35:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 56) = v19;
        *(_DWORD *)(a1 + 92) |= 0x20u;
        uint64_t v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_40:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 64) = v19;
        *(_DWORD *)(a1 + 92) |= 0x40u;
        char v16 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v16 + 1;
LABEL_45:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 72) = v19;
        *(_DWORD *)(a1 + 92) |= 0x80u;
        unint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_50:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 80) = v19;
        *(_DWORD *)(a1 + 92) |= 0x100u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_20;
        }
        goto LABEL_55;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_25;
        }
        goto LABEL_55;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_30;
        }
        goto LABEL_55;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_35;
        }
        goto LABEL_55;
      case 7u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_40;
        }
        goto LABEL_55;
      case 8u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_45;
        }
        goto LABEL_55;
      case 9u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_50;
        }
        goto LABEL_55;
      default:
        int v9 = TagFallback & 7;
LABEL_55:
        if (v9 == 4) {
          return 1LL;
        }
        continue;
    }

    return result;
  }

uint64_t sub_10011091C( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 92);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v5 = *(_DWORD *)(v4 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v4 + 24),  a3);
  int v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_100110A60(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    *(_BYTE *)a2 = 9;
    *(void *)(a2 + 1) = v9;
    a2 += 9LL;
    int v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v10 = *(void *)(a1 + 24);
  *(_BYTE *)a2 = 17;
  *(void *)(a2 + 1) = v10;
  a2 += 9LL;
  int v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_100110D98(_DWORD *a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = a1[23];
  if ((_BYTE)v3)
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x20) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x40) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x80) != 0) {
      v4 += 9;
    }
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 0x100) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 2);
  uint64_t v7 = (void *)*((void *)a1 + 1);
  if (v7 && *v7 != v7[1]) {
  a1[22] = v5;
  }
  return v5;
}

uint64_t sub_100110E5C( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  3593LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_1001102B4((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100110F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100110F1C(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100110F64()
{
  return 1LL;
}

uint64_t sub_100110F6C()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6708;
}

void sub_100110FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100110FF8(uint64_t a1)
{
  *(void *)a1 = off_1007AD9D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_100111038(_Unwind_Exception *a1)
{
}

uint64_t sub_10011104C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v23,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  4233LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v23,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v22, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }

  int v5 = *(_DWORD *)(a2 + 92);
  if (!(_BYTE)v5) {
    goto LABEL_21;
  }
  if ((v5 & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 92) |= 1u;
    *(_DWORD *)(a1 + 24) = v6;
    int v5 = *(_DWORD *)(a2 + 92);
  }

  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 2u;
    uint64_t v7 = *(void **)(a1 + 16);
    if (!v7)
    {
      uint64_t v7 = operator new(0x28uLL);
      sub_1001171F8(v7);
      *(void *)(a1 + 16) = v7;
    }

    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_100800708 + 16);
    }
    sub_1001125D8((uint64_t)v7, v8);
    int v5 = *(_DWORD *)(a2 + 92);
  }

  if ((v5 & 4) != 0)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 28);
    if (v9 >= 4) {
      sub_10038C79C();
    }
    *(_DWORD *)(a1 + 92) |= 4u;
    *(_DWORD *)(a1 + 28) = v9;
    int v5 = *(_DWORD *)(a2 + 92);
  }

  if ((v5 & 8) != 0)
  {
    uint64_t v18 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 92) |= 8u;
    *(void *)(a1 + 32) = v18;
    int v5 = *(_DWORD *)(a2 + 92);
    if ((v5 & 0x10) == 0)
    {
LABEL_17:
      if ((v5 & 0x20) == 0) {
        goto LABEL_18;
      }
LABEL_43:
      uint64_t v20 = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 92) |= 0x20u;
      *(void *)(a1 + 48) = v20;
      int v5 = *(_DWORD *)(a2 + 92);
      if ((v5 & 0x40) == 0)
      {
LABEL_19:
        if ((v5 & 0x80) == 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }

      goto LABEL_44;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v19 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(void *)(a1 + 40) = v19;
  int v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x20) != 0) {
    goto LABEL_43;
  }
LABEL_18:
  if ((v5 & 0x40) == 0) {
    goto LABEL_19;
  }
LABEL_44:
  int v21 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(_DWORD *)(a1 + 56) = v21;
  int v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x80) != 0)
  {
LABEL_20:
    int v10 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v10;
    int v5 = *(_DWORD *)(a2 + 92);
  }

void sub_1001112F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100111324(void *a1)
{
  *a1 = off_1007AD9D0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100111360(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_100111360(void *result)
{
  if ((void *)qword_100800708 != result)
  {
    int v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[8];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[9];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t result = (void *)v1[10];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1001113E8(void *a1)
{
}

uint64_t sub_1001113FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

void *sub_100111404()
{
  uint64_t v0 = operator new(0x60uLL);
  sub_100110FF8((uint64_t)v0);
  return v0;
}

void sub_100111430(_Unwind_Exception *a1)
{
}

uint64_t sub_100111444(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 92);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 24) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = sub_10011150C(this);
        int v2 = *(_DWORD *)(v1 + 92);
      }
    }

    *(_DWORD *)(v1 + 60) = 0;
    *(_OWORD *)(v1 + 44) = 0u;
    *(_OWORD *)(v1 + 28) = 0u;
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      this = *(void *)(v1 + 64);
      if (this)
      {
        this = sub_10010F028(this);
        int v2 = *(_DWORD *)(v1 + 92);
      }
    }

    if ((v2 & 0x200) != 0)
    {
      this = *(void *)(v1 + 72);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(void *)(this + 16) = 0LL;
          *(void *)(this + 24) = 0LL;
          *(void *)(this + 32) = 0LL;
        }

        uint64_t v3 = *(void *)(this + 8);
        this += 8LL;
        *(_DWORD *)(this + 36) = 0;
        if (v3) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 93) & 4) != 0)
    {
      this = *(void *)(v1 + 80);
      if (this) {
        this = (uint64_t)sub_100110514(this);
      }
    }
  }

  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 21) = 0;
  if (v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  }
  return this;
}

uint64_t sub_10011150C(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_BYTE *)(this + 36))
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      this = *(void *)(this + 16);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(void *)(this + 16) = 0LL;
          *(void *)(this + 24) = 0LL;
          *(void *)(this + 32) = 0LL;
        }

        uint64_t v2 = *(void *)(this + 8);
        this += 8LL;
        *(_DWORD *)(this + 36) = 0;
        if (v2) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 36) & 2) != 0)
    {
      this = *(void *)(v1 + 24);
      if (this)
      {
        if (*(_BYTE *)(this + 68))
        {
          *(_OWORD *)(this + 32) = 0u;
          *(_OWORD *)(this + 48) = 0u;
          *(_OWORD *)(this + 16) = 0u;
        }

        uint64_t v3 = *(void *)(this + 8);
        this += 8LL;
        *(_DWORD *)(this + 60) = 0;
        if (v3) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
  }

  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 7) = 0;
  if (v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  }
  return this;
}

uint64_t sub_1001115AC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  int v6 = (unsigned int *)(a1 + 24);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  uint64_t v8 = (unint64_t *)(a1 + 40);
  while (1)
  {
    unsigned int v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 < *((void *)this + 2) && (*v9 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_7;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v14 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v6 = *v13;
          uint64_t v14 = v13 + 1;
          *((void *)this + 1) = v14;
        }

        int v15 = *(_DWORD *)(a1 + 92) | 1;
        *(_DWORD *)(a1 + 92) = v15;
        if ((unint64_t)v14 < v12 && *v14 == 18)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_41;
        }

        continue;
      case 2u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_33;
        }
        int v15 = *(_DWORD *)(a1 + 92);
LABEL_41:
        *(_DWORD *)(a1 + 92) = v15 | 2;
        int v25 = *(void **)(a1 + 16);
        if (!v25)
        {
          int v25 = operator new(0x28uLL);
          sub_1001171F8(v25);
          *(void *)(a1 + 16) = v25;
        }

        int v26 = (char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v74)) {
            return 0LL;
          }
        }

        else
        {
          v74[0] = *v26;
          *((void *)this + 1) = v26 + 1;
        }

        int v27 = *((_DWORD *)this + 14);
        int v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 >= v28) {
          return 0LL;
        }
        int v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v74[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
        int v32 = *((_DWORD *)this + 14);
        BOOL v33 = __OFSUB__(v32, 1);
        int v34 = v32 - 1;
        if (v34 < 0 == v33) {
          *((_DWORD *)this + 14) = v34;
        }
        int v35 = (_BYTE *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        unint64_t v17 = v35 + 1;
        *((void *)this + 1) = v17;
LABEL_55:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v74);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v36 = v74[0];
        }

        else
        {
          unsigned int v36 = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        if (v36 > 3)
        {
          wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 3, (int)v36);
        }

        else
        {
          *(_DWORD *)(a1 + 92) |= 4u;
          *(_DWORD *)(a1 + 28) = v36;
        }

        int v37 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v37 + 1;
LABEL_66:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v74) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = *(void *)v74;
        *(_DWORD *)(a1 + 92) |= 8u;
        uint64_t v38 = (_BYTE *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        uint64_t v19 = v38 + 1;
        *((void *)this + 1) = v19;
LABEL_70:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v8);
          if (!(_DWORD)result) {
            return result;
          }
          v39 = (_BYTE *)*((void *)this + 1);
          unint64_t v18 = *((void *)this + 2);
        }

        else
        {
          unint64_t *v8 = *v19;
          v39 = v19 + 1;
          *((void *)this + 1) = v39;
        }

        *(_DWORD *)(a1 + 92) |= 0x10u;
        *((void *)this + 1) = v39 + 1;
LABEL_78:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v74) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 48) = *(void *)v74;
        *(_DWORD *)(a1 + 92) |= 0x20u;
        int v40 = (_BYTE *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        int v21 = v40 + 1;
        *((void *)this + 1) = v21;
LABEL_82:
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v74);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v41 = v74[0];
          v42 = (_BYTE *)*((void *)this + 1);
          unint64_t v20 = *((void *)this + 2);
        }

        else
        {
          unsigned int v41 = *v21;
          v42 = v21 + 1;
          *((void *)this + 1) = v42;
        }

        *(_DWORD *)(a1 + 56) = v41;
        *(_DWORD *)(a1 + 92) |= 0x40u;
        char v22 = v42 + 1;
        *((void *)this + 1) = v22;
LABEL_90:
        if ((unint64_t)v22 >= v20 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v74);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v43 = v74[0];
          v44 = (_BYTE *)*((void *)this + 1);
          unint64_t v20 = *((void *)this + 2);
        }

        else
        {
          unsigned int v43 = *v22;
          v44 = v22 + 1;
          *((void *)this + 1) = v44;
        }

        *(_DWORD *)(a1 + 60) = v43;
        int v23 = *(_DWORD *)(a1 + 92) | 0x80;
        *(_DWORD *)(a1 + 92) = v23;
        *((void *)this + 1) = v44 + 1;
LABEL_98:
        *(_DWORD *)(a1 + 92) = v23 | 0x100;
        unsigned int v45 = *(void **)(a1 + 64);
        if (!v45)
        {
          unsigned int v45 = operator new(0x38uLL);
          sub_10010ECFC((uint64_t)v45);
          *(void *)(a1 + 64) = v45;
        }

        v46 = (char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v74)) {
            return 0LL;
          }
        }

        else
        {
          v74[0] = *v46;
          *((void *)this + 1) = v46 + 1;
        }

        int v47 = *((_DWORD *)this + 14);
        int v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48) {
          return 0LL;
        }
        int v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v74[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        int v52 = *((_DWORD *)this + 14);
        BOOL v33 = __OFSUB__(v52, 1);
        int v53 = v52 - 1;
        if (v53 < 0 == v33) {
          *((_DWORD *)this + 14) = v53;
        }
        v54 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v54 + 1;
LABEL_112:
        *(_DWORD *)(a1 + 92) |= 0x200u;
        v55 = *(void **)(a1 + 72);
        if (!v55)
        {
          v55 = operator new(0x30uLL);
          sub_10010FAB8((uint64_t)v55);
          *(void *)(a1 + 72) = v55;
        }

        v56 = (char *)*((void *)this + 1);
        if ((unint64_t)v56 >= *((void *)this + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v74)) {
            return 0LL;
          }
        }

        else
        {
          v74[0] = *v56;
          *((void *)this + 1) = v56 + 1;
        }

        int v57 = *((_DWORD *)this + 14);
        int v58 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v57 + 1;
        if (v57 >= v58) {
          return 0LL;
        }
        int v59 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v74[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v59);
        int v62 = *((_DWORD *)this + 14);
        BOOL v33 = __OFSUB__(v62, 1);
        int v63 = v62 - 1;
        if (v63 < 0 == v33) {
          *((_DWORD *)this + 14) = v63;
        }
        v64 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v64 + 1;
LABEL_126:
        *(_DWORD *)(a1 + 92) |= 0x400u;
        v65 = *(void **)(a1 + 80);
        if (!v65)
        {
          v65 = operator new(0x60uLL);
          sub_100110260((uint64_t)v65);
          *(void *)(a1 + 80) = v65;
        }

        v66 = (char *)*((void *)this + 1);
        if ((unint64_t)v66 >= *((void *)this + 2) || *v66 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v74)) {
            return 0LL;
          }
        }

        else
        {
          v74[0] = *v66;
          *((void *)this + 1) = v66 + 1;
        }

        int v67 = *((_DWORD *)this + 14);
        int v68 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v67 + 1;
        if (v67 >= v68) {
          return 0LL;
        }
        int v69 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v74[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v69);
        int v72 = *((_DWORD *)this + 14);
        BOOL v33 = __OFSUB__(v72, 1);
        int v73 = v72 - 1;
        if (v73 < 0 == v33) {
          *((_DWORD *)this + 14) = v73;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v11 = TagFallback & 7;
        unint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_55;
      case 4u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_66;
        }
        goto LABEL_33;
      case 5u:
        int v11 = TagFallback & 7;
        uint64_t v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_70;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_78;
        }
        goto LABEL_33;
      case 7u:
        int v11 = TagFallback & 7;
        int v21 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_82;
      case 8u:
        int v11 = TagFallback & 7;
        char v22 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_90;
      case 9u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_33;
        }
        int v23 = *(_DWORD *)(a1 + 92);
        goto LABEL_98;
      case 0xAu:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_112;
        }
        goto LABEL_33;
      case 0xBu:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_126;
        }
        goto LABEL_33;
      default:
        int v11 = TagFallback & 7;
LABEL_33:
        if (v11 == 4) {
          return 1LL;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField( this,  TagFallback,  v7,  a4) & 1) == 0) {
          return 0LL;
        }
        continue;
    }
  }

void sub_100111D3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100111D5C( uint64_t this, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 92);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(this + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 92);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_100800708 + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100111F18( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if ((*((_BYTE *)this + 92) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    *(_BYTE *)a2 = 8;
    unsigned int v6 = (_DWORD)a2 + 1;
    if (v5 > 0x7F)
    {
      uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v5,  v6,  a3);
    }

    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v5;
      uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    }
  }

  int v7 = *((_DWORD *)this + 23);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = (unsigned int *)*((void *)this + 2);
    if (!v8) {
      uint64_t v8 = *(unsigned int **)(qword_100800708 + 16);
    }
    *(_BYTE *)uint64_t v3 = 18;
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8[8];
    if (v9 > 0x7F)
    {
      uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v9,  (int)v3 + 1,  a3);
    }

    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v9;
      uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    }

    uint64_t v3 = sub_100117688((wireless_diagnostics::google::protobuf::internal::WireFormat *)v8, v10, a3);
    int v7 = *((_DWORD *)this + 23);
  }

  if ((v7 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 7);
    *(_BYTE *)uint64_t v3 = 24;
    unint64_t v12 = (unint64_t)v3 + 1;
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v11,  v12,  a3);
    }

    else
    {
      if (v11 <= 0x7F)
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v11;
        uint64_t v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        goto LABEL_19;
      }

      uint64_t v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v11,  v12,  a3);
    }

    uint64_t v3 = v13;
  }

uint64_t sub_10011228C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_45;
  }

  if ((v3 & 1) != 0)
  {
    unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      int v7 = 1;
    }

    int v4 = v7 + 1;
    if ((v3 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_10:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_100800708 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011777C(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    v4 += v10 + v11 + 1;
    int v3 = *(_DWORD *)(a1 + 92);
    goto LABEL_16;
  }

  int v4 = 0;
  if ((v3 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 10;
    }

    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      int v13 = 1;
    }

    v4 += v13 + 1;
  }

  if ((v3 & 8) != 0) {
    LODWORD(v5) = v4 + 9;
  }
  else {
    LODWORD(v5) = v4;
  }
  if ((v3 & 0x10) != 0)
  {
    LODWORD(v5) = v5
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40),  (unint64_t)a2)
                + 1;
    int v3 = *(_DWORD *)(a1 + 92);
  }

  if ((v3 & 0x20) != 0) {
    uint64_t v5 = (v5 + 9);
  }
  else {
    uint64_t v5 = v5;
  }
  if ((v3 & 0x40) != 0)
  {
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 11;
    }

    else if (v14 >= 0x80)
    {
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      int v15 = 2;
    }

    uint64_t v5 = (v15 + v5);
  }

  if ((v3 & 0x80) != 0)
  {
    unint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    if ((v16 & 0x80000000) != 0)
    {
      int v17 = 11;
    }

    else if (v16 >= 0x80)
    {
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      int v17 = 2;
    }

    uint64_t v5 = (v17 + v5);
  }

uint64_t sub_100112518( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  4221LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10011104C((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_1001125C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1001125D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7370LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      unsigned int v6 = *(void **)(a1 + 16);
      if (!v6)
      {
        unsigned int v6 = operator new(0x30uLL);
        sub_100115FA8((uint64_t)v6);
        *(void *)(a1 + 16) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 16);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_100800768 + 16);
      }
      sub_100115FF4((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 2u;
      char v8 = *(void **)(a1 + 24);
      if (!v8)
      {
        char v8 = operator new(0x48uLL);
        sub_100116750((uint64_t)v8);
        *(void *)(a1 + 24) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_100800768 + 24);
      }
      sub_1001167A4((uint64_t)v8, v9);
    }
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1001126F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100112720(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100112768()
{
  return 1LL;
}

uint64_t sub_100112770()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6698;
}

void sub_1001127E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1001127FC(uint64_t a1)
{
  *(void *)a1 = off_1007ADA80;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 144) = 0LL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100112844(_Unwind_Exception *a1)
{
}

void sub_100112858(void *a1)
{
  *a1 = off_1007ADA80;
  uint64_t v2 = (void *)a1[4];
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10011289C(void *a1)
{
}

uint64_t sub_1001128B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 144) = a2;
  return result;
}

void *sub_1001128B8()
{
  uint64_t v0 = operator new(0x98uLL);
  sub_1001127FC((uint64_t)v0);
  return v0;
}

void sub_1001128E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001128F8( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = a1 + 32;
  uint64_t v7 = (unint64_t *)(a1 + 24);
  unsigned int v8 = a1 + 8;
LABEL_2:
  while (2)
  {
    uint64_t v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_45;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v43[0];
        *(_DWORD *)(a1 + 148) |= 1u;
        int v13 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        int v14 = v13 + 1;
        *((void *)this + 1) = v14;
        goto LABEL_16;
      case 2u:
        int v11 = TagFallback & 7;
        int v14 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
LABEL_16:
        if ((unint64_t)v14 >= v12 || (char)*v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result) {
            return result;
          }
          int v15 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unint64_t *v7 = *v14;
          int v15 = v14 + 1;
          *((void *)this + 1) = v15;
        }

        *(_DWORD *)(a1 + 148) |= 2u;
        if ((unint64_t)v15 < v12)
        {
          int v18 = *v15;
          goto LABEL_73;
        }

        continue;
      case 3u:
        int v11 = TagFallback & 7;
        if (v11 != 2)
        {
          if ((TagFallback & 7) == 0)
          {
            unint64_t v16 = (char *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
            goto LABEL_54;
          }

void sub_100113038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100113050( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 148);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v6 = *(_DWORD *)(v5 + 148);
  }

  if ((v6 & 2) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(*(void *)(v5 + 32) + 4 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 40));
  }

  int v8 = *(_DWORD *)(v5 + 148);
  if ((v8 & 8) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 48),  a3);
    int v8 = *(_DWORD *)(v5 + 148);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_27;
    }
  }

  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v8 = *(_DWORD *)(v5 + 148);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100113258( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  char v3 = a2;
  int v5 = *((_DWORD *)this + 37);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = *((void *)this + 2);
    *(_BYTE *)a2 = 9;
    *(void *)((char *)a2 + 1) = v6;
    char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 9);
    int v5 = *((_DWORD *)this + 37);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((void *)this + 3);
    *(_BYTE *)char v3 = 16;
    char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v7,  (unint64_t)v3 + 1,  a3);
  }

  if (*((int *)this + 10) >= 1)
  {
    uint64_t v8 = 0LL;
    do
    {
      *(_BYTE *)char v3 = 24;
      if (v9 > 0x7F)
      {
        char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v9,  (int)v3 + 1,  a3);
      }

      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v9;
        char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      }

      ++v8;
    }

    while (v8 < *((int *)this + 10));
  }

  int v10 = *((_DWORD *)this + 37);
  if ((v10 & 8) != 0)
  {
    uint64_t v16 = *((void *)this + 6);
    *(_BYTE *)char v3 = 33;
    *(void *)((char *)v3 + 1) = v16;
    char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
    int v10 = *((_DWORD *)this + 37);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_30;
    }
  }

  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_13;
  }

  uint64_t v17 = *((void *)this + 7);
  *(_BYTE *)char v3 = 41;
  *(void *)((char *)v3 + 1) = v17;
  char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v10 = *((_DWORD *)this + 37);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

uint64_t sub_100113794(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(_DWORD *)(a1 + 148);
  if ((_BYTE)v3)
  {
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  (unint64_t)a2)
          + 1;
      int v3 = *(_DWORD *)(a1 + 148);
    }

    int v5 = v4 + 9;
    if ((v3 & 8) == 0) {
      int v5 = v4;
    }
    if ((v3 & 0x10) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x20) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x40) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x80) != 0) {
      int v6 = v5 + 9;
    }
    else {
      int v6 = v5;
    }
  }

  else
  {
    int v6 = 0;
  }

  if ((v3 & 0xFF00) != 0)
  {
    int v7 = v6 + 9;
    if ((v3 & 0x100) == 0) {
      int v7 = v6;
    }
    if ((v3 & 0x200) != 0) {
      v7 += 9;
    }
    if ((v3 & 0x400) != 0) {
      v7 += 9;
    }
    if ((v3 & 0x800) != 0) {
      v7 += 9;
    }
    if ((v3 & 0x1000) != 0) {
      v7 += 9;
    }
    if ((v3 & 0x2000) != 0) {
      v7 += 9;
    }
    if ((v3 & 0x4000) != 0) {
      int v6 = v7 + 9;
    }
    else {
      int v6 = v7;
    }
  }

  int v8 = *(_DWORD *)(a1 + 40);
  if (v8 < 1)
  {
    int v10 = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    int v10 = 0;
    do
    {
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        int v8 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        int v12 = 1;
      }

      v10 += v12;
      ++v9;
    }

    while (v9 < v8);
  }

  uint64_t v13 = (v10 + v6 + v8);
  int v14 = *(void **)(a1 + 8);
  if (v14 && *v14 != v14[1]) {
    uint64_t v13 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize( (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8),  a2)
  }
        + v13;
  *(_DWORD *)(a1 + 144) = v13;
  return v13;
}

uint64_t sub_100113904( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  4963LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010C748((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_1001139AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1001139C4(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100113A0C()
{
  return 1LL;
}

uint64_t sub_100113A14()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6720;
}

void sub_100113A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100113AA0(uint64_t a1)
{
  *(void *)a1 = off_1007ADB30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

void sub_100113ADC(_Unwind_Exception *a1)
{
}

void sub_100113AF0(uint64_t a1)
{
  *(void *)a1 = off_1007ADB30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100113B20(uint64_t a1)
{
  *(void *)a1 = off_1007ADB30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete(v2);
}

uint64_t sub_100113B54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

void *sub_100113B5C()
{
  uint64_t v0 = operator new(0x30uLL);
  sub_100113AA0((uint64_t)v0);
  return v0;
}

void sub_100113B88(_Unwind_Exception *a1)
{
}

uint64_t sub_100113B9C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v7 = (char *)*((void *)this + 1);
          if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v7 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v9 = TagFallback >> 3;
          int v10 = TagFallback & 7;
          int v12 = (char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v12 >= v11 || *v12 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v17);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v13 = v17[0];
            int v14 = (_BYTE *)*((void *)this + 1);
            unint64_t v11 = *((void *)this + 2);
          }

          else
          {
            unsigned int v13 = *v12;
            int v14 = v12 + 1;
            *((void *)this + 1) = v14;
          }

          *(_BYTE *)(a1 + 32) = v13 != 0;
          *(_DWORD *)(a1 + 40) |= 1u;
          if ((unint64_t)v14 < v11 && *v14 == 17)
          {
            *((void *)this + 1) = v14 + 1;
            goto LABEL_27;
          }
        }

        if (v9 != 2) {
          break;
        }
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_19;
        }
LABEL_27:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v17) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v17;
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 25)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_31;
        }
      }

      if (v9 != 3) {
        break;
      }
      int v10 = TagFallback & 7;
      if (v10 != 1) {
        goto LABEL_19;
      }
LABEL_31:
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v17) & 1) == 0) {
        return 0LL;
      }
      *(void *)(a1 + 24) = *(void *)v17;
      *(_DWORD *)(a1 + 40) |= 4u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v10 = TagFallback & 7;
LABEL_19:
    if (v10 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) != 0);
  return 0LL;
}

uint64_t sub_100113D8C( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(this + 32),  (BOOL)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 16),  a3);
  if ((*(_DWORD *)(v5 + 40) & 4) != 0) {
LABEL_4:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
LABEL_5:
  unsigned int v9 = *(void **)(v5 + 8);
  char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  int v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
    }
  }

  return this;
}

uint64_t sub_100113E28(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v10 = *(void *)(a1 + 16);
    *(_BYTE *)a2 = 17;
    *(void *)(a2 + 1) = v10;
    a2 += 9LL;
    if ((*(_DWORD *)(a1 + 40) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)a2 = 8;
  *(_BYTE *)(a2 + 1) = v9;
  a2 += 2LL;
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v3 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 24);
    *(_BYTE *)a2 = 25;
    *(void *)(a2 + 1) = v4;
    a2 += 9LL;
  }

uint64_t sub_100113F18(_DWORD *a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = a1[10];
  unsigned int v4 = 2 * (v3 & 1);
  if ((v3 & 2) != 0) {
    unsigned int v4 = (2 * (v3 & 1)) | 9;
  }
  if ((v3 & 4) != 0) {
    v4 += 9;
  }
  else {
    uint64_t v5 = 0LL;
  }
  char v8 = (void *)*((void *)a1 + 1);
  int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 2);
  int v7 = v8;
  if (v8 && *v7 != v7[1]) {
  a1[9] = v5;
  }
  return v5;
}

uint64_t sub_100113F84( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  5293LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010C9EC((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10011402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100114044(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_10011408C()
{
  return 1LL;
}

uint64_t sub_100114094()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6730;
}

void sub_10011410C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100114120(uint64_t a1)
{
  *(void *)a1 = off_1007ADBE0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 1LL;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_100114164(_Unwind_Exception *a1)
{
}

void sub_100114178(void *a1)
{
  *a1 = off_1007ADBE0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1001141B4(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_1001141B4(void *result)
{
  if ((void *)qword_100800758 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100114214(void *a1)
{
}

uint64_t sub_100114228(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

void *sub_100114230()
{
  uint64_t v0 = operator new(0x30uLL);
  sub_100114120((uint64_t)v0);
  return v0;
}

void sub_10011425C(_Unwind_Exception *a1)
{
}

uint64_t sub_100114270( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  int v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v9 = TagFallback >> 3;
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_21;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        unsigned int v13 = *(void **)(a1 + 16);
        if (!v13)
        {
          unsigned int v13 = operator new(0x90uLL);
          sub_100114A7C((uint64_t)v13);
          *(void *)(a1 + 16) = v13;
        }

        int v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v37)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v37 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v23 < *((void *)this + 2) && *v23 == 18)
        {
          *((void *)this + 1) = v23 + 1;
          goto LABEL_33;
        }
      }

      if (v9 == 2) {
        break;
      }
      if (v9 == 3)
      {
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          int v12 = (char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          goto LABEL_47;
        }
      }

      else
      {
        int v10 = TagFallback & 7;
      }

void sub_1001145A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001145C0( uint64_t this, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t v10 = *(void *)(this + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_100800758 + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v10,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v11 = *(void *)(v5 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_100800758 + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v11,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 4) != 0) {
LABEL_4:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 32),  (int)a2,  a4);
LABEL_5:
  unsigned int v9 = *(void **)(v5 + 8);
  char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  int v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
    }
  }

  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10011467C( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
  {
    int v7 = (unsigned int *)*((void *)this + 2);
    if (!v7) {
      int v7 = *(unsigned int **)(qword_100800758 + 16);
    }
    *(_BYTE *)a2 = 10;
    unsigned int v8 = (_DWORD)a2 + 1;
    unsigned int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7[34];
    if (v9 > 0x7F)
    {
      uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v9,  v8,  a3);
    }

    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }

    uint64_t v4 = sub_1001156A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v7, v10, a3, a4);
    int v6 = *((_DWORD *)this + 10);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
LABEL_17:
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 8);
      *(_BYTE *)uint64_t v4 = 24;
      unint64_t v15 = (unint64_t)v4 + 1;
      if ((v14 & 0x80000000) != 0)
      {
        int v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v14,  v15,  a3);
      }

      else
      {
        if (v14 <= 0x7F)
        {
          *((_BYTE *)v4 + 1) = (_BYTE)v14;
          uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
          goto LABEL_23;
        }

        int v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v14,  v15,  a3);
      }

      uint64_t v4 = v16;
      goto LABEL_23;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v11 = (unsigned int *)*((void *)this + 3);
  if (!v11) {
    uint64_t v11 = *(unsigned int **)(qword_100800758 + 24);
  }
  *(_BYTE *)uint64_t v4 = 18;
  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11[8];
  if (v12 > 0x7F)
  {
    unsigned int v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v12,  (int)v4 + 1,  a3);
  }

  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v12;
    unsigned int v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
  }

  uint64_t v4 = sub_100117688((wireless_diagnostics::google::protobuf::internal::WireFormat *)v11, v13, a3);
  if ((*((_DWORD *)this + 10) & 4) != 0) {
    goto LABEL_17;
  }
LABEL_23:
  uint64_t v19 = (void *)*((void *)this + 1);
  uint64_t v18 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  int v17 = v19;
  if (!v19 || *v17 == v17[1]) {
    return v4;
  }
  else {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray( v18,  v4,  a3);
  }
}

uint64_t sub_1001147BC(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_25;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_100800758 + 16);
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100115BFC(v5, a2);
    int v7 = (int)v6;
    else {
      int v8 = 1;
    }
    uint64_t v4 = (v7 + v8 + 1);
    int v3 = *(_DWORD *)(a1 + 40);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = 0LL;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_100800758 + 24);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011777C(v9, a2);
    int v11 = (int)v10;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    int v3 = *(_DWORD *)(a1 + 40);
  }

uint64_t sub_1001148E0( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  5597LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010C5D4((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100114988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1001149A0(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_1001149E8()
{
  return 1LL;
}

uint64_t sub_1001149F0()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6740;
}

void sub_100114A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100114A7C(uint64_t a1)
{
  *(void *)a1 = off_1007ADC90;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  return a1;
}

void sub_100114AD0(_Unwind_Exception *a1)
{
}

void sub_100114AE4(void *a1)
{
  *a1 = off_1007ADC90;
  sub_100114B28((uint64_t)a1);
  uint64_t v2 = (void *)a1[14];
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100114B28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_100114B7C(void *a1)
{
}

uint64_t sub_100114B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

void *sub_100114B98()
{
  uint64_t v0 = operator new(0x90uLL);
  sub_100114A7C((uint64_t)v0);
  return v0;
}

void sub_100114BC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100114BD8( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = a1 + 112;
  int v7 = (unint64_t *)(a1 + 24);
  char v8 = (unsigned int *)(a1 + 80);
  uint64_t v9 = (unsigned int *)(a1 + 84);
  uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (2)
  {
    int v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v11 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v13 = TagFallback & 7;
        if (v13 != 1) {
          goto LABEL_48;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 1u;
        unint64_t v15 = (_BYTE *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        int v16 = v15 + 1;
        *((void *)this + 1) = v16;
        goto LABEL_16;
      case 2u:
        int v13 = TagFallback & 7;
        int v16 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
LABEL_16:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result) {
            return result;
          }
          int v17 = (_BYTE *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }

        else
        {
          unint64_t *v7 = *v16;
          int v17 = v16 + 1;
          *((void *)this + 1) = v17;
        }

        *(_DWORD *)(a1 + 140) |= 2u;
        *((void *)this + 1) = v17 + 1;
LABEL_57:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 4u;
        int v27 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v27 + 1;
LABEL_61:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 8u;
        int v28 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v28 + 1;
LABEL_65:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 48) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x10u;
        uint64_t v29 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v29 + 1;
LABEL_69:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 56) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x20u;
        uint64_t v30 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v30 + 1;
LABEL_73:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 64) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x40u;
        int v31 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v31 + 1;
LABEL_77:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 72) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x80u;
        int v32 = (_BYTE *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        uint64_t v19 = v32 + 1;
        *((void *)this + 1) = v19;
LABEL_81:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v33 = (_BYTE *)*((void *)this + 1);
          unint64_t v18 = *((void *)this + 2);
        }

        else
        {
          unsigned int *v8 = *v19;
          uint64_t v33 = v19 + 1;
          *((void *)this + 1) = v33;
        }

        *(_DWORD *)(a1 + 140) |= 0x100u;
        int v20 = v33 + 1;
        *((void *)this + 1) = v20;
LABEL_89:
        if ((unint64_t)v20 >= v18 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result) {
            return result;
          }
          signed int v34 = (_BYTE *)*((void *)this + 1);
          unint64_t v18 = *((void *)this + 2);
        }

        else
        {
          *uint64_t v9 = *v20;
          signed int v34 = v20 + 1;
          *((void *)this + 1) = v34;
        }

        int v21 = *(_DWORD *)(a1 + 140) | 0x200;
        *(_DWORD *)(a1 + 140) = v21;
        *((void *)this + 1) = v34 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 140) = v21 | 0x400;
        int v35 = *(void **)(a1 + 88);
        if (v35 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v35 = operator new(0x18uLL);
          v35[1] = 0LL;
          v35[2] = 0LL;
          void *v35 = 0LL;
          *(void *)(a1 + 88) = v35;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v35);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v36 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v36 + 1;
LABEL_103:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 96) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x800u;
        unsigned int v37 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v37 + 1;
LABEL_107:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 104) = *(void *)v59;
        *(_DWORD *)(a1 + 140) |= 0x1000u;
        unsigned int v38 = (_BYTE *)*((void *)this + 1);
        continue;
      case 3u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_57;
        }
        goto LABEL_48;
      case 4u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_61;
        }
        goto LABEL_48;
      case 5u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_65;
        }
        goto LABEL_48;
      case 6u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_69;
        }
        goto LABEL_48;
      case 7u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_73;
        }
        goto LABEL_48;
      case 8u:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_77;
        }
        goto LABEL_48;
      case 9u:
        int v13 = TagFallback & 7;
        uint64_t v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_81;
      case 0xAu:
        int v13 = TagFallback & 7;
        int v20 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_89;
      case 0xBu:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_48;
        }
        int v21 = *(_DWORD *)(a1 + 140);
        goto LABEL_97;
      case 0xCu:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_103;
        }
        goto LABEL_48;
      case 0xDu:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_107;
        }
        goto LABEL_48;
      case 0xEu:
        int v13 = TagFallback & 7;
        if (v13 == 1) {
          goto LABEL_111;
        }
        if (v13 != 2)
        {
LABEL_48:
          if (v13 == 4) {
            return 1LL;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField( this,  TagFallback,  v10,  a4) & 1) == 0) {
            return 0LL;
          }
          continue;
        }

        uint64_t result = sub_10004C598(this, v6);
        if (!(_DWORD)result) {
          return result;
        }
LABEL_127:
        unsigned int v38 = (_BYTE *)*((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        int v53 = *v38;
        if (v53 != 113)
        {
          if (v53 == 120)
          {
            uint64_t v23 = v38 + 1;
            *((void *)this + 1) = v23;
LABEL_131:
            if ((unint64_t)v23 >= v24 || *v23 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v59);
              if (!(_DWORD)result) {
                return result;
              }
              signed int v54 = v59[0];
            }

            else
            {
              signed int v54 = *v23;
              *((void *)this + 1) = v23 + 1;
            }

            if (sub_10005DC68(v54))
            {
              if (!sub_10005DC68(v54)) {
                sub_10038C724();
              }
              *(_DWORD *)(a1 + 140) |= 0x4000u;
              *(_DWORD *)(a1 + 128) = v54;
            }

            else
            {
              wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v10, 15, v54);
            }

            v55 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v25 = *((void *)this + 2);
            if ((int)v25 - (int)v55 >= 2 && *v55 == 128 && v55[1] == 1)
            {
              int v26 = (char *)(v55 + 2);
              *((void *)this + 1) = v26;
LABEL_144:
              if ((unint64_t)v26 >= v25 || *v26 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v59);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v56 = v59[0];
              }

              else
              {
                unsigned int v56 = *v26;
                *((void *)this + 1) = v26 + 1;
              }

              if (v56 > 1)
              {
                wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v10, 16, (int)v56);
              }

              else
              {
                *(_DWORD *)(a1 + 140) |= 0x8000u;
                *(_DWORD *)(a1 + 132) = v56;
              }

              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
          }

          continue;
        }

void sub_10011546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100115484( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 140);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v6 = *(_DWORD *)(v5 + 140);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 140);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1001156A8( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 35);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *((void *)this + 2);
    *(_BYTE *)a2 = 9;
    *(void *)((char *)a2 + 1) = v7;
    uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 9);
    int v6 = *((_DWORD *)this + 35);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((void *)this + 3);
  *(_BYTE *)uint64_t v4 = 16;
  uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray( v8,  (unint64_t)v4 + 1,  a3);
  int v6 = *((_DWORD *)this + 35);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_100115BFC(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(_DWORD *)(a1 + 140);
  if ((_BYTE)v3)
  {
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  (unint64_t)a2)
          + 1;
      int v3 = *(_DWORD *)(a1 + 140);
    }

    int v5 = v4 + 9;
    if ((v3 & 4) == 0) {
      int v5 = v4;
    }
    if ((v3 & 8) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x20) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x40) != 0) {
      v5 += 9;
    }
    if ((v3 & 0x80) != 0) {
      int v6 = v5 + 9;
    }
    else {
      int v6 = v5;
    }
  }

  else
  {
    int v6 = 0;
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
      if (v7 >= 0x80)
      {
        int v3 = *(_DWORD *)(a1 + 140);
      }

      else
      {
        int v8 = 2;
      }

      v6 += v8;
      if ((v3 & 0x200) == 0)
      {
LABEL_21:
        if ((v3 & 0x400) == 0)
        {
LABEL_40:
          int v17 = v6 + 9;
          if ((v3 & 0x800) == 0) {
            int v17 = v6;
          }
          if ((v3 & 0x1000) != 0) {
            int v6 = v17 + 9;
          }
          else {
            int v6 = v17;
          }
          if ((v3 & 0x4000) != 0)
          {
            uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
            if ((v18 & 0x80000000) != 0)
            {
              int v19 = 11;
            }

            else if (v18 >= 0x80)
            {
              int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( v18,  a2)
                  + 1;
              int v3 = *(_DWORD *)(a1 + 140);
            }

            else
            {
              int v19 = 2;
            }

            v6 += v19;
          }

          if ((v3 & 0x8000) != 0)
          {
            uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
            if ((v20 & 0x80000000) != 0)
            {
              int v21 = 12;
            }

            else if (v20 >= 0x80)
            {
              int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( v20,  a2)
                  + 2;
            }

            else
            {
              int v21 = 3;
            }

            v6 += v21;
          }

          goto LABEL_59;
        }

uint64_t sub_100115E0C( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  6366LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10010B294((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100115EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100115ECC(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100115F14()
{
  return 1LL;
}

uint64_t sub_100115F1C()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6750;
}

void sub_100115F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100115FA8(uint64_t a1)
{
  *(void *)a1 = off_1007ADD40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100115FE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100115FF4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  6712LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 44) & 4) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_7;
  }

  uint64_t v8 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 1u;
  *(void *)(a1 + 16) = v8;
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
LABEL_7:
    uint64_t v6 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(void *)(a1 + 32) = v6;
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1001160D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1001160E8(uint64_t a1)
{
  *(void *)a1 = off_1007ADD40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100116118(uint64_t a1)
{
  *(void *)a1 = off_1007ADD40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete(v2);
}

uint64_t sub_10011614C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

void *sub_100116154()
{
  uint64_t v0 = operator new(0x30uLL);
  sub_100115FA8((uint64_t)v0);
  return v0;
}

void sub_100116180(_Unwind_Exception *a1)
{
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100116194(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 44))
  {
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 9) = 0;
  if (v2) {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  }
  return result;
}

uint64_t sub_1001161B8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v9 = TagFallback >> 3;
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_28;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        uint64_t v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 17)
        {
          *((void *)this + 1) = v11 + 1;
LABEL_18:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
            return 0LL;
          }
          *(void *)(a1 + 24) = v14;
          *(_DWORD *)(a1 + 44) |= 2u;
          int v12 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 25)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_22;
          }
        }
      }

      if (v9 == 2)
      {
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_28;
        }
        goto LABEL_18;
      }

      if (v9 != 3)
      {
        int v10 = TagFallback & 7;
        goto LABEL_28;
      }

      int v10 = TagFallback & 7;
      if (v10 == 1) {
        break;
      }
LABEL_28:
      if (v10 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100116380( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 44);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v4 + 24),  a3);
  if ((*(_DWORD *)(v4 + 44) & 4) != 0) {
LABEL_4:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v4 + 32),  a3);
LABEL_5:
  uint64_t v8 = *(void **)(v4 + 8);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  unsigned int v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
    }
  }

  return this;
}

uint64_t sub_10011641C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v10 = *(void *)(a1 + 24);
    *(_BYTE *)a2 = 17;
    *(void *)(a2 + 1) = v10;
    a2 += 9LL;
    if ((*(_DWORD *)(a1 + 44) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  uint64_t v9 = *(void *)(a1 + 16);
  *(_BYTE *)a2 = 9;
  *(void *)(a2 + 1) = v9;
  a2 += 9LL;
  int v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v3 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 32);
    *(_BYTE *)a2 = 25;
    *(void *)(a2 + 1) = v4;
    a2 += 9LL;
  }

uint64_t sub_100116544(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    v4 += 9;
  }
  if (*(_BYTE *)(a1 + 44)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v8 = *(void **)(a1 + 8);
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  uint64_t v7 = v8;
  if (v8 && *v7 != v7[1]) {
  *(_DWORD *)(a1 + 40) = v5;
  }
  return v5;
}

uint64_t sub_1001165B4( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  6700LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_100115FF4((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_10011665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100116674(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_1001166BC()
{
  return 1LL;
}

uint64_t sub_1001166C4()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6770;
}

void sub_10011673C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100116750(uint64_t a1)
{
  *(void *)a1 = off_1007ADDF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_100116790(_Unwind_Exception *a1)
{
}

uint64_t sub_1001167A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7096LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 68);
  if (!(_BYTE)v5) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 68) |= 1u;
    *(void *)(a1 + 16) = v8;
    int v5 = *(_DWORD *)(a2 + 68);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(a2 + 68) & 2) == 0)
  {
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 68) |= 2u;
  *(void *)(a1 + 24) = v9;
  int v5 = *(_DWORD *)(a2 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }

void sub_1001168E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1001168F8(uint64_t a1)
{
  *(void *)a1 = off_1007ADDF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100116928(uint64_t a1)
{
  *(void *)a1 = off_1007ADDF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete(v2);
}

uint64_t sub_10011695C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

void *sub_100116964()
{
  uint64_t v0 = operator new(0x48uLL);
  sub_100116750((uint64_t)v0);
  return v0;
}

void sub_100116990(_Unwind_Exception *a1)
{
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1001169A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 68))
  {
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 15) = 0;
  if (v2) {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  }
  return result;
}

uint64_t sub_1001169CC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_40;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 68) |= 1u;
        uint64_t v10 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_40;
        }
LABEL_15:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = v16;
        *(_DWORD *)(a1 + 68) |= 2u;
        uint64_t v11 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v11 + 1;
LABEL_20:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = v16;
        *(_DWORD *)(a1 + 68) |= 4u;
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v12 + 1;
LABEL_25:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = v16;
        *(_DWORD *)(a1 + 68) |= 8u;
        char v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 48) = v16;
        *(_DWORD *)(a1 + 68) |= 0x10u;
        unint64_t v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_35:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 56) = v16;
        *(_DWORD *)(a1 + 68) |= 0x20u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_20;
        }
        goto LABEL_40;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_25;
        }
        goto LABEL_40;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_30;
        }
        goto LABEL_40;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_35;
        }
        goto LABEL_40;
      default:
        int v9 = TagFallback & 7;
LABEL_40:
        if (v9 == 4) {
          return 1LL;
        }
        continue;
    }

    return result;
  }

uint64_t sub_100116CA0( uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 68);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(this + 16),  a3);
    int v5 = *(_DWORD *)(v4 + 68);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v4 + 24),  a3);
  int v5 = *(_DWORD *)(v4 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_100116D90(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    *(_BYTE *)a2 = 9;
    *(void *)(a2 + 1) = v9;
    a2 += 9LL;
    int v3 = *(_DWORD *)(a1 + 68);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v10 = *(void *)(a1 + 24);
  *(_BYTE *)a2 = 17;
  *(void *)(a2 + 1) = v10;
  a2 += 9LL;
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_100116FC0(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 68);
  if (*(_BYTE *)(a1 + 68))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x20) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7 && *v7 != v7[1]) {
  *(_DWORD *)(a1 + 64) = v5;
  }
  return v5;
}

uint64_t sub_10011705C( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7084LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_1001167A4((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100117104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10011711C(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100117164()
{
  return 1LL;
}

uint64_t sub_10011716C()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6780;
}

void sub_1001171E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1001171F8(void *a1)
{
  *a1 = off_1007ADEA0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  return a1;
}

void sub_100117230(_Unwind_Exception *a1)
{
}

void sub_100117244(void *a1)
{
  *a1 = off_1007ADEA0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100117280(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_100117280(void *result)
{
  if ((void *)qword_100800768 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1001172E0(void *a1)
{
}

uint64_t sub_1001172F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void *sub_1001172FC()
{
  uint64_t v0 = operator new(0x28uLL);
  sub_1001171F8(v0);
  return v0;
}

void sub_100117328(_Unwind_Exception *a1)
{
}

uint64_t sub_10011733C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_18;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v10 = *(void **)(a1 + 16);
        if (!v10)
        {
          uint64_t v10 = operator new(0x30uLL);
          sub_100115FA8((uint64_t)v10);
          *(void *)(a1 + 16) = v10;
        }

        uint64_t v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v31)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v31 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0LL;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        uint64_t v20 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v20 < *((void *)this + 2) && *v20 == 18)
        {
          *((void *)this + 1) = v20 + 1;
          goto LABEL_30;
        }
      }

      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_18;
      }
LABEL_30:
      *(_DWORD *)(a1 + 36) |= 2u;
      int v21 = *(void **)(a1 + 24);
      if (!v21)
      {
        int v21 = operator new(0x48uLL);
        sub_100116750((uint64_t)v21);
        *(void *)(a1 + 24) = v21;
      }

      unint64_t v22 = (char *)*((void *)this + 1);
      if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v32)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v32 = *v22;
        *((void *)this + 1) = v22 + 1;
      }

      int v23 = *((_DWORD *)this + 14);
      int v24 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v23 + 1;
      if (v23 >= v24) {
        return 0LL;
      }
      int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
      int v28 = *((_DWORD *)this + 14);
      BOOL v18 = __OFSUB__(v28, 1);
      int v29 = v28 - 1;
      if (v29 < 0 == v18) {
        *((_DWORD *)this + 14) = v29;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v9 = TagFallback & 7;
LABEL_18:
    if (v9 == 4) {
      return 1LL;
    }
  }

void sub_1001175D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001175F0( uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(this + 16);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_100800768 + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }

  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_100800768 + 24);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  }

  uint64_t v11 = *(void **)(v5 + 8);
  uint64_t v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  int v9 = v11;
  if (v11)
  {
    if (*v9 != v9[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v10, a2, a3);
    }
  }

  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100117688( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  char v3 = a2;
  int v5 = *((_DWORD *)this + 9);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = *((void *)this + 2);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_100800768 + 16);
    }
    *(_BYTE *)a2 = 10;
    unsigned int v7 = (_DWORD)a2 + 1;
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v6 + 40);
    if (v8 > 0x7F)
    {
      uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v7, a3);
    }

    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v8;
      uint64_t v9 = (uint64_t)v3 + 2;
    }

    char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10011641C(v6, v9, a3);
    int v5 = *((_DWORD *)this + 9);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v10 = *((void *)this + 3);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_100800768 + 24);
    }
    *(_BYTE *)char v3 = 18;
    uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v10 + 64);
    if (v11 > 0x7F)
    {
      uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v11,  (int)v3 + 1,  a3);
    }

    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v11;
      uint64_t v12 = (uint64_t)v3 + 2;
    }

    char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100116D90(v10, v12, a3);
  }

  uint64_t v15 = (void *)*((void *)this + 1);
  int v14 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  int v13 = v15;
  if (!v15 || *v13 == v13[1]) {
    return v3;
  }
  else {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray( v14,  v3,  a3);
  }
}

uint64_t sub_10011777C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  if (!*(_BYTE *)(a1 + 36))
  {
    uint64_t v3 = 0LL;
    goto LABEL_18;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    uint64_t v3 = 0LL;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_100800768 + 16);
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100116544(v4, a2);
  int v6 = (int)v5;
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_100800768 + 24);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100116FC0(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v10 + v11 + 1);
  }

uint64_t sub_10011786C( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7358LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_1001125D8((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100117914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10011792C(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100117974()
{
  return 1LL;
}

uint64_t sub_10011797C()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6760;
}

void sub_1001179F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100117A08(void *a1)
{
  *a1 = off_1007ADF50;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = 0LL;
  return a1;
}

void sub_100117A40(_Unwind_Exception *a1)
{
}

uint64_t sub_100117A54(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7628LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      int v6 = *(void **)(a1 + 16);
      if (!v6)
      {
        int v6 = operator new(0x40uLL);
        sub_10010A5F8((uint64_t)v6);
        *(void *)(a1 + 16) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 16);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1008006F0 + 16);
      }
      sub_10010A64C((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 2u;
      char v8 = *(void **)(a1 + 24);
      if (!v8)
      {
        char v8 = operator new(0x48uLL);
        sub_10010B684((uint64_t)v8);
        *(void *)(a1 + 24) = v8;
      }

      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_1008006F0 + 24);
      }
      sub_10010B6DC((uint64_t)v8, v9);
    }
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100117B70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100117B9C(void *a1)
{
  *a1 = off_1007ADF50;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100117BD8(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_100117BD8(void *result)
{
  if ((void *)qword_1008006F0 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100117C38(void *a1)
{
}

uint64_t sub_100117C4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void *sub_100117C54()
{
  uint64_t v0 = operator new(0x28uLL);
  sub_100117A08(v0);
  return v0;
}

void sub_100117C80(_Unwind_Exception *a1)
{
}

uint64_t sub_100117C94(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = sub_10010A948(this);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }

    if ((v2 & 2) != 0)
    {
      this = *(void *)(v1 + 24);
      if (this) {
        this = sub_10010BA3C(this);
      }
    }
  }

  uint64_t v4 = *(void *)(v1 + 8);
  char v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v3 + 7) = 0;
  if (v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v3);
  }
  return this;
}

uint64_t sub_100117CF8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_18;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        int v10 = *(void **)(a1 + 16);
        if (!v10)
        {
          int v10 = operator new(0x40uLL);
          sub_10010A5F8((uint64_t)v10);
          *(void *)(a1 + 16) = v10;
        }

        char v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v31)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v31 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0LL;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        uint64_t v20 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v20 < *((void *)this + 2) && *v20 == 18)
        {
          *((void *)this + 1) = v20 + 1;
          goto LABEL_30;
        }
      }

      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_18;
      }
LABEL_30:
      *(_DWORD *)(a1 + 36) |= 2u;
      int v21 = *(void **)(a1 + 24);
      if (!v21)
      {
        int v21 = operator new(0x48uLL);
        sub_10010B684((uint64_t)v21);
        *(void *)(a1 + 24) = v21;
      }

      unint64_t v22 = (char *)*((void *)this + 1);
      if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v32)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v32 = *v22;
        *((void *)this + 1) = v22 + 1;
      }

      int v23 = *((_DWORD *)this + 14);
      int v24 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v23 + 1;
      if (v23 >= v24) {
        return 0LL;
      }
      int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
      int v28 = *((_DWORD *)this + 14);
      BOOL v18 = __OFSUB__(v28, 1);
      int v29 = v28 - 1;
      if (v29 < 0 == v18) {
        *((_DWORD *)this + 14) = v29;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v9 = TagFallback & 7;
LABEL_18:
    if (v9 == 4) {
      return 1LL;
    }
  }

void sub_100117F94(_Unwind_Exception *a1)
{
}

uint64_t sub_100117FAC( uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(this + 16);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1008006F0 + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }

  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1008006F0 + 24);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  }

  char v11 = *(void **)(v5 + 8);
  int v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  int v9 = v11;
  if (v11)
  {
    if (*v9 != v9[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v10, a2, a3);
    }
  }

  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100118044( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 9);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)*((void *)this + 2);
    if (!v7) {
      uint64_t v7 = *(unsigned int **)(qword_1008006F0 + 16);
    }
    *(_BYTE *)a2 = 10;
    unsigned int v8 = (_DWORD)a2 + 1;
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7[14];
    if (v9 > 0x7F)
    {
      int v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v9,  v8,  a3);
    }

    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      int v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }

    uint64_t v4 = sub_10010AF30((wireless_diagnostics::google::protobuf::internal::WireFormat *)v7, v10, a3, a4);
    int v6 = *((_DWORD *)this + 9);
  }

  if ((v6 & 2) != 0)
  {
    char v11 = (unsigned int *)*((void *)this + 3);
    if (!v11) {
      char v11 = *(unsigned int **)(qword_1008006F0 + 24);
    }
    *(_BYTE *)uint64_t v4 = 18;
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11[16];
    if (v12 > 0x7F)
    {
      int v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v12,  (int)v4 + 1,  a3);
    }

    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v12;
      int v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }

    uint64_t v4 = sub_10010C1D4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v11, v13, a3, a4);
  }

  unint64_t v16 = (void *)*((void *)this + 1);
  uint64_t v15 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  int v14 = v16;
  if (!v16 || *v14 == v14[1]) {
    return v4;
  }
  else {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray( v15,  v4,  a3);
  }
}

uint64_t sub_100118138(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  if (!*(_BYTE *)(a1 + 36))
  {
    uint64_t v3 = 0LL;
    goto LABEL_18;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    uint64_t v3 = 0LL;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_1008006F0 + 16);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010B090(v4, a2);
  int v6 = (int)v5;
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1008006F0 + 24);
    }
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010C388(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v10 + v11 + 1);
  }

uint64_t sub_100118228( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7616LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_100117A54((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_1001182D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1001182E8(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100118330()
{
  return 1LL;
}

uint64_t sub_100118338()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6668;
}

void sub_1001183B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1001183C4(void *a1)
{
  *a1 = off_1007AE000;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0LL;
  a1[3] = 0LL;
  return a1;
}

void sub_1001183F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10011840C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7845LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v5 = *(void **)(a1 + 16);
    if (!v5)
    {
      uint64_t v5 = operator new(0x28uLL);
      sub_100117A08(v5);
      *(void *)(a1 + 16) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1008006E8 + 16);
    }
    sub_100117A54((uint64_t)v5, v6);
  }

  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom( (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8),  (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1001184D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100118500(void *a1)
{
  *a1 = off_1007AE000;
  if ((void *)qword_1008006E8 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10011855C(void *a1)
{
}

uint64_t sub_100118570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100118578(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1008006E8;
  if (!qword_1008006E8)
  {
    sub_100109A28(0LL, a2, a3, a4);
    return qword_1008006E8;
  }

  return result;
}

void *sub_1001185A4()
{
  uint64_t v0 = operator new(0x20uLL);
  sub_1001183C4(v0);
  return v0;
}

void sub_1001185D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001185E4(uint64_t this)
{
  uint64_t v1 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = sub_100117C94(this);
    }
  }

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v2 + 5) = 0;
  if (v3) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v2);
  }
  return this;
}

uint64_t sub_100118630( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v7 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      int v9 = *(void **)(a1 + 16);
      if (!v9)
      {
        int v9 = operator new(0x28uLL);
        sub_100117A08(v9);
        *(void *)(a1 + 16) = v9;
      }

      int v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v20)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v20 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      int v11 = *((_DWORD *)this + 14);
      int v12 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v11 + 1;
      if (v11 >= v12) {
        return 0LL;
      }
      int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
      int v16 = *((_DWORD *)this + 14);
      BOOL v17 = __OFSUB__(v16, 1);
      int v18 = v16 - 1;
      if (v18 < 0 == v17) {
        *((_DWORD *)this + 14) = v18;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

void sub_1001187C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001187DC( uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
  {
    uint64_t v6 = *(void *)(this + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1008006E8 + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v6,  a2,  a4);
  }

  int v9 = *(void **)(v5 + 8);
  char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  int v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1]) {
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
    }
  }

  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10011884C( wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    uint64_t v5 = (unsigned int *)*((void *)this + 2);
    if (!v5) {
      uint64_t v5 = *(unsigned int **)(qword_1008006E8 + 16);
    }
    *(_BYTE *)a2 = 10;
    uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[8];
    if (v6 > 0x7F)
    {
      int v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray( v6,  (int)a2 + 1,  a3);
    }

    else
    {
      *((_BYTE *)a2 + 1) = (_BYTE)v6;
      int v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }

    a2 = sub_100118044((wireless_diagnostics::google::protobuf::internal::WireFormat *)v5, v7, a3, a4);
  }

  int v10 = (void *)*((void *)this + 1);
  int v9 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  char v8 = v10;
  if (!v10 || *v8 == v8[1]) {
    return a2;
  }
  else {
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray( v9,  a2,  a3);
  }
}

uint64_t sub_1001188E8(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1008006E8 + 16);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100118138(v4, a2);
    int v6 = (int)v5;
    else {
      int v7 = 1;
    }
    uint64_t v3 = (v6 + v7 + 1);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  char v8 = *(void **)(a1 + 8);
  if (v8 && *v8 != v8[1]) {
    uint64_t v3 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize( (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8),  a2)
  }
       + v3;
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

uint64_t sub_100118978( const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/Proximity/protobuf/CLPRangeAndAoaSolution.pb.cc",  7833LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  if (v5) {
    return sub_10011840C((uint64_t)a1, (uint64_t)v5);
  }
  else {
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
  }
}

void sub_100118A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100118A38(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 112LL))(v3, a2);
  }

  return result;
}

uint64_t sub_100118A80()
{
  return 1LL;
}

uint64_t sub_100118A88()
{
  uint64_t v0 = qword_1007F67A8;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100109088;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1007F67A8, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }

  return qword_1007F6658;
}

void sub_100118B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100118B14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_100118B1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_100118B24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_100118B2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_100118B34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100118B3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_100118B44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_100118B4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_100118B54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_100118B5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_100118B64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_100118B6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_100118B74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_100118B7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_100118B84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_100118B8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_100118B94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100118B9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100118BA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void *sub_100118BAC()
{
  uint64_t v0 = operator new(0x90uLL);
  sub_100114A7C((uint64_t)v0);
  return v0;
}

void sub_100118BD8(_Unwind_Exception *a1)
{
}

void *sub_100118BEC()
{
  uint64_t v0 = operator new(0x60uLL);
  sub_100110FF8((uint64_t)v0);
  return v0;
}

void sub_100118C18(_Unwind_Exception *a1)
{
}

void *sub_100118C2C()
{
  uint64_t v0 = operator new(0x28uLL);
  sub_10010DB0C(v0);
  return v0;
}

void sub_100118C58(_Unwind_Exception *a1)
{
}

void *sub_100118C70@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE268[a1]);
}

void *sub_100118C84@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE2C0[a1]);
}

void *sub_100118C98@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE308[a1]);
}

void *sub_100118CAC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE328[a1]);
}

uint64_t sub_100118CC0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v9 = *(_OWORD *)(a2 + 96);
  __int128 v10 = *(_OWORD *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  memcpy((void *)(a1 + 552), (const void *)(a2 + 552), 0x259uLL);
  sub_10011B2F0((_BYTE *)(a1 + 1160), a2 + 1160);
  *(_WORD *)(a1 + 1776) = *(_WORD *)(a2 + 1776);
  __asm { FMOV            V0.4S, #1.0 }

  *(_OWORD *)(a1 + 1784) = _Q0;
  *(_BYTE *)(a1 + 1800) = 0;
  *(_BYTE *)(a1 + 2408) = 0;
  *(_OWORD *)(a1 + 2416) = *a3;
  return a1;
}

void sub_100118DD4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 144) = v5;
    operator delete(v5);
  }

  __int128 v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100118E0C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2416)) {
    return 1LL;
  }
  if (*(_WORD *)(a1 + 96))
  {
    if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 280))
    {
      double v1 = *(double *)(a1 + 256);
      double v2 = *(double *)(a1 + 272);
      char v3 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 134218240;
        double v16 = v1;
        __int16 v17 = 2048;
        double v18 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#me,checkFPSNRsOkForSensorFusion: rose measurement errorcode is not success, the PDOAs are %f and %f",  (uint8_t *)&v15,  0x16u);
      }

      return 2LL;
    }

    uint64_t v5 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      return 2LL;
    }
    LOWORD(v15) = 0;
    uint64_t v4 = 2LL;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#me,checkFPSNRsOkForSensorFusion: rose measurement errorcode is not success, the PDOAs are invalid",  (uint8_t *)&v15,  2u);
  }

  else if (*(_BYTE *)(a1 + 200) && *(_BYTE *)(a1 + 232) && *(_BYTE *)(a1 + 216))
  {
    double v6 = *(double *)(a1 + 192);
    double v7 = *(double *)(a1 + 224);
    double v8 = *(double *)(a1 + 208);
    __int128 v9 = (os_log_s *)qword_1008000A0;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
    if (v6 < 15.0 || v7 < 15.0 || v8 < 15.0)
    {
      if (v10)
      {
        int v15 = 134218496;
        double v16 = v6;
        __int16 v17 = 2048;
        double v18 = v7;
        __int16 v19 = 2048;
        double v20 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#me,checkFPSNRsOkForSensorFusion: FP_SNR is below threshold - center %f dB, horizontal %f dB, vertical %f dB",  (uint8_t *)&v15,  0x20u);
      }

      return 4LL;
    }

    else
    {
      if (v10)
      {
        LOWORD(v15) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#me,checkFPSNRsOkForSensorFusion: PDOA FP_SNR check passes",  (uint8_t *)&v15,  2u);
      }

      return 5LL;
    }
  }

  else
  {
    int v13 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#me,checkFPSNRsOkForSensorFusion: first path SNRs invalid",  (uint8_t *)&v15,  2u);
    }

    return 3LL;
  }

  return v4;
}

uint64_t sub_100119084(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2417)) {
    return 1LL;
  }
  if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 280))
  {
    double v2 = *(double *)(a1 + 256);
    double v3 = *(double *)(a1 + 272);
    uint64_t v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 134218240;
      *(double *)&__p[4] = v2;
      __int16 v16 = 2048;
      double v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkPDOA: azPDOA %.3f elPDOA %.3f",  __p,  0x16u);
    }

    if (v2 >= -180.0 && v2 <= 180.0 && v3 >= -180.0 && v3 <= 180.0)
    {
      if (v2 >= -90.0)
      {
        double v6 = 1.0;
        if (v2 <= 90.0) {
          goto LABEL_24;
        }
        double v5 = (v2 + -90.0) / -90.0;
      }

      else
      {
        double v5 = (-90.0 - v2) / -90.0;
        double v6 = 1.0;
      }

      double v6 = v5 + v6;
LABEL_24:
      float v9 = v6 * *(float *)(a1 + 1784);
      *(float *)(a1 + 1784) = v9;
      float v10 = v6 * *(float *)(a1 + 1792);
      *(float *)(a1 + 1792) = v10;
      if (v3 >= -90.0)
      {
        double v12 = 1.0;
        if (v3 <= 90.0)
        {
LABEL_29:
          float v13 = v12 * v9;
          *(float *)(a1 + 1784) = v13;
          float v14 = v12 * *(float *)(a1 + 1796);
          *(float *)(a1 + 1796) = v14;
          sub_1000065CC(__p, "MeasEngMetricsCalculator::checkPDOA");
          sub_10011BA30((float *)(a1 + 1784), (uint64_t *)__p);
          if (v18 < 0) {
            operator delete(*(void **)__p);
          }
          return 4LL;
        }

        double v11 = v3 + -90.0;
      }

      else
      {
        double v11 = -90.0 - v3;
      }

      double v12 = v11 / -90.0 + 1.0;
      goto LABEL_29;
    }

    *(_DWORD *)(a1 + 1784) = 0;
    *(void *)(a1 + 1792) = 0LL;
    sub_1000065CC(__p, "MeasEngMetricsCalculator::checkPDOA");
    sub_10011BA30((float *)(a1 + 1784), (uint64_t *)__p);
    if (v18 < 0) {
      operator delete(*(void **)__p);
    }
    return 3LL;
  }

  else
  {
    double v7 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#me,checkPDOA: invalid PDOA", __p, 2u);
    }

    *(_DWORD *)(a1 + 1784) = 0;
    *(void *)(a1 + 1792) = 0LL;
    sub_1000065CC(__p, "MeasEngMetricsCalculator::checkPDOA");
    sub_10011BA30((float *)(a1 + 1784), (uint64_t *)__p);
    if (v18 < 0) {
      operator delete(*(void **)__p);
    }
    return 2LL;
  }

void sub_100119348( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100119374(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2418)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 200) || !*(_BYTE *)(a1 + 216) || !*(_BYTE *)(a1 + 232)) {
    return 2LL;
  }
  double v1 = *(double *)(a1 + 192);
  double v2 = *(double *)(a1 + 208);
  double v3 = *(double *)(a1 + 224);
  v11[0] = v1;
  v11[1] = v2;
  v11[2] = v3;
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    double v14 = v1;
    __int16 v15 = 2048;
    uint64_t v16 = *(void *)&v2;
    __int16 v17 = 2048;
    double v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPSNRs: %5.1f, %5.1f, %5.1f",  buf,  0x20u);
  }

  HIBYTE(v12) = 0;
  double v5 = sub_10011B48C(v11, &v12);
  double v7 = *v6 - *v5;
  double v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    double v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = 0x4062200000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPSNRs: FPSNR_DIFF_CHECK fpsnrDiff(%5.1f) >= kFpsnrDiffMaxDb(%5.3f)",  buf,  0x16u);
  }

  if (v7 < 145.0) {
    return 4LL;
  }
  float v10 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    double v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = 0x4062200000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPSNRs: TRIGGERED FPSNR_DIFF_CHECK fpsnrDiff(%5.1f) >= kFpsnrDiffMaxDb(%5.3f)",  buf,  0x16u);
  }

  return 3LL;
}

uint64_t sub_100119574(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2419)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 328) || !*(_BYTE *)(a1 + 344) || !*(_BYTE *)(a1 + 360)) {
    return 2LL;
  }
  double v1 = *(double *)(a1 + 320);
  double v2 = *(double *)(a1 + 336);
  double v3 = *(double *)(a1 + 352);
  v11[0] = v1;
  v11[1] = v2;
  v11[2] = v3;
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    double v14 = v1;
    __int16 v15 = 2048;
    uint64_t v16 = *(void *)&v2;
    __int16 v17 = 2048;
    double v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPIndices: C %5.2f V %5.2f H %5.2f",  buf,  0x20u);
  }

  HIBYTE(v12) = 0;
  double v5 = sub_10011B48C(v11, &v12);
  double v7 = *v6 - *v5;
  double v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    double v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = 0x4060E00000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPIndices: FPI_DIFF_CHECK fpIndicesDiff(%5.2f) >= %5.2f",  buf,  0x16u);
  }

  if (v7 < 135.0) {
    return 4LL;
  }
  float v10 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    double v14 = v7;
    __int16 v15 = 2048;
    uint64_t v16 = 0x4060E00000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkFPIndices: TRIGGERED FPI_DIFF_CHECK fpIndicesDiff(%5.2f) >= %5.2f",  buf,  0x16u);
  }

  return 3LL;
}

uint64_t sub_100119774(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2420)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 680)) {
    return 2LL;
  }
  uint64_t v1 = 0LL;
  double v2 = (__int16 *)(a1 + 650);
  do
  {
    *(double *)&v43[v1] = hypot((double)*(v2 - 33), (double)*(v2 - 32));
    *(double *)&v37[v1] = hypot((double)*(v2 - 17), (double)*(v2 - 16));
    *(double *)&v31[v1++] = hypot((double)*(v2 - 1), (double)*v2);
    v2 += 2;
  }

  while (v1 != 8);
  uint64_t v3 = v43[0];
  uint64_t v4 = 1LL;
  double v5 = *(double *)v43;
  double v6 = (char *)v43;
  do
  {
    if (v5 < *(double *)&v43[v4])
    {
      double v5 = *(double *)&v43[v4];
      double v6 = (char *)&v43[v4];
    }

    ++v4;
  }

  while (v4 != 8);
  uint64_t v7 = v6 - (char *)v43;
  double v8 = *(double *)v37;
  uint64_t v9 = 1LL;
  float v10 = (char *)v37;
  do
  {
    if (v8 < *(double *)&v37[v9])
    {
      double v8 = *(double *)&v37[v9];
      float v10 = (char *)&v37[v9];
    }

    ++v9;
  }

  while (v9 != 8);
  uint64_t v11 = v10 - (char *)v37;
  double v12 = *(double *)v31;
  uint64_t v13 = 1LL;
  double v14 = v31;
  do
  {
    if (v12 < *(double *)&v31[v13])
    {
      double v12 = *(double *)&v31[v13];
      double v14 = &v31[v13];
    }

    ++v13;
  }

  while (v13 != 8);
  __int16 v15 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134220032;
    uint64_t v50 = v7 >> 3;
    __int16 v51 = 2048;
    uint64_t v52 = v3;
    __int16 v53 = 2048;
    double v54 = *(double *)&v43[1];
    __int16 v55 = 2048;
    double v56 = *(double *)&v43[2];
    __int16 v57 = 2048;
    double v58 = v44;
    __int16 v59 = 2048;
    double v60 = v45;
    __int16 v61 = 2048;
    double v62 = v46;
    __int16 v63 = 2048;
    double v64 = v47;
    __int16 v65 = 2048;
    uint64_t v66 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: argmax_c, %zu, cirMag_c, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5 .1f, %5.1ff, %5.1f",  buf,  0x5Cu);
    __int16 v15 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134220032;
    uint64_t v50 = v11 >> 3;
    __int16 v51 = 2048;
    uint64_t v52 = v37[0];
    __int16 v53 = 2048;
    double v54 = *(double *)&v37[1];
    __int16 v55 = 2048;
    double v56 = *(double *)&v37[2];
    __int16 v57 = 2048;
    double v58 = v38;
    __int16 v59 = 2048;
    double v60 = v39;
    __int16 v61 = 2048;
    double v62 = v40;
    __int16 v63 = 2048;
    double v64 = v41;
    __int16 v65 = 2048;
    uint64_t v66 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: argmax_v, %zu, cirMag_v, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5 .1f, %5.1ff, %5.1f",  buf,  0x5Cu);
    __int16 v15 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134220032;
    uint64_t v50 = v14 - v31;
    __int16 v51 = 2048;
    uint64_t v52 = v31[0];
    __int16 v53 = 2048;
    double v54 = *(double *)&v31[1];
    __int16 v55 = 2048;
    double v56 = *(double *)&v31[2];
    __int16 v57 = 2048;
    double v58 = v32;
    __int16 v59 = 2048;
    double v60 = v33;
    __int16 v61 = 2048;
    double v62 = v34;
    __int16 v63 = 2048;
    double v64 = v35;
    __int16 v65 = 2048;
    uint64_t v66 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: argmax_h, %zu, cirMag_h, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5 .1f, %5.1ff, %5.1f",  buf,  0x5Cu);
    __int16 v15 = (os_log_s *)qword_1008000A0;
  }

  if (v44 >= v45) {
    double v16 = v44;
  }
  else {
    double v16 = v45;
  }
  if (v38 >= v39) {
    double v17 = v38;
  }
  else {
    double v17 = v39;
  }
  if (v32 >= v33) {
    double v18 = v32;
  }
  else {
    double v18 = v33;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    uint64_t v50 = *(void *)&v16;
    __int16 v51 = 2048;
    uint64_t v52 = *(void *)&v17;
    __int16 v53 = 2048;
    double v54 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: fpamp C %.3f V %.3f H %.3f",  buf,  0x20u);
    __int16 v15 = (os_log_s *)qword_1008000A0;
  }

  if (v46 >= v47) {
    double v19 = v46;
  }
  else {
    double v19 = v47;
  }
  if (v40 >= v41) {
    double v20 = v40;
  }
  else {
    double v20 = v41;
  }
  if (v34 >= v35) {
    double v21 = v34;
  }
  else {
    double v21 = v35;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    uint64_t v50 = *(void *)&v19;
    __int16 v51 = 2048;
    uint64_t v52 = *(void *)&v20;
    __int16 v53 = 2048;
    double v54 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: trailingAmp C %.3f V %.3f H %.3f",  buf,  0x20u);
  }

  if (v16 <= 0.0 || v17 <= 0.0 || v18 <= 0.0)
  {
    uint64_t v30 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      uint64_t v50 = *(void *)&v16;
      __int16 v51 = 2048;
      uint64_t v52 = *(void *)&v17;
      __int16 v53 = 2048;
      double v54 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: firstPathAmplitude <= 0: C %.3f V %.3f H %.3f",  buf,  0x20u);
    }

    return 3LL;
  }

  else
  {
    double v22 = v19 / v16;
    double v23 = v20 / v17;
    double v24 = v21 / v18;
    if (v22 >= v23) {
      double v25 = v22;
    }
    else {
      double v25 = v23;
    }
    if (v25 >= v24) {
      double v26 = v25;
    }
    else {
      double v26 = v21 / v18;
    }
    int v27 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219008;
      uint64_t v50 = *(void *)&v26;
      __int16 v51 = 2048;
      uint64_t v52 = 0x405E000000000000LL;
      __int16 v53 = 2048;
      double v54 = v22;
      __int16 v55 = 2048;
      double v56 = v23;
      __int16 v57 = 2048;
      double v58 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: AOA_TRAILING_RATIO_CHECK maxTrailingRatio(%.3f) > %.3f trail ingRatio C %.3f V %.3f H %3f",  buf,  0x34u);
    }

    if (v26 <= 120.0)
    {
      return 5LL;
    }

    else
    {
      int v28 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134219008;
        uint64_t v50 = *(void *)&v26;
        __int16 v51 = 2048;
        uint64_t v52 = 0x405E000000000000LL;
        __int16 v53 = 2048;
        double v54 = v22;
        __int16 v55 = 2048;
        double v56 = v23;
        __int16 v57 = 2048;
        double v58 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkAoaCirDataEvent: TRIGGERED AOA_TRAILING_RATIO_CHECK maxTrailingRatio(%.3f) > %.3f trailingRatio_c %.3f trailingRatio_v %.3f trailingRatio_h %3f",  buf,  0x34u);
      }

      return 4LL;
    }
  }

uint64_t sub_100119DA4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2421)) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 768)) {
    return 2LL;
  }
  uint64_t v1 = 0LL;
  double v2 = (__int16 *)(a1 + 738);
  do
  {
    *(double *)&v16[v1] = hypot((double)*(v2 - 1), (double)*v2);
    v2 += 2;
    ++v1;
  }

  while (v1 != 8);
  uint64_t v3 = v16[0];
  uint64_t v4 = 1LL;
  double v5 = *(double *)v16;
  double v6 = v16;
  do
  {
    if (v5 < *(double *)&v16[v4])
    {
      double v5 = *(double *)&v16[v4];
      double v6 = &v16[v4];
    }

    ++v4;
  }

  while (v4 != 8);
  uint64_t v7 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *v6;
    *(_DWORD *)buf = 134220288;
    uint64_t v23 = v6 - v16;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    __int16 v26 = 2048;
    uint64_t v27 = v3;
    __int16 v28 = 2048;
    uint64_t v29 = v16[1];
    __int16 v30 = 2048;
    uint64_t v31 = v16[2];
    __int16 v32 = 2048;
    double v33 = v17;
    __int16 v34 = 2048;
    double v35 = v18;
    __int16 v36 = 2048;
    double v37 = v19;
    __int16 v38 = 2048;
    double v39 = v20;
    __int16 v40 = 2048;
    uint64_t v41 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkTOACIRDataEvent: argmax, %ld, max_val, %5.1f, vals, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f, %5.1f",  buf,  0x66u);
  }

  if (v17 >= v18) {
    double v9 = v17;
  }
  else {
    double v9 = v18;
  }
  if (v9 <= 0.0)
  {
    double v14 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038C7C4(v14, v9);
    }
    return 3LL;
  }

  else
  {
    double v10 = v19;
    if (v19 < v20) {
      double v10 = v20;
    }
    double v11 = v10 / v9;
    double v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v23 = *(void *)&v11;
      __int16 v24 = 2048;
      uint64_t v25 = 0x405E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkTOACIRDataEvent: TOA_TRAILING_RATIO_CHECK trailingRatio(%.3f) >= %.3f",  buf,  0x16u);
    }

    if (v11 >= 120.0)
    {
      __int16 v15 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v23 = *(void *)&v11;
        __int16 v24 = 2048;
        uint64_t v25 = 0x405E000000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkTOACIRDataEvent: TRIGGERED TOA_TRAILING_RATIO_CHECK trailingRatio(%.3f) >= %.3f",  buf,  0x16u);
      }

      return 4LL;
    }

    else
    {
      return 5LL;
    }
  }

uint64_t sub_10011A064(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2424)) {
    return 1LL;
  }
  int v2 = *(unsigned __int16 *)(a1 + 376);
  if (*(_WORD *)(a1 + 376) && *(_WORD *)(a1 + 378)) {
    return 4LL;
  }
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 378);
    v6[0] = 67109376;
    v6[1] = v2;
    __int16 v7 = 1024;
    int v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::checkCirMetrics: toaNoiseRms %d or toaPpwinRms %d are zero.",  (uint8_t *)v6,  0xEu);
  }

  return 3LL;
}

double sub_10011A148(uint64_t a1)
{
  double v1 = (double)*(unsigned __int16 *)(a1 + 376);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 378);
  double v3 = (double)v2;
  if (*(_WORD *)(a1 + 376)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = qword_1008000A0;
    double v6 = 0.2;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    *(_DWORD *)double v54 = 134218240;
    *(double *)&v54[4] = v1;
    *(_WORD *)&v54[12] = 2048;
    *(double *)&v54[14] = v3;
    __int16 v7 = "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: zero check fail toaNoiseRms %.2f toaPpwinRms %.2f";
    int v8 = (os_log_s *)v5;
    uint32_t v9 = 22;
    goto LABEL_59;
  }

  double v11 = log10(v3 / v1);
  int v12 = *(unsigned __int8 *)(a1 + 768);
  if (!*(_BYTE *)(a1 + 680))
  {
    if (!*(_BYTE *)(a1 + 768))
    {
      uint64_t v39 = qword_1008000A0;
      double v6 = 0.2;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        return v6;
      }
      *(void *)double v54 = 67109376LL;
      *(_WORD *)&v54[8] = 1024;
      *(_DWORD *)&v54[10] = 0;
      __int16 v7 = "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: fail CIR has_value %d AOACIR has_value %d";
      int v8 = (os_log_s *)v39;
      uint32_t v9 = 14;
      goto LABEL_59;
    }

    int v12 = 1;
  }

  double v13 = v11 * 20.0;
  int v14 = *(unsigned __int16 *)(a1 + 112);
  if (*(_BYTE *)(a1 + 16)) {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t v16 = *(void *)(a1 + 304);
  if (v12)
  {
    double v17 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)
      || (*(_WORD *)double v54 = 0,
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: TOA CIR",  v54,  2u),  *(_BYTE *)(a1 + 768)))
    {
      double v18 = hypot((double)*(__int16 *)(a1 + 748), (double)*(__int16 *)(a1 + 750));
      double v19 = v18;
      if (v18 > 0.0)
      {
        double v20 = log10(v18 * 0.707 / v1);
        double v21 = hypot((double)*(__int16 *)(a1 + 740), (double)*(__int16 *)(a1 + 742));
        if (v21 > 0.0)
        {
          double v22 = v20 * 20.0;
          double v23 = log10(v19 / v21) * 20.0;
          double v24 = v13 - v20 * 20.0 - v23;
          double v6 = v24 * 0.02 + 1.25;
          uint64_t v25 = (os_log_s *)qword_1008000A0;
          if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
          *(_DWORD *)double v54 = 134218240;
          *(double *)&v54[4] = v24;
          *(_WORD *)&v54[12] = 2048;
          *(double *)&v54[14] = v24 * 0.02 + 1.25;
          __int16 v26 = "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: TOA cirMetric %.2f RangeUnc %.2f";
          uint64_t v27 = v54;
          goto LABEL_54;
        }

        uint64_t v40 = qword_1008000A0;
        double v6 = 0.2;
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
          return v6;
        }
        *(_WORD *)double v54 = 0;
        __int16 v7 = "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: leadingEdgeStartMag is not positive.";
        goto LABEL_45;
      }

      uint64_t v38 = qword_1008000A0;
      double v6 = 0.2;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        return v6;
      }
      *(_DWORD *)double v54 = 134217984;
      *(double *)&v54[4] = v19;
      __int16 v7 = "#me,MeasEngMetricsCalculator::computeRangeUncertaintyFromCirs: TOA fppk(%.2f) <= 0";
      int v8 = (os_log_s *)v38;
      uint32_t v9 = 12;
LABEL_59:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, v54, v9);
      return v6;
    }

void sub_10011A7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4 = (_OWORD *)(a1 + 1800);
  if (*(_BYTE *)(a1 + 2408))
  {
    __int128 v5 = *(_OWORD *)(a1 + 1848);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 1832);
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = *(void *)(a1 + 1864);
    __int128 v6 = *(_OWORD *)(a1 + 1816);
    *(_OWORD *)a2 = *v4;
    *(_OWORD *)(a2 + 16) = v6;
    *(void *)(a2 + 72) = 0LL;
    __int16 v7 = *(const void **)(a1 + 1872);
    uint64_t v8 = *(void *)(a1 + 1880);
    *(void *)(a2 + 80) = 0LL;
    *(void *)(a2 + 88) = 0LL;
    sub_10011B560((void *)(a2 + 72), v7, v8, (v8 - (uint64_t)v7) >> 3);
    *(void *)(a2 + 136) = 0LL;
    __int128 v9 = v4[7];
    *(_OWORD *)(a2 + 96) = v4[6];
    *(_OWORD *)(a2 + 112) = v9;
    *(void *)(a2 + 128) = *(void *)(a1 + 1928);
    *(void *)(a2 + 144) = 0LL;
    *(void *)(a2 + 152) = 0LL;
    sub_10011B618( (void *)(a2 + 136),  *(const void **)(a1 + 1936),  *(void *)(a1 + 1944),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 1944) - *(void *)(a1 + 1936)) >> 3));
    memcpy((void *)(a2 + 160), (const void *)(a1 + 1960), 0x181uLL);
    __int128 v10 = *(_OWORD *)(a1 + 2368);
    *(_OWORD *)(a2 + 552) = *(_OWORD *)(a1 + 2352);
    *(_OWORD *)(a2 + 568) = v10;
    *(_OWORD *)(a2 + 584) = *(_OWORD *)(a1 + 2384);
    *(void *)(a2 + 597) = *(void *)(a1 + 2397);
  }

  else
  {
    unsigned int v11 = sub_100119084(a1);
    unsigned int v12 = sub_100119374(a1);
    unsigned int v13 = sub_100119574(a1);
    unsigned int v14 = sub_100119774(a1);
    unsigned int v15 = sub_100119DA4(a1);
    unsigned int v16 = sub_100118E0C(a1);
    BOOL v59 = *(_BYTE *)(a1 + 2423) == 0;
    BOOL v60 = *(_BYTE *)(a1 + 2422) == 0;
    unsigned int v17 = sub_10011A064(a1);
    unsigned int v58 = v16;
    BOOL v61 = sub_10011C5B4(v11)
       && sub_10011C5B4(v12)
       && sub_10011C5B4(v13)
       && sub_10011C5A0(v14)
       && sub_10011C5A0(v15)
       && sub_10011C5A0(v16)
       && sub_10011C5C8(v60)
       && sub_10011C5C8(v59)
       && sub_10011C5B4(v17);
    double v18 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics: okForSensorFusion %d",  buf,  8u);
      double v18 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      sub_10011C5D4(v17, buf);
      double v19 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v88 = 136315138;
      *(void *)&v88[4] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics: checkCirMetricResult %s",  v88,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    __int128 v20 = *(_OWORD *)(a1 + 48);
    __int128 v90 = *(_OWORD *)(a1 + 32);
    __int128 v91 = v20;
    __int128 v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v88 = *(_OWORD *)a1;
    __int128 v89 = v21;
    double v22 = *(const void **)(a1 + 72);
    uint64_t v92 = *(void *)(a1 + 64);
    v93 = 0LL;
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v95 = 0LL;
    v94 = 0LL;
    sub_10011B560(&v93, v22, v23, (v23 - (uint64_t)v22) >> 3);
    unsigned int v57 = v11;
    unsigned int v24 = v12;
    unsigned int v25 = v14;
    unsigned int v26 = v13;
    __int128 v27 = *(_OWORD *)(a1 + 112);
    __int128 v96 = *(_OWORD *)(a1 + 96);
    __int128 v97 = v27;
    __int16 v28 = *(const void **)(a1 + 136);
    uint64_t v98 = *(void *)(a1 + 128);
    v99 = 0LL;
    uint64_t v101 = 0LL;
    v100 = 0LL;
    sub_10011B618( &v99,  v28,  *(void *)(a1 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 144) - (void)v28) >> 3));
    memcpy(v102, (const void *)(a1 + 160), 0x181uLL);
    double v29 = *(float *)(a1 + 1788);
    double v30 = (os_log_s *)qword_1008000A0;
    double v62 = (float *)(a1 + 1784);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v31 = *(float *)(a1 + 1784);
      *(_DWORD *)buf = 134218240;
      *(double *)&uint8_t buf[4] = v29;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics: confidence: range %f fov %f",  buf,  0x16u);
      double v30 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = (1.0 - v29) * 4.8 + 0.2;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics: unc: range %f",  buf,  0xCu);
    }

    v102[45] = (1.0 - v29) * 4.8 + 0.2;
    LOBYTE(v102[46]) = 1;
    v102[47] = *v62;
    LOBYTE(v102[48]) = 1;
    uint64_t v56 = (uint64_t)v4;
    unsigned int v55 = v24;
    if (sub_10011C5B4(v17))
    {
      double v32 = sub_10011A148(a1);
      uint64_t v33 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(a1 + 304);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics:  rangeMsmt %.3f  rangeUncertaintyFromCirs:   %.2f",  buf,  0x16u);
      }

      v102[45] = v32;
      LOBYTE(v102[46]) = 1;
    }

    else
    {
      *(_BYTE *)(a1 + 1777) = 0;
      double v35 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::getMetrics: checkCirMetrics is not ok. okToPublishToClient=false",  buf,  2u);
      }
    }

    __int16 v36 = (double *)v99;
    double v37 = v100;
    if (v99 != v100)
    {
      uint64_t v38 = (os_log_s *)qword_1008000A0;
      int v39 = 1;
      do
      {
        double v40 = 1.0 - v36[2];
        float v41 = v40 * *(float *)(a1 + 1792);
        *(float *)&double v40 = v40 * *(float *)(a1 + 1796);
        double v42 = v41;
        double v43 = (1.0 - v41) * 350.0 + 10.0;
        double v44 = *(float *)&v40;
        double v45 = (1.0 - *(float *)&v40) * 350.0 + 10.0;
        double v46 = fabs(*v36);
        if (v46 >= 60.0) {
          double v47 = 90.0;
        }
        else {
          double v47 = v45;
        }
        if (v46 >= 60.0) {
          double v48 = 20.0;
        }
        else {
          double v48 = v43;
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v39;
          *(_WORD *)&buf[8] = 2048;
          *(double *)&buf[10] = v42;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::applyConfidenceMetrics: hypothesis %d confidence: az %f el %f",  buf,  0x1Cu);
          uint64_t v38 = (os_log_s *)qword_1008000A0;
        }

        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v39;
          *(_WORD *)&buf[8] = 2048;
          *(double *)&buf[10] = v48;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#me,MeasEngMetricsCalculator::applyConfidenceMetrics: hypothesis %d unc: az %f el %f",  buf,  0x1Cu);
          uint64_t v38 = (os_log_s *)qword_1008000A0;
        }

        v36[3] = v48;
        *((_BYTE *)v36 + 32) = 1;
        v36[5] = v47;
        *((_BYTE *)v36 + 48) = 1;
        v36 += 7;
        ++v39;
      }

      while (v36 != v37);
    }

    __int128 v64 = v90;
    __int128 v65 = v91;
    *(_OWORD *)buf = *(_OWORD *)v88;
    *(_OWORD *)&buf[16] = v89;
    uint64_t v66 = v92;
    int v67 = 0LL;
    int v68 = 0LL;
    uint64_t v69 = 0LL;
    sub_10011B560(&v67, v93, (uint64_t)v94, (v94 - (_BYTE *)v93) >> 3);
    __int128 v70 = v96;
    __int128 v71 = v97;
    uint64_t v72 = v98;
    __p = 0LL;
    v74 = 0LL;
    uint64_t v75 = 0LL;
    sub_10011B618(&__p, v99, (uint64_t)v100, 0x6DB6DB6DB6DB6DB7LL * (((char *)v100 - (_BYTE *)v99) >> 3));
    memcpy(v76, v102, sizeof(v76));
    __int128 v77 = *(_OWORD *)v62;
    unsigned int v78 = v57;
    unsigned int v79 = v55;
    unsigned int v80 = v26;
    unsigned int v81 = v25;
    unsigned int v82 = v15;
    unsigned int v83 = v58;
    BOOL v84 = v60;
    BOOL v85 = v59;
    int v86 = 0;
    BOOL v87 = v61;
    sub_10011B184(v56, (uint64_t)buf);
    if (__p)
    {
      v74 = __p;
      operator delete(__p);
    }

    if (v67)
    {
      int v68 = v67;
      operator delete(v67);
    }

    if (!*(_BYTE *)(a1 + 2408)) {
      sub_100006080();
    }
    __int128 v49 = *(_OWORD *)(v56 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v56 + 32);
    *(_OWORD *)(a2 + 48) = v49;
    *(void *)(a2 + 64) = *(void *)(v56 + 64);
    __int128 v50 = *(_OWORD *)(v56 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v56;
    *(_OWORD *)(a2 + 16) = v50;
    *(void *)(a2 + 72) = 0LL;
    __int16 v51 = *(const void **)(a1 + 1872);
    uint64_t v52 = *(void *)(a1 + 1880);
    *(void *)(a2 + 80) = 0LL;
    *(void *)(a2 + 88) = 0LL;
    sub_10011B560((void *)(a2 + 72), v51, v52, (v52 - (uint64_t)v51) >> 3);
    *(void *)(a2 + 136) = 0LL;
    __int128 v53 = *(_OWORD *)(a1 + 1912);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 1896);
    *(void *)(a2 + 128) = *(void *)(a1 + 1928);
    *(_OWORD *)(a2 + 112) = v53;
    *(void *)(a2 + 144) = 0LL;
    *(void *)(a2 + 152) = 0LL;
    sub_10011B618( (void *)(a2 + 136),  *(const void **)(a1 + 1936),  *(void *)(a1 + 1944),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 1944) - *(void *)(a1 + 1936)) >> 3));
    memcpy((void *)(a2 + 160), (const void *)(a1 + 1960), 0x181uLL);
    __int128 v54 = *(_OWORD *)(a1 + 2368);
    *(_OWORD *)(a2 + 552) = *(_OWORD *)(a1 + 2352);
    *(_OWORD *)(a2 + 568) = v54;
    *(_OWORD *)(a2 + 584) = *(_OWORD *)(a1 + 2384);
    *(void *)(a2 + 597) = *(void *)(a1 + 2397);
    if (v99)
    {
      v100 = (double *)v99;
      operator delete(v99);
    }

    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
  }

void sub_10011B0F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10011B184(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 608);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v8 = (void *)(a1 + 72);
  __int128 v9 = (__n128 *)(a2 + 72);
  if (v4)
  {
    sub_10011B6E4((uint64_t)v8, v9);
    __int128 v10 = *(_OWORD *)(a2 + 96);
    __int128 v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = v11;
    sub_10011B6E4(a1 + 136, (__n128 *)(a2 + 136));
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
    __int128 v13 = *(_OWORD *)(a2 + 568);
    __int128 v12 = *(_OWORD *)(a2 + 584);
    __int128 v14 = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 597) = *(void *)(a2 + 597);
    *(_OWORD *)(a1 + 568) = v13;
    *(_OWORD *)(a1 + 584) = v12;
    *(_OWORD *)(a1 + 552) = v14;
  }

  else
  {
    void *v8 = 0LL;
    v8[1] = 0LL;
    v8[2] = 0LL;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    v9->n128_u64[0] = 0LL;
    v9->n128_u64[1] = 0LL;
    v9[1].n128_u64[0] = 0LL;
    __int128 v15 = *(_OWORD *)(a2 + 112);
    uint64_t v16 = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    *(void *)(a1 + 128) = v16;
    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
    *(void *)(a1 + 152) = 0LL;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a2 + 136) = 0LL;
    *(void *)(a2 + 144) = 0LL;
    *(void *)(a2 + 152) = 0LL;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
    __int128 v18 = *(_OWORD *)(a2 + 568);
    __int128 v17 = *(_OWORD *)(a2 + 584);
    __int128 v19 = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 597) = *(void *)(a2 + 597);
    *(_OWORD *)(a1 + 568) = v18;
    *(_OWORD *)(a1 + 584) = v17;
    *(_OWORD *)(a1 + 552) = v19;
    *(_BYTE *)(a1 + 608) = 1;
  }

  return a1;
}

void *sub_10011B2B0(void *a1)
{
  unsigned int v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }

  double v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }

  return a1;
}

_BYTE *sub_10011B2F0(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[608] = 0;
  if (*(_BYTE *)(a2 + 608))
  {
    sub_10011B344((uint64_t)a1, a2);
    a1[608] = 1;
  }

  return a1;
}

void sub_10011B330(_Unwind_Exception *a1)
{
}

uint64_t sub_10011B344(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  __int128 v11 = *(_OWORD *)(a2 + 568);
  __int128 v10 = *(_OWORD *)(a2 + 584);
  __int128 v12 = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 597) = *(void *)(a2 + 597);
  *(_OWORD *)(a1 + 568) = v11;
  *(_OWORD *)(a1 + 584) = v10;
  *(_OWORD *)(a1 + 552) = v12;
  return a1;
}

void sub_10011B428(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10011B444(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 608))
  {
    unsigned int v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(void *)(a1 + 144) = v2;
      operator delete(v2);
    }

    double v3 = *(void **)(a1 + 72);
    if (v3)
    {
      *(void *)(a1 + 80) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

double *sub_10011B48C(double *result, double *a2)
{
  unsigned int v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    double v5 = *result;
    double v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    __int128 v6 = v4 >= *v2 ? v2 + 1 : v2;
    __int128 v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 >= v5) {
        double v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        double v9 = *v7;
        double v8 = v7[1];
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            double v4 = *v7;
            uint64_t result = v7;
          }

          if (v8 >= *v6) {
            __int128 v6 = v7 + 1;
          }
        }

        else
        {
          double v4 = *result;
          if (v8 < *result)
          {
            double v4 = v7[1];
            uint64_t result = v7 + 1;
          }

          if (v9 >= *v6) {
            __int128 v6 = v7;
          }
        }

        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }

      if (*v7 < *result) {
        return v7;
      }
    }
  }

  return result;
}

void *sub_10011B560(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    uint64_t result = sub_10011B5D8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10011B5BC(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10011B5D8(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10001E11C();
  }
  uint64_t result = (char *)sub_1000472C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10011B618(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    uint64_t result = sub_10011B690(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10011B674(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10011B690(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    sub_10001E11C();
  }
  uint64_t result = (char *)sub_10001FD64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

__n128 sub_10011B6E4(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  return result;
}

void *sub_10011B734@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE348[a1]);
}

void *sub_10011B748@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE3A0[a1]);
}

void *sub_10011B75C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE3E8[a1]);
}

void *sub_10011B770@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE408[a1]);
}

uint64_t sub_10011B784(uint64_t result, int a2)
{
  *(_DWORD *)__n128 result = a2;
  int64x2_t v2 = vdupq_n_s64(0xC069000000000000LL);
  *(int64x2_t *)(result + 8) = v2;
  *(int64x2_t *)(result + 24) = v2;
  if (a2 <= 99)
  {
    switch(a2)
    {
      case 0:
        __int128 v3 = xmmword_100421D40;
        goto LABEL_13;
      case 1:
      case 2:
        __int128 v3 = xmmword_100421D50;
LABEL_13:
        *(_OWORD *)(result + 16) = v3;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_6;
      default:
        return result;
    }
  }

  else
  {
    if (a2 <= 199)
    {
LABEL_6:
      *(void *)(result + 16) = 0xC069000000000000LL;
      *(void *)(result + 32) = 0xC069000000000000LL;
      return result;
    }
  }

  return result;
}

BOOL sub_10011B82C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_BYTE *)(a2 + 1)) {
    BOOL v3 = *(_BYTE *)a2 == 11;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    return 0LL;
  }
  int v6 = *(unsigned __int8 *)(a2 + 368);
  if (v6 == 9)
  {
    BOOL v7 = a3 == 0;
    uint64_t v8 = 24LL;
    uint64_t v9 = 32LL;
    goto LABEL_10;
  }

  if (v6 == 5)
  {
    BOOL v7 = a3 == 0;
    uint64_t v8 = 8LL;
    uint64_t v9 = 16LL;
LABEL_10:
    if (!v7) {
      uint64_t v8 = v9;
    }
    double v10 = *(double *)(a1 + v8);
    goto LABEL_14;
  }

  double v10 = -200.0;
LABEL_14:
  double v11 = *(double *)(a2 + 304);
  double v12 = 0.0;
  if (v11 > 0.0)
  {
    double v12 = *(double *)(a2 + 168);
    if (v11 > 0.75) {
      double v12 = v12 + log10(*(double *)(a2 + 304)) * 20.0;
    }
  }

  BOOL v14 = v11 > 0.0 && *(_WORD *)(a2 + 96) == 0;
  return v12 < v10 && v14;
}

void *sub_10011B904@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return sub_10011B560(a1, (const void *)qword_1007F1D60, qword_1007F1D68, (qword_1007F1D68 - qword_1007F1D60) >> 3);
}

void sub_10011B928()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      uint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100421D78;
      v1[1] = unk_100421D88;
      v1[2] = xmmword_100421D98;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_10011B9C8(_Unwind_Exception *a1)
{
}

void *sub_10011B9E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE428[a1]);
}

void *sub_10011B9F4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE480[a1]);
}

void *sub_10011BA08@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE4C8[a1]);
}

void *sub_10011BA1C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE4E8[a1]);
}

double sub_10011BA30(float *a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v6 = (uint64_t *)*a2;
    }
    double v7 = *a1;
    double v8 = a1[1];
    double v9 = a1[2];
    double v10 = a1[3];
    int v11 = 136316162;
    double v12 = v6;
    __int16 v13 = 2048;
    double v14 = v7;
    __int16 v15 = 2048;
    double v16 = v8;
    __int16 v17 = 2048;
    double v18 = v9;
    __int16 v19 = 2048;
    double v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,%s: ConfidenceMetrics: fieldOfView %.3f range %.3f azimuth %.3f elevation %.3f",  (uint8_t *)&v11,  0x34u);
  }

  return result;
}

uint64_t sub_10011BB28(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[5];
  if (!v4) {
    goto LABEL_18;
  }
  double v5 = (void **)a1[1];
  double v6 = (*(double **)((char *)v5 + (((unint64_t)(v4 + a1[4] - 1) >> 5) & 0x7FFFFFFFFFFFFF8LL)))[2 * (v4 + *((_BYTE *)a1 + 32) - 1)];
  double v7 = a2->n128_f64[0];
  if (a2->n128_f64[0] < v6)
  {
    double v8 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      double v23 = v7;
      __int16 v24 = 2048;
      double v25 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "#me,RangeMeasurementHistory::add: timestamp %.6f is older than most recent %.6f, purging queue",  buf,  0x16u);
      double v5 = (void **)a1[1];
    }

    uint64_t v9 = a1[2];
    a1[5] = 0LL;
    unint64_t v10 = v9 - (void)v5;
    if (v10 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v11 = a1[2];
        double v5 = (void **)(a1[1] + 8LL);
        a1[1] = v5;
        unint64_t v10 = v11 - (void)v5;
      }

      while ((unint64_t)(v11 - (void)v5) > 0x10);
    }

    unint64_t v12 = v10 >> 3;
    if (v12 == 1)
    {
      uint64_t v13 = 128LL;
    }

    else
    {
      if (v12 != 2) {
        goto LABEL_12;
      }
      uint64_t v13 = 256LL;
    }

    a1[4] = v13;
  }

uint64_t sub_10011BDCC(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[5];
  if (v2 >= 0xA) {
    sub_10038C864();
  }
  if (v2 != 9) {
    return 0LL;
  }
  sub_10011CDB4((uint64_t)&v86, a1);
  unint64_t v4 = v89;
  uint64_t v5 = v87;
  double v6 = (uint64_t *)(v87 + 8 * (v89 >> 8));
  uint64_t v7 = *v6;
  double v8 = (double *)(*v6 + 16LL * v89);
  if (v88 == v87) {
    double v8 = 0LL;
  }
  uint64_t v9 = (uint64_t)v8 - v7;
  uint64_t v10 = ((uint64_t)v8 - v7) >> 4;
  if (v9 < -63)
  {
    unint64_t v15 = 251 - v10;
    unint64_t v12 = (char *)&v6[-(v15 >> 8)];
    unint64_t v13 = *(void *)v12 + 16LL * ~(_BYTE)v15;
  }

  else
  {
    unint64_t v11 = v10 + 4;
    unint64_t v12 = (char *)&v6[v11 >> 8];
    unint64_t v13 = *(void *)v12 + 16LL * v11;
  }

  double v16 = (char *)(v87 + 8 * ((v90 + v89) >> 8));
  if (v88 == v87) {
    __int16 v17 = 0LL;
  }
  else {
    __int16 v17 = (double *)(*(void *)v16 + 16LL * (v90 + v89));
  }
  if ((double *)v13 != v17)
  {
    __int128 v91 = (char *)(v87 + 8 * (v89 >> 8));
    uint64_t v92 = v8;
    while (1)
    {
      uint64_t v18 = v92;
      if (v17 == v92
        || (unint64_t v19 = v91,
            uint64_t v20 = *(double **)v16,
            __int128 v21 = *(double **)v91,
            uint64_t v22 = (((uint64_t)v17 - *(void *)v16) >> 4) + 32 * (v16 - v91) - (((uint64_t)v92 - *(void *)v91) >> 4),
            (unint64_t)v22 < 2))
      {
LABEL_133:
        unint64_t v4 = v89;
        uint64_t v5 = v87;
        goto LABEL_134;
      }

      if (v22 == 3)
      {
        int v73 = v92 + 2;
        v74 = v91;
        if ((char *)(v92 + 2) - (char *)v21 == 4096)
        {
          v74 = v91 + 8;
          int v73 = (double *)*((void *)v91 + 1);
        }

        if (v17 == v20)
        {
          uint64_t v75 = *((void *)v16 - 1);
          v16 -= 8;
          __int16 v17 = (double *)(v75 + 4096);
        }

        sub_10011D5D0((uint64_t)v91, v92, (uint64_t)v74, v73, (uint64_t)v16, v17 - 2);
        goto LABEL_133;
      }

      if (v22 == 2)
      {
        if (v17 == v20) {
          __int16 v17 = (double *)(*((void *)v16 - 1) + 4096LL);
        }
        if (*(v17 - 1) < v92[1])
        {
          __int128 v93 = *(_OWORD *)v92;
          __int128 v76 = v93;
          *(_OWORD *)uint64_t v92 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v17 - 1) = v76;
        }

        goto LABEL_133;
      }

      if (v22 <= 7)
      {
        uint64_t v77 = (uint64_t)v17;
        if (v20 == v17) {
          uint64_t v77 = *((void *)v16 - 1) + 4096LL;
        }
        unsigned int v78 = (double *)(v77 - 16);
        if ((double *)(v77 - 16) != v92)
        {
          do
          {
            unsigned int v79 = v17;
            if (v18 != v17)
            {
              unsigned int v80 = v21;
              unsigned int v79 = v18;
              unsigned int v81 = v18;
              unsigned int v82 = v19;
              while (1)
              {
                v81 += 2;
                if ((char *)v81 - (char *)v80 == 4096)
                {
                  unsigned int v83 = (double *)*((void *)v82 + 1);
                  v82 += 8;
                  unsigned int v80 = v83;
                  unsigned int v81 = v83;
                }

                if (v81 == v17) {
                  break;
                }
                if (v81[1] < v79[1]) {
                  unsigned int v79 = v81;
                }
              }
            }

            if (v79 != v18)
            {
              __int128 v93 = *(_OWORD *)v18;
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v79;
              *(_OWORD *)unsigned int v79 = v93;
              __int128 v21 = *(double **)v19;
            }

            v18 += 2;
            if ((char *)v18 - (char *)v21 == 4096)
            {
              BOOL v84 = (double *)*((void *)v19 + 1);
              v19 += 8;
              __int128 v21 = v84;
              uint64_t v18 = v84;
            }
          }

          while (v18 != v78);
        }

        goto LABEL_133;
      }

      __int16 v24 = sub_10011C544((uint64_t)&v91, (unint64_t)v22 >> 1);
      double v25 = v23;
      unsigned int v26 = v16;
      uint64_t v27 = (uint64_t)v17;
      if (v17 == *(double **)v16)
      {
        unsigned int v26 = v16 - 8;
        uint64_t v27 = *((void *)v16 - 1) + 4096LL;
      }

      __int16 v28 = (double *)(v27 - 16);
      int v29 = sub_10011D5D0((uint64_t)v91, v92, (uint64_t)v24, v23, (uint64_t)v26, (double *)(v27 - 16));
      double v30 = v91;
      double v31 = v92;
      double v32 = v92[1];
      double v33 = v25[1];
      if (v32 >= v33) {
        break;
      }
LABEL_29:
      uint64_t v38 = v31 + 2;
      int v39 = *(double **)v30;
      if ((double *)((char *)v38 - *(void *)v30) == (double *)4096)
      {
        double v40 = (double *)*((void *)v30 + 1);
        v30 += 8;
        int v39 = v40;
        uint64_t v38 = v40;
      }

      if (v30 < v26 || v30 == v26 && v38 < v28)
      {
        while (1)
        {
          double v41 = v25[1];
          while (v38[1] < v41)
          {
            v38 += 2;
            if ((char *)v38 - (char *)v39 == 4096)
            {
              double v42 = (double *)*((void *)v30 + 1);
              v30 += 8;
              int v39 = v42;
              uint64_t v38 = v42;
            }
          }

          double v43 = *(double **)v26;
          do
          {
            if (v28 == v43)
            {
              double v44 = (double *)*((void *)v26 - 1);
              v26 -= 8;
              double v43 = v44;
              __int16 v28 = v44 + 512;
            }

            double v45 = *(v28 - 1);
            v28 -= 2;
          }

          while (v45 >= v41);
          if (v30 >= v26 && (v30 != v26 || v38 >= v28)) {
            break;
          }
          __int128 v93 = *(_OWORD *)v38;
          *(_OWORD *)uint64_t v38 = *(_OWORD *)v28;
          *(_OWORD *)__int16 v28 = v93;
          ++v29;
          if (v25 == v38) {
            double v25 = v28;
          }
          v38 += 2;
          int v39 = *(double **)v30;
          if ((double *)((char *)v38 - *(void *)v30) == (double *)4096)
          {
            double v46 = (double *)*((void *)v30 + 1);
            v30 += 8;
            int v39 = v46;
            uint64_t v38 = v46;
          }
        }
      }

      if (v38 != v25 && v25[1] < v38[1])
      {
        __int128 v93 = *(_OWORD *)v38;
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v25;
        *(_OWORD *)double v25 = v93;
        ++v29;
      }

      if (!v29)
      {
        if (v30 > v12 || (unint64_t)v38 > v13 && v30 == v12)
        {
          double v47 = v91;
          double v48 = v92;
          __int128 v49 = *(double **)v91;
          while (1)
          {
            __int128 v50 = v48 + 2;
            if ((char *)(v48 + 2) - (char *)v49 == 4096)
            {
              __int16 v51 = (double *)*((void *)v47 + 1);
              v47 += 8;
              __int128 v49 = v51;
              __int128 v50 = v51;
            }

            if (v50 == v38) {
              break;
            }
            double v52 = v48[1];
            double v48 = v50;
            if (v50[1] < v52) {
              goto LABEL_54;
            }
          }
        }

        else
        {
          uint64_t v66 = *(double **)v30;
          int v67 = v38;
          int v68 = v30;
          while (1)
          {
            uint64_t v69 = v67 + 2;
            if ((char *)(v67 + 2) - (char *)v66 == 4096)
            {
              __int128 v70 = (double *)*((void *)v68 + 1);
              v68 += 8;
              uint64_t v66 = v70;
              uint64_t v69 = v70;
            }

            if (v69 == v17) {
              break;
            }
            double v71 = v67[1];
            int v67 = v69;
            if (v69[1] < v71) {
              goto LABEL_54;
            }
          }
        }

        goto LABEL_133;
      }

void sub_10011C4A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_10011C4BC(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10011C644(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void *sub_10011C544(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }

  return result;
}

BOOL sub_10011C5A0(unsigned int a1)
{
  return a1 > 4 || (a1 & 0x1F) == 1;
}

BOOL sub_10011C5B4(unsigned int a1)
{
  return a1 > 3 || (a1 & 0xF) == 1;
}

BOOL sub_10011C5C8(int a1)
{
  return a1 == 1;
}

void *sub_10011C5D4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE508[a1]);
}

uint64_t sub_10011C5E8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 256LL;
  }

  return v4 ^ 1u;
}

void sub_10011C644(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10011C90C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10011C958(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)sub_1000472C0(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_10011CA6C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_1000472C0(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_10011CB88(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_1000472C0(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_10011CC9C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_1000472C0(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t sub_10011CDB4(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    uint64_t v8 = 0LL;
    unint64_t v11 = 0LL;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }

  else
  {
    uint64_t v8 = (__int128 *)(*(void *)v7 + 16LL * v4);
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 8));
    unint64_t v11 = (__int128 *)(*(void *)v10 + 16LL * v9);
  }

  sub_10011CE54((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10011CE40(_Unwind_Exception *a1)
{
}

void *sub_10011CE54(void *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_10011CE88(a1, a2, a3, v5);
}

void *sub_10011CE88(void *a1, void *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10011CFB4(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 16LL * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  __n128 result = sub_10011C544((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((_OWORD *)v14 == v17)
    {
      uint64_t v17 = (_OWORD *)v14;
    }

    else
    {
      uint64_t v18 = (_OWORD *)v14;
      do
      {
        __int128 v19 = *a3++;
        *uint64_t v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          uint64_t v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }

        ++v18;
      }

      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }

  return result;
}

void sub_10011CFB4(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          int v29 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v28);
          __int128 v31 = &v29[8 * (v28 >> 2)];
          __int128 v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            double v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)double v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          __int128 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }

          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10011C958(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_10011CA6C((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 255LL;
          }
          else {
            uint64_t v64 = 256LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          int v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              unsigned int v79 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v78);
              unsigned int v81 = &v79[8 * (v78 >> 2)];
              unsigned int v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                double v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)double v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }

              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int128 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_10011CB88(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000472C0((uint64_t)v91, v48);
              __int16 v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int128 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int128 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      unsigned int v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_10011CC9C((uint64_t)__p, v57);
      }

      BOOL v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_10011D4C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011D53C(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100030AF0((uint64_t)a1);
}

uint64_t sub_10011D5D0(uint64_t a1, double *a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  double v6 = a4[1];
  double v7 = a6[1];
  if (v6 < a2[1])
  {
    if (v7 < v6)
    {
      __int128 v8 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a6;
      *(_OWORD *)a6 = v8;
      return 1LL;
    }

    __int128 v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if (a6[1] >= a4[1]) {
      return 1LL;
    }
    __int128 v12 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a6;
    *(_OWORD *)a6 = v12;
    return 2LL;
  }

  if (v7 < v6)
  {
    __int128 v9 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a6;
    *(_OWORD *)a6 = v9;
    if (a4[1] >= a2[1]) {
      return 1LL;
    }
    __int128 v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    return 2LL;
  }

  return 0LL;
}

void sub_10011D68C(uint64_t a1@<X0>, double *a2@<X1>, double **a3@<X8>)
{
  if (!*(void *)(a1 + 8)) {
    sub_10038C88C();
  }
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  double v4 = (*a2 + 180.0) / 10.0;
  int v5 = vcvtmd_s64_f64(v4);
  double v6 = (a2[1] + 180.0) / 10.0;
  int v7 = vcvtmd_s64_f64(v6);
  double v8 = v4 - (double)v5;
  double v9 = v6 - (double)v7;
  BOOL v10 = v8 >= 0.5;
  if (v8 < 0.5) {
    int v11 = 0;
  }
  else {
    int v11 = -1;
  }
  BOOL v12 = v9 >= 0.5;
  if (v9 < 0.5) {
    int v13 = 0;
  }
  else {
    int v13 = -1;
  }
  if (1.0 - v8 >= v8) {
    double v8 = 1.0 - v8;
  }
  double v116 = v8;
  if (1.0 - v9 >= v9) {
    double v14 = 1.0 - v9;
  }
  else {
    double v14 = v9;
  }
  v111 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(void *)(*(void *)(a1 + 8) + 8LL) - **(void **)(a1 + 8) != 72LL) {
    __assert_rtn("getAoaHypotheses", "AoACalculator.cpp", 100, "num_LUT == kNumOfLUT");
  }
  uint64_t v15 = 0LL;
  int v16 = v10 + v5;
  uint64_t v123 = v12 + v7;
  int v124 = v10 + v5;
  int v17 = (v5 + v11 + 1) % 37;
  uint64_t v18 = (v12 + v7) % 37;
  int v119 = v16 % 37;
  uint64_t v19 = (v7 + v13 + 1) % 37;
  double v114 = v116 * v14 + (1.0 - v116) * v14;
  double v115 = (1.0 - v116) * v14;
  double v113 = v116 * (1.0 - v14);
  double v121 = 1.0 - v14;
  double v112 = (1.0 - v116) * (1.0 - v14);
  uint64_t v122 = v18;
  double v118 = v116 * v14;
  do
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    v139 = 0LL;
    v140 = 0LL;
    v141 = 0LL;
    do
    {
      int v22 = (v21 + v15) % 3uLL;
      if (v20 >= v141)
      {
        uint64_t v24 = v139;
        uint64_t v25 = (v20 - v139) >> 2;
        unint64_t v26 = v25 + 1;
        uint64_t v27 = v141 - v139;
        if ((v141 - v139) >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          int v29 = (char *)sub_100031724((uint64_t)&v141, v28);
          uint64_t v24 = v139;
          uint64_t v20 = v140;
        }

        else
        {
          int v29 = 0LL;
        }

        uint64_t v30 = &v29[4 * v25];
        *(_DWORD *)uint64_t v30 = v22;
        uint64_t v23 = v30 + 4;
        while (v20 != v24)
        {
          int v31 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }

        v139 = v30;
        v141 = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v20 = v22;
        uint64_t v23 = v20 + 4;
      }

      v140 = v23;
      ++v21;
      uint64_t v20 = v23;
    }

    while (v21 != 3);
    __int128 v32 = (char *)operator new(0x10uLL);
    *(_DWORD *)__int128 v32 = v15;
    *(void *)(v32 + 4) = -1LL;
    *((_DWORD *)v32 + 3) = -1;
    uint64_t v33 = (unsigned __int16 *)(*(void *)(*(void *)(**(void **)(a1 + 8) + 24 * v15) + 24LL * v124) + 4 * v123);
    int v34 = *v33;
    int v35 = v33[1];
    if (v34 == 0x7FFF || v35 == 0x7FFF) {
      goto LABEL_99;
    }
    uint64_t v37 = 0LL;
    double v38 = (double)(__int16)v34;
    double v39 = (double)(__int16)v35;
    while (1)
    {
      uint64_t v40 = (unsigned __int16 *)(*(void *)(*(void *)(**(void **)(a1 + 8) + 24LL * *(int *)&v139[4 * v37])
                                           + 24LL * v17)
                               + 4 * v122);
      int v41 = *v40;
      int v42 = v40[1];
      if (v41 != 0x7FFF && v42 != 0x7FFF) {
        break;
      }
      double v45 = NAN;
      double v44 = NAN;
LABEL_45:
      if (++v37 == 3) {
        goto LABEL_48;
      }
    }

    double v44 = (double)(__int16)v41;
    double v45 = (double)(__int16)v42;
    *((_DWORD *)v32 + 1) = *(_DWORD *)&v139[4 * v37];
LABEL_48:
    v132 = v32;
    uint64_t v46 = 0LL;
    while (2)
    {
      uint64_t v47 = (unsigned __int16 *)(*(void *)(*(void *)(**(void **)(a1 + 8) + 24LL * *(int *)&v139[4 * v46])
                                           + 24LL * v119)
                               + 4 * v19);
      int v48 = *v47;
      int v49 = v47[1];
      if (v48 == 0x7FFF || v49 == 0x7FFF)
      {
        double v52 = NAN;
        double v51 = NAN;
        goto LABEL_56;
      }

      double v51 = (double)(__int16)v48;
      double v52 = (double)(__int16)v49;
      if (sub_10011E0A4(v38, v39, (double)(__int16)v48, (double)(__int16)v49) > 30.0)
      {
LABEL_56:
        if (++v46 == 3) {
          goto LABEL_59;
        }
        continue;
      }

      break;
    }

    *((_DWORD *)v132 + 2) = *(_DWORD *)&v139[4 * v46];
LABEL_59:
    uint64_t v53 = 0LL;
    while (2)
    {
      __int128 v54 = (unsigned __int16 *)(*(void *)(*(void *)(**(void **)(a1 + 8) + 24LL * *(int *)&v139[4 * v53])
                                           + 24LL * v17)
                               + 4 * v19);
      int v55 = *v54;
      int v56 = v54[1];
      if (v55 == 0x7FFF || v56 == 0x7FFF)
      {
        double v59 = NAN;
        double v58 = NAN;
        goto LABEL_67;
      }

      double v58 = (double)(__int16)v55;
      double v59 = (double)(__int16)v56;
      if (sub_10011E0A4(v38, v39, (double)(__int16)v55, (double)(__int16)v56) > 30.0)
      {
LABEL_67:
        if (++v53 == 3) {
          goto LABEL_70;
        }
        continue;
      }

      break;
    }

    *((_DWORD *)v132 + 3) = *(_DWORD *)&v139[4 * v53];
LABEL_70:
    double v136 = sub_100026A04(v38);
    double v133 = sub_100026A04(v39);
    double v129 = sin(v136);
    double v134 = cos(v133);
    double v137 = sub_100026A04(v38);
    double v60 = sub_100026A04(v39);
    double v125 = sin(v137);
    double v61 = sin(v60);
    __int128 v32 = v132;
    double v62 = sub_100026A04(v38);
    double v63 = v118;
    double v64 = v118 * v129 * v134;
    double v135 = v118 * v125 * v61;
    double v138 = v64;
    double v65 = cos(v62);
    double v66 = v118 * v65;
    if (*((_DWORD *)v132 + 1) != -1)
    {
      double v130 = v118 * v65;
      double v67 = sub_100026A04(v44);
      double v68 = sub_100026A04(v45);
      double v126 = sin(v67);
      double v120 = cos(v68);
      double v69 = sub_100026A04(v44);
      double v70 = sub_100026A04(v45);
      double v71 = sub_100026A04(v44);
      double v138 = v138 + v115 * v126 * v120;
      double v72 = v115 * sin(v69);
      double v135 = v135 + v72 * sin(v70);
      double v66 = v130 + v115 * cos(v71);
      double v63 = v114;
    }

    if (*((_DWORD *)v132 + 2) == -1)
    {
      double v81 = v135;
    }

    else
    {
      double v127 = v63;
      double v131 = v66;
      double v73 = sub_100026A04(v51);
      double v74 = sub_100026A04(v52);
      double v75 = sin(v73);
      double v76 = cos(v74);
      double v77 = sub_100026A04(v51);
      double v78 = sub_100026A04(v52);
      double v79 = sub_100026A04(v51);
      double v138 = v138 + v113 * v75 * v76;
      double v80 = v113 * sin(v77);
      double v81 = v135 + v80 * sin(v78);
      double v66 = v131 + v113 * cos(v79);
      double v63 = v127 + v116 * v121;
    }

    if (*((_DWORD *)v132 + 3) == -1)
    {
      double v90 = v138;
    }

    else
    {
      double v128 = v63;
      double v82 = v66;
      double v83 = sub_100026A04(v58);
      double v84 = sub_100026A04(v59);
      double v85 = sin(v83);
      double v86 = cos(v84);
      double v87 = sub_100026A04(v58);
      double v88 = sub_100026A04(v59);
      double v89 = sub_100026A04(v58);
      double v90 = v138 + v112 * v85 * v86;
      double v91 = v112 * sin(v87);
      double v81 = v81 + v91 * sin(v88);
      double v66 = v82 + v112 * cos(v89);
      double v63 = v128 + (1.0 - v116) * v121;
    }

    if (v63 != 0.0)
    {
      double v92 = acos(v66 / v63);
      double v93 = sub_100026A20(v92);
      double v94 = atan2(v81, v90);
      double v95 = sub_100026A20(v94);
      if (v95 <= 180.0 && v93 >= 0.0 && v93 <= 140.0 && v95 >= 0.0)
      {
        __int128 v96 = a3;
        uint64_t v98 = a3[1];
        unint64_t v97 = (unint64_t)a3[2];
        if ((unint64_t)v98 >= v97)
        {
          uint64_t v100 = ((char *)v98 - (char *)*a3) >> 4;
          unint64_t v101 = v100 + 1;
          uint64_t v102 = v97 - (void)*a3;
          if (v102 >> 3 > v101) {
            unint64_t v101 = v102 >> 3;
          }
          else {
            unint64_t v103 = v101;
          }
          v104 = (char *)sub_10011E44C((uint64_t)(a3 + 2), v103);
          v106 = (double *)&v104[16 * v100];
          double *v106 = v93;
          v106[1] = v95;
          v108 = (char *)*a3;
          v107 = (char *)a3[1];
          v109 = v106;
          if (v107 == (char *)*a3)
          {
            v110 = a3;
          }

          else
          {
            do
            {
              *((_OWORD *)v109 - 1) = *((_OWORD *)v107 - 1);
              v109 -= 2;
              v107 -= 16;
            }

            while (v107 != v108);
            v110 = a3;
            v107 = (char *)*a3;
          }

          v99 = v106 + 2;
          *v110 = v109;
          v110[1] = v106 + 2;
          v110[2] = (double *)&v104[16 * v105];
          if (v107)
          {
            operator delete(v107);
            __int128 v96 = a3;
          }

          else
          {
            __int128 v96 = v110;
          }
        }

        else
        {
          *uint64_t v98 = v93;
          v98[1] = v95;
          v99 = v98 + 2;
        }

        v96[1] = v99;
      }
    }

void sub_10011E018( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p)
{
  uint64_t v30 = *(void **)a19;
  if (*(void *)a19)
  {
    *(void *)(a19 + 8) = v30;
    operator delete(v30);
  }

  _Unwind_Resume(exception_object);
}

double sub_10011E0A4(double a1, double a2, double a3, double a4)
{
  double v8 = sub_100026A04(a1);
  double v9 = sin(v8);
  double v10 = sub_100026A04(a2);
  double v11 = v9 * cos(v10);
  double v12 = sub_100026A04(a3);
  double v13 = v11 * sin(v12);
  double v14 = sub_100026A04(a4);
  double v15 = cos(v14);
  double v16 = sub_100026A04(a1);
  double v17 = sin(v16);
  double v18 = sub_100026A04(a2);
  double v19 = v17 * sin(v18);
  double v20 = sub_100026A04(a3);
  double v21 = v19 * sin(v20);
  double v22 = sub_100026A04(a4);
  double v23 = v21 * sin(v22) + v13 * v15;
  double v24 = sub_100026A04(a1);
  double v25 = cos(v24);
  double v26 = sub_100026A04(a3);
  double v27 = v23 + v25 * cos(v26);
  double v28 = 1.0;
  if (v27 <= 1.0)
  {
    double v28 = v27;
    if (v27 < -1.0) {
      double v28 = -1.0;
    }
  }

  double v29 = acos(v28);
  return sub_100026A20(v29);
}

double sub_10011E1A8(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 998;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 850045863LL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0LL;
  return result;
}

void sub_10011E1E4(uint64_t a1@<X0>, int a2@<W1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == 5)
  {
    int v7 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    int v9 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    std::mutex::unlock(v7);
    if (!v9)
    {
      double v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v16 = 0;
        double v11 = "#me,AoACalculator: reverse LUT of Channel 5 is not initialized.";
        double v12 = (uint8_t *)&v16;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
        goto LABEL_10;
      }

      goto LABEL_10;
    }

void sub_10011E308(void ***a1, void **a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    BOOL v3 = v2;
    sub_10011E348(&v3);
    operator delete(v2);
  }

void sub_10011E348(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    double v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        double v6 = v4;
        sub_10011E3B8(&v6);
      }

      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10011E3B8(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_10011E3F8((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_10011E3F8(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      double v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

void *sub_10011E44C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10001D350();
  }
  return operator new(16 * a2);
}

uint64_t sub_10011E480()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F67C0 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F67B0 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F67B0, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  double v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F67D8 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F67C8 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F67C8, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  uint64_t v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  double v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F67F0 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F67E0 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F67E0, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  double v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  int v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F6808 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F67F8 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F67F8, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  __int16 v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  double v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F6820 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F6810 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6810, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  double v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  double v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F6838 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F6828 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6828, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  double v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  double v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F6850 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F6840 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6840, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  double v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F6868 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F6858 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6858, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  __int128 v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  int v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F6880 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F6870 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F6870,  (void *)&_mh_execute_header);
}

void sub_10011EA64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011EAD8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6)
  {
    sub_10011EB9C(a1, a2, (uint64_t *)__p, *(float *)(v6 + 16680), *(float *)(v6 + 16684));
    sub_10011F2BC(a1, (uint64_t *)__p, (double **)a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_10011EB70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_10011EB9C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  if (!*(void *)(a1 + 80)) {
    sub_10038C8B4();
  }
  if (a2[1] - *a2 != 72LL || *(void *)(*a2 + 8LL) - *(void *)*a2 != 80LL) {
    sub_10038C8DC();
  }
  double v112 = 0LL;
  double v113 = 0LL;
  uint64_t v114 = 0LL;
  sub_100120490(v111, 3uLL, (uint64_t)&v112);
  for (unsigned int i = 0; i != 5; ++i)
  {
    if (i > 2) {
      int v11 = -3;
    }
    else {
      int v11 = 2;
    }
    uint64_t v12 = i + v11;
    __int128 v13 = v111[0];
    float64x2_t v14 = vmulq_n_f64( *(float64x2_t *)(*(void *)*a2 + 16LL * v12),  *(double *)(*(void *)(a1 + 88) + 8LL * v12));
    __int128 v15 = v111[0][1];
    __int16 v16 = v111[0][2];
    if (v15 >= v16)
    {
      float64x2_t v93 = v14;
      double v18 = *v111[0];
      uint64_t v19 = ((char *)v15 - (char *)*v111[0]) >> 4;
      unint64_t v20 = v19 + 1;
      uint64_t v21 = (char *)v16 - (char *)v18;
      if (v21 >> 3 > v20) {
        unint64_t v20 = v21 >> 3;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        __int128 v23 = (char *)sub_10011E44C((uint64_t)(v111[0] + 2), v22);
        double v18 = *v13;
        __int128 v15 = v13[1];
      }

      else
      {
        __int128 v23 = 0LL;
      }

      double v24 = (double *)&v23[16 * v19];
      *(float64x2_t *)double v24 = v93;
      __int128 v17 = v24 + 2;
      if (v15 != v18)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
          v24 -= 2;
          v15 -= 2;
        }

        while (v15 != v18);
        double v18 = *v13;
      }

      *__int128 v13 = v24;
      v13[1] = v17;
      v13[2] = (double *)&v23[16 * v22];
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      *(float64x2_t *)__int128 v15 = v14;
      __int128 v17 = v15 + 2;
    }

    v13[1] = v17;
    __int128 v25 = v111[0];
    float64x2_t v26 = vmulq_n_f64(*(float64x2_t *)(*(void *)(*a2 + 24LL) + 16 * v12), *(double *)(*(void *)(a1 + 88) + 8 * v12));
    __int128 v27 = v111[0][4];
    double v28 = v111[0][5];
    if (v27 >= v28)
    {
      float64x2_t v94 = v26;
      uint64_t v30 = v111[0] + 3;
      __int128 v31 = v111[0][3];
      uint64_t v32 = ((char *)v27 - (char *)v31) >> 4;
      unint64_t v33 = v32 + 1;
      uint64_t v34 = (char *)v28 - (char *)v31;
      if (v34 >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        uint64_t v36 = (char *)sub_10011E44C((uint64_t)(v111[0] + 5), v35);
        __int128 v31 = v25[3];
        __int128 v27 = v25[4];
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      std::string v37 = (double *)&v36[16 * v32];
      *(float64x2_t *)std::string v37 = v94;
      __int128 v29 = v37 + 2;
      if (v27 != v31)
      {
        do
        {
          *((_OWORD *)v37 - 1) = *((_OWORD *)v27 - 1);
          v37 -= 2;
          v27 -= 2;
        }

        while (v27 != v31);
        __int128 v31 = *v30;
      }

      v25[3] = v37;
      v25[4] = v29;
      v25[5] = (double *)&v36[16 * v35];
      if (v31) {
        operator delete(v31);
      }
    }

    else
    {
      *(float64x2_t *)__int128 v27 = v26;
      __int128 v29 = v27 + 2;
    }

    v25[4] = v29;
    std::string v38 = v111[0];
    float64x2_t v39 = vmulq_n_f64(*(float64x2_t *)(*(void *)(*a2 + 48LL) + 16 * v12), *(double *)(*(void *)(a1 + 88) + 8 * v12));
    uint64_t v40 = v111[0][7];
    int v41 = v111[0][8];
    if (v40 >= v41)
    {
      float64x2_t v95 = v39;
      uint64_t v43 = v111[0] + 6;
      double v44 = v111[0][6];
      uint64_t v45 = ((char *)v40 - (char *)v44) >> 4;
      unint64_t v46 = v45 + 1;
      uint64_t v47 = (char *)v41 - (char *)v44;
      if (v47 >> 3 > v46) {
        unint64_t v46 = v47 >> 3;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        int v49 = (char *)sub_10011E44C((uint64_t)(v111[0] + 8), v48);
        double v44 = v38[6];
        uint64_t v40 = v38[7];
      }

      else
      {
        int v49 = 0LL;
      }

      uint64_t v50 = (double *)&v49[16 * v45];
      *(float64x2_t *)uint64_t v50 = v95;
      int v42 = v50 + 2;
      if (v40 != v44)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v40 - 1);
          v50 -= 2;
          v40 -= 2;
        }

        while (v40 != v44);
        double v44 = *v43;
      }

      v38[6] = v50;
      v38[7] = v42;
      v38[8] = (double *)&v49[16 * v48];
      if (v44) {
        operator delete(v44);
      }
    }

    else
    {
      *(float64x2_t *)uint64_t v40 = v39;
      int v42 = v40 + 2;
    }

    v38[7] = v42;
  }

  sub_10011F71C(v111[0], (double **)&__p);
  sub_10011F71C(v111[0] + 3, &v107);
  sub_10011F71C(v111[0] + 6, &v105);
  if (v110 - (_BYTE *)__p != 112 || (char *)v108 - (char *)v107 != 112 || (char *)v106 - (char *)v105 != 112) {
    __assert_rtn( "nn_preprocess",  "NeuralNetworkClassifier.cpp",  199,  "fftout0.size() == kNumOfFrequencyBins && fftout1.size() == kNumOfFrequencyBins && fftout2.size() == kNumOfFrequencyBins");
  }
  double v103 = 0.0;
  sub_100120600(a3, 0x2AuLL, &v103);
  double v96 = a5 * -0.0;
  double v51 = -a5;
  double v52 = a4 * -0.0;
  double v53 = -a4;
  __int128 v54 = v107;
  int v55 = (char *)__p;
  unint64_t v56 = 1LL;
  uint64_t v57 = 280LL;
  do
  {
    double v58 = -*(double *)&v55[v56 * 8];
    uint64_t v101 = *(void *)&v55[v56 * 8 - 8];
    double v102 = v58;
    double v103 = sub_10011F9B0(&v54[v56 - 1], (double *)&v101);
    uint64_t v104 = v59;
    double v97 = v96;
    double v98 = v51;
    sub_10011FB7C(&v97);
    uint64_t v99 = v60;
    uint64_t v100 = v61;
    double v62 = sub_10011F9B0(&v103, (double *)&v99);
    double v64 = v63;
    double v65 = hypot(v62, v63);
    if (v65 > 0.0)
    {
      double v62 = v62 / v65;
      double v64 = v64 / v65;
    }

    double v66 = (double *)(*a3 + v56 * 8);
    *(v66 - 1) = v62;
    double *v66 = v64;
    double v67 = -*(double *)((char *)__p + v56 * 8);
    uint64_t v101 = *(void *)((char *)__p + v56 * 8 - 8);
    double v102 = v67;
    double v103 = sub_10011F9B0(&v105[v56 - 1], (double *)&v101);
    uint64_t v104 = v68;
    double v97 = v52;
    double v98 = v53;
    sub_10011FB7C(&v97);
    uint64_t v99 = v69;
    uint64_t v100 = v70;
    double v71 = sub_10011F9B0(&v103, (double *)&v99);
    double v73 = v72;
    double v74 = hypot(v71, v72);
    if (v74 > 0.0)
    {
      double v71 = v71 / v74;
      double v73 = v73 / v74;
    }

    uint64_t v75 = *a3;
    unint64_t v76 = *a3 + v56 * 8;
    *(double *)(v76 + 104) = v71;
    *(double *)(v76 + 112) = v73;
    int v55 = (char *)__p;
    double v77 = hypot(*(double *)((char *)__p + v56 * 8 - 8), *(double *)((char *)__p + v56 * 8));
    double v78 = v77 * v77;
    __int128 v54 = v107;
    double v79 = hypot(v107[v56 - 1], v107[v56]);
    double v80 = v79 * v79;
    double v81 = v105;
    double v82 = hypot(v105[v56 - 1], v105[v56]);
    double v83 = v82 * v82;
    double v84 = v78 + 1.0e-12;
    double v85 = log10(v80 / v84) * 10.0;
    double v86 = log10(v83 / v84);
    double v87 = (double *)(v75 + v57);
    *(v87 - 7) = v85;
    *double v87 = v86 * 10.0;
    v56 += 2LL;
    v57 += 8LL;
  }

  while (v56 != 15);
  uint64_t v88 = 0LL;
  double v89 = 0.0;
  do
  {
    double v89 = v89 + *(double *)(v75 + v88) * *(double *)(v75 + v88);
    v88 += 8LL;
  }

  while (v88 != 224);
  uint64_t v90 = 0LL;
  double v91 = sqrt(v89 / 28.0);
  uint64_t v92 = *a3;
  do
  {
    if (v91 != 0.0) {
      *(double *)(v92 + v90) = *(double *)(v92 + v90) / v91;
    }
    v90 += 8LL;
  }

  while (v90 != 224);
  if (v81)
  {
    v106 = v81;
    operator delete(v81);
    __int128 v54 = v107;
  }

  if (v54)
  {
    v108 = v54;
    operator delete(v54);
  }

  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }

  __p = v111;
  sub_10011E3B8((void ***)&__p);
  if (v112)
  {
    double v113 = v112;
    operator delete(v112);
  }

void sub_10011F200( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, char *a25, char *a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25)
  {
    a26 = a25;
    operator delete(a25);
  }

  a25 = &a28;
  sub_10011E3B8((void ***)&a25);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }

  _Unwind_Resume(a1);
}

void sub_10011F2BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, double **a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (!v3) {
    sub_10038C904();
  }
  if (a2[1] - *a2 != 336) {
    sub_10038C92C();
  }
  sub_10011FC48(a2, v3, v34);
  sub_10011FCDC((uint64_t *)v34, *(void *)(a1 + 80) + 15264LL, v33);
  sub_10011FD78(v33, &v31);
  double v28 = 0LL;
  __int128 v29 = 0LL;
  uint64_t v30 = 0LL;
  sub_10011B560(&v28, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 3);
  if (v29 - v28 != 400) {
    __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 262, "input_layer1.size() == kNNLayer1InputDimension");
  }
  sub_10011FDF0((uint64_t *)&v28, *(void *)(a1 + 80) + 8600LL, v27);
  sub_10011FE84((uint64_t *)v27, *(void *)(a1 + 80) + 16072LL, v26);
  sub_10011FD78((double **)v26, &v24);
  uint64_t v21 = 0LL;
  unint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  sub_10011B560(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
  if (v22 - (_BYTE *)v21 != 200) {
    __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 278, "input_layer2.size() == kNNLayer2InputDimension");
  }
  sub_10011FF1C((uint64_t *)&v21, *(void *)(a1 + 80) + 13700LL, v20);
  sub_10011FFAC((uint64_t *)v20, *(void *)(a1 + 80) + 16480LL, v19);
  sub_10011FD78((double **)v19, &v17);
  __p = 0LL;
  __int128 v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_10011B560(&__p, v17, (uint64_t)v18, (v18 - (_BYTE *)v17) >> 3);
  if (v15 - (_BYTE *)__p != 96) {
    __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 293, "input_layer3.size() == kNNLayer3InputDimension");
  }
  sub_100120044((float64x2_t **)&__p, *(void *)(a1 + 80) + 14948LL, a3);
  uint64_t v8 = a3;
  uint64_t v6 = *a3;
  __int128 v7 = v8[1];
  if (v7 != v6)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = (unint64_t)(v7 - v6) <= 1 ? 1LL : v7 - v6;
    double v11 = 0.0;
    do
    {
      double v12 = exp(v6[v9]);
      v6[v9] = v12;
      double v11 = v11 + v12;
      ++v9;
    }

    while (v10 != v9);
    if (v11 > 0.0 && v7 != v6)
    {
      do
      {
        double *v6 = *v6 / v11;
        ++v6;
        --v10;
      }

      while (v10);
    }
  }

  if (__p)
  {
    __int128 v15 = __p;
    operator delete(__p);
  }

  if (v17)
  {
    double v18 = v17;
    operator delete(v17);
  }

  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }

  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }

  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }

  if (v24)
  {
    __int128 v25 = v24;
    operator delete(v24);
  }

  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }

  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }

  if (v28)
  {
    __int128 v29 = v28;
    operator delete(v28);
  }

  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }

  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }

  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }

void sub_10011F5EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  unint64_t v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(void *)(v31 - 152) = v33;
    operator delete(v33);
  }

  uint64_t v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(void *)(v31 - 128) = v34;
    operator delete(v34);
  }

  unint64_t v35 = *(void **)(v31 - 112);
  if (v35)
  {
    *(void *)(v31 - 104) = v35;
    operator delete(v35);
  }

  uint64_t v36 = *(void **)(v31 - 88);
  if (v36)
  {
    *(void *)(v31 - 80) = v36;
    operator delete(v36);
  }

  _Unwind_Resume(exception_object);
}

void sub_10011F71C(double **a1@<X0>, double **a2@<X8>)
{
  int v4 = 0;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v5 = (uint64_t)(a2 + 2);
  int v6 = 13;
  do
  {
    __int128 v7 = *a1;
    double v8 = (double)v6 * -0.0;
    double v9 = (double)v6 * -0.392699082;
    v55[0] = v8;
    v55[1] = v9;
    sub_10011FB7C(v55);
    v56[0] = v10;
    v56[1] = v11;
    double v12 = sub_10011F9B0(v7 + 2, v56);
    double v47 = v13;
    double v48 = v12;
    double v14 = *v7;
    double v15 = v7[1];
    uint64_t v16 = *a1;
    v53[0] = v8 + v8;
    v53[1] = v9 + v9;
    sub_10011FB7C(v53);
    v54[0] = v17;
    v54[1] = v18;
    double v19 = sub_10011F9B0(v16 + 4, v54);
    double v21 = v20;
    unint64_t v22 = *a1;
    v51[0] = v8 * 14.0;
    v51[1] = v9 * 14.0;
    sub_10011FB7C(v51);
    v52[0] = v23;
    v52[1] = v24;
    double v25 = sub_10011F9B0(v22 + 6, v52);
    double v27 = v26;
    double v28 = *a1;
    v49[0] = v8 * 15.0;
    v49[1] = v9 * 15.0;
    sub_10011FB7C(v49);
    v50[0] = v29;
    v50[1] = v30;
    double v31 = sub_10011F9B0(v28 + 8, v50);
    double v32 = v47 + v15 + v21 + v27;
    double v33 = v48 + v14 + v19 + v25 + v31;
    double v35 = v32 + v34;
    std::string v37 = a2[1];
    unint64_t v36 = (unint64_t)a2[2];
    if ((unint64_t)v37 >= v36)
    {
      float64x2_t v39 = *a2;
      uint64_t v40 = ((char *)v37 - (char *)*a2) >> 4;
      unint64_t v41 = v40 + 1;
      uint64_t v42 = v36 - (void)v39;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        double v44 = (char *)sub_10011E44C(v5, v43);
        float64x2_t v39 = *a2;
        std::string v37 = a2[1];
      }

      else
      {
        double v44 = 0LL;
      }

      uint64_t v45 = (double *)&v44[16 * v40];
      *uint64_t v45 = v33;
      v45[1] = v35;
      unint64_t v46 = v45;
      if (v37 != v39)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v37 - 1);
          v46 -= 2;
          v37 -= 2;
        }

        while (v37 != v39);
        float64x2_t v39 = *a2;
      }

      std::string v38 = v45 + 2;
      *a2 = v46;
      a2[1] = v45 + 2;
      a2[2] = (double *)&v44[16 * v43];
      if (v39) {
        operator delete(v39);
      }
    }

    else
    {
      *std::string v37 = v33;
      v37[1] = v35;
      std::string v38 = v37 + 2;
    }

    a2[1] = v38;
    if (v6 + 1 <= 0) {
      int v6 = -(-(v6 + 1) & 0xF);
    }
    else {
      int v6 = (v6 + 1) & 0xF;
    }
    ++v4;
  }

  while (v4 != 7);
}

void sub_10011F980(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

double sub_10011F9B0(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

void sub_10011FB7C(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  if (v2 == 0.0)
  {
    exp(v1);
    return;
  }

  if (fabs(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL) {
        return;
      }
    }

    else if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      double v2 = 1.0;
    }
  }

  double v3 = v2;
  exp(v1);
  __sincos_stret(v3);
}

double sub_10011FC48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = 0LL;
  uint64_t v5 = sub_100120600(a3, 0x32uLL, &v13);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = a2 + 8400;
  uint64_t v9 = *v5;
  do
  {
    uint64_t v10 = 0LL;
    double v11 = 0.0;
    do
    {
      double v11 = v11 + *(double *)(v7 + 8 * v10) * *(float *)(a2 + 4 * v10);
      ++v10;
    }

    while (v10 != 42);
    double result = v11 + *(float *)(v8 + 4 * v6);
    *(double *)(v9 + 8 * v6++) = result;
    a2 += 168LL;
  }

  while (v6 != 50);
  return result;
}

double sub_10011FCDC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = 0LL;
  uint64_t v5 = sub_100120600(a3, 0x32uLL, &v11);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = *v5;
  uint64_t v9 = (float *)a2;
  do
  {
    double result = v9[100] + (*(double *)(v7 + v6) - *v9) / sqrt(*(double *)(a2 + 800) + v9[50]) * v9[150];
    *(double *)(v8 + v6) = result;
    v6 += 8LL;
    ++v9;
  }

  while (v6 != 400);
  return result;
}

void sub_10011FD78(double **a1@<X0>, void *a2@<X8>)
{
  int v4 = *a1;
  double v3 = a1[1];
  unint64_t v5 = v3 - *a1;
  uint64_t v10 = 0LL;
  uint64_t v6 = (double **)sub_100120600(a2, v5, &v10);
  if (v3 != v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = *v6;
    if (v5 <= 1) {
      unint64_t v5 = 1LL;
    }
    do
    {
      double v9 = *v7++;
      *v8++ = tanh(v9);
      --v5;
    }

    while (v5);
  }

double sub_10011FDF0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = 0LL;
  unint64_t v5 = sub_100120600(a3, 0x19uLL, &v13);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = a2 + 5000;
  uint64_t v9 = *v5;
  do
  {
    uint64_t v10 = 0LL;
    double v11 = 0.0;
    do
    {
      double v11 = v11 + *(double *)(v7 + 8 * v10) * *(float *)(a2 + 4 * v10);
      ++v10;
    }

    while (v10 != 50);
    double result = v11 + *(float *)(v8 + 4 * v6);
    *(double *)(v9 + 8 * v6++) = result;
    a2 += 200LL;
  }

  while (v6 != 25);
  return result;
}

double sub_10011FE84@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = 0LL;
  unint64_t v5 = sub_100120600(a3, 0x19uLL, &v14);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = (float *)(a2 + 200);
  uint64_t v9 = *v5;
  do
  {
    double v10 = (*(double *)(v7 + v6) - *(v8 - 50)) / sqrt(*(double *)(a2 + 400) + *(v8 - 25));
    double v11 = v8[25];
    float v12 = *v8++;
    double result = v12 + v10 * v11;
    *(double *)(v9 + v6) = result;
    v6 += 8LL;
  }

  while (v6 != 200);
  return result;
}

double sub_10011FF1C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = 0LL;
  unint64_t v5 = sub_100120600(a3, 0xCuLL, &v13);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = a2 + 1200;
  uint64_t v9 = *v5;
  do
  {
    uint64_t v10 = 0LL;
    double v11 = 0.0;
    do
    {
      double v11 = v11 + *(double *)(v7 + 8 * v10) * *(float *)(a2 + 4 * v10);
      ++v10;
    }

    while (v10 != 25);
    double result = v11 + *(float *)(v8 + 4 * v6);
    *(double *)(v9 + 8 * v6++) = result;
    a2 += 100LL;
  }

  while (v6 != 12);
  return result;
}

double sub_10011FFAC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = 0LL;
  unint64_t v5 = sub_100120600(a3, 0xCuLL, &v14);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = (float *)(a2 + 96);
  uint64_t v9 = *v5;
  do
  {
    double v10 = (*(double *)(v7 + v6) - *(v8 - 24)) / sqrt(*(double *)(a2 + 192) + *(v8 - 12));
    double v11 = v8[12];
    float v12 = *v8++;
    double result = v12 + v10 * v11;
    *(double *)(v9 + v6) = result;
    v6 += 8LL;
  }

  while (v6 != 96);
  return result;
}

double sub_100120044@<D0>(float64x2_t **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = 0LL;
  unint64_t v5 = sub_100120600(a3, 6uLL, &v19);
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v8 = a2 + 288;
  uint64_t v9 = *v5;
  do
  {
    uint64_t v10 = 0LL;
    double v11 = 0.0;
    float v12 = v7;
    do
    {
      float64x2_t v13 = *v12;
      float64x2_t v14 = v12[1];
      v12 += 2;
      float32x4_t v15 = *(float32x4_t *)(a2 + v10);
      float64x2_t v16 = vmulq_f64(v14, vcvt_hight_f64_f32(v15));
      float64x2_t v17 = vmulq_f64(v13, vcvtq_f64_f32(*(float32x2_t *)v15.f32));
      double v11 = v11 + v17.f64[0] + v17.f64[1] + v16.f64[0] + v16.f64[1];
      v10 += 16LL;
    }

    while (v10 != 48);
    double result = v11 + *(float *)(v8 + 4 * v6);
    *(double *)(v9 + 8 * v6++) = result;
    a2 += 48LL;
  }

  while (v6 != 6);
  return result;
}

uint64_t sub_1001200F8(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 998;
  *(void *)(a1 + 8) = 0LL;
  sub_100120404(a1 + 16);
  sub_100120404(a1 + 128);
  int v3 = *(_DWORD *)a1;
  if (*(int *)a1 <= 99)
  {
    int v4 = &unk_100421DD8;
    switch(v3)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_7;
      case 3:
      case 4:
      case 5:
      case 6:
        int v4 = &unk_100421ED8;
        goto LABEL_7;
      case 7:
      case 8:
      case 9:
      case 10:
        int v4 = &unk_100421FD8;
        goto LABEL_7;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_6;
      default:
        return a1;
    }
  }

  else
  {
    if (v3 > 199)
    {
    }

    else if ((v3 - 100) >= 0x16)
    {
      return a1;
    }

void sub_1001201C4(_Unwind_Exception *a1)
{
}

void sub_1001201D8(std::mutex *this)
{
  double v2 = *(void **)&this[1].__m_.__opaque[16];
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[24] = v2;
    operator delete(v2);
  }

  int v3 = *(void **)&this[1].__m_.__opaque[8];
  *(void *)&this[1].__m_.__opaque[8] = 0LL;
  if (v3) {
    operator delete(v3);
  }
  std::mutex::~mutex(this);
}

void sub_10012021C(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 5) {
    uint64_t v4 = a1 + 16;
  }
  else {
    uint64_t v4 = a1 + 128;
  }
  sub_10011EAD8(v4, a2, a4);
}

unint64_t sub_100120230(uint64_t a1, double a2, double a3)
{
  int v3 = *(const mach_header_64 **)(a1 + 8);
  if (v3)
  {
    if ((*(double *)&v3->magic > a3
       || *(double *)&v3->cpusubtype < a3
       || *(double *)&v3->ncmds > a2
       || *(double *)&v3->flags < a2)
      && (*(double *)&v3[1].magic > a3
       || *(double *)&v3[1].cpusubtype < a3
       || *(double *)&v3[1].ncmds > a2
       || *(double *)&v3[1].flags < a2)
      && (*(double *)&v3[2].magic > a3
       || *(double *)&v3[2].cpusubtype < a3
       || *(double *)&v3[2].ncmds > a2
       || *(double *)&v3[2].flags < a2))
    {
      if (*(double *)&v3[3].magic > a3
        || *(double *)&v3[3].cpusubtype < a3
        || *(double *)&v3[3].ncmds > a2
        || *(double *)&v3[3].flags < a2)
      {
        if (*(double *)&v3[4].magic > a3
          || *(double *)&v3[4].cpusubtype < a3
          || *(double *)&v3[4].ncmds > a2
          || *(double *)&v3[4].flags < a2)
        {
          if (*(double *)&v3[5].magic > a3
            || *(double *)&v3[5].cpusubtype < a3
            || *(double *)&v3[5].ncmds > a2
            || *(double *)&v3[5].flags < a2)
          {
            if (*(double *)&v3[6].magic > a3
              || *(double *)&v3[6].cpusubtype < a3
              || *(double *)&v3[6].ncmds > a2
              || *(double *)&v3[6].flags < a2)
            {
              if (*(double *)&v3[7].magic > a3
                || *(double *)&v3[7].cpusubtype < a3
                || *(double *)&v3[7].ncmds > a2
                || *(double *)&v3[7].flags < a2)
              {
                sub_10038C954();
              }

              int v3 = &_mh_execute_header;
              uint64_t v4 = 6LL;
            }

            else
            {
              int v3 = &_mh_execute_header;
              uint64_t v4 = 5LL;
            }
          }

          else
          {
            int v3 = &_mh_execute_header;
            uint64_t v4 = 4LL;
          }
        }

        else
        {
          int v3 = &_mh_execute_header;
          uint64_t v4 = 3LL;
        }
      }

      else
      {
        int v3 = &_mh_execute_header;
        uint64_t v4 = 2LL;
      }
    }

    else
    {
      int v3 = &_mh_execute_header;
      uint64_t v4 = 1LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4 | (unint64_t)v3;
}

uint64_t sub_100120404(uint64_t a1)
{
  *(void *)a1 = 850045863LL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0LL;
  double v2 = operator new(0x28uLL);
  *(void *)(a1 + 96) = v2 + 5;
  *(void *)(a1 + 104) = v2 + 5;
  v2[4] = 0LL;
  *(_OWORD *)double v2 = xmmword_1004220D8;
  *((_OWORD *)v2 + 1) = unk_1004220E8;
  *(void *)(a1 + 88) = v2;
  return a1;
}

void sub_100120478(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = 0LL;
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void *sub_100120490(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001E0CC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0LL;
      v6[1] = 0LL;
      _DWORD v6[2] = 0LL;
      sub_100120548(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
      v6 += 3;
      v9 -= 24LL;
    }

    while (v9);
    a1[1] = v8;
  }

  return a1;
}

void sub_100120528( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_100120548(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_1001205C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1001205A4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_1001205C0(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10001E11C();
  }
  double result = (char *)sub_10011E44C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_100120600(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10011B5D8(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_100120664(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100120680()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  double v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F6898 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F6888 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6888, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F68B0 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F68A0 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F68A0, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  uint64_t v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F68C8 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F68B8 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F68B8, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  float v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  float64x2_t v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F68E0 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F68D0 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F68D0, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  float64x2_t v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  double v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F68F8 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F68E8 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F68E8, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  double v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F6910 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F6900 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6900, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  double v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  double v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F6928 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F6918 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6918, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  double v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  double v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F6940 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F6930 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6930, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  double v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  double v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F6958 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F6948 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F6948,  (void *)&_mh_execute_header);
}

void sub_100120C64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100120CD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE530[a1]);
}

void *sub_100120CEC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE588[a1]);
}

void *sub_100120D00@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE5D0[a1]);
}

void *sub_100120D14@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE5F0[a1]);
}

uint64_t sub_100120D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10001E914(a1, a2);
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_BYTE *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 248) = 0;
  *(_BYTE *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 360) = 0;
  *(_BYTE *)(v3 + 368) = 0;
  *(_BYTE *)(v3 + 440) = 0;
  *(void *)(v3 + 448) = v3 + 456;
  *(void *)(v3 + 456) = 0LL;
  *(void *)(v3 + 480) = 0LL;
  *(void *)(v3 + 488) = 0LL;
  *(void *)(v3 + 464) = 0LL;
  *(void *)(v3 + 472) = v3 + 480;
  *(void *)(v3 + 504) = 0LL;
  *(void *)(v3 + 512) = 0LL;
  *(void *)(v3 + 496) = v3 + 504;
  *(void *)(v3 + 536) = 0LL;
  *(void *)(v3 + 528) = 0LL;
  *(void *)(v3 + 520) = v3 + 528;
  *(void *)(v3 + 560) = 0LL;
  *(void *)(v3 + 552) = 0LL;
  *(void *)(v3 + 544) = v3 + 552;
  *(void *)(v3 + 576) = 0LL;
  *(void *)(v3 + 584) = 0LL;
  *(void *)(v3 + 568) = v3 + 576;
  *(void *)(v3 + 600) = 0LL;
  *(void *)(v3 + 608) = 0LL;
  *(void *)(v3 + 592) = v3 + 600;
  *(void *)(v3 + 624) = 0LL;
  *(void *)(v3 + 632) = 0LL;
  *(void *)(v3 + 616) = v3 + 624;
  *(void *)(v3 + 648) = 0LL;
  *(void *)(v3 + 656) = 0LL;
  *(void *)(v3 + 640) = v3 + 648;
  *(void *)(v3 + 680) = 0LL;
  *(void *)(v3 + 672) = 0LL;
  *(void *)(v3 + 664) = v3 + 672;
  *(void *)(v3 + 704) = 0LL;
  *(void *)(v3 + 696) = 0LL;
  *(void *)(v3 + 688) = v3 + 696;
  *(void *)(v3 + 720) = 0LL;
  *(void *)(v3 + 728) = 0LL;
  *(void *)(v3 + 712) = v3 + 720;
  if (!*(void *)(v3 + 24)) {
    __assert_rtn( "RoseMeasurementAggregator",  "MeasurementAggregator.cpp",  23,  "fHandleReceivedRoseMeasurementsCb != nullptr");
  }
  return a1;
}

void sub_100120EA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  uint64_t v22 = *(void *)(v12 + 24);
  if (v22 == v12)
  {
    uint64_t v23 = 4LL;
  }

  else
  {
    if (!v22) {
      goto LABEL_6;
    }
    uint64_t v23 = 5LL;
    uint64_t v12 = *(void *)(v12 + 24);
  }

  (*(void (**)(uint64_t))(*(void *)v12 + 8 * v23))(v12);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100120F78(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v41 = *(_WORD *)(a2 + 56);
  uint64_t v39 = *(void *)(a2 + 64);
  unint64_t v40 = v39;
  LOWORD(v38) = v41;
  *(void *)buf = &v41;
  uint64_t v4 = sub_100124FFC((uint64_t **)(a1 + 592), &v41, (uint64_t)&unk_1004242F8, (_WORD **)buf);
  sub_1001250C8(v4 + 5, &v40, (uint64_t *)&v40);
  __int128 v5 = (os_log_s *)qword_1008000A0;
  if (*(_BYTE *)(a2 + 16))
  {
    int v6 = *(unsigned __int16 *)(a2 + 112);
    uint64_t v7 = *(void *)(a2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v45 = 1024;
      int v46 = v41;
      __int16 v47 = 1024;
      int v48 = v6;
      __int16 v49 = 2048;
      uint64_t v50 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: machCont %.6f ticketId %hu cycleIndex %hu targetMacAddress 0x%016llx",  buf,  0x22u);
    }

    int v8 = *(unsigned __int16 *)(a2 + 96);
    if (*(_WORD *)(a2 + 96))
    {
      __int128 v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10032B2C8(v8, buf);
        if (v48 >= 0) {
          uint64_t v10 = buf;
        }
        else {
          uint64_t v10 = *(_BYTE **)buf;
        }
        *(_DWORD *)uint64_t v42 = 136315138;
        unint64_t v43 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: ignoring due to status %s",  v42,  0xCu);
        if (SHIBYTE(v48) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else
    {
      *(void *)buf = &v38;
      __int128 v11 = sub_100125180((uint64_t **)(a1 + 448), (unsigned __int16 *)&v38, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
      uint64_t v12 = v11;
      uint64_t v13 = (uint64_t)(v11 + 6);
      sub_10012179C(v13, a2);
      *((_WORD *)v12 + 872) = v6;
      *((_BYTE *)v12 + 1746) = 1;
      uint64_t v14 = *(void *)(a2 + 16);
      v12[219] = *(void *)(a2 + 8);
      *((_BYTE *)v12 + 1760) = v14;
      if (*(_BYTE *)(a1 + 160))
      {
        if (*(unsigned __int16 *)(a2 + 56) == *(unsigned __int16 *)(a1 + 40)
          && *(unsigned __int16 *)(a2 + 112) == *(unsigned __int16 *)(a1 + 46)
          && *(_DWORD *)(a2 + 292) == *(_DWORD *)(a1 + 48))
        {
          sub_1000065CC(buf, "addRangeResult: found AOACIRDataEvent match");
          if (!*(_BYTE *)(a1 + 160)) {
            sub_100006080();
          }
          sub_100121864((uint64_t *)buf, a1 + 32);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
          *((_OWORD *)v12 + 66) = *(_OWORD *)(a1 + 32);
          __int128 v15 = *(_OWORD *)(a1 + 48);
          __int128 v16 = *(_OWORD *)(a1 + 64);
          __int128 v17 = *(_OWORD *)(a1 + 80);
          *((_OWORD *)v12 + 70) = *(_OWORD *)(a1 + 96);
          *((_OWORD *)v12 + 69) = v17;
          *((_OWORD *)v12 + 68) = v16;
          *((_OWORD *)v12 + 67) = v15;
          __int128 v18 = *(_OWORD *)(a1 + 112);
          __int128 v19 = *(_OWORD *)(a1 + 128);
          __int128 v20 = *(_OWORD *)(a1 + 144);
          *((_BYTE *)v12 + 1184) = *(_BYTE *)(a1 + 160);
          *((_OWORD *)v12 + 73) = v20;
          *((_OWORD *)v12 + 72) = v19;
          *((_OWORD *)v12 + 71) = v18;
        }

        else
        {
          sub_1000065CC(buf, "addRangeResult: purging mismatched AOACIRDataEvent");
          if (!*(_BYTE *)(a1 + 160)) {
            sub_100006080();
          }
          sub_100121864((uint64_t *)buf, a1 + 32);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (*(_BYTE *)(a1 + 160)) {
          *(_BYTE *)(a1 + 160) = 0;
        }
      }

      else
      {
        uint64_t v21 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: no cached AOACIRDataEvent",  buf,  2u);
        }
      }

      if (*(_BYTE *)(a1 + 248))
      {
        if (*(unsigned __int16 *)(a2 + 56) == *(unsigned __int16 *)(a1 + 176)
          && *(unsigned __int16 *)(a2 + 112) == *(unsigned __int16 *)(a1 + 182)
          && *(_DWORD *)(a2 + 292) == *(_DWORD *)(a1 + 200))
        {
          sub_1000065CC(buf, "addRangeResult: found TOACIRDataEvent match");
          if (!*(_BYTE *)(a1 + 248)) {
            sub_100006080();
          }
          sub_100121948((uint64_t *)buf, a1 + 168);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
          __int128 v22 = *(_OWORD *)(a1 + 184);
          *(_OWORD *)(v12 + 149) = *(_OWORD *)(a1 + 168);
          *(_OWORD *)(v12 + 151) = v22;
          __int128 v23 = *(_OWORD *)(a1 + 200);
          __int128 v24 = *(_OWORD *)(a1 + 216);
          __int128 v25 = *(_OWORD *)(a1 + 232);
          *((_BYTE *)v12 + 1272) = *(_BYTE *)(a1 + 248);
          *(_OWORD *)(v12 + 155) = v24;
          *(_OWORD *)(v12 + 157) = v25;
          *(_OWORD *)(v12 + 153) = v23;
        }

        else
        {
          sub_1000065CC(buf, "addRangeResult: purging mismatched TOACIRDataEvent");
          if (!*(_BYTE *)(a1 + 248)) {
            sub_100006080();
          }
          sub_100121948((uint64_t *)buf, a1 + 168);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (*(_BYTE *)(a1 + 248)) {
          *(_BYTE *)(a1 + 248) = 0;
        }
      }

      else
      {
        double v26 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: no cached TOACIRDataEvent",  buf,  2u);
        }
      }

      if (*(_BYTE *)(a1 + 360))
      {
        if (*(unsigned __int16 *)(a2 + 56) == *(unsigned __int16 *)(a1 + 264)
          && *(unsigned __int16 *)(a2 + 112) == *(unsigned __int16 *)(a1 + 270)
          && *(_DWORD *)(a2 + 292) == *(_DWORD *)(a1 + 324))
        {
          sub_1000065CC(buf, "addRangeResult: found TOACIRDataV2Event match");
          if (!*(_BYTE *)(a1 + 360)) {
            sub_100006080();
          }
          sub_100121A2C((uint64_t *)buf, a1 + 256);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
          __int128 v27 = *(_OWORD *)(a1 + 256);
          __int128 v28 = *(_OWORD *)(a1 + 272);
          *((_OWORD *)v12 + 82) = *(_OWORD *)(a1 + 288);
          *((_OWORD *)v12 + 81) = v28;
          *((_OWORD *)v12 + 80) = v27;
          __int128 v29 = *(_OWORD *)(a1 + 304);
          __int128 v30 = *(_OWORD *)(a1 + 320);
          __int128 v31 = *(_OWORD *)(a1 + 336);
          *(_OWORD *)((char *)v12 + 1369) = *(_OWORD *)(a1 + 345);
          *((_OWORD *)v12 + 85) = v31;
          *((_OWORD *)v12 + 84) = v30;
          *((_OWORD *)v12 + 83) = v29;
        }

        else
        {
          sub_1000065CC(buf, "addRangeResult: purging mismatched TOACIRDataV2Event");
          if (!*(_BYTE *)(a1 + 360)) {
            sub_100006080();
          }
          sub_100121A2C((uint64_t *)buf, a1 + 256);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (*(_BYTE *)(a1 + 360)) {
          *(_BYTE *)(a1 + 360) = 0;
        }
      }

      else
      {
        double v32 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: no cached TOACIRDataV2Event",  buf,  2u);
        }
      }

      if (*(_BYTE *)(a1 + 440))
      {
        if (*(unsigned __int16 *)(a2 + 56) == *(unsigned __int16 *)(a1 + 376)
          && *(unsigned __int16 *)(a2 + 112) == *(unsigned __int16 *)(a1 + 388)
          && *(_DWORD *)(a2 + 292) == *(_DWORD *)(a1 + 400))
        {
          sub_1000065CC(buf, "addRangeResult: found RangeResultDebugV2Event match");
          if (!*(_BYTE *)(a1 + 440)) {
            sub_100006080();
          }
          sub_100121B10((uint64_t *)buf, a1 + 368);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
          *((_OWORD *)v12 + 104) = *(_OWORD *)(a1 + 368);
          __int128 v33 = *(_OWORD *)(a1 + 384);
          __int128 v34 = *(_OWORD *)(a1 + 400);
          __int128 v35 = *(_OWORD *)(a1 + 416);
          *(_OWORD *)((char *)v12 + 1721) = *(_OWORD *)(a1 + 425);
          *((_OWORD *)v12 + 107) = v35;
          *((_OWORD *)v12 + 106) = v34;
          *((_OWORD *)v12 + 105) = v33;
        }

        else
        {
          sub_1000065CC(buf, "addRangeResult: purging mismatched RangeResultDebugV2Event");
          if (!*(_BYTE *)(a1 + 440)) {
            sub_100006080();
          }
          sub_100121B10((uint64_t *)buf, a1 + 368);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (*(_BYTE *)(a1 + 440)) {
          *(_BYTE *)(a1 + 440) = 0;
        }
      }

      else
      {
        unint64_t v36 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResult: no cached RangeResultDebugV2Event",  buf,  2u);
        }
      }

      if (*((_BYTE *)v12 + 1184) && *((_BYTE *)v12 + 1272))
      {
        std::string v37 = (os_log_s *)qword_1008000A0;
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)
          || !sub_10038C9F0(v37, (_BYTE *)v12 + 1184))
        {
          *((_BYTE *)v12 + 1184) = 0;
        }

        if (*((_BYTE *)v12 + 1272)) {
          *((_BYTE *)v12 + 1272) = 0;
        }
      }

      if (sub_100121BF4(a1, v38, v39)) {
        sub_100121DD4(a1, v38, v39);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038C97C(a2, v5);
  }

void sub_1001216F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100121738(_BYTE *a1)
{
  double v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038CA48(v2);
  }
  sub_100124B88(a1);
  if (a1[1698]) {
    a1[1698] = 0;
  }
  if (a1[1712]) {
    a1[1712] = 0;
  }
}

uint64_t sub_10012179C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 552))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v4 = *(_OWORD *)(a2 + 16);
    __int128 v5 = *(_OWORD *)(a2 + 32);
    __int128 v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    if (a1 != a2)
    {
      sub_1001252EC( (char *)(a1 + 72),  *(char **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
      __int128 v7 = *(_OWORD *)(a2 + 96);
      __int128 v8 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 96) = v7;
      *(_OWORD *)(a1 + 112) = v8;
      sub_1001253F4( (char *)(a1 + 136),  *(char **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
    }

    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  }

  else
  {
    sub_10012554C(a1, a2);
    *(_BYTE *)(a1 + 552) = 1;
  }

  return a1;
}

void sub_100121864(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    else {
      __int128 v5 = (uint64_t *)*a1;
    }
    int v6 = *(unsigned __int16 *)(a2 + 8);
    int v7 = *(unsigned __int16 *)(a2 + 14);
    int v8 = *(_DWORD *)(a2 + 16);
    int v9 = 136315906;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#aggr,%s: ticketId %hu cycleIdx %hu anchorTimeOffsetRoseTicks %u",  (uint8_t *)&v9,  0x1Eu);
  }

void sub_100121948(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    else {
      __int128 v5 = (uint64_t *)*a1;
    }
    int v6 = *(unsigned __int16 *)(a2 + 8);
    int v7 = *(unsigned __int16 *)(a2 + 14);
    int v8 = *(_DWORD *)(a2 + 32);
    int v9 = 136315906;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#aggr,%s: ticketId %hu cycleIdx %hu anchorTimeOffsetRoseTicks %u",  (uint8_t *)&v9,  0x1Eu);
  }

void sub_100121A2C(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    else {
      __int128 v5 = (uint64_t *)*a1;
    }
    int v6 = *(unsigned __int16 *)(a2 + 8);
    int v7 = *(unsigned __int16 *)(a2 + 14);
    int v8 = *(_DWORD *)(a2 + 68);
    int v9 = 136315906;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#aggr,%s: ticketId %hu cycleIdx %hu anchorTimeOffsetRoseTicks %u",  (uint8_t *)&v9,  0x1Eu);
  }

void sub_100121B10(uint64_t *a1, uint64_t a2)
{
  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    else {
      __int128 v5 = (uint64_t *)*a1;
    }
    int v6 = *(unsigned __int16 *)(a2 + 8);
    int v7 = *(unsigned __int16 *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 32);
    int v9 = 136315906;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#aggr,%s: ticketId %hu cycleIdx %hu anchorTimeOffsetRoseTicks %u",  (uint8_t *)&v9,  0x1Eu);
  }

BOOL sub_100121BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v3 = a1 + 448;
  if (!sub_100126D50(a1 + 448, (unsigned __int16 *)&v16))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_10038CA88();
    return 0LL;
  }

  __int128 v4 = (unsigned __int8 *)sub_100124B4C(v3, (unsigned __int16 *)&v16);
  int v5 = v4[552];
  int v6 = v4[776];
  int v7 = v4[1000];
  if (v4[776]) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = !v8;
  uint64_t v10 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    int v13 = v4[1136];
    int v14 = v4[1224];
    int v15 = v4[1608];
    *(_DWORD *)buf = 67110912;
    int v19 = (unsigned __int16)v16;
    __int16 v20 = 2048;
    uint64_t v21 = v17;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v13;
    __int16 v30 = 1024;
    int v31 = v14;
    __int16 v32 = 1024;
    int v33 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx rng %d loc_ts %d rem_ts %d aoacir %d toacir %d dbg %d",  buf,  0x36u);
  }

  if (v5) {
    int v11 = 1;
  }
  else {
    int v11 = v9;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
  if (v11 != 1)
  {
    if (!result) {
      return result;
    }
    sub_10038CB48();
    return 0LL;
  }

  if (result) {
    sub_10038CAE8();
  }
  return 1LL;
}

void sub_100121DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v4 = a2;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  if (sub_100121BF4(a1, a2, a3))
  {
    *(void *)buf = &v19;
    int v6 = sub_100125180((uint64_t **)(a1 + 448), (unsigned __int16 *)&v19, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
    int v7 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *((unsigned __int8 *)v6 + 600);
      int v13 = *((unsigned __int8 *)v6 + 824);
      int v14 = *((unsigned __int8 *)v6 + 1048);
      int v15 = *((unsigned __int8 *)v6 + 1184);
      int v16 = *((unsigned __int8 *)v6 + 1272);
      int v17 = *((unsigned __int8 *)v6 + 1384);
      int v18 = *((unsigned __int8 *)v6 + 1656);
      *(_DWORD *)buf = 67111168;
      *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v19;
      __int16 v22 = 2048;
      uint64_t v23 = v20;
      __int16 v24 = 1024;
      int v25 = v12;
      __int16 v26 = 1024;
      int v27 = v13;
      __int16 v28 = 1024;
      int v29 = v14;
      __int16 v30 = 1024;
      int v31 = v15;
      __int16 v32 = 1024;
      int v33 = v16;
      __int16 v34 = 1024;
      int v35 = v17;
      __int16 v36 = 1024;
      int v37 = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#aggr,sendReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx rng %d loc_ts %d rem_ts %d aoacir %d toacir %d toacirv2 %d dbg %d",  buf,  0x3Cu);
    }

    int v8 = *((unsigned __int8 *)v6 + 824);
    if (*((_BYTE *)v6 + 824)) {
      int v8 = *((_BYTE *)v6 + 1048) != 0;
    }
    if (*((_BYTE *)v6 + 600)) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (!v9)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10) {
        sub_10001EEF0();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 48LL))(v10, v6 + 6);
    }

    sub_100121738((_BYTE *)v6 + 48);
  }

  else
  {
    int v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CBA8(v4, a3, v11);
    }
  }

void *sub_100121FA8(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = (__int128 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 160))
  {
    sub_1000065CC(__p, "addAOACIRDataEvent: purging previous event");
    if (!*(_BYTE *)(a1 + 160)) {
      sub_100006080();
    }
    sub_100121864((uint64_t *)__p, (uint64_t)v4);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1000065CC(__p, "addAOACIRDataEvent: adding event");
  sub_100121864((uint64_t *)__p, a2);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  int v5 = *(unsigned __int8 *)(a1 + 160);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)a2;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v6;
  *unsigned __int16 v4 = v8;
  v4[1] = v7;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  __int128 v10 = *(_OWORD *)(a2 + 80);
  v4[6] = *(_OWORD *)(a2 + 96);
  v4[7] = v9;
  v4[4] = v11;
  v4[5] = v10;
  if (!v5) {
    *(_BYTE *)(a1 + 160) = 1;
  }
  unsigned __int16 v12 = *(_WORD *)(a2 + 8);
  BOOL result = (void *)sub_100122190(a1, v12);
  if (v14)
  {
    LOWORD(__p[0]) = v12;
    __p[1] = result;
    int v15 = (uint64_t **)(a1 + 520);
    uint64_t v20 = __p;
    int v16 = sub_10012562C(v15, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v20);
    sub_100125724(v16 + 6, (__int128 *)a2);
    uint64_t v20 = __p;
    BOOL result = sub_10012562C(v15, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v20);
    if (result[11] >= 0x33uLL)
    {
      do
      {
        uint64_t v20 = __p;
        int v17 = (int64x2_t *)sub_10012562C(v15, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v20);
        v17[5] = vaddq_s64(v17[5], (int64x2_t)xmmword_100422120);
        sub_100125ADC((uint64_t)v17[3].i64, 1);
        uint64_t v20 = __p;
        BOOL result = sub_10012562C(v15, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v20);
      }

      while (result[11] > 0x32uLL);
    }
  }

  return result;
}

void sub_100122174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100122190(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v13 = a2;
  unint64_t v2 = *(void *)(a1 + 600);
  if (v2)
  {
    unsigned __int16 v4 = (uint64_t **)(a1 + 592);
    unint64_t v5 = a1 + 600;
    unint64_t v6 = v5;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        __int128 v9 = (unint64_t *)v2;
      }
      else {
        __int128 v9 = (unint64_t *)(v2 + 8);
      }
      if (v8) {
        unint64_t v6 = v2;
      }
      unint64_t v2 = *v9;
    }

    while (*v9);
    if (v6 == v5
      || *(unsigned __int16 *)(v6 + 32) > a2
      || (char v14 = &v13, v10 = sub_100124FFC(v4, &v13, (uint64_t)&unk_1004242F8, &v14), v10[7] != (uint64_t *)1))
    {
      uint64_t v11 = 0LL;
      unint64_t v2 = 0LL;
    }

    else
    {
      unint64_t v2 = v10[5][4] & 0xFFFFFFFFFFFFFF00LL;
      uint64_t v11 = v10[5][4];
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v2 | v11;
}

void *sub_100122254(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = (_OWORD *)(a1 + 168);
  if (*(_BYTE *)(a1 + 248))
  {
    sub_1000065CC(__p, "addTOACIRDataEvent: purging previous event");
    if (!*(_BYTE *)(a1 + 248)) {
      sub_100006080();
    }
    sub_100121948((uint64_t *)__p, (uint64_t)v4);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1000065CC(__p, "addTOACIRDataEvent: adding event");
  sub_100121948((uint64_t *)__p, a2);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  int v5 = *(unsigned __int8 *)(a1 + 248);
  *unsigned __int16 v4 = *(_OWORD *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  __int128 v7 = *(_OWORD *)(a2 + 32);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v6;
  v4[1] = v8;
  v4[2] = v7;
  if (!v5) {
    *(_BYTE *)(a1 + 248) = 1;
  }
  unsigned __int16 v9 = *(_WORD *)(a2 + 8);
  BOOL result = (void *)sub_100122190(a1, v9);
  if (v11)
  {
    LOWORD(__p[0]) = v9;
    __p[1] = result;
    unsigned __int16 v12 = (uint64_t **)(a1 + 544);
    int v17 = __p;
    unsigned __int16 v13 = sub_100125B38(v12, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v17);
    sub_100125C30(v13 + 6, a2);
    int v17 = __p;
    BOOL result = sub_100125B38(v12, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v17);
    if (result[11] >= 0x33uLL)
    {
      do
      {
        int v17 = __p;
        char v14 = (int64x2_t *)sub_100125B38(v12, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v17);
        v14[5] = vaddq_s64(v14[5], (int64x2_t)xmmword_100422120);
        sub_100126000((uint64_t)v14[3].i64, 1);
        int v17 = __p;
        BOOL result = sub_100125B38(v12, (unsigned __int16 *)__p, (uint64_t)&unk_1004242F8, (__int128 **)&v17);
      }

      while (result[11] > 0x32uLL);
    }
  }

  return result;
}

void sub_100122418( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100122434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 256;
  if (*(_BYTE *)(a1 + 360))
  {
    sub_1000065CC(__p, "addTOACIRDataEvent: purging previous event");
    if (!*(_BYTE *)(a1 + 360)) {
      sub_100006080();
    }
    sub_100121A2C((uint64_t *)__p, v4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1000065CC(__p, "addTOACIRDataV2Event: adding event");
  sub_100121A2C((uint64_t *)__p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v5 = *(unsigned __int8 *)(a1 + 360);
  __int128 v7 = *(_OWORD *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v6;
  __int128 v9 = *(_OWORD *)(a2 + 64);
  __int128 v8 = *(_OWORD *)(a2 + 80);
  __int128 v10 = *(_OWORD *)(a2 + 48);
  *(void *)(v4 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(v4 + 64) = v9;
  *(_OWORD *)(v4 + 80) = v8;
  *(_OWORD *)(v4 + 48) = v10;
  if (!v5) {
    *(_BYTE *)(a1 + 360) = 1;
  }
}

void sub_100122510( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10012252C(uint64_t **a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 8);
  unsigned __int16 v18 = *(_WORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v17 = v5;
  __int128 v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v4;
    LOWORD(v21[0]) = 2048;
    *(void *)((char *)v21 + 2) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeResultDebugEvent: ticketId %hu targetMacAddress 0x%016llx",  buf,  0x12u);
  }

  *(void *)buf = &v18;
  __int128 v7 = sub_100124FFC(a1 + 74, &v18, (uint64_t)&unk_1004242F8, (_WORD **)buf);
  sub_1001250C8(v7 + 5, &v17, (uint64_t *)&v17);
  *(_WORD *)buf = v18;
  v21[0] = v17;
  char v19 = buf;
  __int128 v8 = sub_100125180(a1 + 56, (unsigned __int16 *)buf, (uint64_t)&unk_1004242F8, (_OWORD **)&v19);
  __int128 v9 = v8;
  int v10 = *(unsigned __int16 *)(a2 + 20);
  char v11 = v8 + 174;
  if (*((_BYTE *)v8 + 1656) || *((_BYTE *)v8 + 1746) && *((unsigned __int16 *)v8 + 872) != v10)
  {
    sub_100121738((_BYTE *)v8 + 48);
    int v12 = *((unsigned __int8 *)v9 + 1656);
    memcpy(v11, (const void *)a2, 0x108uLL);
    if (v12) {
      goto LABEL_10;
    }
  }

  else
  {
    memcpy(v8 + 174, (const void *)a2, 0x108uLL);
  }

  *((_BYTE *)v9 + 1656) = 1;
LABEL_10:
  *((_WORD *)v9 + 872) = v10;
  *((_BYTE *)v9 + 1746) = 1;
  unsigned __int16 v13 = a1 + 71;
  char v19 = buf;
  char v14 = sub_10012605C(v13, (unsigned __int16 *)buf, (uint64_t)&unk_1004242F8, (__int128 **)&v19);
  sub_100126154(v14 + 6, (void *)a2);
  char v19 = buf;
  BOOL result = sub_10012605C(v13, (unsigned __int16 *)buf, (uint64_t)&unk_1004242F8, (__int128 **)&v19);
  if ((unint64_t)result[11] >= 0x33)
  {
    do
    {
      char v19 = buf;
      char v16 = (int64x2_t *)sub_10012605C(v13, (unsigned __int16 *)buf, (uint64_t)&unk_1004242F8, (__int128 **)&v19);
      v16[5] = vaddq_s64(v16[5], (int64x2_t)xmmword_100422120);
      sub_1001264FC((uint64_t)v16[3].i64, 1);
      char v19 = buf;
      BOOL result = sub_10012605C(v13, (unsigned __int16 *)buf, (uint64_t)&unk_1004242F8, (__int128 **)&v19);
    }

    while ((unint64_t)result[11] > 0x32);
  }

  return result;
}

void sub_1001227AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 368;
  if (*(_BYTE *)(a1 + 440))
  {
    sub_1000065CC(__p, "addRangeResultDebugV2Event: purging previous event");
    if (!*(_BYTE *)(a1 + 440)) {
      sub_100006080();
    }
    sub_100121B10((uint64_t *)__p, v4);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1000065CC(__p, "addRangeResultDebugV2Event: adding event");
  sub_100121B10((uint64_t *)__p, a2);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  int v5 = *(unsigned __int8 *)(a1 + 440);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 16) = v8;
  if (!v5) {
    *(_BYTE *)(a1 + 440) = 1;
  }
}

void sub_100122880( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012289C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 1)
  {
    int v9 = *(unsigned __int16 *)(a2 + 48);
    if (*(_WORD *)(a2 + 48))
    {
      __int128 v6 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_10032B2C8(v9, &__p);
      if (v31 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = p_p;
      __int128 v8 = "#aggr,addRangeTimestampEvent(remote): ignoring due to status %s";
      goto LABEL_15;
    }

    unsigned int v14 = *(unsigned __int16 *)(a2 + 50);
    unint64_t v15 = sub_100122190(a1, v14);
    if (v16)
    {
      LOWORD(buf) = v14;
      *((void *)&buf + 1) = v15;
      __p = (void *)buf;
      uint64_t v30 = v15;
      if ((uint64_t *)(a1 + 480) == sub_100126AA4(a1 + 472, (unsigned __int16 *)&__p)
        || !*(void *)(sub_100124B4C(a1 + 472, (unsigned __int16 *)&__p) + 40)
        || (unsigned int v17 = *(unsigned __int16 *)(a2 + 58),
            __p = &buf,
            unsigned __int16 v18 = sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p),  v19 = v18[11] + v18[10] - 1,  v17 >= *(unsigned __int16 *)(*(void *)(v18[7] + 8 * (v19 / 0x12)) + 216 * (v19 % 0x12) + 58)))
      {
        __p = &buf;
        __int16 v24 = sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p);
        sub_100126650(v24 + 6, a2);
        __p = &buf;
        if ((unint64_t)sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p)[11] >= 0x33)
        {
          do
          {
            __p = &buf;
            int v25 = (int64x2_t *)sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p);
            v25[5] = vaddq_s64(v25[5], (int64x2_t)xmmword_100422120);
            sub_100126A48((uint64_t)v25[3].i64, 1);
            __p = &buf;
          }

          while ((unint64_t)sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p)[11] > 0x32);
        }

        sub_100122DE0(a1, v14);
      }

      else
      {
        uint64_t v20 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *(unsigned __int16 *)(a2 + 58);
          __p = &buf;
          __int16 v22 = sub_100126558( (uint64_t **)(a1 + 472),  (unsigned __int16 *)&buf,  (uint64_t)&unk_1004242F8,  (__int128 **)&__p);
          unint64_t v23 = v22[11] + v22[10] - 1;
          LODWORD(v23) = *(unsigned __int16 *)(*(void *)(v22[7] + 8 * (v23 / 0x12)) + 216 * (v23 % 0x12) + 58);
          LODWORD(__p) = 67109376;
          HIDWORD(__p) = v21;
          LOWORD(v30) = 1024;
          *(_DWORD *)((char *)&v30 + 2) = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#aggr,addRangeTimestampEvent(remote) received msmt cycleIdx(%hu) < queued cycleIdx(%hu). Resetting aggregator.",  (uint8_t *)&__p,  0xEu);
        }

        sub_100124720(a1, *(unsigned __int16 *)(a2 + 50));
      }
    }
  }

  else
  {
    if (v4) {
      return;
    }
    int v5 = *(unsigned __int16 *)(a2 + 48);
    if (*(_WORD *)(a2 + 48))
    {
      __int128 v6 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_10032B2C8(v5, &__p);
      if (v31 >= 0) {
        __int128 v7 = &__p;
      }
      else {
        __int128 v7 = __p;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v7;
      __int128 v8 = "#aggr,addRangeTimestampEvent(local): ignoring due to status %s";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&buf, 0xCu);
      if (v31 < 0) {
        operator delete(__p);
      }
      return;
    }

    unsigned __int16 v27 = *(_WORD *)(a2 + 50);
    if (!*(_BYTE *)(a2 + 208)) {
      sub_10038CC2C();
    }
    unint64_t v26 = *(void *)(a2 + 116);
    __p = &v27;
    char v11 = sub_100124FFC((uint64_t **)(a1 + 592), &v27, (uint64_t)&unk_1004242F8, (_WORD **)&__p);
    sub_1001250C8(v11 + 5, &v26, (uint64_t *)&v26);
    LOWORD(__p) = v27;
    uint64_t v30 = v26;
    *(void *)&__int128 buf = &__p;
    int v12 = sub_100126558((uint64_t **)(a1 + 496), (unsigned __int16 *)&__p, (uint64_t)&unk_1004242F8, (__int128 **)&buf);
    sub_100126650(v12 + 6, a2);
    *(void *)&__int128 buf = &__p;
    if ((unint64_t)sub_100126558( (uint64_t **)(a1 + 496),  (unsigned __int16 *)&__p,  (uint64_t)&unk_1004242F8,  (__int128 **)&buf)[11] >= 0x33)
    {
      do
      {
        *(void *)&__int128 buf = &__p;
        unsigned __int16 v13 = (int64x2_t *)sub_100126558( (uint64_t **)(a1 + 496),  (unsigned __int16 *)&__p,  (uint64_t)&unk_1004242F8,  (__int128 **)&buf);
        v13[5] = vaddq_s64(v13[5], (int64x2_t)xmmword_100422120);
        sub_100126A48((uint64_t)v13[3].i64, 1);
        *(void *)&__int128 buf = &__p;
      }

      while ((unint64_t)sub_100126558( (uint64_t **)(a1 + 496),  (unsigned __int16 *)&__p,  (uint64_t)&unk_1004242F8,  (__int128 **)&buf)[11] > 0x32);
    }

    sub_100122DE0(a1, v27);
  }

void sub_100122DE0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#aggr,sendIfHaveReceivedRoseMeasurementsFromTimestamps",  buf,  2u);
  }

  unint64_t v4 = sub_100122190(a1, a2);
  if (v5)
  {
    LOWORD(v128) = a2;
    *((void *)&v128 + 1) = v4;
    __int128 v6 = (uint64_t **)(a1 + 496);
    *(void *)__int128 buf = v128;
    *(void *)&uint8_t buf[8] = v4;
    int v9 = (uint64_t **)(a1 + 472);
    *(_OWORD *)__int128 buf = v128;
    if ((uint64_t *)(a1 + 480) == sub_100126AA4(a1 + 472, (unsigned __int16 *)buf))
    {
      BOOL v11 = 0;
    }

    else
    {
      uint64_t v10 = *(void *)(sub_100124B4C((uint64_t)v9, (unsigned __int16 *)buf) + 40);
      BOOL v11 = v10 != 0;
      if (v10) {
        BOOL v12 = v7;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        unsigned __int16 v13 = (uint64_t **)(a1 + 616);
        *(void *)__int128 buf = &v128;
        unsigned int v14 = sub_100126DA8((uint64_t **)(a1 + 616), (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
        *(void *)__int128 buf = &v128;
        unint64_t v15 = sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
        uint64_t v16 = *(unsigned __int16 *)(*(void *)(v15[7] + 8 * (v15[10] / 0x12uLL)) + 216 * (v15[10] % 0x12uLL) + 58);
        *((void *)v14 + 6) = (*((void *)v14 + 6)
                              + ((unint64_t)(v16 < (unsigned __int16)*((void *)v14 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v16;
        unsigned int v17 = (uint64_t **)(a1 + 640);
        *(void *)__int128 buf = &v128;
        unsigned __int16 v18 = sub_100126DA8((uint64_t **)(a1 + 640), (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
        *(void *)__int128 buf = &v128;
        unint64_t v19 = sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
        uint64_t v20 = *(unsigned __int16 *)(*(void *)(v19[7] + 8 * (v19[10] / 0x12uLL)) + 216 * (v19[10] % 0x12uLL) + 58);
        *((void *)v18 + 6) = (*((void *)v18 + 6)
                              + ((unint64_t)(v20 < (unsigned __int16)*((void *)v18 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v20;
        for (*(void *)__int128 buf = &v128;
              sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11];
              *(void *)__int128 buf = &v128)
        {
          *(void *)__int128 buf = &v128;
          unint64_t v21 = *((void *)sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf) + 6);
          *(void *)__int128 buf = &v128;
          if (v21 >= *((void *)sub_100126DA8(v13, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf)
                      + 6))
            break;
          *(void *)__int128 buf = &v128;
          __int16 v22 = (int64x2_t *)sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
          v22[5] = vaddq_s64(v22[5], (int64x2_t)xmmword_100422120);
          sub_100126A48((uint64_t)v22[3].i64, 1);
          *(void *)__int128 buf = &v128;
          if (sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
          {
            *(void *)__int128 buf = &v128;
            unint64_t v23 = sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
            *(void *)__int128 buf = &v128;
            __int16 v24 = sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
            uint64_t v25 = *(unsigned __int16 *)(*(void *)(v24[7] + 8 * (v24[10] / 0x12uLL)) + 216 * (v24[10] % 0x12uLL) + 58);
            *((void *)v23 + 6) = (*((void *)v23 + 6)
                                  + ((unint64_t)(v25 < (unsigned __int16)*((void *)v23 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v25;
          }
        }

        for (*(void *)__int128 buf = &v128;
              sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11];
              *(void *)__int128 buf = &v128)
        {
          *(void *)__int128 buf = &v128;
          unint64_t v26 = *((void *)sub_100126DA8(v13, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf) + 6);
          *(void *)__int128 buf = &v128;
          if (v26 >= *((void *)sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf)
                      + 6))
            break;
          *(void *)__int128 buf = &v128;
          unsigned __int16 v27 = (int64x2_t *)sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
          v27[5] = vaddq_s64(v27[5], (int64x2_t)xmmword_100422120);
          sub_100126A48((uint64_t)v27[3].i64, 1);
          *(void *)__int128 buf = &v128;
          if (sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
          {
            *(void *)__int128 buf = &v128;
            __int16 v28 = sub_100126DA8(v13, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
            *(void *)__int128 buf = &v128;
            int v29 = sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
            uint64_t v30 = *(unsigned __int16 *)(*(void *)(v29[7] + 8 * (v29[10] / 0x12uLL)) + 216 * (v29[10] % 0x12uLL) + 58);
            *((void *)v28 + 6) = (*((void *)v28 + 6)
                                  + ((unint64_t)(v30 < (unsigned __int16)*((void *)v28 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v30;
          }
        }

        for (*(void *)__int128 buf = &v128;
              sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11];
              *(void *)__int128 buf = &v128)
        {
          *(void *)__int128 buf = &v128;
          *(void *)__int128 buf = &v128;
          unint64_t v31 = *((void *)sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf) + 6);
          *(void *)__int128 buf = &v128;
          if (v31 >= *((void *)sub_100126DA8(v13, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf)
                      + 6))
            break;
          *(void *)__int128 buf = &v128;
          __int16 v32 = (int64x2_t *)sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
          v32[5] = vaddq_s64(v32[5], (int64x2_t)xmmword_100422120);
          sub_100126A48((uint64_t)v32[3].i64, 1);
          *(void *)__int128 buf = &v128;
          if (sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
          {
            *(void *)__int128 buf = &v128;
            int v33 = sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
            *(void *)__int128 buf = &v128;
            __int16 v34 = sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
            uint64_t v35 = *(unsigned __int16 *)(*(void *)(v34[7] + 8 * (v34[10] / 0x12uLL)) + 216 * (v34[10] % 0x12uLL) + 58);
            *((void *)v33 + 6) = (*((void *)v33 + 6)
                                  + ((unint64_t)(v35 < (unsigned __int16)*((void *)v33 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v35;
          }
        }

        *(void *)__int128 buf = &v128;
        if (sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
        {
          *(void *)__int128 buf = &v128;
          if (sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
          {
            *(void *)__int128 buf = &v128;
            uint64_t v36 = *((void *)sub_100126DA8(v17, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf) + 6);
            *(void *)__int128 buf = &v128;
            if (v36 == *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                        + 6))
            {
              *(void *)__int128 buf = &v128;
              int v37 = sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              unint64_t v38 = *(void *)(v37[7] + 8 * (v37[10] / 0x12uLL)) + 216 * (v37[10] % 0x12uLL);
              char v121 = *(_BYTE *)v38;
              __int128 v39 = *(_OWORD *)(v38 + 17);
              __int128 v236 = *(_OWORD *)(v38 + 1);
              __int128 v237 = v39;
              __int128 v238 = *(_OWORD *)(v38 + 33);
              char v239 = *(_BYTE *)(v38 + 49);
              int v40 = *(unsigned __int16 *)(v38 + 50);
              __int128 v41 = *(_OWORD *)(v38 + 52);
              __int128 v42 = *(_OWORD *)(v38 + 68);
              __int128 v43 = *(_OWORD *)(v38 + 100);
              __int128 v234 = *(_OWORD *)(v38 + 84);
              __int128 v235 = v43;
              __int128 v232 = v41;
              __int128 v233 = v42;
              uint64_t v123 = *(void *)(v38 + 116);
              int v231 = *(_DWORD *)(v38 + 204);
              __int128 v230 = *(_OWORD *)(v38 + 188);
              __int128 v44 = *(_OWORD *)(v38 + 156);
              __int128 v229 = *(_OWORD *)(v38 + 172);
              __int128 v228 = v44;
              __int128 v45 = *(_OWORD *)(v38 + 124);
              __int128 v227 = *(_OWORD *)(v38 + 140);
              __int128 v226 = v45;
              int v122 = *(unsigned __int8 *)(v38 + 208);
              *(_DWORD *)&v127[3] = *(_DWORD *)(v38 + 212);
              *(_DWORD *)double v127 = *(_DWORD *)(v38 + 209);
              *(void *)__int128 buf = &v128;
              int v46 = sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              unint64_t v47 = *(void *)(v46[7] + 8 * (v46[10] / 0x12uLL)) + 216 * (v46[10] % 0x12uLL);
              char v48 = *(_BYTE *)v47;
              __int128 v49 = *(_OWORD *)(v47 + 17);
              __int128 v222 = *(_OWORD *)(v47 + 1);
              __int128 v223 = v49;
              __int128 v224 = *(_OWORD *)(v47 + 33);
              char v225 = *(_BYTE *)(v47 + 49);
              int v50 = *(unsigned __int16 *)(v47 + 50);
              int v125 = *(_DWORD *)(v47 + 52);
              __int16 v126 = *(_WORD *)(v47 + 56);
              char v119 = v48;
              int v120 = *(unsigned __int16 *)(v47 + 58);
              __int128 v51 = *(_OWORD *)(v47 + 60);
              __int128 v214 = *(_OWORD *)(v47 + 76);
              __int128 v213 = v51;
              __int128 v52 = *(_OWORD *)(v47 + 124);
              __int128 v218 = *(_OWORD *)(v47 + 140);
              __int128 v217 = v52;
              __int128 v53 = *(_OWORD *)(v47 + 92);
              __int128 v216 = *(_OWORD *)(v47 + 108);
              __int128 v215 = v53;
              *(_OWORD *)((char *)v221 + 12) = *(_OWORD *)(v47 + 200);
              v221[0] = *(_OWORD *)(v47 + 188);
              __int128 v54 = *(_OWORD *)(v47 + 156);
              __int128 v220 = *(_OWORD *)(v47 + 172);
              __int128 v219 = v54;
              *(void *)__int128 buf = &v128;
              int v55 = (int64x2_t *)sub_100126558(v6, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              v55[5] = vaddq_s64(v55[5], (int64x2_t)xmmword_100422120);
              sub_100126A48((uint64_t)v55[3].i64, 1);
              *(void *)__int128 buf = &v128;
              unint64_t v56 = (int64x2_t *)sub_100126558(v9, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              v56[5] = vaddq_s64(v56[5], (int64x2_t)xmmword_100422120);
              sub_100126A48((uint64_t)v56[3].i64, 1);
              if (v40 != v50) {
                sub_10038CCCC();
              }
              uint64_t v57 = (uint64_t **)(a1 + 520);
              *(_OWORD *)__int128 buf = v128;
              if ((uint64_t *)(a1 + 528) == sub_100126AA4(a1 + 520, (unsigned __int16 *)buf)
                || !*(void *)(sub_100124B4C((uint64_t)v57, (unsigned __int16 *)buf) + 40))
              {
                goto LABEL_56;
              }

              double v58 = (uint64_t **)(a1 + 664);
              *(void *)__int128 buf = &v128;
              uint64_t v59 = sub_100126DA8( (uint64_t **)(a1 + 664),  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf);
              *(void *)__int128 buf = &v128;
              uint64_t v60 = sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              uint64_t v61 = *(unsigned __int16 *)(*(void *)(v60[7] + (((unint64_t)v60[10] >> 2) & 0x3FFFFFFFFFFFFFF8LL))
                                        + ((v60[10] & 0x1F) << 7)
                                        + 14);
              *((void *)v59 + 6) = (*((void *)v59 + 6)
                                    + ((unint64_t)(v61 < (unsigned __int16)*((void *)v59 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v61;
              for (*(void *)__int128 buf = &v128;
                    sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11];
                    *(void *)__int128 buf = &v128)
              {
                *(void *)__int128 buf = &v128;
                *(void *)__int128 buf = &v128;
                if (v62 >= *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                            + 6))
                  break;
                *(void *)__int128 buf = &v128;
                double v63 = (int64x2_t *)sub_10012562C( v57,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v63[5] = vaddq_s64(v63[5], (int64x2_t)xmmword_100422120);
                sub_100125ADC((uint64_t)v63[3].i64, 1);
                *(void *)__int128 buf = &v128;
                if (sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
                {
                  *(void *)__int128 buf = &v128;
                  double v64 = sub_100126DA8(v58, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
                  *(void *)__int128 buf = &v128;
                  double v65 = sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                  uint64_t v66 = *(unsigned __int16 *)(*(void *)(v65[7]
                                                        + (((unint64_t)v65[10] >> 2) & 0x3FFFFFFFFFFFFFF8LL))
                                            + ((v65[10] & 0x1F) << 7)
                                            + 14);
                  *((void *)v64 + 6) = (*((void *)v64 + 6)
                                        + ((unint64_t)(v66 < (unsigned __int16)*((void *)v64 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v66;
                }
              }

              *(void *)__int128 buf = &v128;
              if (sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11]
                && (*(void *)__int128 buf = &v128,
                    uint64_t v67 = *((void *)sub_100126DA8( v58,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                          + 6),
                    *(void *)__int128 buf = &v128,
                    v67 == *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                           + 6)))
              {
                *(void *)__int128 buf = &v128;
                uint64_t v68 = sub_10012562C(v57, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                BYTE4(v118) = *(_BYTE *)v69;
                __int128 v70 = *(_OWORD *)(v69 + 81);
                __int128 v210 = *(_OWORD *)(v69 + 65);
                __int128 v211 = v70;
                v212[0] = *(_OWORD *)(v69 + 97);
                *(_OWORD *)((char *)v212 + 15) = *(_OWORD *)(v69 + 112);
                __int128 v71 = *(_OWORD *)(v69 + 17);
                __int128 v206 = *(_OWORD *)(v69 + 1);
                __int128 v207 = v71;
                __int128 v72 = *(_OWORD *)(v69 + 49);
                __int128 v208 = *(_OWORD *)(v69 + 33);
                __int128 v209 = v72;
                *(void *)__int128 buf = &v128;
                double v73 = (int64x2_t *)sub_10012562C( v57,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v73[5] = vaddq_s64(v73[5], (int64x2_t)xmmword_100422120);
                sub_100125ADC((uint64_t)v73[3].i64, 1);
                LODWORD(v118) = 1;
              }

              else
              {
LABEL_56:
                uint64_t v118 = 0LL;
              }

              double v81 = (uint64_t **)(a1 + 544);
              *(_OWORD *)__int128 buf = v128;
              if ((uint64_t *)(a1 + 552) == sub_100126AA4(a1 + 544, (unsigned __int16 *)buf)
                || !*(void *)(sub_100124B4C((uint64_t)v81, (unsigned __int16 *)buf) + 40))
              {
                goto LABEL_67;
              }

              double v82 = (uint64_t **)(a1 + 688);
              *(void *)__int128 buf = &v128;
              double v83 = sub_100126DA8( (uint64_t **)(a1 + 688),  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf);
              *(void *)__int128 buf = &v128;
              double v84 = sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              uint64_t v85 = *(unsigned __int16 *)(*(void *)(v84[7] + 8 * (v84[10] / 0x33uLL)) + 80 * (v84[10] % 0x33uLL) + 14);
              *((void *)v83 + 6) = (*((void *)v83 + 6)
                                    + ((unint64_t)(v85 < (unsigned __int16)*((void *)v83 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v85;
              for (*(void *)__int128 buf = &v128;
                    sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11];
                    *(void *)__int128 buf = &v128)
              {
                *(void *)__int128 buf = &v128;
                *(void *)__int128 buf = &v128;
                if (v86 >= *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                            + 6))
                  break;
                *(void *)__int128 buf = &v128;
                double v87 = (int64x2_t *)sub_100125B38( v81,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v87[5] = vaddq_s64(v87[5], (int64x2_t)xmmword_100422120);
                sub_100126000((uint64_t)v87[3].i64, 1);
                *(void *)__int128 buf = &v128;
                if (sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
                {
                  *(void *)__int128 buf = &v128;
                  uint64_t v88 = sub_100126DA8(v82, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
                  *(void *)__int128 buf = &v128;
                  double v89 = sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                  uint64_t v90 = *(unsigned __int16 *)(*(void *)(v89[7] + 8 * (v89[10] / 0x33uLL))
                                            + 80 * (v89[10] % 0x33uLL)
                                            + 14);
                  *((void *)v88 + 6) = (*((void *)v88 + 6)
                                        + ((unint64_t)(v90 < (unsigned __int16)*((void *)v88 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v90;
                }
              }

              *(void *)__int128 buf = &v128;
              if (sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11]
                && (*(void *)__int128 buf = &v128,
                    uint64_t v91 = *((void *)sub_100126DA8( v82,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                          + 6),
                    *(void *)__int128 buf = &v128,
                    v91 == *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                           + 6)))
              {
                *(void *)__int128 buf = &v128;
                uint64_t v92 = sub_100125B38(v81, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                unint64_t v93 = *(void *)(v92[7] + 8 * (v92[10] / 0x33uLL)) + 80 * (v92[10] % 0x33uLL);
                char v94 = *(_BYTE *)v93;
                __int128 v95 = *(_OWORD *)(v93 + 17);
                __int128 v96 = *(_OWORD *)(v93 + 49);
                __int128 v204 = *(_OWORD *)(v93 + 33);
                v205[0] = v96;
                *(_OWORD *)((char *)v205 + 15) = *(_OWORD *)(v93 + 64);
                __int128 v97 = *(_OWORD *)(v93 + 1);
                __int128 v203 = v95;
                __int128 v202 = v97;
                *(void *)__int128 buf = &v128;
                double v98 = (int64x2_t *)sub_100125B38( v81,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v98[5] = vaddq_s64(v98[5], (int64x2_t)xmmword_100422120);
                sub_100126000((uint64_t)v98[3].i64, 1);
                int v99 = 1;
              }

              else
              {
LABEL_67:
                int v99 = 0;
                char v94 = 0;
              }

              uint64_t v100 = (uint64_t **)(a1 + 568);
              *(_OWORD *)__int128 buf = v128;
              if ((uint64_t *)(a1 + 576) == sub_100126AA4(a1 + 568, (unsigned __int16 *)buf)
                || !*(void *)(sub_100124B4C((uint64_t)v100, (unsigned __int16 *)buf) + 40))
              {
                goto LABEL_78;
              }

              uint64_t v101 = (uint64_t **)(a1 + 712);
              *(void *)__int128 buf = &v128;
              double v102 = sub_100126DA8( (uint64_t **)(a1 + 712),  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf);
              *(void *)__int128 buf = &v128;
              double v103 = sub_10012605C(v100, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
              uint64_t v104 = *(unsigned __int16 *)(*(void *)(v103[7]
                                                     + (((unint64_t)v103[10] >> 1) & 0x7FFFFFFFFFFFFFF8LL))
                                         + 264 * (v103[10] & 0xF)
                                         + 20);
              *((void *)v102 + 6) = (*((void *)v102 + 6)
                                     + ((unint64_t)(v104 < (unsigned __int16)*((void *)v102 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v104;
              while (*(void *)(a1 + 584))
              {
                *(void *)__int128 buf = &v128;
                unint64_t v105 = *((void *)sub_100126DA8( v101,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                       + 6);
                *(void *)__int128 buf = &v128;
                if (v105 >= *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                             + 6))
                  break;
                *(void *)__int128 buf = &v128;
                v106 = (int64x2_t *)sub_10012605C( v100,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v106[5] = vaddq_s64(v106[5], (int64x2_t)xmmword_100422120);
                sub_1001264FC((uint64_t)v106[3].i64, 1);
                *(void *)__int128 buf = &v128;
                if (sub_10012605C(v100, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11])
                {
                  *(void *)__int128 buf = &v128;
                  v107 = sub_100126DA8(v101, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (_OWORD **)buf);
                  *(void *)__int128 buf = &v128;
                  v108 = sub_10012605C(v100, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                  uint64_t v109 = *(unsigned __int16 *)(*(void *)(v108[7]
                                                         + (((unint64_t)v108[10] >> 1) & 0x7FFFFFFFFFFFFFF8LL))
                                             + 264 * (v108[10] & 0xF)
                                             + 20);
                  *((void *)v107 + 6) = (*((void *)v107 + 6)
                                         + ((unint64_t)(v109 < (unsigned __int16)*((void *)v107 + 6)) << 16)) & 0xFFFFFFFFFFFF0000LL | v109;
                }
              }

              *(void *)__int128 buf = &v128;
              if (sub_10012605C(v100, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf)[11]
                && (*(void *)__int128 buf = &v128,
                    uint64_t v110 = *((void *)sub_100126DA8( v101,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                           + 6),
                    *(void *)__int128 buf = &v128,
                    v110 == *((void *)sub_100126DA8( v13,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (_OWORD **)buf)
                            + 6)))
              {
                *(void *)__int128 buf = &v128;
                v111 = sub_10012605C(v100, (unsigned __int16 *)&v128, (uint64_t)&unk_1004242F8, (__int128 **)buf);
                char v113 = *v112;
                memcpy(__dst, v112 + 1, sizeof(__dst));
                *(void *)__int128 buf = &v128;
                uint64_t v114 = (int64x2_t *)sub_10012605C( v100,  (unsigned __int16 *)&v128,  (uint64_t)&unk_1004242F8,  (__int128 **)buf);
                v114[5] = vaddq_s64(v114[5], (int64x2_t)xmmword_100422120);
                sub_1001264FC((uint64_t)v114[3].i64, 1);
                int v115 = 1;
              }

              else
              {
LABEL_78:
                int v115 = 0;
                char v113 = 0;
              }

              buf[0] = 0;
              char v142 = 0;
              char v197 = 0;
              char v198 = 0;
              v200[271] = 0;
              v200[343] = 0;
              char v163 = v119;
              __int128 v164 = v222;
              __int128 v165 = v223;
              __int128 v166 = v224;
              char v167 = v225;
              __int16 v168 = v40;
              __int16 v170 = v126;
              int v169 = v125;
              __int16 v171 = v120;
              __int128 v178 = v219;
              __int128 v179 = v220;
              *(_OWORD *)v180 = v221[0];
              *(_OWORD *)&v180[12] = *(_OWORD *)((char *)v221 + 12);
              __int128 v174 = v215;
              __int128 v175 = v216;
              __int128 v176 = v217;
              __int128 v177 = v218;
              __int128 v172 = v213;
              __int128 v173 = v214;
              char v181 = 1;
              char v143 = v121;
              __int128 v144 = v236;
              __int128 v145 = v237;
              __int128 v146 = v238;
              char v147 = v239;
              __int16 v148 = v40;
              __int128 v149 = v232;
              __int128 v150 = v233;
              __int128 v151 = v234;
              __int128 v152 = v235;
              uint64_t v153 = v123;
              __int128 v156 = v228;
              __int128 v157 = v229;
              __int128 v158 = v230;
              __int128 v154 = v226;
              __int128 v155 = v227;
              int v159 = v231;
              char v160 = v122;
              *(_DWORD *)v161 = *(_DWORD *)v127;
              *(_DWORD *)&v161[3] = *(_DWORD *)&v127[3];
              char v162 = 1;
              char v182 = BYTE4(v118);
              __int128 v185 = v208;
              __int128 v186 = v209;
              __int128 v183 = v206;
              __int128 v184 = v207;
              __int128 v188 = v211;
              *(_OWORD *)v189 = v212[0];
              __int128 v187 = v210;
              *(_OWORD *)&v189[15] = *(_OWORD *)((char *)v212 + 15);
              char v190 = v118;
              char v191 = v94;
              *(_OWORD *)&v195[15] = *(_OWORD *)((char *)v205 + 15);
              __int128 v194 = v204;
              *(_OWORD *)v195 = v205[0];
              __int128 v192 = v202;
              __int128 v193 = v203;
              char v196 = v99;
              char v199 = v113;
              memcpy(v200, __dst, 0x107uLL);
              v200[263] = v115;
              double v116 = (os_log_s *)qword_1008000A0;
              if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
              {
                if (!v122) {
                  sub_100006080();
                }
                *(_DWORD *)double v129 = 67110400;
                int v130 = v40;
                __int16 v131 = 1024;
                int v132 = v120;
                __int16 v133 = 2048;
                uint64_t v134 = v123;
                __int16 v135 = 1024;
                int v136 = v118;
                __int16 v137 = 1024;
                int v138 = v99;
                __int16 v139 = 1024;
                int v140 = v115;
                _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "#aggr,sendIfHaveReceivedRoseMeasurementsFromTimestamps sent ticketId %hu cycleIndex %hu targetMac 0x%0 16llx aoacir %d toacir %d dbg %d",  v129,  0x2Au);
              }

              uint64_t v117 = *(void *)(a1 + 24);
              if (!v117) {
                sub_10001EEF0();
              }
              (*(void (**)(uint64_t, _BYTE *))(*(void *)v117 + 48LL))(v117, buf);
              sub_100124BFC((uint64_t)buf);
              return;
            }
          }
        }

        uint64_t v80 = qword_1008000A0;
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_WORD *)__int128 buf = 0;
        double v77 = "#aggr,cannot find matching local range timestamp event or remote range timestamp event";
        double v78 = (os_log_s *)v80;
        uint32_t v79 = 2;
LABEL_54:
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, v77, buf, v79);
        return;
      }
    }

    uint64_t v74 = qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v75 = "True";
    if (v7) {
      unint64_t v76 = "False";
    }
    else {
      unint64_t v76 = "True";
    }
    if (v11) {
      uint64_t v75 = "False";
    }
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v76;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v75;
    double v77 = "#aggr,local timestamp queue empty? %s, remote timestamp queue empty? %s";
    double v78 = (os_log_s *)v74;
    uint32_t v79 = 22;
    goto LABEL_54;
  }

  __int128 v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_10038CC54(a2, v8);
  }
}

void sub_100124700( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100124720(uint64_t a1, int a2)
{
  unsigned __int16 v35 = a2;
  unint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#aggr,clearState: ticketId %hu",  (uint8_t *)&buf,  8u);
  }

  char v5 = *(uint64_t **)(a1 + 448);
  if (v5 != (uint64_t *)(a1 + 456))
  {
    do
    {
      if (*((unsigned __int16 *)v5 + 16) == v35)
      {
        __int128 v6 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = v5[5];
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#aggr,clearState: erasing slot with mac addr %016llx",  (uint8_t *)&buf,  0xCu);
        }

        __int128 v8 = sub_10001EA5C((uint64_t **)(a1 + 448), v5);
        sub_100124BFC((uint64_t)(v5 + 6));
        operator delete(v5);
      }

      else
      {
        int v9 = (uint64_t *)v5[1];
        if (v9)
        {
          do
          {
            __int128 v8 = v9;
            int v9 = (uint64_t *)*v9;
          }

          while (v9);
        }

        else
        {
          do
          {
            __int128 v8 = (uint64_t *)v5[2];
            BOOL v10 = *v8 == (void)v5;
            char v5 = v8;
          }

          while (!v10);
        }
      }

      char v5 = v8;
    }

    while (v8 != (uint64_t *)(a1 + 456));
  }

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(unsigned __int16 *)(a1 + 40) == v35)
    {
      BOOL v11 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)
        || (LOWORD(buf) = 0,
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#aggr,clearState: erasing most recent AOA CIR event",  (uint8_t *)&buf,  2u),  *(_BYTE *)(a1 + 160)))
      {
        *(_BYTE *)(a1 + 160) = 0;
      }
    }
  }

  if (*(_BYTE *)(a1 + 248))
  {
    if (*(unsigned __int16 *)(a1 + 176) == v35)
    {
      BOOL v12 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)
        || (LOWORD(buf) = 0,
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#aggr,clearState: erasing most recent TOA CIR event",  (uint8_t *)&buf,  2u),  *(_BYTE *)(a1 + 248)))
      {
        *(_BYTE *)(a1 + 248) = 0;
      }
    }
  }

  if (*(_BYTE *)(a1 + 360))
  {
    if (*(unsigned __int16 *)(a1 + 264) == v35)
    {
      unsigned __int16 v13 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)
        || (LOWORD(buf) = 0,
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#aggr,clearState: erasing most recent TOA CIR V2 event",  (uint8_t *)&buf,  2u),  *(_BYTE *)(a1 + 360)))
      {
        *(_BYTE *)(a1 + 360) = 0;
      }
    }
  }

  uint64_t v14 = *(void *)(a1 + 600);
  if (v14)
  {
    uint64_t v15 = a1 + 600;
    do
    {
      unsigned int v16 = *(unsigned __int16 *)(v14 + 32);
      BOOL v17 = v16 >= v35;
      if (v16 >= v35) {
        unsigned __int16 v18 = (uint64_t *)v14;
      }
      else {
        unsigned __int16 v18 = (uint64_t *)(v14 + 8);
      }
      if (v17) {
        uint64_t v15 = v14;
      }
      uint64_t v14 = *v18;
    }

    while (*v18);
    if (v15 != a1 + 600 && v35 >= *(unsigned __int16 *)(v15 + 32))
    {
      *(void *)&__int128 buf = &v35;
      unint64_t v19 = sub_100124FFC((uint64_t **)(a1 + 592), &v35, (uint64_t)&unk_1004242F8, (_WORD **)&buf);
      uint64_t v20 = (uint64_t **)v19[5];
      unint64_t v21 = v19 + 6;
      if (v20 != v19 + 6)
      {
        int v33 = (uint64_t **)(a1 + 496);
        __int16 v34 = (uint64_t **)(a1 + 472);
        __int16 v22 = (uint64_t **)(a1 + 520);
        unint64_t v23 = (uint64_t **)(a1 + 544);
        __int16 v24 = (uint64_t **)(a1 + 568);
        uint64_t v25 = (uint64_t **)(a1 + 616);
        unint64_t v26 = (uint64_t **)(a1 + 640);
        unsigned __int16 v27 = (uint64_t **)(a1 + 664);
        __int16 v28 = (uint64_t **)(a1 + 688);
        int v29 = (uint64_t **)(a1 + 712);
        do
        {
          uint64_t v30 = v20[4];
          LOWORD(buf) = v35;
          *((void *)&buf + 1) = v30;
          sub_100126BA0(v34, (unsigned __int16 *)&buf);
          sub_100126BA0(v33, (unsigned __int16 *)&buf);
          sub_100126BF8(v22, (unsigned __int16 *)&buf);
          sub_100126C50(v23, (unsigned __int16 *)&buf);
          sub_100126CA8(v24, (unsigned __int16 *)&buf);
          sub_100126D00(v25, (unsigned __int16 *)&buf);
          sub_100126D00(v26, (unsigned __int16 *)&buf);
          sub_100126D00(v27, (unsigned __int16 *)&buf);
          sub_100126D00(v28, (unsigned __int16 *)&buf);
          sub_100126D00(v29, (unsigned __int16 *)&buf);
          unint64_t v31 = v20[1];
          if (v31)
          {
            do
            {
              __int16 v32 = (uint64_t **)v31;
              unint64_t v31 = (uint64_t *)*v31;
            }

            while (v31);
          }

          else
          {
            do
            {
              __int16 v32 = (uint64_t **)v20[2];
              BOOL v10 = *v32 == (uint64_t *)v20;
              uint64_t v20 = v32;
            }

            while (!v10);
          }

          uint64_t v20 = v32;
        }

        while (v32 != v21);
      }
    }
  }

uint64_t sub_100124B4C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *sub_100125238(a1, &v4, a2);
  if (!v2) {
    sub_100126B2C("map::at:  key not found");
  }
  return v2 + 48;
}

void sub_100124B88(_BYTE *a1)
{
  if (a1[776]) {
    a1[776] = 0;
  }
  if (a1[1000]) {
    a1[1000] = 0;
  }
  if (a1[1136]) {
    a1[1136] = 0;
  }
  if (a1[1224]) {
    a1[1224] = 0;
  }
  if (a1[1336]) {
    a1[1336] = 0;
  }
  if (a1[1608]) {
    a1[1608] = 0;
  }
  if (a1[1688]) {
    a1[1688] = 0;
  }
}

uint64_t sub_100124BFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 552))
  {
    uint64_t v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(void *)(a1 + 144) = v2;
      operator delete(v2);
    }

    uint64_t v3 = *(void **)(a1 + 72);
    if (v3)
    {
      *(void *)(a1 + 80) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

void sub_100124C44(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 552))
  {
    uint64_t v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(void *)(a1 + 144) = v2;
      operator delete(v2);
    }

    uint64_t v3 = *(void **)(a1 + 72);
    if (v3)
    {
      *(void *)(a1 + 80) = v3;
      operator delete(v3);
    }

    *(_BYTE *)(a1 + 552) = 0;
  }

void sub_100124C8C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124C8C(a1, *a2);
    sub_100124C8C(a1, a2[1]);
    sub_100124BFC((uint64_t)(a2 + 6));
    operator delete(a2);
  }

void sub_100124CD4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124CD4(a1, *a2);
    sub_100124CD4(a1, a2[1]);
    sub_100124D1C(a2 + 6);
    operator delete(a2);
  }

uint64_t sub_100124D1C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 9LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 18LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_100124DB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124DB0(a1, *a2);
    sub_100124DB0(a1, a2[1]);
    sub_100030A5C(a2 + 6);
    operator delete(a2);
  }

void sub_100124DF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124DF8(a1, *a2);
    sub_100124DF8(a1, a2[1]);
    sub_100124E40(a2 + 6);
    operator delete(a2);
  }

uint64_t sub_100124E40(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 25LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 51LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_100124ED4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124ED4(a1, *a2);
    sub_100124ED4(a1, a2[1]);
    sub_100124F1C(a2 + 6);
    operator delete(a2);
  }

uint64_t sub_100124F1C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 8LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 16LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_100124FB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100124FB0(a1, *a2);
    sub_100124FB0(a1, a2[1]);
    sub_100034A98((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }

uint64_t **sub_100124FFC(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 5) = v11 + 24;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_1001250C8(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10001E548(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t *sub_100125180(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_100125238((uint64_t)a1, &v12, a2);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x6E8uLL);
    v10[1] = a1 + 1;
    *((_OWORD *)v7 + 2) = **a4;
    bzero(v7 + 6, 0x6B8uLL);
    char v11 = 1;
    sub_10001E548(a1, v12, v8, v7);
    v10[0] = 0LL;
    sub_1001252A8((uint64_t)v10, 0LL);
  }

  return v7;
}

void *sub_100125238(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unint64_t v7 = *((void *)a3 + 1);
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (void *)v4;
        unsigned int v9 = *(unsigned __int16 *)(v4 + 32);
        if (v6 >= v9) {
          break;
        }
LABEL_6:
        uint64_t v4 = *v8;
        BOOL result = v8;
        if (!*v8) {
          goto LABEL_14;
        }
      }

      if (v6 == v9)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_6;
        }
        if (v10 >= v7) {
          goto LABEL_14;
        }
      }

      else if (v9 >= v6)
      {
        goto LABEL_14;
      }

      BOOL result = v8 + 1;
      uint64_t v4 = v8[1];
      if (!v4) {
        goto LABEL_14;
      }
    }
  }

  unsigned int v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

void sub_1001252A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100124BFC((uint64_t)v2 + 48);
    }
    operator delete(v2);
  }

char *sub_1001252EC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 61) {
      sub_10001E11C();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_10011B5D8(v7, v11);
    unsigned __int16 v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned __int16 v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned int v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned __int16 v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }

char *sub_1001253F4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 > 0x492492492492492LL) {
      sub_10001E11C();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249LL) {
      unint64_t v12 = 0x492492492492492LL;
    }
    else {
      unint64_t v12 = v11;
    }
    BOOL result = sub_10011B690(v7, v12);
    uint64_t v14 = (char *)v7[1];
    unsigned __int16 v13 = (void **)(v7 + 1);
    unsigned int v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned __int16 v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  unsigned __int16 v13 = (void **)(result + 8);
  unint64_t v15 = (_BYTE *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7LL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unsigned int v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned __int16 v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }

uint64_t sub_10012554C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  return a1;
}

void sub_100125610(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_10012562C(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (void **)sub_100125238((uint64_t)a1, &v13, a2);
  __int128 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __int128 v8 = (uint64_t **)v6;
    __int128 v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    __int128 v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_10001E548(a1, v13, v8, v7);
    v11[0] = 0LL;
    sub_1001256E0((uint64_t)v11, 0LL);
  }

  return v7;
}

void sub_1001256E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100030A5C(v2 + 6);
    }
    operator delete(v2);
  }

__n128 sub_100125724(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 4 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1001257C8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + ((v7 >> 2) & 0x3FFFFFFFFFFFFFF8LL)) + ((v7 & 0x1F) << 7);
  __int128 v9 = *a2;
  __int128 v10 = a2[1];
  __int128 v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  __n128 result = (__n128)a2[4];
  __int128 v13 = a2[5];
  __int128 v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(__n128 *)(v8 + 64) = result;
  *(_OWORD *)(v8 + 80) = v13;
  ++a1[5];
  return result;
}

void sub_1001257C8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x20;
  unint64_t v4 = v2 - 32;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000472C0(v5, v33);
      unsigned __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100125A90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100125ADC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x20) {
    a2 = 1;
  }
  if (v2 < 0x40) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 32LL;
  }

  return v4 ^ 1u;
}

uint64_t *sub_100125B38(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (void **)sub_100125238((uint64_t)a1, &v13, a2);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    __int128 v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_10001E548(a1, v13, v8, v7);
    v11[0] = 0LL;
    sub_100125BEC((uint64_t)v11, 0LL);
  }

  return v7;
}

void sub_100125BEC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100124E40(v2 + 6);
    }
    operator delete(v2);
  }

__n128 sub_100125C30(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100125CEC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

void sub_100125CEC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x33;
  unint64_t v4 = v2 - 51;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000472C0(v5, v33);
      unsigned __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100125FB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100126000(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x33) {
    a2 = 1;
  }
  if (v2 < 0x66) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 51LL;
  }

  return v4 ^ 1u;
}

uint64_t *sub_10012605C(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (void **)sub_100125238((uint64_t)a1, &v13, a2);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    __int128 v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_10001E548(a1, v13, v8, v7);
    v11[0] = 0LL;
    sub_100126110((uint64_t)v11, 0LL);
  }

  return v7;
}

void sub_100126110(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100124F1C(v2 + 6);
    }
    operator delete(v2);
  }

void *sub_100126154(void *a1, void *__src)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1001261E8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = memcpy((void *)(*(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8LL)) + 264 * (v7 & 0xF)), __src, 0x108uLL);
  ++a1[5];
  return result;
}

void sub_1001261E8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000472C0(v5, v33);
      unsigned __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1001264B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001264FC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x10) {
    a2 = 1;
  }
  if (v2 < 0x20) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 16LL;
  }

  return v4 ^ 1u;
}

uint64_t *sub_100126558(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (void **)sub_100125238((uint64_t)a1, &v13, a2);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    __int128 v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_10001E548(a1, v13, v8, v7);
    v11[0] = 0LL;
    sub_10012660C((uint64_t)v11, 0LL);
  }

  return v7;
}

void sub_10012660C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100124D1C(v2 + 6);
    }
    operator delete(v2);
  }

__n128 sub_100126650(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 18 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100126734(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x12)) + 216 * (v7 % 0x12);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  __int128 v13 = *(_OWORD *)(a2 + 96);
  __int128 v14 = *(_OWORD *)(a2 + 112);
  __int128 v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 144) = v15;
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 112) = v14;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v17 = *(_OWORD *)(a2 + 176);
  __int128 v18 = *(_OWORD *)(a2 + 192);
  *(void *)(v8 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 192) = v18;
  *(__n128 *)(v8 + 160) = result;
  ++a1[5];
  return result;
}

void sub_100126734(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x12;
  unint64_t v4 = v2 - 18;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000472C0(v5, v33);
      unsigned __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1001269FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100126A48(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x12) {
    a2 = 1;
  }
  if (v2 < 0x24) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 18LL;
  }

  return v4 ^ 1u;
}

uint64_t *sub_100126AA4(uint64_t a1, unsigned __int16 *a2)
{
  int v4 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = (uint64_t *)(a1 + 8);
  BOOL v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v2;
  do
  {
    unsigned int v8 = *((unsigned __int16 *)v3 + 16);
    if (v8 >= v5)
    {
      if (v8 == v5)
      {
        if (v3[5] < v6) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }

      else
      {
        unint64_t v7 = v3;
      }
    }

    else
    {
      ++v3;
    }

    BOOL v3 = (uint64_t *)*v3;
  }

  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v9 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v9 || v5 == v9 && v6 < v7[5]) {
    return v2;
  }
  return v7;
}

void sub_100126B2C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100126B7C(exception, a1);
}

void sub_100126B68(_Unwind_Exception *a1)
{
}

std::logic_error *sub_100126B7C(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100126BA0(uint64_t **a1, unsigned __int16 *a2)
{
  BOOL v3 = sub_100126AA4((uint64_t)a1, a2);
  int v4 = v3;
  sub_10001EA5C(a1, v3);
  sub_100124D1C(v4 + 6);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100126BF8(uint64_t **a1, unsigned __int16 *a2)
{
  BOOL v3 = sub_100126AA4((uint64_t)a1, a2);
  int v4 = v3;
  sub_10001EA5C(a1, v3);
  sub_100030A5C(v4 + 6);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100126C50(uint64_t **a1, unsigned __int16 *a2)
{
  BOOL v3 = sub_100126AA4((uint64_t)a1, a2);
  int v4 = v3;
  sub_10001EA5C(a1, v3);
  sub_100124E40(v4 + 6);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100126CA8(uint64_t **a1, unsigned __int16 *a2)
{
  BOOL v3 = sub_100126AA4((uint64_t)a1, a2);
  int v4 = v3;
  sub_10001EA5C(a1, v3);
  sub_100124F1C(v4 + 6);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100126D00(uint64_t **a1, unsigned __int16 *a2)
{
  BOOL v3 = sub_100126AA4((uint64_t)a1, a2);
  int v4 = v3;
  sub_10001EA5C(a1, v3);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100126D50(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    unsigned int v3 = *a2;
    unint64_t v4 = *((void *)a2 + 1);
    uint64_t result = 1LL;
    do
    {
      unsigned int v6 = *((unsigned __int16 *)v2 + 16);
      if (v3 >= v6)
      {
        if (v3 != v6)
        {
          if (v6 >= v3) {
            return result;
          }
          goto LABEL_9;
        }

        unint64_t v7 = (unint64_t)v2[5];
        if (v4 >= v7)
        {
          if (v7 >= v4) {
            return result;
          }
LABEL_9:
          ++v2;
        }
      }

      unint64_t v2 = (uint64_t **)*v2;
    }

    while (v2);
  }

  return 0LL;
}

_OWORD *sub_100126DA8(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _OWORD **a4)
{
  unsigned int v6 = (void **)sub_100125238((uint64_t)a1, &v10, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((void *)v7 + 6) = 0LL;
    sub_10001E548(a1, v10, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_100126E30(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100126E5C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void *sub_100126E6C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE6D0[a1]);
}

void *sub_100126E80@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE728[a1]);
}

void *sub_100126E94@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE770[a1]);
}

void *sub_100126EA8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE790[a1]);
}

uint64_t sub_100126EBC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *(_BYTE *)a1 = 0;
  uint64_t v7 = a1 + 40;
  sub_10001E914(a1 + 8, a2);
  unsigned int v8 = operator new(0x20uLL);
  void *v8 = &off_1007AE620;
  v8[1] = sub_10012714C;
  v8[2] = 0LL;
  v8[3] = a1;
  uint64_t v18 = v8;
  sub_100120F74(v7, (uint64_t)v17);
  unsigned int v9 = v18;
  if (v18 == v17)
  {
    uint64_t v10 = 4LL;
    unsigned int v9 = v17;
  }

  else
  {
    if (!v18) {
      goto LABEL_6;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_10011E1A8(a1 + 776, a3);
  uint64_t v11 = a4[1];
  *(void *)(a1 + 944) = *a4;
  *(void *)(a1 + 952) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_10011B828(a1 + 960, a3);
  *(void *)(a1 + 1016) = 0LL;
  *(void *)(a1 + 1008) = 0LL;
  *(void *)(a1 + 1000) = a1 + 1008;
  *(void *)(a1 + 1024) = 850045863LL;
  *(void *)(a1 + 1080) = 0LL;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_BYTE *)(a1 + 1088) = 1;
  *(_DWORD *)(a1 + 1092) = 0;
  *(_DWORD *)(a1 + 1089) = 0;
  *(_BYTE *)(a1 + 1096) = 1;
  *(_DWORD *)(a1 + 1100) = 1;
  *(_DWORD *)(a1 + 1104) = a3;
  *(_BYTE *)(a1 + 1108) = sub_100320754(a3);
  if (!*(void *)(a1 + 32))
  {
    uint64_t v15 = "fRoseMeasurementSetCb";
    int v16 = 34;
    goto LABEL_14;
  }

  if (!*(void *)(a1 + 944))
  {
    uint64_t v15 = "fNNClassifierPtr";
    int v16 = 35;
LABEL_14:
    __assert_rtn("RoseMeasurementEngine", "MeasurementEngine.cpp", v16, v15);
  }

  return a1;
}

void sub_10012709C(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void **)(v1 + 32);
  if (v7 == v2)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v2;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_10012714C(std::mutex *a1, uint64_t a2)
{
  if (v153[392])
  {
    v108[1] = v144[1];
    v108[2] = v144[2];
    v108[3] = v144[3];
    v108[0] = v144[0];
    uint64_t v109 = v145;
    uint64_t v110 = 0LL;
    uint64_t v112 = 0LL;
    v111 = 0LL;
    sub_10011B560(&v110, v146, v147, (v147 - (uint64_t)v146) >> 3);
    __int128 v113 = v148;
    __int128 v114 = v149;
    uint64_t v115 = v150;
    double v116 = 0LL;
    uint64_t v118 = 0LL;
    uint64_t v117 = 0LL;
    sub_10011B618(&v116, v151, v152, 0x6DB6DB6DB6DB6DB7LL * ((v152 - (uint64_t)v151) >> 3));
    memcpy(v119, v153, 0x181uLL);
    __int128 v4 = *(_OWORD *)(a2 + 1088);
    __int128 v5 = *(_OWORD *)(a2 + 1120);
    __int128 v126 = *(_OWORD *)(a2 + 1104);
    __int128 v127 = v5;
    __int128 v6 = *(_OWORD *)(a2 + 1056);
    __int128 v122 = *(_OWORD *)(a2 + 1040);
    __int128 v123 = v6;
    __int128 v124 = *(_OWORD *)(a2 + 1072);
    __int128 v125 = v4;
    __int128 v7 = *(_OWORD *)(a2 + 1024);
    __int128 v120 = *(_OWORD *)(a2 + 1008);
    __int128 v121 = v7;
    char v128 = *(_BYTE *)(a2 + 1136);
    __int128 v8 = *(_OWORD *)(a2 + 1192);
    __int128 v131 = *(_OWORD *)(a2 + 1176);
    __int128 v132 = v8;
    __int128 v133 = *(_OWORD *)(a2 + 1208);
    char v134 = *(_BYTE *)(a2 + 1224);
    __int128 v9 = *(_OWORD *)(a2 + 1160);
    __int128 v129 = *(_OWORD *)(a2 + 1144);
    __int128 v130 = v9;
    __int128 v10 = *(_OWORD *)(a2 + 1280);
    __int128 v11 = *(_OWORD *)(a2 + 1312);
    __int128 v139 = *(_OWORD *)(a2 + 1296);
    v140[0] = v11;
    *(_OWORD *)((char *)v140 + 9) = *(_OWORD *)(a2 + 1321);
    __int128 v12 = *(_OWORD *)(a2 + 1248);
    __int128 v135 = *(_OWORD *)(a2 + 1232);
    __int128 v136 = v12;
    __int128 v137 = *(_OWORD *)(a2 + 1264);
    __int128 v138 = v10;
    memcpy(v141, (const void *)(a2 + 1344), sizeof(v141));
    v142[0] = 0;
    v142[608] = 0;
    __int16 v143 = 257;
    sub_100128690((uint64_t)a1, (uint64_t)v108);
    std::mutex::lock(a1 + 16);
    uint64_t sig = a1[17].__m_.__sig;
    uint64_t v14 = *(void *)a1[17].__m_.__opaque;
    std::mutex::unlock(a1 + 16);
    *(void *)__int128 buf = sig;
    *(void *)&uint8_t buf[8] = v14;
    sub_100118E08((uint64_t)v101, (uint64_t)v108, buf);
    sub_10011A7D8((uint64_t)v101, (uint64_t)v88);
    double v15 = v99[18];
    if (v99[18] < -0.5)
    {
      int v16 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(double *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#me,measurementInRangeCheck failed - range %.2f m",  buf,  0xCu);
      }
    }

    if (!LOBYTE(v99[46])) {
      __assert_rtn( "handleReceivedRoseMeasurements",  "MeasurementEngine.cpp",  196,  "rangeResultWithUncertainties.rangeUncMeters().has_value()");
    }
    if (!LOBYTE(v99[48])) {
      __assert_rtn( "handleReceivedRoseMeasurements",  "MeasurementEngine.cpp",  197,  "rangeResultWithUncertainties.fieldOfViewConfidence().has_value()");
    }
    if (v128)
    {
      sub_1001289EC((uint64_t)a1, &v120, LOBYTE(v119[104]), buf);
      uint64_t v17 = *(void **)buf;
      if (*(void *)buf != *(void *)&buf[8])
      {
        sub_1001252EC( (char *)&v92,  *(char **)buf,  *(uint64_t *)&buf[8],  (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
        uint64_t v17 = *(void **)buf;
      }

      if (v17)
      {
        *(void *)&uint8_t buf[8] = v17;
        operator delete(v17);
      }
    }

    if (sub_10011B82C((uint64_t)&a1[15], (uint64_t)v88, LOBYTE(a1->__m_.__sig)))
    {
      sub_10011B904(buf);
      sub_1001252EC( (char *)&v92,  *(char **)buf,  *(uint64_t *)&buf[8],  (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      uint64_t v18 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#me,normalized SOI RSSI is below threshold, setting NN output to (0, 0, 0, 0, 0, 1)",  buf,  2u);
      }
    }

    uint64_t v49 = a1;
    uint64_t v19 = *((void *)&v97 + 1);
    uint64_t v20 = v97;
    if ((void)v97 != *((void *)&v97 + 1))
    {
      int v21 = 1;
      while (*(_BYTE *)(v20 + 32))
      {
        if (!*(_BYTE *)(v20 + 48))
        {
          int v47 = 217;
          char v48 = "aoaHypothesis.measEngElevationUncertaintyDegrees.has_value()";
LABEL_83:
          __assert_rtn("handleReceivedRoseMeasurements", "MeasurementEngine.cpp", v47, v48);
        }

        unint64_t v22 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          if (!LOBYTE(v99[46])) {
            sub_100006080();
          }
          if (!LOBYTE(v99[48])) {
            sub_100006080();
          }
          uint64_t v23 = *(void *)(v20 + 40);
          uint64_t v24 = *(void *)(v20 + 24);
          *(_DWORD *)__int128 buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v21;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v99[45];
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v24;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v23;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&buf[40] = v99[47];
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::handleReceivedRoseMeasurements: hypothesis %d uncertainties: rangeM %.3f azDeg %. 3f elDeg %.3f fovConf %.3f",  buf,  0x30u);
        }

        v20 += 56LL;
        ++v21;
        if (v20 == v19) {
          goto LABEL_26;
        }
      }

      int v47 = 216;
      char v48 = "aoaHypothesis.measEngAzimuthUncertaintyDegrees.has_value()";
      goto LABEL_83;
    }

void sub_100127BC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10011B2B0(&STACK[0x750]);
  sub_100128A80(&STACK[0x9B0]);
  sub_100127EF0(&STACK[0x1330]);
  sub_100124BFC((uint64_t)&STACK[0x1A28]);
  _Unwind_Resume(a1);
}

uint64_t sub_100127C90(uint64_t a1)
{
  return a1;
}

void sub_100127CDC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (std::mutex *)(a1 + 1024);
  std::mutex::lock((std::mutex *)(a1 + 1024));
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 4);
  std::mutex::unlock(v4);
}

void sub_100127D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 96;
  if (*(_WORD *)(a2 + 96))
  {
    __int128 v5 = *(_OWORD *)(a2 + 48);
    void v11[2] = *(_OWORD *)(a2 + 32);
    double v11[3] = v5;
    __int128 v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    __int128 v7 = *(const void **)(a2 + 72);
    uint64_t v12 = *(void *)(a2 + 64);
    unint64_t v13 = 0LL;
    uint64_t v8 = *(void *)(a2 + 80);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    sub_10011B560(&v13, v7, v8, (v8 - (uint64_t)v7) >> 3);
    __int128 v9 = *(_OWORD *)(v4 + 16);
    __int128 v16 = *(_OWORD *)v4;
    __int128 v17 = v9;
    uint64_t v18 = *(void *)(v4 + 32);
    __int128 __p = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    sub_10011B618( &__p,  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
    memcpy(v22, (const void *)(a2 + 160), 0x181uLL);
    v22[392] = 0;
    v22[520] = 0;
    v22[528] = 0;
    v22[608] = 0;
    v22[616] = 0;
    v22[720] = 0;
    v22[728] = 0;
    v22[992] = 0;
    v23[0] = 0;
    v23[608] = 0;
    __int16 v24 = 0;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10) {
      sub_10001EEF0();
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 48LL))(v10, v11);
    sub_10011B444((uint64_t)v23);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }

    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }

  else
  {
    sub_100120F78(a1 + 40, a2);
  }

void sub_100127EBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100127EF0(void *a1)
{
  unint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }

  return a1;
}

void *sub_100127F38(uint64_t a1, uint64_t a2)
{
  return sub_100121FA8(a1 + 40, a2);
}

void *sub_100127F40(uint64_t a1, uint64_t a2)
{
  return sub_100122254(a1 + 40, a2);
}

void sub_100127F48(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_100127F50(uint64_t a1, uint64_t a2)
{
  return sub_10012252C((uint64_t **)(a1 + 40), a2);
}

void sub_100127F58(uint64_t a1, uint64_t a2)
{
}

void sub_100127F60(uint64_t a1, uint64_t a2)
{
}

void sub_100127F68(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v14) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::clearState: ticketId %hu",  buf,  8u);
  }

  sub_100124720(a1 + 40, a2);
  __int128 v5 = *(uint64_t **)(a1 + 1000);
  __int128 v6 = (uint64_t *)(a1 + 1008);
  if (v5 != (uint64_t *)(a1 + 1008))
  {
    __int128 v7 = (uint64_t **)(a1 + 1000);
    do
    {
      if (*((unsigned __int16 *)v5 + 16) == a2)
      {
        uint64_t v8 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = v5[5];
          *(_DWORD *)__int128 buf = 134217984;
          uint64_t v14 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::clearState: erasing slot with mac addr %016llx",  buf,  0xCu);
        }

        uint64_t v10 = sub_10001EA5C(v7, v5);
        sub_10011D53C(v5 + 6);
        operator delete(v5);
      }

      else
      {
        __int128 v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            uint64_t v10 = v11;
            __int128 v11 = (uint64_t *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            uint64_t v10 = (uint64_t *)v5[2];
            BOOL v12 = *v10 == (void)v5;
            __int128 v5 = v10;
          }

          while (!v12);
        }
      }

      __int128 v5 = v10;
    }

    while (v10 != v6);
  }

void sub_10012810C(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)a1 + 1000);
  if (*((_BYTE *)a1 + 552))
  {
    if (v4 | *((unsigned __int8 *)a1 + 776))
    {
      __int128 v5 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::getRangeResult: warning: have range result AND range timestamps; ignoring range timestamps",
          (uint8_t *)&buf,
          2u);
        if (!*((_BYTE *)a1 + 552)) {
          sub_100006080();
        }
      }
    }

    __int128 v6 = a1[3];
    __int128 v54 = a1[2];
    __int128 v55 = v6;
    __int128 v7 = a1[1];
    __int128 buf = *a1;
    __int128 v53 = v7;
    uint64_t v8 = (const void *)*((void *)a1 + 9);
    uint64_t v56 = *((void *)a1 + 8);
    __int128 v57 = 0uLL;
    uint64_t v9 = *((void *)a1 + 10);
    uint64_t v58 = 0LL;
    sub_10011B560(&v57, v8, v9, (v9 - (uint64_t)v8) >> 3);
    __int128 v10 = a1[7];
    __int128 v59 = a1[6];
    __int128 v60 = v10;
    __int128 v11 = (const void *)*((void *)a1 + 17);
    uint64_t v61 = *((void *)a1 + 16);
    __int128 v62 = 0uLL;
    uint64_t v63 = 0LL;
    sub_10011B618( &v62,  v11,  *((void *)a1 + 18),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a1 + 18) - (void)v11) >> 3));
    memcpy(v64, a1 + 10, 0x181uLL);
    if (*((_BYTE *)a1 + 1688))
    {
      v64[28] = *((void *)a1 + 207);
      LOBYTE(v64[29]) = 1;
      v64[30] = *((void *)a1 + 208);
      LOBYTE(v64[31]) = 1;
      v64[32] = *((void *)a1 + 209);
      LOBYTE(v64[33]) = 1;
      v64[34] = *((void *)a1 + 210);
      LOBYTE(v64[35]) = 1;
    }

    uint64_t v12 = v58;
    *(void *)(a2 + 64) = v56;
    __int128 v13 = v55;
    *(_OWORD *)(a2 + 32) = v54;
    *(_OWORD *)(a2 + 48) = v13;
    __int128 v14 = v53;
    *(_OWORD *)a2 = buf;
    *(_OWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 72) = v57;
    *(void *)(a2 + 88) = v12;
    __int128 v15 = v59;
    __int128 v16 = v60;
    *(void *)(a2 + 128) = v61;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v16;
    *(_OWORD *)(a2 + 136) = v62;
    *(void *)(a2 + 152) = v63;
    memcpy((void *)(a2 + 160), v64, 0x181uLL);
    *(_BYTE *)(a2 + 552) = 1;
    return;
  }

  if (*((_BYTE *)a1 + 776)) {
    BOOL v17 = v4 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CE48();
    }
    goto LABEL_44;
  }

  if (!*((_BYTE *)a1 + 768))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CD20();
    }
    goto LABEL_44;
  }

  if (!*((_BYTE *)a1 + 600))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CD4C();
    }
    goto LABEL_44;
  }

  if (!*((_BYTE *)a1 + 561))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CD78();
    }
    goto LABEL_44;
  }

  if (!*((_BYTE *)a1 + 785))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CDA4();
    }
    goto LABEL_44;
  }

  int v18 = *((unsigned __int8 *)a1 + 560);
  int v19 = *((unsigned __int8 *)a1 + 784);
  if (v18 != v19)
  {
    int v37 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_10032BA04(v18, &buf);
      int v38 = SBYTE7(v53);
      BOOL v39 = (__int128 *)buf;
      sub_10032BA04(v19, v43);
      p___int128 buf = &buf;
      if (v38 < 0) {
        p___int128 buf = v39;
      }
      if (v44 >= 0) {
        __int128 v41 = v43;
      }
      else {
        __int128 v41 = (void **)v43[0];
      }
      *(_DWORD *)char v48 = 136315394;
      uint64_t v49 = p_buf;
      __int16 v50 = 2080;
      __n128 v51 = v41;
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "#me,RoseMeasurementEngine::getRangeResult: error: local and remote timestamp events have inconsistent rfChannel, %s vs %s",  v48,  0x16u);
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      if (SBYTE7(v53) < 0) {
        operator delete((void *)buf);
      }
    }

    goto LABEL_44;
  }

  double v20 = sub_100026AA4((double)*(int *)((char *)a1 + 735));
  BOOL v21 = sub_100128F10((uint64_t)(a1 + 35), (uint64_t)(a1 + 49), v20);
  sub_1001290C8((uint64_t)(a1 + 35), (uint64_t)(a1 + 49));
  double v30 = v29;
  if (!v21)
  {
    uint64_t v42 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CDD0(v42, v30);
    }
LABEL_44:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 552) = 0;
    return;
  }

  sub_10012927C((uint64_t)(a1 + 40), v22, v23, v24, v25, v26, v27, v28, (uint64_t)v43, v29, 1.0);
  char v47 = v18;
  if (!*((_BYTE *)a1 + 600)) {
    sub_100006080();
  }
  sub_100138B04(&buf, 1LL, *((unsigned __int16 *)a1 + 305), v43, *((double *)a1 + 74));
  uint64_t v31 = *((void *)a1 + 72);
  *((void *)&buf + 1) = *((void *)a1 + 71);
  LOBYTE(v53) = v31;
  __int128 v32 = v55;
  *(_OWORD *)(a2 + 32) = v54;
  *(_OWORD *)(a2 + 48) = v32;
  uint64_t v33 = v58;
  *(void *)(a2 + 64) = v56;
  __int128 v34 = v53;
  *(_OWORD *)a2 = buf;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 72) = v57;
  *(void *)(a2 + 88) = v33;
  __int128 v57 = 0uLL;
  __int128 v35 = v60;
  *(_OWORD *)(a2 + 96) = v59;
  *(_OWORD *)(a2 + 112) = v35;
  uint64_t v36 = v63;
  *(void *)(a2 + 128) = v61;
  *(_OWORD *)(a2 + 136) = v62;
  *(void *)(a2 + 152) = v36;
  uint64_t v58 = 0LL;
  __int128 v62 = 0uLL;
  uint64_t v63 = 0LL;
  memcpy((void *)(a2 + 160), v64, 0x181uLL);
  *(_BYTE *)(a2 + 552) = 1;
  sub_10011B2B0(&buf);
  if (__p)
  {
    unint64_t v46 = __p;
    operator delete(__p);
  }

void sub_100128644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100128690(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 280) && *(_BYTE *)(a2 + 264))
  {
    double v3 = *(double *)(a2 + 256);
    v33[0] = *(double *)(a2 + 272);
    v33[1] = v3;
    sub_10011E1E4(a1 + 776, *(unsigned __int8 *)(a2 + 368), v33, (uint64_t)&v31);
    int v4 = (char **)(a2 + 136);
    *(void *)(a2 + 144) = *(void *)(a2 + 136);
    __int128 v5 = v31;
    __int128 v6 = v32;
    if (v32 == v31)
    {
      uint64_t v28 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#me,No AoA hypotheses are generated because reverse LUTs are not available",  buf,  2u);
    }

    else
    {
      int v7 = 0;
      do
      {
        sub_100026AC4((double *)&v30, (double *)&v29, v5[1], *v5);
        unint64_t v8 = *(void *)(a2 + 144);
        unint64_t v9 = *(void *)(a2 + 152);
        if (v8 >= v9)
        {
          uint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v8 - (void)*v4) >> 3);
          unint64_t v13 = v12 + 1;
          unint64_t v14 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v9 - (void)*v4) >> 3);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x249249249249249LL) {
            unint64_t v15 = 0x492492492492492LL;
          }
          else {
            unint64_t v15 = v13;
          }
          __int128 v16 = (char *)sub_10001FD64(a2 + 152, v15);
          int v18 = &v16[56 * v12];
          uint64_t v19 = v29;
          *(void *)int v18 = v30;
          *((void *)v18 + 1) = v19;
          *((void *)v18 + 2) = 0LL;
          v18[24] = 0;
          v18[32] = 0;
          v18[40] = 0;
          _BYTE v18[48] = 0;
          BOOL v21 = *(char **)(a2 + 136);
          double v20 = *(char **)(a2 + 144);
          uint64_t v22 = v18;
          if (v20 != v21)
          {
            do
            {
              __int128 v23 = *(_OWORD *)(v20 - 56);
              __int128 v24 = *(_OWORD *)(v20 - 40);
              __int128 v25 = *(_OWORD *)(v20 - 24);
              *((void *)v22 - 1) = *((void *)v20 - 1);
              *(_OWORD *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 40) = v24;
              *(_OWORD *)(v22 - 56) = v23;
              v22 -= 56;
              v20 -= 56;
            }

            while (v20 != v21);
            double v20 = *v4;
          }

          __int128 v11 = v18 + 56;
          *(void *)(a2 + 136) = v22;
          *(void *)(a2 + 144) = v18 + 56;
          *(void *)(a2 + 152) = &v16[56 * v17];
          if (v20) {
            operator delete(v20);
          }
        }

        else
        {
          uint64_t v10 = v29;
          *(void *)unint64_t v8 = v30;
          *(void *)(v8 + 8) = v10;
          *(void *)(v8 + 16) = 0LL;
          *(_BYTE *)(v8 + 24) = 0;
          *(_BYTE *)(v8 + 32) = 0;
          *(_BYTE *)(v8 + 40) = 0;
          *(_BYTE *)(v8 + 48) = 0;
          __int128 v11 = (char *)(v8 + 56);
        }

        *(void *)(a2 + 144) = v11;
        uint64_t v26 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109632;
          int v35 = v7;
          __int16 v36 = 2048;
          uint64_t v37 = v30;
          __int16 v38 = 2048;
          uint64_t v39 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::aoa hypothesis %d: azimuth = %.2f deg, elevation = %.2f deg",  buf,  0x1Cu);
        }

        ++v7;
        v5 += 2;
      }

      while (v5 != v6);
    }

    __int128 v5 = v31;
LABEL_27:
    if (v5)
    {
      __int128 v32 = v5;
      operator delete(v5);
    }

    return;
  }

  uint64_t v27 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#me,calculateAoAHypotheses: invalid PDOA",  buf,  2u);
  }

void sub_1001289C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_1001289EC(uint64_t a1@<X0>, _OWORD *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (v7[0] == v7[1])
  {
    *a4 = 0LL;
    a4[1] = 0LL;
    a4[2] = 0LL;
  }

  else
  {
    sub_10012021C(*(void *)(a1 + 944), v7, a3, (uint64_t)a4);
  }

  unint64_t v8 = (void **)v7;
  sub_10011E3B8(&v8);
}

void sub_100128A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100128A80(void *a1)
{
  unint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }

  double v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100128AD0(_OWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  int v4 = 0LL;
  uint64_t v5 = 0LL;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  __int128 __p = 0LL;
  uint64_t v56 = 0LL;
  __int128 v57 = 0LL;
  __int128 v6 = a1[3];
  v54[0] = a1[2];
  v54[1] = v6;
  do
  {
    ++v5;
    int v7 = (__int16 *)v54 + 2 * v5;
    double v8 = (double)*v7;
    double v9 = (double)v7[1];
    if (v4 >= (double *)v57)
    {
      uint64_t v10 = (double *)__p;
      uint64_t v11 = ((char *)v4 - (_BYTE *)__p) >> 4;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v57 - (_BYTE *)__p;
      if ((v57 - (_BYTE *)__p) >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        unint64_t v15 = (char *)sub_10011E44C((uint64_t)&v57, v14);
        uint64_t v10 = (double *)__p;
        int v4 = v56;
      }

      else
      {
        unint64_t v15 = 0LL;
      }

      __int128 v16 = (double *)&v15[16 * v11];
      double *v16 = v8;
      v16[1] = v9;
      uint64_t v17 = v16;
      if (v4 != v10)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v4 - 1);
          v17 -= 2;
          v4 -= 2;
        }

        while (v4 != v10);
        uint64_t v10 = (double *)__p;
      }

      int v4 = v16 + 2;
      __int128 __p = v17;
      uint64_t v56 = v16 + 2;
      __int128 v57 = &v15[16 * v14];
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *int v4 = v8;
      v4[1] = v9;
      v4 += 2;
    }

    uint64_t v56 = v4;
  }

  while (v5 != 5);
  unint64_t v18 = a2[1];
  if (v18 >= a2[2])
  {
    uint64_t v19 = sub_100129990(a2, (uint64_t)&__p);
  }

  else
  {
    sub_100129940((uint64_t)a2, (uint64_t)&__p);
    uint64_t v19 = v18 + 24;
  }

  uint64_t v20 = 0LL;
  a2[1] = v19;
  BOOL v21 = (double *)__p;
  uint64_t v56 = (double *)__p;
  __int128 v22 = a1[7];
  v53[0] = a1[6];
  v53[1] = v22;
  do
  {
    ++v20;
    __int128 v23 = (__int16 *)v53 + 2 * v20;
    double v24 = (double)*v23;
    double v25 = (double)v23[1];
    if (v21 >= (double *)v57)
    {
      uint64_t v26 = (double *)__p;
      uint64_t v27 = ((char *)v21 - (_BYTE *)__p) >> 4;
      unint64_t v28 = v27 + 1;
      uint64_t v29 = v57 - (_BYTE *)__p;
      if ((v57 - (_BYTE *)__p) >> 3 > v28) {
        unint64_t v28 = v29 >> 3;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = (char *)sub_10011E44C((uint64_t)&v57, v30);
        uint64_t v26 = (double *)__p;
        BOOL v21 = v56;
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      __int128 v32 = (double *)&v31[16 * v27];
      *__int128 v32 = v24;
      v32[1] = v25;
      uint64_t v33 = v32;
      if (v21 != v26)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v21 - 1);
          v33 -= 2;
          v21 -= 2;
        }

        while (v21 != v26);
        uint64_t v26 = (double *)__p;
      }

      BOOL v21 = v32 + 2;
      __int128 __p = v33;
      uint64_t v56 = v32 + 2;
      __int128 v57 = &v31[16 * v30];
      if (v26) {
        operator delete(v26);
      }
    }

    else
    {
      *BOOL v21 = v24;
      v21[1] = v25;
      v21 += 2;
    }

    uint64_t v56 = v21;
  }

  while (v20 != 5);
  unint64_t v34 = a2[1];
  if (v34 >= a2[2])
  {
    uint64_t v35 = sub_100129990(a2, (uint64_t)&__p);
  }

  else
  {
    sub_100129940((uint64_t)a2, (uint64_t)&__p);
    uint64_t v35 = v34 + 24;
  }

  uint64_t v36 = 0LL;
  a2[1] = v35;
  uint64_t v37 = (double *)__p;
  uint64_t v56 = (double *)__p;
  __int128 v38 = a1[5];
  v52[0] = a1[4];
  v52[1] = v38;
  do
  {
    ++v36;
    uint64_t v39 = (__int16 *)v52 + 2 * v36;
    double v40 = (double)*v39;
    double v41 = (double)v39[1];
    if (v37 >= (double *)v57)
    {
      uint64_t v42 = (double *)__p;
      uint64_t v43 = ((char *)v37 - (_BYTE *)__p) >> 4;
      unint64_t v44 = v43 + 1;
      uint64_t v45 = v57 - (_BYTE *)__p;
      if ((v57 - (_BYTE *)__p) >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        char v47 = (char *)sub_10011E44C((uint64_t)&v57, v46);
        uint64_t v42 = (double *)__p;
        uint64_t v37 = v56;
      }

      else
      {
        char v47 = 0LL;
      }

      char v48 = (double *)&v47[16 * v43];
      *char v48 = v40;
      v48[1] = v41;
      uint64_t v49 = v48;
      if (v37 != v42)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v37 - 1);
          v49 -= 2;
          v37 -= 2;
        }

        while (v37 != v42);
        uint64_t v42 = (double *)__p;
      }

      uint64_t v37 = v48 + 2;
      __int128 __p = v49;
      uint64_t v56 = v48 + 2;
      __int128 v57 = &v47[16 * v46];
      if (v42) {
        operator delete(v42);
      }
    }

    else
    {
      *uint64_t v37 = v40;
      v37[1] = v41;
      v37 += 2;
    }

    uint64_t v56 = v37;
  }

  while (v36 != 5);
  unint64_t v50 = a2[1];
  if (v50 >= a2[2])
  {
    uint64_t v51 = sub_100129990(a2, (uint64_t)&__p);
  }

  else
  {
    sub_100129940((uint64_t)a2, (uint64_t)&__p);
    uint64_t v51 = v50 + 24;
  }

  a2[1] = v51;
  if (__p)
  {
    uint64_t v56 = (double *)__p;
    operator delete(__p);
  }

void sub_100128EC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_10011E3B8((void ***)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_100128F10(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = *(double *)(a2 + 64);
  double v4 = *(double *)(a2 + 72);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)&v4 + *(void *)&v5;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134219264;
    double v15 = v5;
    __int16 v16 = 2048;
    double v17 = v4;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = *(void *)&v4 + *(void *)&v5;
    __int16 v24 = 2048;
    uint64_t v25 = v6 + v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::checkTimestampAndFrequencyConsistency: rtt_i %lld tat_i %lld rtt_r %lld tat_r %lld num %lld den %lld",  (uint8_t *)&v14,  0x3Eu);
  }

  if (v9)
  {
    double v11 = sub_100026AB4(500.0);
    unint64_t v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 134218240;
      double v15 = a3;
      __int16 v16 = 2048;
      double v17 = (double)v8 / (double)v9 + -1.0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::checkTimestampAndFrequencyConsistency: cfo_ppu %E  timestamp_derived_frequency_deviation_ppu %E",  (uint8_t *)&v14,  0x16u);
    }

    return fabs(a3 - ((double)v8 / (double)v9 + -1.0)) <= v11;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10038CE74();
      return 0LL;
    }
  }

  return result;
}

void sub_1001290C8(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 64);
  double v2 = *(double *)(a2 + 72);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)&v2 + *(void *)&v3 + v5 + v4;
  uint64_t v7 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134219264;
    double v12 = v3;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 2048;
    uint64_t v18 = v4;
    __int16 v19 = 2048;
    uint64_t v20 = v5 * *(void *)&v3 - v4 * *(void *)&v2;
    __int16 v21 = 2048;
    uint64_t v22 = *(void *)&v2 + *(void *)&v3 + v5 + v4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::computeRange: rtt_i %lld tat_i %lld rtt_r %lld tat_r %lld num %lld den %lld",  (uint8_t *)&v11,  0x3Eu);
  }

  if (v6)
  {
    double v8 = sub_100320614(llround((double)(v5 * *(void *)&v3 - v4 * *(void *)&v2) / (double)v6));
    uint64_t v9 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = sub_100026A74(v8);
      int v11 = 134218240;
      double v12 = v8;
      __int16 v13 = 2048;
      double v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#me,RoseMeasurementEngine::computeRange: tofSec = %.6e rangeM = %.6e",  (uint8_t *)&v11,  0x16u);
    }

    sub_100026A74(v8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038CEA0();
  }

void sub_10012927C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>)
{
  __int16 v14 = sub_10032B26C(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  __int16 v54 = *(_WORD *)(a1 + 22);
  __int16 v55 = v14;
  char v53 = sub_10032AF88(*(unsigned __int8 *)(a1 + 24), v15, v16, v17, v18, v19, v20, v21);
  double v25 = sub_1003205EC(*(void *)(a1 + 28));
  __int16 v52 = *(_WORD *)(a1 + 26);
  uint64_t v59 = *(void *)(a1 + 36);
  double v26 = (double)*(__int16 *)(a1 + 86) * 0.25;
  double v27 = (double)*(__int16 *)(a1 + 88) * 0.25;
  int v48 = *(_DWORD *)(a1 + 95);
  if (*(unsigned __int8 *)(a1 + 68) != 0xFF)
  {
    LOWORD(v22) = *(_WORD *)(a1 + 100);
    LOWORD(v23) = *(_WORD *)(a1 + 102);
    LOWORD(v24) = *(_WORD *)(a1 + 104);
    double v50 = (double)*(char *)(a1 + 79);
    double v51 = (double)*(char *)(a1 + 78);
    double v49 = (double)*(char *)(a1 + 80);
    double v30 = (double)*(__int16 *)(a1 + 70);
    double v28 = (double)*(__int16 *)(a1 + 72);
    double v33 = (double)v22 * 0.01;
    double v32 = (double)v23 * 0.01;
    double v31 = (double)v24 * 0.01;
    uint64_t v29 = 1LL;
  }

  else
  {
    double v28 = 0.0;
    uint64_t v29 = 0LL;
    double v30 = 0.0;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    double v49 = 0.0;
    double v50 = 0.0;
    double v51 = 0.0;
  }

  unsigned int v34 = *(_DWORD *)(a1 + 74);
  double v35 = sub_1003205EC(v34);
  char v36 = *(_BYTE *)(a1 + 99);
  uint64_t v58 = 0LL;
  __int128 v57 = 0u;
  int v37 = *(_DWORD *)(a1 + 106);
  __int16 v38 = *(_WORD *)(a1 + 110);
  double v39 = sub_100026A58(a10);
  double v40 = sub_100026A58(a11);
  *(double *)&__int128 v45 = v28;
  *((void *)&v45 + 1) = v29;
  *(double *)&__int128 v44 = v30;
  *((void *)&v44 + 1) = v29;
  *((void *)&v43 + 1) = v29;
  *((void *)&v42 + 1) = v29;
  *(double *)&__int128 v43 = v49;
  *((void *)&v41 + 1) = v29;
  *(double *)&__int128 v42 = v50;
  *(double *)&__int128 v41 = v51;
  sub_100322030( a9,  v55,  v54,  v53,  v52,  0,  &v59,  0,  v25,  v39,  v26,  v27,  (double)v48,  v40,  v35,  (uint64_t)&v57,  v41,  v42,  v43,  v44,  v45,  0,  v34,  v36,  *(uint64_t *)&v33,  v29,  *(uint64_t *)&v32,  v29,  *(uint64_t *)&v31,  v29,  9,  v46,  0,  0,  0,  0,  v37,  SHIWORD(v37),  v38,  v47,  0,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,
    0LL,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  if ((void)v57)
  {
    *((void *)&v57 + 1) = v57;
    operator delete((void *)v57);
  }

void sub_10012952C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100129548(uint64_t a1)
{
  double v2 = *(void **)(a1 + 24);
  if (v2 == (void *)a1)
  {
    uint64_t v3 = 4LL;
    double v2 = (void *)a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_100129624(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  __int128 v11 = *(_OWORD *)(a2 + 568);
  __int128 v10 = *(_OWORD *)(a2 + 584);
  __int128 v12 = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 597) = *(void *)(a2 + 597);
  *(_OWORD *)(a1 + 568) = v11;
  *(_OWORD *)(a1 + 584) = v10;
  *(_OWORD *)(a1 + 552) = v12;
  *(_BYTE *)(a1 + 608) = 1;
  return a1;
}

void sub_100129710(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_100129734(uint64_t a1)
{
  double v2 = (char *)operator new(0x20uLL);
  *(void *)double v2 = &off_1007AE620;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100129774(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007AE620;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10012979C(void *a1)
{
  uint64_t v1 = a1[2];
  double v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    double v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_1001297B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1001297F4()
{
}

void sub_100129800(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100129800(a1, *a2);
    sub_100129800(a1, a2[1]);
    sub_10011D53C(a2 + 6);
    operator delete(a2);
  }

uint64_t *sub_100129848(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (void **)sub_100125238((uint64_t)a1, &v13, a2);
  __int128 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __int128 v8 = (uint64_t **)v6;
    __int128 v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    __int128 v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_10001E548(a1, v13, v8, v7);
    v11[0] = 0LL;
    sub_1001298FC((uint64_t)v11, 0LL);
  }

  return v7;
}

void sub_1001298FC(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10011D53C(v2 + 6);
    }
    operator delete(v2);
  }

void *sub_100129940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  __n128 result = sub_100120548( v3,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100129988(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100129990(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10001E11C();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_10001E130(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  __int128 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)__int128 v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_100120548(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  v15 += 24;
  sub_100129AA4(a1, v14);
  uint64_t v12 = a1[1];
  sub_100129C30((uint64_t)v14);
  return v12;
}

void sub_100129A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100129AA4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100129B18((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100129B18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_100129BB8((uint64_t)v11);
  return v9;
}

uint64_t sub_100129BB8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100129BEC(a1);
  }
  return a1;
}

void sub_100129BEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }

    v1 += 24LL;
  }

uint64_t sub_100129C30(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100129C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

void sub_100129CBC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      uint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100422140;
      v1[1] = *(_OWORD *)algn_100422150;
      v1[2] = xmmword_100422160;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_100129D5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100129D74()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F6970 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F6960 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6960, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  unint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F6988 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F6978 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6978, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  __int128 v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F69A0 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F6990 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6990, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  char v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F69B8 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F69A8 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F69A8, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  uint64_t v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F69D0 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F69C0 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F69C0, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  uint64_t v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F69E8 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F69D8 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F69D8, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  unint64_t v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  double v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F6A00 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F69F0 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F69F0, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  double v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  double v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F6A18 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F6A08 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A08, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  double v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F6A30 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F6A20 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F6A20,  (void *)&_mh_execute_header);
}

void sub_10012A358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10012A3CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE840[a1]);
}

void *sub_10012A3E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE898[a1]);
}

void *sub_10012A3F4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE8E0[a1]);
}

void *sub_10012A408@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE900[a1]);
}

uint64_t sub_10012A41C(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 0x15)
  {
    __int128 v19 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 __p = 67109120;
      *(_DWORD *)&__p[4] = a2;
      _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "pxgCount = %d", __p, 8u);
      __int128 v19 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 __p = 136315650;
      *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/RangingServiceLib/ServiceProvider/R"
                           "oseCycleIntervalPicker.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 51;
      __int16 v26 = 2080;
      __int128 v27 = "SymmetricalMultipeer";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", __p, 0x1Cu);
    }

    abort();
  }

  if (a3 <= 2)
  {
    uint64_t v20 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = a3;
      _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "txSlotSize = %lld", __p, 0xCu);
      uint64_t v20 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 __p = 136315650;
      *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/RangingServiceLib/ServiceProvider/R"
                           "oseCycleIntervalPicker.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 52;
      __int16 v26 = 2080;
      __int128 v27 = "SymmetricalMultipeer";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", __p, 0x1Cu);
    }

    abort();
  }

  if (a4 <= 2)
  {
    __int128 v21 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = a4;
      _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "txSlotSize = %lld", __p, 0xCu);
      __int128 v21 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 __p = 136315650;
      *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/RangingServiceLib/ServiceProvider/R"
                           "oseCycleIntervalPicker.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 53;
      __int16 v26 = 2080;
      __int128 v27 = "SymmetricalMultipeer";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", __p, 0x1Cu);
    }

    abort();
  }

  switch(a1)
  {
    case 0:
      sub_10038CEF4();
    case 1:
      int64_t v7 = 2000LL;
      uint64_t v8 = 1500LL;
      break;
    case 2:
      int64_t v7 = 1500LL;
      uint64_t v8 = 550LL;
      break;
    case 3:
      int64_t v7 = 200LL;
      uint64_t v8 = 90LL;
      break;
    default:
      int64_t v7 = 0x8000000000000000LL;
      uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }

  __int128 v9 = operator new(0x20uLL);
  *(void *)__int128 v9 = &off_1007AE7C0;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 2) = a4;
  *((_DWORD *)v9 + 6) = a2;
  unint64_t v24 = v9;
  if (v7 >= v8)
  {
    *(void *)__int128 __p = v8;
    uint64_t v10 = 1LL;
    while (((*(uint64_t (**)(_BYTE *, _BYTE *))(*(void *)v9 + 48LL))(v9, __p) & 1) == 0)
    {
      v8 += 3LL;
      if (v7 < v8)
      {
        uint64_t v10 = 0LL;
        uint64_t v8 = 0LL;
        break;
      }

      __int128 v9 = v24;
      *(void *)__int128 __p = v8;
      if (!v24) {
        sub_10001EEF0();
      }
    }

    __int128 v9 = v24;
    if (v24 == v23)
    {
      uint64_t v11 = 4LL;
      __int128 v9 = v23;
      goto LABEL_21;
    }

    if (!v24) {
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v11 = 5LL;
LABEL_21:
  (*(void (**)(void))(*(void *)v9 + 8 * v11))();
LABEL_22:
  if (!v10) {
    sub_10038CECC();
  }
  sub_10012AE50(__p, 0xFuLL);
  uint64_t v12 = *(void *)__p;
  __int128 v13 = *(uint64_t **)&__p[8];
  if (*(void *)__p != *(void *)&__p[8])
  {
    uint64_t v14 = v8 + 3;
    __int128 v15 = *(uint64_t **)__p;
    do
    {
      *v15++ = v14;
      v14 += 3LL;
    }

    while (v15 != v13);
  }

  v22[0] = 0LL;
  v22[1] = (((uint64_t)v13 - v12) >> 3) - 1;
  uint64_t v16 = sub_10012A8CC(v22);
  uint64_t v17 = *(void *)(*(void *)__p + 8 * v16);
  *(void *)&__p[8] = *(void *)__p;
  operator delete(*(void **)__p);
  return v17;
}

void sub_10012A86C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012A8CC(void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1007F34A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1007F34A8))
  {
    sub_10012AA30(&v8);
    std::random_device::result_type v6 = std::random_device::operator()(&v8);
    dword_1007F2AE0[0] = v6;
    for (uint64_t i = 1LL; i != 624; ++i)
    {
      std::random_device::result_type v6 = i + 1812433253 * (v6 ^ (v6 >> 30));
      dword_1007F2AE0[i] = v6;
    }

    qword_1007F34A0 = 0LL;
    std::random_device::~random_device(&v8);
    __cxa_guard_release(&qword_1007F34A8);
  }

  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_1007F34F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1007F34F0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1007F34B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F34F0);
  }

  std::mutex::lock(&stru_1007F34B0);
  uint64_t v4 = sub_10012AAA0((uint64_t)a1, (uint64_t)dword_1007F2AE0, a1);
  std::mutex::unlock(&stru_1007F34B0);
  return v4;
}

void sub_10012A9F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

std::random_device *sub_10012AA30(std::random_device *a1)
{
  return a1;
}

void sub_10012AA84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012AAA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      sub_10012AB28((uint64_t)v10, a2, 0x40uLL);
      return sub_10012AC08((uint64_t)v10);
    }

    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63LL;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64LL;
      }
      sub_10012AB28((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = sub_10012AC08((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }

  return result;
}

uint64_t sub_10012AB28(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1LL << (a3 / v3)) & (unint64_t)&_mh_execute_header;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0LL;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ (unint64_t)&_mh_execute_header) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0LL;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0LL;
      goto LABEL_13;
    }

    *(void *)(result + 40) = (-1LL << v4) & (unint64_t)&_mh_execute_header;
  }

  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0LL;
  }
  else {
    unint64_t v6 = 0x80000000uLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t sub_10012AC08(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      do
        unsigned int v4 = sub_10012ACD8(*(void *)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0LL;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }

    while (v3 < v7);
  }

  else
  {
    uint64_t v2 = 0LL;
    unint64_t v7 = 0LL;
  }

  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      unsigned int v8 = sub_10012ACD8(*(void *)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }

  return v2;
}

uint64_t sub_10012ACD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

__n128 sub_10012AD80(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &off_1007AE7C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10012ADC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007AE7C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_10012ADE8(uint64_t a1, void *a2)
{
  return *(void *)(a1 + 8) + (*(void *)(a1 + 8) + 2LL * *(void *)(a1 + 16)) * *(int *)(a1 + 24) <= *a2;
}

uint64_t sub_10012AE08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10012AE44()
{
}

void *sub_10012AE50(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10011B5D8(a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_10012AEA8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10012AEC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE998[a1]);
}

void *sub_10012AED8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AE9F0[a1]);
}

void *sub_10012AEEC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEA38[a1]);
}

void *sub_10012AF00@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEA58[a1]);
}

double sub_10012AF14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_1007AE930;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_10012AF40(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10012AF70(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

uint64_t sub_10012AFA0(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_10038CF1C();
  }
  unsigned int v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10012B004(_Unwind_Exception *a1)
{
}

void sub_10012B018(uint64_t a1, _OWORD *a2)
{
  if (*(void *)(a1 + 8))
  {
    __int128 v3 = a2[1];
    v6[0] = *a2;
    v6[1] = v3;
    unsigned int v4 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    (*(void (**)(void, _OWORD *))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), v6);
    std::mutex::unlock(v4);
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038CF44(v5);
    }
  }

void sub_10012B0A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10012B0B4(uint64_t a1)
{
  unint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  else {
    uint64_t v4 = 0LL;
  }
  std::mutex::unlock(v2);
  return v4;
}

void sub_10012B108(_Unwind_Exception *a1)
{
}

uint64_t sub_10012B11C(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10012B14C(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

uint64_t sub_10012B17C(uint64_t result)
{
  *(void *)(result + 4) = 0LL;
  *(_DWORD *)double result = 196808;
  return result;
}

_WORD *sub_10012B190(_WORD *result, __int16 a2, __int16 a3, __int16 a4, __int16 a5, int a6)
{
  result[2] += a3 * a2;
  result[3] |= a4;
  result[4] |= a5;
  if ((*(void *)&a6 & 0xFF0000LL) != 0)
  {
    uint64_t v6 = result;
    double result = (_WORD *)sub_10032BCC4((unsigned __int16)a6);
    if (v7) {
      return sub_10032BA90(v6 + 5, result);
    }
  }

  return result;
}

uint64_t sub_10012B200(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_10012B210@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEEC0[a1]);
}

void *sub_10012B224@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEF18[a1]);
}

void *sub_10012B238@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEF60[a1]);
}

void *sub_10012B24C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEF80[a1]);
}

uint64_t sub_10012B260(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *(void *)a1 = off_1007AEA88;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)sub_100005150() + 144);
  *(_DWORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = a2;
  sub_100131920((unsigned int *)(a1 + 8), (void *)(a1 + 24));
  unsigned int v8 = operator new(0x20uLL);
  void *v8 = &off_1007AEE10;
  v8[1] = sub_10012B68C;
  v8[2] = 0LL;
  v8[3] = a1;
  __int128 v44 = v8;
  int v9 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v41 = *(void *)(a1 + 24);
  __int128 v42 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  sub_100127CD8(a1 + 40, (uint64_t)v43, v9, &v41);
  __int128 v13 = v42;
  if (v42)
  {
    uint64_t v14 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  uint64_t v16 = v44;
  if (v44 == v43)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v43;
  }

  else
  {
    if (!v44) {
      goto LABEL_14;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_14:
  uint64_t v18 = *(unsigned int *)(a1 + 8);
  __int128 v19 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v39 = *(void *)(a1 + 24);
  double v40 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __n128 v22 = sub_1003874F0((uint64_t)v38, &xmmword_100422670, &xmmword_100422688, &xmmword_1004226A0);
  sub_10036DD00(a1 + 1152, v18, &v39, v38, v22);
  unint64_t v24 = v40;
  if (v40)
  {
    __int128 v25 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  sub_100250404(a1 + 1632, v23);
  *(void *)(a1 + 1680) = 850045863LL;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_DWORD *)(a1 + 1784) = 1065353216;
  *(void *)(a1 + 1792) = *a4;
  uint64_t v27 = a4[1];
  *(void *)(a1 + 1800) = v27;
  if (v27)
  {
    double v28 = (unint64_t *)(v27 + 8);
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  *(void *)(a1 + 1808) = *a3;
  uint64_t v30 = a3[1];
  *(void *)(a1 + 1816) = v30;
  if (v30)
  {
    __int128 v31 = (unint64_t *)(v30 + 8);
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  __int128 v33 = (uint64_t *)(a1 + 1792);
  *(_DWORD *)(a1 + 1824) = 50;
  *(void *)(a1 + 1832) = 0LL;
  unsigned int v34 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 1744) = dispatch_queue_create("com.apple.nearbyd.Rose.SolutionEngine", v34);
  if (!*(void *)(a1 + 1808)) {
    __assert_rtn("RoseSolutionProvider", "RoseSolutionProvider.cpp", 50, "fDatabase != nullptr");
  }
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "[Solution Provider] Client is nullptr. Normal operation is not possible.");
  }

  __int128 v35 = (unsigned int *)sub_100005150();
  if (*v33) {
    sub_100239108(*v33, v35[144]);
  }
  sub_100148AC4((uint64_t)v38);
  sub_100127CDC(a1 + 40, (uint64_t)v38);
  if (*v33) {
    sub_100239464(*v33, (uint64_t)v38);
  }
  return a1;
}

void sub_10012B5C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

void sub_10012B68C(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038CFF8();
  }
  __int128 v4 = a2[3];
  __int128 v37 = a2[2];
  __int128 v38 = v4;
  __int128 v5 = *a2;
  __int128 v36 = a2[1];
  __int128 v35 = v5;
  uint64_t v6 = (const void *)*((void *)a2 + 9);
  uint64_t v39 = *((void *)a2 + 8);
  double v40 = 0LL;
  uint64_t v7 = *((void *)a2 + 10);
  uint64_t v42 = 0LL;
  uint64_t v41 = 0LL;
  sub_10011B560(&v40, v6, v7, (v7 - (uint64_t)v6) >> 3);
  __int128 v8 = a2[7];
  __int128 v43 = a2[6];
  __int128 v44 = v8;
  int v9 = (const void *)*((void *)a2 + 17);
  uint64_t v45 = *((void *)a2 + 16);
  int v46 = 0LL;
  uint64_t v48 = 0LL;
  __int16 v47 = 0LL;
  sub_10011B618( &v46,  v9,  *((void *)a2 + 18),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 18) - (void)v9) >> 3));
  memcpy(v49, a2 + 10, 0x181uLL);
  memcpy(v50, (char *)a2 + 552, sizeof(v50));
  sub_10011B2F0(v51, (uint64_t)a2 + 1160);
  __int16 v52 = *((_WORD *)a2 + 888);
  unsigned __int8 v10 = v49[144];
  if (v49[144] >= 0x100u && v49[145] >= 0x100u)
  {
    unint64_t v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v34 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#sp,nb_rx_status = %d", buf, 8u);
      unint64_t v12 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (v49[145] <= 0xFFu) {
        sub_100006080();
      }
      sub_10038CFB8(v49[145], (uint64_t)buf, v12);
    }
  }

  else
  {
    uint64_t v11 = sub_100005150();
  }

  v14[1] = 1174405120LL;
  __int128 v16 = v36;
  __int128 v17 = v37;
  __int128 v18 = v38;
  __int128 v13 = *(dispatch_queue_s **)(a1 + 1744);
  v14[0] = _NSConcreteStackBlock;
  void v14[2] = sub_10012F144;
  v14[3] = &unk_1007AED18;
  v14[4] = a1;
  __int128 v15 = v35;
  uint64_t v19 = v39;
  uint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  sub_10011B560(&v20, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
  __int128 v23 = v43;
  __int128 v24 = v44;
  uint64_t v25 = v45;
  __int128 __p = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  sub_10011B618(&__p, v46, (uint64_t)v47, 0x6DB6DB6DB6DB6DB7LL * ((v47 - (_BYTE *)v46) >> 3));
  memcpy(v29, v49, sizeof(v29));
  memcpy(v30, v50, sizeof(v30));
  sub_10011B2F0(v31, (uint64_t)v51);
  __int16 v32 = v52;
  dispatch_async(v13, v14);
  sub_10011B444((uint64_t)v31);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }

  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }

  sub_10011B444((uint64_t)v51);
  if (v46)
  {
    __int16 v47 = v46;
    operator delete(v46);
  }

  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }

void sub_10012BA1C(_Unwind_Exception *a1)
{
}

void *sub_10012BA9C(void *a1)
{
  return a1;
}

uint64_t sub_10012BB08(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2 == (void *)(a1 + 8))
  {
    uint64_t v3 = 4LL;
    unint64_t v2 = (void *)(a1 + 8);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_10012BBA8(uint64_t a1)
{
  *(void *)a1 = off_1007AEA88;
  unint64_t v2 = *(dispatch_object_s **)(a1 + 1744);
  if (v2) {
    dispatch_release(v2);
  }
  sub_100012390(a1 + 1808);
  sub_100012390(a1 + 1792);
  sub_100021DA8(a1 + 1752);
  std::mutex::~mutex((std::mutex *)(a1 + 1680));
  sub_1001302F0((void *)(a1 + 1552));
  sub_1001302F0((void *)(a1 + 1472));
  sub_1001302F0((void *)(a1 + 1392));
  sub_100130384(a1 + 1352);
  sub_1001303FC(a1 + 1312);
  sub_100021DA8(a1 + 1272);
  sub_1001302F0((void *)(a1 + 1224));
  sub_100130518((void *)(a1 + 1176));
  sub_100012390(a1 + 1160);
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  sub_100129800(a1 + 1040, *(void **)(a1 + 1048));
  sub_100012390(a1 + 984);
  std::mutex::~mutex((std::mutex *)(a1 + 920));
  sub_10011E308((void ***)(a1 + 912), 0LL);
  std::mutex::~mutex((std::mutex *)(a1 + 840));
  sub_10011E308((void ***)(a1 + 832), 0LL);
  sub_100129548(a1 + 80);
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3 == (void *)(a1 + 48))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(a1 + 48);
    goto LABEL_7;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_100012390(a1 + 24);
  return a1;
}

void sub_10012BCD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10012BBA8(a1);
  operator delete(v1);
}

uint64_t sub_10012BCE8(uint64_t a1, unsigned __int16 a2, int a3)
{
  if (!a3) {
    sub_10038D024();
  }
  sub_10012BD08(a1, a2, a3);
  return 1LL;
}

uint64_t sub_10012BD08(uint64_t a1, unsigned __int16 a2, int a3)
{
  unsigned __int16 v7 = a2;
  __int128 v5 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  __int128 v8 = &v7;
  *((_DWORD *)sub_100131FEC(a1 + 1752, &v7, (uint64_t)&unk_1004242F8, &v8) + 5) = a3;
  std::mutex::unlock(v5);
  return 1LL;
}

void sub_10012BD7C(_Unwind_Exception *a1)
{
}

void sub_10012BD90(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#sp,RoseSolutionProvider::notifyServiceCancel: ticketId %hu",  buf,  8u);
  }

  __int128 v5 = *(dispatch_queue_s **)(a1 + 1744);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10012BE7C;
  v6[3] = &unk_1007AEAC8;
  v6[4] = a1;
  __int16 v7 = a2;
  dispatch_async(v5, v6);
}

void sub_10012BE7C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[224];
  if (v3)
  {
    int v4 = *(unsigned __int16 *)(a1 + 40);
    double v5 = sub_100320628();
    sub_100233E04(v3, v4, v5);
  }

  sub_10012BEF0((uint64_t)v2, *(_WORD *)(a1 + 40));
  sub_10036E8A4(v2 + 144, *(_WORD *)(a1 + 40));
  sub_100127F68((uint64_t)(v2 + 5), *(unsigned __int16 *)(a1 + 40));
  if (!v2[132]) {
    v2[229] = 0LL;
  }
}

BOOL sub_10012BEF0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v7 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  int v4 = (void *)(a1 + 1752);
  double v5 = (uint64_t *)sub_100132210((void *)(a1 + 1752), &v7);
  if (v5)
  {
    sub_1000217D4(v4, v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038D04C();
  }

  std::mutex::unlock(v3);
  return v5 != 0LL;
}

void sub_10012BF94(_Unwind_Exception *a1)
{
}

void sub_10012BFA8(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#sp,RoseSolutionProvider::notifyServiceStop: ticketId %hu",  buf,  8u);
  }

  double v5 = *(dispatch_queue_s **)(a1 + 1744);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10012C094;
  v6[3] = &unk_1007AEAE8;
  v6[4] = a1;
  __int16 v7 = a2;
  dispatch_async(v5, v6);
}

void sub_10012C094(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[224];
  if (v3)
  {
    int v4 = *(unsigned __int16 *)(a1 + 40);
    double v5 = sub_100320628();
    sub_10023402C(v3, v4, v5);
  }

  sub_10036E8A4(v2 + 144, *(_WORD *)(a1 + 40));
  sub_100127F68((uint64_t)(v2 + 5), *(unsigned __int16 *)(a1 + 40));
  if (!v2[132]) {
    v2[229] = 0LL;
  }
}

void sub_10012C0FC()
{
  unsigned __int8 v0 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "#sp,RoseSolutionProvider::notifyFileSystemAccessAllowed called",  v1,  2u);
  }

void sub_10012C160(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D0B0();
  }
  double v4 = *(double *)a2;
  __int128 v5 = *(_OWORD *)(a2 + 129);
  __int128 v29 = *(_OWORD *)(a2 + 113);
  __int128 v30 = v5;
  v31[0] = *(_OWORD *)(a2 + 145);
  *(_OWORD *)((char *)v31 + 15) = *(_OWORD *)(a2 + 160);
  __int128 v6 = *(_OWORD *)(a2 + 65);
  __int128 v25 = *(_OWORD *)(a2 + 49);
  __int128 v26 = v6;
  __int128 v7 = *(_OWORD *)(a2 + 97);
  __int128 v27 = *(_OWORD *)(a2 + 81);
  __int128 v28 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 33);
  __int128 v23 = *(_OWORD *)(a2 + 17);
  __int128 v24 = v8;
  uint64_t v9 = sub_100250408(a1 + 1632, v4);
  unsigned __int8 v10 = *(dispatch_queue_s **)(a1 + 1744);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10012C2D8;
  block[3] = &unk_1007AEB08;
  block[4] = a1;
  *(double *)&block[5] = v4;
  block[6] = v9;
  char v13 = v11;
  __int128 v20 = v29;
  __int128 v21 = v30;
  *(_OWORD *)uint64_t v22 = v31[0];
  *(_OWORD *)&v22[15] = *(_OWORD *)((char *)v31 + 15);
  __int128 v16 = v25;
  __int128 v17 = v26;
  __int128 v18 = v27;
  __int128 v19 = v28;
  __int128 v14 = v23;
  __int128 v15 = v24;
  dispatch_async(v10, block);
}

uint64_t sub_10012C2D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = (double *)(a1 + 40);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 16) + 24LL))(*(void *)(v1 + 16), a1 + 40);
  return sub_10012C314(v1, v2);
}

uint64_t sub_10012C314(uint64_t a1, double *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D1C0();
  }
  uint64_t v3 = sub_100250408(a1 + 1632, *a2);
  if (v5)
  {
    v4.n128_u64[0] = v3;
    sub_100386698(a2, (uint64_t)v45, v4);
    uint64_t v6 = *(void *)(a1 + 1792);
    if (v6) {
      sub_100237CBC(v6, v45);
    }
    if (sub_10036DD04(a1 + 1152, v45))
    {
      sub_10036EEF4(a1 + 1152, &v43);
      kdebug_trace(728956956LL, 0LL, 0LL, 0LL, 0LL);
      __int128 v7 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_10038D140(&v43, v7);
      }
      kdebug_trace(728956960LL, 0LL, 0LL, 0LL, 0x8E38E38E38E38E39LL * ((v44 - v43) >> 4));
      uint64_t v8 = v43;
      uint64_t v37 = v44;
      if (v43 == v44)
      {
        char v9 = 0;
LABEL_42:
        kdebug_trace(728956964LL, 0LL, 0LL, 0LL, 0LL);
      }

      else
      {
        char v9 = 0;
        int v10 = 0;
        while (1)
        {
          int v11 = v10 + 1;
          unint64_t v12 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v11;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#sp,computeAndEmitSensorFusionSolution(imu_data): processing solution %d",  buf,  8u);
          }

          int v38 = v11;
          uint64_t v13 = *(void *)(v8 + 8);
          sub_100131CE8((uint64_t *)&v40, v8 + 16);
          uint64_t v14 = v42;
          __int128 v15 = (os_log_s *)qword_1008000A0;
          if (!v42) {
            break;
          }
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v38;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(void *)&buf[10] = v14;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#sp,computeAndEmitSensorFusionSolution(imu_data): solution %d: processing %zu tickets",  buf,  0x12u);
          }

          __int128 v16 = v40;
          if (v40 != &v41)
          {
            do
            {
              int v17 = *((unsigned __int16 *)v16 + 13);
              __int128 v18 = (os_log_s *)qword_1008000A0;
              if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v17;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,computeAndEmitSensorFusionSolution(imu_data): emitting solution for ticketId %hu",  buf,  8u);
              }

              uint64_t v19 = sub_10025061C(a1 + 1632, *(double *)v8);
              if (v20)
              {
                sub_10013183C((uint64_t)buf, v17, v13, (uint64_t *)v8, (__int128 *)a2, 1, *(double *)&v19);
                (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), buf);
                if (v66 && __p)
                {
                  __int128 v65 = __p;
                  operator delete(__p);
                }

                if (v63) {
                  sub_100034A98((uint64_t)v62, v62[1]);
                }
                sub_100124BFC((uint64_t)&v61);
                char v9 = 1;
              }

              else
              {
                __int128 v21 = (os_log_s *)qword_1008000A0;
                if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
                {
                  double v25 = *(double *)v8;
                  uint64_t v26 = *(void *)(v8 + 8);
                  *(_DWORD *)__int128 buf = 134218496;
                  *(double *)&uint8_t buf[4] = v25;
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v17;
                  __int16 v59 = 2048;
                  uint64_t v60 = v26;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "#sp,computeAndEmitSensorFusionSolution(imu_data): could not convert mach cont time %.9f to mach abs time, NOT emitting solution for ticketId %hu, Peer: 0x%llx",  buf,  0x1Cu);
                }
              }

              uint64_t v22 = v16[1];
              if (v22)
              {
                do
                {
                  __int128 v23 = (void **)v22;
                  uint64_t v22 = (void *)*v22;
                }

                while (v22);
              }

              else
              {
                do
                {
                  __int128 v23 = (void **)v16[2];
                  BOOL v24 = *v23 == v16;
                  __int128 v16 = v23;
                }

                while (!v24);
              }

              __int128 v16 = v23;
            }

            while (v23 != &v41);
          }

          uint64_t v27 = *(void *)(a1 + 1792);
          if (v27) {
            sub_100238068(v27, v45, (uint64_t *)v8);
          }
          sub_100034A98((uint64_t)&v40, v41);
          v8 += 144LL;
          int v10 = v38;
          if (v8 == v37) {
            goto LABEL_42;
          }
        }

        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038D0DC(v13, v15, v30, v31, v32, v33, v34, v35);
        }
        sub_100034A98((uint64_t)&v40, v41);
      }

      *(void *)__int128 buf = &v43;
      sub_100131C6C((void ***)buf);
    }

    else
    {
      char v9 = 0;
    }

    if (v56)
    {
      __int128 v57 = v56;
      operator delete(v56);
    }

    if (v54)
    {
      __int16 v55 = v54;
      operator delete(v54);
    }

    if (v52)
    {
      char v53 = v52;
      operator delete(v52);
    }

    if (v50)
    {
      double v51 = v50;
      operator delete(v50);
    }

    if (v48)
    {
      double v49 = v48;
      operator delete(v48);
    }

    if (v46)
    {
      __int16 v47 = v46;
      operator delete(v46);
    }
  }

  else
  {
    __int128 v28 = (os_log_s *)qword_1008000A0;
    char v9 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      double v29 = *a2;
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#sp,computeAndEmitSensorFusionSolution(imu_data): failed to convert mach abs time %.9f to mach continuous; ignoring",
        buf,
        0xCu);
      char v9 = 0;
    }
  }

  return v9 & 1;
}

void sub_10012C8AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void **a47)
{
  a47 = (void **)&a24;
  sub_100131C6C(&a47);
  sub_100130270(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_10012C918(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D408();
  }
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038D3D0();
      }
      return kdebug_trace(728956948LL, 0LL, 0LL, 0LL, 0LL);
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_10038D1EC();
      }
      if (!*(_BYTE *)(a2 + 560))
      {
        char v5 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v6) = 0;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "#sp,!range_result.has_value()",  (uint8_t *)&v6,  2u);
          char v5 = (os_log_s *)qword_1008000A0;
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          int v6 = 136315650;
          __int128 v7 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/RangingServiceLib/SolutionProvider/RoseSolutionProvider.cpp";
          __int16 v8 = 1024;
          int v9 = 185;
          __int16 v10 = 2080;
          int v11 = "ingestMeasurement";
LABEL_105:
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "#sp,%s:%d: assertion failure in %s",  (uint8_t *)&v6,  0x1Cu);
        }

void sub_10012D4D4(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D58C();
  }
  if (*((_DWORD *)a2 + 10)) {
    sub_10038D564();
  }
  uint64_t v4 = *((unsigned __int16 *)a2 + 28);
  unsigned __int16 v5 = sub_10012E348(a1, *((_WORD *)a2 + 28));
  char v6 = v5;
  if (v5 > 0xFFu)
  {
    (*(void (**)(__int128 *__return_ptr, void, uint64_t))(**(void **)(a1 + 1808) + 16LL))( &v51,  *(void *)(a1 + 1808),  v4);
    if (v66) {
      int v7 = HIBYTE(WORD6(v59));
    }
    else {
      int v7 = 0;
    }
    if (v66) {
      unsigned __int8 v8 = BYTE12(v59);
    }
    else {
      unsigned __int8 v8 = 0;
    }
    (*(void (**)(__int128 *__return_ptr, void, uint64_t))(**(void **)(a1 + 1808) + 16LL))( &v51,  *(void *)(a1 + 1808),  v4);
    if (v66) {
      int v9 = HIBYTE(WORD1(v65[36]));
    }
    else {
      int v9 = 0;
    }
    if (v66) {
      unsigned __int8 v10 = BYTE2(v65[36]);
    }
    else {
      unsigned __int8 v10 = 0;
    }
    if (v7)
    {
      if (!v9)
      {
        int v11 = sub_100005150();
      }

      __int128 v12 = a2[3];
      __int128 v53 = a2[2];
      __int128 v54 = v12;
      __int128 v13 = a2[1];
      __int128 v51 = *a2;
      __int128 v52 = v13;
      uint64_t v14 = (const void *)*((void *)a2 + 9);
      uint64_t v55 = *((void *)a2 + 8);
      uint64_t v56 = 0LL;
      uint64_t v15 = *((void *)a2 + 10);
      uint64_t v58 = 0LL;
      __int128 v57 = 0LL;
      sub_10011B560(&v56, v14, v15, (v15 - (uint64_t)v14) >> 3);
      __int128 v16 = a2[7];
      __int128 v59 = a2[6];
      __int128 v60 = v16;
      int v17 = (const void *)*((void *)a2 + 17);
      double v61 = *((double *)a2 + 16);
      __int128 v62 = 0LL;
      uint64_t v64 = 0LL;
      char v63 = 0LL;
      sub_10011B618( &v62,  v17,  *((void *)a2 + 18),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 18) - (void)v17) >> 3));
      memcpy(v65, a2 + 10, 0x181uLL);
      double v18 = v61;
      double v61 = v18 - sub_10014904C();
      double v19 = v65[18];
      v65[18] = v19 - sub_100148F0C();
      LOWORD(v51) = ((_WORD)v7 << 8) | v8;
      WORD1(v51) = ((_WORD)v9 << 8) | v10;
      BYTE4(v51) = v6;
      *((void *)&v51 + 1) = sub_100250408(a1 + 1632, *(double *)&v54);
      LOBYTE(v52) = v20;
      if (!v20)
      {
        double v21 = sub_100320628();
        *((double *)&v51 + 1) = v21;
        LOBYTE(v52) = 1;
        uint64_t v22 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 134217984;
          *(double *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "#sp,RoseSolutionProvider::ingestRangeResult: did not successfully convert to mach continuous.  Using current time %lf",  buf,  0xCu);
        }
      }

      if ((_WORD)v59)
      {
        unint64_t v23 = *(void *)(a1 + 1832) + 1LL;
        *(void *)(a1 + 1832) = v23;
        if (!(v23 % *(unsigned int *)(a1 + 1824)))
        {
          BOOL v24 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            double v25 = (unsigned __int16 *)(a2 + 6);
            int v26 = *((unsigned __int16 *)a2 + 28);
            sub_10032B2C8(*v25, buf);
            uint64_t v27 = v46 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__int16 v47 = 67109378;
            int v48 = v26;
            __int16 v49 = 2080;
            double v50 = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#sp,[UNSUCCESSFUL RANGING CYCLE] Ticket: %d, ErrorCode: %s",  v47,  0x12u);
            if (v46 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }

      block[1] = 1174405120LL;
      __int128 v31 = v52;
      __int128 v32 = v53;
      __int128 v33 = v54;
      __int128 v28 = *(dispatch_queue_s **)(a1 + 1744);
      block[0] = _NSConcreteStackBlock;
      block[2] = sub_10012E37C;
      block[3] = &unk_1007AEB28;
      block[4] = a1;
      __int128 v30 = v51;
      uint64_t v34 = v55;
      uint64_t v35 = 0LL;
      __int128 v36 = 0LL;
      uint64_t v37 = 0LL;
      sub_10011B560(&v35, v56, (uint64_t)v57, (v57 - (_BYTE *)v56) >> 3);
      __int128 v38 = v59;
      __int128 v39 = v60;
      double v40 = v61;
      __int128 __p = 0LL;
      uint64_t v42 = 0LL;
      uint64_t v43 = 0LL;
      sub_10011B618(&__p, v62, (uint64_t)v63, 0x6DB6DB6DB6DB6DB7LL * ((v63 - (_BYTE *)v62) >> 3));
      memcpy(v44, v65, sizeof(v44));
      dispatch_async(v28, block);
      if (__p)
      {
        uint64_t v42 = __p;
        operator delete(__p);
      }

      if (v35)
      {
        __int128 v36 = v35;
        operator delete(v35);
      }

      if (v62)
      {
        char v63 = v62;
        operator delete(v62);
      }

      if (v56)
      {
        __int128 v57 = v56;
        operator delete(v56);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_10038D498();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038D434();
  }

void sub_10012D9B0(_Unwind_Exception *a1)
{
}

void sub_10012DA08(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D5B8();
  }
  if (*(void *)(a1 + 1792))
  {
    __int128 v12 = *a2;
    uint64_t v4 = (__int16 *)*((void *)a2 + 3);
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    sub_1001306E8( &v14,  v4,  *((__int16 **)a2 + 4),  0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)a2 + 4) - (void)v4) >> 3));
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    sub_100130D1C( &v17,  *((void *)a2 + 6),  *((void *)a2 + 7),  (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
    unsigned __int16 v5 = *(dispatch_queue_s **)(a1 + 1744);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120LL;
    block[2] = sub_10012E524;
    block[3] = &unk_1007AEB58;
    block[4] = a1;
    __int128 v8 = v12;
    uint64_t v9 = v13;
    memset(v10, 0, sizeof(v10));
    sub_1001306E8(v10, v14, v15, 0x86BCA1AF286BCA1BLL * (((char *)v15 - (char *)v14) >> 3));
    memset(v11, 0, sizeof(v11));
    sub_100130D1C(v11, v17, v18, (v18 - v17) >> 5);
    dispatch_async(v5, block);
    char v6 = (void **)v11;
    sub_100130C0C(&v6);
    char v6 = (void **)v10;
    sub_100130C98(&v6);
    char v6 = (void **)&v17;
    sub_100130C0C(&v6);
    char v6 = (void **)&v14;
    sub_100130C98(&v6);
  }

void sub_10012DBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_100130C98((void ***)va);
  sub_10012E628((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10012DC14(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D5E4();
  }
  __int128 v4 = a2[5];
  __int128 v36 = a2[4];
  __int128 v37 = v4;
  __int128 v5 = a2[7];
  __int128 v38 = a2[6];
  __int128 v39 = v5;
  __int128 v6 = a2[1];
  __int128 v32 = *a2;
  __int128 v33 = v6;
  __int128 v7 = a2[3];
  __int128 v34 = a2[2];
  __int128 v35 = v7;
  if (*(void *)(a1 + 1792))
  {
    block[1] = 0x40000000LL;
    __int128 v8 = a2[5];
    __int128 v28 = a2[4];
    __int128 v29 = v8;
    __int128 v9 = a2[7];
    __int128 v30 = a2[6];
    __int128 v31 = v9;
    __int128 v10 = a2[1];
    __int128 v24 = *a2;
    __int128 v25 = v10;
    __int128 v11 = a2[3];
    __int128 v26 = a2[2];
    uint64_t v12 = *(dispatch_queue_s **)(a1 + 1744);
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_10012E670;
    block[3] = &unk_1007AEB88;
    block[4] = a1;
    __int128 v27 = v11;
    dispatch_async(v12, block);
  }

  v14[1] = 0x40000000LL;
  __int128 v19 = v36;
  __int128 v20 = v37;
  __int128 v21 = v38;
  __int128 v22 = v39;
  __int128 v15 = v32;
  __int128 v16 = v33;
  __int128 v17 = v34;
  uint64_t v13 = *(dispatch_queue_s **)(a1 + 1744);
  v14[0] = _NSConcreteStackBlock;
  void v14[2] = sub_10012E6C4;
  v14[3] = &unk_1007AEBA8;
  v14[4] = a1;
  __int128 v18 = v35;
  dispatch_async(v13, v14);
}

void sub_10012DD70(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D610();
  }
  __int128 v4 = a2[3];
  __int128 v24 = a2[2];
  __int128 v25 = v4;
  __int128 v26 = a2[4];
  __int128 v5 = a2[1];
  __int128 v22 = *a2;
  __int128 v23 = v5;
  if (*(void *)(a1 + 1792))
  {
    block[1] = 0x40000000LL;
    __int128 v6 = *a2;
    __int128 v18 = a2[1];
    __int128 v7 = a2[3];
    __int128 v19 = a2[2];
    __int128 v20 = v7;
    __int128 v21 = a2[4];
    __int128 v8 = *(dispatch_queue_s **)(a1 + 1744);
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_10012E6D8;
    block[3] = &unk_1007AEBC8;
    block[4] = a1;
    __int128 v17 = v6;
    dispatch_async(v8, block);
  }

  v10[1] = 0x40000000LL;
  __int128 v12 = v23;
  __int128 v13 = v24;
  __int128 v14 = v25;
  __int128 v15 = v26;
  __int128 v9 = *(dispatch_queue_s **)(a1 + 1744);
  v10[0] = _NSConcreteStackBlock;
  void v10[2] = sub_10012E6EC;
  void v10[3] = &unk_1007AEBE8;
  v10[4] = a1;
  __int128 v11 = v22;
  dispatch_async(v9, v10);
}

void sub_10012DEA0(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D63C();
  }
  __int128 v4 = a2[5];
  __int128 v33 = a2[4];
  __int128 v34 = v4;
  uint64_t v35 = *((void *)a2 + 12);
  __int128 v5 = a2[1];
  __int128 v29 = *a2;
  __int128 v30 = v5;
  __int128 v6 = a2[3];
  __int128 v31 = a2[2];
  __int128 v32 = v6;
  if (*(void *)(a1 + 1792))
  {
    block[1] = 0x40000000LL;
    __int128 v7 = a2[2];
    __int128 v25 = a2[3];
    __int128 v8 = a2[5];
    __int128 v26 = a2[4];
    __int128 v27 = v8;
    __int128 v9 = a2[1];
    __int128 v22 = *a2;
    __int128 v23 = v9;
    __int128 v10 = *(dispatch_queue_s **)(a1 + 1744);
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_10012E700;
    block[3] = &unk_1007AEC08;
    uint64_t v11 = *((void *)a2 + 12);
    block[4] = a1;
    uint64_t v28 = v11;
    __int128 v24 = v7;
    dispatch_async(v10, block);
  }

  v13[1] = 0x40000000LL;
  __int128 v17 = v32;
  __int128 v18 = v33;
  __int128 v19 = v34;
  __int128 v14 = v29;
  __int128 v15 = v30;
  __int128 v12 = *(dispatch_queue_s **)(a1 + 1744);
  v13[0] = _NSConcreteStackBlock;
  v13[2] = sub_10012E714;
  v13[3] = &unk_1007AEC28;
  v13[4] = a1;
  uint64_t v20 = v35;
  __int128 v16 = v31;
  dispatch_async(v12, v13);
}

void sub_10012DFF0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D668();
  }
  __int128 v4 = *(_OWORD *)(a2 + 32);
  __int128 v28 = *(_OWORD *)(a2 + 16);
  double v26 = *(double *)a2;
  __int16 v27 = *(_WORD *)(a2 + 8);
  __int128 v29 = v4;
  __int128 v30 = *(_OWORD *)(a2 + 48);
  int v31 = *(_DWORD *)(a2 + 64);
  __int128 v33 = 0LL;
  uint64_t v34 = 0LL;
  __int128 v5 = *(const void **)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  __int128 v32 = 0LL;
  sub_100130F40(&v32, v5, v6, (v6 - (uint64_t)v5) >> 4);
  __int128 v35 = *(_OWORD *)(a2 + 96);
  block[1] = 1174405120LL;
  __int128 v18 = v28;
  __int128 v20 = v30;
  *(void *)&__int128 v35 = sub_100250408(a1 + 1632, v26);
  BYTE8(v35) = v7;
  __int128 v8 = *(dispatch_queue_s **)(a1 + 1744);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10012EC90;
  block[3] = &unk_1007AECC8;
  block[4] = a1;
  *(double *)&void block[5] = v26;
  __int16 v17 = v27;
  int v21 = v31;
  __int128 v19 = v29;
  __int128 v23 = 0LL;
  __int128 v22 = 0LL;
  uint64_t v24 = 0LL;
  sub_100130F40(&v22, v32, (uint64_t)v33, (v33 - (_BYTE *)v32) >> 4);
  __int128 v25 = v35;
  dispatch_async(v8, block);
  sub_100130FB8((uint64_t)v9, (uint64_t *)&v26, 1);
  (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), v9);
  if (v15 && __p)
  {
    __int128 v14 = __p;
    operator delete(__p);
  }

  if (v12) {
    sub_100034A98((uint64_t)v11, v11[1]);
  }
  sub_100124BFC((uint64_t)&v10);
  if (v22)
  {
    __int128 v23 = v22;
    operator delete(v22);
  }

  if (v32)
  {
    __int128 v33 = v32;
    operator delete(v32);
  }

void sub_10012E208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (void *)STACK[0x620];
  if (STACK[0x620])
  {
    STACK[0x628] = (unint64_t)v11;
    operator delete(v11);
  }

  char v12 = *(void **)(v9 - 96);
  if (v12)
  {
    *(void *)(v9 - 88) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10012E258(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D694();
  }
  *(void *)(a2 + 32) = sub_100250408(a1 + 1632, *(double *)(a2 + 24));
  *(_BYTE *)(a2 + 40) = v4;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), a2);
}

uint64_t sub_10012E2D0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D6C0();
  }
  *(void *)(a2 + 8) = sub_100250408(a1 + 1632, *(double *)a2);
  *(_BYTE *)(a2 + 16) = v4;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16), a2);
}

uint64_t sub_10012E348(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v2 = sub_10012F660(a1, a2);
  if ((v2 & 0xFF00000000LL) != 0)
  {
    int v3 = sub_10013F8B4(v2);
    int v4 = 1;
  }

  else
  {
    int v3 = 0;
    int v4 = 0;
  }

  return v3 | (v4 << 8);
}

void sub_10012E37C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#sp,RoseSolutionProvider::ingestRangeResult: addRangeResult to MeasEngine",  v4,  2u);
  }

  sub_100127D1C(v2 + 40, a1 + 40);
}

void *sub_10012E3FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  __int128 v4 = *(_OWORD *)(a2 + 56);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  sub_10011B560( (void *)(a1 + 112),  *(const void **)(a2 + 112),  *(void *)(a2 + 120),  (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  sub_10011B618( (void *)(a1 + 176),  *(const void **)(a2 + 176),  *(void *)(a2 + 184),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3));
  return memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x181uLL);
}

void sub_10012E4C4(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 120) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_10012E4E0(void *a1)
{
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }

  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }

uint64_t sub_10012E524(uint64_t a1)
{
  return sub_1002358A0(*(void *)(*(void *)(a1 + 32) + 1792LL), (__int128 *)(a1 + 40));
}

void *sub_10012E538(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)a1;
  __int128 v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_1001306E8( (void *)(a1 + 64),  *(__int16 **)(a2 + 64),  *(__int16 **)(a2 + 72),  0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  v3[11] = 0LL;
  v3[12] = 0LL;
  v3 += 11;
  v3[2] = 0LL;
  return sub_100130D1C( v3,  *(void *)(a2 + 88),  *(void *)(a2 + 96),  (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 5);
}

void sub_10012E5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10012E5E4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 88);
  sub_100130C0C(&v2);
  uint64_t v2 = (void **)(a1 + 64);
  sub_100130C98(&v2);
}

uint64_t sub_10012E628(uint64_t a1)
{
  int v3 = (void **)(a1 + 48);
  sub_100130C0C(&v3);
  int v3 = (void **)(a1 + 24);
  sub_100130C98(&v3);
  return a1;
}

void sub_10012E670(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D6EC();
  }
}

void *sub_10012E6C4(uint64_t a1)
{
  return sub_100127F38(*(void *)(a1 + 32) + 40LL, a1 + 40);
}

uint64_t sub_10012E6D8(uint64_t a1)
{
  return sub_100236688(*(void *)(*(void *)(a1 + 32) + 1792LL), a1 + 40);
}

void *sub_10012E6EC(uint64_t a1)
{
  return sub_100127F40(*(void *)(a1 + 32) + 40LL, a1 + 40);
}

uint64_t sub_10012E700(uint64_t a1)
{
  return sub_1002368D0(*(void *)(*(void *)(a1 + 32) + 1792LL), a1 + 40);
}

void sub_10012E714(uint64_t a1)
{
}

void sub_10012E728(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10013D7CC(*(_DWORD *)(a2 + 24), __p);
    __int128 v5 = v61 >= 0 ? __p : (void **)__p[0];
    int v6 = *(unsigned __int16 *)(a2 + 58);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#sp,=== P2P timestamp event, source %s, cycle_idx %d ===",  buf,  0x12u);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
  }

  int v27 = *(_DWORD *)(a2 + 2);
  __int16 v28 = *(_WORD *)(a2 + 6);
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(_BYTE *)(a2 + 16);
  v59[0] = *(void *)(a2 + 17);
  double v9 = *(double *)(a2 + 32);
  *(void *)((char *)v59 + 7) = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  __int16 v11 = *(_WORD *)(a2 + 48);
  uint64_t v12 = *(unsigned __int16 *)(a2 + 50);
  __int128 v13 = *(_OWORD *)(a2 + 68);
  __int128 v14 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)__int128 buf = *(_OWORD *)(a2 + 52);
  *(_OWORD *)&buf[16] = v13;
  __int128 v15 = *(_OWORD *)(a2 + 100);
  __int128 v16 = *(_OWORD *)(a2 + 132);
  __int128 v17 = *(_OWORD *)(a2 + 148);
  __int128 v52 = *(_OWORD *)(a2 + 116);
  __int128 v53 = v16;
  __int128 v50 = v14;
  __int128 v51 = v15;
  __int128 v18 = *(_OWORD *)(a2 + 164);
  __int128 v19 = *(_OWORD *)(a2 + 180);
  __int128 v20 = *(_OWORD *)(a2 + 196);
  int v58 = *(_DWORD *)(a2 + 212);
  __int128 v56 = v19;
  __int128 v57 = v20;
  __int128 v54 = v17;
  __int128 v55 = v18;
  (*(void (**)(void **__return_ptr, void, uint64_t))(**(void **)(a1 + 1808) + 16LL))( __p,  *(void *)(a1 + 1808),  v12);
  int v21 = v63;
  unsigned int v22 = v62;
  if ((_BYTE)v10)
  {
    uint64_t v7 = sub_100250408(a1 + 1632, v9);
    char v8 = v23;
  }

  block[1] = 0x40000000LL;
  __int128 v45 = v55;
  __int128 v46 = v56;
  __int128 v47 = v57;
  __int128 v41 = v51;
  __int128 v42 = v52;
  __int128 v43 = v53;
  __int128 v44 = v54;
  __int128 v38 = *(_OWORD *)buf;
  __int128 v39 = *(_OWORD *)&buf[16];
  unsigned int v24 = v22 >> 8;
  if (v21)
  {
    unsigned __int8 v25 = v22;
  }

  else
  {
    LOBYTE(v24) = 0;
    unsigned __int8 v25 = 0;
  }

  double v26 = *(dispatch_queue_s **)(a1 + 1744);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10012E9B8;
  block[3] = &unk_1007AEC48;
  block[4] = a1;
  __int16 v30 = v25 | (v24 << 8);
  int v31 = v27;
  __int16 v32 = v28;
  uint64_t v33 = v7;
  char v34 = v8;
  *(void *)__int128 v35 = v59[0];
  *(void *)&v35[7] = *(void *)((char *)v59 + 7);
  *(double *)&v35[15] = v9;
  *(void *)&v35[23] = v10;
  __int16 v36 = v11;
  __int16 v37 = v12;
  int v48 = v58;
  __int128 v40 = v50;
  dispatch_async(v26, block);
}

void sub_10012E9B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 1792);
  if (v3)
  {
    __int128 v4 = (unsigned __int8 *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 64);
    if (v5 == 1)
    {
      sub_10023757C(v3, v4);
    }

    else if (!v5)
    {
      sub_1002370E0(v3, v4);
    }
  }

  sub_100138F0C((unsigned __int8 *)(a1 + 40));
  if (*(_BYTE *)(a1 + 41))
  {
    sub_100127F60(v2 + 40, a1 + 40);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038D718();
  }

void sub_10012EA60(uint64_t a1, const void *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D77C();
  }
  memcpy(__dst, a2, sizeof(__dst));
  if (*(void *)(a1 + 1792))
  {
    __int128 v4 = *(dispatch_queue_s **)(a1 + 1744);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_10012EBA0;
    block[3] = &unk_1007AEC68;
    block[4] = a1;
    memcpy(v9, a2, sizeof(v9));
    dispatch_async(v4, block);
  }

  int v5 = *(dispatch_queue_s **)(a1 + 1744);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10012EBB4;
  v6[3] = &unk_1007AEC88;
  v6[4] = a1;
  memcpy(v7, __dst, sizeof(v7));
  dispatch_async(v5, v6);
}

uint64_t sub_10012EBA0(uint64_t a1)
{
  return sub_100236DF0(*(void *)(*(void *)(a1 + 32) + 1792LL), a1 + 40);
}

uint64_t *sub_10012EBB4(uint64_t a1)
{
  return sub_100127F50(*(void *)(a1 + 32) + 40LL, a1 + 40);
}

void sub_10012EBC8(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038D7A8();
  }
  __int128 v4 = *a2;
  __int128 v9 = a2[1];
  __int128 v5 = a2[3];
  __int128 v10 = a2[2];
  __int128 v11 = v5;
  uint64_t v12 = *((void *)a2 + 8);
  __int128 v8 = v4;
  int v6 = *(dispatch_queue_s **)(a1 + 1744);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  v7[2] = sub_10012EC7C;
  uint64_t v7[3] = &unk_1007AECA8;
  v7[4] = a1;
  dispatch_async(v6, v7);
}

void sub_10012EC7C(uint64_t a1)
{
}

void sub_10012EC90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  sub_10013CFD8(a1 + 40);
  uint64_t v4 = *(void *)(v2 + 1792);
  if (v4) {
    sub_1002377A4(v4, v3);
  }
  __int128 v5 = *(void ***)(a1 + 72);
  int v6 = *(unsigned __int16 *)(a1 + 56);
  uint64_t v7 = (os_log_s *)qword_1008000A0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      sub_10032B2C8(v6, __p);
      if (v12 >= 0) {
        __int128 v9 = __p;
      }
      else {
        __int128 v9 = (void **)__p[0];
      }
      int v10 = *(unsigned __int8 *)(a1 + 91);
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v14 = v9;
      __int16 v15 = 1024;
      int v16 = v10;
      __int16 v17 = 2048;
      __int128 v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider] P2S Responder: UNSUCCESSFUL CYCLE (%s). Poll Rx Status: (0x%x), Initiator address: 0x%llx",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (v8)
  {
    *(_DWORD *)__int128 buf = 134217984;
    __int128 v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider] P2S Responder: successful cycle. Initiator address: 0x%llx",  buf,  0xCu);
  }

__n128 sub_10012EDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 56);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 88);
  LODWORD(v3) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 112) = 0LL;
  uint64_t v7 = a1 + 112;
  *(_DWORD *)(a1 + 104) = v3;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  sub_100130F40( (void *)(a1 + 112),  *(const void **)(a2 + 112),  *(void *)(a2 + 120),  (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 4);
  __n128 result = *(__n128 *)(a2 + 136);
  *(__n128 *)(v7 + 24) = result;
  return result;
}

void sub_10012EE70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

uint64_t sub_10012EE88(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 872))
  {
    uint64_t v2 = *(void **)(a1 + 832);
    if (v2)
    {
      *(void *)(a1 + 840) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 752)) {
    sub_100034A98(a1 + 624, *(void **)(a1 + 632));
  }
  sub_100124BFC(a1 + 48);
  return a1;
}

void sub_10012EEDC(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v5 = *a2;
  __int128 v6 = v2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 1744);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10012EF3C;
  block[3] = &unk_1007AECF8;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_10012EF3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 1792);
  if (v3)
  {
    double v4 = sub_100320628();
    sub_100233AA4(v3, a1 + 40, v4);
  }

  if (*(_DWORD *)(a1 + 40) == 1)
  {
    if (!*(_BYTE *)(a1 + 52)) {
      sub_10038D7D4();
    }
    uint64_t v5 = *(unsigned int *)(a1 + 44);
    int v6 = *(_DWORD *)(a1 + 48);
    uint64_t v7 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v5;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#sp,ingestContextEvent,accessory %d,activity %d",  buf,  0xEu);
    }

    sub_100320B14((_DWORD *)*(unsigned int *)(v2 + 8), buf);
    if ((_DWORD)v5) {
      BOOL v8 = v6 == 1;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      __int128 v9 = *(_DWORD **)buf;
      int v10 = *(_DWORD **)buf;
      if (*(_DWORD **)buf != v17)
      {
        while (*v10 != (_DWORD)v5)
        {
          if (++v10 == v17)
          {
            int v10 = v17;
            break;
          }
        }
      }

      if (v10 == v17) {
        goto LABEL_24;
      }
    }

    __int128 v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100320A4C(v5, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 v14 = 136315138;
      __int16 v15 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#sp,ingestContextEvent: load lut and nn files for accessory %s",  v14,  0xCu);
    }

    *(_DWORD *)(v2 + 12) = v5;
    __int128 v9 = *(_DWORD **)buf;
LABEL_24:
    if (v9)
    {
      __int16 v17 = v9;
      operator delete(v9);
    }
  }

void sub_10012F120( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012F144(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (unsigned __int8 *)(a1 + 40);
  sub_10013CECC(a1 + 40);
  kdebug_trace(728957000LL, 0LL, 0LL, 0LL, 0LL);
  if (*(void *)(v2 + 1792))
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_10038D8CC();
    }
    char v4 = *(_BYTE *)(a1 + 1808);
    uint64_t v5 = *(void *)(v2 + 1792);
    if (v4)
    {
      int v27 = *(_DWORD *)(a1 + 1800);
      __int128 v6 = *(_OWORD *)(a1 + 1784);
      v26[0] = *(_OWORD *)(a1 + 1768);
      v26[1] = v6;
      char v4 = 1;
      uint64_t v7 = (char *)v26;
    }

    else
    {
      char v25 = 0;
      uint64_t v7 = &v25;
    }

    v7[36] = v4;
    sub_100234C88(v5, v3, (uint64_t)v7, *(_BYTE *)(a1 + 1816), *(_BYTE *)(a1 + 1817));
  }

  unint64_t v8 = sub_10012F660(v2, *(_WORD *)(a1 + 96));
  if ((v8 & 0xFF00000000LL) != 0)
  {
    if ((v8 - 3) >= 4)
    {
      if ((v8 - 1) >= 2)
      {
        if (!(_DWORD)v8 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038D864();
        }
      }

      else
      {
        __int128 v9 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 104);
          if (*(_BYTE *)(a1 + 1817)) {
            __int128 v11 = "OK";
          }
          else {
            __int128 v11 = "not OK";
          }
          *(_DWORD *)__int128 buf = 136315394;
          __int128 v45 = v11;
          __int16 v46 = 2048;
          uint64_t v47 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#sp,Raw solution %s to use by client, emitting! Peer: 0x%llx",  buf,  0x16u);
        }

        sub_10012FF84(v2, (uint64_t)v3, (uint64_t)v3);
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 1;
      BYTE4(v45) = 0;
      char v49 = 0;
      LOBYTE(v50[0]) = 0;
      char v51 = 0;
      if (*(_BYTE *)(a1 + 1816))
      {
        sub_10012F6F0(v2, (uint64_t)v3, v8, (uint64_t)v3, (uint64_t)v32);
        *(_DWORD *)__int128 buf = *(_DWORD *)v32;
        sub_1001310D8((uint64_t)&v45 + 4, (uint64_t)&v33);
        v50[0] = v40;
        v50[1] = v41;
        double v50[2] = v42;
        char v51 = v43;
        if (v39) {
          sub_100034A98((uint64_t)&v37, *(void **)&v38[6]);
        }
      }

      else
      {
        char v12 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(unsigned __int16 *)(a1 + 96);
          uint64_t v14 = *(void *)(a1 + 88);
          int v15 = *(unsigned __int16 *)(a1 + 152);
          uint64_t v16 = *(void *)(a1 + 104);
          *(_DWORD *)__int16 v32 = 67109888;
          *(_DWORD *)&v32[4] = v13;
          __int16 v33 = 2048;
          uint64_t v34 = v14;
          __int16 v35 = 1024;
          int v36 = v15;
          __int16 v37 = 2048;
          *(void *)__int128 v38 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#sp,Got one rose measurement not ok for sensor fusion, ticket_id %d, measurement time stamp %f (mach_absolut e_time), cycle index %d, Peer: 0x%llx",  v32,  0x22u);
        }
      }

      int v17 = *(_DWORD *)buf;
      if (*(_DWORD *)buf)
      {
        int v18 = *(unsigned __int8 *)(a1 + 1817);
        __int128 v19 = (os_log_s *)qword_1008000A0;
        BOOL v20 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          if (v20)
          {
            sub_10012FE04(v17, v32);
            if (v36 >= 0) {
              int v21 = v32;
            }
            else {
              int v21 = *(uint8_t **)v32;
            }
            uint64_t v22 = *(void *)(a1 + 104);
            *(_DWORD *)__int16 v28 = 136315394;
            __int128 v29 = v21;
            __int16 v30 = 2048;
            uint64_t v31 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "#sp,Sensor fusion did not accept measurement, emitting raw solution instead. Reason: %s, Peer: 0x%llx",  v28,  0x16u);
            if (SHIBYTE(v36) < 0) {
              operator delete(*(void **)v32);
            }
          }

          if (v51) {
            sub_10012FE18(v2, (uint64_t)v3, v50, (uint64_t)v3);
          }
          else {
            sub_10012FF84(v2, (uint64_t)v3, (uint64_t)v3);
          }
        }

        else if (v20)
        {
          sub_10012FE04(v17, v32);
          char v23 = v36 >= 0 ? v32 : *(uint8_t **)v32;
          uint64_t v24 = *(void *)(a1 + 104);
          *(_DWORD *)__int16 v28 = 136315394;
          __int128 v29 = v23;
          __int16 v30 = 2048;
          uint64_t v31 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "#sp,Sensor fusion did not accept measurement (%s) and raw solution not OK to publish to client, not emitting! Peer: 0x%llx",  v28,  0x16u);
          if (SHIBYTE(v36) < 0) {
            operator delete(*(void **)v32);
          }
        }
      }

      if (v49) {
        sub_100034A98((uint64_t)v48, v48[1]);
      }
    }

    kdebug_trace(728957004LL, 0LL, 0LL, 0LL, 0LL);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038D7FC();
  }

void sub_10012F608( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    sub_100034A98((uint64_t)&a56, (void *)a57);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10012F660(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v9 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  char v4 = sub_100132210((void *)(a1 + 1752), &v9);
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)v4 + 5) & 0xFFFFFF00;
    int v6 = *((_DWORD *)v4 + 5);
    uint64_t v7 = &_mh_execute_header;
  }

  else
  {
    uint64_t v7 = 0LL;
    int v6 = 0;
    unsigned int v5 = 0;
  }

  std::mutex::unlock(v3);
  return (unint64_t)v7 | v5 | v6;
}

void sub_10012F6DC(_Unwind_Exception *a1)
{
}

void sub_10012F6F0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a2 + 64);
    int v12 = *(unsigned __int16 *)(a2 + 112);
    int v13 = *(unsigned __int16 *)(a2 + 56);
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v72 = 1024;
    *(_DWORD *)char v73 = v12;
    *(_WORD *)&v73[4] = 1024;
    *(_DWORD *)&v73[6] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#sp,computeAndEmitSensorFusionSolution(rose_data): mac_addr 0x%llx, cycle_index %d, ticket_id %d",  buf,  0x18u);
  }

  if (*(_BYTE *)(a2 + 16))
  {
    sub_100386700(a2, (uint64_t *)v66, *(double *)(a2 + 8));
    if (v66[1] == v66[0])
    {
      __int16 v28 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038D97C(a2, v28, v29, v30, v31, v32, v33, v34);
      }
      v63[0] = 0;
      char v65 = 0;
      *(_DWORD *)a5 = 2;
      sub_1001317DC((_BYTE *)(a5 + 8), (uint64_t)v63);
      *(_BYTE *)(a5 + 160) = 0;
      *(_BYTE *)(a5 + 208) = 0;
      if (!v65) {
        goto LABEL_44;
      }
      __int16 v35 = v64;
      int v36 = (void *)v64[1];
    }

    else if (sub_10036E6C4(a1 + 1152, v66, *(_WORD *)(a2 + 56)))
    {
      unint64_t v14 = *(void *)(a2 + 64);
      sub_10036EBF4(a1 + 1152, v14, (uint64_t)v53);
      if (v55)
      {
        if (!(_BYTE)v59) {
          __assert_rtn( "computeAndEmitSensorFusionSolution",  "RoseSolutionProvider.cpp",  675,  "solutionAndInternals.internals.has_value()");
        }
        int v15 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 134219264;
          *(void *)&uint8_t buf[4] = v53[1];
          __int16 v72 = 2048;
          *(void *)char v73 = v53[0];
          *(_WORD *)&v73[8] = 2048;
          uint64_t v74 = v54[3];
          __int16 v75 = 2048;
          uint64_t v76 = v54[4];
          __int16 v77 = 2048;
          uint64_t v78 = v54[5];
          __int16 v79 = 2048;
          unint64_t v80 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#sp,RoseSolutionProvider: got sensor fusion solution of ID: %llu Timestamp: %f Range: %f El: %f Az: %f, Peer: 0x%llx",  buf,  0x3Eu);
        }

        else {
          int v16 = 4;
        }
        sub_1001316AC((uint64_t)buf, a2, (uint64_t)v53, v16, &v56, *(_BYTE *)(a4 + 1777));
        __int128 v17 = *(_OWORD *)(a4 + 664);
        v97[8] = *(_OWORD *)(a4 + 648);
        v97[9] = v17;
        __int128 v18 = *(_OWORD *)(a4 + 600);
        v97[4] = *(_OWORD *)(a4 + 584);
        v97[5] = v18;
        __int128 v19 = *(_OWORD *)(a4 + 632);
        v97[6] = *(_OWORD *)(a4 + 616);
        v97[7] = v19;
        __int128 v20 = *(_OWORD *)(a4 + 568);
        v97[2] = *(_OWORD *)(a4 + 552);
        v97[3] = v20;
        char v98 = *(_BYTE *)(a4 + 680);
        __int128 v21 = *(_OWORD *)(a4 + 736);
        __int128 v88 = *(_OWORD *)(a4 + 720);
        __int128 v89 = v21;
        __int128 v90 = *(_OWORD *)(a4 + 752);
        char v91 = *(_BYTE *)(a4 + 768);
        __int128 v22 = *(_OWORD *)(a4 + 704);
        __int128 v86 = *(_OWORD *)(a4 + 688);
        __int128 v87 = v22;
        *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)(a4 + 865);
        __int128 v23 = *(_OWORD *)(a4 + 856);
        __int128 v96 = *(_OWORD *)(a4 + 840);
        v97[0] = v23;
        __int128 v24 = *(_OWORD *)(a4 + 792);
        __int128 v92 = *(_OWORD *)(a4 + 776);
        __int128 v93 = v24;
        __int128 v25 = *(_OWORD *)(a4 + 824);
        __int128 v94 = *(_OWORD *)(a4 + 808);
        __int128 v95 = v25;
        (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), buf);
        if (*(void *)(a1 + 1792))
        {
          sub_10036EADC(a1 + 1152, v14, (uint64_t *)v52);
          sub_100238438(*(void *)(a1 + 1792), (uint64_t *)v66, (uint64_t)v53, v52, (uint64_t)&v56);
          __int128 v70 = (void **)v52;
          sub_100131C24(&v70);
        }

        sub_1001317DC(v49, (uint64_t)v53);
        __int128 v45 = v56;
        __int128 v46 = v57;
        __int128 v47 = v58;
        uint64_t v48 = v59;
        *(_DWORD *)a5 = 0;
        sub_1001317DC((_BYTE *)(a5 + 8), (uint64_t)v49);
        __int128 v26 = v46;
        *(_OWORD *)(a5 + 160) = v45;
        *(_OWORD *)(a5 + 176) = v26;
        *(_OWORD *)(a5 + 192) = v47;
        *(void *)(a5 + 208) = v48;
        if (v51) {
          sub_100034A98((uint64_t)v50, v50[1]);
        }
        if (v85 && __p)
        {
          __int128 v84 = __p;
          operator delete(__p);
        }

        if (v82) {
          sub_100034A98((uint64_t)v81, v81[1]);
        }
        sub_100124BFC((uint64_t)&v78 + 4);
      }

      else
      {
        __int16 v37 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 134218240;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v72 = 2048;
          *(void *)char v73 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider] computeAndEmitSensorFusionSolution(rose_data): Failed to get filter solution for tar get ID %llu, Peer: 0x%llx",  buf,  0x16u);
        }

        if (*(void *)(a1 + 1792))
        {
          sub_10036EADC(a1 + 1152, v14, (uint64_t *)buf);
          sub_100238ED0(*(void *)(a1 + 1792), (uint64_t *)v66, (int **)buf);
          v52[0] = (int *)buf;
          sub_100131C24((void ***)v52);
        }

        v42[0] = 0;
        char v44 = 0;
        __int128 v38 = v56;
        __int128 v39 = v57;
        __int128 v40 = v58;
        uint64_t v41 = v59;
        *(_DWORD *)a5 = 5;
        sub_1001317DC((_BYTE *)(a5 + 8), (uint64_t)v42);
        *(_OWORD *)(a5 + 160) = v38;
        *(_OWORD *)(a5 + 176) = v39;
        *(_OWORD *)(a5 + 192) = v40;
        *(void *)(a5 + 208) = v41;
        if (v44) {
          sub_100034A98((uint64_t)v43, v43[1]);
        }
      }

      if (!v55) {
        goto LABEL_44;
      }
      __int16 v35 = v54;
      int v36 = (void *)v54[1];
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038D9E4();
      }
      v60[0] = 0;
      char v62 = 0;
      *(_DWORD *)a5 = 4;
      sub_1001317DC((_BYTE *)(a5 + 8), (uint64_t)v60);
      *(_BYTE *)(a5 + 160) = 0;
      *(_BYTE *)(a5 + 208) = 0;
      if (!v62) {
        goto LABEL_44;
      }
      __int16 v35 = v61;
      int v36 = (void *)v61[1];
    }

    sub_100034A98((uint64_t)v35, v36);
LABEL_44:
    *(void *)__int128 buf = v66;
    sub_100131B5C((void ***)buf);
    return;
  }

  int v27 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_10038D8F8(a2, v27);
  }
  v67[0] = 0;
  char v69 = 0;
  *(_DWORD *)a5 = 3;
  sub_1001317DC((_BYTE *)(a5 + 8), (uint64_t)v67);
  *(_BYTE *)(a5 + 160) = 0;
  *(_BYTE *)(a5 + 208) = 0;
  if (v69) {
    sub_100034A98((uint64_t)v68, v68[1]);
  }
}

void sub_10012FCE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x248])) {
    sub_100034A98((uint64_t)&a66, a67);
  }
  STACK[0x470] = (unint64_t)&STACK[0x3B8];
  sub_100131B5C((void ***)&STACK[0x470]);
  _Unwind_Resume(a1);
}

void *sub_10012FE04@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AEFA0[a1]);
}

uint64_t sub_10012FE18(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v6 = *(_OWORD *)(a4 + 664);
  v34[8] = *(_OWORD *)(a4 + 648);
  v34[9] = v6;
  __int128 v7 = *(_OWORD *)(a4 + 600);
  v34[4] = *(_OWORD *)(a4 + 584);
  v34[5] = v7;
  __int128 v8 = *(_OWORD *)(a4 + 632);
  v34[6] = *(_OWORD *)(a4 + 616);
  v34[7] = v8;
  __int128 v9 = *(_OWORD *)(a4 + 568);
  v34[2] = *(_OWORD *)(a4 + 552);
  v34[3] = v9;
  char v35 = *(_BYTE *)(a4 + 680);
  __int128 v10 = *(_OWORD *)(a4 + 736);
  __int128 v25 = *(_OWORD *)(a4 + 720);
  __int128 v26 = v10;
  __int128 v27 = *(_OWORD *)(a4 + 752);
  char v28 = *(_BYTE *)(a4 + 768);
  __int128 v11 = *(_OWORD *)(a4 + 704);
  __int128 v23 = *(_OWORD *)(a4 + 688);
  __int128 v24 = v11;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a4 + 865);
  __int128 v12 = *(_OWORD *)(a4 + 856);
  __int128 v33 = *(_OWORD *)(a4 + 840);
  v34[0] = v12;
  __int128 v13 = *(_OWORD *)(a4 + 792);
  __int128 v29 = *(_OWORD *)(a4 + 776);
  __int128 v30 = v13;
  __int128 v14 = *(_OWORD *)(a4 + 824);
  __int128 v31 = *(_OWORD *)(a4 + 808);
  __int128 v32 = v14;
  (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), v16);
  if (v22 && __p)
  {
    __int128 v21 = __p;
    operator delete(__p);
  }

  if (v19) {
    sub_100034A98((uint64_t)v18, v18[1]);
  }
  return sub_100124BFC((uint64_t)&v17);
}

void sub_10012FF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10012FF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_WORD *)(a2 + 96))
  {
    __int128 v6 = *(_OWORD *)(a3 + 664);
    v34[8] = *(_OWORD *)(a3 + 648);
    v34[9] = v6;
    __int128 v7 = *(_OWORD *)(a3 + 600);
    v34[4] = *(_OWORD *)(a3 + 584);
    v34[5] = v7;
    __int128 v8 = *(_OWORD *)(a3 + 632);
    v34[6] = *(_OWORD *)(a3 + 616);
    v34[7] = v8;
    __int128 v9 = *(_OWORD *)(a3 + 568);
    v34[2] = *(_OWORD *)(a3 + 552);
    v34[3] = v9;
    char v35 = *(_BYTE *)(a3 + 680);
    __int128 v10 = *(_OWORD *)(a3 + 736);
    __int128 v25 = *(_OWORD *)(a3 + 720);
    __int128 v26 = v10;
    __int128 v27 = *(_OWORD *)(a3 + 752);
    char v28 = *(_BYTE *)(a3 + 768);
    __int128 v11 = *(_OWORD *)(a3 + 704);
    __int128 v23 = *(_OWORD *)(a3 + 688);
    __int128 v24 = v11;
    __int128 v12 = *(_OWORD *)(a3 + 856);
    __int128 v33 = *(_OWORD *)(a3 + 840);
    v34[0] = v12;
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a3 + 865);
    __int128 v13 = *(_OWORD *)(a3 + 792);
    __int128 v29 = *(_OWORD *)(a3 + 776);
    __int128 v30 = v13;
    __int128 v14 = *(_OWORD *)(a3 + 824);
    __int128 v31 = *(_OWORD *)(a3 + 808);
    __int128 v32 = v14;
  }

  (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), v16);
  if (v22 && __p)
  {
    __int128 v21 = __p;
    operator delete(__p);
  }

  if (v19) {
    sub_100034A98((uint64_t)v18, v18[1]);
  }
  return sub_100124BFC((uint64_t)&v17);
}

void sub_1001300E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *sub_1001300FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  __int128 v4 = *(_OWORD *)(a2 + 56);
  __int128 v5 = *(_OWORD *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  sub_10011B560( (void *)(a1 + 112),  *(const void **)(a2 + 112),  *(void *)(a2 + 120),  (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  sub_10011B618( (void *)(a1 + 176),  *(const void **)(a2 + 176),  *(void *)(a2 + 184),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3));
  memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x181uLL);
  memcpy((void *)(a1 + 592), (const void *)(a2 + 592), 0x259uLL);
  __n128 result = sub_10011B2F0((_BYTE *)(a1 + 1200), a2 + 1200);
  *(_WORD *)(a1 + 1816) = *(_WORD *)(a2 + 1816);
  return result;
}

void sub_1001301F0(_Unwind_Exception *exception_object)
{
  __int128 v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 184) = v5;
    operator delete(v5);
  }

  __int128 v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 120) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(exception_object);
}

void sub_100130224(void *a1)
{
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }

void *sub_100130270(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }

  __int128 v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }

  __int128 v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }

  __int128 v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }

  __int128 v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }

  return a1;
}

uint64_t sub_1001302F0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    __int128 v7 = *v2++;
    operator delete(v7);
  }

  return sub_100030AF0((uint64_t)a1);
}

uint64_t sub_100130384(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001303BC(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_100034A98((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }

    while (v3);
  }

uint64_t sub_1001303FC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100130434(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100130470((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_100130470(uint64_t a1)
{
  *(void *)(a1 + 456) = off_1007AED90;
  sub_1001302F0((void *)(a1 + 400));
  sub_1001302F0((void *)(a1 + 336));
  uint64_t v2 = (void **)(a1 + 224);
  sub_1001304C8(&v2);
}

void sub_1001304C8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      unint64_t v4 = v3 - 1016;
      do
      {
        *((void *)v4 + 64) = off_1007AED90;
        *((void *)v4 + 53) = off_1007AED90;
        *((void *)v4 + 11) = off_1007AED90;
        *(void *)unint64_t v4 = off_1007AED90;
        unint64_t v5 = v4 - 464;
        v4 -= 1480;
      }

      while (v5 != v2);
    }

    v1[1] = v2;
    operator delete(v2);
  }

uint64_t sub_100130518(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x19];
    __int128 v7 = (char *)*v6 + 160 * (v5 % 0x19);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x19] + 160 * ((a1[5] + v5) % 0x19);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_100130664((uint64_t)v2, v7);
        v7 += 160;
        if (v7 - (_BYTE *)*v6 == 4000)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          __int128 v7 = v9;
        }
      }

      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }

  *uint64_t v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 12LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 25LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    __int128 v13 = *v3++;
    operator delete(v13);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_100130664(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[17];
  if (v3)
  {
    a2[18] = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)a2[14];
  if (v4)
  {
    a2[15] = v4;
    operator delete(v4);
  }

  unint64_t v5 = (void *)a2[11];
  if (v5)
  {
    a2[12] = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)a2[8];
  if (v6)
  {
    a2[9] = v6;
    operator delete(v6);
  }

  __int128 v7 = (void *)a2[5];
  if (v7)
  {
    a2[6] = v7;
    operator delete(v7);
  }

  unint64_t v8 = (void *)a2[2];
  if (v8)
  {
    a2[3] = v8;
    operator delete(v8);
  }

void *sub_1001306E8(void *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10013076C(result, a4);
    __n128 result = (void *)sub_100130808((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10013074C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100130C98(&a9);
  _Unwind_Resume(a1);
}

char *sub_10013076C(void *a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_10001E11C();
  }
  __n128 result = (char *)sub_1001307C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

void *sub_1001307C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_10001D350();
  }
  return operator new(152 * a2);
}

uint64_t sub_100130808(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1001308A8(v4, v6);
      v6 += 76;
      uint64_t v4 = v11 + 152;
      v11 += 152LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100130B24((uint64_t)v8);
  return v4;
}

void sub_100130894( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001308A8(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  sub_1001309C0( (void *)(a1 + 8),  *((const void **)a2 + 1),  *((void *)a2 + 2),  *((void *)a2 + 2) - *((void *)a2 + 1));
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_1001309C0( (void *)(a1 + 32),  *((const void **)a2 + 4),  *((void *)a2 + 5),  *((void *)a2 + 5) - *((void *)a2 + 4));
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_100130A38( (void *)(a1 + 56),  *((const void **)a2 + 7),  *((void *)a2 + 8),  (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 10);
  __int128 v5 = *((_OWORD *)a2 + 5);
  __int128 v6 = *((_OWORD *)a2 + 6);
  __int128 v7 = *(_OWORD *)((char *)a2 + 105);
  *(void *)(a1 + 128) = 0LL;
  *(_OWORD *)(a1 + 105) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  sub_100130D1C( (void *)(a1 + 128),  *((void *)a2 + 16),  *((void *)a2 + 17),  (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 5);
  return a1;
}

void sub_100130974(_Unwind_Exception *exception_object)
{
  __int128 v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
  }

  __int128 v7 = *v3;
  if (*v3)
  {
    v1[5] = v7;
    operator delete(v7);
  }

  unint64_t v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1001309C0(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    __int128 v6 = result;
    __n128 result = sub_1000242D4(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100130A1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100130A38(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    __n128 result = sub_100130AB0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100130A94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100130AB0(void *a1, unint64_t a2)
{
  if (a2 >> 54) {
    sub_10001E11C();
  }
  __n128 result = (char *)sub_100130AF0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1024 * v4];
  return result;
}

void *sub_100130AF0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 54) {
    sub_10001D350();
  }
  return operator new(a2 << 10);
}

uint64_t sub_100130B24(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100130B58((uint64_t *)a1);
  }
  return a1;
}

void sub_100130B58(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 152LL;
      sub_100130BA8(v5, v3);
    }

    while (v3 != v4);
  }

void sub_100130BA8(uint64_t a1, uint64_t a2)
{
  __int128 v6 = (void **)(a2 + 128);
  sub_100130C0C(&v6);
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(void *)(a2 + 40) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)(a2 + 8);
  if (v5)
  {
    *(void *)(a2 + 16) = v5;
    operator delete(v5);
  }

void sub_100130C0C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100130C4C((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100130C4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32LL)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void sub_100130C98(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152LL;
        sub_100130BA8((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_100130D1C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_100130DA0(result, a4);
    __n128 result = (void *)sub_100130E14((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100130D80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100130C0C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100130DA0(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10001E11C();
  }
  __n128 result = (char *)sub_100130DE0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_100130DE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10001D350();
  }
  return operator new(32 * a2);
}

uint64_t sub_100130E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
      *(void *)(v4 + 16) = 0LL;
      *(void *)(v4 + 24) = 0LL;
      *(void *)(v4 + 8) = 0LL;
      sub_1001309C0( (void *)(v4 + 8),  *(const void **)(v6 + 8),  *(void *)(v6 + 16),  *(void *)(v6 + 16) - *(void *)(v6 + 8));
      uint64_t v4 = v11 + 32;
      v11 += 32LL;
      v6 += 32LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100130EC8((uint64_t)v8);
  return v4;
}

void sub_100130EB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100130EC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100130EFC(a1);
  }
  return a1;
}

void sub_100130EFC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }

    v1 -= 32LL;
  }

void *sub_100130F40(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1001205C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100130F9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100130FB8(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 6);
  *(_DWORD *)(a1 + 32) = 5;
  *(_WORD *)(a1 + 36) = *((_WORD *)a2 + 4);
  uint64_t v5 = a2[4];
  *(_BYTE *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  uint64_t v6 = *a2;
  *(_WORD *)(a1 + 768) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 760) = v6;
  __int128 v7 = *((_OWORD *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 2);
  __int128 v9 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 824) = *((_DWORD *)a2 + 16);
  *(_OWORD *)(a1 + 792) = v8;
  *(_OWORD *)(a1 + 808) = v9;
  *(_OWORD *)(a1 + 776) = v7;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 848) = 0LL;
  *(void *)(a1 + 840) = 0LL;
  sub_100130F40((void *)(a1 + 832), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  *(_OWORD *)(a1 + 856) = *((_OWORD *)a2 + 6);
  *(_BYTE *)(a1 + 872) = 1;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1448) = 0;
  return a1;
}

void sub_1001310B4(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 752)) {
    sub_10038DA4C(v1);
  }
  sub_100124BFC(v2);
  _Unwind_Resume(a1);
}

void sub_1001310D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (a1 != a2) {
        sub_100131194((uint64_t **)(a1 + 16), *(unsigned __int16 **)(a2 + 16), (unsigned __int16 *)(a2 + 24));
      }
      __int128 v4 = *(_OWORD *)(a2 + 40);
      __int128 v5 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = v5;
      *(_OWORD *)(a1 + 40) = v4;
      __int128 v6 = *(_OWORD *)(a2 + 88);
      __int128 v7 = *(_OWORD *)(a2 + 104);
      __int128 v8 = *(_OWORD *)(a2 + 120);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v8;
      *(_OWORD *)(a1 + 104) = v7;
      *(_OWORD *)(a1 + 88) = v6;
    }
  }

  else if (*(_BYTE *)(a1 + 144))
  {
    sub_100034A98(a1 + 16, *(void **)(a1 + 24));
    *(_BYTE *)(a1 + 144) = 0;
  }

  else
  {
    sub_100387A84(a1);
    *(_BYTE *)(a1 + 144) = 1;
  }

uint64_t **sub_100131194(uint64_t **result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  __int128 v5 = result;
  if (result[2])
  {
    __int128 v6 = *result;
    __int128 v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      __int128 v8 = (uint64_t *)v6[1];
    }
    else {
      __int128 v8 = v6;
    }
    __int128 v14 = result;
    int v15 = v8;
    int v16 = v8;
    if (v8)
    {
      int v15 = sub_100131360((uint64_t)v8);
      if (a2 != a3)
      {
        __int128 v9 = a2;
        do
        {
          *((_WORD *)v8 + 13) = v9[13];
          sub_1001312F4(v5, (uint64_t)v8);
          __int128 v8 = v15;
          int v16 = v15;
          if (v15) {
            int v15 = sub_100131360((uint64_t)v15);
          }
          uint64_t v10 = (unsigned __int16 *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(unsigned __int16 **)v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (unsigned __int16 *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              __int128 v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          __int128 v9 = a2;
        }

        while (a2 != a3);
      }
    }

    __n128 result = (uint64_t **)sub_1001313B4((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_100131408(v5, a2 + 13);
      uint64_t v12 = (unsigned __int16 *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          __int128 v13 = v12;
          uint64_t v12 = *(unsigned __int16 **)v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          __int128 v13 = (unsigned __int16 *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_1001312E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1001312F4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  __int128 v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        __int128 v4 = (uint64_t *)*v4;
        __int128 v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      __int128 v4 = (uint64_t *)v4[1];
    }

    while (v4);
    __int128 v5 = v3 + 1;
  }

  else
  {
    __int128 v5 = a1 + 1;
  }

void *sub_100131360(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0LL;
      while (1)
      {
        __int128 v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          __int128 v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

uint64_t sub_1001313B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_100034A98(*(void *)a1, v2);
  }

  return a1;
}

uint64_t *sub_100131408(uint64_t **a1, unsigned __int16 *a2)
{
  __int128 v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_WORD *)v4 + 13) = v5;
  __int128 v6 = a1 + 1;
  __int128 v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        __int128 v6 = (uint64_t **)v7;
        __int128 v7 = (uint64_t *)*v7;
        __int128 v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      __int128 v7 = (uint64_t *)v7[1];
    }

    while (v7);
    __int128 v8 = v6 + 1;
  }

  else
  {
    __int128 v8 = a1 + 1;
  }

uint64_t sub_100131494(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  sub_100131520(a1 + 48, a2);
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1448) = 0;
  return a1;
}

uint64_t sub_100131520(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  *(_BYTE *)(a1 + 552) = 1;
  return a1;
}

void sub_1001315EC(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100131608(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  *(void *)a1 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  sub_100131520(a1 + 48, a2);
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  __int128 v6 = *a3;
  __int128 v7 = a3[2];
  *(_OWORD *)(a1 + 896) = a3[1];
  *(_OWORD *)(a1 + 912) = v7;
  *(_OWORD *)(a1 + 880) = v6;
  *(_BYTE *)(a1 + 928) = 1;
  *(_BYTE *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1448) = 0;
  return a1;
}

uint64_t sub_1001316AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, char a6)
{
  *(void *)a1 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 8) = a6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = a4;
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  sub_100131520(a1 + 48, a2);
  sub_100387A84(a1 + 608);
  *(_BYTE *)(a1 + 752) = 1;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  __int128 v9 = *a5;
  __int128 v10 = a5[2];
  *(_OWORD *)(a1 + 896) = a5[1];
  *(_OWORD *)(a1 + 912) = v10;
  *(_OWORD *)(a1 + 880) = v9;
  *(_BYTE *)(a1 + 928) = 1;
  *(_BYTE *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1448) = 0;
  if ((a4 - 5) <= 0xFFFFFFFD) {
    __assert_rtn( "RoseSolution",  "RoseSolution.h",  115,  "solution_type == RoseSolutionType::RoseRawAndSensorFusion || solution_type == RoseSolutionType::RoseRawRangeSensorFusionAngle");
  }
  return a1;
}

void sub_10013179C(_Unwind_Exception *a1)
{
}

_BYTE *sub_1001317DC(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    sub_100387A84(a1);
    a1[144] = 1;
  }

  return a1;
}

void sub_10013181C(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 144)) {
    sub_100034A98(v1 + 16, *(void **)(v1 + 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013183C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, __int128 *a5, char a6, double a7)
{
  *(double *)a1 = a7;
  uint64_t v9 = *a4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = 2;
  *(_WORD *)(a1 + 36) = a2;
  *(void *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 600) = 0;
  sub_100387A84(a1 + 608);
  *(_BYTE *)(a1 + 752) = 1;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  __int128 v10 = *a5;
  __int128 v11 = a5[2];
  *(_OWORD *)(a1 + 952) = a5[1];
  *(_OWORD *)(a1 + 968) = v11;
  *(_OWORD *)(a1 + 936) = v10;
  __int128 v12 = a5[3];
  __int128 v13 = a5[4];
  __int128 v14 = a5[6];
  *(_OWORD *)(a1 + 1016) = a5[5];
  *(_OWORD *)(a1 + 1032) = v14;
  *(_OWORD *)(a1 + 984) = v12;
  *(_OWORD *)(a1 + 1000) = v13;
  __int128 v15 = a5[7];
  __int128 v16 = a5[8];
  __int128 v17 = a5[10];
  *(_OWORD *)(a1 + 1080) = a5[9];
  *(_OWORD *)(a1 + 1096) = v17;
  *(_OWORD *)(a1 + 1048) = v15;
  *(_OWORD *)(a1 + 1064) = v16;
  *(_BYTE *)(a1 + 1112) = 1;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1448) = 0;
  return a1;
}

void sub_10013190C(_Unwind_Exception *a1)
{
}

void *sub_100131920@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  __int128 v4 = operator new(0x108uLL);
  __n128 result = sub_100131978(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100131964(_Unwind_Exception *a1)
{
}

void *sub_100131978(void *a1, unsigned int *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1007AEDC0;
  sub_100120218(a1 + 3, *a2);
  return a1;
}

void sub_1001319B0(_Unwind_Exception *a1)
{
}

void sub_1001319C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007AEDC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001319D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007AEDC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1001319F4(uint64_t a1)
{
}

void sub_100131A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (std::mutex *)(a2 + 128);
  __int128 v4 = *(void **)(a2 + 216);
  if (v4)
  {
    *(void *)(a2 + 224) = v4;
    operator delete(v4);
  }

  __int128 v5 = *(void **)(a2 + 208);
  *(void *)(a2 + 208) = 0LL;
  if (v5) {
    operator delete(v5);
  }
  std::mutex::~mutex(v3);
  __int128 v6 = *(void **)(a2 + 104);
  if (v6)
  {
    *(void *)(a2 + 112) = v6;
    operator delete(v6);
  }

  __int128 v7 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = 0LL;
  if (v7) {
    operator delete(v7);
  }
  std::mutex::~mutex((std::mutex *)(a2 + 16));
}

__n128 sub_100131A90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007AEE10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100131AD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007AEE10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100131AF8(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_100131B14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100131B50()
{
}

void sub_100131B5C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    __int128 v4 = v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_100131BE0((uint64_t)(v1 + 2), v4);
      }

      while (v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100131BE0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[15];
  if (v3)
  {
    a2[16] = v3;
    operator delete(v3);
  }

  __int128 v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }

void sub_100131C24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      __int128 v4 = v3 - 576;
      do
      {
        *((void *)v4 + 11) = off_1007AED90;
        *(void *)__int128 v4 = off_1007AED90;
        __int128 v5 = v4 - 8;
        v4 -= 584;
      }

      while (v5 != v2);
    }

    v1[1] = v2;
    operator delete(v2);
  }

void sub_100131C6C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    __int128 v4 = v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 128;
      do
      {
        sub_100034A98(v6, *(void **)(v6 + 8));
        uint64_t v7 = v6 - 16;
        v6 -= 144LL;
      }

      while ((void *)v7 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t *sub_100131CE8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100131D3C(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_100131D24(_Unwind_Exception *a1)
{
}

uint64_t *sub_100131D3C(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    __int128 v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_100131DC0(v5, v6, v4 + 13, v4 + 13);
      uint64_t v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          __int128 v8 = v7;
          uint64_t v7 = *(unsigned __int16 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          __int128 v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          __int128 v4 = v8;
        }

        while (!v9);
      }

      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100131DC0(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v6 = sub_100131E44(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __int128 v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    sub_10001E548(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_100131E44(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  __int128 v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    __int128 v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      __int128 v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        __int128 v13 = v10;
      }

      while (v14);
    }

    unsigned int v15 = *a5;
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          __int128 v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          __int128 v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        __int128 v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      __int128 v17 = a1 + 1;
    }

void *sub_100131FEC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0LL;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100021B74(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }

  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_1001321FC(_Unwind_Exception *a1)
{
}

uint64_t **sub_100132210(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  unsigned int v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_1001322C4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1001322D4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1001322F4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100132300()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      uint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100422640;
      v1[1] = *(_OWORD *)algn_100422650;
      v1[2] = xmmword_100422660;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_1001323A0(_Unwind_Exception *a1)
{
}

void sub_1001323B8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F3510);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F3510))
    {
      sub_1000065CC(qword_1007F34F8, "");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1007F34F8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F3510);
    }
  }

void sub_100132434(_Unwind_Exception *a1)
{
}

uint64_t sub_10013244C()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  int8x8_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F6A48 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F6A38 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A38, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint8x8_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F6A60 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F6A50 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A50, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  unint64_t v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F6A78 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F6A68 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A68, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  unint64_t v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  float v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F6A90 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F6A80 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A80, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  unint64_t v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  size_t v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F6AA8 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F6A98 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6A98, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  uint64_t v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F6AC0 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F6AB0 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6AB0, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  __int128 v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F6AD8 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F6AC8 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6AC8, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  char v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F6AF0 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F6AE0 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6AE0, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  __int128 v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F6B08 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F6AF8 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F6AF8,  (void *)&_mh_execute_header);
}

void sub_100132A30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100132AA4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF6C8[a1]);
}

void *sub_100132AB8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF720[a1]);
}

void *sub_100132ACC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF768[a1]);
}

void *sub_100132AE0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF788[a1]);
}

uint64_t sub_100132AF4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, void *a5, uint64_t *a6)
{
  id v11 = a5;
  *(void *)(a1 + 8) = off_1007AF080;
  *(void *)a1 = off_1007AEFE0;
  *(void *)(a1 + 16) = off_1007AF0C0;
  *(void *)(a1 + 24) = off_1007AF0E8;
  *(void *)(a1 + 32) = 850045863LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 1018212795LL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0LL;
  dispatch_queue_attr_t v12 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  __int128 v13 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v12);
  *(void *)(a1 + 144) = dispatch_queue_create("com.apple.RoseServiceProviderQueue", v13);

  id v14 = v11;
  *(void *)(a1 + 152) = v14;
  sub_100137934((void *)(a1 + 160));
  *(void *)(a1 + 176) = a4;
  __int128 v15 = *(std::__shared_weak_count **)(a1 + 168);
  uint64_t v52 = *(void *)(a1 + 160);
  __int128 v53 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }

  size_t v18 = (std::__shared_weak_count *)a6[1];
  uint64_t v50 = *a6;
  char v51 = v18;
  if (v18)
  {
    __int128 v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  sub_100142D74(a1 + 184, a1, &v52, &v50);
  __int128 v21 = v51;
  if (v51)
  {
    unsigned int v22 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  __int128 v24 = v53;
  if (v53)
  {
    __int128 v25 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  __int128 v27 = *(std::__shared_weak_count **)(a1 + 168);
  uint64_t v48 = *(void *)(a1 + 160);
  char v49 = v27;
  if (v27)
  {
    char v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  __int128 v30 = (std::__shared_weak_count *)a6[1];
  uint64_t v46 = *a6;
  __int128 v47 = v30;
  if (v30)
  {
    __int128 v31 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  sub_10012BBA4(a1 + 464, a1 + 8, &v48, &v46);
  __int128 v33 = v47;
  if (v47)
  {
    uint64_t v34 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  int v36 = v49;
  if (v49)
  {
    std::string v37 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  __int128 v39 = *a2;
  __int128 v40 = a2[1];
  *(_OWORD *)(a1 + 2336) = a2[2];
  *(_OWORD *)(a1 + 2320) = v40;
  *(_OWORD *)(a1 + 2304) = v39;
  __int128 v41 = *a3;
  __int128 v42 = a3[1];
  *(void *)(a1 + 2384) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 2368) = v42;
  *(_OWORD *)(a1 + 2352) = v41;
  *(_OWORD *)(a1 + 2392) = xmmword_1004229F0;
  if (!v14)
  {
    char v44 = "client_dispatch_queue";
    int v45 = 59;
    goto LABEL_38;
  }

  if (!a4)
  {
    char v44 = "service_client";
    int v45 = 60;
LABEL_38:
    __assert_rtn("RoseServiceProvider", "RoseServiceProvider.mm", v45, v44);
  }

  sub_100132E9C(a1);

  return a1;
}

void sub_100132E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_100012390((uint64_t)va);
  sub_100012390((uint64_t)va1);
  sub_100142DE8(a4);
  sub_100012390(a3);

  std::condition_variable::~condition_variable(v6);
  std::mutex::~mutex(v5);

  _Unwind_Resume(a1);
}

void sub_100132E9C(uint64_t a1)
{
  int8x8_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ConfigureProxyObjects called", v6, 2u);
  }

  if ((sub_100142E00(a1 + 184, (uint64_t *)(a1 + 2304)) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to setup proxy objects");
  }

  uint64_t v3 = *(void *)(a1 + 2304);
  uint64_t v4 = *(void *)(a1 + 2312);
  std::mutex::lock((std::mutex *)(v3 + 24));
  *(void *)(v3 + 88) = a1 + 464;
  std::mutex::unlock((std::mutex *)(v3 + 24));
  std::mutex::lock((std::mutex *)(v4 + 24));
  *(void *)(v4 + 88) = a1 + 464;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_100132F88(_Unwind_Exception *a1)
{
}

uint64_t sub_100132FA0(uint64_t a1)
{
  *(void *)a1 = off_1007AEFE0;
  *(void *)(a1 + 8) = off_1007AF080;
  *(void *)(a1 + 16) = off_1007AF0C0;
  *(void *)(a1 + 24) = off_1007AF0E8;
  sub_10012BCD0(a1 + 464);
  sub_100142DE8(a1 + 184);
  sub_100012390(a1 + 160);

  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  return a1;
}

uint64_t sub_100133018(uint64_t a1)
{
  return sub_100132FA0(a1 - 8);
}

uint64_t sub_100133020(uint64_t a1)
{
  return sub_100132FA0(a1 - 16);
}

uint64_t sub_100133028(uint64_t a1)
{
  return sub_100132FA0(a1 - 24);
}

void sub_100133030(uint64_t a1)
{
  __int128 v1 = (void *)sub_100132FA0(a1);
  operator delete(v1);
}

void sub_100133044(uint64_t a1)
{
  __int128 v1 = (void *)sub_100132FA0(a1 - 8);
  operator delete(v1);
}

void sub_10013305C(uint64_t a1)
{
  __int128 v1 = (void *)sub_100132FA0(a1 - 16);
  operator delete(v1);
}

void sub_100133074(uint64_t a1)
{
  __int128 v1 = (void *)sub_100132FA0(a1 - 24);
  operator delete(v1);
}

uint64_t sub_10013308C(uint64_t a1)
{
  int8x8_t v2 = *(dispatch_queue_s **)(a1 + 144);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10013313C;
  v4[3] = &unk_1007AF100;
  v4[4] = a1;
  v4[5] = a1;
  dispatch_async(v2, v4);
  (*(void (**)(void))(**(void **)(a1 + 2352) + 16LL))(*(void *)(a1 + 2352));
  (*(void (**)(void))(**(void **)(a1 + 2360) + 16LL))(*(void *)(a1 + 2360));
  (*(void (**)(void))(**(void **)(a1 + 2368) + 16LL))(*(void *)(a1 + 2368));
  (*(void (**)(void))(**(void **)(a1 + 2376) + 16LL))(*(void *)(a1 + 2376));
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2384) + 16LL))(*(void *)(a1 + 2384));
}

void sub_10013313C(uint64_t a1)
{
  if ((sub_100142EE0(*(void *)(a1 + 32) + 184LL) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DA74();
    }
    uint64_t v2 = *(void *)(a1 + 40);
    atomic_store(3u, (unsigned int *)(v2 + 2396));
    uint64_t v3 = *(dispatch_queue_s **)(v2 + 152);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1001375F8;
    v4[3] = &unk_1007AF100;
    v4[4] = v2;
    v4[5] = 0x100000003LL;
    dispatch_async(v3, v4);
  }

uint64_t sub_1001331EC(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[298] + 24LL))(a1[298]);
}

void sub_100133254(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = atomic_load((unsigned int *)(a1 + 2396));
  BOOL v5 = v4 > 4;
  int v6 = (1 << v4) & 0x19;
  if (!v5 && v6 != 0)
  {
    sub_1000065CC(__src, "Service is not ready.");
    *(void *)__int128 buf = 109LL;
    if (SHIBYTE(__src[2]) < 0)
    {
      sub_1000063A8(&v52, __src[0], (unint64_t)__src[1]);
      uint64_t v8 = *(void *)buf;
    }

    else
    {
      __int128 v52 = *(_OWORD *)__src;
      __int128 v53 = __src[2];
      uint64_t v8 = 109LL;
    }

    uint64_t v46 = v8;
    *(_OWORD *)std::stringbuf::string_type __p = v52;
    uint64_t v48 = v53;
    __int128 v52 = 0uLL;
    __int128 v53 = 0LL;
    char v49 = 1;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 640) = 0;
    *(_DWORD *)(a3 + 648) = 1;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)&v46);
    if (v49 && SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v9 = __src[0];
    goto LABEL_15;
  }

  sub_100149FD8(*(void *)(a1 + 160), a2, (uint64_t)__src);
  if (!LOBYTE(__src[79]))
  {
    sub_1000065CC(v35, "fServiceRequestsDatabase->insertServiceRequest failed.");
    *(void *)__int128 buf = 999LL;
    if (SHIBYTE(v36) < 0)
    {
      sub_1000063A8(&v52, v35[0], (unint64_t)v35[1]);
      uint64_t v23 = *(void *)buf;
    }

    else
    {
      __int128 v52 = *(_OWORD *)v35;
      __int128 v53 = v36;
      uint64_t v23 = 999LL;
    }

    uint64_t v27 = v23;
    *(_OWORD *)char v28 = v52;
    unint64_t v29 = v53;
    __int128 v52 = 0uLL;
    __int128 v53 = 0LL;
    char v30 = 1;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 640) = 0;
    *(_DWORD *)(a3 + 648) = 1;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)&v27);
    if (v30 && SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      return;
    }
    uint64_t v9 = v35[0];
LABEL_15:
    operator delete(v9);
    return;
  }

  uint64_t v11 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (!LOBYTE(__src[79])) {
      sub_100006080();
    }
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = LOWORD(__src[0]);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] will ignore any RequestInvalidated notifications for ticket ID: %d",  buf,  8u);
  }

  if (!LOBYTE(__src[79])) {
    sub_100006080();
  }
  atomic_store(LOWORD(__src[0]), (unsigned int *)(a1 + 2404));
  atomic_store(0, (unsigned int *)(a1 + 2392));
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (!LOBYTE(__src[79])) {
    sub_100006080();
  }
  memcpy(v55, __src, sizeof(v55));
  dispatch_queue_attr_t v12 = *(dispatch_queue_s **)(a1 + 144);
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&__int128 v52 = 3221225472LL;
  *((void *)&v52 + 1) = sub_1001348D4;
  __int128 v53 = &unk_1007AF150;
  uint64_t v54 = a1;
  dispatch_async(v12, buf);
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 5000000000LL;
  do
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v13.__d_.__rep_) {
      break;
    }
    v15.__d_.__rep_ = v13.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v15.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v16.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v16.__d_.__rep_)
      {
        if (v16.__d_.__rep_ < 1)
        {
          if ((unint64_t)v16.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17 = 0x8000000000000000LL;
            goto LABEL_36;
          }
        }

        else if ((unint64_t)v16.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_34;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17 = 1000 * v16.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17 = 0LL;
      }

void sub_1001338C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, std::mutex *a35, char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a36) {
    std::mutex::unlock(a35);
  }
  _Unwind_Resume(a1);
}

void sub_100133A08(uint64_t a1, uint64_t a2, int a3)
{
  if (v20)
  {
    if (v19) {
      BOOL v6 = a3 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      else {
        int v7 = dword_100422F78[v18 - 1];
      }
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100179598(v7, a2, a3, Current);
      if (!sub_10014A404(*(void *)(a1 + 160), a2))
      {
        uint64_t v10 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038DBB8(a2, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_10038DB58();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038DAF8();
  }

void sub_100133B60(uint64_t a1@<X0>, __int16 a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5 = atomic_load((unsigned int *)(a1 + 2396));
  BOOL v6 = v5 > 4;
  int v7 = (1 << v5) & 0x19;
  if (!v6 && v7 != 0)
  {
    sub_1000065CC(buf, "Service is not ready.");
    uint64_t v44 = 109LL;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1000063A8(&v45, *(void **)buf, *(unint64_t *)&buf[8]);
      uint64_t v9 = v44;
    }

    else
    {
      __int128 v45 = *(_OWORD *)buf;
      uint64_t v46 = *(void *)&buf[16];
      uint64_t v9 = 109LL;
    }

    __int128 __p = v45;
    uint64_t v38 = v9;
    uint64_t v40 = v46;
    __int128 v45 = 0uLL;
    uint64_t v46 = 0LL;
    char v41 = 1;
    *(_BYTE *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 648) = 0;
    sub_100137614((_BYTE *)(a4 + 656), (uint64_t)&v38);
    if (v41 && SHIBYTE(v40) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)v45);
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      uint64_t v10 = *(void **)buf;
LABEL_15:
      operator delete(v10);
      return;
    }

    return;
  }

  sub_100149D9C(*(void *)(a1 + 160), a2, &v44);
  if (!v47)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DC1C();
    }
    sub_1000065CC(&v30, "Could not find ticket id in fServiceRequestsDatabase.");
    *(void *)__int128 buf = 108LL;
    if (SHIBYTE(v31) < 0)
    {
      sub_1000063A8(&buf[8], (void *)v30, *((unint64_t *)&v30 + 1));
      uint64_t v19 = *(void *)buf;
    }

    else
    {
      *(_OWORD *)&uint8_t buf[8] = v30;
      uint64_t v33 = v31;
      uint64_t v19 = 108LL;
    }

    uint64_t v22 = v19;
    __int128 v23 = *(_OWORD *)&buf[8];
    uint64_t v24 = v33;
    *(void *)&uint8_t buf[8] = 0LL;
    *(void *)&buf[16] = 0LL;
    uint64_t v33 = 0LL;
    char v25 = 1;
    *(_BYTE *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 648) = 0;
    sub_100137614((_BYTE *)(a4 + 656), (uint64_t)&v22);
    if (v25 && SHIBYTE(v24) < 0)
    {
      __int128 v21 = (void *)v23;
LABEL_45:
      operator delete(v21);
    }

void sub_100133F70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100134078(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  if (v28)
  {
    if (v27[0])
    {
      sub_100143A70(a1 + 184, a2);
      v14[0] = 0;
      char v17 = 0;
      *(_BYTE *)(a3 + 8) = 1;
      *(_DWORD *)(a3 + 648) = 0;
      sub_100137614((_BYTE *)(a3 + 656), (uint64_t)v14);
      if (v17 && v16 < 0)
      {
        BOOL v6 = v15;
LABEL_27:
        operator delete(v6);
        return;
      }

      return;
    }

    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DCA8();
    }
    sub_1000065CC(v18, "Got trigger stop, but state is ServiceRequestState::Inactive.");
    uint64_t v20 = 111LL;
    if (SHIBYTE(v19) < 0)
    {
      sub_1000063A8(&v21, v18[0], (unint64_t)v18[1]);
      uint64_t v8 = v20;
    }

    else
    {
      __int128 v21 = *(_OWORD *)v18;
      uint64_t v22 = v19;
      uint64_t v8 = 111LL;
    }

    uint64_t v23 = v8;
    *(_OWORD *)__int128 __p = v21;
    uint64_t v25 = v22;
    __int128 v21 = 0uLL;
    uint64_t v22 = 0LL;
    char v26 = 1;
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 648) = 0;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)&v23);
    if (v26 && SHIBYTE(v25) < 0)
    {
      uint64_t v9 = __p[0];
      goto LABEL_22;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DC1C();
    }
    sub_1000065CC(v18, "Could not find ticket id in fServiceRequestsDatabase.");
    uint64_t v20 = 108LL;
    if (SHIBYTE(v19) < 0)
    {
      sub_1000063A8(&v21, v18[0], (unint64_t)v18[1]);
      uint64_t v7 = v20;
    }

    else
    {
      __int128 v21 = *(_OWORD *)v18;
      uint64_t v22 = v19;
      uint64_t v7 = 108LL;
    }

    uint64_t v10 = v7;
    __int128 v11 = v21;
    uint64_t v12 = v22;
    __int128 v21 = 0uLL;
    uint64_t v22 = 0LL;
    char v13 = 1;
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 648) = 0;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)&v10);
    if (v13 && SHIBYTE(v12) < 0)
    {
      uint64_t v9 = (void *)v11;
LABEL_22:
      operator delete(v9);
    }
  }

  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  if (SHIBYTE(v19) < 0)
  {
    BOOL v6 = v18[0];
    goto LABEL_27;
  }

void sub_1001342E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, char a46)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100134374(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v23 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "RoseServiceProvider::unregisterForService ticket: %d",  buf,  8u);
  }

  sub_100149D9C(*(void *)(a1 + 160), a2, buf);
  if (v24)
  {
    sub_100143E84(a1 + 184, a2);
    v18[0] = 0;
    char v21 = 0;
    *(_BYTE *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 648) = 0;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)v18);
    if (v21 && v20 < 0)
    {
      uint64_t v7 = v19;
LABEL_19:
      operator delete(v7);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DCD4();
    }
    sub_1000065CC(v9, "Ticket ID not found in requests database.");
    uint64_t v11 = 108LL;
    if (SHIBYTE(v10) < 0)
    {
      sub_1000063A8(&v12, v9[0], (unint64_t)v9[1]);
      uint64_t v8 = v11;
    }

    else
    {
      __int128 v12 = *(_OWORD *)v9;
      uint64_t v13 = v10;
      uint64_t v8 = 108LL;
    }

    uint64_t v14 = v8;
    *(_OWORD *)__int128 __p = v12;
    uint64_t v16 = v13;
    __int128 v12 = 0uLL;
    uint64_t v13 = 0LL;
    char v17 = 1;
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 648) = 0;
    sub_100137614((_BYTE *)(a3 + 656), (uint64_t)&v14);
    if (v17 && SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)v12);
    }
    if (SHIBYTE(v10) < 0)
    {
      uint64_t v7 = v9[0];
      goto LABEL_19;
    }
  }

void sub_100134568( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, char a38)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001345D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  v5[0] = &off_1007AF5C8;
  v5[1] = a2;
  BOOL v6 = v5;
  sub_100149F58(v2, (uint64_t)v5);
  __n128 result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    __n128 result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_100134670( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1001346AC(uint64_t a1, __int16 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038DD34();
  }
  __int16 v11 = *a2;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  __int128 v12 = 0LL;
  sub_1001309C0(&v12, *((const void **)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  __int128 v15 = *((_OWORD *)a2 + 2);
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1001347DC;
  block[3] = &unk_1007AF120;
  block[4] = a1;
  __int16 v6 = v11;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  __int128 __p = 0LL;
  sub_1001309C0(&__p, v12, (uint64_t)v13, v13 - (_BYTE *)v12);
  __int128 v10 = v15;
  dispatch_async(v4, block);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }

  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }

void sub_1001347C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1001347DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 72LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

__n128 sub_1001347F8(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = 0LL;
  uint64_t v4 = a1 + 48;
  *(_WORD *)(a1 + 40) = v3;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  sub_1001309C0( (void *)(a1 + 48),  *(const void **)(a2 + 48),  *(void *)(a2 + 56),  *(void *)(a2 + 56) - *(void *)(a2 + 48));
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 24) = result;
  return result;
}

void sub_100134844(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_10013485C(uint64_t a1, __int16 *a2)
{
}

uint64_t sub_100134864(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038DD60();
  }
  uint64_t result = *(void *)(a1 + 2384);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32LL))(result, a2);
  }
  return result;
}

uint64_t sub_1001348CC(uint64_t a1, uint64_t a2)
{
  return sub_100134864(a1 - 24, a2);
}

void sub_1001348D4(uint64_t a1)
{
}

void sub_1001348E4(uint64_t a1, _WORD *a2)
{
  unsigned int v4 = atomic_load((unsigned int *)(a1 + 2396));
  BOOL v5 = v4 >= 4;
  BOOL v7 = v4 == 4;
  int v6 = (1 << v4) & 0x19;
  BOOL v7 = !v7 && v5 || v6 == 0;
  if (v7)
  {
    sub_1001355B8();
    uint64_t v8 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] Service request passed prelimenary checks, passing to the scheduler.",  v9,  2u);
    }

    sub_100143168(a1 + 184, a2);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038DD8C();
    }
    unsigned __int16 v10 = *a2;
    uint64_t v11 = 8LL;
    sub_10014A150(*(void *)(a1 + 160), v10);
    sub_100135528(a1, (uint64_t *)&v10);
  }

uint64_t sub_1001349E0(uint64_t a1, __int128 *a2)
{
  __int128 v4 = a2[1];
  __int128 v20 = *a2;
  __int128 v21 = v4;
  __int128 v22 = a2[2];
  sub_1001376C0(v23, (uint64_t)(a2 + 3));
  sub_1001317DC(v24, (uint64_t)(a2 + 38));
  sub_100137714(v27, (__n128 *)((char *)a2 + 760));
  memcpy(v31, a2 + 55, sizeof(v31));
  block[1] = 3321888768LL;
  __int128 v8 = v20;
  BOOL v5 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100134C14;
  block[3] = &unk_1007AF170;
  block[4] = a1;
  __int128 v9 = v21;
  __int128 v10 = v22;
  sub_1001376C0(v11, (uint64_t)v23);
  sub_1001317DC(v12, (uint64_t)v24);
  sub_100137714(v15, v27);
  memcpy(v19, v31, sizeof(v19));
  dispatch_async(v5, block);
  if (v18 && __p)
  {
    char v17 = __p;
    operator delete(__p);
  }

  if (v14) {
    sub_100034A98((uint64_t)v13, v13[1]);
  }
  sub_100124BFC((uint64_t)v11);
  if (v30 && v28)
  {
    char v29 = v28;
    operator delete(v28);
  }

  if (v26) {
    sub_100034A98((uint64_t)v25, v25[1]);
  }
  return sub_100124BFC((uint64_t)v23);
}

void sub_100134BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (LOBYTE(STACK[0x320])) {
    sub_10038DDB8((uint64_t)va);
  }
  sub_100124BFC(v2);
  sub_10012EE88((uint64_t)&STACK[0x5E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100134C14(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void *sub_100134C30(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  sub_1001376C0((_BYTE *)(a1 + 88), a2 + 88);
  sub_1001317DC((_BYTE *)(a1 + 648), a2 + 648);
  sub_100137714((__n128 *)(a1 + 800), (__n128 *)(a2 + 800));
  return memcpy((void *)(a1 + 920), (const void *)(a2 + 920), 0x239uLL);
}

void sub_100134CA4(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 + 792)) {
    sub_10038DDF8(v2);
  }
  sub_100124BFC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100134CD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 912))
  {
    uint64_t v2 = *(void **)(a1 + 872);
    if (v2)
    {
      *(void *)(a1 + 880) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 792)) {
    sub_100034A98(a1 + 664, *(void **)(a1 + 672));
  }
  return sub_100124BFC(a1 + 88);
}

uint64_t sub_100134D1C(uint64_t a1, __int128 *a2)
{
  return sub_1001349E0(a1 - 8, a2);
}

__n128 sub_100134D24(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[6];
  __int128 v18 = a2[7];
  __int128 v3 = a2[9];
  __int128 v19 = a2[8];
  __int128 v20 = v3;
  __int128 v21 = a2[10];
  __int128 v4 = a2[2];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v14 = a2[3];
  __int128 v15 = v5;
  __int128 v16 = v6;
  __int128 v17 = v2;
  __int128 v7 = a2[1];
  __int128 v11 = *a2;
  __int128 v12 = v7;
  __int128 v13 = v4;
  __int128 v8 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134DBC;
  block[3] = &unk_1007AF1A0;
  block[4] = a1;
  dispatch_async(v8, block);
  return result;
}

uint64_t sub_100134DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 24LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void sub_100134DD8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[6];
  __int128 v18 = a2[7];
  __int128 v3 = a2[9];
  __int128 v19 = a2[8];
  __int128 v20 = v3;
  __int128 v21 = a2[10];
  __int128 v4 = a2[2];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v14 = a2[3];
  __int128 v15 = v5;
  __int128 v16 = v6;
  __int128 v17 = v2;
  __int128 v7 = a2[1];
  __int128 v11 = *a2;
  __int128 v12 = v7;
  uint64_t v8 = a1 - 8;
  __int128 v13 = v4;
  __int128 v9 = *(dispatch_queue_s **)(a1 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134DBC;
  block[3] = &unk_1007AF1A0;
  block[4] = v8;
  dispatch_async(v9, block);
}

void sub_100134E70(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v5 = *a2;
  __int128 v6 = v2;
  __int128 v7 = a2[2];
  __int128 v3 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134ED8;
  block[3] = &unk_1007AF1C0;
  block[4] = a1;
  dispatch_async(v3, block);
}

uint64_t sub_100134ED8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 32LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void sub_100134EF4(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v6 = *a2;
  __int128 v7 = v2;
  uint64_t v3 = a1 - 8;
  __int128 v8 = a2[2];
  __int128 v4 = *(dispatch_queue_s **)(a1 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134ED8;
  block[3] = &unk_1007AF1C0;
  block[4] = v3;
  dispatch_async(v4, block);
}

void sub_100134F5C(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v6 = *a2;
  __int128 v7 = v2;
  __int128 v3 = a2[3];
  __int128 v8 = a2[2];
  __int128 v9 = v3;
  __int128 v4 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134FC4;
  block[3] = &unk_1007AF1E0;
  block[4] = a1;
  dispatch_async(v4, block);
}

uint64_t sub_100134FC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 40LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void sub_100134FE0(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v2;
  __int128 v3 = a2[3];
  __int128 v9 = a2[2];
  __int128 v10 = v3;
  uint64_t v4 = a1 - 8;
  __int128 v5 = *(dispatch_queue_s **)(a1 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100134FC4;
  block[3] = &unk_1007AF1E0;
  block[4] = v4;
  dispatch_async(v5, block);
}

void sub_100135048(uint64_t a1, __int128 *a2)
{
  __int128 v17 = *a2;
  char v18 = *((_BYTE *)a2 + 16);
  sub_1001377E0((uint64_t)v19, (uint64_t)a2 + 24);
  __int128 v25 = *(__int128 *)((char *)a2 + 104);
  __int128 v26 = *(__int128 *)((char *)a2 + 120);
  v27[0] = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)((char *)v27 + 9) = *(__int128 *)((char *)a2 + 145);
  __int128 v24 = *(__int128 *)((char *)a2 + 88);
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 144);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  v5[2] = sub_1001351B4;
  void v5[3] = &unk_1007AF200;
  v5[4] = a1;
  char v7 = v18;
  __int128 v6 = v17;
  sub_1001377E0((uint64_t)&v8, (uint64_t)v19);
  __int128 v15 = v26;
  v16[0] = v27[0];
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v27 + 9);
  __int128 v13 = v24;
  __int128 v14 = v25;
  dispatch_async(v4, v5);
  if (v12 && v11 && v10 < 0) {
    operator delete(__p);
  }
  if (v23 && v22 && v21 < 0) {
    operator delete(v20);
  }
}

void sub_100135188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, int a42, __int16 a43, char a44, char a45, char a46, uint64_t a47, char a48)
{
  if (a48 && a46 && a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001351B4(uint64_t a1)
{
}

void sub_1001351C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] _handleSchedulerUpdate",  (uint8_t *)v8,  2u);
  }

  switch(*(_DWORD *)a2)
  {
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unspecified scheduler update type");
    case 1:
      if (!*(_BYTE *)(a2 + 16)) {
        sub_10038DE08();
      }
      sub_100136058(a1, (unsigned __int16 *)(a2 + 4));
      break;
    case 2:
      if (!*(_BYTE *)(a2 + 80)) {
        sub_10038DE30();
      }
      sub_100136A78(a1, a2 + 24);
      break;
    case 3:
      if (!*(_BYTE *)(a2 + 112)) {
        sub_10038DE58();
      }
      sub_100135CE0(a1, a2 + 88);
      break;
    case 4:
      if (!*(_BYTE *)(a2 + 120)) {
        sub_10038DE80();
      }
      int v5 = *(_DWORD *)(a2 + 116);
      __int128 v6 = *(dispatch_queue_s **)(a1 + 152);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100135CC4;
      void v8[3] = &unk_1007AF260;
      v8[4] = a1;
      int v9 = v5;
      dispatch_async(v6, v8);
      break;
    case 5:
      if (!*(_BYTE *)(a2 + 160)) {
        sub_10038DEA8();
      }
      sub_100135880(a1, (unsigned __int16 *)(a2 + 124));
      break;
    default:
      return;
  }

void sub_10013534C(_Unwind_Exception *a1)
{
}

__n128 sub_100135360(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_1001377E0(a1 + 64, a2 + 64);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v6 = *(_OWORD *)(a2 + 160);
  __int128 v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_1001353BC(uint64_t a1)
{
  return sub_1001378F4(a1 + 64);
}

void sub_1001353C4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 176)) {
    sub_10038DED0();
  }
  *(_OWORD *)char v10 = *(_OWORD *)a2;
  *(void *)&v10[13] = *(void *)(a2 + 13);
  sub_100137614(v11, a2 + 24);
  __int128 v3 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1001354D4;
  block[3] = &unk_1007AF230;
  block[4] = a1;
  *(_OWORD *)int v5 = *(_OWORD *)v10;
  *(void *)&v5[13] = *(void *)&v10[13];
  sub_100137614(v6, (uint64_t)v11);
  dispatch_async(v3, block);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  if (v14)
  {
    if (v13 < 0) {
      operator delete(v12);
    }
  }

void sub_1001354B0(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 - 40))
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1001354D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 48LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

_BYTE *sub_1001354F0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 53) = *(void *)(a2 + 53);
  *(_OWORD *)(a1 + 40) = v2;
  return sub_100137614((_BYTE *)(a1 + 64), a2 + 64);
}

void sub_10013550C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
  }

void sub_100135528(uint64_t a1, uint64_t *a2)
{
  v2[0] = *(_WORD *)a2;
  int v3 = 1;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  char v6 = 1;
  char v7 = 0;
  char v10 = 0;
  sub_1001353C4(a1, (uint64_t)v2);
  if (v10)
  {
    if (v9 < 0) {
      operator delete(__p);
    }
  }

void sub_100135594( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1001355B8()
{
  unsigned __int8 v0 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "RoseServiceProvider::validateServiceRequest",  v2,  2u);
  }

  return 1LL;
}

uint64_t sub_100135620(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 176LL);
  uint64_t v3 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 56LL))(v1, &v3);
}

void sub_10013565C(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 52)) {
    sub_10038DEF8();
  }
  int v2 = *(_DWORD *)(a2 + 48) - 1;
  else {
    unsigned int v3 = dword_100422FA0[v2];
  }
  atomic_store(2u, (unsigned int *)(a1 + 2396));
  atomic_store(v3, (unsigned int *)(a1 + 2400));
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 152);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1001356FC;
  void v5[3] = &unk_1007AF260;
  v5[4] = a1;
  unsigned int v6 = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_1001356FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 176LL);
  int v2 = *(_DWORD *)(a1 + 40);
  v4[0] = 2;
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v1 + 56LL))(v1, v4);
}

uint64_t sub_10013573C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 56LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

uint64_t sub_100135758(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 176LL);
  int v3 = 1;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v1 + 64LL))(v1, &v3);
}

uint64_t sub_100135790(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 176LL);
  int v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v1 + 64LL))(v1, &v3);
}

void sub_1001357C4(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 52)) {
    sub_10038DF20();
  }
  unsigned int v2 = *(_DWORD *)(a2 + 48) - 1;
  if (v2 > 4) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = dword_100422FA0[v2];
  }
  atomic_store(3u, (unsigned int *)(a1 + 2396));
  atomic_store(v3, (unsigned int *)(a1 + 2400));
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 152);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100135864;
  void v5[3] = &unk_1007AF100;
  v5[4] = a1;
  void v5[5] = (v3 << 32) | 3;
  dispatch_async(v4, v5);
}

uint64_t sub_100135864(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 56LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void sub_100135880(uint64_t a1, unsigned __int16 *a2)
{
  if (!*((_BYTE *)a2 + 28)) {
    sub_10038DF48();
  }
  unsigned int v4 = *a2 - 1;
  if (v4 > 0x19) {
    int v5 = "UNDEFINED";
  }
  else {
    int v5 = off_1007AF7A8[(__int16)v4];
  }
  __int16 v6 = *(unsigned __int16 *)((char *)a2 + 29);
  sub_1000065CC(v31, v5);
  unsigned int v7 = a2[1] - 1;
  if (v7 > 0x13) {
    char v8 = "UNDEFINED";
  }
  else {
    char v8 = off_1007AF878[(__int16)v7];
  }
  sub_1000065CC(v29, v8);
  std::operator+<char>(&v26, "Error: ", v31);
  char v9 = std::string::append(&v26, ", Subtype: ");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if ((v30 & 0x80u) == 0) {
    char v11 = (const std::string::value_type *)v29;
  }
  else {
    char v11 = (const std::string::value_type *)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v12 = v30;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v29[1];
  }
  char v13 = std::string::append(&v27, v11, v12);
  char v14 = (void *)v13->__r_.__value_.__r.__words[0];
  size = (void *)v13->__r_.__value_.__l.__size_;
  v28[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  int v16 = (char)v13->__r_.__value_.__s.__size_;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (*((_BYTE *)a2 + 31))
  {
    BOOL v17 = *((_DWORD *)a2 + 8) == 13;
    uint64_t v18 = 1000LL;
    uint64_t v19 = 110LL;
  }

  else
  {
    uint64_t v18 = 1000LL;
    if (a2[1] == 13) {
      uint64_t v18 = 2002LL;
    }
    BOOL v17 = v18 == 1000;
    uint64_t v19 = 999LL;
  }

  if (v17) {
    uint64_t v18 = v19;
  }
  __int128 v20 = *(dispatch_queue_s **)(a1 + 152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100135B4C;
  block[3] = &unk_1007AF280;
  __int16 v25 = v6;
  block[4] = a1;
  void block[5] = v18;
  if (v16 < 0)
  {
    sub_1000063A8(__p, v14, (unint64_t)size);
  }

  else
  {
    __p[0] = v14;
    __p[1] = size;
    *(_DWORD *)char v23 = v28[0];
    *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v28 + 3);
    char v24 = v16;
  }

  dispatch_async(v20, block);
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_30;
    }
  }

  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }

  operator delete(v14);
LABEL_30:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
}

void sub_100135ADC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
}

void sub_100135B4C(uint64_t a1)
{
  __int16 v1 = *(_WORD *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = v2;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_1000063A8(&__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v2 = v4;
  }

  else
  {
    __int128 __p = *(_OWORD *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 64);
  }

  v7[0] = v1;
  int v8 = 2;
  char v9 = 0;
  char v10 = 0;
  uint64_t v11 = v2;
  if (SHIBYTE(v6) < 0)
  {
    sub_1000063A8(&v12, (void *)__p, *((unint64_t *)&__p + 1));
    char v14 = 1;
    if (SHIBYTE(v6) < 0) {
      operator delete((void *)__p);
    }
  }

  else
  {
    __int128 v12 = __p;
    uint64_t v13 = v6;
    char v14 = 1;
  }

  (*(void (**)(void, _WORD *))(**(void **)(v3 + 176) + 48LL))(*(void *)(v3 + 176), v7);
  if (v14)
  {
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)v12);
    }
  }

void sub_100135C48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100135C80(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)__n128 result = v3;
  return result;
}

void sub_100135CB0(uint64_t a1)
{
}

uint64_t sub_100135CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 80LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

void sub_100135CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseServiceProvider::onRegulatoryConfigurationUpdate.",  (uint8_t *)&v10,  2u);
  }

  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 2376) + 48LL))(&v17);
  int v5 = *(dispatch_queue_s **)(a1 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100135EC4;
  block[3] = &unk_1007AF2B0;
  block[4] = a1;
  __int128 __p = 0LL;
  __int128 v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100137E68(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  dispatch_async(v5, block);
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 != 4)
  {
    if (v6 != 5) {
      goto LABEL_9;
    }
    if (*(_BYTE *)(a2 + 16))
    {
      uint64_t v7 = *(unsigned int *)(a2 + 12);
      LODWORD(v10) = 1;
      *(void *)((char *)&v10 + 4) = v7 | (unint64_t)&_mh_execute_header;
      BYTE12(v10) = 1;
      char v11 = 0;
      char v12 = 0;
      sub_10012EEDC(a1 + 464, &v10);
      goto LABEL_9;
    }

    int v9 = 643;
LABEL_16:
    __assert_rtn("onRegulatoryConfigurationUpdate", "RoseServiceProvider.mm", v9, "event.accessory.has_value()");
  }

  if (!*(_BYTE *)(a2 + 16))
  {
    int v9 = 636;
    goto LABEL_16;
  }

  uint64_t v8 = *(unsigned int *)(a2 + 12);
  LODWORD(v10) = 1;
  *(void *)((char *)&v10 + 4) = v8;
  BYTE12(v10) = 1;
  char v11 = 0;
  char v12 = 0;
  sub_10012EEDC(a1 + 464, &v10);
LABEL_9:
  if (__p)
  {
    __int128 v15 = __p;
    operator delete(__p);
  }

  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }

void sub_100135E88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  char v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(exception_object);
}

void sub_100135EC4(uint64_t a1)
{
  __int16 v1 = *(void **)(a1 + 32);
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v2 = v1[20];
  v13[0] = &off_1007AF658;
  v13[1] = &v7;
  v13[2] = a1 + 40;
  char v14 = v13;
  sub_100149F58(v2, (uint64_t)v13);
  __int128 v3 = v14;
  if (v14 == v13)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  int v5 = v7;
  int v6 = v8;
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(void **__return_ptr, void *, void))(*v1 + 48LL))(v10, v1, *v5);
      if (v12 && v11 < 0) {
        operator delete(v10[83]);
      }
      ++v5;
    }

    while (v5 != v6);
    int v5 = v7;
  }

  if (v5)
  {
    uint64_t v8 = v5;
    operator delete(v5);
  }

void sub_100135FD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  char v14 = *(void **)(v12 - 48);
  if (v14 == v11)
  {
    uint64_t v15 = 4LL;
    char v14 = (void *)(v12 - 72);
  }

  else
  {
    if (!v14) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100136028(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  uint64_t v2 = (void *)(a1 + 40);
  _WORD v2[2] = 0LL;
  return sub_100137E68(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
}

void sub_100136040(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }

void sub_100136058(uint64_t a1, unsigned __int16 *a2)
{
  switch(*((_DWORD *)a2 + 1))
  {
    case 0:
    case 0xC:
      uint64_t v8 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_100136520(*((_DWORD *)a2 + 1), v24);
        sub_10038DF70();
      }

      return;
    case 1:
      uint64_t v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RangingDidStart",  (uint8_t *)v24,  2u);
      }

      sub_100136864(a1, *a2);
      goto LABEL_38;
    case 2:
      __int128 v10 = (os_log_s *)qword_1008000A0;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RangingFailedToStart",  (uint8_t *)v24,  2u);
      }

      sub_100136920(v11, *a2);
      goto LABEL_38;
    case 3:
      uint64_t v12 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RangingStopped",  (uint8_t *)v24,  2u);
      }

      sub_1001369C0(a1, *a2);
      goto LABEL_38;
    case 4:
      uint64_t v13 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RequestInvalidated",  (uint8_t *)v24,  2u);
      }

      int v14 = *a2;
      unsigned int v15 = atomic_load((unsigned int *)(a1 + 2404));
      if (v15 == v14)
      {
        uint64_t v16 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *a2;
          LODWORD(v24[0]) = 67109120;
          HIDWORD(v24[0]) = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Ignoring RequestInvalidated notification for ticket ID: %d",  (uint8_t *)v24,  8u);
        }

        uint64_t v18 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v24[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "<rdar://problem/48775916> Ticket IDs should be generated by the AOP",  (uint8_t *)v24,  2u);
        }

        atomic_store(0xFFFFFFFF, (unsigned int *)(a1 + 2404));
      }

      else
      {
        sub_100136534(a1, *a2);
LABEL_38:
        sub_100135528(a1, (uint64_t *)a2);
      }

      break;
    case 5:
      uint64_t v19 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] JobStart",  (uint8_t *)v24,  2u);
      }

      sub_100136708(a1, *a2);
      goto LABEL_38;
    case 6:
      uint64_t v20 = (os_log_s *)qword_1008000A0;
      BOOL v21 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] JobStop",  (uint8_t *)v24,  2u);
      }

      sub_1001367C4(v21, *a2);
      goto LABEL_38;
    case 7:
    case 8:
    case 9:
      uint64_t v4 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        sub_100136520(*((_DWORD *)a2 + 1), v24);
        sub_10038DF70();
      }

      int v5 = (std::mutex *)(a1 + 32);
      std::mutex::lock((std::mutex *)(a1 + 32));
      sub_100136534(a1, *a2);
      int v6 = (unsigned int *)(a1 + 2392);
      unsigned int v7 = 2;
      goto LABEL_34;
    case 0xA:
    case 0xB:
      goto LABEL_38;
    case 0xD:
      char v22 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] ServiceRequestReceived_Internal",  (uint8_t *)v24,  2u);
      }

      int v5 = (std::mutex *)(a1 + 32);
      std::mutex::lock((std::mutex *)(a1 + 32));
      sub_100136608(a1, *a2);
      int v6 = (unsigned int *)(a1 + 2392);
      unsigned int v7 = 1;
LABEL_34:
      atomic_store(v7, v6);
      std::mutex::unlock(v5);
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 96));
      break;
    case 0xE:
      char v23 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] TriggerCommandUpdated",  (uint8_t *)v24,  2u);
      }

      break;
    default:
      return;
  }

void sub_1001364E8(_Unwind_Exception *a1)
{
}

void *sub_100136520@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF918[a1]);
}

void sub_100136534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] serviceCancelRoutine for ticket ID %d",  (uint8_t *)v5,  8u);
  }

  sub_100133A08(a1, a2, 0);
  sub_10014A150(*(void *)(a1 + 160), a2);
  sub_10012BD90(a1 + 464, a2);
}

void sub_100136608(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] serviceAcceptedRoutine for ticket ID %d",  (uint8_t *)v5,  8u);
  }

  sub_100149D9C(*(void *)(a1 + 160), a2, v5);
  if (v8
    && (sub_10012BCE8(a1 + 464, v6, v7) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038DFC4();
  }

void sub_100136708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] jobStartRoutine for ticket ID %d",  (uint8_t *)v5,  8u);
  }

  sub_100133A08(a1, a2, 1);
}

void sub_1001367C4(uint64_t a1, int a2)
{
  __int128 v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] jobStopRoutine for ticket ID %d",  (uint8_t *)v4,  8u);
  }

uint64_t sub_100136864(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] rangingStartRoutine for ticket ID %d",  (uint8_t *)v6,  8u);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 2376) + 80LL))(*(void *)(a1 + 2376));
}

void sub_100136920(uint64_t a1, int a2)
{
  __int128 v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] rangingFailedToStartRoutine for ticket ID %d",  (uint8_t *)v4,  8u);
  }

void sub_1001369C0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] rangingStopRoutine for ticket ID %d",  (uint8_t *)v5,  8u);
  }

  sub_10012BFA8(a1 + 464, a2);
}

void sub_100136A78(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038E018();
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "[RoseServiceProvider] RoseInfrastructureEvent::Unspecified");
    case 1:
      uint64_t v4 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::Boot",  (uint8_t *)&__p,  2u);
      }

      int v5 = *(dispatch_queue_s **)(a1 + 152);
      __int128 __p = _NSConcreteStackBlock;
      unsigned __int16 v6 = sub_100135758;
      goto LABEL_17;
    case 2:
      __int128 v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::AOPJobsReset",  (uint8_t *)&__p,  2u);
      }

      int v5 = *(dispatch_queue_s **)(a1 + 152);
      __int128 __p = _NSConcreteStackBlock;
      unsigned __int16 v6 = sub_100135790;
      goto LABEL_17;
    case 3:
      uint64_t v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::Ready",  (uint8_t *)&__p,  2u);
      }

      atomic_store(1u, (unsigned int *)(a1 + 2396));
      atomic_store(0, (unsigned int *)(a1 + 2400));
      int v5 = *(dispatch_queue_s **)(a1 + 152);
      __int128 __p = _NSConcreteStackBlock;
      unsigned __int16 v6 = sub_100135620;
LABEL_17:
      uint64_t v15 = 3221225472LL;
      uint64_t v16 = v6;
      int v17 = &unk_1007A2398;
      uint64_t v18 = a1;
      goto LABEL_18;
    case 4:
      char v8 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::Ready_UWB",  (uint8_t *)&__p,  2u);
      }

      sub_10013565C(a1, a2);
      return;
    case 5:
      int v7 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::Error",  (uint8_t *)&__p,  2u);
      }

      atomic_store(4u, (unsigned int *)(a1 + 2396));
      atomic_store(2u, (unsigned int *)(a1 + 2400));
      int v5 = *(dispatch_queue_s **)(a1 + 152);
      __int128 __p = _NSConcreteStackBlock;
      uint64_t v15 = 3221225472LL;
      uint64_t v16 = sub_10013573C;
      int v17 = &unk_1007AF100;
      uint64_t v18 = a1;
      uint64_t v19 = 0x200000004LL;
LABEL_18:
      dispatch_async(v5, &__p);
      break;
    case 6:
      if (!*(_BYTE *)(a2 + 52)) {
        sub_10038DFF0();
      }
      sub_1000065CC(&__p, off_1007AF990[*(int *)(a2 + 48)]);
      BOOL v11 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if (SHIBYTE(v16) < 0) {
          p_p = __p;
        }
        *(_DWORD *)__int128 buf = 136315138;
        BOOL v21 = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[RoseServiceProvider] RoseInfrastructureEvent::SystemOff with Reason: %s",  buf,  0xCu);
      }

      sub_1001357C4(a1, a2);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p);
      }
      break;
    default:
      return;
  }

void sub_100136E50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100136E84()
{
}

void *sub_100136E8C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *a1 = off_1007AF2F0;
  a1[1] = off_1007AF390;
  a1[2] = off_1007AF3D0;
  a1[3] = off_1007AF3F8;
  a1[4] = a2;
  id v6 = v5;
  a1[5] = v6;
  if (!a2)
  {
    char v8 = "service_client";
    int v9 = 991;
    goto LABEL_6;
  }

  if (!v6)
  {
    char v8 = "queue";
    int v9 = 992;
LABEL_6:
    __assert_rtn("RoseServiceProviderSurrogate", "RoseServiceProvider.mm", v9, v8);
  }

  return a1;
}

void sub_100136F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100136F44(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100136F9C;
  block[3] = &unk_1007A2398;
  block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_100136F9C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[4];
  uint64_t v4 = (*(uint64_t (**)(void *))(*v1 + 72LL))(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 56LL))(v2, &v4);
}

void sub_100136FEC(uint64_t a1@<X8>)
{
  uint64_t v5 = 10LL;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000063A8(&v6, v3[0], (unint64_t)v3[1]);
    uint64_t v2 = v5;
  }

  else
  {
    __int128 v6 = *(_OWORD *)v3;
    uint64_t v7 = v4;
    uint64_t v2 = 10LL;
  }

  uint64_t v8 = v2;
  *(_OWORD *)__int128 __p = v6;
  uint64_t v10 = v7;
  __int128 v6 = 0uLL;
  uint64_t v7 = 0LL;
  char v11 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 1;
  sub_100137614((_BYTE *)(a1 + 656), (uint64_t)&v8);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_1001370D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100137120(uint64_t a1@<X8>)
{
  uint64_t v5 = 10LL;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000063A8(&v6, v3[0], (unint64_t)v3[1]);
    uint64_t v2 = v5;
  }

  else
  {
    __int128 v6 = *(_OWORD *)v3;
    uint64_t v7 = v4;
    uint64_t v2 = 10LL;
  }

  uint64_t v8 = v2;
  *(_OWORD *)__int128 __p = v6;
  uint64_t v10 = v7;
  __int128 v6 = 0uLL;
  uint64_t v7 = 0LL;
  char v11 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  sub_100137614((_BYTE *)(a1 + 656), (uint64_t)&v8);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_100137204( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100137250(uint64_t a1@<X8>)
{
  uint64_t v5 = 10LL;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000063A8(&v6, v3[0], (unint64_t)v3[1]);
    uint64_t v2 = v5;
  }

  else
  {
    __int128 v6 = *(_OWORD *)v3;
    uint64_t v7 = v4;
    uint64_t v2 = 10LL;
  }

  uint64_t v8 = v2;
  *(_OWORD *)__int128 __p = v6;
  uint64_t v10 = v7;
  __int128 v6 = 0uLL;
  uint64_t v7 = 0LL;
  char v11 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  sub_100137614((_BYTE *)(a1 + 656), (uint64_t)&v8);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_100137334( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100137380(uint64_t a1@<X8>)
{
  uint64_t v5 = 10LL;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000063A8(&v6, v3[0], (unint64_t)v3[1]);
    uint64_t v2 = v5;
  }

  else
  {
    __int128 v6 = *(_OWORD *)v3;
    uint64_t v7 = v4;
    uint64_t v2 = 10LL;
  }

  uint64_t v8 = v2;
  *(_OWORD *)__int128 __p = v6;
  uint64_t v10 = v7;
  __int128 v6 = 0uLL;
  uint64_t v7 = 0LL;
  char v11 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  sub_100137614((_BYTE *)(a1 + 656), (uint64_t)&v8);
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_100137464( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001374B0()
{
  return 0x600000003LL;
}

uint64_t sub_1001374BC(uint64_t a1)
{
  uint64_t v1 = atomic_load((unsigned int *)(a1 + 2396));
  uint64_t v2 = atomic_load((unsigned int *)(a1 + 2400));
  return v1 | (v2 << 32);
}

uint64_t sub_1001374D4(uint64_t a1)
{
  return a1;
}

void sub_1001374FC(id *a1)
{
}

uint64_t sub_100137544()
{
  return 0LL;
}

void sub_10013754C(uint64_t a1)
{
}

void sub_100137554(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 - 8);

  operator delete(v1);
}

void sub_10013758C(uint64_t a1)
{
}

void sub_100137594(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 - 16);

  operator delete(v1);
}

void sub_1001375C0(uint64_t a1)
{
}

void sub_1001375C8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 - 24);

  operator delete(v1);
}

uint64_t sub_1001375F0()
{
  return 0LL;
}

uint64_t sub_1001375F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 176LL) + 56LL))( *(void *)(*(void *)(a1 + 32) + 176LL),  a1 + 40);
}

_BYTE *sub_100137614(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32)) {
    sub_100137668((uint64_t)a1, a2);
  }
  return a1;
}

void sub_10013764C(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32)) {
    sub_10038E044(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100137668(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __n128 result = (void *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    __n128 result = sub_1000063A8(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
    *(_OWORD *)__n128 result = v4;
  }

  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

_BYTE *sub_1001376C0(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[552] = 0;
  if (*(_BYTE *)(a2 + 552))
  {
    sub_10012554C((uint64_t)a1, a2);
    a1[552] = 1;
  }

  return a1;
}

void sub_100137700(_Unwind_Exception *a1)
{
}

__n128 *sub_100137714(__n128 *a1, __n128 *a2)
{
  a1->n128_u8[0] = 0;
  a1[7].n128_u8[0] = 0;
  sub_10013775C(a1, a2);
  return a1;
}

void sub_100137740(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 112)) {
    sub_10038E054(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10013775C(__n128 *a1, __n128 *a2)
{
  if (a2[7].n128_u8[0])
  {
    unint64_t v3 = a2->n128_u64[0];
    a1->n128_u16[4] = a2->n128_u16[4];
    a1->n128_u64[0] = v3;
    __n128 v4 = a2[1];
    __n128 v5 = a2[2];
    __n128 v6 = a2[3];
    LODWORD(v3) = a2[4].n128_u32[0];
    a1[4].n128_u64[1] = 0LL;
    uint64_t v7 = &a1[4].n128_i64[1];
    a1[4].n128_u32[0] = v3;
    a1[3] = v6;
    a1[2] = v5;
    a1[1] = v4;
    a1[5].n128_u64[0] = 0LL;
    a1[5].n128_u64[1] = 0LL;
    sub_100130F40( &a1[4].n128_u64[1],  (const void *)a2[4].n128_u64[1],  a2[5].n128_i64[0],  (uint64_t)(a2[5].n128_u64[0] - a2[4].n128_u64[1]) >> 4);
    __n128 result = a2[6];
    *(__n128 *)(v7 + 3) = result;
    *((_BYTE *)v7 + 40) = 1;
  }

  return result;
}

uint64_t sub_1001377E0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    sub_100137848((_BYTE *)(a1 + 8), a2 + 8);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = 1;
  }

  return a1;
}

void sub_100137834(_Unwind_Exception *a1)
{
}

_BYTE *sub_100137848(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32)) {
    sub_10013789C((uint64_t)a1, a2);
  }
  return a1;
}

void sub_100137880(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32)) {
    sub_10038E044(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013789C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __n128 result = (void *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    __n128 result = sub_1000063A8(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
    *(_OWORD *)__n128 result = v4;
  }

  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_1001378F4(uint64_t a1)
{
  return a1;
}

void *sub_100137934@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  __n128 result = sub_10013797C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100137968(_Unwind_Exception *a1)
{
}

void *sub_10013797C(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1007AF4E8;
  sub_100149CE0((uint64_t)(a1 + 3));
  return a1;
}

void sub_1001379B0(_Unwind_Exception *a1)
{
}

void sub_1001379C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007AF4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001379D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007AF4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1001379F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_100137A0C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1007AF538;
  result[1] = v3;
  return result;
}

uint64_t sub_100137A40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007AF538;
  a2[1] = v2;
  return result;
}

__n128 sub_100137A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__int128 **)(a1 + 8);
  if (*(_BYTE *)(a2 + 632)) {
    *(_BYTE *)(a2 + 632) = 0;
  }
  __int128 v3 = *v2;
  __int128 v4 = v2[2];
  *(_OWORD *)(a2 + 536) = v2[1];
  *(_OWORD *)(a2 + 552) = v4;
  *(_OWORD *)(a2 + 520) = v3;
  __n128 result = (__n128)v2[3];
  __int128 v6 = v2[4];
  __int128 v7 = v2[6];
  *(_OWORD *)(a2 + 600) = v2[5];
  *(_OWORD *)(a2 + 616) = v7;
  *(__n128 *)(a2 + 568) = result;
  *(_OWORD *)(a2 + 584) = v6;
  *(_BYTE *)(a2 + 632) = 1;
  return result;
}

uint64_t sub_100137A9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100137AD8()
{
}

void *sub_100137AEC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1007AF5C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100137B20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007AF5C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100137B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24LL);
  if (!v2) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48LL))(v2, a2 + 16);
}

uint64_t sub_100137B68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100137BA4()
{
}

__n128 sub_100137BB8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1007AF658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100137BF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007AF658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100137C10(uint64_t a1, uint64_t a2)
{
  __int16 v4 = sub_10013F48C(a2 + 16);
  __n128 v5 = *(unsigned __int8 ***)(a1 + 16);
  __int128 v6 = *v5;
  __int128 v7 = v5[1];
  if (*v5 == v7)
  {
    char v9 = 0;
    LOBYTE(v8) = 0;
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
  }

  else
  {
    int v8 = 0;
    char v9 = 0;
    do
    {
      int v11 = *v6++;
      int v10 = v11;
      if (v11 == 5) {
        int v12 = 1;
      }
      else {
        int v12 = v8;
      }
      if (v10 == 9) {
        char v9 = 1;
      }
      else {
        int v8 = v12;
      }
    }

    while (v6 != v7);
    if ((v4 & 1) == 0)
    {
LABEL_14:
      if (((v4 & 0x100) == 0) | v9 & 1) {
        return;
      }
      goto LABEL_15;
    }
  }

  if ((v8 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v13 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int16 *)(a2 + 8);
    v29[0] = 67109120;
    v29[1] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "RoseServiceProvider regulatory validation: ticket ID %d is canceled since channel configuration is no longer allowed.",  (uint8_t *)v29,  8u);
  }

  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(_WORD **)(v15 + 8);
  unint64_t v17 = *(void *)(v15 + 16);
  if ((unint64_t)v16 >= v17)
  {
    uint64_t v19 = *(_WORD **)v15;
    uint64_t v20 = (uint64_t)v16 - *(void *)v15;
    if (v20 <= -3) {
      sub_10001E11C();
    }
    uint64_t v21 = v20 >> 1;
    unint64_t v22 = v17 - (void)v19;
    if (v22 <= (v20 >> 1) + 1) {
      unint64_t v23 = v21 + 1;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v24 = v23;
    }
    if (v24)
    {
      __int16 v25 = (char *)sub_100137E38(v15 + 16, v24);
      uint64_t v19 = *(_WORD **)v15;
      uint64_t v16 = *(_WORD **)(v15 + 8);
    }

    else
    {
      __int16 v25 = 0LL;
    }

    std::string v26 = &v25[2 * v21];
    std::string v27 = &v25[2 * v24];
    *(_WORD *)std::string v26 = *(_WORD *)(a2 + 8);
    uint64_t v18 = v26 + 2;
    while (v16 != v19)
    {
      __int16 v28 = *--v16;
      *((_WORD *)v26 - 1) = v28;
      v26 -= 2;
    }

    *(void *)uint64_t v15 = v26;
    *(void *)(v15 + 8) = v18;
    *(void *)(v15 + 16) = v27;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    _WORD *v16 = *(_WORD *)(a2 + 8);
    uint64_t v18 = v16 + 1;
  }

  *(void *)(v15 + 8) = v18;
}

uint64_t sub_100137DF0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100137E2C()
{
  return &off_1007AF6B8;
}

void *sub_100137E38(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_10001D350();
  }
  return operator new(2 * a2);
}

void *sub_100137E68(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    __int128 v6 = result;
    __n128 result = sub_1000242D4(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100137EC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

  ;
}

void sub_100137EF0(uint64_t a1)
{
}

void sub_100137EF8(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_100137F20()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      uint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100422A38;
      v1[1] = unk_100422A48;
      v1[2] = xmmword_100422A58;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_100137FC0(_Unwind_Exception *a1)
{
}

void sub_100137FD8()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  sub_100320A4C(0LL, &v37);
  uint64_t v1 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v1->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0LL;
  v1->__r_.__value_.__l.__cap_ = 0LL;
  v1->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v3 = std::string::append(&v38, ".bin");
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1007F6B20 = v3->__r_.__value_.__l.__cap_;
  xmmword_1007F6B10 = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B10, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  __n128 v5 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v7 = std::string::append(&v38, ".bin");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1007F6B38 = v7->__r_.__value_.__l.__cap_;
  xmmword_1007F6B28 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B28, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  char v9 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  int v11 = std::string::append(&v38, ".bin");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1007F6B50 = v11->__r_.__value_.__l.__cap_;
  xmmword_1007F6B40 = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B40, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  uint64_t v13 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v15 = std::string::append(&v38, ".bin");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1007F6B68 = v15->__r_.__value_.__l.__cap_;
  xmmword_1007F6B58 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B58, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  unint64_t v17 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v19 = std::string::append(&v38, ".bin");
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1007F6B80 = v19->__r_.__value_.__l.__cap_;
  xmmword_1007F6B70 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B70, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  uint64_t v21 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v23 = std::string::append(&v38, ".bin");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1007F6B98 = v23->__r_.__value_.__l.__cap_;
  xmmword_1007F6B88 = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6B88, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  __int16 v25 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  std::string v27 = std::string::append(&v38, ".bin");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1007F6BB0 = v27->__r_.__value_.__l.__cap_;
  xmmword_1007F6BA0 = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6BA0, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  char v29 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v31 = std::string::append(&v38, ".bin");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1007F6BC8 = v31->__r_.__value_.__l.__cap_;
  xmmword_1007F6BB8 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6BB8, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  uint64_t v33 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v35 = std::string::append(&v38, ".bin");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1007F6BE0 = v35->__r_.__value_.__l.__cap_;
  xmmword_1007F6BD0 = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6BD0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001385CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100138640@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AF9C0[a1]);
}

void *sub_100138654@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFA18[a1]);
}

void *sub_100138668@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFA60[a1]);
}

void *sub_10013867C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFA80[a1]);
}

void sub_100138690( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, std::stringbuf::string_type *a9@<X8>)
{
  if (*((_BYTE *)a1 + 31))
  {
    int v11 = sub_10032B26C(a1[16], a2, a3, a4, a5, a6, a7, a8);
    sub_10032B2C8(v11, v40);
  }

  else
  {
    sub_1000065CC(v40, "N/A");
  }

  sub_100045754((uint64_t)v36);
  sub_100046B94(&v37, (uint64_t)"AOPRoseError. ", 14LL);
  __int128 v12 = sub_100046B94(&v37, (uint64_t)"Status:", 7LL);
  unsigned int v13 = *a1 - 1;
  if (v13 > 0x19) {
    __int128 v14 = "UNDEFINED";
  }
  else {
    __int128 v14 = off_1007AFAA0[(__int16)v13];
  }
  size_t v15 = strlen(v14);
  __int128 v16 = sub_100046B94(v12, (uint64_t)v14, v15);
  sub_100046B94(v16, (uint64_t)", ", 2LL);
  unint64_t v17 = sub_100046B94(&v37, (uint64_t)"Subtype: ", 9LL);
  unsigned int v18 = a1[1] - 1;
  if (v18 > 0x13) {
    uint64_t v19 = "UNDEFINED";
  }
  else {
    uint64_t v19 = off_1007AFB70[(__int16)v18];
  }
  size_t v20 = strlen(v19);
  uint64_t v21 = sub_100046B94(v17, (uint64_t)v19, v20);
  sub_100046B94(v21, (uint64_t)", ", 2LL);
  __int128 v22 = sub_100046B94(&v37, (uint64_t)"Ticket Id: ", 11LL);
  if (*((_BYTE *)a1 + 28)) {
    std::to_string(&v35, *(unsigned __int16 *)((char *)a1 + 29));
  }
  else {
    sub_1000065CC(&v35, "N/A");
  }
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v23 = &v35;
  }
  else {
    unint64_t v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = v35.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = v35.__r_.__value_.__l.__size_;
  }
  __int16 v25 = sub_100046B94(v22, (uint64_t)v23, size);
  sub_100046B94(v25, (uint64_t)", ", 2LL);
  __int128 v26 = sub_100046B94(&v37, (uint64_t)"Rose Error Code: ", 17LL);
  if ((v41 & 0x80u) == 0) {
    std::string v27 = v40;
  }
  else {
    std::string v27 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v28 = v41;
  }
  else {
    uint64_t v28 = (uint64_t)v40[1];
  }
  char v29 = sub_100046B94(v26, (uint64_t)v27, v28);
  sub_100046B94(v29, (uint64_t)", ", 2LL);
  __int128 v30 = sub_100046B94(&v37, (uint64_t)"[Arg1: ", 7LL);
  std::ostream::operator<<(v30, *(void *)(a1 + 2));
  uint64_t v31 = sub_100046B94(&v37, (uint64_t)", Arg2: ", 8LL);
  std::ostream::operator<<(v31, *(void *)(a1 + 6));
  __int128 v32 = sub_100046B94(&v37, (uint64_t)", Arg3: ", 8LL);
  uint64_t v33 = (void *)std::ostream::operator<<(v32, *(void *)(a1 + 10));
  sub_100046B94(v33, (uint64_t)"]", 1LL);
  std::stringbuf::str(a9, &v38);
  *(void *)((char *)v36
  uint64_t v37 = v34;
  std::streambuf::~streambuf(&v38);
  std::ios::~ios(&v39);
}

void sub_10013899C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_1001389E4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFC10[a1]);
}

void *sub_1001389F8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFC68[a1]);
}

void *sub_100138A0C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFCB0[a1]);
}

void *sub_100138A20@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFCD0[a1]);
}

uint64_t sub_100138A34(uint64_t a1, int a2, __int16 a3, __int128 *a4, double a5)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a5;
  *(_WORD *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = *(void *)((char *)a4 + 19);
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  __int128 v7 = *a4;
  __int128 v8 = a4[1];
  uint64_t v9 = *((void *)a4 + 4);
  *(void *)(a1 + 136) = 0LL;
  __int128 v10 = (void *)(a1 + 136);
  *(v10 - 1) = v9;
  *(_OWORD *)(v10 - 3) = v8;
  *(_OWORD *)(v10 - 5) = v7;
  v10[1] = 0LL;
  void v10[2] = 0LL;
  sub_10011B618( v10,  *((const void **)a4 + 5),  *((void *)a4 + 6),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 3));
  memcpy((void *)(a1 + 160), a4 + 4, 0x181uLL);
  return a1;
}

void sub_100138AE8(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100138B08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int16 v10 = a2;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a9;
  *(_BYTE *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = sub_10032B26C(*(unsigned __int16 *)(a3 + 20), a2, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(a1 + 50) = v10;
  __int16 v19 = sub_10032B26C(*(unsigned __int16 *)(a3 + 20), v12, v13, v14, v15, v16, v17, v18);
  __int16 v20 = *(_WORD *)(a3 + 26);
  __int128 v21 = *(_OWORD *)(a3 + 48);
  *(_WORD *)(a1 + 56) = v19;
  *(_WORD *)(a1 + 58) = v20;
  *(_OWORD *)(a1 + 64) = v21;
  __int128 v23 = *(_OWORD *)(a3 + 96);
  __int128 v22 = *(_OWORD *)(a3 + 112);
  __int128 v24 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = v22;
  __int128 v26 = *(_OWORD *)(a3 + 32);
  __int128 v25 = *(_OWORD *)(a3 + 48);
  __int128 v27 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v26;
  *(_OWORD *)(a1 + 128) = v25;
  *(_BYTE *)(a1 + 208) = 1;
  return a1;
}

uint64_t sub_100138BA8(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 28);
  double v6 = sub_1003205EC(*(unsigned int *)(a3 + 28));
  uint64_t v7 = 0LL;
  *(double *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v8 = a3 + 96;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  do
  {
    uint64_t v9 = (_DWORD *)(a1 + v7);
    v9[8] = *(_DWORD *)(v8 + v7 - 64);
    v9[16] = *(_DWORD *)(v8 + v7 - 32);
    v9[24] = *(_DWORD *)(v8 + v7);
    v7 += 4LL;
  }

  while (v7 != 32);
  return a1;
}

uint64_t sub_100138C48(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a3 + 25);
  LOWORD(a4) = *(_WORD *)(a3 + 26);
  *(double *)(a1 + 24) = (double)*(unint64_t *)&a4 * 0.01;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 28);
  double v6 = sub_1003205EC(*(unsigned int *)(a3 + 28));
  uint64_t v7 = 0LL;
  *(double *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  do
  {
    *(_DWORD *)(a1 + v7 + 48) = *(_DWORD *)(a3 + 32 + v7);
    v7 += 4LL;
  }

  while (v7 != 32);
  return a1;
}

uint64_t sub_100138CEC(uint64_t result, __int16 a2, uint64_t a3, double a4)
{
  *(double *)__n128 result = a4;
  *(_WORD *)(result + 8) = a2;
  *(_BYTE *)(result + 10) = *(_BYTE *)(a3 + 20);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a3 + 23);
  *(_WORD *)(result + 12) = *(_WORD *)(a3 + 24);
  *(_WORD *)(result + 14) = *(_WORD *)(a3 + 26);
  for (uint64_t i = 28LL; i != 116; i += 44LL)
  {
    __n128 v5 = (_OWORD *)(result + i);
    *__n128 v5 = 0uLL;
    v5[1] = 0uLL;
  }

  uint64_t v6 = 0LL;
  char v7 = 1;
  do
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 50 * v6;
    uint64_t v10 = a3 + 50 * v6;
    uint64_t v11 = result + 44 * v6;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v10 + 28);
    *(_WORD *)(v11 + 18) = *(_WORD *)(v10 + 29);
    *(_WORD *)(v11 + 20) = *(_WORD *)(v10 + 31);
    char v12 = v7;
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 33);
    do
    {
      *(_DWORD *)(v11 + 28 + v8) = *(_DWORD *)(a3 + 46 + v9 + v8);
      v8 += 4LL;
    }

    while (v8 != 32);
    char v7 = 0;
    uint64_t v6 = 1LL;
  }

  while ((v12 & 1) != 0);
  return result;
}

uint64_t sub_100138DA8(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_10038E06C();
  }
  return *(unsigned __int8 *)(a1 + 44LL * a2 + 16);
}

uint64_t sub_100138DD0(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_10038E094();
  }
  return *(unsigned __int16 *)(a1 + 44LL * a2 + 18);
}

uint64_t sub_100138DF8(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_10038E0BC();
  }
  return *(unsigned __int16 *)(a1 + 44LL * a2 + 20);
}

uint64_t sub_100138E20(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_10038E0E4();
  }
  return *(unsigned int *)(a1 + 44LL * a2 + 24);
}

uint64_t sub_100138E48(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_10038E10C();
  }
  return a1 + 44LL * a2 + 28;
}

void *sub_100138E6C(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    __n128 v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_100138EF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100138F0C(unsigned __int8 *a1)
{
  int v2 = *((_DWORD *)a1 + 6);
  uint64_t v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 __p = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider] _printDebug timestamp_event:",  __p,  2u);
    uint64_t v3 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int16 *)a1 + 25);
    *(_DWORD *)__int128 __p = 67109120;
    *(_DWORD *)&__p[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider] ticket id: %d", __p, 8u);
    uint64_t v3 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    __n128 v5 = "Remote";
    if (!v2) {
      __n128 v5 = "Local";
    }
    *(_DWORD *)__int128 __p = 136315138;
    *(void *)&__p[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   source: %s",  __p,  0xCu);
    uint64_t v3 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_10032B2C8(*((unsigned __int16 *)a1 + 24), __p);
    int v6 = v43 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v45 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   status: %s",  buf,  0xCu);
    if (v43 < 0) {
      operator delete(*(void **)__p);
    }
  }

  int v7 = a1[1];
  std::locale v8 = (os_log_s *)qword_1008000A0;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      sub_10032BA04(*a1, __p);
      uint64_t v10 = v43 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v45 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   rf channel: %s",  buf,  0xCu);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else if (v9)
  {
    *(_WORD *)__int128 __p = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   rf channel: UNKNOWN",  __p,  2u);
  }

  int v11 = a1[40];
  uint64_t v12 = qword_1008000A0;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (!v13) {
      goto LABEL_30;
    }
    uint64_t v14 = *((void *)a1 + 4);
    *(_DWORD *)__int128 __p = 134217984;
    *(void *)&__p[4] = v14;
    uint64_t v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: %.6f";
    uint64_t v16 = (os_log_s *)v12;
    uint32_t v17 = 12;
  }

  else
  {
    if (!v13) {
      goto LABEL_30;
    }
    *(_WORD *)__int128 __p = 0;
    uint64_t v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: UNKNOWN";
    uint64_t v16 = (os_log_s *)v12;
    uint32_t v17 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, __p, v17);
LABEL_30:
  int v18 = a1[16];
  uint64_t v19 = qword_1008000A0;
  BOOL v20 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    if (!v20) {
      goto LABEL_36;
    }
    uint64_t v21 = *((void *)a1 + 1);
    *(_DWORD *)__int128 __p = 134217984;
    *(void *)&__p[4] = v21;
    __int128 v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: %.6f";
    __int128 v23 = (os_log_s *)v19;
    uint32_t v24 = 12;
  }

  else
  {
    if (!v20) {
      goto LABEL_36;
    }
    *(_WORD *)__int128 __p = 0;
    __int128 v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: UNKNOWN";
    __int128 v23 = (os_log_s *)v19;
    uint32_t v24 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, __p, v24);
LABEL_36:
  int v25 = a1[208];
  uint64_t v26 = qword_1008000A0;
  BOOL v27 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v25)
  {
    if (!v27) {
      goto LABEL_42;
    }
    double v28 = sub_1003205EC(*(void *)(a1 + 108));
    *(_DWORD *)__int128 __p = 134217984;
    *(double *)&__p[4] = v28;
    char v29 = "#sp,[Solution Provider]   r1 timestamp: %.9f sec";
    __int128 v30 = (os_log_s *)v26;
    uint32_t v31 = 12;
  }

  else
  {
    if (!v27) {
      goto LABEL_42;
    }
    *(_WORD *)__int128 __p = 0;
    char v29 = "#sp,[Solution Provider]   r1 timestamp: UNKNOWN";
    __int128 v30 = (os_log_s *)v26;
    uint32_t v31 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, __p, v31);
LABEL_42:
  __int128 v32 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *((unsigned __int16 *)a1 + 29);
    *(_DWORD *)__int128 __p = 67109120;
    *(_DWORD *)&__p[4] = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   r1 cycle_idx: %d",  __p,  8u);
  }

  int v34 = *((unsigned __int16 *)a1 + 24);
  std::string v35 = (os_log_s *)qword_1008000A0;
  BOOL v36 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
  if (v34)
  {
    if (v36)
    {
      *(_WORD *)__int128 __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   round trip time: INVALID",  __p,  2u);
      std::string v35 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 __p = 0;
      uint64_t v37 = "#sp,[Solution Provider]   turn around time: INVALID";
      std::stringbuf v38 = v35;
      uint32_t v39 = 2;
LABEL_53:
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, __p, v39);
    }
  }

  else
  {
    if (v36)
    {
      uint64_t v40 = *((void *)a1 + 8);
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#sp,[Solution Provider]   round trip time: %llu rose fast ticks",  __p,  0xCu);
      std::string v35 = (os_log_s *)qword_1008000A0;
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *((void *)a1 + 9);
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = v41;
      uint64_t v37 = "#sp,[Solution Provider]   turn around time: %llu rose fast ticks";
      std::stringbuf v38 = v35;
      uint32_t v39 = 12;
      goto LABEL_53;
    }
  }

uint64_t sub_10013945C@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  v482.__r_.__value_.__s.__data_[8] = 9;
  int v4 = sub_100046B94(&v471, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __n128 v5 = sub_100046B94(v4, (uint64_t)"'ticket id': ", 13LL);
  int v6 = (void *)std::ostream::operator<<(v5, *(unsigned __int16 *)(a1 + 56));
  int v7 = sub_100046B94(v6, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
  std::locale v8 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  v482.__r_.__value_.__s.__data_[8] = 9;
  uint64_t v10 = sub_100046B94(&v471, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  int v11 = sub_100046B94(v10, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    p_uint64_t size = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    p_uint64_t size = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type cap = v483;
  }
  else {
    std::string::size_type cap = v482.__r_.__value_.__l.__cap_;
  }
  uint64_t v14 = sub_100046B94(v11, p_size, cap);
  uint64_t v15 = sub_100046B94(v14, (uint64_t)" sess id': ", 11LL);
  uint64_t v16 = (void *)std::ostream::operator<<(v15, *(unsigned __int16 *)(a1 + 98));
  uint32_t v17 = sub_100046B94(v16, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
  int v18 = std::locale::use_facet((const std::locale *)&v469, &std::ctype<char>::id);
  uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
  std::locale::~locale((std::locale *)&v469);
  std::ostream::put(v17, v19);
  std::ostream::flush(v17);
  v482.__r_.__value_.__s.__data_[8] = 9;
  BOOL v20 = sub_100046B94(&v471, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v21 = sub_100046B94(v20, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t size = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t size = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v23 = v483;
  }
  else {
    std::string::size_type v23 = v482.__r_.__value_.__l.__cap_;
  }
  uint32_t v24 = sub_100046B94(v21, size, v23);
  int v25 = sub_100046B94(v24, (uint64_t)" cycle_idx': ", 13LL);
  uint64_t v26 = (void *)std::ostream::operator<<(v25, *(unsigned __int16 *)(a1 + 112));
  BOOL v27 = sub_100046B94(v26, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
  double v28 = std::locale::use_facet((const std::locale *)&v469, &std::ctype<char>::id);
  uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
  std::locale::~locale((std::locale *)&v469);
  std::ostream::put(v27, v29);
  std::ostream::flush(v27);
  v482.__r_.__value_.__s.__data_[8] = 48;
  __int128 v30 = sub_100138E6C(&v471, &v482.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24LL) + 8) = *(_DWORD *)((_BYTE *)v30 + *(void *)(*v30 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  v482.__r_.__value_.__s.__data_[8] = 9;
  uint32_t v31 = sub_100046B94(&v471, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v32 = sub_100046B94(v31, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v33 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v33 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v34 = v483;
  }
  else {
    std::string::size_type v34 = v482.__r_.__value_.__l.__cap_;
  }
  std::string v35 = sub_100046B94(v32, v33, v34);
  BOOL v36 = sub_100046B94(v35, (uint64_t)" mac_addr': 0x", 14LL);
  *(void *)((char *)v36 + *(void *)(*v36 - 24LL) + 24) = 16LL;
  uint64_t v37 = (void *)std::ostream::operator<<(v36, *(void *)(a1 + 64));
  std::stringbuf v38 = sub_100046B94(v37, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24LL)));
  uint32_t v39 = std::locale::use_facet((const std::locale *)&v469, &std::ctype<char>::id);
  uint64_t v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10LL);
  std::locale::~locale((std::locale *)&v469);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  *(_DWORD *)((char *)&v471 + *(void *)(v471 - 24) + 8) = *(_DWORD *)((_BYTE *)&v471 + *(void *)(v471 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::stringbuf::str(&v469, &v472);
  uint64_t v41 = sub_100046B94(&v479, (uint64_t)"Range Result (Part 1 of 2):", 27LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
  __int128 v42 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v41, v43);
  std::ostream::flush(v41);
  uint64_t v44 = sub_100046B94(&v479, (uint64_t)"{", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
  __int128 v45 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v44, v46);
  std::ostream::flush(v44);
  if ((v469.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v47 = &v469;
  }
  else {
    char v47 = (std::stringbuf::string_type *)v469.__r_.__value_.__r.__words[0];
  }
  if ((v469.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v48 = v469.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v48 = v469.__r_.__value_.__l.__size_;
  }
  sub_100046B94(&v479, (uint64_t)v47, v48);
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v49 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v50 = sub_100046B94(v49, (uint64_t)"'mach abs time (sec)': ", 23LL);
  *(void *)((char *)v50 + *(void *)(*v50 - 24LL) + 16) = 6LL;
  char v51 = (void *)std::ostream::operator<<(v50, *(double *)(a1 + 48));
  __int128 v52 = sub_100046B94(v51, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24LL)));
  __int128 v53 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v52, v54);
  std::ostream::flush(v52);
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v55 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v56 = sub_100046B94(v55, (uint64_t)"'mach cont time (sec)': ", 24LL);
  *(void *)((char *)v56 + *(void *)(*v56 - 24LL) + 16) = 6LL;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
  sub_1000065CC(__p, "UNKNOWN");
  sub_10013CE18(&__dst, (uint64_t)__p, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v57 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v57 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v58 = v483;
  }
  else {
    std::string::size_type v58 = v482.__r_.__value_.__l.__cap_;
  }
  uint64_t v59 = sub_100046B94(v56, v57, v58);
  __int128 v60 = sub_100046B94(v59, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24LL)));
  char v61 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v62 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v60, v62);
  std::ostream::flush(v60);
  if (v468 < 0) {
    operator delete(__p[0]);
  }
  v482.__r_.__value_.__s.__data_[8] = 9;
  unsigned __int8 v63 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v64 = sub_100046B94(v63, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v65 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v65 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v66 = v483;
  }
  else {
    std::string::size_type v66 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v67 = sub_100046B94(v64, v65, v66);
  __int128 v68 = sub_100046B94(v67, (uint64_t)" timestamp (sec)': ", 19LL);
  *(void *)((char *)v68 + *(void *)(*v68 - 24LL) + 16) = 6LL;
  char v69 = (void *)std::ostream::operator<<(v68, *(double *)(a1 + 104));
  __int128 v70 = sub_100046B94(v69, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(*v70 - 24LL)));
  __int128 v71 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  uint64_t v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v70, v72);
  std::ostream::flush(v70);
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v73 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v74 = sub_100046B94(v73, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v75 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v75 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v76 = v483;
  }
  else {
    std::string::size_type v76 = v482.__r_.__value_.__l.__cap_;
  }
  __int16 v77 = sub_100046B94(v74, v75, v76);
  uint64_t v78 = sub_100046B94(v77, (uint64_t)" sess status': ", 15LL);
  sub_10032B2C8(*(unsigned __int16 *)(a1 + 96), __p);
  if (v468 >= 0) {
    __int16 v79 = __p;
  }
  else {
    __int16 v79 = (void **)__p[0];
  }
  size_t v80 = strlen((const char *)v79);
  __int128 v81 = sub_100046B94(v78, (uint64_t)v79, v80);
  char v82 = sub_100046B94(v81, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24LL)));
  __int128 v83 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v84 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v82, v84);
  std::ostream::flush(v82);
  if (v468 < 0) {
    operator delete(__p[0]);
  }
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v85 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v86 = sub_100046B94(v85, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v87 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v87 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v88 = v483;
  }
  else {
    std::string::size_type v88 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v89 = sub_100046B94(v86, v87, v88);
  __int128 v90 = sub_100046B94(v89, (uint64_t)" sess type': ", 13LL);
  sub_10032B024(*(unsigned __int8 *)(a1 + 100), __p);
  if (v468 >= 0) {
    char v91 = __p;
  }
  else {
    char v91 = (void **)__p[0];
  }
  size_t v92 = strlen((const char *)v91);
  __int128 v93 = sub_100046B94(v90, (uint64_t)v91, v92);
  __int128 v94 = sub_100046B94(v93, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(*v94 - 24LL)));
  __int128 v95 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v96 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v94, v96);
  std::ostream::flush(v94);
  if (v468 < 0) {
    operator delete(__p[0]);
  }
  v482.__r_.__value_.__s.__data_[8] = 48;
  __int128 v97 = sub_100138E6C(&v479, &v482.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v97 + *(void *)(*v97 - 24LL) + 8) = *(_DWORD *)((_BYTE *)v97 + *(void *)(*v97 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v98 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  int v99 = sub_100046B94(v98, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v100 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v100 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v101 = v483;
  }
  else {
    std::string::size_type v101 = v482.__r_.__value_.__l.__cap_;
  }
  double v102 = sub_100046B94(v99, v100, v101);
  double v103 = sub_100046B94(v102, (uint64_t)" winning_tx_antenna_mask': 0x", 29LL);
  *(void *)((char *)v103 + *(void *)(*v103 - 24LL) + 24) = 2LL;
  uint64_t v104 = (void *)std::ostream::operator<<(v103, *(unsigned __int8 *)(a1 + 312));
  unint64_t v105 = sub_100046B94(v104, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(void *)(*v105 - 24LL)));
  uint64_t v106 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  uint64_t v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v105, v107);
  std::ostream::flush(v105);
  *(_DWORD *)((char *)&v479 + *(void *)(v479 - 24) + 8) = *(_DWORD *)((_BYTE *)&v479 + *(void *)(v479 - 24) + 8) & 0xFFFFFFB5 | 2;
  v482.__r_.__value_.__s.__data_[8] = 9;
  v108 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v109 = sub_100046B94(v108, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v110 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v110 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v111 = v483;
  }
  else {
    std::string::size_type v111 = v482.__r_.__value_.__l.__cap_;
  }
  uint64_t v112 = sub_100046B94(v109, v110, v111);
  __int128 v113 = sub_100046B94(v112, (uint64_t)" UWB channel': ", 15LL);
  sub_10032BA04(*(unsigned __int8 *)(a1 + 368), __p);
  if (v468 >= 0) {
    __int128 v114 = __p;
  }
  else {
    __int128 v114 = (void **)__p[0];
  }
  size_t v115 = strlen((const char *)v114);
  double v116 = sub_100046B94(v113, (uint64_t)v114, v115);
  uint64_t v117 = sub_100046B94(v116, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(void *)(*v117 - 24LL)));
  uint64_t v118 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v119 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v117, v119);
  std::ostream::flush(v117);
  if (v468 < 0) {
    operator delete(__p[0]);
  }
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v120 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v121 = sub_100046B94(v120, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v122 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v122 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v123 = v483;
  }
  else {
    std::string::size_type v123 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v124 = sub_100046B94(v121, v122, v123);
  __int128 v125 = sub_100046B94(v124, (uint64_t)" Band select': ", 15LL);
  unsigned int v126 = *(unsigned __int16 *)(a1 + 369);
  if (v126 >= 0x100)
  {
    sub_10032BA34(*(_WORD *)(a1 + 369), __p);
    if (v468 >= 0) {
      __int128 v127 = (const char *)__p;
    }
    else {
      __int128 v127 = (const char *)__p[0];
    }
  }

  else
  {
    __int128 v127 = "N/A";
  }

  size_t v128 = strlen(v127);
  __int128 v129 = sub_100046B94(v125, (uint64_t)v127, v128);
  __int128 v130 = sub_100046B94(v129, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v130 + *(void *)(*v130 - 24LL)));
  __int128 v131 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v132 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v130, v132);
  std::ostream::flush(v130);
  if (v126 >= 0x100 && v468 < 0) {
    operator delete(__p[0]);
  }
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v133 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  char v134 = sub_100046B94(v133, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v135 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v135 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v136 = v483;
  }
  else {
    std::string::size_type v136 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v137 = sub_100046B94(v134, v135, v136);
  __int128 v138 = sub_100046B94(v137, (uint64_t)" NB channel': ", 14LL);
  int v139 = *(_DWORD *)(a1 + 372);
  sub_1000065CC(&v465, "N/A");
  if ((v139 & 0xFF0000) != 0)
  {
    std::to_string(&__dst, (unsigned __int16)v139);
  }

  else if ((char)v465.__r_.__value_.__s.__size_ < 0)
  {
    sub_1000063A8(&__dst, v465.__r_.__value_.__l.__data_, v465.__r_.__value_.__l.__size_);
  }

  else
  {
    std::string __dst = v465;
  }

  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v141 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v141 = __dst.__r_.__value_.__l.__size_;
  }
  char v142 = sub_100046B94(v138, (uint64_t)p_dst, v141);
  __int16 v143 = sub_100046B94(v142, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v143 + *(void *)(*v143 - 24LL)));
  __int128 v144 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v145 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v143, v145);
  std::ostream::flush(v143);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v146 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  uint64_t v147 = sub_100046B94(v146, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v148 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v148 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v149 = v483;
  }
  else {
    std::string::size_type v149 = v482.__r_.__value_.__l.__cap_;
  }
  uint64_t v150 = sub_100046B94(v147, v148, v149);
  __int128 v151 = sub_100046B94(v150, (uint64_t)" range (m)': ", 13LL);
  *(void *)((char *)v151 + *(void *)(*v151 - 24LL) + 16) = 6LL;
  uint64_t v152 = (void *)std::ostream::operator<<(v151, *(double *)(a1 + 304));
  uint64_t v153 = sub_100046B94(v152, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(void *)(*v153 - 24LL)));
  __int128 v154 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v155 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v153, v155);
  std::ostream::flush(v153);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v156 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v157 = sub_100046B94(v156, (uint64_t)"'ME range unc (m)': ", 20LL);
  *(void *)((char *)v157 + *(void *)(*v157 - 24LL) + 16) = 6LL;
  *(_OWORD *)&v465.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 520);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE18(&v465, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v158 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v158 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v159 = v483;
  }
  else {
    std::string::size_type v159 = v482.__r_.__value_.__l.__cap_;
  }
  char v160 = sub_100046B94(v157, v158, v159);
  v161 = sub_100046B94(v160, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(void *)(*v161 - 24LL)));
  char v162 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v163 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v162->__vftable[2].~facet_0)(v162, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v161, v163);
  std::ostream::flush(v161);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v164 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v165 = sub_100046B94(v164, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v166 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v166 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v167 = v483;
  }
  else {
    std::string::size_type v167 = v482.__r_.__value_.__l.__cap_;
  }
  __int16 v168 = sub_100046B94(v165, v166, v167);
  int v169 = sub_100046B94(v168, (uint64_t)" azimuth PDOA (deg)': ", 22LL);
  *(void *)((char *)v169 + *(void *)(*v169 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 256);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v170 = &__dst;
  }
  else {
    __int16 v170 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v171 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v171 = __dst.__r_.__value_.__l.__size_;
  }
  __int128 v172 = sub_100046B94(v169, (uint64_t)v170, v171);
  __int128 v173 = sub_100046B94(v172, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v173 + *(void *)(*v173 - 24LL)));
  __int128 v174 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v175 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v174->__vftable[2].~facet_0)(v174, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v173, v175);
  std::ostream::flush(v173);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v176 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v177 = sub_100046B94(v176, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v178 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v178 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v179 = v483;
  }
  else {
    std::string::size_type v179 = v482.__r_.__value_.__l.__cap_;
  }
  v180 = sub_100046B94(v177, v178, v179);
  char v181 = sub_100046B94(v180, (uint64_t)" elevation PDOA (deg)': ", 24LL);
  *(void *)((char *)v181 + *(void *)(*v181 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 272);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v182 = &__dst;
  }
  else {
    char v182 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v183 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v183 = __dst.__r_.__value_.__l.__size_;
  }
  __int128 v184 = sub_100046B94(v181, (uint64_t)v182, v183);
  __int128 v185 = sub_100046B94(v184, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v185 + *(void *)(*v185 - 24LL)));
  __int128 v186 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v187 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v185, v187);
  std::ostream::flush(v185);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v188 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v189 = sub_100046B94(v188, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v190 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v190 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v191 = v483;
  }
  else {
    std::string::size_type v191 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v192 = sub_100046B94(v189, v190, v191);
  __int128 v193 = sub_100046B94(v192, (uint64_t)" SOI RSSI (dBm)': ", 18LL);
  *(void *)((char *)v193 + *(void *)(*v193 - 24LL) + 16) = 6LL;
  __int128 v194 = (void *)std::ostream::operator<<(v193, *(double *)(a1 + 168));
  v195 = sub_100046B94(v194, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v195 + *(void *)(*v195 - 24LL)));
  char v196 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v197 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v196->__vftable[2].~facet_0)(v196, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v195, v197);
  std::ostream::flush(v195);
  v482.__r_.__value_.__s.__data_[8] = 9;
  char v198 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  char v199 = sub_100046B94(v198, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v200 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v200 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v201 = v483;
  }
  else {
    std::string::size_type v201 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v202 = sub_100046B94(v199, v200, v201);
  __int128 v203 = sub_100046B94(v202, (uint64_t)" anchor time offset raw (r1 ticks)': ", 37LL);
  __int128 v204 = (void *)std::ostream::operator<<(v203, *(unsigned int *)(a1 + 292));
  v205 = sub_100046B94(v204, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v205 + *(void *)(*v205 - 24LL)));
  __int128 v206 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v207 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v206->__vftable[2].~facet_0)(v206, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v205, v207);
  std::ostream::flush(v205);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v208 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v209 = sub_100046B94(v208, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v210 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v210 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v211 = v483;
  }
  else {
    std::string::size_type v211 = v482.__r_.__value_.__l.__cap_;
  }
  v212 = sub_100046B94(v209, v210, v211);
  __int128 v213 = sub_100046B94(v212, (uint64_t)" anchor time offset (ps)': ", 27LL);
  double v214 = sub_100026A84(*(double *)(a1 + 296));
  __int128 v215 = (void *)std::ostream::operator<<(v213, v214);
  __int128 v216 = sub_100046B94(v215, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v216 + *(void *)(*v216 - 24LL)));
  __int128 v217 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v218 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v217->__vftable[2].~facet_0)(v217, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v216, v218);
  std::ostream::flush(v216);
  v482.__r_.__value_.__s.__data_[8] = 9;
  __int128 v219 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v220 = sub_100046B94(v219, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v221 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v221 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v222 = v483;
  }
  else {
    std::string::size_type v222 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v223 = sub_100046B94(v220, v221, v222);
  __int128 v224 = sub_100046B94(v223, (uint64_t)" AOA first path SNR - center (dB)': ", 36LL);
  *(void *)((char *)v224 + *(void *)(*v224 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 192);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v225 = &__dst;
  }
  else {
    char v225 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v226 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v226 = __dst.__r_.__value_.__l.__size_;
  }
  __int128 v227 = sub_100046B94(v224, (uint64_t)v225, v226);
  __int128 v228 = sub_100046B94(v227, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v228 + *(void *)(*v228 - 24LL)));
  __int128 v229 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v230 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v229->__vftable[2].~facet_0)(v229, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v228, v230);
  std::ostream::flush(v228);
  v482.__r_.__value_.__s.__data_[8] = 9;
  int v231 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  __int128 v232 = sub_100046B94(v231, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v233 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v233 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v234 = v483;
  }
  else {
    std::string::size_type v234 = v482.__r_.__value_.__l.__cap_;
  }
  __int128 v235 = sub_100046B94(v232, v233, v234);
  __int128 v236 = sub_100046B94(v235, (uint64_t)" AOA first path SNR - vertical (dB)': ", 38LL);
  *(void *)((char *)v236 + *(void *)(*v236 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 208);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v237 = &__dst;
  }
  else {
    __int128 v237 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v238 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v238 = __dst.__r_.__value_.__l.__size_;
  }
  char v239 = sub_100046B94(v236, (uint64_t)v237, v238);
  v240 = sub_100046B94(v239, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v240 + *(void *)(*v240 - 24LL)));
  v241 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v242 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v241->__vftable[2].~facet_0)(v241, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v240, v242);
  std::ostream::flush(v240);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v243 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v244 = sub_100046B94(v243, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v245 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v245 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v246 = v483;
  }
  else {
    std::string::size_type v246 = v482.__r_.__value_.__l.__cap_;
  }
  v247 = sub_100046B94(v244, v245, v246);
  v248 = sub_100046B94(v247, (uint64_t)" AOA first path SNR - horizontal (dB)': ", 40LL);
  *(void *)((char *)v248 + *(void *)(*v248 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 224);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v249 = &__dst;
  }
  else {
    v249 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v250 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v250 = __dst.__r_.__value_.__l.__size_;
  }
  v251 = sub_100046B94(v248, (uint64_t)v249, v250);
  v252 = sub_100046B94(v251, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v252 + *(void *)(*v252 - 24LL)));
  v253 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v254 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v253->__vftable[2].~facet_0)(v253, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v252, v254);
  std::ostream::flush(v252);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v255 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v256 = sub_100046B94(v255, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v257 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v257 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v258 = v483;
  }
  else {
    std::string::size_type v258 = v482.__r_.__value_.__l.__cap_;
  }
  v259 = sub_100046B94(v256, v257, v258);
  v260 = sub_100046B94(v259, (uint64_t)" carrier freq offset (ppb)': ", 29LL);
  *(void *)((char *)v260 + *(void *)(*v260 - 24LL) + 16) = 6LL;
  double v261 = sub_100026A94(*(double *)(a1 + 240));
  v262 = (void *)std::ostream::operator<<(v260, v261);
  v263 = sub_100046B94(v262, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v263 + *(void *)(*v263 - 24LL)));
  v264 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v265 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v264->__vftable[2].~facet_0)(v264, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(v263, v265);
  std::ostream::flush(v263);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v266 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v267 = sub_100046B94(v266, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v268 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v268 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v269 = v483;
  }
  else {
    std::string::size_type v269 = v482.__r_.__value_.__l.__cap_;
  }
  v270 = sub_100046B94(v267, v268, v269);
  v271 = sub_100046B94(v270, (uint64_t)" AOA first path index - center (dB)': ", 38LL);
  *(void *)((char *)v271 + *(void *)(*v271 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 320);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v272 = &__dst;
  }
  else {
    v272 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v273 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v273 = __dst.__r_.__value_.__l.__size_;
  }
  v274 = sub_100046B94(v271, (uint64_t)v272, v273);
  v275 = sub_100046B94(v274, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v275 + *(void *)(*v275 - 24LL)));
  v276 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v277 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v276->__vftable[2].~facet_0)(v276, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v275, v277);
  std::ostream::flush(v275);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v278 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v279 = sub_100046B94(v278, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v280 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v280 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v281 = v483;
  }
  else {
    std::string::size_type v281 = v482.__r_.__value_.__l.__cap_;
  }
  v282 = sub_100046B94(v279, v280, v281);
  v283 = sub_100046B94(v282, (uint64_t)" AOA first path index - vertical (dB)': ", 40LL);
  *(void *)((char *)v283 + *(void *)(*v283 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 336);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v284 = &__dst;
  }
  else {
    v284 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v285 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v285 = __dst.__r_.__value_.__l.__size_;
  }
  v286 = sub_100046B94(v283, (uint64_t)v284, v285);
  v287 = sub_100046B94(v286, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v287 + *(void *)(*v287 - 24LL)));
  v288 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v289 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v288->__vftable[2].~facet_0)(v288, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v287, v289);
  std::ostream::flush(v287);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v290 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v291 = sub_100046B94(v290, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v292 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v292 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v293 = v483;
  }
  else {
    std::string::size_type v293 = v482.__r_.__value_.__l.__cap_;
  }
  v294 = sub_100046B94(v291, v292, v293);
  v295 = sub_100046B94(v294, (uint64_t)" AOA first path index - horizontal (dB)': ", 42LL);
  *(void *)((char *)v295 + *(void *)(*v295 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 352);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v296 = &__dst;
  }
  else {
    v296 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v297 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v297 = __dst.__r_.__value_.__l.__size_;
  }
  v298 = sub_100046B94(v295, (uint64_t)v296, v297);
  v299 = sub_100046B94(v298, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v299 + *(void *)(*v299 - 24LL)));
  v300 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v301 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v300->__vftable[2].~facet_0)(v300, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v299, v301);
  std::ostream::flush(v299);
  if (*(unsigned __int16 *)(a1 + 382) >= 0x100u)
  {
    v482.__r_.__value_.__s.__data_[8] = 9;
    v302 = sub_100046B94(&v479, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
    v303 = sub_100046B94(v302, (uint64_t)"'remote_tx_antenna_mask': 0x", 28LL);
    *(void *)((char *)v303 + *(void *)(*v303 - 24LL) + 24) = 2LL;
    v304 = (void *)std::ostream::operator<<(v303, *(_WORD *)(a1 + 382));
    v305 = sub_100046B94(v304, (uint64_t)",", 1LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v305 + *(void *)(*v305 - 24LL)));
    v306 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
    uint64_t v307 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v306->__vftable[2].~facet_0)(v306, 10LL);
    std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
    std::ostream::put(v305, v307);
    std::ostream::flush(v305);
  }

  v308 = sub_100046B94(&v479, (uint64_t)"}", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v308 + *(void *)(*v308 - 24LL)));
  v309 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v310 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v309->__vftable[2].~facet_0)(v309, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v308, v310);
  std::ostream::flush(v308);
  v311 = sub_100046B94(&v475, (uint64_t)"Range Result (Part 2 of 2):", 27LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v311 + *(void *)(*v311 - 24LL)));
  v312 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v313 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v312->__vftable[2].~facet_0)(v312, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v311, v313);
  std::ostream::flush(v311);
  v314 = sub_100046B94(&v475, (uint64_t)"{", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v314 + *(void *)(*v314 - 24LL)));
  v315 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v316 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v315->__vftable[2].~facet_0)(v315, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v314, v316);
  std::ostream::flush(v314);
  if ((v469.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v317 = &v469;
  }
  else {
    v317 = (std::stringbuf::string_type *)v469.__r_.__value_.__r.__words[0];
  }
  if ((v469.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v318 = v469.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v318 = v469.__r_.__value_.__l.__size_;
  }
  sub_100046B94(&v475, (uint64_t)v317, v318);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v319 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v320 = sub_100046B94(v319, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v321 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v321 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v322 = v483;
  }
  else {
    std::string::size_type v322 = v482.__r_.__value_.__l.__cap_;
  }
  v323 = sub_100046B94(v320, v321, v322);
  v324 = sub_100046B94(v323, (uint64_t)" SOI RSSI 2 (dBm)': ", 20LL);
  *(void *)((char *)v324 + *(void *)(*v324 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 176);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v325 = &__dst;
  }
  else {
    v325 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v326 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v326 = __dst.__r_.__value_.__l.__size_;
  }
  v327 = sub_100046B94(v324, (uint64_t)v325, v326);
  v328 = sub_100046B94(v327, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v328 + *(void *)(*v328 - 24LL)));
  v329 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v330 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v329->__vftable[2].~facet_0)(v329, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v328, v330);
  std::ostream::flush(v328);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v331 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v332 = sub_100046B94(v331, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v333 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v333 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v334 = v483;
  }
  else {
    std::string::size_type v334 = v482.__r_.__value_.__l.__cap_;
  }
  v335 = sub_100046B94(v332, v333, v334);
  v336 = sub_100046B94(v335, (uint64_t)" OC SOI RSSI 2 (dBm)': ", 23LL);
  *(void *)((char *)v336 + *(void *)(*v336 - 24LL) + 16) = 6LL;
  __int128 v464 = *(_OWORD *)(a1 + 488);
  sub_1000065CC(&v465, "invalid");
  sub_10013CE18((std::string *)&v464, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v337 = &__dst;
  }
  else {
    v337 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v338 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v338 = __dst.__r_.__value_.__l.__size_;
  }
  v339 = sub_100046B94(v336, (uint64_t)v337, v338);
  v340 = sub_100046B94(v339, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v340 + *(void *)(*v340 - 24LL)));
  v341 = std::locale::use_facet((const std::locale *)&v482, &std::ctype<char>::id);
  uint64_t v342 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v341->__vftable[2].~facet_0)(v341, 10LL);
  std::locale::~locale((std::locale *)&v482);
  std::ostream::put(v340, v342);
  std::ostream::flush(v340);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v343 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v344 = sub_100046B94(v343, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v345 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v345 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v346 = v483;
  }
  else {
    std::string::size_type v346 = v482.__r_.__value_.__l.__cap_;
  }
  v347 = sub_100046B94(v344, v345, v346);
  v348 = sub_100046B94(v347, (uint64_t)" mms val status':  ", 19LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 466);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v349 = &__dst;
  }
  else {
    v349 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v350 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v350 = __dst.__r_.__value_.__l.__size_;
  }
  v351 = sub_100046B94(v348, (uint64_t)v349, v350);
  v352 = sub_100046B94(v351, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v352 + *(void *)(*v352 - 24LL)));
  v353 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v354 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v353->__vftable[2].~facet_0)(v353, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v352, v354);
  std::ostream::flush(v352);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v355 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v356 = sub_100046B94(v355, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v357 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v357 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v358 = v483;
  }
  else {
    std::string::size_type v358 = v482.__r_.__value_.__l.__cap_;
  }
  v359 = sub_100046B94(v356, v357, v358);
  v360 = sub_100046B94(v359, (uint64_t)" nb demod chain: ':  ", 21LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 504);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v361 = &__dst;
  }
  else {
    v361 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v362 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v362 = __dst.__r_.__value_.__l.__size_;
  }
  v363 = sub_100046B94(v360, (uint64_t)v361, v362);
  v364 = sub_100046B94(v363, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v364 + *(void *)(*v364 - 24LL)));
  v365 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v366 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v365->__vftable[2].~facet_0)(v365, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v364, v366);
  std::ostream::flush(v364);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v367 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v368 = sub_100046B94(v367, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v369 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v369 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v370 = v483;
  }
  else {
    std::string::size_type v370 = v482.__r_.__value_.__l.__cap_;
  }
  v371 = sub_100046B94(v368, v369, v370);
  v372 = sub_100046B94(v371, (uint64_t)" nb rx0 elna hg: ':  ", 21LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 506);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v373 = &__dst;
  }
  else {
    v373 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v374 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v374 = __dst.__r_.__value_.__l.__size_;
  }
  v375 = sub_100046B94(v372, (uint64_t)v373, v374);
  v376 = sub_100046B94(v375, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v376 + *(void *)(*v376 - 24LL)));
  v377 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v378 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v377->__vftable[2].~facet_0)(v377, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v376, v378);
  std::ostream::flush(v376);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v379 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v380 = sub_100046B94(v379, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v381 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v381 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v382 = v483;
  }
  else {
    std::string::size_type v382 = v482.__r_.__value_.__l.__cap_;
  }
  v383 = sub_100046B94(v380, v381, v382);
  v384 = sub_100046B94(v383, (uint64_t)" nb rx1 elna hg: ':  ", 21LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 508);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v385 = &__dst;
  }
  else {
    v385 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v386 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v386 = __dst.__r_.__value_.__l.__size_;
  }
  v387 = sub_100046B94(v384, (uint64_t)v385, v386);
  v388 = sub_100046B94(v387, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v388 + *(void *)(*v388 - 24LL)));
  v389 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v390 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v389->__vftable[2].~facet_0)(v389, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v388, v390);
  std::ostream::flush(v388);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v391 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v392 = sub_100046B94(v391, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v393 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v393 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v394 = v483;
  }
  else {
    std::string::size_type v394 = v482.__r_.__value_.__l.__cap_;
  }
  v395 = sub_100046B94(v392, v393, v394);
  v396 = sub_100046B94(v395, (uint64_t)" nb tx antenna: ':  ", 20LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 510);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v397 = &__dst;
  }
  else {
    v397 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v398 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v398 = __dst.__r_.__value_.__l.__size_;
  }
  v399 = sub_100046B94(v396, (uint64_t)v397, v398);
  v400 = sub_100046B94(v399, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v400 + *(void *)(*v400 - 24LL)));
  v401 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v402 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v401->__vftable[2].~facet_0)(v401, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v400, v402);
  std::ostream::flush(v400);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v403 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v404 = sub_100046B94(v403, (uint64_t)"'", 1LL);
  sub_10013CDCC(&v482.__r_.__value_.__l.__size_);
  if ((v483 & 0x80u) == 0) {
    uint64_t v405 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v405 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v406 = v483;
  }
  else {
    std::string::size_type v406 = v482.__r_.__value_.__l.__cap_;
  }
  v407 = sub_100046B94(v404, v405, v406);
  v408 = sub_100046B94(v407, (uint64_t)" cycle skipping':  ", 19LL);
  LOWORD(v482.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 512);
  sub_1000065CC(&v465, "N/A");
  sub_10013CE54(&v482, (uint64_t)&v465, &__dst);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v409 = &__dst;
  }
  else {
    v409 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v410 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v410 = __dst.__r_.__value_.__l.__size_;
  }
  v411 = sub_100046B94(v408, (uint64_t)v409, v410);
  v412 = sub_100046B94(v411, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v412 + *(void *)(*v412 - 24LL)));
  v413 = std::locale::use_facet((const std::locale *)&v464, &std::ctype<char>::id);
  uint64_t v414 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v413->__vftable[2].~facet_0)(v413, 10LL);
  std::locale::~locale((std::locale *)&v464);
  std::ostream::put(v412, v414);
  std::ostream::flush(v412);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v415 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v416 = sub_100046B94(v415, (uint64_t)"'toa peak snr (dB)':", 20LL);
  LOWORD(v464) = *(_WORD *)(a1 + 452);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE54((std::string *)&v464, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v417 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v417 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v418 = v483;
  }
  else {
    std::string::size_type v418 = v482.__r_.__value_.__l.__cap_;
  }
  v419 = sub_100046B94(v416, v417, v418);
  v420 = sub_100046B94(v419, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v420 + *(void *)(*v420 - 24LL)));
  v421 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v422 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v421->__vftable[2].~facet_0)(v421, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v420, v422);
  std::ostream::flush(v420);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v423 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v424 = sub_100046B94(v423, (uint64_t)"'toa peak index high res':", 26LL);
  LODWORD(v464) = *(_DWORD *)(a1 + 454);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE90((std::string *)&v464, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v425 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v425 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v426 = v483;
  }
  else {
    std::string::size_type v426 = v482.__r_.__value_.__l.__cap_;
  }
  v427 = sub_100046B94(v424, v425, v426);
  v428 = sub_100046B94(v427, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v428 + *(void *)(*v428 - 24LL)));
  v429 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v430 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v429->__vftable[2].~facet_0)(v429, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v428, v430);
  std::ostream::flush(v428);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v431 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v432 = sub_100046B94(v431, (uint64_t)"'toa peak signal level high res (dB)':", 38LL);
  LODWORD(v464) = *(_DWORD *)(a1 + 458);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE90((std::string *)&v464, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v433 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v433 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v434 = v483;
  }
  else {
    std::string::size_type v434 = v482.__r_.__value_.__l.__cap_;
  }
  v435 = sub_100046B94(v432, v433, v434);
  v436 = sub_100046B94(v435, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v436 + *(void *)(*v436 - 24LL)));
  v437 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v438 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v437->__vftable[2].~facet_0)(v437, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v436, v438);
  std::ostream::flush(v436);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v439 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v440 = sub_100046B94(v439, (uint64_t)"'nb rx status':", 15LL);
  LOWORD(v464) = *(_WORD *)(a1 + 448);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE54((std::string *)&v464, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v441 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v441 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v442 = v483;
  }
  else {
    std::string::size_type v442 = v482.__r_.__value_.__l.__cap_;
  }
  v443 = sub_100046B94(v440, v441, v442);
  v444 = sub_100046B94(v443, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v444 + *(void *)(*v444 - 24LL)));
  v445 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v446 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v445->__vftable[2].~facet_0)(v445, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v444, v446);
  std::ostream::flush(v444);
  v482.__r_.__value_.__s.__data_[8] = 9;
  v447 = sub_100046B94(&v475, (uint64_t)&v482.__r_.__value_.__l.__size_, 1LL);
  v448 = sub_100046B94(v447, (uint64_t)"'mms rx status':", 16LL);
  LOWORD(v464) = *(_WORD *)(a1 + 450);
  sub_1000065CC(&__dst, "N/A");
  sub_10013CE54((std::string *)&v464, (uint64_t)&__dst, (std::string *)&v482.__r_.__value_.__r.__words[1]);
  if ((v483 & 0x80u) == 0) {
    uint64_t v449 = (uint64_t)&v482.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v449 = v482.__r_.__value_.__l.__size_;
  }
  if ((v483 & 0x80u) == 0) {
    std::string::size_type v450 = v483;
  }
  else {
    std::string::size_type v450 = v482.__r_.__value_.__l.__cap_;
  }
  v451 = sub_100046B94(v448, v449, v450);
  v452 = sub_100046B94(v451, (uint64_t)",", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v452 + *(void *)(*v452 - 24LL)));
  v453 = std::locale::use_facet((const std::locale *)&v465, &std::ctype<char>::id);
  uint64_t v454 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v453->__vftable[2].~facet_0)(v453, 10LL);
  std::locale::~locale((std::locale *)&v465);
  std::ostream::put(v452, v454);
  std::ostream::flush(v452);
  v455 = sub_100046B94(&v475, (uint64_t)"}", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v455 + *(void *)(*v455 - 24LL)));
  v456 = std::locale::use_facet((const std::locale *)&v482.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  uint64_t v457 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v456->__vftable[2].~facet_0)(v456, 10LL);
  std::locale::~locale((std::locale *)&v482.__r_.__value_.__r.__words[1]);
  std::ostream::put(v455, v457);
  std::ostream::flush(v455);
  std::stringbuf::str((std::stringbuf::string_type *)&v482.__r_.__value_.__r.__words[1], &v480);
  std::stringbuf::str(&v484, &v476);
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  v458 = (char *)operator new(0x30uLL);
  *a2 = v458;
  a2[1] = v458;
  a2[2] = v458 + 48;
  uint64_t v459 = 0LL;
  a2[1] = sub_10013E9A0((uint64_t)(a2 + 2), (__int128 *)&v482.__r_.__value_.__r.__words[1], &v485, v458);
  do
  {
    if (SHIBYTE(v484.__r_.__value_.__r.__words[v459 + 2]) < 0) {
      operator delete(*(void **)((char *)&v484.__r_.__value_.__l.__data_ + v459 * 8));
    }
    v459 -= 3LL;
  }

  while (v459 != -6);
  *(void *)((char *)v470
  uint64_t v471 = v461;
  std::streambuf::~streambuf(&v472);
  std::ios::~ios(&v473);
  v474[0] = v460;
  *(void *)((char *)v474 + *(void *)(v460 - 24)) = v462;
  uint64_t v475 = v461;
  std::streambuf::~streambuf(&v476);
  std::ios::~ios(&v477);
  v478[0] = v460;
  *(void *)((char *)v478 + *(void *)(v460 - 24)) = v462;
  uint64_t v479 = v461;
  std::streambuf::~streambuf(&v480);
  return std::ios::~ios(&v481);
}

void sub_10013C8D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_100045880((uint64_t)&a28);
  sub_100045880((uint64_t)&a63);
  sub_100045880((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void *sub_10013CDCC@<X0>(void *a1@<X8>)
{
  int v2 = *((_DWORD *)sub_100005150() + 186);
  if (v2)
  {
    if (v2 != 1) {
      sub_10038E134();
    }
    uint64_t v3 = "r2";
  }

  else
  {
    uint64_t v3 = "r1";
  }

  return sub_1000065CC(a1, v3);
}

std::string *sub_10013CE18@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[8]) {
    return std::to_string(a3, *(double *)&result->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  return result;
}

std::string *sub_10013CE54@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[1]) {
    return std::to_string(a3, result->__r_.__value_.__s.__data_[0]);
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  return result;
}

std::string *sub_10013CE90@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[2]) {
    return std::to_string(a3, SLOWORD(result->__r_.__value_.__l.__data_));
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  return result;
}

void sub_10013CECC(uint64_t a1)
{
  uint64_t v1 = v5;
  int v2 = v6;
  if (v5 != v6)
  {
    uint64_t v3 = (os_log_s *)qword_1008000A0;
    do
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v4 = v1;
        if (v1[23] < 0) {
          int v4 = *(char **)v1;
        }
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "#sp,\n[Solution Provider] %s",  buf,  0xCu);
        uint64_t v3 = (os_log_s *)qword_1008000A0;
      }

      v1 += 24;
    }

    while (v1 != v2);
  }

  *(void *)__int128 buf = &v5;
  sub_10013EAD4((void ***)buf);
}

void sub_10013CFD8(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider] _printDebug responder_superframe_stats:",  buf,  2u);
    int v2 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider] ticket id: %d",  buf,  8u);
    int v2 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10038E280(a1, v2, v3, v4, v5, v6, v7, v8);
  }
  int v9 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v10 = (os_log_s *)qword_1008000A0;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v11) {
      sub_10038E214(a1 + 96, v10, v12, v13, v14, v15, v16, v17);
    }
  }

  else if (v11)
  {
    sub_10038E1D4(v10);
  }

  int v18 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(a1 + 24);
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 timestamp: %.9f sec",  buf,  0xCu);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v27 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v27;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 sess id: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 mac_addr: 0x%llx",  buf,  0xCu);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    sub_10032B2C8(*(unsigned __int16 *)(a1 + 16), buf);
    if (v44 >= 0) {
      uint64_t v29 = buf;
    }
    else {
      uint64_t v29 = *(_BYTE **)buf;
    }
    int v30 = *(unsigned __int16 *)(a1 + 16);
    *(_DWORD *)__int128 v45 = 136315394;
    uint64_t v46 = v29;
    __int16 v47 = 1024;
    int v48 = v30;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 sess status: %s (%d)",  v45,  0x12u);
    if (v44 < 0) {
      operator delete(*(void **)buf);
    }
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    sub_10032B024(*(unsigned __int8 *)(a1 + 20), buf);
    if (v44 >= 0) {
      uint32_t v31 = buf;
    }
    else {
      uint32_t v31 = *(_BYTE **)buf;
    }
    int v32 = *(unsigned __int8 *)(a1 + 20);
    *(_DWORD *)__int128 v45 = 136315394;
    uint64_t v46 = v31;
    __int16 v47 = 1024;
    int v48 = v32;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 sess type: %s (%d)",  v45,  0x12u);
    if (v44 < 0) {
      operator delete(*(void **)buf);
    }
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v33 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v33;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 cycle_idx: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v34 = *(unsigned __int16 *)(a1 + 42);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v34;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 interval_ms: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v35 = *(unsigned __int16 *)(a1 + 44);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v35;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 superframe_size_250us: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v36 = *(unsigned __int8 *)(a1 + 46);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v36;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 tx_mini_slot_size_250us: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v37 = *(unsigned __int8 *)(a1 + 47);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v37;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 rx_mini_slot_size_250us: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v38 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v38;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 tx_preamble: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v39 = *(unsigned __int8 *)(a1 + 49);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v39;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 rx_preamble: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v40 = *(unsigned __int8 *)(a1 + 50);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v40;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 num_access_slots: %d",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    int v41 = *(unsigned __int8 *)(a1 + 51);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v41;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 poll_rx_status: 0x%x",  buf,  8u);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = v42;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   r1 poll_rssi_dbm: %.3f",  buf,  0xCu);
    int v18 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    sub_10038E15C(a1, v18);
  }
  uint64_t v19 = *(unsigned __int8 **)(a1 + 72);
  BOOL v20 = *(unsigned __int8 **)(a1 + 80);
  if (v19 != v20)
  {
    int v21 = 0;
    __int128 v22 = (os_log_s *)qword_1008000A0;
    do
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v21;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]   rx packet #%d info:",  buf,  8u);
        __int128 v22 = (os_log_s *)qword_1008000A0;
        ++v21;
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *((void *)v19 + 1);
        *(_DWORD *)__int128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v23;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]       r1_rx_packet[%d]_rssi_dbm: %.3f",  buf,  0x12u);
        __int128 v22 = (os_log_s *)qword_1008000A0;
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        int v24 = *v19;
        *(_DWORD *)__int128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v24;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "#sp,[Solution Provider]       r1_rx_packet[%d]_rx_status: 0x%x",  buf,  0xEu);
        __int128 v22 = (os_log_s *)qword_1008000A0;
      }

      v19 += 16;
    }

    while (v19 != v20);
  }

void *sub_10013D7CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "Unknown";
  if (a1 == 1) {
    int v2 = "Remote";
  }
  if (a1) {
    uint64_t v3 = (char *)v2;
  }
  else {
    uint64_t v3 = "Local";
  }
  return sub_1000065CC(a2, v3);
}

void sub_10013D7FC( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9 = a2;
  __int16 v116 = sub_10032B26C(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  char v115 = sub_10032AF88(*(unsigned __int8 *)(a1 + 24), v11, v12, v13, v14, v15, v16, v17);
  uint64_t v126 = *(void *)(a1 + 75);
  unsigned int v111 = *(_DWORD *)(a1 + 64);
  double v114 = sub_1003205EC(v111);
  unsigned int v18 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v19 = v18 & 0xF;
  if ((v19 & (v18 >> 4)) == 0xF)
  {
    double v20 = 0.0;
    uint64_t v108 = 0LL;
    double v109 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
    __int128 v110 = 0uLL;
    double v112 = 0.0;
    double v113 = 0.0;
  }

  else
  {
    double v112 = (double)*(char *)(a1 + 69);
    double v113 = (double)*(char *)(a1 + 68);
    double v23 = (double)*(char *)(a1 + 70);
    *(double *)&__int128 v110 = v23;
    LOWORD(v23) = *(_WORD *)(a1 + 84);
    *(double *)&unint64_t v24 = (double)*(unint64_t *)&v23;
    *(double *)&uint64_t v25 = *(double *)&v24 * 0.01;
    LOWORD(v24) = *(_WORD *)(a1 + 86);
    *(double *)&unint64_t v26 = (double)v24;
    double v22 = *(double *)&v26 * 0.01;
    LOWORD(v26) = *(_WORD *)(a1 + 88);
    double v21 = (double)v26 * 0.01;
    uint64_t v108 = v25;
    double v109 = (double)*(__int16 *)(a1 + 58);
    double v20 = (double)*(__int16 *)(a1 + 60);
    *((void *)&v110 + 1) = 1LL;
  }

  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  unsigned int v29 = v18 >> 4;
  double v30 = (double)*(__int16 *)(a1 + 46);
  double v31 = (double)*(__int16 *)(a1 + 48);
  __int16 v107 = *(_WORD *)(a1 + 62);
  char v106 = *(_BYTE *)(a1 + 83);
  int v105 = *(unsigned __int8 *)(a1 + 97);
  uint64_t v118 = 0LL;
  uint64_t v119 = 0LL;
  unint64_t v120 = 0LL;
  int v32 = (unsigned __int8 *)(a1 + 98);
  do
  {
    unsigned int v33 = *v32++;
    v28 |= (unint64_t)v33 << v27;
    v27 += 8LL;
  }

  while (v27 != 40);
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  double v36 = v31 * 0.25;
  int v37 = (unsigned __int8 *)(a1 + 103);
  do
  {
    unsigned int v38 = *v37++;
    v35 |= (unint64_t)v38 << v34;
    v34 += 8LL;
  }

  while (v34 != 40);
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  double v41 = v30 * 0.25;
  uint64_t v42 = (unsigned __int8 *)(a1 + 108);
  do
  {
    unsigned int v43 = *v42++;
    v40 |= (unint64_t)v43 << v39;
    v39 += 8LL;
  }

  while (v39 != 40);
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  uint64_t v46 = (unsigned __int8 *)(a1 + 113);
  do
  {
    unsigned int v47 = *v46++;
    v45 |= (unint64_t)v47 << v44;
    v44 += 8LL;
  }

  while (v44 != 40);
  if (v19 == 15)
  {
    int v48 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v49 = *(__int16 *)(a1 + 42);
      int v50 = *(__int16 *)(a1 + 44);
      *(_DWORD *)__int128 buf = 67109632;
      *(_DWORD *)uint64_t v122 = v49;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v50;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d",  buf,  0x14u);
    }
  }

  else
  {
    int v51 = *(__int16 *)(a1 + 42);
    int v52 = *(__int16 *)(a1 + 44);
    __int128 v53 = (double *)sub_10001FD64((uint64_t)&v120, 1uLL);
    double v54 = (double)v19 * 0.0666666667;
    double v55 = (double)v51;
    uint64_t v57 = &v53[7 * v56];
    *__int128 v53 = (double)v51;
    v53[1] = (double)v52;
    void v53[2] = v54;
    *((_BYTE *)v53 + 24) = 0;
    *((_BYTE *)v53 + 32) = 0;
    *((_BYTE *)v53 + 40) = 0;
    *((_BYTE *)v53 + 48) = 0;
    std::string::size_type v58 = v53 + 7;
    __int128 v60 = v118;
    uint64_t v59 = v119;
    if (v119 != v118)
    {
      do
      {
        __int128 v61 = *(_OWORD *)(v59 - 7);
        __int128 v62 = *(_OWORD *)(v59 - 5);
        __int128 v63 = *(_OWORD *)(v59 - 3);
        *(v53 - 1) = *(v59 - 1);
        *(_OWORD *)(v53 - 3) = v63;
        *(_OWORD *)(v53 - 5) = v62;
        *(_OWORD *)(v53 - 7) = v61;
        v53 -= 7;
        v59 -= 7;
      }

      while (v59 != v60);
      uint64_t v59 = v60;
    }

    uint64_t v118 = v53;
    uint64_t v119 = v58;
    unint64_t v120 = (unint64_t)v57;
    if (v59) {
      operator delete(v59);
    }
    uint64_t v119 = v58;
    uint64_t v64 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134218496;
      *(double *)uint64_t v122 = v55;
      *(_WORD *)&v122[8] = 2048;
      double v123 = (double)v52;
      __int16 v124 = 2048;
      double v125 = v54;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "#sp,AOA hypothesis primary: az %f el %f unc %f",  buf,  0x20u);
    }
  }

  if (v29 == 15)
  {
    uint64_t v65 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v72 = *(__int16 *)(a1 + 71);
      int v73 = *(__int16 *)(a1 + 73);
      *(_DWORD *)__int128 buf = 67109632;
      *(_DWORD *)uint64_t v122 = v72;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v73;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d",  buf,  0x14u);
    }
  }

  else
  {
    double v74 = (double)v29 * 0.0666666667;
    double v75 = (double)*(__int16 *)(a1 + 71);
    double v76 = (double)*(__int16 *)(a1 + 73);
    __int16 v77 = v119;
    if ((unint64_t)v119 >= v120)
    {
      unint64_t v79 = 0x6DB6DB6DB6DB6DB7LL * (v119 - v118) + 1;
      if (v79 > 0x492492492492492LL) {
        sub_10001E11C();
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        __int128 v81 = (char *)sub_10001FD64((uint64_t)&v120, v80);
      }
      else {
        __int128 v81 = 0LL;
      }
      char v82 = (double *)&v81[8 * (v119 - v118)];
      __int128 v83 = &v81[56 * v80];
      *char v82 = v75;
      v82[1] = v76;
      v82[2] = v74;
      *((_BYTE *)v82 + 24) = 0;
      *((_BYTE *)v82 + 32) = 0;
      *((_BYTE *)v82 + 40) = 0;
      *((_BYTE *)v82 + 48) = 0;
      uint64_t v78 = v82 + 7;
      char v85 = v118;
      uint64_t v84 = v119;
      if (v119 != v118)
      {
        do
        {
          __int128 v86 = *(_OWORD *)(v84 - 7);
          __int128 v87 = *(_OWORD *)(v84 - 5);
          __int128 v88 = *(_OWORD *)(v84 - 3);
          *(v82 - 1) = *(v84 - 1);
          *(_OWORD *)(v82 - 3) = v88;
          *(_OWORD *)(v82 - 5) = v87;
          *(_OWORD *)(v82 - 7) = v86;
          v82 -= 7;
          v84 -= 7;
        }

        while (v84 != v85);
        uint64_t v84 = v85;
      }

      uint64_t v118 = v82;
      uint64_t v119 = v78;
      unint64_t v120 = (unint64_t)v83;
      if (v84) {
        operator delete(v84);
      }
    }

    else
    {
      *uint64_t v119 = v75;
      v77[1] = v76;
      v77[2] = v74;
      *((_BYTE *)v77 + 24) = 0;
      *((_BYTE *)v77 + 32) = 0;
      *((_BYTE *)v77 + 40) = 0;
      uint64_t v78 = v77 + 7;
      *((_BYTE *)v77 + 48) = 0;
    }

    uint64_t v119 = v78;
    __int128 v89 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134218496;
      *(double *)uint64_t v122 = v75;
      *(_WORD *)&v122[8] = 2048;
      double v123 = v76;
      __int16 v124 = 2048;
      double v125 = (double)v29 * 0.0666666667;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "#sp,AOA hypothesis alt1: az %f el %f unc %f",  buf,  0x20u);
    }
  }

  char v90 = sub_10032BABC(*(unsigned __int8 *)(a1 + 90), 1LL, v66, v67, v68, v69, v70, v71);
  double v92 = 0.0;
  if (v9)
  {
    uint64_t v93 = 65537LL;
    if (v9 == 1)
    {
      LOWORD(v91) = *(_WORD *)(a1 + 54);
      double v92 = (double)v91;
    }
  }

  else
  {
    uint64_t v93 = *(unsigned __int16 *)(a1 + 54) | 0x10000LL;
  }

  __int16 v94 = *(_WORD *)(a1 + 91);
  __int16 v95 = *(_WORD *)(a1 + 93);
  __int16 v96 = *(_WORD *)(a1 + 95);
  __int16 v104 = *(_WORD *)(a1 + 22);
  double v97 = sub_1003205EC(*(void *)(a1 + 25));
  *((void *)&v101 + 1) = *((void *)&v110 + 1);
  *(double *)&__int128 v101 = v20;
  *((void *)&v100 + 1) = *((void *)&v110 + 1);
  *(double *)&__int128 v100 = v109;
  *((void *)&v99 + 1) = *((void *)&v110 + 1);
  *(double *)&__int128 v99 = v112;
  *((void *)&v98 + 1) = *((void *)&v110 + 1);
  *(double *)&__int128 v98 = v113;
  sub_100322030( a9,  v116,  v104,  v115,  *(_WORD *)(a1 + 33),  *(_BYTE *)(a1 + 35),  &v126,  0,  v97,  (double)*(int *)(a1 + 38),  v41,  v36,  (double)*(int *)(a1 + 50),  v92,  v114,  (uint64_t)&v118,  v98,  v99,  v110,  v100,  v101,  v107,  v111,  v106,  v108,  *((uint64_t *)&v110 + 1),  *(uint64_t *)&v22,  *((uint64_t *)&v110 + 1),  *(uint64_t *)&v21,  *((uint64_t *)&v110 + 1),  v90,  v102,  0,  0,  0,  0,  v94,  v95,  v96,  v103,  v105 | ((v105 != 0) << 8),  v28,  v28 != 0,  v35,  v35 != 0,  v40,  v40 != 0,  v45,  v45 != 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    v93,
    SHIDWORD(v93),
    0);
  if (v118)
  {
    uint64_t v119 = v118;
    operator delete(v118);
  }

void sub_10013DFAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10013DFD4( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9 = a2;
  __int16 v12 = sub_10032B26C(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  char v20 = sub_10032AF88(*(unsigned __int8 *)(a1 + 24), v13, v14, v15, v16, v17, v18, v19);
  uint64_t v129 = *(void *)(a1 + 75);
  unsigned int v21 = *(_DWORD *)(a1 + 64);
  double v120 = sub_1003205EC(v21);
  unsigned int v22 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v23 = v22 & 0xF;
  if ((v23 & (v22 >> 4)) == 0xF)
  {
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    __int128 v116 = 0uLL;
    double v117 = 0.0;
    double v119 = 0.0;
  }

  else
  {
    double v119 = (double)*(char *)(a1 + 68);
    double v117 = (double)*(char *)(a1 + 69);
    double v29 = (double)*(char *)(a1 + 70);
    *(double *)&__int128 v116 = v29;
    LOWORD(v29) = *(_WORD *)(a1 + 84);
    *(double *)&unint64_t v30 = (double)*(unint64_t *)&v29;
    double v28 = *(double *)&v30 * 0.01;
    LOWORD(v30) = *(_WORD *)(a1 + 86);
    *(double *)&unint64_t v31 = (double)v30;
    double v27 = *(double *)&v31 * 0.01;
    LOWORD(v31) = *(_WORD *)(a1 + 88);
    double v26 = (double)v31 * 0.01;
    double v25 = (double)*(__int16 *)(a1 + 58);
    double v24 = (double)*(__int16 *)(a1 + 60);
    *((void *)&v116 + 1) = 1LL;
  }

  int v110 = *(__int16 *)(a1 + 46);
  int v112 = *(__int16 *)(a1 + 48);
  int v111 = *(__int16 *)(a1 + 99);
  __int16 v115 = *(_WORD *)(a1 + 62);
  char v114 = *(_BYTE *)(a1 + 83);
  int v113 = *(unsigned __int8 *)(a1 + 98);
  __int128 v121 = 0LL;
  uint64_t v122 = 0LL;
  unint64_t v123 = 0LL;
  int v118 = v21;
  if (v23 == 15)
  {
    int v32 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = *(__int16 *)(a1 + 42);
      int v34 = *(__int16 *)(a1 + 44);
      *(_DWORD *)__int128 buf = 67109632;
      *(_DWORD *)double v125 = v33;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v34;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d",  buf,  0x14u);
    }
  }

  else
  {
    int v35 = *(__int16 *)(a1 + 42);
    int v36 = *(__int16 *)(a1 + 44);
    int v37 = (double *)sub_10001FD64((uint64_t)&v123, 1uLL);
    double v38 = (double)v23 * 0.0666666667;
    uint64_t v40 = &v37[7 * v39];
    *int v37 = (double)v35;
    v37[1] = (double)v36;
    v37[2] = v38;
    *((_BYTE *)v37 + 24) = 0;
    *((_BYTE *)v37 + 32) = 0;
    *((_BYTE *)v37 + 40) = 0;
    *((_BYTE *)v37 + 48) = 0;
    double v41 = v37 + 7;
    unsigned int v43 = v121;
    uint64_t v42 = v122;
    if (v122 != v121)
    {
      do
      {
        __int128 v44 = *(_OWORD *)(v42 - 7);
        __int128 v45 = *(_OWORD *)(v42 - 5);
        __int128 v46 = *(_OWORD *)(v42 - 3);
        *(v37 - 1) = *(v42 - 1);
        *(_OWORD *)(v37 - 3) = v46;
        *(_OWORD *)(v37 - 5) = v45;
        *(_OWORD *)(v37 - 7) = v44;
        v37 -= 7;
        v42 -= 7;
      }

      while (v42 != v43);
      uint64_t v42 = v43;
    }

    __int128 v121 = v37;
    uint64_t v122 = v41;
    unint64_t v123 = (unint64_t)v40;
    if (v42) {
      operator delete(v42);
    }
    uint64_t v122 = v41;
    unsigned int v47 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134218496;
      *(double *)double v125 = (double)v35;
      *(_WORD *)&v125[8] = 2048;
      double v126 = (double)v36;
      __int16 v127 = 2048;
      double v128 = v38;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "#sp,AOA hypothesis primary: az %f el %f unc %f",  buf,  0x20u);
    }
  }

  unsigned int v48 = v22 >> 4;
  if (v48 == 15)
  {
    int v49 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *(__int16 *)(a1 + 71);
      int v51 = *(__int16 *)(a1 + 73);
      *(_DWORD *)__int128 buf = 67109632;
      *(_DWORD *)double v125 = v50;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v51;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d",  buf,  0x14u);
    }
  }

  else
  {
    double v52 = (double)v48 * 0.0666666667;
    double v53 = (double)*(__int16 *)(a1 + 71);
    double v54 = (double)*(__int16 *)(a1 + 73);
    double v55 = v122;
    if ((unint64_t)v122 >= v123)
    {
      unint64_t v57 = 0x6DB6DB6DB6DB6DB7LL * (v122 - v121) + 1;
      if (v57 > 0x492492492492492LL) {
        sub_10001E11C();
      }
      else {
        unint64_t v58 = v57;
      }
      if (v58) {
        uint64_t v59 = (char *)sub_10001FD64((uint64_t)&v123, v58);
      }
      else {
        uint64_t v59 = 0LL;
      }
      __int128 v60 = (double *)&v59[8 * (v122 - v121)];
      __int128 v61 = &v59[56 * v58];
      *__int128 v60 = v53;
      v60[1] = v54;
      v60[2] = v52;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 32) = 0;
      *((_BYTE *)v60 + 40) = 0;
      *((_BYTE *)v60 + 48) = 0;
      uint64_t v56 = v60 + 7;
      __int128 v63 = v121;
      __int128 v62 = v122;
      if (v122 != v121)
      {
        do
        {
          __int128 v64 = *(_OWORD *)(v62 - 7);
          __int128 v65 = *(_OWORD *)(v62 - 5);
          __int128 v66 = *(_OWORD *)(v62 - 3);
          *(v60 - 1) = *(v62 - 1);
          *(_OWORD *)(v60 - 3) = v66;
          *(_OWORD *)(v60 - 5) = v65;
          *(_OWORD *)(v60 - 7) = v64;
          v60 -= 7;
          v62 -= 7;
        }

        while (v62 != v63);
        __int128 v62 = v63;
      }

      __int128 v121 = v60;
      uint64_t v122 = v56;
      unint64_t v123 = (unint64_t)v61;
      if (v62) {
        operator delete(v62);
      }
    }

    else
    {
      *uint64_t v122 = v53;
      v55[1] = v54;
      double v55[2] = v52;
      *((_BYTE *)v55 + 24) = 0;
      *((_BYTE *)v55 + 32) = 0;
      *((_BYTE *)v55 + 40) = 0;
      uint64_t v56 = v55 + 7;
      *((_BYTE *)v55 + 48) = 0;
    }

    uint64_t v122 = v56;
    uint64_t v67 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134218496;
      *(double *)double v125 = v53;
      *(_WORD *)&v125[8] = 2048;
      double v126 = v54;
      __int16 v127 = 2048;
      double v128 = v52;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "#sp,AOA hypothesis alt1: az %f el %f unc %f",  buf,  0x20u);
    }
  }

  unint64_t v68 = sub_10032BCC4(*(unsigned __int16 *)(a1 + 90));
  if (!v70) {
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 674, "channelBand.has_value()");
  }
  uint64_t v71 = v68;
  if ((_BYTE)v68)
  {
    if ((v68 & 0xFF000000000000LL) != 0)
    {
      uint64_t v72 = HIDWORD(v68) & 0xFF00;
      uint64_t v73 = BYTE4(v68);
      LOBYTE(v74) = 9;
      uint64_t v75 = 0x10000LL;
      goto LABEL_41;
    }

    __int128 v86 = "channelBand.value().uniiBandChannel.has_value()";
    int v87 = 690;
LABEL_64:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v87, v86);
  }

  if ((v68 & 0xFF0000) == 0)
  {
    __int128 v86 = "channelBand.value().uwbChannel.has_value()";
    int v87 = 683;
    goto LABEL_64;
  }

  uint64_t v75 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v72 = 0LL;
  unint64_t v74 = v68 >> 8;
LABEL_41:
  double v76 = 0.0;
  uint64_t v107 = v75;
  if (v9)
  {
    uint64_t v77 = 65537LL;
    if (v9 == 1)
    {
      LOWORD(v69) = *(_WORD *)(a1 + 54);
      double v76 = (double)v69;
    }
  }

  else
  {
    uint64_t v77 = *(unsigned __int16 *)(a1 + 54) | 0x10000LL;
  }

  __int16 v78 = *(_WORD *)(a1 + 92);
  __int16 v106 = *(_WORD *)(a1 + 96);
  int v79 = *(unsigned __int8 *)(a1 + 24);
  char v109 = v20;
  __int16 v108 = *(_WORD *)(a1 + 94);
  if (v79 != 27)
  {
    if (v79 == 26)
    {
      __int16 v104 = *(unsigned __int8 *)(a1 + 101);
      __int16 v105 = *(unsigned __int8 *)(a1 + 102);
    }

    else
    {
      __int16 v105 = 0;
      __int16 v104 = 0;
    }

    goto LABEL_53;
  }

  __int16 v104 = *(unsigned __int8 *)(a1 + 101);
  __int16 v105 = *(unsigned __int8 *)(a1 + 102);
  unint64_t v80 = sub_10032BCC4(*(unsigned __int16 *)(a1 + 103));
  if (!v81)
  {
    __int128 v88 = "mmsChannelBand.has_value()";
    int v89 = 735;
    goto LABEL_67;
  }

  if ((_BYTE)v80)
  {
    __int128 v88 = "mmsChannelBand.value().band == Rose::BandSelect::UWB500MHz";
    int v89 = 736;
LABEL_67:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v89, v88);
  }

  if ((v80 & 0xFF0000) == 0) {
    sub_100006080();
  }
  unint64_t v74 = v80 >> 8;
LABEL_53:
  uint64_t v102 = v77;
  char v103 = v74;
  __int16 v101 = v78;
  uint64_t v99 = *(unsigned __int16 *)(a1 + 106);
  uint64_t v100 = *(unsigned __int8 *)(a1 + 105);
  uint64_t v98 = *(unsigned __int16 *)(a1 + 108);
  if (*(_BYTE *)(a1 + 116))
  {
    if ((v79 & 0xFE) != 0x1A) {
      __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 754, "isValidSessionTypeForMmsValStatus");
    }
    uint64_t v82 = v71;
    __int16 v83 = *(_BYTE *)(a1 + 116) & 7;
    __int16 v84 = 256;
  }

  else
  {
    uint64_t v82 = v71;
    __int16 v83 = 0;
    __int16 v84 = 0;
  }

  __int16 v97 = *(_WORD *)(a1 + 22);
  double v85 = sub_1003205EC(*(void *)(a1 + 25));
  *((void *)&v96 + 1) = 1LL;
  *(double *)&__int128 v96 = (double)v111 * 0.25;
  *((void *)&v93 + 1) = *((void *)&v116 + 1);
  *(double *)&__int128 v93 = v24;
  *((void *)&v92 + 1) = *((void *)&v116 + 1);
  *(double *)&__int128 v92 = v25;
  *((void *)&v91 + 1) = *((void *)&v116 + 1);
  *(double *)&__int128 v91 = v117;
  *((void *)&v90 + 1) = *((void *)&v116 + 1);
  *(double *)&__int128 v90 = v119;
  sub_100322030( a9,  v12,  v97,  v109,  *(_WORD *)(a1 + 33),  *(_BYTE *)(a1 + 35),  &v129,  0,  v85,  (double)*(int *)(a1 + 38),  (double)v110 * 0.25,  (double)v112 * 0.25,  (double)*(int *)(a1 + 50),  v76,  v120,  (uint64_t)&v121,  v90,  v91,  v116,  v92,  v93,  v115,  v118,  v114,  *(uint64_t *)&v28,  *((uint64_t *)&v116 + 1),  *(uint64_t *)&v27,  *((uint64_t *)&v116 + 1),  *(uint64_t *)&v26,  *((uint64_t *)&v116 + 1),  v103,  v94,  v82 | 0x100,  (v82 | 0x100uLL) >> 32,  v73 | v107 | v72,  (v73 | v107 | (unint64_t)v72) >> 32,  v101,  v108,  v106,  v95,  v113 | ((v113 != 0) << 8),  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,
    v96,
    v104 | 0x100,
    0,
    v105 | 0x100,
    0,
    v100 | 0x100,
    (v100 | 0x100uLL) >> 32,
    v99 | 0x10000,
    (v99 | 0x10000uLL) >> 32,
    v98 | 0x10000,
    (v98 | 0x10000uLL) >> 32,
    v102,
    SHIDWORD(v102),
    v84 | v83);
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }

void sub_10013E96C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10013E9A0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  __int16 v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000063A8(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      __int16 v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10013EA5C((uint64_t)v9);
  return v4;
}

void sub_10013EA48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013EA5C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10013EA90(a1);
  }
  return a1;
}

void sub_10013EA90(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

void sub_10013EAD4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10013EB14((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_10013EB14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

void sub_10013EB60( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10013EB70()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F6BF8 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F6BE8 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6BE8, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F6C10 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F6C00 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C00, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  uint64_t v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  char v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F6C28 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F6C18 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C18, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  __int16 v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F6C40 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F6C30 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C30, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  uint64_t v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F6C58 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F6C48 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C48, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  char v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F6C70 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F6C60 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C60, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  double v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  double v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F6C88 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F6C78 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C78, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  double v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F6CA0 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F6C90 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F6C90, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  int v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  int v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F6CB8 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F6CA8 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F6CA8,  (void *)&_mh_execute_header);
}

void sub_10013F154( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013F1C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFCF0[a1]);
}

void *sub_10013F1DC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFD48[a1]);
}

void *sub_10013F1F0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFD90[a1]);
}

void *sub_10013F204@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFDB0[a1]);
}

uint64_t sub_10013F218( uint64_t a1, int a2, int a3, __int128 *a4, int a5, char a6, int a7, int a8, void *__src)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 1) = a2;
  *(_DWORD *)(a1 + 4) = a3;
  __int128 v12 = *a4;
  __int128 v13 = a4[1];
  *(_OWORD *)(a1 + 36) = *(__int128 *)((char *)a4 + 28);
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 52) = a6;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a7;
  *(_DWORD *)(a1 + 64) = a8;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = -1LL;
  *(_WORD *)(a1 + 80) = -1;
  *(_BYTE *)(a1 + 82) = 0;
  *(void *)(a1 + 83) = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 91) = 0;
  memcpy((void *)(a1 + 96), __src, 0x198uLL);
  if (a2 == 100) {
    sub_10038E2EC();
  }
  if (!a3) {
    sub_10038E314();
  }
  if (*(_BYTE *)(a1 + 153) || *(_BYTE *)(a1 + 207) || *(_BYTE *)(a1 + 209) || *(_BYTE *)(a1 + 353))
  {
    *(_BYTE *)a1 = 1;
    sub_10013F2E4(a1);
  }

  return a1;
}

void sub_10013F2E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "RoseServiceRequest::assignChannelDiversitySettings",  buf,  2u);
  }

  if (*(_BYTE *)(a1 + 209))
  {
    if (!*(_BYTE *)(a1 + 207)) {
      goto LABEL_15;
    }
    int v3 = *(_DWORD *)(a1 + 64);
    if (v3 && *(unsigned __int8 *)(a1 + 206) != *(unsigned __int8 *)(a1 + 208))
    {
      if (v3 != 1)
      {
        if (v3 == 2)
        {
          uint64_t v4 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 v9 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin_P2S",  v9,  2u);
          }

          if (*(_BYTE *)(a1 + 120))
          {
            *(_WORD *)(a1 + 118) |= 4u;
          }

          else
          {
            *(_WORD *)(a1 + 118) = 4;
            *(_BYTE *)(a1 + 120) = 1;
          }
        }

        return;
      }

      __int128 v5 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      __int16 v8 = 0;
      uint64_t v6 = "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin";
      __int128 v7 = (uint8_t *)&v8;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      return;
    }
  }

  else if (!*(_BYTE *)(a1 + 207))
  {
    goto LABEL_15;
  }

  *(_WORD *)(a1 + 208) = *(_WORD *)(a1 + 206);
LABEL_15:
  if (!*(_BYTE *)(a1 + 211)) {
    *(_BYTE *)(a1 + 211) = 1;
  }
  *(_BYTE *)(a1 + 210) = 0;
  __int128 v5 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v10 = 0;
    uint64_t v6 = "RoseServiceRequest::assignChannelDiversitySettings - channelDiversityPrecondition is false";
    __int128 v7 = v10;
    goto LABEL_19;
  }

uint64_t sub_10013F480( uint64_t a1, int a2, int a3, __int128 *a4, int a5, char a6, int a7, int a8, void *__src)
{
  return sub_10013F218(a1, a2, a3, a4, a5, a6, a7, a8, __src);
}

uint64_t sub_10013F48C(uint64_t a1)
{
  if (!*(_BYTE *)a1) {
    sub_10038E33C();
  }
  __int16 v9 = 0;
  int v1 = *(_DWORD *)(a1 + 4);
  if ((v1 - 5) >= 2)
  {
    if (v1 == 4)
    {
      if (*(_BYTE *)(a1 + 153)) {
        sub_10038E3B4();
      }
      if (!*(_BYTE *)(a1 + 207)) {
        goto LABEL_19;
      }
      int v3 = *(unsigned __int8 *)(a1 + 206);
      if (v3 == 5)
      {
        uint64_t v4 = (__int16 *)((char *)&v9 + 1);
      }

      else
      {
        if (v3 != 9)
        {
LABEL_19:
          if (!*(_BYTE *)(a1 + 209)) {
            return HIBYTE(v9) | (v9 << 8);
          }
          int v2 = *(unsigned __int8 *)(a1 + 208);
          goto LABEL_21;
        }

        uint64_t v4 = &v9;
      }

      *(_BYTE *)uint64_t v4 = 1;
      goto LABEL_19;
    }

    if (*(_BYTE *)(a1 + 207)) {
      sub_10038E38C();
    }
    if (*(_BYTE *)(a1 + 209)) {
      sub_10038E364();
    }
    if (*(_BYTE *)(a1 + 153))
    {
      int v5 = *(unsigned __int8 *)(a1 + 152);
      if (v5 == 5)
      {
        uint64_t v6 = (__int16 *)((char *)&v9 + 1);
        goto LABEL_27;
      }

      if (v5 == 9)
      {
        uint64_t v6 = &v9;
LABEL_27:
        *(_BYTE *)uint64_t v6 = 1;
      }
    }

    if (v1 == 1 && *(_BYTE *)(a1 + 120) && (*(_WORD *)(a1 + 118) & 4) != 0) {
      __int16 v9 = 257;
    }
    return HIBYTE(v9) | (v9 << 8);
  }

  if (!*(_BYTE *)(a1 + 353)) {
    sub_10038E3DC();
  }
  int v2 = *(unsigned __int8 *)(a1 + 352);
LABEL_21:
  if (v2 == 5)
  {
    __int128 v7 = (__int16 *)((char *)&v9 + 1);
    goto LABEL_25;
  }

  if (v2 == 9)
  {
    __int128 v7 = &v9;
LABEL_25:
    *(_BYTE *)__int128 v7 = 1;
  }

  return HIBYTE(v9) | (v9 << 8);
}

uint64_t sub_10013F5C8@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 1);
  if (v4 == 100)
  {
    int v5 = "Unspecified";
  }

  else if (v4 == 1)
  {
    int v5 = "Responder";
  }

  else
  {
    int v5 = "Initiator";
  }

  sub_1000065CC(&__p, v5);
  if ((v19 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = v18;
  }
  sub_100046B94(&v21, (uint64_t)p_p, v7);
  sub_100046B94(&v21, (uint64_t)", [UseCase]: ", 13LL);
  sub_10013F1C8(*(_DWORD *)(a1 + 156), &__p);
  if ((v19 & 0x80u) == 0) {
    __int16 v8 = &__p;
  }
  else {
    __int16 v8 = __p;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v9 = v19;
  }
  else {
    uint64_t v9 = v18;
  }
  sub_100046B94(&v21, (uint64_t)v8, v9);
  sub_100046B94(&v21, (uint64_t)", [MacMode]: ", 13LL);
  sub_10013F1DC(*(_DWORD *)(a1 + 4), &__p);
  if ((v19 & 0x80u) == 0) {
    char v10 = &__p;
  }
  else {
    char v10 = __p;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v11 = v19;
  }
  else {
    uint64_t v11 = v18;
  }
  __int128 v12 = sub_100046B94(&v21, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
  __int128 v13 = std::locale::use_facet(&v24, &std::ctype<char>::id);
  uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
  std::locale::~locale(&v24);
  std::ostream::put(v12, v14);
  std::ostream::flush(v12);
  std::stringbuf::str(a2, &v22);
  *(void *)((char *)v20
  uint64_t v21 = v15;
  std::streambuf::~streambuf(&v22);
  return std::ios::~ios(&v23);
}

void sub_10013F804( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_10013F854@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFDD0[a1]);
}

void *sub_10013F868@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFE28[a1]);
}

void *sub_10013F87C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFE70[a1]);
}

void *sub_10013F890@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFE90[a1]);
}

BOOL sub_10013F8A4(int a1)
{
  return (a1 - 3) < 4;
}

uint64_t sub_10013F8B4(unsigned int a1)
{
  return (a1 < 7) & (0x54u >> a1);
}

void *sub_10013F8CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFEB0[a1]);
}

void *sub_10013F8E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFF08[a1]);
}

void *sub_10013F8F4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFF50[a1]);
}

void *sub_10013F908@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFF70[a1]);
}

void sub_10013F91C(char *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v12 = xmmword_100422FC0;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_1007F7698);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1007F7698))
  {
    sub_10012AA30(&__src);
    std::random_device::result_type v9 = std::random_device::operator()(&__src);
    dword_1007F6CD0[0] = v9;
    for (uint64_t i = 1LL; i != 624; ++i)
    {
      std::random_device::result_type v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
      dword_1007F6CD0[i] = v9;
    }

    qword_1007F7690 = 0LL;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_1007F7698);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_1007F76A0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1007F76A0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1007F3518, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F76A0);
  }

  std::mutex::lock(&stru_1007F3518);
  __int16 v6 = word_100423036[sub_10012AAA0((uint64_t)&v12, (uint64_t)dword_1007F6CD0, &v12)];
  int v7 = *((_DWORD *)sub_100005150() + 144);
  if (*a1 == 5) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = 2;
  }
  sub_100149238((uint64_t)v11, v7, v8, 0);
  sub_100149570(v11, 0);
  LOWORD(__src.__padding_) = 256;
  BYTE2(__src.__padding_) = sub_1001498FC((uint64_t)v11);
  HIBYTE(__src.__padding_) = 1;
  char v16 = sub_100149904((uint64_t)v11);
  char v17 = 1;
  char v18 = sub_10014990C((uint64_t)v11);
  int v19 = 151062785;
  char v20 = 1;
  __int16 v21 = 0;
  char v22 = 1;
  __int16 v23 = 0;
  int v24 = 201395201;
  char v25 = 1;
  __int16 v26 = 2;
  char v27 = 1;
  char v28 = 0;
  char v29 = 0;
  char v30 = 0;
  char v31 = 0;
  char v32 = *a1;
  char v33 = 1;
  int v34 = 1;
  __int16 v35 = 0;
  char v36 = sub_100149914((uint64_t)v11);
  char v37 = 1;
  char v38 = sub_10014991C((uint64_t)v11);
  char v39 = 1;
  char v40 = sub_100149924((uint64_t)v11);
  char v41 = 1;
  __int16 v42 = 0;
  char v43 = 1;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  __int16 v48 = v6;
  char v49 = 1;
  __int16 v50 = v6;
  char v51 = 1;
  int v52 = 17891601;
  char v55 = 0;
  __int16 v56 = 0;
  char v57 = 0;
  __int16 v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v66 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v80 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  __int16 v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v106 = 0;
  char v109 = 0;
  char v54 = 0;
  uint64_t v53 = 0LL;
  char v65 = 0;
  int v64 = 0;
  char v68 = 0;
  int v67 = 0;
  char v73 = 0;
  uint64_t v72 = 0LL;
  uint64_t v77 = 0LL;
  char v79 = 0;
  int v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  __int16 v96 = 0;
  int v95 = 0;
  int v97 = 0;
  char v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  char v108 = 0;
  int v107 = 0;
  uint64_t v112 = 0LL;
  uint64_t v110 = 0LL;
  uint64_t v111 = 0LL;
  LOBYTE(v13) = 0;
  char v14 = 0;
  sub_10013F480(a2, 0, 1, &v13, 4, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_1007F3518);
}

void sub_10013FCF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, std::random_device a21)
{
}

uint64_t sub_10013FD60@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100005150() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100149238((uint64_t)v7, v4, v5, 0);
  sub_1001495A8(v7, 0);
  __int16 __src = 257;
  char v11 = sub_1001498FC((uint64_t)v7);
  char v12 = 1;
  char v13 = sub_100149904((uint64_t)v7);
  char v14 = 1;
  char v15 = sub_10014990C((uint64_t)v7);
  int v16 = 151062785;
  char v17 = 1;
  __int16 v18 = 0;
  char v19 = 1;
  __int16 v20 = 0;
  int v21 = 201395201;
  char v22 = 1;
  __int16 v23 = 3;
  char v24 = 1;
  char v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  char v29 = *a1;
  char v30 = 1;
  int v31 = 1;
  __int16 v32 = 0;
  char v33 = sub_100149914((uint64_t)v7);
  char v34 = 1;
  char v35 = sub_10014991C((uint64_t)v7);
  char v36 = 1;
  char v37 = sub_100149924((uint64_t)v7);
  char v38 = 1;
  __int16 v39 = 0;
  char v40 = 1;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  __int16 v45 = 75;
  char v46 = 1;
  __int16 v47 = 1000;
  char v48 = 1;
  int v49 = 18874625;
  char v52 = 0;
  __int16 v53 = 0;
  char v54 = 0;
  __int16 v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v63 = 0;
  char v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v72 = 0;
  char v73 = 0;
  char v77 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  __int16 v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v103 = 0;
  char v106 = 0;
  char v51 = 0;
  uint64_t v50 = 0LL;
  char v62 = 0;
  int v61 = 0;
  char v65 = 0;
  int v64 = 0;
  char v70 = 0;
  uint64_t v69 = 0LL;
  uint64_t v74 = 0LL;
  char v76 = 0;
  int v75 = 0;
  *(_DWORD *)((char *)v78 + 3) = 0;
  v78[0] = 0;
  __int16 v93 = 0;
  int v92 = 0;
  int v94 = 0;
  char v95 = 0;
  v102[0] = 0;
  *(_DWORD *)((char *)v102 + 3) = 0;
  char v105 = 0;
  int v104 = 0;
  uint64_t v109 = 0LL;
  uint64_t v107 = 0LL;
  uint64_t v108 = 0LL;
  LOBYTE(v8) = 0;
  char v9 = 0;
  return sub_10013F480(a2, 1, 1, &v8, 1, 0, 1, 0, &__src);
}

void sub_100140024(char *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v19 = xmmword_100422FD0;
  __int128 v20 = xmmword_100422FD0;
  __int128 v18 = xmmword_100422FE0;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_1007F8070);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1007F8070))
  {
    sub_10012AA30(&__src);
    std::random_device::result_type v15 = std::random_device::operator()(&__src);
    dword_1007F76A8[0] = v15;
    for (uint64_t i = 1LL; i != 624; ++i)
    {
      std::random_device::result_type v15 = i + 1812433253 * (v15 ^ (v15 >> 30));
      dword_1007F76A8[i] = v15;
    }

    qword_1007F8068 = 0LL;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_1007F8070);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_1007F8078);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1007F8078))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1007F3558, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F8078);
  }

  std::mutex::lock(&stru_1007F3558);
  int v6 = *((_DWORD *)sub_100005150() + 144);
  if (*a1 == 5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = 2;
  }
  sub_100149238((uint64_t)v17, v6, v7, 0);
  sub_1001495E0((unsigned __int8 *)v17, 1);
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_1007F8088);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1007F8088))
  {
    word_1007F8080 = sub_1001498A8(v17);
    __cxa_guard_release(&qword_1007F8088);
  }

  LOWORD(__src.__padding_) = 257;
  BYTE2(__src.__padding_) = sub_1001498FC((uint64_t)v17);
  HIBYTE(__src.__padding_) = 1;
  char v28 = sub_100149904((uint64_t)v17);
  char v29 = 1;
  char v30 = sub_10014990C((uint64_t)v17);
  __int16 v31 = 2561;
  char v32 = 1;
  char v33 = *((_BYTE *)&aGhijlmnoqrstvw[14] + sub_10012AAA0((uint64_t)&v18, (uint64_t)dword_1007F76A8, &v18));
  char v34 = 1;
  __int16 v35 = 1024;
  char v36 = 1;
  __int16 v37 = 1024;
  int v38 = 65537;
  char v39 = 1;
  __int16 v40 = 3;
  char v41 = 1;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = *a1;
  char v47 = 1;
  int v48 = 4;
  __int16 v49 = 256;
  char v50 = sub_100149914((uint64_t)v17);
  char v51 = 1;
  char v52 = sub_10014991C((uint64_t)v17);
  char v53 = 1;
  char v54 = sub_100149924((uint64_t)v17);
  char v55 = 1;
  __int16 v56 = word_1007F8080;
  char v57 = 1;
  if (a1[17])
  {
    uint64_t v9 = sub_10012AAA0((uint64_t)&v19, (uint64_t)dword_1007F76A8, &v19);
    char v10 = aGhijlmnoqrstvw;
  }

  else
  {
    uint64_t v9 = sub_10012AAA0((uint64_t)&v20, (uint64_t)dword_1007F76A8, &v20);
    char v10 = a345689Bc;
  }

  __int16 v58 = v10[v9];
  char v59 = 1;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v64 = 0;
  char v65 = 0;
  v66[14] = 0;
  __int16 v67 = 0;
  char v68 = 0;
  __int16 v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v72 = 0;
  char v73 = 0;
  char v74 = 0;
  char v77 = 0;
  char v80 = 0;
  char v81 = 0;
  char v82 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v91 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  __int16 v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v117 = 0;
  char v120 = 0;
  memset(v66, 0, 13);
  char v76 = 0;
  int v75 = 0;
  char v79 = 0;
  int v78 = 0;
  char v84 = 0;
  uint64_t v83 = 0LL;
  uint64_t v88 = 0LL;
  char v90 = 0;
  int v89 = 0;
  *(_DWORD *)((char *)v92 + 3) = 0;
  v92[0] = 0;
  __int16 v107 = 0;
  int v106 = 0;
  int v108 = 0;
  char v109 = 0;
  v116[0] = 0;
  *(_DWORD *)((char *)v116 + 3) = 0;
  char v119 = 0;
  int v118 = 0;
  uint64_t v123 = 0LL;
  uint64_t v121 = 0LL;
  uint64_t v122 = 0LL;
  uint64_t v11 = *((void *)a1 + 1);
  __int128 v12 = *(_OWORD *)(v11 + 16);
  __int128 v24 = *(_OWORD *)v11;
  __int128 v25 = v12;
  uint64_t v26 = *(void *)(v11 + 32);
  int v13 = a1[16];
  v21[0] = v24;
  v21[1] = v12;
  uint64_t v22 = v26;
  if (v13) {
    int v14 = 5;
  }
  else {
    int v14 = 1;
  }
  char v23 = 1;
  sub_10013F480(a2, 1, 2, v21, v14, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_1007F3558);
}

void sub_1001404D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::random_device a31)
{
}

uint64_t sub_10014054C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100005150() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100149238((uint64_t)v9, v4, v5, 0);
  sub_100149408(v9, 0, 1);
  __int16 __src = 256;
  char v17 = sub_1001498FC((uint64_t)v9);
  char v18 = 1;
  char v19 = sub_100149904((uint64_t)v9);
  char v20 = 1;
  char v21 = sub_10014990C((uint64_t)v9);
  int v22 = 184617729;
  char v23 = 1;
  __int16 v24 = 0;
  char v25 = 1;
  __int16 v26 = 0;
  int v27 = 65537;
  char v28 = 1;
  __int16 v29 = 2;
  char v30 = 1;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = *a1;
  char v36 = 1;
  int v37 = 0;
  __int16 v38 = 257;
  char v39 = sub_100149914((uint64_t)v9);
  char v40 = 1;
  char v41 = sub_10014991C((uint64_t)v9);
  char v42 = 1;
  char v43 = sub_100149924((uint64_t)v9);
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  __int16 v47 = 50;
  char v48 = 1;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  v55[14] = 0;
  __int16 v56 = 0;
  char v57 = 0;
  __int16 v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v66 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v80 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  __int16 v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v106 = 0;
  char v109 = 0;
  memset(v55, 0, 13);
  char v65 = 0;
  int v64 = 0;
  char v68 = 0;
  int v67 = 0;
  char v73 = 0;
  uint64_t v72 = 0LL;
  uint64_t v77 = 0LL;
  char v79 = 0;
  int v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  __int16 v96 = 0;
  int v95 = 0;
  int v97 = 0;
  char v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  char v108 = 0;
  int v107 = 0;
  uint64_t v112 = 0LL;
  uint64_t v110 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v6 = *((void *)a1 + 1);
  __int128 v7 = *(_OWORD *)(v6 + 16);
  __int128 v13 = *(_OWORD *)v6;
  __int128 v14 = v7;
  uint64_t v15 = *(void *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  uint64_t v11 = v15;
  char v12 = 1;
  return sub_10013F480(a2, 0, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_10014081C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100005150() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100149238((uint64_t)v9, v4, v5, 0);
  sub_10014953C(v9, 0, 1);
  __int16 __src = 257;
  char v17 = sub_1001498FC((uint64_t)v9);
  char v18 = 1;
  char v19 = sub_100149904((uint64_t)v9);
  char v20 = 1;
  char v21 = sub_10014990C((uint64_t)v9);
  int v22 = 184617729;
  char v23 = 1;
  __int16 v24 = 0;
  char v25 = 1;
  __int16 v26 = 0;
  int v27 = 65537;
  char v28 = 1;
  __int16 v29 = 2;
  char v30 = 1;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = *a1;
  char v36 = 1;
  int v37 = 0;
  __int16 v38 = 257;
  char v39 = sub_100149914((uint64_t)v9);
  char v40 = 1;
  char v41 = sub_10014991C((uint64_t)v9);
  char v42 = 1;
  char v43 = sub_100149924((uint64_t)v9);
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  __int16 v47 = 50;
  char v48 = 1;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  v55[14] = 0;
  __int16 v56 = 0;
  char v57 = 0;
  __int16 v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v66 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v80 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  __int16 v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v106 = 0;
  char v109 = 0;
  memset(v55, 0, 13);
  char v65 = 0;
  int v64 = 0;
  char v68 = 0;
  int v67 = 0;
  char v73 = 0;
  uint64_t v72 = 0LL;
  uint64_t v77 = 0LL;
  char v79 = 0;
  int v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  __int16 v96 = 0;
  int v95 = 0;
  int v97 = 0;
  char v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  char v108 = 0;
  int v107 = 0;
  uint64_t v112 = 0LL;
  uint64_t v110 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v6 = *((void *)a1 + 1);
  __int128 v7 = *(_OWORD *)(v6 + 16);
  __int128 v13 = *(_OWORD *)v6;
  __int128 v14 = v7;
  uint64_t v15 = *(void *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  uint64_t v11 = v15;
  char v12 = 1;
  return sub_10013F480(a2, 1, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_100140AE8@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100005150() + 144);
  unsigned int v5 = a1[11];
  if (*a1 == 5) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  sub_100149238((uint64_t)v20, v4, v6, 0);
  if (a1[87]) {
    BOOL v7 = a1[86] != 0;
  }
  else {
    BOOL v7 = v4 == 201 && v5 == 4;
  }
  sub_100149764(v20, v7, a1[85]);
  __int16 __src = 256;
  char v24 = sub_1001498FC((uint64_t)v20);
  char v25 = 1;
  char v26 = sub_100149904((uint64_t)v20);
  char v27 = 1;
  char v28 = sub_10014990C((uint64_t)v20);
  *(_DWORD *)__int16 v29 = 201395201;
  *(_WORD *)&v29[4] = 1;
  *(_WORD *)char v30 = 0;
  *(_DWORD *)char v31 = 201395200;
  v31[4] = 1;
  __int16 v32 = 7;
  char v33 = 1;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  __int16 v38 = 0;
  int v39 = *((_DWORD *)a1 + 23);
  __int16 v40 = 0;
  char v41 = sub_100149914((uint64_t)v20);
  char v42 = 1;
  char v43 = sub_10014991C((uint64_t)v20);
  char v44 = 1;
  char v45 = sub_100149924((uint64_t)v20);
  __int16 v46 = 1;
  char v47 = 0;
  LOBYTE(v48) = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  LOBYTE(v52) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  char v55 = 0;
  int v56 = 0;
  char v57 = sub_100140FCC(v5);
  char v58 = 1;
  char v59 = *a1;
  char v60 = 1;
  __int16 v61 = *(_WORD *)(a1 + 1);
  int v62 = 256;
  char v63 = 1;
  __int16 v64 = 256;
  __int128 v65 = *(_OWORD *)(a1 + 60);
  *(_WORD *)char v66 = 1;
  char v67 = 0;
  uint64_t v70 = *((void *)a1 + 5);
  __int128 v9 = *(_OWORD *)(a1 + 24);
  __int128 v68 = *(_OWORD *)(a1 + 8);
  __int128 v69 = v9;
  char v71 = 1;
  char v72 = 0;
  char v73 = 0;
  char v76 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v90 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  __int16 v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v116 = 0;
  char v119 = 0;
  char v75 = 0;
  int v74 = 0;
  char v78 = 0;
  int v77 = 0;
  char v83 = 0;
  uint64_t v82 = 0LL;
  uint64_t v87 = 0LL;
  char v89 = 0;
  int v88 = 0;
  *(_DWORD *)((char *)v91 + 3) = 0;
  v91[0] = 0;
  __int16 v106 = 0;
  int v105 = 0;
  int v107 = 0;
  char v108 = 0;
  v115[0] = 0;
  *(_DWORD *)((char *)v115 + 3) = 0;
  int v117 = 0;
  char v118 = 0;
  uint64_t v121 = 0LL;
  uint64_t v120 = 0LL;
  uint64_t v122 = 0LL;
  int v10 = *((_DWORD *)a1 + 14);
  if (!v10) {
    sub_10038E404();
  }
  if (!v31[4]) {
    sub_10038E42C();
  }
  if (!v31[2]) {
    sub_10038E454();
  }
  if (v31[1] <= 0xBu) {
    sub_10038E47C();
  }
  if (v31[3] <= 0xBu) {
    sub_10038E4A4();
  }
  unsigned int v11 = a1[11];
  if (v11 == 4)
  {
    unsigned int v12 = *((_DWORD *)a1 + 20);
    if (v12 - 11 <= 0xFFFFFFF5) {
      sub_10038E51C();
    }
    __int16 v13 = sub_10012A41C(v10, v12, (unint64_t)v31[1] >> 2, (unint64_t)v31[3] >> 2);
    if (!v53) {
      char v53 = 1;
    }
    int v14 = *((_DWORD *)a1 + 20);
    __int16 v52 = v13;
    if (!v55) {
      char v55 = 1;
    }
    __int16 v54 = v13;
    if (!BYTE1(v56)) {
      BYTE1(v56) = 1;
    }
    LOBYTE(v56) = v14;
    if (!HIBYTE(v56)) {
      HIBYTE(v56) = 1;
    }
    BYTE2(v56) = v14;
  }

  else
  {
    if (v11 != 5)
    {
      if (v11 <= 3) {
        sub_10038E4F4();
      }
      sub_10038E4CC();
    }

    if (*((_DWORD *)a1 + 20) != 1) {
      sub_10038E544();
    }
  }

  if (a1[88])
  {
    if (!v67) {
      char v67 = 1;
    }
    *(_WORD *)&v66[1] = 1024;
    __int16 v48 = 150;
    char v49 = 1;
  }

  else if (a1[89])
  {
    if (!v30[0]) {
      v30[0] = 1;
    }
    *(_WORD *)&v29[5] = 768;
    if (!v31[0]) {
      v31[0] = 1;
    }
    *(_WORD *)&v30[1] = 768;
    *(_DWORD *)&v31[1] = 18874656;
    *(_DWORD *)&v29[1] = 17367305;
  }

  else
  {
    if (!v30[0]) {
      v30[0] = 1;
    }
    *(_WORD *)&v29[5] = 0;
    if (!v31[0]) {
      v31[0] = 1;
    }
    *(_WORD *)&v30[1] = 0;
  }

  int v16 = *((_DWORD *)a1 + 12);
  int v15 = *((_DWORD *)a1 + 13);
  int v17 = a1[90];
  if (a1[84] && sub_100320754(v4))
  {
    LOWORD(v62) = 264;
    int v18 = 1;
  }

  else
  {
    int v18 = 0;
  }

  LOBYTE(v21) = 0;
  char v22 = 0;
  return sub_10013F480(a2, 0, 4, &v21, v15, v17 != 0, v16, v18, &__src);
}

unint64_t sub_100140FCC(unsigned int a1)
{
  if (a1 >= 6) {
    sub_10038E56C();
  }
  return (0x40403020100uLL >> (8 * a1)) & 7;
}

uint64_t sub_100140FFC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[77]) {
    char v4 = a1[76];
  }
  else {
    char v4 = -1;
  }
  int v5 = *((_DWORD *)sub_100005150() + 144);
  unsigned int v6 = a1[11];
  if (*a1 == 5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = 2;
  }
  sub_100149238((uint64_t)v17, v5, v7, 0);
  sub_100149798(v17, 0, a1[85]);
  __int16 v8 = 0;
  uint64_t v9 = *((int *)a1 + 13);
  if (*((_DWORD *)sub_100005150() + 186) == 1) {
    v8 |= 0x20u;
  }
  __int16 __src = 257;
  char v21 = sub_1001498FC((uint64_t)v17);
  char v22 = 1;
  char v23 = sub_100149904((uint64_t)v17);
  char v24 = 1;
  char v25 = sub_10014990C((uint64_t)v17);
  *(_DWORD *)char v26 = 201395201;
  v26[4] = 1;
  __int16 v27 = 0;
  char v28 = 1;
  __int16 v29 = 0;
  *(_DWORD *)char v30 = 201395201;
  v30[4] = 1;
  __int16 v31 = v8;
  char v32 = 1;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  __int16 v37 = 0;
  int v38 = *((_DWORD *)a1 + 23);
  char v41 = 0;
  LOBYTE(v42) = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v40 = 0;
  uint64_t v39 = 0LL;
  __int16 v46 = 30;
  char v47 = 1;
  __int16 v48 = 5000;
  char v49 = 1;
  int v50 = 18874625;
  char v51 = sub_100140FCC(v6);
  char v52 = 1;
  char v53 = *a1;
  char v54 = 1;
  __int16 v55 = *(_WORD *)(a1 + 1);
  int v56 = 256;
  char v57 = 1;
  char v58 = v4;
  char v59 = 1;
  __int128 v60 = *(_OWORD *)(a1 + 60);
  *(_WORD *)__int16 v61 = 1;
  char v62 = 0;
  __int128 v10 = *(_OWORD *)(a1 + 8);
  __int128 v11 = *(_OWORD *)(a1 + 24);
  uint64_t v65 = *((void *)a1 + 5);
  __int128 v63 = v10;
  __int128 v64 = v11;
  char v66 = 1;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v85 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  __int16 v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v111 = 0;
  char v114 = 0;
  char v70 = 0;
  int v69 = 0;
  char v73 = 0;
  int v72 = 0;
  char v78 = 0;
  uint64_t v77 = 0LL;
  uint64_t v82 = 0LL;
  char v84 = 0;
  int v83 = 0;
  *(_DWORD *)((char *)v86 + 3) = 0;
  v86[0] = 0;
  __int16 v101 = 0;
  int v100 = 0;
  int v102 = 0;
  char v103 = 0;
  v110[0] = 0;
  *(_DWORD *)((char *)v110 + 3) = 0;
  int v112 = 0;
  char v113 = 0;
  uint64_t v116 = 0LL;
  uint64_t v115 = 0LL;
  uint64_t v117 = 0LL;
  if (a1[88])
  {
    char v62 = 1;
    *(_WORD *)&v61[1] = 1024;
    __int16 v42 = 150;
    char v43 = 1;
  }

  else if (a1[89])
  {
    if (!v28) {
      char v28 = 1;
    }
    __int16 v27 = 768;
    if (!v30[0]) {
      v30[0] = 1;
    }
    __int16 v29 = 768;
    *(_DWORD *)&v30[1] = 18874656;
    *(_DWORD *)&v26[1] = 17367305;
  }

  else
  {
    if (!v28) {
      char v28 = 1;
    }
    __int16 v27 = 0;
    if (!v30[0]) {
      v30[0] = 1;
    }
    __int16 v29 = 0;
  }

  int v12 = a1[90];
  int v13 = *((_DWORD *)a1 + 12);
  int v14 = *((_DWORD *)a1 + 13);
  if (a1[84] && sub_100320754(v5))
  {
    LOWORD(v56) = 264;
    int v15 = 1;
  }

  else
  {
    int v15 = 0;
  }

  LOBYTE(v18) = 0;
  char v19 = 0;
  return sub_10013F480(a2, 1, 4, &v18, v14, v12 != 0, v13, v15, &__src);
}

__n128 sub_1001413F4@<Q0>( int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  char v6 = a2;
  if (a2 != 102 && a2 != 106) {
    sub_10038E594();
  }
  if (*a4)
  {
    if (!a4[2]) {
      sub_10038E774();
    }
    if (!a4[3]) {
      sub_10038E79C();
    }
LABEL_9:
    if (!a4[8]) {
      sub_10038E6FC();
    }
    if (!a4[16]) {
      sub_10038E724();
    }
    __int16 v9 = 1;
    goto LABEL_12;
  }

  if (a4[2]) {
    sub_10038E74C();
  }
  if (a4[3]) {
    goto LABEL_9;
  }
  if (a4[8]) {
    sub_10038E6D4();
  }
  __int16 v9 = a4[16];
  if (a4[16]) {
    sub_10038E6AC();
  }
LABEL_12:
  if (a4[27]) {
    v9 |= 2u;
  }
  if (a4[28]) {
    __int16 v10 = v9 | 4;
  }
  else {
    __int16 v10 = v9;
  }
  if (*((_BYTE *)a1 + 19))
  {
    if (*((_BYTE *)a1 + 16))
    {
      __int16 v11 = v10 | 0xC0;
      int v12 = *((unsigned __int8 *)a1 + 17);
      BOOL v13 = v12 != 0;
      char v14 = v12 - 1;
      if (v13) {
        char v15 = v14;
      }
      else {
        char v15 = 0;
      }
    }

    else
    {
      char v15 = 0;
      __int16 v11 = v10 | 0x80;
    }

    if (*((_BYTE *)a1 + 18)) {
      __int16 v10 = v11 | (*((unsigned __int8 *)a1 + 18) << 8);
    }
    else {
      __int16 v10 = v11;
    }
  }

  else
  {
    char v15 = 0;
  }

  int v16 = *a1;
  int v17 = *((_DWORD *)sub_100005150() + 144);
  int v24 = sub_10032BABC(*((unsigned __int8 *)a1 + 4), 1LL, v18, v19, v20, v21, v22, v23);
  char v25 = v24;
  if (v24 == 5) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = 2;
  }
  sub_100149238((uint64_t)&v30, v17, v26, 0);
  if (a4[20])
  {
    if (!a4[22]) {
      sub_10038E634();
    }
    if (!a4[24]) {
      sub_10038E65C();
    }
    if (!a4[26]) {
      sub_10038E684();
    }
    sub_100149870((unsigned __int8 *)&v30, a4[21], a4[23], a4[25], 0, 0, 0);
  }

  else
  {
    if (a4[22]) {
      sub_10038E60C();
    }
    if (a4[24]) {
      sub_10038E5E4();
    }
    if (a4[26]) {
      sub_10038E5BC();
    }
    sub_1001418B0(v26, (uint64_t)&__src);
    __int128 v30 = __src;
    int v31 = *(_DWORD *)v35;
  }

  LOBYTE(__src) = *a4;
  BYTE1(__src) = 1;
  BYTE2(__src) = sub_1001498FC((uint64_t)&v30);
  BYTE3(__src) = 1;
  BYTE4(__src) = sub_100149904((uint64_t)&v30);
  BYTE5(__src) = 1;
  BYTE6(__src) = sub_10014990C((uint64_t)&v30);
  BYTE7(__src) = 1;
  BYTE8(__src) = sub_10032AD20(*((unsigned __int8 *)a1 + 5), 1);
  BYTE9(__src) = 1;
  BYTE10(__src) = sub_10032AD20(*((unsigned __int8 *)a1 + 5), 1);
  *(_WORD *)((char *)&__src + 11) = 1;
  HIWORD(__src) = 0;
  *(_DWORD *)&v35[1] = 0;
  char v36 = 0;
  __int16 v37 = v10;
  char v38 = 1;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = v25;
  char v44 = 1;
  int v45 = *((_DWORD *)a4 + 8);
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  char v56 = 0;
  v57[14] = 0;
  __int16 v58 = 0;
  char v59 = 0;
  __int16 v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v64 = 0;
  char v65 = 0;
  char v47 = 0;
  uint64_t v46 = 0LL;
  memset(v57, 0, 13);
  char v66 = v6;
  char v67 = 1;
  char v68 = sub_10032AD20(*((unsigned __int8 *)a1 + 5), 1);
  char v69 = 1;
  int v70 = v16;
  char v71 = 1;
  int v72 = 16777472;
  __int16 v73 = *((_WORD *)a1 + 3);
  char v74 = 1;
  __int16 v75 = *((_WORD *)a1 + 4);
  char v76 = 1;
  char v77 = *((_BYTE *)a1 + 10);
  char v78 = 1;
  char v79 = *((_BYTE *)a1 + 11);
  char v80 = 1;
  char v81 = *((_BYTE *)a1 + 12);
  char v82 = 1;
  char v83 = *((_BYTE *)a1 + 13);
  char v84 = 1;
  int v85 = *((_DWORD *)a4 + 1);
  unsigned __int8 v86 = a4[8];
  int v87 = *((_DWORD *)a4 + 3);
  unsigned __int8 v88 = a4[16];
  __int16 v89 = *(_WORD *)(a4 + 1);
  char v90 = *((_BYTE *)a1 + 14);
  char v91 = 1;
  char v92 = *((_BYTE *)a1 + 15);
  char v93 = 1;
  char v94 = v15;
  char v95 = 1;
  char v98 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  __int16 v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v124 = 0;
  char v127 = 0;
  char v97 = 0;
  int v96 = 0;
  *(_DWORD *)((char *)v99 + 3) = 0;
  v99[0] = 0;
  __int16 v114 = 0;
  int v113 = 0;
  char v116 = 0;
  int v115 = 0;
  *(_DWORD *)((char *)v123 + 3) = 0;
  v123[0] = 0;
  int v125 = 0;
  char v126 = 0;
  uint64_t v130 = 0LL;
  uint64_t v128 = 0LL;
  uint64_t v129 = 0LL;
  int v27 = *a4;
  LOBYTE(v32) = 0;
  char v33 = 0;
  sub_10013F480(a5, v27, 3, &v32, 1, 0, 2, 0, &__src);
  *(_OWORD *)(a5 + 68) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 9);
  *(__n128 *)(a5 + 77) = result;
  return result;
}

uint64_t sub_1001418B0@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  char v4 = sub_100005150();
  int v5 = (unsigned __int8 *)sub_100149238(a2, v4[144], a1, 0);
  return sub_100149800(v5, 0);
}

uint64_t sub_1001418EC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1[52] | a1[53];
  BOOL v5 = a1[49] == 0;
  BOOL v6 = a1[51] == 0;
  if (v4)
  {
    BOOL v5 = 1;
    BOOL v6 = 1;
  }

  if (v5) {
    __int16 v7 = 0;
  }
  else {
    __int16 v7 = 8;
  }
  if (a1[50]) {
    v7 |= 6u;
  }
  if (v6) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = 16;
  }
  __int16 v9 = v7 | v8;
  if (*a1 == 5) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = 2;
  }
  __int16 v11 = sub_100005150();
  sub_100149238((uint64_t)v18, v11[144], v10, 0);
  sub_100149838(v18, 0, a1[48]);
  __int16 __src = 256;
  char v22 = sub_1001498FC((uint64_t)v18);
  char v23 = 1;
  char v24 = sub_100149904((uint64_t)v18);
  char v25 = 1;
  char v26 = sub_10014990C((uint64_t)v18);
  int v27 = 184617729;
  __int16 v28 = 1;
  __int16 v29 = 0;
  int v30 = 0;
  char v31 = 0;
  __int16 v32 = v9;
  char v33 = 1;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  __int16 v38 = 0;
  int v39 = *((_DWORD *)a1 + 14);
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  v51[14] = 0;
  __int16 v52 = 0;
  char v53 = 0;
  __int16 v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v62 = 0;
  char v65 = 0;
  char v66 = 0;
  char v67 = 0;
  char v70 = 0;
  char v71 = 0;
  char v72 = 0;
  char v41 = 0;
  uint64_t v40 = 0LL;
  memset(v51, 0, 13);
  char v61 = 0;
  int v60 = 0;
  char v64 = 0;
  int v63 = 0;
  uint64_t v68 = 0LL;
  char v69 = 0;
  uint64_t v73 = 0LL;
  char v74 = *a1;
  __int16 v75 = 2817;
  char v76 = 1;
  int v77 = *((_DWORD *)a1 + 1);
  char v78 = 1;
  int v79 = 16908546;
  __int16 v80 = 258;
  __int16 v81 = *((_WORD *)a1 + 4);
  char v82 = 1;
  __int16 v83 = *((_WORD *)a1 + 5);
  char v84 = 1;
  __int16 v85 = *((_WORD *)a1 + 6);
  char v86 = 1;
  int v87 = *(_DWORD *)(a1 + 14);
  __int16 v88 = *((_WORD *)a1 + 9);
  char v89 = 1;
  __int16 v90 = 76;
  char v91 = 1;
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v92 = *((void *)a1 + 3);
  char v93 = 1;
  uint64_t v94 = v12;
  char v95 = 1;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  __int16 v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v107 = 0;
  char v110 = 0;
  __int16 v97 = 0;
  int v96 = 0;
  char v99 = 0;
  int v98 = 0;
  *(_DWORD *)((char *)v106 + 3) = 0;
  v106[0] = 0;
  char v109 = 0;
  int v108 = 0;
  uint64_t v112 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v113 = 0LL;
  if (v4)
  {
    if (a1[52]) {
      char v13 = 3;
    }
    else {
      char v13 = 0;
    }
    BYTE1(v96) = 1;
    LOBYTE(v96) = v13;
    __int16 v97 = a1[55] | 0x100;
    HIWORD(v96) = a1[54] | 0x100;
    int v14 = 6;
  }

  else
  {
    int v14 = 5;
  }

  int v16 = *((_DWORD *)a1 + 10);
  int v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  char v20 = 0;
  return sub_10013F480(a2, 0, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_100141C3C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1[52] | a1[53];
  BOOL v5 = a1[49] == 0;
  BOOL v6 = a1[51] == 0;
  if (v4)
  {
    BOOL v5 = 1;
    BOOL v6 = 1;
  }

  if (v5) {
    __int16 v7 = 0;
  }
  else {
    __int16 v7 = 8;
  }
  if (a1[50]) {
    v7 |= 6u;
  }
  if (v6) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = 16;
  }
  __int16 v9 = v7 | v8;
  if (*a1 == 5) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = 2;
  }
  __int16 v11 = sub_100005150();
  sub_100149238((uint64_t)v18, v11[144], v10, 0);
  sub_10014986C((uint64_t)v18, 0, a1[48]);
  __int16 __src = 257;
  char v22 = sub_1001498FC((uint64_t)v18);
  char v23 = 1;
  char v24 = sub_100149904((uint64_t)v18);
  char v25 = 1;
  char v26 = sub_10014990C((uint64_t)v18);
  char v27 = 1;
  __int16 v30 = 0;
  int v28 = 0;
  char v29 = 0;
  int v31 = 0;
  char v32 = 0;
  __int16 v33 = v9;
  char v34 = 1;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  char v38 = 0;
  __int16 v39 = 0;
  int v40 = *((_DWORD *)a1 + 14);
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  v52[14] = 0;
  __int16 v53 = 0;
  char v54 = 0;
  __int16 v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v63 = 0;
  char v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v72 = 0;
  char v73 = 0;
  char v42 = 0;
  uint64_t v41 = 0LL;
  memset(v52, 0, 13);
  char v62 = 0;
  int v61 = 0;
  char v65 = 0;
  int v64 = 0;
  uint64_t v69 = 0LL;
  char v70 = 0;
  uint64_t v74 = 0LL;
  char v75 = *a1;
  __int16 v76 = 2817;
  char v77 = 1;
  int v78 = *((_DWORD *)a1 + 1);
  char v79 = 1;
  int v80 = 16908546;
  __int16 v81 = 258;
  __int16 v82 = *((_WORD *)a1 + 4);
  char v83 = 1;
  __int16 v84 = *((_WORD *)a1 + 5);
  char v85 = 1;
  __int16 v86 = *((_WORD *)a1 + 6);
  char v87 = 1;
  int v88 = *(_DWORD *)(a1 + 14);
  __int16 v89 = *((_WORD *)a1 + 9);
  char v90 = 1;
  __int16 v91 = 76;
  char v92 = 1;
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v93 = *((void *)a1 + 3);
  char v94 = 1;
  uint64_t v95 = v12;
  char v96 = 1;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  __int16 v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v108 = 0;
  char v111 = 0;
  __int16 v98 = 0;
  int v97 = 0;
  char v100 = 0;
  int v99 = 0;
  *(_DWORD *)((char *)v107 + 3) = 0;
  v107[0] = 0;
  char v110 = 0;
  int v109 = 0;
  uint64_t v113 = 0LL;
  uint64_t v112 = 0LL;
  uint64_t v114 = 0LL;
  if (v4)
  {
    if (a1[52]) {
      char v13 = 3;
    }
    else {
      char v13 = 0;
    }
    BYTE1(v97) = 1;
    LOBYTE(v97) = v13;
    __int16 v98 = a1[55] | 0x100;
    HIWORD(v97) = a1[54] | 0x100;
    int v14 = 6;
  }

  else
  {
    int v14 = 5;
  }

  int v16 = *((_DWORD *)a1 + 10);
  int v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  char v20 = 0;
  return sub_10013F480(a2, 1, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_100141F88@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)sub_100005150() + 144);
  BOOL v6 = sub_100005150();
  int v7 = sub_1003551E8((uint64_t)v6);
  sub_100149238((uint64_t)v68, v5, 2u, v7);
  int v8 = a1[43];
  BOOL v9 = a1[43] != 0;
  if (a1[43]) {
    char v10 = a1[47];
  }
  else {
    char v10 = 0;
  }
  if (a1[48]) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = a1[43] != 0;
  }
  if (a2) {
    char v12 = 85;
  }
  else {
    char v12 = 51;
  }
  if (v11 && a1[47] == 0) {
    char v13 = v12;
  }
  else {
    char v13 = v10;
  }
  char v63 = v13;
  sub_1001497CC(v68, v8, a1[45]);
  if (a1[46]) {
    char v14 = v9;
  }
  else {
    char v14 = 1;
  }
  if ((v14 & 1) != 0)
  {
LABEL_17:
    int v15 = 0;
    goto LABEL_22;
  }

  if (!a1[15] || !a1[13] || !a1[17])
  {
    char v58 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038E814(v58);
    }
    goto LABEL_17;
  }

  int v15 = 1;
LABEL_22:
  int v16 = (__int16 *)(a1 + 22);
  if (!a1[24]) {
    int v16 = &word_1007F6CCA;
  }
  int v17 = (unsigned __int16)*v16;
  __int16 v18 = sub_10032BDE8(v17 | 0x10000u);
  __int128 v19 = (__int16 *)(a1 + 18);
  if (!a1[20]) {
    __int128 v19 = &word_1007F6CC4;
  }
  __int16 v20 = *v19;
  if (a1[68])
  {
    uint64_t v21 = (char *)&aGhijlmnoqrstvw[15] + 3 * *((int *)a1 + 16) + 1;
    LOBYTE(v22) = *v21;
    LOBYTE(v23) = v21[1];
    char v24 = v21[2];
  }

  else
  {
    sub_10012AA30(&v69);
    std::random_device::result_type v25 = std::random_device::operator()(&v69);
    std::random_device::result_type __src = v25;
    for (uint64_t i = 1LL; i != 624; ++i)
    {
      std::random_device::result_type v25 = i + 1812433253 * (v25 ^ (v25 >> 30));
      *(&__src + i) = v25;
    }

    uint64_t v164 = 0LL;
    *(void *)&v70[0] = 0x1B00000000LL;
    char v27 = (unsigned __int16 *)((char *)&aGhijlmnoqrstvw[15]
    unsigned __int8 v28 = *((_BYTE *)v27 + 2);
    unsigned int v22 = *v27 | (v28 << 16);
    std::random_device::~random_device(&v69);
    unsigned int v23 = v22 >> 8;
    char v24 = v28;
  }

  if (word_1007F6CC2 == v20)
  {
    char v61 = 0;
    char v62 = 0;
    char v29 = 0;
  }

  else
  {
    if (a1[37]) {
      char v30 = a1[36];
    }
    else {
      char v30 = v22;
    }
    char v62 = v30;
    if (a1[39]) {
      LOBYTE(v23) = a1[38];
    }
    char v61 = v23;
    if (a1[41]) {
      char v29 = a1[40];
    }
    else {
      char v29 = v24;
    }
  }

  BOOL v31 = a1[44] == 0;
  char v32 = sub_100149904((uint64_t)v68);
  if (!v31) {
    v32 |= sub_10014991C((uint64_t)v68);
  }
  char v33 = sub_10014991C((uint64_t)v68);
  BOOL v34 = a2 != 0;
  LOBYTE(__src) = v34;
  BYTE1(__src) = 1;
  if (v15)
  {
    if (!a1[13]) {
      sub_100006080();
    }
    BYTE2(__src) = a1[12];
    HIBYTE(__src) = 1;
    if (!a1[15]) {
      sub_100006080();
    }
    char v73 = a1[14];
    char v74 = 1;
    if (!a1[17]) {
      sub_100006080();
    }
    char v35 = a1[16];
  }

  else
  {
    BYTE2(__src) = sub_1001498FC((uint64_t)v68);
    HIBYTE(__src) = 1;
    char v73 = v32;
    char v74 = 1;
    char v35 = sub_10014990C((uint64_t)v68);
  }

  char v75 = v35;
  char v76 = 1;
  __int16 v79 = 0;
  int v77 = 0;
  char v78 = 0;
  memset(v80, 0, sizeof(v80));
  char v81 = 1;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  if ((v18 & 0xFF00) != 0) {
    char v36 = v18;
  }
  else {
    char v36 = 9;
  }
  char v86 = v36;
  char v87 = 1;
  int v88 = *((_DWORD *)a1 + 28);
  __int16 v89 = 0;
  if (v8)
  {
    LOBYTE(v90) = sub_100149914((uint64_t)v68);
    BYTE1(v90) = 1;
    BYTE2(v90) = v33;
    HIBYTE(v90) = 1;
    char v37 = sub_100149924((uint64_t)v68);
  }

  else
  {
    char v37 = 0;
    int v90 = 16777472;
  }

  char v91 = v37;
  __int16 v92 = 1;
  char v93 = 0;
  if (a1[34]) {
    __int16 v38 = *((_WORD *)a1 + 16);
  }
  else {
    __int16 v38 = 99;
  }
  __int16 v94 = v38;
  char v95 = 1;
  uint64_t v96 = *((void *)a1 + 10);
  char v97 = a1[88];
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  v102[14] = 0;
  __int16 v103 = 0;
  char v104 = 0;
  __int16 v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  memset(v102, 0, 13);
  __int16 v109 = *((_WORD *)a1 + 36);
  char v110 = a1[74];
  char v113 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v127 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  char v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  char v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v112 = 0;
  int v111 = 0;
  char v115 = 0;
  int v114 = 0;
  char v120 = 0;
  uint64_t v119 = 0LL;
  uint64_t v124 = 0LL;
  char v126 = 0;
  int v125 = 0;
  *(_DWORD *)((char *)v128 + 3) = 0;
  v128[0] = 0;
  int v142 = 0;
  __int16 v143 = 0;
  if (a1[1]) {
    char v39 = *a1;
  }
  else {
    char v39 = sub_10014992C((uint64_t)v68);
  }
  char v144 = v39;
  char v145 = 1;
  if (a1[3]) {
    char v40 = a1[2];
  }
  else {
    char v40 = sub_100149934((uint64_t)v68);
  }
  char v146 = v40;
  char v147 = 1;
  uint64_t v41 = (__int16 *)(a1 + 4);
  if (!a1[6]) {
    uint64_t v41 = &word_1007F8090;
  }
  __int16 v148 = *v41;
  char v149 = 1;
  LOBYTE(v150) = 0;
  char v151 = 0;
  if (a1[29]) {
    char v42 = a1[28];
  }
  else {
    char v42 = 4;
  }
  char v152 = v42;
  int v155 = 0;
  *(_WORD *)uint64_t v153 = 1;
  char v154 = 0;
  __int16 v156 = 0;
  __int16 v157 = v17;
  char v158 = 1;
  __int16 v159 = 0;
  if (a1[27]) {
    char v43 = a1[26];
  }
  else {
    char v43 = 16;
  }
  char v160 = v43;
  *(_WORD *)v161 = 1;
  char v162 = 0;
  memset(v163, 0, sizeof(v163));
  if (!v81) {
    sub_10038E7C4();
  }
  if (a1[48])
  {
    __int16 v44 = *(_WORD *)&v80[5];
    if (a1[42])
    {
      __int16 v44 = *(_WORD *)&v80[5] | 1;
      *(_WORD *)&v80[5] |= 1u;
    }

    char v45 = (__int16 *)(a1 + 8);
    if (!a1[10]) {
      char v45 = &word_1007F6CC6;
    }
    __int16 v150 = *v45;
    char v151 = 1;
    if (a1[31]) {
      unsigned __int8 v46 = a1[30];
    }
    else {
      unsigned __int8 v46 = 72;
    }
    __int16 v159 = v46 | 0x100;
    *(_WORD *)&v80[5] = v44 | 2;
    *(_WORD *)&v153[1] = word_1007F6CC2;
    char v154 = 1;
    int v155 = 16777472;
    __int16 v156 = 256;
    int v47 = 7;
  }

  else
  {
    if (a1[55]) {
      unsigned __int8 v48 = a1[54];
    }
    else {
      unsigned __int8 v48 = 6;
    }
    LOWORD(v163[0]) = v48 | 0x100;
    if (a1[57]) {
      unsigned __int8 v49 = a1[56];
    }
    else {
      unsigned __int8 v49 = 10;
    }
    HIWORD(v163[0]) = v49 | 0x100;
    BYTE1(v163[5]) = 1;
    LOBYTE(v163[5]) = v63;
    *(_WORD *)&v153[1] = v20;
    char v154 = 1;
    BYTE1(v155) = 1;
    LOBYTE(v155) = v62;
    HIBYTE(v155) = 1;
    BYTE2(v155) = v61;
    HIBYTE(v156) = 1;
    LOBYTE(v156) = v29;
    __int16 v50 = *(_WORD *)&v80[5];
    *(_WORD *)&v80[5] |= 2u;
    if (a1[60]) {
      *(_WORD *)&v80[5] = v50 | 3;
    }
    char v51 = (__int16 *)(a1 + 8);
    if (!a1[10]) {
      char v51 = &word_1007F6CC8;
    }
    __int16 v150 = *v51;
    char v151 = 1;
    __int16 v52 = operator new(1uLL);
    __int128 __p = v52;
    *__int16 v52 = 1;
    char v67 = v52 + 1;
    char v66 = v52 + 1;
    unsigned __int8 v53 = sub_10032B934((unsigned __int8 **)&__p);
    if (a1[59]) {
      unsigned __int8 v54 = a1[58];
    }
    else {
      unsigned __int8 v54 = v53;
    }
    if (__p)
    {
      char v66 = __p;
      operator delete(__p);
    }

    if (!HIBYTE(v163[5])) {
      HIBYTE(v163[5]) = 1;
    }
    BYTE2(v163[5]) = 0;
    int v55 = sub_10032B998(v54);
    int v56 = sub_10032B9B4(v54);
    if (((v55 ^ 1 | v56) & 1) != 0)
    {
      if ((v55 | v56 ^ 1) == 1)
      {
        if (((v55 ^ 1 | v56 ^ 1) & 1) != 0) {
          sub_10038E7EC();
        }
        if (!HIBYTE(v163[5])) {
          sub_100006080();
        }
        BYTE2(v163[5]) |= 8u;
        __int16 v57 = 1;
      }

      else
      {
        __int16 v57 = 29;
      }
    }

    else
    {
      __int16 v57 = 253;
    }

    if (a1[52]) {
      __int16 v57 = *((_WORD *)a1 + 25);
    }
    *(_WORD *)&v161[1] = v57;
    char v162 = 1;
    if (a1[31]) {
      unsigned __int8 v59 = a1[30];
    }
    else {
      unsigned __int8 v59 = -60;
    }
    __int16 v159 = v59 | 0x100;
    *(_OWORD *)&v163[1] = *((_OWORD *)a1 + 6);
    if (a1[48]) {
      int v47 = 7;
    }
    else {
      int v47 = 8;
    }
  }

  LOBYTE(v70[0]) = 0;
  char v71 = 0;
  return sub_10013F480(a3, v34, v47, v70, 1, 0, 3, 0, &__src);
}

void sub_100142818( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, std::random_device a20, std::random_device a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100142850(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_10012ACD8(a2);
    }

    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31LL;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32LL;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_10012ACD8(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }

  return result;
}

uint64_t sub_100142900()
{
  unsigned __int16 v1 = 272;
  word_1007F6CC0 = sub_10032BE98(&v1);
  unsigned __int16 v1 = 263;
  word_1007F6CC2 = sub_10032BE98(&v1);
  unsigned __int16 v1 = 1031;
  word_1007F6CC4 = sub_10032BE98(&v1);
  word_1007F8090 = word_1007F6CC0;
  unsigned __int16 v1 = 1;
  char v2 = 0;
  __int16 v3 = 5;
  char v4 = 1;
  word_1007F6CC6 = sub_10032BD2C((unsigned __int8 *)&v1);
  unsigned __int16 v1 = 6;
  char v2 = 0;
  __int16 v3 = 2;
  char v4 = 1;
  word_1007F6CC8 = sub_10032BD2C((unsigned __int8 *)&v1);
  unsigned __int16 v1 = 2304;
  char v2 = 1;
  LOBYTE(v3) = 0;
  char v4 = 0;
  uint64_t result = sub_10032BD2C((unsigned __int8 *)&v1);
  word_1007F6CCA = result;
  return result;
}

void *sub_1001429E8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007AFFD0[a1]);
}

void *sub_1001429FC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0028[a1]);
}

void *sub_100142A10@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0070[a1]);
}

void *sub_100142A24@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0090[a1]);
}

double sub_100142A38(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_1007AFFA0;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_100142A64(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100142A94(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

void *sub_100142AC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B03A8[a1]);
}

void *sub_100142AD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0400[a1]);
}

void *sub_100142AEC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0448[a1]);
}

void *sub_100142B00@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0468[a1]);
}

uint64_t sub_100142B14(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *(void *)a1 = off_1007B00C0;
  *(void *)(a1 + 8) = 850045863LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0LL;
  uint64_t v8 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.RoseServiceProvider.RoseScheduler", v8);
  uint64_t v10 = *a3;
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  *(void *)(a1 + 128) = *a3;
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 136) = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    uint64_t v10 = *(void *)(a1 + 128);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 136);
  }

  *(void *)(a1 + 160) = 1018212795LL;
  *(void *)(a1 + 144) = a2;
  *(_WORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 154) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0LL;
  uint64_t v24 = v10;
  std::random_device::result_type v25 = v11;
  if (v11)
  {
    char v14 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  sub_100147B00((void *)(a1 + 208), &v24, *(void *)(a1 + 120));
  int v16 = v25;
  if (v25)
  {
    int v17 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = a4[1];
  *(void *)(a1 + 240) = *a4;
  *(void *)(a1 + 248) = v19;
  if (v19)
  {
    __int16 v20 = (unint64_t *)(v19 + 8);
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "[RoseScheduler] database is nullptr. Normal opreation is not possible.");
    goto LABEL_21;
  }

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "[RoseScheduler] Scheduler owner is nullptr. Normal opreation is not possible.");
LABEL_21:
  }

  return a1;
}

void sub_100142D10(_Unwind_Exception *a1)
{
  *(void *)(v2 + 208) = off_1007B0840;
  sub_100012390(v2 + 216);
  std::condition_variable::~condition_variable(v4);
  sub_100012390(v3);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100142D78(uint64_t a1)
{
  *(void *)a1 = off_1007B00C0;
  uint64_t v2 = *(dispatch_object_s **)(a1 + 120);
  if (v2) {
    dispatch_release(v2);
  }
  sub_100012390(a1 + 240);
  *(void *)(a1 + 208) = off_1007B0840;
  sub_100012390(a1 + 216);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  sub_100012390(a1 + 128);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_100142DEC(uint64_t a1)
{
  unsigned __int16 v1 = (void *)sub_100142D78(a1);
  operator delete(v1);
}

uint64_t sub_100142E00(uint64_t a1, uint64_t *a2)
{
  char v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *a2;
  *(void *)(a1 + 72) = *a2;
  *(void *)(a1 + 80) = a2[1];
  *(void *)(a1 + 88) = a2[2];
  *(void *)(a1 + 96) = a2[3];
  *(void *)(a1 + 104) = a2[4];
  *(void *)(a1 + 112) = a2[5];
  if (!v5 || (sub_100147404(v5, a1), (uint64_t v6 = *(void *)(a1 + 80)) == 0)) {
    __assert_rtn("SetupProxyObjects", "ProxyObjectConsumerBase.h", 49, "proxyObj != nullptr");
  }
  sub_100147404(v6, a1);
  uint64_t v8 = sub_100147488(a1, (void *)(a1 + 72), v7);
  atomic_store(v8, (unsigned __int8 *)(a1 + 152));
  std::mutex::unlock(v4);
  return v8;
}

void sub_100142ECC(_Unwind_Exception *a1)
{
}

uint64_t sub_100142EE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16LL))(*(void *)(a1 + 72)) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038E930();
  }

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = v3.__d_.__rep_ + 10000000;
  while (1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 153));
    if ((v5 & 1) != 0) {
      break;
    }
    if (std::chrono::system_clock::now().__d_.__rep_ >= v4) {
      goto LABEL_16;
    }
    if (v3.__d_.__rep_ == -10000000)
    {
      v6.__d_.__rep_ = 0LL;
    }

    else if (v3.__d_.__rep_ < -9999999)
    {
      if ((unint64_t)v4 >= 0xFFDF3B645A1CAC09LL)
      {
LABEL_14:
        v6.__d_.__rep_ = 1000 * (v3.__d_.__rep_ + 10000000);
        goto LABEL_15;
      }

      v6.__d_.__rep_ = 0x8000000000000000LL;
    }

    else
    {
      v6.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
    }

void sub_100143168(uint64_t a1, const void *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] Scheduler handleServiceRequestAsync",  v6,  2u);
  }

  memcpy(v8, a2, sizeof(v8));
  unsigned __int8 v5 = *(dispatch_queue_s **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100143258;
  block[3] = &unk_1007B0100;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_100143258(uint64_t a1)
{
}

void sub_100143268(uint64_t a1, __int16 *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseScheduler::handleNewServiceRequestInternal",  (uint8_t *)&__p,  2u);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] Servicing dequeued service request. Passing message to AOP scheduler.",  (uint8_t *)&__p,  2u);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10013F5C8((uint64_t)(a2 + 4), (std::stringbuf::string_type *)&__p);
    unsigned __int8 v5 = v11[1] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136315138;
    char v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request: %s", buf, 0xCu);
    if (SHIBYTE(v11[1]) < 0) {
      operator delete(__p);
    }
  }

  if (*((_DWORD *)a2 + 3) != 2)
  {
    __int16 v7 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v7;
    memcpy(v11, a2 + 4, sizeof(v11));
    char v12 = 1;
    char v13 = 0;
    char v14 = 0;
    char v15 = 0;
    char v18 = 0;
    char v19 = 0;
    char v22 = 0;
    __int16 v23 = 0;
    char v24 = 0;
    char v25 = 0;
    __int16 v26 = 0;
    char v27 = 0;
    char v28 = 0;
    char v29 = 0;
    char v30 = 0;
    char v8 = sub_1001441E8(a1, (uint64_t)&__p);
    if (v22 && v20)
    {
      unint64_t v21 = v20;
      operator delete(v20);
    }

    if (v18 && v16)
    {
      int v17 = v16;
      operator delete(v16);
    }

    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_23:
    __int16 v9 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v9;
    v11[0] = 13LL;
    LOBYTE(v11[1]) = 1;
    LOBYTE(v11[2]) = 0;
    LOBYTE(v11[9]) = 0;
    LOBYTE(v11[10]) = 0;
    LOBYTE(v11[13]) = 0;
    BYTE4(v11[13]) = 0;
    LOBYTE(v11[14]) = 0;
    BYTE4(v11[14]) = 0;
    LOBYTE(v11[19]) = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &__p);
    goto LABEL_24;
  }

  if ((sub_1001447F4(a1, 0, a2) & 1) != 0) {
    goto LABEL_23;
  }
LABEL_13:
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_10038E95C();
  }
  sub_10014A150(*(void *)(a1 + 128), (unsigned __int16)*a2);
  __int16 v6 = *a2;
  LODWORD(__p) = 1;
  WORD2(__p) = v6;
  v11[0] = 9LL;
  LOBYTE(v11[1]) = 1;
  LOBYTE(v11[2]) = 0;
  LOBYTE(v11[9]) = 0;
  LOBYTE(v11[10]) = 0;
  LOBYTE(v11[13]) = 0;
  BYTE4(v11[13]) = 0;
  LOBYTE(v11[14]) = 0;
  BYTE4(v11[14]) = 0;
  LOBYTE(v11[19]) = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &__p);
LABEL_24:
  if (LOBYTE(v11[9]) && LOBYTE(v11[7]) && SHIBYTE(v11[6]) < 0) {
    operator delete((void *)v11[4]);
  }
}

void sub_100143588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001435D0(uint64_t a1, __int16 a2, __int128 *a3)
{
  __int128 v3 = a3[2];
  __int128 v4 = a3[4];
  __int128 v5 = a3[5];
  __int128 v14 = a3[3];
  __int128 v15 = v4;
  __int128 v6 = a3[6];
  __int128 v16 = v5;
  __int128 v17 = v6;
  __int128 v7 = a3[1];
  __int128 v11 = *a3;
  __int128 v12 = v7;
  __int128 v13 = v3;
  char v8 = *(dispatch_queue_s **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100143678;
  block[3] = &unk_1007B0120;
  block[4] = a1;
  __int16 v18 = a2;
  dispatch_async(v8, block);
  return result;
}

void sub_100143678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 240);
  if (v3)
  {
    int v4 = *(unsigned __int16 *)(a1 + 152);
    double v5 = sub_100320628();
    sub_10023410C(v3, v4, v5);
  }

  sub_1001436C8(v2, *(_WORD *)(a1 + 152), (__int128 *)(a1 + 40));
}

void sub_1001436C8(uint64_t a1, unsigned __int16 a2, __int128 *a3)
{
  __int128 v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "RoseScheduler::handleStartServiceInternal",  buf,  2u);
  }

  sub_100149D9C(*(void *)(a1 + 128), a2, v55);
  if (v56[640])
  {
    memcpy(__dst, v56, sizeof(__dst));
    if (__dst[3] > 8u) {
      return;
    }
    if (((1 << SLOBYTE(__dst[3])) & 0x6C) != 0)
    {
      if ((sub_1001447F4(a1, 1, (__int16 *)__dst) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038E9EC();
        }
        *(_DWORD *)__int128 buf = 1;
        unsigned __int16 v27 = a2;
        v28[0] = 11LL;
        LOBYTE(v28[1]) = 1;
        LOBYTE(v28[2]) = 0;
        LOBYTE(v28[9]) = 0;
        LOBYTE(v28[10]) = 0;
        LOBYTE(v28[13]) = 0;
        BYTE4(v28[13]) = 0;
        LOBYTE(v28[14]) = 0;
        BYTE4(v28[14]) = 0;
        LOBYTE(v28[19]) = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), buf);
        if (LOBYTE(v28[9]))
        {
          if (LOBYTE(v28[7]) && SHIBYTE(v28[6]) < 0)
          {
            uint64_t v10 = (void *)v28[4];
            goto LABEL_29;
          }
        }
      }
    }

    else if (((1 << SLOBYTE(__dst[3])) & 0x192) != 0)
    {
      *(_DWORD *)__int128 buf = 2;
      unsigned __int16 v27 = a2;
      memcpy(v28, &__dst[2], sizeof(v28));
      char v29 = 1;
      __int128 v7 = a3[5];
      __int128 v34 = a3[4];
      __int128 v35 = v7;
      __int128 v36 = a3[6];
      __int128 v8 = a3[1];
      __int128 v30 = *a3;
      __int128 v31 = v8;
      __int128 v9 = a3[3];
      __int128 v32 = a3[2];
      __int128 v33 = v9;
      char v37 = 1;
      char v38 = 0;
      char v41 = 0;
      char v42 = 0;
      char v45 = 0;
      __int16 v46 = 0;
      char v47 = 0;
      char v48 = 0;
      __int16 v49 = 0;
      char v50 = 0;
      char v51 = 0;
      char v52 = 0;
      char v53 = 0;
      if ((sub_1001441E8(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EA50();
        }
        int v11 = 1;
        unsigned __int16 v12 = a2;
        uint64_t v13 = 11LL;
        char v14 = 1;
        char v15 = 0;
        char v19 = 0;
        char v20 = 0;
        char v21 = 0;
        char v22 = 0;
        char v23 = 0;
        char v24 = 0;
        char v25 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &v11);
        if (v19 && v18 && v17 < 0) {
          operator delete(__p);
        }
      }

      if (v45 && v43)
      {
        __int16 v44 = v43;
        operator delete(v43);
      }

      if (v41)
      {
        uint64_t v10 = v39;
        if (v39)
        {
          char v40 = v39;
LABEL_29:
          operator delete(v10);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_10038EA7C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038E988();
  }

void sub_100143A04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44, char a45, uint64_t a46, char a47)
{
  if (a47 && a45 && a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100143A70(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_100143ACC;
  v3[3] = &unk_1007B0140;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100143ACC(uint64_t a1)
{
}

void sub_100143ADC(uint64_t a1, int a2)
{
  __int16 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseScheduler::handleStopServiceInternal",  buf,  2u);
  }

  sub_100149D9C(*(void *)(a1 + 128), a2, v43);
  if (v44[640])
  {
    memcpy(__dst, v44, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_1001447F4(a1, 2, (__int16 *)__dst) & 1) == 0)
      {
        double v5 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
        {
          sub_100142AD8(__dst[3], buf);
          if (v22[1] >= 0) {
            __int128 v7 = buf;
          }
          else {
            __int128 v7 = *(uint8_t **)buf;
          }
          int v8 = 136315394;
          *(void *)__int128 v9 = v7;
          *(_WORD *)&v9[8] = 1024;
          *(_DWORD *)&v9[10] = a2;
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to schedule %s ranging stop for ticket ID: %d",  (uint8_t *)&v8,  0x12u);
          if (SHIBYTE(v22[1]) < 0) {
            operator delete(*(void **)buf);
          }
        }

        *(_DWORD *)__int128 buf = 1;
        *(_WORD *)&uint8_t buf[4] = a2;
        v22[0] = 10LL;
        LOBYTE(v22[1]) = 1;
        LOBYTE(v22[2]) = 0;
        LOBYTE(v22[9]) = 0;
        LOBYTE(v22[10]) = 0;
        LOBYTE(v22[13]) = 0;
        BYTE4(v22[13]) = 0;
        LOBYTE(v22[14]) = 0;
        BYTE4(v22[14]) = 0;
        LOBYTE(v22[19]) = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), buf);
        if (LOBYTE(v22[9]))
        {
          if (LOBYTE(v22[7]) && SHIBYTE(v22[6]) < 0)
          {
            __int128 v6 = (void *)v22[4];
LABEL_26:
            operator delete(v6);
          }
        }
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 3;
      *(_WORD *)&uint8_t buf[4] = a2;
      memcpy(v22, &v44[8], sizeof(v22));
      char v23 = 1;
      char v24 = 0;
      char v25 = 0;
      char v26 = 0;
      char v29 = 0;
      char v30 = 0;
      char v33 = 0;
      __int16 v34 = 0;
      char v35 = 0;
      char v36 = 0;
      __int16 v37 = 0;
      char v38 = 0;
      char v39 = 0;
      char v40 = 0;
      char v41 = 0;
      if ((sub_1001441E8(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EB0C();
        }
        int v8 = 1;
        *(_WORD *)__int128 v9 = a2;
        *(void *)&uint8_t v9[4] = 10LL;
        v9[12] = 1;
        char v10 = 0;
        char v14 = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v19 = 0;
        char v20 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &v8);
        if (v14 && v13 && v12 < 0) {
          operator delete(__p);
        }
      }

      if (v33 && v31)
      {
        __int128 v32 = v31;
        operator delete(v31);
      }

      if (v29)
      {
        __int128 v6 = v27;
        if (v27)
        {
          char v28 = v27;
          goto LABEL_26;
        }
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038EAA8();
  }

void sub_100143E18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, char a45, uint64_t a46, char a47)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  sub_10014438C((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_100143E84(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_100143EE0;
  v3[3] = &unk_1007B0160;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100143EE0(uint64_t a1)
{
}

void sub_100143EF0(uint64_t a1, int a2)
{
  __int16 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] Canceling enqueued service request. Passing message to AOP scheduler.",  buf,  2u);
  }

  sub_100149D9C(*(void *)(a1 + 128), a2, v41);
  if (v42[640])
  {
    memcpy(__dst, v42, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_1001447F4(a1, 3, (__int16 *)__dst) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        sub_10038EB9C();
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 4;
      __int16 v23 = a2;
      memcpy(v24, &v42[8], 0x1F8uLL);
      v24[504] = 1;
      v24[512] = 0;
      v24[624] = 0;
      v24[632] = 0;
      char v27 = 0;
      char v28 = 0;
      char v31 = 0;
      __int16 v32 = 0;
      char v33 = 0;
      char v34 = 0;
      __int16 v35 = 0;
      char v36 = 0;
      char v37 = 0;
      char v38 = 0;
      char v39 = 0;
      char v5 = sub_1001441E8(a1, (uint64_t)buf);
      __int128 v6 = (os_log_s *)qword_1008000A0;
      if ((v5 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 67109120;
          int v8 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] Cancel Service: Success canceling service request, ticket ID: %d",  (uint8_t *)&v7,  8u);
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EC00();
        }
        int v7 = 1;
        LOWORD(v8) = a2;
        uint64_t v9 = 12LL;
        char v10 = 1;
        char v11 = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v19 = 0;
        char v20 = 0;
        char v21 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &v7);
        if (v15 && v14 && v13 < 0) {
          operator delete(__p);
        }
      }

      if (v31 && v29)
      {
        char v30 = v29;
        operator delete(v29);
      }

      if (v27 && v25)
      {
        char v26 = v25;
        operator delete(v25);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038EB38();
  }

void sub_1001441A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  sub_10014438C((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1001441E8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    __int128 v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v3 = sub_100148540(v7, a2);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EC90();
      }
      uint64_t v3 = 0LL;
    }

    std::mutex::unlock(v6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038EC64();
    }
    return 0LL;
  }

  return v3;
}

void sub_1001442A8(_Unwind_Exception *a1)
{
}

__n128 sub_1001442BC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(__n128 *)(a1 + 776) = result;
  return result;
}

void sub_10014431C(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 712)) {
    sub_10038ECBC(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144338(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 768))
  {
    unsigned __int8 v2 = *(void **)(a1 + 728);
    if (v2)
    {
      *(void *)(a1 + 736) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 712))
  {
    uint64_t v3 = *(void **)(a1 + 688);
    if (v3)
    {
      *(void *)(a1 + 696) = v3;
      operator delete(v3);
    }
  }

uint64_t sub_10014438C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 728))
  {
    unsigned __int8 v2 = *(void **)(a1 + 688);
    if (v2)
    {
      *(void *)(a1 + 696) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 672))
  {
    uint64_t v3 = *(void **)(a1 + 648);
    if (v3)
    {
      *(void *)(a1 + 656) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

void sub_1001443E0(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038ECD0();
  }
  uint64_t v16 = *a2;
  int v17 = *((_DWORD *)a2 + 2);
  sub_1001377E0((uint64_t)v18, (uint64_t)(a2 + 2));
  __int128 v4 = *((_OWORD *)a2 + 6);
  __int128 v23 = *((_OWORD *)a2 + 5);
  __int128 v24 = v4;
  v25[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v25 + 13) = *(_OWORD *)((char *)a2 + 125);
  char v5 = *(dispatch_queue_s **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_1001474FC;
  block[3] = &unk_1007B01D8;
  block[4] = a1;
  void block[5] = v16;
  int v7 = v17;
  sub_1001377E0((uint64_t)&v8, (uint64_t)v18);
  __int128 v13 = v23;
  __int128 v14 = v24;
  v15[0] = v25[0];
  *(_OWORD *)((char *)v15 + 13) = *(_OWORD *)((char *)v25 + 13);
  dispatch_async(v5, block);
  if (v12 && v11 && v10 < 0) {
    operator delete(__p);
  }
  if (v22 && v21 && v20 < 0) {
    operator delete(v19);
  }
}

void sub_100144538( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, char a43, uint64_t a44, char a45)
{
  if (a45 && a43 && a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144568(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038ECD0();
  }
  __int128 v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  __int128 v4 = *(dispatch_queue_s **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  _DWORD v5[2] = sub_100147570;
  void v5[3] = &unk_1007B0208;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_100144610(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038ECD0();
  }
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v4;
  char v5 = *(dispatch_queue_s **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100147580;
  block[3] = &unk_1007B0228;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_1001446B0(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038ECD0();
  }
  __int128 v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  __int128 v4 = *(dispatch_queue_s **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  _DWORD v5[2] = sub_100147590;
  void v5[3] = &unk_1007B0248;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_100144758(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038ECD0();
  }
  uint64_t v4 = *a2;
  char v5 = *(dispatch_queue_s **)(a1 + 120);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1001475A0;
  v6[3] = &unk_1007B0268;
  v6[4] = a1;
  void v6[5] = v4;
  dispatch_async(v5, v6);
}

uint64_t sub_1001447F4(uint64_t a1, int a2, __int16 *a3)
{
  v11[0] = &off_1007B0298;
  v11[1] = a1;
  char v12 = v11;
  v9[0] = &off_1007B0328;
  v9[1] = a1;
  char v10 = v9;
  uint64_t v3 = sub_100147B34(a1 + 208, a3, a2, (uint64_t)v11, (uint64_t)v9);
  uint64_t v4 = v10;
  if (v10 == v9)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v9;
  }

  else
  {
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  __int128 v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    __int128 v6 = v11;
    goto LABEL_10;
  }

  if (v12)
  {
    uint64_t v7 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return v3;
}

void sub_1001448F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_list v11 = va_arg(va1, va_list);
  va_list v5 = v11;
  if (v11 == v3)
  {
    uint64_t v6 = 4LL;
    va_copy(v5, va);
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*(void *)v5 + 8 * v6))();
LABEL_6:
  sub_10038ECFC(v2, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100144940(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal AOPRoseEvent",  buf,  2u);
  }

  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EDDC();
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "[AP Scheduler] handleEventInternal AOPRoseEvent unspecified type");
    case 1:
      va_list v5 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v12 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] received SchedulingTaskStatusUpdate event",  v12,  2u);
      }

      if (!*(_BYTE *)(a2 + 92)) {
        sub_10038ED64();
      }
      sub_100144DD8(a1, (unsigned __int16 *)(a2 + 80));
      break;
    case 2:
      uint64_t v6 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 v13 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] received SchedulerError event",  v13,  2u);
      }

      if (!*(_BYTE *)(a2 + 140)) {
        sub_10038ED3C();
      }
      sub_100144B94(a1, (unsigned __int16 *)(a2 + 104));
      break;
    case 3:
      uint64_t v7 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)va_list v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] received InfrastructureStatusUpdate event",  v11,  2u);
      }

      if (!*(_BYTE *)(a2 + 72)) {
        sub_10038ED8C();
      }
      sub_10014587C(a1, (int *)(a2 + 16));
      break;
    case 4:
      __int128 v8 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] received TimeConversionStateUpdate event",  v10,  2u);
      }

      if (!*(_BYTE *)(a2 + 100)) {
        sub_10038EDB4();
      }
      sub_100145B54(a1, (int *)(a2 + 96));
      break;
    default:
      return;
  }

void sub_100144B80(_Unwind_Exception *a1)
{
}

void sub_100144B94(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_10038EE60(a2, v4, v5, v6, v7, v8, v9, v10);
  }
  if (*((_BYTE *)a2 + 28))
  {
    __int128 v11 = *(_OWORD *)a2;
    __int128 v28 = *((_OWORD *)a2 + 1);
    uint64_t v12 = *(void *)(a1 + 144);
    int v14 = 5;
    LOBYTE(v15) = 0;
    char v17 = 0;
    char v18 = 0;
    char v22 = 0;
    char v23 = 0;
    char v24 = 0;
    char v25 = 0;
    char v26 = 0;
    int v29 = *((_DWORD *)a2 + 8);
    __int128 v27 = v11;
    char v30 = 1;
    (*(void (**)(uint64_t, int *))(*(void *)v12 + 16LL))(v12, &v14);
    if (v22)
    {
      if (v21 && v20 < 0) {
        operator delete(__p);
      }
    }
  }

  unsigned int v13 = *a2;
  if (v13 <= 0x1A)
  {
    if (((1 << v13) & 0x48F801C) != 0)
    {
      int v14 = 12;
      __int16 v15 = 0;
      char v16 = 0;
      char v31 = 0;
      char v32 = 0;
      char v33 = 0;
      char v34 = 0;
      char v37 = 0;
      char v38 = 0;
      char v41 = 0;
      __int16 v42 = 0;
      char v43 = 0;
      char v44 = 0;
      __int16 v45 = v13;
      char v46 = 0;
      char v47 = 0;
      char v48 = 0;
      char v49 = 0;
      if ((sub_1001441E8(a1, (uint64_t)&v14) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        sub_10038EE08();
      }

      if (v41 && v39)
      {
        char v40 = v39;
        operator delete(v39);
      }

      if (v37)
      {
        if (v35)
        {
          char v36 = v35;
          operator delete(v35);
        }
      }
    }

    else if (v13 == 22 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
    {
      sub_10038EE34();
    }
  }

void sub_100144D94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144DD8(unint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000065CC(__p, off_1007B0560[*((int *)a2 + 1)]);
    uint64_t v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    int v6 = *a2;
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "++ RoseScheduler::handleServiceRequestStatusUpdate (%s), ticket id: %d ++",  buf,  0x12u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  int v7 = *((_DWORD *)a2 + 1);
  switch(v7)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
        sub_10038F15C();
      }
      unsigned __int16 v8 = *a2;
      uint64_t v9 = *(dispatch_queue_s **)(a1 + 120);
      *(void *)__int128 __p = _NSConcreteStackBlock;
      *(void *)&__p[8] = 0x40000000LL;
      *(void *)&__p[16] = sub_100143EE0;
      *(void *)&__p[24] = &unk_1007B0160;
      *(void *)&__p[32] = a1;
      *(_WORD *)&__p[40] = v8;
      dispatch_async(v9, __p);
      goto LABEL_13;
    case 1:
      char v18 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingDidStart", __p, 2u);
      }

      if (!sub_10014A284(*(void *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EF7C();
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( exception,  "RangingDidStart: Failed to update service request state to Active");
      }

      goto LABEL_39;
    case 2:
      int v14 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[RoseScheduler] RangingFailedToStart",  __p,  2u);
      }

      if (!sub_10014A284(*(void *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EFDC();
        }
        __int16 v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v15,  "RangingFailedToStart: Failed to update service request state to Inactive");
      }

      goto LABEL_43;
    case 3:
      char v16 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingStopped", __p, 2u);
      }

      if (!sub_10014A284(*(void *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038F09C();
        }
        char v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "RangingStopped: Failed to update service request state to Inactive");
      }

      goto LABEL_43;
    case 4:
      uint64_t v12 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[RoseScheduler] RequestInvalidated",  __p,  2u);
      }

      if (sub_10014A284(*(void *)(a1 + 128), *a2, 0))
      {
        int v13 = 0;
        int v11 = 1;
LABEL_44:
        int v21 = 1;
LABEL_45:
        sub_100149D9C(*(void *)(a1 + 128), *a2, __p);
        char v23 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000065CC(buf, off_1007B0560[*((int *)a2 + 1)]);
          char v24 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          int v25 = *a2;
          *(_DWORD *)char v61 = 136315394;
          char v62 = v24;
          __int16 v63 = 1024;
          int v64 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#coex,RoseScheduler::handleServiceRequestStatusUpdate,shouldUpdateCoexProxy- event_type(%s), ticket_id(%d)",  v61,  0x12u);
        }

        if ((_BYTE)v52)
        {
          memcpy(buf, &__p[8], 0x278uLL);
          __int16 v26 = sub_10013F48C((uint64_t)&buf[8]);
          char v27 = 9;
          if ((v26 & 0x100) == 0) {
            char v27 = 0;
          }
          int v28 = (unsigned __int16)(v26 & 0x100) >> 8;
          if ((v26 & 1) != 0) {
            unsigned __int8 v29 = 5;
          }
          else {
            unsigned __int8 v29 = v27;
          }
          if ((v26 & 1) != 0) {
            LOBYTE(v28) = 1;
          }
        }

        else
        {
          unsigned __int8 v29 = 0;
          LOBYTE(v28) = 0;
        }

        sub_100146A80(a1, 2, v29 | (v28 << 8));
        if (v13)
        {
          if (!sub_10014A69C(*(void *)(a1 + 128)) && !sub_10014A7BC(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          *(_DWORD *)__int128 __p = 1;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100146B24(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }

        else
        {
          if (!v21) {
            goto LABEL_72;
          }
          if (sub_10014A69C(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          if (sub_10014A7BC(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          *(_DWORD *)__int128 __p = 2;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100146B24(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }

        sub_10038EEF0();
LABEL_72:
        *(void *)&uint8_t buf[4] = *(void *)a2;
        int v30 = *((_DWORD *)a2 + 2);
        *(_DWORD *)__int128 buf = 1;
        *(_DWORD *)&_BYTE buf[12] = v30;
        uint8_t buf[16] = 1;
        _BYTE buf[24] = 0;
        buf[80] = 0;
        buf[88] = 0;
        buf[112] = 0;
        buf[116] = 0;
        buf[120] = 0;
        buf[124] = 0;
        buf[160] = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), buf);
        if (v11)
        {
          uint64_t v31 = sub_10014A530(*(void *)(a1 + 128));
          unint64_t v32 = sub_10014A8DC(*(void *)(a1 + 128));
          if (!v31 && v32 <= 1 && *(_BYTE *)(a1 + 260))
          {
            char v33 = (os_log_s *)qword_1008000A0;
            if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 __p = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[RoseScheduler] No active service requests, Informing AOP proxy object that UCM had received a R2 GPIO t rigger blanking request",  __p,  2u);
              if (!*(_BYTE *)(a1 + 260)) {
                sub_100006080();
              }
            }

            int v34 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)__int128 __p = 15;
            *(_WORD *)&__p[4] = 0;
            __p[8] = 0;
            __p[512] = 0;
            __p[520] = 0;
            __p[632] = 0;
            v51[0] = 0;
            char v54 = 0;
            v55[0] = 0;
            char v58 = 0;
            *(_WORD *)unsigned __int8 v59 = 0;
            void v59[2] = 0;
            v59[5] = 0;
            *(_WORD *)&v59[6] = 0;
            *(_DWORD *)&v59[8] = v34;
            v59[12] = 1;
            v59[16] = 0;
            v59[20] = 0;
            dispatch_time_t v35 = dispatch_time(0LL, 50000000LL);
            char v36 = *(dispatch_queue_s **)(a1 + 120);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 1174405120LL;
            v40[2] = sub_100146BF8;
            v40[3] = &unk_1007B0180;
            v40[4] = a1;
            memcpy(v41, __p, sizeof(v41));
            sub_1001471F4((uint64_t)&v42, (uint64_t)v51);
            sub_100147288(&v46, (uint64_t)v55);
            *(_OWORD *)char v49 = *(_OWORD *)v59;
            *(void *)&v49[13] = *(void *)&v59[13];
            dispatch_after(v35, v36, v40);
            if (v48 && v46.n128_u64[1])
            {
              unint64_t v47 = v46.n128_u64[1];
              operator delete((void *)v46.n128_u64[1]);
            }

            if (v45 && v43)
            {
              char v44 = v43;
              operator delete(v43);
            }

            if (v58 && v56)
            {
              __int16 v57 = v56;
              operator delete(v56);
            }

            if (v54 && v52)
            {
              char v53 = v52;
              operator delete(v52);
            }
          }
        }

        return;
      }

      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038F0FC();
      }
      return;
    case 5:
      char v20 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] JobStart", __p, 2u);
      }

      if (!sub_10014A284(*(void *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038EF1C();
        }
        char v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "JobStart: Failed to update service request state to Active");
      }

void sub_1001457E8(_Unwind_Exception *a1)
{
}

void sub_10014587C(uint64_t a1, int *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000065CC(__p, off_1007B0488[*a2]);
    uint64_t v5 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315138;
    v25[0] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseScheduler::handleRoseInfrastructureStatusUpdate, status: %s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  switch(*a2)
  {
    case 0:
      sub_10038F24C();
    case 1:
    case 5:
    case 6:
      atomic_store(0, (unsigned __int8 *)(a1 + 153));
      break;
    case 3:
      std::mutex::lock((std::mutex *)(a1 + 8));
      atomic_store(1u, (unsigned __int8 *)(a1 + 153));
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 160));
      std::mutex::unlock((std::mutex *)(a1 + 8));
      break;
    case 4:
      sub_10038F224();
    default:
      break;
  }

  *(_DWORD *)__int128 buf = *a2;
  sub_100137848((_BYTE *)v25 + 4, (uint64_t)(a2 + 2));
  uint64_t v28 = *((void *)a2 + 6);
  int v6 = *(_DWORD *)buf;
  if (*(_DWORD *)buf == 3)
  {
    if (*(_BYTE *)(a1 + 154))
    {
      int v6 = 3;
    }

    else
    {
      int v7 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "NB not available, Ready to Ready_UWB",  (uint8_t *)__p,  2u);
      }

      int v6 = 4;
      *(_DWORD *)__int128 buf = 4;
      LODWORD(v28) = 4;
      BYTE4(v28) = 1;
    }
  }

  *(_DWORD *)(a1 + 156) = v6;
  LODWORD(__p[0]) = 2;
  BYTE4(__p[0]) = 0;
  char v9 = 0;
  int v11 = v6;
  sub_100137848(v12, (uint64_t)v25 + 4);
  uint64_t v16 = v28;
  char v17 = 1;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), __p);
  if (v17 && v15 && v14 < 0) {
    operator delete(v13);
  }
  if (v27)
  {
    if (v26 < 0) {
      operator delete(*(void **)((char *)&v25[1] + 4));
    }
  }

void sub_100145B00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  if (*(_BYTE *)(v22 - 72))
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_100145B54(uint64_t a1, int *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2 ? "Ready" : "NotReady";
    sub_1000065CC(__p, v5);
    int v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v22 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "RoseScheduler::handleTimeConversionStateUpdate (%s)",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LODWORD(__p[0]) = 4;
  BYTE4(__p[0]) = 0;
  char v8 = 0;
  char v10 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  int v17 = *a2;
  char v18 = 1;
  char v19 = 0;
  char v20 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), __p);
  if (v14 && v13 && v12 < 0) {
    operator delete(v11);
  }
}

void sub_100145CBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, char a23)
{
}

void sub_100145CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal RoseBluetoothEvent",  v6,  2u);
  }

  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*(_BYTE *)(a2 + 18)) {
        sub_10038F274();
      }
      sub_100145DB0(a1, (unsigned __int16 *)(a2 + 12));
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038F29C();
  }

void sub_100145DB0(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2 = *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16);
  int v3 = 1;
  unint64_t v4 = v2;
  char v5 = 1;
}

void sub_100145E4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal RoseCoexEvent",  (uint8_t *)&v19,  2u);
  }

  unsigned int v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 0u:
    case 1u:
    case 4u:
      uint64_t v6 = qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        if (v5 > 4) {
          int v7 = "N/A";
        }
        else {
          int v7 = off_1007B04C0[v5];
        }
        int v19 = 136315138;
        uint64_t v20 = (uint64_t)v7;
        char v14 = "Not expected to handle coex event %s";
        char v15 = (os_log_s *)v6;
        goto LABEL_26;
      }

      break;
    case 2u:
      char v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal RoseCoexEvent: R2ChannelToTriggerGpioBlankingChanged",  (uint8_t *)&v19,  2u);
      }

      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 260) = 1;
      uint64_t v11 = sub_10014A9B0(*(void *)(a1 + 128));
      char v12 = (os_log_s *)qword_1008000A0;
      BOOL v13 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          int v19 = 134217984;
          uint64_t v20 = v11;
          char v14 = "[AP Scheduler] handleEventInternal Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.";
          char v15 = v12;
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v19, 0xCu);
        }
      }

      else
      {
        if (v13)
        {
          LOWORD(v19) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal Informing AOP proxy object that UCM had received a R2 GPIO trigger blanking request",  (uint8_t *)&v19,  2u);
        }

        if (!*(_BYTE *)(a1 + 260)) {
          sub_10038F2F4();
        }
        int v16 = *(_DWORD *)(a1 + 256);
        int v19 = 15;
        LOWORD(v20) = 0;
        BYTE4(v20) = 0;
        char v21 = 0;
        char v22 = 0;
        char v23 = 0;
        char v24 = 0;
        char v27 = 0;
        char v28 = 0;
        char v31 = 0;
        __int16 v32 = 0;
        char v33 = 0;
        char v34 = 0;
        __int16 v35 = 0;
        int v36 = v16;
        char v37 = 1;
        LOBYTE(v38) = 0;
        char v39 = 0;
        if ((sub_1001441E8(a1, (uint64_t)&v19) & 1) != 0)
        {
          if (!*(_BYTE *)(a1 + 260)) {
            sub_100006080();
          }
          *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 256);
        }

        else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
        {
          sub_10038F31C();
        }

        if (*(_BYTE *)(a1 + 260)) {
          *(_BYTE *)(a1 + 260) = 0;
        }
        if (v31 && __p)
        {
          int v30 = __p;
          operator delete(__p);
        }

        if (v27 && v25)
        {
          char v26 = v25;
          operator delete(v25);
        }
      }

      break;
    case 3u:
      char v8 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal RoseCoexEvent: R2NbChannelIdxToTriggerGpioBlankingChanged",  (uint8_t *)&v19,  2u);
      }

      if (*(_DWORD *)(a2 + 16) == 2 && *(_BYTE *)(a2 + 22) && *(_BYTE *)(a2 + 26))
      {
        if (*(_DWORD *)(a1 + 264) == 2)
        {
          int v9 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          int v19 = 16;
          LOWORD(v20) = 0;
          BYTE4(v20) = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v27 = 0;
          char v28 = 0;
          char v31 = 0;
          __int16 v32 = 0;
          char v33 = 0;
          char v34 = 0;
          __int16 v35 = 0;
          LOBYTE(v36) = 0;
          char v37 = 0;
          int v38 = v9;
          char v39 = 1;
          if ((sub_1001441E8(a1, (uint64_t)&v19) & 1) == 0
            && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
          {
            sub_10038F348();
          }

          sub_10014438C((uint64_t)&v19);
        }

        else
        {
          int v17 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v19) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "GPIO blanking was not triggered on NB, Caching NB channel indices to request blanking when pending set con fig request goes through.",  (uint8_t *)&v19,  2u);
            if (!*(_BYTE *)(a2 + 22)) {
              sub_100006080();
            }
          }

          if (!*(_BYTE *)(a2 + 26)) {
            sub_100006080();
          }
          int v18 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          if (!*(_BYTE *)(a1 + 272)) {
            *(_BYTE *)(a1 + 272) = 1;
          }
          *(_DWORD *)(a1 + 268) = v18;
        }
      }

      else if (*(_BYTE *)(a1 + 272))
      {
        *(_BYTE *)(a1 + 272) = 0;
      }

      break;
    default:
      return;
  }

void sub_1001462C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001462E0()
{
  unsigned __int8 v0 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "[AP Scheduler] handleEventInternal RoseSecureElementEvent",  v1,  2u);
  }

void sub_100146344(uint64_t a1, int *a2)
{
  unint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    else {
      uint64_t v6 = off_1007B04E8[v5];
    }
    int v7 = v32;
    sub_1000065CC(v32, v6);
    if (v35 < 0) {
      int v7 = *(uint8_t **)v32;
    }
    uint64_t v8 = a2[1];
    else {
      int v9 = off_1007B0518[v8];
    }
    sub_1000065CC(&__p, v9);
    if (SHIBYTE(v28) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)__int128 buf = 136315394;
    std::random_device v69 = v7;
    __int16 v70 = 2080;
    char v71 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RegulatoryEvent] type: %s, reason: %s",  buf,  0x16u);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    if (v35 < 0) {
      operator delete(*(void **)v32);
    }
  }

  switch(*a2)
  {
    case 0:
      if (!*((_BYTE *)a2 + 8)) {
        sub_10038F39C();
      }
      unsigned int v11 = a2[1] - 1;
      if (v11 > 6) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = *(_DWORD *)&asc_1004234AC[4 * v11];
      }
      sub_100147328((uint64_t)v32, v12);
      sub_1001441E8(a1, (uint64_t)v32);
      goto LABEL_42;
    case 1:
      if (!*((_BYTE *)a2 + 8)) {
        sub_10038F374();
      }
      *(_DWORD *)__int16 v32 = 10;
      *(_WORD *)&v32[4] = 0;
      char v33 = 0;
      char v50 = 0;
      char v51 = 0;
      char v52 = 0;
      char v53 = 0;
      char v56 = 0;
      char v57 = 0;
      char v60 = 0;
      memset(v61, 0, 3);
      char v62 = 0;
      __int16 v63 = 0;
      char v64 = 0;
      char v65 = 0;
      char v66 = 0;
      char v67 = 0;
      sub_1001441E8(a1, (uint64_t)v32);
      goto LABEL_42;
    case 2:
      if (*((_BYTE *)a2 + 8)) {
        goto LABEL_25;
      }
      goto LABEL_48;
    case 3:
      char v15 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v32 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[RegulatoryEvent] Narrowband disallowed",  v32,  2u);
      }

      *(_BYTE *)(a1 + 154) = 0;
      int v14 = 1;
      goto LABEL_49;
    case 4:
      BOOL v13 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v32 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[RegulatoryEvent] Narrowband allowed",  v32,  2u);
      }

      int v14 = 1;
      *(_BYTE *)(a1 + 154) = 1;
      goto LABEL_49;
    case 5:
      int v16 = a2[1];
      if (*((_BYTE *)a2 + 8) && v16 == 8)
      {
        if (!*((_BYTE *)a2 + 21))
        {
LABEL_48:
          int v14 = 0;
          goto LABEL_49;
        }

        char v17 = *((_BYTE *)a2 + 20);
        *(_DWORD *)__int16 v32 = 9;
        *(_WORD *)&v32[4] = 0;
        char v33 = 0;
        char v50 = 0;
        char v51 = 0;
        char v52 = 0;
        char v53 = 0;
        char v56 = 0;
        char v57 = 0;
        char v60 = 0;
        LOBYTE(v61[0]) = v17;
        *(_WORD *)((char *)v61 + 1) = 1;
        char v62 = 0;
        __int16 v63 = 0;
        char v64 = 0;
        char v65 = 0;
        char v66 = 0;
        char v67 = 0;
        sub_1001441E8(a1, (uint64_t)v32);
LABEL_42:
        if (v60 && v58)
        {
          unsigned __int8 v59 = v58;
          operator delete(v58);
        }

        if (v56 && v54)
        {
          int v55 = v54;
          operator delete(v54);
        }

        goto LABEL_48;
      }

      int v14 = 0;
      if (*((_BYTE *)a2 + 8) && v16 == 3)
      {
        int v18 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v32 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "NBConfigurationChanged due to Country Chagned",  v32,  2u);
        }

void sub_1001469C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, uint64_t a35, char a36)
{
}

void *sub_100146A6C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0560[a1]);
}

unint64_t sub_100146A80(unint64_t result, int a2, __int16 a3)
{
  uint64_t v3 = result;
  LOBYTE(v6) = 0;
  char v8 = 0;
  __int16 v9 = 0;
  if (a2 == 2)
  {
    __n128 result = *(void *)(result + 128);
    if (!result) {
      return result;
    }
    if (HIBYTE(a3)) {
      __int16 v9 = a3 | 0x100;
    }
    int v5 = 2;
    uint64_t v6 = sub_10014A9B8(result);
    int v7 = v4;
    char v8 = 1;
    return sub_100147058(v3, (uint64_t)&v5);
  }

  if (a2 != 1) {
    sub_10038F3C4();
  }
  if (HIBYTE(a3))
  {
    int v5 = 1;
    __int16 v9 = a3 | 0x100;
    return sub_100147058(v3, (uint64_t)&v5);
  }

  return result;
}

uint64_t sub_100146B24(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    uint64_t v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7)
    {
      uint64_t v3 = sub_100147A38(v7, a2);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EC90();
      }
      uint64_t v3 = 0LL;
    }

    std::mutex::unlock(v6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038EC64();
    }
    return 0LL;
  }

  return v3;
}

void sub_100146BE4(_Unwind_Exception *a1)
{
}

void sub_100146BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_10014A9B0(*(void *)(v2 + 128));
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[RoseScheduler] Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    int v6 = sub_1001441E8(v2, a1 + 40);
    if (!*(_BYTE *)(a1 + 788)) {
      sub_10038F3EC();
    }
    sub_100146D04(v2, v6, *(_DWORD *)(a1 + 784));
  }

void sub_100146D04(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = (os_log_s *)qword_1008000A0;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Successfully sent set config to trigger GPIO blanking on UCM event",  (uint8_t *)&v11,  2u);
    }

    *(_DWORD *)(a1 + 264) = a3;
    if (!*(_BYTE *)(a1 + 260)) {
      sub_100006080();
    }
    if (*(_DWORD *)(a1 + 256) == a3)
    {
      *(_BYTE *)(a1 + 260) = 0;
      if (a3 == 2 && *(_BYTE *)(a1 + 272))
      {
        int v6 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(unsigned __int16 *)(a1 + 268);
          int v8 = *(unsigned __int16 *)(a1 + 270);
          int v11 = 67109376;
          int v12 = v7;
          __int16 v13 = 1024;
          int v14 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[RoseScheduler] Sent setConfig to trigger GPIO blanking on NB, Informing AOP proxy object that UCM had recei ved blanking request for NB channel indices %d -> %d",  (uint8_t *)&v11,  0xEu);
          if (!*(_BYTE *)(a1 + 272)) {
            sub_100006080();
          }
        }

        int v9 = *(_DWORD *)(a1 + 268);
        int v11 = 16;
        LOWORD(v12) = 0;
        LOBYTE(v13) = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v21 = 0;
        char v22 = 0;
        char v25 = 0;
        __int16 v26 = 0;
        char v27 = 0;
        char v28 = 0;
        __int16 v29 = 0;
        char v30 = 0;
        char v31 = 0;
        int v32 = v9;
        char v33 = 1;
        if ((sub_1001441E8(a1, (uint64_t)&v11) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
        {
          sub_10038F348();
        }

        if (*(_BYTE *)(a1 + 272)) {
          *(_BYTE *)(a1 + 272) = 0;
        }
        if (v25 && __p)
        {
          char v24 = __p;
          operator delete(__p);
        }

        if (v21)
        {
          if (v19)
          {
            int v20 = v19;
            operator delete(v19);
          }
        }
      }
    }

    else
    {
      char v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Potentially got a new UCM while sending the previous set config, not resetting pending channel",  (uint8_t *)&v11,  2u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10038F414();
  }

void sub_100146F68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100146F84(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    int v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v3 = sub_1001485B8(v7, a2);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EC90();
      }
      uint64_t v3 = 0LL;
    }

    std::mutex::unlock(v6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038EC64();
    }
    return 0LL;
  }

  return v3;
}

void sub_100147044(_Unwind_Exception *a1)
{
}

uint64_t sub_100147058(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v2 & 1) != 0)
  {
    int v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7)
    {
      uint64_t v3 = sub_10012AFA0(v7, a2);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EC90();
      }
      uint64_t v3 = 0LL;
    }

    std::mutex::unlock(v6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038EC64();
    }
    return 0LL;
  }

  return v3;
}

void sub_100147118(_Unwind_Exception *a1)
{
}

uint64_t sub_100147130(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 6;
  *(_WORD *)(a1 + 4) = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = *(_WORD *)a2;
  *(void *)(a1 + 696) = 0LL;
  *(void *)(a1 + 704) = 0LL;
  *(void *)(a1 + 688) = 0LL;
  sub_1001309C0( (void *)(a1 + 688),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 728) = 1;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(_BYTE *)(a1 + 741) = 0;
  *(_WORD *)(a1 + 742) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  return a1;
}

void sub_1001471D8(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 672)) {
    sub_10038F440(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001471F4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_10014723C((void *)a1, a2);
  return a1;
}

void sub_100147220(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32)) {
    sub_10038F458(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014723C(void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
  {
    unsigned __int8 v2 = result;
    *(_DWORD *)__n128 result = *(_DWORD *)a2;
    result[2] = 0LL;
    result[3] = 0LL;
    result[1] = 0LL;
    __n128 result = sub_1001309C0( result + 1,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 16) - *(void *)(a2 + 8));
    *((_BYTE *)v2 + 32) = 1;
  }

  return result;
}

__n128 *sub_100147288(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[0] = 0;
  sub_1001472D0(a1, a2);
  return a1;
}

void sub_1001472B4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 48)) {
    sub_10038F458(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001472D0(__n128 *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48))
  {
    a1->n128_u16[0] = *(_WORD *)a2;
    a1[1].n128_u64[0] = 0LL;
    a1[1].n128_u64[1] = 0LL;
    a1->n128_u64[1] = 0LL;
    sub_1001309C0( &a1->n128_u64[1],  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 16) - *(void *)(a2 + 8));
    __n128 result = *(__n128 *)(a2 + 32);
    a1[2] = result;
    a1[3].n128_u8[0] = 1;
  }

  return result;
}

uint64_t sub_100147328(uint64_t result, unsigned int a2)
{
  *(_DWORD *)__n128 result = a2;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 512) = 0;
  *(_BYTE *)(result + 520) = 0;
  *(_BYTE *)(result + 632) = 0;
  *(_BYTE *)(result + 640) = 0;
  *(_BYTE *)(result + 672) = 0;
  *(_BYTE *)(result + 680) = 0;
  *(_BYTE *)(result + 728) = 0;
  *(_WORD *)(result + 736) = 0;
  *(_BYTE *)(result + 738) = 0;
  *(_BYTE *)(result + 741) = 0;
  *(_WORD *)(result + 742) = 0;
  *(_BYTE *)(result + 744) = 0;
  *(_BYTE *)(result + 748) = 0;
  *(_BYTE *)(result + 752) = 0;
  *(_BYTE *)(result + 756) = 0;
  if (a2 > 0xE || ((1 << a2) & 0x6D00) == 0) {
    __assert_rtn( "AOPRoseCommandMessage",  "AOPRoseCommandMessage.h",  68,  "message_type == AOPRoseCommandMessageType::SystemOn || message_type == AOPRoseCommandMessageType::RefreshConfigura tion || message_type == AOPRoseCommandMessageType::LPEMEnable || message_type == AOPRoseCommandMessageType::System Off_AirplaneMode || message_type == AOPRoseCommandMessageType::SystemOff_RestrictedRegion");
  }
  return result;
}

void sub_1001473D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(_BYTE *)(a10 + 728)) {
    sub_10038ECBC(a10);
  }
  sub_10038F46C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_100147404(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[ProxyObjectBase] Given nullptr event consumer.");
  }

  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(void *)(a1 + 8) = a2;
  std::mutex::unlock(v4);
}

void sub_100147474(_Unwind_Exception *a1)
{
}

uint64_t sub_100147488(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[2];
  if (!v4) {
    sub_10038F488(0LL, (uint64_t)a2, a3);
  }
  sub_100147404(v4, a1);
  uint64_t v8 = a2[3];
  if (!v8) {
    sub_10038F488(0LL, v6, v7);
  }
  sub_100147404(v8, a1);
  uint64_t v11 = a2[4];
  if (!v11) {
    sub_10038F488(0LL, v9, v10);
  }
  sub_100147404(v11, a1);
  uint64_t v14 = a2[5];
  if (!v14) {
    sub_10038F488(0LL, v12, v13);
  }
  sub_100147404(v14, a1);
  return 1LL;
}

void sub_1001474FC(uint64_t a1)
{
}

__n128 sub_10014750C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_1001377E0(a1 + 56, a2 + 56);
  __n128 result = *(__n128 *)(a2 + 120);
  __int128 v5 = *(_OWORD *)(a2 + 136);
  __int128 v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(__n128 *)(a1 + 120) = result;
  return result;
}

uint64_t sub_100147568(uint64_t a1)
{
  return sub_1001378F4(a1 + 56);
}

void sub_100147570(uint64_t a1)
{
}

void sub_100147580(uint64_t a1)
{
}

void sub_100147590(uint64_t a1)
{
}

void *sub_1001475AC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1007B0298;
  result[1] = v3;
  return result;
}

uint64_t sub_1001475E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B0298;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001475FC(uint64_t a1, uint64_t a2)
{
  return sub_1001441E8(*(void *)(a1 + 8), a2);
}

uint64_t sub_100147604(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100147640()
{
}

void *sub_100147654(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1007B0328;
  result[1] = v3;
  return result;
}

uint64_t sub_100147688(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B0328;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001476A4(uint64_t a1)
{
  return sub_1001476F4(*(void *)(a1 + 8));
}

uint64_t sub_1001476AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1001476E8()
{
}

uint64_t sub_1001476F4(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v1 & 1) != 0)
  {
    uint64_t v4 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    if (*(void *)(a1 + 104))
    {
      uint64_t v2 = sub_10014B25C();
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038EC90();
      }
      uint64_t v2 = 0LL;
    }

    std::mutex::unlock(v4);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038EC64();
    }
    return 0LL;
  }

  return v2;
}

void sub_1001477B4(_Unwind_Exception *a1)
{
}

void sub_1001477C8(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = __p;
  operator delete(__p);
}

void sub_1001477D0(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 696) = __p;
  operator delete(__p);
}

  ;
}

void sub_1001477E4( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_1001477F8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

  ;
}

  ;
}

void *sub_100147820@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0618[a1]);
}

void *sub_100147834@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0670[a1]);
}

void *sub_100147848@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B06B8[a1]);
}

void *sub_10014785C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B06D8[a1]);
}

double sub_100147870(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_1007B05E8;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_10014789C(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_1001478CC(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

void sub_1001478FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, a2);
  }
  std::mutex::unlock(v4);
}

void sub_10014794C(_Unwind_Exception *a1)
{
}

void *sub_100147960@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0750[a1]);
}

void *sub_100147974@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B07A8[a1]);
}

void *sub_100147988@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B07F0[a1]);
}

void *sub_10014799C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0810[a1]);
}

double sub_1001479B0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)a1 = off_1007B0708;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_1001479D8(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100147A08(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

uint64_t sub_100147A38(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_10038F4AC();
  }
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_100147A9C(_Unwind_Exception *a1)
{
}

void *sub_100147AB0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0898[a1]);
}

void *sub_100147AC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B08F0[a1]);
}

void *sub_100147AD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0938[a1]);
}

void *sub_100147AEC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0958[a1]);
}

void *sub_100147B00(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *double result = off_1007B0840;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    uint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  result[3] = a3;
  return result;
}

uint64_t sub_100147B34(uint64_t a1, __int16 *a2, int a3, uint64_t a4, uint64_t a5)
{
  switch(a3)
  {
    case 0:
      sub_10001E914((uint64_t)v32, a4);
      uint64_t v7 = sub_10001E914((uint64_t)v30, a5);
      LOBYTE(a2) = sub_100148040(v7, a2, (uint64_t)v32);
      uint64_t v8 = v31;
      if (v31 == v30)
      {
        uint64_t v9 = 4LL;
        uint64_t v8 = v30;
      }

      else
      {
        if (!v31)
        {
LABEL_24:
          uint64_t v19 = v33;
          if (v33 != v32) {
            goto LABEL_29;
          }
          uint64_t v20 = 4LL;
          uint64_t v19 = v32;
          goto LABEL_31;
        }

        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
      goto LABEL_24;
    case 1:
      sub_10001E914((uint64_t)v28, a4);
      uint64_t v10 = sub_10001E914((uint64_t)v26, a5);
      LOBYTE(a2) = sub_100148160(v10, a2, (uint64_t)v28);
      uint64_t v11 = v27;
      if (v27 == v26)
      {
        uint64_t v12 = 4LL;
        uint64_t v11 = v26;
      }

      else
      {
        if (!v27) {
          goto LABEL_28;
        }
        uint64_t v12 = 5LL;
      }

      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
      uint64_t v19 = v29;
      if (v29 != v28) {
        goto LABEL_29;
      }
      uint64_t v20 = 4LL;
      uint64_t v19 = v28;
      goto LABEL_31;
    case 2:
      sub_10001E914((uint64_t)v24, a4);
      uint64_t v13 = sub_10001E914((uint64_t)v22, a5);
      LOBYTE(a2) = sub_1001482B0(v13, a2, (uint64_t)v24);
      uint64_t v14 = v23;
      if (v23 == v22)
      {
        uint64_t v15 = 4LL;
        uint64_t v14 = v22;
      }

      else
      {
        if (!v23) {
          goto LABEL_16;
        }
        uint64_t v15 = 5LL;
      }

      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
      uint64_t v19 = v25;
      if (v25 != v24) {
        goto LABEL_29;
      }
      uint64_t v20 = 4LL;
      uint64_t v19 = v24;
      goto LABEL_31;
    case 3:
      sub_10001E914((uint64_t)v36, a4);
      uint64_t v16 = sub_10001E914((uint64_t)v34, a5);
      LOBYTE(a2) = sub_100147F24(v16, a2, (uint64_t)v36);
      char v17 = v35;
      if (v35 == v34)
      {
        uint64_t v18 = 4LL;
        char v17 = v34;
      }

      else
      {
        if (!v35) {
          goto LABEL_20;
        }
        uint64_t v18 = 5LL;
      }

      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_20:
      uint64_t v19 = v37;
      if (v37 == v36)
      {
        uint64_t v20 = 4LL;
        uint64_t v19 = v36;
      }

      else
      {
LABEL_29:
        if (!v19) {
          return a2 & 1;
        }
        uint64_t v20 = 5LL;
      }

void sub_100147DA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char *a21, char a22, uint64_t a23, uint64_t a24, char *a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  char v30 = a21;
  if (a21 == &a18)
  {
    uint64_t v31 = 4LL;
    char v30 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*(void *)v30 + 8 * v31))();
LABEL_6:
  int v32 = a25;
  if (a25 == &a22)
  {
    uint64_t v33 = 4LL;
    int v32 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_11;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*(void *)v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100147F24(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 4;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_10001EEF0();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48LL))(v5, &v8);
  if (v17 && __p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }

  if (v13 && v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }

  return v6;
}

void sub_10014802C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100148040(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 1;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_10001EEF0();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48LL))(v5, &v8);
  if (v17 && __p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }

  if (v13 && v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }

  return v6;
}

void sub_10014814C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100148160(uint64_t a1, __int16 *a2, uint64_t a3)
{
  if (!*((_BYTE *)a2 + 624)) {
    sub_100006080();
  }
  __int128 v4 = *((_OWORD *)a2 + 37);
  __int128 v18 = *((_OWORD *)a2 + 36);
  __int128 v19 = v4;
  __int128 v20 = *((_OWORD *)a2 + 38);
  __int128 v5 = *((_OWORD *)a2 + 33);
  __int128 v14 = *((_OWORD *)a2 + 32);
  __int128 v15 = v5;
  __int128 v6 = *((_OWORD *)a2 + 35);
  __int128 v16 = *((_OWORD *)a2 + 34);
  __int128 v17 = v6;
  __int16 v7 = *a2;
  int v11 = 2;
  __int16 v12 = v7;
  memcpy(v13, a2 + 4, 0x1F8uLL);
  v13[504] = 1;
  char v21 = 1;
  char v22 = 0;
  char v25 = 0;
  char v26 = 0;
  char v29 = 0;
  __int16 v30 = 0;
  char v31 = 0;
  char v32 = 0;
  __int16 v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8) {
    sub_10001EEF0();
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 48LL))(v8, &v11);
  if (v29 && __p)
  {
    char v28 = __p;
    operator delete(__p);
  }

  if (v25 && v23)
  {
    char v24 = v23;
    operator delete(v23);
  }

  return v9;
}

void sub_10014829C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001482B0(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 3;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_10001EEF0();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48LL))(v5, &v8);
  if (v17 && __p)
  {
    __int128 v16 = __p;
    operator delete(__p);
  }

  if (v13 && v11)
  {
    __int16 v12 = v11;
    operator delete(v11);
  }

  return v6;
}

void sub_1001483B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001483CC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 2 && *(_BYTE *)(a2 + 56) == 0) {
    sub_10038F4D4();
  }
}

void *sub_1001483F4(void *a1)
{
  *a1 = off_1007B0840;
  sub_100012390((uint64_t)(a1 + 1));
  return a1;
}

void sub_100148424(void *a1)
{
  *a1 = off_1007B0840;
  sub_100012390((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_100148468@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B09B8[a1]);
}

void *sub_10014847C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0A10[a1]);
}

void *sub_100148490@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0A58[a1]);
}

void *sub_1001484A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0A78[a1]);
}

double sub_1001484B8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)a1 = off_1007B0988;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_1001484E0(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100148510(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

uint64_t sub_100148540(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_10038F4FC();
  }
  __int16 v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_1001485A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001485B8(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_10038F524();
  }
  __int16 v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10014861C(_Unwind_Exception *a1)
{
}

void sub_100148630(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 8)) {
    sub_10038F54C();
  }
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  sub_1001377E0((uint64_t)&v7, (uint64_t)(a2 + 2));
  __int128 v4 = *((_OWORD *)a2 + 6);
  __int128 v12 = *((_OWORD *)a2 + 5);
  __int128 v13 = v4;
  v14[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v14 + 13) = *(_OWORD *)((char *)a2 + 125);
  std::mutex::lock((std::mutex *)(a1 + 24));
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), &v5);
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (v11 && v10 && v9 < 0) {
    operator delete(__p);
  }
}

void sub_1001486E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, char a21)
{
  if (a21 && a19 && a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100148720(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 88)) {
    sub_10038F574();
  }
  __int128 v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 88);
  int v13 = *a2;
  sub_1001376C0(v14, (uint64_t)(a2 + 2));
  __int128 v6 = *(_OWORD *)(a2 + 186);
  __int128 v25 = *(_OWORD *)(a2 + 182);
  __int128 v26 = v6;
  __int128 v7 = *(_OWORD *)(a2 + 194);
  __int128 v27 = *(_OWORD *)(a2 + 190);
  __int128 v28 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 170);
  __int128 v21 = *(_OWORD *)(a2 + 166);
  __int128 v22 = v8;
  __int128 v9 = *(_OWORD *)(a2 + 178);
  __int128 v23 = *(_OWORD *)(a2 + 174);
  __int128 v24 = v9;
  __int128 v10 = *(_OWORD *)(a2 + 154);
  __int128 v17 = *(_OWORD *)(a2 + 150);
  __int128 v18 = v10;
  __int128 v11 = *(_OWORD *)(a2 + 162);
  __int128 v19 = *(_OWORD *)(a2 + 158);
  __int128 v20 = v11;
  __int128 v12 = *(_OWORD *)(a2 + 146);
  __int128 v15 = *(_OWORD *)(a2 + 142);
  __int128 v16 = v12;
  sub_100148920(v29, (uint64_t)(a2 + 198));
  memcpy(v30, a2 + 218, sizeof(v30));
  sub_100137714(v31, (__n128 *)(a2 + 302));
  memcpy(v35, a2 + 332, sizeof(v35));
  (*(void (**)(uint64_t, int *))(*(void *)v5 + 16LL))(v5, &v13);
  if (v34 && __p)
  {
    __int16 v33 = __p;
    operator delete(__p);
  }

  sub_100148A24((uint64_t)v29);
  sub_100124BFC((uint64_t)v14);
  std::mutex::unlock(v4);
}

void sub_10014888C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1001488D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1320))
  {
    uint64_t v2 = *(void **)(a1 + 1280);
    if (v2)
    {
      *(void *)(a1 + 1288) = v2;
      operator delete(v2);
    }
  }

  sub_100148A24(a1 + 792);
  sub_100124BFC(a1 + 8);
  return a1;
}

_BYTE *sub_100148920(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_100148974((uint64_t)a1, (__int128 *)a2);
    a1[72] = 1;
  }

  return a1;
}

void sub_100148960(_Unwind_Exception *a1)
{
}

uint64_t sub_100148974(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_1001306E8( (void *)(a1 + 24),  *((__int16 **)a2 + 3),  *((__int16 **)a2 + 4),  0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  sub_100130D1C( (void *)(a1 + 48),  *((void *)a2 + 6),  *((void *)a2 + 7),  (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
  return a1;
}

void sub_100148A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100148A24(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v3 = (void **)(a1 + 48);
    sub_100130C0C(&v3);
    uint64_t v3 = (void **)(a1 + 24);
    sub_100130C98(&v3);
  }

  return a1;
}

void *sub_100148A74@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0A98[a1]);
}

void *sub_100148A88@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0AF0[a1]);
}

void *sub_100148A9C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0B38[a1]);
}

void *sub_100148AB0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0B58[a1]);
}

void sub_100148AC4(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 5) = 0;
  __int128 v17 = (_BYTE *)(a1 + 5);
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 dictionaryRepresentation]);
  id v5 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v5)
  {
    int v7 = 1;
    uint64_t v8 = *(void *)v21;
    *(void *)&__int128 v6 = 136315394LL;
    __int128 v16 = v6;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v3);
        }
        __int128 v10 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v4);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
        {
          if ([v10 isEqualToString:@"CheckFPSNRsOkForSensorFusion"])
          {
            *(_BYTE *)(a1 + 4) = [v2 BOOLForKey:@"CheckFPSNRsOkForSensorFusion"];
          }

          else if ([v10 isEqualToString:@"CheckPDOA"])
          {
            *__int128 v17 = [v2 BOOLForKey:@"CheckPDOA"];
          }

          else if ([v10 isEqualToString:@"CheckFPSNRs"])
          {
            *(_BYTE *)(a1 + 6) = [v2 BOOLForKey:@"CheckFPSNRs"];
          }

          else if ([v10 isEqualToString:@"CheckFPIndices"])
          {
            *(_BYTE *)(a1 + 7) = [v2 BOOLForKey:@"CheckFPIndices"];
          }

          else if ([v10 isEqualToString:@"CheckAoaCirDataEvent"])
          {
            *(_BYTE *)(a1 + 8) = [v2 BOOLForKey:@"CheckAoaCirDataEvent"];
          }

          else if ([v10 isEqualToString:@"CheckToaCirDataEvent"])
          {
            *(_BYTE *)(a1 + 9) = [v2 BOOLForKey:@"CheckToaCirDataEvent"];
          }

          else if ([v10 isEqualToString:@"CheckTimestamps"])
          {
            *(_BYTE *)(a1 + 10) = [v2 BOOLForKey:@"CheckTimestamps"];
          }

          else if ([v10 isEqualToString:@"CheckRSSIs"])
          {
            *(_BYTE *)(a1 + 11) = [v2 BOOLForKey:@"CheckRSSIs"];
          }

          else if ([v10 isEqualToString:@"EnableAoaHypotheses"])
          {
            *(_BYTE *)a1 = [v2 BOOLForKey:@"EnableAoaHypotheses"];
          }

          if (objc_msgSend(v10, "isEqualToString:", @"MmsValStatus", v16))
          {
            int v12 = [v2 integerForKey:@"MmsValStatus"];
            switch(v12)
            {
              case 1:
                int v7 = 1;
                break;
              case 3:
                int v7 = 3;
                break;
              case 7:
                int v7 = 7;
                break;
              default:
LABEL_33:
                int v13 = (os_log_s *)(id)qword_1008000A0;
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  if (v7 == 1)
                  {
                    char v14 = "Nominal";
                  }

                  else if (v7 == 7)
                  {
                    char v14 = "Stricter";
                  }

                  else
                  {
                    char v14 = "Strict";
                  }

                  sub_1000065CC(__p, v14);
                  __int128 v15 = __p;
                  if (v19 < 0) {
                    __int128 v15 = (void **)__p[0];
                  }
                  *(_DWORD *)__int128 buf = v16;
                  __int128 v25 = v15;
                  __int16 v26 = 1024;
                  int v27 = v7;
                  _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Required min mmsValStatus = %s (%d)",  buf,  0x12u);
                  if (v19 < 0) {
                    operator delete(__p[0]);
                  }
                }

                continue;
            }

            *(_DWORD *)(a1 + 16) = v7;
            goto LABEL_33;
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }

    while (v5);
  }
}

void sub_100148ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100148F0C()
{
  if ((byte_1007F80A0 & 1) == 0)
  {
    unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"UwbRangeBiasOffsetMeters"]);

    if (v1)
    {
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      [v2 doubleForKey:@"UwbRangeBiasOffsetMeters"];
      qword_1007F8098 = v3;

      uint64_t v4 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 134217984;
        uint64_t v7 = qword_1007F8098;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "UwbRangeBiasOffsetMeters set to %.2f m",  (uint8_t *)&v6,  0xCu);
      }
    }

    byte_1007F80A0 = 1;
  }

  return *(double *)&qword_1007F8098;
}

void sub_100149030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_10014904C()
{
  if (byte_1007F80B0 == 1) {
    return *(double *)&qword_1007F80A8;
  }
  double result = sub_100148F0C() * 1.0e12 / 299792458.0;
  qword_1007F80A8 = *(void *)&result;
  byte_1007F80B0 = 1;
  return result;
}

uint64_t sub_1001490AC(uint64_t result, int a2, unsigned int a3, int a4)
{
  *(void *)(result + 12) = 0LL;
  *(void *)(result + 4) = 0LL;
  *(_DWORD *)double result = a2;
  if (a2 > 99)
  {
    if (a2 < 113) {
      goto LABEL_6;
    }
    if ((a2 - 113) < 9)
    {
      *(_WORD *)(result + 12) = 257;
      *(_WORD *)(result + 16) = 257;
      return result;
    }

    if (a2 == 200)
    {
LABEL_6:
      *(_WORD *)(result + 12) = 257;
      return result;
    }

    if (a2 == 201) {
      *(_DWORD *)(result + 12) = 16843266;
    }
  }

  else
  {
    switch(a2)
    {
      case 0:
        int v4 = 67371531;
        goto LABEL_44;
      case 1:
      case 2:
      case 3:
        goto LABEL_30;
      case 4:
      case 5:
      case 6:
        int v4 = 67371275;
        goto LABEL_44;
      case 7:
      case 8:
      case 9:
      case 10:
        if (a3 >= 2)
        {
          if (a3 == 2)
          {
LABEL_30:
            int v4 = 67373067;
LABEL_44:
            *(_DWORD *)(result + 12) = v4;
          }
        }

        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }

uint64_t sub_100149238(uint64_t a1, int a2, unsigned int a3, int a4)
{
  return sub_1001490AC(a1, a2, a3, a4);
}

uint64_t sub_100149240(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)result;
  if (*(int *)result <= 99)
  {
    if (((1 << v3) & 0x87FFFF) != 0)
    {
      if (a2)
      {
        char v6 = *(_BYTE *)(result + 15);
        *(_BYTE *)(result + 4) = v6;
        *(_BYTE *)(result + 5) = *(_BYTE *)(result + 14);
        *(_BYTE *)(result + 6) = v6;
        char v7 = *(_BYTE *)(result + 13);
        *(_BYTE *)(result + 7) = v7;
        char v8 = *(_BYTE *)(result + 12);
LABEL_9:
        *(_BYTE *)(result + 8) = v8;
        *(_BYTE *)(result + 11) = v7;
        goto LABEL_17;
      }

      BOOL v9 = a3 == 0;
      uint64_t v10 = 15LL;
      if (a3) {
        uint64_t v10 = 13LL;
      }
      uint64_t v11 = 14LL;
      uint64_t v12 = 12LL;
    }

    else
    {
      if (a2)
      {
        char v15 = *(_BYTE *)(result + 13);
        *(_BYTE *)(result + 4) = v15;
        *(_BYTE *)(result + 5) = *(_BYTE *)(result + 12);
        *(_BYTE *)(result + 6) = v15;
        char v7 = *(_BYTE *)(result + 15);
        *(_BYTE *)(result + 7) = v7;
        char v8 = *(_BYTE *)(result + 14);
        goto LABEL_9;
      }

      BOOL v9 = a3 == 0;
      uint64_t v10 = 13LL;
      if (a3) {
        uint64_t v10 = 15LL;
      }
      uint64_t v11 = 12LL;
      uint64_t v12 = 14LL;
    }

    if (!v9) {
      uint64_t v11 = v12;
    }
    char v5 = *(_BYTE *)(result + v11);
    char v4 = *(_BYTE *)(result + v10);
    *(_BYTE *)(result + 4) = v4;
    goto LABEL_16;
  }

  if (v3 <= 199)
  {
    if ((v3 - 100) < 0x16)
    {
LABEL_4:
      char v4 = *(_BYTE *)(result + 13);
      *(_BYTE *)(result + 4) = v4;
      char v5 = *(_BYTE *)(result + 12);
LABEL_16:
      *(_BYTE *)(result + 5) = v5;
      *(_BYTE *)(result + 6) = v4;
      *(_WORD *)(result + 7) = 0;
      *(_BYTE *)(result + 11) = 0;
    }

uint64_t sub_100149408(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F59C();
  }
  return result;
}

uint64_t sub_10014943C(unsigned __int8 *a1, char a2)
{
  int v3 = *(_DWORD *)a1;
  if (*(int *)a1 <= 199)
  {
    if ((v3 - 11) >= 0xD)
    {
      uint64_t result = sub_10014993C(a1);
      if (!(_DWORD)result) {
        return result;
      }
      if ((a2 & 1) == 0)
      {
        uint64_t result = sub_1001499FC(a1);
        if (!(_DWORD)result) {
          return result;
        }
      }
    }

    else
    {
      uint64_t result = sub_10014993C(a1);
      if (!(_DWORD)result) {
        return result;
      }
    }

    return sub_100149A64(a1);
  }

  if (v3 <= 996)
  {
    if (v3 != 200) {
      return v3 != 201 || (sub_10014993C(a1) & 1) != 0;
    }
LABEL_11:
    uint64_t result = sub_10014993C(a1);
    if (!(_DWORD)result) {
      return result;
    }
    return sub_100149B4C(a1);
  }

  if (v3 != 997 && v3 != 999) {
    return 1LL;
  }
  uint64_t result = sub_100149AE8(a1);
  if ((_DWORD)result)
  {
    uint64_t result = sub_100149B4C(a1);
    if ((_DWORD)result) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_10014953C(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F5C4();
  }
  return result;
}

uint64_t sub_100149570(unsigned __int8 *a1, int a2)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F5EC();
  }
  return result;
}

uint64_t sub_1001495A8(unsigned __int8 *a1, int a2)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F614();
  }
  return result;
}

uint64_t sub_1001495E0(unsigned __int8 *a1, int a2)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 <= 99)
  {
    int v4 = 1 << v2;
    if ((v4 & 0x87FFFE) != 0)
    {
      if (a2)
      {
        unsigned __int8 v5 = a1[15];
        a1[4] = v5;
        a1[5] = a1[14];
        a1[6] = v5;
        char v6 = a1[13];
LABEL_9:
        a1[7] = v6;
        unsigned __int8 v7 = a1[12];
LABEL_19:
        a1[8] = v7;
        a1[11] = v6;
        goto LABEL_20;
      }

      unsigned __int8 v3 = a1[13];
    }

    else
    {
      if ((v4 & 0x780000) == 0)
      {
        if (!a2)
        {
          a1[4] = 8;
          a1[5] = a1[12];
          *((_WORD *)a1 + 3) = 8;
          a1[8] = 0;
          goto LABEL_14;
        }

        unsigned __int8 v11 = a1[15];
        a1[4] = v11;
        a1[5] = a1[14];
        a1[6] = v11;
        char v6 = 8;
        goto LABEL_9;
      }

      if (a2)
      {
        unsigned __int8 v8 = a1[13];
        a1[4] = v8;
        a1[5] = a1[12];
        a1[6] = v8;
LABEL_18:
        char v6 = a1[15];
        a1[7] = v6;
        unsigned __int8 v7 = a1[14];
        goto LABEL_19;
      }

      unsigned __int8 v3 = a1[15];
    }

    a1[4] = v3;
    a1[5] = v3;
    goto LABEL_12;
  }

  if (v2 <= 199)
  {
    goto LABEL_4;
  }

  if (v2 > 996)
  {
    if (v2 == 997 || v2 == 999)
    {
      a1[11] = 0;
      *((_DWORD *)a1 + 1) = 0;
      a1[8] = 0;
    }
  }

  else
  {
    if (v2 == 200)
    {
LABEL_4:
      unsigned __int8 v3 = a1[13];
      a1[4] = v3;
      a1[5] = a1[12];
LABEL_12:
      a1[6] = v3;
LABEL_13:
      *(_WORD *)(a1 + 7) = 0;
LABEL_14:
      a1[11] = 0;
      goto LABEL_20;
    }

    if (v2 == 201)
    {
      unsigned __int8 v10 = a1[13];
      a1[4] = v10;
      a1[5] = a1[12];
      a1[6] = v10;
      if (!a2) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }

uint64_t sub_100149764(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 1);
  if ((result & 1) == 0) {
    sub_10038F664();
  }
  return result;
}

uint64_t sub_100149798(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F68C();
  }
  return result;
}

uint64_t sub_1001497CC(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F6B4();
  }
  return result;
}

uint64_t sub_100149800(unsigned __int8 *a1, int a2)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F6DC();
  }
  return result;
}

uint64_t sub_100149838(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F704();
  }
  return result;
}

uint64_t sub_100149870( unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7)
{
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  a1[11] = a7;
  uint64_t result = sub_10014943C(a1, 0);
  if ((result & 1) == 0) {
    sub_10038F72C();
  }
  return result;
}

uint64_t sub_1001498A8(int *a1)
{
  int v1 = *a1;
  __int16 v2 = -408;
  if (*a1 > 199)
  {
    return -420;
  }

  return v2;
}

uint64_t sub_1001498FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_100149904(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

uint64_t sub_10014990C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 6);
}

uint64_t sub_100149914(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7);
}

uint64_t sub_10014991C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100149924(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11);
}

uint64_t sub_10014992C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_100149934(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t sub_10014993C(unsigned __int8 *a1)
{
  int v2 = a1[4];
  if (v2 != a1[6] || (v2 & ~a1[5]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038F780();
    }
    int v3 = 0;
  }

  else
  {
    int v3 = 1;
  }

  int v4 = a1[7];
  if (v4 != a1[11] || (v4 & ~a1[8]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038F754();
    }
    int v5 = 0;
  }

  else
  {
    int v5 = 1;
  }

  return v3 & v5;
}

BOOL sub_1001499FC(_BYTE *a1)
{
  if (!a1[7] || a1[6] != 4 || a1[11] != 2) {
    return 1LL;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10038F7AC();
    return 0LL;
  }

  return result;
}

BOOL sub_100149A64(_BYTE *a1)
{
  if (!a1[7] || !a1[19] || (a1[4] & a1[18]) != 0 && (a1[5] & a1[18]) != 0 && (a1[6] & a1[18]) != 0) {
    return 1LL;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10038F7D8();
    return 0LL;
  }

  return result;
}

BOOL sub_100149AE8(_BYTE *a1)
{
  if (!a1[4] && !a1[5] && !a1[6]) {
    return 1LL;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10038F804();
    return 0LL;
  }

  return result;
}

BOOL sub_100149B4C(_BYTE *a1)
{
  if (!a1[7] && !a1[8] && !a1[11]) {
    return 1LL;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10038F804();
    return 0LL;
  }

  return result;
}

uint64_t sub_100149BB0(uint64_t a1, int a2)
{
  if (!a2) {
    return 4LL;
  }
  int v3 = *(_DWORD *)a1;
  uint64_t result = 4LL;
  if (v3 > 99)
  {
    if ((v3 - 100) < 0x16 || v3 == 200)
    {
      else {
        return 2LL;
      }
    }

    else if (v3 == 201)
    {
      int v7 = *(unsigned __int8 *)(a1 + 14) | *(unsigned __int8 *)(a1 + 12);
      if ((v7 & a2) != 0) {
        unsigned int v8 = 2;
      }
      else {
        unsigned int v8 = 4;
      }
      if ((a2 & ~v7) != 0) {
        return 4LL;
      }
      else {
        return v8;
      }
    }
  }

  else if (v3 < 0x18)
  {
    int v5 = *(unsigned __int8 *)(a1 + 12);
    int v6 = *(unsigned __int8 *)(a1 + 14);
    if ((a2 & ~(v6 | v5)) == 0)
    {
      if ((a2 & ~v5) != 0 || (v5 & a2) == 0)
      {
        if ((a2 & ~v6) != 0 || (v6 & a2) == 0)
        {
          if (((v6 | v5) & a2) != 0) {
            return 3LL;
          }
          else {
            return 4LL;
          }
        }

        else
        {
          return 0LL;
        }
      }

      else
      {
        return 1LL;
      }
    }
  }

  return result;
}

void *sub_100149C90@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0DD8[a1]);
}

void *sub_100149CA4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0E30[a1]);
}

void *sub_100149CB8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0E78[a1]);
}

void *sub_100149CCC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0E98[a1]);
}

double sub_100149CE0(uint64_t a1)
{
  *(void *)a1 = off_1007B0B88;
  *(void *)(a1 + 8) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_WORD *)(a1 + 112) = 1;
  return result;
}

void *sub_100149D1C(void *a1)
{
  *a1 = off_1007B0B88;
  int v2 = (std::mutex *)(a1 + 1);
  sub_100021DA8((uint64_t)(a1 + 9));
  std::mutex::~mutex(v2);
  return a1;
}

void sub_100149D5C(void *a1)
{
  *a1 = off_1007B0B88;
  int v2 = (std::mutex *)(a1 + 1);
  sub_100021DA8((uint64_t)(a1 + 9));
  std::mutex::~mutex(v2);
  operator delete(a1);
}

void sub_100149D9C(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v8 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_100132210((void *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 3, 0x288uLL);
    char v7 = 1;
  }

  else
  {
    char v7 = 0;
    *a3 = 0;
  }

  a3[648] = v7;
  std::mutex::unlock(v5);
}

void sub_100149E18(_Unwind_Exception *a1)
{
}

void sub_100149E2C(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v8 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_100132210((void *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 4, 0x278uLL);
    char v7 = 1;
  }

  else
  {
    char v7 = 0;
    *a3 = 0;
  }

  a3[632] = v7;
  std::mutex::unlock(v5);
}

void sub_100149EA8(_Unwind_Exception *a1)
{
}

BOOL sub_100149EBC(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int16 v9 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_100132210((void *)(a1 + 72), &v9);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      sub_10001EEF0();
    }
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v7 + 48LL))(v7, v6 + 3);
  }

  std::mutex::unlock(v5);
  return v6 != 0LL;
}

void sub_100149F44(_Unwind_Exception *a1)
{
}

void sub_100149F58(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (uint64_t i = (void *)(a1 + 88); ; (*(void (**)(uint64_t, void *))(*(void *)v6 + 48LL))(v6, i + 3))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_10001EEF0();
    }
  }

  std::mutex::unlock(v4);
}

void sub_100149FC0(_Unwind_Exception *a1)
{
}

void sub_100149FD8(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v7 = *(unsigned __int16 *)(a1 + 112);
  *(_WORD *)(a1 + 112) = v7 + 1;
  unsigned __int16 v9 = v7;
  if (((v7 + 1) & 0x10000) != 0) {
    *(_WORD *)(a1 + 112) = 1;
  }
  unsigned __int16 v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Generated ticket_id for request. ID: %d",  buf,  8u);
  }

  memcpy(&__src[6], a2, 0x1F8uLL);
  *(_DWORD *)__int128 buf = 0;
  __int16 v12 = v7;
  memcpy(v13, __src, 0x1FEuLL);
  v13[510] = 0;
  v13[622] = 0;
  v13[630] = 0;
  sub_10014AB0C(a1 + 72, &v9, &v9, buf);
  *(_WORD *)a3 = v7;
  memcpy((void *)(a3 + 2), __src, 0x1FEuLL);
  *(_BYTE *)(a3 + 512) = 0;
  *(_BYTE *)(a3 + 624) = 0;
  *(_BYTE *)(a3 + 632) = 1;
  std::mutex::unlock(v6);
}

void sub_10014A13C(_Unwind_Exception *a1)
{
}

BOOL sub_10014A150(uint64_t a1, int a2)
{
  unsigned __int16 v16 = a2;
  int v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deleteServiceRequest for ticket id %d", buf, 8u);
  }

  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = (void *)(a1 + 72);
  int v7 = (uint64_t *)sub_100132210((void *)(a1 + 72), &v16);
  if (v7)
  {
    sub_1000217D4(v6, v7);
  }

  else
  {
    unsigned __int16 v8 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038F830((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  std::mutex::unlock(v5);
  return v7 != 0LL;
}

void sub_10014A268(_Unwind_Exception *a1)
{
}

BOOL sub_10014A284(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v19 = a2;
  uint64_t v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v21 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "updateServiceRequestState for ticket id %d",  buf,  8u);
  }

  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unsigned __int16 v8 = sub_100132210((void *)(a1 + 72), &v19);
  uint64_t v9 = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == a3)
    {
      uint64_t v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Asked to update service request to same as current state",  buf,  2u);
      }
    }

    else
    {
      *((_DWORD *)v8 + 6) = a3;
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038F898((uint64_t)&v19, v11, v12, v13, v14, v15, v16, v17);
    }
  }

  std::mutex::unlock(v7);
  return v9 != 0LL;
}

void sub_10014A3E8(_Unwind_Exception *a1)
{
}

BOOL sub_10014A404(uint64_t a1, int a2)
{
  unsigned __int16 v16 = a2;
  int v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "recordPowerLogSubmission for ticket id %d",  buf,  8u);
  }

  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = sub_100132210((void *)(a1 + 72), &v16);
  int v7 = v6;
  if (v6)
  {
    *((_BYTE *)v6 + 664) = 1;
  }

  else
  {
    unsigned __int16 v8 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10038F898((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  std::mutex::unlock(v5);
  return v7 != 0LL;
}

void sub_10014A514(_Unwind_Exception *a1)
{
}

uint64_t sub_10014A530(uint64_t a1)
{
  v5[0] = &off_1007B0BD8;
  uint64_t v6 = v5;
  uint64_t v1 = sub_10014A604(a1, (uint64_t)v5);
  int v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    int v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10014A5CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014A604(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v5 = *(void **)(a1 + 88);
  if (v5)
  {
    LODWORD(v6) = 0;
    do
    {
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        sub_10001EEF0();
      }
      uint64_t v6 = v6 + (*(unsigned int (**)(uint64_t, void *))(*(void *)v7 + 48LL))(v7, v5 + 3);
      int v5 = (void *)*v5;
    }

    while (v5);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  std::mutex::unlock(v4);
  return v6;
}

void sub_10014A684(_Unwind_Exception *a1)
{
}

uint64_t sub_10014A69C(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveSensorFusionRequests called", v7, 2u);
  }

  v8[0] = &off_1007B0C68;
  uint64_t v9 = v8;
  uint64_t v3 = sub_10014A604(a1, (uint64_t)v8);
  int v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    int v4 = v8;
    goto LABEL_7;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return v3;
}

void sub_10014A784( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014A7BC(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveWantsMotionRequests called", v7, 2u);
  }

  v8[0] = &off_1007B0CE8;
  uint64_t v9 = v8;
  uint64_t v3 = sub_10014A604(a1, (uint64_t)v8);
  int v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    int v4 = v8;
    goto LABEL_7;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return v3;
}

void sub_10014A8A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014A8DC(uint64_t a1)
{
  v5[0] = &off_1007B0D68;
  uint64_t v6 = v5;
  uint64_t v1 = sub_10014A604(a1, (uint64_t)v5);
  int v2 = v6;
  if (v6 == v5)
  {
    uint64_t v3 = 4LL;
    int v2 = v5;
    goto LABEL_5;
  }

  if (v6)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return v1;
}

void sub_10014A978( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014A9B0(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_10014A9B8(unint64_t a1)
{
  int v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (uint64_t i = *(uint64_t **)(a1 + 88); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 6) == 1)
    {
      switch(*((_DWORD *)i + 11))
      {
        case 1:
          if (*((_BYTE *)i + 41)) {
            __int16 v5 = 2;
          }
          else {
            __int16 v5 = 1;
          }
          if (*((_BYTE *)i + 41)) {
            __int16 v4 = 2;
          }
          else {
            __int16 v4 = 20;
          }
          break;
        case 2:
        case 4:
        case 5:
          __int16 v4 = 3;
          goto LABEL_14;
        case 3:
          __int16 v4 = 9;
          __int16 v5 = 2;
          break;
        case 6:
          __int16 v4 = 12;
LABEL_14:
          __int16 v5 = 1;
          break;
        case 7:
          if (*((_BYTE *)i + 41)) {
            __int16 v5 = 2;
          }
          else {
            __int16 v5 = 1;
          }
          goto LABEL_21;
        case 8:
          if (*((_BYTE *)i + 41)) {
            __int16 v5 = 1;
          }
          else {
            __int16 v5 = 2;
          }
LABEL_21:
          __int16 v4 = 16;
          break;
        default:
          __int16 v4 = 0;
          __int16 v5 = 4;
          break;
      }

      a1 = a1 & 0xFFFFFFFF00000000LL | *((unsigned int *)i + 122);
      sub_10012B190(v8, 1, v4, 1, v5, a1);
    }
  }

  uint64_t v6 = sub_10012B200((uint64_t)v8);
  std::mutex::unlock(v2);
  return v6;
}

void sub_10014AAF4(_Unwind_Exception *a1)
{
}

void *sub_10014AB0C(uint64_t a1, unsigned __int16 *a2, _WORD *a3, const void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v12 = operator new(0x2A0uLL);
  *uint64_t v12 = 0LL;
  v12[1] = v8;
  *((_WORD *)v12 + 8) = *a3;
  memcpy(v12 + 3, a4, 0x288uLL);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v12 = *v21;
LABEL_38:
    *int v21 = v12;
    goto LABEL_39;
  }

  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_10014AD30(_Unwind_Exception *a1)
{
}

void *sub_10014AD4C()
{
  double result = operator new(0x10uLL);
  *double result = &off_1007B0BD8;
  return result;
}

void sub_10014AD70(uint64_t a1, void *a2)
{
  *a2 = &off_1007B0BD8;
}

BOOL sub_10014AD88(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

uint64_t sub_10014AD98(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10014ADD4()
{
}

void *sub_10014ADE8()
{
  double result = operator new(0x10uLL);
  *double result = &off_1007B0C68;
  return result;
}

void sub_10014AE0C(uint64_t a1, void *a2)
{
  *a2 = &off_1007B0C68;
}

BOOL sub_10014AE24(uint64_t a1, int *a2)
{
  BOOL v3 = sub_10013F8A4(a2[18]);
  int v4 = *a2;
  __int16 v5 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int16 *)a2 + 4);
    uint64_t v7 = "false";
    if (v4 == 1) {
      unint64_t v8 = "true";
    }
    else {
      unint64_t v8 = "false";
    }
    v10[0] = 67109634;
    v10[1] = v6;
    __int16 v11 = 2080;
    if (v3) {
      uint64_t v7 = "true";
    }
    uint64_t v12 = v8;
    __int16 v13 = 2080;
    float v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Ticket ID %d active: %s, wants sensor fusion: %s",  (uint8_t *)v10,  0x1Cu);
  }

  return v4 == 1 && v3;
}

uint64_t sub_10014AF1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10014AF58()
{
}

void *sub_10014AF6C()
{
  double result = operator new(0x10uLL);
  *double result = &off_1007B0CE8;
  return result;
}

void sub_10014AF90(uint64_t a1, void *a2)
{
  *a2 = &off_1007B0CE8;
}

BOOL sub_10014AFA8(uint64_t a1, int *a2)
{
  int v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 68);
  __int16 v5 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int16 *)a2 + 4);
    uint64_t v7 = "false";
    if (v3 == 1) {
      unint64_t v8 = "true";
    }
    else {
      unint64_t v8 = "false";
    }
    v11[0] = 67109634;
    v11[1] = v6;
    __int16 v12 = 2080;
    if (v4) {
      uint64_t v7 = "true";
    }
    __int16 v13 = v8;
    __int16 v14 = 2080;
    float v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Ticket ID %d active: %s, wants motion: %s",  (uint8_t *)v11,  0x1Cu);
  }

  return v3 == 1 && v4 != 0;
}

uint64_t sub_10014B09C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10014B0D8()
{
}

void *sub_10014B0EC()
{
  double result = operator new(0x10uLL);
  *double result = &off_1007B0D68;
  return result;
}

void sub_10014B110(uint64_t a1, void *a2)
{
  *a2 = &off_1007B0D68;
}

BOOL sub_10014B128(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_10014B138(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10014B174()
{
}

void *sub_10014B180@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0EF8[a1]);
}

void *sub_10014B194@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0F50[a1]);
}

void *sub_10014B1A8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0F98[a1]);
}

void *sub_10014B1BC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B0FB8[a1]);
}

double sub_10014B1D0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_1007B0EC8;
  *(void *)(a1 + 8) = 0LL;
  return result;
}

uint64_t sub_10014B1FC(uint64_t a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10014B22C(char *a1)
{
  *(void *)a1 = off_1007AE980;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  operator delete(a1);
}

uint64_t sub_10014B25C()
{
  return 0LL;
}

uint64_t sub_10014B264(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B2A0(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B2DC(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B318(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B354(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B390(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

uint64_t sub_10014B3CC(uint64_t a1)
{
  *(void *)a1 = off_1007B11B8;
  return a1;
}

BOOL sub_10014B408(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

double sub_10014B41C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3 == *a2) {
    return 0.0;
  }
  for (uint64_t i = v2 + 24; i != v3; i += 24LL)
  {
  }

  return *(double *)(v2 + 8);
}

double sub_10014B45C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v9 = 0LL;
  uint8x8_t v10 = 0LL;
  uint64_t v11 = 0LL;
  sub_10014C4C4(&v9, v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v2) >> 3));
  if (v10 == v9)
  {
    double v7 = 0.0;
    if (!v9) {
      return v7;
    }
LABEL_9:
    uint8x8_t v10 = v9;
    operator delete(v9);
    return v7;
  }

  double v5 = 0.0;
  int v6 = v9;
  do
  {
    double v5 = v5 + v6[1];
    v6 += 3;
  }

  while (v6 != v10);
  double v7 = v5 / (double)(0xAAAAAAAAAAAAAAABLL * (v10 - v9));
  if (v9) {
    goto LABEL_9;
  }
  return v7;
}

double sub_10014B50C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (__int128 *)a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a2) >> 3);
  unint64_t v6 = v5 >> 1;
  unint64_t v8 = sub_10014B408;
  sub_10014C53C(v4, v3, (uint64_t (**)(__int128 *, __int128 *))&v8, 126 - 2 * __clz(v5), 1);
  double result = *(double *)(*a2 + 24 * v6 + 8);
  return result;
}

double sub_10014B5B4(uint64_t a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    return -200.0;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  __int128 __p = 0LL;
  int v27 = 0LL;
  __int128 v28 = 0LL;
  double v5 = -200.0;
  do
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6 == *a2) {
      goto LABEL_34;
    }
    int v8 = dword_1004239FC[v4];
    do
    {
      if (*(_DWORD *)(v7 + 16) == v8)
      {
        if (v3 >= v28)
        {
          uint8x8_t v10 = (char *)__p;
          uint64_t v11 = (v3 - (_BYTE *)__p) >> 3;
          unint64_t v12 = v11 + 1;
          uint64_t v13 = v28 - (_BYTE *)__p;
          if ((v28 - (_BYTE *)__p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            float v15 = (char *)sub_1000472C0((uint64_t)&v28, v14);
            uint8x8_t v10 = (char *)__p;
            uint64_t v3 = v27;
          }

          else
          {
            float v15 = 0LL;
          }

          BOOL v16 = &v15[8 * v11];
          *(void *)BOOL v16 = *(void *)(v7 + 8);
          unint64_t v9 = v16 + 8;
          while (v3 != v10)
          {
            uint64_t v17 = *((void *)v3 - 1);
            v3 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }

          __int128 __p = v16;
          int v27 = v9;
          __int128 v28 = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }

        else
        {
          *(void *)uint64_t v3 = *(void *)(v7 + 8);
          unint64_t v9 = v3 + 8;
        }

        int v27 = v9;
        uint64_t v6 = a2[1];
        uint64_t v3 = v9;
      }

      v7 += 24LL;
    }

    while (v7 != v6);
    if (v3 == __p)
    {
      uint64_t v3 = (char *)__p;
      goto LABEL_34;
    }

    __int128 v23 = 0LL;
    __int128 v24 = 0LL;
    uint64_t v25 = 0LL;
    sub_10011B560(&v23, __p, (uint64_t)v3, (v3 - (_BYTE *)__p) >> 3);
    if (v24 == v23)
    {
      double v21 = 0.0;
      if (!v23) {
        goto LABEL_30;
      }
    }

    else
    {
      double v18 = 0.0;
      size_t v19 = v23;
      do
      {
        double v20 = *v19++;
        double v18 = v18 + v20;
      }

      while (v19 != v24);
      double v21 = v18 / (double)(unint64_t)(v24 - v23);
      if (!v23) {
        goto LABEL_30;
      }
    }

    __int128 v24 = v23;
    operator delete(v23);
LABEL_30:
    if (v21 > v5) {
      double v5 = v21;
    }
    uint64_t v3 = (char *)__p;
LABEL_34:
    int v27 = v3;
    ++v4;
  }

  while (v4 != 3);
  if (v3) {
    operator delete(v3);
  }
  return v5;
}

void sub_10014B7C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10014B7EC(uint64_t a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    return -200.0;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  __int128 __p = 0LL;
  char v47 = 0LL;
  char v48 = 0LL;
  __int128 v43 = 0LL;
  uint64_t v44 = 0LL;
  char v45 = 0LL;
  do
  {
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2) {
      goto LABEL_50;
    }
    int v7 = dword_1004239FC[v4];
    do
    {
      if (*(_DWORD *)(v6 + 16) == v7)
      {
        if (v3 >= v48)
        {
          unint64_t v9 = (char *)__p;
          uint64_t v10 = (v3 - (_BYTE *)__p) >> 3;
          unint64_t v11 = v10 + 1;
          uint64_t v12 = v48 - (_BYTE *)__p;
          if ((v48 - (_BYTE *)__p) >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            unint64_t v14 = (char *)sub_1000472C0((uint64_t)&v48, v13);
            unint64_t v9 = (char *)__p;
            uint64_t v3 = v47;
          }

          else
          {
            unint64_t v14 = 0LL;
          }

          float v15 = &v14[8 * v10];
          *(void *)float v15 = *(void *)(v6 + 8);
          int v8 = v15 + 8;
          while (v3 != v9)
          {
            uint64_t v16 = *((void *)v3 - 1);
            v3 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }

          __int128 __p = v15;
          char v47 = v8;
          char v48 = &v14[8 * v13];
          if (v9) {
            operator delete(v9);
          }
        }

        else
        {
          *(void *)uint64_t v3 = *(void *)(v6 + 8);
          int v8 = v3 + 8;
        }

        char v47 = v8;
        uint64_t v5 = a2[1];
        uint64_t v3 = v8;
      }

      v6 += 24LL;
    }

    while (v6 != v5);
    if (v3 == __p)
    {
      uint64_t v3 = (char *)__p;
      goto LABEL_50;
    }

    char v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    sub_10011B560(&v40, __p, (uint64_t)v3, (v3 - (_BYTE *)__p) >> 3);
    if (v41 == v40)
    {
      double v20 = 0.0;
      if (!v40) {
        goto LABEL_30;
      }
    }

    else
    {
      double v17 = 0.0;
      double v18 = v40;
      do
      {
        double v19 = *v18++;
        double v17 = v17 + v19;
      }

      while (v18 != v41);
      double v20 = v17 / (double)(unint64_t)(v41 - v40);
      if (!v40) {
        goto LABEL_30;
      }
    }

    uint64_t v41 = v40;
    operator delete(v40);
LABEL_30:
    double v21 = v44;
    if (v44 >= v45)
    {
      __int128 v23 = (double *)v43;
      uint64_t v24 = ((char *)v44 - (_BYTE *)v43) >> 3;
      unint64_t v25 = v24 + 1;
      uint64_t v26 = (char *)v45 - (_BYTE *)v43;
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        __int128 v28 = (char *)sub_1000472C0((uint64_t)&v45, v27);
        __int128 v23 = (double *)v43;
        double v21 = v44;
      }

      else
      {
        __int128 v28 = 0LL;
      }

      char v29 = (double *)&v28[8 * v24];
      *char v29 = v20;
      unint64_t v22 = v29 + 1;
      while (v21 != v23)
      {
        uint64_t v30 = *((void *)v21-- - 1);
        *((void *)v29-- - 1) = v30;
      }

      __int128 v43 = v29;
      uint64_t v44 = v22;
      char v45 = (double *)&v28[8 * v27];
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      double *v44 = v20;
      unint64_t v22 = v21 + 1;
    }

    uint64_t v44 = v22;
    uint64_t v3 = (char *)__p;
LABEL_50:
    char v47 = v3;
    ++v4;
  }

  while (v4 != 3);
  uint64_t v31 = ((char *)v44 - (_BYTE *)v43) >> 3;
  switch(v31)
  {
    case 1LL:
      double v33 = *(double *)v43;
      goto LABEL_75;
    case 2LL:
      double v33 = (*(double *)v43 + *((double *)v43 + 1)) * 0.5;
      goto LABEL_75;
    case 3LL:
      double v33 = *(double *)v43;
      double v32 = *((double *)v43 + 1);
      double v34 = *((double *)v43 + 2);
      if ((*(double *)v43 < v32 || v33 > v34) && (v33 > v32 || v33 < v34))
      {
        BOOL v37 = v33 > v32;
        BOOL v38 = v33 < v32;
        if (v32 > v34) {
          BOOL v37 = 1;
        }
        if (v32 < v34) {
          BOOL v38 = 1;
        }
        if (v37 && v38) {
          double v33 = *((double *)v43 + 2);
        }
        else {
          double v33 = *((double *)v43 + 1);
        }
      }

void sub_10014BB44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_10014BB7C(uint64_t a1, __int128 **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)*a2) >> 3);
  if (v4 <= 2LL * *(int *)(a1 + 32))
  {
    if (v2 == v3) {
      return 0.0;
    }
    uint64_t v16 = 0LL;
    double v17 = 0LL;
    uint64_t v18 = 0LL;
    sub_10014C4C4(&v16, v3, (uint64_t)v2, v4);
    if (v17 == v16)
    {
      double v14 = 0.0;
      if (!v16) {
        return v14;
      }
    }

    else
    {
      double v12 = 0.0;
      unint64_t v13 = v16;
      do
      {
        double v12 = v12 + v13[1];
        v13 += 3;
      }

      while (v13 != v17);
      double v14 = v12 / (double)(0xAAAAAAAAAAAAAAABLL * (v17 - v16));
      if (!v16) {
        return v14;
      }
    }

    double v17 = v16;
    operator delete(v16);
    return v14;
  }

  double v19 = sub_10014B408;
  unint64_t v7 = 126 - 2 * __clz(v4);
  if (v2 == v3) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_10014C53C((uint64_t)v3, v2, (uint64_t (**)(__int128 *, __int128 *))&v19, v8, 1);
  uint64_t v9 = *(int *)(a1 + 32);
  uint64_t v10 = (double *)v3 + 3 * (int)v9;
  double v11 = 0.0;
  while (v10 != (double *)((char *)v2 - 24 * v9))
  {
    double v11 = v11 + v10[1];
    v10 += 3;
  }

  return v11 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) - 2 * v9);
}

double sub_10014BCE8(uint64_t a1, uint64_t *a2)
{
  __int128 __p = 0LL;
  unint64_t v27 = 0LL;
  __int128 v28 = 0LL;
  uint64_t v2 = *a2;
  if (a2[1] == *a2) {
    return 0.0;
  }
  unint64_t v4 = 0LL;
  do
  {
    double v5 = __exp10(*(double *)(v2 + 24 * v4 + 8) / 10.0);
    double v6 = v5;
    unint64_t v7 = v27;
    if (v27 >= v28)
    {
      uint64_t v9 = (double *)__p;
      uint64_t v10 = ((char *)v27 - (_BYTE *)__p) >> 3;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (char *)v28 - (_BYTE *)__p;
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        double v14 = (char *)sub_1000472C0((uint64_t)&v28, v13);
        uint64_t v9 = (double *)__p;
        unint64_t v7 = v27;
      }

      else
      {
        double v14 = 0LL;
      }

      float v15 = (double *)&v14[8 * v10];
      *float v15 = v6;
      uint64_t v8 = (uint64_t)(v15 + 1);
      while (v7 != v9)
      {
        uint64_t v16 = *((void *)v7-- - 1);
        *((void *)v15-- - 1) = v16;
      }

      __int128 __p = v15;
      unint64_t v27 = (double *)v8;
      __int128 v28 = (double *)&v14[8 * v13];
      if (v9) {
        operator delete(v9);
      }
    }

    else
    {
      *unint64_t v27 = v5;
      uint64_t v8 = (uint64_t)(v7 + 1);
    }

    unint64_t v27 = (double *)v8;
    ++v4;
    uint64_t v2 = *a2;
  }

  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v4);
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  __int128 v23 = 0LL;
  sub_10011B560(&v23, __p, v8, (v8 - (uint64_t)__p) >> 3);
  if (v24 == v23)
  {
    double v20 = 0.0;
    if (v23)
    {
LABEL_24:
      uint64_t v24 = v23;
      operator delete(v23);
    }
  }

  else
  {
    double v17 = 0.0;
    uint64_t v18 = v23;
    do
    {
      double v19 = *v18++;
      double v17 = v17 + v19;
    }

    while (v18 != v24);
    double v20 = v17 / (double)(unint64_t)(v24 - v23) * 0.797884561;
    if (v23) {
      goto LABEL_24;
    }
  }

  double v21 = log10(v20) * 10.0;
  if (__p)
  {
    unint64_t v27 = (double *)__p;
    operator delete(__p);
  }

  return v21;
}

void sub_10014BEDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014BF00(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014BF3C(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014BF78(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014BFB4(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014BFF0(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014C02C(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void sub_10014C068(void **__p)
{
  void *__p = off_1007B11B8;
  operator delete(__p);
}

void *sub_10014C0A4(void *a1)
{
  *a1 = &off_1007B0FE8;
  return a1;
}

void sub_10014C104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014C120(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = off_1007B11B8;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_10014C168(_Unwind_Exception *exception_object)
{
}

void *sub_10014C184(void *a1)
{
  *a1 = &off_1007B1038;
  return a1;
}

void sub_10014C1E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014C200(void *a1)
{
  *a1 = &off_1007B1078;
  return a1;
}

void sub_10014C260( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014C27C(void *a1)
{
  *a1 = &off_1007B10B8;
  return a1;
}

void sub_10014C2DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014C2F8(void *a1)
{
  *a1 = &off_1007B10F8;
  return a1;
}

void sub_10014C358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014C374(uint64_t a1, int __val)
{
  unint64_t v4 = std::string::insert(&v7, 0LL, "OLYMPIC_FILTER");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_10014C120(a1, &__p);
  *(void *)a1 = &off_1007B1138;
  *(_DWORD *)(a1 + 32) = __val;
  return a1;
}

void sub_10014C414( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014C448(void *a1)
{
  *a1 = &off_1007B1178;
  return a1;
}

void sub_10014C4A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10014C4C4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    double result = sub_10001E0CC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10014C520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10014C53C( uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = (__int128 *)((char *)a2 - 24);
  uint64_t v10 = (__int128 *)a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    uint64_t v12 = v11;
    uint64_t v13 = (char *)a2 - (char *)v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        uint64_t v30 = *a3;
        uint64_t v31 = *((void *)a2 - 1);
        __int128 v41 = *(__int128 *)((char *)a2 - 24);
        uint64_t v42 = v31;
        uint64_t v32 = *((void *)v10 + 2);
        __int128 v39 = *v10;
        uint64_t v40 = v32;
        if (v30(&v41, &v39))
        {
          __int128 v33 = *v10;
          uint64_t v44 = *((void *)v10 + 2);
          __int128 v43 = v33;
          __int128 v34 = *v9;
          *((void *)v10 + 2) = *((void *)a2 - 1);
          __int128 *v10 = v34;
          *uint64_t v9 = v43;
          *((void *)a2 - 1) = v44;
        }

        return;
      case 3uLL:
        sub_10014CAB4(v10, (__int128 *)((char *)v10 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        sub_10014D334((uint64_t)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 5uLL:
        sub_10014D47C( (uint64_t)v10,  (uint64_t)v10 + 24,  (uint64_t)(v10 + 3),  (uint64_t)v10 + 72,  (__int128 *)((char *)a2 - 24),  a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0) {
            sub_10014C88C((uint64_t)v10, (uint64_t)a2, a3);
          }
          else {
            sub_10014C9B4((uint64_t)v10, (uint64_t)a2, a3);
          }
          return;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = (__int128 *)((char *)v10 + 24 * (v14 >> 1));
          if ((unint64_t)v13 < 0xC01)
          {
            sub_10014CAB4((__int128 *)((char *)v10 + 24 * v15), v10, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            sub_10014CAB4(v10, (__int128 *)((char *)v10 + 24 * v15), (__int128 *)((char *)a2 - 24), a3);
            uint64_t v17 = 3 * v15;
            uint64_t v18 = (__int128 *)((char *)v10 + 24 * v15 - 24);
            sub_10014CAB4((__int128 *)((char *)v10 + 24), v18, a2 - 3, a3);
            double v19 = v10 + 3;
            double v20 = (__int128 *)((char *)v10 + 8 * v17 + 24);
            sub_10014CAB4(v19, v20, (__int128 *)((char *)a2 - 72), a3);
            sub_10014CAB4(v18, v16, v20, a3);
            __int128 v21 = *(_OWORD *)a1;
            uint64_t v44 = *(void *)(a1 + 16);
            __int128 v43 = v21;
            __int128 v22 = *v16;
            *(void *)(a1 + 16) = *((void *)v16 + 2);
            *(_OWORD *)a1 = v22;
            __int128 v23 = v43;
            *((void *)v16 + 2) = v44;
            __int128 *v16 = v23;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          uint64_t v24 = *a3;
          uint64_t v25 = *(void *)(a1 - 8);
          __int128 v37 = *(_OWORD *)(a1 - 24);
          uint64_t v38 = v25;
          uint64_t v26 = *(void *)(a1 + 16);
          __int128 v35 = *(_OWORD *)a1;
          uint64_t v36 = v26;
          if ((v24(&v37, &v35) & 1) == 0)
          {
            uint64_t v10 = sub_10014CCA8((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }

uint64_t sub_10014C88C(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  if (result != a2)
  {
    uint64_t v28 = v3;
    uint64_t v29 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t v12 = *a3;
        __int128 v26 = *(_OWORD *)v10;
        uint64_t v27 = *(void *)(v10 + 16);
        uint64_t v13 = *(void *)(v11 + 16);
        __int128 v24 = *(_OWORD *)v11;
        uint64_t v25 = v13;
        double result = v12(&v26, &v24);
        if ((_DWORD)result)
        {
          __int128 v22 = *(_OWORD *)v10;
          uint64_t v23 = *(void *)(v10 + 16);
          uint64_t v14 = v9;
          while (1)
          {
            uint64_t v15 = v6 + v14;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + v14);
            *(void *)(v15 + 40) = *(void *)(v6 + v14 + 16);
            if (!v14) {
              break;
            }
            uint64_t v16 = *a3;
            __int128 v20 = v22;
            uint64_t v21 = v23;
            __int128 v18 = *(_OWORD *)(v15 - 24);
            uint64_t v19 = *(void *)(v15 - 8);
            double result = v16(&v20, &v18);
            v14 -= 24LL;
            if ((result & 1) == 0)
            {
              uint64_t v17 = v6 + v14 + 24;
              goto LABEL_10;
            }
          }

          uint64_t v17 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v17 = v22;
          *(void *)(v17 + 16) = v23;
        }

        uint64_t v7 = v10 + 24;
        v9 += 24LL;
      }

      while (v10 + 24 != a2);
    }
  }

  return result;
}

uint64_t sub_10014C9B4(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  if (result != a2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    uint64_t v6 = result;
    for (uint64_t i = result + 24; v6 + 24 != a2; uint64_t i = v6 + 24)
    {
      uint64_t v9 = v6;
      uint64_t v6 = i;
      uint64_t v10 = *a3;
      __int128 v23 = *(_OWORD *)v6;
      uint64_t v24 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v9 + 16);
      __int128 v21 = *(_OWORD *)v9;
      uint64_t v22 = v11;
      double result = v10(&v23, &v21);
      if ((_DWORD)result)
      {
        __int128 v19 = *(_OWORD *)v6;
        uint64_t v20 = *(void *)(v6 + 16);
        uint64_t v12 = v6;
        do
        {
          uint64_t v13 = v12 - 24;
          *(_OWORD *)uint64_t v12 = *(_OWORD *)(v12 - 24);
          *(void *)(v12 + 16) = *(void *)(v12 - 8);
          uint64_t v14 = *a3;
          __int128 v17 = v19;
          uint64_t v18 = v20;
          __int128 v15 = *(_OWORD *)(v12 - 48);
          uint64_t v16 = *(void *)(v12 - 32);
          double result = v14(&v17, &v15);
          uint64_t v12 = v13;
        }

        while ((result & 1) != 0);
        *(_OWORD *)uint64_t v13 = v19;
        *(void *)(v13 + 16) = v20;
      }
    }
  }

  return result;
}

uint64_t sub_10014CAB4( __int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  size_t v8 = *a4;
  __int128 v49 = *a2;
  uint64_t v50 = *((void *)a2 + 2);
  __int128 v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  char v9 = v8(&v49, &v47);
  uint64_t v10 = *a4;
  if ((v9 & 1) == 0)
  {
    __int128 v45 = *a3;
    uint64_t v46 = *((void *)a3 + 2);
    __int128 v43 = *a2;
    uint64_t v44 = *((void *)a2 + 2);
    uint64_t result = v10(&v45, &v43);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v15 = *((void *)a2 + 2);
    __int128 v16 = *a2;
    uint64_t v17 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v17;
    *a3 = v16;
    *((void *)a3 + 2) = v15;
    uint64_t v18 = *a4;
    uint64_t v42 = *((void *)a2 + 2);
    __int128 v41 = *a2;
    __int128 v19 = *a1;
    uint64_t v40 = *((void *)a1 + 2);
    __int128 v39 = v19;
    uint64_t v20 = *((void *)a1 + 2);
    __int128 v21 = *a1;
    uint64_t v22 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v22;
    *a2 = v21;
    *((void *)a2 + 2) = v20;
    return 2LL;
  }

  __int128 v37 = *a3;
  uint64_t v38 = *((void *)a3 + 2);
  __int128 v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    uint64_t v23 = *((void *)a1 + 2);
    __int128 v24 = *a1;
    uint64_t v25 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v25;
    *a2 = v24;
    *((void *)a2 + 2) = v23;
    uint64_t v26 = *a4;
    uint64_t v34 = *((void *)a3 + 2);
    __int128 v33 = *a3;
    __int128 v27 = *a2;
    uint64_t v32 = *((void *)a2 + 2);
    __int128 v31 = v27;
    uint64_t v28 = *((void *)a2 + 2);
    __int128 v29 = *a2;
    uint64_t v30 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v30;
    *a3 = v29;
    *((void *)a3 + 2) = v28;
    return 2LL;
  }

  uint64_t v11 = *((void *)a1 + 2);
  __int128 v12 = *a1;
  uint64_t v13 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v13;
  *a3 = v12;
  *((void *)a3 + 2) = v11;
  return 1LL;
}

__int128 *sub_10014CCA8(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v4 = a2;
  __int128 v53 = *a1;
  uint64_t v54 = *((void *)a1 + 2);
  uint64_t v6 = *a3;
  __int128 v51 = v53;
  uint64_t v52 = v54;
  __int128 v49 = *(__int128 *)((char *)a2 - 24);
  uint64_t v50 = *((void *)a2 - 1);
  if ((v6(&v51, &v49) & 1) != 0)
  {
    uint64_t v7 = a1;
    do
    {
      size_t v8 = (__int128 *)((char *)v7 + 24);
      char v9 = *a3;
      __int128 v47 = v53;
      uint64_t v48 = v54;
      __int128 v45 = *(__int128 *)((char *)v7 + 24);
      uint64_t v46 = *((void *)v7 + 5);
      char v10 = v9(&v47, &v45);
      uint64_t v7 = v8;
    }

    while ((v10 & 1) == 0);
  }

  else
  {
    uint64_t v11 = (__int128 *)((char *)a1 + 24);
    do
    {
      size_t v8 = v11;
      if (v11 >= v4) {
        break;
      }
      __int128 v12 = *a3;
      __int128 v43 = v53;
      uint64_t v44 = v54;
      __int128 v41 = *v8;
      uint64_t v42 = *((void *)v8 + 2);
      int v13 = v12(&v43, &v41);
      uint64_t v11 = (__int128 *)((char *)v8 + 24);
    }

    while (!v13);
  }

  if (v8 >= v4)
  {
    uint64_t v14 = v4;
  }

  else
  {
    do
    {
      uint64_t v14 = (__int128 *)((char *)v4 - 24);
      uint64_t v15 = *a3;
      __int128 v39 = v53;
      uint64_t v40 = v54;
      __int128 v37 = *(__int128 *)((char *)v4 - 24);
      uint64_t v38 = *((void *)v4 - 1);
      uint64_t v4 = (__int128 *)((char *)v4 - 24);
    }

    while ((v15(&v39, &v37) & 1) != 0);
  }

  while (v8 < v14)
  {
    __int128 v16 = *v8;
    uint64_t v56 = *((void *)v8 + 2);
    __int128 v55 = v16;
    __int128 v17 = *v14;
    *((void *)v8 + 2) = *((void *)v14 + 2);
    __int128 *v8 = v17;
    __int128 v18 = v55;
    *((void *)v14 + 2) = v56;
    *uint64_t v14 = v18;
    do
    {
      __int128 v35 = v53;
      uint64_t v36 = v54;
      uint64_t v19 = *((void *)v8 + 5);
      __int128 v20 = *(__int128 *)((char *)v8 + 24);
      size_t v8 = (__int128 *)((char *)v8 + 24);
      __int128 v21 = *a3;
      __int128 v33 = v20;
      uint64_t v34 = v19;
    }

    while (!v21(&v35, &v33));
    do
    {
      __int128 v31 = v53;
      uint64_t v32 = v54;
      uint64_t v22 = *((void *)v14 - 1);
      __int128 v23 = *(__int128 *)((char *)v14 - 24);
      uint64_t v14 = (__int128 *)((char *)v14 - 24);
      __int128 v24 = *a3;
      __int128 v29 = v23;
      uint64_t v30 = v22;
    }

    while ((v24(&v31, &v29) & 1) != 0);
  }

  uint64_t v25 = (__int128 *)((char *)v8 - 24);
  if ((__int128 *)((char *)v8 - 24) != a1)
  {
    __int128 v26 = *v25;
    *((void *)a1 + 2) = *((void *)v8 - 1);
    *a1 = v26;
  }

  __int128 v27 = v53;
  *((void *)v8 - 1) = v54;
  *uint64_t v25 = v27;
  return v8;
}

uint64_t sub_10014CED4(__int128 *a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6 = 0LL;
  __int128 v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  do
  {
    uint64_t v7 = *a3;
    __int128 v45 = *(__int128 *)((char *)a1 + v6 + 24);
    uint64_t v46 = *(void *)((char *)a1 + v6 + 40);
    __int128 v43 = v47;
    uint64_t v44 = v48;
    v6 += 24LL;
  }

  while ((v7(&v45, &v43) & 1) != 0);
  size_t v8 = (__int128 *)((char *)a1 + v6);
  uint64_t v9 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    while ((unint64_t)v8 < a2)
    {
      __int128 v12 = *a3;
      unint64_t v10 = a2 - 24;
      __int128 v41 = *(_OWORD *)(a2 - 24);
      uint64_t v42 = *(void *)(a2 - 8);
      __int128 v39 = v47;
      uint64_t v40 = v48;
      a2 -= 24LL;
      if ((v12(&v41, &v39) & 1) != 0) {
        goto LABEL_9;
      }
    }

    unint64_t v10 = a2;
  }

  else
  {
    do
    {
      unint64_t v10 = a2 - 24;
      uint64_t v11 = *a3;
      __int128 v37 = *(_OWORD *)(a2 - 24);
      uint64_t v38 = *(void *)(a2 - 8);
      __int128 v35 = v47;
      uint64_t v36 = v48;
      a2 -= 24LL;
    }

    while (!v11(&v37, &v35));
  }

BOOL sub_10014D0E8(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v8 = *a3;
      __int128 v35 = *(_OWORD *)(a2 - 24);
      uint64_t v36 = *(void *)(a2 - 8);
      __int128 v33 = *(_OWORD *)a1;
      uint64_t v34 = *(void *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        uint64_t v9 = a2 - 24;
        uint64_t v10 = *(void *)(a1 + 16);
        __int128 v11 = *(_OWORD *)a1;
        uint64_t v12 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v12;
        *(_OWORD *)uint64_t v9 = v11;
        *(void *)(v9 + 16) = v10;
      }

      return 1LL;
    case 3uLL:
      sub_10014CAB4((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1LL;
    case 4uLL:
      sub_10014D334(a1, a1 + 24, a1 + 48, (__int128 *)(a2 - 24), a3);
      return 1LL;
    case 5uLL:
      sub_10014D47C(a1, a1 + 24, a1 + 48, a1 + 72, (__int128 *)(a2 - 24), a3);
      return 1LL;
    default:
      uint64_t v13 = a1 + 48;
      sub_10014CAB4((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v15 = 0LL;
      int v16 = 0;
      break;
  }

  while (1)
  {
    uint64_t v17 = *a3;
    __int128 v31 = *(_OWORD *)v14;
    uint64_t v32 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v13 + 16);
    __int128 v29 = *(_OWORD *)v13;
    uint64_t v30 = v18;
    if (v17(&v31, &v29))
    {
      __int128 v27 = *(_OWORD *)v14;
      uint64_t v28 = *(void *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(void *)(v20 + 88) = *(void *)(a1 + v19 + 64);
        if (v19 == -48) {
          break;
        }
        uint64_t v21 = *a3;
        __int128 v25 = v27;
        uint64_t v26 = v28;
        __int128 v23 = *(_OWORD *)(v20 + 24);
        uint64_t v24 = *(void *)(v20 + 40);
        v19 -= 24LL;
        if ((v21(&v25, &v23) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }

      uint64_t v22 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v22 = v27;
      *(void *)(v22 + 16) = v28;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }

    uint64_t v13 = v14;
    v15 += 24LL;
    v14 += 24LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

__n128 sub_10014D334( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t v10 = *a5;
  __int128 v34 = *a4;
  uint64_t v35 = *((void *)a4 + 2);
  __int128 v32 = *(_OWORD *)a3;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    uint64_t v12 = *(void *)(a3 + 16);
    __int128 v13 = *(_OWORD *)a3;
    uint64_t v14 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *(void *)(a3 + 16) = v14;
    *a4 = v13;
    *((void *)a4 + 2) = v12;
    uint64_t v15 = *a5;
    uint64_t v31 = *(void *)(a3 + 16);
    __int128 v30 = *(_OWORD *)a3;
    __int128 v16 = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
    __int128 v28 = v16;
    if (v15(&v30, &v28))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      __int128 v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(void *)(a3 + 16) = v17;
      uint64_t v20 = *a5;
      uint64_t v27 = *(void *)(a2 + 16);
      __int128 v26 = *(_OWORD *)a2;
      __int128 v21 = *(_OWORD *)a1;
      uint64_t v25 = *(void *)(a1 + 16);
      __int128 v24 = v21;
      if (v20(&v26, &v24))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v23 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v22;
      }
    }
  }

  return result;
}

__n128 sub_10014D47C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t v12 = *a6;
  __int128 v45 = *a5;
  uint64_t v46 = *((void *)a5 + 2);
  __int128 v43 = *(_OWORD *)a4;
  uint64_t v44 = *(void *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    __int128 v15 = *(_OWORD *)a4;
    uint64_t v16 = *((void *)a5 + 2);
    *(_OWORD *)a4 = *a5;
    *(void *)(a4 + 16) = v16;
    *a5 = v15;
    *((void *)a5 + 2) = v14;
    uint64_t v17 = *a6;
    uint64_t v42 = *(void *)(a4 + 16);
    __int128 v41 = *(_OWORD *)a4;
    __int128 v18 = *(_OWORD *)a3;
    uint64_t v40 = *(void *)(a3 + 16);
    __int128 v39 = v18;
    if (v17(&v41, &v39))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      __int128 v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *a6;
      uint64_t v38 = *(void *)(a3 + 16);
      __int128 v37 = *(_OWORD *)a3;
      __n128 v23 = *(__n128 *)a2;
      uint64_t v36 = *(void *)(a2 + 16);
      __n128 v35 = v23;
      if (v22(&v37, (__int128 *)&v35))
      {
        uint64_t v24 = *(void *)(a2 + 16);
        __n128 v25 = *(__n128 *)a2;
        uint64_t v26 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v26;
        *(__n128 *)a3 = v25;
        *(void *)(a3 + 16) = v24;
        uint64_t v27 = *a6;
        uint64_t v34 = *(void *)(a2 + 16);
        __n128 v33 = *(__n128 *)a2;
        __n128 v28 = *(__n128 *)a1;
        uint64_t v32 = *(void *)(a1 + 16);
        __n128 v31 = v28;
        if (v27((__int128 *)&v33, (__int128 *)&v31))
        {
          uint64_t v29 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v30 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v29;
        }
      }
    }
  }

  return result;
}

__n128 *sub_10014D624( __n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __int128 *))
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        sub_10014D804((uint64_t)a1, a4, v9, v12);
        uint64_t v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }

      while (v11);
    }

    __int128 v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        __int128 v15 = *a4;
        __n128 v27 = *v14;
        uint64_t v28 = v14[1].n128_i64[0];
        __n128 v25 = *a1;
        unint64_t v26 = a1[1].n128_u64[0];
        if (v15(&v27, (__int128 *)&v25))
        {
          unint64_t v16 = v14[1].n128_u64[0];
          __n128 v17 = *v14;
          unint64_t v18 = a1[1].n128_u64[0];
          *uint64_t v14 = *a1;
          v14[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          sub_10014D804((uint64_t)a1, a4, v9, a1);
        }

        uint64_t v14 = (__n128 *)((char *)v14 + 24);
      }

      while (v14 != a3);
      __int128 v13 = a3;
    }

    if (v8 >= 25)
    {
      int64_t v19 = v8 / 0x18uLL;
      __int128 v20 = (__n128 *)((char *)a2 - 24);
      do
      {
        __n128 v29 = *a1;
        unint64_t v30 = a1[1].n128_u64[0];
        uint64_t v21 = sub_10014D9E8((uint64_t)a1, (unsigned int (**)(__int128 *, __int128 *))a4, v19);
        if (v20 == (__n128 *)v21)
        {
          *(__n128 *)uint64_t v21 = v29;
          *(void *)(v21 + 16) = v30;
        }

        else
        {
          __n128 v22 = *v20;
          *(void *)(v21 + 16) = v20[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v22;
          *__int128 v20 = v29;
          v20[1].n128_u64[0] = v30;
          sub_10014DAD0( (uint64_t)a1,  v21 + 24,  (unsigned int (**)(__int128 *, __int128 *))a4,  0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - (uint64_t)a1) >> 3));
        }

        __int128 v20 = (__n128 *)((char *)v20 - 24);
      }

      while (v19-- > 2);
    }

    return v13;
  }

  return a3;
}

__n128 sub_10014D804( uint64_t a1, unsigned int (**a2)(__n128 *, __int128 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v41 = v4;
    uint64_t v42 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3)
      {
        __int128 v15 = *a2;
        __n128 v39 = *(__n128 *)v13;
        uint64_t v40 = *(void *)(v13 + 16);
        __int128 v37 = *(_OWORD *)(v13 + 24);
        uint64_t v38 = *(void *)(v13 + 40);
        if (v15(&v39, &v37))
        {
          v13 += 24LL;
          uint64_t v12 = v14;
        }
      }

      unint64_t v16 = (uint64_t (*)(__n128 *, __n128 *))*a2;
      __n128 v35 = *(__n128 *)v13;
      uint64_t v36 = *(void *)(v13 + 16);
      __n128 v33 = *v7;
      unint64_t v34 = v7[1].n128_u64[0];
      if ((v16(&v35, &v33) & 1) == 0)
      {
        __n128 v31 = *v7;
        unint64_t v32 = v7[1].n128_u64[0];
        do
        {
          unint64_t v18 = (__n128 *)v13;
          __n128 v19 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          __n128 *v7 = v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v20;
          if (2 * v12 + 2 < a3)
          {
            uint64_t v21 = *a2;
            __n128 v29 = *(__n128 *)v13;
            uint64_t v30 = *(void *)(v13 + 16);
            __int128 v27 = *(_OWORD *)(v13 + 24);
            uint64_t v28 = *(void *)(v13 + 40);
            if (v21(&v29, &v27))
            {
              v13 += 24LL;
              uint64_t v20 = 2 * v12 + 2;
            }
          }

          __n128 v22 = *a2;
          __n128 v25 = *(__n128 *)v13;
          uint64_t v26 = *(void *)(v13 + 16);
          __n128 v23 = v31;
          unint64_t v24 = v32;
          uint64_t v7 = v18;
          uint64_t v12 = v20;
        }

        while (!v22(&v25, (__int128 *)&v23));
        __n128 result = v31;
        v18[1].n128_u64[0] = v32;
        *unint64_t v18 = result;
      }
    }
  }

  return result;
}

uint64_t sub_10014D9E8(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *a2;
      uint64_t v13 = *(void *)(v9 + 16);
      __int128 v19 = *(_OWORD *)v9;
      uint64_t v20 = v13;
      uint64_t v14 = *(void *)(v9 + 40);
      __int128 v17 = *(_OWORD *)(v9 + 24);
      uint64_t v18 = v14;
      if (v12(&v19, &v17))
      {
        v9 += 24LL;
        uint64_t v10 = v11;
      }
    }

    __int128 v15 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v15;
    a1 = v9;
    uint64_t v6 = v10;
  }

  while (v10 <= v8);
  return v9;
}

double sub_10014DAD0( uint64_t a1, uint64_t a2, unsigned int (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    unint64_t v10 = v6 >> 1;
    uint64_t v11 = (__int128 *)(a1 + 24 * (v6 >> 1));
    uint64_t v12 = *a3;
    __int128 v27 = *v11;
    uint64_t v28 = *((void *)v11 + 2);
    __int128 v25 = *(_OWORD *)(a2 - 24);
    uint64_t v26 = *(void *)(a2 - 8);
    if (v12(&v27, &v25))
    {
      uint64_t v14 = (__int128 *)(a2 - 24);
      __int128 v23 = *(_OWORD *)(a2 - 24);
      uint64_t v24 = *(void *)(a2 - 8);
      do
      {
        __int128 v15 = v11;
        __int128 v16 = *v11;
        *((void *)v14 + 2) = *((void *)v11 + 2);
        *uint64_t v14 = v16;
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = (__int128 *)(a1 + 24 * v10);
        __int128 v17 = *a3;
        __int128 v21 = *v11;
        uint64_t v22 = *((void *)v11 + 2);
        __int128 v19 = v23;
        uint64_t v20 = v24;
        char v18 = v17(&v21, &v19);
        uint64_t v14 = v15;
      }

      while ((v18 & 1) != 0);
      double result = *(double *)&v23;
      *__int128 v15 = v23;
      *((void *)v15 + 2) = v24;
    }
  }

  return result;
}

uint64_t sub_10014DBD8()
{
  return __cxa_atexit((void (*)(void *))sub_10014B3CC, qword_1007F81A8, (void *)&_mh_execute_header);
}

void sub_10014DD64(id a1)
{
  byte_1007F81C8 = MGGetBoolAnswer(@"InternalBuild");
}

void sub_10014DDC8(id a1)
{
  byte_1007F81D8 = MGGetBoolAnswer(@"DeviceProximityCapability");
}

void *sub_10014DE0C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B1210)[a1]);
}

void *sub_10014DE20@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B1268)[a1]);
}

void *sub_10014DE34@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B12B0)[a1]);
}

void *sub_10014DE48@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B12D0)[a1]);
}

void sub_10014DE5C(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_WORD *)__int128 v17 = a2;
  *(void *)&unsigned int v17[2] = 0xFFFFFFFFLL;
  *(_WORD *)&v17[10] = 0;
  *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&v17[21] = *(_OWORD *)(a1 + 77);
  switch(*(_DWORD *)(a1 + 4))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10038FB18();
      }
      goto LABEL_102;
    case 1:
      v17[6] = 101;
      *(_DWORD *)&unsigned int v17[2] = 20;
      int v5 = *((_DWORD *)sub_100005150() + 187);
      if (!v5)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_89;
      }

      if (v5 == 2)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      else
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      goto LABEL_101;
    case 2:
      v17[6] = 100;
      *(_DWORD *)&unsigned int v17[2] = 17;
      int v6 = *((_DWORD *)sub_100005150() + 187);
      if (!v6)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_89;
      }

      if (v6 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038F9E4();
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_10038F9B8();
        }
      }

      goto LABEL_102;
    case 3:
      if (!*(_BYTE *)(a1 + 293))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_10038FA10();
        }
        goto LABEL_102;
      }

      v17[6] = *(_BYTE *)(a1 + 292);
      if (v17[6] != 102 && v17[6] != 106)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_10038FA3C();
        }
        goto LABEL_102;
      }

      *(_DWORD *)&unsigned int v17[2] = 16;
      int v7 = *((_DWORD *)sub_100005150() + 187);
      if (!v7)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
LABEL_89:
        }
          sub_10038F98C();
        goto LABEL_102;
      }

      if (v7 == 2)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      else
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      goto LABEL_101;
    case 4:
      if (!*(_BYTE *)(a1 + 280))
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_10038FA68();
        }
        goto LABEL_102;
      }

      v17[6] = *(_BYTE *)(a1 + 243);
      if (v17[6] == 5)
      {
        *(_DWORD *)&unsigned int v17[2] = 23;
        int v8 = *((_DWORD *)sub_100005150() + 187);
        if (v8)
        {
          if (v8 == 2)
          {
          }

          else if (v8 == 1 && sub_1001505C4((uint64_t)&v17[37], a1))
          {
            goto LABEL_48;
          }

          goto LABEL_100;
        }

        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_100;
        }
LABEL_94:
        sub_10038FA94();
        goto LABEL_100;
      }

      *(_DWORD *)&unsigned int v17[2] = 22;
      int v16 = *((_DWORD *)sub_100005150() + 187);
      if (v16)
      {
        if (v16 == 1)
        {
        }

        else if (v16 == 2 && sub_100151D48((uint64_t)&v17[37], a1))
        {
          goto LABEL_48;
        }

        goto LABEL_100;
      }

      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
LABEL_100:
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_102;
      }
LABEL_101:
      sub_10038F960();
LABEL_102:
      char v15 = 0;
      *(_BYTE *)a3 = 0;
LABEL_103:
      *(_BYTE *)(a3 + 153) = v15;
      return;
    case 5:
      v17[6] = 103;
      *(_DWORD *)&unsigned int v17[2] = 24;
      int v9 = *((_DWORD *)sub_100005150() + 187);
      if (!v9)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_77;
      }

      if (v9 == 2)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      else
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }

      goto LABEL_101;
    case 6:
      v17[6] = 103;
      *(_DWORD *)&unsigned int v17[2] = 25;
      int v10 = *((_DWORD *)sub_100005150() + 187);
      if (!v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
LABEL_77:
        }
          sub_10038F960();
        goto LABEL_102;
      }

      if (v10 == 2)
      {
        if (!sub_100153344((uint64_t)&v17[37], a1))
        {
          if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }
      }

      else if (v10 == 1 && !sub_100152EBC((uint64_t)&v17[37], a1))
      {
        if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }

BOOL sub_10014E62C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FCA4();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 163)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 153))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FB44();
    return 0LL;
  }

  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    int v6 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      if (!*(_BYTE *)(a2 + 97)) {
        sub_100006080();
      }
      sub_10038FC68((unsigned __int8 *)(a2 + 96), (uint64_t)buf, v6);
    }

    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16401;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 163)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 162);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
  if (v4 == 1)
  {
    if (*(_BYTE *)(a2 + 170))
    {
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 168);
      goto LABEL_41;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10038FC3C();
      return 0LL;
    }
  }

  else
  {
    if (*(_BYTE *)(a2 + 165) && *(_BYTE *)(a2 + 167))
    {
      *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 164);
      if (!*(_BYTE *)(a2 + 167)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 166);
LABEL_41:
      if (!*(_BYTE *)(a2 + 105)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 107)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 110)) {
        sub_100006080();
      }
      if (!sub_10032BE34((_BYTE *)(a2 + 108))) {
        sub_10038FB98();
      }
      if (!*(_BYTE *)(a2 + 113)) {
        sub_100006080();
      }
      if (!sub_10032BE34((_BYTE *)(a2 + 111))) {
        sub_10038FB70();
      }
      if (!*(_BYTE *)(a2 + 105)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 26) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 1LL, v7, v8, v9, v10, v11, v12);
      if (!*(_BYTE *)(a2 + 107)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 27) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 1LL, v13, v14, v15, v16, v17, v18);
      if (!*(_BYTE *)(a2 + 110)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 109);
      if (!*(_BYTE *)(a2 + 113)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 112);
      if (!*(_BYTE *)(a2 + 115)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 114);
      if (!*(_BYTE *)(a2 + 117)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 116);
      if (!*(_BYTE *)(a2 + 201)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 200);
      if (!*(_BYTE *)(a2 + 203)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 202);
      if (!*(_BYTE *)(a2 + 120)) {
        sub_100006080();
      }
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2;
      if (!*(_BYTE *)(a2 + 194)) {
        sub_100006080();
      }
      *(_WORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 192);
      if (!*(_BYTE *)(a2 + 198)) {
        sub_100006080();
      }
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 196);
      if (!*(_BYTE *)(a2 + 153)) {
        sub_100006080();
      }
      *(_BYTE *)(a1 + 39) = sub_10032BC40(*(unsigned __int8 *)(a2 + 152), 1);
      *(void *)(a1 + 56) = 0LL;
      if (v4 == 1)
      {
        uint64_t v45 = qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v46 = *(unsigned __int8 *)(a1 + 22);
          int v47 = *(unsigned __int8 *)(a1 + 23);
          int v48 = *(unsigned __int8 *)(a1 + 24);
          int v49 = *(unsigned __int8 *)(a1 + 25);
          int v50 = *(unsigned __int8 *)(a1 + 26);
          int v51 = *(unsigned __int8 *)(a1 + 27);
          int v52 = *(unsigned __int8 *)(a1 + 28);
          int v53 = *(unsigned __int8 *)(a1 + 29);
          int v54 = *(unsigned __int8 *)(a1 + 30);
          int v55 = *(unsigned __int8 *)(a1 + 31);
          int v56 = *(unsigned __int16 *)(a1 + 32);
          int v57 = *(unsigned __int8 *)(a1 + 34);
          int v58 = *(unsigned __int8 *)(a1 + 35);
          int v59 = *(unsigned __int8 *)(a1 + 36);
          int v60 = *(__int16 *)(a1 + 37);
          int v61 = *(unsigned __int8 *)(a1 + 39);
          int v62 = *(unsigned __int16 *)(a1 + 40);
          uint64_t v63 = *(void *)(a1 + 42);
          int v64 = *(_DWORD *)(a1 + 50);
          int v65 = *(unsigned __int16 *)(a1 + 54);
          uint64_t v66 = *(void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 67114240;
          int v68 = v46;
          __int16 v69 = 1024;
          int v70 = v47;
          __int16 v71 = 1024;
          int v72 = v48;
          __int16 v73 = 1024;
          int v74 = v49;
          __int16 v75 = 1024;
          int v76 = v50;
          __int16 v77 = 1024;
          int v78 = v51;
          __int16 v79 = 1024;
          int v80 = v52;
          __int16 v81 = 1024;
          int v82 = v53;
          __int16 v83 = 1024;
          int v84 = v54;
          __int16 v85 = 1024;
          int v86 = v55;
          __int16 v87 = 1024;
          int v88 = v56;
          __int16 v89 = 1024;
          int v90 = v57;
          __int16 v91 = 1024;
          int v92 = v58;
          __int16 v93 = 1024;
          int v94 = v59;
          __int16 v95 = 1024;
          int v96 = v60;
          __int16 v97 = 1024;
          int v98 = v61;
          __int16 v99 = 1024;
          int v100 = v62;
          __int16 v101 = 2048;
          *(void *)char v102 = v63;
          *(_WORD *)&v102[8] = 1024;
          *(_DWORD *)&v102[10] = v64;
          __int16 v103 = 1024;
          int v104 = v65;
          __int16 v105 = 2048;
          v106[0] = v66;
          uint64_t v42 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", soi_rssi_thd2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          __int128 v43 = (os_log_s *)v45;
          uint32_t v44 = 136;
          goto LABEL_66;
        }
      }

      else
      {
        uint64_t v19 = qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *(unsigned __int8 *)(a1 + 22);
          int v21 = *(unsigned __int8 *)(a1 + 23);
          int v22 = *(unsigned __int8 *)(a1 + 24);
          int v23 = *(unsigned __int8 *)(a1 + 25);
          int v24 = *(unsigned __int8 *)(a1 + 26);
          int v25 = *(unsigned __int8 *)(a1 + 27);
          int v26 = *(unsigned __int8 *)(a1 + 28);
          int v27 = *(unsigned __int8 *)(a1 + 29);
          int v28 = *(unsigned __int8 *)(a1 + 30);
          int v29 = *(unsigned __int8 *)(a1 + 31);
          int v30 = *(unsigned __int16 *)(a1 + 32);
          int v31 = *(unsigned __int8 *)(a1 + 34);
          int v32 = *(unsigned __int8 *)(a1 + 35);
          int v33 = *(unsigned __int8 *)(a1 + 36);
          int v34 = *(unsigned __int8 *)(a1 + 37);
          int v35 = *(unsigned __int8 *)(a1 + 38);
          int v36 = *(unsigned __int8 *)(a1 + 39);
          int v37 = *(unsigned __int16 *)(a1 + 40);
          uint64_t v38 = *(void *)(a1 + 42);
          int v39 = *(_DWORD *)(a1 + 50);
          int v40 = *(unsigned __int16 *)(a1 + 54);
          uint64_t v41 = *(void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 67114496;
          int v68 = v20;
          __int16 v69 = 1024;
          int v70 = v21;
          __int16 v71 = 1024;
          int v72 = v22;
          __int16 v73 = 1024;
          int v74 = v23;
          __int16 v75 = 1024;
          int v76 = v24;
          __int16 v77 = 1024;
          int v78 = v25;
          __int16 v79 = 1024;
          int v80 = v26;
          __int16 v81 = 1024;
          int v82 = v27;
          __int16 v83 = 1024;
          int v84 = v28;
          __int16 v85 = 1024;
          int v86 = v29;
          __int16 v87 = 1024;
          int v88 = v30;
          __int16 v89 = 1024;
          int v90 = v31;
          __int16 v91 = 1024;
          int v92 = v32;
          __int16 v93 = 1024;
          int v94 = v33;
          __int16 v95 = 1024;
          int v96 = v34;
          __int16 v97 = 1024;
          int v98 = v35;
          __int16 v99 = 1024;
          int v100 = v36;
          __int16 v101 = 1024;
          *(_DWORD *)char v102 = v37;
          *(_WORD *)&v102[4] = 2048;
          *(void *)&v102[6] = v38;
          __int16 v103 = 1024;
          int v104 = v39;
          __int16 v105 = 1024;
          LODWORD(v106[0]) = v40;
          WORD2(v106[0]) = 2048;
          *(void *)((char *)v106 + 6) = v41;
          uint64_t v42 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", rx_ant_mask2: %d\n"
                ", rx_sync_search_ant_mask2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          __int128 v43 = (os_log_s *)v19;
          uint32_t v44 = 142;
LABEL_66:
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v42, buf, v44);
        }
      }

      return 1LL;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10038FC10();
      return 0LL;
    }
  }

  return result;
}

void sub_10014ED38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10014ED50(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FD70();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 163)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 153))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FB44();
    return 0LL;
  }

  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    uint64_t v45 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
    {
      if (!*(_BYTE *)(a2 + 97)) {
        sub_100006080();
      }
      sub_10038FC68((unsigned __int8 *)(a2 + 96), (uint64_t)&v67, v45);
    }

    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16401;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 163)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 162);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
  if (v4)
  {
LABEL_27:
    if (!*(_BYTE *)(a2 + 105)) {
      sub_100006080();
    }
    if (!*(_BYTE *)(a2 + 107)) {
      sub_100006080();
    }
    if (!*(_BYTE *)(a2 + 110)) {
      sub_100006080();
    }
    if (!sub_10032BE34((_BYTE *)(a2 + 108))) {
      sub_10038FCF8();
    }
    if (!*(_BYTE *)(a2 + 113)) {
      sub_100006080();
    }
    if (!sub_10032BE34((_BYTE *)(a2 + 111))) {
      sub_10038FCD0();
    }
    if (!*(_BYTE *)(a2 + 105)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 26) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 2LL, v5, v6, v7, v8, v9, v10);
    if (!*(_BYTE *)(a2 + 107)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 27) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 2LL, v11, v12, v13, v14, v15, v16);
    if (!*(_BYTE *)(a2 + 110)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 28) = sub_10032BEA8((unsigned __int8 *)(a2 + 108));
    if (!*(_BYTE *)(a2 + 113)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 30) = sub_10032BEA8((unsigned __int8 *)(a2 + 111));
    if (!*(_BYTE *)(a2 + 115)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 114);
    if (!*(_BYTE *)(a2 + 117)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 116);
    if (!*(_BYTE *)(a2 + 201)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 200);
    if (!*(_BYTE *)(a2 + 203)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 202);
    if (!*(_BYTE *)(a2 + 120)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 63) = *(_WORD *)(a2 + 118) | 2;
    if (!*(_BYTE *)(a2 + 194)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 192);
    if (!*(_BYTE *)(a2 + 198)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 77) = *(_WORD *)(a2 + 196);
    if (!*(_BYTE *)(a2 + 153)) {
      sub_100006080();
    }
    char v17 = *(_BYTE *)(a2 + 152);
    LOBYTE(v67) = 0;
    BYTE1(v67) = v17;
    BYTE2(v67) = 1;
    LOBYTE(v68) = 0;
    BYTE2(v68) = 0;
    *(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = sub_10032BD2C((unsigned __int8 *)&v67);
    *(void *)(a1 + 79) = 0LL;
    if (v4 == 1)
    {
      uint64_t v46 = qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v47 = *(unsigned __int8 *)(a1 + 22);
        int v48 = *(unsigned __int8 *)(a1 + 23);
        int v49 = *(unsigned __int8 *)(a1 + 24);
        int v50 = *(unsigned __int8 *)(a1 + 25);
        int v51 = *(unsigned __int8 *)(a1 + 26);
        int v52 = *(unsigned __int8 *)(a1 + 27);
        int v53 = *(unsigned __int16 *)(a1 + 28);
        int v54 = *(unsigned __int16 *)(a1 + 30);
        int v55 = *(unsigned __int8 *)(a1 + 42);
        int v56 = *(unsigned __int8 *)(a1 + 43);
        int v57 = *(unsigned __int16 *)(a1 + 44);
        int v58 = *(unsigned __int8 *)(a1 + 46);
        int v59 = *(unsigned __int8 *)(a1 + 47);
        int v60 = *(unsigned __int8 *)(a1 + 48);
        int v61 = *(unsigned __int16 *)(a1 + 51);
        int v62 = *(unsigned __int16 *)(a1 + 63);
        uint64_t v63 = *(void *)(a1 + 65);
        int v64 = *(_DWORD *)(a1 + 73);
        int v65 = *(unsigned __int16 *)(a1 + 77);
        uint64_t v66 = *(void *)(a1 + 79);
        int v67 = 67113984;
        int v68 = v47;
        __int16 v69 = 1024;
        int v70 = v48;
        __int16 v71 = 1024;
        int v72 = v49;
        __int16 v73 = 1024;
        int v74 = v50;
        __int16 v75 = 1024;
        int v76 = v51;
        __int16 v77 = 1024;
        int v78 = v52;
        __int16 v79 = 1024;
        int v80 = v53;
        __int16 v81 = 1024;
        int v82 = v54;
        __int16 v83 = 1024;
        int v84 = v55;
        __int16 v85 = 1024;
        int v86 = v56;
        __int16 v87 = 1024;
        int v88 = v57;
        __int16 v89 = 1024;
        int v90 = v58;
        __int16 v91 = 1024;
        int v92 = v59;
        __int16 v93 = 1024;
        int v94 = v60;
        __int16 v95 = 1024;
        int v96 = v61;
        __int16 v97 = 1024;
        int v98 = v62;
        __int16 v99 = 2048;
        *(void *)int v100 = v63;
        *(_WORD *)&v100[8] = 1024;
        *(_DWORD *)__int16 v101 = v64;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v65;
        __int16 v102 = 2048;
        *(void *)__int16 v103 = v66;
        uint64_t v41 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", bch: %d\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        uint64_t v42 = (os_log_s *)v46;
        uint32_t v43 = 130;
        goto LABEL_64;
      }
    }

    else
    {
      uint64_t v18 = qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(unsigned __int8 *)(a1 + 22);
        int v20 = *(unsigned __int8 *)(a1 + 23);
        int v21 = *(unsigned __int8 *)(a1 + 24);
        int v22 = *(unsigned __int8 *)(a1 + 25);
        int v23 = *(unsigned __int8 *)(a1 + 26);
        int v24 = *(unsigned __int8 *)(a1 + 27);
        int v25 = *(unsigned __int16 *)(a1 + 28);
        int v26 = *(unsigned __int16 *)(a1 + 30);
        int v27 = *(unsigned __int8 *)(a1 + 42);
        int v28 = *(unsigned __int8 *)(a1 + 43);
        int v29 = *(unsigned __int16 *)(a1 + 44);
        int v30 = *(unsigned __int8 *)(a1 + 46);
        int v31 = *(unsigned __int8 *)(a1 + 47);
        int v32 = *(unsigned __int8 *)(a1 + 48);
        int v33 = *(unsigned __int8 *)(a1 + 49);
        int v34 = *(unsigned __int8 *)(a1 + 50);
        int v35 = *(unsigned __int16 *)(a1 + 51);
        int v36 = *(unsigned __int16 *)(a1 + 63);
        uint64_t v37 = *(void *)(a1 + 65);
        int v38 = *(_DWORD *)(a1 + 73);
        int v39 = *(unsigned __int16 *)(a1 + 77);
        uint64_t v40 = *(void *)(a1 + 79);
        int v67 = 67114496;
        int v68 = v19;
        __int16 v69 = 1024;
        int v70 = v20;
        __int16 v71 = 1024;
        int v72 = v21;
        __int16 v73 = 1024;
        int v74 = v22;
        __int16 v75 = 1024;
        int v76 = v23;
        __int16 v77 = 1024;
        int v78 = v24;
        __int16 v79 = 1024;
        int v80 = v25;
        __int16 v81 = 1024;
        int v82 = v26;
        __int16 v83 = 1024;
        int v84 = v27;
        __int16 v85 = 1024;
        int v86 = v28;
        __int16 v87 = 1024;
        int v88 = v29;
        __int16 v89 = 1024;
        int v90 = v30;
        __int16 v91 = 1024;
        int v92 = v31;
        __int16 v93 = 1024;
        int v94 = v32;
        __int16 v95 = 1024;
        int v96 = v33;
        __int16 v97 = 1024;
        int v98 = v34;
        __int16 v99 = 1024;
        *(_DWORD *)int v100 = v35;
        *(_WORD *)&v100[4] = 1024;
        *(_DWORD *)&v100[6] = v36;
        *(_WORD *)__int16 v101 = 2048;
        *(void *)&v101[2] = v37;
        __int16 v102 = 1024;
        *(_DWORD *)__int16 v103 = v38;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v39;
        __int16 v104 = 2048;
        uint64_t v105 = v40;
        uint64_t v41 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", rx_ant_mask2: %d\n"
              ", rx_sync_search_ant_mask2: %d\n"
              ", bch: %hu\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        uint64_t v42 = (os_log_s *)v18;
        uint32_t v43 = 142;
LABEL_64:
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, v41, (uint8_t *)&v67, v43);
      }
    }

    return 1LL;
  }

  if (*(_BYTE *)(a2 + 165) && *(_BYTE *)(a2 + 167))
  {
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 166);
    goto LABEL_27;
  }

  BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10038FC10();
    return 0LL;
  }

  return result;
}

void sub_10014F43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10014F454(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FE68();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 105)
    && *(_BYTE *)(a2 + 107)
    && *(_BYTE *)(a2 + 110)
    && *(_BYTE *)(a2 + 113)
    && *(_BYTE *)(a2 + 115)
    && *(_BYTE *)(a2 + 117)
    && *(_BYTE *)(a2 + 161)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 170)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 163)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 165)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 167)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 105)) {
      goto LABEL_57;
    }
    if (!*(_BYTE *)(a2 + 107)) {
      goto LABEL_57;
    }
    if (!*(_BYTE *)(a2 + 110)) {
      goto LABEL_57;
    }
    if (!sub_10032BE34((_BYTE *)(a2 + 108))) {
      sub_10038FDF0();
    }
    if (!*(_BYTE *)(a2 + 113)) {
      goto LABEL_57;
    }
    if (!sub_10032BE34((_BYTE *)(a2 + 111))) {
      sub_10038FDC8();
    }
    if (!*(_BYTE *)(a2 + 105)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 26) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 1LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 107)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 27) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 1LL, v10, v11, v12, v13, v14, v15);
    if (!*(_BYTE *)(a2 + 110)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 109);
    if (!*(_BYTE *)(a2 + 113) {
      || (*(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 112), !*(_BYTE *)(a2 + 115))
    }
      || (*(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 114), !*(_BYTE *)(a2 + 117))
      || (*(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 116), !*(_BYTE *)(a2 + 161))
      || (*(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 160), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2, !*(_BYTE *)(a2 + 170))
      || (*(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 168), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 153)))
    {
LABEL_57:
      sub_100006080();
    }

    uint64_t v16 = 1LL;
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_10032BC40(*(unsigned __int8 *)(a2 + 152), 1);
    *(void *)(a1 + 56) = 0LL;
    char v17 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(unsigned __int8 *)(a1 + 22);
      int v19 = *(unsigned __int8 *)(a1 + 23);
      int v20 = *(unsigned __int8 *)(a1 + 24);
      int v21 = *(unsigned __int8 *)(a1 + 25);
      int v22 = *(unsigned __int8 *)(a1 + 26);
      int v23 = *(unsigned __int8 *)(a1 + 27);
      int v24 = *(unsigned __int8 *)(a1 + 28);
      int v25 = *(unsigned __int8 *)(a1 + 29);
      int v26 = *(unsigned __int8 *)(a1 + 30);
      int v27 = *(unsigned __int8 *)(a1 + 31);
      int v28 = *(unsigned __int8 *)(a1 + 34);
      int v29 = *(unsigned __int8 *)(a1 + 35);
      int v30 = *(unsigned __int8 *)(a1 + 36);
      int v31 = *(unsigned __int8 *)(a1 + 37);
      int v32 = *(__int16 *)(a1 + 38);
      int v33 = *(unsigned __int16 *)(a1 + 40);
      int v34 = *(unsigned __int16 *)(a1 + 54);
      int v35 = *(unsigned __int8 *)(a1 + 32);
      v37[0] = 67113472;
      v37[1] = v18;
      __int16 v38 = 1024;
      int v39 = v19;
      __int16 v40 = 1024;
      int v41 = v20;
      __int16 v42 = 1024;
      int v43 = v21;
      __int16 v44 = 1024;
      int v45 = v22;
      __int16 v46 = 1024;
      int v47 = v23;
      __int16 v48 = 1024;
      int v49 = v24;
      __int16 v50 = 1024;
      int v51 = v25;
      __int16 v52 = 1024;
      int v53 = v26;
      __int16 v54 = 1024;
      int v55 = v27;
      __int16 v56 = 1024;
      int v57 = v28;
      __int16 v58 = 1024;
      int v59 = v29;
      __int16 v60 = 1024;
      int v61 = v30;
      __int16 v62 = 1024;
      int v63 = v31;
      __int16 v64 = 1024;
      int v65 = v32;
      __int16 v66 = 1024;
      int v67 = v33;
      __int16 v68 = 1024;
      int v69 = v34;
      __int16 v70 = 1024;
      int v71 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Built P2P packet V1: { \n ses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n tx_preamble: %d\n rx_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n soi_rssi_thd2: %d\n debug_flags: %d\n interval_ms: %d\n channel:%d\n }",  (uint8_t *)v37,  0x6Eu);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_10038FD9C();
    }
    return 0LL;
  }

  return v16;
}

BOOL sub_10014F860(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FEC0();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 105)
    && *(_BYTE *)(a2 + 107)
    && *(_BYTE *)(a2 + 110)
    && *(_BYTE *)(a2 + 113)
    && *(_BYTE *)(a2 + 115)
    && *(_BYTE *)(a2 + 117)
    && *(_BYTE *)(a2 + 161)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 170)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 163)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 165)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 167)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 105)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 26) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 2LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 107)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 27) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 2LL, v10, v11, v12, v13, v14, v15);
    if (!*(_BYTE *)(a2 + 110)) {
      goto LABEL_48;
    }
    *(_WORD *)(a1 + 28) = sub_10032BEA8((unsigned __int8 *)(a2 + 108));
    if (!*(_BYTE *)(a2 + 113) {
      || (*(_WORD *)(a1 + 30) = sub_10032BEA8((unsigned __int8 *)(a2 + 111)), !*(_BYTE *)(a2 + 115))
    }
      || (*(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 114), !*(_BYTE *)(a2 + 117))
      || (*(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 116), !*(_BYTE *)(a2 + 161))
      || (*(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 160), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2, !*(_BYTE *)(a2 + 170))
      || (*(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 168), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 153)))
    {
LABEL_48:
      sub_100006080();
    }

    int v16 = *(unsigned __int8 *)(a2 + 152);
    if (v16 == 5 || v16 == 9) {
      *(_WORD *)(a1 + 46) = v16;
    }
    *(void *)(a1 + 86) = 0LL;
    char v17 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(unsigned __int8 *)(a1 + 22);
      int v19 = *(unsigned __int8 *)(a1 + 23);
      int v20 = *(unsigned __int8 *)(a1 + 24);
      int v21 = *(unsigned __int8 *)(a1 + 25);
      int v22 = *(unsigned __int8 *)(a1 + 26);
      int v23 = *(unsigned __int8 *)(a1 + 27);
      int v24 = *(unsigned __int16 *)(a1 + 28);
      int v25 = *(unsigned __int16 *)(a1 + 30);
      int v26 = *(unsigned __int8 *)(a1 + 44);
      int v27 = *(unsigned __int8 *)(a1 + 45);
      int v28 = *(unsigned __int8 *)(a1 + 48);
      int v29 = *(unsigned __int8 *)(a1 + 49);
      int v30 = *(unsigned __int8 *)(a1 + 50);
      int v31 = *(unsigned __int8 *)(a1 + 51);
      int v32 = *(__int16 *)(a1 + 52);
      int v33 = *(unsigned __int16 *)(a1 + 70);
      int v34 = *(unsigned __int16 *)(a1 + 84);
      int v35 = *(unsigned __int16 *)(a1 + 46);
      v37[0] = 67113472;
      v37[1] = v18;
      __int16 v38 = 1024;
      int v39 = v19;
      __int16 v40 = 1024;
      int v41 = v20;
      __int16 v42 = 1024;
      int v43 = v21;
      __int16 v44 = 1024;
      int v45 = v22;
      __int16 v46 = 1024;
      int v47 = v23;
      __int16 v48 = 1024;
      int v49 = v24;
      __int16 v50 = 1024;
      int v51 = v25;
      __int16 v52 = 1024;
      int v53 = v26;
      __int16 v54 = 1024;
      int v55 = v27;
      __int16 v56 = 1024;
      int v57 = v28;
      __int16 v58 = 1024;
      int v59 = v29;
      __int16 v60 = 1024;
      int v61 = v30;
      __int16 v62 = 1024;
      int v63 = v31;
      __int16 v64 = 1024;
      int v65 = v32;
      __int16 v66 = 1024;
      int v67 = v33;
      __int16 v68 = 1024;
      int v69 = v34;
      __int16 v70 = 1024;
      int v71 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Built P2P packet V2: { \n ses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n first_preamble: %d\n subsequent_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n ping_pong_soi_rssi_thd: %d\n debug_flags: %d\n interval_ms: %d\n band_channel:%hu\n }",  (uint8_t *)v37,  0x6Eu);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (result)
    {
      sub_10038FE94();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10014FC18(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FF6C();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 153)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 293)
    && *(_BYTE *)(a2 + 295)
    && *(_BYTE *)(a2 + 300)
    && *(_BYTE *)(a2 + 305)
    && *(_BYTE *)(a2 + 307)
    && *(_BYTE *)(a2 + 310)
    && *(_BYTE *)(a2 + 314)
    && *(_BYTE *)(a2 + 317)
    && *(_BYTE *)(a2 + 319)
    && *(_BYTE *)(a2 + 321)
    && *(_BYTE *)(a2 + 323)
    && *(_BYTE *)(a2 + 343)
    && *(_BYTE *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(_BYTE *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(_BYTE *)(a2 + 97)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
      if (!*(_BYTE *)(a2 + 99)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
      if (!*(_BYTE *)(a2 + 101)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
      if (!*(_BYTE *)(a2 + 103)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
      if (!*(_BYTE *)(a2 + 153)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 26) = sub_10032BC40(*(unsigned __int8 *)(a2 + 152), 1);
      if (!*(_BYTE *)(a2 + 295)) {
        goto LABEL_75;
      }
      if (!*(_BYTE *)(a2 + 295)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 27) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 294), 1LL, v5, v6, v7, v8, v9, v10);
      if (!*(_BYTE *)(a2 + 300)) {
        goto LABEL_75;
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 296);
      char v11 = *(_BYTE *)(a2 + 305) ? *(_BYTE *)(a2 + 304) : 0;
      *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v11;
      char v12 = *(_BYTE *)(a2 + 307) ? *(_BYTE *)(a2 + 306) : 0;
      *(_BYTE *)(a1 + 33) = v12;
      if (!*(_BYTE *)(a2 + 310)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 308);
      if (!*(_BYTE *)(a2 + 314)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 312);
      if (!*(_BYTE *)(a2 + 317)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 316);
      if (!*(_BYTE *)(a2 + 319)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 318);
      if (!*(_BYTE *)(a2 + 321)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 320);
      if (!*(_BYTE *)(a2 + 323)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 322);
      if (!*(_BYTE *)(a2 + 343)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 342);
      if (!*(_BYTE *)(a2 + 345)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 344);
      if (*(_BYTE *)(a2 + 347)) {
        char v13 = *(_BYTE *)(a2 + 346) & 0xF;
      }
      else {
        char v13 = 0;
      }
      *(_BYTE *)(a1 + 53) = *(_BYTE *)(a1 + 53) & 0xF0 | v13;
      if (*(_BYTE *)(a2 + 341)) {
        *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 340);
      }
      if (*(_BYTE *)(a2 + 328)) {
        *(_DWORD *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_DWORD *)(a2 + 324);
      }
      if (*(_BYTE *)(a2 + 336)) {
        *(_DWORD *)(a1 + 46) = *(_DWORD *)(a2 + 332);
      }
      if (!*(_BYTE *)(a2 + 120)) {
LABEL_75:
      }
        sub_100006080();
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 118);
      uint64_t v14 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int8 *)(a1 + 22);
        int v16 = *(unsigned __int8 *)(a1 + 23);
        int v17 = *(unsigned __int8 *)(a1 + 24);
        int v18 = *(unsigned __int8 *)(a1 + 25);
        int v19 = *(unsigned __int16 *)(a1 + 54);
        int v20 = *(unsigned __int8 *)(a1 + 26);
        int v21 = *(unsigned __int8 *)(a1 + 27);
        int v22 = *(_DWORD *)(a1 + 28);
        int v23 = 10 * *(unsigned __int8 *)(a1 + 32);
        int v24 = 10 * *(unsigned __int8 *)(a1 + 33);
        int v25 = *(unsigned __int16 *)(a1 + 34);
        int v26 = *(unsigned __int16 *)(a1 + 36);
        int v27 = *(unsigned __int8 *)(a1 + 38);
        int v28 = *(unsigned __int8 *)(a1 + 39);
        int v29 = *(unsigned __int8 *)(a1 + 40);
        int v30 = *(unsigned __int8 *)(a1 + 41);
        int v31 = *(unsigned __int8 *)(a1 + 51);
        int v32 = *(unsigned __int8 *)(a1 + 52);
        int v33 = *(_BYTE *)(a1 + 53) & 0xF;
        if (*(_BYTE *)(a2 + 341)) {
          int v34 = *(unsigned __int8 *)(a1 + 50);
        }
        else {
          int v34 = -1;
        }
        if (*(_BYTE *)(a2 + 336)) {
          int v35 = *(_DWORD *)(a1 + 46);
        }
        else {
          int v35 = -1;
        }
        int v36 = *(_DWORD *)(a1 + 42);
        if (!*(_BYTE *)(a2 + 328)) {
          int v36 = -1;
        }
        v37[0] = 67114496;
        v37[1] = v15;
        __int16 v38 = 1024;
        int v39 = v16;
        __int16 v40 = 1024;
        int v41 = v17;
        __int16 v42 = 1024;
        int v43 = v18;
        __int16 v44 = 1024;
        int v45 = v19;
        __int16 v46 = 1024;
        int v47 = v20;
        __int16 v48 = 1024;
        int v49 = v21;
        __int16 v50 = 1024;
        int v51 = v22;
        __int16 v52 = 1024;
        int v53 = v23;
        __int16 v54 = 1024;
        int v55 = v24;
        __int16 v56 = 1024;
        int v57 = v25;
        __int16 v58 = 1024;
        int v59 = v26;
        __int16 v60 = 1024;
        int v61 = v27;
        __int16 v62 = 1024;
        int v63 = v28;
        __int16 v64 = 1024;
        int v65 = v29;
        __int16 v66 = 1024;
        int v67 = v30;
        __int16 v68 = 1024;
        int v69 = v31;
        __int16 v70 = 1024;
        int v71 = v32;
        __int16 v72 = 1024;
        int v73 = v33;
        __int16 v74 = 1024;
        int v75 = v34;
        __int16 v76 = 1024;
        int v77 = v35;
        __int16 v78 = 1024;
        int v79 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Built Alisha packet V1: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , channel: %u\n , preamble: %u\n , uwb_ses_id: %u\n , rsp_timeout_10s: %u (s)\n , total_timeout_10s: %u (s)\n , sel_protocol_version: %u\n , sel_uwb_cfg_id: %u\n , ran_multiplier: %u\n , nchaps_per_slot: %u\n , nslots_per_round: %u\n , nresponders: %u\n , sel_hop_cfg_bitmask: %u\n , sel_pulse_shape_combo: %u\n , space_between_ranging_rounds: %u\n , anchor_only_responder_idx: %d\n , anchor_only_responder_hop_key: %d\n , anchor_only_responder_sts_index_0: %d\n }",  (uint8_t *)v37,  0x86u);
      }

      return 1LL;
    }

    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10038FF40();
        return 0LL;
      }
    }
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10038FEEC();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1001500DC(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10038FF6C();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 153)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 293)
    && *(_BYTE *)(a2 + 295)
    && *(_BYTE *)(a2 + 300)
    && *(_BYTE *)(a2 + 305)
    && *(_BYTE *)(a2 + 307)
    && *(_BYTE *)(a2 + 310)
    && *(_BYTE *)(a2 + 314)
    && *(_BYTE *)(a2 + 317)
    && *(_BYTE *)(a2 + 319)
    && *(_BYTE *)(a2 + 321)
    && *(_BYTE *)(a2 + 323)
    && *(_BYTE *)(a2 + 343)
    && *(_BYTE *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(_BYTE *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(_BYTE *)(a2 + 97)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
      if (!*(_BYTE *)(a2 + 99)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 98);
      if (!*(_BYTE *)(a2 + 101)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 100);
      if (!*(_BYTE *)(a2 + 103)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 102);
      if (!*(_BYTE *)(a2 + 153)) {
        goto LABEL_75;
      }
      char v5 = *(_BYTE *)(a2 + 152);
      LOBYTE(v38) = 0;
      BYTE1(v38) = v5;
      BYTE2(v38) = 1;
      LOBYTE(v39) = 0;
      BYTE2(v39) = 0;
      *(_WORD *)(a1 + 26) = sub_10032BD2C((unsigned __int8 *)&v38);
      if (!*(_BYTE *)(a2 + 295)) {
        goto LABEL_75;
      }
      if (!*(_BYTE *)(a2 + 295)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 28) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 294), 2LL, v6, v7, v8, v9, v10, v11);
      if (!*(_BYTE *)(a2 + 300)) {
        goto LABEL_75;
      }
      *(_DWORD *)(a1 + 29) = *(_DWORD *)(a2 + 296);
      char v12 = *(_BYTE *)(a2 + 305) ? *(_BYTE *)(a2 + 304) : 0;
      *(_BYTE *)(a1 + 33) = v12;
      char v13 = *(_BYTE *)(a2 + 307) ? *(_BYTE *)(a2 + 306) : 0;
      *(_BYTE *)(a1 + 34) = v13;
      if (!*(_BYTE *)(a2 + 310)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 308);
      if (!*(_BYTE *)(a2 + 314)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 312);
      if (!*(_BYTE *)(a2 + 317)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 316);
      if (!*(_BYTE *)(a2 + 319)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 318);
      if (!*(_BYTE *)(a2 + 321)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 320);
      if (!*(_BYTE *)(a2 + 323)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a1 + 42) & 0xF0 | *(_BYTE *)(a2 + 322) & 0xF;
      if (!*(_BYTE *)(a2 + 343)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 342);
      if (!*(_BYTE *)(a2 + 345)) {
        goto LABEL_75;
      }
      *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 344);
      if (*(_BYTE *)(a2 + 347)) {
        char v14 = *(_BYTE *)(a2 + 346) & 0xF;
      }
      else {
        char v14 = 0;
      }
      *(_BYTE *)(a1 + 54) = *(_BYTE *)(a1 + 54) & 0xF0 | v14;
      if (*(_BYTE *)(a2 + 341)) {
        *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 340);
      }
      if (*(_BYTE *)(a2 + 328)) {
        *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 324);
      }
      if (*(_BYTE *)(a2 + 336)) {
        *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 332);
      }
      if (!*(_BYTE *)(a2 + 120)) {
LABEL_75:
      }
        sub_100006080();
      *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118);
      int v15 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int8 *)(a1 + 22);
        int v17 = *(unsigned __int8 *)(a1 + 23);
        int v18 = *(unsigned __int8 *)(a1 + 24);
        int v19 = *(unsigned __int8 *)(a1 + 25);
        int v20 = *(unsigned __int16 *)(a1 + 70);
        int v21 = *(unsigned __int16 *)(a1 + 26);
        int v22 = *(unsigned __int8 *)(a1 + 28);
        int v23 = *(_DWORD *)(a1 + 29);
        int v24 = 10 * *(unsigned __int8 *)(a1 + 33);
        int v25 = 10 * *(unsigned __int8 *)(a1 + 34);
        int v26 = *(unsigned __int16 *)(a1 + 35);
        int v27 = *(unsigned __int16 *)(a1 + 37);
        int v28 = *(unsigned __int8 *)(a1 + 39);
        int v29 = *(unsigned __int8 *)(a1 + 40);
        int v30 = *(unsigned __int8 *)(a1 + 41);
        int v31 = *(_BYTE *)(a1 + 42) & 0xF;
        int v32 = *(unsigned __int8 *)(a1 + 52);
        int v33 = *(unsigned __int8 *)(a1 + 53);
        int v34 = *(_BYTE *)(a1 + 54) & 0xF;
        if (*(_BYTE *)(a2 + 341)) {
          int v35 = *(unsigned __int8 *)(a1 + 51);
        }
        else {
          int v35 = -1;
        }
        if (*(_BYTE *)(a2 + 336)) {
          int v36 = *(_DWORD *)(a1 + 47);
        }
        else {
          int v36 = -1;
        }
        int v37 = *(_DWORD *)(a1 + 43);
        if (!*(_BYTE *)(a2 + 328)) {
          int v37 = -1;
        }
        int v38 = 67114496;
        int v39 = v16;
        __int16 v40 = 1024;
        int v41 = v17;
        __int16 v42 = 1024;
        int v43 = v18;
        __int16 v44 = 1024;
        int v45 = v19;
        __int16 v46 = 1024;
        int v47 = v20;
        __int16 v48 = 1024;
        int v49 = v21;
        __int16 v50 = 1024;
        int v51 = v22;
        __int16 v52 = 1024;
        int v53 = v23;
        __int16 v54 = 1024;
        int v55 = v24;
        __int16 v56 = 1024;
        int v57 = v25;
        __int16 v58 = 1024;
        int v59 = v26;
        __int16 v60 = 1024;
        int v61 = v27;
        __int16 v62 = 1024;
        int v63 = v28;
        __int16 v64 = 1024;
        int v65 = v29;
        __int16 v66 = 1024;
        int v67 = v30;
        __int16 v68 = 1024;
        int v69 = v31;
        __int16 v70 = 1024;
        int v71 = v32;
        __int16 v72 = 1024;
        int v73 = v33;
        __int16 v74 = 1024;
        int v75 = v34;
        __int16 v76 = 1024;
        int v77 = v35;
        __int16 v78 = 1024;
        int v79 = v36;
        __int16 v80 = 1024;
        int v81 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Built Alisha packet V2: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , bch: %d\n , preamble: %u\n , uwb_ses_id: %u\n , rsp_timeout_10s: %u (s)\n , total_timeout_10s: %u (s)\n , sel_protocol_version: %u\n , sel_uwb_cfg_id: %u\n , ran_multiplier: %u\n , nchaps_per_slot: %u\n , nslots_per_round: %u\n , nresponders: %u\n , sel_hop_cfg_bitmask: %u\n , sel_pulse_shape_combo: %u\n , space_between_ranging_rounds: %u\n , anchor_only_responder_idx: %d\n , anchor_only_responder_hop_key: %d\n , anchor_only_responder_sts_index_0: %d\n }",  (uint8_t *)&v38,  0x86u);
      }

      return 1LL;
    }

    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10038FF40();
        return 0LL;
      }
    }
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10038FEEC();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1001505C4(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390090();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 237)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 174)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFC0();
    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16422;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 237)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 235))) {
    sub_100390018();
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 30) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 1LL, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 1LL, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 237)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 236);
  if (!*(_BYTE *)(a2 + 115)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 120)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 174)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 172);
  if (!*(_BYTE *)(a2 + 207)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 27) = sub_10032BC40(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(_BYTE *)(a2 + 209)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 28) = sub_10032BC40(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(_BYTE *)(a2 + 211)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(void *)(a1 + 84) = *(void *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 272)) {
        sub_100006080();
      }
      *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 264);
      goto LABEL_43;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFEC();
    return 0LL;
  }

  *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 84) = 0LL;
LABEL_43:
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_1000065CC(&v39, "0x");
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_1000065CC(__p, __str);
    if (SBYTE3(v42) >= 0) {
      int v17 = __p;
    }
    else {
      int v17 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v42) >= 0) {
      std::string::size_type v18 = BYTE3(v42);
    }
    else {
      std::string::size_type v18 = *(void *)&__p[8];
    }
    std::string::append(&v39, v17, v18);
    if (SBYTE3(v42) < 0) {
      operator delete(*(void **)__p);
    }
  }

  int v19 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int8 *)(a1 + 22);
    int v21 = *(unsigned __int8 *)(a1 + 24);
    int v22 = *(unsigned __int8 *)(a1 + 25);
    int v23 = *(unsigned __int8 *)(a1 + 26);
    int v24 = *(unsigned __int8 *)(a1 + 30);
    int v25 = *(unsigned __int8 *)(a1 + 32);
    int v26 = *(unsigned __int8 *)(a1 + 38);
    int v27 = *(unsigned __int8 *)(a1 + 39);
    int v28 = *(unsigned __int8 *)(a1 + 27);
    int v29 = *(unsigned __int8 *)(a1 + 28);
    int v30 = *(unsigned __int8 *)(a1 + 29);
    int v31 = *(unsigned __int16 *)(a1 + 70);
    uint64_t v32 = *(void *)(a1 + 72);
    int v33 = *(_DWORD *)(a1 + 80);
    int v34 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v35 = *(void *)(a1 + 84);
    uint64_t v36 = *(void *)(a1 + 92);
    int v37 = &v39;
    if ((v39.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v37 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136324098;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = v20;
    __int16 v41 = 2080;
    __int16 v42 = "tx_ant_mask";
    __int16 v43 = 1024;
    int v44 = v21;
    __int16 v45 = 2080;
    __int16 v46 = "rx_ant_mask";
    __int16 v47 = 1024;
    int v48 = v22;
    __int16 v49 = 2080;
    __int16 v50 = "rx_sync_search_ant_mask";
    __int16 v51 = 1024;
    int v52 = v23;
    __int16 v53 = 2080;
    __int16 v54 = "tx_preamble";
    __int16 v55 = 1024;
    int v56 = v24;
    __int16 v57 = 2080;
    __int16 v58 = "pkt_type";
    __int16 v59 = 1024;
    int v60 = v25;
    __int16 v61 = 2080;
    __int16 v62 = "tx_mslot_sz_250us";
    __int16 v63 = 1024;
    int v64 = v26;
    __int16 v65 = 2080;
    __int16 v66 = "rx_mslot_sz_250us";
    __int16 v67 = 1024;
    int v68 = v27;
    __int16 v69 = 2080;
    __int16 v70 = "start_channel";
    __int16 v71 = 1024;
    int v72 = v28;
    __int16 v73 = 2080;
    __int16 v74 = "alternate_channel";
    __int16 v75 = 1024;
    int v76 = v29;
    __int16 v77 = 2080;
    __int16 v78 = "channel_hop_pattern_mask";
    __int16 v79 = 1024;
    int v80 = v30;
    __int16 v81 = 2080;
    int v82 = "debug_flags";
    __int16 v83 = 1024;
    int v84 = v31;
    __int16 v85 = 2080;
    int v86 = "start_time";
    __int16 v87 = 2048;
    uint64_t v88 = v32;
    __int16 v89 = 2080;
    int v90 = "start_time_uncertainty";
    __int16 v91 = 1024;
    int v92 = v33;
    __int16 v93 = 2080;
    int v94 = "interval_ms";
    __int16 v95 = 1024;
    int v96 = v34;
    __int16 v97 = 2080;
    int v98 = "local_addr";
    __int16 v99 = 2048;
    uint64_t v100 = v35;
    __int16 v101 = 2080;
    __int16 v102 = "peer_addr";
    __int16 v103 = 2048;
    uint64_t v104 = v36;
    __int16 v105 = 2080;
    char v106 = "sts_blob";
    __int16 v107 = 2080;
    char v108 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Built GR ND packet V1: {\n %s: %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %x\n , %s: %d\n , %s: %llu\n , %s: %u\n , %s: %d\n , %s: 0x%llx\n , %s: 0x%llx\n , %s: %s\n }",  __p,  0x132u);
  }

  return 1LL;
}

void sub_100150CA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100150CE0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390090();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 237)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 174)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFC0();
    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16422;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 237)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 235))) {
    sub_1003900BC();
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 2LL, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 33) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 2LL, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 237)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 34) = sub_10032BEA8((unsigned __int8 *)(a2 + 235));
  if (!*(_BYTE *)(a2 + 115)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 120)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 174)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 172);
  if (!*(_BYTE *)(a2 + 207)) {
    sub_100006080();
  }
  int v16 = *(unsigned __int8 *)(a2 + 206);
  if (v16 == 5 || v16 == 9) {
    *(_WORD *)(a1 + 27) = v16;
  }
  if (!*(_BYTE *)(a2 + 209)) {
    sub_100006080();
  }
  int v17 = *(unsigned __int8 *)(a2 + 208);
  if (v17 == 5 || v17 == 9) {
    *(_WORD *)(a1 + 29) = v17;
  }
  if (!*(_BYTE *)(a2 + 211)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 272)) {
        sub_100006080();
      }
      *(void *)(a1 + 100) = *(void *)(a2 + 264);
      goto LABEL_49;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFEC();
    return 0LL;
  }

  *(void *)(a1 + 100) = 0LL;
  *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
LABEL_49:
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_1000065CC(&v41, "0x");
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_1000065CC(__p, __str);
    if (SBYTE3(v44) >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v44) >= 0) {
      std::string::size_type v20 = BYTE3(v44);
    }
    else {
      std::string::size_type v20 = *(void *)&__p[8];
    }
    std::string::append(&v41, v19, v20);
    if (SBYTE3(v44) < 0) {
      operator delete(*(void **)__p);
    }
  }

  int v21 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 22);
    int v23 = *(unsigned __int8 *)(a1 + 24);
    int v24 = *(unsigned __int8 *)(a1 + 25);
    int v25 = *(unsigned __int8 *)(a1 + 26);
    int v26 = *(unsigned __int8 *)(a1 + 32);
    int v27 = *(unsigned __int16 *)(a1 + 34);
    int v28 = *(unsigned __int8 *)(a1 + 46);
    int v29 = *(unsigned __int8 *)(a1 + 47);
    int v30 = *(unsigned __int16 *)(a1 + 27);
    int v31 = *(unsigned __int16 *)(a1 + 29);
    int v32 = *(unsigned __int8 *)(a1 + 31);
    int v33 = *(unsigned __int16 *)(a1 + 78);
    uint64_t v34 = *(void *)(a1 + 80);
    int v35 = *(_DWORD *)(a1 + 88);
    int v36 = *(unsigned __int16 *)(a1 + 50);
    uint64_t v37 = *(void *)(a1 + 92);
    uint64_t v38 = *(void *)(a1 + 100);
    std::string v39 = &v41;
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string v39 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136324098;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    __int16 v43 = 2080;
    int v44 = "tx_ant_mask";
    __int16 v45 = 1024;
    int v46 = v23;
    __int16 v47 = 2080;
    int v48 = "rx_ant_mask";
    __int16 v49 = 1024;
    int v50 = v24;
    __int16 v51 = 2080;
    int v52 = "rx_sync_search_ant_mask";
    __int16 v53 = 1024;
    int v54 = v25;
    __int16 v55 = 2080;
    int v56 = "tx_preamble";
    __int16 v57 = 1024;
    int v58 = v26;
    __int16 v59 = 2080;
    int v60 = "pkt_type";
    __int16 v61 = 1024;
    int v62 = v27;
    __int16 v63 = 2080;
    int v64 = "tx_mslot_sz_250us";
    __int16 v65 = 1024;
    int v66 = v28;
    __int16 v67 = 2080;
    int v68 = "rx_mslot_sz_250us";
    __int16 v69 = 1024;
    int v70 = v29;
    __int16 v71 = 2080;
    int v72 = "start_channel";
    __int16 v73 = 1024;
    int v74 = v30;
    __int16 v75 = 2080;
    int v76 = "alternate_channel";
    __int16 v77 = 1024;
    int v78 = v31;
    __int16 v79 = 2080;
    int v80 = "channel_hop_pattern_mask";
    __int16 v81 = 1024;
    int v82 = v32;
    __int16 v83 = 2080;
    int v84 = "debug_flags";
    __int16 v85 = 1024;
    int v86 = v33;
    __int16 v87 = 2080;
    uint64_t v88 = "start_time";
    __int16 v89 = 2048;
    uint64_t v90 = v34;
    __int16 v91 = 2080;
    int v92 = "start_time_uncertainty";
    __int16 v93 = 1024;
    int v94 = v35;
    __int16 v95 = 2080;
    int v96 = "interval_ms";
    __int16 v97 = 1024;
    int v98 = v36;
    __int16 v99 = 2080;
    uint64_t v100 = "local_addr";
    __int16 v101 = 2048;
    uint64_t v102 = v37;
    __int16 v103 = 2080;
    uint64_t v104 = "peer_addr";
    __int16 v105 = 2048;
    uint64_t v106 = v38;
    __int16 v107 = 2080;
    char v108 = "sts_blob";
    __int16 v109 = 2080;
    char v110 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Built GR ND packet V2: {\n %s: %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %x\n , %s: %d\n , %s: %llu\n , %s: %u\n , %s: %d\n , %s: 0x%llx\n , %s: 0x%llx\n , %s: %s\n }",  __p,  0x132u);
  }

  return 1LL;
}

void sub_1001513D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100151414(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390200();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 217)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100390134();
    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16421;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (*(_BYTE *)(a2 + 163)) {
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 162);
  }
  if (*(_BYTE *)(a2 + 165)) {
    *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 164);
  }
  if (*(_BYTE *)(a2 + 167)) {
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 166);
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 110)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 108))) {
    sub_100390188();
  }
  if (!*(_BYTE *)(a2 + 113)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 111))) {
    sub_100390160();
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 30) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 1LL, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 1LL, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 110)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 109);
  if (!*(_BYTE *)(a2 + 113)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 112);
  if (!*(_BYTE *)(a2 + 115)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 201)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 200);
  if (!*(_BYTE *)(a2 + 203)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 202);
  if (!*(_BYTE *)(a2 + 217)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 216);
  if (!*(_BYTE *)(a2 + 120)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 194)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 192);
  if (!*(_BYTE *)(a2 + 198)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 196);
  if (!*(_BYTE *)(a2 + 207)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 27) = sub_10032BC40(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(_BYTE *)(a2 + 209)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 28) = sub_10032BC40(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(_BYTE *)(a2 + 211)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(void *)(a1 + 84) = *(void *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 272)) {
        sub_100006080();
      }
      *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 264);
      goto LABEL_63;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFEC();
    return 0LL;
  }

  *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 84) = 0LL;
LABEL_63:
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_1000065CC(&v48, "0x");
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_1000065CC(__p, __str);
    if (SBYTE3(v51) >= 0) {
      int v17 = __p;
    }
    else {
      int v17 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v51) >= 0) {
      std::string::size_type v18 = BYTE3(v51);
    }
    else {
      std::string::size_type v18 = *(void *)&__p[8];
    }
    std::string::append(&v48, v17, v18);
    if (SBYTE3(v51) < 0) {
      operator delete(*(void **)__p);
    }
  }

  int v19 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int8 *)(a1 + 22);
    int v21 = *(unsigned __int8 *)(a1 + 24);
    int v22 = *(unsigned __int8 *)(a1 + 25);
    int v23 = *(unsigned __int8 *)(a1 + 26);
    int v24 = *(unsigned __int8 *)(a1 + 34);
    int v25 = *(unsigned __int8 *)(a1 + 35);
    int v26 = *(unsigned __int8 *)(a1 + 36);
    int v27 = *(unsigned __int8 *)(a1 + 30);
    int v28 = *(unsigned __int8 *)(a1 + 31);
    int v29 = *(unsigned __int8 *)(a1 + 32);
    int v30 = *(unsigned __int8 *)(a1 + 33);
    int v31 = *(unsigned __int8 *)(a1 + 38);
    int v32 = *(unsigned __int8 *)(a1 + 39);
    int v33 = *(unsigned __int16 *)(a1 + 42);
    int v34 = *(unsigned __int8 *)(a1 + 46);
    int v35 = *(unsigned __int8 *)(a1 + 47);
    int v36 = *(unsigned __int8 *)(a1 + 48);
    int v37 = *(unsigned __int8 *)(a1 + 27);
    int v38 = *(unsigned __int8 *)(a1 + 28);
    int v39 = *(unsigned __int8 *)(a1 + 29);
    int v40 = *(unsigned __int16 *)(a1 + 70);
    uint64_t v41 = *(void *)(a1 + 72);
    int v42 = *(_DWORD *)(a1 + 80);
    int v46 = *(unsigned __int16 *)(a1 + 44);
    uint64_t v47 = *(void *)(a1 + 84);
    uint64_t v43 = *(void *)(a1 + 92);
    int v44 = &v48;
    if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v44 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136328706;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = v20;
    __int16 v50 = 2080;
    __int16 v51 = "tx_ant_mask";
    __int16 v52 = 1024;
    int v53 = v21;
    __int16 v54 = 2080;
    __int16 v55 = "rx_ant_mask";
    __int16 v56 = 1024;
    int v57 = v22;
    __int16 v58 = 2080;
    __int16 v59 = "rx_sync_search_ant_mask";
    __int16 v60 = 1024;
    int v61 = v23;
    __int16 v62 = 2080;
    __int16 v63 = "tx_ant_mask2";
    __int16 v64 = 1024;
    int v65 = v24;
    __int16 v66 = 2080;
    __int16 v67 = "rx_ant_mask2";
    __int16 v68 = 1024;
    int v69 = v25;
    __int16 v70 = 2080;
    __int16 v71 = "rx_sync_search_ant_mask2";
    __int16 v72 = 1024;
    int v73 = v26;
    __int16 v74 = 2080;
    __int16 v75 = "tx_preamble";
    __int16 v76 = 1024;
    int v77 = v27;
    __int16 v78 = 2080;
    __int16 v79 = "rx_preamble";
    __int16 v80 = 1024;
    int v81 = v28;
    __int16 v82 = 2080;
    __int16 v83 = "tx_pkt_type";
    __int16 v84 = 1024;
    int v85 = v29;
    __int16 v86 = 2080;
    __int16 v87 = "rx_pkt_type";
    __int16 v88 = 1024;
    int v89 = v30;
    __int16 v90 = 2080;
    __int16 v91 = "tx_mslot_sz_250us";
    __int16 v92 = 1024;
    int v93 = v31;
    __int16 v94 = 2080;
    __int16 v95 = "rx_mslot_sz_250us";
    __int16 v96 = 1024;
    int v97 = v32;
    __int16 v98 = 2080;
    __int16 v99 = "interval_min_ms";
    __int16 v100 = 1024;
    int v101 = v33;
    __int16 v102 = 2080;
    __int16 v103 = "naccess_slots_min";
    __int16 v104 = 1024;
    int v105 = v34;
    __int16 v106 = 2080;
    __int16 v107 = "naccess_slots_max";
    __int16 v108 = 1024;
    int v109 = v35;
    __int16 v110 = 2080;
    int v111 = "access_slot_idx";
    __int16 v112 = 1024;
    int v113 = v36;
    __int16 v114 = 2080;
    char v115 = "start_channel";
    __int16 v116 = 1024;
    int v117 = v37;
    __int16 v118 = 2080;
    uint64_t v119 = "alternate_channel";
    __int16 v120 = 1024;
    int v121 = v38;
    __int16 v122 = 2080;
    char v123 = "channel_hop_pattern_mask";
    __int16 v124 = 1024;
    int v125 = v39;
    __int16 v126 = 2080;
    char v127 = "debug_flags";
    __int16 v128 = 1024;
    int v129 = v40;
    __int16 v130 = 2080;
    char v131 = "start_time";
    __int16 v132 = 2048;
    uint64_t v133 = v41;
    __int16 v134 = 2080;
    char v135 = "start_time_uncertainty";
    __int16 v136 = 1024;
    int v137 = v42;
    __int16 v138 = 2080;
    char v139 = "interval_max_ms";
    __int16 v140 = 1024;
    int v141 = v46;
    __int16 v142 = 2080;
    __int16 v143 = "local_addr";
    __int16 v144 = 2048;
    uint64_t v145 = v47;
    __int16 v146 = 2080;
    char v147 = "peer_addr";
    __int16 v148 = 2048;
    uint64_t v149 = v43;
    __int16 v150 = 2080;
    char v151 = "sts_blob";
    __int16 v152 = 2080;
    uint64_t v153 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Built GR packet V1: {\n %s: %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %u\n , %s: %d\n , %s: %x\n , %s: %x\n , %s: %d\n , %s: %llu\n , %s: %u\n , %s: %d\n , %s: 0x%llx\n , %s: 0x%llx\n , %s: %s\n }",  __p,  0x1C2u);
  }

  return 1LL;
}

void sub_100151D08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100151D48(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390200();
  }
  if (!*(_BYTE *)(a2 + 97)
    || !*(_BYTE *)(a2 + 205)
    || !*(_BYTE *)(a2 + 99)
    || !*(_BYTE *)(a2 + 101)
    || !*(_BYTE *)(a2 + 103)
    || !*(_BYTE *)(a2 + 105)
    || !*(_BYTE *)(a2 + 107)
    || !*(_BYTE *)(a2 + 110)
    || !*(_BYTE *)(a2 + 113)
    || !*(_BYTE *)(a2 + 115)
    || !*(_BYTE *)(a2 + 117)
    || !*(_BYTE *)(a2 + 201)
    || !*(_BYTE *)(a2 + 203)
    || !*(_BYTE *)(a2 + 217)
    || !*(_BYTE *)(a2 + 214)
    || !*(_BYTE *)(a2 + 234)
    || !*(_BYTE *)(a2 + 120)
    || !*(_BYTE *)(a2 + 194)
    || !*(_BYTE *)(a2 + 198)
    || !*(_BYTE *)(a2 + 207)
    || !*(_BYTE *)(a2 + 209)
    || !*(_BYTE *)(a2 + 211)
    || !*(_BYTE *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100390134();
    return 0LL;
  }

  *(_WORD *)(a1 + 16) = 16421;
  if (!*(_BYTE *)(a2 + 97)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
  if (!*(_BYTE *)(a2 + 205)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 204);
  if (!*(_BYTE *)(a2 + 99)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 98);
  if (!*(_BYTE *)(a2 + 101)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 100);
  if (!*(_BYTE *)(a2 + 103)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 102);
  if (*(_BYTE *)(a2 + 163)) {
    *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 162);
  }
  if (*(_BYTE *)(a2 + 165)) {
    *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 164);
  }
  if (*(_BYTE *)(a2 + 167)) {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 166);
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 110)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 108))) {
    sub_100390254();
  }
  if (!*(_BYTE *)(a2 + 113)) {
    sub_100006080();
  }
  if (!sub_10032BE34((_BYTE *)(a2 + 111))) {
    sub_10039022C();
  }
  if (!*(_BYTE *)(a2 + 105)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 104), 2LL, v4, v5, v6, v7, v8, v9);
  if (!*(_BYTE *)(a2 + 107)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 33) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 106), 2LL, v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)(a2 + 110)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 34) = sub_10032BEA8((unsigned __int8 *)(a2 + 108));
  if (!*(_BYTE *)(a2 + 113)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 36) = sub_10032BEA8((unsigned __int8 *)(a2 + 111));
  if (!*(_BYTE *)(a2 + 115)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 114);
  if (!*(_BYTE *)(a2 + 117)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 116);
  if (!*(_BYTE *)(a2 + 201)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 200);
  if (!*(_BYTE *)(a2 + 203)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 202);
  if (!*(_BYTE *)(a2 + 217)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 216);
  if (!*(_BYTE *)(a2 + 120)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(_BYTE *)(a2 + 194)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 192);
  if (!*(_BYTE *)(a2 + 198)) {
    sub_100006080();
  }
  *(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 196);
  if (!*(_BYTE *)(a2 + 207)) {
    sub_100006080();
  }
  int v16 = *(unsigned __int8 *)(a2 + 206);
  if (v16 == 5 || v16 == 9) {
    *(_WORD *)(a1 + 27) = v16;
  }
  if (!*(_BYTE *)(a2 + 209)) {
    sub_100006080();
  }
  int v17 = *(unsigned __int8 *)(a2 + 208);
  if (v17 == 5 || v17 == 9) {
    *(_WORD *)(a1 + 29) = v17;
  }
  if (!*(_BYTE *)(a2 + 211)) {
    sub_100006080();
  }
  *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 210);
  if (!*(_BYTE *)(a2 + 280)) {
    sub_100006080();
  }
  if (!*(_BYTE *)(a2 + 240))
  {
    if (*(_BYTE *)(a2 + 256) && *(_BYTE *)(a2 + 272))
    {
      *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 280)) {
        sub_100006080();
      }
      if (!*(_BYTE *)(a2 + 272)) {
        sub_100006080();
      }
      *(void *)(a1 + 100) = *(void *)(a2 + 264);
      goto LABEL_69;
    }

    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_10038FFEC();
    return 0LL;
  }

  *(void *)(a1 + 100) = 0LL;
  *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
LABEL_69:
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_1000065CC(&v50, "0x");
  if (!*(_BYTE *)(a2 + 234)) {
    sub_100006080();
  }
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_1000065CC(__p, __str);
    if (SBYTE3(v53) >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v53) >= 0) {
      std::string::size_type v20 = BYTE3(v53);
    }
    else {
      std::string::size_type v20 = *(void *)&__p[8];
    }
    std::string::append(&v50, v19, v20);
    if (SBYTE3(v53) < 0) {
      operator delete(*(void **)__p);
    }
  }

  int v21 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 22);
    int v23 = *(unsigned __int8 *)(a1 + 24);
    int v24 = *(unsigned __int8 *)(a1 + 25);
    int v25 = *(unsigned __int8 *)(a1 + 26);
    int v26 = *(unsigned __int8 *)(a1 + 38);
    int v27 = *(unsigned __int8 *)(a1 + 39);
    int v28 = *(unsigned __int8 *)(a1 + 40);
    int v29 = *(unsigned __int8 *)(a1 + 32);
    int v30 = *(unsigned __int8 *)(a1 + 33);
    int v31 = *(unsigned __int16 *)(a1 + 34);
    int v32 = *(unsigned __int16 *)(a1 + 36);
    int v33 = *(unsigned __int8 *)(a1 + 46);
    int v34 = *(unsigned __int8 *)(a1 + 47);
    int v35 = *(unsigned __int16 *)(a1 + 50);
    int v36 = *(unsigned __int8 *)(a1 + 54);
    int v37 = *(unsigned __int8 *)(a1 + 55);
    int v38 = *(unsigned __int8 *)(a1 + 56);
    int v39 = *(unsigned __int16 *)(a1 + 27);
    int v40 = *(unsigned __int16 *)(a1 + 29);
    int v41 = *(unsigned __int8 *)(a1 + 31);
    int v42 = *(unsigned __int16 *)(a1 + 78);
    uint64_t v43 = *(void *)(a1 + 80);
    int v44 = *(_DWORD *)(a1 + 88);
    int v48 = *(unsigned __int16 *)(a1 + 52);
    uint64_t v49 = *(void *)(a1 + 92);
    uint64_t v45 = *(void *)(a1 + 100);
    int v46 = &v50;
    if ((v50.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136328706;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    __int16 v52 = 2080;
    int v53 = "tx_ant_mask";
    __int16 v54 = 1024;
    int v55 = v23;
    __int16 v56 = 2080;
    int v57 = "rx_ant_mask";
    __int16 v58 = 1024;
    int v59 = v24;
    __int16 v60 = 2080;
    int v61 = "rx_sync_search_ant_mask";
    __int16 v62 = 1024;
    int v63 = v25;
    __int16 v64 = 2080;
    int v65 = "tx_ant_mask2";
    __int16 v66 = 1024;
    int v67 = v26;
    __int16 v68 = 2080;
    int v69 = "rx_ant_mask2";
    __int16 v70 = 1024;
    int v71 = v27;
    __int16 v72 = 2080;
    int v73 = "rx_sync_search_ant_mask2";
    __int16 v74 = 1024;
    int v75 = v28;
    __int16 v76 = 2080;
    int v77 = "tx_preamble";
    __int16 v78 = 1024;
    int v79 = v29;
    __int16 v80 = 2080;
    int v81 = "rx_preamble";
    __int16 v82 = 1024;
    int v83 = v30;
    __int16 v84 = 2080;
    int v85 = "tx_pkt_type";
    __int16 v86 = 1024;
    int v87 = v31;
    __int16 v88 = 2080;
    int v89 = "rx_pkt_type";
    __int16 v90 = 1024;
    int v91 = v32;
    __int16 v92 = 2080;
    int v93 = "tx_mslot_sz_250us";
    __int16 v94 = 1024;
    int v95 = v33;
    __int16 v96 = 2080;
    int v97 = "rx_mslot_sz_250us";
    __int16 v98 = 1024;
    int v99 = v34;
    __int16 v100 = 2080;
    int v101 = "interval_min_ms";
    __int16 v102 = 1024;
    int v103 = v35;
    __int16 v104 = 2080;
    int v105 = "naccess_slots_min";
    __int16 v106 = 1024;
    int v107 = v36;
    __int16 v108 = 2080;
    int v109 = "naccess_slots_max";
    __int16 v110 = 1024;
    int v111 = v37;
    __int16 v112 = 2080;
    int v113 = "access_slot_idx";
    __int16 v114 = 1024;
    int v115 = v38;
    __int16 v116 = 2080;
    int v117 = "start_channel";
    __int16 v118 = 1024;
    int v119 = v39;
    __int16 v120 = 2080;
    int v121 = "alternate_channel";
    __int16 v122 = 1024;
    int v123 = v40;
    __int16 v124 = 2080;
    int v125 = "channel_hop_pattern_mask";
    __int16 v126 = 1024;
    int v127 = v41;
    __int16 v128 = 2080;
    int v129 = "debug_flags";
    __int16 v130 = 1024;
    int v131 = v42;
    __int16 v132 = 2080;
    uint64_t v133 = "start_time";
    __int16 v134 = 2048;
    uint64_t v135 = v43;
    __int16 v136 = 2080;
    int v137 = "start_time_uncertainty";
    __int16 v138 = 1024;
    int v139 = v44;
    __int16 v140 = 2080;
    int v141 = "interval_max_ms";
    __int16 v142 = 1024;
    int v143 = v48;
    __int16 v144 = 2080;
    uint64_t v145 = "local_addr";
    __int16 v146 = 2048;
    uint64_t v147 = v49;
    __int16 v148 = 2080;
    uint64_t v149 = "peer_addr";
    __int16 v150 = 2048;
    uint64_t v151 = v45;
    __int16 v152 = 2080;
    uint64_t v153 = "sts_blob";
    __int16 v154 = 2080;
    int v155 = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Built GR packet V2: {\n %s: %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s : %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %d\n , %s: %u\n , %s: %d\n , %s: %x\n , %s: %x\n , %s: %d\n , %s: %llu\n , %s: %u\n , %s: %d\n , %s: 0x%llx\n , %s: 0x%llx\n , %s: %s\n }",  __p,  0x1C2u);
  }

  return 1LL;
}

void sub_10015265C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10015269C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390320();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 353)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_10032BC40(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_48;
    }
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 33) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 354), 1LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360)) {
      goto LABEL_48;
    }
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369)) {
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372) {
      || (*(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 370), !*(_BYTE *)(a2 + 376))
    }
      || (*(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 374), !*(_BYTE *)(a2 + 380))
      || (*(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 378), !*(_BYTE *)(a2 + 392))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 390), !*(_BYTE *)(a2 + 408))
      || (*(_WORD *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 400), !*(_BYTE *)(a2 + 424))
      || (*(_WORD *)(a1 + 74) = *(void *)(a2 + 416), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 388)))
    {
LABEL_48:
      sub_100006080();
    }

    int v10 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 64) = v10;
    uint64_t v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(a1 + 22);
      int v13 = *(unsigned __int8 *)(a1 + 29);
      int v14 = *(unsigned __int8 *)(a1 + 30);
      int v15 = *(unsigned __int8 *)(a1 + 31);
      int v16 = *(unsigned __int16 *)(a1 + 76);
      int v17 = *(unsigned __int8 *)(a1 + 32);
      int v18 = *(unsigned __int8 *)(a1 + 33);
      int v19 = *(_DWORD *)(a1 + 34);
      int v20 = *(unsigned __int8 *)(a1 + 45);
      int v21 = *(unsigned __int8 *)(a1 + 46);
      int v22 = *(unsigned __int8 *)(a1 + 47);
      int v23 = *(unsigned __int16 *)(a1 + 48);
      int v24 = *(unsigned __int16 *)(a1 + 50);
      int v25 = *(unsigned __int16 *)(a1 + 52);
      int v26 = *(unsigned __int16 *)(a1 + 70);
      int v27 = *(unsigned __int16 *)(a1 + 72);
      int v28 = *(unsigned __int16 *)(a1 + 74);
      int v29 = *(unsigned __int8 *)(a1 + 64);
      int v30 = *(unsigned __int8 *)(a1 + 65);
      int v31 = *(unsigned __int8 *)(a1 + 66);
      int v32 = *(unsigned __int8 *)(a1 + 67);
      int v33 = *(unsigned __int8 *)(a1 + 68);
      int v34 = *(unsigned __int8 *)(a1 + 69);
      v36[0] = 67114752;
      v36[1] = v12;
      __int16 v37 = 1024;
      int v38 = v13;
      __int16 v39 = 1024;
      int v40 = v14;
      __int16 v41 = 1024;
      int v42 = v15;
      __int16 v43 = 1024;
      int v44 = v16;
      __int16 v45 = 1024;
      int v46 = v17;
      __int16 v47 = 1024;
      int v48 = v18;
      __int16 v49 = 1024;
      int v50 = v19;
      __int16 v51 = 1024;
      int v52 = v20;
      __int16 v53 = 1024;
      int v54 = v21;
      __int16 v55 = 1024;
      int v56 = v22;
      __int16 v57 = 1024;
      int v58 = v23;
      __int16 v59 = 1024;
      int v60 = v24;
      __int16 v61 = 1024;
      int v62 = v25;
      __int16 v63 = 1024;
      int v64 = v26;
      __int16 v65 = 1024;
      int v66 = v27;
      __int16 v67 = 1024;
      int v68 = v28;
      __int16 v69 = 1024;
      int v70 = v29;
      __int16 v71 = 1024;
      int v72 = v30;
      __int16 v73 = 1024;
      int v74 = v31;
      __int16 v75 = 1024;
      int v76 = v32;
      __int16 v77 = 1024;
      int v78 = v33;
      __int16 v79 = 1024;
      int v80 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Built FiRa Unicast packet V1: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , channel: %u\n , preamble: %u\n , uwb_ses_id: 0x%x\n , tx_pulse_shape: %u\n , rx_pulse_shape: %u\n , sfd_id: %u \n , nrstus_per_slot: %u\n , nslots_per_round: %u\n , nrounds_per_block: %u\n , vendor_id: 0x%x\n , local_addr: 0x%x\n , peer_addr: 0x%x\n , static_sts_iv:[%x, %x, %x, %x, %x, %x]}",  (uint8_t *)v36,  0x8Cu);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003902CC();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100152AA8(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390320();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_51;
    }
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 34) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 354), 2LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360)) {
      goto LABEL_51;
    }
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369)) {
      goto LABEL_51;
    }
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 6sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 392)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 390);
    if (!*(_BYTE *)(a2 + 408)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 90) = *(void *)(a2 + 400);
    if (!*(_BYTE *)(a2 + 424)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 416);
    if (!*(_BYTE *)(a2 + 120)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 353)) {
      goto LABEL_51;
    }
    int v10 = *(unsigned __int8 *)(a2 + 352);
    if (v10 == 5 || v10 == 9) {
      *(_WORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v10;
    }
    if (!*(_BYTE *)(a2 + 388)) {
LABEL_51:
    }
      sub_100006080();
    int v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 8sub_10014C374((uint64_t)&unk_1007F8180, 2) = v11;
    int v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 29);
      int v15 = *(unsigned __int8 *)(a1 + 30);
      int v16 = *(unsigned __int8 *)(a1 + 31);
      int v17 = *(unsigned __int16 *)(a1 + 94);
      int v18 = *(unsigned __int16 *)(a1 + 32);
      int v19 = *(unsigned __int8 *)(a1 + 34);
      int v20 = *(_DWORD *)(a1 + 35);
      int v21 = *(unsigned __int8 *)(a1 + 55);
      int v22 = *(unsigned __int8 *)(a1 + 56);
      int v23 = *(unsigned __int8 *)(a1 + 57);
      int v24 = *(unsigned __int16 *)(a1 + 58);
      int v25 = *(unsigned __int16 *)(a1 + 60);
      int v26 = *(unsigned __int16 *)(a1 + 62);
      int v27 = *(unsigned __int16 *)(a1 + 88);
      int v28 = *(unsigned __int16 *)(a1 + 90);
      int v29 = *(unsigned __int16 *)(a1 + 92);
      int v30 = *(unsigned __int8 *)(a1 + 82);
      int v31 = *(unsigned __int8 *)(a1 + 83);
      int v32 = *(unsigned __int8 *)(a1 + 84);
      int v33 = *(unsigned __int8 *)(a1 + 85);
      int v34 = *(unsigned __int8 *)(a1 + 86);
      int v35 = *(unsigned __int8 *)(a1 + 87);
      v37[0] = 67114752;
      v37[1] = v13;
      __int16 v38 = 1024;
      int v39 = v14;
      __int16 v40 = 1024;
      int v41 = v15;
      __int16 v42 = 1024;
      int v43 = v16;
      __int16 v44 = 1024;
      int v45 = v17;
      __int16 v46 = 1024;
      int v47 = v18;
      __int16 v48 = 1024;
      int v49 = v19;
      __int16 v50 = 1024;
      int v51 = v20;
      __int16 v52 = 1024;
      int v53 = v21;
      __int16 v54 = 1024;
      int v55 = v22;
      __int16 v56 = 1024;
      int v57 = v23;
      __int16 v58 = 1024;
      int v59 = v24;
      __int16 v60 = 1024;
      int v61 = v25;
      __int16 v62 = 1024;
      int v63 = v26;
      __int16 v64 = 1024;
      int v65 = v27;
      __int16 v66 = 1024;
      int v67 = v28;
      __int16 v68 = 1024;
      int v69 = v29;
      __int16 v70 = 1024;
      int v71 = v30;
      __int16 v72 = 1024;
      int v73 = v31;
      __int16 v74 = 1024;
      int v75 = v32;
      __int16 v76 = 1024;
      int v77 = v33;
      __int16 v78 = 1024;
      int v79 = v34;
      __int16 v80 = 1024;
      int v81 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Built FiRa Unicast packet V2: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , channel: %u\n , preamble: %u\n , uwb_ses_id: 0x%x\n , tx_pulse_shape: %u\n , rx_pulse_shape: %u\n , sfd_id: %u \n , nrstus_per_slot: %u\n , nslots_per_round: %u\n , nrounds_per_block: %u\n , vendor_id: 0x%x\n , local_addr: 0x%x\n , peer_addr: 0x%x\n , static_sts_iv:[%x, %x, %x, %x, %x, %x]\n }",  (uint8_t *)v37,  0x8Cu);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003902CC();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100152EBC(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003903C8();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 433)
    && *(_BYTE *)(a2 + 435)
    && *(_BYTE *)(a2 + 437)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 353)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_10032BC40(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_54;
    }
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 33) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 354), 1LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360)) {
      goto LABEL_54;
    }
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369)) {
      goto LABEL_54;
    }
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 433)
      || (*(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 432), !*(_BYTE *)(a2 + 435))
      || (*(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 434), !*(_BYTE *)(a2 + 437))
      || (*(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 436), !*(_BYTE *)(a2 + 392))
      || (*(_WORD *)(a1 + 75) = *(_WORD *)(a2 + 390), !*(_BYTE *)(a2 + 408))
      || (*(void *)(a1 + 77) = *(void *)(a2 + 400), !*(_BYTE *)(a2 + 424))
      || (*(void *)(a1 + 85) = *(void *)(a2 + 416), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 93) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 388)))
    {
LABEL_54:
      sub_100006080();
    }

    int v10 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 69) = v10;
    int v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(a1 + 22);
      int v13 = *(unsigned __int8 *)(a1 + 29);
      int v14 = *(unsigned __int8 *)(a1 + 30);
      int v15 = *(unsigned __int8 *)(a1 + 31);
      int v16 = *(unsigned __int16 *)(a1 + 93);
      int v17 = *(unsigned __int8 *)(a1 + 32);
      int v18 = *(unsigned __int8 *)(a1 + 33);
      int v19 = *(_DWORD *)(a1 + 34);
      int v20 = *(unsigned __int8 *)(a1 + 48);
      int v21 = *(unsigned __int8 *)(a1 + 49);
      int v22 = *(unsigned __int8 *)(a1 + 50);
      int v23 = *(unsigned __int16 *)(a1 + 51);
      int v24 = *(unsigned __int16 *)(a1 + 53);
      int v25 = *(unsigned __int16 *)(a1 + 55);
      int v26 = *(unsigned __int8 *)(a1 + 23);
      int v27 = *(unsigned __int8 *)(a1 + 57);
      int v28 = *(unsigned __int8 *)(a1 + 58);
      int v29 = *(unsigned __int16 *)(a1 + 75);
      uint64_t v30 = *(void *)(a1 + 77);
      uint64_t v31 = *(void *)(a1 + 85);
      int v32 = *(unsigned __int8 *)(a1 + 69);
      int v33 = *(unsigned __int8 *)(a1 + 70);
      int v34 = *(unsigned __int8 *)(a1 + 71);
      int v35 = *(unsigned __int8 *)(a1 + 72);
      int v36 = *(unsigned __int8 *)(a1 + 73);
      int v37 = *(unsigned __int8 *)(a1 + 74);
      v39[0] = 67115520;
      v39[1] = v12;
      __int16 v40 = 1024;
      int v41 = v13;
      __int16 v42 = 1024;
      int v43 = v14;
      __int16 v44 = 1024;
      int v45 = v15;
      __int16 v46 = 1024;
      int v47 = v16;
      __int16 v48 = 1024;
      int v49 = v17;
      __int16 v50 = 1024;
      int v51 = v18;
      __int16 v52 = 1024;
      int v53 = v19;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v21;
      __int16 v58 = 1024;
      int v59 = v22;
      __int16 v60 = 1024;
      int v61 = v23;
      __int16 v62 = 1024;
      int v63 = v24;
      __int16 v64 = 1024;
      int v65 = v25;
      __int16 v66 = 1024;
      int v67 = v26;
      __int16 v68 = 1024;
      int v69 = v27;
      __int16 v70 = 1024;
      int v71 = v28;
      __int16 v72 = 1024;
      int v73 = v29;
      __int16 v74 = 2048;
      uint64_t v75 = v30;
      __int16 v76 = 2048;
      uint64_t v77 = v31;
      __int16 v78 = 1024;
      int v79 = v32;
      __int16 v80 = 1024;
      int v81 = v33;
      __int16 v82 = 1024;
      int v83 = v34;
      __int16 v84 = 1024;
      int v85 = v35;
      __int16 v86 = 1024;
      int v87 = v36;
      __int16 v88 = 1024;
      int v89 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Built FiRa Contention Based packet V1: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , channel: %u\n , preamble: %u\n , uwb_ses_id: 0x%x\n , tx_pulse_shape: %u\n , rx_pulse_shape: %u\n , sfd_id: %u \n , nrstus_per_slot: %u\n , nslots_per_round: %u\n , nrounds_per_block: %u\n , ranging_type: %u\n , cap_size_min: %u\n , cap_size_max: %u\n , vendor_id: 0x%x\n , local_addr: 0x%llx\n , peer_addr: 0x%llx\n , static_sts_iv:[%x, %x, %x, %x, %x, %x]}",  (uint8_t *)v39,  0xA6u);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100390374();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100153344(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003903C8();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 353)
    && *(_BYTE *)(a2 + 355)
    && *(_BYTE *)(a2 + 360)
    && *(_BYTE *)(a2 + 365)
    && *(_BYTE *)(a2 + 367)
    && *(_BYTE *)(a2 + 369)
    && *(_BYTE *)(a2 + 372)
    && *(_BYTE *)(a2 + 376)
    && *(_BYTE *)(a2 + 380)
    && *(_BYTE *)(a2 + 433)
    && *(_BYTE *)(a2 + 435)
    && *(_BYTE *)(a2 + 437)
    && *(_BYTE *)(a2 + 388)
    && *(_BYTE *)(a2 + 392)
    && *(_BYTE *)(a2 + 408)
    && *(_BYTE *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_57;
    }
    if (!*(_BYTE *)(a2 + 355)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 34) = sub_10032ADC8(*(unsigned __int8 *)(a2 + 354), 2LL, v4, v5, v6, v7, v8, v9);
    if (!*(_BYTE *)(a2 + 360)) {
      goto LABEL_57;
    }
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(_BYTE *)(a2 + 365)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 364);
    if (!*(_BYTE *)(a2 + 367)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 366);
    if (!*(_BYTE *)(a2 + 369)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 368);
    if (!*(_BYTE *)(a2 + 372)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 370);
    if (!*(_BYTE *)(a2 + 376)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 374);
    if (!*(_BYTE *)(a2 + 380)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 378);
    if (!*(_BYTE *)(a2 + 433)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 432);
    if (!*(_BYTE *)(a2 + 435)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 434);
    if (!*(_BYTE *)(a2 + 437)) {
      goto LABEL_57;
    }
    *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 436);
    if (!*(_BYTE *)(a2 + 392)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 390);
    if (!*(_BYTE *)(a2 + 408)) {
      goto LABEL_57;
    }
    *(void *)(a1 + 78) = *(void *)(a2 + 400);
    if (!*(_BYTE *)(a2 + 424)) {
      goto LABEL_57;
    }
    *(void *)(a1 + 86) = *(void *)(a2 + 416);
    if (!*(_BYTE *)(a2 + 120)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 353)) {
      goto LABEL_57;
    }
    int v10 = *(unsigned __int8 *)(a2 + 352);
    if (v10 == 5 || v10 == 9) {
      *(_WORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v10;
    }
    if (!*(_BYTE *)(a2 + 388)) {
LABEL_57:
    }
      sub_100006080();
    int v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 70) = v11;
    int v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 29);
      int v15 = *(unsigned __int8 *)(a1 + 30);
      int v16 = *(unsigned __int8 *)(a1 + 31);
      int v17 = *(unsigned __int16 *)(a1 + 94);
      int v18 = *(unsigned __int16 *)(a1 + 32);
      int v19 = *(unsigned __int8 *)(a1 + 34);
      int v20 = *(_DWORD *)(a1 + 35);
      int v21 = *(unsigned __int8 *)(a1 + 49);
      int v22 = *(unsigned __int8 *)(a1 + 50);
      int v23 = *(unsigned __int8 *)(a1 + 51);
      int v24 = *(unsigned __int16 *)(a1 + 52);
      int v25 = *(unsigned __int16 *)(a1 + 54);
      int v26 = *(unsigned __int16 *)(a1 + 56);
      int v27 = *(unsigned __int8 *)(a1 + 23);
      int v28 = *(unsigned __int8 *)(a1 + 58);
      int v29 = *(unsigned __int8 *)(a1 + 59);
      int v30 = *(unsigned __int16 *)(a1 + 76);
      uint64_t v31 = *(void *)(a1 + 78);
      uint64_t v32 = *(void *)(a1 + 86);
      int v33 = *(unsigned __int8 *)(a1 + 70);
      int v34 = *(unsigned __int8 *)(a1 + 71);
      int v35 = *(unsigned __int8 *)(a1 + 72);
      int v36 = *(unsigned __int8 *)(a1 + 73);
      int v37 = *(unsigned __int8 *)(a1 + 74);
      int v38 = *(unsigned __int8 *)(a1 + 75);
      v40[0] = 67115520;
      v40[1] = v13;
      __int16 v41 = 1024;
      int v42 = v14;
      __int16 v43 = 1024;
      int v44 = v15;
      __int16 v45 = 1024;
      int v46 = v16;
      __int16 v47 = 1024;
      int v48 = v17;
      __int16 v49 = 1024;
      int v50 = v18;
      __int16 v51 = 1024;
      int v52 = v19;
      __int16 v53 = 1024;
      int v54 = v20;
      __int16 v55 = 1024;
      int v56 = v21;
      __int16 v57 = 1024;
      int v58 = v22;
      __int16 v59 = 1024;
      int v60 = v23;
      __int16 v61 = 1024;
      int v62 = v24;
      __int16 v63 = 1024;
      int v64 = v25;
      __int16 v65 = 1024;
      int v66 = v26;
      __int16 v67 = 1024;
      int v68 = v27;
      __int16 v69 = 1024;
      int v70 = v28;
      __int16 v71 = 1024;
      int v72 = v29;
      __int16 v73 = 1024;
      int v74 = v30;
      __int16 v75 = 2048;
      uint64_t v76 = v31;
      __int16 v77 = 2048;
      uint64_t v78 = v32;
      __int16 v79 = 1024;
      int v80 = v33;
      __int16 v81 = 1024;
      int v82 = v34;
      __int16 v83 = 1024;
      int v84 = v35;
      __int16 v85 = 1024;
      int v86 = v36;
      __int16 v87 = 1024;
      int v88 = v37;
      __int16 v89 = 1024;
      int v90 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Built FiRa Contention Based packet V2: {\n ses_role: %u\n , tx_ant_mask: %u\n , rx_ant_mask: %u\n , rx_sync_search_ant_mask: %u\n , debug_flags: 0x%x\n , channel: %u\n , preamble: %u\n , uwb_ses_id: 0x%x\n , tx_pulse_shape: %u\n , rx_pulse_shape: %u\n , sfd_id: %u \n , nrstus_per_slot: %u\n , nslots_per_round: %u\n , nrounds_per_block: %u\n , ranging_type: %u\n , cap_size_min: %u\n , cap_size_max: %u\n , vendor_id: 0x%x\n , local_addr: 0x%llx\n , peer_addr: 0x%llx\n , static_sts_iv:[%x, %x, %x, %x, %x, %x]\n }",  (uint8_t *)v40,  0xA6u);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003903F4();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1001537D4(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390474();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 441)
    && *(_BYTE *)(a2 + 443)
    && *(_BYTE *)(a2 + 446)
    && *(_BYTE *)(a2 + 450)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 456)
    && *(_BYTE *)(a2 + 471)
    && *(_BYTE *)(a2 + 466)
    && *(_BYTE *)(a2 + 453)
    && *(_BYTE *)(a2 + 469)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16480;
    if (!*(_BYTE *)(a2 + 97)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 441)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 440);
    if (!*(_BYTE *)(a2 + 443)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 442);
    if (!*(_BYTE *)(a2 + 446)) {
      goto LABEL_47;
    }
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 444);
    if (!*(_BYTE *)(a2 + 450)) {
      goto LABEL_47;
    }
    *(_WORD *)(a1 + 27) = *(_WORD *)(a2 + 448);
    if (!*(_BYTE *)(a2 + 99)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 4sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 163)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 165)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167)) {
      goto LABEL_47;
    }
    *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 456) {
      || (*(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 454), !*(_BYTE *)(a2 + 471))
    }
      || (*(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 470), !*(_BYTE *)(a2 + 466))
      || (*(_WORD *)(a1 + 47) = *(_WORD *)(a2 + 464), !*(_BYTE *)(a2 + 453))
      || (*(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 452), !*(_BYTE *)(a2 + 469))
      || (*(_BYTE *)(a1 + 6sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 468), !*(_BYTE *)(a2 + 120))
      || (*(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118), !*(_BYTE *)(a2 + 174))
      || (*(_WORD *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 172), !*(_BYTE *)(a2 + 184)))
    {
LABEL_47:
      sub_100006080();
    }

    *(void *)(a1 + 94) = *(void *)(a2 + 176);
    uint64_t v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 22);
      int v6 = *(unsigned __int8 *)(a1 + 23);
      int v7 = *(unsigned __int8 *)(a1 + 24);
      int v8 = *(unsigned __int16 *)(a1 + 25);
      int v9 = *(unsigned __int16 *)(a1 + 27);
      int v10 = *(unsigned __int8 *)(a1 + 41);
      int v11 = *(unsigned __int8 *)(a1 + 42);
      int v12 = *(unsigned __int8 *)(a1 + 43);
      int v13 = *(unsigned __int8 *)(a1 + 49);
      int v14 = *(unsigned __int8 *)(a1 + 50);
      int v15 = *(unsigned __int8 *)(a1 + 51);
      int v16 = *(unsigned __int16 *)(a1 + 44);
      int v17 = *(unsigned __int8 *)(a1 + 46);
      int v18 = *(unsigned __int16 *)(a1 + 47);
      int v19 = *(unsigned __int8 *)(a1 + 60);
      int v20 = *(unsigned __int8 *)(a1 + 61);
      int v21 = *(unsigned __int16 *)(a1 + 78);
      int v22 = *(unsigned __int16 *)(a1 + 92);
      uint64_t v23 = *(void *)(a1 + 94);
      v25[0] = 67113728;
      v25[1] = v5;
      __int16 v26 = 1024;
      int v27 = v6;
      __int16 v28 = 1024;
      int v29 = v7;
      __int16 v30 = 1024;
      int v31 = v8;
      __int16 v32 = 1024;
      int v33 = v9;
      __int16 v34 = 1024;
      int v35 = v10;
      __int16 v36 = 1024;
      int v37 = v11;
      __int16 v38 = 1024;
      int v39 = v12;
      __int16 v40 = 1024;
      int v41 = v13;
      __int16 v42 = 1024;
      int v43 = v14;
      __int16 v44 = 1024;
      int v45 = v15;
      __int16 v46 = 1024;
      int v47 = v16;
      __int16 v48 = 1024;
      int v49 = v17;
      __int16 v50 = 1024;
      int v51 = v18;
      __int16 v52 = 1024;
      int v53 = v19;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v21;
      __int16 v58 = 1024;
      int v59 = v22;
      __int16 v60 = 2048;
      uint64_t v61 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Built Test NMI packet: {\n , ses_role: %u\n , nb_tx_ant_mask: %u\n , nb_rx_ant_mask: %u\n , nb_pkt_type: %u\n , nb_band_channel: %u\n , mms_tx_ant_mask: %u\n , mms_rx_ant_mask: %u\n , mms_sync_search_ant_mask: %u\n , mms_tx_ant_mask2: %u\n , mms_rx_ant_mask2: %u\n , mms_sync_search_ant_mask2: %u\n , mms_packet_type: %u\n , mms_num_fragments: %u\n , mms_band_channel: %u\n , nb_slot_size: %u\n , mms_slot_size: %u\n , debug_flags: 0x%x\n , interval_ms: %u\n , mac_addr: %llu",  (uint8_t *)v25,  0x78u);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100390448();
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100153B84(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003904CC();
  }
  if (*(_BYTE *)(a2 + 97)
    && *(_BYTE *)(a2 + 441)
    && *(_BYTE *)(a2 + 443)
    && *(_BYTE *)(a2 + 446)
    && *(_BYTE *)(a2 + 450)
    && *(_BYTE *)(a2 + 99)
    && *(_BYTE *)(a2 + 101)
    && *(_BYTE *)(a2 + 103)
    && *(_BYTE *)(a2 + 163)
    && *(_BYTE *)(a2 + 165)
    && *(_BYTE *)(a2 + 167)
    && *(_BYTE *)(a2 + 497)
    && *(_BYTE *)(a2 + 456)
    && *(_BYTE *)(a2 + 459)
    && *(_BYTE *)(a2 + 461)
    && *(_BYTE *)(a2 + 463)
    && *(_BYTE *)(a2 + 471)
    && *(_BYTE *)(a2 + 466)
    && *(_BYTE *)(a2 + 453)
    && *(_BYTE *)(a2 + 469)
    && *(_BYTE *)(a2 + 120)
    && *(_BYTE *)(a2 + 174)
    && *(_BYTE *)(a2 + 474)
    && *(_BYTE *)(a2 + 477)
    && *(_BYTE *)(a2 + 479)
    && *(_BYTE *)(a2 + 499)
    && *(_BYTE *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16481;
    if (!*(_BYTE *)(a2 + 97)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 96);
    if (!*(_BYTE *)(a2 + 441)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 440);
    if (!*(_BYTE *)(a2 + 443)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 442);
    if (!*(_BYTE *)(a2 + 446)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 444);
    if (!*(_BYTE *)(a2 + 450)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 23) = *(_WORD *)(a2 + 448);
    if (!*(_BYTE *)(a2 + 99)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 98);
    if (!*(_BYTE *)(a2 + 101)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 100);
    if (!*(_BYTE *)(a2 + 103)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 102);
    if (!*(_BYTE *)(a2 + 456)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 454);
    if (!*(_BYTE *)(a2 + 459)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 458) - 1;
    if (!*(_BYTE *)(a2 + 461)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 460);
    if (!*(_BYTE *)(a2 + 463)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 6sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_BYTE *)(a2 + 462);
    if (!*(_BYTE *)(a2 + 471)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_BYTE *)(a2 + 470);
    if (!*(_BYTE *)(a2 + 466)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 464);
    if (!*(_BYTE *)(a2 + 453)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 452);
    if (!*(_BYTE *)(a2 + 469)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 468);
    if (!*(_BYTE *)(a2 + 120)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118);
    if (!*(_BYTE *)(a2 + 174)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 172);
    if (!*(_BYTE *)(a2 + 474)) {
      sub_100006080();
    }
    *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 472);
    if (!*(_BYTE *)(a2 + 477)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 476);
    if (!*(_BYTE *)(a2 + 479)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 478);
    if (!*(_BYTE *)(a2 + 184)) {
      sub_100006080();
    }
    *(void *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 480);
    if (!*(_BYTE *)(a2 + 497)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 496);
    if (!*(_BYTE *)(a2 + 163)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 162);
    if (!*(_BYTE *)(a2 + 165)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 164);
    if (!*(_BYTE *)(a2 + 167)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 166);
    if (!*(_BYTE *)(a2 + 499)) {
      sub_100006080();
    }
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 498);
    uint64_t v4 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 22);
      int v6 = *(unsigned __int8 *)(a1 + 33);
      int v7 = *(unsigned __int8 *)(a1 + 34);
      int v8 = *(unsigned __int16 *)(a1 + 35);
      int v9 = *(unsigned __int16 *)(a1 + 23);
      int v10 = *(unsigned __int8 *)(a1 + 47);
      int v11 = *(unsigned __int8 *)(a1 + 48);
      int v17 = *(unsigned __int8 *)(a1 + 49);
      int v18 = *(unsigned __int8 *)(a1 + 55);
      int v19 = *(unsigned __int8 *)(a1 + 56);
      int v20 = *(unsigned __int8 *)(a1 + 57);
      int v21 = *(unsigned __int8 *)(a1 + 58);
      int v22 = *(unsigned __int16 *)(a1 + 50);
      int v23 = *(unsigned __int8 *)(a1 + 59);
      int v24 = *(unsigned __int8 *)(a1 + 60);
      int v25 = *(unsigned __int8 *)(a1 + 61);
      int v26 = *(unsigned __int8 *)(a1 + 52);
      int v27 = *(unsigned __int16 *)(a1 + 53);
      int v28 = *(unsigned __int8 *)(a1 + 65);
      int v29 = *(unsigned __int8 *)(a1 + 67);
      int v30 = *(unsigned __int16 *)(a1 + 76);
      int v31 = *(unsigned __int16 *)(a1 + 90);
      int v32 = *(unsigned __int16 *)(a1 + 37);
      int v33 = *(unsigned __int8 *)(a1 + 64);
      int v34 = *(unsigned __int8 *)(a1 + 66);
      uint64_t v35 = *(void *)(a1 + 92);
      int v36 = *(unsigned __int8 *)(a1 + 75);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 100, 16LL));
      uint64_t v14 = CUPrintNSObjectMasked(v12, v13);
      int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)__int128 buf = 67116034;
      int v38 = v5;
      __int16 v39 = 1024;
      int v40 = v6;
      __int16 v41 = 1024;
      int v42 = v7;
      __int16 v43 = 1024;
      int v44 = v8;
      __int16 v45 = 1024;
      int v46 = v9;
      __int16 v47 = 1024;
      int v48 = v10;
      __int16 v49 = 1024;
      int v50 = v11;
      __int16 v51 = 1024;
      int v52 = v17;
      __int16 v53 = 1024;
      int v54 = v18;
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v57 = 1024;
      int v58 = v20;
      __int16 v59 = 1024;
      int v60 = v21;
      __int16 v61 = 1024;
      int v62 = v22;
      __int16 v63 = 1024;
      int v64 = v23;
      __int16 v65 = 1024;
      int v66 = v24;
      __int16 v67 = 1024;
      int v68 = v25;
      __int16 v69 = 1024;
      int v70 = v26;
      __int16 v71 = 1024;
      int v72 = v27;
      __int16 v73 = 1024;
      int v74 = v28;
      __int16 v75 = 1024;
      int v76 = v29;
      __int16 v77 = 1024;
      int v78 = v30;
      __int16 v79 = 1024;
      int v80 = v31;
      __int16 v81 = 1024;
      int v82 = v32;
      __int16 v83 = 1024;
      int v84 = v33;
      __int16 v85 = 1024;
      int v86 = v34;
      __int16 v87 = 2048;
      uint64_t v88 = v35;
      __int16 v89 = 1024;
      int v90 = v36;
      __int16 v91 = 2112;
      __int16 v92 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Built NMI packet: {\n , ses_role: %u\n , nb_tx_ant_mask: %u\n , nb_rx_ant_mask: %u\n , nb_pkt_type: %u\n , nap_band_channel: %u\n , mms_tx_ant_mask: %u\n , mms_rx_ant_mask: %u\n , mms_sync_search_ant_mask: %u\n , mms_tx_ant_mask2: %u\n , mms_rx_ant_mask2: %u\n , mms_sync_search_ant_mask2: %u\n , mms_ant_diversity_pattern: %u\n , mms_packet_type: %u\n , mms_psr_minus_one: %u\n , mms_gap: %u\n , mms_seq_idex: %u\n , mms_num_fragments: %u\n , mms_band_channel: %u\n , nb_slot_size: %u\n , mms_slot_size: %u\n , debug_flags: 0x%x\n , interval_ms: %u\n , nb_ch_sel_mask: %u\n , nap_slot_size: %u\n , data_slot_size: %u\n , mac_addr: %llu\n , misc_setting: %hu\n , irk: %@\n }",  buf,  0xB2u);
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1003904A0();
      return 0LL;
    }
  }

  return result;
}

void sub_100154208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10015422C(char *a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( exception,  "PRRoseProvider::populateRangingTriggerConfig got Unspecified mac mode");
    case 1:
      char v2 = *(_BYTE *)(a2 + 1) != 0;
      goto LABEL_3;
    case 2:
    case 3:
    case 5:
    case 6:
      goto LABEL_2;
    case 4:
      if (*(_BYTE *)(a2 + 280))
      {
        a1[3] = *(_BYTE *)(a2 + 241);
        int v6 = *(unsigned __int8 *)(a2 + 240);
        a1[1] = v6;
        a1[2] = *(_BYTE *)(a2 + 242);
        if (v6) {
          char v2 = 5;
        }
        else {
          char v2 = 4;
        }
        goto LABEL_3;
      }

      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_1003904F8();
      return 0LL;
    case 7:
      if (*(_BYTE *)(a2 + 290))
      {
        if (*(_BYTE *)(a2 + 288)) {
          sub_100390550();
        }
LABEL_2:
        char v2 = 4;
LABEL_3:
        *a1 = v2;
        return 1LL;
      }

      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_100390524();
      return 0LL;
    case 8:
      if (*(_BYTE *)(a2 + 290))
      {
        char v4 = *(_BYTE *)(a2 + 288);
        if (v4) {
          char v5 = 5;
        }
        else {
          char v5 = 4;
        }
        *a1 = v5;
        a1[1] = v4;
        a1[2] = *(_BYTE *)(a2 + 289);
        return 1LL;
      }

      else
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
        if (result)
        {
          sub_100390578();
          return 0LL;
        }
      }

      return result;
    default:
      return 0LL;
  }

void sub_1001543A0(_Unwind_Exception *a1)
{
}

BOOL sub_1001543B4(_BYTE *a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 60))
  {
    case 0:
      BOOL result = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1003905A4();
        return 0LL;
      }

      return result;
    case 1:
      *a1 = 0;
      return 1LL;
    case 2:
      BOOL result = 1LL;
      *a1 = 1;
      return result;
    case 3:
      *a1 = 2;
      return 1LL;
    default:
      return 1LL;
  }

uint64_t sub_100154440(int a1)
{
  return a1 | 0x10000u;
}

void sub_100154448(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(unsigned __int8 *)(a3 + 56);
  if (*(_BYTE *)(a3 + 87)) {
    unsigned __int8 v8 = *(_BYTE *)(a3 + 86);
  }
  else {
    unsigned __int8 v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 60);
  unsigned int v10 = *(_DWORD *)(a3 + 64);
  if (*(_BYTE *)(a3 + 81)) {
    unsigned __int8 v11 = *(_BYTE *)(a3 + 80);
  }
  else {
    unsigned __int8 v11 = 0;
  }
  unsigned int v12 = v7 - 1;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 3)
    {
      unint64_t v14 = *(void *)(a3 + 48);
      unint64_t v18 = HIDWORD(v14);
      unint64_t v16 = v14 & 0xFFFF000000000000LL;
      int v19 = 1;
    }

    else
    {
      int v19 = 0;
      LODWORD(v14) = 0;
      LOWORD(v18) = 0;
      unint64_t v16 = 0LL;
    }

    LODWORD(v13) = 0;
    BOOL v15 = *(_BYTE *)(a3 + 76) != 0;
  }

  else
  {
    uint64_t v13 = *(void *)(a3 + 48);
    LODWORD(v14) = v13;
    BOOL v15 = *(_BYTE *)(a3 + 76) != 0;
    unint64_t v16 = 0LL;
    if (v7 == 2 && *(_BYTE *)(a3 + 76) != 0)
    {
      int v19 = 0;
      LODWORD(v18) = *(_DWORD *)(a3 + 72);
      int v20 = 1;
      if (!v10) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }

    LOWORD(v18) = 0;
    int v19 = 0;
    if (v7 == 2)
    {
LABEL_26:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
        sub_1003905D0();
      }
      goto LABEL_28;
    }
  }

  if (v15) {
    goto LABEL_26;
  }
  int v20 = 0;
  if (!v10)
  {
LABEL_33:
    LOWORD(v23) = 0;
    unsigned int v45 = 0;
    LOWORD(v46) = 0;
    goto LABEL_34;
  }

void sub_1001549F8(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003906AC();
  }
  *(_WORD *)(a2 + 16) = 16420;
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"LPEMModeOverride"]);
  if (v6 && (uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v5), (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    unsigned int v8 = [v6 unsignedShortValue];
    unsigned int v9 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      unsigned int v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LPEM mode override: %d", buf, 8u);
    }
  }

  else
  {
    LOWORD(v8) = 0;
  }

  *(_WORD *)(a2 + 20) = v8;
  unint64_t v10 = a1[1] - *a1;
  if (v10 <= 1)
  {
    if (v10 == 1)
    {
      if (**a1 == 5) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = 2;
      }
    }

    else
    {
      unsigned int v11 = 2;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  sub_1001418B0(v11, (uint64_t)v21);
  *(_BYTE *)(a2 + 2sub_10014C374((uint64_t)&unk_1007F8180, 2) = sub_1001498FC((uint64_t)v21);
  *(_BYTE *)(a2 + 23) = sub_100149904((uint64_t)v21);
  char v12 = sub_10014990C((uint64_t)v21);
  *(_BYTE *)(a2 + 25) = 0;
  *(_BYTE *)(a2 + 24) = v12;
  unint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  while (v14 != v13)
    sub_10032BA64((_BYTE *)(a2 + 25), *v14++);
  BOOL v15 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v16 = *(unsigned __int16 *)(a2 + 20);
    int v17 = *(unsigned __int8 *)(a2 + 22);
    int v18 = *(unsigned __int8 *)(a2 + 23);
    int v19 = *(unsigned __int8 *)(a2 + 24);
    int v20 = *(unsigned __int8 *)(a2 + 25);
    *(_DWORD *)__int128 buf = 67110144;
    unsigned int v23 = v16;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    __int16 v30 = 1024;
    int v31 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Built LPEM enable packet: {\n mode: %d\n , tx_ant_mask: %d\n , rx_ant_mask: %d\n , rx_sync_search_ant_mask: %d\n , rf_channel_bitmask: %d\n }",  buf,  0x20u);
  }
}

void sub_100154C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100154C78(unsigned int a1, unsigned int a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10039075C();
  }
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_1003906D8();
    }
    unint64_t v10 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 511;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }

    abort();
  }

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_100390704();
    }
    unsigned int v11 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 512;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }

    abort();
  }

  if (a1 == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_100390730();
    }
    char v12 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 513;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }

    abort();
  }

  v13[0] = a1;
  v13[1] = a2;
  *(void *)&v13[2] = a3;
  int v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    if (a1 > 3) {
      uint64_t v7 = "Unspecified";
    }
    else {
      uint64_t v7 = (&off_1007B1308)[(char)(a1 - 1)];
    }
    if (a2 > 3) {
      unsigned int v8 = "Unspecified";
    }
    else {
      unsigned int v8 = (&off_1007B1308)[(char)(a2 - 1)];
    }
    *(_DWORD *)__int128 buf = 136315650;
    BOOL v15 = v7;
    __int16 v16 = 2080;
    *(void *)int v17 = v8;
    *(_WORD *)&v17[8] = 2048;
    *(void *)&v17[10] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Built convert time command packet: {\n, timebaseFrom: %s\n, timebaseTo: %s\n, timeToConvertUsec: %llu\n}",  buf,  0x20u);
  }

  return *(void *)v13;
}

uint64_t sub_100154F9C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003907B4();
  }
  unsigned int v2 = a1 - 1;
  uint64_t v3 = (os_log_s *)qword_1008000A0;
  if ((a1 - 1) > 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_100390788();
    }
    int v6 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      unsigned int v8 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisorPacketBuilder.mm";
      __int16 v9 = 1024;
      int v10 = 543;
      __int16 v11 = 2080;
      char v12 = "deepSleepRequest";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d: assertion failure in %s",  (uint8_t *)&v7,  0x1Cu);
    }

    abort();
  }

  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 2) {
      char v4 = "";
    }
    else {
      char v4 = (&off_1007B1320)[(char)v2];
    }
    int v7 = 136315138;
    unsigned int v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Built deep sleep request packet: {\n, request: %s\n}",  (uint8_t *)&v7,  0xCu);
  }

  return a1;
}

void sub_100155128(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

id sub_100155138()
{
  if (qword_1007F81F0 != -1) {
    dispatch_once(&qword_1007F81F0, &stru_1007B1338);
  }
  return (id)qword_1007F81E8;
}

void sub_100155178(id a1)
{
  id v1 = sub_1001552E0((uint64_t)&OBJC_PROTOCOL___PRRangingServerProtocol);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (void *)qword_1007F81E8;
  qword_1007F81E8 = v2;

  char v4 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___PRRemoteDevice, v5);
  int v17 = -[NSSet initWithObjects:](v4, "initWithObjects:", v6, objc_opt_class(&OBJC_CLASS___NSData, v7), 0LL);
  unsigned int v8 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSArray, v11);
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber, v13);
  __int16 v16 = -[NSSet initWithObjects:]( v8,  "initWithObjects:",  v10,  v12,  v14,  objc_opt_class(&OBJC_CLASS___NSString, v15),  0LL);
  [(id)qword_1007F81E8 setClasses:v17 forSelector:"configureForP2PRanging:options:reply:" argumentIndex:0 ofReply:0];
  [(id)qword_1007F81E8 setClasses:v16 forSelector:"configureForP2PRanging:options:reply:" argumentIndex:1 ofReply:0];
  [(id)qword_1007F81E8 setClasses:v17 forSelector:"startP2PRanging:reply:" argumentIndex:0 ofReply:0];
  [(id)qword_1007F81E8 setClasses:v17 forSelector:"stopP2PRanging:reply:" argumentIndex:0 ofReply:0];
}

id sub_1001552E0(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](&OBJC_CLASS___NSXPCInterface, "interfaceWithProtocol:", a1));
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  unsigned int v8 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, v6, objc_opt_class(&OBJC_CLASS___NSString, v7), 0LL);
  [v1 setClasses:v8 forSelector:"connectWithClientInfo:" argumentIndex:0 ofReply:0];

  return v1;
}

id sub_100155398()
{
  return sub_1001553A4((uint64_t)&OBJC_PROTOCOL___PRRangingClientProtocol);
}

id sub_1001553A4(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](&OBJC_CLASS___NSXPCInterface, "interfaceWithProtocol:", a1));
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSArray, v2);
  uint64_t v5 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v3,  objc_opt_class(&OBJC_CLASS___PRRoseSolution, v4),  0LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___PRRemoteDevice, v8);
  uint64_t v11 = -[NSSet initWithObjects:](v7, "initWithObjects:", v9, objc_opt_class(&OBJC_CLASS___NSData, v10), 0LL);
  [v1 setClasses:v6 forSelector:"didReceiveNewSolutions:" argumentIndex:0 ofReply:0];
  objc_msgSend( v1,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSError, v12),  "didFailWithError:",  0,  0);
  [v1 setClasses:v11 forSelector:"remoteDevice:didChangeState:" argumentIndex:0 ofReply:0];

  return v1;
}

id sub_1001554C8()
{
  unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRBTRangingClientProtocol));
  id v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v2);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSUUID, v4);
  uint64_t v7 = -[NSSet initWithObjects:](v1, "initWithObjects:", v3, v5, objc_opt_class(&OBJC_CLASS___NSError, v6), 0LL);
  uint64_t v8 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSUUID, v9);
  uint64_t v12 = -[NSSet initWithObjects:](v8, "initWithObjects:", v10, objc_opt_class(&OBJC_CLASS___NSError, v11), 0LL);
  uint64_t v13 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v15 = -[NSSet initWithObjects:](v13, "initWithObjects:", objc_opt_class(&OBJC_CLASS___PRBTRSSI, v14), 0LL);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSError, v16),  "didFailWithError:",  0,  0);
  [v0 setClasses:v7 forSelector:"didFetchTxPower:fromDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v12 forSelector:"didConnectDevice:error:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v12 forSelector:"didStartRangingOnDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v12 forSelector:"didStopOwnerRangingOnDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v15 forSelector:"didReceiveNewBTRSSI:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100155690()
{
  unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRDiagnosticsServerProtocol));
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(PRHelloResponse, v1),  "sendHelloWithTimeout:reply:",  0,  1);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(PRChipInfo, v2),  "getChipInfoSync:reply:",  0,  1);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(PRGetPowerStatsResponse, v3),  "getPowerStatsWithTimeout:reply:",  0,  1);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSData, v6);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSArray, v10);
  uint64_t v13 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v5,  v7,  v9,  v11,  objc_opt_class(&OBJC_CLASS___NSNumber, v12),  0LL);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  [v0 setClasses:v14 forSelector:"getPreflightInfo:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v14 forSelector:"getChipPublicKey:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v14 forSelector:"setRoseGlobalConfigParams:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100155824()
{
  unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRProtobufServerProtocol));
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSUUID, v1),  "startStreamingProtobufDataForClientId:reply:",  0,  0);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSUUID, v2),  "stopStreamingProtobufDataForClientId:reply:",  0,  0);
  return v0;
}

id sub_1001558A8()
{
  unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRProtobufClientProtocol));
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSData, v1),  "consumeProtobufBytes:",  0,  0);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSUUID, v2),  "getUniqueClientIdentifier:",  0,  1);
  return v0;
}

id sub_100155930()
{
  unsigned __int8 v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRRegulatoryAssistanceEndpointProtocol));
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSString, v1),  "injectIsoCode:",  0,  0);
  objc_msgSend( v0,  "setClass:forSelector:argumentIndex:ofReply:",  objc_opt_class(NSError, v2),  "prepareForRegulatoryAssistance:",  0,  1);
  return v0;
}

id sub_1001559B8()
{
  id v0 = sub_1001552E0((uint64_t)&OBJC_PROTOCOL___PRCompanionRangingServerProtocol);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___PRRemoteDevice, v3);
  uint64_t v6 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSData, v5), 0LL);
  uint64_t v7 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSArray, v10);
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSNumber, v12);
  uint64_t v15 = -[NSSet initWithObjects:]( v7,  "initWithObjects:",  v9,  v11,  v13,  objc_opt_class(&OBJC_CLASS___NSString, v14),  0LL);
  [v1 setClasses:v6 forSelector:"configureForCompanionRanging:options:reply:" argumentIndex:0 ofReply:0];
  [v1 setClasses:v15 forSelector:"configureForCompanionRanging:options:reply:" argumentIndex:1 ofReply:0];
  [v1 setClasses:v6 forSelector:"startCompanionRanging:options:reply:" argumentIndex:0 ofReply:0];
  [v1 setClasses:v15 forSelector:"startCompanionRanging:options:reply:" argumentIndex:1 ofReply:0];
  [v1 setClasses:v6 forSelector:"stopCompanionRanging:reply:" argumentIndex:0 ofReply:0];

  return v1;
}

id sub_100155B34()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___PRBTRangingServerProtocol));
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSUUID, v2);
  uint64_t v5 = -[NSSet initWithObjects:](v1, "initWithObjects:", v3, objc_opt_class(&OBJC_CLASS___NSData, v4), 0LL);
  uint64_t v6 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSUUID, v7);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
  uint64_t v12 = -[NSSet initWithObjects:](v6, "initWithObjects:", v8, v10, objc_opt_class(&OBJC_CLASS___NSData, v11), 0LL);
  [v0 setClasses:v12 forSelector:"fetchTxPower:isUT:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v5 forSelector:"startUTRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v5 forSelector:"stopUTRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v5 forSelector:"startOwnerRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v5 forSelector:"stopOwnerRanging:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100155CA0()
{
  id v0 = sub_1001552E0((uint64_t)&OBJC_PROTOCOL___PRBeaconRangingProtocol);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v7);
  uint64_t v10 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, v6, v8, objc_opt_class(&OBJC_CLASS___NSArray, v9), 0LL);
  [v1 setClasses:v10 forSelector:"startBeaconing:options:reply:" argumentIndex:1 ofReply:0];
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSArray, v11);
  uint64_t v14 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v12,  objc_opt_class(&OBJC_CLASS___PRRemoteDevice, v13),  0LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  [v1 setClasses:v15 forSelector:"pushBeaconAllowlist:reply:" argumentIndex:0 ofReply:0];

  return v1;
}

uint64_t sub_100156314(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 16;
  *(void *)(a1 + 24) = a1 + 16;
  *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  sub_1000065CC((void *)(a1 + 40), "prglobaltile.bin");
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  v7[0] = &off_1007B1368;
  v7[1] = a1;
  uint64_t v8 = v7;
  sub_1001CCAD8(a1 + 88, v3, v7);
  uint64_t v4 = v8;
  if (v8 == v7)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v7;
    goto LABEL_5;
  }

  if (v8)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_10015640C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  int v19 = a13;
  if (a13 == &a10)
  {
    uint64_t v20 = 4LL;
    int v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  sub_100156B18(v15);

  _Unwind_Resume(a1);
}

void *sub_100156488(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_1003907E0();
  }
  *(_BYTE *)a1 = 0;
  return sub_100156B18((void *)(a1 + 16));
}

uint64_t sub_1001564D8(uint64_t a1, double *a2, double *a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390A94();
  }
  int v6 = vcvtmd_s64_f64((*a2 + 90.0) * 10.0) + (int)(floor(*a3 * 10.0) * 100000.0);
  uint64_t v7 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390A04((unsigned __int8 *)a1, v6, v7);
  }
  if (*(_BYTE *)a1 && v6 == *(_DWORD *)(a1 + 4))
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v9 = (_DWORD)v8 != 0;
    uint64_t v10 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_10039099C(v8, v10, v11, v12, v13, v14, v15, v16);
    }
  }

  else
  {
    uint64_t v17 = a1 + 16;
    uint64_t v18 = *(void *)(a1 + 24);
    if (v18 == a1 + 16)
    {
LABEL_14:
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 4) = 0;
      *(_BYTE *)(a1 + 8) = 0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003908A0();
      }
      uint64_t v9 = sub_100156768(a1, *a2, *a3);
      if ((_DWORD)v9)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100390874();
        }
        uint64_t v20 = operator new(0x18uLL);
        v20[4] = v6;
        uint64_t v21 = *(void *)(a1 + 16);
        *(void *)uint64_t v20 = v21;
        *((void *)v20 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = v17;
        *(void *)(v21 + 8) = v20;
        *(void *)(a1 + 16) = v20;
        ++*(void *)(a1 + 32);
      }

      *(_BYTE *)a1 = 1;
      *(_DWORD *)(a1 + 4) = v6;
      *(_BYTE *)(a1 + 8) = v9;
      char v22 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_10039080C(v9, v22, v23, v24, v25, v26, v27, v28);
      }
    }

    else
    {
      while (1)
      {
        int v19 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100390960(&v30, v31, v19);
        }
        if (v6 == *(_DWORD *)(v18 + 16)) {
          break;
        }
        uint64_t v18 = *(void *)(v18 + 8);
        if (v18 == v17) {
          goto LABEL_14;
        }
      }

      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100390934();
      }
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100390908();
      }
      return 1LL;
    }
  }

  return v9;
}

uint64_t sub_100156768(uint64_t a1, double a2, double a3)
{
  __int16 v33 = 0;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  int v38 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  int v34 = 0LL;
  __int16 v37 = 0;
  __int128 v41 = xmmword_100423B50;
  uint64_t v5 = (char *)(a1 + 87);
  int v6 = (char **)(a1 + 64);
  uint64_t v7 = (char *)(a1 + 64);
  sub_1000065CC(__p, v7);
  BOOL v8 = sub_1002547E4((const char *)__p);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = (os_log_s *)qword_1008000A0;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG);
  if (!v8)
  {
    if (v10) {
      sub_100390CA8(v9, v11, v12);
    }
    goto LABEL_29;
  }

  if (v10) {
    sub_100390C30(v5, v6, v9);
  }
  uint64_t v13 = (const char *)v6;
  if (*v5 < 0) {
    uint64_t v13 = *v6;
  }
  uint64_t v14 = fopen(v13, "rb");
  uint64_t v15 = v14;
  if (!v14)
  {
    char v22 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_100390AFC(v5, v6, v22);
    }
    goto LABEL_29;
  }

  sub_1001CD740(v14, (uint64_t)&v33);
  if ((v16 & 1) == 0 || (int v17 = v42, (double)v42 > a2) || (double)v43 <= a2)
  {
LABEL_28:
    fclose(v15);
LABEL_29:
    uint64_t v21 = 0LL;
    goto LABEL_30;
  }

  double v18 = fmod(a3, 360.0);
  if (v18 < 0.0) {
    double v18 = v18 + 360.0;
  }
  unsigned int v19 = vcvtmd_s64_f64(v18 * 10.0);
  uint64_t v20 = ((int)(v19 + 3600 * ((int)(floor(a2 * 10.0) + 900.0) - 10 * v17 - 900)) / 8);
  LOBYTE(__p[0]) = 0;
  if (v20 >= DWORD2(v41))
  {
    uint64_t v23 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_100390BCC(v20, v23, v24, v25, v26, v27, v28, v29);
    }
    goto LABEL_28;
  }

  fseek(v15, (int)v20, 1);
  if (fread(__p, 1uLL, 1uLL, v15) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_100390BA0();
    }
    goto LABEL_28;
  }

  fclose(v15);
  uint64_t v21 = (LOBYTE(__p[0]) >> (v19 & 7)) & 1;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100390B74();
  }
LABEL_30:
  if (SHIBYTE(v40) < 0) {
    operator delete(v38);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
  return v21;
}

void sub_100156A20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100156A50(uint64_t a1)
{
}

BOOL sub_100156A58(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)&v4.st_dev;
  *(void *)(a1 + 80) = *(void *)&v4.st_uid;
  return stat((const char *)v2, &v4) == 0;
}

uint64_t sub_100156AD8(uint64_t a1)
{
  return a1;
}

void *sub_100156B18(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        stat v4 = (void *)result[1];
        operator delete(result);
        BOOL result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

void *sub_100156B80(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_1007B1368;
  result[1] = v3;
  return result;
}

uint64_t sub_100156BB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B1368;
  a2[1] = v2;
  return result;
}

void *sub_100156BD0(uint64_t a1)
{
  return sub_100156488(*(void *)(a1 + 8));
}

uint64_t sub_100156BD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100156C14()
{
}

void sub_100156C20( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100156C30(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100156C3C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void *sub_100156C68@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1500[a1]);
}

void *sub_100156C7C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1558[a1]);
}

void *sub_100156C90@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B15A0[a1]);
}

void *sub_100156CA4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B15C0[a1]);
}

void sub_100156D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100156DA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100157118( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100157290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001573D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100157468(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _initPrivate];
  uint64_t v2 = (void *)qword_1007F81F8;
  qword_1007F81F8 = (uint64_t)v1;
}

void sub_1001574DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001576C0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001576F0(uint64_t a1)
{
  uint64_t v2 = mach_continuous_time();
  double v3 = sub_100023BEC(v2);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
      }

      id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }

    while (v5);
  }

  uint64_t v9 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [*(id *)(a1 + 32) count];
    uint64_t v11 = mach_continuous_time();
    double v12 = sub_100023BEC(v11);
    *(_DWORD *)__int128 buf = 134218240;
    id v18 = v10;
    __int16 v19 = 2048;
    double v20 = v12 - v3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#btsampledistributor Read %zu samples from cache in %f seconds",  buf,  0x16u);
  }
}

void sub_10015788C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001578FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001579DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100157B2C(_Unwind_Exception *a1)
{
  id v4 = v2;
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v3 - 40));
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100157B64(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100023CC4();
  double v5 = *(double *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = (os_log_s *)qword_1008000A0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_100390DE8();
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        double v10 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#btsampledistributor BT Leeching with max rate scanner activation succeeded [%0.6f s]",  (uint8_t *)&v9,  0xCu);
      }

      atomic_store(1u, WeakRetained + 96);
    }
  }
}

void sub_100157C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100157CF8(_Unwind_Exception *a1)
{
}

void sub_100157E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001582AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_100158568(_Unwind_Exception *a1)
{
}

void sub_10015858C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100023CC4();
  double v5 = *(double *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = (os_log_s *)qword_1008000A0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_100390EEC();
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        double v10 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#btsampledistributor CBDiscovery activation succeeded [%0.6f s]",  (uint8_t *)&v9,  0xCu);
      }

      atomic_store(1u, WeakRetained + 72);
    }
  }
}

void sub_10015869C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015886C(_Unwind_Exception *a1)
{
}

void sub_1001588C4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained didDiscoverDevice:v3];
}

void sub_10015890C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100158924(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390F4C();
  }
}

void sub_100158964(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390F78();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryInterrupted];
}

void sub_1001589BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001589CC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390FA4();
  }
}

void sub_100158A1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryStateChanged];
}

void sub_100158A50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100158A64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoverySystemOverride];
}

void sub_100158A98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100158C5C(_Unwind_Exception *a1)
{
}

void sub_100158CB0(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained didDiscoverDevice:v5];
  }
}

void sub_100158D00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100158D18(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390F4C();
  }
}

void sub_100158D58(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390F78();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleCBDiscoveryInterrupted];
  }
}

void sub_100158DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100158DC8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100390FA4();
  }
}

void sub_100158E18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    [WeakRetained handleCBDiscoveryStateChanged];
  }
}

void sub_100158E54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100158E68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    [WeakRetained handleCBDiscoverySystemOverride];
  }
}

void sub_100158EA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

LABEL_2:
  double v7 = (double)(int)objc_msgSend(v5, "rssi", lock);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v8 = [v5 bleChannel];
  switch(v8)
  {
    case '%':
      int v9 = [v5 transmitPowerOne];
      int v48 = 37;
      sub_1000065CC(__p, (char *)[v6 UTF8String]);
      double v10 = sub_100200F54(&v48, (const void **)__p);
      break;
    case '&':
      int v9 = [v5 transmitPowerTwo];
      int v48 = 38;
      sub_1000065CC(__p, (char *)[v6 UTF8String]);
      double v10 = sub_100200F54(&v48, (const void **)__p);
      break;
    case '\'':
      int v9 = [v5 transmitPowerThree];
      int v48 = 39;
      sub_1000065CC(__p, (char *)[v6 UTF8String]);
      double v10 = sub_100200F54(&v48, (const void **)__p);
      break;
    default:
      goto LABEL_16;
  }

  __int128 v13 = v10;
  __int128 v14 = v11;
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    double v7 = v7 - (COERCE_DOUBLE((unint64_t)v13 ^ 0x8000000000000000LL) + (double)v9 * 0.1);
  }
LABEL_16:
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceID]);
  int v17 = v16 == 0LL;

  if (!v17)
  {
    id v18 = objc_claimAutoreleasedReturnValue([v40 idsDeviceID]);

    __int128 v15 = (void *)v18;
  }

  if ([v40 productID] == 8212)
  {
    else {
      __int16 v19 = objc_claimAutoreleasedReturnValue([v40 serialNumberRight]);
    }
    double v20 = (__CFString *)v19;
  }

  else
  {
    double v20 = &stru_1007C41E0;
  }

  uint64_t v21 = objc_alloc(&OBJC_CLASS___NIBluetoothSample);
  char v22 = [v40 bleChannel];
  uint64_t v23 = [v40 bleAdvertisementTimestampMachContinuous];
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v40 name]);
  uint64_t v39 = -[NIBluetoothSample initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:partIdentifier:name:presenceConfigData:]( v21,  "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:partIdentifier:name:presenceConfigData:",  v15,  v6,  v22,  v20,  v24,  0LL,  v7,  (double)(unint64_t)v23 / 1000000.0);

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v40 name]);
  if (v25)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v40 name]);
    uint64_t v27 = [v26 isEqualToString:@"Bluetooth Device"];

    if ((v27 & 1) == 0)
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v40 name]);
      -[NIBluetoothSample setName:](v39, "setName:", v28);
    }
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v40 idsDeviceID]);
  uint8_t v30 = v29 == 0LL;

  if (!v30) {
    -[NIBluetoothAdvertisementCache addSample:](self->_advertisementCache, "addSample:", v39);
  }
  unsigned int v46 = 0u;
  __int16 v47 = 0u;
  unint64_t v44 = 0u;
  unsigned int v45 = 0u;
  int v31 = self->_consumers;
  char v32 = -[NSHashTable countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v44,  v51,  16LL);
  if (v32)
  {
    __int16 v33 = *(void *)v45;
    do
    {
      for (uint64_t i = 0LL; i != v32; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v33) {
          objc_enumerationMutation(v31);
        }
        uint64_t v35 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
        uint64_t v36 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v35 getQueueForInputingData]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10015953C;
        block[3] = &unk_1007B14B8;
        block[4] = v35;
        char v42 = v40;
        char v43 = v39;
        dispatch_async(v36, block);
      }

      char v32 = -[NSHashTable countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v44,  v51,  16LL);
    }

    while (v32);
  }

  os_unfair_lock_unlock(locka);
}

void sub_1001593CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10015953C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isInterestedInSamplesForDevice:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) consumeBluetoothSample:*(void *)(a1 + 48)];
  }
  return result;
}

void sub_1001596DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100159704(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sampleProviderServiceInterrupted];
}

void sub_1001598E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_100159910(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sampleProviderDidChangeState:*(void *)(a1 + 40)];
}

void sub_100159A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100159B48( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

BOOL sub_100159B58(char *a1, std::string::size_type a2)
{
  double v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0) {
      std::string::size_type v5 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v5 = *(void *)a1;
    }
    else {
      std::string::size_type v6 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Logger::tooManyLogFilesToEnumerate: dir %s prefix %s",  (uint8_t *)&buf,  0x16u);
  }

  sub_10015B520(&buf, a1);
  std::__fs::filesystem::directory_iterator::directory_iterator( &v38,  (const std::__fs::filesystem::path *)&buf,  0LL,  skip_permission_denied);
  ptr = v38.__imp_.__ptr_;
  cntrl = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    p_shared_owners = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      unint64_t v10 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v10 + 1, (unint64_t *)p_shared_owners));
    uint64_t v11 = v38.__imp_.__cntrl_;
    v37.__imp_.__ptr_ = ptr;
    v37.__imp_.__cntrl_ = cntrl;
    if (v38.__imp_.__cntrl_)
    {
      double v12 = &v38.__imp_.__cntrl_->__shared_owners_;
      do
        unint64_t v13 = __ldxr((unint64_t *)v12);
      while (__stxr(v13 + 1, (unint64_t *)v12));
      do
        unint64_t v14 = __ldaxr((unint64_t *)v12);
      while (__stlxr(v14 - 1, (unint64_t *)v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    v37.__imp_.__ptr_ = v38.__imp_.__ptr_;
    v37.__imp_.__cntrl_ = 0LL;
  }

  std::string::size_type v15 = 0LL;
  std::string::size_type v16 = 0LL;
  while (1)
  {
    int v17 = v37.__imp_.__ptr_;
    if (!v37.__imp_.__ptr_) {
      break;
    }
    id v18 = std::__fs::filesystem::directory_iterator::__dereference(&v37);
    std::__fs::filesystem::__status(&v18->__p_, 0LL);
    if (buf.__r_.__value_.__s.__data_[0] != 1) {
      goto LABEL_58;
    }
    sub_10015A048(&v18->__p_, (uint64_t)&__p);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      sub_1000063A8(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }

    else
    {
      std::string buf = __p;
    }

    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a2 + 8);
    }
    if ((char)buf.__r_.__value_.__s.__size_ < 0)
    {
      if (v20 == -1LL) {
LABEL_73:
      }
        sub_10015B79C();
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__l.__size_ >= v20) {
        size_t size = v20;
      }
      else {
        size_t size = buf.__r_.__value_.__l.__size_;
      }
    }

    else
    {
      if (v20 == -1LL) {
        goto LABEL_73;
      }
      if (buf.__r_.__value_.__s.__size_ >= v20) {
        size_t size = v20;
      }
      else {
        size_t size = buf.__r_.__value_.__s.__size_;
      }
      p_std::string buf = &buf;
    }

    if (v19 >= 0) {
      uint64_t v23 = (const void *)a2;
    }
    else {
      uint64_t v23 = *(const void **)a2;
    }
    if (!memcmp(p_buf, v23, size) && size == v20 && ++v15 >= 0x1F4)
    {
      uint64_t v24 = qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v15;
        uint64_t v25 = (os_log_s *)v24;
        uint64_t v26 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu matching files (there may be more than this!)";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (++v16 >= 0x3E8)
    {
      uint64_t v27 = qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v16;
        uint64_t v25 = (os_log_s *)v27;
        uint64_t v26 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu files (there may be more than this!)";
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&__p, 0xCu);
      }

void sub_100159FD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10015A048@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100006434();
  }
  if (v3.__size >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v3.__size | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((void *)&__dst + sub_10014C374((uint64_t)&unk_1007F8158, 1) = v3.__size;
    unint64_t v9 = v6 | 0x8000000000000000LL;
    *(void *)&__int128 __dst = p_dst;
  }

  else
  {
    HIBYTE(v9) = v3.__size;
    p_dst = &__dst;
    if (!v3.__size) {
      goto LABEL_9;
    }
  }

  memmove(p_dst, v3.__data, v3.__size);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void sub_10015A108(uint64_t a1, char *a2, std::string::size_type a3)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      std::string::size_type v7 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v7 = *(void *)a2;
    }
    else {
      std::string::size_type v8 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v7;
    WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Logger::deleteFilesWithoutEnumerating: dir %s prefix %s",  (uint8_t *)&buf,  0x16u);
  }

  sub_10015B520(&buf.__pn_, a2);
  std::__fs::filesystem::directory_iterator::directory_iterator(&v38, &buf, 0LL, skip_permission_denied);
  ptr = v38.__imp_.__ptr_;
  cntrl = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    p_shared_owners = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      unint64_t v12 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v12 + 1, (unint64_t *)p_shared_owners));
    unint64_t v13 = v38.__imp_.__cntrl_;
    v37.__imp_.__ptr_ = ptr;
    v37.__imp_.__cntrl_ = cntrl;
    if (v38.__imp_.__cntrl_)
    {
      unint64_t v14 = &v38.__imp_.__cntrl_->__shared_owners_;
      do
        unint64_t v15 = __ldxr((unint64_t *)v14);
      while (__stxr(v15 + 1, (unint64_t *)v14));
      do
        unint64_t v16 = __ldaxr((unint64_t *)v14);
      while (__stlxr(v16 - 1, (unint64_t *)v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  else
  {
    v37.__imp_.__ptr_ = v38.__imp_.__ptr_;
    v37.__imp_.__cntrl_ = 0LL;
  }

  std::string::size_type v17 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v19 = a1 + 56;
  while (v37.__imp_.__ptr_)
  {
    std::string::size_type v20 = std::__fs::filesystem::directory_iterator::__dereference(&v37);
    std::__fs::filesystem::__status(&v20->__p_, 0LL);
    if (buf.__pn_.__r_.__value_.__s.__data_[0] != 1) {
      goto LABEL_66;
    }
    sub_10015A048(&v20->__p_, (uint64_t)&__p);
    if ((char)__p.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      sub_1000063A8(&buf, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }

    else
    {
      std::__fs::filesystem::directory_entry::_Path buf = __p;
    }

    if (sub_10015B7B0(v19, (const void **)&buf.__pn_.__r_.__value_.__l.__data_))
    {
      uint64_t v21 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        p_std::__fs::filesystem::directory_entry::_Path buf = (std::string *)&buf;
        if ((buf.__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_std::__fs::filesystem::directory_entry::_Path buf = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "pruneLogFiles: skipping %s, which is in the FilesToKeep list",  (uint8_t *)&__p,  0xCu);
      }

      BOOL v23 = 0;
      int v24 = 3;
    }

    else
    {
      int v25 = *(char *)(a3 + 23);
      if (v25 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(a3 + 8);
      }
      if ((char)buf.__pn_.__r_.__value_.__s.__size_ < 0)
      {
        if (v26 == -1LL) {
LABEL_80:
        }
          sub_10015B79C();
        char v28 = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        if (buf.__pn_.__r_.__value_.__l.__size_ >= v26) {
          size_t size = v26;
        }
        else {
          size_t size = buf.__pn_.__r_.__value_.__l.__size_;
        }
      }

      else
      {
        if (v26 == -1LL) {
          goto LABEL_80;
        }
        if (buf.__pn_.__r_.__value_.__s.__size_ >= v26) {
          size_t size = v26;
        }
        else {
          size_t size = buf.__pn_.__r_.__value_.__s.__size_;
        }
        char v28 = (std::string *)&buf;
      }

      if (v25 >= 0) {
        uint64_t v29 = (const void *)a3;
      }
      else {
        uint64_t v29 = *(const void **)a3;
      }
      if (memcmp(v28, v29, size) || size != v26) {
        goto LABEL_59;
      }
      else {
        __p.__pn_ = (std::__fs::filesystem::path::string_type)v20->__p_;
      }
      sub_10015A654((const char *)&__p);
      if (++v17 > 0x1F3)
      {
        BOOL v23 = 0;
        int v24 = 2;
      }

      else
      {
LABEL_59:
        BOOL v23 = ++v18 < 0x3E8;
        int v24 = 2 * (v18 > 0x3E7);
      }
    }

    if ((char)buf.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
      if (v23) {
        goto LABEL_66;
      }
    }

    else if (v23)
    {
      goto LABEL_66;
    }

    if (v24 != 3 && v24) {
      break;
    }
LABEL_66:
    std::__fs::filesystem::directory_iterator::__increment(&v37, 0LL);
  }

  uint8_t v30 = v37.__imp_.__cntrl_;
  if (v37.__imp_.__cntrl_)
  {
    unint64_t v31 = &v37.__imp_.__cntrl_->__shared_owners_;
    do
      unint64_t v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  __int16 v33 = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    unint64_t v34 = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      unint64_t v35 = __ldaxr((unint64_t *)v34);
    while (__stlxr(v35 - 1, (unint64_t *)v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  uint64_t v36 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Logger::deleteFilesWithoutEnumerating: deleted %zu logs (there may be more than this!)",  (uint8_t *)&buf,  0xCu);
  }

void sub_10015A5BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_100012390((uint64_t)&a11);
  sub_100012390((uint64_t)&a13);
  sub_100012390((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_10015A654(const char *a1)
{
  id v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v2 = unlink(a1);
  if (v2)
  {
    std::__fs::filesystem::path::__string_view v3 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((char *)v1 + 23);
      std::basic_string_view<_CharT, _Traits>::size_type v6 = (uint64_t *)*v1;
      std::string::size_type v7 = __error();
      if (v5 >= 0) {
        std::string::size_type v8 = v1;
      }
      else {
        std::string::size_type v8 = v6;
      }
      int v9 = *v7;
      int v10 = 136315394;
      uint64_t v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "deleteFile: could not unlink %s, errno %d",  (uint8_t *)&v10,  0x12u);
    }
  }

  return v2 == 0;
}

void sub_10015A758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015A770(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v34 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  else {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = (uint64_t *)*a1;
  }
  std::string::size_type v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6, v34));
  std::string::size_type v8 = (void *)objc_claimAutoreleasedReturnValue([v35 contentsOfDirectoryAtPath:v7 error:0]);

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 reverseObjectEnumerator]);
  id v10 = [v9 countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v45;
    uint64_t v36 = v8;
    do
    {
      for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v11) {
          objc_enumerationMutation(v9);
        }
        int v13 = (char *)[*(id *)(*((void *)&v44 + 1) + 8 * (void)i) UTF8String];
        if (v13)
        {
          sub_1000065CC(&v39, v13);
          int v14 = *((char *)a2 + 23);
          if (v14 >= 0) {
            unint64_t v15 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            unint64_t v15 = (unint64_t)a2[1];
          }
          unsigned __int8 v16 = v41;
          if ((char)v41 < 0)
          {
            if (v15 == -1LL) {
LABEL_52:
            }
              sub_10015B79C();
            unint64_t v18 = v39;
            if (v40 >= v15) {
              size_t v17 = v15;
            }
            else {
              size_t v17 = v40;
            }
          }

          else
          {
            if (v15 == -1LL) {
              goto LABEL_52;
            }
            if (v41 >= v15) {
              size_t v17 = v15;
            }
            else {
              size_t v17 = v41;
            }
            unint64_t v18 = &v39;
          }

          if (v14 >= 0) {
            std::string::size_type v20 = a2;
          }
          else {
            std::string::size_type v20 = *a2;
          }
          BOOL v21 = !memcmp(v18, v20, v17) && v17 == v15;
          std::string::size_type v8 = v36;
          if (v21)
          {
            sub_1000065CC(__p, v13);
            unint64_t v23 = a3[1];
            unint64_t v22 = a3[2];
            if (v23 >= v22)
            {
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
              unint64_t v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_10001E11C();
              }
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
              if (2 * v27 > v26) {
                unint64_t v26 = 2 * v27;
              }
              if (v27 >= 0x555555555555555LL) {
                unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v28 = v26;
              }
              uint8_t v48[4] = a3 + 2;
              if (v28) {
                uint64_t v29 = (char *)sub_10001E130((uint64_t)(a3 + 2), v28);
              }
              else {
                uint64_t v29 = 0LL;
              }
              uint8_t v30 = &v29[24 * v25];
              v48[0] = v29;
              v48[1] = v30;
              v48[3] = &v29[24 * v28];
              __int128 v31 = *(_OWORD *)__p;
              *((void *)v30 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = v38;
              *(_OWORD *)uint8_t v30 = v31;
              __p[1] = 0LL;
              uint64_t v38 = 0LL;
              __p[0] = 0LL;
              v48[2] = v30 + 24;
              sub_10015B82C(a3, v48);
              uint64_t v32 = a3[1];
              sub_10015B9B4((uint64_t)v48);
              int v33 = SHIBYTE(v38);
              a3[1] = v32;
              if (v33 < 0) {
                operator delete(__p[0]);
              }
            }

            else
            {
              __int128 v24 = *(_OWORD *)__p;
              *(void *)(v23 + 16) = v38;
              *(_OWORD *)unint64_t v23 = v24;
              a3[1] = v23 + 24;
            }

            unsigned __int8 v16 = v41;
          }

          if ((v16 & 0x80) != 0) {
            operator delete(v39);
          }
        }

        else
        {
          uint64_t v19 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
            sub_100391008(&v42, v43, v19);
          }
        }
      }

      id v10 = [v9 countByEnumeratingWithState:&v44 objects:v49 count:16];
    }

    while (v10);
  }
}

void sub_10015AACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  sub_10013EAD4((void ***)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_10015AB70(const char *a1, timespec *a2, off_t *a3)
{
  int v5 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v6 = stat(a1, &v13);
  if (v6)
  {
    std::string::size_type v7 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = *((char *)v5 + 23);
      id v10 = (uint64_t *)*v5;
      int v11 = *__error();
      if (v9 >= 0) {
        __int16 v12 = v5;
      }
      else {
        __int16 v12 = v10;
      }
      *(_DWORD *)std::__fs::filesystem::directory_entry::_Path buf = 136315394;
      unint64_t v15 = v12;
      __int16 v16 = 1024;
      int v17 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "getFileModificationTimeAndSize: could not stat %s, errno %d",  buf,  0x12u);
    }
  }

  else
  {
    *a2 = v13.st_mtimespec;
    *a3 = v13.st_size;
  }

  return v6 == 0;
}

void sub_10015AC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015ACB0(uint64_t a1)
{
  int v2 = (char *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_13:
    int v6 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10039103C(v6, v7, v8);
    }
    return;
  }

  if (!*(_BYTE *)(a1 + 31)) {
    goto LABEL_13;
  }
LABEL_3:
  std::__fs::filesystem::path::__string_view v3 = (const void **)(a1 + 8);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  double v4 = (const std::__fs::filesystem::path *)sub_10015B520(&buf, v2 - 23);
  std::__fs::filesystem::__status(v4, &__ec);
  if ((_BYTE)v54 && v54 != 255 && v54 == 2LL)
  {
    if (sub_100159B58(v2 - 23, a1 + 32))
    {
      sub_10015A108(a1, v2 - 23, a1 + 32);
      return;
    }

    if (clock_gettime(_CLOCK_REALTIME, &__tp))
    {
      int v9 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = __error();
        sub_100391074(v10, (uint8_t *)&buf, v9);
      }

      return;
    }

    if (__tp.tv_sec > 1209600)
    {
      __darwin_time_t v45 = __tp.tv_sec - 1209600;
    }

    else
    {
      int v11 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = __tp.tv_sec;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "pruneLogFiles: timespecNow too small to use: %ld",  (uint8_t *)&buf,  0xCu);
      }

      __darwin_time_t v45 = 0LL;
    }

    sub_10015A770((uint64_t *)(v2 - 23), (const void **)(a1 + 32), &v51);
    unint64_t v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v52[-v51] >> 3));
    else {
      uint64_t v13 = v12;
    }
    sub_10015BA3C(v51, v52, (uint64_t)__p, v13, 1);
    off_t v49 = 0LL;
    uint64_t v14 = v51;
    __int128 v46 = v52;
    if ((char *)v51 == v52)
    {
LABEL_87:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      sub_10013EAD4((void ***)&buf);
      return;
    }

    uint64_t v44 = 0LL;
    int v15 = 0;
    while (sub_10015B7B0(a1 + 56, (const void **)v14))
    {
      __int16 v16 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = (const std::string::value_type *)v14;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "pruneLogFiles: skipping %s, which is in the FilesToKeep list",  (uint8_t *)&buf,  0xCu);
      }

void sub_10015B3A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  *(void *)(v31 - 160) = &a31;
  sub_10013EAD4((void ***)(v31 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_10015B428(uint64_t a1)
{
  *(void *)a1 = off_1007B1648;
  sub_10015B4D0(a1 + 56, *(char **)(a1 + 64));
  return a1;
}

void sub_10015B47C(char *a1)
{
  *(void *)a1 = off_1007B1648;
  sub_10015B4D0((uint64_t)(a1 + 56), *((char **)a1 + 8));
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  if (a1[31] < 0) {
    operator delete(*((void **)a1 + 1));
  }
  operator delete(a1);
}

void sub_10015B4D0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10015B4D0(a1, *(void *)a2);
    sub_10015B4D0(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

std::string *sub_10015B520(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_10015B584(a1, a2, &a2[v3]);
  return a1;
}

void sub_10015B568(_Unwind_Exception *exception_object)
{
}

std::string *sub_10015B584(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    id v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    id v10 = this;
  }

  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    uint64_t v14 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }

    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v17 & 0x7F;
    }
  }

  else
  {
    sub_10015B6F8(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
  }

  return this;
}

void sub_10015B6DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10015B6F8(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100006434();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    _DWORD v4[2] = v9 | 0x8000000000000000LL;
    *BOOL v4 = result;
    BOOL v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)BOOL v4 = 0;
  return result;
}

void sub_10015B79C()
{
}

uint64_t sub_10015B7B0(uint64_t a1, const void **a2)
{
  int v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1LL;
    do
    {
      if (!sub_10001E59C(v4, a2, v2 + 4))
      {
        if (!sub_10001E59C(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }

      int v2 = (const void **)*v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_10015B82C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10015B8A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10015B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = v9;
  }

  char v13 = 1;
  sub_10015B93C((uint64_t)v12);
  return a6;
}

uint64_t sub_10015B93C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10015B970(a1);
  }
  return a1;
}

void sub_10015B970(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_10015B9B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10015B9E8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_10015BA3C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = a2 - 24;
  __int128 v10 = (const void **)a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    uint64_t v12 = v11;
    uint64_t v13 = a2 - (char *)v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_10015BDE0(a3, (void *)a2 - 3, v10))
        {
          uint64_t v29 = v10[2];
          __int128 v27 = *(_OWORD *)v10;
          __int128 v25 = *(_OWORD *)v9;
          _DWORD v10[2] = (const void *)*((void *)a2 - 1);
          *(_OWORD *)__int128 v10 = v25;
          *(_OWORD *)uint64_t v9 = v27;
          *((void *)a2 - sub_10014C374((uint64_t)&unk_1007F8158, 1) = v29;
        }

        return;
      case 3uLL:
        sub_10015C06C(v10, v10 + 3, (void *)a2 - 3, a3);
        return;
      case 4uLL:
        sub_10015C700((uint64_t)v10, v10 + 3, v10 + 6, (void *)a2 - 3, a3);
        return;
      case 5uLL:
        sub_10015C7E8((uint64_t)v10, v10 + 3, v10 + 6, v10 + 9, (void *)a2 - 3, a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0) {
            sub_10015BE48((uint64_t)v10, a2, a3);
          }
          else {
            sub_10015BF68(v10, a2, a3);
          }
          return;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          char v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_10015C06C(&v10[3 * v15], v10, (void *)a2 - 3, a3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            sub_10015C06C(v10, &v10[3 * v15], (void *)a2 - 3, a3);
            uint64_t v17 = 3 * v15;
            size_t v18 = &v10[3 * v15 - 3];
            sub_10015C06C(v10 + 3, v18, (void *)a2 - 6, a3);
            uint64_t v19 = v10 + 6;
            unsigned __int8 v20 = &v10[v17 + 3];
            sub_10015C06C(v19, v20, (void *)a2 - 9, a3);
            sub_10015C06C(v18, v16, v20, a3);
            uint64_t v28 = *(const void **)(a1 + 16);
            __int128 v26 = *(_OWORD *)a1;
            __int128 v21 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            _OWORD v16[2] = v28;
            *(_OWORD *)char v16 = v26;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (!sub_10015BDE0(a3, (void *)(a1 - 24), (const void **)a1))
          {
            __int128 v10 = sub_10015C1B4((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }

BOOL sub_10015BDE0(uint64_t a1, void *a2, const void **a3)
{
  int v3 = *((char *)a2 + 23);
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *a3;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = a2[1];
  }
  if (v3 < 0) {
    a2 = (void *)*a2;
  }
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  int v9 = memcmp(v6, a2, v8);
  if (v9) {
    return v9 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_10015BE48(uint64_t a1, void *a2, uint64_t a3)
{
  if ((void *)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    size_t v7 = (void *)(a1 + 24);
    if ((void *)(a1 + 24) != a2)
    {
      uint64_t v9 = 0LL;
      __int128 v10 = (void *)a1;
      do
      {
        uint64_t v11 = (const void **)v10;
        __int128 v10 = v7;
        if (sub_10015BDE0(a3, v7, v11))
        {
          __int128 v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0LL;
          _DWORD v10[2] = 0LL;
          void *v10 = 0LL;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            unint64_t v14 = (void **)(a1 + v12 + 24);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }

            v12 -= 24LL;
          }

          while (sub_10015BDE0(a3, &v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }

        size_t v7 = v10 + 3;
        v9 += 24LL;
      }

      while (v10 + 3 != a2);
    }
  }

void sub_10015BF68(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v6 = a1;
    size_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        __int128 v10 = (const void **)v6;
        uint64_t v6 = v7;
        if (sub_10015BDE0(a3, v7, v10))
        {
          __int128 v16 = *(_OWORD *)v6;
          __int128 v17 = (void *)v6[2];
          v6[1] = 0LL;
          _DWORD v6[2] = 0LL;
          void *v6 = 0LL;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            _BYTE v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            BOOL v13 = sub_10015BDE0(a3, &v16, (const void **)v11);
            v11 -= 3;
          }

          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = (void **)(v11 + 6);
          if (v14 < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)int v15 = v16;
          _OWORD v15[2] = v17;
        }

        size_t v7 = v6 + 3;
        v9 += 3;
      }

      while (v6 + 3 != a2);
    }
  }

uint64_t sub_10015C06C(const void **a1, const void **a2, void *a3, uint64_t a4)
{
  BOOL v8 = sub_10015BDE0(a4, a2, a1);
  uint64_t result = sub_10015BDE0(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result) {
      return result;
    }
    BOOL v13 = a2[2];
    __int128 v14 = *(_OWORD *)a2;
    int v15 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10015BDE0(a4, a2, a1)) {
      return 1LL;
    }
    __int128 v16 = a1[2];
    __int128 v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    uint64_t v19 = a1[2];
    __int128 v20 = *(_OWORD *)a1;
    __int128 v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10015BDE0(a4, a3, a2)) {
      return 1LL;
    }
    unint64_t v22 = a2[2];
    __int128 v23 = *(_OWORD *)a2;
    BOOL v24 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2LL;
  }

  __int128 v10 = a1[2];
  __int128 v11 = *(_OWORD *)a1;
  uint64_t v12 = (const void *)a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1LL;
}

const void **sub_10015C1B4(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  __int128 v16 = *(_OWORD *)a1;
  __int128 v17 = a1[2];
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  if (sub_10015BDE0(a3, &v16, (const void **)(a2 - 24)))
  {
    uint64_t v6 = a1;
    do
      v6 += 3;
    while (!sub_10015BDE0(a3, &v16, v6));
  }

  else
  {
    size_t v7 = a1 + 3;
    do
    {
      uint64_t v6 = v7;
      BOOL v8 = sub_10015BDE0(a3, &v16, v7);
      size_t v7 = v6 + 3;
    }

    while (!v8);
  }

  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24LL;
    while (sub_10015BDE0(a3, &v16, (const void **)v4));
  }

  while ((unint64_t)v6 < v4)
  {
    __int128 v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    __int128 v18 = v9;
    __int128 v10 = *(_OWORD *)v4;
    _DWORD v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)uint64_t v6 = v10;
    __int128 v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_10015BDE0(a3, &v16, v6));
    do
      v4 -= 24LL;
    while (sub_10015BDE0(a3, &v16, (const void **)v4));
  }

  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
  }

  else
  {
    __int128 v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }

  __int128 v14 = v16;
  *(v6 - sub_10014C374((uint64_t)&unk_1007F8158, 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

void *sub_10015C344(__int128 *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  __int128 v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0LL;
  *((void *)a1 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)a1 = 0LL;
  do
    v6 += 24LL;
  while (sub_10015BDE0(a3, (__int128 *)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      a2 -= 3;
    }

    while (!sub_10015BDE0(a3, a2, (const void **)&v17));
  }

  else
  {
    do
      a2 -= 3;
    while (!sub_10015BDE0(a3, a2, (const void **)&v17));
  }

  BOOL v8 = (void *)((char *)a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    __int128 v9 = a2;
    do
    {
      __int128 v19 = *(_OWORD *)v8;
      __int128 v10 = v19;
      uint64_t v20 = v8[2];
      uint64_t v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)BOOL v8 = *(_OWORD *)v9;
      v8[2] = v12;
      v9[2] = v11;
      *(_OWORD *)__int128 v9 = v10;
      do
        v8 += 3;
      while (sub_10015BDE0(a3, v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10015BDE0(a3, v9, (const void **)&v17));
    }

    while (v8 < v9);
  }

  __int128 v13 = (void **)(v8 - 3);
  if (v8 - 3 == (void *)a1)
  {
  }

  else
  {
    __int128 v14 = *(_OWORD *)v13;
    *((void *)a1 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(v8 - 1);
    *a1 = v14;
    *((_BYTE *)v8 - sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0;
    *((_BYTE *)v8 - 24) = 0;
  }

  __int128 v15 = v17;
  *(v8 - sub_10014C374((uint64_t)&unk_1007F8158, 1) = v18;
  *(_OWORD *)__int128 v13 = v15;
  return v8 - 3;
}

BOOL sub_10015C4D0(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v8 = a2 - 3;
      if (sub_10015BDE0(a3, a2 - 3, (const void **)a1))
      {
        __int128 v9 = *(const void **)(a1 + 16);
        __int128 v10 = *(_OWORD *)a1;
        uint64_t v11 = v8[2];
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)BOOL v8 = v10;
        v8[2] = v9;
      }

      return 1LL;
    case 3uLL:
      sub_10015C06C((const void **)a1, (const void **)(a1 + 24), a2 - 3, a3);
      return 1LL;
    case 4uLL:
      sub_10015C700(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a2 - 3, a3);
      return 1LL;
    case 5uLL:
      sub_10015C7E8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (const void **)(a1 + 72), a2 - 3, a3);
      return 1LL;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_10015C06C((const void **)a1, (const void **)(a1 + 24), (void *)(a1 + 48), a3);
      __int128 v13 = (const void **)(a1 + 72);
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    if (sub_10015BDE0(a3, v13, v12))
    {
      __int128 v22 = *(_OWORD *)v13;
      __int128 v23 = v13[2];
      v13[1] = 0LL;
      v13[2] = 0LL;
      *__int128 v13 = 0LL;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(_BYTE *)(v17 + 7sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }

        BOOL v19 = sub_10015BDE0(a3, &v22, (const void **)(a1 + v16 + 24));
        v16 -= 24LL;
      }

      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 3 == a2;
      }
    }

    uint64_t v12 = v13;
    v14 += 24LL;
    v13 += 3;
    if (v13 == a2) {
      return 1LL;
    }
  }

__n128 sub_10015C700(uint64_t a1, const void **a2, const void **a3, void *a4, uint64_t a5)
{
  if (sub_10015BDE0(a5, a4, a3))
  {
    uint64_t v11 = a3[2];
    __int128 v12 = *(_OWORD *)a3;
    __int128 v13 = (const void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v13;
    *(_OWORD *)a4 = v12;
    a4[2] = v11;
    if (sub_10015BDE0(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      __int128 v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10015BDE0(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }

  return result;
}

__n128 sub_10015C7E8(uint64_t a1, const void **a2, const void **a3, const void **a4, void *a5, uint64_t a6)
{
  if (sub_10015BDE0(a6, a5, a4))
  {
    __int128 v13 = a4[2];
    __int128 v14 = *(_OWORD *)a4;
    __int128 v15 = (const void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v15;
    *(_OWORD *)a5 = v14;
    a5[2] = v13;
    if (sub_10015BDE0(a6, a4, a3))
    {
      uint64_t v16 = a3[2];
      __int128 v17 = *(_OWORD *)a3;
      uint64_t v18 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v18;
      *(_OWORD *)a4 = v17;
      a4[2] = v16;
      if (sub_10015BDE0(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        __int128 v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10015BDE0(a6, a2, (const void **)a1))
        {
          __int128 v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          __int128 v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }

  return result;
}

void *sub_10015C908(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if ((void *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __int128 v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10015CB50(a1, a4, v9, v12);
        __int128 v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }

      while (v11);
    }

    __int128 v13 = a2;
    if (a2 != a3)
    {
      __int128 v14 = a2;
      do
      {
        if (sub_10015BDE0(a4, v14, (const void **)a1))
        {
          uint64_t v15 = v14[2];
          __int128 v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)__int128 v14 = *(_OWORD *)a1;
          _OWORD v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_10015CB50(a1, a4, v9, (__n128 *)a1);
        }

        v14 += 3;
      }

      while (v14 != a3);
      __int128 v13 = a3;
    }

    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = a2 - 3;
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)uint64_t v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(_BYTE *)(a1 + 23);
        *(void *)(a1 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = 0LL;
        uint64_t v22 = sub_10015CCE4(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (void *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }

        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          __int128 v25 = *(_OWORD *)v19;
          *(void *)(v23 + 16) = v19[2];
          *(_OWORD *)uint64_t v23 = v25;
          void *v19 = v20;
          v19[1] = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_10015CDBC(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }

        v19 -= 3;
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

void sub_10015CB38(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10015CB50(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10015BDE0(a2, (void *)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24LL;
        uint64_t v12 = v14;
      }

      if (!sub_10015BDE0(a2, (void *)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0LL;
        v7[1].n128_u64[0] = 0LL;
        v7->n128_u64[0] = 0LL;
        while (1)
        {
          __int128 v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          __n128 *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10015BDE0(a2, (void *)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24LL;
            uint64_t v18 = v19;
          }

          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_10015BDE0(a2, (void *)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }

        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }

  return result;
}

uint64_t sub_10015CCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10015BDE0(a2, (void *)v9, (const void **)(v9 + 24)))
    {
      v9 += 24LL;
      uint64_t v6 = v11;
    }

    __int128 v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)uint64_t v9 = 0;
    a1 = v9;
  }

  while (v6 <= v8);
  return v9;
}

double sub_10015CDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (__int128 *)(a1 + 24 * v8);
    uint64_t v10 = (__int128 *)(a2 - 24);
    if (sub_10015BDE0(a3, v9, (const void **)(a2 - 24)))
    {
      __int128 v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0LL;
      *((void *)v10 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
      *(void *)uint64_t v10 = 0LL;
      while (1)
      {
        __int128 v12 = v9;
        __int128 v13 = *v9;
        *((void *)v10 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = *((void *)v9 + 2);
        __int128 *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (__int128 *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_10015BDE0(a3, v9, (const void **)&v14))
        {
          break;
        }
      }

      double result = *(double *)&v14;
      *__int128 v12 = v14;
      *((void *)v12 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = v15;
    }
  }

  return result;
}

uint64_t sub_10015CEB8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100006434();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

void *sub_10015CF3C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1910[a1]);
}

void *sub_10015CF50@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1968[a1]);
}

void *sub_10015CF64@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B19B0[a1]);
}

void *sub_10015CF78@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B19D0[a1]);
}

uint64_t sub_10015CF8C(uint64_t a1)
{
  return a1;
}

void sub_10015D1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015D394(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10015D81C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  if (a11)
  {
    uint64_t v36 = (void *)sub_100024A24(a11);
    operator delete(v36);
  }

  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10015D948(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = operator new(0x20uLL);
    *uint64_t v5 = &off_1007B18C0;
    v5[1] = 0LL;
    _DWORD v5[2] = 0LL;
    void v5[3] = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a2 = 0LL;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

void sub_10015DD6C(_Unwind_Exception *a1)
{
  unint64_t v8 = v5;

  _Unwind_Resume(a1);
}

void sub_10015DE90(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10015E46C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10015E4F4(uint64_t a1)
{
  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)&OBJC_CLASS___NIServerRangingAuthSession;
  id v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remote]);
  [v4 didReceiveRangingAuthRecommendation:*(unsigned __int8 *)(a1 + 48) forObject:*(void *)(a1 + 40)];
}

void sub_10015E568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015E754( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10015E790(uint64_t a1)
{
  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)&OBJC_CLASS___NIServerRangingAuthSession;
  id v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remote]);
  [v4 uwbSessionDidInvalidateWithError:*(void *)(a1 + 40)];
}

void sub_10015E800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015E8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015E9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10015EABC(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10015EB38((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_10015EB20(_Unwind_Exception *a1)
{
}

uint64_t *sub_10015EB38(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_10015EBBC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_10001E548(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_10015EBBC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  objc_super v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      __int128 v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        __int128 v13 = v10;
      }

      while (v14);
    }

    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          objc_super v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        objc_super v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      uint64_t v17 = a1 + 1;
    }

uint64_t sub_10015ED64(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10015EDE0((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_10015EDC8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10015EDE0(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  uint64_t v6 = sub_10015EE64(a1, a2, &v11, &v10, a3);
  int v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_10001E548(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

double *sub_10015EE64(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  objc_super v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (double v6 = *a5, v7 = a2[4], *a5 > v7))
  {
    unint64_t v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      double v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = *(uint64_t **)a2;
      do
      {
        double v10 = (double *)v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      __int128 v13 = a2;
      do
      {
        double v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        __int128 v13 = v10;
      }

      while (v14);
    }

    double v15 = *a5;
    if (v10[4] > *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          double v18 = v16[4];
          if (v15 <= v18) {
            break;
          }
          uint64_t v16 = *(double **)v16;
          objc_super v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }

        if (v18 <= v15) {
          break;
        }
        objc_super v5 = v16 + 1;
        uint64_t v16 = (double *)*((void *)v16 + 1);
      }

      while (v16);
      goto LABEL_43;
    }

void sub_10015F000(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B16C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10015F010(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B16C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10015F038(uint64_t a1)
{
  return a1;
}

void sub_10015F060(id *a1)
{
}

void *sub_10015F088(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B1710;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10015F0CC(uint64_t a1, void *a2)
{
  *a2 = off_1007B1710;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10015F100(uint64_t a1)
{
}

void sub_10015F108(id *a1)
{
}

id sub_10015F130(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 8) wifiRangingRangeResults:a2];
}

uint64_t sub_10015F13C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015F178()
{
  return &off_1007B1780;
}

uint64_t sub_10015F184(uint64_t a1)
{
  return a1;
}

void sub_10015F1AC(id *a1)
{
}

void *sub_10015F1D4(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B17A0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10015F218(uint64_t a1, void *a2)
{
  *a2 = off_1007B17A0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10015F24C(uint64_t a1)
{
}

void sub_10015F254(id *a1)
{
}

id sub_10015F27C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingRangeError:&v3];
}

uint64_t sub_10015F2A8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015F2E4()
{
  return &off_1007B1810;
}

uint64_t sub_10015F2F0(uint64_t a1)
{
  return a1;
}

void sub_10015F318(id *a1)
{
}

void *sub_10015F340(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B1830;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10015F384(uint64_t a1, void *a2)
{
  *a2 = off_1007B1830;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10015F3B8(uint64_t a1)
{
}

void sub_10015F3C0(id *a1)
{
}

id sub_10015F3E8(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingReadiness:&v3];
}

uint64_t sub_10015F414(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10015F450()
{
  return &off_1007B18A0;
}

void sub_10015F460(std::__shared_weak_count *a1)
{
}

void sub_10015F474(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    id v2 = (void *)sub_100024A24(v1);
    operator delete(v2);
  }

uint64_t sub_10015F498(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_10015F4D8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643LL) {
    sub_10001D350();
  }
  return operator new(184 * a2);
}

void sub_10015F520()
{
  id v0 = objc_autoreleasePoolPush();
  v10[0] = xmmword_100423DA0;
  v10[1] = unk_100423DB0;
  sub_10015EABC((uint64_t)&unk_1007F8208, (int *)v10, 4LL);
  xmmword_1007F8220 = xmmword_100423CB0;
  *(_OWORD *)algn_1007F8230 = xmmword_100423CC0;
  qword_1007F8248 = 0LL;
  unk_1007F8250 = 0LL;
  qword_1007F8240 = 0x3FD999999999999ALL;
  unk_1007F8258 = xmmword_100423CD0;
  dword_1007F8268 = 5;
  qword_1007F8270 = 0x4000000000000000LL;
  dword_1007F8278 = 5;
  byte_1007F8280 = 0;
  *(void *)&algn_1007F8281[3] = 0x30000000ALL;
  xmmword_1007F8290 = xmmword_100423CE0;
  unk_1007F82A0 = xmmword_100423CF0;
  xmmword_1007F82B0 = xmmword_100423D00;
  qword_1007F82C0 = 0x3FE3333333333333LL;
  dword_1007F82C8 = 3;
  xmmword_1007F82D0 = xmmword_100423D10;
  unk_1007F82E0 = xmmword_100423CF0;
  xmmword_1007F82F0 = xmmword_100423CE0;
  qword_1007F8300 = 0x3FE3333333333333LL;
  byte_1007F8308 = 0;
  xmmword_1007F8310 = xmmword_100423D20;
  unk_1007F8320 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v8 = _Q0;
  xmmword_1007F8330 = _Q0;
  qword_1007F8340 = 0xBFD3333333333333LL;
  xmmword_1007F8348 = xmmword_100423D40;
  qword_1007F8358 = 0x3E99999A40000000LL;
  xmmword_1007F8360 = xmmword_100423CC0;
  qword_1007F8378 = 0LL;
  unk_1007F8380 = 0LL;
  qword_1007F8370 = 0x3FD999999999999ALL;
  xmmword_1007F8388 = xmmword_100423CD0;
  dword_1007F8398 = 5;
  qword_1007F83A0 = 0x4000000000000000LL;
  dword_1007F83A8 = 4;
  qword_1007F83B0 = 0x300000008LL;
  qword_1007F83B8 = 0xC04E800000000000LL;
  unint64_t v9 = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)&unk_1007F83C0, (double *)&v9, 1LL);
  xmmword_1007F83D8 = xmmword_100423D50;
  qword_1007F83E8 = 0x4024000000000000LL;
  dword_1007F83F0 = 45;
  byte_1007F83F8 = 0;
  byte_1007F8410 = 0;
  qword_1007F8418 = 0LL;
  byte_1007F8420 = 0;
  dword_1007F8424 = 1;
  byte_1007F8428 = 1;
  xmmword_1007F8430 = xmmword_100423D60;
  unk_1007F8440 = xmmword_100423D70;
  xmmword_1007F8450 = v8;
  qword_1007F8460 = 0xC059000000000000LL;
  xmmword_1007F8468 = xmmword_100423D80;
  qword_1007F8478 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007F8480 = xmmword_100423CC0;
  qword_1007F8490 = 0x3FD999999999999ALL;
  qword_1007F84A0 = 0LL;
  qword_1007F8498 = 0LL;
  xmmword_1007F84A8 = xmmword_100423CD0;
  dword_1007F84B8 = 5;
  qword_1007F84C0 = 0x4000000000000000LL;
  dword_1007F84C8 = 10;
  qword_1007F84D0 = 0x4034000000000000LL;
  dword_1007F84D8 = 3;
  xmmword_1007F84E0 = xmmword_100423D90;
  __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007F8208, (void *)&_mh_execute_header);
  qword_1007F84F8 = 0LL;
  unk_1007F8500 = 0LL;
  qword_1007F84F0 = 0LL;
  double v6 = operator new(0x40uLL);
  qword_1007F84F8 = (uint64_t)(v6 + 4);
  unk_1007F8500 = v6 + 4;
  _OWORD *v6 = xmmword_100423DC0;
  v6[1] = unk_100423DD0;
  _DWORD v6[2] = xmmword_100423DE0;
  v6[3] = unk_100423DF0;
  qword_1007F84F0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F84F0, (void *)&_mh_execute_header);
  qword_1007F8510 = 0LL;
  unk_1007F8518 = 0LL;
  qword_1007F8508 = 0LL;
  double v7 = operator new(0x10uLL);
  qword_1007F8510 = (uint64_t)(v7 + 1);
  unk_1007F8518 = v7 + 1;
  _OWORD *v7 = xmmword_100423E00;
  qword_1007F8508 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F8508, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10015F880(_Unwind_Exception *a1)
{
}

void sub_10015FA48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10015FB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015FCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10015FE44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10015FE8C()
{
}

void sub_10015FF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001600BC(_Unwind_Exception *a1)
{
  objc_super v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1001600F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(_OWORD *)a1 = xmmword_100424150;
  *(_DWORD *)(a1 + 16) = 1;
  sub_1000065CC(__p, "regulatory,geof,qm,sm");
  double v15 = (int *)a1;
  double v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1007B1A00;
  v6->__shared_owners_ = 0LL;
  v6->__shared_weak_owners_ = 0LL;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  uint64_t v16 = v6;
  sub_1001608E0(a1 + 24, (const void **)__p, &v15);
  double v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v18 < 0) {
    operator delete(__p[0]);
  }
  id v10 = v5;
  *(void *)(a1 + 168) = v10;
  sub_10001E914(a1 + 184, a3);
  int v19 = 0;
  double v15 = &v19;
  uint64_t v11 = sub_100160BF8((uint64_t **)(a1 + 32), &v19, (uint64_t)&unk_1004242F8, &v15);
  v11[5] = (uint64_t *)sub_100160368;
  v11[6] = 0LL;
  int v19 = 1;
  double v15 = &v19;
  __int128 v12 = sub_100160BF8((uint64_t **)(a1 + 32), &v19, (uint64_t)&unk_1004242F8, &v15);
  v12[5] = (uint64_t *)sub_10016039C;
  v12[6] = 0LL;
  int v19 = 2;
  double v15 = &v19;
  __int128 v13 = sub_100160BF8((uint64_t **)(a1 + 32), &v19, (uint64_t)&unk_1004242F8, &v15);
  void v13[5] = (uint64_t *)sub_100160490;
  v13[6] = 0LL;
  objc_storeStrong((id *)(a1 + 128), *(id *)(a1 + 168));
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  sub_1001606BC(a1 + 24, 0LL);

  return a1;
}

void sub_1001602CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100160B00(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100160368(uint64_t a1, int a2)
{
  if (a2 != 4) {
    return a2 == 3;
  }
  *(double *)(a1 + 176) = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
  return 2LL;
}

uint64_t sub_10016039C(uint64_t a1, int a2)
{
  uint64_t result = 1LL;
  switch(a2)
  {
    case 0:
      char v7 = 1;
      uint64_t v4 = *(void *)(a1 + 208);
      if (!v4) {
        goto LABEL_12;
      }
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 48LL))(v4, &v7);
      sub_100160CB8(a1 + 24, 5, *(double *)a1);
      return 1LL;
    case 1:
      char v8 = 0;
      uint64_t v5 = *(void *)(a1 + 208);
      if (!v5) {
LABEL_12:
      }
        sub_10001EEF0();
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 48LL))(v5, &v8);
      sub_100160604((uint64_t **)(a1 + 24), 5);
      return 1LL;
    case 2:
      return 0LL;
    case 4:
      sub_100160604((uint64_t **)(a1 + 24), 5);
      double v6 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      goto LABEL_10;
    case 5:
      double v6 = -(*(double *)a1 - *(double *)(a1 + 8) * (double)*(int *)(a1 + 16));
LABEL_10:
      *(double *)(a1 + 176) = v6;
      uint64_t result = 2LL;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100160490(uint64_t a1, int a2)
{
  uint64_t result = 2LL;
  switch(a2)
  {
    case 0:
      uint64_t v4 = a1 + 24;
      double v5 = *(double *)(a1 + 176);
      goto LABEL_6;
    case 1:
      sub_100160604((uint64_t **)(a1 + 24), 6);
      goto LABEL_7;
    case 2:
      return 0LL;
    case 4:
      sub_100160604((uint64_t **)(a1 + 24), 6);
      double v5 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      uint64_t v4 = a1 + 24;
LABEL_6:
      sub_100160CB8(v4, 6, v5);
LABEL_7:
      uint64_t result = 2LL;
      break;
    case 6:
      uint64_t result = 1LL;
      break;
    default:
      return result;
  }

  return result;
}

void sub_100160534(double *a1)
{
  double v17 = 0.0;
  if (sub_100351204((uint64_t)"GeofenceLocationQueryInterval", &v17) && v17 != 0.0)
  {
    a1[1] = v17;
    id v2 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_100391334((uint64_t)(a1 + 1), v2, v3, v4, v5, v6, v7, v8);
    }
  }

  double v16 = 0.0;
  if (sub_100351204((uint64_t)"GeofenceLocationQueryTimeout", &v16) && v16 != 0.0)
  {
    *a1 = v16;
    unint64_t v9 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
      sub_100391334((uint64_t)a1, v9, v10, v11, v12, v13, v14, v15);
    }
  }

uint64_t **sub_100160604(uint64_t **result, int a2)
{
  int v8 = a2;
  id v2 = result[8];
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 8;
    do
    {
      int v5 = *((_DWORD *)v2 + 8);
      BOOL v6 = v5 < a2;
      if (v5 >= a2) {
        uint64_t v7 = (uint64_t **)v2;
      }
      else {
        uint64_t v7 = (uint64_t **)(v2 + 1);
      }
      if (!v6) {
        uint64_t v4 = (uint64_t **)v2;
      }
      id v2 = *v7;
    }

    while (*v7);
    if (v4 != result + 8 && *((_DWORD *)v4 + 8) <= a2)
    {
      uint64_t result = (uint64_t **)v4[5];
      if (result)
      {
        dispatch_source_set_timer((dispatch_source_t)result, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        unint64_t v9 = &v8;
        uint64_t result = sub_100160F94(v3 + 10, &v8, (uint64_t)&unk_1004242F8, &v9);
        *((_BYTE *)result + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
      }
    }
  }

  return result;
}

uint64_t sub_1001606B0(uint64_t a1)
{
  return sub_1001606BC(a1 + 24, 2LL);
}

uint64_t sub_1001606BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  int v30 = *(_DWORD *)(a1 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_1003913A0();
  }
  if (!*(_BYTE *)(a1 + 48)) {
    sub_1003913C8();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_13;
  }
  unsigned int v6 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  do
  {
    int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 < (int)v2;
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (!v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }

  while (*v11);
  if (v8 == a1 + 16 || (int)v2 < *(_DWORD *)(v8 + 32)) {
LABEL_13:
  }
    sub_1003913F0();
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t))(v8 + 40);
  uint64_t v12 = *(void *)(v8 + 48);
  uint64_t v14 = (void *)(v3 + (v12 >> 1));
  if ((v12 & 1) != 0) {
    uint64_t v13 = *(uint64_t (**)(void *, uint64_t))(*v14 + v13);
  }
  int v15 = v13(v14, a2);
  int v16 = v15;
  int v29 = v15;
  if (v6 <= 1 && v15 != (_DWORD)v2) {
    sub_100391468();
  }
  if (v15 != (_DWORD)v2)
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v31 = &v30;
    uint64_t v18 = sub_100160BF8(v7, &v30, (uint64_t)&unk_1004242F8, &v31);
    int v19 = v18[5];
    uint64_t v20 = (uint64_t)v18[6];
    double v21 = (void *)(v17 + (v20 >> 1));
    if ((v20 & 1) != 0) {
      int v19 = *(uint64_t **)(*v21 + v19);
    }
    int v22 = ((uint64_t (*)(void *, uint64_t))v19)(v21, 1LL);
    if (v22 != v30) {
      sub_100391440();
    }
    *(_DWORD *)(a1 + 4) = v16;
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v31 = &v29;
    int v24 = sub_100160BF8(v7, &v29, (uint64_t)&unk_1004242F8, &v31);
    __int128 v25 = v24[5];
    uint64_t v26 = (uint64_t)v24[6];
    __int128 v27 = (void *)(v23 + (v26 >> 1));
    if ((v26 & 1) != 0) {
      __int128 v25 = *(uint64_t **)(*v27 + v25);
    }
    uint64_t v2 = ((uint64_t (*)(void *, void))v25)(v27, 0LL);
    if ((_DWORD)v2 != v29) {
      sub_100391418();
    }
  }

  --*(_DWORD *)(a1 + 112);
  return v2;
}

uint64_t sub_100160868(uint64_t a1)
{
  return sub_1001606BC(a1 + 24, 3LL);
}

uint64_t sub_100160874(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = a2;
  return sub_1001606BC(a1 + 24, 4LL);
}

void sub_100160888(std::__shared_weak_count *a1)
{
}

uint64_t sub_1001608A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1001608E0(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    unsigned int v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(void *)(a1 + 120) = 0LL;
  uint64_t v8 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23)) {
      goto LABEL_6;
    }
LABEL_21:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }

  if (!a2[1]) {
    goto LABEL_21;
  }
LABEL_6:
  else {
    size_t v9 = (size_t)a2[1];
  }
  sub_10015CEB8((uint64_t)&v13, v9 + 1);
  if (v14 >= 0) {
    BOOL v10 = &v13;
  }
  else {
    BOOL v10 = (__int128 *)v13;
  }
  if (v9)
  {
    else {
      uint64_t v11 = *a2;
    }
    memmove(v10, v11, v9);
  }

  *(_WORD *)((char *)v10 + v9) = 44;
  *(_OWORD *)uint64_t v8 = v13;
  *(void *)(a1 + 136) = v14;
  return a1;
}

void sub_100160A64(_Unwind_Exception *a1)
{
  sub_100034A98(v5, *(void **)(v1 + 88));
  sub_100160AB8(v4, *(void **)(v1 + 64));
  sub_100012390(v3);
  sub_100034A98(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_100160AB8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100160AB8(a1, *a2);
    sub_100160AB8(a1, a2[1]);

    operator delete(a2);
  }

uint64_t sub_100160B00(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_100160B7C(*(void **)(a1 + 56), (void *)(a1 + 64), (uint64_t **)a1);

  sub_100034A98(a1 + 80, *(void **)(a1 + 88));
  sub_100160AB8(v2, *(void **)(a1 + 64));
  sub_100012390(a1 + 32);
  sub_100034A98(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t **sub_100160B7C(void *a1, void *a2, uint64_t **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_100160604(a3, *((_DWORD *)v5 + 8));
      unsigned int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unsigned int v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != a2);
  }

  return a3;
}

uint64_t **sub_100160BF8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    _BYTE v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    *((void *)v11 + 6) = 0LL;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100160CB8(uint64_t a1, int a2, double a3)
{
  int v19 = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 104);
  if (!v3) {
    sub_100391490();
  }
  if (a3 >= 0.0)
  {
    uint64_t v7 = a1 + 64;
    uint64_t v6 = *(void *)(a1 + 64);
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v8 = a1 + 64;
    do
    {
      int v9 = *(_DWORD *)(v6 + 32);
      BOOL v10 = v9 < a2;
      if (v9 >= a2) {
        uint64_t v11 = (uint64_t *)v6;
      }
      else {
        uint64_t v11 = (uint64_t *)(v6 + 8);
      }
      if (!v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }

    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (uint64_t v12 = *(void **)(v8 + 40)) != 0LL)
    {
      __int128 v13 = v12;
    }

    else
    {
LABEL_15:
      dispatch_source_t v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v3);
      if (!v14) {
        return;
      }
      __int128 v13 = v14;
      uint64_t v20 = &v19;
      int v15 = sub_100160ED4((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_1004242F8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      unsigned int v17[2] = sub_100160E7C;
      v17[3] = &unk_1007AF260;
      v17[4] = a1;
      int v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }

    dispatch_time_t v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v20 = &v19;
    *((_BYTE *)sub_100160F94((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1004242F8, &v20) + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  }

void sub_100160E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_100160E7C(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1001606BC(v2, *(unsigned int *)(a1 + 40));
  uint64_t v4 = v1;
  uint64_t result = sub_100160F94((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_1004242F8, &v4);
  *((_BYTE *)result + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  return result;
}

uint64_t **sub_100160ED4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    _BYTE v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t **sub_100160F94(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void *sub_100161054@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1AC0[a1]);
}

void *sub_100161068@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1B18[a1]);
}

void *sub_10016107C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1B60[a1]);
}

void *sub_100161090@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1B80[a1]);
}

void sub_100161138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100161580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100161604(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (a2)
  {
    uint64_t v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#ses-devicepresence,device discovery activate failed",  v25,  2u);
    }

    if (WeakRetained)
    {
      [WeakRetained[12] invalidate];
    }

    else
    {
      int v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003914EC(v9, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    unsigned __int8 v6 = [v5 BOOLForKey:@"disableDoubleBoostOnDevicePresenceActivation"];
    uint64_t v7 = (os_log_s *)qword_1008000A0;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
    if ((v6 & 1) != 0)
    {
      if (v8)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#ses-devicepresence,double boost on activation disabled by defaults write",  buf,  2u);
      }
    }

    else
    {
      if (v8)
      {
        *(_WORD *)__int128 v27 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#ses-devicepresence,Starting double boost on activation of device presence session",  v27,  2u);
      }

      if (WeakRetained)
      {
        [WeakRetained[12] triggerEnhancedDiscovery:@"device presence session configuration" useCase:131085 completion:&stru_1007B1A50];
      }

      else
      {
        uint64_t v17 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_1003914B8(v17, v18, v19, v20, v21, v22, v23, v24);
        }
      }
    }
  }
}

void sub_1001617B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001617D8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100391520();
  }
}

void sub_1001620D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *__p, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
  sub_100162478((uint64_t)&a32);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100162284(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v3 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      id v5 = [*(id *)(a1 + 32) hash];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#ses-devicepresence,measurement timeout (%.1fs) fired for device token hash: 0x%lx",  buf,  0x16u);
    }

    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
    *(void *)std::string buf = [*(id *)(a1 + 32) hash];
    unsigned __int8 v6 = sub_100046FEC((void *)WeakRetained + 32, (unint64_t *)buf);
    if (v6) {
      sub_100163FB0((void *)WeakRetained + 32, v6);
    }
    [*((id *)WeakRetained + 8) clearStateForToken:*(void *)(a1 + 32)];
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = [*(id *)(a1 + 32) hash];
    uint64_t v12 = &v11;
    BOOL v8 = sub_100163D24(v7 + 152, (unint64_t *)&v11, (uint64_t)&unk_1004242F8, &v12);
    sub_100230924((void *)v8[3], (uint64_t)buf);
    uint64_t v9 = *((void *)WeakRetained + 6);
    if (v9)
    {
      double v10 = sub_100023CC4();
      sub_10023B7F4(v9, (uint64_t)buf, v10);
    }

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_100162434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100162478(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100162620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016264C(int a1)
{
  uint64_t result = 1LL;
  if ((a1 - 613) > 0x3A || ((1LL << (a1 - 101)) & 0x4A0000000000095LL) == 0)
  {
    unsigned int v3 = a1 - 781;
    if (v3 > 0x17 || ((1 << v3) & 0xF80003) == 0) {
      return 0LL;
    }
  }

  return result;
}

void sub_1001629BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100162C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

void sub_100162E14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100162FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016300C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {

    *(_BYTE *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  }

void sub_1001630D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016328C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163358(_Unwind_Exception *a1)
{
}

void sub_1001633C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100163504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163520(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 72))
  {
    uint64_t v3 = *(void *)(v1 + 104);
    id v4 = [*(id *)(a1 + 40) devicePresencePreset];
    id v5 = [*(id *)(a1 + 48) devicePresencePreset];
    double v6 = sub_100023CC4();
    sub_1001E9984(v3, (uint64_t)v4, (uint64_t)v5, v6);
    sub_10016300C(*(void *)(a1 + 32) + 112LL);
    v11.receiver = *(id *)(a1 + 32);
    v11.super_class = (Class)&OBJC_CLASS___NIServerDevicePresenceSession;
    id v7 = objc_msgSendSuper2(&v11, "resourcesManager");
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 remote]);
    [v9 object:*(void *)(a1 + 56) didUpdateRegion:*(void *)(a1 + 40) previousRegion:*(void *)(a1 + 48)];
  }

  else
  {
    double v10 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#ses-devicepresence,#regions, didUpdateRegion:previousRegion. Should deliver is False.",  buf,  2u);
    }
  }

void sub_10016363C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163718(uint64_t a1)
{
  v11.receiver = *(id *)(a1 + 32);
  v11.super_class = (Class)&OBJC_CLASS___NIServerDevicePresenceSession;
  id v2 = objc_msgSendSuper2(&v11, "resourcesManager");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = *(__n128 **)(*(void *)(a1 + 32) + 104LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
  [v5 boundedRegionRange];
  unsigned __int32 v7 = v6;
  v8.n128_f64[0] = sub_100023CC4();
  double v9 = v8.n128_f64[0];
  v8.n128_u32[0] = v7;
  sub_1001E9948(v4, v8, v9);

  double v10 = (void *)objc_claimAutoreleasedReturnValue([v3 remote]);
  [v10 didUpdateNearbyObjects:*(void *)(a1 + 40)];
}

void sub_1001637D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100163988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100163B9C( uint64_t a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  *(double *)a1 = a7;
  *(double *)(a1 + 8) = a8;
  *(_DWORD *)(a1 + 16) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000063A8((_BYTE *)(a1 + 24), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v12 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v12;
  }

  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  sub_1001309C0((void *)(a1 + 48), *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = a5;
  *(void *)(a1 + 80) = a6;
  return a1;
}

void sub_100163C28(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100163C44(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
  }

  return a1;
}

void sub_100163C84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100163CDC(a2 + 144);
    sub_100163CDC(a2 + 48);
    operator delete((void *)a2);
  }

uint64_t sub_100163CDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    id v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
  }

  return a1;
}

void *sub_100163D24(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    double v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_100163F50(_Unwind_Exception *a1)
{
}

void sub_100163F6C(uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_100163FB0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100021814(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (id *)__p;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }

  return v2;
}

void *sub_100164004(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    double v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100021B74(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_100164230(_Unwind_Exception *a1)
{
}

uint64_t sub_10016424C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100164284(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_1001642C0()
{
  id v0 = objc_autoreleasePoolPush();
  v10[0] = xmmword_100424288;
  v10[1] = unk_100424298;
  sub_10015EABC((uint64_t)&unk_1007F8520, (int *)v10, 4LL);
  xmmword_1007F8538 = xmmword_100423CB0;
  unk_1007F8548 = xmmword_100423CC0;
  qword_1007F8560 = 0LL;
  unk_1007F8568 = 0LL;
  qword_1007F8558 = 0x3FD999999999999ALL;
  unk_1007F8570 = xmmword_100423CD0;
  dword_1007F8580 = 5;
  qword_1007F8588 = 0x4000000000000000LL;
  dword_1007F8590 = 5;
  byte_1007F8598 = 0;
  unk_1007F859C = 0x30000000ALL;
  xmmword_1007F85A8 = xmmword_100423CE0;
  unk_1007F85B8 = xmmword_100423CF0;
  xmmword_1007F85C8 = xmmword_100423D00;
  qword_1007F85D8 = 0x3FE3333333333333LL;
  dword_1007F85E0 = 3;
  xmmword_1007F85E8 = xmmword_100423D10;
  unk_1007F85F8 = xmmword_100423CF0;
  xmmword_1007F8608 = xmmword_100423CE0;
  qword_1007F8618 = 0x3FE3333333333333LL;
  byte_1007F8620 = 0;
  xmmword_1007F8628 = xmmword_100423D20;
  unk_1007F8638 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v8 = _Q0;
  xmmword_1007F8648 = _Q0;
  qword_1007F8658 = 0xBFD3333333333333LL;
  xmmword_1007F8660 = xmmword_100423D40;
  qword_1007F8670 = 0x3E99999A40000000LL;
  xmmword_1007F8678 = xmmword_100423CC0;
  qword_1007F8690 = 0LL;
  unk_1007F8698 = 0LL;
  qword_1007F8688 = 0x3FD999999999999ALL;
  xmmword_1007F86A0 = xmmword_100423CD0;
  dword_1007F86B0 = 5;
  qword_1007F86B8 = 0x4000000000000000LL;
  dword_1007F86C0 = 4;
  qword_1007F86C8 = 0x300000008LL;
  qword_1007F86D0 = 0xC04E800000000000LL;
  unint64_t v9 = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)&unk_1007F86D8, (double *)&v9, 1LL);
  xmmword_1007F86F0 = xmmword_100423D50;
  qword_1007F8700 = 0x4024000000000000LL;
  dword_1007F8708 = 45;
  byte_1007F8710 = 0;
  byte_1007F8728 = 0;
  qword_1007F8730 = 0LL;
  byte_1007F8738 = 0;
  dword_1007F873C = 1;
  byte_1007F8740 = 1;
  xmmword_1007F8748 = xmmword_100423D60;
  unk_1007F8758 = xmmword_100423D70;
  xmmword_1007F8768 = v8;
  qword_1007F8778 = 0xC059000000000000LL;
  xmmword_1007F8780 = xmmword_100423D80;
  qword_1007F8790 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007F8798 = xmmword_100423CC0;
  qword_1007F87A8 = 0x3FD999999999999ALL;
  qword_1007F87B8 = 0LL;
  qword_1007F87B0 = 0LL;
  xmmword_1007F87C0 = xmmword_100423CD0;
  dword_1007F87D0 = 5;
  qword_1007F87D8 = 0x4000000000000000LL;
  dword_1007F87E0 = 10;
  qword_1007F87E8 = 0x4034000000000000LL;
  dword_1007F87F0 = 3;
  xmmword_1007F87F8 = xmmword_100423D90;
  __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007F8520, (void *)&_mh_execute_header);
  qword_1007F8810 = 0LL;
  unk_1007F8818 = 0LL;
  qword_1007F8808 = 0LL;
  char v6 = operator new(0x40uLL);
  qword_1007F8810 = (uint64_t)(v6 + 4);
  unk_1007F8818 = v6 + 4;
  _OWORD *v6 = xmmword_1004242A8;
  v6[1] = unk_1004242B8;
  _DWORD v6[2] = xmmword_1004242C8;
  v6[3] = unk_1004242D8;
  qword_1007F8808 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F8808, (void *)&_mh_execute_header);
  qword_1007F8828 = 0LL;
  unk_1007F8830 = 0LL;
  qword_1007F8820 = 0LL;
  unint64_t v7 = operator new(0x10uLL);
  qword_1007F8828 = (uint64_t)(v7 + 1);
  unk_1007F8830 = v7 + 1;
  _OWORD *v7 = xmmword_1004242E8;
  qword_1007F8820 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F8820, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100164620(_Unwind_Exception *a1)
{
}

void *sub_10016467C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return sub_1001646B0(a1, v2);
}

void *sub_1001646B0(void *a1, void *a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &off_1007B1BB0;
  v4[1] = 0LL;
  _DWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  char v6 = 0LL;
  sub_100012538((uint64_t)a1, a2, (uint64_t)a2);
  sub_1001647CC(&v6, 0LL);
  return a1;
}

void sub_100164720(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10016473C(std::__shared_weak_count *a1)
{
}

void sub_100164750(uint64_t a1)
{
}

uint64_t sub_100164758(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100164798(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(__p);
  }

void sub_1001647CC(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }

void *sub_10016480C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1CC8[a1]);
}

void *sub_100164820@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1D20[a1]);
}

void *sub_100164834@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1D68[a1]);
}

void *sub_100164848@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B1D88[a1]);
}

void sub_100164CA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100165138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001652FC(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_10016541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001654E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001655C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001656CC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    v10.receiver = *(id *)(a1 + 32);
    v10.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
    id v4 = objc_msgSendSuper2(&v10, "resourcesManager");
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    char v6 = objc_alloc(&OBJC_CLASS___NINearbyObject);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3[12] accessoryDiscoveryToken]);
    __int128 v8 = -[NINearbyObject initWithToken:](v6, "initWithToken:", v7);

    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 remote]);
    [v9 didGenerateShareableConfigurationData:*(void *)(a1 + 40) forObject:v8];
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_100391934();
  }
}

void sub_1001657DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100165A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id location = va_arg(va1, id);
  if (LOBYTE(STACK[0x330])) {
    sub_100391960((uint64_t)va1);
  }
  sub_100124BFC(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)locationa);
  sub_10012EE88((uint64_t)&STACK[0x5F0]);
  _Unwind_Resume(a1);
}

void sub_100165AA0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    if (([WeakRetained[12] dataExchangeDisabledAndUsingParameterOverrides] & 1) != 0
      || (id v4 = *(id *)(a1 + 88),
          id v5 = (void *)objc_claimAutoreleasedReturnValue([v3[12] accessoryDiscoveryToken]),
          char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 shortDeviceAddress]),
          id v7 = [v6 unsignedLongLongValue],
          v6,
          v5,
          v4 == v7))
    {
      uint64_t v8 = a1 + 80;
      if ((*(_DWORD *)(a1 + 80) - 1) >= 3)
      {
        float v14 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
          sub_1003919D8((int *)(a1 + 80), v14);
        }
      }

      else if (*(_BYTE *)(a1 + 72))
      {
        double v9 = *(double *)(a1 + 64);
        objc_super v10 = (void *)objc_claimAutoreleasedReturnValue([v3[12] accessoryDiscoveryToken]);
        if (v10)
        {
          v15.receiver = *(id *)(a1 + 32);
          v15.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
          id v11 = objc_msgSendSuper2(&v15, "resourcesManager");
          unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lifecycleSupervisor]);
          [v3[8] acceptRoseSolution:v8 - 32];
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        sub_1003919AC();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_100391980();
  }
}

void sub_100165C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100165CC0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  sub_1001376C0((_BYTE *)(a1 + 96), a2 + 96);
  sub_1001317DC((_BYTE *)(a1 + 656), a2 + 656);
  sub_100137714((__n128 *)(a1 + 808), (__n128 *)(a2 + 808));
  return memcpy((void *)(a1 + 928), (const void *)(a2 + 928), 0x239uLL);
}

void sub_100165D2C(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 + 800)) {
    sub_100391A4C(v2);
  }
  sub_100124BFC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100165D58(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 920))
  {
    uint64_t v2 = *(void **)(a1 + 880);
    if (v2)
    {
      *(void *)(a1 + 888) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 800)) {
    sub_100034A98(a1 + 672, *(void **)(a1 + 680));
  }
  return sub_100124BFC(a1 + 96);
}

void sub_100165E60(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (!WeakRetained || *((_BYTE *)WeakRetained + 88) == 6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100391A5C();
    }
    goto LABEL_17;
  }

  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  v19.receiver = *(id *)(a1 + 32);
  v19.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
  objc_msgSendSuper2(&v19, "serviceRequestDidUpdateStatus:", v4, v5);
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 != 2)
  {
    if (v6 != 3) {
      goto LABEL_17;
    }
    int v7 = *(_DWORD *)(a1 + 56);
    if (v7 != 8 && v7 != 5) {
      goto LABEL_17;
    }
    uint64_t v8 = (os_log_s *)qword_1008000A0;
    if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)std::string buf = 0;
    double v9 = "#ses-ecosystem,Stop tracking peer due to FW-generated timeout";
    goto LABEL_13;
  }

  uint64_t v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    double v9 = "#ses-ecosystem,Stop tracking peer due to inability to start ranging (even with timeouts)";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
  }

void sub_100166090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166194(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) != 6)
  {
    uint64_t v4 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100275E00(*(_DWORD *)(a1 + 48), v9);
      sub_100391AB4((char *)v9, (uint64_t)v10, v4);
    }

    [v3 invalidate];
    v8.receiver = *(id *)(a1 + 32);
    v8.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
    id v5 = objc_msgSendSuper2(&v8, "invalidationHandler");
    int v6 = (void (**)(void, void))objc_claimAutoreleasedReturnValue(v5);
    int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.NearbyInteraction",  -5887LL,  0LL));
    ((void (**)(void, void *))v6)[2](v6, v7);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_100391A88();
  }
}

void sub_1001662EC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100166384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001664E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166734(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) == 2)
  {
    v10.receiver = *(id *)(a1 + 32);
    v10.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
    id v4 = objc_msgSendSuper2(&v10, "resourcesManager");
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 appStateMonitor]);
    BOOL v7 = [v6 currentAppState] == 3;

    if (v7 && [v3[12] backgroundMode] == (id)2)
    {
      objc_super v8 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v9 = [v5 clientPid];
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v12 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#ses-ecosystem,Client with pid %d isn't visible. Skip sending nearby object",  buf,  8u);
      }
    }

    else
    {
      objc_super v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 remote]);
      -[os_log_s didUpdateNearbyObjects:](v8, "didUpdateNearbyObjects:", *(void *)(a1 + 40));
    }
  }
}

void sub_10016689C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166A30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 88) == 2)
  {
    v7.receiver = *(id *)(a1 + 32);
    v7.super_class = (Class)&OBJC_CLASS___NIServerNearbyAccessorySession;
    id v4 = objc_msgSendSuper2(&v7, "resourcesManager");
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 remote]);
    [v6 didUpdateAlgorithmState:*(void *)(a1 + 40) forObject:*(void *)(a1 + 48)];
  }
}

void sub_100166AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100166D9C()
{
  id v0 = objc_autoreleasePoolPush();
  v10[0] = xmmword_100424420;
  v10[1] = unk_100424430;
  sub_10015EABC((uint64_t)&unk_1007F8838, (int *)v10, 4LL);
  xmmword_1007F8850 = xmmword_100423CB0;
  unk_1007F8860 = xmmword_100423CC0;
  qword_1007F8878 = 0LL;
  unk_1007F8880 = 0LL;
  qword_1007F8870 = 0x3FD999999999999ALL;
  unk_1007F8888 = xmmword_100423CD0;
  dword_1007F8898 = 5;
  qword_1007F88A0 = 0x4000000000000000LL;
  dword_1007F88A8 = 5;
  byte_1007F88B0 = 0;
  *(void *)&algn_1007F88B1[3] = 0x30000000ALL;
  xmmword_1007F88C0 = xmmword_100423CE0;
  unk_1007F88D0 = xmmword_100423CF0;
  xmmword_1007F88E0 = xmmword_100423D00;
  qword_1007F88F0 = 0x3FE3333333333333LL;
  dword_1007F88F8 = 3;
  xmmword_1007F8900 = xmmword_100423D10;
  unk_1007F8910 = xmmword_100423CF0;
  xmmword_1007F8920 = xmmword_100423CE0;
  qword_1007F8930 = 0x3FE3333333333333LL;
  byte_1007F8938 = 0;
  xmmword_1007F8940 = xmmword_100423D20;
  unk_1007F8950 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v8 = _Q0;
  xmmword_1007F8960 = _Q0;
  qword_1007F8970 = 0xBFD3333333333333LL;
  xmmword_1007F8978 = xmmword_100423D40;
  qword_1007F8988 = 0x3E99999A40000000LL;
  xmmword_1007F8990 = xmmword_100423CC0;
  qword_1007F89A8 = 0LL;
  unk_1007F89B0 = 0LL;
  qword_1007F89A0 = 0x3FD999999999999ALL;
  xmmword_1007F89B8 = xmmword_100423CD0;
  dword_1007F89C8 = 5;
  qword_1007F89D0 = 0x4000000000000000LL;
  dword_1007F89D8 = 4;
  qword_1007F89E0 = 0x300000008LL;
  qword_1007F89E8 = 0xC04E800000000000LL;
  unint64_t v9 = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)&unk_1007F89F0, (double *)&v9, 1LL);
  xmmword_1007F8A08 = xmmword_100423D50;
  qword_1007F8A18 = 0x4024000000000000LL;
  dword_1007F8A20 = 45;
  byte_1007F8A28 = 0;
  byte_1007F8A40 = 0;
  qword_1007F8A48 = 0LL;
  byte_1007F8A50 = 0;
  dword_1007F8A54 = 1;
  byte_1007F8A58 = 1;
  xmmword_1007F8A60 = xmmword_100423D60;
  unk_1007F8A70 = xmmword_100423D70;
  xmmword_1007F8A80 = v8;
  qword_1007F8A90 = 0xC059000000000000LL;
  xmmword_1007F8A98 = xmmword_100423D80;
  qword_1007F8AA8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007F8AB0 = xmmword_100423CC0;
  qword_1007F8AC0 = 0x3FD999999999999ALL;
  qword_1007F8AD0 = 0LL;
  qword_1007F8AC8 = 0LL;
  xmmword_1007F8AD8 = xmmword_100423CD0;
  dword_1007F8AE8 = 5;
  qword_1007F8AF0 = 0x4000000000000000LL;
  dword_1007F8AF8 = 10;
  qword_1007F8B00 = 0x4034000000000000LL;
  dword_1007F8B08 = 3;
  xmmword_1007F8B10 = xmmword_100423D90;
  __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007F8838, (void *)&_mh_execute_header);
  qword_1007F8B28 = 0LL;
  unk_1007F8B30 = 0LL;
  qword_1007F8B20 = 0LL;
  int v6 = operator new(0x40uLL);
  qword_1007F8B28 = (uint64_t)(v6 + 4);
  unk_1007F8B30 = v6 + 4;
  _OWORD *v6 = xmmword_100424440;
  v6[1] = unk_100424450;
  _DWORD v6[2] = xmmword_100424460;
  v6[3] = unk_100424470;
  qword_1007F8B20 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F8B20, (void *)&_mh_execute_header);
  qword_1007F8B40 = 0LL;
  unk_1007F8B48 = 0LL;
  qword_1007F8B38 = 0LL;
  objc_super v7 = operator new(0x10uLL);
  qword_1007F8B40 = (uint64_t)(v7 + 1);
  unk_1007F8B48 = v7 + 1;
  _OWORD *v7 = xmmword_100424480;
  qword_1007F8B38 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F8B38, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001670FC(_Unwind_Exception *a1)
{
}

void sub_100167264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100167538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_100167558(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrintableState]);
  uint64_t v2 = sub_100024190(@"Accessory GATT Manager", v1);

  return v2;
}

void sub_10016759C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100167620(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _initInternal];
  uint64_t v2 = (void *)qword_1007F8B50;
  qword_1007F8B50 = (uint64_t)v1;
}

void sub_10016773C(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForKeyedSubscript:a1[5]]);

  if (v2)
  {
    uint64_t v3 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      uint64_t v5 = a1[6];
      *(_DWORD *)std::string buf = 138412546;
      uint64_t v30 = v4;
      __int16 v31 = 2112;
      uint64_t v32 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,AddServiceListener: existing listener [%@] for peer [%@]",  buf,  0x16u);
    }
  }

  else
  {
    int v6 = objc_opt_new(&OBJC_CLASS___ListenerTracking);
    -[ListenerTracking setListener:](v6, "setListener:", a1[7]);
    -[ListenerTracking setPeerIdentifier:](v6, "setPeerIdentifier:", a1[6]);
    -[ListenerTracking setConfiguration:](v6, "setConfiguration:", a1[8]);
    [*(id *)(a1[4] + 24) setObject:v6 forKey:a1[5]];
    objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]]);

    __int128 v8 = (os_log_s *)qword_1008000A0;
    if (v7)
    {
      unint64_t v9 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = a1[6];
        uint64_t v27 = a1[5];
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:v10]);
        unsigned int v11 = [v28 connectionState] - 1;
        if (v11 > 5) {
          unsigned int v12 = "Idle";
        }
        else {
          unsigned int v12 = off_1007B1FF0[(char)v11];
        }
        uint64_t v24 = v12;
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]]);
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v26 resultConfigCharacteristics]);
        unsigned int v17 = [v25 count];
        unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]]);
        objc_super v19 = (void *)objc_claimAutoreleasedReturnValue([v18 cachedConfigCharacteristics]);
        unsigned int v20 = [v19 count];
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]]);
        unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 listeners]);
        *(_DWORD *)std::string buf = 138413570;
        uint64_t v30 = v27;
        __int16 v31 = 2112;
        uint64_t v32 = v10;
        __int16 v33 = 2080;
        int v34 = v24;
        __int16 v35 = 1024;
        unsigned int v36 = v17;
        __int16 v37 = 1024;
        unsigned int v38 = v20;
        __int16 v39 = 1024;
        unsigned int v40 = [v22 count];
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,AddServiceListener: new listener [%@] for existing peer [%@]. State: %s. Result: %d blobs. Cache d: %d blobs. Previous listener count: %d",  buf,  0x32u);
      }

      objc_super v15 = (PeerTracking *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[PeerTracking listeners](v15, "listeners"));
      [v23 addObject:a1[5]];
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = a1[5];
        uint64_t v14 = a1[6];
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v30 = v13;
        __int16 v31 = 2112;
        uint64_t v32 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,AddServiceListener: new listener [%@] for new peer [%@]",  buf,  0x16u);
      }

      objc_super v15 = objc_opt_new(&OBJC_CLASS___PeerTracking);
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(-[PeerTracking listeners](v15, "listeners"));
      [v16 addObject:a1[5]];

      [*(id *)(a1[4] + 32) setObject:v15 forKey:a1[6]];
    }
  }

void sub_100167AE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100167C18(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 listener]);

    int v56 = v5;
    if (v5)
    {
      int v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)]);
      objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([v6 peerIdentifier]);

      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
      unint64_t v9 = (os_log_s *)qword_1008000A0;
      if (v8)
      {
        uint64_t v10 = (os_log_s *)(id)qword_1008000A0;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v54 = *(void *)(a1 + 40);
          __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
          unsigned int v11 = [v55 connectionState] - 1;
          if (v11 > 5) {
            unsigned int v12 = "Idle";
          }
          else {
            unsigned int v12 = off_1007B1FF0[(char)v11];
          }
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 resultConfigCharacteristics]);
          unsigned int v29 = [v28 count];
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
          __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 cachedConfigCharacteristics]);
          *(_DWORD *)std::string buf = 138413314;
          uint64_t v63 = v54;
          __int16 v64 = 2112;
          __int16 v65 = v7;
          __int16 v66 = 2080;
          __int16 v67 = v12;
          __int16 v68 = 1024;
          unsigned int v69 = v29;
          __int16 v70 = 1024;
          unsigned int v71 = [v31 count];
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,BackgroundAuthorization: probing authorization for listener [%@] for peer [%@]. State: %s. Res ult: %d blobs. Cached: %d blobs",  buf,  0x2Cu);
        }

        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
        BOOL v33 = [v32 connectionState] == 0;

        if (v33) {
          [*(id *)(a1 + 32) _connectToPeer:v7];
        }
        int v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
        BOOL v35 = [v34 connectionState] == 6;

        unsigned int v36 = *(id **)(a1 + 32);
        if (v35)
        {
          unsigned int v37 = [v36 _isListener:*v2 backgroundAuthorizedForPeer:v7 useCache:0];
          unsigned int v38 = (os_log_s *)qword_1008000A0;
          BOOL v39 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT);
          if (v37)
          {
            if (v39)
            {
              uint64_t v40 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v40;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized",  buf,  0x16u);
            }

            unsigned __int8 v41 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v56 getQueueForInputingData]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_100168340;
            block[3] = &unk_1007A3000;
            id v60 = v56;
            dispatch_async(v41, block);
          }

          else
          {
            if (v39)
            {
              uint64_t v47 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v47;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] NOT authorized. Re-discover services",  buf,  0x16u);
            }

            int v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
            off_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 peripheral]);
            timespec v50 = (void *)objc_claimAutoreleasedReturnValue( +[CBUUID UUIDWithString:]( &OBJC_CLASS___CBUUID,  "UUIDWithString:",  @"48fe3e40-0817-4bb2-8633-3073689c2dba"));
            uint64_t v61 = v50;
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v61,  1LL));
            [v49 discoverServices:v51];

            unint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
            [v52 changeConnectionState:3];

            __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7]);
            [v53 cacheCharacteristics];
          }
        }

        else
        {
          uint8_t v42 = (void *)objc_claimAutoreleasedReturnValue([v36[4] objectForKeyedSubscript:v7]);
          BOOL v43 = [v42 connectionState] == 0;

          if (!v43
            && [*(id *)(a1 + 32) _isListener:*(void *)(a1 + 40) backgroundAuthorizedForPeer:v7 useCache:1])
          {
            uint64_t v44 = (os_log_s *)qword_1008000A0;
            if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v45 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v45;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] TEMPORARILY authorized pending confirmation",  buf,  0x16u);
            }

            __int128 v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v56 getQueueForInputingData]);
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472LL;
            v57[2] = sub_100168348;
            v57[3] = &unk_1007A3000;
            id v58 = v56;
            dispatch_async(v46, v57);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        sub_100391BEC(v2, (uint64_t)v7, v9);
      }
    }

    else
    {
      unsigned int v20 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
LABEL_32:

        return;
      }

      sub_100391B84((uint64_t)v2, v20, v21, v22, v23, v24, v25, v26);
    }

    uint64_t v5 = v56;
    goto LABEL_32;
  }

  uint64_t v13 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100391B1C((uint64_t)v2, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_100168244( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_100168340(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

id sub_100168348(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

void sub_1001683CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 peerIdentifier]);

    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 listeners]);
    [v6 removeObject:*(void *)(a1 + 40)];

    objc_super v7 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 listeners]);
      int v23 = 138412802;
      uint64_t v24 = v8;
      __int16 v25 = 2112;
      uint64_t v26 = v4;
      __int16 v27 = 1024;
      unsigned int v28 = [v10 count];
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,RemoveServiceListener: listener [%@] for peer [%@]. Listener count after removal: %d",  (uint8_t *)&v23,  0x1Cu);
    }

    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 listeners]);
    BOOL v13 = [v12 count] == 0;

    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 peripheral]);
      BOOL v16 = v15 == 0LL;

      if (!v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void **)(v17 + 16);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 32) objectForKeyedSubscript:v4]);
        unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue([v19 peripheral]);
        [v18 cancelPeripheralConnection:v20];
      }

      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
      [v21 changeConnectionState:0];

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4]);
      [v22 cacheCharacteristics];
    }

    [*(id *)(a1 + 32) _cleanupExcessiveDetachedPeers];
  }

void sub_100168648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001687A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001687B0(uint64_t a1)
{
}

void sub_1001687B8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrintableState]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001689A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1001689D8(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  int v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  objc_super v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"    [%@]", v17));
  [v6 addObject:v7];

  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 peerIdentifier]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"        Peer: %@",  v9));
  [v8 addObject:v10];

  unsigned int v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accessoryConfigData]);
  id v14 = sub_100023D80(v13, 0);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"        Config blob: %@",  v15));
  [v11 addObject:v16];
}

void sub_100168B2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100168B90(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  id v5 = a3;
  int v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  objc_super v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"    [%@]", v29));
  [v6 addObject:v7];

  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 listeners]);
  id v10 = [v9 count];
  unsigned int v11 = [v5 connectionState] - 1;
  if (v11 > 5) {
    unsigned int v12 = "Idle";
  }
  else {
    unsigned int v12 = off_1007B1FF0[(char)v11];
  }
  id v13 = [v5 numCharacteristicsLeftToRead];
  else {
    id v14 = "single-config";
  }
  double v15 = *(double *)(a1 + 40);
  [v5 initTime];
  double v17 = v16;
  double v18 = *(double *)(a1 + 40);
  [v5 timeOfLatestConnectionState];
  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"        Listeners: %d. Connection state: %s (%d %s characteristics left to read). Age: total %.2f s, in-state %.2f s",  v10,  v12,  v13,  v14,  v15 - v17,  v18 - v19));
  [v8 addObject:v20];

  uint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 resultConfigCharacteristics]);
  int v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"        Result: %d blobs",  [v22 count]));
  [v21 addObject:v23];

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 resultConfigCharacteristics]);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  _OWORD v31[2] = sub_100168E9C;
  void v31[3] = &unk_1007B1EA0;
  __n128 v31[4] = *(void *)(a1 + 32);
  [v24 enumerateObjectsUsingBlock:v31];

  __int16 v25 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v5 cachedConfigCharacteristics]);
  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"        Cached: %d blobs",  [v26 count]));
  [v25 addObject:v27];

  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v5 cachedConfigCharacteristics]);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_100168F30;
  _BYTE v30[3] = &unk_1007B1EA0;
  v30[4] = *(void *)(a1 + 32);
  [v28 enumerateObjectsUsingBlock:v30];
}

void sub_100168E50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  _Unwind_Resume(a1);
}

void sub_100168E9C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v3 = sub_100023D80(a2, 0);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"            Blob: %@",  v5));
  [v2 addObject:v4];
}

void sub_100168F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100168F30(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v3 = sub_100023D80(a2, 0);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"            Blob: %@",  v5));
  [v2 addObject:v4];
}

void sub_100168FA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001694B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1001695C8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100169608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100169618(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100169658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016976C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1001697AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v3]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 listener]);

  if (v5)
  {
    int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 getQueueForInputingData]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _WORD v7[2] = sub_1001698AC;
    void v7[3] = &unk_1007A2248;
    id v8 = v5;
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v6, v7);
  }
}

void sub_100169884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001698AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) accessoryGATTServiceFailedWithError:*(void *)(a1 + 40)];
}

void sub_1001699EC(_Unwind_Exception *a1)
{
  objc_super v7 = v5;

  _Unwind_Resume(a1);
}

void sub_100169C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100169C5C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 listeners]);
  id v7 = [v6 count];

  if (!v7) {
    [*(id *)(a1 + 32) addObject:v8];
  }
}

void sub_100169CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100169E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100169E34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectToPeer:a2];
}

void sub_10016A074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016A320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016A570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10016AA44(id a1, CBService *a2, unint64_t a3, BOOL *a4)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[CBService UUID](a2, "UUID", a3, a4));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CBUUID UUIDWithString:]( &OBJC_CLASS___CBUUID,  "UUIDWithString:",  @"48fe3e40-0817-4bb2-8633-3073689c2dba"));
  unsigned __int8 v6 = [v4 isEqual:v5];

  return v6;
}

void sub_10016AAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016B020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_10016B144(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 UUID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CBUUID UUIDWithString:]( &OBJC_CLASS___CBUUID,  "UUIDWithString:",  @"1176cf7b-bed2-4690-bd69-5f34001e820c"));
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    [*(id *)(a1 + 32) readValueForCharacteristic:v8];
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)]);
    [v6 setReadingMultiConfigCharacteristics:1];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)]);
    objc_msgSend( v7,  "setNumCharacteristicsLeftToRead:",  objc_msgSend(v7, "numCharacteristicsLeftToRead") + 1);
  }
}

void sub_10016B214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10016B248(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 UUID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CBUUID UUIDWithString:]( &OBJC_CLASS___CBUUID,  "UUIDWithString:",  @"95e8d9d5-d8ef-4721-9a4e-807375f53328"));
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    [*(id *)(a1 + 32) readValueForCharacteristic:v7];
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)]);
    objc_msgSend( v6,  "setNumCharacteristicsLeftToRead:",  objc_msgSend(v6, "numCharacteristicsLeftToRead") + 1);
  }
}

void sub_10016B2F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10016BE30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10016BFF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v3]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 listener]);

  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    unsigned __int8 v6 = (uint64_t *)(a1 + 40);
    unsigned int v8 = [(id)*(v6 - 1) _isListener:v3 backgroundAuthorizedForPeer:v7 useCache:0];
    id v9 = (os_log_s *)qword_1008000A0;
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *v6;
        *(_DWORD *)std::string buf = 138412546;
        id v19 = v3;
        __int16 v20 = 2112;
        uint64_t v21 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized",  buf,  0x16u);
      }

      unsigned int v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 getQueueForInputingData]);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      _OWORD v16[2] = sub_10016C20C;
      void v16[3] = &unk_1007A3000;
      unsigned int v12 = &v17;
      id v17 = v5;
      id v13 = v16;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_100392440();
      }
      unsigned int v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 getQueueForInputingData]);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      _OWORD v14[2] = sub_10016C214;
      v14[3] = &unk_1007A3000;
      unsigned int v12 = &v15;
      id v15 = v5;
      id v13 = v14;
    }

    dispatch_async(v11, v13);
  }
}

void sub_10016C1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10016C20C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

void sub_10016C214(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.NearbyInteraction",  -5888LL,  0LL));
  objc_msgSend(v1, "accessoryGATTServiceFailedWithError:");
}

void sub_10016C270( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void *sub_10016C2CC(void *a1, size_t a2, _BYTE *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    size_t v5 = a2;
    sub_1000242D4(a1, a2);
    unsigned __int8 v6 = (_BYTE *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }

    while (v5);
    a1[1] = v7;
  }

  return a1;
}

void sub_10016C32C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10016C348(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

void sub_10016C394(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_10016C5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016C694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10016C6A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = dispatch_queue_create("com.apple.RosePowerManagerQueue", 0LL);
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 15000000000LL;
  sub_10001E914(a1 + 24, a2);
  *(void *)(a1 + 56) = 0LL;
  sub_10026DC08(a1 + 64);
  return a1;
}

void sub_10016C718(_Unwind_Exception *a1)
{
  id v3 = v2;

  size_t v5 = *(void **)(v1 + 48);
  if (v5 == v3)
  {
    unsigned __int8 v6 = v3;
    uint64_t v7 = 4LL;
  }

  else
  {
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
    unsigned __int8 v6 = *(void **)(v1 + 48);
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_10016C774(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100392528();
  }
  id v2 = *(dispatch_queue_s **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016C840;
  block[3] = &unk_1007A2398;
  void block[4] = a1;
  dispatch_sync(v2, block);

  id v3 = *(void **)(a1 + 48);
  if (v3 == (void *)(a1 + 24))
  {
    uint64_t v4 = 4LL;
    id v3 = (void *)(a1 + 24);
    goto LABEL_7;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10016C840(uint64_t a1)
{
}

void sub_10016C848(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    id v2 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "PRRosePowerManager: Cancelling fRoseIdleTimer",  v4,  2u);
    }

    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 56));
    id v3 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0LL;
  }

void sub_10016C8D0(dispatch_queue_s **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016C928;
  block[3] = &unk_1007A2398;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_10016C928(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: initialize", v4, 2u);
  }

  uint64_t result = sub_10016C998();
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10016C998()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 dictionaryRepresentation]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"roseDefaultPowerVoteCount"]);
  if (!v3 || (uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNumber, v2), (objc_opt_isKindOfClass(v3, v4) & 1) == 0))
  {
    if (sub_1001CDC78())
    {
      unsigned int v8 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PRRosePowerManager: NonUIInstall build",  (uint8_t *)&v10,  2u);
      }
    }

    goto LABEL_11;
  }

  uint64_t v5 = (uint64_t)[v3 integerValue];
  unsigned __int8 v6 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 134217984;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PRRosePowerManager: User Default Exists, roseDefaultPowerVoteCount = %ld",  (uint8_t *)&v10,  0xCu);
  }

  if (v5 < 0)
  {
    uint64_t v7 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100392554(v7);
    }
LABEL_11:
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10016CB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016CB60(dispatch_queue_s **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10016CBB8;
  v3[3] = &unk_1007AF100;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_10016CBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = (double)*(uint64_t *)(a1 + 40) / 1000.0;
    int v5 = 134217984;
    double v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PRRosePowerManager: idle power down timeout %.3f s",  (uint8_t *)&v5,  0xCu);
  }

  *(void *)(v2 + 16) = 1000000LL * *(void *)(a1 + 40);
}

void sub_10016CC8C(dispatch_queue_s **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016CCE4;
  block[3] = &unk_1007A2398;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_10016CCE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: requestPower", v4, 2u);
  }

  sub_10016C848(v1);
  int v3 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v3 + 1;
  if (!v3) {
    sub_10026DC18(v1 + 64);
  }
}

void sub_10016CD6C(dispatch_queue_s **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016CDC4;
  block[3] = &unk_1007A2398;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_10016CDC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: releasePower", buf, 2u);
  }

  int v3 = *(_DWORD *)(v1 + 8);
  if (!v3) {
    goto LABEL_10;
  }
  *(_DWORD *)(v1 + 8) = v3 - 1;
  if (v3 <= 0) {
    sub_1003925CC();
  }
  if (v3 == 1 && (sub_10016CEC4(v1) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003925F4();
    }
    abort_report_np("PRRosePowerManager: Failed to start RoseIdleTimer.");
LABEL_10:
    double v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PRRosePowerManager: releasePower fPowerVoteCount already 0, ignoring.",  v5,  2u);
    }
  }

uint64_t sub_10016CEC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    double v16 = "startRosePowerOffIdleTimer";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: %s", buf, 0xCu);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _OWORD v14[2] = sub_10016D120;
  v14[3] = &unk_1007A2398;
  void v14[4] = a1;
  int v3 = objc_retainBlock(v14);
  sub_10016C848(a1);
  dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, *(dispatch_queue_t *)a1);
  int v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;

  double v6 = *(dispatch_source_s **)(a1 + 56);
  if (v6 && (int64_t v7 = *(void *)(a1 + 16)) != 0)
  {
    dispatch_time_t v8 = dispatch_time(0LL, v7);
    dispatch_source_set_timer(v6, v8, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
    id v9 = *(dispatch_source_s **)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10016D1C8;
    void v12[3] = &unk_1007B2198;
    id v13 = v3;
    dispatch_source_set_event_handler(v9, v12);
    dispatch_resume(*(dispatch_object_t *)(a1 + 56));

    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_10016D074(dispatch_queue_s **a1)
{
  uint64_t v5 = 0LL;
  double v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  uint64_t v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_10016D104;
  v4[3] = &unk_1007B2170;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10016D104(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 40) + 8LL) > 0;
  return result;
}

void sub_10016D120(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_10039264C();
  }
  sub_10016C848(v1);
  if (*(int *)(v1 + 8) >= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100392620();
    }
    abort_report_np("PRRosePowerManager: RoseIdleTimer timeout unexpected");
LABEL_9:
    sub_10001EEF0();
  }

  uint64_t v2 = *(void *)(v1 + 48);
  if (!v2) {
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  sub_10026DD40(v1 + 64);
}

uint64_t sub_10016D1C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

dispatch_queue_s ***sub_10016D1D4(dispatch_queue_s ***a1, dispatch_queue_s **a2)
{
  *a1 = a2;
  int v3 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016CCE4;
  block[3] = &unk_1007A2398;
  void block[4] = a2;
  dispatch_sync(v3, block);
  return a1;
}

dispatch_queue_s ***sub_10016D23C(dispatch_queue_s ***a1)
{
  uint64_t v2 = *a1;
  int v3 = **a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016CDC4;
  block[3] = &unk_1007A2398;
  void block[4] = v2;
  dispatch_sync(v3, block);
  return a1;
}

void *sub_10016D2A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2330[a1]);
}

void *sub_10016D2B8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2388[a1]);
}

void *sub_10016D2CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B23D0[a1]);
}

void *sub_10016D2E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B23F0[a1]);
}

void sub_10016D464(_Unwind_Exception *a1)
{
  dispatch_source_t v4 = v3;

  _Unwind_Resume(a1);
}

char *sub_10016D48C(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allSessionsPrintableState]);
  uint64_t v2 = sub_100023F58(@"NIServerSessionManager", v1);

  return v2;
}

void sub_10016D4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016D584(_Unwind_Exception *a1)
{
}

void sub_10016D608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016DB30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, void *a39)
{
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016DC48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10016DC58(uint64_t a1)
{
}

void sub_10016DC60(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NIServerSessionContainer);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NIServerClient delegateProxyWithConnection:]( &OBJC_CLASS___NIServerClient,  "delegateProxyWithConnection:",  *(void *)(a1 + 32)));
  int v3 = -[NIServerSessionContainer initWithClient:clientInfo:connection:authorizationManager:]( v2,  "initWithClient:clientInfo:connection:authorizationManager:");
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10016DCDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_10016DCF0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_10016DD24(uint64_t a1)
{
}

id sub_10016DD2C(void *a1)
{
  return _[*(id *)(*(void *)(a1[6] + 8) + 40) setNearbyObjectsCache:*(void *)(a1[5] + 48)];
}

void sub_10016DD9C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#nisessmgr,connection interrupted for pid: %d",  (uint8_t *)v5,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleXPCDisconnection:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_10016DE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016DE78(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#nisessmgr,connection invalidated for pid: %d",  (uint8_t *)v5,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleXPCDisconnection:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_10016DF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016E3A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25)
{
  _Unwind_Resume(a1);
}

void sub_10016E494(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#nisessmgr,connection interrupted for pid: %d",  (uint8_t *)v5,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleObserverSessionXPCDisconnection:*(void *)(a1 + 32)];
}

void sub_10016E550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016E568(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#nisessmgr,connection invalidated for pid: %d",  (uint8_t *)v5,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleObserverSessionXPCDisconnection:*(void *)(a1 + 32)];
}

void sub_10016E624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016E868(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10016EB0C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10016ED40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10016EF44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10016F320( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, void *a36)
{
  _Unwind_Resume(a1);
}

void sub_10016F428(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 monitoredProcessName]);
  if (v7) {
    char v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 monitoredProcessName]);
  }
  else {
    char v8 = @"???";
  }
  [v6 setObject:v8 forKey:v10];
  if (v7) {

  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 printableState]);
  if (v9) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v10];
  }
}

void sub_10016F4EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10016F528(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v10]);
  if (v7) {
    char v8 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v10]);
  }
  else {
    char v8 = @"???";
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"    [%@: %@] %d sessions",  v10,  v8,  [v5 count]));
  [v6 addObject:v9];

  if (v7) {
}
  }

void sub_10016F600( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10016F640(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v10]);
  if (v7) {
    char v8 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v10]);
  }
  else {
    char v8 = @"???";
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"    [%@: %@] %d observers",  v10,  v8,  [v5 count]));
  [v6 addObject:v9];

  if (v7) {
}
  }

void sub_10016F718( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10016F758(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_10016F7D8;
  v4[3] = &unk_1007B2298;
  id v5 = *(id *)(a1 + 32);
  [a3 enumerateObjectsUsingBlock:v4];
}

void sub_10016F7C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_10016F7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"    %@", a2));
  objc_msgSend(v2, "addObject:");
}

void sub_10016F82C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10016F840(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10016F940;
  void v9[3] = &unk_1007B22E8;
  id v10 = *(id *)(a1 + 32);
  id v11 = v5;
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v7 = v6;
  id v8 = v5;
  [v7 enumerateObjectsUsingBlock:v9];
}

void sub_10016F908( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10016F940(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v19 = 0LL;
  __int16 v20 = &v19;
  uint64_t v21 = 0x3032000000LL;
  uint64_t v22 = sub_10016DC48;
  int v23 = sub_10016DC58;
  id v24 = 0LL;
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 connectionQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10016FB88;
  block[3] = &unk_1007B1E50;
  double v18 = &v19;
  id v7 = v5;
  id v17 = v7;
  dispatch_sync(v6, block);

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v9]);
  if (v10) {
    id v11 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  }
  else {
    id v11 = @"???";
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"[%@: %@] Session %d of %d",  v9,  v11,  (a3 + 1),  [*(id *)(a1 + 56) count]));
  [v8 addObject:v12];

  if (v10) {
  id v13 = (void *)v20[5];
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _OWORD v14[2] = sub_10016FBC0;
  v14[3] = &unk_1007B2298;
  id v15 = *(id *)(a1 + 32);
  [v13 enumerateObjectsUsingBlock:v14];
  [*(id *)(a1 + 32) addObject:&stru_1007C41E0];

  _Block_object_dispose(&v19, 8);
}

void sub_10016FB18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_10016FB88(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) printableState]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10016FBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"    %@", a2));
  objc_msgSend(v2, "addObject:");
}

void sub_10016FC14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10016FD28(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10016FD64(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObservers:");
}

void sub_10016FDF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_10016FE10(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "supportsSessionObservers", (void)v10))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
          [v8 addObservers:v9];
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }

    while (v5);
  }
}

void sub_10016FF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100170004( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100170020(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "supportsSessionObservers", (void)v10))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
          [v8 removeObservers:v9];
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }

    while (v5);
  }
}

void sub_10017015C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1001701EC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2740[a1]);
}

void *sub_100170200@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2798[a1]);
}

void *sub_100170214@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B27E0[a1]);
}

void *sub_100170228@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2800[a1]);
}

uint64_t sub_10017023C( uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id v15 = a2;
  *(void *)a1 = off_1007B2420;
  *(void *)(a1 + 8) = off_1007B24A0;
  *(void *)(a1 + 16) = off_1007B24D8;
  *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1018212795LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 80) = 850045863LL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 144) = 850045863LL;
  *(void *)(a1 + 136) = 0LL;
  *(_OWORD *)(a1 + 15sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = 850045863LL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 23sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 27sub_10014C374((uint64_t)&unk_1007F8180, 2) = 850045863LL;
  *(_OWORD *)(a1 + 31sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = 850045863LL;
  *(void *)(a1 + 39sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  id v16 = v15;
  *(void *)(a1 + 400) = v16;
  *(void *)(a1 + 408) = a4;
  *(void *)(a1 + 416) = a5;
  *(void *)(a1 + 424) = a6;
  *(void *)(a1 + 440) = 0LL;
  *(void *)(a1 + 448) = 0LL;
  *(void *)(a1 + 43sub_10014C374((uint64_t)&unk_1007F8180, 2) = a7;
  id v17 = operator new(0x20uLL);
  *id v17 = &off_1007B2610;
  v17[1] = sub_10017087C;
  unsigned int v17[2] = 0LL;
  v17[3] = a1;
  __int16 v55 = v17;
  sub_10016C770(a1 + 456, (uint64_t)v54);
  double v18 = v55;
  if (v55 == v54)
  {
    uint64_t v19 = 4LL;
    double v18 = v54;
  }

  else
  {
    if (!v55) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  __int16 v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v52 = *a3;
  __int16 v53 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }

  int v23 = (std::__shared_weak_count *)a8[1];
  uint64_t v50 = *a8;
  uint64_t v51 = v23;
  if (v23)
  {
    id v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  sub_1001CEAF0(a1 + 544, v16, &v52, a1 + 456, &v50);
  uint64_t v26 = v51;
  if (v51)
  {
    __int16 v27 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  id v29 = v53;
  if (v53)
  {
    uint64_t v30 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  uint64_t v32 = a8[1];
  *(void *)(a1 + 2256) = *a8;
  *(void *)(a1 + 2264) = v32;
  if (v32)
  {
    BOOL v33 = (unint64_t *)(v32 + 8);
    do
      unint64_t v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }

  *(_BYTE *)(a1 + 227sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 2384) = 0;
  *(_BYTE *)(a1 + 239sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_WORD *)(a1 + 2485) = 0;
  *(_WORD *)(a1 + 2555) = 0;
  *(_BYTE *)(a1 + 2574) = 0;
  *(_BYTE *)(a1 + 2576) = 0;
  *(_BYTE *)(a1 + 2636) = 0;
  *(_WORD *)(a1 + 2640) = 0;
  BOOL v35 = objc_alloc(&OBJC_CLASS___PRSettingsObserver);
  unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](&OBJC_CLASS___PRGlobalDebugSettings, "sharedSettings"));
  *(void *)(a1 + 2648) = -[PRSettingsObserver initWithSettings:queue:]( v35,  "initWithSettings:queue:",  v36,  *(void *)(a1 + 400));

  uint64_t v38 = a3[1];
  *(void *)(a1 + 2656) = *a3;
  *(void *)(a1 + 2664) = v38;
  if (v38)
  {
    BOOL v39 = (unint64_t *)(v38 + 8);
    do
      unint64_t v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }

  *(_DWORD *)(a1 + 267sub_10014C374((uint64_t)&unk_1007F8180, 2) = 4;
  *(_BYTE *)(a1 + 2676) = 1;
  *(_DWORD *)(a1 + 2708) = 0;
  *(_OWORD *)(a1 + 2677) = 0u;
  *(_OWORD *)(a1 + 2693) = 0u;
  *(void *)(a1 + 271sub_10014C374((uint64_t)&unk_1007F8180, 2) = 850045863LL;
  *(_WORD *)(a1 + 2900) = 0;
  *(_BYTE *)(a1 + 3050) = 0;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 275sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 276sub_10014C374((uint64_t)&unk_1007F8158, 1) = 0u;
  sub_100250404(a1 + 3056, v37);
  unsigned __int8 v41 = operator new(0x38uLL);
  sub_10021DCC0((uint64_t)v41);
  *(void *)(a1 + 3104) = v41;
  if (!v16)
  {
    uint64_t v45 = "dispatchQueue";
    int v46 = 60;
    goto LABEL_39;
  }

  if (!a4)
  {
    uint64_t v45 = "roseProxyObject";
    int v46 = 61;
    goto LABEL_39;
  }

  if (!a5)
  {
    uint64_t v45 = "alishaUpdateConsumer";
    int v46 = 62;
    goto LABEL_39;
  }

  if (!a6)
  {
    uint64_t v45 = "firaUpdateConsumer";
    int v46 = 63;
    goto LABEL_39;
  }

  if (!a7)
  {
    uint64_t v45 = "aopSensorFusionConsumer";
    int v46 = 64;
LABEL_39:
    __assert_rtn("PRRoseProvider", "PRRoseProvider.mm", v46, v45);
  }

  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472LL;
  double v49[2] = sub_1001708EC;
  v49[3] = &unk_1007B24F0;
  v49[4] = a1;
  uint8_t v42 = -[PRLowPowerModeMonitor initWithQueue:stateChangeHandler:]( objc_alloc(&OBJC_CLASS___PRLowPowerModeMonitor),  "initWithQueue:stateChangeHandler:",  v16,  v49);
  uint64_t v43 = *(void **)(a1 + 2704);
  *(void *)(a1 + 2704) = v42;

  [*(id *)(a1 + 2704) startMonitoring];
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_1001709C8;
  v48[3] = &unk_1007B2510;
  uint8_t v48[4] = a1;
  sub_1001D33D4(a1 + 544, v48);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_100170F2C;
  v47[3] = &unk_1007B2530;
  uint8_t v47[4] = a1;
  sub_1001D338C(a1 + 544, v47);
  sub_100173B20(a1);

  return a1;
}

void sub_100170740( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::condition_variable *a15, uint64_t a16, uint64_t a17)
{
  int v23 = *(void **)(v17 + 2680);
  if (v23)
  {
    *(void *)(v17 + 2688) = v23;
    operator delete(v23);
  }

  sub_100012390(v17 + 2656);

  sub_1000060B4(v17 + 2272);
  sub_100012390(v17 + 2256);
  sub_1001CECAC(v21);
  sub_10016C8CC(a17);
  sub_100012390(v17 + 440);

  std::mutex::~mutex(a10);
  std::mutex::~mutex(a11);
  std::mutex::~mutex(a12);
  std::mutex::~mutex(a13);
  std::mutex::~mutex(a14);
  std::condition_variable::~condition_variable(a15);

  _Unwind_Resume(a1);
}

void sub_10017087C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,powerManagerInvokePowerOffRose",  v3,  2u);
  }

  sub_1001DF0A4(a1 + 544);
}

void sub_1001708EC(uint64_t a1, int a2)
{
}

void sub_1001708F8(uint64_t a1, int a2)
{
  id v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "boot";
    if (a2) {
      id v5 = "DSLP";
    }
    int v6 = 136315138;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,#lpm powerOnDemand update. Use %s on demand",  (uint8_t *)&v6,  0xCu);
  }

  sub_1001D2D8C(a1 + 544, a2);
}

void sub_1001709C8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
}

void sub_1001709D0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v3 = a3;
  int v38 = 0;
  char v39 = 0;
  char v42 = 0;
  int v43 = a3;
  char v44 = BYTE4(a3);
  switch(*a2)
  {
    case 0:
      id v5 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: BootStarted",  buf,  2u);
      }

      return;
    case 1:
      __int128 v12 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: BootError",  buf,  2u);
      }

      int v7 = 5;
      goto LABEL_26;
    case 2:
      id v8 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: BootSuccessful",  buf,  2u);
      }

      int v7 = 1;
      goto LABEL_26;
    case 3:
      uint64_t v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: AOPJobsReset",  buf,  2u);
      }

      int v7 = 2;
      goto LABEL_26;
    case 4:
      int v6 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: Ready",  buf,  2u);
      }

      sub_100178408((uint64_t *)(a1 + 3104), 0LL);
      int v7 = 3;
LABEL_26:
      int v38 = v7;
      goto LABEL_35;
    case 5:
      __int128 v13 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v14 = "#roseprovider,Got RoseState Event: RuntimeError";
      break;
    case 6:
      __int128 v13 = (os_log_s *)qword_1008000A0;
      if (!os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v14 = "#roseprovider,Got RoseState Event: FirmwareCrash";
      break;
    case 7:
      if (!BYTE4(a3)) {
        sub_100392820();
      }
      sub_1000065CC(buf, off_1007B2820[(int)a3]);
      __int128 v10 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v11 = buf;
        if (v29 < 0) {
          __int128 v11 = *(uint8_t **)buf;
        }
        *(_DWORD *)uint64_t v45 = 136315138;
        int v46 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got RoseState Event: RegulatoryDisallow, Reason: %s",  v45,  0xCu);
      }

      int v38 = 6;
      if (v3 == 5)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100178434;
        block[3] = &unk_1007A2398;
        void block[4] = a1;
        if (qword_1007F8B60 != -1) {
          dispatch_once(&qword_1007F8B60, block);
        }
      }

      if (SHIBYTE(v29) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_35;
    default:
      goto LABEL_35;
  }

  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
LABEL_32:
  int v38 = 5;
  id v15 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Clearing inflight sync commands state variables.",  buf,  2u);
  }

  std::mutex::lock((std::mutex *)(a1 + 144));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
  std::mutex::unlock((std::mutex *)(a1 + 144));
LABEL_35:
  sub_100178B84((uint64_t)buf, (uint64_t)&v38);
  uint64_t v16 = *(void *)(a1 + 408);
  uint64_t v17 = *(uint8_t **)buf;
  int v18 = v28;
  sub_1001377E0((uint64_t)&v19, (uint64_t)&v29);
  __int128 v24 = v34;
  __int128 v25 = v35;
  v26[0] = v36[0];
  *(_OWORD *)((char *)v26 + 13) = *(_OWORD *)((char *)v36 + 13);
  sub_100148630(v16, (uint64_t *)&v17);
  if (v23 && v22 && v21 < 0) {
    operator delete(__p);
  }
  if (v33 && v32 && v31 < 0) {
    operator delete(v30);
  }
  if (v42 && v41 < 0) {
    operator delete(v40);
  }
}

void sub_100170E90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, char a40, uint64_t a41, char a42)
{
  if (a21 && a19 && a18 < 0) {
    operator delete(__p);
  }
  if (a42 && a40 && a39 < 0) {
    operator delete(a34);
  }
  if (*(_BYTE *)(v42 - 96))
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_100170F2C(uint64_t a1, uint64_t a2)
{
}

void sub_100170F34(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0xE0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003928D8();
      }
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100392874();
      }
      int v10 = *(unsigned __int8 *)(a2 + 12);
      if (*(_BYTE *)(a2 + 12))
      {
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            sub_100138BA4((uint64_t)__p, *(unsigned __int16 *)(a2 + 13), a2 + 23, v5, v6, v7, v8, v9, *(double *)a2);
            uint64_t v11 = *(void *)(a1 + 408);
            v383[10] = v339;
            v383[11] = v340;
            v383[12] = v341;
            uint64_t v384 = v342;
            v383[6] = *(_OWORD *)v337;
            v383[7] = *(_OWORD *)&v337[16];
            v383[8] = *(_OWORD *)&v337[32];
            v383[9] = v338;
            v383[2] = *(_OWORD *)v334;
            v383[3] = *(_OWORD *)&v334[16];
            v383[4] = v335;
            v383[5] = v336;
            v383[0] = *(_OWORD *)__p;
            v383[1] = *(_OWORD *)&__p[2];
            sub_100177B84(a1, v11, v383);
          }

          return;
        }

        sub_10013DFD4(a2 + 23, 0LL, v4, v5, v6, v7, v8, v9, (uint64_t)v373);
        sub_100138B04(__p, 0LL, *(unsigned __int16 *)(a2 + 13), v373, *(double *)a2);
        uint64_t v170 = *(void *)(a1 + 408);
        sub_100178624((uint64_t)v371, (uint64_t)__p);
        sub_100178574(a1, v170, (uint64_t)v371);
        uint64_t v171 = v371;
      }

      else
      {
        sub_10013D7FC(a2 + 23, 0LL, v4, v5, v6, v7, v8, v9, (uint64_t)v373);
        sub_100138B04(__p, 0LL, *(unsigned __int16 *)(a2 + 13), v373, *(double *)a2);
        uint64_t v172 = *(void *)(a1 + 408);
        sub_100178624((uint64_t)v372, (uint64_t)__p);
        sub_100178574(a1, v172, (uint64_t)v372);
        uint64_t v171 = v372;
      }

      sub_10011B2B0(v171);
      sub_10011B2B0(__p);
      char v21 = *(_OWORD **)&v373[40];
      if (!*(void *)&v373[40]) {
        return;
      }
      *(void *)&v373[48] = *(void *)&v373[40];
      goto LABEL_323;
    case 0xE1:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100392848();
      }
      *(double *)std::__fs::filesystem::directory_entry::_Path __p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(__p[1]) = 2;
      LOBYTE(__p[2]) = 0;
      BYTE8(v335) = 0;
      LOBYTE(v336) = 0;
      BYTE12(v336) = 0;
      v337[0] = 0;
      v337[4] = 0;
      *(_OWORD *)&v337[8] = *(_OWORD *)(a2 + 12);
      *(_OWORD *)&v337[24] = *(_OWORD *)(a2 + 28);
      *(_DWORD *)&v337[40] = *(_DWORD *)(a2 + 44);
      v337[44] = 1;
      uint64_t v75 = *(void *)(a1 + 408);
      uint64_t v213 = (uint64_t)__p[0];
      int v214 = 2;
      sub_1001377E0((uint64_t)&v215, (uint64_t)&__p[2]);
      __int128 v220 = v336;
      __int128 v221 = *(_OWORD *)v337;
      v222[0] = *(_OWORD *)&v337[16];
      *(_OWORD *)((char *)v222 + 13) = *(_OWORD *)&v337[29];
      sub_100148630(v75, &v213);
      if (!v219 || !v218 || (v217 & 0x80000000) == 0) {
        goto LABEL_137;
      }
      uint64_t v45 = v216;
      goto LABEL_136;
    case 0xE2:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100392904();
      }
      uint64_t v51 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v52 = *(unsigned __int16 *)(a2 + 12);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Got request status ticket id: %d",  (uint8_t *)__p,  8u);
      }

      sub_100178BF8((uint64_t)v373, *(void *)(a2 + 12));
      *(double *)std::__fs::filesystem::directory_entry::_Path __p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(__p[1]) = 1;
      LOBYTE(__p[2]) = 0;
      BYTE8(v335) = 0;
      *(void *)&__int128 v336 = *(void *)v373;
      DWORD2(v336) = *(_DWORD *)&v373[8];
      BYTE12(v336) = 1;
      v337[0] = 0;
      v337[4] = 0;
      v337[8] = 0;
      v337[44] = 0;
      uint64_t v53 = *(void *)(a1 + 408);
      uint64_t v204 = (uint64_t)__p[0];
      int v205 = 1;
      sub_1001377E0((uint64_t)v206, (uint64_t)&__p[2]);
      __int128 v210 = v336;
      __int128 v211 = *(_OWORD *)v337;
      v212[0] = *(_OWORD *)&v337[16];
      *(_OWORD *)((char *)v212 + 13) = *(_OWORD *)&v337[29];
      sub_100148630(v53, &v204);
      if (!v209 || !v208 || (v207 & 0x80000000) == 0) {
        goto LABEL_137;
      }
      uint64_t v45 = (void *)v206[2];
      goto LABEL_136;
    case 0xE3:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100392EC0();
      }
      if (*(_BYTE *)(a2 + 12) == 1)
      {
        v248[1] = 0LL;
        v248[0] = 0LL;
        *(void *)&__int128 v249 = 0LL;
        sub_100030B3C(v248, (const void *)(a2 + 31), a2 + 99, 0x44uLL);
        double v145 = *(double *)a2;
        __int16 v146 = *(_WORD *)(a2 + 13);
        sub_1003257B8(v248, v147, v148, v149, v150, v151, v152, v153, (uint64_t)v373);
        v370[18] = *(_OWORD *)v373;
        LODWORD(__p[0]) = 8;
        LOBYTE(__p[1]) = 0;
        char v343 = 0;
        LOBYTE(v344) = 0;
        BYTE8(v357) = 0;
        LOBYTE(v358) = 0;
        char v364 = 0;
        v365[0] = 0;
        v365[128] = 0;
        v365[136] = 0;
        v365[216] = 0;
        v365[224] = 0;
        v365[328] = 0;
        v366[0].n128_u8[0] = 0;
        char v369 = 0;
        LOBYTE(v370[0]) = 0;
        BYTE8(v370[16]) = 0;
        *(double *)&v370[17] = v145;
        WORD4(v370[17]) = v146;
        v370[19] = *(_OWORD *)&v373[16];
        v370[20] = *(_OWORD *)&v373[32];
        *(void *)&v370[21] = *(void *)&v373[48];
        BYTE8(v370[21]) = 1;
        LOBYTE(v370[22]) = 0;
        LOBYTE(v370[25]) = 0;
        BYTE8(v370[25]) = 0;
        BYTE8(v370[29]) = 0;
        uint64_t v154 = *(void *)(a1 + 408);
        sub_100178704((uint64_t)v331, (uint64_t)__p);
        sub_100148720(v154, v331);
        sub_1001488D8((uint64_t)v331);
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392930();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392E94();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392C1C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392BB8();
        }
        int v155 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392E2C(v155, v156, v157, v158, v159, v160, v161, v162);
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392DCC();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392D6C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392D0C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392CAC();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
LABEL_272:
        }
          sub_100392930();
      }

      else
      {
        if (*(_BYTE *)(a2 + 12)) {
          return;
        }
        v248[1] = 0LL;
        v248[0] = 0LL;
        *(void *)&__int128 v249 = 0LL;
        sub_100030B3C(v248, (const void *)(a2 + 31), a2 + 127, 0x60uLL);
        double v54 = *(double *)a2;
        __int16 v55 = *(_WORD *)(a2 + 13);
        sub_10032463C(v248, v56, v57, v58, v59, v60, v61, v62, (uint64_t)v373);
        *(_OWORD *)((char *)&v370[7] + 6) = v374;
        *(_OWORD *)((char *)&v370[8] + 6) = v375;
        *(_OWORD *)((char *)&v370[9] + 6) = *(_OWORD *)v376;
        *(_OWORD *)((char *)&v370[3] + 6) = *(_OWORD *)&v373[38];
        *(_OWORD *)((char *)&v370[4] + 6) = *(_OWORD *)&v373[54];
        *(_OWORD *)((char *)&v370[5] + 6) = *(_OWORD *)&v373[70];
        *(_OWORD *)((char *)&v370[6] + 6) = *(_OWORD *)&v373[86];
        *(_OWORD *)((char *)&v370[1] + 6) = *(_OWORD *)&v373[6];
        *(_OWORD *)((char *)&v370[2] + 6) = *(_OWORD *)&v373[22];
        v370[10] = *(_OWORD *)&v376[10];
        LODWORD(__p[0]) = 7;
        LOBYTE(__p[1]) = 0;
        char v343 = 0;
        LOBYTE(v344) = 0;
        BYTE8(v357) = 0;
        LOBYTE(v358) = 0;
        char v364 = 0;
        v365[0] = 0;
        v365[128] = 0;
        v365[136] = 0;
        v365[216] = 0;
        v365[224] = 0;
        v365[328] = 0;
        v366[0].n128_u8[0] = 0;
        char v369 = 0;
        *(double *)std::string::size_type v370 = v54;
        WORD4(v370[0]) = v55;
        LODWORD(v370[1]) = *(_DWORD *)v373;
        WORD2(v370[1]) = *(_WORD *)&v373[4];
        v370[11] = v377;
        v370[12] = v378;
        v370[13] = v379;
        v370[14] = v380;
        v370[15] = v381;
        *(void *)&v370[16] = v382;
        BYTE8(v370[16]) = 1;
        LOBYTE(v370[17]) = 0;
        BYTE8(v370[21]) = 0;
        LOBYTE(v370[22]) = 0;
        LOBYTE(v370[25]) = 0;
        BYTE8(v370[25]) = 0;
        BYTE8(v370[29]) = 0;
        uint64_t v63 = *(void *)(a1 + 408);
        sub_100178704((uint64_t)v332, (uint64_t)__p);
        sub_100148720(v63, v332);
        sub_1001488D8((uint64_t)v332);
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392930();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392C80();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392C1C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392BB8();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392B54();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392AF0();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392A8C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100392A28();
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_1003929C4();
        }
        __int16 v64 = (os_log_s *)qword_1008000A0;
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_10039295C(v64, v65, v66, v67, v68, v69, v70, v71);
        }
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_272;
        }
      }

      sub_1001488D8((uint64_t)__p);
      char v21 = v248[0];
      if (v248[0])
      {
        v248[1] = v248[0];
LABEL_323:
        operator delete(v21);
      }

      return;
    case 0xE4:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100392EEC();
      }
      size_t v36 = *(void *)(a2 + 140);
      uint64_t v330 = 0LL;
      __int128 v329 = 0uLL;
      sub_100030B3C(&v329, (const void *)(a2 + 28), a2 + 28 + v36, v36);
      sub_10032A5A8(a1 + 2672, (uint64_t)&v329, v373);
      if (v373[72])
      {
        *(_OWORD *)v248 = *(_OWORD *)v373;
        uint64_t v37 = *(void *)&v373[40];
        __int128 v38 = *(_OWORD *)&v373[24];
        memset(&v373[24], 0, 48);
        LODWORD(__p[0]) = 3;
        uint64_t v359 = *(void *)&v373[16];
        LOBYTE(__p[1]) = 0;
        char v343 = 0;
        LOBYTE(v344) = 0;
        BYTE8(v357) = 0;
        __int128 v358 = *(_OWORD *)v373;
        __int128 v360 = v38;
        uint64_t v361 = v37;
        __int128 v249 = *(unint64_t *)&v373[16];
        __int128 v250 = 0uLL;
        __int128 v362 = *(_OWORD *)&v373[48];
        uint64_t v363 = *(void *)&v373[64];
        __int128 v252 = 0uLL;
        uint64_t v251 = 0LL;
        char v364 = 1;
        v365[0] = 0;
        v365[128] = 0;
        v365[136] = 0;
        v365[216] = 0;
        v365[224] = 0;
        v365[328] = 0;
        v366[0].n128_u8[0] = 0;
        char v369 = 0;
        LOBYTE(v370[0]) = 0;
        BYTE8(v370[16]) = 0;
        LOBYTE(v370[17]) = 0;
        BYTE8(v370[21]) = 0;
        LOBYTE(v370[22]) = 0;
        LOBYTE(v370[25]) = 0;
        BYTE8(v370[25]) = 0;
        BYTE8(v370[29]) = 0;
        sub_10012E628((uint64_t)v248);
        uint64_t v39 = *(void *)(a1 + 408);
        sub_100178704((uint64_t)v328, (uint64_t)__p);
        sub_100148720(v39, v328);
        sub_1001488D8((uint64_t)v328);
        sub_1001488D8((uint64_t)__p);
      }

      sub_100148A24((uint64_t)v373);
      goto LABEL_128;
    case 0xE5:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003930F4();
      }
      unint64_t v40 = (std::mutex *)(a1 + 144);
      std::mutex::lock((std::mutex *)(a1 + 144));
      memset(v373, 0, 24);
      int v80 = *((_DWORD *)sub_100005150() + 187);
      if (v80)
      {
        __int16 v81 = (const void *)(a2 + 28);
        if (v80 == 1)
        {
          size_t v173 = *(unsigned __int8 *)(a2 + 68) - 27 + 68LL;
          memset(__p, 0, 24);
          sub_100030B3C(__p, v81, (uint64_t)v81 + v173, v173);
        }

        else
        {
          if (v80 != 2) {
            goto LABEL_298;
          }
          memset(__p, 0, 24);
          sub_100030B3C(__p, v81, a2 + 140, 0x70uLL);
        }

        *(_OWORD *)v373 = *(_OWORD *)__p;
        *(void **)&v373[16] = __p[2];
      }

      else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
      {
        sub_1003930C8();
      }

LABEL_298:
      sub_1003568D4(v373, __p);
      sub_10017938C(a1 + 2272);
      sub_1001793CC((void *)(a1 + 2272), (__int128 *)__p);
      *(_BYTE *)(a1 + 2384) = 1;
      sub_1000060F4((uint64_t)v334);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
LABEL_301:
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
      if (*(void *)v373)
      {
        *(void *)&v373[8] = *(void *)v373;
        operator delete(*(void **)v373);
      }

LABEL_204:
      int v119 = *(void **)v334;
      *(void *)std::string::size_type v334 = 0LL;
      if (v119) {
        operator delete(v119);
      }
      __int16 v120 = __p[3];
      __p[3] = 0LL;
      if (v120) {
        operator delete(v120);
      }
      goto LABEL_208;
    case 0xF5:
      uint64_t v123 = *(unsigned __int8 *)(a2 + 20);
      __int16 v124 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v123;
        _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,#aop-activity, AOP Activity summary report (part 1). Num jobs: %d",  (uint8_t *)__p,  8u);
      }

      if ((_DWORD)v123)
      {
        uint64_t v125 = 0LL;
        __int16 v126 = (unsigned __int8 *)(a2 + 24);
        do
        {
          int v127 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            int v128 = *(unsigned __int16 *)(v126 - 3);
            int v129 = *v126;
            switch(*(v126 - 1))
            {
              case 0u:
                __int16 v130 = "GRBroadcastingBeacon";
                break;
              case 1u:
                __int16 v130 = "GRSingleResponseSurvey";
                break;
              case 2u:
                __int16 v130 = "GRTranspondingBeacon";
                break;
              case 3u:
                __int16 v130 = "GRDoubleResponseSurvey";
                break;
              case 4u:
                __int16 v130 = "GRSymmetricalMultiPeer";
                break;
              case 5u:
                __int16 v130 = "GRNoDataSymmetricalSinglePeer";
                break;
              default:
                __int16 v130 = "Alisha_CCC";
                switch(*(v126 - 1))
                {
                  case 'd':
                    __int16 v130 = "P2P";
                    break;
                  case 'e':
                    __int16 v130 = "PTS";
                    break;
                  case 'g':
                    __int16 v130 = "FiRa";
                    break;
                  case 'h':
                    __int16 v130 = "TestNMI";
                    break;
                  case 'i':
                    __int16 v130 = "NMI";
                    break;
                  case 'j':
                    __int16 v130 = "Alisha_ACWG";
                    break;
                  default:
                    goto LABEL_235;
                }

                break;
            }

LABEL_172:
      sub_100148A24((uint64_t)v14);
      __int128 v35 = v13;
LABEL_173:
      sub_100124BFC((uint64_t)v35);
      return;
    case 0xFA:
      unint64_t v40 = (std::mutex *)(a1 + 336);
      std::mutex::lock((std::mutex *)(a1 + 336));
      *(_WORD *)(a1 + 2640) = *(unsigned __int8 *)(a2 + 12) | 0x100;
      int v46 = *(unsigned __int8 *)(a2 + 14);
      uint64_t v47 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 2641)) {
          sub_100006080();
        }
        unint64_t v48 = *(char *)(a1 + 2640);
        if (v48 > 2) {
          off_t v49 = "";
        }
        else {
          off_t v49 = off_1007B28B0[v48];
        }
        unint64_t v167 = *(char *)(a2 + 13);
        if (v167 > 3) {
          __int16 v168 = "";
        }
        else {
          __int16 v168 = off_1007B2870[v167];
        }
        int v169 = "Y";
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = (void *)v49;
        WORD2(__p[1]) = 2080;
        if (!v46) {
          int v169 = "N";
        }
        *(void **)((char *)&__p[1] + 6) = (void *)v168;
        HIWORD(__p[2]) = 2080;
        __p[3] = (void *)v169;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,#deep-slp DeepSleepReport state %s, lastReq %s successful? %s",  (uint8_t *)__p,  0x20u);
      }

      goto LABEL_303;
    case 0xFB:
      if (*(void *)(a1 + 2256))
      {
        memset(__p, 0, 24);
        sub_100178518(a1, (uint64_t)__p, *(double *)a2);
        sub_10023FF1C(*(void *)(a1 + 2256), (uint64_t)__p, a2 + 12);
      }

      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100393330();
      }
      return;
    case 0xFC:
      if (*(_BYTE *)(a2 + 112) == 100)
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_1003933B0();
        }
      }

      else
      {
        if (*(void *)(a1 + 2256))
        {
          memset(__p, 0, 24);
          sub_100178518(a1, (uint64_t)__p, *(double *)a2);
          sub_10023FD00(*(void *)(a1 + 2256), (uint64_t)__p, a2 + 12);
        }

        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
          sub_100393428();
        }
      }

      return;
    case 0xFD:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_1003934DC();
      }
      __int128 v24 = *(void **)a2;
      uint64_t v23 = a2 + 12;
      __p[0] = v24;
      char v21 = operator new(6uLL);
      *(_DWORD *)char v21 = *(_DWORD *)v23;
      *((_WORD *)v21 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(v23 + 4);
      __p[1] = v21;
      uint64_t v25 = *(void *)(a1 + 432);
      if (!v25)
      {
        __p[1] = 0LL;
        goto LABEL_323;
      }

      (*(void (**)(void, void **))(*(void *)v25 + 16LL))(*(void *)(a1 + 432), __p);
      char v21 = __p[1];
      __p[1] = 0LL;
      if (v21) {
        goto LABEL_323;
      }
      return;
    case 0xFE:
      if (*(void *)(a1 + 2256))
      {
        memset(__p, 0, 24);
        sub_100178518(a1, (uint64_t)__p, *(double *)a2);
        sub_100240098(*(void *)(a1 + 2256), (uint64_t)__p, (unsigned __int16 *)(a2 + 12));
      }

      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100393564();
      }
      return;
    case 0xFF:
      uint64_t v50 = (_OWORD *)(a2 + 14);
      switch(*(_WORD *)(a2 + 12))
      {
        case 0:
          if (*(void *)(a1 + 2256))
          {
            memset(__p, 0, 24);
            sub_100178518(a1, (uint64_t)__p, *(double *)a2);
            sub_100240258(*(void *)(a1 + 2256), (uint64_t)__p, a2 + 14);
          }

          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
            sub_100393610();
          }
          break;
        case 1:
          std::mutex::lock((std::mutex *)(a1 + 144));
          if (*(_BYTE *)(a1 + 3050)) {
            *(_BYTE *)(a1 + 3050) = 0;
          }
          __int128 v184 = *(_OWORD *)(a2 + 30);
          *(_OWORD *)(a1 + 290sub_10014C374((uint64_t)&unk_1007F8158, 1) = *v50;
          *(_OWORD *)(a1 + 2917) = v184;
          __int128 v185 = *(_OWORD *)(a2 + 46);
          __int128 v186 = *(_OWORD *)(a2 + 62);
          __int128 v187 = *(_OWORD *)(a2 + 94);
          *(_OWORD *)(a1 + 2965) = *(_OWORD *)(a2 + 78);
          *(_OWORD *)(a1 + 298sub_10014C374((uint64_t)&unk_1007F8158, 1) = v187;
          *(_OWORD *)(a1 + 2933) = v185;
          *(_OWORD *)(a1 + 2949) = v186;
          __int128 v188 = *(_OWORD *)(a2 + 110);
          __int128 v189 = *(_OWORD *)(a2 + 126);
          __int128 v190 = *(_OWORD *)(a2 + 142);
          *(void *)(a1 + 304sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(void *)(a2 + 155);
          *(_OWORD *)(a1 + 3013) = v189;
          *(_OWORD *)(a1 + 3029) = v190;
          *(_OWORD *)(a1 + 2997) = v188;
          *(_BYTE *)(a1 + 3050) = 1;
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
          __int16 v98 = (std::mutex *)(a1 + 144);
          goto LABEL_189;
        case 2:
          if (*(void *)(a1 + 2256))
          {
            memset(__p, 0, 24);
            sub_100178518(a1, (uint64_t)__p, *(double *)a2);
            sub_100240418(*(void *)(a1 + 2256), (uint64_t)__p, a2 + 14);
          }

          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
            sub_1003936A8();
          }
          break;
        case 3:
          int v174 = *(unsigned __int16 *)(a2 + 52);
          int v175 = *(unsigned __int16 *)(a2 + 54);
          int v176 = sub_1002BF768(*(unsigned __int16 *)(a2 + 43));
          sub_1002BEFAC(v176, v373);
          if (v373[23] >= 0) {
            __int128 v177 = v373;
          }
          else {
            __int128 v177 = *(const char **)v373;
          }
          int v178 = snprintf((char *)__p, 0x400uLL, "BI: %u RI: %u, %s", v174, v175, v177);
          if ((v373[23] & 0x80000000) != 0) {
            operator delete(*(void **)v373);
          }
          if (*(_BYTE *)(a2 + 20))
          {
            unint64_t v179 = 0LL;
            v180 = (__int16 *)(a2 + 92);
            do
            {
              double v181 = (double)*v180 / 3.19488e10;
              uint64_t v182 = snprintf( (char *)__p + v178,  1024LL - v178,  " <RX: 0x%02x, SR: %.2f, ",  *((unsigned __int8 *)v180 - 5),  (double)*(v180 - 2) * 0.25)
                   + (uint64_t)v178;
              int v178 = snprintf( (char *)__p + v182,  1024 - v182,  "ZO: %u, LZ: %u, R: %.2fm>",  *((unsigned __int8 *)v180 - 2),  *((unsigned __int8 *)v180 - 1),  v181 * 299792458.0)
                   + v182;
              ++v179;
              v180 = (__int16 *)((char *)v180 + 13);
            }

            while (v179 < *(unsigned __int8 *)(a2 + 20));
          }

          uint64_t v183 = (os_log_s *)qword_1008000A0;
          if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v373 = 136315138;
            *(void *)&v373[4] = __p;
            _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "#roseprovider,ARD: %s", v373, 0xCu);
          }

          break;
        default:
          return;
      }

      return;
    default:
      return;
  }

void sub_10017377C(_Unwind_Exception *a1)
{
}

id sub_100173B20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2648);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10017887C;
  v6[3] = &unk_1007B2550;
  v6[4] = a1;
  [v2 startObserving:PRDebugConfigArgDebugLevel observeImmediately:0 callback:v6];
  int v3 = *(void **)(a1 + 2648);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100178998;
  void v5[3] = &unk_1007B2550;
  v5[4] = a1;
  return [v3 startObserving:PRDebugConfigArgLeadingEdgeThresholds observeImmediately:0 callback:v5];
}

uint64_t sub_100173BD8()
{
  return 1LL;
}

uint64_t sub_100173BE0(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_100173C14(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_100173C48(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_100173C68(uint64_t a1)
{
  return 1LL;
}

void sub_100173C88(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,onFirstUnlockNotification, performing first unlock operations",  buf,  2u);
  }

  uint64_t v3 = a1 + 544;
  if ((sub_1001CEF58(v3) & 1) == 0)
  {
    uint64_t v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,onFirstUnlockNotification, attempting reactivation of Rose state machine",  v5,  2u);
    }

    sub_1001CFC28(v3, 2);
  }

void sub_100173D50(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,networkConnectionUpdate, attempting reactivation of Rose state machine",  buf,  2u);
    }

    sub_1001CFC28(a1 + 544, 1);
    uint64_t v4 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,deregistering network connection listener",  v5,  2u);
    }

    sub_10021E3D4(*(dispatch_queue_s ***)(a1 + 3104), (uint64_t)qword_1007F1D40);
  }

uint64_t sub_100173E1C(uint64_t a1)
{
  *(void *)a1 = off_1007B2420;
  *(void *)(a1 + 8) = off_1007B24A0;
  *(void *)(a1 + 16) = off_1007B24D8;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100393730();
  }
  sub_100178408((uint64_t *)(a1 + 3104), 0LL);
  std::mutex::~mutex((std::mutex *)(a1 + 2712));

  uint64_t v2 = *(void **)(a1 + 2680);
  if (v2)
  {
    *(void *)(a1 + 2688) = v2;
    operator delete(v2);
  }

  sub_100012390(a1 + 2656);

  sub_1000060B4(a1 + 2272);
  sub_100012390(a1 + 2256);
  sub_1001CECAC(a1 + 544);
  sub_10016C8CC(a1 + 456);
  sub_100012390(a1 + 440);

  std::mutex::~mutex((std::mutex *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 32));
  return a1;
}

uint64_t sub_100173F1C(uint64_t a1)
{
  return sub_100173E1C(a1 - 8);
}

uint64_t sub_100173F24(uint64_t a1)
{
  return sub_100173E1C(a1 - 16);
}

void sub_100173F2C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100173E1C(a1);
  operator delete(v1);
}

void sub_100173F40(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100173E1C(a1 - 8);
  operator delete(v1);
}

void sub_100173F58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100173E1C(a1 - 16);
  operator delete(v1);
}

uint64_t sub_100173F70(uint64_t a1)
{
  uint64_t v2 = a1 + 544;
  if ((sub_1001DEE98(v2) & 1) != 0)
  {
    uint64_t v3 = sub_1001D6DB4(v2);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10039375C();
    }
    uint64_t v3 = 0LL;
  }

  sub_10016D23C(&v5);
  return v3;
}

void sub_100173FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100174010(uint64_t a1)
{
  return sub_1001D0A44(a1 + 544);
}

uint64_t sub_100174018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 544;
  if ((sub_1001DEE98(v4) & 1) != 0)
  {
    uint64_t v11 = sub_1001D6E74(v4, a2, v5, v6, v7, v8, v9, v10);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100393788();
    }
    uint64_t v11 = 0LL;
  }

  sub_10016D23C(&v13);
  return v11;
}

void sub_1001740A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1001740C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_10016D1D4(&v5, (dispatch_queue_s **)(a1 + 456));
  uint64_t v4 = a1 + 544;
  if ((sub_1001DEE98(v4) & 1) != 0)
  {
    sub_1001D6EE4(v4, v3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003937B4();
  }

  sub_10016D23C(&v5);
}

void sub_10017414C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10017416C(uint64_t a1, BOOL *a2)
{
  return sub_1001D003C(a1 + 544, a2);
}

uint64_t sub_100174174(uint64_t a1, _BYTE *a2)
{
  return sub_1001D35E0(a1 + 544, a2);
}

uint64_t sub_10017417C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,_requestPowerChange shouldPowerOn %d",  (uint8_t *)v6,  8u);
  }

  if (a2) {
    return sub_100174244(a1);
  }
  sub_10016CD6C((dispatch_queue_s **)(a1 + 456));
  return 1LL;
}

uint64_t sub_100174244(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,_ensureRosePowerOnAndReadySync",  v6,  2u);
  }

  id v3 = (dispatch_queue_s **)(a1 + 456);
  sub_10016CC8C((dispatch_queue_s **)(a1 + 456));
  uint64_t v4 = sub_1001DEE98(a1 + 544);
  if ((v4 & 1) == 0) {
    sub_10016CD6C(v3);
  }
  return v4;
}

CFDataRef sub_1001742D4(uint64_t a1)
{
  uint64_t v2 = a1 + 544;
  if ((sub_1001DEE98(v2) & 1) != 0)
  {
    CFDataRef v3 = sub_1001D790C(v2);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003937E0();
    }
    CFDataRef v3 = 0LL;
  }

  sub_10016D23C(&v5);
  return v3;
}

void sub_10017435C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100174370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 > 0x23uLL)
  {
    CFDataRef v3 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_100138690(v2, v4, v5, v6, v7, v8, v9, v10, &v11);
      sub_100393874();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_10039380C();
  }

void sub_100174444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017445C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v20 = 0LL;
  char v21 = 0LL;
  uint64_t v22 = 0LL;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 24));
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  __int16 v17 = 0LL;
  uint64_t v18 = 0LL;
  BOOL v6 = sub_1001D341C(a1 + 544, 0x25u, (uint64_t)&__p, (unint64_t *)&v20);
  if (__p)
  {
    __int16 v17 = __p;
    operator delete(__p);
  }

  if (!v6)
  {
    uint64_t v14 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x25u, &__p);
      sub_1003938E8();
    }

    sub_100174370(v15, (uint64_t)&v20);
    goto LABEL_27;
  }

  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 24));
    if ((v8 & 1) != 0) {
      goto LABEL_28;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000LL;
            goto LABEL_18;
          }
        }

        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0LL;
      }

void sub_1001746AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  std::mutex::unlock(a12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10017470C(uint64_t a1)
{
  if (!sub_1001D3E0C(a1 + 544) && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100393930();
  }
}

void sub_100174758(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  size_t v36 = (std::mutex *)(a1 + 2712);
  char v37 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v36, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2900)) {
    *(_BYTE *)(a1 + 2900) = 0;
  }
  if (*(_BYTE *)(a1 + 3050)) {
    *(_BYTE *)(a1 + 3050) = 0;
  }
  sub_10017470C(a1);
  uint64_t v4 = 9LL;
  do
  {
    uint64_t v5 = &__src[v4];
    *(_WORD *)uint64_t v5 = 0;
    void v5[3] = 0;
    v4 += 4LL;
  }

  while (v5 + 4 != &__src[113]);
  __int128 __dst = a2;
  memset(&__src[114], 0, 36);
  *(_WORD *)&__src[150] = -1;
  __src[152] = -127;
  uint64_t v6 = 153LL;
  do
  {
    std::chrono::steady_clock::time_point v7 = &__src[v6];
    _BYTE *v7 = 0;
    *(_WORD *)(v7 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = -1;
    *(void *)(v7 + 3) = 0LL;
    *(_DWORD *)(v7 + 1sub_10014C374((uint64_t)&unk_1007F8158, 1) = 129;
    v6 += 15LL;
  }

  while (v7 + 15 != v34);
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double v9 = (double)v8.__d_.__rep_ + 2000000000.0;
  double v10 = -9.22337204e18;
  if (v9 > -9.22337204e18) {
    double v10 = (double)v8.__d_.__rep_ + 2000000000.0;
  }
  if (v9 < 9.22337204e18) {
    uint64_t v11 = (uint64_t)v10;
  }
  else {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  while (!*(_BYTE *)(a1 + 2900))
  {
    v12.__d_.__rep_ = v11 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v13.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0LL;
        goto LABEL_25;
      }

      if (v13.__d_.__rep_ < 1)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x8000000000000000LL;
      }

      else
      {
        if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_25;
        }

void sub_100174B78(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 - 136)) {
    std::mutex::unlock(*(std::mutex **)(v1 - 144));
  }
  if (*(_BYTE *)(v1 - 120)) {
    std::mutex::unlock(*(std::mutex **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100174BA4(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v5 = a1;
    char v6 = 1;
    sub_100178EA4(a1);
    if ((sub_100178E50(a2) & 1) != 0) {
      break;
    }
    sub_100178EFC((uint64_t)&v5);
    sched_yield();
    uint64_t v5 = a2;
    char v6 = 1;
    sub_100178EA4(a2);
    if ((sub_100178E50(a1) & 1) != 0) {
      break;
    }
    sub_100178EFC((uint64_t)&v5);
    sched_yield();
  }

  uint64_t v5 = 0LL;
  char v6 = 0;
  return sub_100178EFC((uint64_t)&v5);
}

void sub_100174C3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100174C54( uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = (std::mutex *)(a1 + 272);
  char v35 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v34, (uint64_t)&__lk);
  double v10 = (_BYTE *)(a1 + 2574);
  if (*(_BYTE *)(a1 + 2574)) {
    _BYTE *v10 = 0;
  }
  uint64_t v29 = 0LL;
  uint64_t v30 = sub_100154C78(a2, a3, a4);
  __int16 v31 = v11;
  __int128 v27 = 0LL;
  __int128 v28 = 0LL;
  sub_100030B3C(&v27, &v30, (uint64_t)v32, 0xAuLL);
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v25 = 0LL;
  uint64_t v26 = 0LL;
  if (!sub_1001D341C(a1 + 544, 0x37u, (uint64_t)&v27, (unint64_t *)&__p))
  {
    BOOL v23 = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT);
    if (v23) {
      sub_1003939E0();
    }
    sub_100174370(v23, (uint64_t)&__p);
    goto LABEL_30;
  }

  uint64_t v12 = a1 + 2556;
  std::chrono::system_clock::time_point v13 = (std::condition_variable *)(a1 + 32);
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double v15 = (double)v14.__d_.__rep_ + 2500000000.0;
  double v16 = -9.22337204e18;
  if (v15 > -9.22337204e18) {
    double v16 = (double)v14.__d_.__rep_ + 2500000000.0;
  }
  if (v15 < 9.22337204e18) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  do
  {
    if (*v10) {
      goto LABEL_26;
    }
    v18.__d_.__rep_ = v17 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v18.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v19.__d_.__rep_)
      {
        if (v19.__d_.__rep_ < 1)
        {
          if ((unint64_t)v19.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x8000000000000000LL;
            goto LABEL_22;
          }
        }

        else if ((unint64_t)v19.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 1000 * v19.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0LL;
      }

void sub_100174F08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, char a18, std::mutex *a19, char a20)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  if (a20) {
    std::mutex::unlock(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100174F64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  char v6 = (_OWORD *)(a1 + 2392);
  if (*(_BYTE *)(a1 + 2485))
  {
    *(_DWORD *)a3 = 0;
    __int128 v7 = *(_OWORD *)(a1 + 2440);
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(a1 + 2424);
    *(_OWORD *)(a3 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = v7;
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(a1 + 2456);
    *(_OWORD *)(a3 + 8sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_OWORD *)(a1 + 2470);
    __int128 v8 = *(_OWORD *)(a1 + 2408);
    *(_OWORD *)(a3 + 4) = *v6;
    *(_OWORD *)(a3 + 20) = v8;
    goto LABEL_35;
  }

  double v9 = (char *)sub_100005150();
  char v10 = v9[213];
  if (v10)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(v9 + 152);
    *(_OWORD *)(a3 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_OWORD *)(v9 + 168);
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(v9 + 184);
    *(_OWORD *)(a3 + 8sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_OWORD *)(v9 + 197);
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(v9 + 120);
    *(_OWORD *)(a3 + 20) = *(_OWORD *)(v9 + 136);
    *(_BYTE *)(a3 + 97) = v10;
    goto LABEL_34;
  }

  uint64_t v32 = 0LL;
  double v33 = 0LL;
  uint64_t v34 = 0LL;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  BOOL v11 = sub_1001D341C(a1 + 544, 0x30u, (uint64_t)&__p, (unint64_t *)&v32);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }

  if (!v11)
  {
    uint64_t v26 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x30u, &__p);
      sub_100393A38();
    }

    sub_100174370(v27, (uint64_t)&v32);
    int v28 = -1005;
    goto LABEL_31;
  }

  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    if (*(_BYTE *)(a1 + 2485)) {
      goto LABEL_26;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_) {
      break;
    }
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x8000000000000000LL;
            goto LABEL_22;
          }
        }

        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 1000 * v14.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0LL;
      }

void sub_100175278( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::mutex *a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    std::mutex::unlock(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1001752D8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  sub_1000353EC((unint64_t *)&v28, 4uLL);
  *(_DWORD *)int v28 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v23 = (std::mutex *)(a1 + 208);
  char v24 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v23, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2555)) {
    *(_BYTE *)(a1 + 2555) = 0;
  }
  if (!sub_1001D341C(a1 + 544, 0x31u, (uint64_t)&v28, (unint64_t *)&__p))
  {
    uint64_t v17 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x31u, v20);
      sub_100393A38();
    }

    sub_100174370(v18, (uint64_t)&__p);
    int v19 = -1007;
    goto LABEL_26;
  }

  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(_BYTE *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v8.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000LL;
            goto LABEL_18;
          }
        }

        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0LL;
      }

void sub_1001755DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, std::mutex *a22, char a23, std::mutex *a24, char a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::mutex::unlock(a22);
  }
  if (a25) {
    std::mutex::unlock(a24);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100175660(uint64_t a1, uint64_t a2, const std::string *a3)
{
  return sub_1001D7570(a1 + 544, a2, a3);
}

uint64_t sub_100175668(uint64_t a1)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  sub_1000353EC((unint64_t *)&v20, 4uLL);
  *(_DWORD *)uint64_t v20 = 0;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  __int128 v15 = (std::mutex *)(a1 + 208);
  char v16 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v15, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2555)) {
    *(_BYTE *)(a1 + 2555) = 0;
  }
  if (!sub_1001D341C(a1 + 544, 0x31u, (uint64_t)&v20, (unint64_t *)&__p))
  {
    std::chrono::system_clock::time_point v10 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x31u, v13);
      sub_100393A38();
    }

    sub_100174370(v11, (uint64_t)&__p);
    uint64_t v9 = 4294966266LL;
    goto LABEL_31;
  }

  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 5000000000LL;
  do
  {
    if (*(_BYTE *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v2.__d_.__rep_) {
      break;
    }
    v3.__d_.__rep_ = v2.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v3.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v4.__d_.__rep_)
      {
        if (v4.__d_.__rep_ < 1)
        {
          if ((unint64_t)v4.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0x8000000000000000LL;
            goto LABEL_18;
          }
        }

        else if ((unint64_t)v4.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 1000 * v4.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0LL;
      }

void sub_100175900( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, std::mutex *a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  if (a16) {
    std::mutex::unlock(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10017596C(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = 0LL;
  double v33 = 0LL;
  uint64_t v34 = 0LL;
  sub_1000353EC((unint64_t *)&v32, 0x24uLL);
  std::chrono::system_clock::time_point v10 = (char *)v32;
  *(_DWORD *)uint64_t v32 = a2;
  __int128 v11 = *a3;
  *(_OWORD *)(v10 + 20) = a3[1];
  *(_OWORD *)(v10 + 4) = v11;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v27 = (std::mutex *)(a1 + 208);
  char v28 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v27, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2555)) {
    *(_BYTE *)(a1 + 2555) = 0;
  }
  if (!sub_1001D341C(a1 + 544, 0x32u, (uint64_t)&v32, (unint64_t *)&__p))
  {
    uint64_t v21 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x32u, v24);
      sub_100393A38();
    }

    sub_100174370(v22, (uint64_t)&__p);
    int v23 = -1009;
    goto LABEL_26;
  }

  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a4;
  do
  {
    if (*(_BYTE *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_) {
      break;
    }
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x8000000000000000LL;
            goto LABEL_18;
          }
        }

        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 1000 * v14.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0LL;
      }

void sub_100175C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::mutex *a19, char a20, std::mutex *a21, char a22, void *__p, uint64_t a24, uint64_t a25, void *a26, uint64_t a27)
{
  if (a20) {
    std::mutex::unlock(a19);
  }
  if (a22) {
    std::mutex::unlock(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100175CA4(uint64_t a1, int a2)
{
  std::chrono::steady_clock::time_point v12 = 0LL;
  std::chrono::steady_clock::time_point v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_1000353EC((unint64_t *)&v12, 4uLL);
  *(_DWORD *)std::chrono::steady_clock::time_point v12 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::system_clock::time_point v10 = 0LL;
  uint64_t v11 = 0LL;
  if (sub_1001D341C(a1 + 544, 0x35u, (uint64_t)&v12, (unint64_t *)&__p))
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x35u, v8);
      sub_100393A38();
    }

    sub_100174370(v6, (uint64_t)&__p);
    uint64_t v4 = 4294966272LL;
  }

  if (__p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }

  if (v12)
  {
    std::chrono::steady_clock::time_point v13 = v12;
    operator delete(v12);
  }

  return v4;
}

void sub_100175DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v18 = v17;

  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100175DF8(uint64_t a1, uint64_t a2)
{
  if (sub_1001D52F4(a1 + 544, a2)) {
    return 0LL;
  }
  else {
    return 4294966279LL;
  }
}

uint64_t sub_100175E1C(uint64_t a1, int a2)
{
  if (sub_1001D5574(a1 + 544, a2)) {
    return 0LL;
  }
  else {
    return 4294966268LL;
  }
}

unint64_t sub_100175E40(uint64_t a1)
{
  unsigned __int16 v1 = sub_1001D5864(a1 + 544);
  if ((v1 & 0xFF00) != 0) {
    unsigned __int16 v2 = v1;
  }
  else {
    unsigned __int16 v2 = 0;
  }
  uint64_t v3 = 4294966267LL;
  if ((v1 & 0xFF00) != 0) {
    uint64_t v3 = 0LL;
  }
  return v3 | ((unint64_t)v2 << 32);
}

BOOL sub_100175E70(uint64_t a1, char a2, __int16 a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0LL;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_1000353EC((unint64_t *)&v15, 3uLL);
  uint64_t v6 = (char *)v15;
  *(_BYTE *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = a2;
  *(_WORD *)(v6 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = a3;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::steady_clock::time_point v13 = 0LL;
  uint64_t v14 = 0LL;
  BOOL v7 = sub_1001D341C(a1 + 544, 0x39u, (uint64_t)&v15, (unint64_t *)&__p);
  if (!v7)
  {
    unsigned int v8 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x39u, v11);
      sub_100393B04();
    }

    sub_100174370(v9, (uint64_t)&__p);
  }

  if (__p)
  {
    std::chrono::steady_clock::time_point v13 = __p;
    operator delete(__p);
  }

  if (v15)
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = v15;
    operator delete(v15);
  }

  return v7;
}

void sub_100175F80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100175FC8(uint64_t a1, int a2)
{
  std::chrono::steady_clock::time_point v12 = 0LL;
  std::chrono::steady_clock::time_point v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_1000353EC((unint64_t *)&v12, 4uLL);
  *(_DWORD *)std::chrono::steady_clock::time_point v12 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::system_clock::time_point v10 = 0LL;
  uint64_t v11 = 0LL;
  BOOL v4 = sub_1001D341C(a1 + 544, 0x3Bu, (uint64_t)&v12, (unint64_t *)&__p);
  if (!v4)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x3Bu, v8);
      sub_100393B04();
    }

    sub_100174370(v6, (uint64_t)&__p);
  }

  if (__p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }

  if (v12)
  {
    std::chrono::steady_clock::time_point v13 = v12;
    operator delete(v12);
  }

  return v4;
}

void sub_1001760C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100176110(uint64_t a1)
{
  unsigned __int16 v2 = (std::mutex *)(a1 + 336);
  std::mutex::lock((std::mutex *)(a1 + 336));
  char v17 = 1;
  uint64_t v14 = 0LL;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100030B3C(&v14, &v17, (uint64_t)buf, 1uLL);
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::steady_clock::time_point v12 = 0LL;
  uint64_t v13 = 0LL;
  if (!sub_1001D341C(a1 + 544, 0x2Du, (uint64_t)&v14, (unint64_t *)&__p))
  {
    BOOL v7 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x2Du, buf);
      sub_100393BB4();
    }

    goto LABEL_9;
  }

  uint64_t v3 = (char *)__p;
  if (v12 == __p)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100393B4C();
    }
LABEL_9:
    LOBYTE(v8) = 0;
    unsigned int v9 = 0;
    goto LABEL_15;
  }

  *(_WORD *)(a1 + 2640) = *(unsigned __int8 *)__p | 0x100;
  BOOL v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = *v3;
    if (v5 > 2) {
      uint64_t v6 = "";
    }
    else {
      uint64_t v6 = off_1007B28B0[v5];
    }
    *(_DWORD *)std::string buf = 136315138;
    __int128 v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,#deep-slp QueryDeepSleepState complete state: %s",  buf,  0xCu);
  }

  unsigned int v8 = *(unsigned __int16 *)(a1 + 2640);
  unsigned int v9 = v8 >> 8;
LABEL_15:
  if (__p)
  {
    std::chrono::steady_clock::time_point v12 = __p;
    operator delete(__p);
  }

  if (v14)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = v14;
    operator delete(v14);
  }

  std::mutex::unlock(v2);
  return v8 | (v9 << 8);
}

void sub_100176300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v16 = v15;

  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100176354(uint64_t a1)
{
  return sub_1001D32E8(a1 + 544);
}

uint64_t sub_10017635C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_1000353EC((unint64_t *)&__p, 5uLL);
  uint64_t v6 = (char *)__p;
  BOOL v7 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    unsigned int v8 = __p;
    if (!v7) {
      break;
    }
    if (v13 - (_BYTE *)__p >= 1) {
      bzero(__p, v13 - (_BYTE *)__p);
    }
    char v9 = *v6;
    *(_DWORD *)(v6 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = *((_DWORD *)v7 + 4);
    BOOL v7 = (uint64_t *)*v7;
    char *v6 = v9 + 1;
    uint64_t v10 = sub_100176440(a1, &__p, a3);
    if ((_DWORD)v10)
    {
      unsigned int v8 = __p;
      if (!__p) {
        return v10;
      }
      goto LABEL_9;
    }
  }

  uint64_t v10 = 0LL;
  if (!__p) {
    return v10;
  }
LABEL_9:
  uint64_t v13 = v8;
  operator delete(v8);
  return v10;
}

void sub_100176420( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100176440(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[1] - *a2 != 5LL) {
    sub_100393CC4();
  }
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  char v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v21 = (std::mutex *)(a1 + 208);
  char v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_100174BA4((uint64_t)&v21, (uint64_t)&__lk);
  if (*(_BYTE *)(a1 + 2555)) {
    *(_BYTE *)(a1 + 2555) = 0;
  }
  if (!sub_1001D341C(a1 + 544, 0x33u, (uint64_t)a2, (unint64_t *)&__p))
  {
    uint64_t v16 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x33u, buf);
      sub_100393A38();
    }

    sub_100174370(v17, (uint64_t)&__p);
    uint64_t v15 = 4294966278LL;
    goto LABEL_35;
  }

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(_BYTE *)(a1 + 2555)) {
      goto LABEL_23;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_) {
      break;
    }
    v7.__d_.__rep_ = v6.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v7.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v8.__d_.__rep_)
      {
        if (v8.__d_.__rep_ < 1)
        {
          if ((unint64_t)v8.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0x8000000000000000LL;
            goto LABEL_19;
          }
        }

        else if ((unint64_t)v8.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_17;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 1000 * v8.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0LL;
      }

void sub_1001767C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  if (a13) {
    std::mutex::unlock(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100176814(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  std::chrono::steady_clock::time_point v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_1000353EC((unint64_t *)&__p, 5uLL);
  *(_BYTE *)std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v4 = sub_100176440(a1, &__p, a2);
  if (__p)
  {
    std::chrono::steady_clock::time_point v7 = __p;
    operator delete(__p);
  }

  return v4;
}

void sub_100176880( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001768A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 25));
  BOOL v22 = 0;
  if ((sub_1001D003C(a1 + 544, &v22) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100393D18();
    }
    goto LABEL_33;
  }

  if (!v22)
  {
    int v14 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,Rose is powered off. Can't query power stats",  (uint8_t *)&__p,  2u);
    }

    goto LABEL_33;
  }

  std::__fs::filesystem::directory_entry::_Path __p = 0LL;
  __int128 v20 = 0LL;
  uint64_t v21 = 0LL;
  BOOL v6 = sub_1001D341C(a1 + 544, 0x26u, (uint64_t)&__p, (unint64_t *)&v24);
  if (__p)
  {
    __int128 v20 = __p;
    operator delete(__p);
  }

  if (!v6)
  {
    uint64_t v15 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_10031FBA8(0x26u, &__p);
      sub_1003938E8();
    }

    sub_100174370(v16, (uint64_t)&v24);
    goto LABEL_33;
  }

  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 25));
    if ((v8 & 1) != 0) {
      goto LABEL_39;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000LL;
            goto LABEL_20;
          }
        }

        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_18;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0LL;
      }

void sub_100176B90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::mutex::unlock(v18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100176BE8(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100393D44();
  }
  return sub_100176C44(a1, a2);
}

uint64_t sub_100176C44(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100393F44();
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "relayCommandMessage of unspecified type.");
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
        sub_100393DE4();
      }
      if (!*(_BYTE *)(a2 + 512))
      {
        __int128 v38 = "msg.request.has_value()";
        int v39 = 1016;
        goto LABEL_129;
      }

      sub_10014DE5C(a2 + 8, *(_WORD *)(a2 + 4), (uint64_t)buf);
      if (!v48[0])
      {
        if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
          sub_100393DB8();
        }
        goto LABEL_102;
      }

      memset(&v41, 0, sizeof(v41));
      sub_100030B3C(&v41, buf, (uint64_t)v48, 0x99uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      std::string __p = v41;
      unsigned int v4 = 33;
LABEL_93:
      memset(buf, 0, 24);
      if (sub_1001D341C(a1 + 544, v4, (uint64_t)&__p, (unint64_t *)buf))
      {
        __int16 v29 = *(void **)buf;
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
LABEL_96:
          operator delete(v29);
        }

        goto LABEL_97;
      }

      uint64_t v31 = (os_log_s *)(id)qword_1008000A0;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        sub_10031FBA8(v4, &v41);
        sub_100393D70();
      }

      sub_100174370(v32, (uint64_t)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

void sub_100177800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001778C0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100393F70();
  }
  return sub_10017791C(a1, a2);
}

uint64_t sub_10017791C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    uint64_t v2 = a1;
    if (*(_DWORD *)a2 == 1)
    {
      unsigned int v4 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,relayPropertyMessage -- SetRoseConnectionlessMacAddress",  v6,  2u);
      }

      if (!*(_BYTE *)(a2 + 12)) {
        sub_100393F9C();
      }
      LOBYTE(asub_10014C374((uint64_t)&unk_1007F8158, 1) = sub_1001D4A5C(v2 + 544, (unsigned __int8 *)(a2 + 4));
    }
  }

  else
  {
    LODWORD(asub_10014C374((uint64_t)&unk_1007F8158, 1) = os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR);
    if ((_DWORD)a1)
    {
      sub_100393FC4();
      LOBYTE(asub_10014C374((uint64_t)&unk_1007F8158, 1) = 0;
    }
  }

  return a1 & 1;
}

void sub_1001779EC(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  sub_100018E60((void *)(a1 + 440), a2);
  std::mutex::unlock(v4);
}

uint64_t sub_100177A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100176C44(a1, (uint64_t)v5);
  if (v11 && __p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }

  if (v8 && v6)
  {
    std::chrono::steady_clock::time_point v7 = v6;
    operator delete(v6);
  }

  return v3;
}

void sub_100177ACC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100177AE8(uint64_t a1, uint64_t a2)
{
  return sub_100177A30(a1 - 8, a2);
}

uint64_t sub_100177AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 408);
  __int128 v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 208);
  __int128 v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  __int128 v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 48);
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  void v10[3] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  void v10[5] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_100177B84(a1, v2, v10);
}

uint64_t sub_100177B84(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v10 = 2;
  v11[0] = 0;
  v11[552] = 0;
  __int128 v3 = a3[11];
  __int128 v22 = a3[10];
  __int128 v23 = v3;
  __int128 v24 = a3[12];
  __int128 v4 = a3[7];
  __int128 v18 = a3[6];
  __int128 v19 = v4;
  __int128 v5 = a3[9];
  __int128 v20 = a3[8];
  __int128 v21 = v5;
  __int128 v6 = a3[3];
  __int128 v14 = a3[2];
  __int128 v15 = v6;
  __int128 v7 = a3[5];
  __int128 v16 = a3[4];
  __int128 v17 = v7;
  __int128 v8 = a3[1];
  __int128 v12 = *a3;
  __int128 v13 = v8;
  uint64_t v25 = *((void *)a3 + 26);
  char v26 = 1;
  v27[0] = 0;
  v27[72] = 0;
  v27[80] = 0;
  v27[208] = 0;
  v27[216] = 0;
  v27[296] = 0;
  v27[304] = 0;
  v27[408] = 0;
  v27[416] = 0;
  char v30 = 0;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  char v38 = 0;
  sub_100148720(a2, &v10);
  if (v30 && __p)
  {
    __int16 v29 = __p;
    operator delete(__p);
  }

  sub_100148A24((uint64_t)v27);
  return sub_100124BFC((uint64_t)v11);
}

void sub_100177CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100177CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 392);
  __int128 v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 208);
  __int128 v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  __int128 v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 48);
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  void v10[3] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  void v10[5] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_100177B84(a1 - 16, v2, v10);
}

BOOL sub_100177D68(uint64_t a1, int **a2, void *a3)
{
  __int128 v5 = *a2;
  __int128 v4 = (char *)a2[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (char *)*a2) >> 3);
  if (v6 >= 0x1A)
  {
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"pushBeaconAllowlist: %lu beacons specified, but max allowed is: %d",  v6,  25LL));
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100393FF0();
    }
    if (a3)
    {
      NSErrorUserInfoKey v73 = NSLocalizedDescriptionKey;
      uint64_t v74 = v7;
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v74,  &v73,  1LL));
      id v9 = PRErrorWithCodeAndUserInfo(107LL, v8);
      *a3 = (id)objc_claimAutoreleasedReturnValue(v9);
    }

    return 0LL;
  }

  __int128 v14 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,pushBeaconAllowlist - passed size check. Given %lu beacons ++",  buf,  0xCu);
  }

  memset(v71, 0, sizeof(v71));
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  *(_OWORD *)&buf[1] = 0u;
  if (v4 == (char *)v5)
  {
    __int128 v22 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v52 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,pushBeaconAllowlist: 0 beacons specified. Purging allowlist.",  v52,  2u);
    }
  }

  else
  {
    __int128 v15 = *a2;
    int v16 = **a2;
    if ((v16 - 4) <= 0xFFFFFFFD)
    {
      __int128 v17 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_1003940C8(v17, v18, v19);
      }
      if (a3)
      {
        NSErrorUserInfoKey v61 = NSLocalizedDescriptionKey;
        uint64_t v62 = @"pushBeaconAllowlist: may only push BLE or UUID identified beacons.";
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v62,  &v61,  1LL));
        id v21 = PRErrorWithCodeAndUserInfo(107LL, v20);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v21);
      }

      return 0LL;
    }

    *(void *)int v52 = 0LL;
    __int128 __dst = 0LL;
    uint64_t v54 = 0LL;
    __int128 v23 = a2[1];
    if (v15 == v23)
    {
      uint64_t v25 = (char *)v15;
LABEL_25:
      buf[0] = v16 != 2;
      *(void *)&buf[1] = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (char *)v15) >> 3);
      sub_1000065CC(v57, "Beacon addresses: contiguously:\n");
      char v26 = *(_BYTE **)v52;
      BOOL v27 = __dst;
      sub_1000065CC(__p, "===== + = + =====\n");
      sub_100361C98((uint64_t)v57, (uint64_t)v26, v27 - v26, 4u, (uint64_t)__p, &__src);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v58 < 0) {
        operator delete(*(void **)v57);
      }
      int v28 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        p_src = &__src;
        if ((__src.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_src = (std::stringbuf::string_type *)__src.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v57 = 136315138;
        *(void *)&void v57[4] = p_src;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#roseprovider,%s", v57, 0xCu);
      }

      memcpy(&buf[9], *(const void **)v52, (size_t)__dst - *(void *)v52);
      char v30 = 1;
    }

    else
    {
      while (*v15 == v16)
      {
        if (!*((_BYTE *)v15 + 36)) {
          sub_100006080();
        }
        int v24 = *(int *)((char *)v15 + 30);
        WORD2(__src.__r_.__value_.__r.__words[0]) = *((_WORD *)v15 + 17);
        LODWORD(__src.__r_.__value_.__l.__data_) = v24;
        sub_10017907C((uint64_t)v52, (char *)__dst, (char *)&__src, &__src.__r_.__value_.__s.__data_[6], 6LL);
        v15 += 10;
        if (v15 == v23)
        {
          __int128 v15 = *a2;
          uint64_t v25 = (char *)a2[1];
          goto LABEL_25;
        }
      }

      char v31 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
        sub_10039413C(v31, v32, v33);
      }
      if (a3)
      {
        NSErrorUserInfoKey v59 = NSLocalizedDescriptionKey;
        uint64_t v60 = @"Given vector of different types beacons. All beacons must be of the same identifer type.";
        char v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &v59,  1LL));
        id v35 = PRErrorWithCodeAndUserInfo(107LL, v34);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v35);
      }

      char v30 = 0;
    }

    if (*(void *)v52)
    {
      __int128 __dst = *(void **)v52;
      operator delete(*(void **)v52);
    }

    if ((v30 & 1) == 0) {
      return 0LL;
    }
  }

  *(void *)int v52 = 0LL;
  __int128 __dst = 0LL;
  uint64_t v54 = 0LL;
  sub_100030B3C(v52, buf, (uint64_t)&v72, 0x9FuLL);
  sub_1000065CC(v57, "Allowlist Beacons:\n");
  char v36 = *(_BYTE **)v52;
  char v37 = __dst;
  sub_1000065CC(__p, "===========\n");
  sub_100361C98((uint64_t)v57, (uint64_t)v36, v37 - v36, 4u, (uint64_t)__p, &__src);
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v58 < 0) {
    operator delete(*(void **)v57);
  }
  char v38 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEBUG)) {
    sub_100394054((uint64_t)&__src, v38, v39, v40, v41, v42, v43, v44);
  }
  BOOL v45 = sub_1001D364C(a1 + 544, 0xD2u, (uint64_t)v52);
  BOOL v10 = v45;
  if (a3) {
    char v46 = v45;
  }
  else {
    char v46 = 1;
  }
  if ((v46 & 1) == 0)
  {
    NSErrorUserInfoKey v55 = NSLocalizedDescriptionKey;
    uint64_t v56 = @"Failed to push beacon allowlist to AOP.";
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v56,  &v55,  1LL));
    id v48 = PRErrorWithCodeAndUserInfo(107LL, v47);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v48);
  }

  if (*(void *)v52)
  {
    __int128 __dst = *(void **)v52;
    operator delete(*(void **)v52);
  }

  return v10;
}

void sub_100178348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100178408(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    __int128 v4 = (void *)sub_10021DE24();
    operator delete(v4);
  }

void *sub_100178434(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s ***)(v1 + 3104);
  v5[0] = &off_1007B26C0;
  v5[1] = v1;
  unint64_t v6 = v5;
  sub_10021DE28(v2, (uint64_t)qword_1007F1D40, (uint64_t)v5, *(void **)(v1 + 400));
  id result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    id result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1001784DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    __int128 v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100178518(uint64_t a1, uint64_t a2, double a3)
{
  *(double *)(a2 + 8) = a3;
  uint64_t v4 = sub_100250408(a1 + 3056, a3);
  if (!v5) {
    return 0LL;
  }
  *(void *)(a2 + 16) = v4;
  uint64_t v6 = sub_100250830(*(double *)&v4);
  if (!v7) {
    return 0LL;
  }
  *(void *)a2 = v6;
  return 1LL;
}

uint64_t sub_100178574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v10 && __p)
  {
    id v9 = __p;
    operator delete(__p);
  }

  sub_100148A24((uint64_t)&v7);
  return sub_100124BFC((uint64_t)&v6);
}

void sub_100178608(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100178624(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  sub_10011B560( (void *)(a1 + 72),  *(const void **)(a2 + 72),  *(void *)(a2 + 80),  (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 15sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  sub_10011B618( (void *)(a1 + 136),  *(const void **)(a2 + 136),  *(void *)(a2 + 144),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  return a1;
}

void sub_1001786E8(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100178704(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_1001376C0((_BYTE *)(a1 + 8), a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 600);
  __int128 v6 = *(_OWORD *)(a2 + 616);
  __int128 v7 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 63sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v7;
  *(_OWORD *)(a1 + 600) = v5;
  *(_OWORD *)(a1 + 616) = v6;
  __int128 v8 = *(_OWORD *)(a2 + 664);
  __int128 v9 = *(_OWORD *)(a2 + 680);
  __int128 v10 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 71sub_10014C374((uint64_t)&unk_1007F8180, 2) = v10;
  *(_OWORD *)(a1 + 664) = v8;
  *(_OWORD *)(a1 + 680) = v9;
  __int128 v11 = *(_OWORD *)(a2 + 728);
  __int128 v12 = *(_OWORD *)(a2 + 744);
  __int128 v13 = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 776) = v13;
  *(_OWORD *)(a1 + 728) = v11;
  *(_OWORD *)(a1 + 744) = v12;
  sub_100148920((_BYTE *)(a1 + 792), a2 + 792);
  memcpy((void *)(a1 + 872), (const void *)(a2 + 872), 0x149uLL);
  sub_100137714((__n128 *)(a1 + 1208), (__n128 *)(a2 + 1208));
  memcpy((void *)(a1 + 1328), (const void *)(a2 + 1328), 0x1D9uLL);
  return a1;
}

void sub_1001787C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001787E4(uint64_t a1)
{
  return a1;
}

void *sub_10017881C(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  a1[5] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  a1[4] = 0LL;
  if (v3) {
    operator delete(v3);
  }
  __int128 v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  __int128 v5 = (void *)a1[2];
  a1[2] = 0LL;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_10017887C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](&OBJC_CLASS___PRGlobalDebugSettings, "sharedSettings"));
  __int128 v6 = (char *)[v5 integerForKey:v3];

  if ((unint64_t)(v6 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int128 v7 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      __int128 v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,logging level set via debug settings: %ld",  (uint8_t *)&v8,  0xCu);
    }

    sub_1001D4CEC(v4 + 544, (char)v6);
  }
}

void sub_100178970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100178998(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](&OBJC_CLASS___PRGlobalDebugSettings, "sharedSettings"));
  id v7 = objc_msgSend(v5, "objectForKey:ofClass:", v3, objc_opt_class(NSArray, v6));
  int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  id v9 = [v8 count];
  __int128 v10 = (os_log_s *)qword_1008000A0;
  if (v9 == (id)2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#roseprovider,LE thresholds set via debug settings: %@",  (uint8_t *)&v14,  0xCu);
    }

    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
    __int128 v12 = [v11 intValue];
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
    sub_1001D5090(v4 + 544, v12, (int)[v13 intValue]);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003941B0();
  }
}

void sub_100178B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100178B5C()
{
  return 0LL;
}

uint64_t sub_100178B64()
{
  return 0LL;
}

uint64_t sub_100178B6C()
{
  return 0LL;
}

uint64_t sub_100178B74()
{
  return 0LL;
}

uint64_t sub_100178B7C()
{
  return 0LL;
}

uint64_t sub_100178B84(uint64_t a1, uint64_t a2)
{
  *(double *)a1 = (double)std::chrono::steady_clock::now().__d_.__rep_;
  *(_DWORD *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
  sub_100137848((_BYTE *)(a1 + 24), a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 9sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  return a1;
}

uint64_t sub_100178BF8(uint64_t a1, int a2)
{
  *(_WORD *)a1 = a2;
  else {
    int v3 = dword_100424840[(char)(BYTE2(a2) - 1)];
  }
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = sub_100178C5C(a1, HIBYTE(a2));
  return a1;
}

uint64_t sub_100178C5C(uint64_t a1, int a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_100178C70(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 6;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 79sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 87sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 1216) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 1208) = v4;
  __int128 v5 = *((_OWORD *)a2 + 1);
  __int128 v6 = *((_OWORD *)a2 + 2);
  __int128 v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 127sub_10014C374((uint64_t)&unk_1007F8180, 2) = *((_DWORD *)a2 + 16);
  *(_OWORD *)(a1 + 1240) = v6;
  *(_OWORD *)(a1 + 1256) = v7;
  *(_OWORD *)(a1 + 1224) = v5;
  *(void *)(a1 + 1280) = 0LL;
  *(void *)(a1 + 1296) = 0LL;
  *(void *)(a1 + 1288) = 0LL;
  sub_100130F40((void *)(a1 + 1280), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  *(_OWORD *)(a1 + 1304) = *((_OWORD *)a2 + 6);
  *(_BYTE *)(a1 + 1320) = 1;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_BYTE *)(a1 + 159sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 167sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1728) = 0;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1800) = 0;
  return a1;
}

void sub_100178D60(_Unwind_Exception *a1)
{
}

__n128 sub_100178D84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_1007B2610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100178DC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1007B2610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100178DEC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  int v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_100178E08(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100178E44()
{
}

uint64_t sub_100178E50(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      uint64_t result = std::mutex::try_lock(v2);
      *(_BYTE *)(a1 + 8) = result;
      return result;
    }
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }

  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return sub_100178EA4();
}

void sub_100178EA4(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }

  std::__throw_system_error(11, "unique_lock::lock: already locked");
  sub_100178EFC();
}

uint64_t sub_100178EFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_100178F30(*(void *)a1);
  }
  return a1;
}

void sub_100178F30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_100178F70(v2, v3);
  }

void *sub_100178F70(void *result, char *__src, char *a3, unint64_t a4)
{
  __int128 v7 = result;
  unint64_t v8 = result[2];
  id v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      _WORD v7[2] = 0LL;
    }

    if ((a4 & 0x8000000000000000LL) != 0) {
      sub_10001E11C();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_1000242D4(v7, v11);
    id v9 = (char *)v7[1];
    goto LABEL_17;
  }

  __int128 v12 = (_BYTE *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }

  int v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    id v9 = (char *)v7[1];
  }

  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *sub_10017907C(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  __int128 v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10001E11C();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      __int128 v17 = (char *)operator new(v15);
    }

    else
    {
      size_t v16 = 0LL;
      __int128 v17 = 0LL;
    }

    BOOL v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    int v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }

      while (v13);
      uint64_t v10 = *(char **)(a1 + 8);
      int v28 = v17;
    }

    char v30 = &v27[a5];
    char v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }

  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v19 = &__src[a5];
    id v21 = *(char **)(a1 + 8);
LABEL_17:
    __int128 v22 = &v5[a5];
    __int128 v23 = &v21[-a5];
    int v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      int v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }

      while (v25);
    }

    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }

  uint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  id v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_10017926C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1007B26C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001792A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B26C0;
  a2[1] = v2;
  return result;
}

void sub_1001792BC(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_1001792C8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100179304()
{
  return &off_1007B2730;
}

uint64_t sub_100179310(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 1;
  sub_100131520(a1 + 8, a2);
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 79sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 87sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_BYTE *)(a1 + 159sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 167sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1728) = 0;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1800) = 0;
  return a1;
}

void sub_10017938C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    sub_1000060F4(a1 + 32);
    *(_BYTE *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  }

void *sub_1001793CC(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000063A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_1000064BC((_BYTE *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  return __dst;
}

void sub_100179434(_Unwind_Exception *exception_object)
{
}

void sub_100179450()
{
}

void sub_100179458(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_1001794C8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1001794DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

void sub_100179504()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D58))
    {
      sub_1000065CC(qword_1007F1D40, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1007F1D40, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D58);
    }
  }

void sub_100179580(_Unwind_Exception *a1)
{
}

void sub_100179598(int a1, int a2, int a3, double a4)
{
  double v15 = a4;
  int v13 = a2;
  int valuePtr = a1;
  *(_OWORD *)keys = *(_OWORD *)off_1007B29B0;
  __int128 v22 = *(_OWORD *)off_1007B29C0;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v13);
  values[0] = (void *)CFAutorelease(v5);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFTypeRef v7 = CFAutorelease(v6);
  unint64_t v8 = &kCFBooleanTrue;
  if (!a3) {
    unint64_t v8 = &kCFBooleanFalse;
  }
  CFBooleanRef v9 = *v8;
  values[1] = (void *)v7;
  values[2] = v9;
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v15);
  values[3] = (void *)CFAutorelease(v10);
  CFDictionaryRef v11 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v12 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412546;
    __int128 v17 = @"ClientState";
    __int16 v18 = 2112;
    CFDictionaryRef v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "sending ranging event %@ to powerlog with dict: %@",  buf,  0x16u);
  }

  PLLogRegisteredEvent(88LL, @"ClientState", v11, 0LL);
  CFRelease(v11);
}

void sub_10017971C(int a1)
{
  int valuePtr = a1;
  keys = @"State";
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  values = (void *)CFAutorelease(v1);
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  PLLogRegisteredEvent(88LL, @"RadioState", v2, 0LL);
  CFRelease(v2);
}

void sub_1001797E4(unsigned int *a1)
{
  __int128 v46 = *(_OWORD *)off_1007B29F0;
  __int128 v47 = *(_OWORD *)off_1007B2A00;
  __int128 v48 = *(_OWORD *)off_1007B2A10;
  __int128 v49 = *(_OWORD *)off_1007B2A20;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v35 = a1[14];
  uint64_t valuePtr = v2;
  uint64_t v4 = a1[3];
  uint64_t v33 = a1[2];
  uint64_t v34 = v3;
  uint64_t v5 = a1[5];
  uint64_t v31 = a1[4];
  uint64_t v32 = v4;
  uint64_t v6 = a1[7];
  uint64_t v29 = a1[6];
  uint64_t v30 = v5;
  *(_OWORD *)keys = *(_OWORD *)off_1007B29D0;
  __int128 v45 = *(_OWORD *)off_1007B29E0;
  uint64_t v27 = a1[8];
  uint64_t v28 = v6;
  uint64_t v26 = *((unsigned __int16 *)a1 + 18);
  uint64_t v25 = *((unsigned __int16 *)a1 + 19);
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  values[0] = (void *)CFAutorelease(v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v35);
  values[1] = (void *)CFAutorelease(v8);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v34);
  values[2] = (void *)CFAutorelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v33);
  values[3] = (void *)CFAutorelease(v10);
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v32);
  values[4] = (void *)CFAutorelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v31);
  values[5] = (void *)CFAutorelease(v12);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v30);
  values[6] = (void *)CFAutorelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v29);
  values[7] = (void *)CFAutorelease(v14);
  CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v28);
  values[8] = (void *)CFAutorelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v27);
  values[9] = (void *)CFAutorelease(v16);
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v26);
  values[10] = (void *)CFAutorelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v25);
  values[11] = (void *)CFAutorelease(v18);
  CFDictionaryRef v19 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  12LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int64_t v20 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)char v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending power stats to powerlog %@", buf, 0xCu);
    int64_t v20 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = a1[10];
    unsigned int v22 = a1[11];
    unsigned int v24 = a1[12];
    unsigned int v23 = a1[13];
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)char v38 = v21;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v23;
    __int16 v39 = 1024;
    unsigned int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "additional power stats - SLP count:%u, DSLP count:%u, wake count:%u, PMGR SLP count:%u",  buf,  0x1Au);
  }

  PLLogRegisteredEvent(88LL, @"PowerStatistics", v19, 0LL);
  CFRelease(v19);
}

void sub_100179ACC(int a1)
{
  keys = @"state";
  CFNumberRef v1 = (void **)&kCFBooleanTrue;
  if (!a1) {
    CFNumberRef v1 = (void **)&kCFBooleanFalse;
  }
  values = *v1;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    CFDictionaryRef v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "sending heartbeat status to powerlog %@",  (uint8_t *)&v4,  0xCu);
  }

  PLLogRegisteredEvent(88LL, @"HeartBeatStatus", v2, 0LL);
  CFRelease(v2);
}

id sub_100179D08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:");
}

BOOL sub_10017A27C(uint64_t a1, void *a2)
{
  return v3 > *(double *)(a1 + 32);
}

uint64_t sub_10017A328(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = off_1007B2A88;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 20) = xmmword_100424870;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_WORD *)(a1 + 79) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 15sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_100424880;
  *(void *)(a1 + 19sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(_DWORD *)(a1 + 183) = 0;
  return a1;
}

void sub_10017A3C4(uint64_t a1, char a2)
{
  double v4 = sub_100023CC4();
  CFDictionaryRef v5 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v17;
    sub_1000065CC(v17, off_1007B2B30[a2]);
    if (v18 < 0) {
      uint64_t v6 = (void **)v17[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v7 = "WaitingForRequest";
    }
    else {
      CFNumberRef v7 = "RequestReceived";
    }
    sub_1000065CC(v15, v7);
    int v8 = v16;
    CFNumberRef v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v10 = "NotRunning";
    }
    else {
      CFNumberRef v10 = "Running";
    }
    sub_1000065CC(__p, v10);
    CFNumberRef v11 = v15;
    if (v8 < 0) {
      CFNumberRef v11 = v9;
    }
    if (v14 >= 0) {
      CFNumberRef v12 = __p;
    }
    else {
      CFNumberRef v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218754;
    double v20 = v4;
    __int16 v21 = 2080;
    unsigned int v22 = v6;
    __int16 v23 = 2080;
    unsigned int v24 = v11;
    __int16 v25 = 2080;
    uint64_t v26 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] sessionRequested method:%s requestState:%s sessionState:%s",  buf,  0x2Au);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    *(double *)(a1 + 88) = v4;
    *(_BYTE *)(a1 + 16) = a2;
    *(_DWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  }

  else
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394254();
    }
  }

void sub_10017A5CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_10017A614(uint64_t a1, int a2, int a3, int a4)
{
  double v8 = sub_100023CC4();
  CFNumberRef v9 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v10 = "WaitingForRequest";
    }
    else {
      CFNumberRef v10 = "RequestReceived";
    }
    sub_1000065CC(v21, v10);
    int v11 = v22;
    CFNumberRef v12 = *(_BYTE **)v21;
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v13 = "NotRunning";
    }
    else {
      CFNumberRef v13 = "Running";
    }
    sub_1000065CC(__p, v13);
    char v14 = v21;
    if (v11 < 0) {
      char v14 = v12;
    }
    if (v20 >= 0) {
      CFNumberRef v15 = __p;
    }
    else {
      CFNumberRef v15 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134219266;
    *(double *)&uint8_t buf[4] = v8;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    __int16 v30 = 2080;
    uint64_t v31 = v14;
    __int16 v32 = 2080;
    uint64_t v33 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] sessionStarted anchors:%d channel:%d rangingMultiplier:%d requestState:%s sessionState:%s",  buf,  0x32u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(*(void **)v21);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    *(double *)(a1 + 96) = v8;
    *(_DWORD *)(a1 + memset(&v17[37], 0, 116) = a3;
    *(_DWORD *)(a1 + 120) = a2;
    *(_DWORD *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = a4;
    *(_DWORD *)(a1 + 164) = 0;
    else {
      int v16 = 2;
    }
    *(_DWORD *)(a1 + 168) = v16;
    CFNumberRef v17 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000065CC(buf, off_1007B2B48[*(int *)(a1 + 168)]);
      if (v27 >= 0) {
        char v18 = buf;
      }
      else {
        char v18 = *(_BYTE **)buf;
      }
      *(_DWORD *)__int16 v21 = 136315138;
      *(void *)&v21[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,Reason for this session: %s",  v21,  0xCu);
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (!*(_DWORD *)(a1 + 32))
    {
      sub_10017A910(a1, 0);
      sub_10017AE68(a1);
      *(_DWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
    }
  }

  else
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394280();
    }
  }

void sub_10017A8DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10017A910(uint64_t a1, int a2)
{
  double v4 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFDictionaryRef v5 = "WaitingForRequest";
    }
    else {
      CFDictionaryRef v5 = "RequestReceived";
    }
    sub_1000065CC(v28, v5);
    int v6 = v29;
    CFNumberRef v7 = *(_BYTE **)v28;
    if (*(_DWORD *)(a1 + 164)) {
      double v8 = "NotRunning";
    }
    else {
      double v8 = "Running";
    }
    sub_1000065CC(__p, v8);
    CFNumberRef v9 = v28;
    if (v6 < 0) {
      CFNumberRef v9 = v7;
    }
    if (v27 >= 0) {
      CFNumberRef v10 = __p;
    }
    else {
      CFNumberRef v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v31 = v9;
    __int16 v32 = 2080;
    uint64_t v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,Sending core analytics for Alisha request; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
  }

  int v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  CFNumberRef v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
  -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v12, @"numSessionsRequested");

  int v13 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v13 == 1)
    {
      char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numRecoveryRQSessions");
    }

    else
    {
      if (v13 != 2) {
        goto LABEL_24;
      }
      char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numConfigRecoveryRQSessions");
    }
  }

  else
  {
    char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numSessionRQSessions");
  }

LABEL_24:
  switch(a2)
  {
    case 3:
      CFNumberRef v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v15, @"numDCKUnrecoverableErrors");
      goto LABEL_30;
    case 2:
      CFNumberRef v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v15, @"numDCKRecoverableErrors");
      goto LABEL_30;
    case 1:
      CFNumberRef v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v15, @"numTimesRangingDisallowed");
LABEL_30:

      break;
  }

  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 64) && *(double *)(a1 + 56) - *(double *)(a1 + 40) > 0.0)
  {
    int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v16, @"getKeyDuration");
  }

  if (*(_BYTE *)(a1 + 79) && *(_BYTE *)(a1 + 76))
  {
    CFNumberRef v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 75)));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v17, @"recoverableErrorStatusCode");
  }

  if (*(_BYTE *)(a1 + 84))
  {
    char v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v18, @"unrecoverableErrorStatusCode");
  }

  id v19 = -[NSMutableDictionary mutableCopy](v11, "mutableCopy");
  char v20 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = objc_claimAutoreleasedReturnValue([v19 description]);
    id v22 = [v21 UTF8String];
    *(_DWORD *)__int16 v28 = 136315138;
    *(void *)&uint8_t v28[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,alisha request data to be uploaded:\n%s\n",  v28,  0xCu);
  }

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10017D8B8;
  v24[3] = &unk_1007A2298;
  id v23 = v19;
  id v25 = v23;
  AnalyticsSendEventLazy(@"com.apple.alisha.request", v24);
  sub_10017AE68(a1);
}

void sub_10017AD84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10017AE68(uint64_t result)
{
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  if (*(_BYTE *)(result + 48)) {
    *(_BYTE *)(result + 48) = 0;
  }
  if (*(_BYTE *)(result + 64)) {
    *(_BYTE *)(result + 64) = 0;
  }
  if (*(_BYTE *)(result + 79)) {
    *(_BYTE *)(result + 79) = 0;
  }
  if (*(_BYTE *)(result + 84)) {
    *(_BYTE *)(result + 84) = 0;
  }
  return result;
}

void sub_10017AEA4(uint64_t a1, unsigned int a2)
{
  double v4 = sub_100023CC4();
  CFDictionaryRef v5 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v17, 0, sizeof(v17));
    if (a2 >= 4)
    {
      int v6 = &v17;
    }

    else
    {
      int v6 = &v17;
      std::string::assign(&v17, off_1007B2B60[a2]);
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
    }

    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v7 = "WaitingForRequest";
    }
    else {
      CFNumberRef v7 = "RequestReceived";
    }
    sub_1000065CC(v15, v7);
    int v8 = v16;
    CFNumberRef v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v10 = "NotRunning";
    }
    else {
      CFNumberRef v10 = "Running";
    }
    sub_1000065CC(__p, v10);
    int v11 = v15;
    if (v8 < 0) {
      int v11 = v9;
    }
    if (v14 >= 0) {
      CFNumberRef v12 = __p;
    }
    else {
      CFNumberRef v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218754;
    double v19 = v4;
    __int16 v20 = 2080;
    id v21 = v6;
    __int16 v22 = 2080;
    id v23 = v11;
    __int16 v24 = 2080;
    id v25 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] sessionEnded reason:%s requestState:%s sessionState:%s",  buf,  0x2Au);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003942AC();
    }
  }

  else
  {
    *(double *)(a1 + 104) = v4;
    sub_10017B118(a1, a2);
    sub_10017BA20(a1);
    *(_DWORD *)(a1 + 164) = 1;
  }

void sub_10017B0D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017B118(uint64_t a1, int a2)
{
  double v4 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFDictionaryRef v5 = "WaitingForRequest";
    }
    else {
      CFDictionaryRef v5 = "RequestReceived";
    }
    sub_1000065CC(v60, v5);
    int v6 = v61;
    CFNumberRef v7 = *(_BYTE **)v60;
    if (*(_DWORD *)(a1 + 164)) {
      int v8 = "NotRunning";
    }
    else {
      int v8 = "Running";
    }
    sub_1000065CC(__p, v8);
    CFNumberRef v9 = v60;
    if (v6 < 0) {
      CFNumberRef v9 = v7;
    }
    if (v59 >= 0) {
      CFNumberRef v10 = __p;
    }
    else {
      CFNumberRef v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v63 = v9;
    __int16 v64 = 2080;
    __int128 v65 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,Sending core analytics for Alisha session; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v59 < 0) {
      operator delete(__p[0]);
    }
    if (v61 < 0) {
      operator delete(*(void **)v60);
    }
  }

  int v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  CFNumberRef v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
  -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v12, @"numSessions");

  if (a2)
  {
    if (a2 == 1)
    {
      char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numSessionsTimeoutB");
    }

    else
    {
      if (a2 != 2) {
        goto LABEL_24;
      }
      char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numSessionsSuspendRQ");
    }
  }

  else
  {
    char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v14, @"numSessionsTimeoutA");
  }

LABEL_24:
  if (*(_BYTE *)(a1 + 156))
  {
    LODWORD(v13) = *(_DWORD *)(a1 + 152);
    CFNumberRef v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v15, @"cyclesToFirstSuccessfulRange");
  }

  int v16 = *(_DWORD *)(a1 + 124);
  int v17 = *(_DWORD *)(a1 + 128);
  int v18 = *(_DWORD *)(a1 + 132);
  int v19 = v17 + v16 + v18;
  if (v19 >= 1)
  {
    float v20 = (float)v19;
    *(float *)&double v13 = (float)v16 / (float)v19;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v21, @"ratioCyclesNoAnchors");

    *(float *)&double v22 = (float)v17 / v20;
    id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v22));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v23, @"ratioCyclesSingleAnchor");

    *(float *)&double v24 = (float)v18 / v20;
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v24));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v25, @"ratioCyclesMultipleAnchors");
  }

  double v26 = *(double *)(a1 + 96);
  if (v26 > 0.0)
  {
    double v27 = *(double *)(a1 + 104);
    if (v27 > 0.0 && v27 >= v26)
    {
      double v28 = v27 - v26;
      float v29 = v28;
      *(float *)&double v28 = v29;
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v28));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v30, @"sessionDuration");

      *(float *)&double v31 = (float)(v29 * 14.0) / 3600.0;
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v32, @"energyExpenditure");
    }
  }

  if (*(_BYTE *)(a1 + 140))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 136);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v33, @"firstSOIRSSI");
  }

  if (*(_BYTE *)(a1 + 148))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 144);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v34, @"maxSOIRSSI");
  }

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 168)));
  -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v35, @"reasonForThisSession");

  if (*(_BYTE *)(a1 + 184))
  {
    char v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v36, @"numSessionsWithUnlockEvent");

    if (*(double *)(a1 + 192) - *(double *)(a1 + 88) > 0.0)
    {
      char v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
      -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v37, @"timeToUnlock");
    }
  }

  if (*(_BYTE *)(a1 + 185))
  {
    char v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v38, @"numSessionsWithLockEvent");
  }

  if (*(_BYTE *)(a1 + 186))
  {
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v39, @"numSessionsWithReadyToDriveEvent");
  }

  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 185) && !*(_BYTE *)(a1 + 186))
  {
    unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    -[NSMutableDictionary setValue:forKey:](v11, "setValue:forKey:", v40, @"numSessionsWithNoEvent");
  }

  id v41 = -[NSMutableDictionary mutableCopy](v11, "mutableCopy");
  unsigned int v42 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    id v43 = objc_claimAutoreleasedReturnValue([v41 description]);
    id v44 = [v43 UTF8String];
    *(_DWORD *)uint64_t v60 = 136315138;
    *(void *)&v60[4] = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,alisha session data to be uploaded:\n%s\n",  v60,  0xCu);
  }

  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  double v56[2] = sub_10017D8A8;
  v56[3] = &unk_1007A2298;
  id v45 = v41;
  id v57 = v45;
  AnalyticsSendEventLazy(@"com.apple.alisha.session", v56);
  __int128 v46 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 112)));
  -[NSMutableDictionary setValue:forKey:](v46, "setValue:forKey:", v47, @"ranMultiplier");

  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 116)));
  -[NSMutableDictionary setValue:forKey:](v46, "setValue:forKey:", v48, @"selectedUwbChannel");

  id v49 = -[NSMutableDictionary mutableCopy](v46, "mutableCopy");
  char v50 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    id v51 = objc_claimAutoreleasedReturnValue([v49 description]);
    id v52 = [v51 UTF8String];
    *(_DWORD *)uint64_t v60 = 136315138;
    *(void *)&v60[4] = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,alisha parameter data to be uploaded:\n%s\n",  v60,  0xCu);
  }

  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472LL;
  _OWORD v54[2] = sub_10017D8B0;
  v54[3] = &unk_1007A2298;
  id v53 = v49;
  id v55 = v53;
  AnalyticsSendEventLazy(@"com.apple.alisha.parameters", v54);
}

void sub_10017B878( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10017BA20(uint64_t result)
{
  *(void *)(result + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0xFF00000000LL;
  *(_DWORD *)(result + 160) = 0;
  *(void *)(result + 96) = 0LL;
  *(void *)(result + 104) = 0LL;
  *(void *)(result + 88) = 0LL;
  *(void *)(result + 120) = 0LL;
  *(void *)(result + 128) = 0LL;
  if (*(_BYTE *)(result + 140)) {
    *(_BYTE *)(result + 140) = 0;
  }
  if (*(_BYTE *)(result + 148)) {
    *(_BYTE *)(result + 148) = 0;
  }
  if (*(_BYTE *)(result + 156)) {
    *(_BYTE *)(result + 156) = 0;
  }
  *(_DWORD *)(result + 168) = 2;
  *(_WORD *)(result + 184) = 0;
  *(_BYTE *)(result + 186) = 0;
  *(void *)(result + 19sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  return result;
}

uint64_t sub_10017BA74(uint64_t a1)
{
  CFDictionaryRef v2 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_1000065CC(v12, v3);
    int v4 = v13;
    CFDictionaryRef v5 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_1000065CC(__p, v6);
    CFNumberRef v7 = v12;
    if (v4 < 0) {
      CFNumberRef v7 = v5;
    }
    if (v11 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    CFNumberRef v15 = v7;
    __int16 v16 = 2080;
    int v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,rangingWasDisallowed requestState:%s sessionState:%s",  buf,  0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003942D8();
    }
  }

  else
  {
    sub_10017A910(a1, 1);
  }

  uint64_t result = sub_10017AE68(a1);
  *(_DWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  return result;
}

void sub_10017BC24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10017BC54(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v5 = &v19;
    sub_1002B7730((unsigned __int8 *)a2, &v19);
    if ((v19.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      CFDictionaryRef v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      int v6 = "WaitingForRequest";
    }
    else {
      int v6 = "RequestReceived";
    }
    sub_1000065CC(v17, v6);
    int v7 = v18;
    int v8 = (void **)v17[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v9 = "NotRunning";
    }
    else {
      CFNumberRef v9 = "Running";
    }
    sub_1000065CC(__p, v9);
    CFNumberRef v10 = v17;
    if (v7 < 0) {
      CFNumberRef v10 = v8;
    }
    if (v16 >= 0) {
      char v11 = __p;
    }
    else {
      char v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    id v21 = v5;
    __int16 v22 = 2080;
    id v23 = v10;
    __int16 v24 = 2080;
    id v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,dckErrorSendEventNotification notification:%s requestState:%s sessionState:%s",  buf,  0x20u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394304();
    }
  }

  else
  {
    int v12 = *(unsigned __int8 *)(a1 + 79);
    int v13 = *(_DWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 75) = v13;
    if (!v12) {
      *(_BYTE *)(a1 + 79) = 1;
    }
    sub_10017A910(a1, 2);
  }

  uint64_t result = sub_10017AE68(a1);
  *(_DWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  return result;
}

void sub_10017BE68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10017BEB0(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v5 = v17;
    sub_1002BEFAC(a2, v17);
    if (v18 < 0) {
      CFDictionaryRef v5 = (void **)v17[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      int v6 = "WaitingForRequest";
    }
    else {
      int v6 = "RequestReceived";
    }
    sub_1000065CC(v15, v6);
    int v7 = v16;
    int v8 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v9 = "NotRunning";
    }
    else {
      CFNumberRef v9 = "Running";
    }
    sub_1000065CC(__p, v9);
    CFNumberRef v10 = v15;
    if (v7 < 0) {
      CFNumberRef v10 = v8;
    }
    if (v14 >= 0) {
      char v11 = __p;
    }
    else {
      char v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    float v20 = v5;
    __int16 v21 = 2080;
    __int16 v22 = v10;
    __int16 v23 = 2080;
    __int16 v24 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,dckErrorReturnErrorCode errorCode:%s requestState:%s sessionState:%s",  buf,  0x20u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394330();
    }
  }

  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    *(_BYTE *)(a1 + 84) = 1;
    sub_10017A910(a1, 3);
  }

  uint64_t result = sub_10017AE68(a1);
  *(_DWORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  return result;
}

void sub_10017C0B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_10017C0F8(uint64_t a1)
{
  double v2 = sub_100023CC4();
  id v3 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_1000065CC(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] reportRangingIntentOnNewBluetoothConnection requestState:%s sessionState:%s",  buf,  0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  *(_DWORD *)(a1 + 17sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(double *)(a1 + 176) = v2;
}

void sub_10017C274( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017C2A4(uint64_t a1)
{
  double v2 = sub_100023CC4();
  id v3 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_1000065CC(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] reportRangingIntentOnApproachingVehicle requestState:%s sessionState:%s",  buf,  0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  *(_DWORD *)(a1 + 17sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
  *(double *)(a1 + 176) = v2;
}

void sub_10017C424( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017C454(uint64_t a1)
{
  double v2 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_1000065CC(v11, v3);
    int v4 = v12;
    int v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_1000065CC(__p, v6);
    int v7 = v11;
    if (v4 < 0) {
      int v7 = v5;
    }
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    char v14 = v7;
    __int16 v15 = 2080;
    __int16 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,reportVehicleLocked requestState:%s sessionState:%s",  buf,  0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10039435C();
    }
  }

  else
  {
    *(_BYTE *)(a1 + 185) = 1;
  }

void sub_10017C5F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017C620(uint64_t a1)
{
  double v2 = sub_100023CC4();
  id v3 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_1000065CC(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] reportVehicleUnlocked requestState:%s sessionState:%s",  buf,  0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394388();
    }
  }

  else if (!*(_BYTE *)(a1 + 184))
  {
    *(_BYTE *)(a1 + 184) = 1;
    *(double *)(a1 + 19sub_10014C374((uint64_t)&unk_1007F8180, 2) = v2;
  }

void sub_10017C7E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017C810(uint64_t a1)
{
  double v2 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_1000065CC(v11, v3);
    int v4 = v12;
    int v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_1000065CC(__p, v6);
    int v7 = v11;
    if (v4 < 0) {
      int v7 = v5;
    }
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    char v14 = v7;
    __int16 v15 = 2080;
    __int16 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,reportVehicleReadyToDrive requestState:%s sessionState:%s",  buf,  0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003943B4();
    }
  }

  else
  {
    *(_BYTE *)(a1 + 186) = 1;
  }

void sub_10017C9AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017C9DC(uint64_t a1)
{
  double v2 = sub_100023CC4();
  id v3 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_1000065CC(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] getKeyStarted requestState:%s sessionState:%s",  buf,  0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003943E0();
    }
  }

  else
  {
    *(double *)(a1 + 40) = v2;
    *(_BYTE *)(a1 + 48) = 1;
    if (*(_BYTE *)(a1 + 64)) {
      *(_BYTE *)(a1 + 64) = 0;
    }
  }

void sub_10017CBA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017CBD0(uint64_t a1)
{
  double v2 = sub_100023CC4();
  id v3 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_1000065CC(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,[%.06f] getKeyFinished requestState:%s sessionState:%s",  buf,  0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_10039440C();
    }
  }

  else
  {
    *(double *)(a1 + 56) = v2;
    *(_BYTE *)(a1 + 64) = 1;
  }

void sub_10017CD88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10017CDB8(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v5 = "WaitingForRequest";
    }
    else {
      int v5 = "RequestReceived";
    }
    int v6 = v25;
    sub_1000065CC(v25, v5);
    if (v26 < 0) {
      int v6 = (void **)v25[0];
    }
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_1000065CC(v23, v7);
    int v8 = v24;
    CFNumberRef v9 = (void **)v23[0];
    sub_10017D080((unsigned int *)a2, &__p);
    char v10 = v23;
    if (v8 < 0) {
      char v10 = v9;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    double v28 = v6;
    __int16 v29 = 2080;
    __int16 v30 = v10;
    __int16 v31 = 2080;
    __int16 v32 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#alisha-ca,sessionStatsUpdated requestState:%s sessionState:%s stats:%s",  buf,  0x20u);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100394438();
    }
  }

  else
  {
    double v12 = *(double *)(a2 + 48);
    if (!*(_BYTE *)(a1 + 148)) {
      *(_BYTE *)(a1 + 148) = 1;
    }
    float v13 = v12;
    *(float *)(a1 + 144) = v13;
    double v14 = *(double *)(a2 + 40);
    if (!*(_BYTE *)(a1 + 140)) {
      *(_BYTE *)(a1 + 140) = 1;
    }
    float v15 = v14;
    *(float *)(a1 + 136) = v15;
    unsigned int v16 = *(unsigned __int16 *)(a2 + 32);
    if (!*(_BYTE *)(a1 + 156)) {
      *(_BYTE *)(a1 + 156) = 1;
    }
    *(float *)(a1 + 15sub_10014C374((uint64_t)&unk_1007F8180, 2) = (float)v16;
    __int16 v18 = *(unsigned __int16 **)(a2 + 8);
    int v17 = *(unsigned __int16 **)(a2 + 16);
    *(_DWORD *)(a1 + 124) = *v18;
    std::string v19 = v18 + 2;
    *(_DWORD *)(a1 + 128) = v18[1];
    if (v18 + 2 == v17)
    {
      int v20 = 0;
    }

    else
    {
      int v20 = 0;
      do
      {
        int v21 = *v19++;
        v20 += v21;
      }

      while (v19 != v17);
    }

    *(_DWORD *)(a1 + 13sub_10014C374((uint64_t)&unk_1007F8180, 2) = v20;
  }

void sub_10017D038( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10017D080@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  int v4 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(&v65, v5);
  std::ostream::flush(&v65);
  int v6 = sub_100046B94(&v65, (uint64_t)"{", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
  int v7 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v6, v8);
  std::ostream::flush(v6);
  LOBYTE(v61.__locale_) = 9;
  CFNumberRef v9 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  char v10 = sub_100046B94(v9, (uint64_t)"UWB session id: ", 16LL);
  char v11 = (void *)std::ostream::operator<<(v10, *a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24LL)));
  double v12 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v11, v13);
  std::ostream::flush(v11);
  LOBYTE(v61.__locale_) = 9;
  double v14 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  float v15 = sub_100046B94(v14, (uint64_t)"Reason: ", 8LL);
  sub_1000065CC(&v61, off_1007B2B80[*((char *)a1 + 4)]);
  if ((v63 & 0x80u) == 0) {
    locale = &v61;
  }
  else {
    locale = v61.__locale_;
  }
  if ((v63 & 0x80u) == 0) {
    uint64_t v17 = v63;
  }
  else {
    uint64_t v17 = v62;
  }
  __int16 v18 = sub_100046B94(v15, (uint64_t)locale, v17);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
  std::string v19 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
  std::locale::~locale(&v68);
  std::ostream::put(v18, v20);
  std::ostream::flush(v18);
  LOBYTE(v61.__locale_) = 9;
  int v21 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  __int16 v22 = sub_100046B94(v21, (uint64_t)"# total blocks: ", 16LL);
  __int16 v23 = (void *)std::ostream::operator<<(v22, *((unsigned __int16 *)a1 + 3));
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
  char v24 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v23, v25);
  std::ostream::flush(v23);
  LOBYTE(v61.__locale_) = 9;
  char v26 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  double v27 = sub_100046B94(v26, (uint64_t)"{", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
  double v28 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v27, v29);
  std::ostream::flush(v27);
  if (*((void *)a1 + 2) != *((void *)a1 + 1))
  {
    unint64_t v30 = 0LL;
    do
    {
      LOBYTE(v61.__locale_) = 9;
      __int16 v31 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
      __int16 v32 = sub_100046B94(v31, (uint64_t)"    # blocks with ", 18LL);
      std::ostream::operator<<(v32, v30);
      uint64_t v33 = sub_100046B94(&v65, (uint64_t)" anchors: ", 10LL);
      uint64_t v34 = (void *)std::ostream::operator<<(v33, *(unsigned __int16 *)(*((void *)a1 + 1) + 2 * v30));
      std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24LL)));
      uint64_t v35 = std::locale::use_facet(&v61, &std::ctype<char>::id);
      uint64_t v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10LL);
      std::locale::~locale(&v61);
      std::ostream::put(v34, v36);
      std::ostream::flush(v34);
      ++v30;
    }

    while (v30 < (uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 1);
  }

  LOBYTE(v61.__locale_) = 9;
  char v37 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  char v38 = sub_100046B94(v37, (uint64_t)"}", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24LL)));
  __int16 v39 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  LOBYTE(v61.__locale_) = 9;
  id v41 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  unsigned int v42 = sub_100046B94(v41, (uint64_t)"First success block idx: ", 25LL);
  id v43 = (void *)std::ostream::operator<<(v42, *((unsigned __int16 *)a1 + 16));
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24LL)));
  id v44 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v43, v45);
  std::ostream::flush(v43);
  LOBYTE(v61.__locale_) = 9;
  __int128 v46 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  __int128 v47 = sub_100046B94(v46, (uint64_t)"First success block soiRssi (dBm): ", 35LL);
  *(void *)((char *)v47 + *(void *)(*v47 - 24LL) + 16) = 5LL;
  __int128 v48 = (void *)std::ostream::operator<<(v47, *((double *)a1 + 5));
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24LL)));
  id v49 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v48, v50);
  std::ostream::flush(v48);
  LOBYTE(v61.__locale_) = 9;
  id v51 = sub_100046B94(&v65, (uint64_t)&v61, 1LL);
  id v52 = sub_100046B94(v51, (uint64_t)"Max soiRssi (dbm): ", 19LL);
  *(void *)((char *)v52 + *(void *)(*v52 - 24LL) + 16) = 5LL;
  id v53 = (void *)std::ostream::operator<<(v52, *((double *)a1 + 6));
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24LL)));
  uint64_t v54 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v53, v55);
  std::ostream::flush(v53);
  uint64_t v56 = sub_100046B94(&v65, (uint64_t)"}", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24LL)));
  id v57 = std::locale::use_facet(&v61, &std::ctype<char>::id);
  uint64_t v58 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10LL);
  std::locale::~locale(&v61);
  std::ostream::put(v56, v58);
  std::ostream::flush(v56);
  std::stringbuf::str(a2, &v66);
  *(void *)((char *)v64
  uint64_t v65 = v59;
  std::streambuf::~streambuf(&v66);
  return std::ios::~ios(&v67);
}

void sub_10017D824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

id sub_10017D8A8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10017D8B0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10017D8B8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_10017D8C0(uint64_t a1)
{
  return a1;
}

void sub_10017D8E8(id *a1)
{
}

void sub_10017DA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017DAD4(_Unwind_Exception *a1)
{
}

void sub_10017DD84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10017DF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E0B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017E114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017E124(uint64_t a1)
{
}

void sub_10017E12C(uint64_t a1, uint64_t a2)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:a2]);
  if (v5)
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSData, v3);
    if ((objc_opt_isKindOfClass(v5, v4) & 1) != 0)
    {
      if ([v5 length]) {
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendData:v5];
      }
    }
  }
}

void sub_10017E1A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10017E29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_10017E6B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 rawToken]);
  id v5 = [v4 length];

  if ((unint64_t)v5 >= 0x100) {
    __assert_rtn( "+[NIDiscoveryToken serialize:]_block_invoke",  "NIConfiguration.mm",  196,  "tokenLength <= std::numeric_limits<uint8_t>::max()");
  }
  char v8 = (char)v5;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendBytes:&v8 length:1];
  int v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v3 rawToken]);
  [v6 appendData:v7];
}

void sub_10017E77C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10017E8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017E994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017EA7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10017EBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017EC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017ECE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017ED88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017EEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017EFAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10017F100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017F2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017F3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017F4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017F750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10017F7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017F9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017FB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10017FCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180190( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_100180324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180B20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100180D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100180EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100181038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100181228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100181324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001813D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100181610(_Unwind_Exception *a1)
{
  int v7 = v5;

  _Unwind_Resume(a1);
}

void sub_100181784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018188C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018197C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_100181A28( void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t *a2, int a3))(std::ifstream *__hidden this)
{
  int v6 = a1 + 2;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)asub_10014C374((uint64_t)&unk_1007F8158, 1) = v8;
  a1[1] = 0LL;
  CFNumberRef v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    char v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 8u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100181B08(_Unwind_Exception *a1)
{
}

void *sub_100181B40(void *a1)
{
  return a1;
}

uint64_t sub_100181B98()
{
  unsigned __int8 v0 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v38, ".bin");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1007F8B78 = v2->__r_.__value_.__l.__cap_;
  xmmword_1007F8B68 = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8B68, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v4 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = std::string::append(&v38, ".bin");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1007F8B90 = v6->__r_.__value_.__l.__cap_;
  xmmword_1007F8B80 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8B80, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  char v8 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  char v10 = std::string::append(&v38, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F8BA8 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F8B98 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8B98, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  double v12 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  double v14 = std::string::append(&v38, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F8BC0 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F8BB0 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8BB0, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  unsigned int v16 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v18 = std::string::append(&v38, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F8BD8 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F8BC8 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8BC8, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  uint64_t v20 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v22 = std::string::append(&v38, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F8BF0 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F8BE0 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8BE0, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  char v24 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  char v26 = std::string::append(&v38, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F8C08 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F8BF8 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8BF8, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  double v28 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v30 = std::string::append(&v38, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F8C20 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F8C10 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8C10, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  __int16 v32 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v34 = std::string::append(&v38, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F8C38 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F8C28 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1007F8C28,  (void *)&_mh_execute_header);
}

void sub_10018217C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001821F0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2BF8[a1]);
}

void *sub_100182204@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2C50[a1]);
}

void *sub_100182218@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2C98[a1]);
}

void *sub_10018222C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B2CB8[a1]);
}

void sub_100182400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001825CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001826F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018277C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  char v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___NIServerObservationSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100182900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100182B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100182C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100182CF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100182D54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100182DB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100182E3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100182F30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100182FE0(id **a1, id *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {

    operator delete(v2);
  }

void *sub_10018301C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B3560[a1]);
}

void *sub_100183030@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B35B8[a1]);
}

void *sub_100183044@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B3600[a1]);
}

void *sub_100183058@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B3620[a1]);
}

void sub_1001832F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018361C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_100183704( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12)
{
  a9.super_class = (Class)&OBJC_CLASS___NIServerAcwgSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100183A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100183F44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::__shared_weak_count *a25, char a26)
{
  sub_100189774((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_100184210( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10018453C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100184A2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100184AD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v2;
    operator delete(v2);
  }

  __int128 v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100184EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_100185360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100185810( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100185BC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100185E9C(_Unwind_Exception *a1)
{
  __int128 v7 = v4;

  _Unwind_Resume(a1);
}

void sub_100186384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1001865C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_100186890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100186AAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_100186F38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  sub_100012390((uint64_t)&a13);
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10018722C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001878C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100187D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100188014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100188038(uint64_t a1)
{
  v10[0] = &off_1007D2460;
  v9[0] = @"numSessions";
  v9[1] = @"rangingDurationSecs";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v10[1] = v2;
  v9[2] = @"rangingReason";
  __int128 v3 = NIAcwgSessionTriggerReasonToString(*(void *)(a1 + 40));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  _OWORD v10[2] = v4;
  void v9[3] = @"suspendReason";
  __int128 v5 = NIAcwgSuspendTriggerReasonToString(*(void *)(a1 + 48));
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  void v10[3] = v6;
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  4LL));

  return v7;
}

void sub_100188140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001884A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1001886BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100188864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100188C50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100188DC0(uint64_t a1)
{
  id WeakRetained = (unsigned __int16 *)objc_loadWeakRetained((id *)(a1 + 40));
  __int128 v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned __int16 *)(a1 + 52) == WeakRetained[32])
    {
      uint64_t v4 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 48);
        int v6 = *(unsigned __int16 *)(a1 + 52);
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)__int128 v15 = v5;
        *(_WORD *)&__n128 v15[4] = 1024;
        *(_DWORD *)&v15[6] = v6;
        LOWORD(v16) = 1024;
        *(_DWORD *)((char *)&v16 + sub_10014C374((uint64_t)&unk_1007F8180, 2) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,AopSensorFusionUpdate: update.type = %u, update.btConnHandle = 0x%04x (%u)",  buf,  0x14u);
      }

      v13.receiver = *(id *)(a1 + 32);
      v13.super_class = (Class)&OBJC_CLASS___NIServerAcwgSession;
      id v7 = objc_msgSendSuper2(&v13, "resourcesManager");
      char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      if (*(_DWORD *)(a1 + 48) == 1)
      {
        __int128 v9 = (os_log_s *)(id)qword_1008000A0;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *((void *)v3 + 7);
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v3 + 42) lockIdentifier]);
          *(_DWORD *)std::string buf = 138412546;
          *(void *)__int128 v15 = v10;
          *(_WORD *)&v15[8] = 2112;
          unsigned int v16 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,Device stationary: Request suspending the session (c:%@, l:%@)",  buf,  0x16u);
        }

        double v12 = (void *)objc_claimAutoreleasedReturnValue([v8 remote]);
        [v12 requestAcwgRangingSessionSuspend:sub_1002C2DC4(*((void *)v3 + 9)) withSuspendTriggerReason:102];
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003959C8();
  }
}

void sub_100188FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100189268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100189454(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64)) {
      BOOL v4 = a1 == a2;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      sub_10018953C((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t v5 = *(void *)(a2 + 24);
      *(_WORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *(_WORD *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      sub_100178F70( (void *)(a1 + 40),  *(char **)(a2 + 40),  *(char **)(a2 + 48),  *(void *)(a2 + 48) - *(void *)(a2 + 40));
    }
  }

  else if (*(_BYTE *)(a1 + 64))
  {
    sub_1001894F4(a1);
  }

  else
  {
    sub_100189678(a1, a2);
    *(_BYTE *)(a1 + 64) = 1;
  }

void sub_1001894F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v2;
      operator delete(v2);
    }

    __int128 v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v3;
      operator delete(v3);
    }

    *(_BYTE *)(a1 + 64) = 0;
  }

char *sub_10018953C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  id v7 = result;
  unint64_t v8 = *((void *)result + 2);
  __int128 v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + sub_10014C374((uint64_t)&unk_1007F8158, 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      _WORD v7[2] = 0LL;
    }

    if ((a4 & 0x8000000000000000LL) != 0) {
      sub_10001E11C();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = sub_10018963C(v7, v11);
    objc_super v13 = (char *)v7[1];
    double v12 = (void **)(v7 + 1);
    __int128 v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int16 v18 = v9;
      __int128 v19 = __src;
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  double v12 = (void **)(result + 8);
  double v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  unsigned int v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    __int128 v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int16 v18 = v9;
    __int128 v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

char *sub_10018963C(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_10001E11C();
  }
  uint64_t result = (char *)sub_100137E38((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t sub_100189678(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_1001896FC( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  uint64_t v4 = *(void *)(a2 + 24);
  __int16 v5 = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = 0LL;
  *(_WORD *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v5;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_1001309C0( (void *)(a1 + 40),  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 48) - *(void *)(a2 + 40));
  return a1;
}

void sub_1001896E0(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1001896FC(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_10018963C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100189758(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100189774(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v2;
      operator delete(v2);
    }

    __int128 v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

void sub_1001897BC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100189840(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100189840(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      __int128 v35 = &v34[8 * (v33 >> 2)];
      std::string v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        id v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)id v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100189B08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100189B54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B2D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100189B64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B2D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100189B84(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100189B94(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  sub_100189BF4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_100012538((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_100189BE0(_Unwind_Exception *a1)
{
}

void *sub_100189BF4(void *a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1007A2120;
  sub_100263A1C(a1 + 3, *a2);
  return a1;
}

void sub_100189C2C(_Unwind_Exception *a1)
{
}

void sub_100189C40(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100189CC4(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100189CC4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000472C0(v5, v33);
      __int128 v35 = &v34[8 * (v33 >> 2)];
      std::string v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        id v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)id v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100189F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100189FD8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_10018A044(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B2D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10018A054(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B2D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10018A074(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10018A084(uint64_t a1)
{
  return a1;
}

void sub_10018A0AC(id *a1)
{
}

void *sub_10018A0D4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B2DB0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018A118(uint64_t a1, void *a2)
{
  *a2 = off_1007B2DB0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018A14C(uint64_t a1)
{
}

void sub_10018A154(id *a1)
{
}

void sub_10018A17C(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(dispatch_queue_s **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018A274;
  block[3] = &unk_1007B2E28;
  uint64_t v6 = *a3;
  void block[4] = v4;
  void block[5] = v6;
  int v10 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_10018A22C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018A268()
{
  return &off_1007B2E48;
}

id sub_10018A274(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "serviceRequestDidUpdateStatus:",  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48));
}

uint64_t sub_10018A284(uint64_t a1)
{
  return a1;
}

void sub_10018A2AC(id *a1)
{
}

void *sub_10018A2D4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B2E68;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018A318(uint64_t a1, void *a2)
{
  *a2 = off_1007B2E68;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018A34C(uint64_t a1)
{
}

void sub_10018A354(id *a1)
{
}

void sub_10018A37C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  int v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(dispatch_queue_s **)(v5 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10018A470;
  void v9[3] = &unk_1007B2EE0;
  void v9[4] = v5;
  int v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_10018A428(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018A464()
{
  return &off_1007B2F00;
}

id sub_10018A470(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _alishaSessionInvalidatedWithReason:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_10018A480(uint64_t a1)
{
  return a1;
}

void sub_10018A4A8(id *a1)
{
}

void *sub_10018A4D0(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B2F20;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018A514(uint64_t a1, void *a2)
{
  *a2 = off_1007B2F20;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018A548(uint64_t a1)
{
}

void sub_10018A550(id *a1)
{
}

void sub_10018A578(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  __int128 v6 = a3[1];
  __int128 v22 = *a3;
  v23[0] = v6;
  *(_OWORD *)((char *)v23 + 1sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(__int128 *)((char *)a3 + 27);
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  sub_10018AA10(&v24, *((const void **)a3 + 6), *((void *)a3 + 7), *((void *)a3 + 7) - *((void *)a3 + 6));
  uint64_t v7 = *(void *)((char *)a3 + 77);
  v27[0] = *((void *)a3 + 9);
  *(void *)((char *)v27 + 5) = v7;
  uint64_t v28 = 0LL;
  __int128 v29 = 0LL;
  uint64_t v30 = 0LL;
  sub_10018AA88( &v28,  *((const void **)a3 + 11),  *((void *)a3 + 12),  (uint64_t)(*((void *)a3 + 12) - *((void *)a3 + 11)) >> 4);
  uint64_t v8 = *(void *)(a1 + 8);
  __int128 v9 = *(dispatch_queue_s **)(v8 + 48);
  block[1] = 3321888768LL;
  __int128 v13 = v22;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10018A800;
  block[3] = &unk_1007B2F98;
  void block[4] = v8;
  v14[0] = v23[0];
  *(_OWORD *)((char *)v14 + 1sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_OWORD *)((char *)v23 + 11);
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v15 = 0LL;
  sub_10018AA10(&v15, v24, (uint64_t)v25, v25 - (_BYTE *)v24);
  v18[0] = v27[0];
  *(void *)((char *)v18 + 5) = *(void *)((char *)v27 + 5);
  std::stringbuf::string_type __p = 0LL;
  int64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  sub_10018AA88(&__p, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 4);
  dispatch_async(v9, block);
  if (__p)
  {
    int64_t v20 = __p;
    operator delete(__p);
  }

  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }

  if (v28)
  {
    __int128 v29 = v28;
    operator delete(v28);
  }

  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }

  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_10018A730( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a35) {
    operator delete(a35);
  }
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10018A7B8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018A7F4()
{
  return &off_1007B2FC8;
}

void sub_10018A800(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 40);
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 1sub_10014C374((uint64_t)&unk_1007F8158, 1) = *(_OWORD *)(a1 + 67);
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  sub_10018AA10(&v7, *(const void **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 96) - *(void *)(a1 + 88));
  uint64_t v4 = *(void *)(a1 + 117);
  v10[0] = *(void *)(a1 + 112);
  *(void *)((char *)v10 + 5) = v4;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  sub_10018AA88( &__p,  *(const void **)(a1 + 128),  *(void *)(a1 + 136),  (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 4);
  [v2 _handleInitiatorRangingBlockUpdate:&v5];
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }

  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }

void sub_10018A8B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void *sub_10018A8E4(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }

  __int128 v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  return a1;
}

void *sub_10018A924(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 67) = *(_OWORD *)(a2 + 67);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  sub_10018AA10( (void *)(a1 + 88),  *(const void **)(a2 + 88),  *(void *)(a2 + 96),  *(void *)(a2 + 96) - *(void *)(a2 + 88));
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 117);
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 117) = v7;
  *(void *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = v6;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  return sub_10018AA88( (void *)(a1 + 128),  *(const void **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
}

void sub_10018A9B0(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_10018A9CC(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }

  __int128 v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }

void *sub_10018AA10(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    id result = sub_1000242D4(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10018AA6C(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10018AA88(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_1001205C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10018AAE4(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10018AB00(uint64_t a1)
{
  return a1;
}

void sub_10018AB28(id *a1)
{
}

void *sub_10018AB50(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B2FE8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018AB94(uint64_t a1, void *a2)
{
  *a2 = off_1007B2FE8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018ABC8(uint64_t a1)
{
}

void sub_10018ABD0(id *a1)
{
}

void sub_10018ABF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  __int128 v4 = (const void *)a2[1];
  uint64_t v14 = v5;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_1001896FC(&v15, v4, a2[2], (a2[2] - (uint64_t)v4) >> 1);
  uint64_t v19 = a2[6];
  __int128 v18 = *((_OWORD *)a2 + 2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_10018AD64;
  block[3] = &unk_1007B3060;
  void block[4] = v6;
  void block[5] = v14;
  int v10 = 0LL;
  uint64_t v11 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  sub_1001896FC(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 1);
  __int128 v12 = v18;
  uint64_t v13 = v19;
  dispatch_async(v7, block);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }

  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }

void sub_10018AD00(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(void *)(v1 - 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10018AD1C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018AD58()
{
  return &off_1007B3090;
}

void sub_10018AD64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_1001896FC( &__p,  *(const void **)(a1 + 48),  *(void *)(a1 + 56),  (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
  __int128 v7 = *(_OWORD *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 88);
  [v2 _handleSessionStats:&v3];
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }

void sub_10018ADD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10018ADF4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  a1[6] = 0LL;
  __int128 v4 = a1 + 6;
  a1[5] = v3;
  a1[7] = 0LL;
  a1[8] = 0LL;
  sub_1001896FC( a1 + 6,  *(const void **)(a2 + 48),  *(void *)(a2 + 56),  (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 1);
  __n128 result = *(__n128 *)(a2 + 72);
  v4[5] = *(void *)(a2 + 88);
  *(__n128 *)(v4 + 3) = result;
  return result;
}

void sub_10018AE4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t sub_10018AE64(uint64_t a1)
{
  return a1;
}

void sub_10018AE8C(id *a1)
{
}

void *sub_10018AEB4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B30B0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018AEF8(uint64_t a1, void *a2)
{
  *a2 = off_1007B30B0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018AF2C(uint64_t a1)
{
}

void sub_10018AF34(id *a1)
{
}

void sub_10018AF5C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  __int128 v4 = *(dispatch_queue_s **)(v3 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10018B00C;
  void v5[3] = &unk_1007B2EE0;
  v5[4] = v3;
  int v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_10018AFC4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018B000()
{
  return &off_1007B3120;
}

id sub_10018B00C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleHealthChanged:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_10018B01C(uint64_t a1)
{
  return a1;
}

void sub_10018B044(id *a1)
{
}

void *sub_10018B06C(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = off_1007B3140;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018B0B0(uint64_t a1, void *a2)
{
  *a2 = off_1007B3140;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018B0E4(uint64_t a1)
{
}

void sub_10018B0EC(id *a1)
{
}

void sub_10018B114(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(dispatch_queue_s **)(v5 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018B1CC;
  block[3] = &unk_1007B2E28;
  void block[4] = v5;
  int v8 = v3;
  void block[5] = v4;
  dispatch_async(v6, block);
}

uint64_t sub_10018B184(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018B1C0()
{
  return &off_1007B31B0;
}

id sub_10018B1CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleTimeoutEvent:*(unsigned int *)(a1 + 48) time:*(double *)(a1 + 40)];
}

void *sub_10018B1E0@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  id result = sub_10018B238(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10018B224(_Unwind_Exception *a1)
{
}

void *sub_10018B238(void *a1, char *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1007B31D0;
  sub_10018B2C4((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_10018B270(_Unwind_Exception *a1)
{
}

void sub_10018B284(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B31D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10018B294(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B31D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10018B2B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10018B2C4(uint64_t a1, char a2)
{
  *(void *)a1 = &off_1007B3220;
  int v4 = sub_1002B53D8(@"AcwgMinRanMultiplierOverride", (id)2);
  if (v4 <= 0) {
    sub_100395A64();
  }
  *(_BYTE *)(a1 + std::istream::~istream(v1, v2 + 8) = v4;
  double v5 = 3.0;
  if ((a2 & 1) == 0)
  {
    double v5 = sub_1002B56A8(@"AcwgStartTimeOffsetSeconds", 0.1);
    if (v5 <= 0.0) {
      sub_100395AB4();
    }
  }

  *(void *)(a1 + 16) = llround(v5 * 1000000.0);
  return a1;
}

_WORD *sub_10018B364@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  int v2 = operator new(2uLL);
  *a1 = v2;
  *int v2 = 256;
  id result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10018B3A0(void *a1@<X8>)
{
  __int16 v17 = 0;
  int v2 = sub_100288340();
  uint64_t v3 = *((void *)v2 + 406);
  int v4 = (std::__shared_weak_count *)*((void *)v2 + 407);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  BOOL v7 = sub_100266E04(v3, &v18, (unsigned __int8 *)&v17, 0);
  if (v4)
  {
    int v8 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (v7)
  {
    BOOL v10 = v18 != 5;
    uint64_t v11 = operator new(1uLL);
    *uint64_t v11 = v10;
    a1[1] = v11 + 1;
    a1[2] = v11 + 1;
    *a1 = v11;
    if (HIBYTE(v17))
    {
      __int128 v12 = v11;
      int v13 = v17;
      uint64_t v14 = operator new(2uLL);
      BOOL v15 = v13 != 5;
      uint64_t v16 = v14 + 2;
      v14[1] = v15;
      *uint64_t v14 = *v12;
      *a1 = v14;
      a1[2] = v14 + 2;
      operator delete(v12);
      a1[1] = v16;
    }
  }

void sub_10018B4B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __int128 v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + std::istream::~istream(v1, v2 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(exception_object);
}

unint64_t sub_10018B4E4(uint64_t a1, unsigned int a2)
{
  v49[0] = 0LL;
  v49[1] = 0LL;
  __int128 v48 = (uint64_t *)v49;
  uint64_t v3 = (std::recursive_mutex *)sub_100288340();
  v52[0] = &off_1007B3290;
  v52[1] = &v48;
  id v53 = v52;
  sub_10028C904(v3, (uint64_t)v52);
  int v4 = v53;
  if (v53 == v52)
  {
    uint64_t v5 = 4LL;
    int v4 = v52;
  }

  else
  {
    if (!v53) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_1000065CC(&v47, "\n");
  unint64_t v6 = v48;
  if (v48 != (uint64_t *)v49)
  {
    do
    {
      unsigned int v7 = *(_DWORD *)((char *)v6 + 26);
      sub_10032AEA4(v7, &v43);
      int v8 = std::string::insert(&v43, 0LL, "    ");
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v10 = std::string::append(&v44, ": ");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v42, HIWORD(v7));
      if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v12 = &v42;
      }
      else {
        __int128 v12 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v42.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v42.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v45, (const std::string::value_type *)v12, size);
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v16 = std::string::append(&v46, "\n");
      __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t cap = v16->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string buf = v17;
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        char v18 = buf;
      }
      else {
        char v18 = *(uint8_t **)buf;
      }
      if (cap >= 0) {
        std::string::size_type v19 = HIBYTE(cap);
      }
      else {
        std::string::size_type v19 = *(void *)&buf[8];
      }
      std::string::append(&v47, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(cap) < 0) {
        operator delete(*(void **)buf);
      }
      int64_t v20 = (uint64_t *)v6[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int64_t v20 = (uint64_t *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          uint64_t v21 = (uint64_t *)v6[2];
          BOOL v22 = *v21 == (void)v6;
          unint64_t v6 = v21;
        }

        while (!v22);
      }

      unint64_t v6 = v21;
    }

    while (v21 != (uint64_t *)v49);
  }

  uint64_t v23 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = &v47;
    if ((v47.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,Preamble use counts: {%s}",  buf,  0xCu);
  }

  uint64_t v25 = 4294965278LL;
  if (a2)
  {
    int v26 = 0;
    unsigned __int8 v27 = 0;
    int v28 = 0;
    unsigned __int8 v29 = 0;
    unsigned int v30 = a2;
    int v31 = 0;
    unsigned __int16 v32 = 0;
    std::string::value_type v33 = 1;
    unsigned int v41 = v30;
    do
    {
      if ((v30 & 1) != 0)
      {
        switch(v33)
        {
          case 9:
            char v34 = 0;
            goto LABEL_49;
          case 10:
            char v34 = 1;
            goto LABEL_49;
          case 11:
            char v34 = 2;
            goto LABEL_49;
          case 12:
            char v34 = 3;
LABEL_49:
            v45.__r_.__value_.__s.__data_[0] = v33;
            *(void *)std::string buf = &v45;
            __int128 v35 = sub_10018BD40(&v48, (unsigned __int8 *)&v45, (uint64_t)&unk_1004242F8, (_BYTE **)buf);
            if (!v31 || *((unsigned __int16 *)v35 + 14) < v32)
            {
              int v31 = 1;
              unsigned __int16 v32 = *((_WORD *)v35 + 14);
              unsigned __int8 v29 = v34;
              int v28 = 1;
              unsigned __int8 v27 = v33;
              int v26 = 1;
            }

            break;
          default:
            break;
        }
      }

      ++v33;
      BOOL v36 = v30 > 1;
      v30 >>= 1;
    }

    while (v36);
    uint64_t v37 = 0LL;
    if (v26 && v28 && v31)
    {
      std::string v38 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v27;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(cap) = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,Sync code bitmask 0x%x. Preferred sync code index %u. Current use count %u.",  buf,  0x14u);
      }

      uint64_t v25 = 0LL;
      unint64_t v39 = (unint64_t)v27 << 32;
      uint64_t v37 = 0x1000000000000LL;
    }

    else
    {
      unint64_t v39 = 0LL;
      uint64_t v25 = 4294965278LL;
    }
  }

  else
  {
    unsigned __int8 v29 = 0;
    uint64_t v37 = 0LL;
    unint64_t v39 = 0LL;
  }

  sub_100034A98((uint64_t)&v48, v49[0]);
  return v25 | ((unint64_t)v29 << 40) | v37 | v39;
}

void sub_10018B98C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *__p, uint64_t a45, int a46, __int16 a47, char a48, char a49, char a50,void *a51)
{
}

uint64_t sub_10018BA88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10018BA90(uint64_t a1, _BYTE *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!*a2)
  {
    uint64_t v3 = sub_100288340();
    unint64_t v4 = sub_10028AE28((uint64_t)v3);
    BOOL v6 = HIWORD(v4) != 1 || (v4 & 0xFF00) == 0;
    BOOL v7 = v6 || v4 == 0LL;
    if (!v7 && v5 != 0LL)
    {
      __int128 v9 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,Applying additional start time offset for Ch5 coex",  v11,  2u);
      }

      v2 += 50000LL;
    }
  }

  return v2;
}

void *sub_10018BB40(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_1007B3290;
  result[1] = v3;
  return result;
}

uint64_t sub_10018BB74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B3290;
  a2[1] = v2;
  return result;
}

void sub_10018BB90(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10018BB98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10018BBD4()
{
}

void sub_10018BBE0(uint64_t ***a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 105))
  {
    unsigned __int8 v6 = *(_BYTE *)(a2 + 104);
    if (!sub_10032AD10(v6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
        sub_100395B08();
      }
      char v5 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/N"
                             "IServerAcwgSession.mm";
        __int16 v8 = 1024;
        int v9 = 186;
        __int16 v10 = 2080;
        __int128 v11 = "operator()";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "#ses-acwg,%s:%d: assertion failure in %s",  buf,  0x1Cu);
      }

      abort();
    }

    uint64_t v3 = *a1;
    *(void *)std::string buf = &v6;
    unint64_t v4 = sub_10018BD40(v3, &v6, (uint64_t)&unk_1004242F8, (_BYTE **)buf);
    ++*((_WORD *)v4 + 14);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
  {
    sub_100395ADC();
  }

uint64_t **sub_10018BD40(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  BOOL v7 = a1 + 1;
  unsigned __int8 v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 26);
        if (v8 >= v10) {
          break;
        }
        unsigned __int8 v6 = *v9;
        BOOL v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned __int8 v6 = v9[1];
      if (!v6)
      {
        BOOL v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    __int128 v11 = operator new(0x20uLL);
    v11[26] = **a4;
    *((_WORD *)v11 + 14) = 0;
    sub_10001E548(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_10018BE00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B3320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10018BE10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B3320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10018BE30(uint64_t a1)
{
  return sub_10018BEE8((uint64_t)&v2, (void *)(a1 + 24));
}

void *sub_10018BE60()
{
  id result = operator new(0x10uLL);
  *id result = &off_1007B3370;
  return result;
}

void sub_10018BE84(uint64_t a1, void *a2)
{
  *a2 = &off_1007B3370;
}

uint64_t sub_10018BEA0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018BEDC()
{
  return &off_1007B33E0;
}

uint64_t sub_10018BEE8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[16];
  if (v3 == a2 + 13)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = a2 + 13;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  char v5 = (void *)a2[9];
  if (v5)
  {
    a2[10] = v5;
    operator delete(v5);
  }

  unsigned __int8 v6 = (void *)a2[4];
  if (v6)
  {
    a2[5] = v6;
    operator delete(v6);
  }

  sub_100012390((uint64_t)(a2 + 2));
  return sub_100012390((uint64_t)a2);
}

void sub_10018BF60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B3400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10018BF70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B3400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10018BF90(uint64_t a1)
{
  return sub_1002C21A0(a1 + 24);
}

uint64_t sub_10018BF9C(uint64_t a1)
{
  return a1;
}

void sub_10018BFC4(id *a1)
{
}

void *sub_10018BFEC(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  *char v2 = off_1007B3450;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018C030(uint64_t a1, void *a2)
{
  *a2 = off_1007B3450;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018C064(uint64_t a1)
{
}

void sub_10018C06C(id *a1)
{
}

void sub_10018C094(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6 = *(id **)(a1 + 8);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6[42] debugOptions]);
  [v6 _ownerDeviceServiceRequestDebugParams:v7];

  unsigned int v8 = *(void **)(a1 + 8);
  if (v8)
  {
    [v8 _aopJobConfigWithTimeouts];
  }

  else
  {
    memset(v24, 0, sizeof(v24));
    char v25 = 0;
  }

  __int128 v22 = *a2;
  LODWORD(v23) = *((_DWORD *)a2 + 4);
  int v9 = (os_log_s *)(id)qword_1008000A0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002BBA18((unsigned __int8 *)&v22, __p);
    unsigned int v10 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
        ? __p
        : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#ses-acwg,RangeEnableCommand: %s",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&double v11 = sub_1001413F4((int *)&v22, 106, (uint64_t)v24, v26, (uint64_t)__p).n128_u64[0];
  __int128 v12 = *(void **)(a1 + 8);
  if (v12)
  {
    objc_msgSend(v12, "_buildAlishaSession:", __p, v11, v22, v23);
    if ((void)buf)
    {
      uint64_t v13 = buf + 8;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1))
      {
        __int128 v15 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = v13;
        *(void *)(a3 + 16) = v14;
        do
          unint64_t v17 = __ldxr(v15);
        while (__stxr(v17 + 1, v15));
        *(_BYTE *)(a3 + 24) = 1;
        do
          unint64_t v18 = __ldaxr(v15);
        while (__stlxr(v18 - 1, v15));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      else
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = v13;
        *(void *)(a3 + 16) = 0LL;
        *(_BYTE *)(a3 + 24) = 1;
      }

      goto LABEL_28;
    }
  }

  else
  {
    __int128 buf = 0uLL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
    sub_100395B34();
  }
  *(_DWORD *)a3 = -1013;
  *(_BYTE *)(a3 + std::istream::~istream(v1, v2 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_28:
  std::string::size_type v19 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    int64_t v20 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

void sub_10018C338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10018C35C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018C398()
{
  return &off_1007B34C0;
}

uint64_t sub_10018C3A4(uint64_t a1)
{
  return a1;
}

void sub_10018C3CC(id *a1)
{
}

void *sub_10018C3F4(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  *char v2 = off_1007B34E0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10018C438(uint64_t a1, void *a2)
{
  *a2 = off_1007B34E0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10018C46C(uint64_t a1)
{
}

void sub_10018C474(id *a1)
{
}

id sub_10018C49C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 48LL));
  return _[*(id *)(a1 + 8) _alishaStateChangedFromState:v4 toNewState:v5];
}

uint64_t sub_10018C4E8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10018C524()
{
  return &off_1007B3550;
}

void sub_10018C530(unint64_t *a1@<X8>)
{
  unint64_t v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_10018C540()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

  ;
}

void sub_10018C560()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D58))
    {
      sub_1000065CC(qword_1007F1D40, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1007F1D40, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D58);
    }
  }

void sub_10018C5DC(_Unwind_Exception *a1)
{
}

void sub_10018C5F4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      unint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100424938;
      v1[1] = unk_100424948;
      v1[2] = xmmword_100424958;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_10018C694(_Unwind_Exception *a1)
{
}

void sub_10018C6AC()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  sub_100320A4C(0LL, &v37);
  unint64_t v1 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v1->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0LL;
  v1->__r_.__value_.__l.__cap_ = 0LL;
  v1->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v3 = std::string::append(&v38, ".bin");
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1007F8C50 = v3->__r_.__value_.__l.__cap_;
  xmmword_1007F8C40 = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8C40, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  uint64_t v5 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v7 = std::string::append(&v38, ".bin");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1007F8C68 = v7->__r_.__value_.__l.__cap_;
  xmmword_1007F8C58 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8C58, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  int v9 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  double v11 = std::string::append(&v38, ".bin");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1007F8C80 = v11->__r_.__value_.__l.__cap_;
  xmmword_1007F8C70 = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8C70, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  uint64_t v13 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v15 = std::string::append(&v38, ".bin");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1007F8C98 = v15->__r_.__value_.__l.__cap_;
  xmmword_1007F8C88 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8C88, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  unint64_t v17 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v19 = std::string::append(&v38, ".bin");
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1007F8CB0 = v19->__r_.__value_.__l.__cap_;
  xmmword_1007F8CA0 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8CA0, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  unint64_t v21 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v23 = std::string::append(&v38, ".bin");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1007F8CC8 = v23->__r_.__value_.__l.__cap_;
  xmmword_1007F8CB8 = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8CB8, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  char v25 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  unsigned __int8 v27 = std::string::append(&v38, ".bin");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1007F8CE0 = v27->__r_.__value_.__l.__cap_;
  xmmword_1007F8CD0 = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8CD0, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  unsigned __int8 v29 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  int v31 = std::string::append(&v38, ".bin");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1007F8CF8 = v31->__r_.__value_.__l.__cap_;
  xmmword_1007F8CE8 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8CE8, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  std::string::value_type v33 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v35 = std::string::append(&v38, ".bin");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1007F8D10 = v35->__r_.__value_.__l.__cap_;
  xmmword_1007F8D00 = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F8D00, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10018CCA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10018CE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018CE74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  __int128 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___PRLowPowerModeMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10018CFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018D048(uint64_t a1)
{
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  id v3 = [v2 isLowPowerModeEnabled];

  __int128 v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if ((_DWORD)v3) {
      uint64_t v5 = "enabled";
    }
    int v8 = 136315138;
    int v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#lpm-mon, Callback. LPM is %s",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v6 + 25) != (_DWORD)v3)
  {
    *(_BYTE *)(v6 + 25) = (_BYTE)v3;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v7) {
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
    }
  }

void sub_10018D154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10018D1E0(uint64_t a1)
{
  __int128 v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, startMonitoring", v4, 2u);
  }

  return [*(id *)(a1 + 32) _initLowPowerModeListner];
}

void sub_10018D2F4(uint64_t a1)
{
  __int128 v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, stopMonitoring", v5, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 removeObserver:WeakRetained name:NSProcessInfoPowerStateDidChangeNotification object:0];
  }
}

void sub_10018D3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018D4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018D54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018D5A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018D6D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018D824(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018D988(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018DAD4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018DC38(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10018DD94(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018DEF8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018E050(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018E1E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v4);
  _Unwind_Resume(a1);
}

void sub_10018E334(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018E480(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018E5D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018E730(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018E88C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018E9DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018EB40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10018EC90(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018EDF4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10018EF68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10018F0DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10018F234(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018F374(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018F4B4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10018F60C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018F764(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018F8C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10018FA58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10018FC10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10018FE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001900E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001903AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10019042C()
{
}

void sub_100190434()
{
}

void sub_10019043C()
{
}

void sub_100190444()
{
}

void sub_10019044C()
{
}

void sub_100190454()
{
}

void sub_10019045C()
{
}

void sub_100190464()
{
}

void sub_1001904F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001907FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1001908AC()
{
}

void sub_1001908C0()
{
}

void sub_1001908D0()
{
}

void sub_1001908E0()
{
}

void sub_1001908F0()
{
}

void sub_100190900()
{
}

void sub_10019090C()
{
}

void sub_100190914()
{
}

void sub_100190AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100190B9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100190CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100190DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100190EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100190F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019109C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef NIAcwgSessionTriggerReasonToString(uint64_t a1)
{
  unint64_t v1 = @"DeviceCloserIntent";
  __int128 v2 = @"DeviceFallbackWalletInteractionIntent";
  id v3 = @"LockSelfInitiated";
  if (a1 != 200) {
    id v3 = @"DeviceCloserIntent";
  }
  if (a1 != 103) {
    __int128 v2 = v3;
  }
  if (a1 == 102) {
    unint64_t v1 = @"DeviceFallbackGeofenceEntryIntent";
  }
  if (a1 == 101) {
    unint64_t v1 = @"DeviceFallbackWristRaiseIntent";
  }
  if (a1 <= 102) {
    return v1;
  }
  else {
    return v2;
  }
}

CFStringRef NIAcwgSuspendTriggerReasonToString(uint64_t a1)
{
  switch(a1)
  {
    case 'e':
      id result = @"DeviceReceivedUnlockNotification";
      break;
    case 'f':
      id result = @"DeviceStationary";
      break;
    case 'g':
      id result = @"DeviceNITimeout";
      break;
    case 'h':
      id result = @"DeviceNIInterrupted";
      break;
    case 'i':
      id result = @"DeviceNIInvalidated";
      break;
    case 'j':
      id result = @"DeviceNIError";
      break;
    case 'k':
      id result = @"DeviceClientPause";
      break;
    default:
      __int128 v2 = @"DeviceFarther";
      if (a1 == 201) {
        __int128 v2 = @"LockUnilaterallySuspended";
      }
      if (a1 == 200) {
        id result = @"LockSelfInitiatedRequest";
      }
      else {
        id result = v2;
      }
      break;
  }

  return result;
}

void sub_1001912B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001913D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019146C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001914A0(void *a1@<X0>, uint64_t a2@<X8>)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  __int128 v26 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v3 = a1;
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v27 count:16];
  uint64_t v20 = a2;
  if (v4)
  {
    uint64_t v5 = *(void *)v22;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(id *)(*((void *)&v21 + 1) + 8LL * (void)i);
        unsigned __int16 v8 = (unsigned __int16)[v7 longLongValue];
        unsigned __int16 v9 = v8;
        __int128 v10 = (char *)__p[1];
        if (__p[1] >= v26)
        {
          __int128 v12 = (char *)__p[0];
          int64_t v13 = (char *)__p[1] - (char *)__p[0];
          uint64_t v14 = v13 >> 1;
          else {
            uint64_t v15 = v26 - (char *)__p[0];
          }
          else {
            uint64_t v16 = v15;
          }
          if (v16)
          {
            unint64_t v17 = (char *)sub_100137E38((uint64_t)&v26, v16);
            __int128 v12 = (char *)__p[0];
            __int128 v10 = (char *)__p[1];
          }

          else
          {
            unint64_t v17 = 0LL;
          }

          __int128 v18 = (unsigned __int16 *)&v17[2 * v14];
          *__int128 v18 = v9;
          double v11 = v18 + 1;
          while (v10 != v12)
          {
            unsigned __int16 v19 = *((_WORD *)v10 - 1);
            v10 -= 2;
            *--__int128 v18 = v19;
          }

          __p[0] = v18;
          __p[1] = v11;
          __int128 v26 = &v17[2 * v16];
          if (v12) {
            operator delete(v12);
          }
        }

        else
        {
          *(_WORD *)__p[1] = v8;
          double v11 = v10 + 2;
        }

        __p[1] = v11;
      }

      id v4 = [v3 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }

    while (v4);
  }

  *(_OWORD *)uint64_t v20 = *(_OWORD *)__p;
  *(void *)(v20 + 16) = v26;
}

void sub_100191684( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001916C8(void *a1@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v28 = 0LL;
  unsigned __int8 v29 = 0LL;
  uint64_t v30 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v3 = a1;
  id v4 = (unsigned __int8 *)[v3 countByEnumeratingWithState:&v24 objects:v31 count:16];
  __int128 v23 = a2;
  if (v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)v25;
    do
    {
      for (uint64_t i = 0LL; i != v4; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(id *)(*((void *)&v24 + 1) + 8LL * (void)i);
        unsigned __int8 v9 = [v8 longLongValue];
        unsigned __int8 v10 = v9;
        if (v5 >= v30)
        {
          double v11 = v28;
          __int128 v12 = (_BYTE *)(v5 - v28);
          uint64_t v13 = v5 - v28 + 1;
          if (v13 < 0) {
            sub_10001E11C();
          }
          unint64_t v14 = v30 - v28;
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v15 = v13;
          }
          if (v15) {
            uint64_t v16 = (char *)operator new(v15);
          }
          else {
            uint64_t v16 = 0LL;
          }
          unint64_t v17 = &v12[(void)v16];
          __int128 v18 = &v12[(void)v16];
          *__int128 v18 = v10;
          unsigned __int16 v19 = v18 + 1;
          if (v5 != v11)
          {
            uint64_t v20 = &v5[~(unint64_t)v11];
            do
            {
              unsigned __int8 v21 = *--v5;
              (v20--)[(void)v16] = v21;
            }

            while (v5 != v11);
            uint64_t v5 = v28;
            unint64_t v17 = v16;
          }

          uint64_t v28 = (unsigned __int8 *)v17;
          unsigned __int8 v29 = v19;
          uint64_t v30 = (unsigned __int8 *)&v16[v15];
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v19;
        }

        else
        {
          *v5++ = v9;
        }

        unsigned __int8 v29 = v5;
      }

      id v4 = (unsigned __int8 *)[v3 countByEnumeratingWithState:&v24 objects:v31 count:16];
    }

    while (v4);
    id v4 = v28;
    __int128 v22 = v30;
  }

  else
  {
    __int128 v22 = 0LL;
    uint64_t v5 = 0LL;
  }

  void *v23 = v4;
  v23[1] = v5;
  _OWORD v23[2] = v22;
}

void sub_1001918C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001919DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100191AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100191D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100191EE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100191FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001921C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019230C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001923E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019255C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100192688( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100192724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100192840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019291C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100192990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001929B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_1001896FC( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_1001309C0((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(_BYTE *)(a1 + 4std::istream::~istream(v1, v2 + 8) = a4;
  *(_DWORD *)(a1 + 5sub_10014C374((uint64_t)&unk_1007F8180, 2) = a5;
  *(_BYTE *)(a1 + 56) = a6;
  return a1;
}

void sub_100192A34(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

id sub_100192A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v5 = a1 + 5889;
  if ((unint64_t)(a1 + 5889) <= 9)
  {
    uint64_t v6 = off_1007B3748[v5];
    id v7 = off_1007B3798[v5];
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:]( &OBJC_CLASS___NILocalization,  "_niLocalizedStringFromFrameworkBundleWithKey:",  off_1007B36F8[v5]));
    [v4 setObject:v8 forKeyedSubscript:NSLocalizedDescriptionKey];

    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:]( &OBJC_CLASS___NILocalization,  "_niLocalizedStringFromFrameworkBundleWithKey:",  v6));
    [v4 setObject:v9 forKeyedSubscript:NSLocalizedFailureReasonErrorKey];

    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:]( &OBJC_CLASS___NILocalization,  "_niLocalizedStringFromFrameworkBundleWithKey:",  v7));
    [v4 setObject:v10 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }

  if (v3) {
    [v4 addEntriesFromDictionary:v3];
  }
  double v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.NearbyInteraction",  a1,  v4));

  return v11;
}

id sub_100192BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v5 = v4;
  switch(a1)
  {
    case -19889LL:
      uint64_t v6 = @"Check the message from the vehicle for format violation";
      id v7 = @"The session was given an invalid or unexpected DCK message.";
      goto LABEL_25;
    case -19888LL:
      uint64_t v6 = @"Try again or check the vehicle";
      id v7 = @"The session was expecting a response from the vehicle and did not receive it for over the allowed time.";
      goto LABEL_25;
    case -19887LL:
      uint64_t v6 = @"Event from bluetooth is corrupted";
      id v7 = @"The bluetooth event provided to the session was of an invalid type or contained invalid values.";
      goto LABEL_25;
    case -19886LL:
      uint64_t v6 = @"Check the logs for specific internal error";
      id v7 = @"The given debug key was invalid or the system was not able to set it. Inspect error message.";
      goto LABEL_25;
    case -19885LL:
      uint64_t v6 = @"Vehicle possibly changed its ranging capabilities";
      id v7 = @"The capabilities specified in a DCK message are not supported. An action should be taken to indicate this to the vehicle.";
      goto LABEL_25;
    case -19884LL:
      uint64_t v6 = @"Try again at a later time";
      id v7 = @"A DCK request to recover a suspended ranging session has been received, but recovery has failed. An action should be taken to indicate this to the vehicle.";
      goto LABEL_25;
    case -19883LL:
      uint64_t v6 = @"Most likely an internal error, try again.";
      id v7 = @"URSKs could not be deleted";
      goto LABEL_25;
    case -19882LL:
      uint64_t v6 = @"Pick one of the supported policies";
      id v7 = @"The priority provided to the session was of an invalid type or contained invalid values";
      goto LABEL_25;
    case -19881LL:
      uint64_t v6 = @"Check the event notification parameters or format";
      id v7 = @"The session was notified of a Car Key event, but the event or its parameters were invalid";
LABEL_25:
      [v4 setObject:v7 forKeyedSubscript:NSLocalizedFailureReasonErrorKey];
      [v5 setObject:v6 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
      break;
    default:
      uint64_t v6 = @"Check Bluetooth settings, status and configuration.";
      id v7 = @"Bluetooth is currently unavailable.";
      switch(a1)
      {
        case -10017LL:
          goto LABEL_25;
        case -10016LL:
          id v7 = @"Failed to produce a Discovery Token.";
          goto LABEL_25;
        case -10015LL:
        case -10009LL:
          goto LABEL_26;
        case -10014LL:
          uint64_t v6 = @"Monitor session suspension callbacks. Try again when suspension ends.";
          id v7 = @"Usage while suspended.";
          goto LABEL_25;
        case -10013LL:
          uint64_t v6 = @"Ensure region predicates are using NIDevicePresencePreset. Use NIRegionPredicate initWithName:devicePresencePreset: initializer. Ensure the smaller region predicate is specified as the inner boundary.";
          id v7 = @"Region predicate verification failed.";
          goto LABEL_25;
        case -10012LL:
          uint64_t v6 = @"Ensure peer discovery token was generated correctly.";
          id v7 = @"Peer discovery token was either invalid or did not contain required information for specialized session.";
          goto LABEL_25;
        case -10011LL:
          uint64_t v6 = @"Try running the session again at a later time. Implement throttling if necessary.";
          id v7 = @"Activation reply not received. The server may be unavailable right now.";
          goto LABEL_25;
        case -10010LL:
          uint64_t v6 = @"Check the errors and run the session again.";
          id v7 = @"Camera Assistance ARSession failed.";
          goto LABEL_25;
        case -10008LL:
          uint64_t v6 = @"No action needed as the session completed successfully";
          id v7 = @"The session completed successfully";
          goto LABEL_25;
        default:
          switch(a1)
          {
            case -19703LL:
              uint64_t v6 = @"Wrong UWB session ID possibly";
              id v7 = @"Indicates URSK corresponding to the UWB Session Identifier is not found.";
              goto LABEL_25;
            case -19702LL:
              uint64_t v6 = @"Rework the message parameters or fix the order";
              id v7 = @"Indicates use of unsupported message or message format.";
              goto LABEL_25;
            case -19701LL:
              uint64_t v6 = @"Try again later";
              id v7 = @"Indicates internal resource unavailability.";
              goto LABEL_25;
            case -19700LL:
              uint64_t v6 = @"Check the logs for specific internal error";
              id v7 = @"No specific reason for failure is indicated.";
              goto LABEL_25;
            default:
              goto LABEL_26;
          }
      }
  }

void *sub_100192E5C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B3810[a1]);
}

void *sub_100192E70@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B3868[a1]);
}

void *sub_100192E84@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B38B0[a1]);
}

void *sub_100192E98@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, off_1007B38D0[a1]);
}

void sub_100193098(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100193200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001933A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100193554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001937DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001939C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unsigned __int8 v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___NIServerSystemConfiguratorSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100193AA0(uint64_t a1)
{
  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)&OBJC_CLASS___NIServerSystemConfiguratorSession;
  id v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remote]);
  [v4 systemDidUpdateState:*(void *)(a1 + 40)];
}

void sub_100193B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100193B90(uint64_t a1)
{
  v8.receiver = *(id *)(a1 + 32);
  v8.super_class = (Class)&OBJC_CLASS___NIServerSystemConfiguratorSession;
  id v2 = objc_msgSendSuper2(&v8, "resourcesManager");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remote]);
  int v5 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v6 = NSStringFromClass(*(Class *)(a1 + 40));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v4 systemDidUpdateResourceUsageLimitExceeded:v5 != 0 forSessionConfigurationTypeWithName:v7];
}

void sub_100193C24(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100193FD0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_10019405C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _process:v6 didTerminate:v5];
}

void sub_1001940C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001940DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](&OBJC_CLASS___RBSProcessStateDescriptor, "descriptor"));
  [v4 setValues:1];
  uint64_t v11 = FBSSceneVisibilityEndowmentNamespace;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  [v4 setEndowmentNamespaces:v5];

  [v3 setStateDescriptor:v4];
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingIdentifier:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingIdentifier:",  *(void *)(a1 + 32)));
  unsigned __int8 v10 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  [v3 setPredicates:v7];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001942A8;
  void v8[3] = &unk_1007B3920;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  [v3 setUpdateHandler:v8];
  objc_destroyWeak(&v9);
}

void sub_10019424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001942A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (id *)(a1 + 32);
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  [WeakRetained _process:v7 didUpdateState:v6];
}

void sub_10019430C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019436C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned __int8 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___PRAppStateMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1001943E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100194444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100194858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_1001948A8(int a1)
{
  else {
    return off_1007B39A0[a1 - 1];
  }
}

void sub_100194C70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
}

id sub_100194CF0(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 endowmentNamespaces]);
    [v3 containsObject:FBSSceneVisibilityEndowmentNamespace];
  }

  return v2;
}

void sub_100194D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100194D78(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  id v5 = *(id *)a2;
  if (v4)
  {
    id v6 = *(void **)a1;
    *(void *)a1 = v5;

    int v7 = *(_DWORD *)(a2 + 8);
  }

  else
  {
    *(void *)a1 = v5;
    int v7 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }

  *(_DWORD *)(a1 + std::istream::~istream(v1, v2 + 8) = v7;
  return a1;
}

id sub_100194DDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) monitoredApp:*(unsigned int *)(a1 + 56) didChangeState:*(unsigned int *)(a1 + 48)];
}

id sub_100194DF0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 4std::istream::~istream(v1, v2 + 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_100194E24(uint64_t a1)
{
}

void sub_100194FAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_100194FDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) monitoredApp:*(unsigned int *)(a1 + 40) didChangeState:1];
}

void sub_10019511C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100195270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100195340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019547C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001955EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001956AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100195740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100195890@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B3E40)[a1]);
}

void *sub_1001958A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B3E98)[a1]);
}

void *sub_1001958B8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B3EE0)[a1]);
}

void *sub_1001958CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B3F00)[a1]);
}

void sub_100195A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100195C60(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100195D70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100196020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001960E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019619C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001961F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100196264( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100196370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001968BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  sub_100012390((uint64_t)&a17);
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100196B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100197414(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  operator delete(v6);
  sub_100012390((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1001977E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100197880(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1007B39C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100197890(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1007B39C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1001978B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1001978C0(uint64_t a1)
{
  return a1;
}

void sub_1001978E8(id *a1)
{
}

void *sub_100197910(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B3A18;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100197954(uint64_t a1, void *a2)
{
  *a2 = off_1007B3A18;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100197988(uint64_t a1)
{
}

void sub_100197990(id *a1)
{
}

void sub_1001979B8(uint64_t a1, void *a2, uint64_t *a3)
{
  id v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v4 = *a3;
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v5 = *(void *)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100197AA8;
  block[3] = &unk_1007B2E28;
  id v6 = *(dispatch_queue_s **)(v5 + 56);
  block[1] = 3221225472LL;
  void block[4] = v5;
  void block[5] = v4;
  dispatch_async(v6, block);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_100197A60(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100197A9C()
{
  return &off_1007B3A78;
}

id sub_100197AA8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "serviceRequestDidUpdateStatus:",  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48));
}

uint64_t sub_100197AB8(uint64_t a1)
{
  return a1;
}

void sub_100197AE0(id *a1)
{
}

void *sub_100197B08(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B3A98;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100197B4C(uint64_t a1, void *a2)
{
  *a2 = off_1007B3A98;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100197B80(uint64_t a1)
{
}

void sub_100197B88(id *a1)
{
}

void sub_100197BB0(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  __int128 v6 = a3[1];
  __int128 v24 = *a3;
  __int128 v25 = v6;
  __int128 v26 = a3[2];
  sub_1001376C0(v27, (uint64_t)(a3 + 3));
  sub_1001317DC(v28, (uint64_t)(a3 + 38));
  sub_100137714(v31, (__n128 *)((char *)a3 + 760));
  memcpy(v35, a3 + 55, sizeof(v35));
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(dispatch_queue_s **)(v7 + 56);
  block[1] = 3321888768LL;
  __int128 v12 = v24;
  __int128 v13 = v25;
  __int128 v14 = v26;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100197EDC;
  block[3] = &unk_1007B3B10;
  void block[4] = v7;
  sub_1001376C0(v15, (uint64_t)v27);
  sub_1001317DC(v16, (uint64_t)v28);
  sub_100137714(v19, v31);
  memcpy(v23, v35, sizeof(v23));
  dispatch_async(v8, block);
  if (v22 && __p)
  {
    unsigned __int8 v21 = __p;
    operator delete(__p);
  }

  if (v18) {
    sub_100034A98((uint64_t)v17, v17[1]);
  }
  sub_100124BFC((uint64_t)v15);
  if (v34 && v32)
  {
    std::string::value_type v33 = v32;
    operator delete(v32);
  }

  if (v30) {
    sub_100034A98((uint64_t)v29, v29[1]);
  }
  sub_100124BFC((uint64_t)v27);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_100197DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (LOBYTE(STACK[0x320])) {
    sub_10038DDB8((uint64_t)va);
  }
  sub_100124BFC(v4);
  if (LOBYTE(STACK[0x948]))
  {
    __int128 v6 = (void *)STACK[0x920];
    if (STACK[0x920])
    {
      STACK[0x928] = (unint64_t)v6;
      operator delete(v6);
    }
  }

  if (LOBYTE(STACK[0x8D0])) {
    sub_100034A98((uint64_t)&STACK[0x850], (void *)STACK[0x858]);
  }
  sub_100124BFC(v3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100197E94(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100197ED0()
{
  return &off_1007B3B40;
}

id sub_100197EDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveNewSolution:a1 + 40];
}

uint64_t sub_100197EEC(uint64_t a1)
{
  return a1;
}

void sub_100197F14(id *a1)
{
}

void *sub_100197F3C(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_1007B3B60;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100197F80(uint64_t a1, void *a2)
{
  *a2 = off_1007B3B60;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100197FB4(uint64_t a1)
{
}

void sub_100197FBC(id *a1)
{
}

void sub_100197FE4(uint64_t a1, void *a2, __int16 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  __int16 v16 = *a3;
  char v18 = 0LL;
  uint64_t v19 = 0LL;
  unint64_t v17 = 0LL;
  sub_1001309C0(&v17, *((const void **)a3 + 1), *((void *)a3 + 2), *((void *)a3 + 2) - *((void *)a3 + 1));
  __int128 v20 = *((_OWORD *)a3 + 2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1001981B0;
  block[3] = &unk_1007B3BD8;
  void block[4] = v6;
  __int16 v11 = v16;
  std::stringbuf::string_type __p = 0LL;
  __int128 v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_1001309C0(&__p, v17, (uint64_t)v18, v18 - (_BYTE *)v17);
  __int128 v15 = v20;
  dispatch_async(v7, block);
  if (__p)
  {
    __int128 v13 = __p;
    operator delete(__p);
  }

  if (v17)
  {
    char v18 = v17;
    operator delete(v17);
  }

  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_100198110(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(void *)(v2 - 64) = v4;
    operator delete(v4);
  }

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100198168(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1001981A4()
{
  return &off_1007B3C08;
}

id sub_1001981B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveRemoteData:a1 + 40];
}

uint64_t sub_1001981C0(uint64_t a1)
{
  return a1;
}

void sub_1001981E8(id *a1)
{
}

void *sub_100198210(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B3C28;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100198254(uint64_t a1, void *a2)
{
  *a2 = off_1007B3C28;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100198288(uint64_t a1)
{
}

void sub_100198290(id *a1)
{
}

void sub_1001982B8(uint64_t a1, void *a2, int *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  int v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(dispatch_queue_s **)(v5 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001983A4;
  void v9[3] = &unk_1007B2EE0;
  void v9[4] = v5;
  int v10 = v4;
  dispatch_async(v6, v9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_10019835C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100198398()
{
  return &off_1007B3C88;
}

id sub_1001983A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _grSessionInvalidatedWithReason:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_1001983B4(uint64_t a1)
{
  return a1;
}

void sub_1001983DC(id *a1)
{
}

void *sub_100198404(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1007B3CA8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100198448(uint64_t a1, void *a2)
{
  *a2 = off_1007B3CA8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10019847C(uint64_t a1)
{
}

void sub_100198484(id *a1)
{
}

void sub_1001984AC(uint64_t a1, void *a2)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v2 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v3) = 0;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "#peer-gr,Unsupported functionality - update rate throttling.",  (uint8_t *)&v3,  2u);
    uint64_t v2 = (os_log_s *)qword_1008000A0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315650;
    int v4 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/NIServerNearbyPeerGrSession.mm";
    __int16 v5 = 1024;
    int v6 = 288;
    __int16 v7 = 2080;
    unint64_t v8 = "operator()";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#peer-gr,%s:%d: assertion failure in %s",  (uint8_t *)&v3,  0x1Cu);
  }

  abort();
}

void sub_100198598(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1001985D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100198614()
{
  return &off_1007B3D18;
}

void sub_100198624(uint64_t a1)
{
  id v1 = (void *)sub_10026F6CC(a1);
  operator delete(v1);
}

uint64_t sub_100198638(uint64_t a1)
{
  return sub_10026F6CC(a1 - 8);
}

void sub_100198640(uint64_t a1)
{
  id v1 = (void *)sub_10026F6CC(a1 - 8);
  operator delete(v1);
}

void sub_100198658()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D58))
    {
      sub_1000065CC(qword_1007F1D40, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1007F1D40, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D58);
    }
  }

void sub_1001986D4(_Unwind_Exception *a1)
{
}

void sub_1001986EC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      id v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100425598;
      v1[1] = unk_1004255A8;
      v1[2] = xmmword_1004255B8;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_10019878C(_Unwind_Exception *a1)
{
}

void sub_1001987A4()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  *(_OWORD *)std::string v45 = xmmword_100425528;
  *(_OWORD *)&v45[16] = unk_100425538;
  sub_10015EABC((uint64_t)&unk_1007F8D18, (int *)v45, 4LL);
  xmmword_1007F8D30 = xmmword_100423CB0;
  unk_1007F8D40 = xmmword_100423CC0;
  qword_1007F8D58 = 0LL;
  unk_1007F8D60 = 0LL;
  qword_1007F8D50 = 0x3FD999999999999ALL;
  unk_1007F8D68 = xmmword_100423CD0;
  dword_1007F8D78 = 5;
  qword_1007F8D80 = 0x4000000000000000LL;
  dword_1007F8D88 = 5;
  byte_1007F8D90 = 0;
  *(void *)&algn_1007F8D91[3] = 0x30000000ALL;
  xmmword_1007F8DA0 = xmmword_100423CE0;
  unk_1007F8DB0 = xmmword_100423CF0;
  xmmword_1007F8DC0 = xmmword_100423D00;
  qword_1007F8DD0 = 0x3FE3333333333333LL;
  dword_1007F8DD8 = 3;
  xmmword_1007F8DE0 = xmmword_100423D10;
  unk_1007F8DF0 = xmmword_100423CF0;
  xmmword_1007F8E00 = xmmword_100423CE0;
  qword_1007F8E10 = 0x3FE3333333333333LL;
  byte_1007F8E18 = 0;
  xmmword_1007F8E20 = xmmword_100423D20;
  unk_1007F8E30 = xmmword_100423D30;
  __asm { FMOV            V0.2D, #1.0 }

  __int128 v44 = _Q0;
  xmmword_1007F8E40 = _Q0;
  qword_1007F8E50 = 0xBFD3333333333333LL;
  xmmword_1007F8E58 = xmmword_100423D40;
  qword_1007F8E68 = 0x3E99999A40000000LL;
  xmmword_1007F8E70 = xmmword_100423CC0;
  qword_1007F8E88 = 0LL;
  unk_1007F8E90 = 0LL;
  qword_1007F8E80 = 0x3FD999999999999ALL;
  xmmword_1007F8E98 = xmmword_100423CD0;
  dword_1007F8EA8 = 5;
  qword_1007F8EB0 = 0x4000000000000000LL;
  dword_1007F8EB8 = 4;
  qword_1007F8EC0 = 0x300000008LL;
  qword_1007F8EC8 = 0xC04E800000000000LL;
  v46.__r_.__value_.__r.__words[0] = 0xC04E800000000000LL;
  sub_10015ED64((uint64_t)&unk_1007F8ED0, (double *)&v46, 1LL);
  xmmword_1007F8EE8 = xmmword_100423D50;
  qword_1007F8EF8 = 0x4024000000000000LL;
  dword_1007F8F00 = 45;
  byte_1007F8F08 = 0;
  byte_1007F8F20 = 0;
  qword_1007F8F28 = 0LL;
  byte_1007F8F30 = 0;
  dword_1007F8F34 = 1;
  byte_1007F8F38 = 1;
  xmmword_1007F8F40 = xmmword_100423D60;
  unk_1007F8F50 = xmmword_100423D70;
  xmmword_1007F8F60 = v44;
  qword_1007F8F70 = 0xC059000000000000LL;
  xmmword_1007F8F78 = xmmword_100423D80;
  qword_1007F8F88 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1007F8F90 = xmmword_100423CC0;
  qword_1007F8FA0 = 0x3FD999999999999ALL;
  qword_1007F8FB0 = 0LL;
  qword_1007F8FA8 = 0LL;
  xmmword_1007F8FB8 = xmmword_100423CD0;
  dword_1007F8FC8 = 5;
  qword_1007F8FD0 = 0x4000000000000000LL;
  dword_1007F8FD8 = 10;
  qword_1007F8FE0 = 0x4034000000000000LL;
  dword_1007F8FE8 = 3;
  xmmword_1007F8FF0 = xmmword_100423D90;
  __cxa_atexit((void (*)(void *))sub_10015CF8C, &unk_1007F8D18, (void *)&_mh_execute_header);
  qword_1007F9008 = 0LL;
  unk_1007F9010 = 0LL;
  qword_1007F9000 = 0LL;
  int v6 = operator new(0x40uLL);
  qword_1007F9008 = (uint64_t)(v6 + 4);
  unk_1007F9010 = v6 + 4;
  _OWORD *v6 = xmmword_100425548;
  v6[1] = unk_100425558;
  _OWORD v6[2] = xmmword_100425568;
  v6[3] = unk_100425578;
  qword_1007F9000 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F9000, (void *)&_mh_execute_header);
  qword_1007F9020 = 0LL;
  unk_1007F9028 = 0LL;
  qword_1007F9018 = 0LL;
  __int16 v7 = operator new(0x10uLL);
  qword_1007F9020 = (uint64_t)(v7 + 1);
  unk_1007F9028 = v7 + 1;
  _OWORD *v7 = xmmword_100425588;
  qword_1007F9018 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100028CC4, &qword_1007F9018, (void *)&_mh_execute_header);
  sub_100320A4C(0LL, &v46);
  unint64_t v8 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  int v10 = std::string::append((std::string *)v45, ".bin");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1007F9040 = v10->__r_.__value_.__l.__cap_;
  xmmword_1007F9030 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9030, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v46);
  __int128 v12 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append((std::string *)v45, ".bin");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1007F9058 = v14->__r_.__value_.__l.__cap_;
  xmmword_1007F9048 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9048, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v46);
  __int16 v16 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  char v18 = std::string::append((std::string *)v45, ".bin");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1007F9070 = v18->__r_.__value_.__l.__cap_;
  xmmword_1007F9060 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9060, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v46);
  __int128 v20 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  char v22 = std::string::append((std::string *)v45, ".bin");
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1007F9088 = v22->__r_.__value_.__l.__cap_;
  xmmword_1007F9078 = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9078, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v46);
  __int128 v24 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v26 = std::string::append((std::string *)v45, ".bin");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1007F90A0 = v26->__r_.__value_.__l.__cap_;
  xmmword_1007F9090 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9090, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v46);
  uint64_t v28 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  char v30 = std::string::append((std::string *)v45, ".bin");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1007F90B8 = v30->__r_.__value_.__l.__cap_;
  xmmword_1007F90A8 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F90A8, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v46);
  __int128 v32 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  char v34 = std::string::append((std::string *)v45, ".bin");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1007F90D0 = v34->__r_.__value_.__l.__cap_;
  xmmword_1007F90C0 = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F90C0, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v46);
  __int128 v36 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v36->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  std::string v38 = std::string::append((std::string *)v45, ".bin");
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_1007F90E8 = v38->__r_.__value_.__l.__cap_;
  xmmword_1007F90D8 = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F90D8, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v46);
  uint64_t v40 = std::string::insert(&v46, 0LL, "reverseLUT_A");
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v45 = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  std::string v42 = std::string::append((std::string *)v45, ".bin");
  __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_1007F9100 = v42->__r_.__value_.__l.__cap_;
  xmmword_1007F90F0 = v43;
  v42->__r_.__value_.__l.__size_ = 0LL;
  v42->__r_.__value_.__l.__cap_ = 0LL;
  v42->__r_.__value_.__r.__words[0] = 0LL;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F90F0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001990C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100199158@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B4228)[a1]);
}

void *sub_10019916C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B4280)[a1]);
}

void *sub_100199180@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B42C8)[a1]);
}

void *sub_100199194@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1000065CC(a2, (&off_1007B42E8)[a1]);
}

void sub_100199398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

void sub_100199424(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NIFindingConfiguration localDeviceConfiguration]( &OBJC_CLASS___NIFindingConfiguration,  "localDeviceConfiguration"));
  uint64_t v2 = (void *)qword_1007F91E0;
  qword_1007F91E0 = v1;

  BOOL v3 = +[NIPlatformInfo supportsSyntheticAperture](&OBJC_CLASS___NIPlatformInfo, "supportsSyntheticAperture");
  [(id)qword_1007F91E0 setCameraAssistanceEnabled:v3];
}

void sub_100199500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001995C4(id a1)
{
  id v1 = -[NIServerFindableDeviceProxySessionManager _initInternal]( objc_alloc(&OBJC_CLASS___NIServerFindableDeviceProxySessionManager),  "_initInternal");
  uint64_t v2 = (void *)qword_1007F91F0;
  qword_1007F91F0 = (uint64_t)v1;
}

void sub_100199694(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrepareTokenCache]);
  if (v1 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
    sub_100395FC4();
  }
}

void sub_100199CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, id a34)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100199D9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100199DAC(uint64_t a1)
{
}

void sub_100199DB4(void *a1, void *a2)
{
  id v9 = a2;
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([v9 data]);
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NIDiscoveryToken deserialize:](&OBJC_CLASS___NIDiscoveryToken, "deserialize:", v3));

  if ([v4 count])
  {
    __int16 v5 = (void *)a1[4];
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 allObjects]);
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v9 account]);
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 _internalSetFindableDiscoveryTokens:v6 tokenGroup:v7 logInEventBuffer:0]);

    if (v8) {
      objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), v8);
    }
    ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
    *(_DWORD *)(*(void *)(a1[7] + 8) + 24) += [v4 count];
  }
}

void sub_100199EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019A51C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, void *a40)
{
  _Block_object_dispose((const void *)(v42 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_10019A65C(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_10019A6A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10019A6BC(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_10019A708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10019A71C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:v3]);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_100396230();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v4);
  }

  __int16 v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:v3]);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR)) {
      sub_1003961D0();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v5);
  }

  int v6 = *(void **)(a1 + 32);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NIServerFindingPeerTracking peerTrackingTerminalState]( &OBJC_CLASS___NIServerFindingPeerTracking,  "peerTrackingTerminalState"));
  [v6 _updatePeerTrackingForToken:v3 newTrackingState:v7];
}

void sub_10019A838(_Unwind_Exception *a1)
{
  __int16 v5 = v3;

  _Unwind_Resume(a1);
}

void sub_10019AA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019AA3C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrepareTokenCache]);
  id v6 = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v4 = v2;
    __int16 v5 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }

  else
  {
    __int16 v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _internalSetFindableDiscoveryTokens:*(void *)(a1 + 40) tokenGroup:*(void *)(a1 + 48) logInEventBuffer:1]);
    if (v5) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v5);
    }
  }
}

void sub_10019AC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019AC90(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrepareTokenCache]);
  id v10 = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v4 = v2;
    id v5 = *(id *)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKey:*(void *)(a1 + 40)]);
    id v5 = [v6 mutableCopy];

    if (v5) {
      [v5 addObjectsFromArray:*(void *)(a1 + 48)];
    }
    else {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", *(void *)(a1 + 48)));
    }
    __int16 v7 = *(void **)(a1 + 32);
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [v7 _internalSetFindableDiscoveryTokens:v8 tokenGroup:*(void *)(a1 + 40) logInEventBuffer:1]);

    if (v9) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v9);
    }
  }
}

void sub_10019AD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019AF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019AF84(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrepareTokenCache]);
  id v12 = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v4 = v2;
    id v5 = *(id *)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "objectForKey:", *(void *)(a1 + 40), 0));
    id v7 = [v6 mutableCopy];

    unint64_t v8 = *(void **)(a1 + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10019B0D4;
    void v13[3] = &unk_1007B4008;
    id v5 = v7;
    id v14 = v5;
    [v8 enumerateObjectsUsingBlock:v13];
    id v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( [v9 _internalSetFindableDiscoveryTokens:v10 tokenGroup:*(void *)(a1 + 40) logInEventBuffer:1]);

    if (v11) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v11);
    }
  }
}

void sub_10019B0A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10019B0D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeObject:a2];
}

id sub_10019B1B0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) setDebugParameters:*(void *)(a1 + 40)];
}

void sub_10019B288(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  [*(id *)(a1 + 32) _activateProvidersLazy];
  uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NIServerFindingAdvertisement advertisementFromByteRepresentation:]( &OBJC_CLASS___NIServerFindingAdvertisement,  "advertisementFromByteRepresentation:",  *(void *)(v1 + 8)));
  unsigned int v2 = [*(id *)v1 _isTokenFindable:*(void *)(a1 + 48)];
  uint64_t v3 = (void *)v21;
  unsigned int v4 = [*(id *)(a1 + 32) _shouldInteract];
  unsigned int v5 = v4;
  if (v21) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v2) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v8 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 138478851;
    uint64_t v32 = v9;
    __int16 v33 = 2113;
    uint64_t v34 = v21;
    __int16 v35 = 1024;
    unsigned int v36 = v2;
    __int16 v37 = 1024;
    unsigned int v38 = v5;
    __int16 v39 = 1024;
    unsigned int v40 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#find-proxy,processClientDiscoveryEvent. Token: %{private}@. Adv: %{private}@. Token findable: %d. Should interact : %d. Proceed: %d",  buf,  0x28u);
  }

  if (v7)
  {
    id v10 =  [*(id *)(*(void *)(a1 + 32) + 32) processAdvertisement:v21 receivedOOBFromPeer:*(void *)(a1 + 48)];
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) advertisingPeers]);
    id v20 = (id)objc_claimAutoreleasedReturnValue([v11 objectForKey:*(void *)(a1 + 48)]);

    id v12 = v20;
    if (v20)
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v20 byteRepresentation]);
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      id v14 = *(id *)(*(void *)(a1 + 32) + 72LL);
      id v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v27;
        do
        {
          for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v16) {
              objc_enumerationMutation(v14);
            }
            uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
            if (v18)
            {
              __int128 v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v26 + 1) + 8 * (void)i) getQueueForInputingData]);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_10019B5BC;
              block[3] = &unk_1007B14B8;
              void block[4] = v18;
              id v24 = v13;
              id v25 = *(id *)(a1 + 48);
              dispatch_async(v19, block);
            }
          }

          id v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }

        while (v15);
      }

      id v12 = v20;
    }

    uint64_t v3 = (void *)v21;
  }
}

void sub_10019B560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10019B5BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) didGenerateShareableConfigurationData:*(void *)(a1 + 40) forToken:*(void *)(a1 + 48)];
}

void sub_10019B648(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _isTokenFindable:*(void *)(a1 + 40)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldInteract];
  unsigned int v4 = (os_log_s *)qword_1008000A0;
  if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v9 = 138478595;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    unsigned int v12 = v2;
    __int16 v13 = 1024;
    unsigned int v14 = v3;
    __int16 v15 = 1024;
    int v16 = v2 & v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#find-proxy,processClientRemovePeerEvent. Token: %{private}@. Token findable: %d. Should interact: %d. Proceed: %d",  (uint8_t *)&v9,  0x1Eu);
  }

  if ((v2 & v3) != 0)
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _updatePeerTrackingForToken:*(void *)(a1 + 40) newAdvertisingState:2];
    id v7 = [*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _updatePeerTrackingForToken:*(void *)(a1 + 40) newRangingState:4];
    id v8 =  [*(id *)(*(void *)(a1 + 32) + 32) processLostEventReceivedOOBFromPeer:*(void *)(a1 + 40)];
  }

void sub_10019B8F0(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) objectForKey:a1[5]]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 allObjects]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10019B948( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10019BAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019BAE0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)a1[5];
  unsigned int v4 = *(void **)(v2 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _WORD v7[2] = sub_10019BB70;
  void v7[3] = &unk_1007B4030;
  void v7[4] = v2;
  id v5 = v3;
  uint64_t v6 = a1[6];
  id v8 = v5;
  uint64_t v9 = v6;
  [v4 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_10019BB5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_10019BB70(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 tellClientAboutPeer])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) objectForKey:a1[5]]);
    unsigned int v7 = [v6 containsObject:v8];

    if (v7) {
      [*(id *)(*(void *)(a1[6] + 8) + 40) addObject:v8];
    }
  }
}

void sub_10019BBFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019BC9C(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    && (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 72), "containsObject:") & 1) == 0)
  {
    uint64_t v2 = (os_log_s *)qword_1008000A0;
    if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,addObserver", buf, 2u);
    }

    [*(id *)(*(void *)(a1 + 40) + 72) addObject:*(void *)(a1 + 32)];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) advertisingPeers]);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _DWORD v4[2] = sub_10019BDA4;
    v4[3] = &unk_1007B4080;
    id v5 = *(id *)(a1 + 32);
    [v3 enumerateKeysAndObjectsUsingBlock:v4];
  }

void sub_10019BD8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10019BDA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getQueueForInputingData]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019BE84;
  block[3] = &unk_1007B14B8;
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void sub_10019BE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019BE84(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) byteRepresentation]);
  objc_msgSend(v1, "didGenerateShareableConfigurationData:forToken:");
}

void sub_10019BECC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void *sub_10019BF5C(void *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    id result = objc_msgSend(*(id *)(result[5] + 72), "containsObject:");
    if ((_DWORD)result)
    {
      id v2 = (os_log_s *)qword_1008000A0;
      if (os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,removeObserver", v3, 2u);
      }

      return [*(id *)(v1[5] + 72) removeObject:v1[4]];
    }
  }

  return result;
}

void sub_10019C09C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrintableState]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10019C984( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10019CA6C(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"    %@ (%d tokens)",  v12,  [v5 count]));
  [v6 addObject:v7];

  id v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
  id v10 = sub_10027801C(v9, 10, 2);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  [v8 addObjectsFromArray:v11];
}

void sub_10019CB44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10019CB80(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 descriptionInternal]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"    %@: %@", v6, v7));
  [v5 addObject:v8];
}

void sub_10019CC24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10019CC5C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 descriptionInternal]);
  [v9 doubleValue];
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"    %@: %0.1f s",  v6,  v7));
  [v5 addObject:v8];
}

void sub_10019CCF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10019CE38(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
  double v5 = sub_1002777EC(@"FindingBTDiscoveryTimeoutSecondsOverride", 120.0);
  id v6 = objc_alloc(&OBJC_CLASS___NIServerFindingDiscoveryProvider);
  sub_1000065CC(__p, "FindableDeviceProxy");
  uint64_t v7 = -[NIServerFindingDiscoveryProvider initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:]( v6,  "initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:",  __p,  0LL,  1LL,  1LL,  20LL,  v5,  0.0,  *(void *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 32);
  *(void *)(v8 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v7;

  if (v54 < 0) {
    operator delete(__p[0]);
  }
  id v10 = objc_alloc(&OBJC_CLASS___NIServerFindingRangingProvider);
  sub_1000065CC(__p, "FindableDeviceProxy");
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 8);
  id v13 = sub_100288340();
  unsigned int v14 = (std::__shared_weak_count *)v13[21];
  uint64_t v51 = v13[20];
  uint64_t v52 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  __int128 v17 = -[NIServerFindingRangingProvider initWithIdentifier:isFinder:consumer:queue:pbLogger:]( v10,  "initWithIdentifier:isFinder:consumer:queue:pbLogger:",  __p,  0LL,  v11,  v12,  &v51);
  uint64_t v18 = *(void *)(a1 + 32);
  __int128 v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;

  id v20 = v52;
  if (v52)
  {
    uint64_t v21 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v54 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v23 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
  uint64_t v24 = *(void *)(a1 + 32);
  id v25 = *(void **)(v24 + 72);
  *(void *)(v24 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = v23;

  __int128 v26 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v27 = *(void *)(a1 + 32);
  __int128 v28 = *(void **)(v27 + 48);
  *(void *)(v27 + 4std::istream::~istream(v1, v2 + 8) = v26;

  __int128 v29 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v30 = *(void *)(a1 + 32);
  __int128 v31 = *(void **)(v30 + 56);
  *(void *)(v30 + 56) = v29;

  uint64_t v32 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void **)(v33 + 64);
  *(void *)(v33 + 64) = v32;

  __int16 v35 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v36 = *(void *)(a1 + 32);
  __int16 v37 = *(void **)(v36 + 80);
  *(void *)(v36 + 80) = v35;

  unsigned int v38 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v39 = *(void *)(a1 + 32);
  unsigned int v40 = *(void **)(v39 + 88);
  *(void *)(v39 + 8std::istream::~istream(v1, v2 + 8) = v38;

  uint64_t v41 = *(void *)(a1 + 32);
  uint64_t v42 = *(void **)(v41 + 104);
  *(void *)(v41 + 104) = 0LL;

  uint64_t v43 = *(void *)(a1 + 32);
  __int128 v44 = *(void **)(v43 + 112);
  *(void *)(v43 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;

  *(_DWORD *)(*(void *)(a1 + 32) + 12sub_1001647CC((void **)va, 0LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 124LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 125LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 144LL) = 0;
  sub_10019D1B8((void *)(*(void *)(a1 + 32) + 152LL), 0xFuLL);
  sub_10019D1B8((void *)(*(void *)(a1 + 32) + 200LL), 0x32uLL);
  sub_10019D1B8((void *)(*(void *)(a1 + 32) + 248LL), 0xAuLL);
  if (+[NIPlatformInfo isInternalBuild](&OBJC_CLASS___NIPlatformInfo, "isInternalBuild")
    || (std::string v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults")),
        unsigned int v46 = [v45 BOOLForKey:@"EnableStateDump"],
        v45,
        v46))
  {
    std::string v47 = *(void **)(a1 + 32);
    uint64_t v48 = v47[1];
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472LL;
    double v49[2] = sub_10019D25C;
    v49[3] = &unk_1007B1E00;
    uint64_t v50 = v47;
    os_state_add_handler(v48, v49);
  }

void sub_10019D17C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  _Unwind_Resume(a1);
}

void sub_10019D1B8(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1001A2A08(a1, v5);
  }

  else if (!v4)
  {
    unint64_t v6 = a1[4];
    uint64_t v7 = a1[1];
    uint64_t v8 = (void *)(v7 + 8 * (v6 / 0xAA));
    if (a1[2] == v7) {
      unint64_t v9 = 0LL;
    }
    else {
      unint64_t v9 = *v8 + 24 * (v6 % 0xAA);
    }
    id v10 = v8;
    unint64_t v11 = v9;
    sub_1001A3338(&v10, a2);
    sub_1001A2B74((uint64_t)a1, v10, v11);
  }

char *sub_10019D25C(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _internalPrintableState]);
  uint64_t v2 = sub_100024190(@"Findable Device", v1);

  return v2;
}

void sub_10019D2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019D4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019D5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019DA78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019DB78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019DC78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019DD78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019DE84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019E858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_10019E9E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
}

void sub_10019EA44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10019F154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_10019F384( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10019F5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019F6E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10019F6F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

void sub_10019F7AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10019F7D0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 containsObject:*(void *)(a1 + 32)];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10019F8EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019F9A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019FBFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_10019FC6C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unint64_t v3 = (os_log_s *)(id)qword_1008000A0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100277A70((uint64_t)"KeepAlive", 0, *(void **)(a1 + 32), @"Finished");
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v8 = 138412290;
      unint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-proxy,%@", (uint8_t *)&v8, 0xCu);
    }

    [WeakRetained[10] removeObjectForKey:*(void *)(a1 + 32)];
    [WeakRetained[11] removeObjectForKey:*(void *)(a1 + 32)];
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[4] stopAdvertisingToPeer:*(void *)(a1 + 32)]);
    if (v6 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_100396524();
    }
    [WeakRetained _updatePeerTrackingForToken:*(void *)(a1 + 32) newAdvertisingState:2];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[5] stopRangingWithPeer:*(void *)(a1 + 32)]);
    if (v7 && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_FAULT)) {
      sub_1003964C4();
    }
    [WeakRetained _updatePeerTrackingForToken:*(void *)(a1 + 32) newRangingState:4];
  }
}

void sub_10019FE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A00F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A03C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A0400(uint64_t a1, void *a2)
{
  id v3 = a2;
  WORD2(v1std::istream::~istream(v1, v2 + 8) = 0;
  LODWORD(v1std::istream::~istream(v1, v2 + 8) = 0;
  id v4 = -[NIServerFindingAdvertisement initForFinder:address:]( objc_alloc(&OBJC_CLASS___NIServerFindingAdvertisement),  "initForFinder:address:",  1LL,  &v18);
  [v4 setCanRange:1];
  unint64_t v5 = *(void **)(*(void *)(a1 + 32) + 40LL);
  if (v5)
  {
    [v5 supportedTechnologies];
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  BOOL v6 = sub_100278484(&v18, 1);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v7 = operator new(4uLL);
  if (v6) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  std::stringbuf::string_type __p = v7;
  _DWORD *v7 = v8;
  uint64_t v22 = v7 + 1;
  uint64_t v23 = v7 + 1;
  [v4 setSupportedTechnologies:&__p];
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }

  [v4 setProtocolVersion:1];
  unint64_t v9 = sub_100288340();
  id v10 = (void *)*((void *)v9 + 406);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 407);
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  sub_100267408((uint64_t)v10);
  [v4 setNarrowBandMask:sub_10032B934((unsigned __int8 **)v17)];
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }

  if (v11)
  {
    unsigned int v14 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  [*(id *)(a1 + 32) _updatePeerTrackingForToken:v3 newDiscoveryState:2];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 5LL));
  [*(id *)(a1 + 32) _updatePeerTrackingForToken:v3 newNbUwbAcquisitionChannelIdx:v16];
  [*(id *)(a1 + 32) _advertiseAndRangeWithPeer:v3 peerAdvertisement:v4];
}

void sub_1001A05D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1001A07DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1001A0808(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:v3]);
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v4;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)
    && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_100396704();
  }

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:v3]);
  uint64_t v9 = *(void *)(*(void *)v5 + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)v5 + 8LL) + 40LL)
    && os_log_type_enabled((os_log_t)qword_1008000A0, OS_LOG_TYPE_ERROR))
  {
    sub_1003966A4();
  }

  unint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NIServerFindingPeerTracking peerTrackingTerminalState]( &OBJC_CLASS___NIServerFindingPeerTracking,  "peerTrackingTerminalState"));
  [v11 _updatePeerTrackingForToken:v3 newTrackingState:v12];
}

void sub_1001A0930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A0B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A0CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A0E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

id sub_1001A10F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) didGenerateShareableConfigurationData:*(void *)(a1 + 40) forToken:*(void *)(a1 + 48)];
}

void sub_1001A11E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A134C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A14D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A16E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1EF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001A2080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A220C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A22BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A2514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A2554(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 updatesEngine]);
  [v4 acceptSelfLocationData:a1 + 32];
}

void sub_1001A2594( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001A2624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_1001A2640(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 updatesEngine]);
  +[NIGnssExtensionsManager getGnssSatelliteDataVecFromDict:]( &OBJC_CLASS___NIGnssExtensionsManager,  "getGnssSatelliteDataVecFromDict:",  *(void *)(a1 + 32));
  [v4 acceptGnssSatelliteData:__p];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1001A26A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001A27C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A2864( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001A2884(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 updatesEngine]);
  [v4 acceptVisionInput:*(void *)(a1 + 32)];
}

void sub_1001A28C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001A2A08(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  }
  unint64_t v7 = a1[5] + a1[4];
  unint64_t v8 = v6 - v7;
  BOOL v9 = a2 > v8;
  unint64_t v10 = a2 - v8;
  if (v9)
  {
    sub_1001A2D18(a1, v10);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v7 = a1[4] + a1[5];
  }

  unint64_t v11 = (void *)(v4 + 8 * (v7 / 0xAA));
  if (v5 == v4) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = (char *)(*v11 + 24 * (v7 % 0xAA));
  }
  uint64_t v19 = (void *)(v4 + 8 * (v7 / 0xAA));
  uint64_t v20 = v12;
  sub_1001A3338(&v19, a2);
  uint64_t v13 = (uint64_t)v20;
  if (v12 != v20)
  {
    unsigned int v14 = v19;
    do
    {
      if (v11 == v14) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = *v11 + 4080LL;
      }
      if (v12 == (char *)v15)
      {
        __int128 v17 = v12;
      }

      else
      {
        size_t v16 = 24 * ((v15 - (uint64_t)v12 - 24) / 0x18uLL) + 24;
        bzero(v12, v16);
        __int128 v17 = &v12[v16];
      }

      a1[5] -= 0x5555555555555555LL * ((v17 - v12) >> 3);
      if (v11 == v14) {
        break;
      }
      uint64_t v18 = (char *)v11[1];
      ++v11;
      uint64_t v12 = v18;
    }

    while (v18 != (char *)v13);
  }

uint64_t sub_1001A2B74(uint64_t result, void *a2, uint64_t a3)
{
  id v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  unint64_t v8 = (void *)(v6 + 8 * (v5 / 0xAA));
  if (v7 == v6) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *v8 + 24 * (v5 % 0xAA);
  }
  if (v9 != a3)
  {
    uint64_t v10 = (a3 - *a2) >> 3;
    uint64_t v11 = 170 * (v8 - a2) - 0x5555555555555555LL * ((uint64_t)(v9 - *v8) >> 3) + 0x5555555555555555LL * v10;
    if (v11 >= 1)
    {
      uint64_t v12 = (void *)(v6 + 8 * (v4 / 0xAA));
      if (v7 == v6) {
        unint64_t v13 = 0LL;
      }
      else {
        unint64_t v13 = *v12 + 24 * (v4 % 0xAA);
      }
      if (a3 == v13) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = 170 * (a2 - v12) - 0x5555555555555555LL * v10 + 0x5555555555555555LL * ((uint64_t)(v13 - *v12) >> 3);
      }
      uint64_t v18 = v12;
      unint64_t v19 = v13;
      sub_1001A3338(&v18, v14);
      unint64_t v15 = v19;
      if (v19 != v9)
      {
        size_t v16 = v18;
        do
        {
          v15 += 24LL;
          if (v15 - *v16 == 4080)
          {
            unint64_t v17 = v16[1];
            ++v16;
            unint64_t v15 = v17;
          }
        }

        while (v15 != v9);
      }

      v3[5] -= v11;
      do
        id result = sub_1001A32C4(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

void sub_1001A2D18(void *a1, unint64_t a2)
{
  id v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      size_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int128 v29 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v28);
          __int128 v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          id v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            id v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            __int16 v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)__int16 v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          __int16 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            id v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          id v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            id v3 = (char *)a1[1];
          }

          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          id v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)id v3 = v18;
      id v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_10011C958(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_10011CA6C((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 169LL;
          }
          else {
            uint64_t v64 = 170LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        std::stringbuf v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          std::locale v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              size_t v82 = (uint64_t *)a1[1];
              std::stringbuf v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                std::stringbuf v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              __int16 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                std::stringbuf v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                std::stringbuf v66 = (char *)a1[1];
              }

              unsigned int v77 = &v66[-8 * (v74 >> 1)];
              std::stringbuf v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)std::stringbuf v66 = v69;
          std::stringbuf v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        unint64_t v15 = (char *)sub_1000472C0((uint64_t)(a1 + 3), v13);
      }
      else {
        unint64_t v15 = 0LL;
      }
      uint64_t v38 = -170LL * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0xFF0uLL);
        sub_10011CB88(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        unsigned int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000472C0((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              unsigned int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                unsigned int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                char v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)char v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                unsigned int v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              std::string v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                unsigned int v40 = (char *)__p[1];
              }

              std::string v47 = &v40[-8 * (v44 >> 1)];
              unsigned int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)unsigned int v40 = *v39;
          unsigned int v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      id v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_10011CC9C((uint64_t)__p, v57);
      }

      uint64_t v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + sub_10014C374((uint64_t)&unk_1007F8158, 1) = v61;
      __int128 v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_1001A3250( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001A32C4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void *sub_1001A3338(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555LL * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      unint64_t v6 = &v2[-(v5 / 0xAA)];
      *id result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }

    else
    {
      *id result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }

    result[1] = v4;
  }

  return result;
}

uint64_t sub_1001A33D4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }

  *unint64_t v4 = 0LL;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85LL;
  }

  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 170LL;
  }

  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    unint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_100030AF0((uint64_t)a1);
}

void sub_1001A3518( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1001A3528(uint64_t a1@<X8>)
{
  *(void *)(v1 - std::istream::~istream(v1, v2 + 8) = a1;
}

void sub_1001A353C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D58))
    {
      sub_1000065CC(qword_1007F1D40, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1007F1D40, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D58);
    }
  }

void sub_1001A35B8(_Unwind_Exception *a1)
{
}

void sub_1001A35D0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F1D78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1007F1D78))
    {
      qword_1007F1D60 = 0LL;
      qword_1007F1D68 = 0LL;
      qword_1007F1D70 = 0LL;
      uint64_t v1 = operator new(0x30uLL);
      qword_1007F1D68 = (uint64_t)(v1 + 3);
      qword_1007F1D70 = (uint64_t)(v1 + 3);
      _OWORD *v1 = xmmword_100425BB0;
      v1[1] = unk_100425BC0;
      v1[2] = xmmword_100425BD0;
      qword_1007F1D60 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1000040CC, &qword_1007F1D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1007F1D78);
    }
  }

void sub_1001A3670(_Unwind_Exception *a1)
{
}

void sub_1001A3688()
{
  unsigned __int8 v0 = objc_autoreleasePoolPush();
  sub_100320A4C(0LL, &v37);
  uint64_t v1 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v1->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0LL;
  v1->__r_.__value_.__l.__cap_ = 0LL;
  v1->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v3 = std::string::append(&v38, ".bin");
  __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1007F9118 = v3->__r_.__value_.__l.__cap_;
  xmmword_1007F9108 = v4;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9108, (void *)&_mh_execute_header);
  sub_100320A4C(1LL, &v37);
  unint64_t v5 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v7 = std::string::append(&v38, ".bin");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1007F9130 = v7->__r_.__value_.__l.__cap_;
  xmmword_1007F9120 = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9120, (void *)&_mh_execute_header);
  sub_100320A4C(2LL, &v37);
  unint64_t v9 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v11 = std::string::append(&v38, ".bin");
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1007F9148 = v11->__r_.__value_.__l.__cap_;
  xmmword_1007F9138 = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9138, (void *)&_mh_execute_header);
  sub_100320A4C(3LL, &v37);
  uint64_t v13 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v15 = std::string::append(&v38, ".bin");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1007F9160 = v15->__r_.__value_.__l.__cap_;
  xmmword_1007F9150 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9150, (void *)&_mh_execute_header);
  sub_100320A4C(4LL, &v37);
  unint64_t v17 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v19 = std::string::append(&v38, ".bin");
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1007F9178 = v19->__r_.__value_.__l.__cap_;
  xmmword_1007F9168 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9168, (void *)&_mh_execute_header);
  sub_100320A4C(5LL, &v37);
  uint64_t v21 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v23 = std::string::append(&v38, ".bin");
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1007F9190 = v23->__r_.__value_.__l.__cap_;
  xmmword_1007F9180 = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9180, (void *)&_mh_execute_header);
  sub_100320A4C(6LL, &v37);
  id v25 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v38, ".bin");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1007F91A8 = v27->__r_.__value_.__l.__cap_;
  xmmword_1007F9198 = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F9198, (void *)&_mh_execute_header);
  sub_100320A4C(7LL, &v37);
  __int128 v29 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v31 = std::string::append(&v38, ".bin");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1007F91C0 = v31->__r_.__value_.__l.__cap_;
  xmmword_1007F91B0 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F91B0, (void *)&_mh_execute_header);
  sub_100320A4C(8LL, &v37);
  uint64_t v33 = std::string::insert(&v37, 0LL, "reverseLUT_A");
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v35 = std::string::append(&v38, ".bin");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1007F91D8 = v35->__r_.__value_.__l.__cap_;
  xmmword_1007F91C8 = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1007F91C8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1001A3C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001A3CF0(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1007F9208 != -1) {
    dispatch_once(&qword_1007F9208, &stru_1007B4308);
  }
  if (byte_1007F9200)
  {
    unsigned int v12 = a1 | 1;
    if (a2 != 1) {
      unsigned int v12 = a1;
    }
    if (a2 == 2) {
      uint64_t v13 = a1 | 2;
    }
    else {
      uint64_t v13 = v12;
    }
    kdebug_trace(v13, a3, a4, a5, a6);
  }

void sub_1001A3DA0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_1007F9200 = [v1 BOOLForKey:@"LogAriadneSignposts"];
}

void sub_1001A3DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001A3FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A4350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A43B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A46F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1001A4C50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, void *a28, void *a29, void *a30, void *a31)
{
  _Unwind_Resume(a1);
}

void sub_1001A4D50()
{
}

void sub_1001A53FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A54DC()
{
  *(void *)(v1 - 160) = v0;
  JUMPOUT(0x1001A54CCLL);
}

void sub_1001A5A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  if (v16 != v19) {
  if (v15 != v18)
  }

  if (v14 != v17) {
  _Unwind_Resume(a1);
  }
}

void sub_1001A5B68()
{
}

void sub_1001A5B70()
{
}

void sub_1001A5B78()
{
}

void sub_1001A5B80()
{
}

void sub_1001A5B88()
{
}

void sub_1001A5B90()
{
}

void sub_1001A5B98()
{
}

void sub_1001A5BA0()
{
}

void sub_1001A5BA8()
{
}

void sub_1001A5BB0()
{
}

void sub_1001A5BB8()
{
}

void sub_1001A5BC0()
{
}

void sub_1001A5BC8()
{
}

unint64_t sub_1001A5BD0(__n128 a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
  unint64_t v2 = (unint64_t)[v1 hash];
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3));
  unint64_t v5 = (unint64_t)[v4 hash];
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithFloat:]( &OBJC_CLASS___NSNumber,  "numberWithFloat:",  COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2]))));
  unint64_t v7 = v5 ^ v2 ^ (unint64_t)[v6 hash];

  return v7;
}

void sub_1001A5C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A5E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A63EC(_Unwind_Exception *a1)
{
  if (v3 != v4) {

  }
  _Unwind_Resume(a1);
}

void sub_1001A650C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A697C(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001A6A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6B30(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001A6CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A6F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A71E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A7548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A75D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A76C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A7740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A77B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A78F0(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1001A793C@<X0>(uint64_t a1@<X8>)
{
  __int128 v4 = 0uLL;
  uint64_t v5 = 0LL;
  uint64_t result = sub_1003205E8(&v4, (char *)&v4 + 8, &v5);
  if ((_DWORD)result)
  {
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 16) = v5;
    char v3 = 1;
  }

  else
  {
    char v3 = 0;
    *(_BYTE *)a1 = 0;
  }

  *(_BYTE *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_1001A79AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  *(_DWORD *)a1 = *((_DWORD *)sub_100005150() + 144);
  sub_1000065CC(__p, "regulatory,geo,sm");
  *(void *)__int128 buf = a1;
  __int128 v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1007B4430;
  v10->__shared_owners_ = 0LL;
  v10->__shared_weak_owners_ = 0LL;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  unint64_t v48 = v10;
  sub_1001AD460(a1 + 8, (const void **)__p, buf);
  unint64_t v11 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v50 < 0) {
    operator delete(__p[0]);
  }
  sub_10001E914(a1 + 152, a3);
  sub_10001E914(a1 + 184, a4);
  *(void *)(a1 + 216) = 0LL;
  *(_BYTE *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 23sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(_OWORD *)(a1 + 24std::istream::~istream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 280) = 0LL;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 28std::istream::~istream(v1, v2 + 8) = 1065353216;
  *(_WORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 32std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 35sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0u;
  *(_OWORD *)(a1 + 36std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_BYTE *)(a1 + 400) = 0;
  *(void *)(a1 + 40std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  id v14 = v9;
  *(void *)(a1 + std::ios::~ios(v1 + 424) = v14;
  *(_WORD *)(a1 + 43sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(_BYTE *)(a1 + 434) = 0;
  *(_DWORD *)(a1 + 436) = 35040;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_BYTE *)(a1 + 47sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  v68[0] = &off_1007B4590;
  v68[1] = a1;
  uint64_t v69 = v68;
  sub_100284A04();
  double v15 = v69;
  if (v69 == v68)
  {
    uint64_t v16 = 4LL;
    double v15 = v68;
  }

  else
  {
    if (!v69) {
      goto LABEL_13;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_13:
  v66[0] = &off_1007B4620;
  v66[1] = a1;
  uint64_t v67 = v66;
  v64[0] = &off_1007B46B0;
  v64[1] = a1;
  uint64_t v65 = v64;
  v62[0] = &off_1007B4730;
  v62[1] = a1;
  unsigned __int8 v63 = v62;
  sub_100268080();
  float v17 = v63;
  if (v63 == v62)
  {
    uint64_t v18 = 4LL;
    float v17 = v62;
  }

  else
  {
    if (!v63) {
      goto LABEL_18;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_18:
  float v19 = v65;
  if (v65 == v64)
  {
    uint64_t v20 = 4LL;
    float v19 = v64;
  }

  else
  {
    if (!v65) {
      goto LABEL_23;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_23:
  uint64_t v21 = v67;
  if (v67 == v66)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = v66;
  }

  else
  {
    if (!v67) {
      goto LABEL_28;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_28:
  v60[0] = &off_1007B4490;
  v60[1] = a1;
  __int128 v61 = v60;
  v58[0] = &off_1007B4510;
  v58[1] = a1;
  uint64_t v59 = v58;
  sub_10022E5A8();
  uint64_t v23 = v59;
  if (v59 == v58)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v58;
  }

  else
  {
    if (!v59) {
      goto LABEL_33;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  id v25 = v61;
  if (v61 == v60)
  {
    uint64_t v26 = 4LL;
    id v25 = v60;
  }

  else
  {
    if (!v61) {
      goto LABEL_38;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_38:
  uint64_t v27 = *(void *)(a1 + 424);
  v56[0] = &off_1007B47C0;
  v56[1] = a1;
  id v57 = v56;
  sub_10001E914((uint64_t)v54, a5);
  sub_1001CA68C(a1 + 1632, v27, v56, v54);
  __int128 v28 = v55;
  if (v55 == v54)
  {
    uint64_t v29 = 4LL;
    __int128 v28 = v54;
  }

  else
  {
    if (!v55) {
      goto LABEL_43;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_43:
  __int128 v30 = v57;
  if (v57 == v56)
  {
    uint64_t v31 = 4LL;
    __int128 v30 = v56;
  }

  else
  {
    if (!v57) {
      goto LABEL_48;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_48:
  uint64_t v32 = *(void *)(a1 + 424);
  v52[0] = &off_1007B4850;
  v52[1] = a1;
  uint64_t v53 = v52;
  sub_1002946A8(a1 + 1752, v32, v52);
  uint64_t v33 = v53;
  if (v53 == v52)
  {
    uint64_t v34 = 4LL;
    uint64_t v33 = v52;
  }

  else
  {
    if (!v53) {
      goto LABEL_53;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_53:
  if (sub_1003206F4(*(_DWORD *)a1))
  {
    __int16 v35 = sub_1001A8438();
    sub_100351338((uint64_t)v35, (std::string *)(a1 + 376));
    if (*(char *)(a1 + 463) < 0)
    {
      **(_BYTE **)(a1 + 440) = 0;
      *(void *)(a1 + 44std::istream::~istream(v1, v2 + 8) = 0LL;
    }

    else
    {
      *(_BYTE *)(a1 + 440) = 0;
      *(_BYTE *)(a1 + 463) = 0;
    }

    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    std::string v37 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
      sub_100396ADC();
    }

    std::string v38 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
      sub_100396A6C();
    }

    int v51 = 0;
    *(void *)__int128 buf = &v51;
    uint64_t v39 = sub_100160BF8((uint64_t **)(a1 + 16), &v51, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    v39[5] = (uint64_t *)sub_1001A84C8;
    v39[6] = 0LL;
    int v51 = 1;
    *(void *)__int128 buf = &v51;
    unsigned int v40 = sub_100160BF8((uint64_t **)(a1 + 16), &v51, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    void v40[5] = (uint64_t *)sub_1001A84F8;
    v40[6] = 0LL;
    int v51 = 2;
    *(void *)__int128 buf = &v51;
    int64_t v41 = sub_100160BF8((uint64_t **)(a1 + 16), &v51, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    v41[5] = (uint64_t *)sub_1001A8558;
    v41[6] = 0LL;
    int v51 = 3;
    *(void *)__int128 buf = &v51;
    uint64_t v42 = sub_100160BF8((uint64_t **)(a1 + 16), &v51, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    v42[5] = (uint64_t *)sub_1001A880C;
    v42[6] = 0LL;
    objc_storeStrong((id *)(a1 + 112), *(id *)(a1 + 424));
    *(_DWORD *)(a1 + 1sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
    *(_BYTE *)(a1 + 56) = 1;
    sub_1001606BC(a1 + 8, 0LL);
    *(_BYTE *)(a1 + 47sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
    uint64_t v43 = (os_log_s *)qword_1007F9210;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "regulatory,geo,sm,init", buf, 2u);
    }
  }

  else
  {
    __int128 v36 = (os_log_s *)qword_1007F9210;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "regulatory,geo,sm,noinit", buf, 2u);
    }

    *(_BYTE *)(a1 + 47sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  }

  return a1;
}

void sub_1001A8080( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  sub_1001AC5F4((uint64_t *)(v48 + 408), 0LL);
  sub_1001ADDD0(v48 + 256);
  char v54 = *(void **)(v48 + 208);
  if (v54 == a12)
  {
    uint64_t v55 = 4LL;
    char v54 = a12;
  }

  else
  {
    if (!v54) {
      goto LABEL_18;
    }
    uint64_t v55 = 5LL;
  }

  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_18:
  uint64_t v56 = *(void **)(v48 + 176);
  if (v56 == a9)
  {
    uint64_t v57 = 4LL;
    uint64_t v56 = a9;
  }

  else
  {
    if (!v56) {
      goto LABEL_23;
    }
    uint64_t v57 = 5LL;
  }

  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_23:
  sub_1001ADD54(v49);

  _Unwind_Resume(a1);
}

void *sub_1001A8438()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1007F4080);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1007F4080))
  {
    sub_10034F15C(&unk_1007F3FA0);
    __cxa_atexit((void (*)(void *))sub_1001ACCE8, &unk_1007F3FA0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1007F4080);
  }

  return &unk_1007F3FA0;
}

void sub_1001A84B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001A84C8(uint64_t a1, int a2)
{
  if (a2 != 3) {
    return a2 == 2;
  }
  sub_1001A8B80(a1);
  return 2LL;
}

uint64_t sub_1001A84F8(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 3:
      return 2LL;
    case 2:
      sub_1001AC3E0(a1, (std::string *)(a1 + 296));
      break;
    case 0:
      sub_1001AC3E0(a1, (std::string *)(a1 + 296));
      sub_1001A8D20(a1);
      break;
  }

  return 1LL;
}

uint64_t sub_1001A8558(uint64_t a1, int a2)
{
  __int128 v4 = sub_1001A8438();
  if ((byte_1007F9218 & 1) == 0)
  {
    uint64_t v5 = (uint64_t)v4;
    if (sub_1003516DC((uint64_t)v4, (_DWORD *)&qword_1007F4088 + 1, &qword_1007F4088))
    {
      if (!sub_1003517F0(v5, &dword_1007F4090)) {
        dword_1007F4090 = 35040;
      }
    }

    else
    {
      qword_1007F4088 = 0x12C00000258LL;
    }

    __int128 v6 = (os_log_s *)qword_1007F9210;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_100396C34(v6);
    }
    byte_1007F9218 = 1;
  }

  uint64_t v7 = 2LL;
  switch(a2)
  {
    case 0:
      sub_1001AC4B4(a1);
      sub_1001AC3E0(a1, (std::string *)(a1 + 296));
      goto LABEL_29;
    case 1:
      sub_1001A8E6C(a1);
      sub_100160604((uint64_t **)(a1 + 8), 8);
      sub_100160604((uint64_t **)(a1 + 8), 9);
      sub_1001A8D20(a1);
      sub_1001AC5F4((uint64_t *)(a1 + 408), 0LL);
      return 2LL;
    case 2:
      goto LABEL_27;
    case 3:
      sub_1001AC3E0(a1, (std::string *)(a1 + 296));
      return v7;
    case 6:
      if (*(_BYTE *)(a1 + 432)) {
        return 3LL;
      }
      else {
        return 2LL;
      }
    case 7:
      sub_1001A8E6C(a1);
      *(_DWORD *)(a1 + 436) = dword_1007F4090;
      sub_100160604((uint64_t **)(a1 + 8), 8);
      sub_100160604((uint64_t **)(a1 + 8), 9);
      sub_1001A8D20(a1);
      return 2LL;
    case 8:
      sub_1001A8E6C(a1);
      int v8 = *(_DWORD *)(a1 + 436);
      BOOL v9 = __OFSUB__(v8, 1);
      int v10 = v8 - 1;
      if (v10 < 0 == v9)
      {
        *(_DWORD *)(a1 + 436) = v10;
        uint64_t v11 = a1 + 8;
        double v12 = (double)(int)qword_1007F4088;
        int v13 = 9;
        goto LABEL_31;
      }

      *(_DWORD *)(a1 + 436) = dword_1007F4090;
      std::string::assign((std::string *)(a1 + 296), off_1007F4768[0]);
LABEL_27:
      uint64_t v7 = 1LL;
      break;
    case 9:
      if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
        sub_100396BB0();
      }
      sub_1001A8DF8(a1);
      sub_1001AE348(a1 + 8, 8, (double)SHIDWORD(qword_1007F4088));
      return 2LL;
    case 10:
      if (*(_BYTE *)(a1 + 432))
      {
        *(_DWORD *)(a1 + 436) = dword_1007F4090;
        if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
          sub_100396B4C();
        }
      }

      else
      {
        sub_1001A8B80(a1);
LABEL_29:
        if (*(_BYTE *)(a1 + 432))
        {
          sub_1001A8DF8(a1);
          int v14 = HIDWORD(qword_1007F4088);
          *(_DWORD *)(a1 + 436) = dword_1007F4090;
          uint64_t v11 = a1 + 8;
          double v12 = (double)v14;
          int v13 = 8;
LABEL_31:
          sub_1001AE348(v11, v13, v12);
        }
      }

      break;
    default:
      return v7;
  }

  return v7;
}

uint64_t sub_1001A880C(uint64_t a1, int a2)
{
  __int128 v4 = sub_1001A8438();
  int v6 = 31536000;
  uint64_t result = 3LL;
  switch(a2)
  {
    case 0:
      sub_1001AC4B4(a1);
      sub_1003514B8((uint64_t)v4, &v6, 31536000);
      if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
        sub_100396CCC();
      }
      sub_1001AE348(a1 + 8, 4, (double)v6);
      return 3LL;
    case 1:
      sub_100160604((uint64_t **)(a1 + 8), 4);
      sub_1001AC5F4((uint64_t *)(a1 + 408), 0LL);
      return 3LL;
    case 2:
      goto LABEL_8;
    case 4:
      std::string::assign((std::string *)(a1 + 296), off_1007F4768[0]);
LABEL_8:
      uint64_t result = 1LL;
      break;
    case 5:
      sub_1001A8B80(a1);
      uint64_t result = 2LL;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_1001A891C(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 16);
  char v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    char v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_1001A8978(uint64_t a1)
{
  unint64_t v2 = *(dispatch_queue_s **)(a1 + 424);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A8B28;
  block[3] = &unk_1007A2398;
  void block[4] = a1;
  dispatch_sync(v2, block);
  sub_10029472C(a1 + 1752);
  sub_1001CA864(a1 + 1632);
  sub_1001ACF48(a1 + 936);
  sub_1001AD1D4(a1 + 528);
  char v3 = *(void **)(a1 + 520);
  if (v3 == (void *)(a1 + 496))
  {
    uint64_t v4 = 4LL;
    char v3 = (void *)(a1 + 496);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:

  sub_1001AC5F4((uint64_t *)(a1 + 408), 0LL);
  sub_1001ADDD0(a1 + 256);
  uint64_t v5 = *(void **)(a1 + 208);
  if (v5 == (void *)(a1 + 184))
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = (void *)(a1 + 184);
  }

  else
  {
    if (!v5) {
      goto LABEL_23;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_23:
  uint64_t v7 = *(void **)(a1 + 176);
  if (v7 == (void *)(a1 + 152))
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = (void *)(a1 + 152);
    goto LABEL_27;
  }

  if (v7)
  {
    uint64_t v8 = 5LL;
LABEL_27:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  sub_1001ADD54(a1 + 8);
  return a1;
}

void sub_1001A8B28(uint64_t a1)
{
}

void sub_1001A8B30(uint64_t a1)
{
  unint64_t v2 = *(dispatch_source_s **)(a1 + 464);
  if (v2)
  {
    dispatch_source_cancel(v2);
    char v3 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = 0LL;
  }

void sub_1001A8B70(uint64_t a1)
{
}

void sub_1001A8B78(uint64_t a1)
{
}

void sub_1001A8B80(uint64_t a1)
{
  uint64_t v2 = a1 + 216;
  if (!sub_1001A8CCC(a1 + 216))
  {
    *(_BYTE *)(a1 + 43sub_10014C374((uint64_t)&unk_1007F8180, 2) = 1;
    char v3 = (os_log_s *)(id)qword_1007F9210;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_9;
      }
    }

    else if (*(_BYTE *)(a1 + 239))
    {
LABEL_9:
      double v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_15:
      sub_100396D68(v2, (uint64_t)v6, *(uint64_t *)&v5);
      goto LABEL_16;
    }

    double v5 = 0.0;
    goto LABEL_15;
  }

  char v3 = (os_log_s *)(id)qword_1007F9210;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_5;
      }
    }

    else if (*(_BYTE *)(a1 + 239))
    {
LABEL_5:
      double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_12:
      sub_100396D30(v2, (uint64_t)v6, *(uint64_t *)&v4);
      goto LABEL_16;
    }

    double v4 = 0.0;
    goto LABEL_12;
  }

void sub_1001A8CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1001A8CCC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      return CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32) < *(double *)&qword_1007F3F98;
    }
  }

  else if (*(_BYTE *)(a1 + 23))
  {
    return CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32) < *(double *)&qword_1007F3F98;
  }

  return 0LL;
}

void sub_1001A8D20(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)(id)qword_1007F9210;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v3 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v3 = a1 + 216;
      if (*(_BYTE *)(a1 + 239))
      {
LABEL_4:
        double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_7:
        sub_100396DA0(v3, (uint64_t)&v5, *(uint64_t *)&v4);
        goto LABEL_8;
      }
    }

    double v4 = 0.0;
    goto LABEL_7;
  }

void sub_1001A8DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A8DF8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 432);
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3) {
      sub_100396E04();
    }
    sub_100268128((dispatch_queue_s **)(a1 + 528));
    *(_BYTE *)(a1 + 433) = 1;
  }

  else if (v3)
  {
    sub_100396DD8();
  }

uint64_t sub_1001A8E6C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100396E30();
  }
  uint64_t result = sub_1002681C4((dispatch_queue_s **)(a1 + 528));
  *(_BYTE *)(a1 + 433) = 0;
  return result;
}

uint64_t sub_1001A8EB8(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_ERROR)) {
      sub_100396E5C();
    }
    goto LABEL_10;
  }

  sub_1001A8B30(a1);
  dispatch_source_t v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 424));
  uint64_t v7 = *(void **)(a1 + 464);
  *(void *)(a1 + 464) = v6;

  uint64_t v8 = *(dispatch_source_s **)(a1 + 464);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_ERROR)) {
      sub_100396E88();
    }
LABEL_10:
    uint64_t v11 = 0LL;
    goto LABEL_11;
  }

  dispatch_time_t v9 = dispatch_time(0LL, 1000000000LL * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  int v10 = *(dispatch_source_s **)(a1 + 464);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1001A902C;
  void v13[3] = &unk_1007B43E0;
  uint64_t v15 = a1;
  id v14 = v5;
  dispatch_source_set_event_handler(v10, v13);
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100396EB4();
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 464));

  uint64_t v11 = 1LL;
LABEL_11:

  return v11;
}

uint64_t sub_1001A902C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A9058(uint64_t a1)
{
  int v2 = (_BYTE *)(a1 + 480);
  int v3 = sub_100284B80((uint64_t)v2);
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG))
  {
    sub_100396F70();
    if (!v3) {
      goto LABEL_16;
    }
  }

  else if (!v3)
  {
    goto LABEL_16;
  }

  sub_1001CABF8(a1 + 1632);
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100396F44();
  }
  int v4 = sub_100294AE0(a1 + 1752);
  if (sub_100320900(*(_DWORD *)a1))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001A9258;
    void v8[3] = &unk_1007A2398;
    void v8[4] = a1;
    id v5 = objc_retainBlock(v8);
    sub_1001A8EB8(a1, v5, 0x168u);

    if ((v4 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v6 = sub_10026808C((dispatch_queue_s **)(a1 + 528));
    goto LABEL_17;
  }

  if (v4) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v6 = 0LL;
LABEL_17:
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100396EE0();
  }
  return v6;
}

uint64_t sub_1001A91D8(uint64_t a1)
{
  uint64_t v1 = (std::string *)(a1 + 376);
  int v2 = (char *)(a1 + 399);
  if (*(char *)(a1 + 399) < 0)
  {
    **(_BYTE **)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0LL;
  }

  else
  {
    v1->__r_.__value_.__s.__data_[0] = 0;
    *int v2 = 0;
  }

  int v3 = (os_log_s *)qword_1007F9210;
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100396FD4(v2, v1, v3);
  }
  int v4 = sub_1001A8438();
  return sub_100351330((uint64_t)v4, v1);
}

void sub_1001A9258(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v21 = 0;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  char v22 = -1;
  __int16 v16 = 0;
  __int128 v15 = 0u;
  *(_OWORD *)int v13 = 0u;
  *(_OWORD *)id v14 = 0u;
  char v17 = -1;
  int v2 = sub_1001A8438();
  int v11 = 0;
  uint64_t v23 = &v11;
  int v3 = sub_1001ADE4C(v1 + 256, &v11, (uint64_t)&unk_1004242F8, &v23);
  if (v3[55] < 0) {
    sub_1000063A8(&__p, *((void **)v3 + 4), *((void *)v3 + 5));
  }
  else {
    std::string __p = *(std::string *)(v3 + 32);
  }
  BOOL v4 = sub_10034F45C((uint64_t)v2, &__p, (std::string *)&v18);
  id v5 = sub_1001A8438();
  else {
    std::string __dst = *(std::string *)(v1 + 440);
  }
  BOOL v6 = sub_10034F45C((uint64_t)v5, &__dst, (std::string *)v13);
  if (v4) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001A9464;
  void v8[3] = &unk_1007B4400;
  int v9 = v7 | v6;
  AnalyticsSendEventLazy(@"com.apple.rose.regulatory.iso.sources", v8);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
}

void sub_1001A9418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1001A951C((uint64_t)&a29);
  sub_1001A951C(v29 - 112);
  _Unwind_Resume(a1);
}

id sub_1001A9464(uint64_t a1)
{
  BOOL v4 = @"ISOSources";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)));
  id v5 = v1;
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));

  return v2;
}

void sub_1001A9504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001A951C(uint64_t a1)
{
  return a1;
}

void sub_1001A955C(int *a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  int v7 = sub_1001A8438();
  __int16 v43 = 0;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v40 = 0u;
  char v44 = -1;
  __int16 v38 = 0;
  *(_OWORD *)__int128 v36 = 0u;
  __int128 v37 = 0u;
  *(_OWORD *)__int16 v35 = 0u;
  char v39 = -1;
  __int16 v33 = 0;
  *(_OWORD *)uint64_t v31 = 0u;
  __int128 v32 = 0u;
  *(_OWORD *)__int128 v30 = 0u;
  char v34 = -1;
  uint64_t v8 = (uint64_t)(a1 + 64);
  int v29 = 0;
  v45[0] = &v29;
  int v9 = sub_1001ADE4C((uint64_t)(a1 + 64), &v29, (uint64_t)&unk_1004242F8, v45);
  uint64_t v24 = a1;
  int v10 = a3;
  int v29 = 2;
  v45[0] = &v29;
  int v11 = sub_1001ADE4C(v8, &v29, (uint64_t)&unk_1004242F8, v45);
  int v29 = 3;
  v45[0] = &v29;
  double v12 = sub_1001ADE4C(v8, &v29, (uint64_t)&unk_1004242F8, v45);
  int v13 = v9 + 32;
  if (v9[55] < 0)
  {
    sub_1000063A8(&__p, *((void **)v9 + 4), *((void *)v9 + 5));
  }

  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v13;
    __p.__r_.__value_.__l.__cap_ = *((void *)v9 + 6);
  }

  BOOL v14 = sub_10034F45C((uint64_t)v7, &__p, (std::string *)&v40);
  if (v11[55] < 0) {
    sub_1000063A8(&__dst, *((void **)v11 + 4), *((void *)v11 + 5));
  }
  else {
    std::string __dst = *(std::string *)(v11 + 32);
  }
  BOOL v15 = sub_10034F45C((uint64_t)v7, &__dst, (std::string *)v35);
  if (v12[55] < 0) {
    sub_1000063A8(&v26, *((void **)v12 + 4), *((void *)v12 + 5));
  }
  else {
    std::string v26 = *(std::string *)(v12 + 32);
  }
  BOOL v16 = sub_10034F45C((uint64_t)v7, &v26, (std::string *)v30);
  if ((char)v26.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (v14)
    {
LABEL_16:
      *a2 = 1;
      int v29 = 0;
      v45[0] = &v29;
      char v17 = sub_1001ADE4C(v8, &v29, (uint64_t)&unk_1004242F8, v45);
      BOOL v18 = sub_1001A99A4((uint64_t)(v17 + 24));
      if (!v15) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }

  else if (v14)
  {
    goto LABEL_16;
  }

  BOOL v18 = 0;
  *a2 = v15 || v16;
  if (!v15)
  {
LABEL_17:
    BOOL v19 = 0;
    if (v16) {
      goto LABEL_18;
    }
LABEL_23:
    BOOL v21 = 0;
    if (v18) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }

void sub_1001A991C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
}

BOOL sub_1001A99A4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    BOOL v3 = v2 == 0;
  }

  else
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
    BOOL v3 = (_DWORD)v2 == 0;
  }

  char v4 = v3;
  if (v2)
  {
    double v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32);
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  else
  {
    double v5 = 0.0;
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  return v5 < *(double *)&qword_1007F3F90 || *(_BYTE *)a1 == 0;
}

void sub_1001A9A1C(int *a1@<X0>, BOOL *a2@<X1>, _BYTE *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v8 = sub_1001A8438();
  __int16 v54 = 0;
  *(_OWORD *)uint64_t v52 = 0u;
  __int128 v53 = 0u;
  *(_OWORD *)uint64_t v51 = 0u;
  char v55 = -1;
  __int16 v49 = 0;
  *(_OWORD *)uint64_t v47 = 0u;
  __int128 v48 = 0u;
  *(_OWORD *)uint64_t v46 = 0u;
  char v50 = -1;
  if (sub_100320824(*a1))
  {
    int v9 = 0;
    int v10 = 1;
    goto LABEL_5;
  }

  if (sub_10032085C(*a1))
  {
    int v10 = 3;
    int v9 = 2;
LABEL_5:
    int v44 = v10;
    int v45 = v9;
    uint64_t v11 = (uint64_t)(a1 + 64);
    *(void *)__int128 buf = &v45;
    double v12 = sub_1001AE0F0((uint64_t)(a1 + 64), &v45, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    *(void *)__int128 buf = &v44;
    int v13 = sub_1001AE0F0(v11, &v44, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    __int128 v41 = (char **)(v12 + 32);
    if (v12[55] < 0) {
      sub_1000063A8(&__p, *((void **)v12 + 4), *((void *)v12 + 5));
    }
    else {
      std::string __p = *(std::string *)(v12 + 32);
    }
    BOOL v14 = sub_10034F45C((uint64_t)v8, &__p, (std::string *)v51);
    BOOL v15 = v13 + 32;
    if (v13[55] < 0)
    {
      sub_1000063A8(&__dst, *((void **)v13 + 4), *((void *)v13 + 5));
    }

    else
    {
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v15;
      __dst.__r_.__value_.__l.__cap_ = *((void *)v13 + 6);
    }

    BOOL v16 = sub_10034F45C((uint64_t)v8, &__dst, (std::string *)v46);
    *a2 = v14 || v16;
    if (v14)
    {
      *(void *)__int128 buf = &v45;
      char v17 = sub_1001AE0F0(v11, &v45, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
      int v18 = sub_1001A99A4((uint64_t)(v17 + 24));
      if (!v16)
      {
LABEL_17:
        int v19 = 0;
LABEL_20:
        *a3 = v18 | v19;
        BOOL v21 = (os_log_s *)(id)qword_1007F9210;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          __int128 v30 = v12 + 32;
          if (v12[55] < 0) {
            __int128 v30 = *v41;
          }
          char v39 = v30;
          uint64_t v56 = &v45;
          uint64_t v31 = sub_1001AE0F0(v11, &v45, (uint64_t)&unk_1004242F8, &v56);
          if (v31[55] < 0) {
            uint64_t v32 = *((void *)v31 + 5);
          }
          else {
            uint64_t v32 = v31[55];
          }
          double v35 = 0.0;
          if (v32) {
            double v35 = CFAbsoluteTimeGetCurrent() - *((double *)v31 + 7);
          }
          uint64_t v56 = &v45;
          BOOL v36 = sub_1001AE0F0(v11, &v45, (uint64_t)&unk_1004242F8, &v56)[24] == 0;
          *(_DWORD *)__int128 buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v39;
          __int16 v58 = 2048;
          double v59 = v35;
          __int16 v60 = 1024;
          BOOL v61 = v36;
          __int16 v62 = 1024;
          int v63 = v18;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc1Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d",  buf,  0x28u);
        }

        char v22 = (os_log_s *)(id)qword_1007F9210;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          if (v13[55] < 0) {
            uint64_t v40 = *(char **)v15;
          }
          else {
            uint64_t v40 = v13 + 32;
          }
          uint64_t v56 = &v44;
          __int16 v33 = sub_1001AE0F0(v11, &v44, (uint64_t)&unk_1004242F8, &v56);
          if (v33[55] < 0) {
            uint64_t v34 = *((void *)v33 + 5);
          }
          else {
            uint64_t v34 = v33[55];
          }
          double v37 = 0.0;
          if (v34) {
            double v37 = CFAbsoluteTimeGetCurrent() - *((double *)v33 + 7);
          }
          uint64_t v56 = &v44;
          BOOL v38 = sub_1001AE0F0(v11, &v44, (uint64_t)&unk_1004242F8, &v56)[24] == 0;
          *(_DWORD *)__int128 buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v40;
          __int16 v58 = 2048;
          double v59 = v37;
          __int16 v60 = 1024;
          BOOL v61 = v38;
          __int16 v62 = 1024;
          int v63 = v19;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc2Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d",  buf,  0x28u);
        }

        if (v14 && v16)
        {
          if (v18 == v19)
          {
            if (HIBYTE(v54)) {
              unsigned int v25 = (_BYTE)v54 == 0;
            }
            else {
              unsigned int v25 = ((_BYTE)v54 == 0) + 1;
            }
            if (HIBYTE(v49)) {
              unsigned int v26 = (_BYTE)v49 == 0;
            }
            else {
              unsigned int v26 = ((_BYTE)v49 == 0) + 1;
            }
            uint64_t v27 = v12 + 32;
            if (v25 <= v26) {
              __int128 v28 = (const std::string *)(v13 + 32);
            }
            else {
              __int128 v28 = (const std::string *)(v12 + 32);
            }
            std::string::operator=(a4, v28);
            int v29 = (os_log_s *)qword_1007F9210;
            if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG))
            {
              if (v12[55] < 0) {
                uint64_t v27 = *v41;
              }
              *(_DWORD *)__int128 buf = 136315650;
              *(void *)&uint8_t buf[4] = v27;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              __int16 v58 = 1024;
              LODWORD(v59) = v26;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,refreshCurrentGeoArea,bestMccCandidate:%s,reason,restrictionCount,mcc1Count:%d,mc c2Count:%d,chosen",  buf,  0x18u);
            }
          }

          else
          {
            if (v18) {
              __int128 v23 = (const std::string *)(v12 + 32);
            }
            else {
              __int128 v23 = (const std::string *)(v13 + 32);
            }
            std::string::operator=(a4, v23);
            if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
              sub_10039704C();
            }
          }
        }

        else
        {
          if (v14) {
            uint64_t v24 = (const std::string *)(v12 + 32);
          }
          else {
            uint64_t v24 = (const std::string *)(v13 + 32);
          }
          std::string::operator=(a4, v24);
          if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
            sub_1003970B0();
          }
        }

        goto LABEL_46;
      }
    }

    else
    {
      int v18 = 0;
      if (!v16) {
        goto LABEL_17;
      }
    }

    *(void *)__int128 buf = &v44;
    __int128 v20 = sub_1001AE0F0(v11, &v44, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
    int v19 = sub_1001A99A4((uint64_t)(v20 + 24));
    goto LABEL_20;
  }

  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_FAULT)) {
    sub_100397114();
  }
LABEL_46:
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[1]);
  }
  if (SHIBYTE(v47[0]) < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[1]);
  }
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
}

void sub_1001AA078( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1001AA0FC(uint64_t a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v8 = sub_1001A8438();
  __int16 v31 = 0;
  *(_OWORD *)int v29 = 0u;
  __int128 v30 = 0u;
  *(_OWORD *)__int128 v28 = 0u;
  char v32 = -1;
  __int16 v26 = 0;
  *(_OWORD *)uint64_t v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__int128 v23 = 0u;
  char v27 = -1;
  int v22 = 0;
  *(void *)__int128 buf = &v22;
  int v9 = sub_1001ADE4C(a1 + 256, &v22, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
  int v10 = v9;
  uint64_t v11 = (const std::string *)(v9 + 32);
  if (v9[55] < 0)
  {
    sub_1000063A8(&__p, *((void **)v9 + 4), *((void *)v9 + 5));
  }

  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = *((void *)v9 + 6);
  }

  BOOL v12 = sub_10034F45C((uint64_t)v8, &__p, (std::string *)v28);
  int v13 = (_OWORD *)(a1 + 440);
  if (*(char *)(a1 + 463) < 0)
  {
    sub_1000063A8(&v20, *(void **)(a1 + 440), *(void *)(a1 + 448));
  }

  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v13;
    v20.__r_.__value_.__l.__cap_ = *(void *)(a1 + 456);
  }

  BOOL v14 = sub_10034F45C((uint64_t)v8, &v20, (std::string *)v23);
  *a2 = v12 || v14;
  *a3 = v12 || v14;
  BOOL v15 = (os_log_s *)qword_1007F9210;
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG))
  {
    if (v10[55] < 0) {
      int v18 = (const std::string *)v11->__r_.__value_.__r.__words[0];
    }
    else {
      int v18 = v11;
    }
    *(_DWORD *)__int128 buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v12;
    __int16 v34 = 2080;
    uint64_t v35 = v18;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc1Iso,valid:%d,value:%s",  buf,  0x12u);
  }

  BOOL v16 = (os_log_s *)qword_1007F9210;
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG))
  {
    else {
      int v19 = (const std::string *)(a1 + 440);
    }
    *(_DWORD *)__int128 buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v14;
    __int16 v34 = 2080;
    uint64_t v35 = v19;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc2Iso,valid:%d,value:%s",  buf,  0x12u);
  }

  if (v12) {
    char v17 = v11;
  }
  else {
    char v17 = (const std::string *)(a1 + 440);
  }
  std::string::operator=(a4, v17);
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_10039714C();
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(v28[0]);
  }
}

void sub_1001AA3D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1001AA43C(uint64_t a1)
{
  __int16 v56 = 0;
  memset(&__p, 0, sizeof(__p));
  if (sub_100320890(*(_DWORD *)a1))
  {
    sub_1001A955C((int *)a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }

  else if (sub_100320900(*(_DWORD *)a1))
  {
    sub_1001AA0FC(a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }

  else
  {
    sub_1001A9A1C((int *)a1, (BOOL *)&v56 + 1, &v56, &buf);
  }

  std::string __p = buf;
  uint64_t v2 = (std::string *)(a1 + 216);
  if (sub_1001A8CCC(a1 + 216)) {
    sub_1001AAE18(a1);
  }
  BOOL v3 = sub_1001A8438();
  char v4 = (const std::string *)(a1 + 376);
  uint64_t v52 = a1;
  if (!sub_100351338((uint64_t)v3, (std::string *)(a1 + 376)))
  {
    double v5 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1003971B0();
    }
  }

  if (*(_BYTE *)(a1 + 434) == 1)
  {
    std::string::operator=(&__str, v4);
    BOOL v6 = "lastStoredBeforeAirplaneMode";
LABEL_18:
    std::string::assign(&v57, v6);
    int v51 = 1;
    goto LABEL_19;
  }

  if ((_BYTE)v56)
  {
    std::string::operator=(&__str, &__p);
    BOOL v6 = "currentMcc";
    goto LABEL_18;
  }

  if (sub_1001A8CCC((uint64_t)v2) && sub_1001AAE6C(v2))
  {
    std::string::operator=(&__str, v2);
    BOOL v6 = "recentLocation";
    goto LABEL_18;
  }

  if (*(char *)(a1 + 399) < 0)
  {
    if (*(void *)(a1 + 384)) {
      goto LABEL_64;
    }
  }

  else if (*(_BYTE *)(a1 + 399))
  {
LABEL_64:
    std::string::operator=(&__str, v4);
    BOOL v21 = "lastStored";
LABEL_160:
    std::string::assign(&v57, v21);
    goto LABEL_161;
  }

  if (HIBYTE(v56))
  {
    std::string::operator=(&__str, &__p);
    BOOL v21 = "lastKnownMcc";
    goto LABEL_160;
  }

void sub_1001AAD78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001AAE18(uint64_t result)
{
  if (*(_BYTE *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_1003971DC();
    }
    return sub_1001606BC(v1 + 8, 7LL);
  }

  return result;
}

BOOL sub_1001AAE6C(void *a1)
{
  size_t v2 = strlen(off_1007F4750[0]);
  if (*((char *)a1 + 23) < 0)
  {
    if (v2 == a1[1])
    {
      if (v2 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, off_1007F4750[0], v2) == 0;
    }
  }

  else if (v2 == *((unsigned __int8 *)a1 + 23))
  {
    if (v2 == -1LL) {
LABEL_10:
    }
      sub_10015B79C();
    return memcmp(a1, off_1007F4750[0], v2) == 0;
  }

  return 0LL;
}

uint64_t sub_1001AAF04(uint64_t result)
{
  if (*(_BYTE *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_100397208();
    }
    return sub_1001606BC(v1 + 8, 2LL);
  }

  return result;
}

uint64_t sub_1001AAF5C(uint64_t result)
{
  if (*(_BYTE *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_10039727C();
    }
    return sub_1001606BC(v1 + 8, 3LL);
  }

  return result;
}

void sub_1001AAFB4(uint64_t a1, int a2, const std::string *a3, int a4)
{
  int v25 = a2;
  unsigned int v7 = a2 & 0xFFFFFFFE;
  BOOL v8 = (a2 & 0xFFFFFFFE) == 2;
  *(void *)std::string buf = &v25;
  uint64_t v9 = sub_1001AE0F0(a1 + 256, &v25, (uint64_t)&unk_1004242F8, (_DWORD **)buf);
  char v10 = *(_BYTE *)(a1 + 434) != 1 || v8;
  uint64_t v11 = (os_log_s *)(id)qword_1007F9210;
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if ((v10 & 1) != 0)
  {
    if (v12)
    {
      sub_1002848B4(v25, __p);
      if (v24 >= 0) {
        std::string::size_type v15 = __p;
      }
      else {
        std::string::size_type v15 = (void **)__p[0];
      }
      if ((char)a3->__r_.__value_.__s.__size_ < 0)
      {
        if (a3->__r_.__value_.__l.__size_) {
          BOOL v16 = (const char *)a3->__r_.__value_.__r.__words[0];
        }
        else {
          BOOL v16 = "__";
        }
      }

      else if (a3->__r_.__value_.__s.__size_)
      {
        BOOL v16 = (const char *)a3;
      }

      else
      {
        BOOL v16 = "__";
      }

      int v19 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((void *)v9 + 5)) {
          int v19 = *(const char **)v19;
        }
        else {
          int v19 = "__";
        }
      }

      else if (!v9[55])
      {
        int v19 = "__";
      }

      int v21 = v9[24];
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v27 = 2080;
      __int128 v28 = v16;
      __int16 v29 = 1024;
      int v30 = a4;
      __int16 v31 = 2080;
      char v32 = v19;
      __int16 v33 = 1024;
      int v34 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d)",  buf,  0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v13 = v7 == 2;

    std::string::operator=((std::string *)(v9 + 32), a3);
    int v14 = a4 ^ 1;
    if (!v9[24]) {
      int v14 = 1;
    }
    if ((v13 | v14) == 1) {
      *((CFAbsoluteTime *)v9 + 7) = CFAbsoluteTimeGetCurrent();
    }
    v9[24] = a4;
    sub_1001AA43C(a1);
  }

  else
  {
    if (v12)
    {
      sub_1002848B4(v25, __p);
      if (v24 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      if ((char)a3->__r_.__value_.__s.__size_ < 0)
      {
        if (a3->__r_.__value_.__l.__size_) {
          int v18 = (const char *)a3->__r_.__value_.__r.__words[0];
        }
        else {
          int v18 = "__";
        }
      }

      else if (a3->__r_.__value_.__s.__size_)
      {
        int v18 = (const char *)a3;
      }

      else
      {
        int v18 = "__";
      }

      std::string v20 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((void *)v9 + 5)) {
          std::string v20 = *(const char **)v20;
        }
        else {
          std::string v20 = "__";
        }
      }

      else if (!v9[55])
      {
        std::string v20 = "__";
      }

      int v22 = v9[24];
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v27 = 2080;
      __int128 v28 = v18;
      __int16 v29 = 1024;
      int v30 = a4;
      __int16 v31 = 2080;
      char v32 = v20;
      __int16 v33 = 1024;
      int v34 = v22;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d),skip MCC update in airplane mode",  buf,  0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_1001AB2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AB2F8(uint64_t a1, const std::string *a2, int a3, double a4)
{
  BOOL v8 = (os_log_s *)qword_1007F9210;
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v16 = a2;
    }
    else {
      BOOL v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v17 = 136315650;
    int v18 = v16;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 2048;
    double v22 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,processLocation:%s,isLastKnown:%d,ts:%.2f",  (uint8_t *)&v17,  0x1Cu);
  }

  uint64_t v9 = *(unsigned __int8 *)(a1 + 239);
  if ((v9 & 0x80u) == 0LL) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 239);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 224);
  }
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  int v12 = (char)size;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v10 != size) {
    goto LABEL_21;
  }
  if (v12 >= 0) {
    BOOL v13 = a2;
  }
  else {
    BOOL v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((v9 & 0x80) != 0)
  {
  }

  else if (*(_BYTE *)(a1 + 239))
  {
    int v14 = (unsigned __int8 *)(a1 + 216);
    while (*v14 == v13->__r_.__value_.__s.__data_[0])
    {
      ++v14;
      BOOL v13 = (const std::string *)((char *)v13 + 1);
      if (!--v9) {
        goto LABEL_18;
      }
    }

    goto LABEL_21;
  }

BOOL sub_1001AB500(uint64_t a1)
{
  size_t v2 = strlen(off_1007F4720[0]);
  size_t v3 = v2;
  size_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v6 = *(void *)(a1 + 8);
    if (v2 != v6)
    {
      unsigned int v7 = off_1007F4740[0];
      size_t v8 = strlen(off_1007F4740[0]);
      goto LABEL_15;
    }

    if (v2 == -1LL) {
      goto LABEL_57;
    }
    double v5 = *(const void **)a1;
  }

  else
  {
    if (v2 != v4)
    {
      unsigned int v7 = off_1007F4740[0];
      size_t v8 = strlen(off_1007F4740[0]);
      goto LABEL_12;
    }

    double v5 = (const void *)a1;
    if (v3 == -1LL) {
LABEL_57:
    }
      sub_10015B79C();
  }

  if (!memcmp(v5, off_1007F4720[0], v3)) {
    return 1LL;
  }
  unsigned int v7 = off_1007F4740[0];
  size_t v8 = strlen(off_1007F4740[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    size_t v6 = v4;
    uint64_t v9 = (const void *)a1;
    if (v8 != v4)
    {
      uint64_t v10 = off_1007F4748[0];
      size_t v11 = strlen(off_1007F4748[0]);
      goto LABEL_20;
    }

    goto LABEL_18;
  }

  size_t v6 = *(void *)(a1 + 8);
LABEL_15:
  if (v8 != v6)
  {
    uint64_t v10 = off_1007F4748[0];
    size_t v11 = strlen(off_1007F4748[0]);
    goto LABEL_24;
  }

  if (v6 == -1LL) {
    sub_10015B79C();
  }
  uint64_t v9 = *(const void **)a1;
LABEL_18:
  if (!memcmp(v9, v7, v6)) {
    return 1LL;
  }
  uint64_t v10 = off_1007F4748[0];
  size_t v11 = strlen(off_1007F4748[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    size_t v6 = v4;
    int v12 = (const void *)a1;
    if (v11 != v4)
    {
      BOOL v13 = off_1007F4750[0];
      size_t v14 = strlen(off_1007F4750[0]);
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  size_t v6 = *(void *)(a1 + 8);
LABEL_24:
  if (v11 != v6)
  {
    BOOL v13 = off_1007F4750[0];
    size_t v14 = strlen(off_1007F4750[0]);
    goto LABEL_33;
  }

  if (v6 == -1LL) {
    sub_10015B79C();
  }
  int v12 = *(const void **)a1;
LABEL_27:
  if (!memcmp(v12, v10, v6)) {
    return 1LL;
  }
  BOOL v13 = off_1007F4750[0];
  size_t v14 = strlen(off_1007F4750[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_29:
    size_t v6 = v4;
    std::string::size_type v15 = (const void *)a1;
    if (v14 != v4)
    {
      BOOL v16 = off_1007F4768[0];
      size_t v17 = strlen(off_1007F4768[0]);
      goto LABEL_38;
    }

    goto LABEL_36;
  }

  size_t v6 = *(void *)(a1 + 8);
LABEL_33:
  if (v14 != v6)
  {
    BOOL v16 = off_1007F4768[0];
    size_t v17 = strlen(off_1007F4768[0]);
LABEL_42:
    if (v17 != v6)
    {
      __int16 v19 = off_1007F4738[0];
      size_t v20 = strlen(off_1007F4738[0]);
      goto LABEL_51;
    }

    if (v6 == -1LL) {
      sub_10015B79C();
    }
    int v18 = *(const void **)a1;
LABEL_45:
    if (!memcmp(v18, v16, v6)) {
      return 1LL;
    }
    __int16 v19 = off_1007F4738[0];
    size_t v20 = strlen(off_1007F4738[0]);
    if ((v4 & 0x80) == 0) {
      goto LABEL_47;
    }
    size_t v6 = *(void *)(a1 + 8);
LABEL_51:
    if (v20 != v6) {
      return sub_1001AC8D0((void *)a1, off_1007F4760[0]);
    }
    if (v6 == -1LL) {
      sub_10015B79C();
    }
    __int16 v21 = *(const void **)a1;
    size_t v4 = v6;
    goto LABEL_54;
  }

  if (v6 == -1LL) {
    sub_10015B79C();
  }
  std::string::size_type v15 = *(const void **)a1;
LABEL_36:
  if (!memcmp(v15, v13, v6)) {
    return 1LL;
  }
  BOOL v16 = off_1007F4768[0];
  size_t v17 = strlen(off_1007F4768[0]);
  if ((v4 & 0x80) != 0)
  {
    size_t v6 = *(void *)(a1 + 8);
    goto LABEL_42;
  }

void sub_1001AB89C(int *a1, const std::string *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100397368();
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v17, 0, sizeof(v17));
  signed __int8 size = a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    int64_t v5 = a2->__r_.__value_.__s.__size_;
  }
  else {
    int64_t v5 = a2->__r_.__value_.__l.__size_;
  }
  if (size >= 0) {
    std::string::size_type v6 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v6 = a2->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 1)
  {
    unsigned int v7 = (_BYTE *)(v6 + v5);
    size_t v8 = (const void *)v6;
    do
    {
      uint64_t v9 = memchr(v8, 44, v5);
      if (!v9) {
        break;
      }
      if (*v9 == 44)
      {
        if (v9 == v7) {
          break;
        }
        std::string::size_type v10 = (std::string::size_type)&v9[-v6];
        if (v10 == -1LL) {
          break;
        }
        std::string::basic_string(&v16, a2, 0LL, v10, (std::allocator<char> *)v19);
        std::string __p = v16;
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v11 = a2->__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v11 = a2->__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&v16, a2, v10 + 1, v11, (std::allocator<char> *)v19);
        std::string v17 = v16;
        goto LABEL_29;
      }

      size_t v8 = v9 + 1;
      int64_t v5 = v7 - (_BYTE *)v8;
    }

    while (v7 - (_BYTE *)v8 >= 1);
  }

  std::string::operator=(&__p, a2);
  if (sub_100320824(*a1)) {
    int v12 = "1";
  }
  else {
    int v12 = "p1";
  }
  std::string::assign(&v17, v12);
LABEL_29:
  if (!std::string::compare(&__p, "000"))
  {
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      __p.__r_.__value_.__s.__size_ = 0;
    }
  }

  if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v13 = (std::string *)((char *)&v17 + v17.__r_.__value_.__s.__size_);
  }
  else {
    BOOL v13 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  }
  if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v14 = &v17;
  }
  else {
    size_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  while (v14 != v13)
  {
    v14->__r_.__value_.__s.__data_[0] = __tolower(v14->__r_.__value_.__s.__data_[0]);
    size_t v14 = (std::string *)((char *)v14 + 1);
  }

  if (!std::string::compare(&v17, "1") && (sub_100320824(*a1) || sub_100320890(*a1)))
  {
    std::string::size_type v15 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(0, &v16);
      sub_10039731C();
    }
  }

  else if (!std::string::compare(&v17, "2") && sub_100320824(*a1))
  {
    std::string::size_type v15 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(1, &v16);
      sub_10039731C();
    }
  }

  else if (!std::string::compare(&v17, "p1") && !sub_100320824(*a1))
  {
    std::string::size_type v15 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(2, &v16);
      sub_10039731C();
    }
  }

  else if (!std::string::compare(&v17, "p2") && !sub_100320824(*a1))
  {
    std::string::size_type v15 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(3, &v16);
      sub_10039731C();
    }
  }

  else
  {
    std::string::size_type v15 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(4, &v16);
      sub_10039731C();
    }
  }
}

void sub_1001ABC9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001ABD18(int *a1, std::string *a2)
{
  if (sub_100320824(*a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_1003973CC();
    }
    return 0LL;
  }

  if (sub_100320900(*a1))
  {
    sub_100284A08((uint64_t)(a1 + 120), 0, (void **)&a2->__r_.__value_.__l.__data_, 0);
    return 1LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100397444();
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v32, 0, sizeof(v32));
  memset(&v31, 0, sizeof(v31));
  signed __int8 size = a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    int64_t v6 = a2->__r_.__value_.__s.__size_;
  }
  else {
    int64_t v6 = a2->__r_.__value_.__l.__size_;
  }
  if (size >= 0) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 1)
  {
    size_t v8 = (char *)v7 + v6;
    uint64_t v9 = v7;
    do
    {
      std::string::size_type v10 = memchr(v9, 44, v6);
      if (!v10) {
        break;
      }
      if (*v10 == 44)
      {
        if (v10 == v8) {
          break;
        }
        std::string::size_type v11 = v10 - (_BYTE *)v7;
        if (v11 == -1LL) {
          break;
        }
        std::string::basic_string(&__str, a2, 0LL, v11, (std::allocator<char> *)&v37);
        std::string __p = __str;
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v12 = a2->__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v12 = a2->__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&__str, a2, v11 + 1, v12, (std::allocator<char> *)&v37);
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int64_t v13 = __str.__r_.__value_.__s.__size_;
        }
        else {
          int64_t v13 = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v13 >= 1)
        {
          std::string::size_type v15 = (char *)p_str + v13;
          std::string v16 = p_str;
          do
          {
            std::string v17 = memchr(v16, 44, v13);
            if (!v17) {
              break;
            }
            if (*v17 == 44)
            {
              if (v17 == v15) {
                break;
              }
              std::string::size_type v27 = v17 - (_BYTE *)p_str;
              if (v27 == -1LL) {
                break;
              }
              std::string::basic_string(&v37, &__str, 0LL, v27, (std::allocator<char> *)&v34);
              std::string v32 = v37;
              if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v28 = __str.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
              }
              std::string::basic_string(&v37, &__str, v27 + 1, v28, (std::allocator<char> *)&v34);
              std::string v31 = v37;
              goto LABEL_86;
            }

            std::string v16 = (std::string *)(v17 + 1);
            int64_t v13 = v15 - (_BYTE *)v16;
          }

          while (v15 - (_BYTE *)v16 >= 1);
        }

        std::string::operator=(&v32, &__str);
        std::string::assign(&v31, "0");
LABEL_86:
        goto LABEL_41;
      }

      uint64_t v9 = (std::string *)(v10 + 1);
      int64_t v6 = v8 - (_BYTE *)v9;
    }

    while (v8 - (_BYTE *)v9 >= 1);
  }

  std::string::operator=(&__p, a2);
  std::string::assign(&v32, "p1");
  std::string::assign(&v31, "0");
LABEL_41:
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v18 = (std::string *)((char *)&v32 + v32.__r_.__value_.__s.__size_);
  }
  else {
    int v18 = (std::string *)(v32.__r_.__value_.__r.__words[0] + v32.__r_.__value_.__l.__size_);
  }
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v19 = &v32;
  }
  else {
    __int16 v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  while (v19 != v18)
  {
    v19->__r_.__value_.__s.__data_[0] = __tolower(v19->__r_.__value_.__s.__data_[0]);
    __int16 v19 = (std::string *)((char *)v19 + 1);
  }

  int v20 = std::string::compare(&v31, "0");
  if (!std::string::compare(&v32, "p1") && !sub_100320824(*a1))
  {
    double v22 = (os_log_s *)(id)qword_1007F9210;
    int v23 = 2;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(2, &v37);
      if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v24 = &v37;
      }
      else {
        char v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      BOOL v36 = v20 != 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.",  (uint8_t *)&__str,  0x1Cu);
      int v23 = 2;
    }
  }

  else
  {
    if (std::string::compare(&v32, "p2") || sub_100320824(*a1))
    {
      __int16 v21 = (os_log_s *)(id)qword_1007F9210;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        sub_1002848B4(4, &__str);
        sub_1003973F8();
      }

      uint64_t v4 = 0LL;
      goto LABEL_68;
    }

    double v22 = (os_log_s *)(id)qword_1007F9210;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002848B4(3, &v37);
      if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v29 = &v37;
      }
      else {
        __int16 v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      int v30 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      BOOL v36 = v20 != 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.",  (uint8_t *)&__str,  0x1Cu);
    }

    int v23 = 3;
  }

  sub_100284A08((uint64_t)(a1 + 120), v23, (void **)&__p.__r_.__value_.__l.__data_, v20 != 0);
  uint64_t v4 = 1LL;
LABEL_68:
  return v4;
}

void sub_1001AC2D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001AC368(uint64_t a1)
{
  return sub_1001AC38C(a1);
}

uint64_t sub_1001AC38C(uint64_t result)
{
  if (*(_BYTE *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_1003974A8();
    }
    return sub_1001606BC(v1 + 8, 10LL);
  }

  return result;
}

uint64_t sub_1001AC3E0(uint64_t result, std::string *__str)
{
  size_t v2 = __str;
  uint64_t v3 = result;
  uint64_t v4 = (std::string *)(result + 352);
  uint64_t v5 = *(unsigned __int8 *)(result + 375);
  if ((v5 & 0x80u) == 0LL) {
    uint64_t v6 = *(unsigned __int8 *)(result + 375);
  }
  else {
    uint64_t v6 = *(void *)(result + 360);
  }
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  int v8 = (char)size;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v6 == size)
  {
    if (v8 < 0) {
      std::string __str = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      uint64_t result = memcmp(v4->__r_.__value_.__l.__data_, __str, *(void *)(result + 360));
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      if (!*(_BYTE *)(result + 375)) {
        return result;
      }
      for (uint64_t i = (unsigned __int8 *)(result + 352); *i == __str->__r_.__value_.__s.__data_[0]; ++i)
      {
        std::string __str = (std::string *)((char *)__str + 1);
        if (!--v5) {
          return result;
        }
      }
    }
  }

  std::string::operator=(v4, v2);
  uint64_t result = *(void *)(v3 + 176);
  if (result) {
    return (*(uint64_t (**)(uint64_t, std::string *))(*(void *)result + 48LL))(result, v4);
  }
  return result;
}

void sub_1001AC4B4(uint64_t a1)
{
  size_t v2 = operator new(0x28uLL);
  sub_1000065CC(&__p, off_1007F3F88);
  sub_100361848(v2);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_1001AC5F4((uint64_t *)(a1 + 408), (uint64_t)v2);
  if (!*(void *)(a1 + 408))
  {
    uint64_t v3 = (void *)qword_1007F9210;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_ERROR)) {
      sub_1003974D4();
    }
    uint64_t v4 = (_Unwind_Exception *)abort_report_np("PRGeoMonitor failed to take assertion during backoff period, aborting nearbyd");
    if (v6 < 0) {
      operator delete(__p);
    }
    operator delete(v3);
    _Unwind_Resume(v4);
  }

uint64_t sub_1001AC584(uint64_t result, int a2)
{
  if (*(_BYTE *)(result + 472))
  {
    uint64_t v3 = result;
    if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
      sub_100397500();
    }
    *(_BYTE *)(v3 + 400) = a2;
    if (a2) {
      uint64_t v4 = 5LL;
    }
    else {
      uint64_t v4 = 6LL;
    }
    return sub_1001606BC(v3 + 8, v4);
  }

  return result;
}

void sub_1001AC5F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100361910();
    operator delete(v4);
  }

void sub_1001AC620(uint64_t a1, int a2)
{
  if (!a2) {
    sub_100397564();
  }
  if (*(_BYTE *)(a1 + 434)) {
    BOOL v3 = *(unsigned __int8 *)(a1 + 434) == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return;
  }
  *(_BYTE *)(a1 + 434) = a2;
  if (a2 == 2)
  {
    uint64_t v5 = (void *)(a1 + 376);
    size_t v6 = strlen(off_1007F4738[0]);
    if (*(char *)(a1 + 399) < 0)
    {
      if (v6 == *(void *)(a1 + 384))
      {
        if (v6 == -1LL) {
          goto LABEL_35;
        }
        uint64_t v5 = (void *)*v5;
        goto LABEL_23;
      }
    }

    else if (v6 == *(unsigned __int8 *)(a1 + 399))
    {
      if (v6 == -1LL) {
LABEL_35:
      }
        sub_10015B79C();
LABEL_23:
      if (!memcmp(v5, off_1007F4738[0], v6))
      {
        if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
          sub_1003975E4();
        }
        sub_1001A91D8(a1);
      }
    }

void sub_1001AC84C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001AC868(uint64_t a1, const std::string *a2)
{
  BOOL v3 = (std::string *)(a1 + 376);
  std::string::operator=((std::string *)(a1 + 376), a2);
  uint64_t v4 = (os_log_s *)qword_1007F9210;
  if (os_log_type_enabled((os_log_t)qword_1007F9210, OS_LOG_TYPE_DEBUG)) {
    sub_100397610(a1, v3, v4);
  }
  uint64_t v5 = sub_1001A8438();
  return sub_100351330((uint64_t)v5, v3);
}

BOOL sub_1001AC8D0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_10015B79C();
    return memcmp(a1, __s, v4) == 0;
  }

  return 0LL;
}

NSMutableArray *sub_1001AC960(uint64_t a1)
{
  size_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  BOOL v3 = (const char *)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    if (*(void *)(a1 + 304)) {
      BOOL v3 = *(const char **)v3;
    }
    else {
      BOOL v3 = "__";
    }
  }

  else if (!*(_BYTE *)(a1 + 319))
  {
    BOOL v3 = "__";
  }

  int v23 = v3;
  size_t v4 = (void *)(a1 + 320);
  __int16 v21 = v4;
  uint64_t v5 = (const char *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
  {
    if (*(void *)(a1 + 384)) {
      uint64_t v5 = *(const char **)v5;
    }
    else {
      uint64_t v5 = "__";
    }
  }

  else if (!*(_BYTE *)(a1 + 399))
  {
    uint64_t v5 = "__";
  }

  double v22 = v5;
  if (*(char *)(a1 + 375) < 0)
  {
    if (*(void *)(a1 + 360)) {
      size_t v6 = *(const char **)(a1 + 352);
    }
    else {
      size_t v6 = "__";
    }
  }

  else if (*(_BYTE *)(a1 + 375))
  {
    size_t v6 = (const char *)(a1 + 352);
  }

  else
  {
    size_t v6 = "__";
  }

  if (*(char *)(a1 + 463) < 0)
  {
    if (*(void *)(a1 + 448)) {
      unsigned int v7 = *(const char **)(a1 + 440);
    }
    else {
      unsigned int v7 = "__";
    }
  }

  else if (*(_BYTE *)(a1 + 463))
  {
    unsigned int v7 = (const char *)(a1 + 440);
  }

  else
  {
    unsigned int v7 = "__";
  }

  uint64_t v8 = *(unsigned __int8 *)(a1 + 345);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 344);
  sub_10034D7EC(*(unsigned __int8 *)(a1 + 434), __p);
  if (v25 >= 0) {
    std::string::size_type v10 = __p;
  }
  else {
    std::string::size_type v10 = (void **)__p[0];
  }
  std::string::size_type v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Chosen ISO: %s [initialized: %d, current: %d, source: %s]. Last stored ISO: %s. Last updated ISO: %s. WiFi ISO: %s. Airplane mode: %s",  v23,  v8,  v9,  v21,  v22,  v6,  v7,  v10));
  -[NSMutableArray addObject:](v2, "addObject:", v11);

  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 239)) {
      std::string::size_type v12 = (const char *)(a1 + 216);
    }
    else {
      std::string::size_type v12 = "__";
    }
    if (!*(_BYTE *)(a1 + 239))
    {
      double v13 = 0.0;
      goto LABEL_45;
    }

    goto LABEL_44;
  }

  if (*(void *)(a1 + 224))
  {
    std::string::size_type v12 = *(const char **)(a1 + 216);
LABEL_44:
    double v13 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
    goto LABEL_45;
  }

  double v13 = 0.0;
  std::string::size_type v12 = "__";
LABEL_45:
  size_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Location ISO: %s. Age: %.2f s. Last known: %d. Auth: %d. Needed: %d. Monitoring: %d. Retries left: %d",  v12,  *(void *)&v13,  *(unsigned __int8 *)(a1 + 240),  *(unsigned __int8 *)(a1 + 400),  *(unsigned __int8 *)(a1 + 432),  *(unsigned __int8 *)(a1 + 433),  *(unsigned int *)(a1 + 436)));
  -[NSMutableArray addObject:](v2, "addObject:", v14);

  for (uint64_t i = *(uint64_t **)(a1 + 272); i; uint64_t i = (uint64_t *)*i)
  {
    sub_1002848B4(*((_DWORD *)i + 4), __p);
    if (v25 >= 0) {
      std::string v16 = __p;
    }
    else {
      std::string v16 = (void **)__p[0];
    }
    if (*((char *)i + 55) < 0)
    {
      if (i[5]) {
        std::string v17 = (const char *)i[4];
      }
      else {
        std::string v17 = "__";
      }
      if (!i[5])
      {
LABEL_59:
        double v18 = 0.0;
        goto LABEL_60;
      }
    }

    else
    {
      if (*((_BYTE *)i + 55)) {
        std::string v17 = (const char *)(i + 4);
      }
      else {
        std::string v17 = "__";
      }
      if (!*((_BYTE *)i + 55)) {
        goto LABEL_59;
      }
    }

    double v18 = CFAbsoluteTimeGetCurrent() - *((double *)i + 7);
LABEL_60:
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MCC slot:%s. ISO:%s. Age: %.2f s. Last known: %d",  v16,  v17,  *(void *)&v18,  *((unsigned __int8 *)i + 24)));
    -[NSMutableArray addObject:](v2, "addObject:", v19);

    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  return v2;
}

void sub_1001ACC90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001ACCEC(uint64_t a1)
{
  uint64_t v2 = a1 + 152;
  size_t v4 = (void **)(a1 + 192);
  sub_10013EAD4(&v4);
  sub_1001ACD50(v2);
  sub_1001ACE80(a1 + 112);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  return a1;
}

uint64_t sub_1001ACD50(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001ACD88(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      sub_1001ACDC4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1001ACDC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136)) {
    sub_1001ACE04(a1 + 96);
  }
  if (*(_BYTE *)(a1 + 88)) {
    sub_1001ACE04(a1 + 48);
  }
  return sub_1001ACE04(a1 + 8);
}

uint64_t sub_1001ACE04(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001ACE3C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      BOOL v3 = (void *)*v2;
      size_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }

      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1001ACE80(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001ACEB8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      sub_1001ACEF4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_1001ACEF4(uint64_t a1)
{
}

uint64_t sub_1001ACF48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 504);
  if (v2 == (void *)(a1 + 480))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 480);
  }

  else
  {
    if (!v2) {
      goto LABEL_18;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_18:
  size_t v4 = *(void **)(a1 + 472);
  if (v4 == (void *)(a1 + 448))
  {
    uint64_t v5 = 4LL;
    size_t v4 = (void *)(a1 + 448);
  }

  else
  {
    if (!v4) {
      goto LABEL_23;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_23:

  sub_1001AD090(a1 + 280);
  size_t v6 = *(void **)(a1 + 272);
  if (v6 == (void *)(a1 + 248))
  {
    uint64_t v7 = 4LL;
    size_t v6 = (void *)(a1 + 248);
    goto LABEL_27;
  }

  if (v6)
  {
    uint64_t v7 = 5LL;
LABEL_27:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  sub_100160B00(a1 + 88);
  uint64_t v9 = (void **)(a1 + 40);
  sub_1001AD10C(&v9);
  return a1;
}

uint64_t sub_1001AD090(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_100160B7C(*(void **)(a1 + 56), (void *)(a1 + 64), (uint64_t **)a1);

  sub_100034A98(a1 + 80, *(void **)(a1 + 88));
  sub_100160AB8(v2, *(void **)(a1 + 64));
  sub_100012390(a1 + 32);
  sub_100034A98(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1001AD10C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72LL;
        sub_1001AD190((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1001AD190(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001AD1D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 360);
  if (v2 == (void *)(a1 + 336))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 336);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:

  sub_100156B18((void *)(a1 + 240));
  std::string::size_type v11 = (void **)(a1 + 192);
  sub_1001AD33C(&v11);
  uint64_t v4 = *(void **)(a1 + 184);
  if (v4 == (void *)(a1 + 160))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 160);
  }

  else
  {
    if (!v4) {
      goto LABEL_15;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_15:
  size_t v6 = *(void **)(a1 + 152);
  if (v6 == (void *)(a1 + 128))
  {
    uint64_t v7 = 4LL;
    size_t v6 = (void *)(a1 + 128);
  }

  else
  {
    if (!v6) {
      goto LABEL_20;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_20:
  uint64_t v8 = *(void **)(a1 + 120);
  if (v8 == (void *)(a1 + 96))
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = (void *)(a1 + 96);
  }

  else
  {
    if (!v8) {
      goto LABEL_25;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_25:

  return a1;
}

void sub_1001AD33C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80LL;
        sub_1001AD3C0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1001AD3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = v3;
    operator delete(v3);
  }

void sub_1001AD408(std::__shared_weak_count *a1)
{
}

uint64_t sub_1001AD420(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1001AD460(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3sub_10014C374((uint64_t)&unk_1007F8180, 2) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    size_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0;
  *(void *)(a1 + 7sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0LL;
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 11sub_10014C374((uint64_t)&unk_1007F8180, 2) = 0;
  *(void *)(a1 + 120) = 0LL;
  uint64_t v8 = (void **)(a1 + 120);
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23)) {
      goto LABEL_6;
    }
LABEL_21:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }

  if (!a2[1]) {
    goto LABEL_21;
  }
LABEL_6:
  else {
    size_t v9 = (size_t)a2[1];
  }
  sub_10015CEB8((uint64_t)&v13, v9 + 1);
  if (v14 >= 0) {
    std::string::size_type v10 = &v13;
  }
  else {
    std::string::size_type v10 = (__int128 *)v13;
  }
  if (v9)
  {
    else {
      std::string::size_type v11 = *a2;
    }
    memmove(v10, v11, v9);
  }

  *(_WORD *)((char *)v10 + v9) = 44;
  *(_OWORD *)uint64_t v8 = v13;
  *(void *)(a1 + 136) = v14;
  return a1;
}

void sub_1001AD5E4(_Unwind_Exception *a1)
{
  sub_100034A98(v5, *(void **)(v1 + 88));
  sub_100160AB8(v4, *(void **)(v1 + 64));
  sub_100012390(v3);
  sub_100034A98(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void *sub_1001AD640(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1007B4490;
  result[1] = v3;
  return result;
}

uint64_t sub_1001AD674(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1007B4490;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001AD690(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v5 = *a2;
  uint64_t v3 = *(void *)(v2 + 208);
  if (!v3) {
    sub_10001EEF0();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 48LL))(v3, &v5);
}

uint64_t sub_1001AD6D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }