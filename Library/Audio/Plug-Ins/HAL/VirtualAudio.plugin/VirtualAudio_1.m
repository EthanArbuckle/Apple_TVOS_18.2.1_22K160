LABEL_231:
  v941 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v942 = 257;
  sub_51AEC(v903, @"active data sources", (uint64_t)&v941);
  v177 = v899;
  if (!v941) {
    v177 = 0;
  }
  if (v177)
  {
    v178 = sub_138E8(2);
    v179 = sub_138E8(34);
    v180 = 0;
    v181 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v182 = *(void *)(v178 + 8);
    while (1)
    {
      v183 = *(int *)&v965[4 * v181];
      v184 = v180;
      if (((v182 & v183) != 0) != ((*(void *)(v179 + 8) & v183) != 0)) {
        break;
      }
      v180 = 1;
      v181 = 1LL;
      if ((v184 & 1) != 0) {
        goto LABEL_240;
      }
    }

    if ((v182 & v183) == 0) {
      v178 = v179;
    }
LABEL_240:
    v185 = *(id *)v178;
    v186 = v185;
    if (v185)
    {
      v187 = (os_log_s *)v185;
      if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2708;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = "active data sources";
        _os_log_impl( &dword_0,  v187,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %s is no longer supported.  It will be ignored.",  v965,  0x1Cu);
      }
    }
  }

  v939 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v940 = 257;
  sub_51BD8(v903, @"routable ports", (uint64_t)&v939);
  if (v939)
  {
    if (v899)
    {
      v188 = sub_138E8(2);
      v189 = sub_138E8(34);
      v190 = 0;
      v191 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v192 = *(void *)(v188 + 8);
      while (1)
      {
        v193 = *(int *)&v965[4 * v191];
        v194 = v190;
        if (((v192 & v193) != 0) != ((*(void *)(v189 + 8) & v193) != 0)) {
          break;
        }
        v190 = 1;
        v191 = 1LL;
        if ((v194 & 1) != 0) {
          goto LABEL_253;
        }
      }

      if ((v192 & v193) == 0) {
        v188 = v189;
      }
LABEL_253:
      v195 = *(id *)v188;
      v196 = v195;
      if (v195)
      {
        v197 = (os_log_s *)v195;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2717;
          *(_WORD *)&v965[18] = 2112;
          *(void *)&v965[20] = v939;
          _os_log_impl(&dword_0, v197, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Routable Ports: %@.", v965, 0x1Cu);
        }
      }
    }

    v198 = 0;
    v199 = (uint64_t *)(v897 + 70);
    while (1)
    {
      v200 = v939;
      if (v939) {
        v200 = CFArrayGetCount(v939);
      }
      if (v198 >= v200) {
        break;
      }
      *(_DWORD *)v963 = 0;
      if ((sub_1A0E0C(&v939, v198, v963) & 1) == 0)
      {
        v728 = sub_138E8(13);
        v729 = sub_8C7D4(1, *(void **)v728, *(void *)(v728 + 8));
        v730 = (void *)objc_claimAutoreleasedReturnValue(v729);
        v731 = v730;
        if (v730)
        {
          v732 = v730;
          if (os_log_type_enabled(v732, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2724;
            _os_log_impl( &dword_0,  v732,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationRoutablePortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
          }
        }

        v733 = __cxa_allocate_exception(0x10uLL);
        *(void *)v733 = &off_4865A0;
        v733[2] = 1852797029;
      }

      sub_92EF8();
      v201 = sub_28AFEC(*(unsigned int *)v963);
      if (!v201)
      {
        v734 = sub_138E8(13);
        v735 = sub_8C7D4(1, *(void **)v734, *(void *)(v734 + 8));
        v736 = (void *)objc_claimAutoreleasedReturnValue(v735);
        v737 = v736;
        if (v736)
        {
          v738 = v736;
          if (os_log_type_enabled(v738, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2726;
            _os_log_impl( &dword_0,  v738,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: no virtual audio port object wit h the specified ID",  v965,  0x12u);
          }
        }

        v739 = __cxa_allocate_exception(0x10uLL);
        *(void *)v739 = &off_4865A0;
        v739[2] = 560947818;
      }

      sub_DD4F0(v199, v201, v201);
      ++v198;
    }

    if ((v893 & 1) != 0)
    {
      if (*((_DWORD *)v898 + 100))
      {
        sub_2652C0((uint64_t)v938, v199);
        if (v938[0])
        {
          v938[1] = v938[0];
          operator delete(v938[0]);
        }
      }
    }
  }

  v936 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v937 = 257;
  sub_51BD8(v903, @"unroutable ports", (uint64_t)&v936);
  v202 = (uint64_t *)(v897 + 76);
  if (v936)
  {
    if (v899)
    {
      v203 = sub_138E8(2);
      v204 = sub_138E8(34);
      v205 = 0;
      v206 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v207 = *(void *)(v203 + 8);
      while (1)
      {
        v208 = *(int *)&v965[4 * v206];
        v209 = v205;
        if (((v207 & v208) != 0) != ((*(void *)(v204 + 8) & v208) != 0)) {
          break;
        }
        v205 = 1;
        v206 = 1LL;
        if ((v209 & 1) != 0) {
          goto LABEL_277;
        }
      }

      if ((v207 & v208) == 0) {
        v203 = v204;
      }
LABEL_277:
      v210 = *(id *)v203;
      v211 = v210;
      if (v210)
      {
        v212 = (os_log_s *)v210;
        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2744;
          *(_WORD *)&v965[18] = 2112;
          *(void *)&v965[20] = v936;
          _os_log_impl(&dword_0, v212, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Unroutable Ports: %@.", v965, 0x1Cu);
        }
      }
    }

    v213 = 0;
    v214 = v905 + 168;
    while (1)
    {
      v215 = v936;
      if (v936) {
        v215 = CFArrayGetCount(v936);
      }
      if (v213 >= v215) {
        break;
      }
      *(_DWORD *)v963 = 0;
      if ((sub_1A0E0C(&v936, v213, v963) & 1) == 0)
      {
        v740 = sub_138E8(13);
        v741 = sub_8C7D4(1, *(void **)v740, *(void *)(v740 + 8));
        v742 = (void *)objc_claimAutoreleasedReturnValue(v741);
        v743 = v742;
        if (v742)
        {
          v744 = v742;
          if (os_log_type_enabled(v744, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2751;
            _os_log_impl( &dword_0,  v744,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationUnroutablePortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
          }
        }

        v745 = __cxa_allocate_exception(0x10uLL);
        *(void *)v745 = &off_4865A0;
        v745[2] = 1852797029;
      }

      sub_92EF8();
      v216 = sub_28AFEC(*(unsigned int *)v963);
      if (!v216)
      {
        v746 = sub_138E8(13);
        v747 = sub_8C7D4(1, *(void **)v746, *(void *)(v746 + 8));
        v748 = (void *)objc_claimAutoreleasedReturnValue(v747);
        v749 = v748;
        if (v748)
        {
          v750 = v748;
          if (os_log_type_enabled(v750, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2753;
            _os_log_impl( &dword_0,  v750,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: no virtual audio port object wit h the specified ID",  v965,  0x12u);
          }
        }

        v751 = __cxa_allocate_exception(0x10uLL);
        *(void *)v751 = &off_4865A0;
        v751[2] = 560947818;
      }

      sub_DD4F0(v202, v216, v216);
      ++v213;
    }

    if (CFDictionaryContainsKey(*v903, @"route to builtinspeaker"))
    {
      sub_2652C0((uint64_t)v965, v202);
      v217 = v905;
      if (*((_BYTE *)v905 + 696))
      {
        v218 = *(void **)v214;
        if (*(void *)v214)
        {
          *((void *)v905 + 85) = v218;
          operator delete(v218);
          *(void *)v214 = 0LL;
          *((void *)v214 + 1) = 0LL;
          *((void *)v214 + 2) = 0LL;
        }

        *((_OWORD *)v217 + 42) = *(_OWORD *)v965;
        *((void *)v217 + 86) = *(void *)&v965[16];
        memset(v965, 0, 24);
      }

      else
      {
        *((_OWORD *)v905 + 42) = *(_OWORD *)v965;
        *((void *)v217 + 86) = *(void *)&v965[16];
        memset(v965, 0, 24);
        *((_BYTE *)v217 + 696) = 1;
      }
    }
  }

  v934 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v935 = 257;
  sub_51AEC(v903, @"voice processing configuration", (uint64_t)&v934);
  if (v934)
  {
    sub_2659E8((uint64_t)v891, (uint64_t)&v934);
    v219 = (int)v934;
    if (v934) {
      v219 = CFDictionaryGetCount(v934);
    }
    *((_BYTE *)v905 + 408) = v219 != 0;
    if (v899)
    {
      v220 = sub_138E8(2);
      v221 = sub_138E8(34);
      v222 = 0;
      v223 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v224 = *(void *)(v220 + 8);
      while (1)
      {
        v225 = *(int *)&v965[4 * v223];
        v226 = v222;
        if (((v224 & v225) != 0) != ((*(void *)(v221 + 8) & v225) != 0)) {
          break;
        }
        v222 = 1;
        v223 = 1LL;
        if ((v226 & 1) != 0) {
          goto LABEL_305;
        }
      }

      if ((v224 & v225) == 0) {
        v220 = v221;
      }
LABEL_305:
      v227 = *(id *)v220;
      v228 = v227;
      if (v227)
      {
        v229 = (os_log_s *)v227;
        if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
        {
          v230 = "true";
          v231 = *((unsigned __int8 *)v905 + 408);
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_DWORD *)v965 = 136315650;
          if (!v231) {
            v230 = "false";
          }
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2773;
          *(_WORD *)&v965[18] = 2080;
          *(void *)&v965[20] = v230;
          _os_log_impl(&dword_0, v229, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Voice Processing Enabled: %s.", v965, 0x1Cu);
        }
      }

      v232 = sub_138E8(2);
      v233 = sub_138E8(34);
      v234 = 0;
      v235 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v236 = *(void *)(v232 + 8);
      while (1)
      {
        v237 = *(int *)&v965[4 * v235];
        v238 = v234;
        if (((v236 & v237) != 0) != ((*(void *)(v233 + 8) & v237) != 0)) {
          break;
        }
        v234 = 1;
        v235 = 1LL;
        if ((v238 & 1) != 0) {
          goto LABEL_317;
        }
      }

      if ((v236 & v237) == 0) {
        v232 = v233;
      }
LABEL_317:
      v239 = *(id *)v232;
      v240 = v239;
      if (v239)
      {
        v241 = (os_log_s *)v239;
        if (os_log_type_enabled(v241, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2775;
          *(_WORD *)&v965[18] = 2112;
          *(void *)&v965[20] = v934;
          _os_log_impl(&dword_0, v241, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VP configuration data: %@.", v965, 0x1Cu);
        }
      }
    }
  }

  sub_7D084(v965, "screen dark policy enabled");
  v242 = sub_51C54(*v903, v965);
  v243 = v905;
  v905[34] = v242;
  *((_BYTE *)v243 + 140) = BYTE4(v242);
  if ((v965[23] & 0x80000000) != 0) {
    operator delete(*(void **)v965);
  }
  if (v899 && *((_BYTE *)v905 + 140))
  {
    v244 = sub_138E8(2);
    v245 = sub_138E8(34);
    v246 = 0;
    v247 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v248 = *(void *)(v244 + 8);
    while (1)
    {
      v249 = *(int *)&v965[4 * v247];
      v250 = v246;
      if (((v248 & v249) != 0) != ((*(void *)(v245 + 8) & v249) != 0)) {
        break;
      }
      v246 = 1;
      v247 = 1LL;
      if ((v250 & 1) != 0) {
        goto LABEL_332;
      }
    }

    if ((v248 & v249) == 0) {
      v244 = v245;
    }
LABEL_332:
    v251 = *(id *)v244;
    v252 = v251;
    if (v251)
    {
      v253 = (os_log_s *)v251;
      if (os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG))
      {
        if (!*((_BYTE *)v905 + 140)) {
          sub_8DEEC();
        }
        v254 = "false";
        v255 = v905[34];
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)v965 = 136315650;
        if (v255 == 1) {
          v254 = "true";
        }
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2784;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v254;
        _os_log_impl(&dword_0, v253, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Screen dark policy enabled: %s.", v965, 0x1Cu);
      }
    }
  }

  v932 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v933 = 257;
  sub_51BD8(v903, @"device hints", (uint64_t)&v932);
  v256 = v932;
  if (v932)
  {
    v895 = (uint64_t **)v202;
    v257 = 0;
    v258 = (char **)(v905 + 140);
LABEL_365:
    LODWORD(v256) = CFArrayGetCount(v256);
    while (v257 < v256)
    {
      *(void *)v965 = 0LL;
      v259 = sub_1A0DAC(&v932, v257, v965);
      v260 = *(const __CFData **)v965;
      if (*(void *)v965) {
        v261 = v259;
      }
      else {
        v261 = 0;
      }
      if (v261 != 1 || (v262 = CFGetTypeID(*(CFTypeRef *)v965), v262 != CFDataGetTypeID()))
      {
        v722 = sub_138E8(13);
        v723 = sub_8C7D4(1, *(void **)v722, *(void *)(v722 + 8));
        v724 = (void *)objc_claimAutoreleasedReturnValue(v723);
        v725 = v724;
        if (v724)
        {
          v726 = v724;
          if (os_log_type_enabled(v726, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2796;
            _os_log_impl( &dword_0,  v726,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationDeviceHintsKey does not contain CFDataRefs.",  v965,  0x12u);
          }
        }

        v727 = __cxa_allocate_exception(0x10uLL);
        *(void *)v727 = &off_4865A0;
        v727[2] = 1852797029;
      }

      *(void *)v963 = v260;
      v963[8] = 0;
      BytePtr = CFDataGetBytePtr(v260);
      v264 = BytePtr;
      if (!BytePtr)
      {
        v752 = sub_138E8(13);
        v753 = sub_8C7D4(1, *(void **)v752, *(void *)(v752 + 8));
        v754 = (void *)objc_claimAutoreleasedReturnValue(v753);
        v755 = v754;
        if (v754)
        {
          v756 = v754;
          if (os_log_type_enabled(v756, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315650;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2801;
            *(_WORD *)&v965[18] = 1024;
            *(_DWORD *)&v965[20] = v257;
            _os_log_impl( &dword_0,  v756,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [deviceHint is NULL]: The CFDataRef specified at index %u by kVirtualAudioPlugInRouteConfigurationDeviceHintsKey is NULL.",  v965,  0x18u);
          }
        }

        v757 = __cxa_allocate_exception(0x10uLL);
        *(void *)v757 = &off_4865A0;
        v757[2] = 1852797029;
      }

      v265 = (_OWORD *)*((void *)v905 + 71);
      v266 = *((void *)v905 + 72);
      if ((unint64_t)v265 >= v266)
      {
        v270 = 0xAAAAAAAAAAAAAAABLL * (((char *)v265 - *v258) >> 4);
        v271 = v270 + 1;
        if (v270 + 1 > 0x555555555555555LL) {
          sub_7A87C();
        }
        v272 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v266 - (void)*v258) >> 4);
        if (2 * v272 > v271) {
          v271 = 2 * v272;
        }
        if (v272 >= 0x2AAAAAAAAAAAAAALL) {
          v273 = 0x555555555555555LL;
        }
        else {
          v273 = v271;
        }
        if (v273) {
          v273 = (unint64_t)sub_265A4C(v273);
        }
        else {
          v274 = 0LL;
        }
        v275 = (_OWORD *)(v273 + 48 * v270);
        v276 = *(_OWORD *)v264;
        v277 = *((_OWORD *)v264 + 2);
        v275[1] = *((_OWORD *)v264 + 1);
        v275[2] = v277;
        *v275 = v276;
        v278 = (char *)*((void *)v905 + 71);
        v279 = (char *)*((void *)v905 + 70);
        v280 = v275;
        if (v278 != v279)
        {
          do
          {
            v281 = *((_OWORD *)v278 - 3);
            v282 = *((_OWORD *)v278 - 1);
            *(v280 - 2) = *((_OWORD *)v278 - 2);
            *(v280 - 1) = v282;
            *(v280 - 3) = v281;
            v280 -= 3;
            v278 -= 48;
          }

          while (v278 != v279);
          v278 = *v258;
        }

        v283 = v905;
        *((void *)v905 + 70) = v280;
        v269 = v275 + 3;
        *((void *)v283 + 71) = v275 + 3;
        *((void *)v283 + 72) = v273 + 48 * v274;
        if (v278) {
          operator delete(v278);
        }
      }

      else
      {
        v267 = *(_OWORD *)BytePtr;
        v268 = *((_OWORD *)BytePtr + 2);
        v265[1] = *((_OWORD *)BytePtr + 1);
        v265[2] = v268;
        *v265 = v267;
        v269 = v265 + 3;
      }

      *((void *)v905 + 71) = v269;
      sub_265A90((uint64_t)v963);
      ++v257;
      v256 = v932;
      if (v932) {
        goto LABEL_365;
      }
    }

    sub_7D084(&v958, "{ ");
    v284 = *((void *)v905 + 70);
    if (*((void *)v905 + 71) != v284)
    {
      v285 = 0LL;
      v286 = 0LL;
      while (1)
      {
        v287 = (unsigned int *)(v284 + v285);
        v288 = v287[1];
        v289 = *((void *)v287 + 1);
        v290 = v287[8];
        v291 = (double *)*((void *)v287 + 5);
        sub_2CA1C(&v962, *v287);
        v292 = std::string::insert(&v962, 0LL, "[ ", 2uLL);
        v293 = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
        *(void *)&v964[16] = v292->__r_.__value_.__l.__cap_;
        *(_OWORD *)v964 = v293;
        v292->__r_.__value_.__l.__size_ = 0LL;
        v292->__r_.__value_.__l.__cap_ = 0LL;
        v292->__r_.__value_.__r.__words[0] = 0LL;
        v294 = std::string::append((std::string *)v964, ": ", 2uLL);
        v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
        *(void *)&v963[16] = v294->__r_.__value_.__l.__cap_;
        *(_OWORD *)v963 = v295;
        v294->__r_.__value_.__l.__size_ = 0LL;
        v294->__r_.__value_.__l.__cap_ = 0LL;
        v294->__r_.__value_.__r.__words[0] = 0LL;
        LODWORD(v956) = v288;
        *(void *)((char *)&v956 + 4) = v289;
        sub_613AC((uint64_t)&v959, (unsigned int *)&v956);
        if ((v961 & 0x80u) == 0) {
          v296 = (const std::string::value_type *)&v959;
        }
        else {
          v296 = v959;
        }
        if ((v961 & 0x80u) == 0) {
          v297 = v961;
        }
        else {
          v297 = (std::string::size_type)v960;
        }
        v298 = std::string::append((std::string *)v963, v296, v297);
        v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
        *(void *)&v965[16] = v298->__r_.__value_.__l.__cap_;
        *(_OWORD *)v965 = v299;
        v298->__r_.__value_.__l.__size_ = 0LL;
        v298->__r_.__value_.__l.__cap_ = 0LL;
        v298->__r_.__value_.__r.__words[0] = 0LL;
        if (v965[23] >= 0) {
          v300 = v965;
        }
        else {
          v300 = *(const std::string::value_type **)v965;
        }
        if (v965[23] >= 0) {
          v301 = v965[23];
        }
        else {
          v301 = *(void *)&v965[8];
        }
        std::string::append(&v958, v300, v301);
        if ((v965[23] & 0x80000000) != 0) {
          operator delete(*(void **)v965);
        }
        if ((v963[23] & 0x80000000) != 0) {
          operator delete(*(void **)v963);
        }
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
        memset(v965, 0, 24);
        if (v288 == 1718839674) {
          break;
        }
        if (v288 == 1853059700)
        {
          if (v290 != 8)
          {
            v800 = sub_138E8(13);
            v801 = sub_8C7D4(1, *(void **)v800, *(void *)(v800 + 8));
            v802 = (os_log_s *)objc_claimAutoreleasedReturnValue(v801);
            v803 = v802;
            if (v802 && os_log_type_enabled(v802, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v963 = 136315394;
              *(void *)&v963[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v963[12] = 1024;
              *(_DWORD *)&v963[14] = 689;
              _os_log_impl( &dword_0,  v803,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v963,  0x12u);
            }

            goto LABEL_1311;
          }

          std::to_string((std::string *)v963, *v291);
LABEL_397:
          if ((v965[23] & 0x80000000) != 0) {
            operator delete(*(void **)v965);
          }
          *(_OWORD *)v965 = *(_OWORD *)v963;
          *(void *)&v965[16] = *(void *)&v963[16];
        }

        std::operator+<char>(" ", v965);
        v302 = std::string::append((std::string *)v964, " ]", 2uLL);
        v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
        *(void *)&v963[16] = v302->__r_.__value_.__l.__cap_;
        *(_OWORD *)v963 = v303;
        v302->__r_.__value_.__l.__size_ = 0LL;
        v302->__r_.__value_.__l.__cap_ = 0LL;
        v302->__r_.__value_.__r.__words[0] = 0LL;
        if (v963[23] >= 0) {
          v304 = v963;
        }
        else {
          v304 = *(const std::string::value_type **)v963;
        }
        if (v963[23] >= 0) {
          v305 = v963[23];
        }
        else {
          v305 = *(void *)&v963[8];
        }
        std::string::append(&v958, v304, v305);
        if ((v963[23] & 0x80000000) != 0) {
          operator delete(*(void **)v963);
        }
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
        if ((v965[23] & 0x80000000) != 0) {
          operator delete(*(void **)v965);
        }
        v284 = *((void *)v905 + 70);
        v285 += 48LL;
        if (v286 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v905 + 71) - v284) >> 4)) {
          goto LABEL_415;
        }
      }

      if (v290 != 4)
      {
        v804 = sub_138E8(13);
        v805 = sub_8C7D4(1, *(void **)v804, *(void *)(v804 + 8));
        v806 = (os_log_s *)objc_claimAutoreleasedReturnValue(v805);
        v803 = v806;
        if (v806 && os_log_type_enabled(v806, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v963 = 136315394;
          *(void *)&v963[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v963[12] = 1024;
          *(_DWORD *)&v963[14] = 695;
          _os_log_impl( &dword_0,  v803,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v963,  0x12u);
        }

LABEL_1311:
        v807 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v807, "Precondition failure.");
      }

      std::to_string((std::string *)v963, *(_DWORD *)v291);
      goto LABEL_397;
    }

LABEL_415:
    std::string::append(&v958, " }", 2uLL);
    v306 = sub_138E8(2);
    v202 = (uint64_t *)v895;
    v307 = v306;
    v308 = sub_138E8(34);
    v309 = 0;
    v310 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v311 = *(void *)(v307 + 8);
    while (1)
    {
      v312 = *(int *)&v965[4 * v310];
      v313 = v309;
      if (((v311 & v312) != 0) != ((*(void *)(v308 + 8) & v312) != 0)) {
        break;
      }
      v309 = 1;
      v310 = 1LL;
      if ((v313 & 1) != 0) {
        goto LABEL_421;
      }
    }

    if ((v311 & v312) == 0) {
      v307 = v308;
    }
LABEL_421:
    v314 = *(id *)v307;
    v315 = v314;
    if (v314)
    {
      v316 = (os_log_s *)v314;
      if (os_log_type_enabled(v316, OS_LOG_TYPE_DEFAULT))
      {
        v317 = &v958;
        if ((v958.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          v317 = (std::string *)v958.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2804;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v317;
        _os_log_impl(&dword_0, v316, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Device Hints: %s.", v965, 0x1Cu);
      }
    }
  }

  v930 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v931 = 257;
  sub_51BD8(v903, @"disallowed ports", (uint64_t)&v930);
  if (v930)
  {
    if (v899)
    {
      v318 = sub_138E8(2);
      v319 = sub_138E8(34);
      v320 = 0;
      v321 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v322 = *(void *)(v318 + 8);
      while (1)
      {
        v323 = *(int *)&v965[4 * v321];
        v324 = v320;
        if (((v322 & v323) != 0) != ((*(void *)(v319 + 8) & v323) != 0)) {
          break;
        }
        v320 = 1;
        v321 = 1LL;
        if ((v324 & 1) != 0) {
          goto LABEL_437;
        }
      }

      if ((v322 & v323) == 0) {
        v318 = v319;
      }
LABEL_437:
      v325 = *(id *)v318;
      v326 = v325;
      if (v325)
      {
        v327 = (os_log_s *)v325;
        if (os_log_type_enabled(v327, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2813;
          *(_WORD *)&v965[18] = 2112;
          *(void *)&v965[20] = v930;
          _os_log_impl(&dword_0, v327, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Disallowed Ports: %@.", v965, 0x1Cu);
        }
      }
    }

    sub_6DD4();
    v328 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    for (j = 0; ; ++j)
    {
      v330 = v930;
      if (v930) {
        v330 = CFArrayGetCount(v930);
      }
      if (j >= v330) {
        break;
      }
      *(_DWORD *)v963 = 0;
      if ((sub_1A0E0C(&v930, j, v963) & 1) == 0)
      {
        v758 = sub_138E8(13);
        v759 = sub_8C7D4(1, *(void **)v758, *(void *)(v758 + 8));
        v760 = (void *)objc_claimAutoreleasedReturnValue(v759);
        v761 = v760;
        if (v760)
        {
          v762 = v760;
          if (os_log_type_enabled(v762, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2823;
            _os_log_impl( &dword_0,  v762,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationDisallowedPortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
          }
        }

        v763 = __cxa_allocate_exception(0x10uLL);
        *(void *)v763 = &off_4865A0;
        v763[2] = 1852797029;
      }

      sub_92EF8();
      v331 = sub_28AFEC(*(unsigned int *)v963);
      if (!v331)
      {
        v764 = sub_138E8(13);
        v765 = sub_8C7D4(1, *(void **)v764, *(void *)(v764 + 8));
        v766 = (void *)objc_claimAutoreleasedReturnValue(v765);
        v767 = v766;
        if (v766)
        {
          v768 = v766;
          if (os_log_type_enabled(v768, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2825;
            _os_log_impl( &dword_0,  v768,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: no virtual audio port object wit h the specified ID",  v965,  0x12u);
          }
        }

        v769 = __cxa_allocate_exception(0x10uLL);
        *(void *)v769 = &off_4865A0;
        v769[2] = 560947818;
      }

      v332 = *(std::__shared_weak_count **)(v331 + 96);
      if (!v332) {
        goto LABEL_458;
      }
      v333 = *(void *)(v331 + 88);
      p_shared_weak_owners = (unint64_t *)&v332->__shared_weak_owners_;
      do
        v335 = __ldxr(p_shared_weak_owners);
      while (__stxr(v335 + 1, p_shared_weak_owners));
      v336 = std::__shared_weak_count::lock(v332);
      if (v336)
      {
        v337 = v336;
        v338 = (unint64_t *)&v336->__shared_weak_owners_;
        do
          v339 = __ldxr(v338);
        while (__stxr(v339 + 1, v338));
        *(void *)v965 = v333;
        *(void *)&v965[8] = v336;
        p_shared_owners = (unint64_t *)&v336->__shared_owners_;
        do
          v341 = __ldaxr(p_shared_owners);
        while (__stlxr(v341 - 1, p_shared_owners));
        if (!v341)
        {
          ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
          std::__shared_weak_count::__release_weak(v337);
        }
      }

      else
      {
LABEL_458:
        *(void *)&v965[8] = 0LL;
        *(void *)v965 = 0LL;
      }

      sub_1331F0(v901, (unint64_t *)v965, (uint64_t)v965);
      if (*(void *)&v965[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v965[8]);
      }
      if (v332) {
        std::__shared_weak_count::__release_weak(v332);
      }
    }

    if (v328) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
  }

  sub_7D084(v965, "ignore ringer switch");
  v342 = sub_51C54(*v903, v965);
  v343 = v892;
  *v892 = v342;
  *((_BYTE *)v343 + 4) = BYTE4(v342);
  if ((v965[23] & 0x80000000) != 0) {
    operator delete(*(void **)v965);
  }
  if (v899 && *((_BYTE *)v905 + 364))
  {
    v344 = sub_138E8(2);
    v345 = sub_138E8(34);
    v346 = 0;
    v347 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v348 = *(void *)(v344 + 8);
    while (1)
    {
      v349 = *(int *)&v965[4 * v347];
      v350 = v346;
      if (((v348 & v349) != 0) != ((*(void *)(v345 + 8) & v349) != 0)) {
        break;
      }
      v346 = 1;
      v347 = 1LL;
      if ((v350 & 1) != 0) {
        goto LABEL_476;
      }
    }

    if ((v348 & v349) == 0) {
      v344 = v345;
    }
LABEL_476:
    v351 = *(id *)v344;
    v352 = v351;
    if (v351)
    {
      v353 = (os_log_s *)v351;
      if (os_log_type_enabled(v353, OS_LOG_TYPE_DEBUG))
      {
        if (!*((_BYTE *)v905 + 364)) {
          sub_8DEEC();
        }
        v354 = "false";
        v355 = *v892;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)v965 = 136315650;
        if (v355 == 1) {
          v354 = "true";
        }
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2836;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v354;
        _os_log_impl(&dword_0, v353, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Ignoring silent mode: %s.", v965, 0x1Cu);
      }
    }
  }

  v928 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v929 = 257;
  sub_51BD8(v903, @"aggregated ports", (uint64_t)&v928);
  if (v928)
  {
    v356 = sub_138E8(2);
    v357 = sub_138E8(34);
    v358 = 0;
    v359 = 0LL;
    v360 = (uint64_t *)(v897 + 82);
    *(void *)v965 = 0x100000002LL;
    v361 = *(void *)(v356 + 8);
    while (1)
    {
      v362 = *(int *)&v965[4 * v359];
      v363 = v358;
      if (((v361 & v362) != 0) != ((*(void *)(v357 + 8) & v362) != 0)) {
        break;
      }
      v358 = 1;
      v359 = 1LL;
      if ((v363 & 1) != 0) {
        goto LABEL_491;
      }
    }

    if ((v361 & v362) == 0) {
      v356 = v357;
    }
LABEL_491:
    v364 = *(id *)v356;
    v365 = v364;
    if (v364)
    {
      v366 = (os_log_s *)v364;
      if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2844;
        *(_WORD *)&v965[18] = 2112;
        *(void *)&v965[20] = v928;
        _os_log_impl(&dword_0, v366, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Aggregated Ports: %@.", v965, 0x1Cu);
      }
    }

    for (k = 0; ; ++k)
    {
      v368 = v928;
      if (v928) {
        v368 = CFArrayGetCount(v928);
      }
      if (k >= v368) {
        break;
      }
      *(_DWORD *)v963 = 0;
      if ((sub_1A0E0C(&v928, k, v963) & 1) == 0)
      {
        v770 = sub_138E8(13);
        v771 = sub_8C7D4(1, *(void **)v770, *(void *)(v770 + 8));
        v772 = (void *)objc_claimAutoreleasedReturnValue(v771);
        v773 = v772;
        if (v772)
        {
          v774 = v772;
          if (os_log_type_enabled(v774, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2851;
            _os_log_impl( &dword_0,  v774,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationAggregatedPortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
          }
        }

        v775 = __cxa_allocate_exception(0x10uLL);
        *(void *)v775 = &off_4865A0;
        v775[2] = 1852797029;
      }

      sub_57ADC(v360, *(unsigned int *)v963, *(int *)v963);
    }
  }

  v926 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v927 = 257;
  sub_51BD8(v903, @"deaggregated ports", (uint64_t)&v926);
  if (v926)
  {
    v369 = sub_138E8(2);
    v370 = sub_138E8(34);
    v371 = 0;
    v372 = 0LL;
    v373 = (uint64_t *)(v897 + 88);
    *(void *)v965 = 0x100000002LL;
    v374 = *(void *)(v369 + 8);
    while (1)
    {
      v375 = *(int *)&v965[4 * v372];
      v376 = v371;
      if (((v374 & v375) != 0) != ((*(void *)(v370 + 8) & v375) != 0)) {
        break;
      }
      v371 = 1;
      v372 = 1LL;
      if ((v376 & 1) != 0) {
        goto LABEL_508;
      }
    }

    if ((v374 & v375) == 0) {
      v369 = v370;
    }
LABEL_508:
    v377 = *(id *)v369;
    v378 = v377;
    if (v377)
    {
      v379 = (os_log_s *)v377;
      if (os_log_type_enabled(v379, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2862;
        *(_WORD *)&v965[18] = 2112;
        *(void *)&v965[20] = v926;
        _os_log_impl(&dword_0, v379, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Deaggregated Ports: %@.", v965, 0x1Cu);
      }
    }

    for (m = 0; ; ++m)
    {
      v381 = v926;
      if (v926) {
        v381 = CFArrayGetCount(v926);
      }
      if (m >= v381) {
        break;
      }
      *(_DWORD *)v963 = 0;
      if ((sub_1A0E0C(&v926, m, v963) & 1) == 0)
      {
        v776 = sub_138E8(13);
        v777 = sub_8C7D4(1, *(void **)v776, *(void *)(v776 + 8));
        v778 = (void *)objc_claimAutoreleasedReturnValue(v777);
        v779 = v778;
        if (v778)
        {
          v780 = v778;
          if (os_log_type_enabled(v780, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2869;
            _os_log_impl( &dword_0,  v780,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRou teConfigurationDeaggregatedPortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
          }
        }

        v781 = __cxa_allocate_exception(0x10uLL);
        *(void *)v781 = &off_4865A0;
        v781[2] = 1852797029;
      }

      sub_57ADC(v373, *(unsigned int *)v963, *(int *)v963);
    }
  }

  v925 = *v905;
  v382 = sub_51A88(*v903, @"category", &v925);
  if ((v382 & v899) == 1)
  {
    v383 = sub_138E8(2);
    v384 = sub_138E8(34);
    v385 = 0;
    v386 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v387 = *(void *)(v383 + 8);
    while (1)
    {
      v388 = *(int *)&v965[4 * v386];
      v389 = v385;
      if (((v387 & v388) != 0) != ((*(void *)(v384 + 8) & v388) != 0)) {
        break;
      }
      v385 = 1;
      v386 = 1LL;
      if ((v389 & 1) != 0) {
        goto LABEL_525;
      }
    }

    if ((v387 & v388) == 0) {
      v383 = v384;
    }
LABEL_525:
    v390 = *(id *)v383;
    v391 = v390;
    if (v390)
    {
      v392 = (os_log_s *)v390;
      if (os_log_type_enabled(v392, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v963, v925);
        v393 = v963[23] >= 0 ? v963 : *(_BYTE **)v963;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2882;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v393;
        _os_log_impl(&dword_0, v392, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Category: %s.", v965, 0x1Cu);
        if ((v963[23] & 0x80000000) != 0) {
          operator delete(*(void **)v963);
        }
      }
    }
  }

  v924 = v905[1];
  v394 = sub_51A88(*v903, @"mode", &v924);
  if ((v394 & v899) == 1)
  {
    v395 = sub_138E8(2);
    v396 = sub_138E8(34);
    v397 = 0;
    v398 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v399 = *(void *)(v395 + 8);
    while (1)
    {
      v400 = *(int *)&v965[4 * v398];
      v401 = v397;
      if (((v399 & v400) != 0) != ((*(void *)(v396 + 8) & v400) != 0)) {
        break;
      }
      v397 = 1;
      v398 = 1LL;
      if ((v401 & 1) != 0) {
        goto LABEL_541;
      }
    }

    if ((v399 & v400) == 0) {
      v395 = v396;
    }
LABEL_541:
    v402 = *(id *)v395;
    v403 = v402;
    if (v402)
    {
      v404 = (os_log_s *)v402;
      if (os_log_type_enabled(v404, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v963, v924);
        v405 = v963[23] >= 0 ? v963 : *(_BYTE **)v963;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2890;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v405;
        _os_log_impl(&dword_0, v404, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Mode: %s.", v965, 0x1Cu);
        if ((v963[23] & 0x80000000) != 0) {
          operator delete(*(void **)v963);
        }
      }
    }
  }

  v923 = 0LL;
  v406 = sub_51EE8(*v903, @"aggregate device clock device", &v923);
  v407 = (std::string *)(v897 + 54);
  if (v406)
  {
    if (v899)
    {
      v408 = sub_138E8(2);
      v409 = sub_138E8(34);
      v410 = 0;
      v411 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v412 = *(void *)(v408 + 8);
      while (1)
      {
        v413 = *(int *)&v965[4 * v411];
        v414 = v410;
        if (((v412 & v413) != 0) != ((*(void *)(v409 + 8) & v413) != 0)) {
          break;
        }
        v410 = 1;
        v411 = 1LL;
        if ((v414 & 1) != 0) {
          goto LABEL_558;
        }
      }

      if ((v412 & v413) == 0) {
        v408 = v409;
      }
LABEL_558:
      v415 = *(id *)v408;
      v416 = v415;
      if (v415)
      {
        v417 = (os_log_s *)v415;
        if (os_log_type_enabled(v417, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2898;
          *(_WORD *)&v965[18] = 2112;
          *(void *)&v965[20] = v923;
          _os_log_impl(&dword_0, v417, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Aggregate Clock Device: %@", v965, 0x1Cu);
        }
      }
    }

    v418 = v923;
    if (v923) {
      CFRetain(v923);
    }
    sub_7F234(v963, v418);
    if (!*(void *)v963)
    {
      v859 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v859, "Could not construct");
    }

    sub_7D2D4((CFTypeID)v965, *(const __CFString **)v963);
    if (*(void *)v963) {
      CFRelease(*(CFTypeRef *)v963);
    }
    if (v965[24])
    {
      v419 = v965[23];
      v420 = v965[23];
      if (v965[23] < 0) {
        v419 = *(void *)&v965[8];
      }
      if (!v419) {
        goto LABEL_603;
      }
      if (*((_BYTE *)v905 + 400))
      {
        std::string::operator=(v407, (const std::string *)v965);
      }

      else
      {
        if ((v965[23] & 0x80000000) != 0)
        {
          sub_24054(v407, *(void **)v965, *(unint64_t *)&v965[8]);
        }

        else
        {
          *(_OWORD *)&v407->__r_.__value_.__l.__data_ = *(_OWORD *)v965;
          v407->__r_.__value_.__l.__cap_ = *(void *)&v965[16];
        }

        *((_BYTE *)v905 + 400) = 1;
      }

      v420 = v965[23];
      if (v965[24])
      {
LABEL_603:
        if (v420 < 0) {
          operator delete(*(void **)v965);
        }
      }
    }
  }

  if (!*((_BYTE *)v905 + 400) && v924 == 1768057203)
  {
    sub_7D084(v965, "NetworkUplinkClock_UID");
    sub_F2F1C((uint64_t)v407, (__int128 *)v965);
    if ((v965[23] & 0x80000000) != 0) {
      operator delete(*(void **)v965);
    }
  }

  v437 = v953;
  if (sub_51A88(*v903, @"optional output mode", v964))
  {
    if (v899)
    {
      v438 = sub_138E8(2);
      v439 = sub_138E8(34);
      v440 = 0;
      v441 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v442 = *(void *)(v438 + 8);
      while (1)
      {
        v443 = *(int *)&v965[4 * v441];
        v444 = v440;
        if (((v442 & v443) != 0) != ((*(void *)(v439 + 8) & v443) != 0)) {
          break;
        }
        v440 = 1;
        v441 = 1LL;
        if ((v444 & 1) != 0) {
          goto LABEL_620;
        }
      }

      if ((v442 & v443) == 0) {
        v438 = v439;
      }
LABEL_620:
      v448 = *(id *)v438;
      v449 = v448;
      if (v448)
      {
        v450 = (os_log_s *)v448;
        if (os_log_type_enabled(v450, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(v963, *(unsigned int *)v964);
          v451 = v963[23] >= 0 ? v963 : *(_BYTE **)v963;
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2569;
          *(_WORD *)&v965[18] = 2080;
          *(void *)&v965[20] = v451;
          _os_log_impl(&dword_0, v450, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Optional Output Mode: %s", v965, 0x1Cu);
          if ((v963[23] & 0x80000000) != 0) {
            operator delete(*(void **)v963);
          }
        }
      }
    }

    v447 = *(_DWORD *)v964 & 0xFFFFFF00;
    v446 = v964[0];
    v445 = 0x100000000LL;
  }

  else if (v437)
  {
    v445 = 0x100000000LL;
    v446 = 102;
    v447 = 1768776704;
  }

  else
  {
    v446 = 0;
    v447 = 0;
    v445 = 0LL;
  }

  v921[0] = v925;
  v921[1] = v924;
  v922 = v445 | v447 | v446;
  v919 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v920 = 257;
  sub_51AEC(v903, @"initiation context", (uint64_t)&v919);
  if (!v919)
  {
    *(_DWORD *)v965 = v889;
    memset(&v965[8], 0, 24);
    *(void *)&v965[32] = 0x756E64656175746FLL;
    goto LABEL_673;
  }

  v452 = sub_6CE34(v921, &v919);
  if ((_DWORD)v452 != 1635087471)
  {
    sub_6D424((std::string *)v963, &v919, v452);
    *(_DWORD *)v965 = v452;
    if ((v963[23] & 0x80000000) != 0)
    {
      sub_24054(&v965[8], *(void **)v963, *(unint64_t *)&v963[8]);
      *(void *)&v965[32] = 0x756E64656175746FLL;
      if ((v963[23] & 0x80000000) != 0) {
        operator delete(*(void **)v963);
      }
    }

    else
    {
      *(_OWORD *)&v965[8] = *(_OWORD *)v963;
      *(void *)&v965[24] = *(void *)&v963[16];
      *(void *)&v965[32] = 0x756E64656175746FLL;
    }

    if (v919)
    {
      *(_DWORD *)v963 = 1970168933;
      if (CFDictionaryGetCount(v919))
      {
        v462 = CFDictionaryContainsKey(v919, @"initiation call direction");
        if (v462 | CFDictionaryContainsKey(v919, @"activation call direction"))
        {
          if (v462) {
            v463 = @"initiation call direction";
          }
          else {
            v463 = @"activation call direction";
          }
          sub_51A88(v919, v463, v963);
        }
      }

      *(_DWORD *)&v965[36] = *(_DWORD *)v963;
      if (v919)
      {
        *(_DWORD *)v964 = 1635087471;
        if (!CFDictionaryGetCount(v919))
        {
LABEL_657:
          *(_DWORD *)&v965[32] = *(_DWORD *)v964;
          goto LABEL_673;
        }

        v464 = CFDictionaryContainsKey(v919, @"initiation accessibility preference");
        if (v464 | CFDictionaryContainsKey(v919, @"activation accessibility preference"))
        {
          if (v464) {
            v465 = @"initiation accessibility preference";
          }
          else {
            v465 = @"activation accessibility preference";
          }
          sub_51A88(v919, v465, v964);
          goto LABEL_657;
        }

        v878 = (os_log_t *)sub_138E8(13);
        v879 = *v878;
        if (*v878 && os_log_type_enabled(*v878, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v963 = 136315394;
          *(void *)&v963[4] = "VirtualAudio_Utilities.cpp";
          *(_WORD *)&v963[12] = 1024;
          *(_DWORD *)&v963[14] = 564;
          _os_log_impl( &dword_0,  v879,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Route activation description does not contain accessibility preference",  v963,  0x12u);
        }

        v868 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v868, "Route activation description does not contain accessibility preference");
LABEL_1388:
      }

      v869 = (os_log_t *)sub_138E8(13);
      v870 = *v869;
      if (*v869 && os_log_type_enabled(*v869, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v963 = 136315394;
        *(void *)&v963[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&v963[12] = 1024;
        *(_DWORD *)&v963[14] = 556;
        _os_log_impl( &dword_0,  v870,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v963,  0x12u);
      }
    }

    else
    {
      v866 = (os_log_t *)sub_138E8(13);
      v867 = *v866;
      if (*v866 && os_log_type_enabled(*v866, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v963 = 136315394;
        *(void *)&v963[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&v963[12] = 1024;
        *(_DWORD *)&v963[14] = 579;
        _os_log_impl( &dword_0,  v867,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v963,  0x12u);
      }
    }

    v868 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v868, "Precondition failure.");
    goto LABEL_1388;
  }

  v453 = (uint64_t)v898;
  v454 = *((_DWORD *)v898 + 60);
  if (v454 == v889)
  {
    v455 = sub_138E8(2);
    v456 = sub_138E8(34);
    v457 = 0;
    v458 = 0LL;
    *(void *)v963 = 0x100000002LL;
    v459 = *(void *)(v455 + 8);
    while (1)
    {
      v460 = *(int *)&v963[4 * v458];
      v461 = v457;
      if (((v459 & v460) != 0) != ((*(void *)(v456 + 8) & v460) != 0)) {
        break;
      }
      v457 = 1;
      v458 = 1LL;
      if ((v461 & 1) != 0) {
        goto LABEL_660;
      }
    }

    if ((v459 & v460) == 0) {
      v455 = v456;
    }
LABEL_660:
    v466 = *(id *)v455;
    v467 = v466;
    if (v466)
    {
      v468 = (os_log_s *)v466;
      if (os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v964, 1635087471LL);
        v469 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
        *(_DWORD *)v963 = 136315650;
        *(void *)&v963[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v963[12] = 1024;
        *(_DWORD *)&v963[14] = 3220;
        *(_WORD *)&v963[18] = 2080;
        *(void *)&v963[20] = v469;
        _os_log_impl( &dword_0,  v468,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Current trigger is '%s', but previous trigger is unknown",  v963,  0x1Cu);
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
      }
    }

    v453 = (uint64_t)v898;
    v454 = *((_DWORD *)v898 + 60);
  }

  *(_DWORD *)v965 = v454;
  if (*(char *)(v453 + 271) < 0)
  {
    sub_24054(&v965[8], *(void **)(v453 + 248), *(void *)(v453 + 256));
  }

  else
  {
    *(_OWORD *)&v965[8] = *(_OWORD *)(v453 + 248);
    *(void *)&v965[24] = *(void *)(v453 + 264);
  }

  *(void *)&v965[32] = v898[34];
LABEL_673:
  v470 = v905;
  v905[38] = *(_DWORD *)v965;
  v471 = v897;
  *(_OWORD *)v897 = *(_OWORD *)&v965[8];
  v472 = *(void *)&v965[32];
  *((void *)v471 + 2) = *(void *)&v965[24];
  *((void *)v470 + 23) = v472;
  if ((_os_feature_enabled_impl("VirtualAudio", "additive_routing_logicpro") & 1) == 0)
  {
    v473 = *v903;
    if (*v903) {
      CFRetain(*v903);
    }
    sub_3617C(v964, v473);
    if (!*(void *)v964)
    {
      v860 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v860, "Could not construct");
    }

    *(void *)v965 = 0LL;
    sub_8C83C(&v962, *(const __CFDictionary **)v964, "persistent route", v965);
    if (*(void *)v965) {
      CFRelease(*(CFTypeRef *)v965);
    }
    sub_E6650((uint64_t)v965, (const __CFDictionary **)&v962);
    sub_51F40(v886);
    v474 = v905;
    *((_OWORD *)v905 + 12) = *(_OWORD *)v965;
    *((void *)v474 + 26) = *(void *)&v965[16];
    memset(v965, 0, 24);
    sub_51F40((void **)v474 + 27);
    *(_OWORD *)(v474 + 54) = *(_OWORD *)&v965[24];
    *((void *)v474 + 29) = v966;
    v966 = 0LL;
    *(void *)&v965[32] = 0LL;
    *(void *)&v965[24] = 0LL;
    sub_52024((uint64_t)(v474 + 60), (uint64_t *)&v967);
    sub_52024((uint64_t)v884, v972);
    sub_52024((uint64_t)v885, v973);
    sub_51FD8((char *)v973[2]);
    v475 = (void *)v973[0];
    v973[0] = 0LL;
    if (v475) {
      operator delete(v475);
    }
    sub_51FD8((char *)v972[2]);
    v476 = (void *)v972[0];
    v972[0] = 0LL;
    if (v476) {
      operator delete(v476);
    }
    sub_51FD8(v969);
    v477 = v967;
    v967 = 0LL;
    if (v477) {
      operator delete(v477);
    }
    *(void *)v963 = &v965[24];
    sub_8C8F0((void ***)v963);
    *(void *)v963 = v965;
    sub_8C8F0((void ***)v963);
    if (v899 && (*((void *)v905 + 33) || *((void *)v905 + 38) || *((void *)v905 + 43)))
    {
      v478 = sub_138E8(2);
      v479 = sub_138E8(34);
      v480 = 0;
      v481 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v482 = *(void *)(v478 + 8);
      while (1)
      {
        v483 = *(int *)&v965[4 * v481];
        v484 = v480;
        if (((v482 & v483) != 0) != ((*(void *)(v479 + 8) & v483) != 0)) {
          break;
        }
        v480 = 1;
        v481 = 1LL;
        if ((v484 & 1) != 0) {
          goto LABEL_697;
        }
      }

      if ((v482 & v483) == 0) {
        v478 = v479;
      }
LABEL_697:
      v485 = *(id *)v478;
      v486 = v485;
      if (v485)
      {
        v487 = (os_log_s *)v485;
        if (os_log_type_enabled(v487, OS_LOG_TYPE_DEFAULT))
        {
          sub_173AF4((std::string *)v963, v886);
          v488 = v963[23] >= 0 ? v963 : *(_BYTE **)v963;
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 2933;
          *(_WORD *)&v965[18] = 2080;
          *(void *)&v965[20] = v488;
          _os_log_impl(&dword_0, v487, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Persistent route info: %s.", v965, 0x1Cu);
          if ((v963[23] & 0x80000000) != 0) {
            operator delete(*(void **)v963);
          }
        }
      }
    }

    if (v962.__r_.__value_.__r.__words[0]) {
      CFRelease(v962.__r_.__value_.__l.__data_);
    }
    if (*(void *)v964) {
      CFRelease(*(CFTypeRef *)v964);
    }
  }

  v489 = v905 + 185;
  v490 = sub_51A88(*v903, @"echo cancelled input", v905 + 185);
  if ((v490 & v899) == 1)
  {
    v491 = sub_138E8(2);
    v492 = sub_138E8(34);
    v493 = 0;
    v494 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v495 = *(void *)(v491 + 8);
    while (1)
    {
      v496 = *(int *)&v965[4 * v494];
      v497 = v493;
      if (((v495 & v496) != 0) != ((*(void *)(v492 + 8) & v496) != 0)) {
        break;
      }
      v493 = 1;
      v494 = 1LL;
      if ((v497 & 1) != 0) {
        goto LABEL_717;
      }
    }

    if ((v495 & v496) == 0) {
      v491 = v492;
    }
LABEL_717:
    v498 = *(id *)v491;
    v499 = v498;
    if (v498)
    {
      v500 = (os_log_s *)v498;
      if (os_log_type_enabled(v500, OS_LOG_TYPE_DEFAULT))
      {
        v501 = *v489;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 2941;
        *(_WORD *)&v965[18] = 1024;
        *(_DWORD *)&v965[20] = v501;
        _os_log_impl(&dword_0, v500, OS_LOG_TYPE_DEFAULT, "%25s:%-5d - Echo cancelled input: %u", v965, 0x18u);
      }
    }
  }

  LOBYTE(v917) = 0;
  v918 = 0;
  sub_E5784(v916, (uint64_t)v891);
  sub_E57D8((uint64_t)v963, (uint64_t)v921, (uint64_t)v916, *v489, (uint64_t)&v917);
  if (v916[16]) {
    sub_13850((uint64_t)v916);
  }
  *(_OWORD *)v905 = *(_OWORD *)v963;
  v914 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v915 = 257;
  if (CFDictionaryContainsKey(*v903, @"overridden ports"))
  {
    sub_51BD8(v903, @"overridden ports", (uint64_t)&v914);
    if (v914 && CFArrayGetCount(v914))
    {
      if (v899)
      {
        v502 = sub_138E8(2);
        v503 = sub_138E8(34);
        v504 = 0;
        v505 = 0LL;
        *(void *)v965 = 0x100000002LL;
        v506 = *(void *)(v502 + 8);
        while (1)
        {
          v507 = *(int *)&v965[4 * v505];
          v508 = v504;
          if (((v506 & v507) != 0) != ((*(void *)(v503 + 8) & v507) != 0)) {
            break;
          }
          v504 = 1;
          v505 = 1LL;
          if ((v508 & 1) != 0) {
            goto LABEL_742;
          }
        }

        if ((v506 & v507) == 0) {
          v502 = v503;
        }
LABEL_742:
        v513 = *(id *)v502;
        v514 = v513;
        if (v513)
        {
          v515 = (os_log_s *)v513;
          if (os_log_type_enabled(v515, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v965 = 136315650;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 2960;
            *(_WORD *)&v965[18] = 2112;
            *(void *)&v965[20] = v914;
            _os_log_impl(&dword_0, v515, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Overridden Ports: %@.", v965, 0x1Cu);
          }
        }
      }

      sub_6DD4();
      v516 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
      for (n = 0; ; ++n)
      {
        v518 = v914;
        if (v914) {
          v518 = CFArrayGetCount(v914);
        }
        if (n >= v518) {
          break;
        }
        *(_DWORD *)v964 = 0;
        if ((sub_1A0E0C(&v914, n, v964) & 1) == 0)
        {
          v788 = sub_138E8(13);
          v789 = sub_8C7D4(1, *(void **)v788, *(void *)(v788 + 8));
          v790 = (void *)objc_claimAutoreleasedReturnValue(v789);
          v791 = v790;
          if (v790)
          {
            v792 = v790;
            if (os_log_type_enabled(v792, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v965 = 136315394;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2970;
              _os_log_impl( &dword_0,  v792,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInR outeConfigurationOverriddenPortsKey does not contain VirtualAudioPortIDs.",  v965,  0x12u);
            }
          }

          v793 = __cxa_allocate_exception(0x10uLL);
          *(void *)v793 = &off_4865A0;
          v793[2] = 1852797029;
        }

        sub_92EF8();
        v519 = sub_28AFEC(*(unsigned int *)v964);
        v520 = v519;
        if (!v519)
        {
          v794 = sub_138E8(13);
          v795 = sub_8C7D4(1, *(void **)v794, *(void *)(v794 + 8));
          v796 = (void *)objc_claimAutoreleasedReturnValue(v795);
          v797 = v796;
          if (v796)
          {
            v798 = v796;
            if (os_log_type_enabled(v798, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v965 = 136315394;
              *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v965[12] = 1024;
              *(_DWORD *)&v965[14] = 2973;
              _os_log_impl( &dword_0,  v798,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theVAPort is NULL]: no virtual audio port object w ith the specified ID",  v965,  0x12u);
            }
          }

          v799 = __cxa_allocate_exception(0x10uLL);
          *(void *)v799 = &off_4865A0;
          v799[2] = 560947818;
        }

        v521 = (void *)*v202;
        if (*v202 != (void)v904)
        {
          while (v521[4] != v519)
          {
            v522 = (void *)v521[1];
            if (v522)
            {
              do
              {
                v523 = v522;
                v522 = (void *)*v522;
              }

              while (v522);
            }

            else
            {
              do
              {
                v523 = (void *)v521[2];
                v627 = *v523 == (void)v521;
                v521 = v523;
              }

              while (!v627);
            }

            v521 = v523;
            if (v523 == (void *)v904) {
              goto LABEL_763;
            }
          }

          if (v521 != (void *)v904)
          {
            v829 = sub_138E8(13);
            v830 = sub_8C7D4(1, *(void **)v829, *(void *)(v829 + 8));
            v831 = (void *)objc_claimAutoreleasedReturnValue(v830);
            v832 = v831;
            if (v831)
            {
              v833 = v831;
              if (os_log_type_enabled(v833, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v965 = 136315394;
                *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v965[12] = 1024;
                *(_DWORD *)&v965[14] = 2978;
                _os_log_impl( &dword_0,  v833,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Invalid use of route configuration! Cannot override to a por t that is set as unroutable!",  v965,  0x12u);
              }
            }

            v834 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error( v834,  "Invalid use of route configuration! Cannot override to a port that is set as unroutable!");
          }
        }

LABEL_763:
        if (!sub_265AC8(v905))
        {
          v524 = *(void *)(v520 + 88);
          v525 = *(std::__shared_weak_count **)(v520 + 96);
          *(void *)v965 = v524;
          *(void *)&v965[8] = v525;
          if (v525)
          {
            v526 = (unint64_t *)&v525->__shared_weak_owners_;
            do
              v527 = __ldxr(v526);
            while (__stxr(v527 + 1, v526));
          }

          sub_125FBC(v896, (unint64_t *)v965, (uint64_t *)v965);
          if (v525) {
            std::__shared_weak_count::__release_weak(v525);
          }
        }
      }

      if (v516) {
        (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
      }
    }
  }

  else
  {
    if (!*v903)
    {
      v861 = sub_138E8(13);
      v862 = sub_8C7D4(1, *(void **)v861, *(void *)(v861 + 8));
      v863 = (os_log_s *)objc_claimAutoreleasedReturnValue(v862);
      v864 = v863;
      if (v863 && os_log_type_enabled(v863, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 901;
        _os_log_impl( &dword_0,  v864,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v965,  0x12u);
      }

      v865 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v865, "Precondition failure.");
    }

    if (CFDictionaryGetCount(*v903) == 1
      && CFDictionaryContainsKey(*v903, @"voice processing configuration")
      && !sub_265AC8(v905))
    {
      v509 = (uint64_t)v898[14];
      *(void *)v964 = v964;
      *(void *)&v964[8] = v964;
      *(void *)&v964[16] = 0LL;
      sub_13B3F8((uint64_t)v965, v509, (uint64_t)v964);
      v510 = v905;
      sub_FF3B8(*((void **)v905 + 3));
      v511 = *(void **)&v965[8];
      v510[2] = *(void *)v965;
      v510[3] = v511;
      v512 = *(void *)&v965[16];
      v510[4] = *(void *)&v965[16];
      if (v512)
      {
        v511[2] = v883;
        *(void *)v965 = &v965[8];
        *(void *)&v965[8] = 0LL;
        *(void *)&v965[16] = 0LL;
        v511 = 0LL;
      }

      else
      {
        *v896 = v883;
      }

      sub_FF3B8(v511);
      sub_85B80((uint64_t *)v964);
    }
  }

  v528 = v905 + 158;
  if (v953 && !*((_DWORD *)v898 + 100)) {
    sub_22C714((uint64_t)(v905 + 158));
  }
  if (*v528)
  {
    v529 = v905;
    *((_BYTE *)v905 + 370) = 1;
    *((_BYTE *)v529 + 371) = *((_BYTE *)v529 + 636);
    if (!*((void *)v529 + 81))
    {
LABEL_791:
      v535 = *(id *)sub_138E8(2);
      v536 = v535;
      if (v535)
      {
        v537 = (os_log_s *)v535;
        if (os_log_type_enabled(v537, OS_LOG_TYPE_DEFAULT))
        {
          sub_22C764((std::string *)v964, v528);
          v538 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 3022;
          *(_WORD *)&v965[18] = 2080;
          *(void *)&v965[20] = v538;
          _os_log_impl(&dword_0, v537, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Colistening state: %s", v965, 0x1Cu);
          if ((v964[23] & 0x80000000) != 0) {
            operator delete(*(void **)v964);
          }
        }
      }

      goto LABEL_800;
    }

    sub_13315C(v901, (unint64_t *)v905 + 80, (uint64_t *)v905 + 80);
    *(void *)v965 = 0LL;
    v530 = (std::__shared_weak_count *)*((void *)v905 + 83);
    if (!v530)
    {
LABEL_790:
      if (!*v528) {
        goto LABEL_800;
      }
      goto LABEL_791;
    }

    v531 = std::__shared_weak_count::lock(v530);
    *(void *)&v965[8] = v531;
    if (v531)
    {
      v532 = *((void *)v905 + 82);
      *(void *)v965 = v532;
      if (!v532) {
        goto LABEL_785;
      }
    }

    else
    {
      v532 = *(void *)v965;
      if (!*(void *)v965)
      {
LABEL_785:
        if (v531)
        {
          v533 = (unint64_t *)&v531->__shared_owners_;
          do
            v534 = __ldaxr(v533);
          while (__stlxr(v534 - 1, v533));
          if (!v534)
          {
            ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
            std::__shared_weak_count::__release_weak(v531);
          }
        }

        goto LABEL_790;
      }
    }

    sub_57ADC(v900, *(_DWORD *)(v532 + 144), *(_DWORD *)(v532 + 144));
    v531 = *(std::__shared_weak_count **)&v965[8];
    goto LABEL_785;
  }

LABEL_800:
  v539 = v905 + 154;
  v905[154] = v917;
  *((_BYTE *)v539 + 4) = v918;
  v913 = 0LL;
  if (sub_529CC(*v903, @"multichannel mode preferences", &v913))
  {
    v540 = v913;
    if (v913) {
      CFRetain(v913);
    }
    sub_35F84(v965, v540);
    v541 = (const void *)*((void *)v905 + 78);
    v542 = *(const void **)v965;
    *((void *)v905 + 78) = *(void *)v965;
    if (v542) {
      CFRetain(v542);
    }
    if (v541) {
      CFRelease(v541);
    }
    if (*(void *)v965) {
      CFRelease(*(CFTypeRef *)v965);
    }
  }

  if (v919)
  {
    v543 = 1886545251;
    v544 = v905[38];
    if (sub_6D2AC(v544))
    {
      v545 = v894;
      switch(v544)
      {
        case 1651795060:
        case 1751414371:
          sub_57ADC((uint64_t *)v894, 0x70687062u, 1885892706);
          v544 = v905[38];
          v545 = v894;
          break;
        case 1752396914:
          if (v905[1] == 1987208039) {
            v905[1] = 1986556788;
          }
          goto LABEL_823;
        case 845504882:
          goto LABEL_822;
      }

      goto LABEL_823;
    }

    v545 = v894;
    if (v544 == 1768764005)
    {
LABEL_822:
      sub_13B6B0(v545, 0x70726563u);
      v545 = v894;
      v543 = 1886613611;
      goto LABEL_823;
    }

    if (v544 == 1768780647)
    {
LABEL_823:
      sub_57ADC((uint64_t *)v545, v543, v543);
      goto LABEL_824;
    }

    if (sub_6E138(v544))
    {
      sub_265D4C((uint64_t)v898, (uint64_t)v905);
    }

    else if (v544 != v889)
    {
      v619 = *(id *)sub_138E8(13);
      v620 = v619;
      if (v619)
      {
        v621 = (os_log_s *)v619;
        if (os_log_type_enabled(v621, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v964, v905[38]);
          v622 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
          *(_DWORD *)v965 = 136315650;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 3672;
          *(_WORD *)&v965[18] = 2080;
          *(void *)&v965[20] = v622;
          _os_log_impl( &dword_0,  v621,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid route activation trigger - %s",  v965,  0x1Cu);
          if ((v964[23] & 0x80000000) != 0) {
            operator delete(*(void **)v964);
          }
        }
      }
    }
  }

LABEL_824:
  v912 = 0;
  if (sub_52C24(*v903, @"default to speaker", &v912))
  {
    if (*v905 == 1668509810 || *v905 == 1668309362)
    {
      if (v912) {
        sub_57ADC((uint64_t *)v894, 0x70726563u, 1886545251);
      }
    }

    else
    {
      v546 = sub_138E8(2);
      v547 = sub_138E8(34);
      v548 = 0;
      v549 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v550 = *(void *)(v546 + 8);
      while (1)
      {
        v551 = *(int *)&v965[4 * v549];
        v552 = v548;
        if (((v550 & v551) != 0) != ((*(void *)(v547 + 8) & v551) != 0)) {
          break;
        }
        v548 = 1;
        v549 = 1LL;
        if ((v552 & 1) != 0) {
          goto LABEL_835;
        }
      }

      if ((v550 & v551) == 0) {
        v546 = v547;
      }
LABEL_835:
      v553 = *(id *)v546;
      v554 = v553;
      if (v553)
      {
        v555 = (os_log_s *)v553;
        if (os_log_type_enabled(v555, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v965 = 136315394;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 3060;
          _os_log_impl( &dword_0,  v555,  OS_LOG_TYPE_ERROR,  "%25s:%-5d kVirtualAudioPlugInRouteConfigurationDefaultToSpeakerKey used with wrong category",  v965,  0x12u);
        }
      }
    }
  }

  v911 = 0;
  v556 = sub_52C24(*v903, @"disallow hfp", &v911);
  v557 = (uint64_t *)v894;
  if (v556)
  {
    v558 = *v905;
    if (*v905 == 1668309362 || v558 == 1668509810 || v558 == 1668441443)
    {
      if (v911)
      {
        sub_57ADC((uint64_t *)v894, 0x706D6274u, 1886216820);
        sub_57ADC(v557, 0x70687062u, 1885892706);
      }
    }

    else
    {
      v559 = sub_138E8(2);
      v560 = sub_138E8(34);
      v561 = 0;
      v562 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v563 = *(void *)(v559 + 8);
      while (1)
      {
        v564 = *(int *)&v965[4 * v562];
        v565 = v561;
        if (((v563 & v564) != 0) != ((*(void *)(v560 + 8) & v564) != 0)) {
          break;
        }
        v561 = 1;
        v562 = 1LL;
        if ((v565 & 1) != 0) {
          goto LABEL_852;
        }
      }

      if ((v563 & v564) == 0) {
        v559 = v560;
      }
LABEL_852:
      v566 = *(id *)v559;
      v567 = v566;
      if (v566)
      {
        v568 = (os_log_s *)v566;
        if (os_log_type_enabled(v568, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v965 = 136315394;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 3081;
          _os_log_impl( &dword_0,  v568,  OS_LOG_TYPE_ERROR,  "%25s:%-5d kVirtualAudioPlugInRouteConfigurationDisallowHFPKey used with wrong category",  v965,  0x12u);
        }
      }
    }
  }

  sub_7D084(v965, "decoupled input/output");
  v569 = sub_51C54(*v903, v965);
  if ((v965[23] & 0x80000000) != 0) {
    operator delete(*(void **)v965);
  }
  if (!HIDWORD(v569))
  {
    if (*v905 != 1668309362) {
      goto LABEL_887;
    }
    v570 = 1684366192;
    if (v905[1] != 1768778864) {
      goto LABEL_887;
    }
    goto LABEL_886;
  }

  if (!(_DWORD)v569) {
    goto LABEL_885;
  }
  v572 = *v905;
  v571 = v905[1];
  if ((_DWORD)v572 != 1667330668 && (_DWORD)v572 != 1668309362)
  {
    v871 = sub_138E8(13);
    v872 = sub_8C7D4(1, *(void **)v871, *(void *)(v871 + 8));
    v873 = (void *)objc_claimAutoreleasedReturnValue(v872);
    v874 = v873;
    if (v873)
    {
      v875 = v873;
      if (os_log_type_enabled(v875, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v964, v572);
        v876 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 3099;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v876;
        _os_log_impl( &dword_0,  v875,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInRouteConfigurationDecoupledInp utOutputKey can only be true when category is  kVirtualAudioPlugInRoutingCategoryPlayAndRecord  or kVi rtualAudioPlugInRoutingCategoryEARCLoopback; currently requested category is %s.",
          v965,
          0x1Cu);
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
      }
    }

    v877 = __cxa_allocate_exception(0x10uLL);
    *(void *)v877 = &off_4865A0;
    v877[2] = 1852797029;
  }

  if (v571 <= 1987077986)
  {
    if (v571 == 1768057203) {
      goto LABEL_873;
    }
    v573 = 1919776355;
  }

  else
  {
    if (v571 == 1987077987 || v571 == 1987081839)
    {
LABEL_873:
      if (v899)
      {
        v574 = sub_138E8(2);
        v575 = sub_138E8(34);
        v576 = 0;
        v577 = 0LL;
        *(void *)v965 = 0x100000002LL;
        v578 = *(void *)(v574 + 8);
        while (1)
        {
          v579 = *(int *)&v965[4 * v577];
          v580 = v576;
          if (((v578 & v579) != 0) != ((*(void *)(v575 + 8) & v579) != 0)) {
            break;
          }
          v576 = 1;
          v577 = 1LL;
          if ((v580 & 1) != 0) {
            goto LABEL_880;
          }
        }

        if ((v578 & v579) == 0) {
          v574 = v575;
        }
LABEL_880:
        v581 = *(id *)v574;
        v582 = v581;
        if (v581)
        {
          v583 = (os_log_s *)v581;
          if (os_log_type_enabled(v583, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v965 = 136315394;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 3106;
            _os_log_impl( &dword_0,  v583,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Overriding unsupported StreamCouplingPolicy::DecoupleInputOutput to StreamCouplingPolicy::CoupleInputOutput.",  v965,  0x12u);
          }
        }
      }

LABEL_885:
      v570 = 1668248944;
      goto LABEL_886;
    }

    v573 = 1987081833;
  }

  v570 = 1684366192;
  if (v571 == v573) {
    goto LABEL_873;
  }
LABEL_886:
  v905[36] = v570;
LABEL_887:
  v909 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v910 = 257;
  sub_51BD8(v903, @"allowed port types", (uint64_t)&v909);
  if (!v909) {
    goto LABEL_1002;
  }
  if (v899)
  {
    v584 = sub_138E8(2);
    v585 = sub_138E8(34);
    v586 = 0;
    v587 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v588 = *(void *)(v584 + 8);
    while (1)
    {
      v589 = *(int *)&v965[4 * v587];
      v590 = v586;
      if (((v588 & v589) != 0) != ((*(void *)(v585 + 8) & v589) != 0)) {
        break;
      }
      v586 = 1;
      v587 = 1LL;
      if ((v590 & 1) != 0) {
        goto LABEL_895;
      }
    }

    if ((v588 & v589) == 0) {
      v584 = v585;
    }
LABEL_895:
    v591 = *(id *)v584;
    v592 = v591;
    if (v591)
    {
      v593 = (os_log_s *)v591;
      if (os_log_type_enabled(v593, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 3125;
        *(_WORD *)&v965[18] = 2112;
        *(void *)&v965[20] = v909;
        _os_log_impl(&dword_0, v593, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Allowed Port Types: %@.", v965, 0x1Cu);
      }
    }
  }

  for (ii = 0; ; ++ii)
  {
    v595 = v909;
    if (v909) {
      v595 = CFArrayGetCount(v909);
    }
    if (ii >= v595) {
      break;
    }
    *(_DWORD *)v964 = 0;
    if ((sub_1A0E0C(&v909, ii, v964) & 1) == 0)
    {
      v782 = sub_138E8(13);
      v783 = sub_8C7D4(1, *(void **)v782, *(void *)(v782 + 8));
      v784 = (void *)objc_claimAutoreleasedReturnValue(v783);
      v785 = v784;
      if (v784)
      {
        v786 = v784;
        if (os_log_type_enabled(v786, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v965 = 136315394;
          *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v965[12] = 1024;
          *(_DWORD *)&v965[14] = 3132;
          _os_log_impl( &dword_0,  v786,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): The array specified by kVirtualAudioPlugInRoute ConfigurationAllowedPortTypesKey does not contain VirtualAudioPortType.",  v965,  0x12u);
        }
      }

      v787 = __cxa_allocate_exception(0x10uLL);
      *(void *)v787 = &off_4865A0;
      v787[2] = 1852797029;
    }

    sub_57ADC(v900, *(unsigned int *)v964, *(int *)v964);
  }

  v596 = v898[14];
  v597 = &v907;
  v907 = 0LL;
  v908 = 0LL;
  v906 = (uint64_t *)&v907;
  v598 = *v887;
  if (!*v887) {
    goto LABEL_917;
  }
  v599 = v887;
  do
  {
    v600 = *(_DWORD *)(v598 + 28);
    v601 = v600 >= 0x70687042;
    if (v600 >= 0x70687042) {
      v602 = (uint64_t *)v598;
    }
    else {
      v602 = (uint64_t *)(v598 + 8);
    }
    if (v601) {
      v599 = (void *)v598;
    }
    v598 = *v602;
  }

  while (*v602);
  if (v599 == v887 || *((_DWORD *)v599 + 7) > 0x70687042u) {
LABEL_917:
  }
    v599 = v887;
  v603 = *v888;
  if (!*v888) {
    goto LABEL_939;
  }
  v604 = v888;
  v605 = *v888;
  do
  {
    v606 = *(_DWORD *)(v605 + 28);
    v607 = v606 >= 0x70687062;
    if (v606 >= 0x70687062) {
      v608 = (uint64_t *)v605;
    }
    else {
      v608 = (uint64_t *)(v605 + 8);
    }
    if (v607) {
      v604 = (void *)v605;
    }
    v605 = *v608;
  }

  while (*v608);
  if (v604 != v888 && *((_DWORD *)v604 + 7) < 0x70687063u) {
    goto LABEL_993;
  }
  v609 = v888;
  do
  {
    v610 = *(_DWORD *)(v603 + 28);
    v611 = v610 >= 0x706D6274;
    if (v610 >= 0x706D6274) {
      v612 = (uint64_t *)v603;
    }
    else {
      v612 = (uint64_t *)(v603 + 8);
    }
    if (v611) {
      v609 = (void *)v603;
    }
    v603 = *v612;
  }

  while (*v612);
  if (v609 == v888 || *((_DWORD *)v609 + 7) > 0x706D6274u) {
LABEL_939:
  }
    v609 = v888;
  if (v599 != v887 && v609 == v888)
  {
    v613 = *(void *)v905;
    v614 = *((void *)v905 + 1);
    *(void *)&v965[16] = 0LL;
    *(void *)&v965[8] = 0LL;
    *(void *)v965 = &v965[8];
    *(void *)&v964[16] = 0LL;
    *(void *)&v964[8] = 0LL;
    *(void *)v964 = &v964[8];
    v615 = sub_79670(*v596, v613, v614, 1885892706LL, (uint64_t)v965, (uint64_t)v964, *((unsigned __int8 *)v905 + 370));
    sub_32C8C(*(void **)&v964[8]);
    sub_32C8C(*(void **)&v965[8]);
    if (v615)
    {
      memset(v965, 0, 24);
      strcpy(&v965[24], "cwdv");
      v965[32] = 0;
      LODWORD(v966) = 3;
      v969 = 0LL;
      v968 = 0LL;
      v967 = &v968;
      v970 = 44739242;
      v971 = 0LL;
      *(_DWORD *)v964 = 1885892674;
      sub_909D8(v965, v964, (uint64_t)&v964[4], 1uLL);
      v616 = sub_546E0();
      *(void *)v964 = &off_470B88;
      *(void *)&v964[24] = v964;
      sub_FFB0C((uint64_t *)&v962, v616, v965, (uint64_t)v964);
      v898 = &v907;
      v617 = *(void **)&v964[24];
      if (*(_BYTE **)&v964[24] == v964)
      {
        v618 = 4LL;
        v617 = v964;
      }

      else
      {
        if (!*(void *)&v964[24])
        {
LABEL_958:
          sub_9DCB8((uint64_t *)&v959, &v962);
          v624 = v960;
          if (v960 != (void **)&v959)
          {
            *(void *)&v623 = 136315650LL;
            v904 = v623;
            do
            {
              sub_FAA90((uint64_t *)&v958, (uint64_t)v624[2]);
              if (v958.__r_.__value_.__l.__cap_)
              {
                *((void *)&v956 + 1) = 0LL;
                v957 = 0LL;
                *(void *)&v956 = (char *)&v956 + 8;
                size = (std::string *)v958.__r_.__value_.__l.__size_;
                v626 = *v901;
                *(void *)v964 = &v956;
                *(void *)&v964[8] = (char *)&v956 + 8;
                v627 = (std::string *)v958.__r_.__value_.__l.__size_ == &v958 || v626 == v902;
                if (v627) {
                  goto LABEL_976;
                }
                do
                {
                  if (sub_D7370(&size->__r_.__value_.__l.__cap_, (unint64_t *)v626 + 4))
                  {
                    size = (std::string *)size->__r_.__value_.__l.__size_;
                  }

                  else
                  {
                    if (!sub_D7370((unint64_t *)v626 + 4, &size->__r_.__value_.__l.__cap_))
                    {
                      sub_103940((uint64_t)v964, &size->__r_.__value_.__l.__cap_);
                      size = (std::string *)size->__r_.__value_.__l.__size_;
                    }

                    v628 = (uint64_t *)v626[1];
                    if (v628)
                    {
                      do
                      {
                        v626 = v628;
                        v628 = (uint64_t *)*v628;
                      }

                      while (v628);
                    }

                    else
                    {
                      do
                      {
                        v629 = v626;
                        v626 = (uint64_t *)v626[2];
                      }

                      while ((uint64_t *)*v626 != v629);
                    }
                  }
                }

                while (size != &v958 && v626 != v902);
                if (!v957)
                {
LABEL_976:
                  v630 = (os_log_t *)sub_138E8(8);
                  v631 = *v630;
                  if (*v630 && os_log_type_enabled(*v630, OS_LOG_TYPE_INFO))
                  {
                    sub_23FE8((uint64_t)v954, (os_unfair_lock_t)v624[2] + 2);
                    v632 = v954;
                    if (v955 < 0) {
                      v632 = (void **)v954[0];
                    }
                    *(_DWORD *)v964 = v904;
                    *(void *)&v964[4] = "RoutingManager.cpp";
                    *(_WORD *)&v964[12] = 1024;
                    *(_DWORD *)&v964[14] = 4282;
                    *(_WORD *)&v964[18] = 2080;
                    *(void *)&v964[20] = v632;
                    _os_log_impl(&dword_0, v631, OS_LOG_TYPE_INFO, "%25s:%-5d Disallowing port %s", v964, 0x1Cu);
                    if (v955 < 0) {
                      operator delete(v954[0]);
                    }
                  }

                  v633 = (char *)v624[3];
                  *(void *)v964 = v624[2];
                  *(void *)&v964[8] = v633;
                  if (v633)
                  {
                    v634 = (unint64_t *)(v633 + 16);
                    do
                      v635 = __ldxr(v634);
                    while (__stxr(v635 + 1, v634));
                  }

                  sub_1331F0(&v906, (unint64_t *)v964, (uint64_t)v964);
                  if (*(void *)&v964[8]) {
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v964[8]);
                  }
                }

                sub_FF3B8(*((void **)&v956 + 1));
              }

              sub_85B80((uint64_t *)&v958);
              v624 = (void **)v624[1];
            }

            while (v624 != (void **)&v959);
          }

          sub_1BB88((uint64_t *)&v959);
          sub_85B80((uint64_t *)&v962);
          if (v971) {
            CFRelease(v971);
          }
          sub_32C8C(v968);
          v597 = v898;
          if (*(void *)v965)
          {
            *(void *)&v965[8] = *(void *)v965;
            operator delete(*(void **)v965);
          }

          goto LABEL_993;
        }

        v618 = 5LL;
      }

      (*(void (**)(void))(*v617 + 8 * v618))();
      goto LABEL_958;
    }
  }

LABEL_993:
  if (v908) {
    sub_120C78((uint64_t *)v901, v906, v597);
  }
  if (v905[36] == 1684366192)
  {
    v636 = *(void *)v905;
    *(void *)&v965[16] = 0LL;
    *(void *)&v965[8] = 0LL;
    *(void *)v965 = &v965[8];
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6
      && v636 == 1668309362LL
      && (v636 & 0xFFFFFFFF00000000LL) == 0x696D646600000000LL)
    {
      sub_57ADC((uint64_t *)v965, 0x70687042u, 1885892674);
    }

    sub_865A0(v900, *(void **)v965, &v965[8]);
    sub_32C8C(*(void **)&v965[8]);
  }

  sub_FF3B8(v907);
LABEL_1002:
  sub_7D084(v965, "disable speaker vad");
  v637 = sub_51C54(*v903, v965);
  v638 = v892;
  v892[56] = v637;
  *((_BYTE *)v638 + 228) = BYTE4(v637);
  if ((v965[23] & 0x80000000) != 0) {
    operator delete(*(void **)v965);
  }
  if (CFDictionaryContainsKey(*v903, @"create speaker vad"))
  {
    v639 = sub_138E8(2);
    v640 = sub_138E8(34);
    v641 = 0;
    v642 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v643 = *(void *)(v639 + 8);
    while (1)
    {
      v644 = *(int *)&v965[4 * v642];
      v645 = v641;
      if (((v643 & v644) != 0) != ((*(void *)(v640 + 8) & v644) != 0)) {
        break;
      }
      v641 = 1;
      v642 = 1LL;
      if ((v645 & 1) != 0) {
        goto LABEL_1011;
      }
    }

    if ((v643 & v644) == 0) {
      v639 = v640;
    }
LABEL_1011:
    v646 = *(id *)v639;
    v647 = v646;
    if (v646)
    {
      v648 = (os_log_s *)v646;
      if (os_log_type_enabled(v648, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 3165;
        _os_log_impl( &dword_0,  v648,  OS_LOG_TYPE_ERROR,  "%25s:%-5d kVirtualAudioPlugInRouteConfigurationCreateSpeakerAlertVADKey is no longer supported. Please use kVi rtualAudioPlugInRouteConfigurationDisableSpeakerAlertVADKey to explicitly disable the default-created speaker alert VAD.",  v965,  0x12u);
      }
    }
  }

  v649 = CFDictionaryContainsKey(*v903, @"session routing information");
  v650 = *v903;
  if (v649)
  {
    sub_8B284((uint64_t)v964, *v903);
    v651 = (uint64_t **)(v905 + 176);
    if (*((_BYTE *)v905 + 728))
    {
      if (v651 != (uint64_t **)v964)
      {
        v652 = *(_BYTE **)v964;
        v653 = v905;
        if (*((void *)v905 + 90))
        {
          v654 = *((void *)v905 + 88);
          v655 = (uint64_t **)(v905 + 178);
          *((void *)v905 + 88) = v905 + 178;
          *(void *)(*((void *)v653 + 89) + 16LL) = 0LL;
          *((void *)v653 + 89) = 0LL;
          *((void *)v653 + 90) = 0LL;
          if (*(void *)(v654 + 8)) {
            v656 = *(void *)(v654 + 8);
          }
          else {
            v656 = v654;
          }
          *(void *)v965 = v651;
          *(void *)&v965[8] = v656;
          *(void *)&v965[16] = v656;
          if (!v656 || (*(void *)&v965[8] = sub_68080(v656), v652 == &v964[8]))
          {
            v661 = v652;
          }

          else
          {
            do
            {
              *(_DWORD *)(v656 + 32) = *((_DWORD *)v652 + 8);
              sub_8CB08(v656 + 40, (uint64_t)(v652 + 40));
              v657 = *v655;
              v658 = v655;
              v659 = v655;
              if (*v655)
              {
                do
                {
                  while (1)
                  {
                    v658 = (uint64_t **)v657;
                    if (*(_DWORD *)(*(void *)&v965[16] + 32LL) >= *((_DWORD *)v657 + 8)) {
                      break;
                    }
                    v657 = (uint64_t *)*v657;
                    v659 = v658;
                    if (!*v658) {
                      goto LABEL_1031;
                    }
                  }

                  v657 = (uint64_t *)v657[1];
                }

                while (v657);
                v659 = v658 + 1;
              }

LABEL_1031:
              sub_32C38(v651, (uint64_t)v658, v659, *(uint64_t **)&v965[16]);
              v656 = *(void *)&v965[8];
              *(void *)&v965[16] = *(void *)&v965[8];
              if (*(void *)&v965[8]) {
                *(void *)&v965[8] = sub_68080(*(uint64_t *)&v965[8]);
              }
              v660 = (void *)*((void *)v652 + 1);
              if (v660)
              {
                do
                {
                  v661 = v660;
                  v660 = (void *)*v660;
                }

                while (v660);
              }

              else
              {
                do
                {
                  v661 = (_BYTE *)*((void *)v652 + 2);
                  v627 = *(void *)v661 == (void)v652;
                  v652 = v661;
                }

                while (!v627);
              }

              if (!v656) {
                break;
              }
              v652 = v661;
            }

            while (v661 != &v964[8]);
          }

          sub_265D00((uint64_t)v965);
          v652 = v661;
        }

        if (v652 != &v964[8])
        {
          v662 = (uint64_t **)(v905 + 178);
          do
          {
            sub_E2354((uint64_t)v965, (uint64_t)v651, (_DWORD *)v652 + 8);
            v663 = *v662;
            v664 = v662;
            v665 = v662;
            if (*v662)
            {
              do
              {
                while (1)
                {
                  v664 = (uint64_t **)v663;
                  if (*(_DWORD *)(*(void *)v965 + 32LL) >= *((_DWORD *)v663 + 8)) {
                    break;
                  }
                  v663 = (uint64_t *)*v663;
                  v665 = v664;
                  if (!*v664) {
                    goto LABEL_1052;
                  }
                }

                v663 = (uint64_t *)v663[1];
              }

              while (v663);
              v665 = v664 + 1;
            }

LABEL_1052:
            sub_32C38(v651, (uint64_t)v664, v665, *(uint64_t **)v965);
            *(void *)v965 = 0LL;
            sub_8D4EC((uint64_t)v965);
            v666 = (void *)*((void *)v652 + 1);
            if (v666)
            {
              do
              {
                v667 = v666;
                v666 = (void *)*v666;
              }

              while (v666);
            }

            else
            {
              do
              {
                v667 = (_BYTE *)*((void *)v652 + 2);
                v627 = *(void *)v667 == (void)v652;
                v652 = v667;
              }

              while (!v627);
            }

            v652 = v667;
          }

          while (v667 != &v964[8]);
        }
      }
    }

    else
    {
      sub_E1FDC((uint64_t)(v905 + 176), v964);
      *((_BYTE *)v905 + 728) = 1;
    }

    sub_734C4(*(void **)&v964[8]);
    if (*v903 && CFDictionaryGetCount(*v903) == 1)
    {
      v668 = 1;
LABEL_1088:
      *((_BYTE *)v905 + 369) = v668;
      v650 = *v903;
      goto LABEL_1089;
    }

    if (!*((_BYTE *)v905 + 728)) {
      sub_8DEEC();
    }
    v669 = (void *)*((void *)v905 + 88);
    v670 = v905 + 178;
    if (v669 == (void *)(v905 + 178))
    {
      v668 = 0;
      goto LABEL_1088;
    }

    while (1)
    {
      *(_DWORD *)v965 = *((_DWORD *)v669 + 8);
      sub_8D9F8((uint64_t)&v965[8], (uint64_t)(v669 + 5));
      sub_8C7FC(v964, (uint64_t)&v965[8]);
      v671 = v964[23];
      v672 = v964[23];
      if (v964[23] < 0) {
        v671 = *(void *)&v964[8];
      }
      if (v671 != 21) {
        break;
      }
      v673 = (uint64_t *)v964;
      if (v964[23] < 0) {
        v673 = *(uint64_t **)v964;
      }
      v674 = *v673;
      v675 = v673[1];
      v676 = *(uint64_t *)((char *)v673 + 13);
      v677 = v674 == 0x6C7070612E6D6F63LL && v675 == 0x656C69626F6D2E65LL;
      if (!v677 || v676 != 0x6369676F6C656C69LL) {
        break;
      }
      v668 = _os_feature_enabled_impl("VirtualAudio", "additive_routing_logicpro");
      if (v672 < 0) {
        goto LABEL_1076;
      }
LABEL_1077:
      sub_8CC80((uint64_t)&v965[8]);
      if ((v668 & 1) == 0)
      {
        v679 = (void *)v669[1];
        if (v679)
        {
          do
          {
            v680 = v679;
            v679 = (void *)*v679;
          }

          while (v679);
        }

        else
        {
          do
          {
            v680 = (void *)v669[2];
            v627 = *v680 == (void)v669;
            v669 = v680;
          }

          while (!v627);
        }

        v669 = v680;
        if (v680 != (void *)v670) {
          continue;
        }
      }

      goto LABEL_1088;
    }

    v668 = 0;
    if ((v964[23] & 0x80000000) == 0) {
      goto LABEL_1077;
    }
LABEL_1076:
    operator delete(*(void **)v964);
    goto LABEL_1077;
  }

LABEL_1089:
  LOBYTE(v959) = 0;
  v681 = *v905;
  if (!(_DWORD)v681)
  {
    v853 = sub_138E8(13);
    v854 = sub_8C7D4(1, *(void **)v853, *(void *)(v853 + 8));
    v855 = (os_log_s *)objc_claimAutoreleasedReturnValue(v854);
    v689 = v855;
    if (v855 && os_log_type_enabled(v855, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v965 = 136315394;
      *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&v965[12] = 1024;
      *(_DWORD *)&v965[14] = 1136;
      _os_log_impl(&dword_0, v689, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v965, 0x12u);
    }

    goto LABEL_1353;
  }

  v682 = v905[1];
  if ((int)v682 > 1919776354)
  {
    if ((int)v682 > 1986884454)
    {
      if ((int)v682 <= 1987081838)
      {
        if ((int)v682 <= 1987080812)
        {
          if ((_DWORD)v682 != 1986884455)
          {
            v683 = 1987077987;
            goto LABEL_1162;
          }

          goto LABEL_1135;
        }

        if ((_DWORD)v682 != 1987080813)
        {
          if ((_DWORD)v682 != 1987081833) {
            goto LABEL_1231;
          }
          goto LABEL_1156;
        }
      }

      else
      {
        if ((int)v682 <= 1987211116)
        {
          if ((_DWORD)v682 == 1987081839)
          {
LABEL_1163:
            if ((int)v681 > 1668313665)
            {
              if ((_DWORD)v681 == 1668313666) {
                goto LABEL_1197;
              }
              v691 = 29299;
              goto LABEL_1168;
            }

            goto LABEL_1164;
          }

          v684 = 1987208039;
LABEL_1172:
          if ((_DWORD)v682 != v684) {
            goto LABEL_1231;
          }
          goto LABEL_1173;
        }

        if ((_DWORD)v682 == 1987211117)
        {
LABEL_1173:
          v690 = 1668509810;
          goto LABEL_1174;
        }

        if ((_DWORD)v682 != 2003133027 && (_DWORD)v682 != 2003133037) {
          goto LABEL_1231;
        }
      }
    }

    else
    {
      if ((int)v682 <= 1936748651)
      {
        if ((int)v682 <= 1936745327)
        {
          if ((_DWORD)v682 == 1919776355) {
            goto LABEL_1163;
          }
          if ((_DWORD)v682 == 1936683886)
          {
            v690 = 1667329133;
            goto LABEL_1174;
          }

          goto LABEL_1231;
        }

        if ((_DWORD)v682 == 1936745328) {
          goto LABEL_1163;
        }
        if ((_DWORD)v682 != 1936747374)
        {
LABEL_1231:
          v720 = (os_log_s *)*(id *)sub_138E8(13);
          v705 = v720;
          if (!v720) {
            goto LABEL_1196;
          }
          v700 = v720;
          if (os_log_type_enabled(v700, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(v964, v682);
            v721 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
            *(_DWORD *)v965 = 136315650;
            *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v965[12] = 1024;
            *(_DWORD *)&v965[14] = 1209;
            *(_WORD *)&v965[18] = 2080;
            *(void *)&v965[20] = v721;
            _os_log_impl( &dword_0,  v700,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unhandled VirtualAudioPlugInMode '%s'",  v965,  0x1Cu);
            if ((v964[23] & 0x80000000) != 0) {
              operator delete(*(void **)v964);
            }
          }

LABEL_1195:
LABEL_1196:
          goto LABEL_1197;
        }

        goto LABEL_1151;
      }

      if ((int)v682 > 1937007471)
      {
        if ((_DWORD)v682 == 1937007472) {
          goto LABEL_1163;
        }
        if ((_DWORD)v682 != 1986098036)
        {
          v684 = 1986556788;
          goto LABEL_1172;
        }

        goto LABEL_1173;
      }

      if ((_DWORD)v682 != 1936748652)
      {
        v683 = 1936749157;
        goto LABEL_1162;
      }
    }

    v690 = 1668505974;
    goto LABEL_1174;
  }

  if ((int)v682 <= 1768781410)
  {
    if ((int)v682 > 1751212898)
    {
      if ((int)v682 > 1768776805)
      {
        if ((_DWORD)v682 == 1768776806) {
          goto LABEL_1197;
        }
        if ((_DWORD)v682 != 1768778864)
        {
          v683 = 1768779619;
          goto LABEL_1162;
        }

        goto LABEL_1135;
      }

      if ((_DWORD)v682 == 1751212899) {
        goto LABEL_1163;
      }
      v683 = 1768057203;
LABEL_1162:
      if ((_DWORD)v682 == v683) {
        goto LABEL_1163;
      }
      goto LABEL_1231;
    }

    if ((int)v682 > 1701013868)
    {
      if ((_DWORD)v682 == 1701013869) {
        goto LABEL_1163;
      }
      v683 = 1735222132;
      goto LABEL_1162;
    }

    if ((_DWORD)v682 == 1650811758)
    {
      if ((_DWORD)v681 == 1667591521) {
        goto LABEL_1197;
      }
      v690 = 1667591533;
      goto LABEL_1174;
    }

    if ((_DWORD)v682 != 1701013792)
    {
      if ((_DWORD)v682) {
        goto LABEL_1231;
      }
      v686 = sub_138E8(13);
      v687 = sub_8C7D4(1, *(void **)v686, *(void *)(v686 + 8));
      v688 = (os_log_s *)objc_claimAutoreleasedReturnValue(v687);
      v689 = v688;
      if (v688 && os_log_type_enabled(v688, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 1137;
        _os_log_impl( &dword_0,  v689,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v965,  0x12u);
      }

LABEL_1353:
      v856 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v856, "Precondition failure.");
    }

LABEL_1151:
    if ((_DWORD)v681 == 1668441443 || (_DWORD)v681 == 1668440898)
    {
LABEL_1175:
      v692 = sub_138E8(2);
      v693 = sub_138E8(34);
      v694 = 0;
      v695 = 0LL;
      *(void *)v965 = 0x100000002LL;
      v696 = *(void *)(v692 + 8);
      while (1)
      {
        v697 = *(int *)&v965[4 * v695];
        v698 = v694;
        if (((v696 & v697) != 0) != ((*(void *)(v693 + 8) & v697) != 0)) {
          break;
        }
        v694 = 1;
        v695 = 1LL;
        if ((v698 & 1) != 0)
        {
          if ((v696 & 1) == 0) {
            goto LABEL_1197;
          }
          goto LABEL_1183;
        }
      }

      if ((v696 & v697) == 0) {
        v692 = v693;
      }
      if ((*(void *)(v692 + 8) & 1) == 0) {
        goto LABEL_1197;
      }
LABEL_1183:
      v699 = *(id *)v692;
      if (!v699) {
        goto LABEL_1197;
      }
      v700 = (os_log_s *)v699;
      if (os_log_type_enabled(v700, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v964, v682);
        v701 = v964[23];
        v702 = *(_BYTE **)v964;
        sub_2CA1C(&v962, v681);
        v703 = v964;
        if (v701 < 0) {
          v703 = v702;
        }
        if ((v962.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v704 = &v962;
        }
        else {
          v704 = (std::string *)v962.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v965 = 136315906;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 1215;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v703;
        *(_WORD *)&v965[28] = 2080;
        *(void *)&v965[30] = v704;
        _os_log_impl( &dword_0,  v700,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Mode '%s' is not allowed with category '%s'",  v965,  0x26u);
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
      }

      v705 = v700;
      goto LABEL_1195;
    }

    goto LABEL_1197;
  }

  if ((int)v682 > 1835229548)
  {
    if ((_DWORD)v682 == 1835229549) {
      goto LABEL_1163;
    }
    v685 = 1835230310;
    goto LABEL_1145;
  }

  if ((_DWORD)v682 != 1768781411)
  {
    if ((_DWORD)v682 != 1768781426) {
      goto LABEL_1231;
    }
    goto LABEL_1135;
  }

LABEL_1156:
  if ((int)v681 <= 1668313665)
  {
LABEL_1164:
    if ((_DWORD)v681 == 1668301427) {
      goto LABEL_1197;
    }
    v691 = 24946;
    goto LABEL_1168;
  }

  if ((_DWORD)v681 != 1668313666 && (_DWORD)v681 != 1668313715)
  {
    v690 = 1668703092;
    goto LABEL_1174;
  }

LABEL_1197:
  v962.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  LOWORD(v962.__r_.__value_.__r.__words[1]) = 257;
  sub_51AEC(v903, @"camera parameters", (uint64_t)&v962);
  if (v962.__r_.__value_.__r.__words[0])
  {
    v706 = *(id *)sub_138E8(2);
    v707 = v706;
    if (v706)
    {
      v708 = (os_log_s *)v706;
      if (os_log_type_enabled(v708, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v965 = 136315394;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 3196;
        _os_log_impl(&dword_0, v708, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsing camera parameters ", v965, 0x12u);
      }
    }

    sub_2659E8((uint64_t)(v905 + 148), (uint64_t)&v962);
  }

  if (v899)
  {
    v709 = sub_138E8(2);
    v710 = sub_138E8(34);
    v711 = 0;
    v712 = 0LL;
    *(void *)v965 = 0x100000002LL;
    v713 = *(void *)(v709 + 8);
    while (1)
    {
      v714 = *(int *)&v965[4 * v712];
      v715 = v711;
      if (((v713 & v714) != 0) != ((*(void *)(v710 + 8) & v714) != 0)) {
        break;
      }
      v711 = 1;
      v712 = 1LL;
      if ((v715 & 1) != 0) {
        goto LABEL_1210;
      }
    }

    if ((v713 & v714) == 0) {
      v709 = v710;
    }
LABEL_1210:
    v716 = *(id *)v709;
    v717 = v716;
    if (v716)
    {
      v718 = (os_log_s *)v716;
      if (os_log_type_enabled(v718, OS_LOG_TYPE_DEBUG))
      {
        sub_2DBA00((std::string *)v964, (uint64_t)v905);
        v719 = v964[23] >= 0 ? v964 : *(_BYTE **)v964;
        *(_DWORD *)v965 = 136315650;
        *(void *)&v965[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v965[12] = 1024;
        *(_DWORD *)&v965[14] = 3201;
        *(_WORD *)&v965[18] = 2080;
        *(void *)&v965[20] = v719;
        _os_log_impl( &dword_0,  v718,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d outConfiguration.mRouteConfiguration: %s.",  v965,  0x1Cu);
        if ((v964[23] & 0x80000000) != 0) {
          operator delete(*(void **)v964);
        }
      }
    }
  }

  sub_13850((uint64_t)&v962);
  sub_13818((uint64_t)&v909);
  sub_13818((uint64_t)&v914);
  sub_32C8C(*(void **)&v963[24]);
  sub_13850((uint64_t)&v919);
  sub_13818((uint64_t)&v926);
  sub_13818((uint64_t)&v928);
  sub_13818((uint64_t)&v930);
  sub_13818((uint64_t)&v932);
  sub_13850((uint64_t)&v934);
  sub_13818((uint64_t)&v936);
  sub_13818((uint64_t)&v939);
  sub_13850((uint64_t)&v941);
  if (v945)
  {
    *(void *)v965 = &v943;
    sub_AD8B8((void ***)v965);
  }

  sub_13850((uint64_t)&Mutable);
  if (*((void *)&v952 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v952 + 1));
  }
  if (*((void *)&v951 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v951 + 1));
  }
}

void sub_5131C(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x516B4LL);
}

void sub_5133C()
{
}

void sub_5135C(uint64_t a1, int a2)
{
  if (a2) {
    sub_7A0E8();
  }
  JUMPOUT(0x51720LL);
}

void sub_51364(uint64_t a1, int a2)
{
  if (a2) {
    sub_7A0E8();
  }
  JUMPOUT(0x51720LL);
}

void sub_5136C(uint64_t a1, int a2)
{
  if (a2) {
    sub_7A0E8();
  }
  JUMPOUT(0x51720LL);
}

void sub_51378(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 568))
  {
    *(void *)(v1 + 744) = v1 + 544;
    sub_AD8B8((void ***)(v1 + 744));
  }

  sub_13850(v1 + 584);
  sub_52EF0(*(void *)(v1 + 232));
  sub_265CC8(v1 + 600);
  _Unwind_Resume(a1);
}

void sub_51390()
{
}

void sub_513A0()
{
}

void sub_513A8(uint64_t a1, int a2)
{
  if (a2) {
    sub_7A0E8();
  }
  JUMPOUT(0x516B4LL);
}

void sub_513EC()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  JUMPOUT(0x5159CLL);
}

void sub_51400()
{
}

void sub_5146C()
{
}

void sub_514AC()
{
}

void sub_51528()
{
}

void sub_51558()
{
}

void sub_51598()
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v0 + 24LL))(v0);
  }
  JUMPOUT(0x5161CLL);
}

void sub_515B4(uint64_t a1, int a2)
{
  if (a2) {
    sub_7A0E8();
  }
  JUMPOUT(0x516B4LL);
}

void sub_515BC()
{
  v3 = *(std::__shared_weak_count **)(v0 + 856);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if (!v1)
    {
LABEL_3:
      if (v2) {
LABEL_9:
      }
        JUMPOUT(0x516C4LL);
LABEL_10:
      JUMPOUT(0x51654LL);
    }
  }

  else if (!v1)
  {
    goto LABEL_3;
  }

  std::__shared_weak_count::__release_weak(v1);
  if (v2) {
    goto LABEL_9;
  }
  goto LABEL_10;
}

void sub_515FC()
{
}

void sub_5160C()
{
}

void sub_516BC()
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v0 + 24LL))(v0);
  }
  JUMPOUT(0x51654LL);
}

void sub_516D8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x516DCLL);
  }
  JUMPOUT(0x516B4LL);
}

void sub_516E0()
{
}

void sub_516E8()
{
}

void sub_516F0()
{
}

void sub_516F8()
{
  if (*(void *)(v0 + 848)) {
    JUMPOUT(0x51704LL);
  }
  sub_13818(v0 + 544);
  sub_1348C(v0 + 816);
  JUMPOUT(0x5169CLL);
}

CFDictionaryRef sub_51728(CFDictionaryRef *a1, int a2, int a3)
{
  v4 = *a1;
  if (!v4)
  {
    v22 = (os_log_s *)*(id *)sub_138E8(13);
    v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      __int16 v29 = 1024;
      int v30 = 809;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  BOOL v7 = CFDictionaryContainsKey(v4, @"routable ports") != 0;
  if (CFDictionaryContainsKey(*a1, @"unroutable ports")) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = v7;
  }
  BOOL v9 = CFDictionaryContainsKey(*a1, @"route to builtinspeaker") != 0;
  if (CFDictionaryContainsKey(*a1, @"route to builtinspeaker")
    && !CFDictionaryContainsKey(*a1, @"unroutable ports"))
  {
    v25 = (os_log_s *)*(id *)sub_138E8(13);
    v26 = v25;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(void *)&__p[4] = "VirtualAudio_PlugIn.mm";
      __int16 v29 = 1024;
      int v30 = 818;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Precondition failure.");
  }

  int v10 = CFDictionaryContainsKey(*a1, @"decoupled input/output");
  int v11 = CFDictionaryContainsKey(*a1, @"expanse session");
  result = *a1;
  if (*a1)
  {
    result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if ((_DWORD)result)
    {
      int v13 = v8 + v9;
      if (v10) {
        ++v13;
      }
      if (v11) {
        int v14 = v13 + 1;
      }
      else {
        int v14 = v13;
      }
      v15 = *a1;
      if (*a1) {
        LODWORD(v15) = CFDictionaryGetCount(v15);
      }
      if (v14 == (_DWORD)v15)
      {
        sub_7D084(__p, "decoupled input/output");
        unint64_t v16 = sub_51C54(*a1, __p);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
        if ((_DWORD)v16) {
          int v17 = 1684366192;
        }
        else {
          int v17 = 1668248944;
        }
        if (HIDWORD(v16)) {
          BOOL v18 = v17 == a2;
        }
        else {
          BOOL v18 = 1;
        }
        int v19 = !v18;
        *(_DWORD *)__p = 0;
        unsigned int v20 = sub_51A88(*a1, @"expanse session", __p);
        if (*(_DWORD *)__p == a3) {
          unsigned int v21 = 0;
        }
        else {
          unsigned int v21 = v20;
        }
        return (v19 | v21 ^ 1);
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_51A50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

CFDictionaryRef sub_51A88(const __CFDictionary *result, const void *a2, void *a3)
{
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
        return &dword_0 + 1;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

CFDictionaryRef sub_51AEC(const __CFDictionary **a1, const void *a2, uint64_t a3)
{
  result = *a1;
  if (*a1)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      BOOL v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result) {
        return (const __CFDictionary *)sub_51B68(a3, v7);
      }
    }
  }

  return result;
}

uint64_t sub_51B68(uint64_t a1, const void *a2)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    *(void *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    return a1;
  }

  v4 = *(const void **)a1;
  if (!*(void *)a1)
  {
    *(void *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    if (!a2) {
      return a1;
    }
LABEL_8:
    CFRetain(a2);
    return a1;
  }

  CFRelease(v4);
  int v5 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 9) = 0;
  if (a2 && v5) {
    goto LABEL_8;
  }
  return a1;
}

CFDictionaryRef sub_51BD8(const __CFDictionary **a1, const void *a2, uint64_t a3)
{
  result = *a1;
  if (*a1)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      BOOL v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFArrayGetTypeID();
      if ((const __CFDictionary *)v8 == result) {
        return (const __CFDictionary *)sub_51B68(a3, v7);
      }
    }
  }

  return result;
}

uint64_t sub_51C54(CFTypeRef cf, const UInt8 *a2)
{
  CFTypeRef v3 = cf;
  if (!cf) {
    goto LABEL_9;
  }
  CFRetain(cf);
  sub_3617C(&v13, v3);
  if (!v13)
  {
    LOBYTE(v3) = 0;
LABEL_9:
    uint64_t v8 = 0LL;
    return v3 | ((*(void *)&v2 & 0xFFFFFFLL) << 8) | (v8 << 32);
  }

  if (sub_51DF4((const __CFDictionary *)v13, a2))
  {
    if (!v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_147680(&cfa, (const __CFDictionary *)v13, a2);
    int v5 = (const __CFNumber *)cfa;
    if (cfa)
    {
      CFTypeID v6 = CFGetTypeID(cfa);
      if (v6 == CFNumberGetTypeID())
      {
        unsigned int v7 = sub_8D7E0(v5);
        LOBYTE(v3) = v7;
        unsigned int v2 = v7 >> 8;
LABEL_12:
        CFRelease(v5);
        uint64_t v8 = 1LL;
        goto LABEL_15;
      }

      CFTypeID v9 = CFGetTypeID(v5);
      if (v9 == CFBooleanGetTypeID())
      {
        LOBYTE(v3) = sub_1476F8(v5);
        unsigned int v2 = 0;
        goto LABEL_12;
      }

      CFRelease(v5);
    }
  }

  uint64_t v8 = 0LL;
  LOBYTE(v3) = 0;
LABEL_15:
  if (v13) {
    CFRelease(v13);
  }
  return v3 | ((*(void *)&v2 & 0xFFFFFFLL) << 8) | (v8 << 32);
}

void sub_51D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

BOOL sub_51DF4(const __CFDictionary *a1, const UInt8 *a2)
{
  unsigned int v2 = a2;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0LL) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v5 = *((void *)v2 + 1);
    if ((v4 & 0x80u) == 0LL) {
      CFIndex v6 = v4;
    }
    else {
      CFIndex v6 = v5;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  else
  {
    CFStringRef v7 = 0LL;
  }

  int v9 = CFDictionaryContainsKey(a1, v7);
  if (v7) {
    CFRelease(v7);
  }
  return v9 != 0;
}

void sub_51EC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFDictionaryRef sub_51EE8(const __CFDictionary *result, const void *a2, const __CFDictionary **a3)
{
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFIndex v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFStringGetTypeID())
      {
        *a3 = v4;
        return &dword_0 + 1;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_51F40(void **a1)
{
  int v1 = (char *)*a1;
  if (*a1)
  {
    CFTypeRef v3 = (char *)a1[1];
    CFIndex v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        CFTypeID v5 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        sub_8D328(v5);
      }

      while (v3 != v1);
      CFIndex v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_51FA0(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_51FD8(char *a1)
{
  if (a1)
  {
    int v1 = a1;
    do
    {
      unsigned int v2 = *(char **)v1;
      CFTypeRef v3 = (void **)(v1 + 24);
      sub_8C8F0(&v3);
      operator delete(v1);
      int v1 = v2;
    }

    while (v2);
  }

void sub_52024(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_51FD8(*(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0LL; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v6 = *a2;
  *a2 = 0LL;
  CFStringRef v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  int v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0LL;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }

    else
    {
      v13 &= v14 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *int v9 = 0LL;
    v9[1] = 0LL;
  }

uint64_t sub_520F8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v5 = a2[2];
  CFTypeRef v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

void sub_52168(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }

    else
    {
      uint64_t v13 = 1LL << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }

    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0LL;
      return;
    }
  }

  if (prime >> 61) {
    sub_7A8C4();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0LL;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0LL;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }

    else
    {
      v9 &= prime - 1;
    }

    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }

        else
        {
          v15 &= prime - 1;
        }

        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }

          *unint64_t v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }

        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }

      while (v14);
    }
  }

void sub_52360(void *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    uint64_t v6 = (char *)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v6) {
      BOOL v7 = a2 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      unint64_t v8 = v6;
    }

    else
    {
      do
      {
        unint64_t v9 = *((unsigned int *)v2 + 4);
        *((_DWORD *)v6 + 4) = v9;
        if (v6 != v2)
        {
          sub_8D094( (uint64_t)(v6 + 24),  *((const void ***)v2 + 3),  *((const void ***)v2 + 4),  (uint64_t)(*((void *)v2 + 4) - *((void *)v2 + 3)) >> 3);
          unint64_t v9 = *((unsigned int *)v6 + 4);
        }

        unint64_t v8 = *(char **)v6;
        *((void *)v6 + 1) = v9;
        uint8x8_t v10 = sub_524E4((uint64_t)a1, v9, (_DWORD *)v6 + 4);
        sub_52830(a1, v6, v10);
        uint64_t v2 = *(char **)v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = v8;
      }

      while (v2);
    }

    sub_51FD8(v8);
  }

  for (; v2; uint64_t v2 = *(char **)v2)
  {
    unint64_t v11 = operator new(0x30uLL);
    *unint64_t v11 = 0LL;
    v11[1] = 0LL;
    *((_DWORD *)v11 + 4) = *((_DWORD *)v2 + 4);
    v11[4] = 0LL;
    v11[5] = 0LL;
    v11[3] = 0LL;
    sub_8D204( v11 + 3,  *((const void ***)v2 + 3),  *((const void ***)v2 + 4),  (uint64_t)(*((void *)v2 + 4) - *((void *)v2 + 3)) >> 3);
    unint64_t v12 = *((unsigned int *)v11 + 4);
    v11[1] = v12;
    uint64_t v13 = sub_524E4((uint64_t)a1, v12, (_DWORD *)v11 + 4);
    sub_52830(a1, v11, v13);
  }

void sub_52498(void *a1)
{
}

void sub_524B0(_Unwind_Exception *a1)
{
}

uint64_t *sub_524E4(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1LL;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }

    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }

    else
    {
      uint64_t v21 = 1LL << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }

    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }

    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        sub_7A8C4();
      }
      uint64_t v13 = operator new(8LL * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0LL;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0LL;
      while (*(void *)&prime != v15);
      unint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }

        else
        {
          v17 &= *(void *)&prime - 1LL;
        }

        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }

          else
          {
            v23 &= *(void *)&prime - 1LL;
          }

          if (v23 == v17)
          {
            unint64_t v16 = (uint64_t **)i;
          }

          else
          {
            v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }

              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *unint64_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }

            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              unint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }

      unint64_t v6 = (unint64_t)prime;
    }

    else
    {
      v35 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0LL;
      *(void *)(a1 + 8) = 0LL;
    }
  }

LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }

  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }

  v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0LL;
  }
  int v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }

    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }

    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }

  while (v34 != 1);
  return result;
}

    if (!v26) {
      return;
    }
    goto LABEL_44;
  }

  sub_654FC();
  unint64_t v27 = (*(uint64_t (**)(void))(qword_4913D0 + 64))();
  if ((_DWORD)v27)
  {
    v28 = sub_138E8(18);
    int v29 = sub_138E8(38);
    int v30 = 0;
    unint64_t v31 = 0LL;
    *(void *)buf = 0x100000002LL;
    unint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      BOOL v33 = *(int *)&buf[4 * v31];
      int v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      int v30 = 1;
      unint64_t v31 = 1LL;
      if ((v34 & 1) != 0) {
        goto LABEL_51;
      }
    }

    if ((v32 & v33) == 0) {
      v28 = v29;
    }
LABEL_51:
    v45 = *(os_log_s **)v28;
    if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v67, a3);
      if (v68 >= 0) {
        v46 = v67;
      }
      else {
        v46 = (void **)v67[0];
      }
      v47 = *a4;
      sub_2CA1C(v65, a2);
      if (v66 >= 0) {
        v48 = v65;
      }
      else {
        v48 = (void **)v65[0];
      }
      v49 = *((_DWORD *)v9 + 14);
      sub_2CA1C(__p, v27);
      v50 = v64;
      v51 = (void **)__p[0];
      sub_665BC((uint64_t)v59, a1);
      v52 = __p;
      if (v50 < 0) {
        v52 = v51;
      }
      if (v60 >= 0) {
        v53 = v59;
      }
      else {
        v53 = (void **)v59[0];
      }
      *(_DWORD *)buf = 136316930;
      *(void *)&buf[4] = "VolumeControl.cpp";
      v70 = 1024;
      v71 = 337;
      v72 = 2080;
      v73 = v46;
      v74 = 2048;
      v75 = v47;
      v76 = 2080;
      v77 = v48;
      v78 = 1024;
      v79 = v49;
      v80 = 2080;
      v81 = v52;
      v82 = 2080;
      v83 = v53;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VolumeCommand: Failed to get parameter '%s' to %f on processor type '%s' index %u, err: %s on chain '%s'.",  buf,  0x4Au);
      if (v60 < 0) {
        operator delete(v59[0]);
      }
      if (v64 < 0) {
        operator delete(__p[0]);
      }
      if (v66 < 0) {
        operator delete(v65[0]);
      }
      if (v68 < 0) {
        operator delete(v67[0]);
      }
    }

    goto LABEL_43;
  }

          sub_1269B4(v16 + 16, v26, (void *)(v16 + 16));
        }
      }

      v28 = *v62;
      if (v28 != 1668443760 && v28 != 1668443751)
      {
        int v29 = 28013;
        goto LABEL_50;
      }

      sub_126C6C(v16);
LABEL_68:
      sub_126D10(v16);
LABEL_69:
      v37 = (void *)(v16 + 16);
      v38 = *(void **)(v16 + 24);
      if (v38 != (void *)(v16 + 16))
      {
        v39 = 0LL;
        do
        {
          sub_B8CBC((uint64_t *)__p, v38 + 4, "", 1297);
          v40 = (std::__shared_weak_count *)__p[1];
          v41 = *((_DWORD *)__p[0] + 36);
          if (__p[1])
          {
            v42 = (unint64_t *)((char *)__p[1] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }

          if (v41 != 1885433888) {
            ++v39;
          }
          v38 = (void *)v38[1];
        }

        while (v38 != v37);
        if (v39 >= 2)
        {
          v44 = *(void **)(v16 + 24);
          v45 = (void *)(v16 + 16);
          if (v44 != v37)
          {
            while (1)
            {
              sub_B8CBC((uint64_t *)__p, v44 + 4, "", 1307);
              v46 = (std::__shared_weak_count *)__p[1];
              v47 = *((_DWORD *)__p[0] + 36);
              if (__p[1])
              {
                v48 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }

              if (v47 == 1886287212) {
                break;
              }
              v44 = (void *)v44[1];
              if (v44 == v37)
              {
                v45 = v37;
                goto LABEL_100;
              }
            }

            v45 = v37;
            if (v44 != v37)
            {
              v50 = v44[1];
              v45 = v44;
              while ((void *)v50 != v37)
              {
                sub_B8CBC((uint64_t *)__p, (uint64_t *)(v50 + 32), "", 1307);
                v51 = (std::__shared_weak_count *)__p[1];
                v52 = *((_DWORD *)__p[0] + 36);
                if (__p[1])
                {
                  v53 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }

                if (v52 != 1886287212)
                {
                  sub_126940((uint64_t)(v45 + 2), (__int128 *)(v50 + 16));
                  v45 = (void *)v45[1];
                }

                v50 = *(void *)(v50 + 8);
              }
            }
          }

    unint64_t v14 = a1 + 1;
LABEL_44:
    uint64_t v5 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v5 + 2) = *a3;
    sub_32C38(a1, (uint64_t)v14, v7, v5);
    return v5;
  }

  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v41 = __ldaxr(p_shared_owners);
  while (__stlxr(v41 - 1, p_shared_owners));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }

    uint64_t v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }

      if ((int)v23 <= 1886216808)
      {
        if ((_DWORD)v23 == 1885892674)
        {
          int v29 = !sub_93248(v16);
          v28 = 4LL;
        }

        else
        {
          if ((_DWORD)v23 != 1885892706) {
            continue;
          }
          int v29 = !sub_93248(v16);
          v28 = 8LL;
        }

        if (v29) {
          v28 = 0LL;
        }
      }

      else
      {
        switch((_DWORD)v23)
        {
          case 0x706D6269:
            v28 = 1LL;
            break;
          case 0x70726563:
            v28 = 16LL;
            break;
          case 0x7073706B:
            v28 = 2LL;
            break;
          default:
            continue;
        }
      }

      v2 |= v28;
    }
  }

  v40 = 0LL;
  uint64_t v2 = 0LL;
LABEL_70:
  sub_3A064(v38, v40, v2, 0);
  return sub_92EA4(&v41);
}

    unint64_t v14 = a1 + 1;
LABEL_44:
    uint64_t v5 = (uint64_t *)operator new(0x28uLL);
    v5[4] = a4;
    sub_32C38(a1, (uint64_t)v14, v7, v5);
    return v5;
  }

          v47 = 0LL;
          __p = 0LL;
          v168 = 0LL;
LABEL_44:
          v52 = (os_log_t *)sub_138E8(7);
          v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            v171[0] = 136315394;
            *(void *)&v171[1] = "DeviceManager.cpp";
            LOWORD(v171[3]) = 1024;
            *(_DWORD *)((char *)&v171[3] + 2) = 410;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PhysicalDevice to remove does not exist in the DeviceManager database",  (uint8_t *)v171,  0x12u);
          }

          cf = 0LL;
          v163 = 0LL;
          if (!v47) {
            goto LABEL_57;
          }
          v54 = (unint64_t *)&v47->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }

          v51 = cf;
          if (!cf) {
            goto LABEL_57;
          }
          goto LABEL_53;
        }
      }

    *(void *)uint64_t v4 = v11;
    a1[2] += 8LL;
    goto LABEL_44;
  }

      if (!v23) {
        goto LABEL_47;
      }
      int v30 = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31)
      {
LABEL_47:
        if (!v17) {
          goto LABEL_49;
        }
LABEL_48:
        std::__shared_weak_count::__release_weak(v17);
        goto LABEL_49;
      }

      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v17) {
        goto LABEL_48;
      }
LABEL_49:
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v27)
      {
        if (i != a1) {
          goto LABEL_60;
        }
        break;
      }
    }

    unint64_t v32 = operator new(0x20uLL);
    v32[2] = v38;
    v32[3] = v4;
    if (v4)
    {
      BOOL v33 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        int v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }

    v35 = (void *)a1[1];
    v36 = a1[2];
    *unint64_t v32 = a1;
    v32[1] = v35;
    void *v35 = v32;
    a1[1] = v32;
    a1[2] = v36 + 1;
LABEL_60:
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    CFTypeRef v3 = (uint64_t *)*v3;
  }

  while ((uint64_t *)a2[1] != v3);
}

    unint64_t v14 = a1 + 1;
LABEL_44:
    uint64_t v5 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v5 + 7) = a4;
    sub_32C38(a1, (uint64_t)v14, v7, v5);
    return v5;
  }

  BOOL v33 = (uint64_t *)operator new(0x48uLL);
  int v34 = v33;
  v58[1] = v20;
  v33[4] = *(void *)buf;
  *((_DWORD *)v33 + 10) = *(_DWORD *)&buf[8];
  v33[6] = (uint64_t)(v33 + 6);
  v33[7] = (uint64_t)(v33 + 6);
  v33[8] = 0LL;
  v35 = *(void *)&v63[18];
  if (*(void *)&v63[18])
  {
    v37 = *(void *)&v63[2];
    v36 = *(uint64_t **)&v63[10];
    v38 = **(void **)&v63[10];
    *(void *)(v38 + 8) = *(void *)(*(void *)&v63[2] + 8LL);
    **(void **)(v37 + 8) = v38;
    v39 = v33[6];
    *(void *)(v39 + 8) = v36;
    *v36 = v39;
    v33[6] = v37;
    *(void *)(v37 + 8) = v33 + 6;
    v33[8] = v35;
    *(void *)&v63[18] = 0LL;
  }

  v59 = 1;
  *BOOL v33 = 0LL;
  v33[1] = 0LL;
  v33[2] = (uint64_t)v25;
  std::logic_error *v27 = (uint64_t)v33;
  v40 = (void *)**v18;
  if (v40)
  {
    *uint8x8_t v18 = v40;
    int v34 = (uint64_t *)*v27;
  }

  sub_7A420(*v20, v34);
  ++a1[13];
  v58[0] = 0LL;
  sub_18736C((uint64_t)v58);
  sub_68314(&v63[2]);
  result = sub_68314(&v55);
  if (v6) {
    return (_DWORD *)(*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  return result;
}

    unint64_t v31 = (void (*)(void *))&std::runtime_error::~runtime_error;
    goto LABEL_44;
  }

  sub_19F680(a1);
  if (!cf)
  {
    BOOL v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
  }

  sub_19E2D0((uint64_t)buf, cf);
  uint8x8_t v20 = a1 + 72;
  sub_88C08(*(char **)(a1 + 72));
  uint64_t v21 = *(void *)&buf[8];
  *(void *)(a1 + 64) = *(void *)buf;
  *(void *)(a1 + 72) = v21;
  v22 = *(void *)&buf[16];
  *(void *)(a1 + 80) = *(void *)&buf[16];
  if (v22)
  {
    *(void *)(v21 + 16) = v20;
    *(void *)buf = &buf[8];
    *(_OWORD *)&buf[8] = 0uLL;
    uint64_t v21 = 0LL;
  }

  else
  {
    *(void *)(a1 + 64) = v20;
  }

  sub_88C08((char *)v21);
  unint64_t v19 = sub_19EC34(a1, (const __CFString *)qword_48F6C0, 0, *(float *)(a1 + 240));
LABEL_30:
  if (!(_DWORD)v19)
  {
LABEL_37:
    uint8x8_t v26 = sub_138E8(13);
    unint64_t v27 = sub_8C7D4(1, *(void **)v26, *(void *)(v26 + 8));
    v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    int v29 = v28;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "CPMSInterface.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 306;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): inData did not match AEA values!",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "inData did not match AEA values!");
    goto LABEL_43;
  }

  unint64_t v23 = (os_log_s *)*(id *)sub_138E8(16);
  v24 = v23;
  if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "CPMSInterface.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 307;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v19;
    _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Haptics -- Out Nominal Value: %u", buf, 0x18u);
  }

  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

  int v34 = v115;
  v35 = v114;
  *(void *)buf = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  *(void *)&buf[8] = v36;
  *(_DWORD *)&buf[16] = 0;
  *(void *)&v107[4] = 0LL;
  *(void *)&v107[12] = 0LL;
  if (v113)
  {
    v37 = v112;
    if (v112 != qword_4A8610)
    {
      v38 = sub_138E8(20);
      v39 = sub_138E8(38);
      v40 = 0;
      v41 = 0LL;
      *(void *)v103 = 0x100000002LL;
      v42 = *(void *)(v38 + 8);
      while (1)
      {
        v43 = *(int *)&v103[4 * v41];
        v44 = v40;
        if (((v42 & v43) != 0) != ((*(void *)(v39 + 8) & v43) != 0)) {
          break;
        }
        v40 = 1;
        v41 = 1LL;
        if ((v44 & 1) != 0)
        {
          if ((v42 & 1) == 0) {
            goto LABEL_60;
          }
          goto LABEL_53;
        }
      }

      if ((v42 & v43) == 0) {
        v38 = v39;
      }
      if ((*(void *)(v38 + 8) & 1) != 0)
      {
LABEL_53:
        v45 = *(os_log_s **)v38;
        if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          sub_2CEE1C(&__p, (unsigned int *)v37);
          v46 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v103 = 136315650;
          *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v103[12] = 1024;
          *(_DWORD *)&v103[14] = 454;
          v104 = 2080;
          v105 = v46;
          _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found extended volume description: %s", v103, 0x1Cu);
        }
      }

  sub_F9584((uint64_t)v202, v9, *(_DWORD *)(a1 + 268));
  uint8x8_t v26 = sub_138E8(17);
  unint64_t v27 = sub_138E8(29);
  v28 = 0;
  int v29 = 0LL;
  *(void *)buf = 0x100000002LL;
  int v30 = *(void *)(v26 + 8);
  while (1)
  {
    unint64_t v31 = *(int *)&buf[4 * v29];
    unint64_t v32 = v28;
    if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
      break;
    }
    v28 = 1;
    int v29 = 1LL;
    if ((v32 & 1) != 0) {
      goto LABEL_49;
    }
  }

  if ((v30 & v31) == 0) {
    uint8x8_t v26 = v27;
  }
LABEL_49:
  BOOL v33 = *(os_log_s **)v26;
  if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    int v34 = v211;
    sub_2CA1C(v211, v9);
    if (v211[5] < 0) {
      int v34 = *(_DWORD **)v211;
    }
    v35 = (const __CFString *)v203[0];
    if (!v203[0]) {
      v35 = (const __CFString *)v202[0];
    }
    if (v204[0]) {
      v36 = (const __CFString *)v204[0];
    }
    else {
      v36 = v35;
    }
    v37 = &v208;
    sub_48E98(&v208, v36);
    if (v210 < 0) {
      v37 = v208;
    }
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
    sub_48E98(__p, theString[0]);
    if (v207 >= 0) {
      v38 = __p;
    }
    else {
      v38 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = "Device_CarPlay_Aspen.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 228;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v34;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v37;
    *(_WORD *)&buf[38] = 2080;
    v215 = v38;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating a CarPlay output port of type %s with name %s and UID %s",  buf,  0x30u);
    if (v207 < 0) {
      operator delete(__p[0]);
    }
    sub_19DFC((uint64_t)theString);
    unint64_t v17 = (void *)&unk_3FF000;
    if (SHIBYTE(v210) < 0) {
      operator delete(v208);
    }
    if (SHIBYTE(v211[5]) < 0) {
      operator delete(*(void **)v211);
    }
  }

  if ((_DWORD)v9 == 1886614625)
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
    v42 = (std::__shared_weak_count *)operator new(0x228uLL);
    v42->__shared_owners_ = 0LL;
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    v42->__shared_weak_owners_ = 0LL;
    v42->__vftable = (std::__shared_weak_count_vtbl *)off_4762C0;
    sub_17040C((uint64_t)buf, 1886614625, v16);
    memset(v211, 0, 24);
    v208 = 0LL;
    v209 = 0LL;
    v210 = 0LL;
    sub_7D084(__p, "CarPlayPartnershipUID");
    v41 = &v42[1].__vftable;
    sub_F9638( (uint64_t)&v42[1],  (uint64_t *)buf,  a1,  (uint64_t)v211,  (uint64_t)v202,  (uint64_t)theString,  (char **)&v208,  (__int128 *)__p);
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
    LOWORD(v42[22].__shared_weak_owners_) = 0;
    if (v207 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v208;
    sub_7A668((void ***)__p);
    sub_32C8C(*(void **)&buf[24]);
    *v41 = &off_472F18;
    v44 = sub_138E8(23);
    v45 = sub_138E8(27);
    v46 = 0;
    v47 = 0LL;
    *(void *)buf = 0x100000002LL;
    v48 = *(void *)(v44 + 8);
    while (1)
    {
      v49 = *(int *)&buf[4 * v47];
      v50 = v46;
      if (((v48 & v49) != 0) != ((*(void *)(v45 + 8) & v49) != 0)) {
        break;
      }
      v46 = 1;
      v47 = 1LL;
      if ((v50 & 1) != 0) {
        goto LABEL_87;
      }
    }

    if ((v48 & v49) == 0) {
      v44 = v45;
    }
LABEL_87:
    v60 = *(os_log_s **)v44;
    if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Port_CarPlay_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 229;
      _os_log_impl(&dword_0, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating CarPlay Alternate Audio port", buf, 0x12u);
    }

    *(void *)&v61 = v42 + 1;
    *((void *)&v61 + 1) = v42;
    shared_weak_owners = (std::__shared_weak_count *)v42[4].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_103:
        v40 = v16;
        goto LABEL_123;
      }

      do
        v63 = __ldxr(p_shared_owners);
      while (__stxr(v63 + 1, p_shared_owners));
      v188 = v61;
      p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v65 = __ldxr(p_shared_weak_owners);
      while (__stxr(v65 + 1, p_shared_weak_owners));
      v42[4].__shared_owners_ = (uint64_t)v41;
      v42[4].__shared_weak_owners_ = (uint64_t)v42;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      v61 = v188;
    }

    else
    {
      do
        v66 = __ldxr(p_shared_owners);
      while (__stxr(v66 + 1, p_shared_owners));
      v67 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      v42[4].__shared_owners_ = (uint64_t)v41;
      v42[4].__shared_weak_owners_ = (uint64_t)v42;
    }

    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      v189 = v61;
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      v61 = v189;
    }

    goto LABEL_103;
  }

  if ((_DWORD)v9 == 1886614639)
  {
    (*(void (**)(_DWORD *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v211, a1);
    v39 = operator new(0x298uLL);
    v39[1] = 0LL;
    v39[2] = 0LL;
    *v39 = off_476288;
    v40 = v16;
    sub_1707E8(v39 + 3, a1, (uint64_t)v202, (uint64_t)v211, 1886614639, v16);
    *(void *)buf = v39 + 3;
    *(void *)&buf[8] = v39;
    sub_AFDAC((uint64_t)buf, v39 + 13, (uint64_t)(v39 + 3));
    v187 = *(void **)buf;
    v201 = *(_OWORD *)buf;
    sub_19DFC((uint64_t)v211);
    v41 = v187;
    goto LABEL_124;
  }

  (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
  v51 = (std::__shared_weak_count *)operator new(0x228uLL);
  v51->__shared_owners_ = 0LL;
  v52 = (unint64_t *)&v51->__shared_owners_;
  v51->__shared_weak_owners_ = 0LL;
  v51->__vftable = (std::__shared_weak_count_vtbl *)off_4762F8;
  sub_17040C((uint64_t)buf, 1886609775, v16);
  memset(v211, 0, 24);
  v208 = 0LL;
  v209 = 0LL;
  v210 = 0LL;
  sub_7D084(__p, "CarPlayPartnershipUID");
  v41 = &v51[1].__vftable;
  sub_F9638( (uint64_t)&v51[1],  (uint64_t *)buf,  a1,  (uint64_t)v211,  (uint64_t)v202,  (uint64_t)theString,  (char **)&v208,  (__int128 *)__p);
  v51[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
  LOWORD(v51[22].__shared_weak_owners_) = 0;
  if (v207 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v208;
  sub_7A668((void ***)__p);
  sub_32C8C(*(void **)&buf[24]);
  *v41 = &off_473148;
  v53 = sub_138E8(23);
  v54 = sub_138E8(27);
  v55 = 0;
  v56 = 0LL;
  *(void *)buf = 0x100000002LL;
  v57 = *(void *)(v53 + 8);
  while (1)
  {
    v58 = *(int *)&buf[4 * v56];
    v59 = v55;
    if (((v57 & v58) != 0) != ((*(void *)(v54 + 8) & v58) != 0)) {
      break;
    }
    v55 = 1;
    v56 = 1LL;
    if ((v59 & 1) != 0) {
      goto LABEL_106;
    }
  }

  if ((v57 & v58) == 0) {
    v53 = v54;
  }
LABEL_106:
  v70 = *(os_log_s **)v53;
  if (v70 && os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "Port_CarPlay_Aspen.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 247;
    _os_log_impl(&dword_0, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating CarPlay Aux Audio Output port", buf, 0x12u);
  }

  *(void *)&v61 = v51 + 1;
  *((void *)&v61 + 1) = v51;
  v71 = (std::__shared_weak_count *)v51[4].__shared_weak_owners_;
  if (!v71)
  {
    do
      v75 = __ldxr(v52);
    while (__stxr(v75 + 1, v52));
    v76 = (unint64_t *)&v51->__shared_weak_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    v51[4].__shared_owners_ = (uint64_t)v41;
    v51[4].__shared_weak_owners_ = (uint64_t)v51;
LABEL_119:
    v40 = v16;
    do
      v78 = __ldaxr(v52);
    while (__stlxr(v78 - 1, v52));
    if (!v78)
    {
      v191 = v61;
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      v61 = v191;
    }

    goto LABEL_123;
  }

  v40 = v16;
  if (v71->__shared_owners_ == -1)
  {
    do
      v72 = __ldxr(v52);
    while (__stxr(v72 + 1, v52));
    v190 = v61;
    v73 = (unint64_t *)&v51->__shared_weak_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    v51[4].__shared_owners_ = (uint64_t)v41;
    v51[4].__shared_weak_owners_ = (uint64_t)v51;
    std::__shared_weak_count::__release_weak(v71);
    v61 = v190;
    goto LABEL_119;
  }

    uint64_t v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }

    uint64_t v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }

    uint64_t v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }

  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }

void *sub_52830(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

uint64_t *sub_52918(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0LL;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }

  else
  {
    unint64_t v4 = ((_DWORD)v2 - 1) & a2;
  }

  uint8x8_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0LL;
  }
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }

    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }

      else
      {
        v7 &= v2 - 1;
      }

      if (v7 != v4) {
        return 0LL;
      }
    }
  }

  return result;
}

CFDictionaryRef sub_529CC(const __CFDictionary *result, const void *a2, const __CFDictionary **a3)
{
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      unint64_t v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFArrayGetTypeID())
      {
        *a3 = v4;
        return &dword_0 + 1;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_52A24(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    float v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 8) = 0LL;
    if (v6[1]) {
      BOOL v9 = (uint64_t *)v6[1];
    }
    else {
      BOOL v9 = v6;
    }
    if (!v9)
    {
      uint8x8_t v20 = 0LL;
LABEL_29:
      sub_32C8C(v20);
      goto LABEL_30;
    }

    unint64_t v10 = sub_68080((uint64_t)v9);
    if (a2 != a3)
    {
      unint64_t v11 = v9;
      unint64_t v12 = a2;
      do
      {
        BOOL v9 = v10;
        unsigned int v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        unint64_t v14 = *v8;
        uint64_t v15 = (uint64_t **)(a1 + 8);
        unint64_t v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              uint64_t v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7)) {
                break;
              }
              unint64_t v14 = (uint64_t *)*v14;
              unint64_t v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }

            unint64_t v14 = (uint64_t *)v14[1];
          }

          while (v14);
          unint64_t v16 = v15 + 1;
        }

LABEL_14:
        sub_32C38((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          unint64_t v10 = sub_68080((uint64_t)v10);
        }
        else {
          unint64_t v10 = 0LL;
        }
        unint64_t v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            unint64_t v17 = (void *)*v17;
          }

          while (v17);
        }

        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            unint64_t v12 = a2;
          }

          while (!v18);
        }

        if (!v9) {
          break;
        }
        unint64_t v11 = v9;
        unint64_t v12 = a2;
      }

      while (a2 != a3);
    }

    sub_32C8C(v9);
    if (v10)
    {
      uint8x8_t v20 = v10;
      goto LABEL_29;
    }
  }

    if (v14)
    {
      uint8x8_t v26 = (os_log_t *)sub_138E8(13);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v35, a2);
        v28 = v36;
        int v29 = (void **)v35[0];
        sub_2CA1C(__p, a3);
        int v30 = v35;
        if (v28 < 0) {
          int v30 = v29;
        }
        if (v34 >= 0) {
          unint64_t v31 = __p;
        }
        else {
          unint64_t v31 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "AggregateDevice_CommonBase.cpp";
        v38 = 1024;
        v39 = 398;
        v40 = 2080;
        *(void *)v41 = v30;
        *(_WORD *)&v41[8] = 2080;
        v42 = v31;
        v43 = 1024;
        v44 = v14;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: chain->SetProperty failed for AU (%s) property %s with error %d.",  buf,  0x2Cu);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
      }

      unint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v32 = &off_4865A0;
      v32[2] = v14;
    }
  }

    if (v14)
    {
      uint8x8_t v26 = (os_log_t *)sub_138E8(13);
      unint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v35, a2);
        v28 = v36;
        int v29 = (void **)v35[0];
        sub_2CA1C(__p, a3);
        int v30 = v35;
        if (v28 < 0) {
          int v30 = v29;
        }
        if (v34 >= 0) {
          unint64_t v31 = __p;
        }
        else {
          unint64_t v31 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "AggregateDevice_CommonBase.cpp";
        v38 = 1024;
        v39 = 414;
        v40 = 2080;
        *(void *)v41 = v30;
        *(_WORD *)&v41[8] = 2080;
        v42 = v31;
        v43 = 1024;
        v44 = v14;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: chain->GetDSPProperty failed for AU (%s) property % s with error %d.",  buf,  0x2Cu);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
      }

      unint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v32 = &off_4865A0;
      v32[2] = v14;
    }
  }

  if (v3 == v5)
  {
    unint64_t v4 = 4LL;
    uint8x8_t v3 = v5;
  }

  else
  {
    if (!v3) {
      return result;
    }
    unint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void *))(*v3 + 8 * v4))(v3);
}

    unint64_t v12 = (char *)operator new(0x50uLL);
    v17[0] = v12;
    v17[1] = a3 + 1;
    BOOL v18 = 0;
    unsigned int v13 = v12 + 32;
    if (SHIBYTE(v20) < 0)
    {
      sub_24054(v13, __dst[0], (unint64_t)__dst[1]);
    }

    else
    {
      *(_OWORD *)unsigned int v13 = *(_OWORD *)__dst;
      *((void *)v12 + 6) = v20;
    }

    *(_OWORD *)(v12 + 56) = *(_OWORD *)__p;
    *((void *)v12 + 9) = v22;
    __p[1] = 0LL;
    v22 = 0LL;
    __p[0] = 0LL;
    BOOL v18 = 1;
    *(void *)unint64_t v12 = 0LL;
    *((void *)v12 + 1) = 0LL;
    *((void *)v12 + 2) = v9;
    *uint64_t i = v12;
    unint64_t v14 = (uint64_t *)**a3;
    if (v14)
    {
      *a3 = v14;
      unint64_t v12 = *i;
    }

    sub_7A420(a3[1], (uint64_t *)v12);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
    v17[0] = 0LL;
    sub_1576A8((uint64_t)v17);
LABEL_20:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (SHIBYTE(v20) < 0) {
      operator delete(__dst[0]);
    }
    operator delete(v7);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
  }

    unint64_t v17 = (os_log_t *)sub_138E8(12);
    BOOL v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "CoreTelephonyInterface.cpp";
      v25 = 1024;
      uint8x8_t v26 = 413;
      unint64_t v14 = "%25s:%-5d No CommCenter process active.";
      uint64_t v15 = v18;
      unint64_t v16 = 18;
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  if (!v20) {
    goto LABEL_14;
  }
  *((_BYTE *)v2 + 8) = 1;
  _CTServerConnectionRegisterForNotification(*v2, kCTConnectionInvalidatedNotification);
  _CTServerConnectionRegisterForNotification(*v2, kCTDaemonReadyNotification);
  _CTServerConnectionRegisterForNotification(*v2, kCTAudioVocoderInfoNotification);
  _CTServerConnectionRegisterForNotification(*v2, kCTAudioSampleRateSwitchCompleteNotification);
  v22 = 0LL;
  float v8 = _CTServerConnectionCopyAudioVocoderInfo(*v2, &v22);
  BOOL v9 = v8;
  unint64_t v10 = HIDWORD(v8);
  if (v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v22 == 0LL;
  }
  if (v11)
  {
    unint64_t v12 = (os_log_t *)sub_138E8(12);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v24 = "CoreTelephonyInterface.cpp";
      v25 = 1024;
      uint8x8_t v26 = 620;
      unint64_t v27 = 1024;
      v28 = v9;
      int v29 = 1024;
      int v30 = v10;
      unint64_t v14 = "%25s:%-5d _CTServerConnectionCopyAudioVocoderInfo returned error: {domain, error} : {%d, %d}";
      uint64_t v15 = v13;
      unint64_t v16 = 30;
LABEL_17:
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
    }
  }

  else
  {
    unint64_t v19 = sub_3617C(&cf, v22);
    if (cf)
    {
      sub_15F86C(v19);
      sub_15E080((uint64_t)buf, (const __CFDictionary **)&cf);
      sub_161640((uint64_t)buf);
      if (cf) {
        CFRelease(cf);
      }
    }
  }

  if (*(_DWORD *)a1 != (_DWORD)xmmword_48EC70) {
LABEL_18:
  }
    sub_161C34((uint64_t *)&v33, 0, 0);
LABEL_19:
  unint64_t v6 = *(_OWORD *)a1;
  dbl_48EC80 = *(double *)(a1 + 16);
  xmmword_48EC70 = v6;
  uint64_t v7 = sub_138E8(12);
  float v8 = sub_138E8(39);
  BOOL v9 = 0;
  unint64_t v10 = 0LL;
  *(void *)buf = 0x100000002LL;
  unint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    unint64_t v12 = *(int *)&buf[4 * v10];
    unsigned int v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    BOOL v9 = 1;
    unint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_29;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_29:
  unint64_t v14 = *(os_log_s **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = (uint64_t)v33;
    memset(&v36, 0, sizeof(v36));
    std::string::append(&v36, "{ ", 2uLL);
    if ((void **)v15 != &v34)
    {
      while (1)
      {
        std::to_string(&v37, *(_DWORD *)(v15 + 28));
        if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v16 = &v37;
        }
        else {
          unint64_t v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size = v37.__r_.__value_.__s.__size_;
        }
        else {
          size = v37.__r_.__value_.__l.__size_;
        }
        std::string::append(&v36, (const std::string::value_type *)v16, size);
        BOOL v18 = *(void **)(v15 + 8);
        if (v18)
        {
          do
          {
            unint64_t v19 = (void **)v18;
            BOOL v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            unint64_t v19 = *(void ***)(v15 + 16);
            uint8x8_t v3 = *v19 == (void *)v15;
            uint64_t v15 = (uint64_t)v19;
          }

          while (!v3);
        }

        if (v19 == &v34) {
          break;
        }
        std::string::append(&v36, ", ", 2uLL);
        uint64_t v15 = (uint64_t)v19;
      }
    }

    std::string::append(&v36, " }", 2uLL);
    if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint8x8_t v20 = &v36;
    }
    else {
      uint8x8_t v20 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 813;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v20;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Result of vocoder update was %s", buf, 0x1Cu);
  }

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x198560LL);
      }
    }

    else
    {
      int v30 = sub_138E8(13);
      unint64_t v31 = sub_8C7D4(1, *(void **)v30, *(void *)(v30 + 8));
      unint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (v32)
      {
        unint64_t v19 = v32;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 280;
          uint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          v22 = v19;
          unsigned int v23 = 34;
          goto LABEL_13;
        }

        goto LABEL_14;
      }
    }
  }

  unint64_t v19 = 0LL;
  goto LABEL_16;
}
      }
    }

    else
    {
      v38 = sub_138E8(13);
      v39 = sub_8C7D4(1, *(void **)v38, *(void *)(v38 + 8));
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      unint64_t v27 = v40;
      if (v40)
      {
        unint64_t v27 = v40;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a16) = 2080;
          *(void *)((char *)&a16 + 4) = "";
          WORD6(a16) = 1024;
          *(_DWORD *)((char *)&a16 + 14) = 288;
          int v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          int v30 = v27;
          unint64_t v31 = 34;
          goto LABEL_13;
        }

        goto LABEL_14;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x198B64LL);
}
      }
    }

    else
    {
      v39 = sub_138E8(13);
      v40 = sub_8C7D4(1, *(void **)v39, *(void *)(v39 + 8));
      v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      v28 = v41;
      if (v41)
      {
        v28 = v41;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = "";
          WORD6(a18) = 1024;
          *(_DWORD *)((char *)&a18 + 14) = 270;
          int v30 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          unint64_t v31 = v28;
          unint64_t v32 = 34;
          goto LABEL_13;
        }

        goto LABEL_14;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x199250LL);
}

  *a5 = a3;
  std::mutex::unlock(v10);
}

    unint64_t v11 = (os_log_t *)sub_138E8(13);
    unint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      unint64_t v32 = 1024;
      *(_DWORD *)BOOL v33 = 1575;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    unsigned int v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v13 = &off_4865A0;
    v13[2] = 2003332927;
  }

  if (v8 <= 1986817376)
  {
    if (v8 == 1919774835)
    {
      unint64_t v14 = *(uint64_t ***)(a1 + 344);
      *(_DWORD *)__p = 1919774835;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      *(void *)buf = *(void *)a2;
      *(_DWORD *)&buf[8] = a2[2];
      *(void *)&v33[2] = a3;
      *(void *)&v33[10] = a4;
      sub_18803C(v14, (unsigned int *)__p, (unsigned int *)buf);
      return 1LL;
    }

    BOOL v9 = 1986229104;
    goto LABEL_9;
  }

  if (v8 == 1986817377)
  {
    uint64_t v15 = *(uint64_t ***)(a1 + 344);
    *(_DWORD *)__p = 1986817377;
    *(void *)&__p[4] = *(void *)(a1 + 128);
    *(void *)buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v33[2] = a3;
    *(void *)&v33[10] = a4;
    sub_18803C(v15, (unsigned int *)__p, (unsigned int *)buf);
  }

  else if (v8 != 1987013741)
  {
    goto LABEL_14;
  }

  int v29 = 1987013732;
  int v30 = *(void *)(a1 + 128);
  unint64_t v16 = *(uint64_t ***)(a1 + 344);
  *(void *)buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  *(void *)&v33[2] = a3;
  *(void *)&v33[10] = a4;
  sub_18803C(v16, &v29, (unsigned int *)buf);
  if (*(_BYTE *)(a1 + 311))
  {
    sub_F35C8(*(void *)(a1 + 96), &v29, (uint64_t)sub_1C30A4, a1);
    unint64_t v17 = (os_log_t *)sub_138E8(18);
    BOOL v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v19 = *(void *)(a1 + 96);
        sub_2CA1C(__p, 1987013732LL);
        uint8x8_t v20 = v28 >= 0 ? __p : *(_BYTE **)__p;
        uint64_t v21 = *(_DWORD *)(a1 + 128);
        v22 = *(_DWORD *)(a1 + 132);
        *(_DWORD *)buf = 136316418;
        *(void *)&buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        unint64_t v32 = 1024;
        *(_DWORD *)BOOL v33 = 1549;
        *(_WORD *)&v33[4] = 2048;
        *(void *)&v33[6] = v19;
        *(_WORD *)&v33[14] = 2080;
        *(void *)&v33[16] = v20;
        int v34 = 1024;
        v35 = v21;
        v36 = 1024;
        v37 = v22;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RemovePropertyListener() succeeded. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
          buf,
          0x32u);
        if (v28 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }

  return 1LL;
}

      uint64_t v7 = (uint64_t *)((char *)v7 + 12);
      if (v7 == v6) {
        goto LABEL_48;
      }
    }

    v22 = *v8;
    if (*v8)
    {
      unsigned int v23 = a1 + 21;
      v24 = *v8;
      do
      {
        v25 = *((_DWORD *)v24 + 8);
        uint8x8_t v26 = v25 >= inAddress.mSelector;
        if (v25 >= inAddress.mSelector) {
          unint64_t v27 = (uint64_t **)v24;
        }
        else {
          unint64_t v27 = (uint64_t **)(v24 + 1);
        }
        if (v26) {
          unsigned int v23 = v24;
        }
        v24 = *v27;
      }

      while (*v27);
      if (v23 != (uint64_t *)v8 && inAddress.mSelector >= *((_DWORD *)v23 + 8))
      {
        v28 = (uint64_t *)v23[1];
        int v29 = v23;
        if (v28)
        {
          do
          {
            int v30 = v28;
            v28 = (uint64_t *)*v28;
          }

          while (v28);
        }

        else
        {
          do
          {
            int v30 = (uint64_t *)v29[2];
            unint64_t v31 = *v30 == (void)v29;
            int v29 = v30;
          }

          while (!v31);
        }

        --a1[22];
        sub_911E8(v22, v23);
        sub_32C8C((void *)v23[6]);
        operator delete(v23);
      }
    }

    unint64_t v32 = (os_log_t *)sub_138E8(17);
    BOOL v33 = *v32;
    if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    sub_2CA1C(__p, inAddress.mSelector);
    int v34 = __p;
    if (v36 < 0) {
      int v34 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    v39 = "PhysicalDevice.cpp";
    v40 = 1024;
    v41 = 672;
    v42 = 1024;
    v43 = v5;
    v44 = 2080;
    v45 = v34;
    unint64_t v19 = v33;
    uint8x8_t v20 = "%25s:%-5d Device [%u] removed device property [%s] listener";
    uint64_t v21 = 34;
    goto LABEL_46;
  }

  v22 = sub_138E8(18);
  unsigned int v23 = sub_138E8(38);
  v24 = 0;
  v25 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint8x8_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    unint64_t v27 = *(int *)&buf[4 * v25];
    v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    v24 = 1;
    v25 = 1LL;
    if ((v28 & 1) != 0)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }
  }

  if ((v26 & v27) == 0) {
    v22 = v23;
  }
  if ((*(void *)(v22 + 8) & 1) != 0)
  {
LABEL_22:
    int v29 = *(os_log_s **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "InputVolumeControl_HAL_Common.cpp";
      v84 = 1024;
      v85 = 608;
      v86 = 2048;
      v87 = v10;
      v88 = 2048;
      v89 = v11;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d            HW volume range: %f dB to %f dB", buf, 0x26u);
    }
  }

      uint64_t v7 = 2;
      goto LABEL_21;
    }

    if (v17 < 0)
    {
      unint64_t v16 = 6LL;
      float v8 = (char *)__p;
    }

    else
    {
      unint64_t v17 = 6;
      float v8 = (char *)&__p;
    }

    uint64_t v7 = 0;
    strcpy(v8, "Always");
  }

  else
  {
    CFTypeID v5 = sub_138E8(10);
    if ((*(_BYTE *)(v5 + 8) & 1) == 0) {
      goto LABEL_14;
    }
    unint64_t v6 = *(os_log_s **)v5;
    if (!*(void *)v5) {
      goto LABEL_14;
    }
    uint64_t v7 = 2;
    if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      uint8x8_t v20 = "SystemSettingsManager_Aspen.cpp";
      uint64_t v21 = 1024;
      v22 = 484;
      unsigned int v23 = 2080;
      v24 = "com.apple.HearingAids/HearingAidsCallAudioRoute";
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
    }
  }

      uint64_t v7 = 2;
      goto LABEL_21;
    }

    if (v17 < 0)
    {
      unint64_t v16 = 6LL;
      float v8 = (char *)__p;
    }

    else
    {
      unint64_t v17 = 6;
      float v8 = (char *)&__p;
    }

    uint64_t v7 = 0;
    strcpy(v8, "Always");
  }

  else
  {
    CFTypeID v5 = sub_138E8(10);
    if ((*(_BYTE *)(v5 + 8) & 1) == 0) {
      goto LABEL_14;
    }
    unint64_t v6 = *(os_log_s **)v5;
    if (!*(void *)v5) {
      goto LABEL_14;
    }
    uint64_t v7 = 2;
    if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      uint8x8_t v20 = "SystemSettingsManager_Aspen.cpp";
      uint64_t v21 = 1024;
      v22 = 523;
      unsigned int v23 = 2080;
      v24 = "com.apple.HearingAids/HearingAidsMediaAudioRoute";
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d No preference for %s. Using default.", buf, 0x1Cu);
    }
  }

        sub_32C38((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          unint64_t v10 = sub_68080((uint64_t)v10);
        }
        else {
          unint64_t v10 = 0LL;
        }
        unint64_t v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            unint64_t v17 = (void *)*v17;
          }

          while (v17);
        }

        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            unint64_t v12 = a2;
          }

          while (!v18);
        }

        if (!v9) {
          break;
        }
        unint64_t v11 = v9;
        unint64_t v12 = a2;
      }

      while (a2 != a3);
    }

    sub_32C8C(v9);
    if (v10)
    {
      uint8x8_t v20 = v10;
      goto LABEL_29;
    }
  }

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x24D6C0LL);
      }
    }

    else
    {
      int v30 = *(id *)sub_138E8(13);
      if (v30)
      {
        uint64_t v21 = (os_log_s *)v30;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 1871;
          unsigned int v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          v24 = v21;
          v25 = 34;
          goto LABEL_13;
        }

        goto LABEL_14;
      }
    }
  }

  uint64_t v21 = 0LL;
  goto LABEL_16;
}

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x26EFD8LL);
      }
    }

    else
    {
      v35 = *(id *)sub_138E8(13);
      if (v35)
      {
        uint8x8_t v26 = (os_log_s *)v35;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = "";
          WORD6(a18) = 1024;
          *(_DWORD *)((char *)&a18 + 14) = 98;
          v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          int v29 = v26;
          int v30 = 34;
          goto LABEL_13;
        }

        goto LABEL_14;
      }
    }
  }

  uint8x8_t v26 = 0LL;
  goto LABEL_16;
}

  if (sub_56120() == 2 || sub_56120() == 3)
  {
    sub_2BDADC((uint64_t)buf);
    uint64_t v15 = a1 + 136;
    unint64_t v14 = *(void **)(a1 + 136);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)buf;
    sub_32C8C(v14);
    unint64_t v16 = *(void **)&v41[12];
    *(void *)(a1 + 128) = *(void *)&v41[4];
    *(void *)(a1 + 136) = v16;
    unint64_t v17 = *(void *)&v41[20];
    *(void *)(a1 + 144) = *(void *)&v41[20];
    if (v17)
    {
      v16[2] = v15;
      *(void *)&v41[4] = &v41[12];
      *(void *)&v41[12] = 0LL;
      *(void *)&v41[20] = 0LL;
      unint64_t v16 = 0LL;
    }

    else
    {
      *(void *)(a1 + 128) = v15;
    }

    *(_OWORD *)(a1 + 152) = *(_OWORD *)&v41[28];
    sub_32C8C(v16);
  }

  else
  {
    uint64_t v21 = *a2;
    uint8x8_t v20 = a2[1];
    v22 = a1 + 120;
    *(_DWORD *)(a1 + 156) = a3;
    if (a3 > 0xF)
    {
      v25 = 1.0;
      v24 = 2.0;
      unsigned int v23 = 1;
    }

    else
    {
      unsigned int v23 = byte_4034F0[a3];
      v24 = *(float *)&aKcajmlovdlovBd[4 * a3 + 152];
      v25 = flt_4016F0[a3];
    }

    uint8x8_t v26 = v20;
    unint64_t v27 = v21;
    *(_BYTE *)(a1 + 152) = v23;
    *(float *)(a1 + 160) = v24;
    *(float *)(a1 + 164) = v25;
    if (*(void *)(a1 + 144)) {
      v28 = *(_DWORD *)(*(void *)(a1 + 128) + 28LL);
    }
    else {
      v28 = 0;
    }
    int v29 = sub_64578(a1 + 120);
    unint64_t v31 = *(void **)(a1 + 136);
    int v30 = (void *)(a1 + 136);
    sub_32C8C(v31);
    *(v30 - 1) = v30;
    *int v30 = 0LL;
    v30[1] = 0LL;
    *(float *)&unint64_t v32 = v27;
    sub_886F8(v22, v28, v29, v32, v26);
  }

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      int v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 1) || *(_BYTE *)(a1 + 2))
  {
    float v8 = v2 + 210;
    do
      BOOL v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }

  else
  {
    uint64_t v15 = v2 + 210;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    atomic_load(v15);
  }

  unint64_t v10 = (os_log_t *)sub_138E8(17);
  unint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v12 = atomic_load(v2 + 134);
    sub_2CA1C(__p, v12);
    if (v18 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = (void **)__p[0];
    }
    unint64_t v14 = atomic_load(v2 + 210);
    *(_DWORD *)buf = 136315906;
    uint8x8_t v20 = "Device_BluetoothUnified_Aspen.cpp";
    uint64_t v21 = 1024;
    v22 = 636;
    unsigned int v23 = 2080;
    v24 = v13;
    v25 = 1024;
    uint8x8_t v26 = v14;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth profile: %s, active count: %u", buf, 0x22u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

      uint64_t v15 = **a1;
      unint64_t v16 = *a3;
      *(void *)buf = 1LL;
      buf[2] = 1;
      buf[3] = v16;
      if (v15) {
        (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t *))(*(void *)v15 + 16LL))(v15, buf, a1[2], v27);
      }
      unint64_t v6 = *a1[1];
    }

    if ((v6 & 2) != 0)
    {
      unint64_t v31 = 0LL;
      memset(buf, 0, sizeof(buf));
      sub_28BEC(a2, (uint64_t)buf);
      unint64_t v17 = sub_138E8(16);
      BOOL v18 = sub_138E8(40);
      unint64_t v19 = 0;
      uint8x8_t v20 = 0LL;
      *(void *)v28 = 0x100000002LL;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        v22 = *(int *)&v28[4 * v20];
        unsigned int v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        unint64_t v19 = 1;
        uint8x8_t v20 = 1LL;
        if ((v23 & 1) != 0)
        {
          if ((v21 & 1) == 0) {
            goto LABEL_29;
          }
          goto LABEL_26;
        }
      }

      if ((v21 & v22) == 0) {
        unint64_t v17 = v18;
      }
      if ((*(void *)(v17 + 8) & 1) != 0)
      {
LABEL_26:
        v24 = *(os_log_s **)v17;
        if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v28 = 136315394;
          *(void *)&v28[4] = "AggregateDevice_BroadcastFanout.cpp";
          LOWORD(v29[0]) = 1024;
          *(_DWORD *)((char *)v29 + 2) = 544;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring monitor for primary ouput streams",  v28,  0x12u);
        }
      }

LABEL_30:
  if (a2 != a3)
  {
    uint64_t v21 = (uint64_t **)(a1 + 8);
    do
    {
      v22 = (uint64_t *)operator new(0x20uLL);
      unsigned int v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      v24 = *v21;
      v25 = (uint64_t **)(a1 + 8);
      uint8x8_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            v24 = (uint64_t *)*v24;
            uint8x8_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }

          v24 = (uint64_t *)v24[1];
        }

        while (v24);
        uint8x8_t v26 = v25 + 1;
      }

  if (v30 < 0) {
    operator delete(__p[0]);
  }
}

  v24 = *(void *)(a1 + 104);
  sub_1AF33C((uint64_t *)(v24 + 56));
  sub_1AF33C((uint64_t *)(v24 + 80));
  v25 = (os_log_t *)sub_138E8(4);
  uint8x8_t v26 = *v25;
  if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v27 = *(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 88)) {
      v28 = "input";
    }
    else {
      v28 = "output";
    }
    *(_DWORD *)v63 = 136316162;
    *(void *)&v63[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 482;
    *(_WORD *)&v63[18] = 2080;
    *(void *)&v63[20] = v28;
    *(_WORD *)&v63[28] = 1024;
    *(_DWORD *)&v63[30] = v27;
    *(_WORD *)&v63[34] = 1024;
    *(_DWORD *)&v63[36] = v6;
    _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Refreshing %s VirtualAudio_Stream %u with %u formats...",  v63,  0x28u);
  }

  if (v4 != v5)
  {
    int v29 = 0LL;
    int v30 = 1;
    do
    {
      unint64_t v31 = (__int128 *)((char *)__p + 56 * v29);
      if (*((_DWORD *)v31 + 7))
      {
        unint64_t v32 = *(void *)(a1 + 104);
        sub_1B036C((uint64_t *)(v32 + 56), v31);
        *(_OWORD *)v63 = *v31;
        *(_OWORD *)&v63[16] = v31[1];
        *(_OWORD *)&v63[32] = v31[2];
        v64 = *((void *)v31 + 6);
        sub_1B036C((uint64_t *)(v32 + 80), (__int128 *)v63);
      }

      BOOL v33 = (os_log_t *)sub_138E8(4);
      int v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEBUG))
      {
        sub_1548E8((std::string *)buf, (uint64_t)v31);
        v35 = buf;
        if (buf[23] < 0) {
          v35 = *(_BYTE **)buf;
        }
        *(_DWORD *)v63 = 136315906;
        *(void *)&v63[4] = "VirtualAudio_Stream.cpp";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 487;
        *(_WORD *)&v63[18] = 1024;
        *(_DWORD *)&v63[20] = v30;
        *(_WORD *)&v63[24] = 2080;
        *(void *)&v63[26] = v35;
        _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d   stream format %u: %s", v63, 0x22u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      int v29 = v30;
    }

    while (v6 > v30++);
  }

  v37 = *(_DWORD *)(a1 + 8);
  strcpy(v63, "atfpbolg");
  v63[9] = 0;
  *(_WORD *)&v63[10] = 0;
  BOOL v18 = v56;
  v38 = (unint64_t *)sub_E2D90(v56, v37);
  sub_87EB4(v38, (int *)v63);
  v39 = *(_DWORD *)(a1 + 8);
  strcpy(v63, "amfsbolg");
  v63[9] = 0;
  *(_WORD *)&v63[10] = 0;
  v40 = (unint64_t *)sub_E2D90(v56, v39);
  sub_87EB4(v40, (int *)v63);
  v41 = *(_DWORD *)(*(void *)(a1 + 112) + 8LL);
  strcpy(v63, "amfsbolg");
  v63[9] = 0;
  *(_WORD *)&v63[10] = 0;
  v42 = (unint64_t *)sub_E2D90(v56, v41);
  sub_87EB4(v42, (int *)v63);
  v43 = *(_DWORD *)(*(void *)(a1 + 112) + 8LL);
  strcpy(v63, "#rsnbolg");
  v63[9] = 0;
  *(_WORD *)&v63[10] = 0;
  v44 = (unint64_t *)sub_E2D90(v56, v43);
  sub_87EB4(v44, (int *)v63);
LABEL_48:
  memset(v63, 0, 32);
  memset(buf, 0, sizeof(buf));
  sub_E06F8(a1, (unint64_t *)v63, (unint64_t *)buf);
  (*(void (**)(_BYTE *__return_ptr))(**(void **)(a1 + 120) + 160LL))(v65);
  v45 = *(void *)&v65[8];
  if (v65 == *(_BYTE **)&v65[8])
  {
    v50 = 0;
  }

  else
  {
    do
    {
      sub_B8F68(&v60, (uint64_t *)(v45 + 16), "", 568);
      v46 = v61;
      v47 = *(unsigned __int16 *)(v60 + 184);
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      v50 = (v47 >> 9) & 1;
      v45 = *(void *)(v45 + 8);
    }

    while ((v47 & 0x200) == 0 && v65 != (_BYTE *)v45);
  }

  sub_85B80((uint64_t *)v65);
  if (*(unsigned __int8 *)(a1 + 128) != v50)
  {
    v51 = sub_138E8(4);
    if ((*(_BYTE *)(v51 + 8) & 1) != 0)
    {
      v52 = *(os_log_s **)v51;
      if (*(void *)v51)
      {
        if (os_log_type_enabled(*(os_log_t *)v51, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v65 = 136315650;
          *(void *)&v65[4] = "VirtualAudio_Stream.cpp";
          *(_WORD *)&v65[12] = 1024;
          *(_DWORD *)&v65[14] = 511;
          v66 = 1024;
          v67 = v50;
          _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d stream is associated with high quality audio port: %u",  v65,  0x18u);
        }
      }
    }

    *(_BYTE *)(a1 + 128) = v50;
    strcpy(v65, "qihsbolg");
    v65[9] = 0;
    *(_WORD *)&v65[10] = 0;
    sub_87EB4((unint64_t *)buf, (int *)v65);
  }

  v53 = *(void **)buf;
  sub_E30AC(v18, *(_DWORD *)(a1 + 8), -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2), *(int **)buf);
  v54 = *(_DWORD *)(*(void *)(a1 + 112) + 8LL);
  v55 = *(void **)v63;
  sub_E30AC(v18, v54, -1431655765 * ((*(void *)&v63[8] - *(void *)v63) >> 2), *(int **)v63);
  if (v53) {
    operator delete(v53);
  }
  if (v55) {
    operator delete(v55);
  }
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }

        v42 = (void *)*a1;
        *a1 = v33;
        a1[1] = v34;
        a1[2] = v4;
        a1[3] = v36;
        if (v42)
        {
          operator delete(v42);
          unint64_t v4 = (char *)a1[2];
        }
      }
    }

    else
    {
      a1[4] = v8 - 1024;
      unint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      unint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        unsigned int v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          unint64_t v14 = v13 >> 3;
          uint64_t v15 = v13 >> 3 < -1;
          unint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            unint64_t v17 = v16;
          }
          else {
            unint64_t v17 = v14 + 1;
          }
          BOOL v18 = -(v17 >> 1);
          unint64_t v19 = v17 >> 1;
          uint8x8_t v20 = &v10[-8 * v19];
          uint64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }

          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }

          unint64_t v4 = &v20[v21];
          v54 = &v22[8 * v18];
LABEL_42:
          a1[1] = v54;
          a1[2] = v4;
          goto LABEL_43;
        }

        else {
          unint64_t v32 = (uint64_t)&v4[-*a1] >> 2;
        }
        BOOL v33 = (char *)sub_7DC90(v32);
        int v34 = &v33[8 * (v32 >> 2)];
        v36 = &v33[8 * v35];
        v37 = (uint64_t *)a1[1];
        unint64_t v4 = v34;
        v38 = a1[2] - (void)v37;
        if (v38)
        {
          unint64_t v4 = &v34[v38 & 0xFFFFFFFFFFFFFFF8LL];
          v39 = 8 * (v38 >> 3);
          v40 = &v33[8 * (v32 >> 2)];
          do
          {
            v41 = *v37++;
            *(void *)v40 = v41;
            v40 += 8;
            v39 -= 8LL;
          }

          while (v39);
        }

        goto LABEL_30;
      }
    }

    unsigned int v23 = std::__shared_weak_count::lock(v15);
    if (!v23) {
      goto LABEL_35;
    }
    v24 = v23;
    v25 = v22 == v16;
    uint8x8_t v26 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v24);
    }

      v24 = std::__shared_weak_count::lock(v16);
      if (!v24) {
        goto LABEL_35;
      }
      v25 = v24;
      uint8x8_t v26 = v23 == v17;
      unint64_t v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }

    unint64_t v6 = *v12;
    if (*v12) {
      return v6;
    }
    goto LABEL_31;
  }

  if (*a1 == v6)
  {
    unint64_t v10 = (uint64_t **)v6;
    goto LABEL_16;
  }

  BOOL v9 = *v6;
  if (*v6)
  {
    do
    {
      unint64_t v10 = (uint64_t **)v9;
      BOOL v9 = *(void *)(v9 + 8);
    }

    while (v9);
  }

  else
  {
    uint64_t v15 = v6;
    do
    {
      unint64_t v10 = (uint64_t **)v15[2];
      unint64_t v16 = *v10 == v15;
      uint64_t v15 = (uint64_t *)v10;
    }

    while (v16);
  }

      unsigned int v23 = std::__shared_weak_count::lock(v10);
      if (v23) {
        v24 = v11;
      }
      else {
        v24 = 0LL;
      }
      if (!v17)
      {
LABEL_42:
        unint64_t v27 = v24 == 0;
        goto LABEL_43;
      }

  sub_1BB88(v25);
}

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 560227702;
  }

  unint64_t v2 = 432LL;
  if (a2) {
    unint64_t v2 = 424LL;
  }
  uint8x8_t v3 = *(void *)(a1 + v2);
  if (*(void *)(v3 + 32) != 1LL)
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      unint64_t v27 = "AggregateDevice_Duplex.h";
      *(_DWORD *)buf = 136315650;
      if (a2) {
        unint64_t v16 = "output";
      }
      else {
        unint64_t v16 = "input";
      }
      v28 = 1024;
      int v29 = 369;
      int v30 = 2080;
      unint64_t v31 = v16;
      unsigned int v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError): Aggregate's %s device list contains incorrect number of devices";
      unint64_t v17 = v15;
      BOOL v18 = 28;
      goto LABEL_29;
    }

    goto LABEL_30;
  }

  unint64_t v4 = *(void *)(*(void *)(v3 + 24) + 16LL);
  if (!v4)
  {
    unint64_t v19 = (os_log_t *)sub_138E8(13);
    unint64_t v12 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      v28 = 1024;
      int v29 = 346;
      unsigned int v13 = "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: NULL device";
      goto LABEL_28;
    }

    goto LABEL_30;
  }

  unsigned int v23 = 0x676C6F626E737274LL;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v4 + 16LL))(v4, &v23))
  {
    v22 = 8;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)v4 + 40LL))( v4,  &v23,  0LL,  0LL,  &v22,  &v25);
    if (v22 != 8)
    {
      CFTypeID v5 = (os_log_t *)sub_138E8(13);
      unint64_t v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          unint64_t v27 = "AggregateDevice_Duplex.h";
          v28 = 1024;
          int v29 = 353;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected device sample rate data size",  buf,  0x12u);
        }
      }
    }

    return v25;
  }

  else
  {
    float v8 = (os_log_t *)sub_138E8(16);
    BOOL v9 = *v8;
    uint64_t v7 = 0.0;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v27 = "AggregateDevice_Duplex.h";
      v28 = 1024;
      int v29 = 357;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot get sample rate from device because sample rate property does not exist on device",  buf,  0x12u);
    }
  }

  return v7;
}

  v22 = (os_log_t *)sub_138E8(24);
  unsigned int v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    v24 = (*(uint64_t (**)(void *))(*a1 + 152LL))(a1);
    sub_2CA1C(v41, v24);
    v25 = v42;
    uint8x8_t v26 = *(UInt32 **)v41;
    sub_2CA1C(__p, Property);
    unint64_t v27 = v41;
    if (v25 < 0) {
      unint64_t v27 = v26;
    }
    if (v40 >= 0) {
      v28 = __p;
    }
    else {
      v28 = (void **)__p[0];
    }
    ioDataSize[0] = 136316162;
    *(void *)&ioDataSize[1] = "DSPProcessorManager.cpp";
    LOWORD(ioDataSize[3]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[3] + 2) = 672;
    HIWORD(ioDataSize[4]) = 2080;
    *(void *)&ioDataSize[5] = v27;
    LOWORD(ioDataSize[7]) = 1024;
    *(UInt32 *)((char *)&ioDataSize[7] + 2) = Property;
    HIWORD(ioDataSize[8]) = 2080;
    *(void *)&ioDataSize[9] = v28;
    _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP (%s) static channel setup failed with error: (%d) %s",  (uint8_t *)ioDataSize,  0x2Cu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(*(void **)v41);
    }
  }

  return Property;
}

  unint64_t v16 = *(_DWORD *)(a1 + 484);
  unint64_t v17 = sub_2FC9D4();
  sub_31F9F4();
  BOOL v18 = sub_31F914();
  unint64_t v19 = (os_log_t *)sub_138E8(24);
  uint8x8_t v20 = *v19;
  if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(_DWORD *)(a1 + 484) != 0;
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = "SystemSettingsManager_Aspen.cpp";
    v60 = 1024;
    v61 = 1404;
    v62 = 1024;
    *(_DWORD *)v63 = 0;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v21;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v18;
    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Current system wide PME state: %u, volume limit state: %u. PME Override state: %u",  buf,  0x24u);
  }

  v22 = *(void *)v17;
  if ((_DWORD)v5 == (*(_DWORD *)v17 & 1) && v16 == *(_DWORD *)(v17 + 8))
  {
    unsigned int v23 = (v22 & 4) != 0 ? 5 : 4;
    if (v14 == v23)
    {
      else {
        v24 = 1;
      }
      if (v24 != 1) {
        goto LABEL_83;
      }
      v22 = *(void *)v17;
    }
  }

  v25 = v4 | (4LL * (v14 == 5)) | v22 & 0xFFFFFFFFFFFFFFF8LL;
  if (*(_DWORD *)(a1 + 484)) {
    uint8x8_t v26 = 1;
  }
  else {
    uint8x8_t v26 = v18;
  }
  unint64_t v27 = v26 == 0;
  v28 = 2LL;
  if (v27) {
    v28 = 0LL;
  }
  *(void *)unint64_t v17 = v28 | v25;
  memset(&__p, 0, sizeof(__p));
  std::string::append(&__p, "\n", 1uLL);
  std::string::append(&__p, "System Audio Effects Settings\n", 0x1EuLL);
  std::string::append(&__p, "    Late Night Mode: ", 0x15uLL);
  if ((*(void *)v17 & 1LL) != 0) {
    int v29 = "on\n";
  }
  else {
    int v29 = "off\n";
  }
  if ((*(void *)v17 & 1LL) != 0) {
    int v30 = 3LL;
  }
  else {
    int v30 = 4LL;
  }
  std::string::append(&__p, v29, v30);
  std::string::append(&__p, "    Volume Limit Mode: ", 0x17uLL);
  if ((*(void *)v17 & 2LL) != 0) {
    unint64_t v31 = "on\n";
  }
  else {
    unint64_t v31 = "off\n";
  }
  if ((*(void *)v17 & 2LL) != 0) {
    unint64_t v32 = 3LL;
  }
  else {
    unint64_t v32 = 4LL;
  }
  std::string::append(&__p, v31, v32);
  std::string::append(&__p, "    Enhanced Dialog: ", 0x15uLL);
  if ((*(void *)v17 & 4LL) != 0) {
    BOOL v33 = "on\n";
  }
  else {
    BOOL v33 = "off\n";
  }
  if ((*(void *)v17 & 4LL) != 0) {
    int v34 = 3LL;
  }
  else {
    int v34 = 4LL;
  }
  std::string::append(&__p, v33, v34);
  v35 = sub_138E8(10);
  v36 = sub_138E8(15);
  v37 = 0;
  v38 = 0LL;
  *(void *)buf = 0x100000002LL;
  v39 = *(void *)(v35 + 8);
  while (1)
  {
    v40 = *(int *)&buf[4 * v38];
    v41 = v37;
    if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
      break;
    }
    v37 = 1;
    v38 = 1LL;
    if ((v41 & 1) != 0) {
      goto LABEL_76;
    }
  }

  if ((v39 & v40) == 0) {
    v35 = v36;
  }
LABEL_76:
  v42 = *(os_log_s **)v35;
  if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "SystemSettingsManager_Aspen.cpp";
    v60 = 1024;
    v61 = 1429;
    v62 = 2080;
    *(void *)v63 = p_p;
    _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_INFO,  "%25s:%-5d System Audio Effects Settings changed. Updated settings and queueing system audio effects notification: %s",  buf,  0x1Cu);
  }

  v44 = operator new(0x10uLL);
  v44[2] = 0;
  *(void *)v44 = &off_474B00;
  (*(void (**)(uint64_t))(*(void *)a1 + 328LL))(a1);
LABEL_83:
  v45 = sub_138E8(10);
  if ((*(_BYTE *)(v45 + 8) & 1) != 0)
  {
    v46 = *(os_log_s **)v45;
    if (*(void *)v45)
    {
      if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "SystemSettingsManager_Aspen.cpp";
        v60 = 1024;
        v61 = 1435;
        v62 = 2048;
        *(void *)v63 = a1;
        _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateSystemAudioEffectsSettings()",  buf,  0x1Cu);
      }
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 488));
}

  if (a2 != a3)
  {
    uint64_t v21 = (uint64_t **)(a1 + 8);
    do
    {
      v22 = (uint64_t *)operator new(0x20uLL);
      unsigned int v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      v24 = *v21;
      v25 = (uint64_t **)(a1 + 8);
      uint8x8_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            v24 = (uint64_t *)*v24;
            uint8x8_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }

          v24 = (uint64_t *)v24[1];
        }

        while (v24);
        uint8x8_t v26 = v25 + 1;
      }

  if (MGGetBoolAnswer(@"cBy4BcYs5YWtFHbBpt4C6A"))
  {
    v22 = (char *)a1[1];
    uint64_t v21 = a1[2];
    if ((unint64_t)v22 >= v21)
    {
      v24 = (char *)*a1;
      v25 = (uint64_t)&v22[-*a1] >> 2;
      uint8x8_t v26 = v25 + 1;
      unint64_t v27 = v21 - (void)v24;
      if (v27 >> 1 > v26) {
        uint8x8_t v26 = v27 >> 1;
      }
      uint64_t v15 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
      v28 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v28 = v26;
      }
      if (v28)
      {
        v28 = (unint64_t)sub_7A890(v28);
        v24 = (char *)*a1;
        v22 = (char *)a1[1];
      }

      else
      {
        int v29 = 0LL;
      }

      int v30 = (_DWORD *)(v28 + 4 * v25);
      unint64_t v31 = v28 + 4 * v29;
      *int v30 = 13;
      unsigned int v23 = v30 + 1;
      while (v22 != v24)
      {
        unint64_t v32 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--int v30 = v32;
      }

      *a1 = v30;
      a1[1] = v23;
      a1[2] = v31;
      if (v24) {
        operator delete(v24);
      }
    }

    else
    {
      *(_DWORD *)v22 = 13;
      unsigned int v23 = v22 + 4;
    }

    a1[1] = v23;
  }

  sub_31821C();
  if (HIDWORD(qword_49DAC0) == 1
    && (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1
     || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3
     || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 2))
  {
    int v34 = (char *)a1[1];
    BOOL v33 = a1[2];
    if ((unint64_t)v34 >= v33)
    {
      v36 = (char *)*a1;
      v37 = (uint64_t)&v34[-*a1] >> 2;
      v38 = v37 + 1;
      v39 = v33 - (void)v36;
      if (v39 >> 1 > v38) {
        v38 = v39 >> 1;
      }
      uint64_t v15 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL;
      v40 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v40 = v38;
      }
      if (v40)
      {
        v40 = (unint64_t)sub_7A890(v40);
        v36 = (char *)*a1;
        int v34 = (char *)a1[1];
      }

      else
      {
        v41 = 0LL;
      }

      v42 = (_DWORD *)(v40 + 4 * v37);
      v43 = v40 + 4 * v41;
      *v42 = 14;
      v35 = v42 + 1;
      while (v34 != v36)
      {
        v44 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--v42 = v44;
      }

      *a1 = v42;
      a1[1] = v35;
      a1[2] = v43;
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      *(_DWORD *)int v34 = 14;
      v35 = v34 + 4;
    }

    a1[1] = v35;
  }

  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1
    || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3
    || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 2
    || MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 4
    || sub_56120() == 2
    || sub_56120() == 3
    || sub_56120() == 4
    || sub_56120() == 5
    || sub_56120() == 195)
  {
    v46 = (char *)a1[1];
    v45 = a1[2];
    if ((unint64_t)v46 >= v45)
    {
      v48 = (char *)*a1;
      v49 = (uint64_t)&v46[-*a1] >> 2;
      v50 = v49 + 1;
      v51 = v45 - (void)v48;
      if (v51 >> 1 > v50) {
        v50 = v51 >> 1;
      }
      uint64_t v15 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
      v52 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v52 = v50;
      }
      if (v52)
      {
        v52 = (unint64_t)sub_7A890(v52);
        v48 = (char *)*a1;
        v46 = (char *)a1[1];
      }

      else
      {
        v53 = 0LL;
      }

      v54 = (_DWORD *)(v52 + 4 * v49);
      v45 = v52 + 4 * v53;
      *v54 = 19;
      v47 = (char *)(v54 + 1);
      while (v46 != v48)
      {
        v55 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *--v54 = v55;
      }

      *a1 = v54;
      a1[1] = v47;
      a1[2] = v45;
      if (v48)
      {
        operator delete(v48);
        v45 = a1[2];
      }
    }

    else
    {
      *(_DWORD *)v46 = 19;
      v47 = v46 + 4;
    }

    a1[1] = v47;
    if ((unint64_t)v47 >= v45)
    {
      v57 = (char *)*a1;
      v58 = (uint64_t)&v47[-*a1] >> 2;
      v59 = v58 + 1;
      v60 = v45 - (void)v57;
      if (v60 >> 1 > v59) {
        v59 = v60 >> 1;
      }
      uint64_t v15 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL;
      v61 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v61 = v59;
      }
      if (v61)
      {
        v61 = (unint64_t)sub_7A890(v61);
        v57 = (char *)*a1;
        v47 = (char *)a1[1];
      }

      else
      {
        v62 = 0LL;
      }

      v63 = (_DWORD *)(v61 + 4 * v58);
      v64 = v61 + 4 * v62;
      *v63 = 20;
      v56 = v63 + 1;
      while (v47 != v57)
      {
        v65 = *((_DWORD *)v47 - 1);
        v47 -= 4;
        *--v63 = v65;
      }

      *a1 = v63;
      a1[1] = v56;
      a1[2] = v64;
      if (v57) {
        operator delete(v57);
      }
    }

    else
    {
      *(_DWORD *)v47 = 20;
      v56 = v47 + 4;
    }

    a1[1] = v56;
  }

  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
  {
    v67 = (char *)a1[1];
    v66 = a1[2];
    if ((unint64_t)v67 >= v66)
    {
      v69 = (char *)*a1;
      v70 = (uint64_t)&v67[-*a1] >> 2;
      v71 = v70 + 1;
      v72 = v66 - (void)v69;
      if (v72 >> 1 > v71) {
        v71 = v72 >> 1;
      }
      uint64_t v15 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL;
      v73 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v73 = v71;
      }
      if (v73)
      {
        v73 = (unint64_t)sub_7A890(v73);
        v69 = (char *)*a1;
        v67 = (char *)a1[1];
      }

      else
      {
        v74 = 0LL;
      }

      v75 = (_DWORD *)(v73 + 4 * v70);
      v76 = v73 + 4 * v74;
      *v75 = 3;
      v68 = v75 + 1;
      while (v67 != v69)
      {
        v77 = *((_DWORD *)v67 - 1);
        v67 -= 4;
        *--v75 = v77;
      }

      *a1 = v75;
      a1[1] = v68;
      a1[2] = v76;
      if (v69) {
        operator delete(v69);
      }
    }

    else
    {
      *(_DWORD *)v67 = 3;
      v68 = v67 + 4;
    }

    a1[1] = v68;
  }

  if (MGGetBoolAnswer(@"StarkCapability"))
  {
    v79 = (char *)a1[1];
    v78 = a1[2];
    if ((unint64_t)v79 >= v78)
    {
      v81 = (char *)*a1;
      v82 = (uint64_t)&v79[-*a1] >> 2;
      v83 = v82 + 1;
      v84 = v78 - (void)v81;
      if (v84 >> 1 > v83) {
        v83 = v84 >> 1;
      }
      uint64_t v15 = (unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL;
      v85 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v85 = v83;
      }
      if (v85)
      {
        v85 = (unint64_t)sub_7A890(v85);
        v81 = (char *)*a1;
        v79 = (char *)a1[1];
      }

      else
      {
        v86 = 0LL;
      }

      v87 = (_DWORD *)(v85 + 4 * v82);
      v78 = v85 + 4 * v86;
      *v87 = 0;
      v80 = (char *)(v87 + 1);
      while (v79 != v81)
      {
        v88 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--v87 = v88;
      }

      *a1 = v87;
      a1[1] = v80;
      a1[2] = v78;
      if (v81)
      {
        operator delete(v81);
        v78 = a1[2];
      }
    }

    else
    {
      *(_DWORD *)v79 = 0;
      v80 = v79 + 4;
    }

    a1[1] = v80;
    if ((unint64_t)v80 >= v78)
    {
      v90 = (char *)*a1;
      v91 = (uint64_t)&v80[-*a1] >> 2;
      v92 = v91 + 1;
      v93 = v78 - (void)v90;
      if (v93 >> 1 > v92) {
        v92 = v93 >> 1;
      }
      uint64_t v15 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
      v94 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v94 = v92;
      }
      if (v94)
      {
        v94 = (unint64_t)sub_7A890(v94);
        v90 = (char *)*a1;
        v80 = (char *)a1[1];
      }

      else
      {
        v95 = 0LL;
      }

      v96 = (_DWORD *)(v94 + 4 * v91);
      v97 = v94 + 4 * v95;
      *v96 = 1;
      v89 = v96 + 1;
      while (v80 != v90)
      {
        v98 = *((_DWORD *)v80 - 1);
        v80 -= 4;
        *--v96 = v98;
      }

      *a1 = v96;
      a1[1] = v89;
      a1[2] = v97;
      if (v90) {
        operator delete(v90);
      }
    }

    else
    {
      *(_DWORD *)v80 = 1;
      v89 = v80 + 4;
    }

    a1[1] = v89;
  }

  if ((MGGetBoolAnswer(@"assistant") & 1) != 0 || sub_93B80())
  {
    v99 = atomic_load((unsigned __int8 *)&qword_48E840);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_48E840))
    {
      byte_48E83D = sub_14E074();
      __cxa_guard_release(&qword_48E840);
    }

    if (!byte_48E83D)
    {
      v101 = (char *)a1[1];
      v100 = a1[2];
      if ((unint64_t)v101 >= v100)
      {
        v103 = (char *)*a1;
        v104 = (uint64_t)&v101[-*a1] >> 2;
        v105 = v104 + 1;
        v106 = v100 - (void)v103;
        if (v106 >> 1 > v105) {
          v105 = v106 >> 1;
        }
        uint64_t v15 = (unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL;
        v107 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v15) {
          v107 = v105;
        }
        if (v107)
        {
          v107 = (unint64_t)sub_7A890(v107);
          v103 = (char *)*a1;
          v101 = (char *)a1[1];
        }

        else
        {
          v108 = 0LL;
        }

        v109 = (_DWORD *)(v107 + 4 * v104);
        v100 = v107 + 4 * v108;
        *v109 = 6;
        v102 = (char *)(v109 + 1);
        while (v101 != v103)
        {
          v110 = *((_DWORD *)v101 - 1);
          v101 -= 4;
          *--v109 = v110;
        }

        *a1 = v109;
        a1[1] = v102;
        a1[2] = v100;
        if (v103)
        {
          operator delete(v103);
          v100 = a1[2];
        }
      }

      else
      {
        *(_DWORD *)v101 = 6;
        v102 = v101 + 4;
      }

      a1[1] = v102;
      if ((unint64_t)v102 >= v100)
      {
        v112 = (char *)*a1;
        v113 = (uint64_t)&v102[-*a1] >> 2;
        v114 = v113 + 1;
        v115 = v100 - (void)v112;
        if (v115 >> 1 > v114) {
          v114 = v115 >> 1;
        }
        uint64_t v15 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL;
        v116 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v15) {
          v116 = v114;
        }
        if (v116)
        {
          v116 = (unint64_t)sub_7A890(v116);
          v112 = (char *)*a1;
          v102 = (char *)a1[1];
        }

        else
        {
          v117 = 0LL;
        }

        v118 = (_DWORD *)(v116 + 4 * v113);
        v100 = v116 + 4 * v117;
        *v118 = 5;
        v111 = (char *)(v118 + 1);
        while (v102 != v112)
        {
          v119 = *((_DWORD *)v102 - 1);
          v102 -= 4;
          *--v118 = v119;
        }

        *a1 = v118;
        a1[1] = v111;
        a1[2] = v100;
        if (v112)
        {
          operator delete(v112);
          v100 = a1[2];
        }
      }

      else
      {
        *(_DWORD *)v102 = 5;
        v111 = v102 + 4;
      }

      a1[1] = v111;
      if ((unint64_t)v111 >= v100)
      {
        v121 = (char *)*a1;
        v122 = (uint64_t)&v111[-*a1] >> 2;
        v123 = v122 + 1;
        v124 = v100 - (void)v121;
        if (v124 >> 1 > v123) {
          v123 = v124 >> 1;
        }
        uint64_t v15 = (unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL;
        v125 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v15) {
          v125 = v123;
        }
        if (v125)
        {
          v125 = (unint64_t)sub_7A890(v125);
          v121 = (char *)*a1;
          v111 = (char *)a1[1];
        }

        else
        {
          v126 = 0LL;
        }

        v127 = (_DWORD *)(v125 + 4 * v122);
        v100 = v125 + 4 * v126;
        *v127 = 4;
        v120 = (char *)(v127 + 1);
        while (v111 != v121)
        {
          v128 = *((_DWORD *)v111 - 1);
          v111 -= 4;
          *--v127 = v128;
        }

        *a1 = v127;
        a1[1] = v120;
        a1[2] = v100;
        if (v121)
        {
          operator delete(v121);
          v100 = a1[2];
        }
      }

      else
      {
        *(_DWORD *)v111 = 4;
        v120 = v111 + 4;
      }

      a1[1] = v120;
      if ((unint64_t)v120 >= v100)
      {
        v130 = (char *)*a1;
        v131 = (uint64_t)&v120[-*a1] >> 2;
        v132 = v131 + 1;
        v133 = v100 - (void)v130;
        if (v133 >> 1 > v132) {
          v132 = v133 >> 1;
        }
        uint64_t v15 = (unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL;
        v134 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v15) {
          v134 = v132;
        }
        if (v134)
        {
          v134 = (unint64_t)sub_7A890(v134);
          v130 = (char *)*a1;
          v120 = (char *)a1[1];
        }

        else
        {
          v135 = 0LL;
        }

        v136 = (_DWORD *)(v134 + 4 * v131);
        v100 = v134 + 4 * v135;
        *v136 = 17;
        v129 = (char *)(v136 + 1);
        while (v120 != v130)
        {
          v137 = *((_DWORD *)v120 - 1);
          v120 -= 4;
          *--v136 = v137;
        }

        *a1 = v136;
        a1[1] = v129;
        a1[2] = v100;
        if (v130)
        {
          operator delete(v130);
          v100 = a1[2];
        }
      }

      else
      {
        *(_DWORD *)v120 = 17;
        v129 = v120 + 4;
      }

      a1[1] = v129;
      if ((unint64_t)v129 >= v100)
      {
        v139 = (char *)*a1;
        v140 = (uint64_t)&v129[-*a1] >> 2;
        v141 = v140 + 1;
        v142 = v100 - (void)v139;
        if (v142 >> 1 > v141) {
          v141 = v142 >> 1;
        }
        uint64_t v15 = (unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL;
        v143 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v15) {
          v143 = v141;
        }
        if (v143)
        {
          v143 = (unint64_t)sub_7A890(v143);
          v139 = (char *)*a1;
          v129 = (char *)a1[1];
        }

        else
        {
          v144 = 0LL;
        }

        v145 = (_DWORD *)(v143 + 4 * v140);
        v146 = v143 + 4 * v144;
        *v145 = 18;
        v138 = v145 + 1;
        while (v129 != v139)
        {
          v147 = *((_DWORD *)v129 - 1);
          v129 -= 4;
          *--v145 = v147;
        }

        *a1 = v145;
        a1[1] = v138;
        a1[2] = v146;
        if (v139) {
          operator delete(v139);
        }
      }

      else
      {
        *(_DWORD *)v129 = 18;
        v138 = v129 + 4;
      }

      a1[1] = v138;
      if ((_os_feature_enabled_impl("Siri", "hang_up") & 1) != 0 || sub_1CC090())
      {
        v149 = (char *)a1[1];
        v148 = a1[2];
        if ((unint64_t)v149 >= v148)
        {
          v151 = (char *)*a1;
          v152 = (uint64_t)&v149[-*a1] >> 2;
          v153 = v152 + 1;
          v154 = v148 - (void)v151;
          if (v154 >> 1 > v153) {
            v153 = v154 >> 1;
          }
          uint64_t v15 = (unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL;
          v155 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v15) {
            v155 = v153;
          }
          if (v155)
          {
            v155 = (unint64_t)sub_7A890(v155);
            v151 = (char *)*a1;
            v149 = (char *)a1[1];
          }

          else
          {
            v156 = 0LL;
          }

          v157 = (_DWORD *)(v155 + 4 * v152);
          v158 = v155 + 4 * v156;
          *v157 = 7;
          v150 = v157 + 1;
          while (v149 != v151)
          {
            v159 = *((_DWORD *)v149 - 1);
            v149 -= 4;
            *--v157 = v159;
          }

          *a1 = v157;
          a1[1] = v150;
          a1[2] = v158;
          if (v151) {
            operator delete(v151);
          }
        }

        else
        {
          *(_DWORD *)v149 = 7;
          v150 = v149 + 4;
        }

        a1[1] = v150;
      }

      if (_os_feature_enabled_impl("VirtualAudio", "secure_siri"))
      {
        v161 = (char *)a1[1];
        v160 = a1[2];
        if ((unint64_t)v161 >= v160)
        {
          v163 = (char *)*a1;
          v164 = (uint64_t)&v161[-*a1] >> 2;
          v165 = v164 + 1;
          v166 = v160 - (void)v163;
          if (v166 >> 1 > v165) {
            v165 = v166 >> 1;
          }
          uint64_t v15 = (unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL;
          v167 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v15) {
            v167 = v165;
          }
          if (v167)
          {
            v167 = (unint64_t)sub_7A890(v167);
            v163 = (char *)*a1;
            v161 = (char *)a1[1];
          }

          else
          {
            v168 = 0LL;
          }

          v169 = (_DWORD *)(v167 + 4 * v164);
          v170 = v167 + 4 * v168;
          *v169 = 8;
          v162 = v169 + 1;
          while (v161 != v163)
          {
            v171 = *((_DWORD *)v161 - 1);
            v161 -= 4;
            *--v169 = v171;
          }

          *a1 = v169;
          a1[1] = v162;
          a1[2] = v170;
          if (v163) {
            operator delete(v163);
          }
        }

        else
        {
          *(_DWORD *)v161 = 8;
          v162 = v161 + 4;
        }

        a1[1] = v162;
      }
    }
  }

  if (sub_56120() == 2
    || sub_56120() == 3
    || sub_56120() == 4
    || sub_56120() == 5
    || sub_56120() == 195)
  {
    v173 = (char *)a1[1];
    v172 = a1[2];
    if ((unint64_t)v173 >= v172)
    {
      v175 = (char *)*a1;
      v176 = (uint64_t)&v173[-*a1] >> 2;
      v177 = v176 + 1;
      v178 = v172 - (void)v175;
      if (v178 >> 1 > v177) {
        v177 = v178 >> 1;
      }
      uint64_t v15 = (unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL;
      v179 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v179 = v177;
      }
      if (v179)
      {
        v179 = (unint64_t)sub_7A890(v179);
        v175 = (char *)*a1;
        v173 = (char *)a1[1];
      }

      else
      {
        v180 = 0LL;
      }

      v181 = (_DWORD *)(v179 + 4 * v176);
      v172 = v179 + 4 * v180;
      *v181 = 12;
      v174 = (char *)(v181 + 1);
      while (v173 != v175)
      {
        v182 = *((_DWORD *)v173 - 1);
        v173 -= 4;
        *--v181 = v182;
      }

      *a1 = v181;
      a1[1] = v174;
      a1[2] = v172;
      if (v175)
      {
        operator delete(v175);
        v172 = a1[2];
      }
    }

    else
    {
      *(_DWORD *)v173 = 12;
      v174 = v173 + 4;
    }

    a1[1] = v174;
    if ((unint64_t)v174 >= v172)
    {
      v184 = (char *)*a1;
      v185 = (uint64_t)&v174[-*a1] >> 2;
      v186 = v185 + 1;
      v187 = v172 - (void)v184;
      if (v187 >> 1 > v186) {
        v186 = v187 >> 1;
      }
      uint64_t v15 = (unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL;
      v188 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v188 = v186;
      }
      if (v188)
      {
        v188 = (unint64_t)sub_7A890(v188);
        v184 = (char *)*a1;
        v174 = (char *)a1[1];
      }

      else
      {
        v189 = 0LL;
      }

      v190 = (_DWORD *)(v188 + 4 * v185);
      v191 = v188 + 4 * v189;
      *v190 = 21;
      v183 = v190 + 1;
      while (v174 != v184)
      {
        v192 = *((_DWORD *)v174 - 1);
        v174 -= 4;
        *--v190 = v192;
      }

      *a1 = v190;
      a1[1] = v183;
      a1[2] = v191;
      if (v184) {
        operator delete(v184);
      }
    }

    else
    {
      *(_DWORD *)v174 = 21;
      v183 = v174 + 4;
    }

    a1[1] = v183;
  }

  if (sub_7531C())
  {
    v194 = (char *)a1[1];
    v193 = a1[2];
    if ((unint64_t)v194 >= v193)
    {
      v196 = (char *)*a1;
      v197 = (uint64_t)&v194[-*a1] >> 2;
      v198 = v197 + 1;
      v199 = v193 - (void)v196;
      if (v199 >> 1 > v198) {
        v198 = v199 >> 1;
      }
      uint64_t v15 = (unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL;
      v200 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v200 = v198;
      }
      if (v200)
      {
        v200 = (unint64_t)sub_7A890(v200);
        v196 = (char *)*a1;
        v194 = (char *)a1[1];
      }

      else
      {
        v201 = 0LL;
      }

      v202 = (_DWORD *)(v200 + 4 * v197);
      v203 = v200 + 4 * v201;
      *v202 = 23;
      v195 = v202 + 1;
      while (v194 != v196)
      {
        v204 = *((_DWORD *)v194 - 1);
        v194 -= 4;
        *--v202 = v204;
      }

      *a1 = v202;
      a1[1] = v195;
      a1[2] = v203;
      if (v196) {
        operator delete(v196);
      }
    }

    else
    {
      *(_DWORD *)v194 = 23;
      v195 = v194 + 4;
    }

    a1[1] = v195;
  }

  if (sub_1CCDB8())
  {
    v206 = (char *)a1[1];
    v205 = a1[2];
    if ((unint64_t)v206 >= v205)
    {
      v208 = (char *)*a1;
      v209 = (uint64_t)&v206[-*a1] >> 2;
      v210 = v209 + 1;
      v211 = v205 - (void)v208;
      if (v211 >> 1 > v210) {
        v210 = v211 >> 1;
      }
      uint64_t v15 = (unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL;
      v212 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v212 = v210;
      }
      if (v212)
      {
        v212 = (unint64_t)sub_7A890(v212);
        v208 = (char *)*a1;
        v206 = (char *)a1[1];
      }

      else
      {
        v213 = 0LL;
      }

      v214 = (_DWORD *)(v212 + 4 * v209);
      v215 = v212 + 4 * v213;
      *v214 = 24;
      v207 = v214 + 1;
      while (v206 != v208)
      {
        v216 = *((_DWORD *)v206 - 1);
        v206 -= 4;
        *--v214 = v216;
      }

      *a1 = v214;
      a1[1] = v207;
      a1[2] = v215;
      if (v208) {
        operator delete(v208);
      }
    }

    else
    {
      *(_DWORD *)v206 = 24;
      v207 = v206 + 4;
    }

    a1[1] = v207;
  }

  if (sub_1CC1C4())
  {
    v218 = (char *)a1[1];
    v217 = a1[2];
    if ((unint64_t)v218 >= v217)
    {
      v220 = (char *)*a1;
      v221 = (uint64_t)&v218[-*a1] >> 2;
      v222 = v221 + 1;
      v223 = v217 - (void)v220;
      if (v223 >> 1 > v222) {
        v222 = v223 >> 1;
      }
      uint64_t v15 = (unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL;
      v224 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v224 = v222;
      }
      if (v224)
      {
        v224 = (unint64_t)sub_7A890(v224);
        v220 = (char *)*a1;
        v218 = (char *)a1[1];
      }

      else
      {
        v225 = 0LL;
      }

      v226 = (_DWORD *)(v224 + 4 * v221);
      v227 = v224 + 4 * v225;
      *v226 = 27;
      v219 = v226 + 1;
      while (v218 != v220)
      {
        v228 = *((_DWORD *)v218 - 1);
        v218 -= 4;
        *--v226 = v228;
      }

      *a1 = v226;
      a1[1] = v219;
      a1[2] = v227;
      if (v220) {
        operator delete(v220);
      }
    }

    else
    {
      *(_DWORD *)v218 = 27;
      v219 = v218 + 4;
    }

    a1[1] = v219;
  }

  if (_os_feature_enabled_impl("VirtualAudio", "secure_mtd"))
  {
    v230 = (char *)a1[1];
    v229 = a1[2];
    if ((unint64_t)v230 >= v229)
    {
      v232 = (char *)*a1;
      v233 = (uint64_t)&v230[-*a1] >> 2;
      v234 = v233 + 1;
      v235 = v229 - (void)v232;
      if (v235 >> 1 > v234) {
        v234 = v235 >> 1;
      }
      uint64_t v15 = (unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL;
      v236 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v236 = v234;
      }
      if (v236)
      {
        v236 = (unint64_t)sub_7A890(v236);
        v232 = (char *)*a1;
        v230 = (char *)a1[1];
      }

      else
      {
        v237 = 0LL;
      }

      v238 = (_DWORD *)(v236 + 4 * v233);
      v239 = v236 + 4 * v237;
      *v238 = 9;
      v231 = v238 + 1;
      while (v230 != v232)
      {
        v240 = *((_DWORD *)v230 - 1);
        v230 -= 4;
        *--v238 = v240;
      }

      *a1 = v238;
      a1[1] = v231;
      a1[2] = v239;
      if (v232) {
        operator delete(v232);
      }
    }

    else
    {
      *(_DWORD *)v230 = 9;
      v231 = v230 + 4;
    }

    a1[1] = v231;
  }

  if (_os_feature_enabled_impl("VirtualAudio", "secure_sa"))
  {
    v242 = (char *)a1[1];
    v241 = a1[2];
    if ((unint64_t)v242 >= v241)
    {
      v244 = (char *)*a1;
      v245 = (uint64_t)&v242[-*a1] >> 2;
      v246 = v245 + 1;
      v247 = v241 - (void)v244;
      if (v247 >> 1 > v246) {
        v246 = v247 >> 1;
      }
      uint64_t v15 = (unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL;
      v248 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v248 = v246;
      }
      if (v248)
      {
        v248 = (unint64_t)sub_7A890(v248);
        v244 = (char *)*a1;
        v242 = (char *)a1[1];
      }

      else
      {
        v249 = 0LL;
      }

      v250 = (_DWORD *)(v248 + 4 * v245);
      v251 = v248 + 4 * v249;
      *v250 = 10;
      v243 = v250 + 1;
      while (v242 != v244)
      {
        v252 = *((_DWORD *)v242 - 1);
        v242 -= 4;
        *--v250 = v252;
      }

      *a1 = v250;
      a1[1] = v243;
      a1[2] = v251;
      if (v244) {
        operator delete(v244);
      }
    }

    else
    {
      *(_DWORD *)v242 = 10;
      v243 = v242 + 4;
    }

    a1[1] = v243;
  }

  v253 = atomic_load((unsigned __int8 *)&qword_48FDE8);
  if ((v253 & 1) == 0 && __cxa_guard_acquire(&qword_48FDE8))
  {
    byte_48FDE0 = (unsigned __int16)sub_8339C((uint64_t)@"ExclaveCapability") > 0x100u;
    __cxa_guard_release(&qword_48FDE8);
  }

  if (byte_48FDE0)
  {
    v255 = (char *)a1[1];
    v254 = a1[2];
    if ((unint64_t)v255 >= v254)
    {
      v257 = (char *)*a1;
      v258 = (uint64_t)&v255[-*a1] >> 2;
      v259 = v258 + 1;
      v260 = v254 - (void)v257;
      if (v260 >> 1 > v259) {
        v259 = v260 >> 1;
      }
      uint64_t v15 = (unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL;
      v261 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15) {
        v261 = v259;
      }
      if (v261)
      {
        v261 = (unint64_t)sub_7A890(v261);
        v257 = (char *)*a1;
        v255 = (char *)a1[1];
      }

      else
      {
        v262 = 0LL;
      }

      v263 = (_DWORD *)(v261 + 4 * v258);
      v264 = v261 + 4 * v262;
      *v263 = 30;
      v256 = v263 + 1;
      while (v255 != v257)
      {
        v265 = *((_DWORD *)v255 - 1);
        v255 -= 4;
        *--v263 = v265;
      }

      *a1 = v263;
      a1[1] = v256;
      a1[2] = v264;
      if (v257) {
        operator delete(v257);
      }
    }

    else
    {
      *(_DWORD *)v255 = 30;
      v256 = v255 + 4;
    }

    a1[1] = v256;
  }

  v96 = v104;
  v104 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v96);
  BOOL v18 = (std::__shared_weak_count *)*((void *)&v96 + 1);
  if (*((void *)&v96 + 1))
  {
    unint64_t v19 = (unint64_t *)(*((void *)&v96 + 1) + 8LL);
    do
      uint8x8_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  uint64_t v21 = (std::__shared_weak_count *)*((void *)&v104 + 1);
  if (*((void *)&v104 + 1))
  {
    v22 = (unint64_t *)(*((void *)&v104 + 1) + 8LL);
    do
      unsigned int v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if ((_DWORD)qword_49DAC0)
  {
    v24 = (os_log_t *)sub_138E8(17);
    v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "Device_Speaker_Aspen.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 500;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a speaker telemetry port",  (uint8_t *)buf,  0x12u);
    }

    uint8x8_t v26 = (std::__shared_weak_count *)operator new(0x228uLL);
    *(_OWORD *)&v26->__shared_owners_ = 0u;
    unint64_t v27 = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)off_47BE78;
    v28 = (uint64_t)&v26[1];
    memset(ioDataSize, 0, 24);
    int v29 = CFStringCreateWithCString(0LL, "Speaker Telemetry", 0x600u);
    v105 = v29;
    v106 = 1;
    *(void *)&buf[0] = v29;
    BYTE8(buf[0]) = 1;
    if (v29) {
      CFRetain(v29);
    }
    *(void *)&buf[1] = 0LL;
    BYTE8(buf[1]) = 1;
    v112 = 0LL;
    LOBYTE(v113) = 1;
    *(void *)&v104 = CFStringCreateWithCString(0LL, "Speaker Telemetry", 0x600u);
    BYTE8(v104) = 1;
    v107 = 0LL;
    v108 = 0LL;
    v109 = 0LL;
    sub_7D084(__p, "");
    sub_F9638( v28,  &qword_49DA20,  (uint64_t)a1,  (uint64_t)ioDataSize,  (uint64_t)buf,  (uint64_t)&v104,  &v107,  (__int128 *)__p);
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
    LOWORD(v26[22].__shared_weak_owners_) = 0;
    if (v103 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v107;
    sub_7A668((void ***)__p);
    sub_19DFC((uint64_t)&v104);
    sub_19DFC((uint64_t)&v112);
    sub_19DFC((uint64_t)&buf[1]);
    sub_19DFC((uint64_t)buf);
    sub_19DFC((uint64_t)&v105);
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_47E410;
    *(void *)&v94 = v26 + 1;
    *((void *)&v94 + 1) = v26;
    int v30 = (std::__shared_weak_count *)v26[4].__shared_weak_owners_;
    if (v30)
    {
      if (v30->__shared_owners_ != -1)
      {
LABEL_61:
        v95 = v94;
        sub_3711D4((uint64_t)a1, (void ***)&v95);
        v38 = (std::__shared_weak_count *)*((void *)&v95 + 1);
        if (*((void *)&v95 + 1))
        {
          v39 = (unint64_t *)(*((void *)&v95 + 1) + 8LL);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }

        goto LABEL_66;
      }

      do
        unint64_t v31 = __ldxr(v27);
      while (__stxr(v31 + 1, v27));
      unint64_t v32 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        BOOL v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v26[4].__shared_owners_ = v28;
      v26[4].__shared_weak_owners_ = (uint64_t)v26;
      std::__shared_weak_count::__release_weak(v30);
    }

    else
    {
      do
        int v34 = __ldxr(v27);
      while (__stxr(v34 + 1, v27));
      v35 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v26[4].__shared_owners_ = v28;
      v26[4].__shared_weak_owners_ = (uint64_t)v26;
    }

    do
      v37 = __ldaxr(v27);
    while (__stlxr(v37 - 1, v27));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }

    goto LABEL_61;
  }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    v25 = sub_2D7684(a1, buf, a3);
    unint64_t v10 = v25;
    unint64_t v11 = v25 >> 8;
    if (*(void *)((char *)v33 + 2))
    {
      *(void *)((char *)&v33[1] + 2) = *(void *)((char *)v33 + 2);
      operator delete(*(void **)((char *)v33 + 2));
    }
  }

  return v10 | (v11 << 8);
}

  if (!a1[40] && *(_DWORD *)(a3 + 4) != 1768776806)
  {
    unsigned int v23 = sub_138E8(20);
    if ((*(_BYTE *)(v23 + 8) & 1) != 0)
    {
      v24 = *(os_log_s **)v23;
      if (*(void *)v23)
      {
        if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&v30, *(unsigned int *)(a3 + 4));
          v25 = SHIBYTE(v32);
          uint8x8_t v26 = (void **)v30;
          sub_2CA1C(v34, 1768776806LL);
          unint64_t v27 = &v30;
          if (v25 < 0) {
            unint64_t v27 = v26;
          }
          if (v35 >= 0) {
            v28 = v34;
          }
          else {
            v28 = (void **)v34[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "RoutingTypes.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2870;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v27;
          v37 = 2080;
          *(void *)v38 = v28;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.",  buf,  0x26u);
          if (v35 < 0) {
            operator delete(v34[0]);
          }
          if (SHIBYTE(v32) < 0) {
            operator delete(v30);
          }
        }
      }
    }

    sub_1FEC04((uint64_t)buf, *(_DWORD *)a3, 1768776806, (_OWORD *)(a3 + 8), *(_DWORD *)(a3 + 24), a3 + 32);
    sub_2D9354(&v30, a2, buf);
    sub_2D9708((uint64_t)a1, (uint64_t)&v30);
    if (v33)
    {
      sub_D0C4C(v32);
      int v29 = v30;
      int v30 = 0LL;
      if (v29) {
        operator delete(v29);
      }
    }

    if (*(void *)&v38[2])
    {
      v39 = *(void *)&v38[2];
      operator delete(*(void **)&v38[2]);
    }
  }

    sub_3686A0(a1, a2, a3, a4, a5, (float *)a6);
    return;
  }

  if (mSelector != 1684370276)
  {
    if (mSelector == 1685087596)
    {
      int v29 = *(_DWORD *)(a1 + 268);
      strcpy(buf, "lepdbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      int v30 = sub_379B90(v29, (uint64_t)buf, a3, a4, a6);
      if (v30)
      {
        v57 = (os_log_t *)sub_138E8(13);
        v58 = *v57;
        if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "Device_AOP_Aspen.cpp";
          v65 = 1024;
          v66 = 270;
          _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting kAudioDevicePropertyEnableListening",  buf,  0x12u);
        }

        v59 = __cxa_allocate_exception(0x10uLL);
        *(void *)v59 = &off_4865A0;
        v59[2] = v30;
      }

      return;
    }

    if (mSelector == 1885631346)
    {
      if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != a5)
      {
        v50 = (os_log_t *)sub_138E8(13);
        v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          v60 = *(void *)&a2->mSelector;
          mElement = a2->mElement;
          sub_613AC((uint64_t)__p, (unsigned int *)&v60);
          v52 = v63;
          v53 = (void **)__p[0];
          v54 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          v55 = __p;
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = "Device_AOP_Aspen.cpp";
          if (v52 < 0) {
            v55 = v53;
          }
          v65 = 1024;
          v66 = 233;
          v67 = 2080;
          v68 = (const char *)v55;
          v69 = 1024;
          LODWORD(v70[0]) = a5;
          WORD2(v70[0]) = 1024;
          *(_DWORD *)((char *)v70 + 6) = v54;
          _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v63 < 0) {
            operator delete(__p[0]);
          }
        }

        v56 = __cxa_allocate_exception(0x10uLL);
        *(void *)v56 = &off_4865A0;
        v56[2] = 561211770;
      }

      unint64_t v17 = sub_379B08();
      if (v17) {
        (*(void (**)(uint64_t, double))(*(void *)v17 + 112LL))(v17, *a6);
      }
      return;
    }

    goto LABEL_30;
  }

  if (*(_DWORD *)(a1 + 504) != 1)
  {
    v22 = *(void *)(a1 + 496);
    unsigned int v23 = *(void *)(v22 + 112);
    v24 = *(void *)(v22 + 120);
    uint64_t v15 = v22 + 112;
    if (v23 != v24)
    {
      unint64_t v16 = 1;
      goto LABEL_28;
    }
  }

LABEL_38:
      sub_32C38((uint64_t **)a1, (uint64_t)v25, v26, v22);
      unint64_t v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          unint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }

        while (!v18);
      }

      a2 = v28;
    }

    while (v28 != a3);
  }

      if ((_DWORD)v4 != v14) {
        return result;
      }
      goto LABEL_39;
    }

    if (v2 != 1668182896)
    {
      unint64_t v6 = 17011;
      goto LABEL_22;
    }

  if (v8) {
    (*(void (**)(_DWORD *))(*(void *)v7 + 24LL))(a1 + 62);
  }
  if (v4) {
    sub_FD804(v4);
  }
}

      if (!v24) {
        goto LABEL_42;
      }
      unint64_t v31 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (v32)
      {
LABEL_42:
        if (!v18) {
          goto LABEL_44;
        }
LABEL_43:
        std::__shared_weak_count::__release_weak(v18);
        goto LABEL_44;
      }

      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (v18) {
        goto LABEL_43;
      }
LABEL_44:
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v28)
      {
        BOOL v33 = v7 + 2;
        int v34 = *(void **)(a2 + 8);
        if (v7 + 2 == v34)
        {
          unint64_t v6 = v7;
        }

        else
        {
          do
          {
            unint64_t v6 = v33;
            v35 = *(_OWORD *)v33;
            *BOOL v33 = 0LL;
            v33[1] = 0LL;
            v36 = (std::__shared_weak_count *)*(v33 - 1);
            *((_OWORD *)v33 - 1) = v35;
            if (v36) {
              std::__shared_weak_count::__release_weak(v36);
            }
            v33 += 2;
          }

          while (v6 + 2 != v34);
          BOOL v33 = *(void **)(a2 + 8);
        }

        while (v33 != v6)
        {
          v37 = (std::__shared_weak_count *)*(v33 - 1);
          if (v37) {
            std::__shared_weak_count::__release_weak(v37);
          }
          v33 -= 2;
        }

        *(void *)(a2 + 8) = v6;
      }

      else
      {
        v7 += 2;
        unint64_t v6 = *(void **)(a2 + 8);
      }
    }

    while (v7 != v6);
    unint64_t v2 = a1[1];
LABEL_63:
    v3 += 2;
  }

  while (v3 != v2);
}

  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  return v25;
}

  sub_85B80(&v36);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v45[0]);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }

      sub_32C38((uint64_t **)a1, (uint64_t)v25, v26, v22);
      unint64_t v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          unint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }

        while (!v18);
      }

      a2 = v28;
    }

    while (v28 != a3);
  }

  unint64_t v11 = (os_log_t *)sub_138E8(22);
  unint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    sub_1548E8(&__p, a2);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v17 = "VirtualStream.cpp";
    BOOL v18 = 1024;
    unint64_t v19 = 1738;
    uint8x8_t v20 = 2080;
    uint64_t v21 = p_p;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
  }

  return 1LL;
}

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
      a7 += (std::chrono::system_clock::now().__d_.__rep_ - v28.__d_.__rep_) / -1000;
    }

    v46 = sub_138E8(13);
    if ((*(_BYTE *)(v46 + 8) & 1) != 0)
    {
      v47 = *(os_log_s **)v46;
      if (*(void *)v46)
      {
        if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
        {
          v56 = *a3;
          v57 = *((_DWORD *)a3 + 2);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v56);
          v48 = v59 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          v69 = 1024;
          v70 = 288;
          v71 = 2080;
          *(void *)v72 = v48;
          *(_WORD *)&v72[8] = 1024;
          *(_DWORD *)&v72[10] = v55;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v59 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    v25 = 0LL;
    goto LABEL_97;
  }

  v39 = (os_log_t *)sub_138E8(13);
  v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v79, v25);
    v41 = a3;
    v42 = v79.__m_.__opaque[15];
    sig = v79.__m_.__sig;
    inClientData = *v41;
    v61 = *((_DWORD *)v41 + 2);
    sub_613AC((uint64_t)&v78, (unsigned int *)&inClientData);
    v44 = &v79;
    if (v42 < 0) {
      v44 = (std::mutex *)sig;
    }
    if (v78.__cv_.__opaque[15] >= 0) {
      v45 = (uint64_t)&v78;
    }
    else {
      v45 = v78.__cv_.__sig;
    }
    buf.mSelector = 136316418;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    v69 = 1024;
    v70 = 207;
    v71 = 1024;
    *(_DWORD *)v72 = v25;
    *(_WORD *)&v72[4] = 2080;
    *(void *)&v72[6] = v44;
    *(_WORD *)&v72[14] = 2080;
    *(void *)&v72[16] = v45;
    *(_WORD *)&v72[24] = 1024;
    *(_DWORD *)&v72[26] = a2;
    _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (v78.__cv_.__opaque[15] < 0) {
      operator delete((void *)v78.__cv_.__sig);
    }
    if (v79.__m_.__opaque[15] < 0) {
      operator delete((void *)v79.__m_.__sig);
    }
  }

  return v25;
}

    unint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Precondition failure.");
  }

  if (!v30[2])
  {
    v25 = (os_log_t *)sub_138E8(13);
    uint8x8_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(void *)&buf.mScope = "Aggregate_HAL_Common.cpp";
      v42 = 1024;
      v43 = 48;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
    }

    goto LABEL_38;
  }

  unint64_t v6 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v31->_os_unfair_lock_opaque + 88LL))( v31,  0LL);
  uint64_t v7 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v5->_os_unfair_lock_opaque + 88LL))(v5, 1LL);
  float v8 = v31;
  BOOL v9 = v32;
  unint64_t v10 = HIDWORD(v32);
  unint64_t v11 = v33;
  sub_C590C(&buf, &v34);
  LOBYTE(__p) = 0;
  v49 = 0;
  unint64_t v12 = sub_2877F0( (uint64_t)v30,  (int *)&v29,  v6 | (unint64_t)(v7 << 32),  v8,  v9,  v10,  v11 & 1,  0,  (uint64_t)&buf,  0LL,  0);
  if (v49 && v48 < 0) {
    operator delete(__p);
  }
  if (v46 && SHIBYTE(v45) < 0) {
    operator delete(*(void **)&buf.mSelector);
  }
  unsigned int v13 = (uint64_t *)operator new(0x38uLL);
  *(_DWORD *)unsigned int v13 = v12;
  sub_AB3D8(v13 + 1, (uint64_t)v30);
  v13[4] = (uint64_t)v31;
  *((_DWORD *)v13 + 10) = HIDWORD(v32);
  v13[6] = v33;
  unint64_t v14 = sub_14DE1C("EnableHALMediaMonitor");
  if ((v33 & 2) != 0)
  {
    uint64_t v15 = v14;
    if (qword_48CDB8 != -1) {
      dispatch_once(&qword_48CDB8, &stru_46DD20);
    }
    if (byte_48CDA8 || byte_48CDA9)
    {
      unint64_t v16 = (os_log_t *)sub_138E8(16);
      unint64_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      {
        buf.mSelector = 136315650;
        *(void *)&buf.mScope = "Aggregate_HAL_Common.cpp";
        v42 = 1024;
        v43 = 72;
        v44 = 1024;
        v45 = v15;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  Setting kAudioDevicePropertyEnableCaptureFile to %d",  (uint8_t *)&buf,  0x18u);
      }

      BOOL v18 = *(_DWORD *)v13;
      inData = v15;
      strcpy((char *)&buf, "ctadbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      unint64_t v19 = AudioObjectSetPropertyData(v18, &buf, 0, 0LL, 4u, &inData);
      if (v19)
      {
        v28 = __cxa_allocate_exception(0x10uLL);
        *(void *)v28 = &off_4865A0;
        v28[2] = v19;
      }
    }
  }

  *a1 = v13;
  if (v36)
  {
    if (v35 < 0) {
      operator delete((void *)v34);
    }
  }

  sub_AB45C(v30);
}

CFDictionaryRef sub_52C24(const __CFDictionary *result, const void *a2, char *a3)
{
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      unint64_t v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFBooleanGetTypeID())
      {
        BOOL v6 = CFBooleanGetValue(v4) == 0;
      }

      else
      {
        CFTypeID v7 = CFGetTypeID(v4);
        if (v7 != CFNumberGetTypeID()) {
          return 0LL;
        }
        int valuePtr = 0;
        CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        BOOL v6 = valuePtr == 0;
      }

      char v8 = !v6;
      *a3 = v8;
      return &dword_0 + 1;
    }
  }

  return result;
}

uint64_t sub_52CCC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = (void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 16) = v4;
    void *v4 = 0LL;
    *(void *)(a2 + 32) = 0LL;
  }

  else
  {
    *(void *)(a1 + 16) = v6;
  }

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  char v8 = (void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a1 + 48;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a2 + 40) = v8;
    *char v8 = 0LL;
    *(void *)(a2 + 56) = 0LL;
  }

  else
  {
    *(void *)(a1 + 40) = v10;
  }

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unint64_t v12 = (void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = a1 + 72;
  uint64_t v15 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *(void *)(a2 + 64) = v12;
    *unint64_t v12 = 0LL;
    *(void *)(a2 + 80) = 0LL;
  }

  else
  {
    *(void *)(a1 + 64) = v14;
  }

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  unint64_t v16 = (void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  uint64_t v18 = a1 + 96;
  uint64_t v19 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v19;
  if (v19)
  {
    *(void *)(v17 + 16) = v18;
    *(void *)(a2 + 88) = v16;
    *unint64_t v16 = 0LL;
    *(void *)(a2 + 104) = 0LL;
  }

  else
  {
    *(void *)(a1 + 88) = v18;
  }

  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint8x8_t v20 = (void *)(a2 + 120);
  uint64_t v21 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v21;
  uint64_t v22 = a1 + 120;
  uint64_t v23 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v23;
  if (v23)
  {
    *(void *)(v21 + 16) = v22;
    *(void *)(a2 + 112) = v20;
    *uint8x8_t v20 = 0LL;
    *(void *)(a2 + 128) = 0LL;
  }

  else
  {
    *(void *)(a1 + 112) = v22;
  }

  uint64_t v24 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v24;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  __int128 v25 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v25;
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  uint64_t v26 = *(void *)(a2 + 184);
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 184) = v26;
  *(void *)(a1 + 192) = 0LL;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0LL;
  *(void *)(a2 + 200) = 0LL;
  *(void *)(a2 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0LL;
  *(void *)(a2 + 224) = 0LL;
  *(void *)(a2 + 232) = 0LL;
  sub_520F8(a1 + 240, (uint64_t *)(a2 + 240));
  sub_520F8(a1 + 280, (uint64_t *)(a2 + 280));
  sub_520F8(a1 + 320, (uint64_t *)(a2 + 320));
  uint64_t v27 = *(void *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(void *)(a1 + 360) = v27;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    __int128 v28 = *(_OWORD *)(a2 + 376);
    *(void *)(a1 + sub_13818(v0 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = v28;
    *(void *)(a2 + 384) = 0LL;
    *(void *)(a2 + sub_13818(v0 + 392) = 0LL;
    *(void *)(a2 + 376) = 0LL;
    *(_BYTE *)(a1 + 400) = 1;
  }

  return a1;
}

uint64_t sub_52EF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 728)) {
    sub_734C4(*(void **)(a1 + 712));
  }
  if (*(_BYTE *)(a1 + 696))
  {
    unint64_t v2 = *(void **)(a1 + 672);
    if (v2)
    {
      *(void *)(a1 + 680) = v2;
      operator delete(v2);
    }
  }

  uint8x8_t v3 = *(std::__shared_weak_count **)(a1 + 664);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 648);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 624);
  if (v5) {
    CFRelease(v5);
  }
  if (*(_BYTE *)(a1 + 608)) {
    sub_13850(a1 + 592);
  }
  uint64_t v6 = *(void **)(a1 + 560);
  if (v6)
  {
    *(void *)(a1 + 568) = v6;
    operator delete(v6);
  }

  if (*(_BYTE *)(a1 + 552)) {
    sub_13850(a1 + 536);
  }
  sub_32C8C(*(void **)(a1 + 520));
  sub_32C8C(*(void **)(a1 + 496));
  sub_32C8C(*(void **)(a1 + 472));
  sub_32C8C(*(void **)(a1 + 448));
  sub_32C8C(*(void **)(a1 + 424));
  return sub_53068(a1);
}

uint64_t **sub_52FB8(uint64_t **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x38uLL);
    v9[4] = *a3;
    *((_DWORD *)v9 + 10) = 0;
    *((_BYTE *)v9 + 44) = 0;
    *((_BYTE *)v9 + 48) = 0;
    sub_32C38(a1, (uint64_t)v7, v6, v9);
    return (uint64_t **)v9;
  }

  return v7;
}

uint64_t sub_53068(uint64_t a1)
{
  uint8x8_t v3 = (void **)(a1 + 216);
  sub_8C8F0(&v3);
  uint8x8_t v3 = (void **)(a1 + 192);
  sub_8C8F0(&v3);
  sub_32C8C(*(void **)(a1 + 120));
  sub_32C8C(*(void **)(a1 + 96));
  sub_11AD14(*(void **)(a1 + 72));
  sub_FF3B8(*(void **)(a1 + 48));
  sub_FF3B8(*(void **)(a1 + 24));
  return a1;
}

void sub_53118(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = sub_53F04(a1, a3);
  uint64_t v7 = v6 + 192;
  if (*(void *)(v6 + 192) == *(void *)(v6 + 200) && *(void *)(v5 + 216) == *(void *)(v5 + 224)
    || *(void *)(v5 + 264)
    || *(void *)(v5 + 304)
    || *(void *)(v5 + 344))
  {
    goto LABEL_28;
  }

  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = 0x706E756C706E6C69LL;
  __p[0] = v8;
  __p[1] = v8 + 1;
  __p[2] = v8 + 1;
  strcpy((char *)&__p[3], "cwdv");
  char v94 = 0;
  int v95 = 3;
  v97 = 0LL;
  uint64_t v98 = 0LL;
  v96 = &v97;
  int v99 = 44739242;
  CFTypeRef cf = 0LL;
  uint64_t v9 = sub_546E0();
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_4735A8;
  v92 = &v91;
  sub_FFB0C((uint64_t *)&v89, v9, __p, (uint64_t)&v91);
  uint64_t v10 = v92;
  if (v92 == &v91)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = &v91;
  }

  else
  {
    if (!v92) {
      goto LABEL_11;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(v10->__r_.__value_.__r.__words[0] + 8 * v11))();
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v97);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  uint64_t v12 = sub_546E0();
  memset(__p, 0, 24);
  strcpy((char *)&__p[3], "cwdv");
  char v94 = 0;
  int v95 = 3;
  v97 = 0LL;
  uint64_t v98 = 0LL;
  v96 = &v97;
  CFTypeRef cf = 0LL;
  int v99 = 44731050;
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_4735A8;
  v92 = &v91;
  sub_FFB0C(v88, v12, __p, (uint64_t)&v91);
  uint64_t v13 = v92;
  if (v92 == &v91)
  {
    uint64_t v14 = 4LL;
    uint64_t v13 = &v91;
    goto LABEL_19;
  }

  if (v92)
  {
    uint64_t v14 = 5LL;
LABEL_19:
    (*(void (**)(void))(v13->__r_.__value_.__r.__words[0] + 8 * v14))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v97);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  for (uint64_t i = v90[0]; i != (os_unfair_lock_s *)&v89; uint64_t i = *(os_unfair_lock_s **)&i[2]._os_unfair_lock_opaque)
    sub_85C34(v88, *(void *)&i[4]._os_unfair_lock_opaque, *(void *)&i[6]._os_unfair_lock_opaque);
  sub_173FAC(v7, (uint64_t)v88);
  sub_85B80(v88);
  sub_85B80((uint64_t *)&v89);
LABEL_28:
  if (*(_BYTE *)(v5 + 140))
  {
    uint64_t v16 = *a2;
    uint64_t v17 = (void *)(*a2 + 104);
    sub_865A0((uint64_t *)(v5 + 88), *(void **)(*a2 + 96), v17);
    uint64_t v18 = sub_138E8(8);
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      uint64_t v19 = *(os_log_s **)v18;
      if (*(void *)v18)
      {
        if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
        {
          sub_110E40(&v91, *(void **)(v16 + 96), v17);
          uint8x8_t v20 = (v91.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v91 : (std::string *)v91.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 5300;
          WORD1(__p[2]) = 2080;
          *(void **)((char *)&__p[2] + 4) = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added disallowed port types %s for the screen dark policy.",  (uint8_t *)__p,  0x1Cu);
        }
      }
    }
  }

  uint64_t v21 = sub_543D8(*a2, *(_DWORD *)a3);
  unsigned __int16 v22 = sub_5454C(v21 + 40, *(unsigned int *)(a3 + 4));
  if (v22 >= 0x100u && v22 != 0)
  {
    int v24 = sub_79914(1885892706, v21, *(_DWORD *)(v21 + 32), *(void *)a3, *(void *)(a3 + 8), a3 + 88);
    if ((v24 & sub_79914( 1885892674,  v21,  *(_DWORD *)(v21 + 32),  *(void *)a3,  *(void *)(a3 + 8),  a3 + 88)) == 1)
    {
      __int128 v25 = operator new(4uLL);
      _DWORD *v25 = 1885892674;
      __p[0] = v25;
      __p[1] = v25 + 1;
      __p[2] = v25 + 1;
      strcpy((char *)&__p[3], "cwdv");
      char v94 = 0;
      int v95 = 3;
      v97 = 0LL;
      uint64_t v98 = 0LL;
      v96 = &v97;
      int v99 = 44739242;
      CFTypeRef cf = 0LL;
      uint64_t v26 = sub_546E0();
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470B88;
      v92 = &v91;
      sub_FFB0C((uint64_t *)&v89, v26, __p, (uint64_t)&v91);
      uint64_t v27 = v92;
      if (v92 == &v91)
      {
        uint64_t v28 = 4LL;
        uint64_t v27 = &v91;
      }

      else
      {
        if (!v92)
        {
LABEL_47:
          sub_9DCB8((uint64_t *)&v91, &v89);
          for (j = (std::string *)v91.__r_.__value_.__l.__size_; j != &v91; j = (std::string *)j->__r_.__value_.__l.__size_)
          {
            sub_FAA90(v88, j->__r_.__value_.__l.__cap_);
            if (v88[2])
            {
              data = (std::__shared_weak_count *)j[1].__r_.__value_.__l.__data_;
              std::string::size_type cap = j->__r_.__value_.__l.__cap_;
              v87 = data;
              if (data)
              {
                p_shared_weak_owners = (unint64_t *)&data->__shared_weak_owners_;
                do
                  unint64_t v32 = __ldxr(p_shared_weak_owners);
                while (__stxr(v32 + 1, p_shared_weak_owners));
              }

              sub_1331F0((uint64_t **)(v5 + 40), &cap, (uint64_t)&cap);
              if (v87) {
                std::__shared_weak_count::__release_weak(v87);
              }
            }

            sub_85B80(v88);
          }

          sub_1BB88((uint64_t *)&v91);
          sub_85B80((uint64_t *)&v89);
          if (cf) {
            CFRelease(cf);
          }
          sub_32C8C(v97);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }

          goto LABEL_59;
        }

        uint64_t v28 = 5LL;
      }

      (*(void (**)(void))(v27->__r_.__value_.__r.__words[0] + 8 * v28))();
      goto LABEL_47;
    }
  }

LABEL_59:
  uint64_t v35 = *(void *)(v21 + 48);
  int v34 = (void *)(v21 + 48);
  uint64_t v33 = v35;
  if (!v35) {
    goto LABEL_71;
  }
  unsigned int v36 = *(_DWORD *)(a3 + 4);
  v37 = v34;
  do
  {
    unsigned int v38 = *(_DWORD *)(v33 + 32);
    BOOL v39 = v38 >= v36;
    if (v38 >= v36) {
      v40 = (uint64_t *)v33;
    }
    else {
      v40 = (uint64_t *)(v33 + 8);
    }
    if (v39) {
      v37 = (void *)v33;
    }
    uint64_t v33 = *v40;
  }

  while (*v40);
  if (v37 == v34 || *((_DWORD *)v37 + 8) > v36 || (unsigned int v41 = *((unsigned __int16 *)v37 + 89), (v42 = v41 >> 8) == 0))
  {
LABEL_71:
    LOBYTE(v41) = 0;
    unsigned int v42 = 0;
  }

  unsigned int v43 = v41 | (v42 << 8);
  if (v43 <= 0x100) {
    LOBYTE(v43) = 0;
  }
  if ((_BYTE)v43)
  {
    uint64_t v44 = sub_546E0();
    memset(__p, 0, 24);
    strcpy((char *)&__p[3], "cwdv");
    char v94 = 0;
    int v95 = 3;
    v97 = 0LL;
    uint64_t v98 = 0LL;
    v96 = &v97;
    int v99 = 44739242;
    CFTypeRef cf = 0LL;
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470B88;
    v92 = &v91;
    sub_FFB0C((uint64_t *)&v89, v44, __p, (uint64_t)&v91);
    v45 = v92;
    if (v92 == &v91)
    {
      uint64_t v46 = 4LL;
      v45 = &v91;
    }

    else
    {
      if (!v92)
      {
LABEL_80:
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v97);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        sub_9DCB8((uint64_t *)__p, &v89);
        for (k = (void **)__p[1]; k != __p; k = (void **)k[1])
        {
          if ((*(unsigned int (**)(void *))(*(void *)k[2] + 456LL))(k[2]))
          {
            std::string::size_type v48 = (std::string::size_type)k[3];
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)k[2];
            v91.__r_.__value_.__l.__size_ = v48;
            if (v48)
            {
              v49 = (unint64_t *)(v48 + 16);
              do
                unint64_t v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }

            sub_1331F0((uint64_t **)(v5 + 40), (unint64_t *)&v91, (uint64_t)&v91);
            if (v91.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v91.__r_.__value_.__l.__size_);
            }
          }
        }

        sub_1BB88((uint64_t *)__p);
        sub_85B80((uint64_t *)&v89);
        goto LABEL_93;
      }

      uint64_t v46 = 5LL;
    }

    (*(void (**)(void))(v45->__r_.__value_.__r.__words[0] + 8 * v46))();
    goto LABEL_80;
  }

  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v509[1] = 0LL;
  v509[0] = 0LL;
  v510 = 0LL;
  v507[1] = 0LL;
  v507[0] = 0LL;
  v508 = 0LL;
  v495 = v514.i64[0];
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    v458 = (os_log_t *)sub_138E8(13);
    v459 = *v458;
    if (*v458 && os_log_type_enabled(*v458, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5090;
      _os_log_impl( &dword_0,  v459,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
    }

    v451 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v451, "Precondition failure.");
    v460 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_913:
    __cxa_throw(v451, v461, v460);
  }

  uint64_t v46 = (uint64_t *)(*(void *)a2 + 8LL);
  v47 = *v46;
  if (!*v46) {
    goto LABEL_874;
  }
  std::string::size_type v48 = *v476;
  v49 = *(void *)a2 + 8LL;
  unint64_t v50 = *(void *)v49;
  do
  {
    v51 = *(_DWORD *)(v50 + 32);
    uint64_t v52 = v51 >= v48;
    if (v51 >= v48) {
      v53 = (uint64_t *)v50;
    }
    else {
      v53 = (uint64_t *)(v50 + 8);
    }
    if (v52) {
      v49 = v50;
    }
    unint64_t v50 = *v53;
  }

  while (*v53);
  if ((uint64_t *)v49 == v46 || v48 < *(_DWORD *)(v49 + 32))
  {
LABEL_874:
    v448 = (os_log_t *)sub_138E8(13);
    v449 = *v448;
    if (*v448 && os_log_type_enabled(*v448, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v532, *v476);
      v450 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5093;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v450;
      _os_log_impl( &dword_0,  v449,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Category %s does not exist in the database.",  (uint8_t *)__p,  0x1Cu);
      if ((v532[23] & 0x80000000) != 0) {
        operator delete(*(void **)v532);
      }
    }

    v451 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error((std::runtime_error *)v451, "Category %s does not exist in the database.");
    goto LABEL_912;
  }

  if (*(_DWORD *)(v49 + 72) != 1668246894) {
    goto LABEL_172;
  }
  v54 = *(void *)a2 + 8LL;
  do
  {
    uint64_t v55 = *(_DWORD *)(v47 + 32);
    v56 = v55 >= 0x63736176;
    if (v55 >= 0x63736176) {
      v57 = (uint64_t *)v47;
    }
    else {
      v57 = (uint64_t *)(v47 + 8);
    }
    if (v56) {
      v54 = v47;
    }
    v47 = *v57;
  }

  while (*v57);
  if ((uint64_t *)v54 == v46 || *(_DWORD *)(v54 + 32) > 0x63736176u)
  {
    v462 = (os_log_t *)sub_138E8(13);
    v463 = *v462;
    if (*v462 && os_log_type_enabled(*v462, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5102;
      _os_log_impl( &dword_0,  v463,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Category kVirtualAudioPlugInRoutingCategoryStandardAV does not exist in the database.",  (uint8_t *)__p,  0x12u);
    }

    v451 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( (std::runtime_error *)v451,  "Category kVirtualAudioPlugInRoutingCategoryStandardAV does not exist in the database.");
    goto LABEL_912;
  }

  if (*(_DWORD *)(v54 + 72) != 1668510820)
  {
    v466 = (os_log_t *)sub_138E8(13);
    v467 = *v466;
    if (*v466 && os_log_type_enabled(*v466, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v532, *(unsigned int *)(v54 + 72));
      v468 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 5104;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v468;
      _os_log_impl( &dword_0,  v467,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Category kVirtualAudioPlugInRoutingCategoryStandardAV is not of type kCategoryType_Standard (it claims %s).",  (uint8_t *)__p,  0x1Cu);
      if ((v532[23] & 0x80000000) != 0) {
        operator delete(*(void **)v532);
      }
    }

    v451 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( (std::runtime_error *)v451,  "Category kVirtualAudioPlugInRoutingCategoryStandardAV is not of type kCategoryType_Standard (it claims %s).");
LABEL_912:
    v460 = (void (*)(void *))&std::runtime_error::~runtime_error;
    goto LABEL_913;
  }

  *(void *)&__dst = &__dst;
  *((void *)&__dst + 1) = &__dst;
  v518 = 0LL;
  v58 = *((_DWORD *)v27 + 10);
  LODWORD(v516) = 1668505974;
  DWORD1(v516) = v58;
  BYTE8(v516) = 0;
  BYTE12(v516) = 0;
  v502 = &v503;
  v503 = 0uLL;
  *(void *)&v532[8] = 0LL;
  *(void *)v532 = &v532[8];
  *(void *)&v533 = 0LL;
  *(void *)&v532[32] = 0LL;
  *(void *)&v532[16] = 0LL;
  *(void *)&v532[24] = &v532[32];
  *(void *)&v569[8] = 0LL;
  *(void *)&v569[16] = 0LL;
  *(void *)v569 = &v569[8];
  v530 = 0LL;
  v529[1] = 0LL;
  v529[0] = &v529[1];
  *(_DWORD *)buf = 1852796517;
  memset(&buf[8], 0, 24);
  *(void *)&buf[32] = 0x756E64656175746FLL;
  *(_OWORD *)&cf_8[24] = 0u;
  v551 = 0u;
  *(_OWORD *)v550 = 0u;
  CFTypeRef cf = 1065353216LL;
  *(_OWORD *)v547 = 0u;
  memset(__p, 0, sizeof(__p));
  memset(cf_8, 0, 32);
  *(_DWORD *)&cf_8[32] = 1065353216;
  v552 = 1065353216LL;
  v527 = 0LL;
  v526 = 0LL;
  v528 = 0LL;
  v59 = operator new(0x1B0uLL);
  sub_1282E0( (uint64_t)v59,  a2,  &v516,  (uint64_t)&v502,  (uint64_t)v532,  (uint64_t)v569,  1668248944,  v529,  (uint64_t)buf,  (const void ***)__p,  0,  (uint64_t *)&v526);
  std::__shared_weak_count *v59 = &off_470A80;
  v59[53] = &__dst;
  if (v518)
  {
    v469 = (os_log_t *)sub_138E8(13);
    v470 = *v469;
    if (*v469 && os_log_type_enabled(*v469, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v531 = 136315394;
      *(void *)&v531[4] = "RoutingManager.cpp";
      *(_WORD *)&v531[12] = 1024;
      *(_DWORD *)&v531[14] = 1857;
      _os_log_impl(&dword_0, v470, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v531, 0x12u);
    }

    v471 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v471, "Precondition failure.");
  }

  *(void *)v531 = &v526;
  sub_8F2D4((void ***)v531);
  sub_51FD8((char *)v551);
  v60 = v550[0];
  v550[0] = 0LL;
  if (v60) {
    operator delete(v60);
  }
  sub_51FD8(*(char **)&cf_8[16]);
  BOOL v61 = *(void **)cf_8;
  *(void *)cf_8 = 0LL;
  if (v61) {
    operator delete(v61);
  }
  sub_51FD8((char *)v547[0]);
  BOOL v62 = __p[6];
  __p[6] = 0LL;
  if (v62) {
    operator delete(v62);
  }
  v526 = &__p[3];
  sub_8C8F0(&v526);
  v526 = __p;
  sub_8C8F0(&v526);
  sub_FF3B8((void *)v529[1]);
  sub_32C8C(*(void **)&v569[8]);
  sub_11AD14(*(void **)&v532[32]);
  sub_FF3B8(*(void **)&v532[8]);
  sub_32C8C((void *)v503);
  LODWORD(v502) = 0;
  uint64_t v16 = (uint8_t *)&v503;
  *(void *)&v503 = &v503;
  *((void *)&v503 + 1) = &v503;
  v504 = 0LL;
  v63 = *(_BYTE *)(v54 + 64);
  *(_DWORD *)v532 = 0;
  v532[4] = v63 & 3;
  sub_11AD54((uint64_t)__p, (uint64_t *)a2, (void *)(a2 + 504), v54 + 40, (uint64_t)v59, (unsigned int *)v532);
  __p[0] = off_4709D0;
  unint64_t v64 = __p[2];
  if (__p[2])
  {
    sub_10AF78((uint64_t *)__p[2] + 2);
    operator delete(v64);
  }

  sub_705D0((uint64_t)v532, (uint64_t *)a2, v54 + 40, (uint64_t)v59);
  *(void *)v532 = off_4709D0;
  uint64_t v65 = *(void **)&v532[16];
  if (*(void *)&v532[16])
  {
    sub_10AF78((uint64_t *)(*(void *)&v532[16] + 16LL));
    operator delete(v65);
  }

  if (!v518) {
    goto LABEL_171;
  }
  v492 = v59;
  if (*(_BYTE *)(v54 + 76))
  {
    v66 = (unsigned int (***)(void))sub_5954C();
    if ((**v66)(v66) == 1)
    {
      p_dst = &__dst;
      if (*((__int128 **)&__dst + 1) != &__dst)
      {
        p_dst = (__int128 *)*((void *)&__dst + 1);
        while (1)
        {
          sub_B8F68((uint64_t *)buf, (uint64_t *)p_dst + 2, "", 5130);
          uint64_t v68 = *(std::__shared_weak_count **)&buf[8];
          v69 = *(_WORD *)(*(void *)buf + 184LL);
          if (*(void *)&buf[8])
          {
            v70 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }

          if ((v69 & 8) != 0) {
            break;
          }
          p_dst = (__int128 *)*((void *)p_dst + 1);
          if (p_dst == &__dst) {
            goto LABEL_121;
          }
        }

        if (p_dst == &__dst)
        {
LABEL_121:
          p_dst = &__dst;
          goto LABEL_122;
        }

        for (k = *((void *)p_dst + 1); (__int128 *)k != &__dst; k = *(void *)(k + 8))
        {
          unsigned int v73 = (__int128 *)(k + 16);
          sub_B8F68((uint64_t *)buf, (uint64_t *)(k + 16), "", 5130);
          v74 = *(std::__shared_weak_count **)&buf[8];
          unsigned int v75 = *(_WORD *)(*(void *)buf + 184LL);
          if (*(void *)&buf[8])
          {
            BOOL v76 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }

          if ((v75 & 8) == 0)
          {
            unsigned int v78 = *v73;
            *(void *)unsigned int v73 = 0LL;
            *(void *)(k + 24) = 0LL;
            unsigned int v79 = (std::__shared_weak_count *)*((void *)p_dst + 3);
            p_dst[1] = v78;
            if (v79) {
              std::__shared_weak_count::__release_weak(v79);
            }
            p_dst = (__int128 *)*((void *)p_dst + 1);
          }
        }
      }

      if ((v1 & (v1 - 1)) != 0)
      {
        if (v1 <= v4) {
          uint64_t v0 = v4 % v1;
        }
        else {
          uint64_t v0 = v4;
        }
      }

      else
      {
        uint64_t v0 = ((_DWORD)v1 - 1) & v4;
      }
    }

    uint64_t v26 = __p[0];
    uint64_t v27 = (void *)*((void *)__p[0] + v0);
    if (v27)
    {
      *uint64_t v9 = *v27;
LABEL_72:
      std::string *v27 = v9;
      goto LABEL_73;
    }

    *uint64_t v9 = v38;
    *(void *)&unsigned int v38 = v9;
    v26[v0] = &v38;
    if (*v9)
    {
      uint64_t v28 = *(void *)(*v9 + 8LL);
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v28 >= v1) {
          v28 %= v1;
        }
      }

      else
      {
        v28 &= v1 - 1;
      }

      uint64_t v27 = (char *)__p[0] + 8 * v28;
      goto LABEL_72;
    }

            uint64_t v27 = 1;
            if (!v26) {
              goto LABEL_71;
            }
LABEL_70:
            operator delete(v26);
            goto LABEL_71;
          }

          v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          int v34 = sub_138E8(13);
          if ((*(_BYTE *)(v34 + 8) & 1) != 0)
          {
            uint64_t v35 = *(os_log_s **)v34;
            if (*(void *)v34)
            {
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                buf.mSelector = 136315906;
                *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                v100 = 1024;
                v101 = 257;
                v102 = 2080;
                *(void *)v103 = "with timeout";
                *(_WORD *)&v103[8] = 1024;
                *(_DWORD *)&v103[10] = a1;
                _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
              }
            }
          }

          sub_6DD4();
          *(void *)&buf.mSelector = &qword_48F828;
          LOBYTE(buf.mElement) = 0;
          LOBYTE(buf.mElement) = sub_1A30E4();
          __lk.__m_ = &v110;
          __lk.__owns_ = 1;
          std::mutex::lock(&v110);
          v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v79)
          {
LABEL_79:
            if (__lk.__owns_) {
              std::mutex::unlock(__lk.__m_);
            }
            sub_7D790((uint64_t)&buf);
            uint64_t v27 = 0;
            v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
            if (!v26) {
              goto LABEL_71;
            }
            goto LABEL_70;
          }

          unsigned int v43 = v36.__d_.__rep_ + 1000000 * v25;
          while (2)
          {
            if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_79;
            }
            v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v44.__d_.__rep_ >= 1)
            {
              std::chrono::steady_clock::now();
              v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!v45.__d_.__rep_)
              {
                uint64_t v46 = 0LL;
                goto LABEL_101;
              }

              if (v45.__d_.__rep_ < 1)
              {
                uint64_t v46 = 0x8000000000000000LL;
              }

              else
              {
                if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7LL)
                {
                  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_101;
                }

  if (!v296) {
    goto LABEL_71;
  }
  v51 = std::__shared_weak_count::lock(v296);
  v315.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
  if (!v51) {
    goto LABEL_71;
  }
  uint64_t v52 = v51;
  v315.__r_.__value_.__r.__words[0] = v295;
  if (v295)
  {
    if ((_DWORD)v14 == 1886545251)
    {
      if (*(os_unfair_lock_s **)(v295 + 192) == v30)
      {
        if (*(_DWORD *)(v295 + 144) == 1885888867)
        {
          if (!sub_105B8C(*(uint64_t **)(a5 + 8), 2))
          {
            v53 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v30->_os_unfair_lock_opaque
                                                                         + 240LL))( v30,  1885888867LL);
            v54 = operator new(0x28uLL);
            std::string *v54 = &off_4842A0;
            v54[1] = v30;
            v54[2] = 0x6F7574706D757465LL;
            *((_DWORD *)v54 + 6) = v53;
            *(void *)((char *)v54 + 28) = 0x100000000LL;
            uint64_t v55 = operator new(0x18uLL);
            v56 = *(void **)(a3 + 8);
            *uint64_t v55 = a3;
            v55[1] = v56;
            v55[2] = v54;
            os_unfair_lock_s *v56 = v55;
            v57 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + 8) = v55;
            *(void *)(a3 + 16) = v57;
            sub_1BCA18((uint64_t)v54);
            goto LABEL_67;
          }

          v260 = (os_log_t *)sub_138E8(13);
          v261 = *v260;
          if (*v260 && os_log_type_enabled(*v260, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 284;
            _os_log_impl( &dword_0,  v261,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: both HAC and ANC are present in route. Database error",  buf,  0x12u);
          }

          v255 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v255, "Illegal route: both HAC and ANC are present in route. Database error");
        }

        else
        {
          v258 = (os_log_t *)sub_138E8(13);
          v259 = *v258;
          if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 282;
            _os_log_impl( &dword_0,  v259,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: HAC connection's destination port type is not HAC . Database error?",  buf,  0x12u);
          }

          v255 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error( v255,  "Illegal route: HAC connection's destination port type is not HAC. Database error?");
        }
      }

      else
      {
        v256 = (os_log_t *)sub_138E8(13);
        v257 = *v256;
        if (*v256 && os_log_type_enabled(*v256, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 280;
          _os_log_impl( &dword_0,  v257,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: HAC and downlink connections' destination devices d o not match. Database error?",  buf,  0x12u);
        }

        v255 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v255,  "Illegal route: HAC and downlink connections' destination devices do not match. Database error?");
      }
    }

    else
    {
      v253 = (os_log_t *)sub_138E8(13);
      v254 = *v253;
      if (*v253 && os_log_type_enabled(*v253, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 278;
        _os_log_impl( &dword_0,  v254,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Detected presence of HAC connection in a non-Receiver route. Database error?",  buf,  0x12u);
      }

      v255 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v255,  "Detected presence of HAC connection in a non-Receiver route. Database error?");
    }
  }

          v53 = v40;
          v54 = v41;
          if (*(_BYTE *)(a1 + 210))
          {
            *(_DWORD *)buf = 1835103844;
            *(void *)&buf[4] = *(void *)(a1 + 128);
            uint64_t v55 = *(double *)(a1 + 216);
            *(float *)&__p = v55;
            if ((*(unsigned int (**)(void, _BYTE *))(**(void **)(a1 + 120) + 16LL))( *(void *)(a1 + 120),  buf))
            {
              unsigned int v79 = 4;
              (*(void (**)(void, _BYTE *, void, void, int *, void **))(**(void **)(a1 + 120) + 40LL))( *(void *)(a1 + 120),  buf,  0LL,  0LL,  &v79,  &__p);
              uint64_t v55 = *(float *)&__p;
            }

            v56 = *(double *)a4;
            if (v55 > v56) {
              v56 = v55;
            }
            *(float *)(a1 + 232) = v56;
            v57 = *(double *)(a1 + 224);
            v58 = v57;
            *(float *)(a1 + 236) = v58;
          }

          else if (*(double *)a4 != 0.0 || *(double *)(a4 + 8) != 0.0)
          {
            v59 = (os_log_t *)sub_138E8(13);
            v60 = *v59;
            if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = "InputVolumeControl_HAL_Common.cpp";
              v84 = 1024;
              uint64_t v85 = 664;
              _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Non-zero HW volume configured but physical device does no t support HW volume",  buf,  0x12u);
            }

            BOOL v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_1013D0(v61, "Non-zero HW volume configured but physical device does not support HW volume");
          }

          goto LABEL_81;
        }
      }
    }

    else
    {
      v47 = 0LL;
    }

    v49 = (os_log_t *)sub_138E8(13);
    unint64_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "InputVolumeControl_HAL_Common.cpp";
      v84 = 1024;
      uint64_t v85 = 640;
      _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Logic error: requested software volume, but given software volume command is NULL",  buf,  0x12u);
    }

    *(_DWORD *)(a1 + 248) = 0;
    if (!v47) {
      goto LABEL_59;
    }
    goto LABEL_55;
  }

        if (*(void *)v117) {
          operator delete(*(void **)v117);
        }
        goto LABEL_61;
      }

      operator delete(v36);
    }

    v103 = 0uLL;
    if (!v35) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }

  if (v17) {
    uint64_t v21 = (uint64_t *)v17[7];
  }
  else {
    uint64_t v21 = &qword_4A9200;
  }
  uint64_t v16 = v10;
  sub_1F7320((uint64_t *)v117, a2, a3, (void *)(v19 + 24LL * v9), (uint64_t)v21, *((void *)a7 + 5), a7, &v100);
  uint64_t v26 = *(_OWORD *)v117;
  *(void *)v117 = 0LL;
  *(void *)&v117[8] = 0LL;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v99 + 1);
  int v99 = v26;
  if (v27)
  {
    uint64_t v28 = (unint64_t *)&v27->__shared_owners_;
    do
      int v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  int v30 = *(std::__shared_weak_count **)&v117[8];
  if (*(void *)&v117[8])
  {
    unint64_t v31 = (unint64_t *)(*(void *)&v117[8] + 8LL);
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      uint64_t v33 = v30;
LABEL_74:
      std::__shared_weak_count::__release_weak(v33);
    }
  }

    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        uint8x8_t v3 = v8 % v9;
      }
      else {
        uint8x8_t v3 = v8;
      }
    }

    else
    {
      uint8x8_t v3 = (v9 - 1) & v8;
    }
  }

  unsigned int v36 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v40[0];
  if (v36)
  {
    *(void *)v40[0] = *v36;
LABEL_72:
    *unsigned int v36 = i;
    goto LABEL_73;
  }

  *(void *)v40[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    v37 = *(void *)(*(void *)i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }

    else
    {
      v37 &= v9 - 1;
    }

    unsigned int v36 = (unsigned __int8 **)(*(void *)a1 + 8 * v37);
    goto LABEL_72;
  }

LABEL_93:
  if (*(_DWORD *)a3 != 1667657057) {
    goto LABEL_119;
  }
  uint64_t v85 = v5;
  v51 = operator new(4uLL);
  _DWORD *v51 = 1885892674;
  __p[0] = v51;
  __p[1] = v51 + 1;
  __p[2] = v51 + 1;
  strcpy((char *)&__p[3], "cwdv");
  char v94 = 0;
  int v95 = 3;
  v97 = 0LL;
  uint64_t v98 = 0LL;
  v96 = &v97;
  int v99 = 44739242;
  CFTypeRef cf = 0LL;
  uint64_t v52 = sub_546E0();
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470B88;
  v92 = &v91;
  sub_FFB0C((uint64_t *)&v89, v52, __p, (uint64_t)&v91);
  v53 = a2;
  v54 = v92;
  if (v92 == &v91)
  {
    uint64_t v55 = 4LL;
    v54 = &v91;
    goto LABEL_98;
  }

  if (v92)
  {
    uint64_t v55 = 5LL;
LABEL_98:
    (*(void (**)(void))(v54->__r_.__value_.__r.__words[0] + 8 * v55))();
  }

  v56 = v90[0];
  if ((os_unfair_lock_s ***)v90[0] != &v89)
  {
    while (1)
    {
      v57 = *(std::__shared_weak_count **)&v56[6]._os_unfair_lock_opaque;
      if (v57)
      {
        v58 = std::__shared_weak_count::lock(v57);
        v88[1] = (uint64_t)v58;
        if (v58) {
          break;
        }
      }

    v59 = (os_log_t *)sub_138E8(13);
    v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "PhysicalDevice.cpp";
      unsigned int v73 = 1024;
      v74 = 346;
      _os_log_impl(&dword_0, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  int v24 = *(void *)(v9 + 40);
  uint64_t v23 = *(std::__shared_weak_count **)(v9 + 48);
  v70 = v24;
  v71 = v23;
  if (!v23) {
    goto LABEL_93;
  }
  __int128 v25 = (unint64_t *)&v23->__shared_weak_owners_;
  do
    uint64_t v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  if (v23->__shared_owners_ == -1) {
    goto LABEL_93;
  }
  uint64_t v27 = sub_138E8(17);
  uint64_t v28 = sub_138E8(38);
  int v29 = 0;
  int v30 = 0LL;
  *(void *)buf = 0x100000002LL;
  unint64_t v31 = *(void *)(v27 + 8);
  while (1)
  {
    unint64_t v32 = *(int *)&buf[4 * v30];
    uint64_t v33 = v29;
    if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
      break;
    }
    int v29 = 1;
    int v30 = 1LL;
    if ((v33 & 1) != 0)
    {
      if ((v31 & 1) == 0) {
        goto LABEL_91;
      }
      goto LABEL_67;
    }
  }

  if ((v31 & v32) == 0) {
    uint64_t v27 = v28;
  }
  if ((*(void *)(v27 + 8) & 1) != 0)
  {
LABEL_67:
    std::string::size_type v48 = *(os_log_s **)v27;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      sub_CBF5C(&v64, &v70, "", 350);
      v49 = v64;
      if (a2) {
        unint64_t v50 = "output";
      }
      else {
        unint64_t v50 = "input";
      }
      v51 = v68;
      sub_7D084(v68, v50);
      if (v69 < 0) {
        v51 = (void **)v68[0];
      }
      sub_2CA1C(__p, a3);
      uint64_t v52 = v67;
      v53 = (void **)__p[0];
      sub_23FE8((uint64_t)theString, (os_unfair_lock_t)(a1 + 8));
      v54 = __p;
      if (v52 < 0) {
        v54 = v53;
      }
      if (v63 >= 0) {
        uint64_t v55 = theString;
      }
      else {
        uint64_t v55 = (CFStringRef *)theString[0];
      }
      *(_DWORD *)buf = 136316418;
      *(void *)&buf[4] = "PhysicalDevice.cpp";
      unsigned int v73 = 1024;
      v74 = 350;
      unsigned int v75 = 2048;
      BOOL v76 = v49;
      v77 = 2080;
      unsigned int v78 = v51;
      unsigned int v79 = 2080;
      unsigned int v80 = v54;
      uint64_t v81 = 2080;
      v82 = v55;
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning control %p for %s VirtualAudioPortType '%s' on VAD: '%s'.",  buf,  0x3Au);
      if (v63 < 0) {
        operator delete((void *)theString[0]);
      }
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      v56 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }

      int v24 = v70;
      uint64_t v23 = v71;
    }
  }

  v514 = 0LL;
  v515 = 0LL;
  v516 = 0LL;
  for (j = v518; j != &v517; j = (uint64_t *)j[1])
  {
    v51 = sub_72A04(*((_DWORD *)j + 4), *((_DWORD *)j + 5), *(uint64_t **)(a2 + 144), *(uint64_t **)(a2 + 152));
    if (v51 && (*((_DWORD *)j + 32) - 5) <= 0xFFFFFFFD)
    {
      uint64_t v52 = (_DWORD *)v51;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 512LL))(v51))
      {
        v53 = *(id *)sub_138E8(13);
        v54 = v53;
        if (v53)
        {
          uint64_t v55 = (os_log_s *)v53;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            v56 = v52[2];
            sub_33464(&v552, (unsigned int *)j + 4);
            v57 = &v552;
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              v57 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v539 = 136316162;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 1238;
            *(_WORD *)&v539[18] = 1024;
            *(_DWORD *)&v539[20] = v56;
            *(_WORD *)&v539[24] = 2048;
            *(void *)&v539[26] = v52;
            *(_WORD *)&v539[34] = 2080;
            *(void *)&v539[36] = v57;
            _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Device ID %u (%p)(%s): is running.",  v539,  0x2Cu);
          }
        }
      }

      v58 = (*(uint64_t (**)(_DWORD *))(*(void *)v52 + 528LL))(v52);
      v59 = pthread_self();
      v60 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v58 + 16));
      if (!pthread_equal(v59, v60))
      {
        BOOL v61 = pthread_self();
        BOOL v62 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v58 + 104));
        if (!pthread_equal(v61, v62))
        {
          v63 = *(id *)sub_138E8(13);
          unint64_t v64 = v63;
          if (v63)
          {
            uint64_t v65 = (os_log_s *)v63;
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              v66 = v52[2];
              sub_33464(&v552, (unsigned int *)j + 4);
              v67 = &v552;
              if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v67 = (std::string *)v552.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v539 = 136316162;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 1241;
              *(_WORD *)&v539[18] = 1024;
              *(_DWORD *)&v539[20] = v66;
              *(_WORD *)&v539[24] = 2048;
              *(void *)&v539[26] = v52;
              *(_WORD *)&v539[34] = 2080;
              *(void *)&v539[36] = v67;
              _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The IO monitor for device ID %u (%p)(%s) is not held by this thread.",  v539,  0x2Cu);
            }
          }
        }
      }

      uint64_t v68 = sub_138E8(2);
      if ((*(_BYTE *)(v68 + 8) & 1) != 0)
      {
        v69 = *(id *)v68;
        if (v69)
        {
          v70 = (os_log_s *)v69;
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
          {
            v71 = v52[2];
            sub_33464(&v552, (unsigned int *)j + 4);
            uint64_t v72 = &v552;
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v72 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v539 = 136316162;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 1244;
            *(_WORD *)&v539[18] = 1024;
            *(_DWORD *)&v539[20] = v71;
            *(_WORD *)&v539[24] = 2048;
            *(void *)&v539[26] = v52;
            *(_WORD *)&v539[34] = 2080;
            *(void *)&v539[36] = v72;
            _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Pushing back device id %u (%p)(%s) to guardedDevices",  v539,  0x2Cu);
          }
        }
      }

      unsigned int v73 = v515;
      if ((unint64_t)v515 >= v516)
      {
        unsigned int v75 = ((char *)v515 - (_BYTE *)v514) >> 3;
        BOOL v76 = (uint64_t)(v516 - (void)v514) >> 2;
        if (v76 <= v75 + 1) {
          BOOL v76 = v75 + 1;
        }
        else {
          v77 = v76;
        }
        if (v77) {
          v77 = (unint64_t)sub_7DC90(v77);
        }
        else {
          unsigned int v78 = 0LL;
        }
        unsigned int v79 = (uint64_t *)(v77 + 8 * v75);
        *unsigned int v79 = (uint64_t)v52;
        v74 = v79 + 1;
        uint64_t v81 = (char *)v514;
        unsigned int v80 = (char *)v515;
        if (v515 != v514)
        {
          do
          {
            v82 = *((void *)v80 - 1);
            v80 -= 8;
            *--unsigned int v79 = v82;
          }

          while (v80 != v81);
          unsigned int v80 = (char *)v514;
        }

        v514 = v79;
        v515 = v74;
        v516 = v77 + 8 * v78;
        if (v80) {
          operator delete(v80);
        }
      }

      else
      {
        *v515 = (uint64_t)v52;
        v74 = v73 + 1;
      }

      v515 = v74;
    }
  }

  v512 = 0LL;
  v513 = 0LL;
  v511 = &v512;
  theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v510 = 257;
  v83 = v518;
  if (v518 != &v517)
  {
    v491 = 0LL;
    v492 = 0LL;
    v500 = 0LL;
    v489 = 0LL;
    v493 = 0LL;
    v84 = 0LL;
    while (1)
    {
      uint64_t v85 = *((unsigned int *)v83 + 32);
      v86 = v83[2];
      value.__r_.__value_.__r.__words[0] = v86;
      v87 = sub_138E8(2);
      if ((*(_BYTE *)(v87 + 8) & 1) != 0)
      {
        v88 = *(id *)v87;
        if (v88)
        {
          v89 = (os_log_s *)v88;
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
          {
            sub_33464(&v552, (unsigned int *)&value);
            v90 = "????";
            size = (char)v552.__r_.__value_.__s.__size_;
            v92 = v552.__r_.__value_.__r.__words[0];
            sub_7D084(&v535, v90);
            v93 = &v552;
            if (size < 0) {
              v93 = (std::string *)v92;
            }
            char v94 = &v535;
            if (v537 < 0) {
              char v94 = v535;
            }
            int v95 = "hidden";
            if (*((_DWORD *)v83 + 6) == 1) {
              int v95 = "visible";
            }
            *(_DWORD *)v539 = 136316162;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4076;
            *(_WORD *)&v539[18] = 2080;
            *(void *)&v539[20] = v93;
            *(_WORD *)&v539[28] = 2080;
            *(void *)&v539[30] = v94;
            *(_WORD *)&v539[38] = 2080;
            *(void *)&v539[40] = v95;
            _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Device %s; reconfiguration context %s; visibility: %s.",
              v539,
              0x30u);
            if (v537 < 0) {
              operator delete(v535);
            }
          }
        }
      }

      v96 = (uint64_t *)operator new(0x28uLL);
      v97 = v96;
      *(uint64_t *)((char *)v96 + 28) = v86;
      *((_DWORD *)v96 + 9) = v85;
      uint64_t v98 = &v512;
      int v99 = &v512;
      v100 = v512;
      if (v512)
      {
        v101 = HIDWORD(v86);
        while (1)
        {
          while (1)
          {
            int v99 = (uint64_t **)v100;
            v102 = *((_DWORD *)v100 + 7);
            v103 = *((_DWORD *)v100 + 8);
            v104 = v103 > HIDWORD(v86);
            if (v102 != (_DWORD)v86) {
              v104 = v102 > v86;
            }
            if (!v104) {
              break;
            }
            v100 = *v99;
            uint64_t v98 = v99;
            if (!*v99) {
              goto LABEL_170;
            }
          }

          v105 = v103 < HIDWORD(v86);
          unint64_t v32 = v102 == (_DWORD)v86;
          v106 = v102 < v86;
          if (v32) {
            v106 = v105;
          }
          if (!v106) {
            break;
          }
          uint64_t v98 = v99 + 1;
          v100 = v99[1];
          if (!v100) {
            goto LABEL_170;
          }
        }

        operator delete(v96);
      }

      else
      {
LABEL_170:
        *v96 = 0LL;
        v96[1] = 0LL;
        v96[2] = (uint64_t)v99;
        *uint64_t v98 = v96;
        if (*v511)
        {
          v511 = (uint64_t **)*v511;
          v97 = *v98;
        }

        sub_7A420(v512, v97);
        ++v513;
        LODWORD(v86) = value.__r_.__value_.__l.__data_;
        LODWORD(v101) = HIDWORD(value.__r_.__value_.__r.__words[0]);
      }

      v107 = v83 + 17;
      v108 = (uint64_t *)sub_72A04(v86, v101, *(uint64_t **)(a2 + 144), *(uint64_t **)(a2 + 152));
      v109 = (uint64_t)v108;
      if (!v108 || (_DWORD)v85 != 1) {
        break;
      }
      v110 = *(id *)sub_138E8(2);
      v111 = v110;
      if (v110)
      {
        v112 = (os_log_s *)v110;
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          sub_7D084(&v552, "Create");
          v113 = &v552;
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v113 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v539 = 136315650;
          *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&v539[12] = 1024;
          *(_DWORD *)&v539[14] = 4092;
          *(_WORD *)&v539[18] = 2080;
          *(void *)&v539[20] = v113;
          _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Device Type: %s already exists, modifying reconfiguration context to Change.",  v539,  0x1Cu);
        }
      }

      LODWORD(v85) = 2;
LABEL_251:
      sub_BC394((unint64_t *)v109, (uint64_t)(v83 + 2), (uint64_t)(v83 + 17), buf);
      if ((unint64_t)v492 >= v500)
      {
        v150 = v492 - v491;
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 61) {
LABEL_733:
        }
          sub_7A87C();
        else {
          v152 = v151;
        }
        if (v152) {
          v152 = (unint64_t)sub_7DC90(v152);
        }
        else {
          v153 = 0LL;
        }
        v154 = (uint64_t *)(v152 + 8 * v150);
        *v154 = v109;
        v155 = v154 + 1;
        if (v492 == v491)
        {
          v156 = v491;
        }

        else
        {
          v156 = v491;
          v157 = v492;
          do
          {
            v158 = *--v157;
            *--v154 = v158;
          }

          while (v157 != v491);
        }

        v500 = v152 + 8 * v153;
        if (v156) {
          operator delete(v156);
        }
        v491 = v154;
        v492 = v155;
      }

      else
      {
        *v492++ = v109;
      }

    sub_7D898((uint64_t)&__p);
    std::condition_variable::~condition_variable(&v81);
    std::mutex::~mutex(&v82);
LABEL_94:
    sub_CC160(v57);
    return 0LL;
  }

  while (1)
  {
    unint64_t v8 = (std::string *)v7[2];
    uint64_t v9 = (*(uint64_t (**)(std::string *, uint64_t, void))(v8->__r_.__value_.__r.__words[0] + 96))( v8,  1LL,  0LL);
    uint64_t v10 = (const char *)v9;
    if (v9) {
      break;
    }
LABEL_20:
    uint64_t v7 = (void *)v7[1];
    if (v7 == a1 + 19) {
      goto LABEL_21;
    }
  }

  memset(&v81, 0, 24);
  (*(void (**)(uint64_t, std::condition_variable *, uint64_t))(*(void *)v9 + 104LL))(v9, &v81, 1885762657LL);
  sub_280EDC((uint64_t)&v82, v81.__cv_.__sig, *(uint64_t *)v81.__cv_.__opaque, a2);
  uint64_t v11 = (os_log_t *)sub_138E8(22);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = (*(uint64_t (**)(std::string *))(v8->__r_.__value_.__r.__words[0] + 120))(v8);
    sub_2CC00(&__p, (uint64_t)&v82);
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136316418;
    *(void *)&buf[4] = "AggregateStream_Broadcast.cpp";
    v69 = 1024;
    v70 = 480;
    v71 = 2048;
    uint64_t v72 = v10;
    unsigned int v73 = 2048;
    v74 = v8;
    unsigned int v75 = 1024;
    *(_DWORD *)BOOL v76 = v13;
    *(_WORD *)&v76[4] = 2080;
    *(void *)&v76[6] = p_p;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling SetCurrentFormatSynchronously on Stream at %p of PhysicalDevice at %p (ID %u):\n%s",  buf,  0x36u);
  }

  uint64_t v15 = (*(uint64_t (**)(const char *, std::mutex *, uint64_t))(*(void *)v10 + 152LL))( v10,  &v82,  1885762592LL);
  if (!(_DWORD)v15)
  {
    if (v81.__cv_.__sig)
    {
      *(void *)v81.__cv_.__opaque = v81.__cv_.__sig;
      operator delete((void *)v81.__cv_.__sig);
    }

    goto LABEL_20;
  }

  BOOL v39 = (os_log_t *)sub_138E8(22);
  v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&__p, v15);
    unsigned int v41 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = "AggregateStream_Broadcast.cpp";
    v69 = 1024;
    v70 = 488;
    v71 = 2048;
    uint64_t v72 = v10;
    unsigned int v73 = 2080;
    v74 = v41;
    unsigned int v75 = 1024;
    *(_DWORD *)BOOL v76 = v15;
    _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SetCurrentFormatSynchronously on stream at %p failed with status '%s' (%d).",  buf,  0x2Cu);
  }

  if (v81.__cv_.__sig)
  {
    *(void *)v81.__cv_.__opaque = v81.__cv_.__sig;
    operator delete((void *)v81.__cv_.__sig);
  }

  return 560226676LL;
}

LABEL_114:
  sub_85B80((uint64_t *)&v89);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v97);
  a2 = v53;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  uint64_t v5 = v85;
LABEL_119:
  if (!*(_BYTE *)(a3 + 370) || !*(_BYTE *)(a3 + 371)) {
    goto LABEL_139;
  }
  uint64_t v65 = sub_546E0();
  v66 = operator new(0x14uLL);
  v66[4] = 1886152041;
  *(_OWORD *)v66 = *(_OWORD *)"bphpBphptbmpoelpielp";
  __p[0] = v66;
  __p[1] = v66 + 5;
  __p[2] = v66 + 5;
  strcpy((char *)&__p[3], "cwdv");
  char v94 = 0;
  int v95 = 3;
  v97 = 0LL;
  uint64_t v98 = 0LL;
  v96 = &v97;
  int v99 = 44739242;
  CFTypeRef cf = 0LL;
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470B88;
  v92 = &v91;
  sub_FFB0C(v88, v65, __p, (uint64_t)&v91);
  sub_133270((uint64_t)&v89, (uint64_t)v88);
  sub_85B80(v88);
  v67 = v92;
  if (v92 == &v91)
  {
    uint64_t v68 = 4LL;
    v67 = &v91;
    goto LABEL_125;
  }

  if (v92)
  {
    uint64_t v68 = 5LL;
LABEL_125:
    (*(void (**)(void))(v67->__r_.__value_.__r.__words[0] + 8 * v68))();
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v97);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  sub_120C78((uint64_t *)(v5 + 40), v89, v90);
  if (v90[1])
  {
    v69 = (os_log_t *)sub_138E8(8);
    v70 = *v69;
    if (*v69)
    {
      if (os_log_type_enabled(*v69, OS_LOG_TYPE_INFO))
      {
        sub_1214C4(&v91, v89, v90);
        v71 = (v91.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v91 : (std::string *)v91.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 5374;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v71;
        _os_log_impl(&dword_0, v70, OS_LOG_TYPE_INFO, "%25s:%-5d Disallowing bluetooth ports %s", (uint8_t *)__p, 0x1Cu);
      }
    }
  }

  sub_FF3B8(&v90[0]->_os_unfair_lock_opaque);
LABEL_139:
  if (!*(_BYTE *)(a3 + 12))
  {
    uint64_t v72 = *v34;
    if (!*v34) {
      goto LABEL_152;
    }
    unsigned int v73 = *(_DWORD *)(a3 + 4);
    v74 = v34;
    do
    {
      unsigned int v75 = *(_DWORD *)(v72 + 32);
      BOOL v76 = v75 >= v73;
      if (v75 >= v73) {
        v77 = (uint64_t *)v72;
      }
      else {
        v77 = (uint64_t *)(v72 + 8);
      }
      if (v76) {
        v74 = (void *)v72;
      }
      uint64_t v72 = *v77;
    }

    while (*v77);
    if (v74 != v34 && *((_DWORD *)v74 + 8) <= v73)
    {
      unsigned int v78 = *((unsigned __int16 *)v74 + 90);
      unsigned int v79 = v78 >> 8;
    }

    else
    {
LABEL_152:
      LOBYTE(v78) = 0;
      unsigned int v79 = 0;
    }

    unsigned int v80 = v78 | (v79 << 8);
    if (v80 <= 0x100) {
      LOBYTE(v80) = 0;
    }
    if ((_BYTE)v80)
    {
      uint64_t v81 = 40LL;
      if (!*((_BYTE *)a2 + 44)) {
        uint64_t v81 = 36LL;
      }
      *(_DWORD *)(v5 + 8) = *(_DWORD *)((char *)a2 + v81);
      *(_BYTE *)(v5 + 12) = 1;
      v82 = (os_log_t *)sub_138E8(8);
      v83 = *v82;
      if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_INFO))
      {
        sub_2CA1C(&v91, *(unsigned int *)(v5 + 8));
        if ((v91.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v84 = &v91;
        }
        else {
          v84 = (std::string *)v91.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 5391;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v84;
        _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_INFO,  "%25s:%-5d Pulling in previous playback route's mode %s",  (uint8_t *)__p,  0x1Cu);
      }
    }
  }

  *(void *)buf = 0LL;
  ++*(void *)(a1 + 88);
  sub_FC668((uint64_t)buf);
LABEL_115:
  v54 = *(void *)a1;
  result = operator new(0x18uLL);
  result[2] = *(void *)(v54 + 16);
  v57 = v42[3];
  v56 = v42 + 3;
  uint64_t *result = v57;
  result[1] = v56;
  *(void *)(v57 + 8) = result;
  os_unfair_lock_s *v56 = result;
  ++v56[2];
  return result;
}

  v302 = (uint64_t)&v302;
  v303 = &v302;
  v304 = 0LL;
  sub_12964C(v301, (uint64_t *)a2, v287, &v302);
  sub_85B80(v301);
  switch(v293)
  {
    case 1651794544:
      v83 = (unsigned int *)operator new(4uLL);
      os_log_s *v83 = 1886216820;
      v84 = (unsigned int *)sub_7A890(2uLL);
      uint64_t v85 = 1885892706;
      break;
    case 1986357346:
      if ((sub_E450C(1986357346) & 1) != 0) {
        goto LABEL_363;
      }
      v86 = (char *)sub_7A890(1uLL);
      v88 = v87;
      *(_DWORD *)v86 = 1886614633;
      v89 = v86 + 4;
      v90 = v86;
      if ((sub_14C300() & 1) != 0)
      {
        std::string v91 = (unsigned int *)v86;
        v92 = (unsigned int *)(v86 + 4);
      }

      else
      {
        v236 = &v86[4 * v88];
        if (v88 < 2)
        {
          v238 = (v89 - v90) >> 2;
          v239 = v238 + 1;
          if ((v236 - v90) >> 1 > v239) {
            v239 = (v236 - v90) >> 1;
          }
          else {
            v240 = v239;
          }
          if (v240) {
            v240 = (unint64_t)sub_7A890(v240);
          }
          else {
            v241 = 0LL;
          }
          v242 = 0LL;
          v243 = (_DWORD *)(v240 + 4 * v238);
          v236 = (char *)(v240 + 4 * v241);
          *v243 = 1886614639;
          v237 = (char *)(v243 + 1);
          v244 = v90;
          do
          {
            v243[v242 - 1] = *(_DWORD *)&v90[v242 * 4];
            --v242;
          }

          while (v242 != -1);
          v90 = (char *)(v243 - 1);
          operator delete(v244);
        }

        else
        {
          *((_DWORD *)v90 + 1) = 1886614639;
          v237 = v90 + 8;
        }

        if (v237 >= v236)
        {
          v245 = (v237 - v90) >> 2;
          v246 = v245 + 1;
          if ((v236 - v90) >> 1 > v246) {
            v246 = (v236 - v90) >> 1;
          }
          else {
            v247 = v246;
          }
          if (v247) {
            v247 = (unint64_t)sub_7A890(v247);
          }
          v248 = (unsigned int *)(v247 + 4 * v245);
          *v248 = 1886614625;
          for (uint64_t i = v248 + 1; v237 != v90; --v248)
          {
            v250 = *((_DWORD *)v237 - 1);
            v237 -= 4;
            *(v248 - 1) = v250;
          }

          operator delete(v90);
          std::string v91 = v248;
          v92 = i;
        }

        else
        {
          *(_DWORD *)v237 = 1886614625;
          v92 = (unsigned int *)(v237 + 4);
          std::string v91 = (unsigned int *)v90;
        }

        if (v91 == v92)
        {
LABEL_362:
          operator delete(v91);
          goto LABEL_363;
        }
      }

      goto LABEL_123;
    case 2003329648:
      v83 = (unsigned int *)operator new(4uLL);
      os_log_s *v83 = 1886222185;
      v84 = (unsigned int *)sub_7A890(2uLL);
      uint64_t v85 = 1885892727;
      break;
    default:
      goto LABEL_363;
  }

  v84[1] = v85;
  v92 = v84 + 2;
  std::string *v84 = *v83;
  operator delete(v83);
  std::string v91 = v84;
LABEL_123:
  v278 = a3;
  v279 = a1;
  v281 = (uint64_t *)(a2 + 504);
  v280 = v91;
  v93 = v91;
  v286 = a2;
  v284 = v92;
  do
  {
    char v94 = *v93;
    int v95 = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    sub_6DD4();
    if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
    {
      v251 = (os_log_t *)sub_138E8(13);
      v252 = *v251;
      if (*v251 && os_log_type_enabled(*v251, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 5033;
        _os_log_impl( &dword_0,  v252,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v253, "Precondition failure.");
    }

    v96 = sub_138E8(8);
    if ((*(_BYTE *)(v96 + 8) & 1) != 0)
    {
      v97 = *(os_log_s **)v96;
      if (*(void *)v96)
      {
        if (os_log_type_enabled(*(os_log_t *)v96, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v316, v94);
          uint64_t v98 = v316;
          if (v316[23] < 0) {
            uint64_t v98 = *(_BYTE **)v316;
          }
          int v99 = &__s1;
          if ((v296 & 0x80u) != 0) {
            int v99 = __s1;
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 5035;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v98;
          LOWORD(buf[7]) = 2080;
          *(void *)((char *)&buf[7] + 2) = v99;
          _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Manipulating last-in stack for port type %s and uid: %s",  (uint8_t *)buf,  0x26u);
          if ((v316[23] & 0x80000000) != 0) {
            operator delete(*(void **)v316);
          }
        }
      }
    }

    v101 = *(uint64_t **)(a2 + 504);
    v100 = *(uint64_t **)(a2 + 512);
    if (v101 == v100) {
      goto LABEL_357;
    }
    do
    {
      sub_B8CBC((uint64_t *)v316, v101, "", 5038);
      v102 = *(_DWORD *)(*(void *)v316 + 144LL);
      v103 = v296;
      if ((v296 & 0x80u) != 0) {
        v103 = __n;
      }
      if (!v103)
      {
        v117 = 1;
        goto LABEL_163;
      }

      v104 = *(const __CFString **)(*(void *)v316 + 248LL);
      theString = v104;
      LOBYTE(v308) = *(_BYTE *)(*(void *)v316 + 256LL);
      if ((_BYTE)v308) {
        v105 = v104 == 0LL;
      }
      else {
        v105 = 1;
      }
      if (!v105)
      {
        CFRetain(v104);
        v104 = theString;
      }

      sub_48E98(buf, v104);
      if ((v296 & 0x80u) == 0) {
        v106 = v296;
      }
      else {
        v106 = __n;
      }
      v107 = HIBYTE(buf[5]);
      v108 = SHIBYTE(buf[5]);
      if (buf[5] < 0) {
        v107 = *(void *)&buf[2];
      }
      if (v106 == v107)
      {
        if (buf[5] >= 0) {
          v109 = buf;
        }
        else {
          v109 = *(_DWORD **)buf;
        }
        if ((v296 & 0x80) != 0)
        {
          v117 = memcmp(__s1, v109, __n) == 0;
          if ((v108 & 0x80000000) == 0) {
            goto LABEL_161;
          }
        }

        else if (v296)
        {
          v110 = v296 - 1LL;
          v111 = &__s1;
          do
          {
            v113 = *(unsigned __int8 *)v111;
            v111 = (void **)((char *)v111 + 1);
            v112 = v113;
            v115 = *(unsigned __int8 *)v109;
            v109 = (_DWORD *)((char *)v109 + 1);
            v114 = v115;
            v215 = v110-- != 0;
            v116 = v215;
            v117 = v112 == v114;
          }

          while (v112 == v114 && (v116 & 1) != 0);
          if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
            goto LABEL_161;
          }
        }

        else
        {
          v117 = 1;
          if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
            goto LABEL_161;
          }
        }

        uint64_t v46 = (char *)operator new(0xA0uLL);
        uint64_t v10 = (std::__shared_weak_count *)v46;
        *((void *)v46 + 1) = 0LL;
        v47 = (unint64_t *)(v46 + 8);
        *((void *)v46 + 2) = 0LL;
        *(void *)uint64_t v46 = off_477180;
        *((void *)v46 + 3) = &off_4771B8;
        uint64_t v12 = (std::__shared_weak_count *)(v46 + 24);
        *((void *)v46 + 4) = 0LL;
        *((void *)v46 + 5) = 0LL;
        std::string::size_type v48 = *(void *)a2;
        *((void *)v46 + 6) = a1;
        *((void *)v46 + 7) = v48;
        *((_DWORD *)v46 + 16) = a2[2];
        v46[68] = a3 & 1;
        v46[69] = (a3 & 2) != 0;
        v46[70] = (a3 & 4) != 0;
        v46[71] = (a3 & 8) != 0;
        v46[72] = 0;
        *((void *)v46 + 10) = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)&v49 = -1LL;
        *((void *)&v49 + 1) = -1LL;
        *(_OWORD *)(v46 + 104) = v49;
        *(_OWORD *)(v46 + 88) = v49;
        *((void *)v46 + 15) = 0x7FEFFFFFFFFFFFFFLL;
        *((_OWORD *)v46 + 8) = v49;
        *((_OWORD *)v46 + 9) = v49;
        do
          unint64_t v50 = __ldxr(v47);
        while (__stxr(v50 + 1, v47));
        v51 = (unint64_t *)(v46 + 16);
        do
          uint64_t v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        *((void *)v46 + 4) = v12;
        *((void *)v46 + 5) = v46;
        do
          uint64_t v17 = __ldaxr(v47);
        while (__stlxr(v17 - 1, v47));
        goto LABEL_120;
      }

      if (v6 > 1853059699)
      {
        if (v6 != 1853059700)
        {
          if (v6 == 1870030194) {
            goto LABEL_97;
          }
          if (v6 != 1885762592) {
            goto LABEL_125;
          }
          goto LABEL_114;
        }

              sub_33200();
              if ((qword_48F138 & 0xFF00000000LL) != 0) {
                v66 = qword_48F138;
              }
              else {
                v66 = 64;
              }
              v67 = 2LL;
              goto LABEL_118;
            }

            unint64_t v64 = (os_log_t *)sub_138E8(16);
            uint64_t v65 = *v64;
            if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)cStr = 136315394;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 228;
              _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Enabling drift correction because: Main clock has an unspecified clock domain.",  cStr,  0x12u);
            }
          }

          else
          {
            v57 = (os_log_t *)sub_138E8(16);
            v58 = *v57;
            if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(&__str, v53);
              if (v142 >= 0) {
                v59 = &__str;
              }
              else {
                v59 = (CFStringRef **)__str;
              }
              sub_2CA1C(&__p, v26);
              size = (char)__p.__r_.__value_.__s.__size_;
              BOOL v61 = __p.__r_.__value_.__r.__words[0];
              sub_23FE8((uint64_t)inQualifierData, v52 + 2);
              BOOL v62 = &__p;
              if (size < 0) {
                BOOL v62 = (std::string *)v61;
              }
              v63 = inQualifierData;
              if (v138 < 0) {
                v63 = (void **)inQualifierData[0];
              }
              *(_DWORD *)cStr = 136316162;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 220;
              v144 = 2080;
              *(void *)v145 = v59;
              *(_WORD *)&v145[8] = 2080;
              *(void *)&v145[10] = v62;
              *(_WORD *)&v145[18] = 2080;
              v146 = v63;
              _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Enabling drift correction because: Device's clock domain (%s) diverges from the domain of the aggregate's main clock (%s). Device: %s.",  cStr,  0x30u);
              if (v138 < 0) {
                operator delete(inQualifierData[0]);
              }
              a7 = v120;
              if (v142 < 0) {
                operator delete(__str);
              }
            }
          }

          v67 = a5;
          v66 = a6;
          if (v123) {
            goto LABEL_114;
          }
LABEL_118:
          uint64_t v68 = (os_log_t *)sub_138E8(16);
          v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&__str, v67);
            if (v142 >= 0) {
              v70 = &__str;
            }
            else {
              v70 = (CFStringRef **)__str;
            }
            v71 = "min";
            if (v66 >= 0x20)
            {
              v71 = "low";
              if (v66 >= 0x40)
              {
                v71 = "medium";
                if (v66 >= 0x60)
                {
                  if (v66 >= 0x7F) {
                    v71 = "max";
                  }
                  else {
                    v71 = "high";
                  }
                }
              }
            }

            sub_7D084(&__p, v71);
            uint64_t v72 = (char)__p.__r_.__value_.__s.__size_;
            unsigned int v73 = __p.__r_.__value_.__r.__words[0];
            sub_23FE8((uint64_t)inQualifierData, (os_unfair_lock_t)(*(void *)(v48 + 16) + 8LL));
            v74 = &__p;
            if (v72 < 0) {
              v74 = (std::string *)v73;
            }
            unsigned int v75 = inQualifierData;
            if (v138 < 0) {
              unsigned int v75 = (void **)inQualifierData[0];
            }
            *(_DWORD *)cStr = 136316162;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 371;
            v144 = 2080;
            *(void *)v145 = v70;
            *(_WORD *)&v145[8] = 2080;
            *(void *)&v145[10] = v74;
            *(_WORD *)&v145[18] = 2080;
            v146 = v75;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying drift compensation (algorithm: %s, quality: %s) to subdevice %s.",  cStr,  0x30u);
            if (v138 < 0) {
              operator delete(inQualifierData[0]);
            }
            a7 = v120;
            if (v142 < 0) {
              operator delete(__str);
            }
          }

          sub_13408((uint64_t)&outData, @"drift", 1);
          sub_13408((uint64_t)&outData, @"drift algorithm", v67);
          sub_13408((uint64_t)&outData, @"drift quality", v66);
LABEL_140:
          if (a7)
          {
            BOOL v76 = (os_log_t *)sub_138E8(16);
            v77 = *v76;
            if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)cStr = 136315394;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 385;
              _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_INFO,  "%25s:%-5d Disabling HAL safety offset padding",  cStr,  0x12u);
            }

            sub_13408((uint64_t)&outData, @"don't pad", 1);
          }

          if (theArray && HIBYTE(v128)) {
            CFArrayAppendValue(theArray, outData);
          }
          sub_13850((uint64_t)&outData);
          std::string::size_type v48 = *(void *)(v48 + 8);
          if (v48 == v47)
          {
            uint64_t v46 = theArray;
            break;
          }
        }
      }

      if (v129 && HIBYTE(v130)) {
        CFArrayAppendValue(v129, v46);
      }
      sub_13818((uint64_t)&theArray);
      unsigned int v42 = *(void *)(v119 + 8);
    }

    while (v42 != a1);
    unsigned int v41 = v129;
  }

  if (HIBYTE(v133) && v41 && theDict) {
    CFDictionarySetValue(theDict, @"subdevices", v41);
  }
  if (a8)
  {
    uint64_t v81 = (os_log_t *)sub_138E8(16);
    v82 = *v81;
    if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 398;
      _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_INFO,  "%25s:%-5d Disabling HAL AirPods offload DSP for VP use case",  cStr,  0x12u);
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v83 = sub_5A950((uint64_t)&__p);
    theArray = v83;
    sub_59370((CFStringRef *)&__str, "airpods noise suppression");
    if (v83) {
      CFRetain(v83);
    }
    v141 = v83;
    *(void *)cStr = &__str;
    *(void *)&cStr[8] = 1LL;
    v84 = sub_5A950((uint64_t)cStr);
    inQualifierData[0] = v84;
    if (v141) {
      CFRelease(v141);
    }
    if (__str) {
      CFRelease(__str);
    }
    if (v83) {
      CFRelease(v83);
    }
    if (HIBYTE(v133) && v84 && theDict) {
      CFDictionarySetValue(theDict, @"dsp offload bypass override", v84);
    }
    CFRelease(v84);
  }

  LODWORD(outData) = 0;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6263616767LL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  inQualifierData[0] = theDict;
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_AggregateCreation", 0x14uLL) == &qword_4938E0)
  {
    v86 = 0LL;
  }

  else
  {
    uint64_t v85 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    v86 = (__CFArray *)os_signpost_id_generate((os_log_t)qword_493900);
    v87 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if ((unint64_t)v86 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v88 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        *(_DWORD *)cStr = 138412290;
        *(void **)&cStr[4] = inQualifierData[0];
        _os_signpost_emit_with_name_impl( &dword_0,  v88,  OS_SIGNPOST_INTERVAL_BEGIN,  (os_signpost_id_t)v86,  "VA_AggregateCreation",  "Creating HAL aggregate with dictionary: %@",  cStr,  0xCu);
      }
    }
  }

  theArray = v86;
  v89 = sub_138E8(42);
  if ((*(_BYTE *)(v89 + 8) & 1) != 0)
  {
    v90 = *(os_log_s **)v89;
    if (*(void *)v89)
    {
      if (os_log_type_enabled(*(os_log_t *)v89, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)cStr = 136315650;
        *(void *)&cStr[4] = "SignpostUtilities.h";
        *(_WORD *)&cStr[12] = 1024;
        *(_DWORD *)&cStr[14] = 88;
        v144 = 2080;
        *(void *)v145 = "kAggregateCreation";
        _os_log_impl(&dword_0, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", cStr, 0x1Cu);
      }
    }
  }

  std::string v91 = (os_log_t *)sub_138E8(16);
  v92 = *v91;
  if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)cStr = 136315650;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 412;
    v144 = 2112;
    *(void **)v145 = inQualifierData[0];
    _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating HAL Aggregate with dictionary: %@",  cStr,  0x1Cu);
  }

  ioDataSize = 4;
  v93 = sub_28909C();
  PropertyData = AudioObjectGetPropertyData( v93,  (const AudioObjectPropertyAddress *)&__p,  8u,  inQualifierData,  &ioDataSize,  &outData);
  if ((_DWORD)PropertyData)
  {
    v110 = (os_log_t *)sub_138E8(13);
    v111 = *v110;
    if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__str, PropertyData);
      v112 = v142 >= 0 ? (CFStringRef *)&__str : __str;
      *(_DWORD *)cStr = 136315650;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 415;
      v144 = 2080;
      *(void *)v145 = v112;
      _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: HAL failure during attempt to create the aggregate device: %s",  cStr,  0x1Cu);
      if (v142 < 0) {
        operator delete(__str);
      }
    }

    v113 = __cxa_allocate_exception(0x10uLL);
    *(void *)v113 = &off_4865A0;
    v113[2] = PropertyData;
  }

  int v95 = (os_log_t *)sub_138E8(16);
  v96 = *v95;
  if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_DEBUG))
  {
    v97 = (int)outData;
    uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 120LL))(v116);
    (*(void (**)(CFStringRef **__return_ptr, uint64_t))(*(void *)v116 + 128LL))(&__str, v116);
    *(_DWORD *)cStr = 136316162;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 418;
    v144 = 1024;
    *(_DWORD *)v145 = v97;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v98;
    *(_WORD *)&v145[10] = 2112;
    *(void *)&v145[12] = __str;
    _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created aggregate device ID %u with master PhysicalDevice ID %u (uid %@).",  cStr,  0x28u);
    sub_19DFC((uint64_t)&__str);
  }

  int v99 = outData;
  sub_28925C((os_signpost_id_t *)&theArray);
  sub_13818((uint64_t)&v129);
  if (cf) {
    CFRelease(cf);
  }
  sub_13850((uint64_t)&theDict);
  if (v134) {
    CFRelease(v134);
  }
  sub_19DFC((uint64_t)&value);
  return v99;
}

        uint64_t v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v65, "Precondition failure.");
      }

      if (*(void *)a15 == *(void *)(a15 + 8) || *a14 == a14[1])
      {
        uint64_t v35 = (os_log_t *)sub_138E8(13);
        unsigned int v36 = *v35;
        if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "RoutingSettings_Aspen.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2933;
          _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_114;
      }

void sub_53CF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, std::__shared_weak_count *a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_53F04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_128B98(a1 + 16, (void *)(a2 + 16));
  sub_121604((uint64_t *)(a1 + 40), a2 + 40);
  sub_128AF0(a1 + 64, (void *)(a2 + 64));
  sub_86550((uint64_t *)(a1 + 88), a2 + 88);
  sub_86550((uint64_t *)(a1 + 112), a2 + 112);
  uint64_t v4 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_24054((_BYTE *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v5;
  }

  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  sub_54070((void *)(a1 + 192), (const void ***)(a2 + 192));
  uint64_t v6 = *(void *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(void *)(a1 + 360) = v6;
  sub_C590C((_BYTE *)(a1 + 376), (__int128 *)(a2 + 376));
  return a1;
}

void sub_53FF4(_Unwind_Exception *a1)
{
}

void sub_54058()
{
}

void sub_54068()
{
}

void *sub_54070(void *a1, const void ***a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_8D204(a1, *a2, a2[1], a2[1] - *a2);
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  sub_8D204(a1 + 3, a2[3], a2[4], a2[4] - a2[3]);
  sub_54160((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  sub_54160((uint64_t)(a1 + 11), (uint64_t)(a2 + 11));
  sub_54160((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  return a1;
}

void sub_54114(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_54160(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_52168(a1, *(void *)(a2 + 8));
  __int128 v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = *((unsigned int *)v5 + 4);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
        }

        else
        {
          unint64_t v2 = ((_DWORD)v8 - 1) & v7;
        }

        uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v7) {
                goto LABEL_41;
              }
            }

            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }

              else
              {
                v12 &= v8 - 1;
              }

              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }

      uint64_t v13 = operator new(0x30uLL);
      *uint64_t v13 = 0LL;
      v13[1] = v7;
      *((_DWORD *)v13 + 4) = *((_DWORD *)v5 + 4);
      v13[4] = 0LL;
      v13[5] = 0LL;
      v13[3] = 0LL;
      sub_8D204(v13 + 3, (const void **)v5[3], (const void **)v5[4], (v5[4] - v5[3]) >> 3);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1LL;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        sub_52168(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }

        else
        {
          unint64_t v2 = ((_DWORD)v8 - 1) & v7;
        }
      }

      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        *uint64_t v13 = *v21;
      }

      else
      {
        *uint64_t v13 = *v6;
        *uint64_t v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8LL);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }

        else
        {
          v22 &= v8 - 1;
        }

        uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }

      *uint64_t v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      __int128 v5 = (uint64_t *)*v5;
    }

    while (v5);
  }

  return a1;
}

void sub_543A0(_Unwind_Exception *a1)
{
}

uint64_t sub_543D8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unint64_t v8 = (uint64_t *)v3;
    }
    else {
      unint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2)
  {
LABEL_13:
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      if (v16 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      unint64_t v18 = "RoutingManager.cpp";
      __int16 v19 = 1024;
      int v20 = 4682;
      __int16 v21 = 2080;
      unint64_t v22 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): Unable to locate category '%s' in the routing database.",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852793716;
  }

  return v5 + 40;
}

uint64_t sub_5454C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    else {
      unint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 == a1 + 8
    || *(_DWORD *)(v5 + 32) > a2
    || (unsigned int v9 = *(unsigned __int16 *)(v5 + 176), (v10 = v9 >> 8) == 0))
  {
LABEL_13:
    if ((_DWORD)a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }

    else
    {
      uint64_t v11 = sub_138E8(20);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        unint64_t v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, a2);
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315650;
            unint64_t v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 2116;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      LOWORD(v9) = sub_5454C(a1, 1768776806LL);
      unsigned int v10 = BYTE1(v9);
    }
  }

  return v9 | (v10 << 8);
}

uint64_t sub_546E0()
{
  uint64_t result = qword_48E228;
  if (!qword_48E228)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "PortManager.cpp";
        __int16 v6 = 1024;
        int v7 = 270;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sPortManager is NULL]: sPortManager is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sPortManager is NULL!");
  }

  return result;
}

void sub_547D8(_Unwind_Exception *exception_object)
{
}

void sub_547F4(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (!pthread_equal(v2, v3))
  {
    int v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "PortManager.h";
        __int16 v8 = 1024;
        int v9 = 370;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: called while mutex is not held by the current thread.",  (uint8_t *)&v6,  0x12u);
      }
    }
  }

BOOL sub_548C8(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_4A10B0);
  if ((v1 & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_4A10B0);
    a1 = v4;
    if (v3)
    {
      qword_4A1058 = 0LL;
      unk_4A1060 = 0LL;
      qword_4A1068 = 0LL;
      strcpy((char *)&dword_4A1070, "cwdv");
      byte_4A1078 = 0;
      dword_4A1080 = 3;
      qword_4A1098 = 0LL;
      qword_4A1090 = 0LL;
      qword_4A1088 = (uint64_t)&qword_4A1090;
      dword_4A10A0 = 44739242;
      qword_4A10A8 = 0LL;
      __cxa_guard_release(&qword_4A10B0);
      a1 = v4;
    }
  }

  return sub_54978(a1, (uint64_t)&qword_4A1058);
}

BOOL sub_54978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  int v7 = *(const void **)a2;
  if (v6 != *(void *)(a2 + 8) - (void)v7 || memcmp(v4, v7, v6) || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0LL;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) != 0) != (*(_BYTE *)(a2 + 32) != 0))
  {
    return 0LL;
  }

  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40) && *(void *)(a1 + 64) == *(void *)(a2 + 64))
  {
    int v9 = *(void **)(a1 + 48);
    if (v9 == (void *)(a1 + 56))
    {
LABEL_25:
      if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)) {
        return sub_5586C(*(const __CFString **)(a1 + 80), (const __CFString **)(a2 + 80)) == kCFCompareEqualTo;
      }
    }

    else
    {
      unsigned int v10 = *(void **)(a2 + 48);
      while (*((_DWORD *)v9 + 7) == *((_DWORD *)v10 + 7))
      {
        uint64_t v11 = (void *)v9[1];
        unint64_t v12 = v9;
        if (v11)
        {
          do
          {
            int v9 = v11;
            uint64_t v11 = (void *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            int v9 = (void *)v12[2];
            BOOL v13 = *v9 == (void)v12;
            unint64_t v12 = v9;
          }

          while (!v13);
        }

        float v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            float v15 = v14;
            float v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            float v15 = (void *)v10[2];
            BOOL v13 = *v15 == (void)v10;
            unsigned int v10 = v15;
          }

          while (!v13);
        }

        unsigned int v10 = v15;
        if (v9 == (void *)(a1 + 56)) {
          goto LABEL_25;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_54ADC(uint64_t a1, uint64_t a2)
{
  if (sub_548C8(a2)) {
    return 1LL;
  }
  uint64_t v5 = *(__int32 **)(a2 + 8);
  if (*(__int32 **)a2 != v5)
  {
    size_t v6 = wmemchr(*(const __int32 **)a2, *(_DWORD *)(a1 + 144), ((uint64_t)v5 - *(void *)a2) >> 2);
    int v7 = v6 ? v6 : v5;
    if (v5 == v7) {
      goto LABEL_60;
    }
  }

  if (qword_48E130 == *(void *)(a1 + 176))
  {
    uint64_t v8 = qword_48E120;
    if ((_UNKNOWN *)qword_48E120 == &unk_48E128) {
      goto LABEL_25;
    }
    int v9 = *(void **)(a1 + 160);
    while (*(_DWORD *)(v8 + 28) == *((_DWORD *)v9 + 7))
    {
      unsigned int v10 = *(void **)(v8 + 8);
      uint64_t v11 = v8;
      if (v10)
      {
        do
        {
          uint64_t v8 = (uint64_t)v10;
          unsigned int v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v8 = *(void *)(v11 + 16);
          BOOL v12 = *(void *)v8 == v11;
          uint64_t v11 = v8;
        }

        while (!v12);
      }

      BOOL v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          float v14 = v13;
          BOOL v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          float v14 = (void *)v9[2];
          BOOL v12 = *v14 == (void)v9;
          int v9 = v14;
        }

        while (!v12);
      }

      int v9 = v14;
      if ((_UNKNOWN *)v8 == &unk_48E128) {
        goto LABEL_25;
      }
    }
  }

  unsigned int v15 = *(_DWORD *)(a2 + 24);
  if (v15 != 1986295651)
  {
    uint64_t v24 = *(void *)(a1 + 168);
    if (!v24) {
      goto LABEL_60;
    }
    uint64_t v25 = a1 + 168;
    do
    {
      unsigned int v26 = *(_DWORD *)(v24 + 28);
      BOOL v27 = v26 >= v15;
      if (v26 >= v15) {
        uint64_t v28 = (uint64_t *)v24;
      }
      else {
        uint64_t v28 = (uint64_t *)(v24 + 8);
      }
      if (v27) {
        uint64_t v25 = v24;
      }
      uint64_t v24 = *v28;
    }

    while (*v28);
    if (v25 == a1 + 168 || v15 < *(_DWORD *)(v25 + 28))
    {
LABEL_60:
      int v19 = 1;
      return v19 ^ 1u;
    }
  }

void sub_54DD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_54DF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_54DF8(_WORD *a1)
{
  if ((a1[92] & 0x40) != 0)
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      size_t v6 = "Port.cpp";
      __int16 v7 = 1024;
      int v8 = 407;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Must override if the CanSetRoutable() returns true.",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Must override if the CanSetRoutable() returns true.");
  }

  return (*(uint64_t (**)(_WORD *))(*(void *)a1 + 152LL))(a1);
}

void sub_54EF4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_54F10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_54F18()
{
  return 1LL;
}

uint64_t sub_54F20(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  int v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    while (*((_DWORD *)v2 + 7) != a2)
    {
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          int v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }

        while (!v6);
      }

      uint64_t v2 = v5;
      if (v5 == v3)
      {
        uint64_t v2 = (void *)(a1 + 16);
        return (*(_DWORD *)a1 != 3) ^ (v2 == v3);
      }
    }
  }

  return (*(_DWORD *)a1 != 3) ^ (v2 == v3);
}

uint64_t sub_54F94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_54F9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 521);
}

BOOL sub_54FA4(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = HIDWORD(a2);
  if ((sub_54F20(a1 + 24, SHIDWORD(a2)) & 1) == 0)
  {
    uint64_t v7 = sub_138E8(8);
    if ((*(_BYTE *)(v7 + 8) & 1) == 0) {
      return 0LL;
    }
    int v8 = *(os_log_s **)v7;
    if (!*(void *)v7) {
      return 0LL;
    }
    BOOL result = os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_2CA1C(&v32, v4);
    int size = (char)v32.__r_.__value_.__s.__size_;
    std::string::size_type v10 = v32.__r_.__value_.__r.__words[0];
    sub_2DABA8(&__p, a1);
    uint64_t v11 = &v32;
    if (size < 0) {
      uint64_t v11 = (std::string *)v10;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    int v34 = "RouteUtilities.cpp";
    __int16 v35 = 1024;
    int v36 = 843;
    __int16 v37 = 2080;
    unsigned int v38 = v11;
    __int16 v39 = 2080;
    v40 = p_p;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mode %s is disallowed in abstract route %s.", buf, 0x26u);
LABEL_71:
    return 0LL;
  }

  sub_5541C();
  BOOL result = 1LL;
  if (v2 <= 1668313714)
  {
    if (v2 > 1668309361)
    {
      if (v2 == 1668309362) {
        goto LABEL_23;
      }
      unsigned __int16 v6 = 29250;
LABEL_22:
      if (v2 != (v6 | 0x63700000)) {
        return result;
      }
LABEL_23:
      uint64_t v13 = 13LL;
      if ((int)v4 > 1919776354)
      {
        if ((int)v4 > 1987081832)
        {
          if ((_DWORD)v4 == 1987081833) {
            goto LABEL_39;
          }
          unsigned __int16 v15 = 30319;
        }

        else
        {
          if ((_DWORD)v4 == 1919776355) {
            goto LABEL_39;
          }
          unsigned __int16 v15 = 26467;
        }

        int v14 = v15 | 0x76700000;
      }

      else
      {
        if ((int)v4 <= 1768779618)
        {
          if ((_DWORD)v4 != 1735222132)
          {
            int v14 = 1768057203;
            goto LABEL_38;
          }

LABEL_39:
          char v16 = (int *)qword_491020[0];
          if (qword_491020[0] == unk_491028) {
            return result;
          }
          while (1)
          {
            if (*(void *)(a1 + 8) != a1)
            {
              int v17 = *v16;
              uint64_t v18 = *(void *)(a1 + 8);
              do
              {
                BOOL v19 = *(_DWORD *)(v18 + 16) == v17 || *(_DWORD *)(v18 + 20) == v17;
                char v20 = v19;
                if (v19) {
                  break;
                }
                uint64_t v18 = *(void *)(v18 + 8);
              }

              while (v18 != a1);
              if ((v20 & 1) != 0) {
                break;
              }
            }
          }

          unsigned int v21 = (void *)sub_5954C();
          int v22 = (*(uint64_t (**)(void))(*v21 + 8 * v13))();
          int v23 = *(_DWORD *)(a1 + 56);
          uint64_t v24 = *(void **)(a1 + 64);
          uint64_t v25 = (void *)(a1 + 72);
          if (v24 != (void *)(a1 + 72))
          {
            while (*((_DWORD *)v24 + 7) != v22)
            {
              unsigned int v26 = (void *)v24[1];
              if (v26)
              {
                do
                {
                  BOOL v27 = v26;
                  unsigned int v26 = (void *)*v26;
                }

                while (v26);
              }

              else
              {
                do
                {
                  BOOL v27 = (void *)v24[2];
                  BOOL v19 = *v27 == (void)v24;
                  uint64_t v24 = v27;
                }

                while (!v19);
              }

              uint64_t v24 = v27;
              if (v27 == v25)
              {
                if (v23 == 3) {
                  return 1LL;
                }
                goto LABEL_64;
              }
            }
          }

          if ((v23 != 3) != (v24 == v25)) {
            return 1LL;
          }
LABEL_64:
          uint64_t v28 = sub_138E8(8);
          if ((*(_BYTE *)(v28 + 8) & 1) == 0) {
            return 0LL;
          }
          int v29 = *(os_log_s **)v28;
          if (!*(void *)v28) {
            return 0LL;
          }
          BOOL result = os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          sub_2DABA8(&v32, a1);
          if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            char v30 = &v32;
          }
          else {
            char v30 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          int v34 = "RouteUtilities.cpp";
          __int16 v35 = 1024;
          int v36 = 856;
          __int16 v37 = 2080;
          unsigned int v38 = v30;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d System settings disallow BTLE ports in abstract route %s.",  buf,  0x1Cu);
          goto LABEL_71;
        }

        if ((_DWORD)v4 == 1768779619) {
          goto LABEL_39;
        }
        int v14 = 1768781411;
      }

  ++*(void *)(a1 + 24);
}

  v23[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_D171C((uint64_t)v23);
}

  v23[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_FC668((uint64_t)v23);
  return v10;
}

  BOOL result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

  BOOL result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

  BOOL result = v30;
  *(void *)a1 = v8;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_D171C((uint64_t)v24);
  return 1LL;
}

  sub_CC160((uint64_t)a1);
}

  ++*(void *)(a1 + 24);
LABEL_40:
  *((_BYTE *)v9 + 20) = 1;
}

  BOOL v76 = 0x7074727573716764LL;
  v77 = 0;
  v74 = 0x7074727561736573LL;
  unsigned int v75 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16LL))(*(void *)a1, &v76))
  {
    __int16 v35 = (os_log_t *)sub_138E8(24);
    int v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v37 = *((float *)a1 + 21);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      uint64_t v81 = 1024;
      v82 = 318;
      v83 = 2048;
      v84 = v37;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SidetoneEQGain being set to %f", buf, 0x1Cu);
    }

    (*(void (**)(void, uint64_t *, void, void, uint64_t, uint64_t))(**(void **)a1 + 48LL))( *(void *)a1,  &v76,  0LL,  0LL,  4LL,  (uint64_t)a1 + 84);
  }

  else if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16LL))(*(void *)a1, &v74))
  {
    uint64_t v72 = 0x7074727561737673LL;
    unsigned int v73 = 0;
    v71 = 0LL;
    v70 = 8;
    (*(void (**)(void, uint64_t *, void, void, int *, const __CFArray **))(**(void **)a1 + 40LL))( *(void *)a1,  &v72,  0LL,  0LL,  &v70,  &v71);
    unsigned int v38 = v71;
    if (v71)
    {
      __int16 v39 = 0;
      theArray = v71;
      v69 = 1;
LABEL_58:
      LODWORD(v38) = CFArrayGetCount(v38);
      while (v39 < v38)
      {
        v67 = 0;
        if ((sub_1A0E0C(&theArray, v39, &v67) & 1) == 0)
        {
          uint64_t v55 = (os_log_t *)sub_138E8(13);
          v56 = *v55;
          if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            uint64_t v81 = 1024;
            v82 = 335;
            _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Channels CFArray contained a non-UInt32 value.",  buf,  0x12u);
          }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = 2003329396;
        }

        v40 = *a1;
        *(void *)buf = 0x707472756D766423LL;
        *(_DWORD *)&buf[8] = v67;
        if ((*(unsigned int (**)(double, _BYTE *))(**(void **)&v40 + 16LL))( COERCE_DOUBLE(*(void *)&v40),  buf))
        {
          uint64_t v65 = 0.0;
          v66 = 0.0;
          BOOL v62 = 0x7074727576646223LL;
          v63 = v67;
          unint64_t v64 = 16;
          (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)a1 + 40LL))( *(void *)a1,  &v62,  0LL,  0LL,  &v64,  &v65);
          unsigned int v41 = fmax(fmin(v66, -28.0), v65);
          BOOL v61 = v41;
          unsigned int v42 = (os_log_t *)sub_138E8(24);
          unsigned int v43 = *v42;
          if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            uint64_t v81 = 1024;
            v82 = 350;
            v83 = 2048;
            v84 = v61;
            _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d kAudioDevicePropertyPlayThruVolumeDecibels being set to %f",  buf,  0x1Cu);
          }

          uint64_t v44 = *a1;
          *(void *)buf = 0x707472756D766462LL;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, _BYTE *, void, void, uint64_t, float *))(**(void **)&v44 + 48LL))( COERCE_DOUBLE(*(void *)&v44),  buf,  0LL,  0LL,  4LL,  &v61);
        }

        else
        {
          LODWORD(v65) = -1042284544;
          v45 = (os_log_t *)sub_138E8(24);
          uint64_t v46 = *v45;
          if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            uint64_t v81 = 1024;
            v82 = 358;
            v83 = 2048;
            v84 = *(float *)&v65;
            _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d kAudioDevicePropertyPlayThruVolumeDecibels being set to %f",  buf,  0x1Cu);
          }

          v47 = *a1;
          *(void *)buf = 0x707472756D766462LL;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, _BYTE *, void, void, uint64_t, double *))(**(void **)&v47 + 48LL))( COERCE_DOUBLE(*(void *)&v47),  buf,  0LL,  0LL,  4LL,  &v65);
        }

        ++v39;
        unsigned int v38 = theArray;
        if (theArray) {
          goto LABEL_58;
        }
      }

      sub_13818((uint64_t)&theArray);
    }
  }

  else
  {
    std::string::size_type v48 = (os_log_t *)sub_138E8(24);
    v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      uint64_t v81 = 1024;
      v82 = 366;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Sidetone device does not support kAudioDevicePropertySidetoneEQGainDecibelValue",  buf,  0x12u);
    }
  }

  LODWORD(v62) = 1;
  uint64_t v65 = 5.07911951e233;
  LODWORD(v66) = 0;
  if ((*(unsigned int (**)(void, double *))(**(void **)a1 + 16LL))(*(void *)a1, &v65))
  {
    if (!*((_DWORD *)a1 + 22)) {
      (*(void (**)(void, double *, void, void, uint64_t, uint64_t *))(**(void **)a1 + 48LL))( *(void *)a1,  &v65,  0LL,  0LL,  4LL,  &v62);
    }
  }

  else if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16LL))(*(void *)a1, &v74))
  {
    if (!*((_DWORD *)a1 + 22))
    {
      uint64_t v72 = 0LL;
      v70 = 0;
      LODWORD(v71) = 8;
      (*(void (**)(void, uint64_t *, void, void, const __CFArray **, uint64_t *))(**(void **)a1 + 40LL))( *(void *)a1,  &v74,  0LL,  0LL,  &v71,  &v72);
      unint64_t v50 = (const __CFArray *)v72;
      if (v72)
      {
        v51 = 0;
        theArray = (CFArrayRef)v72;
        v69 = 1;
LABEL_73:
        LODWORD(v50) = CFArrayGetCount(v50);
        while (v51 < v50)
        {
          v67 = 0;
          if ((sub_1A0E0C(&theArray, v51, &v67) & 1) == 0)
          {
            v58 = (os_log_t *)sub_138E8(13);
            v59 = *v58;
            if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
              uint64_t v81 = 1024;
              v82 = 398;
              _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Channels CFArray contained a non-UInt32 value.",  buf,  0x12u);
            }

            v60 = __cxa_allocate_exception(0x10uLL);
            *(void *)v60 = &off_4865A0;
            v60[2] = 2003329396;
          }

          uint64_t v52 = *a1;
          *(void *)buf = 0x707472756D757465LL;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, _BYTE *, void, void, uint64_t, int *))(**(void **)&v52 + 48LL))( COERCE_DOUBLE(*(void *)&v52),  buf,  0LL,  0LL,  4LL,  &v70);
          ++v51;
          unint64_t v50 = theArray;
          if (theArray) {
            goto LABEL_73;
          }
        }

        sub_13818((uint64_t)&theArray);
      }
    }
  }

  else
  {
    v53 = (os_log_t *)sub_138E8(24);
    v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      uint64_t v81 = 1024;
      v82 = 406;
      _os_log_impl(&dword_0, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to enable sidetone device", buf, 0x12u);
    }
  }

  v23[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_10AF1C((uint64_t)v23);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  unsigned __int16 v6 = result[1];
  if (v6 <= 1918990111)
  {
    if (v6 > 1768781410)
    {
      if (v6 > 1835361381)
      {
        if (v6 <= 1836084596)
        {
          if (v6 == 1835361382) {
            return result;
          }
          uint64_t v7 = 1836021360;
        }

        else
        {
          if (v6 == 1836084597 || v6 == 1836281204) {
            return result;
          }
          uint64_t v7 = 1836412020;
        }

        goto LABEL_97;
      }

      if (v6 > 1835229548)
      {
        if (v6 == 1835229549 || v6 == 1835230310) {
          return result;
        }
        uint64_t v7 = 1835232630;
        goto LABEL_97;
      }

      if (v6 == 1768781411) {
        return result;
      }
      int v9 = 30322;
    }

    else
    {
      if (v6 <= 1751212898)
      {
        if (v6 <= 1701013868)
        {
          if (v6 == 1650811758) {
            return result;
          }
          uint64_t v7 = 1701013792;
        }

        else
        {
          if (v6 == 1701013869 || v6 == 1701017120) {
            return result;
          }
          uint64_t v7 = 1735222132;
        }

        goto LABEL_97;
      }

      if (v6 <= 1768776805)
      {
        if (v6 == 1751212899) {
          return result;
        }
        uint64_t v7 = 1768057203;
        goto LABEL_97;
      }

      if (v6 == 1768776806 || v6 == 1768778864) {
        return result;
      }
      int v9 = 28515;
    }

    uint64_t v7 = v9 | 0x696D0000;
    goto LABEL_97;
  }

  if (v6 > 1986818930)
  {
    if (v6 <= 1987081838)
    {
      if (v6 <= 1987077986)
      {
        if (v6 == 1986818931) {
          return result;
        }
        uint64_t v7 = 1986884455;
      }

      else
      {
        if (v6 == 1987077987 || v6 == 1987080813) {
          return result;
        }
        uint64_t v7 = 1987081833;
      }
    }

    else if (v6 > 1987212136)
    {
      if (v6 == 1987212137 || v6 == 2003133027) {
        return result;
      }
      uint64_t v7 = 2003133037;
    }

    else
    {
      if (v6 == 1987081839 || v6 == 1987208039) {
        return result;
      }
      uint64_t v7 = 1987211117;
    }

    goto LABEL_97;
  }

  if (v6 > 1936748651)
  {
    if (v6 > 1937007471)
    {
      if (v6 == 1937007472 || v6 == 1986098036) {
        return result;
      }
      uint64_t v7 = 1986556788;
      goto LABEL_97;
    }

    if (v6 == 1936748652) {
      return result;
    }
    int v8 = 29285;
  }

  else
  {
    if (v6 <= 1936683885)
    {
      if (v6 == 1918990112) {
        return result;
      }
      uint64_t v7 = 1919776355;
      goto LABEL_97;
    }

    if (v6 == 1936683886 || v6 == 1936745328) {
      return result;
    }
    int v8 = 27502;
  }

  uint64_t v7 = v8 | 0x73700000;
LABEL_97:
  if (v6 != v7)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      char v16 = 136315394;
      int v17 = "RoutingTypes.cpp";
      uint64_t v18 = 1024;
      BOOL v19 = 162;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v16,  0x12u);
    }

    unsigned __int16 v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Invariant failure.");
  }

  return result;
}

        qword_48C078 |= v24;
        goto LABEL_40;
      }
    }

    else
    {
      if (sub_14B938(@"CaptureIOData")
        || sub_14B938(@"EnableVADTelephonyMonitor")
        || sub_56120() != 2
        && sub_56120() != 3
        && sub_56120() != 4
        && sub_56120() != 5
        && sub_56120() != 195)
      {
        goto LABEL_40;
      }

      if (qword_48CDB8 != -1) {
        dispatch_once(&qword_48CDB8, &stru_46DD20);
      }
      if (!byte_48CDA8) {
        goto LABEL_40;
      }
      uint64_t v25 = (os_log_t *)sub_138E8(13);
      unsigned int v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int v79 = 136315394;
        *(void *)&v79[4] = "RunTimeDefaults.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 1927;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d (Internal only) No defaults key was set, ring buffer capture options set on HomePod",  v79,  0x12u);
      }
    }

    uint64_t v24 = 0x100000LL;
    goto LABEL_39;
  }

      v17 += 3;
      if (v17 == v18) {
        goto LABEL_40;
      }
    }

    if (memcmp(v20, v25, v21)) {
      goto LABEL_39;
    }
    operator delete(v20);
LABEL_44:
    uint64_t v28 = (os_log_t *)sub_138E8(6);
    int v29 = *v28;
    uint64_t v4 = v2 + 80;
    unsigned __int8 v1 = a1;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
    {
      sub_33464(&__p, (unsigned int *)&v44);
      char v30 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        char v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      v51 = "TimeSyncClockDeviceManager.cpp";
      uint64_t v52 = 1024;
      v53 = 183;
      v54 = 2080;
      uint64_t v55 = v30;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found timesync clock ref for %s", buf, 0x1Cu);
    }

    *((void *)sub_32BA54((uint64_t **)v2 + 9, v44, HIDWORD(v44), &v44) + 5) = v5;
    unint64_t v31 = *((void *)v2 + 8);
    if (!v31)
    {
      __int16 v37 = (os_log_t *)sub_138E8(13);
      unsigned int v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v51 = "TimeSyncClockDeviceManager.cpp";
        uint64_t v52 = 1024;
        v53 = 188;
        _os_log_impl(&dword_0, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      __int16 v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v39, "Precondition failure.");
    }

    (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 48LL))(v31, &v44);
    std::string v32 = v3 + 2;
    uint64_t v33 = (void *)*((void *)v2 + 13);
    int v34 = v3;
    if (v3 + 2 != v33)
    {
      do
      {
        __int16 v35 = v32[1];
        *(v32 - 2) = *v32;
        *(v32 - 1) = v35;
        v32 += 2;
      }

      while (v32 != v33);
      int v34 = v32 - 2;
    }

    *((void *)v2 + 13) = v34;
LABEL_55:
    if (cf) {
      CFRelease(cf);
    }
  }

  while (v3 != *((void **)v2 + 13));
LABEL_65:
  if (v2 + 120 != (char *)(v1 + 1)) {
    sub_8CDEC( (uint64_t)(v2 + 120),  (std::string *)v1[1],  (__int128 *)v1[2],  0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v1[2] - (_BYTE *)v1[1]) >> 3));
  }
  return sub_32B998(&v43);
}

void sub_553FC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_5541C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_491038);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_491038))
    {
      __int128 v1 = xmmword_403230;
      sub_1873F8(qword_491020, &v1, 4uLL);
      __cxa_guard_release(&qword_491038);
    }
  }

void sub_554B8(_Unwind_Exception *a1)
{
}

uint64_t *sub_554D0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = a2 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a3;
      else {
        std::string::size_type v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
  }

  if ((_DWORD)a3 == 1768776806)
  {
    result[2] = 0LL;
    result[1] = 0LL;
    uint64_t *result = (uint64_t)(result + 1);
  }

  else
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      BOOL v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a3);
          if (v15 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          int v17 = "RoutingTypes.cpp";
          __int16 v18 = 1024;
          int v19 = 2092;
          __int16 v20 = 2080;
          unsigned int v21 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: (%s), Looking in default mode instead.",  buf,  0x1Cu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    return (uint64_t *)sub_554D0(v5, a2, 1768776806LL);
  }

  return result;
}

uint64_t *sub_5569C(void *a1, unsigned int a2)
{
  uint64_t v4 = sub_52918(a1 + 11, a2);
  if (v4) {
    return v4 + 3;
  }
  uint64_t v4 = sub_52918(a1 + 6, a2);
  if (v4) {
    return v4 + 3;
  }
  uint64_t v6 = sub_52918(a1 + 16, a2);
  if (v6) {
    return v6 + 3;
  }
  else {
    return (uint64_t *)&unk_48F280;
  }
}

void sub_55700(void *a1, const void **a2, const void **a3, int a4)
{
  if (a2 == a3)
  {
    a1[1] = 0LL;
    a1[2] = 0LL;
    *a1 = 0LL;
    int v5 = operator new(8uLL);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = v5 + 1;
    a1[2] = v5 + 1;
    sub_126284(v5, 0LL);
    a1[1] = v6;
  }

  else if (a4 == 1668246894)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    sub_8D204(a1, a2, a3, a3 - a2);
  }

  else
  {
    uint64_t v7 = *a2;
    if (*a2) {
      CFRetain(*a2);
    }
    a1[1] = 0LL;
    a1[2] = 0LL;
    *a1 = 0LL;
    unsigned int v8 = operator new(8uLL);
    *a1 = v8;
    a1[1] = v8;
    BOOL v9 = v8 + 1;
    a1[2] = v8 + 1;
    sub_126284(v8, v7);
    a1[1] = v9;
    if (v7) {
      CFRelease(v7);
    }
  }

void sub_55838( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFComparisonResult sub_5586C(const __CFString *cf, const __CFString **a2)
{
  if (cf)
  {
    CFRetain(cf);
    uint64_t v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }

  else
  {
    uint64_t v4 = *a2;
    if (!*a2) {
      return 0LL;
    }
  }

  CFRetain(v4);
  if (cf) {
    CFComparisonResult v5 = CFStringCompare(cf, v4, 0LL);
  }
  else {
    CFComparisonResult v5 = kCFCompareLessThan;
  }
  CFRelease(v4);
  if (cf) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t sub_55914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = a2 + 40;
  if (a5) {
    sub_2D4FE0(v27, v7, a3);
  }
  else {
    sub_55A98(v27, v7, a3);
  }
  if (!v28) {
    return 1LL;
  }
  sub_86550((uint64_t *)&v25, (uint64_t)v27);
  v24[0] = 0LL;
  v24[1] = 0LL;
  int v23 = v24;
  sub_1F70C0((uint64_t)v29, *(void **)a1, (void *)(a1 + 8), v25, &v26, (uint64_t)&v23, (uint64_t)v24);
  unsigned int v8 = v23;
  if (v23 == v24)
  {
LABEL_23:
    uint64_t v21 = 1LL;
  }

  else
  {
    uint64_t v11 = *(void *)(a4 + 8);
    uint64_t v10 = a4 + 8;
    uint64_t v9 = v11;
    if (v11)
    {
      while (1)
      {
        unsigned int v12 = *((_DWORD *)v8 + 7);
        uint64_t v13 = v10;
        uint64_t v14 = v9;
        do
        {
          unsigned int v15 = *(_DWORD *)(v14 + 28);
          BOOL v16 = v15 >= v12;
          if (v15 >= v12) {
            int v17 = (uint64_t *)v14;
          }
          else {
            int v17 = (uint64_t *)(v14 + 8);
          }
          if (v16) {
            uint64_t v13 = v14;
          }
          uint64_t v14 = *v17;
        }

        while (*v17);
        if (v13 == v10 || *(_DWORD *)(v13 + 28) > v12) {
          break;
        }
        __int16 v18 = v8[1];
        if (v18)
        {
          do
          {
            int v19 = (void **)v18;
            __int16 v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            int v19 = (void **)v8[2];
            BOOL v20 = *v19 == v8;
            unsigned int v8 = v19;
          }

          while (!v20);
        }

        unsigned int v8 = v19;
        if (v19 == v24) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v21 = 0LL;
  }

  sub_32C8C(v24[0]);
  sub_32C8C(v26);
  if (v28) {
    sub_32C8C((void *)v27[1]);
  }
  return v21;
}

void sub_55A64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, char a18)
{
  if (a18) {
    sub_32C8C(a16);
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_55A98(_BYTE *result, uint64_t a2, uint64_t a3)
{
  CFComparisonResult v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = a2 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a3;
      else {
        uint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
  }

  if ((_DWORD)a3 == 1768776806)
  {
    uint64_t *result = 0;
    result[24] = 0;
  }

  else
  {
    uint64_t v11 = sub_138E8(20);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      unsigned int v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a3);
          if (v15 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          int v17 = "RoutingTypes.cpp";
          __int16 v18 = 1024;
          int v19 = 2042;
          __int16 v20 = 2080;
          uint64_t v21 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    return (_BYTE *)sub_55A98(v5, a2, 1768776806LL);
  }

  return result;
}

uint64_t sub_55C64(uint64_t result)
{
  if (*(void *)(result + 16) && *(void *)(result + 40))
  {
    __int128 v1 = (os_log_t *)sub_138E8(13);
    int v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        CFComparisonResult v5 = "RoutingTypes.cpp";
        __int16 v6 = 1024;
        int v7 = 2944;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  return result;
}

void sub_55D60(_Unwind_Exception *exception_object)
{
}

uint64_t sub_55D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 79))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 78);
    unsigned int v10 = v9 >> 8;
  }

  else
  {
LABEL_14:
    if ((_DWORD)a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }

    else
    {
      uint64_t v11 = sub_138E8(20);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        unsigned int v12 = *(os_log_s **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, a2);
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 2011;
            __int16 v21 = 2080;
            int v22 = v13;
            _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.",  buf,  0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      LOWORD(v9) = sub_55D7C(a1, 1768776806LL);
      unsigned int v10 = BYTE1(v9);
    }
  }

  return v9 | (v10 << 8);
}

void sub_55F18(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_116394(v3 + 2);
        operator delete(v3);
        int v3 = v5;
      }

      while (v5 != a1);
    }
  }

uint64_t sub_55F88(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_11E910((uint64_t **)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_55FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 72;
  uint64_t result = sub_5603C(a1, *(unsigned int *)(*(void *)(a2 + 80) + 16LL), *(_DWORD *)(a2 + 60));
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5 == v3) {
    return *(unsigned int *)(v5 + 16);
  }
  uint64_t v6 = *(void *)(a2 + 80);
  while (*(_DWORD *)(v6 + 16) != (_DWORD)result)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v3) {
      return *(unsigned int *)(v5 + 16);
    }
  }

  if (v6 == v3) {
    return *(unsigned int *)(v5 + 16);
  }
  return result;
}

uint64_t sub_5603C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((sub_56120() == 2
     || sub_56120() == 3
     || sub_56120() == 4
     || sub_56120() == 5
     || sub_56120() == 195)
    && sub_56120() != 195)
  {
    uint64_t v6 = *(void *)(a1 + 568);
    if (v6)
    {
      uint64_t v7 = a1 + 568;
      do
      {
        unsigned int v8 = *(_DWORD *)(v6 + 28);
        BOOL v9 = v8 >= a3;
        if (v8 >= a3) {
          unsigned int v10 = (uint64_t *)v6;
        }
        else {
          unsigned int v10 = (uint64_t *)(v6 + 8);
        }
        if (v9) {
          uint64_t v7 = v6;
        }
        uint64_t v6 = *v10;
      }

      while (*v10);
      if (v7 != a1 + 568 && *(_DWORD *)(v7 + 28) <= a3)
      {
        if ((_DWORD)a2 == 1836021360) {
          unsigned int v11 = 1835232630;
        }
        else {
          unsigned int v11 = a2;
        }
        if ((_DWORD)a2 == 1768776806) {
          return 1835230310LL;
        }
        else {
          return v11;
        }
      }
    }
  }

  return a2;
}

uint64_t sub_56120()
{
  if (byte_48CDB0 == 1) {
    return dword_48CDAC;
  }
  byte_48CDB0 = 1;
  uint64_t v1 = MGGetProductType();
  if (v1 > 2159747552LL)
  {
    if (v1 <= 3196805750LL)
    {
      if (v1 > 2688879998LL)
      {
        if (v1 <= 2940697644LL)
        {
          if (v1 > 2781508712LL)
          {
            if (v1 <= 2797549162LL)
            {
              switch(v1)
              {
                case 2781508713LL:
                  uint64_t result = 6LL;
                  goto LABEL_481;
                case 2793418701LL:
                  uint64_t result = 19LL;
                  goto LABEL_481;
                case 2795618603LL:
                  uint64_t result = 42LL;
                  goto LABEL_481;
              }

              goto LABEL_480;
            }

            if (v1 > 2880863277LL)
            {
              if (v1 != 2880863278LL)
              {
                if (v1 == 2903084588LL)
                {
                  uint64_t result = 85LL;
                  goto LABEL_481;
                }

                goto LABEL_480;
              }

              goto LABEL_367;
            }

            if (v1 == 2797549163LL)
            {
              uint64_t result = 113LL;
              goto LABEL_481;
            }

            uint64_t v2 = 2823174122LL;
LABEL_289:
            if (v1 == v2)
            {
              uint64_t result = 109LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 > 2722529671LL)
          {
            switch(v1)
            {
              case 2722529672LL:
                uint64_t result = 28LL;
                goto LABEL_481;
              case 2730762296LL:
                uint64_t result = 112LL;
                goto LABEL_481;
              case 2751865418LL:
                uint64_t result = 143LL;
                goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 == 2688879999LL)
          {
            uint64_t result = 39LL;
            goto LABEL_481;
          }

          if (v1 != 2692844695LL)
          {
            if (v1 == 2702125347LL)
            {
              uint64_t result = 3LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

LABEL_389:
          uint64_t result = 197LL;
          goto LABEL_481;
        }

        if (v1 <= 3101941569LL)
        {
          if (v1 <= 2959111091LL)
          {
            switch(v1)
            {
              case 2940697645LL:
                uint64_t result = 38LL;
                goto LABEL_481;
              case 2941181571LL:
                uint64_t result = 41LL;
                goto LABEL_481;
              case 2943112657LL:
                uint64_t result = 149LL;
                goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 > 3001488777LL)
          {
            if (v1 == 3001488778LL)
            {
              uint64_t result = 34LL;
              goto LABEL_481;
            }

            if (v1 != 3054476161LL) {
              goto LABEL_480;
            }
            goto LABEL_323;
          }

          if (v1 == 2959111092LL)
          {
            uint64_t result = 95LL;
            goto LABEL_481;
          }

          if (v1 == 2979575960LL)
          {
            uint64_t result = 155LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        if (v1 <= 3133873108LL)
        {
          if (v1 != 3101941570LL)
          {
            if (v1 == 3104290450LL) {
              goto LABEL_344;
            }
            uint64_t v8 = 3128362815LL;
            goto LABEL_260;
          }

          goto LABEL_351;
        }

        if (v1 <= 3184375230LL)
        {
          if (v1 == 3133873109LL)
          {
            uint64_t result = 62LL;
            goto LABEL_481;
          }

          if (v1 == 3143587592LL)
          {
            uint64_t result = 166LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        if (v1 == 3184375231LL)
        {
LABEL_397:
          uint64_t result = 77LL;
          goto LABEL_481;
        }

        uint64_t v7 = 3196158497LL;
        goto LABEL_373;
      }

      if (v1 <= 2458172801LL)
      {
        if (v1 > 2309863437LL)
        {
          if (v1 <= 2385671068LL)
          {
            if (v1 == 2309863438LL)
            {
              uint64_t result = 37LL;
              goto LABEL_481;
            }

            if (v1 == 2311900306LL)
            {
              uint64_t result = 14LL;
              goto LABEL_481;
            }

            if (v1 != 2336512887LL) {
              goto LABEL_480;
            }
            goto LABEL_212;
          }

          if (v1 > 2445473384LL)
          {
            if (v1 == 2445473385LL)
            {
              uint64_t result = 124LL;
              goto LABEL_481;
            }

            if (v1 == 2454275343LL)
            {
              uint64_t result = 63LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 != 2385671069LL)
          {
            if (v1 == 2418348558LL)
            {
              uint64_t result = 135LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

LABEL_310:
          uint64_t result = 50LL;
          goto LABEL_481;
        }

        if (v1 > 2262113698LL)
        {
          if (v1 != 2262113699LL)
          {
            if (v1 == 2270970153LL)
            {
              uint64_t result = 21LL;
              goto LABEL_481;
            }

            if (v1 != 2288107369LL) {
              goto LABEL_480;
            }
            goto LABEL_396;
          }

          goto LABEL_390;
        }

        if (v1 == 2159747553LL)
        {
          uint64_t result = 26LL;
          goto LABEL_481;
        }

        if (v1 == 2162679683LL)
        {
LABEL_383:
          uint64_t result = 122LL;
          goto LABEL_481;
        }

        uint64_t v7 = 2236272848LL;
LABEL_373:
        if (v1 != v7) {
          goto LABEL_480;
        }
LABEL_374:
        uint64_t result = 87LL;
        goto LABEL_481;
      }

      if (v1 > 2619317133LL)
      {
        if (v1 <= 2628394913LL)
        {
          if (v1 != 2619317134LL)
          {
            if (v1 != 2622433984LL)
            {
              if (v1 == 2625074843LL)
              {
                uint64_t result = 161LL;
                goto LABEL_481;
              }

              goto LABEL_480;
            }

            goto LABEL_385;
          }

          goto LABEL_395;
        }

        if (v1 <= 2644487443LL)
        {
          if (v1 == 2628394914LL) {
            goto LABEL_323;
          }
          uint64_t v5 = 2634105757LL;
          goto LABEL_109;
        }

        if (v1 == 2644487444LL)
        {
          uint64_t result = 92LL;
          goto LABEL_481;
        }

        if (v1 != 2673319456LL) {
          goto LABEL_480;
        }
LABEL_360:
        uint64_t result = 73LL;
        goto LABEL_481;
      }

      if (v1 > 2516717267LL)
      {
        if (v1 != 2516717268LL)
        {
          if (v1 == 2566016329LL)
          {
            uint64_t result = 94LL;
            goto LABEL_481;
          }

          if (v1 != 2614323575LL) {
            goto LABEL_480;
          }
          goto LABEL_310;
        }

        goto LABEL_360;
      }

      if (v1 == 2458172802LL) {
        goto LABEL_374;
      }
      if (v1 == 2468178735LL) {
        goto LABEL_384;
      }
      if (v1 != 2487868872LL) {
        goto LABEL_480;
      }
LABEL_392:
      uint64_t result = 107LL;
      goto LABEL_481;
    }

    if (v1 <= 3711192743LL)
    {
      if (v1 <= 3540156651LL)
      {
        if (v1 <= 3300281075LL)
        {
          if (v1 <= 3228373940LL)
          {
            if (v1 == 3196805751LL)
            {
              uint64_t result = 7LL;
              goto LABEL_481;
            }

            if (v1 == 3215673114LL)
            {
              uint64_t result = 75LL;
              goto LABEL_481;
            }

            uint64_t v6 = 3217792190LL;
            goto LABEL_147;
          }

          if (v1 == 3228373941LL) {
            goto LABEL_391;
          }
          if (v1 != 3241053352LL)
          {
            if (v1 == 3242623367LL)
            {
              uint64_t result = 15LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_392;
        }

        if (v1 <= 3397214290LL)
        {
          if (v1 == 3300281076LL)
          {
            uint64_t result = 54LL;
            goto LABEL_481;
          }

          if (v1 == 3348380076LL)
          {
            uint64_t result = 4LL;
            goto LABEL_481;
          }

          if (v1 != 3361025853LL) {
            goto LABEL_480;
          }
          goto LABEL_388;
        }

        if (v1 > 3417429876LL)
        {
          if (v1 != 3417429877LL)
          {
            if (v1 == 3455223061LL)
            {
              uint64_t result = 83LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_379;
        }

        if (v1 == 3397214291LL)
        {
          uint64_t result = 74LL;
          goto LABEL_481;
        }

        if (v1 == 3402870384LL)
        {
          uint64_t result = 70LL;
          goto LABEL_481;
        }

    v168 = (int *)a2[24];
    v167 = (int *)a2[25];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v168) >> 3) > 1)
    {
      v452 = sub_138E8(13);
      v453 = sub_8C7D4(1, *(void **)v452, *(void *)(v452 + 8));
      v454 = (os_log_s *)objc_claimAutoreleasedReturnValue(v453);
      v455 = v454;
      if (v454 && os_log_type_enabled(v454, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 830;
        _os_log_impl( &dword_0,  v455,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): !!! can only support single thermal volume command",  buf,  0x12u);
      }

      v445 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v445, "!!! can only support single thermal volume command");
      goto LABEL_803;
    }

    if (v168 != v167)
    {
      if (!*(void *)v168)
      {
        v456 = sub_138E8(13);
        v457 = sub_8C7D4(1, *(void **)v456, *(void *)(v456 + 8));
        v458 = (os_log_s *)objc_claimAutoreleasedReturnValue(v457);
        v459 = v458;
        if (v458 && os_log_type_enabled(v458, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 835;
          _os_log_impl( &dword_0,  v459,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        v445 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v445, "Precondition failure.");
        goto LABEL_803;
      }

      v169 = (*(uint64_t (**)(void))(**(void **)v168 + 24LL))(*(void *)v168);
      v170 = sub_19556C(a1, v169, v168[4]);
      if (v170)
      {
        v171 = *(void (****)(std::string *__return_ptr, void, std::string *))v168;
        sub_195658(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
        if (*(void *)&buf[8])
        {
          v172 = (unint64_t *)(*(void *)&buf[8] + 16LL);
          do
            v173 = __ldxr(v172);
          while (__stxr(v173 + 1, v172));
        }

        (**v171)(&__dst, v171, &__p);
        v174 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0])
        {
          v466 = __dst.__r_.__value_.__r.__words[0];
          v175 = (std::__shared_weak_count *)operator new(0x20uLL);
          v176 = v175;
          v175->__shared_owners_ = 0LL;
          v177 = (unint64_t *)&v175->__shared_owners_;
          v175->__vftable = (std::__shared_weak_count_vtbl *)&off_473DC8;
          v175->__shared_weak_owners_ = 0LL;
          v175[1].__vftable = (std::__shared_weak_count_vtbl *)v174;
          *(void *)&v178 = v466;
          *((void *)&v178 + 1) = v175;
          v467 = v178;
          v179 = *(void *)(v174 + 16);
          if (!v179 || *(void *)(v179 + 8) == -1LL)
          {
            do
              v180 = __ldxr(v177);
            while (__stxr(v180 + 1, v177));
            v181 = (unint64_t *)&v175->__shared_weak_owners_;
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
            v183 = *(std::__shared_weak_count **)(v174 + 16);
            *(void *)(v174 + 8) = v174;
            *(void *)(v174 + 16) = v176;
            if (v183) {
              std::__shared_weak_count::__release_weak(v183);
            }
            do
              v184 = __ldaxr(v177);
            while (__stlxr(v184 - 1, v177));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }

          v185 = v467;
        }

        else
        {
          v185 = 0uLL;
        }

        __dst.__r_.__value_.__r.__words[0] = 0LL;
        v193 = *(std::__shared_weak_count **)(a1 + 1064);
        *(_OWORD *)(a1 + 1056) = v185;
        if (v193)
        {
          v194 = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldaxr(v194);
          while (__stlxr(v195 - 1, v194));
          if (!v195)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }

          v196 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0LL;
          if (v196) {
            (*(void (**)(std::string::size_type))(*(void *)v196 + 8LL))(v196);
          }
        }

        else
        {
          __dst.__r_.__value_.__r.__words[0] = 0LL;
        }

        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        v197 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          v198 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }

        v200 = *(void *)(a1 + 1056);
        v201 = (*(uint64_t (**)(uint64_t))(*(void *)v170 + 152LL))(v170);
        v202 = (*(uint64_t (**)(uint64_t))(*(void *)v170 + 144LL))(v170);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v200 + 176LL))( v200,  v201,  v202,  0LL,  0LL);
        v203 = *(id *)sub_138E8(24);
        if (v203)
        {
          v187 = (os_log_s *)v203;
          if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
          {
            v204 = (*(uint64_t (**)(void))(**(void **)v168 + 24LL))(*(void *)v168);
            v205 = &__dst;
            sub_2CA1C(&__dst, v204);
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              v205 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            v206 = (*(uint64_t (**)(uint64_t))(*(void *)v170 + 144LL))(v170);
            v207 = (*(uint64_t (**)(void))(**(void **)(a1 + 1056) + 136LL))(*(void *)(a1 + 1056));
            v208 = "Decibel";
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 841;
            *(_WORD *)&buf[18] = 2080;
            if (v207 == 1935895666) {
              v208 = "Scalar";
            }
            *(void *)&buf[20] = v205;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v206;
            *(_WORD *)&buf[44] = 2080;
            *(void *)&buf[46] = v208;
            v190 = "%25s:%-5d ***** VolumeCommand: created thermal volume command for processor type '%s' in dspchain: %p"
                   " instance id: %u volume unit type: %s";
            v191 = v187;
            v192 = 54;
LABEL_359:
            _os_log_impl(&dword_0, v191, OS_LOG_TYPE_DEFAULT, v190, buf, v192);
          }

          goto LABEL_361;
        }

LABEL_480:
        uint64_t result = 0LL;
        goto LABEL_481;
      }

      if (v1 > 3637438249LL)
      {
        if (v1 <= 3670339450LL)
        {
          if (v1 == 3637438250LL)
          {
            uint64_t result = 52LL;
            goto LABEL_481;
          }

          if (v1 != 3645319985LL)
          {
            if (v1 == 3663011141LL)
            {
              uint64_t result = 156LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_386;
        }

        if (v1 > 3683904381LL)
        {
          if (v1 == 3683904382LL)
          {
            uint64_t result = 137LL;
            goto LABEL_481;
          }

          uint64_t v4 = 3707345671LL;
          goto LABEL_366;
        }

        if (v1 == 3670339451LL) {
          goto LABEL_240;
        }
        uint64_t v5 = 3677894691LL;
LABEL_109:
        if (v1 == v5)
        {
          uint64_t result = 102LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }

      if (v1 <= 3585085678LL)
      {
        if (v1 == 3540156652LL)
        {
          uint64_t result = 93LL;
          goto LABEL_481;
        }

        if (v1 != 3543203160LL)
        {
          if (v1 == 3571532206LL)
          {
            uint64_t result = 151LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        goto LABEL_240;
      }

      if (v1 == 3585085679LL)
      {
        uint64_t result = 10LL;
        goto LABEL_481;
      }

      if (v1 != 3599094683LL)
      {
        uint64_t v7 = 3636345305LL;
        goto LABEL_373;
      }
    }

    else
    {
      if (v1 > 3885279869LL)
      {
        if (v1 > 4068102501LL)
        {
          if (v1 <= 4231109336LL)
          {
            switch(v1)
            {
              case 4068102502LL:
                uint64_t result = 168LL;
                goto LABEL_481;
              case 4172444931LL:
                uint64_t result = 132LL;
                goto LABEL_481;
              case 4201643249LL:
                uint64_t result = 35LL;
                goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 > 4240173201LL)
          {
            if (v1 == 4240173202LL)
            {
              uint64_t result = 2LL;
              goto LABEL_481;
            }

            if (v1 == 4242862982LL)
            {
              uint64_t result = 80LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 != 4231109337LL)
          {
            if (v1 == 4232256925LL)
            {
              uint64_t result = 114LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_231;
        }

        if (v1 <= 3953847431LL)
        {
          if (v1 == 3885279870LL)
          {
            uint64_t result = 32LL;
            goto LABEL_481;
          }

          if (v1 != 3933865620LL)
          {
            if (v1 == 3933982784LL)
            {
              uint64_t result = 53LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_240;
        }

        if (v1 > 4055323050LL)
        {
          if (v1 == 4055323051LL)
          {
            uint64_t result = 58LL;
            goto LABEL_481;
          }

          if (v1 == 4067129264LL)
          {
            uint64_t result = 139LL;
            goto LABEL_481;
          }
        }

        else
        {
          if (v1 == 3953847432LL)
          {
            uint64_t result = 170LL;
            goto LABEL_481;
          }

          if (v1 == 4025247511LL)
          {
            uint64_t result = 133LL;
            goto LABEL_481;
          }
        }

        goto LABEL_480;
      }

      if (v1 <= 3825599859LL)
      {
        if (v1 <= 3767261005LL)
        {
          switch(v1)
          {
            case 3711192744LL:
              uint64_t result = 84LL;
              goto LABEL_481;
            case 3742999858LL:
              uint64_t result = 159LL;
              goto LABEL_481;
            case 3743999268LL:
              uint64_t result = 24LL;
              goto LABEL_481;
          }

          goto LABEL_480;
        }

        if (v1 == 3767261006LL)
        {
          uint64_t result = 153LL;
          goto LABEL_481;
        }

        if (v1 != 3801472101LL)
        {
          if (v1 == 3819635030LL)
          {
            uint64_t result = 160LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        goto LABEL_302;
      }

      if (v1 <= 3863625341LL)
      {
        switch(v1)
        {
          case 3825599860LL:
            uint64_t result = 20LL;
            goto LABEL_481;
          case 3839750255LL:
            uint64_t result = 169LL;
            goto LABEL_481;
          case 3856877970LL:
            uint64_t result = 110LL;
            goto LABEL_481;
        }

        goto LABEL_480;
      }

      if (v1 > 3865922941LL)
      {
        if (v1 == 3865922942LL)
        {
          uint64_t result = 56LL;
          goto LABEL_481;
        }

        if (v1 == 3867318491LL)
        {
          uint64_t result = 162LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }

      if (v1 != 3863625342LL)
      {
        if (v1 == 3865897231LL)
        {
          uint64_t result = 79LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }
    }

    uint64_t result = 97LL;
    goto LABEL_481;
  }

  if (v1 > 1325975681)
  {
    if (v1 > 1737882205)
    {
      if (v1 > 2032616840)
      {
        if (v1 <= 2089455187)
        {
          if (v1 <= 2080700390)
          {
            if (v1 != 2032616841)
            {
              if (v1 == 2048538371)
              {
                uint64_t result = 60LL;
                goto LABEL_481;
              }

              if (v1 == 2078329141)
              {
                uint64_t result = 31LL;
                goto LABEL_481;
              }

              goto LABEL_480;
            }

            goto LABEL_394;
          }

          if (v1 > 2084894488)
          {
            if (v1 == 2084894489)
            {
              uint64_t result = 164LL;
              goto LABEL_481;
            }

            if (v1 == 2085054105)
            {
              uint64_t result = 158LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          if (v1 == 2080700391)
          {
            uint64_t result = 46LL;
            goto LABEL_481;
          }

          if (v1 != 2081274472) {
            goto LABEL_480;
          }
          goto LABEL_383;
        }

        if (v1 > 2132302343)
        {
          if (v1 <= 2144123135)
          {
            if (v1 == 2132302344)
            {
              uint64_t result = 148LL;
              goto LABEL_481;
            }

            uint64_t v6 = 2141052862LL;
LABEL_147:
            if (v1 != v6) {
              goto LABEL_480;
            }
            goto LABEL_240;
          }

          if (v1 != 2144123136)
          {
            uint64_t v9 = 2158787296LL;
LABEL_377:
            if (v1 == v9)
            {
              uint64_t result = 69LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

LABEL_379:
          uint64_t result = 194LL;
          goto LABEL_481;
        }

        if (v1 != 2089455188)
        {
          if (v1 != 2095883268)
          {
            if (v1 != 2103978418) {
              goto LABEL_480;
            }
            goto LABEL_265;
          }

          goto LABEL_389;
        }

  if (v483) {
    std::__shared_weak_count::__release_weak(v483);
  }
  v209 = sub_138E8(8);
  if ((*(_BYTE *)(v209 + 8) & 1) != 0)
  {
    v210 = *(os_log_s **)v209;
    if (*(void *)v209)
    {
      if (os_log_type_enabled(*(os_log_t *)v209, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "RoutingManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 3416;
        _os_log_impl( &dword_0,  v210,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created route MultiRouteProcesingInfo:",  (uint8_t *)__p,  0x12u);
      }
    }
  }

  v211 = (uint64_t)v499;
  v212 = v500;
  if (v499 != (void *)v500)
  {
    do
    {
      v213 = sub_138E8(8);
      if ((*(_BYTE *)(v213 + 8) & 1) != 0)
      {
        v214 = *(os_log_s **)v213;
        if (*(void *)v213)
        {
          if (os_log_type_enabled(*(os_log_t *)v213, OS_LOG_TYPE_DEBUG))
          {
            sub_1AD4D8((std::string *)v532, v211);
            v215 = v532[23] >= 0 ? v532 : *(_BYTE **)v532;
            LODWORD(__p[0]) = 136315650;
            *(void **)((char *)__p + 4) = "RoutingManager.cpp";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 3419;
            WORD1(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 4) = v215;
            _os_log_impl(&dword_0, v214, OS_LOG_TYPE_DEBUG, "%25s:%-5d - %s.", (uint8_t *)__p, 0x1Cu);
            if ((v532[23] & 0x80000000) != 0) {
              operator delete(*(void **)v532);
            }
          }
        }
      }

      v211 += 216LL;
    }

    while (v211 != v212);
  }

  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    v464 = (os_log_t *)sub_138E8(13);
    v465 = *v464;
    if (*v464 && os_log_type_enabled(*v464, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "RoutingManager.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 3088;
      _os_log_impl( &dword_0,  v465,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
    }

      sub_C1D5C((void *)*v184, 0, 0);
      if (!HIDWORD(v189) && (_DWORD)v189 == 1987276900)
      {
        sub_772C4(v539, *v184, 16000.0);
        v215 = v539[0];
        sub_32C8C(*(void **)&v539[16]);
        v216 = sub_138E8(2);
        if ((*(_BYTE *)(v216 + 8) & 1) != 0)
        {
          v217 = *(id *)v216;
          if (v217)
          {
            v218 = (os_log_s *)v217;
            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
            {
              sub_33464(&v552, (unsigned int *)&v535);
              v219 = &v552;
              if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v219 = (std::string *)v552.__r_.__value_.__r.__words[0];
              }
              v220 = "";
              if (!v215) {
                v220 = " not";
              }
              *(_DWORD *)v539 = 136315906;
              *(void *)&v539[4] = v188;
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4214;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v219;
              *(_WORD *)&v539[28] = 2080;
              *(void *)&v539[30] = v220;
              _os_log_impl( &dword_0,  v218,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d [%s] VAD does%s need to change sample rates",  v539,  0x26u);
            }
          }
        }

        if (v215)
        {
          v221 = sub_138E8(2);
          v222 = sub_138E8(35);
          v223 = 0;
          v224 = 0LL;
          *(void *)v539 = 0x100000002LL;
          v225 = *(void *)(v221 + 8);
          while (1)
          {
            v226 = *(int *)&v539[4 * v224];
            v227 = v223;
            if (((v225 & v226) != 0) != ((*(void *)(v222 + 8) & v226) != 0)) {
              break;
            }
            v223 = 1;
            v224 = 1LL;
            if ((v227 & 1) != 0) {
              goto LABEL_398;
            }
          }

          if ((v225 & v226) == 0) {
            v221 = v222;
          }
LABEL_398:
          v228 = sub_138E8(36);
          v229 = 0;
          v230 = 0LL;
          *(void *)v539 = 0x100000002LL;
          v231 = *(void *)(v221 + 8);
          while (1)
          {
            v232 = *(int *)&v539[4 * v230];
            v233 = v229;
            if (((v231 & v232) != 0) != ((*(void *)(v228 + 8) & v232) != 0)) {
              break;
            }
            v229 = 1;
            v230 = 1LL;
            if ((v233 & 1) != 0) {
              goto LABEL_404;
            }
          }

          if ((v231 & v232) == 0) {
            v221 = v228;
          }
LABEL_404:
          v234 = *(id *)v221;
          v235 = v234;
          if (v234)
          {
            v236 = (os_log_s *)v234;
            if (os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v539 = 136315394;
              *(void *)&v539[4] = v188;
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4218;
              _os_log_impl( &dword_0,  v236,  OS_LOG_TYPE_INFO,  "%25s:%-5d Borealis is running with no shared HW, setting it to 16k",  v539,  0x12u);
            }
          }

          v237 = sub_71A5C((uint64_t)&v511, 0x76737064u, 0);
          if (&v512 == (uint64_t **)v237)
          {
            v478 = sub_138E8(13);
            v479 = sub_8C7D4(1, *(void **)v478, *(void *)(v478 + 8));
            v480 = (void *)objc_claimAutoreleasedReturnValue(v479);
            v481 = v480;
            if (v480)
            {
              v482 = v480;
              if (os_log_type_enabled(v482, OS_LOG_TYPE_ERROR))
              {
                sub_33464(&v552, (unsigned int *)&v535);
                v483 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                     ? &v552
                     : (std::string *)v552.__r_.__value_.__r.__words[0];
                *(_DWORD *)v539 = 136315650;
                *(void *)&v539[4] = v188;
                *(_WORD *)&v539[12] = 1024;
                *(_DWORD *)&v539[14] = 4221;
                *(_WORD *)&v539[18] = 2080;
                *(void *)&v539[20] = v483;
                _os_log_impl( &dword_0,  v482,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unable to find device %s",  v539,  0x1Cu);
              }
            }

            v484 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v484, "Unable to find device %s");
          }

          v238 = v237;
          if ((*(_DWORD *)(v237 + 36) - 5) >= 0xFFFFFFFE)
          {
            v240 = sub_138E8(2);
            if ((*(_BYTE *)(v240 + 8) & 1) != 0)
            {
              v241 = *(id *)v240;
              if (v241)
              {
                v242 = (os_log_s *)v241;
                if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v539 = 136315394;
                  *(void *)&v539[4] = v188;
                  *(_WORD *)&v539[12] = 1024;
                  *(_DWORD *)&v539[14] = 4233;
                  _os_log_impl( &dword_0,  v242,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Stopping Speech Detection VAD to change sample rate",  v539,  0x12u);
                }
              }
            }

            sub_BBFD0((unint64_t *)*v184);
            *(_DWORD *)(v238 + 36) = 2;
            v243 = v515;
            if ((unint64_t)v515 >= v516)
            {
              v260 = ((char *)v515 - (_BYTE *)v514) >> 3;
              v261 = (uint64_t)(v516 - (void)v514) >> 2;
              if (v261 <= v260 + 1) {
                v261 = v260 + 1;
              }
              else {
                v262 = v261;
              }
              if (v262) {
                v262 = (unint64_t)sub_7DC90(v262);
              }
              else {
                v263 = 0LL;
              }
              v264 = (uint64_t *)(v262 + 8 * v260);
              *v264 = *v184;
              v244 = v264 + 1;
              v266 = (char *)v514;
              v265 = (char *)v515;
              if (v515 != v514)
              {
                do
                {
                  v267 = *((void *)v265 - 1);
                  v265 -= 8;
                  *--v264 = v267;
                }

                while (v265 != v266);
                v265 = (char *)v514;
              }

              v514 = v264;
              v515 = v244;
              v516 = v262 + 8 * v263;
              if (v265) {
                operator delete(v265);
              }
            }

            else
            {
              *v515 = *v184;
              v244 = v243 + 1;
            }

            v515 = v244;
            if ((unint64_t)v492 >= v500)
            {
              v268 = v492 - v491;
              v269 = v268 + 1;
              if ((unint64_t)(v268 + 1) >> 61) {
LABEL_827:
              }
                sub_7A87C();
              else {
                v270 = v269;
              }
              if (v270) {
                v270 = (unint64_t)sub_7DC90(v270);
              }
              else {
                v271 = 0LL;
              }
              v272 = (uint64_t *)(v270 + 8 * v268);
              *v272 = *v184;
              v239 = v272 + 1;
              if (v492 == v491)
              {
                v273 = v491;
              }

              else
              {
                v273 = v491;
                v274 = v492;
                do
                {
                  v275 = *--v274;
                  *--v272 = v275;
                }

                while (v274 != v491);
              }

              v500 = v270 + 8 * v271;
              if (v273) {
                operator delete(v273);
              }
              v491 = v272;
            }

            else
            {
              *v492 = *v184;
              v239 = v492 + 1;
            }
          }

          else
          {
            v239 = v492;
          }

          v492 = v239;
          sub_77164(*v184, 16000.0);
        }

        v276 = *v184;
        strcpy(v539, "rsdpbolg");
        v539[9] = 0;
        *(_WORD *)&v539[10] = 0;
        if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v276 + 32LL))(v276, v539))
        {
          v277 = *v184;
          strcpy(v539, "rsdpbolg");
          v539[9] = 0;
          *(_WORD *)&v539[10] = 0;
          sub_2548AC((uint64_t)&v519, v277);
          v278 = v519;
          if ((_DWORD)v519 || !v521)
          {
            v485 = __cxa_allocate_exception(0x10uLL);
            *(void *)v485 = &off_4865A0;
            v485[2] = v278;
          }

          if (v520 != 16000.0)
          {
            v279 = *v184;
            strcpy(v539, "rsdpbolg");
            v539[9] = 0;
            *(_WORD *)&v539[10] = 0;
            v280 = sub_2F4F68(v279, (uint64_t)v539, 0LL, 0LL, 8LL, (uint64_t)&unk_4021A0);
            if (v280)
            {
              v281 = v280;
              v282 = __cxa_allocate_exception(0x10uLL);
              *(void *)v282 = &off_4865A0;
              v282[2] = v281;
            }
          }
        }
      }

LABEL_388:
        uint64_t result = 105LL;
        goto LABEL_481;
      }

      if (v1 <= 1878257789)
      {
        if (v1 <= 1770142588)
        {
          if (v1 == 1737882206)
          {
            uint64_t result = 116LL;
            goto LABEL_481;
          }

          if (v1 != 1744899922)
          {
            if (v1 == 1756509290)
            {
              uint64_t result = 144LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_240;
        }

        if (v1 == 1770142589)
        {
          uint64_t result = 163LL;
          goto LABEL_481;
        }

        if (v1 == 1834147427) {
          goto LABEL_323;
        }
        uint64_t v10 = 1868379043LL;
LABEL_350:
        if (v1 != v10) {
          goto LABEL_480;
        }
        goto LABEL_351;
      }

      if (v1 > 1990293941)
      {
        if (v1 <= 2021146988)
        {
          if (v1 == 1990293942)
          {
            uint64_t result = 140LL;
            goto LABEL_481;
          }

          uint64_t v3 = 2001966017LL;
LABEL_172:
          if (v1 != v3) {
            goto LABEL_480;
          }
          goto LABEL_302;
        }

        if (v1 == 2021146989)
        {
          uint64_t result = 18LL;
          goto LABEL_481;
        }

        uint64_t v10 = 2023824667LL;
        goto LABEL_350;
      }

      if (v1 == 1878257790)
      {
        uint64_t result = 81LL;
        goto LABEL_481;
      }

      if (v1 == 1895344378)
      {
        uint64_t result = 86LL;
        goto LABEL_481;
      }

      if (v1 != 1908832379) {
        goto LABEL_480;
      }
LABEL_231:
      uint64_t result = 196LL;
      goto LABEL_481;
    }

    if (v1 <= 1517755654)
    {
      if (v1 > 1402208363)
      {
        if (v1 <= 1415625991)
        {
          switch(v1)
          {
            case 1402208364LL:
              uint64_t result = 130LL;
              goto LABEL_481;
            case 1408738134LL:
              uint64_t result = 150LL;
              goto LABEL_481;
            case 1412429328LL:
              uint64_t result = 65LL;
              goto LABEL_481;
          }
        }

        else if (v1 > 1429914405)
        {
          if (v1 == 1429914406)
          {
            uint64_t result = 23LL;
            goto LABEL_481;
          }

          if (v1 == 1434404433)
          {
            uint64_t result = 17LL;
            goto LABEL_481;
          }
        }

        else
        {
          if (v1 == 1415625992)
          {
            uint64_t result = 136LL;
            goto LABEL_481;
          }

          if (v1 == 1419435331)
          {
            uint64_t result = 142LL;
            goto LABEL_481;
          }
        }

        goto LABEL_480;
      }

      if (v1 <= 1371389548)
      {
        if (v1 == 1325975682)
        {
          uint64_t result = 67LL;
          goto LABEL_481;
        }

        if (v1 != 1353145733)
        {
          uint64_t v8 = 1364038516LL;
          goto LABEL_260;
        }

            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &off_4865A0;
            exception[2] = v59;
          }

          goto LABEL_185;
        }

        if (v39 <= 1634035053)
        {
          if (v39 == 1633970532) {
            goto LABEL_184;
          }
          v53 = 1633973868;
          goto LABEL_183;
        }

        if (v39 != 1634035054)
        {
          v53 = 1634692199;
LABEL_183:
          if (v39 != v53) {
            goto LABEL_249;
          }
          goto LABEL_184;
        }

        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
        {
          v191 = (os_log_t *)sub_138E8(13);
          v59 = 561211770;
          v60 = *v191;
          if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            v218 = a2[2];
            sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
            v192 = (char)v222.__r_.__value_.__s.__size_;
            v193 = v222.__r_.__value_.__r.__words[0];
            v194 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
            v195 = &v222;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v192 < 0) {
              v195 = (std::string *)v193;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2910;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v195;
            v224 = 1024;
            *(_DWORD *)v225 = a5;
            *(_WORD *)&v225[4] = 1024;
            *(_DWORD *)&v225[6] = v194;
            uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_330;
          }

          goto LABEL_388;
        }

        v118 = a2[1];
        if (v118 == 1768845428 || v118 == 1869968496)
        {
          v119 = *a6;
          v120 = sub_138E8(1);
          v121 = sub_138E8(24);
          v122 = 0;
          v123 = 0LL;
          *(void *)buf = 0x100000002LL;
          v124 = *(void *)(v120 + 8);
          while (1)
          {
            v125 = (int)buf[v123];
            v126 = v122;
            if (((v124 & v125) != 0) != ((*(void *)(v121 + 8) & v125) != 0)) {
              break;
            }
            v122 = 1;
            v123 = 1LL;
            if ((v126 & 1) != 0) {
              goto LABEL_262;
            }
          }

          if ((v124 & v125) == 0) {
            v120 = v121;
          }
LABEL_262:
          v137 = *(os_log_s **)v120;
          if (v137 && os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
          {
            v138 = "disable";
            if (v119 == 1) {
              v138 = "enable";
            }
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2916;
            buf[0] = 136315906;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v138;
            if (v118 == 1768845428) {
              v139 = "input";
            }
            else {
              v139 = "output";
            }
            v224 = 2080;
            *(void *)v225 = v139;
            _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client request to %s %s audio enhancement processing",  (uint8_t *)buf,  0x26u);
          }

          memset(buf, 0, 24);
          sub_B4F78(a1, v118 == 1768845428, v119 == 1, (uint64_t *)buf);
          if (*(void *)buf != *(void *)&buf[2])
          {
            sub_6DD4();
            sub_34AA0(&v222, (uint64_t)&qword_48F828);
            sub_E3100(*(uint64_t *)buf, *(uint64_t *)&buf[2]);
            if (v222.__r_.__value_.__s.__data_[8]) {
              (*(void (**)(std::string::size_type))(*(void *)v222.__r_.__value_.__l.__data_ + 16LL))(v222.__r_.__value_.__r.__words[0]);
            }
          }

          v222.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          sub_E2D18((void ***)&v222);
          goto LABEL_186;
        }

        v210 = (os_log_t *)sub_138E8(13);
        v59 = 2003332927;
        v169 = *v210;
        if (!*v210 || !os_log_type_enabled(*v210, OS_LOG_TYPE_ERROR)) {
          goto LABEL_388;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2911;
        v170 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): invalid property scope for kVirtualAudioDevic"
               "ePropertyAudioEnhancementProcessingIsEnabled";
LABEL_387:
        _os_log_impl(&dword_0, v169, OS_LOG_TYPE_ERROR, v170, (uint8_t *)buf, 0x12u);
        goto LABEL_388;
      }

      if (v39 <= 1635152992)
      {
        if (v39 != 1634755428)
        {
          v66 = 1634890859;
          goto LABEL_155;
        }

        goto LABEL_184;
      }

      if (v39 != 1651861092) {
        goto LABEL_249;
      }
      v54 = *(double *)a6;
      uint64_t v55 = (*(double (**)(uint64_t))(*(void *)a1 + 632LL))(a1);
      v56 = (os_log_t *)sub_138E8(1);
      LODWORD(v7) = vcvtad_u64_f64(v54 * v55);
      v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136316162;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3006;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v54;
        v224 = 1024;
        *(_DWORD *)v225 = (_DWORD)v7;
        *(_WORD *)&v225[4] = 2048;
        *(double *)&v225[6] = v55;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to set buffer duration of %f seconds (equivalent to frame size of %u with sample rate of %f)",  (uint8_t *)buf,  0x2Cu);
      }

      (*(void (**)(uint64_t, os_log_s *))(*(void *)a1 + 488LL))(a1, v7);
      goto LABEL_186;
    }

    if (v39 > 1684500593)
    {
      if (v39 > 1685278560)
      {
        if (((v39 - 1685278561) > 0x11 || ((1 << (v39 - 97)) & 0x20003) == 0)
          && (v39 - 1685287011) >= 2)
        {
          goto LABEL_249;
        }

        goto LABEL_184;
      }

      if (v39 == 1684500594 || v39 == 1684893796) {
        goto LABEL_184;
      }
      v53 = 1685087596;
      goto LABEL_183;
    }

    if (v39 <= 1684304755)
    {
      if (v39 > 1668705647)
      {
        if (v39 != 1668705648)
        {
          v53 = 1684107364;
          goto LABEL_183;
        }
      }

      else
      {
        if (v39 == 1668247661)
        {
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
          {
            v186 = (os_log_t *)sub_138E8(13);
            v59 = 561211770;
            v60 = *v186;
            if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              v218 = a2[2];
              sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
              v187 = (char)v222.__r_.__value_.__s.__size_;
              v188 = v222.__r_.__value_.__r.__words[0];
              v189 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v190 = &v222;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v187 < 0) {
                v190 = (std::string *)v188;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2980;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v190;
              v224 = 1024;
              *(_DWORD *)v225 = a5;
              *(_WORD *)&v225[4] = 1024;
              *(_DWORD *)&v225[6] = v189;
              uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_330;
            }

            goto LABEL_388;
          }

          (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368LL))( *(void *)(a1 + 1008),  1685287015LL,  2019976293LL,  0LL,  (float)*a6);
          goto LABEL_186;
        }

        if (v39 != 1668443504) {
          goto LABEL_249;
        }
      }

      goto LABEL_164;
    }

    if (v39 > 1684370275)
    {
      if (v39 == 1684370276) {
        goto LABEL_184;
      }
      v53 = 1684500589;
      goto LABEL_183;
    }

    if (v39 != 1684304756)
    {
      v53 = 1684365924;
      goto LABEL_183;
    }

    goto LABEL_203;
  }

  if (v39 <= 1919774834)
  {
    if (v39 > 1869574755)
    {
      if (v39 <= 1886807153)
      {
        if (v39 > 1885631345)
        {
          if (v39 == 1885631346) {
            goto LABEL_184;
          }
          v53 = 1886413412;
        }

        else
        {
          if (v39 == 1869574756) {
            goto LABEL_184;
          }
          v53 = 1869575794;
        }

        goto LABEL_183;
      }

      if (v39 <= 1918987631)
      {
        if (v39 == 1886807154) {
          goto LABEL_184;
        }
        if (v39 != 1902539642) {
          goto LABEL_249;
        }
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
        {
          v171 = (os_log_t *)sub_138E8(13);
          v59 = 561211770;
          v60 = *v171;
          if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            v218 = a2[2];
            sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
            v172 = (char)v222.__r_.__value_.__s.__size_;
            v173 = v222.__r_.__value_.__r.__words[0];
            v174 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
            v175 = &v222;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v172 < 0) {
              v175 = (std::string *)v173;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2904;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v175;
            v224 = 1024;
            *(_DWORD *)v225 = a5;
            *(_WORD *)&v225[4] = 1024;
            *(_DWORD *)&v225[6] = v174;
            uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_330;
          }

          goto LABEL_388;
        }

        (*(void (**)(uint64_t, void))(*(void *)a1 + 496LL))(a1, *a6);
        goto LABEL_186;
      }

      if (v39 != 1918987632)
      {
        v53 = 1919773028;
        goto LABEL_183;
      }

      goto LABEL_164;
    }

    if (v39 <= 1718641516)
    {
      switch(v39)
      {
        case 1685287523:
LABEL_203:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
          {
            v97 = (os_log_t *)sub_138E8(13);
            v59 = 561211770;
            v60 = *v97;
            if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              v218 = a2[2];
              sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
              uint64_t v98 = (char)v222.__r_.__value_.__s.__size_;
              int v99 = v222.__r_.__value_.__r.__words[0];
              v100 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v101 = &v222;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v98 < 0) {
                v101 = (std::string *)v99;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2934;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v101;
              v224 = 1024;
              *(_DWORD *)v225 = a5;
              *(_WORD *)&v225[4] = 1024;
              *(_DWORD *)&v225[6] = v100;
              uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_330;
            }

            goto LABEL_388;
          }

          goto LABEL_185;
        case 1685483630:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
          {
            v102 = (os_log_t *)sub_138E8(13);
            v59 = 561211770;
            v60 = *v102;
            if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              v218 = a2[2];
              sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
              v103 = (char)v222.__r_.__value_.__s.__size_;
              v104 = v222.__r_.__value_.__r.__words[0];
              v105 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v106 = &v222;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v103 < 0) {
                v106 = (std::string *)v104;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2973;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v106;
              v224 = 1024;
              *(_DWORD *)v225 = a5;
              *(_WORD *)&v225[4] = 1024;
              *(_DWORD *)&v225[6] = v105;
              uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_330;
            }

            goto LABEL_388;
          }

          break;
        case 1718383987:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
          {
            v176 = (os_log_t *)sub_138E8(13);
            v59 = 561211770;
            v60 = *v176;
            if (*v176 && os_log_type_enabled(*v176, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              v218 = a2[2];
              sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
              v177 = (char)v222.__r_.__value_.__s.__size_;
              v178 = v222.__r_.__value_.__r.__words[0];
              v179 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v180 = &v222;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v177 < 0) {
                v180 = (std::string *)v178;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2965;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v180;
              v224 = 1024;
              *(_DWORD *)v225 = a5;
              *(_WORD *)&v225[4] = 1024;
              *(_DWORD *)&v225[6] = v179;
              uint64_t v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_330;
            }

            goto LABEL_388;
          }

          break;
        default:
          goto LABEL_249;
      }
    }

    else
    {
      if (v39 <= 1852012898)
      {
        if (v39 != 1718641517)
        {
          v53 = 1818326127;
          goto LABEL_183;
        }

        if (!sub_133C4(a1 + 648) && !sub_133C4(a1 + 736))
        {
          v107 = (os_log_t *)sub_138E8(1);
          v108 = *v107;
          if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_DEBUG))
          {
            v109 = "true";
            v110 = *a6;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            buf[0] = 136315650;
            if (!v110) {
              v109 = "false";
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3016;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v109;
            _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client request to set force LPCM to %s",  (uint8_t *)buf,  0x1Cu);
          }

          v111 = *(void *)(a1 + 528) - *(void *)(a1 + 520);
          if ((v111 & 0x7FFFFFFF8LL) != 0)
          {
            sub_B52B4(&__p, a1);
            if (!sub_133C4(a1 + 648) && !sub_133C4(a1 + 736))
            {
              v212 = (os_log_t *)sub_138E8(13);
              v213 = *v212;
              if (*v212 && os_log_type_enabled(*v212, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3024;
                _os_log_impl( &dword_0,  v213,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
              }

              v214 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v214, "Invariant failure.");
            }

            v112 = 0LL;
            memset(&v222, 0, sizeof(v222));
            v113 = (v111 >> 3);
            do
            {
              v114 = *(void *)(a1 + 520);
              if (v112 >= (*(void *)(a1 + 528) - v114) >> 3) {
                v115 = 0LL;
              }
              else {
                v115 = *(void *)(v114 + 8 * v112);
              }
              (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)v115 + 64LL))( v115,  a2,  a3,  a4,  a5,  a6,  a7);
              v116 = (os_log_t *)sub_138E8(1);
              v117 = *v116;
              if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_DEBUG))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3035;
                HIWORD(buf[4]) = 2048;
                *(void *)&buf[5] = v115;
                _os_log_impl( &dword_0,  v117,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Refreshing output stream %p for force LPCM stream preference change.",  (uint8_t *)buf,  0x1Cu);
              }

              sub_E1EEC(v115, (uint64_t *)&v222);
              ++v112;
            }

            while (v113 != v112);
            sub_CA170(*(void *)(a1 + 632), (uint64_t *)&v222);
            sub_B5444((unint64_t *)a1, (uint64_t *)&v222);
            *(void *)buf = &v222;
            sub_E2D18((void ***)buf);
            sub_B5780((uint64_t *)&__p);
          }

          goto LABEL_186;
        }

        v165 = (os_log_t *)sub_138E8(13);
        v166 = *v165;
        if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3013;
          _os_log_impl( &dword_0,  v166,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

LABEL_302:
        uint64_t result = 88LL;
        goto LABEL_481;
      }

      if (v1 == 1371389549)
      {
        uint64_t result = 27LL;
        goto LABEL_481;
      }

      if (v1 != 1373516433)
      {
        if (v1 == 1380747801)
        {
          uint64_t result = 127LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }

LABEL_351:
      uint64_t result = 100LL;
      goto LABEL_481;
    }

    if (v1 <= 1602181455)
    {
      if (v1 > 1554479184)
      {
        switch(v1)
        {
          case 1554479185LL:
            uint64_t result = 167LL;
            goto LABEL_481;
          case 1559256613LL:
            uint64_t result = 55LL;
            goto LABEL_481;
          case 1573906122LL:
            uint64_t result = 138LL;
            goto LABEL_481;
        }
      }

      else
      {
        switch(v1)
        {
          case 1517755655LL:
            uint64_t result = 171LL;
            goto LABEL_481;
          case 1540760353LL:
            uint64_t result = 5LL;
            goto LABEL_481;
          case 1549248876LL:
            uint64_t result = 172LL;
            goto LABEL_481;
        }
      }

      goto LABEL_480;
    }

    if (v1 > 1644180311)
    {
      if (v1 > 1721691076)
      {
        if (v1 == 1721691077)
        {
          uint64_t result = 16LL;
          goto LABEL_481;
        }

        if (v1 == 1733600853)
        {
          uint64_t result = 128LL;
          goto LABEL_481;
        }
      }

      else
      {
        if (v1 == 1644180312)
        {
          uint64_t result = 145LL;
          goto LABEL_481;
        }

        if (v1 == 1701146937)
        {
          uint64_t result = 49LL;
          goto LABEL_481;
        }
      }

      goto LABEL_480;
    }

    if (v1 == 1602181456)
    {
      uint64_t result = 154LL;
      goto LABEL_481;
    }

    if (v1 == 1608945770)
    {
      uint64_t result = 192LL;
      goto LABEL_481;
    }

    if (v1 != 1625227434) {
      goto LABEL_480;
    }
LABEL_391:
    uint64_t result = 104LL;
    goto LABEL_481;
  }

  if (v1 <= 676119127)
  {
    if (v1 <= 337183580)
    {
      if (v1 > 133314239)
      {
        if (v1 <= 228444037)
        {
          if (v1 == 133314240)
          {
            uint64_t result = 40LL;
            goto LABEL_481;
          }

          if (v1 != 157833461)
          {
            if (v1 == 173258742)
            {
              uint64_t result = 59LL;
              goto LABEL_481;
            }

            goto LABEL_480;
          }

          goto LABEL_387;
        }

        if (v1 > 262180326)
        {
          if (v1 == 262180327)
          {
            uint64_t result = 123LL;
            goto LABEL_481;
          }

          if (v1 == 330877086)
          {
            uint64_t result = 43LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        if (v1 != 228444038)
        {
          if (v1 != 253148925) {
            goto LABEL_480;
          }
LABEL_384:
          uint64_t result = 120LL;
          goto LABEL_481;
        }

LABEL_386:
        uint64_t result = 72LL;
        goto LABEL_481;
      }

      if (v1 <= 42878381)
      {
        switch(v1)
        {
          case 23433786LL:
            uint64_t result = 61LL;
            goto LABEL_481;
          case 33245053LL:
            uint64_t result = 68LL;
            goto LABEL_481;
          case 40511012LL:
            uint64_t result = 134LL;
            goto LABEL_481;
        }

        goto LABEL_480;
      }

      if (v1 == 42878382)
      {
        uint64_t result = 12LL;
        goto LABEL_481;
      }

      if (v1 != 79936591)
      {
        if (v1 != 88647037) {
          goto LABEL_480;
        }
        goto LABEL_397;
      }

LABEL_390:
      uint64_t result = 76LL;
      goto LABEL_481;
    }

    if (v1 > 363237282)
    {
      if (v1 > 502329936)
      {
        if (v1 <= 555503453)
        {
          if (v1 == 502329937)
          {
            uint64_t result = 22LL;
            goto LABEL_481;
          }

          uint64_t v4 = 551446205LL;
LABEL_366:
          if (v1 != v4) {
            goto LABEL_480;
          }
          goto LABEL_367;
        }

        if (v1 != 555503454)
        {
          if (v1 == 574536383)
          {
            uint64_t result = 30LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

LABEL_395:
        uint64_t result = 106LL;
        goto LABEL_481;
      }

      if (v1 != 363237283)
      {
        if (v1 == 425046865)
        {
          uint64_t result = 157LL;
          goto LABEL_481;
        }

        if (v1 == 445396642)
        {
          uint64_t result = 117LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }

  if (v391 > 1668703083)
  {
    if (v391 == 1668703084)
    {
LABEL_403:
      v221 = v392;
      v222 = 25702;
      goto LABEL_404;
    }

    if (v391 != 1668703092) {
      goto LABEL_409;
    }
    v221 = v392;
  }

  else
  {
    if (v391 != 1668309362)
    {
      if (v391 != 1668576377)
      {
LABEL_409:
        *v219 = 0;
        LOBYTE(buf[0]) = 0;
        LOBYTE(buf[4]) = 0;
        sub_269DB4(v219 + 8, (uint64_t)buf);
        if (LOBYTE(buf[4])) {
          sub_13850((uint64_t)buf);
        }
        goto LABEL_429;
      }

      goto LABEL_403;
    }

    v221 = v392;
    if (v392 > 1919776354)
    {
      if (v392 > 1987081832)
      {
        if (v392 == 1987081833) {
          goto LABEL_406;
        }
        v230 = 30319;
      }

      else
      {
        if (v392 == 1919776355) {
          goto LABEL_406;
        }
        v230 = 26467;
      }

      v223 = v230 | 0x76700000;
      goto LABEL_405;
    }

    if (v392 <= 1768779618)
    {
      if (v392 == 1735222132) {
        goto LABEL_406;
      }
      v223 = 1768057203;
      goto LABEL_405;
    }

    if (v392 == 1768779619) {
      goto LABEL_406;
    }
  }

  v222 = 30307;
LABEL_404:
  v223 = v222 | 0x696D0000;
LABEL_405:
  if (v221 != v223) {
    goto LABEL_409;
  }
LABEL_406:
  *v219 = v220;
  v224 = (uint64_t)(v219 + 8);
  if (v219[24] == v413)
  {
    if (v219[24]) {
      sub_13888(v224, (uint64_t)&theDict);
    }
  }

  else if (v219[24])
  {
    sub_13850(v224);
    v219[24] = 0;
  }

  else
  {
    v231 = theDict;
    *((void *)v219 + 1) = theDict;
    v232 = v411;
    v219[16] = v411;
    v219[17] = v412;
    if (v232 && v231) {
      CFRetain(v231);
    }
    v219[24] = 1;
  }

LABEL_240:
      uint64_t result = 193LL;
      goto LABEL_481;
    }

    if (v1 > 344862119)
    {
      switch(v1)
      {
        case 344862120LL:
          uint64_t result = 115LL;
          goto LABEL_481;
        case 355234908LL:
          uint64_t result = 129LL;
          goto LABEL_481;
        case 358923952LL:
          uint64_t result = 126LL;
          goto LABEL_481;
      }

      goto LABEL_480;
    }

    if (v1 == 337183581)
    {
      uint64_t result = 11LL;
      goto LABEL_481;
    }

    if (v1 == 340218669)
    {
      uint64_t result = 111LL;
      goto LABEL_481;
    }

    uint64_t v3 = 341800273LL;
    goto LABEL_172;
  }

  if (v1 <= 952317140)
  {
    if (v1 > 776033018)
    {
      if (v1 > 851437780)
      {
        if (v1 <= 910181309)
        {
          if (v1 == 851437781)
          {
            uint64_t result = 29LL;
            goto LABEL_481;
          }

          if (v1 == 896202454)
          {
            uint64_t result = 71LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

        if (v1 != 910181310)
        {
          if (v1 != 910313402) {
            goto LABEL_480;
          }
LABEL_344:
          uint64_t result = 195LL;
          goto LABEL_481;
        }

  v194 = (void **)operator new(8uLL);
  *v194 = 0LL;
  sub_25A240((void ***)(v252 + 480), v194);
  v195 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), std::string::size_type))(*(void *)v195 + 208LL))( v195,  sub_259968,  v252);
  sub_259A88(v252);
  v196 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), std::string::size_type))(*(void *)v196 + 16LL))( v196,  sub_259C7C,  v252);
  v197 = *(id *)sub_138E8(2);
  v198 = v197;
  if (v197)
  {
    v199 = (os_log_s *)v197;
    if (os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
    {
      v200 = sub_5954C();
      v201 = (*(uint64_t (**)(uint64_t))(*(void *)v200 + 8LL))(v200);
      *(_DWORD *)outData = 136315650;
      *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&outData[12] = 1024;
      *(_DWORD *)&outData[14] = 1850;
      *(_WORD *)&outData[18] = 1024;
      *(_DWORD *)&outData[20] = v201;
      _os_log_impl(&dword_0, v199, OS_LOG_TYPE_INFO, "%25s:%-5d Multichannel state is [%u]", outData, 0x18u);
    }
  }

  v202 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), std::string::size_type))(*(void *)v202 + 32LL))( v202,  sub_259D9C,  v252);
  v203 = *(id *)sub_138E8(2);
  v204 = v203;
  if (v203)
  {
    v205 = (os_log_s *)v203;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_INFO))
    {
      v206 = sub_5954C();
      v207 = (*(uint64_t (**)(uint64_t))(*(void *)v206 + 24LL))(v206);
      sub_2CA1C(v282, v207);
      v208 = v282[23] >= 0 ? v282 : *(_BYTE **)v282;
      *(_DWORD *)outData = 136315650;
      *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&outData[12] = 1024;
      *(_DWORD *)&outData[14] = 1855;
      *(_WORD *)&outData[18] = 2080;
      *(void *)&outData[20] = v208;
      _os_log_impl(&dword_0, v205, OS_LOG_TYPE_INFO, "%25s:%-5d High Quality (24-bit) state is [%s]", outData, 0x1Cu);
      if ((v282[23] & 0x80000000) != 0) {
        operator delete(*(void **)v282);
      }
    }
  }

  *(_DWORD *)(v252 + 108) = 2;
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8) {
    +[CiderService StartService](&OBJC_CLASS___CiderService, "StartService");
  }
  v209 = *(id *)sub_138E8(2);
  v210 = v209;
  if (v209)
  {
    v211 = (os_log_s *)v209;
    if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)outData = 136315394;
      *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&outData[12] = 1024;
      *(_DWORD *)&outData[14] = 1866;
      _os_log_impl( &dword_0,  v211,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ***** Ending Deferred Initialization *****",  outData,  0x12u);
    }
  }

  sub_13850((uint64_t)&v256);
  if (v271) {
    sub_52EF0((uint64_t)&v265);
  }
  *(void *)buf = off_4709D0;
  v212 = *(void **)&buf[4];
  if (*(void *)&buf[4])
  {
    sub_10AF78((uint64_t *)(*(void *)&buf[4] + 16LL));
    operator delete(v212);
  }

  sub_13850((uint64_t)&Mutable);
  return sub_259EBC();
}

LABEL_394:
        uint64_t result = 25LL;
        goto LABEL_481;
      }

      if (v1 == 776033019)
      {
        uint64_t result = 57LL;
        goto LABEL_481;
      }

      if (v1 != 810906663)
      {
        uint64_t v9 = 820711327LL;
        goto LABEL_377;
      }

LABEL_385:
      uint64_t result = 98LL;
      goto LABEL_481;
    }

    if (v1 <= 746003605)
    {
      if (v1 == 676119128)
      {
        uint64_t result = 146LL;
        goto LABEL_481;
      }

      if (v1 == 689804742)
      {
        uint64_t result = 36LL;
        goto LABEL_481;
      }

      uint64_t v8 = 698697055LL;
LABEL_260:
      if (v1 != v8) {
        goto LABEL_480;
      }
      goto LABEL_379;
    }

    if (v1 != 746003606)
    {
      if (v1 == 749116821)
      {
        uint64_t result = 165LL;
        goto LABEL_481;
      }

      uint64_t v2 = 761631964LL;
      goto LABEL_289;
    }

                                  v243 = std::__shared_weak_count::lock(v9);
                                  if (!v243) {
                                    goto LABEL_390;
                                  }
                                  v244 = v243;
                                  v245 = v242 == v236;
                                  v246 = (unint64_t *)&v243->__shared_owners_;
                                  do
                                    v247 = __ldaxr(v246);
                                  while (__stlxr(v247 - 1, v246));
                                  a4 = v306;
                                  if (!v247)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                    std::__shared_weak_count::__release_weak(v244);
                                  }

                                  if (!v241) {
                                    goto LABEL_395;
                                  }
LABEL_391:
                                  v248 = (unint64_t *)&v241->__shared_owners_;
                                  do
                                    v249 = __ldaxr(v248);
                                  while (__stlxr(v249 - 1, v248));
                                  if (!v249)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                                    std::__shared_weak_count::__release_weak(v241);
                                    if (v245) {
                                      goto LABEL_396;
                                    }
                                  }

                                  else
                                  {
LABEL_395:
                                    if (v245) {
                                      goto LABEL_396;
                                    }
                                  }

                                  sub_B8CBC((uint64_t *)&v318, v227 + 2, "", 2780);
                                  v252 = *((unsigned __int16 *)v318 + 92);
                                  v251 = (v252 >> 2) & 1;
                                  if ((v252 & 4) != 0 || !v309) {
                                    goto LABEL_447;
                                  }
                                  v250 = 1;
LABEL_402:
                                  v312 = v250;
                                  v253 = (std::__shared_weak_count *)v227[5];
                                  if (v253)
                                  {
                                    v254 = std::__shared_weak_count::lock(v253);
                                    v255 = v254;
                                    if (v254)
                                    {
                                      v256 = (uint64_t *)v227[4];
                                      v257 = (unint64_t *)&v254->__shared_weak_owners_;
                                      do
                                        v258 = __ldxr(v257);
                                      while (__stxr(v258 + 1, v257));
                                      v259 = (unint64_t *)&v254->__shared_owners_;
                                      do
                                        v260 = __ldaxr(v259);
                                      while (__stlxr(v260 - 1, v259));
                                      if (!v260)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                                        std::__shared_weak_count::__release_weak(v255);
                                      }
                                    }

                                    else
                                    {
                                      v256 = 0LL;
                                    }
                                  }

                                  else
                                  {
                                    v256 = 0LL;
                                    v255 = 0LL;
                                  }

                                  if (!v338)
                                  {
                                    v263 = 0LL;
                                    v262 = 0LL;
LABEL_422:
                                    if (!v255) {
                                      goto LABEL_429;
                                    }
                                    goto LABEL_423;
                                  }

                                  v261 = std::__shared_weak_count::lock(v338);
                                  v262 = v261;
                                  if (v261)
                                  {
                                    v263 = v337;
                                    v264 = (unint64_t *)&v261->__shared_weak_owners_;
                                    do
                                      v265 = __ldxr(v264);
                                    while (__stxr(v265 + 1, v264));
                                    v266 = (unint64_t *)&v261->__shared_owners_;
                                    do
                                      v267 = __ldaxr(v266);
                                    while (__stlxr(v267 - 1, v266));
                                    if (!v267)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                                      std::__shared_weak_count::__release_weak(v262);
                                      if (!v255) {
                                        goto LABEL_429;
                                      }
                                      goto LABEL_423;
                                    }

                                    goto LABEL_422;
                                  }

                                  v263 = 0LL;
                                  if (!v255)
                                  {
LABEL_429:
                                    v269 = 0LL;
                                    v268 = 0LL;
                                    if (!v262) {
                                      goto LABEL_435;
                                    }
                                    goto LABEL_430;
                                  }

LABEL_323:
    uint64_t result = 101LL;
    goto LABEL_481;
  }

  if (v1 > 1234705394)
  {
    if (v1 > 1293446024)
    {
      if (v1 <= 1302273957)
      {
        if (v1 != 1293446025)
        {
          if (v1 == 1294429942)
          {
            uint64_t result = 147LL;
            goto LABEL_481;
          }

          goto LABEL_480;
        }

            v484 = 0u;
            *(_OWORD *)std::string __p = 0u;
            v485[0] = 1065353216;
            *(_OWORD *)v469 = 0u;
            *(_OWORD *)v470 = 0u;
            LODWORD(v471[0]) = 1065353216;
            v251 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 312LL))(a3);
            v252 = v251;
            v253 = 0;
            v465.__r_.__value_.__r.__words[0] = v251;
            v254 = v251 & 0xFF00000000LL;
            while (1)
            {
              *(_DWORD *)__dst = v253;
              if (!v254 || v253 != v252)
              {
                v255 = a5[1];
                *(void *)buf = *a5;
                *(void *)&buf[8] = v255;
                if (v255)
                {
                  v256 = (unint64_t *)(v255 + 16);
                  do
                    v257 = __ldxr(v256);
                  while (__stxr(v257 + 1, v256));
                }

                memset(&buf[16], 0, 24);
                sub_7A5B8( &buf[16],  *(const void **)a7,  *(void *)(a7 + 8),  (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
                v258 = sub_1D4250((uint64_t)v469, v253, __dst);
                sub_1D4498((uint64_t)(v258 + 24), (__int128 *)buf);
                if (*(void *)&buf[16]) {
                  operator delete(*(void **)&buf[16]);
                }
                if (*(void *)&buf[8]) {
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                }
              }

              ++v253;
            }

            if (v451)
            {
              *(void *)buf = v450;
              *(void *)&buf[8] = v451;
              v259 = &v451->__shared_weak_owners_;
              do
                v260 = __ldxr((unint64_t *)v259);
              while (__stxr(v260 + 1, (unint64_t *)v259));
              memset(&buf[16], 0, 24);
              v261 = sub_1D4250((uint64_t)v469, v252, &v465);
              sub_1D4498((uint64_t)(v261 + 24), (__int128 *)buf);
              if (*(void *)&buf[16]) {
                operator delete(*(void **)&buf[16]);
              }
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
              }
            }

            for (j = 0; ; j = *(_DWORD *)buf + 1)
            {
              *(_DWORD *)buf = j;
              v263 = sub_216ECC((uint64_t)__p, j, buf);
              v264 = (std::__shared_weak_count *)a6[1];
              if (v264)
              {
                v265 = std::__shared_weak_count::lock(v264);
                v266 = v265;
                if (v265)
                {
                  v267 = *a6;
                  v268 = (unint64_t *)&v265->__shared_weak_owners_;
                  do
                    v269 = __ldxr(v268);
                  while (__stxr(v269 + 1, v268));
                  v270 = (unint64_t *)&v265->__shared_owners_;
                  do
                    v271 = __ldaxr(v270);
                  while (__stlxr(v271 - 1, v270));
                  if (!v271)
                  {
                    ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }

                else
                {
                  v267 = 0LL;
                }
              }

              else
              {
                v267 = 0LL;
                v266 = 0LL;
              }

              v272 = (std::__shared_weak_count *)v263[4];
              v263[3] = v267;
              v263[4] = v266;
              if (v272) {
                std::__shared_weak_count::__release_weak(v272);
              }
            }

            sub_1D3E10((uint64_t *)buf, a3, (uint64_t)v469, (uint64_t)__p);
            sub_2170E4((uint64_t)buf, a10);
            v273 = (os_log_t *)sub_138E8(19);
            v274 = *v273;
            if (*v273 && os_log_type_enabled(*v273, OS_LOG_TYPE_DEFAULT))
            {
              sub_1D4C48(&v468, (uint64_t)buf);
              v275 = (v468.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v468
                   : (std::string *)v468.__r_.__value_.__r.__words[0];
              *(_DWORD *)__dst = 136315650;
              *(void *)&__dst[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = 583;
              *(_WORD *)&__dst[18] = 2080;
              *(void *)&__dst[20] = v275;
              _os_log_impl(&dword_0, v274, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device Description: %s", __dst, 0x1Cu);
            }

            sub_85EA4(__dst, buf);
            memset(&v468, 0, sizeof(v468));
            v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v468;
            v467.__r_.__value_.__s.__data_[8] = 0;
            v468.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
            v468.__r_.__value_.__l.__size_ = v468.__r_.__value_.__r.__words[0];
            v468.__r_.__value_.__l.__cap_ = v468.__r_.__value_.__r.__words[0] + 104;
            v468.__r_.__value_.__l.__size_ = sub_10A49C( (uint64_t)__dst,  (uint64_t)v494,  (uint64_t)v468.__r_.__value_.__l.__data_);
            v276 = *(void *)a8;
            sub_105E0C(&v467.__r_.__value_.__l.__data_, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
            v466.__r_.__value_.__r.__words[0] = 0LL;
            v277 = sub_2B7D7C( (uint64_t **)&v468,  v276,  (__int128 *)(a8 + 24),  a8 + 40,  &v467,  v418,  &v466,  (void **)theString,  (__int128 *)v447);
            v278 = *a1;
            *a1 = v277;
            if (v278) {
              (*(void (**)(uint64_t *))(*v278 + 8))(v278);
            }
            v466.__r_.__value_.__r.__words[0] = (std::string::size_type)&v467;
            sub_7A668((void ***)&v466);
            v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v468;
            sub_10A52C((void ***)&v467);
            sub_85D64(v493[0]);
            sub_85D64(v491[0]);
            v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[32];
            sub_85DA4((void ***)&v467);
            v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[8];
            sub_85DA4((void ***)&v467);
            sub_85D64(v480);
            sub_85D64(v477);
            *(void *)__dst = &buf[32];
            sub_85DA4((void ***)__dst);
            *(void *)__dst = &buf[8];
            sub_85DA4((void ***)__dst);
            sub_10ACC8((uint64_t)v469);
            sub_10ABFC((uint64_t)__p);
            goto LABEL_367;
          }
        }

        else
        {
          v156 = 0LL;
        }

        v157 = 0LL;
        goto LABEL_193;
      }
    }

    else
    {
      v51 = 0LL;
    }

    uint64_t v52 = 0LL;
    goto LABEL_183;
  }

  v442 = 0LL;
  v443 = 0LL;
  if (v20)
  {
    v443 = std::__shared_weak_count::lock(v20);
    if (v443) {
      v442 = v21;
    }
  }

  *(void *)&buf[8] = 0LL;
  *(void *)buf = 0LL;
  __int16 v39 = (std::__shared_weak_count *)a5[1];
  if (v39)
  {
    v40 = std::__shared_weak_count::lock(v39);
    if (!v40)
    {
      unsigned int v41 = *(std::__shared_weak_count **)&buf[8];
      *(void *)&buf[8] = 0LL;
      *(void *)buf = 0LL;
      if (!v41) {
        goto LABEL_70;
      }
      goto LABEL_69;
    }

    unsigned int v41 = v40;
    unsigned int v42 = *a5;
    unsigned int v43 = (unint64_t *)&v40->__shared_weak_owners_;
    do
      uint64_t v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    v45 = *(std::__shared_weak_count **)&buf[8];
    *(void *)buf = v42;
    *(void *)&buf[8] = v41;
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
    uint64_t v46 = (unint64_t *)&v41->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
LABEL_69:
      std::__shared_weak_count::__release_weak(v41);
    }
  }

LABEL_265:
        uint64_t result = 96LL;
        goto LABEL_481;
      }

      if (v1 != 1302273958)
      {
        if (v1 == 1309571158)
        {
          uint64_t result = 141LL;
          goto LABEL_481;
        }

        goto LABEL_480;
      }

    sub_85B80((uint64_t *)v156);
    char v94 = 0;
  }

  *(_DWORD *)a1 = v94;
  sub_85A90((uint64_t *)(a1 + 8), &v138);
  sub_85B80(&v138);
  if (v137) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

LABEL_396:
      uint64_t result = 108LL;
      goto LABEL_481;
    }

    if (v1 == 1234705395)
    {
      uint64_t result = 125LL;
      goto LABEL_481;
    }

    if (v1 != 1280441783)
    {
      if (v1 == 1280909812)
      {
        uint64_t result = 152LL;
        goto LABEL_481;
      }

      goto LABEL_480;
    }

LABEL_387:
    uint64_t result = 78LL;
    goto LABEL_481;
  }

  if (v1 <= 1110205731)
  {
    if (v1 != 952317141)
    {
      if (v1 == 1060988941)
      {
        uint64_t result = 9LL;
        goto LABEL_481;
      }

      if (v1 == 1085318934)
      {
        uint64_t result = 131LL;
        goto LABEL_481;
      }

      goto LABEL_480;
    }

LABEL_367:
    uint64_t result = 51LL;
    goto LABEL_481;
  }

  if (v1 == 1110205732)
  {
    uint64_t result = 48LL;
    goto LABEL_481;
  }

  if (v1 != 1114644381) {
    goto LABEL_480;
  }
  uint64_t result = 82LL;
LABEL_481:
  dword_48CDAC = result;
  return result;
}

uint64_t sub_578E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  unint64_t v8 = *(void *)(a2 + 80);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
  unint64_t v22 = v8;
  if (!v7 || (uint64_t v9 = std::__shared_weak_count::lock(v7), (v23 = v9) == 0LL)) {
    sub_9D954();
  }
  uint64_t v10 = v9;
  unint64_t v20 = v8;
  __int16 v21 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    unint64_t v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  uint64_t v13 = *(void **)(a1 + 48);
  if (!v13)
  {
LABEL_10:
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v14 = 0LL;
    goto LABEL_11;
  }

  while (sub_D7370(&v20, v13 + 4))
  {
LABEL_9:
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_10;
    }
  }

  if (sub_D7370(v13 + 4, &v20))
  {
    ++v13;
    goto LABEL_9;
  }

  uint64_t v14 = sub_54ADC(a2, a3);
  std::__shared_weak_count::__release_weak(v10);
  if ((_DWORD)v14)
  {
    unint64_t v20 = v8;
    __int16 v21 = v10;
    do
      unint64_t v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    uint64_t v19 = *sub_D744C(a1 + 40, &v24, &v20);
    if (!v19) {
      sub_8F9A4("map::at:  key not found");
    }
    uint64_t v14 = *(unsigned int *)(*(void *)(v19 + 48) + 8LL);
    std::__shared_weak_count::__release_weak(v10);
  }

void sub_57A94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_57ADC(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  int v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_32C38(v4, (uint64_t)v7, v6, v9);
  }

  return result;
}

void sub_57B74(CFDictionaryRef *a1, uint64_t a2, __int128 **a3)
{
  uint64_t v6 = sub_48CDC(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t **)(a2 + 144));
  *(void *)&__int128 valuePtr = buf;
  sub_8CD60((void ***)&valuePtr);
  if (!v6)
  {
    uint64_t v104 = sub_138E8(13);
    id v105 = sub_8C7D4(1, *(void **)v104, *(void *)(v104 + 8));
    v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
    v107 = v106;
    if (v106 && os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7927;
      _os_log_impl( &dword_0,  v107,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [outputVAD is NULL]: No output VAD",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No output VAD");
  }

  char v145 = *(_BYTE *)a3;
  sub_5924C((CFStringRef *)buf, (const UInt8 *)aGoingActive, &v145);
  char v144 = *((_BYTE *)a3 + 1);
  sub_5924C((CFStringRef *)&buf[16], (const UInt8 *)aStayingActive, &v144);
  sub_2CA1C(v141, *(unsigned int *)(a2 + 224));
  if ((v142 & 0x80u) == 0) {
    uint64_t v7 = v141;
  }
  else {
    uint64_t v7 = (void **)v141[0];
  }
  if (v7)
  {
    if ((v142 & 0x80u) == 0) {
      CFIndex v8 = v142;
    }
    else {
      CFIndex v8 = (CFIndex)v141[1];
    }
    CFTypeRef v143 = CFStringCreateWithBytes(0LL, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v143)
    {
      uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "Could not construct");
    }
  }

  else
  {
    CFTypeRef v143 = 0LL;
  }

  sub_59330((uint64_t)&v163, "category", &v143);
  sub_2CA1C(v138, *(unsigned int *)(a2 + 228));
  if ((v139 & 0x80u) == 0) {
    uint64_t v10 = v138;
  }
  else {
    uint64_t v10 = (void **)v138[0];
  }
  if (v10)
  {
    if ((v139 & 0x80u) == 0) {
      CFIndex v11 = v139;
    }
    else {
      CFIndex v11 = (CFIndex)v138[1];
    }
    CFStringRef v12 = CFStringCreateWithBytes(0LL, (const UInt8 *)v10, v11, 0x8000100u, 0);
    CFStringRef v140 = v12;
    if (!v12)
    {
      int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
    }
  }

  else
  {
    CFStringRef v12 = 0LL;
    CFStringRef v140 = 0LL;
  }

  sub_59370(v164, "mode");
  if (v12) {
    CFRetain(v12);
  }
  CFStringRef v112 = v12;
  v164[1] = v12;
  sub_2DAC94(&v136, (unsigned int **)(a2 + 376), *(_DWORD *)(a2 + 228));
  if ((v136.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v14 = &v136;
  }
  else {
    uint64_t v14 = (std::string *)v136.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if ((v136.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex size = v136.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex size = v136.__r_.__value_.__l.__size_;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0LL, (const UInt8 *)v14, size, 0x8000100u, 0);
    CFStringRef v137 = v16;
    if (!v16)
    {
      int v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
    }
  }

  else
  {
    CFStringRef v16 = 0LL;
    CFStringRef v137 = 0LL;
  }

  sub_59370(v165, "active devices");
  if (v16) {
    CFRetain(v16);
  }
  v165[1] = v16;
  sub_8DCFC((uint64_t)v132, *(void **)(a2 + 120));
  sub_264840(&v134, (unsigned int **)(a2 + 376), (uint64_t)v132);
  if ((v134.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v18 = &v134;
  }
  else {
    unint64_t v18 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((v134.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex v19 = v134.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex v19 = v134.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0LL, (const UInt8 *)v18, v19, 0x8000100u, 0);
    CFStringRef v135 = v20;
    if (!v20)
    {
      __int16 v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
    }
  }

  else
  {
    CFStringRef v20 = 0LL;
    CFStringRef v135 = 0LL;
  }

  sub_59370(v166, "active on demand devices");
  if (v20) {
    CFRetain(v20);
  }
  CFStringRef v111 = v20;
  v166[1] = v20;
  int v22 = *((_DWORD *)a3 + 1);
  sub_59370(&v167, "session app state");
  LODWORD(valuePtr) = v22;
  if (!CFNumberCreate(0LL, kCFNumberIntType, &valuePtr))
  {
    v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v109, "Could not construct");
  }

  int v23 = *((unsigned __int8 *)a3 + 2);
  sub_59370(v169, "session input running");
  if (v23) {
    uint64_t v24 = (const __CFString *)kCFBooleanTrue;
  }
  else {
    uint64_t v24 = (const __CFString *)kCFBooleanFalse;
  }
  v169[1] = v24;
  int v25 = *((unsigned __int8 *)a3 + 3);
  sub_59370(v170, "session output running");
  if (v25) {
    unsigned int v26 = (const __CFString *)kCFBooleanTrue;
  }
  else {
    unsigned int v26 = (const __CFString *)kCFBooleanFalse;
  }
  v170[1] = v26;
  LODWORD(valuePtr) = *(_DWORD *)(a2 + 400) != 0;
  BOOL v27 = (const __CFString *)CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  v131 = v27;
  if (!v27)
  {
    v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v110, "Could not construct");
  }

  sub_59370(v171, "expanse session");
  CFRetain(v27);
  v171[1] = v27;
  uint64_t v28 = sub_5954C();
  unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  if (v29 > 6) {
    char v30 = "unknown";
  }
  else {
    char v30 = off_471298[v29];
  }
  sub_7D084(v128, v30);
  if ((v129 & 0x80u) == 0) {
    unint64_t v31 = v128;
  }
  else {
    unint64_t v31 = (void **)v128[0];
  }
  if (v31)
  {
    if ((v129 & 0x80u) == 0) {
      CFIndex v32 = v129;
    }
    else {
      CFIndex v32 = (CFIndex)v128[1];
    }
    CFStringRef v33 = CFStringCreateWithBytes(0LL, (const UInt8 *)v31, v32, 0x8000100u, 0);
    CFStringRef v130 = v33;
    if (!v33)
    {
      int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
    }
  }

  else
  {
    CFStringRef v33 = 0LL;
    CFStringRef v130 = 0LL;
  }

  sub_59370(v172, "session user pref");
  if (v33) {
    CFRetain(v33);
  }
  v172[1] = v33;
  uint64_t v35 = *(void *)(v6 + 1008);
  if (v35)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v35 + 504LL))(&v123);
  }

  else
  {
    v123 = 0LL;
    v124 = 0LL;
    uint64_t v125 = 0LL;
  }

  v115 = a1;
  CFStringRef v113 = v33;
  CFStringRef v114 = v16;
  sub_7D084(&v126, "{ ");
  int v36 = v123;
  v116 = v124;
  if (v123 != v124)
  {
    char v37 = 0;
    do
    {
      if ((v37 & 1) != 0) {
        std::string::append(&v126, ", ", 2uLL);
      }
      std::string::append(&v126, "{ ", 2uLL);
      v117 = v36;
      uint64_t v39 = *v36;
      uint64_t v38 = v36[1];
      if (v39 != v38)
      {
        char v40 = 0;
        do
        {
          if ((v40 & 1) != 0) {
            std::string::append(&v126, ", ", 2uLL);
          }
          std::to_string(&v152, *(_DWORD *)(v39 + 32));
          unsigned int v41 = std::string::insert(&v152, 0LL, "[ ", 2uLL);
          __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0LL;
          v41->__r_.__value_.__l.__cap_ = 0LL;
          v41->__r_.__value_.__r.__words[0] = 0LL;
          unsigned int v43 = std::string::append(&v153, "/", 1uLL);
          __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__l.__cap_ = v43->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0LL;
          v43->__r_.__value_.__l.__cap_ = 0LL;
          v43->__r_.__value_.__r.__words[0] = 0LL;
          std::to_string(&v151, *(double *)v39);
          if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v45 = &v151;
          }
          else {
            v45 = (std::string *)v151.__r_.__value_.__r.__words[0];
          }
          if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v46 = v151.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v46 = v151.__r_.__value_.__l.__size_;
          }
          v47 = std::string::append(&v154, (const std::string::value_type *)v45, v46);
          __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v155.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0LL;
          v47->__r_.__value_.__l.__cap_ = 0LL;
          v47->__r_.__value_.__r.__words[0] = 0LL;
          v49 = std::string::append(&v155, "/", 1uLL);
          __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v156.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0LL;
          v49->__r_.__value_.__l.__cap_ = 0LL;
          v49->__r_.__value_.__r.__words[0] = 0LL;
          std::to_string(&v150, *(_DWORD *)(v39 + 28));
          if ((v150.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v51 = &v150;
          }
          else {
            v51 = (std::string *)v150.__r_.__value_.__r.__words[0];
          }
          if ((v150.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v52 = v150.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v52 = v150.__r_.__value_.__l.__size_;
          }
          v53 = std::string::append(&v156, (const std::string::value_type *)v51, v52);
          __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__l.__cap_ = v53->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0LL;
          v53->__r_.__value_.__l.__cap_ = 0LL;
          v53->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v55 = std::string::append(&v157, " ", 1uLL);
          __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v158.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0LL;
          v55->__r_.__value_.__l.__cap_ = 0LL;
          v55->__r_.__value_.__r.__words[0] = 0LL;
          sub_2CA1C(&__p, *(unsigned int *)(v39 + 8));
          if ((v149 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v149 & 0x80u) == 0) {
            std::string::size_type v58 = v149;
          }
          else {
            std::string::size_type v58 = v148;
          }
          v59 = std::string::append(&v158, p_p, v58);
          __int128 v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v159.__r_.__value_.__l.__cap_ = v59->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0LL;
          v59->__r_.__value_.__l.__cap_ = 0LL;
          v59->__r_.__value_.__r.__words[0] = 0LL;
          BOOL v61 = std::string::append(&v159, " ]", 2uLL);
          __int128 v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          int64_t cap = v61->__r_.__value_.__l.__cap_;
          __int128 valuePtr = v62;
          v61->__r_.__value_.__l.__size_ = 0LL;
          v61->__r_.__value_.__l.__cap_ = 0LL;
          v61->__r_.__value_.__r.__words[0] = 0LL;
          if (cap >= 0) {
            p___int128 valuePtr = (const std::string::value_type *)&valuePtr;
          }
          else {
            p___int128 valuePtr = (const std::string::value_type *)valuePtr;
          }
          if (cap >= 0) {
            std::string::size_type v64 = HIBYTE(cap);
          }
          else {
            std::string::size_type v64 = *((void *)&valuePtr + 1);
          }
          std::string::append(&v126, p_valuePtr, v64);
          if (SHIBYTE(cap) < 0) {
            operator delete((void *)valuePtr);
          }
          v39 += 40LL;
          char v40 = 1;
        }

        while (v39 != v38);
      }

      std::string::append(&v126, " }", 2uLL);
      int v36 = v117 + 3;
      char v37 = 1;
    }

    while (v117 + 3 != v116);
  }

  std::string::append(&v126, " }", 2uLL);
  if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v65 = &v126;
  }
  else {
    uint64_t v65 = (std::string *)v126.__r_.__value_.__r.__words[0];
  }
  if (v65)
  {
    if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex v66 = v126.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex v66 = v126.__r_.__value_.__l.__size_;
    }
    CFTypeRef cf = CFStringCreateWithBytes(0LL, (const UInt8 *)v65, v66, 0x8000100u, 0);
    if (!cf)
    {
      v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
    }
  }

  else
  {
    CFTypeRef cf = 0LL;
  }

  sub_59370(v173, "session available formats");
  uint64_t v68 = (const __CFString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  v173[1] = v68;
  uint64_t v69 = *(void *)(v6 + 1008);
  if (v69)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v69 + 512LL))(&v118);
  }

  else
  {
    v118 = 0LL;
    v119 = 0LL;
    uint64_t v120 = 0LL;
  }

  sub_7D084(&v121, "{ ");
  v70 = (double *)v118;
  v71 = v119;
  if (v118 != v119)
  {
    char v72 = 0;
    do
    {
      if ((v72 & 1) != 0) {
        std::string::append(&v121, ", ", 2uLL);
      }
      std::to_string(&v152, *((_DWORD *)v70 + 8));
      unsigned int v73 = std::string::insert(&v152, 0LL, "[ ", 2uLL);
      __int128 v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__l.__cap_ = v73->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0LL;
      v73->__r_.__value_.__l.__cap_ = 0LL;
      v73->__r_.__value_.__r.__words[0] = 0LL;
      unsigned int v75 = std::string::append(&v153, "/", 1uLL);
      __int128 v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__l.__cap_ = v75->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0LL;
      v75->__r_.__value_.__l.__cap_ = 0LL;
      v75->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v151, *v70);
      if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v77 = &v151;
      }
      else {
        v77 = (std::string *)v151.__r_.__value_.__r.__words[0];
      }
      if ((v151.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v78 = v151.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v78 = v151.__r_.__value_.__l.__size_;
      }
      unsigned int v79 = std::string::append(&v154, (const std::string::value_type *)v77, v78);
      __int128 v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__l.__cap_ = v79->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0LL;
      v79->__r_.__value_.__l.__cap_ = 0LL;
      v79->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v81 = std::string::append(&v155, "/", 1uLL);
      __int128 v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v156.__r_.__value_.__l.__cap_ = v81->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0LL;
      v81->__r_.__value_.__l.__cap_ = 0LL;
      v81->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v150, *((_DWORD *)v70 + 7));
      if ((v150.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v83 = &v150;
      }
      else {
        v83 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v84 = v150.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v84 = v150.__r_.__value_.__l.__size_;
      }
      uint64_t v85 = std::string::append(&v156, (const std::string::value_type *)v83, v84);
      __int128 v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0LL;
      v85->__r_.__value_.__l.__cap_ = 0LL;
      v85->__r_.__value_.__r.__words[0] = 0LL;
      v87 = std::string::append(&v157, " ", 1uLL);
      __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__l.__cap_ = v87->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0LL;
      v87->__r_.__value_.__l.__cap_ = 0LL;
      v87->__r_.__value_.__r.__words[0] = 0LL;
      sub_2CA1C(&__p, *((unsigned int *)v70 + 2));
      if ((v149 & 0x80u) == 0) {
        v89 = (const std::string::value_type *)&__p;
      }
      else {
        v89 = (const std::string::value_type *)__p;
      }
      if ((v149 & 0x80u) == 0) {
        std::string::size_type v90 = v149;
      }
      else {
        std::string::size_type v90 = v148;
      }
      std::string v91 = std::string::append(&v158, v89, v90);
      __int128 v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v159.__r_.__value_.__l.__cap_ = v91->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0LL;
      v91->__r_.__value_.__l.__cap_ = 0LL;
      v91->__r_.__value_.__r.__words[0] = 0LL;
      v93 = std::string::append(&v159, " ]", 2uLL);
      __int128 v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      int64_t cap = v93->__r_.__value_.__l.__cap_;
      __int128 valuePtr = v94;
      v93->__r_.__value_.__l.__size_ = 0LL;
      v93->__r_.__value_.__l.__cap_ = 0LL;
      v93->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v95 = (const std::string::value_type *)&valuePtr;
      }
      else {
        int v95 = (const std::string::value_type *)valuePtr;
      }
      if (cap >= 0) {
        std::string::size_type v96 = HIBYTE(cap);
      }
      else {
        std::string::size_type v96 = *((void *)&valuePtr + 1);
      }
      std::string::append(&v121, v95, v96);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)valuePtr);
      }
      v70 += 5;
      char v72 = 1;
    }

    while (v70 != v71);
  }

  std::string::append(&v121, " }", 2uLL);
  if ((v121.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v97 = &v121;
  }
  else {
    v97 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  if (v97)
  {
    if ((v121.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex v98 = v121.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex v98 = v121.__r_.__value_.__l.__size_;
    }
    CFTypeRef v122 = CFStringCreateWithBytes(0LL, (const UInt8 *)v97, v98, 0x8000100u, 0);
    if (!v122)
    {
      int v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v99, "Could not construct");
    }
  }

  else
  {
    CFTypeRef v122 = 0LL;
  }

  sub_59370(&v174, "session selected format");
  CFTypeRef v100 = v122;
  if (v122) {
    CFRetain(v122);
  }
  v175[0] = v100;
  v146[0] = buf;
  v146[1] = 13LL;
  uint64_t v101 = 0LL;
  CFDictionaryRef *v115 = sub_5A950((uint64_t)v146);
  do
  {
    v102 = (const void *)v175[v101];
    if (v102) {
      CFRelease(v102);
    }
    v103 = (const void *)v175[v101 - 1];
    if (v103) {
      CFRelease(v103);
    }
    v101 -= 2LL;
  }

  while (v101 != -26);
  if (v122) {
    CFRelease(v122);
  }
  if (v118)
  {
    v119 = (double *)v118;
    operator delete(v118);
  }

  if (cf) {
    CFRelease(cf);
  }
  *(void *)&__int128 valuePtr = &v123;
  sub_149E5C((void ***)&valuePtr);
  if (v113) {
    CFRelease(v113);
  }
  CFRelease(v27);
  if (v111) {
    CFRelease(v111);
  }
  sub_8DF20(v133);
  if (v114) {
    CFRelease(v114);
  }
  if ((char)v136.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v136.__r_.__value_.__l.__data_);
    if (!v112) {
      goto LABEL_243;
    }
    goto LABEL_242;
  }

  if (v112) {
LABEL_242:
  }
    CFRelease(v112);
LABEL_243:
  if (v143) {
    CFRelease(v143);
  }
}

void sub_58C04(_Unwind_Exception *a1)
{
}

CFStringRef *sub_5924C(CFStringRef *a1, const UInt8 *a2, _BYTE *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  CFIndex v8 = &kCFBooleanTrue;
  if (!*a3) {
    CFIndex v8 = &kCFBooleanFalse;
  }
  a1[1] = (CFStringRef)*v8;
  return a1;
}

void sub_59304(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59330(uint64_t a1, char *a2, const void **a3)
{
  CFIndex v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

CFStringRef *sub_59370(CFStringRef *a1, char *a2)
{
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_59424( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59468(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 144);
  BOOL v3 = v1 == 1885892674 || v1 == 1886216820 || v1 == 1885892706;
  if (!v3 || !*(void *)(a1 + 192)) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t v9 = 0x676C6F6262616964LL;
    int v10 = 0;
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v9);
    uint64_t result = 0LL;
    if (v6)
    {
      int v7 = 4;
      unsigned int v8 = 0;
      uint64_t v9 = 0x676C6F6262616964LL;
      int v10 = 0;
      (*(void (**)(uint64_t, uint64_t *, void, void, int *, unsigned int *))(*(void *)a1 + 40LL))( a1,  &v9,  0LL,  0LL,  &v7,  &v8);
      return v8;
    }
  }

  return result;
}

uint64_t sub_5954C()
{
  uint64_t result = qword_4927E0;
  if (!qword_4927E0)
  {
    int v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        CFStringRef v5 = "SystemSettingsManager_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1048;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sSystemSettingsManager is NULL]: sSystemSettingsManager is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sSystemSettingsManager is NULL!");
  }

  return result;
}

void sub_59644(_Unwind_Exception *exception_object)
{
}

uint64_t sub_59660(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void sub_59668(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v48 = 0x676C6F6273666D61LL;
  int v49 = 0;
  uint64_t v2 = *(uint64_t **)(a1 + 544);
  BOOL v3 = *(uint64_t **)(a1 + 552);
  if (v2 != v3)
  {
    unsigned int v43 = a2 + 2;
    __int128 v44 = v3;
    v45 = a2;
    do
    {
      if (*v2 && sub_59AFC(*v2, (int *)&v48))
      {
        uint64_t v4 = sub_59C20(*v2, (int *)&v48, 0LL, 0LL);
        unsigned int v5 = v4;
        std::string::size_type v46 = &v42;
        unsigned int v47 = v4;
        LODWORD(v6) = v4 / 0x38;
        __chkstk_darwin(v4);
        unsigned int v8 = (char *)&v42 - v7;
        sub_59E70(*v2, (int *)&v48, 0LL, 0LL, &v47, (unsigned int *)((char *)&v42 - v7));
        if (v5 >= 0x38)
        {
          uint64_t v9 = 0LL;
          unint64_t v10 = 0LL;
          unint64_t v11 = 0LL;
          uint64_t v12 = 0LL;
          else {
            uint64_t v6 = v6;
          }
          do
          {
            int v13 = &v8[56 * v12];
            if (v10 >= v11)
            {
              unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3) + 1;
              if (v16 > 0x666666666666666LL) {
                sub_7A87C();
              }
              else {
                unint64_t v17 = v16;
              }
              if (v17) {
                unint64_t v17 = (unint64_t)sub_F2BEC(v17);
              }
              else {
                uint64_t v18 = 0LL;
              }
              unint64_t v19 = v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3);
              __int128 v20 = *(_OWORD *)v13;
              __int128 v21 = *((_OWORD *)v13 + 1);
              *(void *)(v19 + 32) = *((void *)v13 + 4);
              *(_OWORD *)unint64_t v19 = v20;
              *(_OWORD *)(v19 + 16) = v21;
              if ((void *)v10 == v9)
              {
                int v25 = (void *)(v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3));
              }

              else
              {
                unint64_t v22 = v17 + 8 * ((uint64_t)(v10 - (void)v9) >> 3);
                do
                {
                  __int128 v23 = *(_OWORD *)(v10 - 40);
                  __int128 v24 = *(_OWORD *)(v10 - 24);
                  int v25 = (void *)(v22 - 40);
                  *(void *)(v22 - 8) = *(void *)(v10 - 8);
                  *(_OWORD *)(v22 - memset(buf, 0, 24) = v24;
                  *(_OWORD *)(v22 - 40) = v23;
                  v10 -= 40LL;
                  v22 -= 40LL;
                }

                while ((void *)v10 != v9);
              }

              unint64_t v11 = v17 + 40 * v18;
              unint64_t v10 = v19 + 40;
              if (v9) {
                operator delete(v9);
              }
              uint64_t v9 = v25;
            }

            else
            {
              __int128 v14 = *(_OWORD *)v13;
              __int128 v15 = *((_OWORD *)v13 + 1);
              *(void *)(v10 + 32) = *((void *)v13 + 4);
              *(_OWORD *)unint64_t v10 = v14;
              *(_OWORD *)(v10 + 16) = v15;
              v10 += 40LL;
            }

            ++v12;
          }

          while (v12 != v6);
        }

        else
        {
          uint64_t v9 = 0LL;
          unint64_t v10 = 0LL;
        }

        unsigned int v26 = v45;
        uint64_t v28 = (void *)v45[1];
        unint64_t v27 = v45[2];
        if ((unint64_t)v28 >= v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *v45) >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v45) >> 3);
          if (2 * v32 > v31) {
            unint64_t v31 = 2 * v32;
          }
          if (v32 >= 0x555555555555555LL) {
            unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v33 = v31;
          }
          BOOL v3 = v44;
          v53 = v43;
          if (v33)
          {
            if (v33 > 0xAAAAAAAAAAAAAAALL) {
              sub_7A8C4();
            }
            int v34 = (char *)operator new(24 * v33);
          }

          else
          {
            int v34 = 0LL;
          }

          uint64_t v35 = &v34[24 * v30];
          __int128 v50 = v34;
          v51.i64[0] = (uint64_t)v35;
          v51.i64[1] = (uint64_t)v35;
          std::string::size_type v52 = &v34[24 * v33];
          *((void *)v35 + 1) = 0LL;
          *((void *)v35 + 2) = 0LL;
          *(void *)uint64_t v35 = 0LL;
          sub_2302B4(v35, v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3));
          uint64_t v36 = v51.i64[0];
          uint64_t v29 = v51.i64[1] + 24;
          v51.i64[1] += 24LL;
          uint64_t v38 = (void *)*v26;
          char v37 = (void *)v26[1];
          if (v37 == (void *)*v26)
          {
            int64x2_t v40 = vdupq_n_s64((unint64_t)v37);
          }

          else
          {
            do
            {
              *(void *)(v36 - memset(buf, 0, 24) = 0LL;
              *(void *)(v36 - 16) = 0LL;
              v36 -= 24LL;
              *(void *)(v36 + 16) = 0LL;
              __int128 v39 = *(_OWORD *)(v37 - 3);
              v37 -= 3;
              *(_OWORD *)uint64_t v36 = v39;
              *(void *)(v36 + 16) = v37[2];
              void *v37 = 0LL;
              v37[1] = 0LL;
              v37[2] = 0LL;
            }

            while (v37 != v38);
            int64x2_t v40 = *(int64x2_t *)v26;
            uint64_t v29 = v51.i64[1];
          }

          uint64_t *v26 = v36;
          v26[1] = v29;
          int64x2_t v51 = v40;
          unsigned int v41 = (char *)v26[2];
          v26[2] = (uint64_t)v52;
          std::string::size_type v52 = v41;
          __int128 v50 = (char *)v40.i64[0];
          sub_5A738((uint64_t)&v50);
        }

        else
        {
          void *v28 = 0LL;
          v28[1] = 0LL;
          v28[2] = 0LL;
          sub_2302B4(v28, v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v9) >> 3));
          uint64_t v29 = (uint64_t)(v28 + 3);
          v26[1] = (uint64_t)(v28 + 3);
          BOOL v3 = v44;
        }

        v26[1] = v29;
        if (v9) {
          operator delete(v9);
        }
      }

      v2 += 2;
    }

    while (v2 != v3);
  }

void sub_59A9C(_Unwind_Exception *a1)
{
  *(void *)(v3 + 8) = v2;
  if (v1) {
    operator delete(v1);
  }
  *(void *)(v4 - 144) = *(void *)(v4 - 168);
  sub_149E5C((void ***)(v4 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_59AFC(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = 1LL;
  if (*a2 > 1885762656)
  {
    BOOL v5 = (v3 - 1936092513) <= 0x13 && ((1 << (v3 - 97)) & 0x80005) != 0 || v3 == 1885762657;
    int v6 = 1936482676;
  }

  else
  {
    BOOL v5 = v3 == 1685025633 || v3 == 1718641517;
    int v6 = 1885762592;
  }

  if (!v5 && v3 != v6)
  {
    sub_27D9BC(&v13, (uint64_t *)(a1 + 80), "", 473);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v13 + 16LL))(v13, a2);
    unint64_t v10 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  return v4;
}

void sub_59C0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_59C20(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v8 = *a2;
  uint64_t v9 = 40LL;
  if (*a2 > 1936092512)
  {
    if (v8 > 1936092531)
    {
      if (v8 == 1936092532) {
        return v9;
      }
      int v11 = 1936482676;
LABEL_16:
      if (v8 == v11) {
        return 4LL;
      }
      goto LABEL_21;
    }

    if (v8 != 1936092513)
    {
      int v11 = 1936092515;
      goto LABEL_16;
    }

    uint64_t v20 = a1 + 440;
    char v21 = 1;
    sub_92F80(a1 + 440);
    sub_273BC(a1, (uint64_t)&v18);
    uint64_t v9 = 56LL;
    if ((int)v19 > 1836343850)
    {
      if ((_DWORD)v19 != 1836343851)
      {
        int v13 = 1836344107;
LABEL_28:
        if ((_DWORD)v19 != v13) {
          uint64_t v9 = (*(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 232)) & 0xFFFFFFF8;
        }
      }
    }

    else if ((_DWORD)v19 != 1667443507)
    {
      int v13 = 1667509043;
      goto LABEL_28;
    }

    unint64_t v12 = &v20;
    goto LABEL_31;
  }

  if (v8 <= 1885762591)
  {
    if (v8 != 1685025633 && v8 != 1718641517) {
      goto LABEL_21;
    }
    return 4LL;
  }

  if (v8 == 1885762592) {
    return v9;
  }
  if (v8 == 1885762657)
  {
    uint64_t v18 = a1 + 440;
    LOBYTE(v19) = 1;
    sub_92F80(a1 + 440);
    uint64_t v9 = (*(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 232)) & 0xFFFFFFF8;
    unint64_t v12 = &v18;
LABEL_31:
    sub_93128((uint64_t)v12);
    return v9;
  }

LABEL_21:
  sub_27D9BC(&v18, (uint64_t *)(a1 + 80), "", 552);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)v18 + 32LL))(v18, a2, a3, a4);
  __int128 v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  return v9;
}

  if (v8 == v10) {
    goto LABEL_22;
  }
  return sub_62ABC((uint64_t)a1, a2, a3, a4);
}

  if (v7) {
    return v8;
  }
  else {
    return 0LL;
  }
}

          dword_48EAB8 = v10;
LABEL_22:
          byte_48EABC = 1;
          goto LABEL_23;
        }

        int v11 = &v50;
LABEL_20:
        sub_19DFC((uint64_t)v11);
        goto LABEL_21;
      }

      sub_19DFC((uint64_t)&__p);
    }

    int v11 = (CFStringRef *)buf;
    goto LABEL_20;
  }

    sub_57ADC((uint64_t *)v16, 0x76737269u, 1987277417);
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
    *(_DWORD *)(a1 + 8) = 1701869160;
    *(_BYTE *)(a1 + 12) = 1;
    sub_86550((uint64_t *)(a1 + 16), (uint64_t)v16);
    goto LABEL_22;
  }

  sub_57ADC((uint64_t *)v16, 0x76646566u, 1986291046);
  if (a2 == 1886614633) {
    sub_57ADC((uint64_t *)v16, 0x76737064u, 1987276900);
  }
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = 1701869160;
  *(_BYTE *)(a1 + 12) = 1;
  sub_86550((uint64_t *)(a1 + 16), (uint64_t)v16);
  int v6 = a2 == 1886614633;
  if (a2 == 1885565044) {
    int v6 = 1;
  }
  uint64_t v7 = *(_WORD *)(a1 + 40) & 0xF800;
  if (a2 == 1885565044) {
    int v8 = 710;
  }
  else {
    int v8 = 726;
  }
  uint64_t v9 = v8 | v6;
LABEL_23:
  *(_WORD *)(a1 + 40) = v9 | v7;
  sub_32C8C(*(void **)&v16[8]);
}

    *(void *)(a1 + 8) = v12;
    return result;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    unint64_t v16 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3];
    uint64_t result = sub_17B714(a2, v16, (uint64_t)v8);
    unint64_t v12 = *(void *)(a1 + 8);
    while (v16 != a3)
    {
      unint64_t v17 = v16[1];
      *(void *)unint64_t v12 = *v16;
      *(void *)(v12 + 8) = v17;
      if (v17)
      {
        uint64_t v18 = (unint64_t *)(v17 + 8);
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }

      *(_DWORD *)(v12 + 16) = *((_DWORD *)v16 + 4);
      v16 += 3;
      v12 += 24LL;
    }

    goto LABEL_21;
  }

  uint64_t v20 = sub_17B714(a2, a3, (uint64_t)v8);
  for (uint64_t result = *(void *)(a1 + 8); result != v20; uint64_t result = sub_7A768(result - 24))
    ;
  *(void *)(a1 + 8) = v20;
  return result;
}

    __cxa_end_catch();
    JUMPOUT(0x19C5A4LL);
  }

  int v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    unsigned int v26 = v25;
    unint64_t v27 = (os_log_t *)sub_138E8(6);
    uint64_t v28 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v26 + 16LL))(v26);
    LODWORD(STACK[0x3B0]) = 136315650;
    STACK[0x3B4] = (unint64_t)"SingletonFactory_Aspen.cpp";
    LOWORD(STACK[0x3BC]) = 1024;
    LODWORD(STACK[0x3BE]) = 72;
    LOWORD(STACK[0x3C2]) = 2080;
    STACK[0x3C4] = v29;
    unint64_t v30 = "%25s:%-5d std::exception thrown: %s";
    unint64_t v31 = v28;
    unint64_t v32 = 28;
  }

  else
  {
    unint64_t v33 = (os_log_t *)sub_138E8(6);
    int v34 = *v33;
    if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LODWORD(STACK[0x3B0]) = 136315394;
    STACK[0x3B4] = (unint64_t)"SingletonFactory_Aspen.cpp";
    LOWORD(STACK[0x3BC]) = 1024;
    LODWORD(STACK[0x3BE]) = 76;
    unint64_t v30 = "%25s:%-5d exception thrown";
    unint64_t v31 = v34;
    unint64_t v32 = 18;
  }

  _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&STACK[0x3B0], v32);
  goto LABEL_21;
}

        int v11 = *v12;
        unint64_t v17 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_30;
        }
      }

      __int128 v14 = *((_DWORD *)v12 + 9);
      __int128 v15 = v14 == (_DWORD)a3;
      else {
        unint64_t v16 = -1;
      }
      if (v15) {
        unint64_t v16 = 0;
      }
      if ((v16 & 0x80) == 0) {
        return result;
      }
LABEL_27:
      unint64_t v17 = (uint64_t **)(v12 + 1);
      int v11 = v12[1];
      if (!v11) {
        goto LABEL_30;
      }
    }
  }

  unint64_t v17 = (uint64_t **)(result + 24);
LABEL_30:
  unint64_t v19 = a3 << 32;
  uint64_t v20 = (uint64_t *)operator new(0x38uLL);
  char v21 = v20;
  v20[4] = v19 | a2;
  v20[5] = v5[2];
  unint64_t v22 = v5[3];
  v20[6] = v22;
  if (v22)
  {
    __int128 v23 = (unint64_t *)(v22 + 16);
    do
      __int128 v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  v20[2] = (uint64_t)v12;
  *unint64_t v17 = v20;
  int v25 = *(void *)v7[23];
  if (v25)
  {
    v7[23] = v25;
    char v21 = *v17;
  }

  uint64_t result = sub_7A420((uint64_t *)v7[24], v21);
  ++v7[25];
  return result;
}

  *(_BYTE *)(a1 + 664) = v17;
  uint64_t v29 = (os_log_t *)sub_138E8(23);
  unint64_t v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v31 = *a6;
    unint64_t v32 = "yes";
    unint64_t v22 = *(_BYTE *)(a1 + 664) == 0;
    *(_DWORD *)buf = 136315906;
    if (v22) {
      unint64_t v32 = "no";
    }
    *(void *)&uint8_t buf[4] = "Port_Bluetooth_Aspen.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 103;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v31;
    std::string::size_type v46 = 2080;
    unsigned int v47 = v32;
    _os_log_impl(&dword_0, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port %@ supports PME: %s", buf, 0x26u);
  }

  unint64_t v33 = "eitbpitbsitbsptbcasofcasmtslgaswmanpnepsnehsshpsvdsudmpsfcpsfstbafrhssthsslcemps";
  do
  {
    int v34 = *v15;
    uint64_t v35 = (void *)(a1 + 648);
    uint64_t v36 = (void *)(a1 + 648);
    if (*v15)
    {
      char v37 = *(_DWORD *)v33;
      while (1)
      {
        while (1)
        {
          uint64_t v36 = (void *)v34;
          uint64_t v38 = *(_DWORD *)(v34 + 32);
          if (v37 >= v38) {
            break;
          }
          int v34 = *v36;
          uint64_t v35 = v36;
          if (!*v36) {
            goto LABEL_35;
          }
        }

        if (v38 >= v37) {
          break;
        }
        int v34 = v36[1];
        if (!v34)
        {
          uint64_t v35 = v36 + 1;
          goto LABEL_35;
        }
      }
    }

    else
    {
LABEL_35:
      __int128 v39 = operator new(0xA8uLL);
      int64x2_t v40 = *(_DWORD *)v33;
      v39[8] = 0LL;
      *((_DWORD *)v39 + 8) = v40;
      v39[5] = off_47B000;
      *((_DWORD *)v39 + 12) = v40;
      v39[9] = 0LL;
      v39[7] = v39 + 8;
      sub_B1F7C((uint64_t)(v39 + 10), (uint64_t)"Property Listener Mutex");
      *__int128 v39 = 0LL;
      v39[1] = 0LL;
      v39[2] = v36;
      char *v35 = v39;
      unsigned int v41 = **(void **)(a1 + 640);
      if (v41)
      {
        *(void *)(a1 + 640) = v41;
        __int128 v39 = (void *)*v35;
      }

      sub_7A420(*(uint64_t **)(a1 + 648), v39);
      ++*(void *)(a1 + 656);
    }

    v33 += 4;
  }

  while (v33 != "");
  return a1;
}

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v8 = *a2;
  if (*a2 <= 1986229103)
  {
    if (v8 == 1064725619) {
      return 1LL;
    }
    if (v8 != 1836414053)
    {
      if (v8 != 1836478308) {
        goto LABEL_22;
      }
      return 1LL;
    }
  }

  else if (v8 > 1987013731)
  {
    if (v8 != 1987013732)
    {
      if (v8 != 1987013741) {
        goto LABEL_22;
      }
      __int128 v15 = 1987013732;
      unint64_t v16 = a1[16];
      goto LABEL_15;
    }
  }

  else if (v8 != 1986229104 && v8 != 1986290211)
  {
LABEL_22:
    __int128 v14 = (os_log_t *)sub_138E8(13);
    unint64_t v12 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "InputVolumeControl_HAL_Common.cpp";
      uint64_t v18 = 1024;
      *(_DWORD *)unint64_t v19 = 548;
      goto LABEL_20;
    }

    goto LABEL_21;
  }

  __int128 v15 = *a2;
  unint64_t v16 = a1[16];
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)a1[15] + 16LL))(a1[15], &v15))
  {
LABEL_15:
    sub_F35C8(a1[15], &v15, (uint64_t)sub_234FE4, (uint64_t)a1);
    uint64_t v9 = (uint64_t **)a1[35];
    *(void *)buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v19[2] = a3;
    uint64_t v20 = a4;
    sub_18803C(v9, (unsigned int *)&v15, (unsigned int *)buf);
  }

  return 1LL;
}

  uint64_t v9 = (os_log_t *)sub_138E8(10);
  unint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = &__p;
    if (v17 < 0) {
      int v11 = __p;
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v20 = "SystemSettingsManager_Aspen.cpp";
    char v21 = 1024;
    unint64_t v22 = 487;
    __int128 v23 = 2080;
    __int128 v24 = "com.apple.HearingAids/HearingAidsCallAudioRoute";
    int v25 = 2080;
    unsigned int v26 = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }

  if (v17 < 0) {
    operator delete(__p);
  }
  if (*((_DWORD *)a1 + 9) != v7)
  {
    *((_DWORD *)a1 + 9) = v7;
    unint64_t v12 = operator new(0x10uLL);
    v12[2] = 0;
    *(void *)unint64_t v12 = &off_474B30;
    (*(void (**)(char *))(*(void *)a1 + 328LL))(a1);
  }

  int v13 = sub_138E8(10);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    __int128 v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v20 = "SystemSettingsManager_Aspen.cpp";
        char v21 = 1024;
        unint64_t v22 = 1331;
        __int128 v23 = 2048;
        __int128 v24 = a1;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidCallAudioRoutingPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  uint64_t v9 = (os_log_t *)sub_138E8(10);
  unint64_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = &__p;
    if (v17 < 0) {
      int v11 = __p;
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v20 = "SystemSettingsManager_Aspen.cpp";
    char v21 = 1024;
    unint64_t v22 = 526;
    __int128 v23 = 2080;
    __int128 v24 = "com.apple.HearingAids/HearingAidsMediaAudioRoute";
    int v25 = 2080;
    unsigned int v26 = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference %s: %s.", buf, 0x26u);
  }

  if (v17 < 0) {
    operator delete(__p);
  }
  if (*((_DWORD *)a1 + 10) != v7)
  {
    *((_DWORD *)a1 + 10) = v7;
    unint64_t v12 = operator new(0x10uLL);
    v12[2] = 0;
    *(void *)unint64_t v12 = &off_474B60;
    (*(void (**)(char *))(*(void *)a1 + 328LL))(a1);
  }

  int v13 = sub_138E8(10);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    __int128 v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v20 = "SystemSettingsManager_Aspen.cpp";
        char v21 = 1024;
        unint64_t v22 = 1346;
        __int128 v23 = 2048;
        __int128 v24 = a1;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::UpdateHearingAidMediaAudioRoutingPreferenceState()",  buf,  0x1Cu);
      }
    }
  }

  sub_DA7BC(buf, (uint64_t)&unk_402AC0);
  unint64_t v17 = __p;
  if (__p) {
LABEL_24:
  }
    operator delete(v17);
  if (!(_BYTE)v39) {
LABEL_26:
  }
    sub_DA7BC(buf, (uint64_t)&unk_402AC0);
  sub_2D9708((uint64_t)a1, (uint64_t)buf);
  if ((_BYTE)v39)
  {
    sub_D0C4C(*(void **)&buf[16]);
    unint64_t v22 = *(void **)buf;
    *(void *)buf = 0LL;
    if (v22) {
      operator delete(v22);
    }
  }

      unsigned int v26 = a1[24];
      strcpy((char *)buf, "atbtbolg");
      BYTE1(buf[2]) = 0;
      HIWORD(buf[2]) = 0;
      (*(void (**)(void *, _DWORD *, uint64_t, uint64_t, uint64_t, int *))(*v26 + 48LL))( v26,  buf,  a3,  a4,  a5,  a6);
      unint64_t v27 = (std::__shared_weak_count *)a1[11];
      std::string::size_type v58 = a1[10];
      v59 = v27;
      if (v27)
      {
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          uint64_t v29 = __ldxr(p_shared_weak_owners);
        while (__stxr(v29 + 1, p_shared_weak_owners));
      }

      sub_D61C0(&v53, (uint64_t *)&v58, 1LL);
      buf[0] = 1717793397;
      *(void *)&buf[2] = &buf[2];
      *(void *)&uint8_t buf[4] = &buf[2];
      *(void *)&buf[6] = 0LL;
      unint64_t v30 = v55;
      if (v55)
      {
        unint64_t v32 = v53;
        unint64_t v31 = v54;
        unint64_t v33 = *v54;
        *(void *)(v33 + 8) = *(void *)(v53 + 8);
        **(void **)(v32 + 8) = v33;
        int v34 = *(void *)&buf[2];
        *(void *)(*(void *)&buf[2] + 8LL) = v31;
        *unint64_t v31 = v34;
        *(void *)&buf[2] = v32;
        *(void *)(v32 + 8) = &buf[2];
        *(void *)&buf[6] = v30;
        uint64_t v55 = 0LL;
      }

      sub_EDEBC((uint64_t)__p, buf, 1LL);
      sub_85B80((uint64_t *)&buf[2]);
      sub_85B80(&v53);
      if (v59) {
        std::__shared_weak_count::__release_weak(v59);
      }
      uint64_t v35 = sub_546E0();
      sub_101870(v35, __p, 0);
      sub_EDF34((void *)__p[1]);
    }
  }

  else
  {
    sub_22344C(a1, a2, a3, a4, a5, (uint64_t)a6);
  }

    uint64_t v9 = 0;
LABEL_22:
    unint64_t v17 = sub_A9B7C(v9);
    return sub_A9BE8(v17);
  }

  if (v2 == 1684236338) {
    return 8LL;
  }
  else {
    return 0LL;
  }
}

        uint64_t v9 = v16;
        if (v16 < v19)
        {
          __int128 v23 = v19;
          do
          {
            __int128 v24 = *(_OWORD *)v9;
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v23;
            *(_OWORD *)__int128 v23 = v24;
            do
            {
              int v25 = v9[3];
              v9 += 2;
            }

            while (v25 > v14);
            do
            {
              unsigned int v26 = *(v23 - 1);
              v23 -= 2;
            }

            while (v26 <= v14);
          }

          while (v9 < v23);
        }

        if (v9 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
        }
        *(v9 - 2) = v15;
        *(v9 - 1) = v14;
        if (v16 < v19)
        {
LABEL_32:
          sub_38B614(a1, v9 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        unint64_t v27 = sub_38BE70(a1, v9 - 2);
        if (!sub_38BE70(v9, a2))
        {
          if (v27) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v9 - 2;
        if (!v27) {
          goto LABEL_1;
        }
        return;
    }
  }

void sub_59E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_59E70(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v12 = sub_59C20(a1, a2, a3, a4);
  if (*a5 < v12)
  {
    v53 = (os_log_t *)sub_138E8(13);
    __int128 v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 562;
      _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): data size too small for specified property",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  unsigned int v13 = v12;
  int v14 = *a2;
  if (*a2 > 1936092512)
  {
    if (v14 <= 1936092531)
    {
      if (v14 != 1936092513)
      {
        if (v14 == 1936092515)
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + 401);
          goto LABEL_11;
        }

        goto LABEL_40;
      }

      std::string __p = (void *)(a1 + 440);
      char v61 = 1;
      sub_92F80(a1 + 440);
      sub_273BC(a1, (uint64_t)v70);
      if (*(int *)&v70[8] > 1836343850)
      {
        if (*(_DWORD *)&v70[8] == 1836344107) {
          goto LABEL_50;
        }
        int v24 = 1836343851;
      }

      else
      {
        if (*(_DWORD *)&v70[8] == 1667443507) {
          goto LABEL_50;
        }
        int v24 = 1667509043;
      }

      if (*(_DWORD *)&v70[8] != v24)
      {
        uint64_t v38 = *(_BYTE **)(a1 + 232);
        size_t v37 = v13;
        goto LABEL_51;
      }

LABEL_50:
      *(_OWORD *)buf = *(_OWORD *)v70;
      *(_OWORD *)&buf[16] = *(_OWORD *)&v70[16];
      uint64_t v67 = *(void *)&v70[32];
      uint64_t v68 = *(void *)v70;
      uint64_t v69 = *(void *)v70;
      size_t v37 = v13;
      uint64_t v38 = buf;
LABEL_51:
      memcpy(a6, v38, v37);
      *a5 = v13;
      p_p = &__p;
      goto LABEL_52;
    }

    if (v14 != 1936482676)
    {
      if (v14 != 1936092532) {
        goto LABEL_40;
      }
      goto LABEL_17;
    }

    int v25 = sub_6ABD4(a1, (uint64_t)buf, 1885762592);
    if (v25)
    {
      __int128 v56 = (os_log_t *)sub_138E8(13);
      v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v70 = 136315394;
        *(void *)&v70[4] = "VirtualStream.cpp";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 618;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: error getting current stream format",  v70,  0x12u);
      }

      std::string::size_type v58 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string::size_type v58 = &off_4865A0;
      v58[2] = v25;
    }

    uint64_t v26 = *(void *)(a1 + 96);
    double v27 = 1.0;
    if (((*(uint64_t (**)(uint64_t))(*(void *)v26 + 144LL))(v26) & 1) == 0)
    {
      double v28 = (*(double (**)(uint64_t))(*(void *)v26 + 104LL))(v26);
      double v29 = *(double *)buf;
      if (v28 != *(double *)buf)
      {
        unint64_t v30 = (os_log_t *)sub_138E8(22);
        unint64_t v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v70 = 136315906;
          *(void *)&v70[4] = "VirtualStream.cpp";
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = 309;
          *(_WORD *)&v70[18] = 2048;
          *(double *)&v70[20] = v28;
          *(_WORD *)&v70[28] = 2048;
          *(double *)&v70[30] = v29;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Aggregate device sample rate (%f) is different from physical device sample rate(%f)",  v70,  0x26u);
        }

        double v27 = v28 / v29;
      }
    }

    int v64 = 4;
    unsigned int v65 = 0;
    else {
      int v32 = 1768845428;
    }
    v63[0] = 1819569763;
    v63[1] = v32;
    v63[2] = 0;
    if (sub_59AFC(a1, v63))
    {
      sub_59E70(a1, v63, 0LL, 0LL, &v64, &v65);
      unsigned int v33 = v65;
    }

    else
    {
      __int128 v39 = (os_log_t *)sub_138E8(22);
      int64x2_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_INFO))
      {
        sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
        unsigned int v41 = v62 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)v70 = 136315650;
        *(void *)&v70[4] = "VirtualStream.cpp";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 811;
        *(_WORD *)&v70[18] = 2080;
        *(void *)&v70[20] = v41;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_INFO,  "%25s:%-5d Virtual stream %s, does not support kAudioStreamPropertyLatency",  v70,  0x1Cu);
        if (v62 < 0) {
          operator delete(__p);
        }
      }

      unsigned int v33 = 0;
    }

    unsigned int v42 = sub_6BA08(a1);
    if (*(int *)&buf[8] > 1836343850)
    {
      if (*(_DWORD *)&buf[8] == 1836344107) {
        goto LABEL_67;
      }
      int v43 = 1836343851;
    }

    else
    {
      if (*(_DWORD *)&buf[8] == 1667443507) {
        goto LABEL_67;
      }
      int v43 = 1667509043;
    }

    if (*(_DWORD *)&buf[8] != v43)
    {
LABEL_71:
      int v49 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 128LL))(*(void *)(a1 + 136));
      __int128 v50 = (os_log_t *)sub_138E8(22);
      unsigned int v51 = (v27 * (double)(v33 + v42 + v49));
      std::string::size_type v52 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v70 = 136315650;
        *(void *)&v70[4] = "VirtualStream.cpp";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 630;
        *(_WORD *)&v70[18] = 1024;
        *(_DWORD *)&v70[20] = v51;
        _os_log_impl(&dword_0, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adjusted StreamLatency is %d", v70, 0x18u);
      }

      *a6 = v51;
      return;
    }

    __int128 v54 = *v14;
    if (*v14 == 1986817377 || v54 == 1064725619)
    {
      __int128 v56 = sub_138E8(0);
      v57 = sub_138E8(38);
      std::string::size_type v58 = 0;
      v59 = 0LL;
      *(void *)buf = 0x100000002LL;
      __int128 v60 = *(void *)(v56 + 8);
      while (1)
      {
        char v61 = *(int *)&buf[4 * v59];
        char v62 = v58;
        if (((v60 & v61) != 0) != ((*(void *)(v57 + 8) & v61) != 0)) {
          break;
        }
        std::string::size_type v58 = 1;
        v59 = 1LL;
        if ((v62 & 1) != 0)
        {
          if ((v60 & 1) == 0) {
            goto LABEL_80;
          }
          goto LABEL_63;
        }
      }

      if ((v60 & v61) == 0) {
        __int128 v56 = v57;
      }
      if ((*(void *)(v56 + 8) & 1) != 0)
      {
LABEL_63:
        v63 = *(os_log_s **)v56;
        if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          if (v103 >= 0) {
            int v64 = v102;
          }
          else {
            int v64 = (void **)v102[0];
          }
          sub_2CA1C(v100, *v14);
          std::string v91 = v64;
          int v95 = v13;
          unsigned int v65 = v5;
          CFIndex v66 = v100;
          if (v101 < 0) {
            CFIndex v66 = (void **)v100[0];
          }
          std::string::size_type v90 = v66;
          uint64_t v67 = a3 + 12 * v12;
          sub_2CA1C(v98, *(unsigned int *)(v67 + 4));
          uint64_t v68 = a3;
          uint64_t v69 = v99;
          v70 = (void **)v98[0];
          v71 = *(_DWORD *)(v67 + 4);
          char v72 = *(_DWORD *)(v68 + 12 * v12 + 8);
          sub_2CA1C(v96, v65[26]);
          unsigned int v73 = v98;
          if (v69 < 0) {
            unsigned int v73 = v70;
          }
          __int128 v74 = v96;
          if (v97 < 0) {
            __int128 v74 = (void **)v96[0];
          }
          unsigned int v75 = v65[26];
          __int128 v76 = v65[27];
          *(_DWORD *)buf = v88.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          id v105 = 1024;
          v106 = 403;
          v107 = 2080;
          *(void *)v108 = v91;
          *(_WORD *)&v108[8] = 2080;
          v109 = v90;
          v110 = 2080;
          *(void *)CFStringRef v111 = v73;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)CFStringRef v112 = v71;
          *(_WORD *)&v112[4] = 1024;
          *(_DWORD *)&v112[6] = v72;
          CFStringRef v113 = 2080;
          *(void *)CFStringRef v114 = v74;
          *(_WORD *)&v114[8] = 1024;
          v115 = v75;
          v116 = 1024;
          v117 = v76;
          _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: %s; scope: '%s' (%u); element: %u) "
            "translated to (scope: '%s' (%u); element %u).",
            buf,
            0x52u);
          BOOL v5 = v65;
          if (v97 < 0) {
            operator delete(v96[0]);
          }
          int v11 = v94;
          unsigned int v13 = v95;
          a3 = v93;
          int v8 = v92;
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }

        uint64_t v35 = (std::__shared_weak_count *)a1[1];
        *a1 = v30;
        a1[1] = (uint64_t *)v7;
        if (v35) {
          std::__shared_weak_count::__release_weak(v35);
        }
      }

      unint64_t v36 = v6[1];
      if (v36)
      {
        do
        {
          size_t v37 = (uint64_t **)v36;
          unint64_t v36 = (uint64_t *)*v36;
        }

        while (v36);
      }

      else
      {
        do
        {
          size_t v37 = (uint64_t **)v6[2];
          uint64_t v38 = *v37 == (uint64_t *)v6;
          int v6 = v37;
        }

        while (!v38);
      }

      int v6 = v37;
    }

    while (v37 != v49);
  }

  sub_132DF8(v49[0]);
}

  if (!result) {
    return result;
  }
  unint64_t v16 = 5LL;
  return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

  memset(v115.__m_.__opaque, 0, sizeof(v115.__m_.__opaque));
  v115.__m_.__sig = 850045863LL;
  memset(v114.__cv_.__opaque, 0, sizeof(v114.__cv_.__opaque));
  v114.__cv_.__sig = 1018212795LL;
  v83 = 0;
  v59 = a1;
  sub_7D684(&__p, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v83);
  int v25 = 2000LL;
  do
  {
    sub_2C7218((uint64_t)&v76, (uint64_t)&v99);
    uint64_t v26 = v76;
    if (v79)
    {
      double v27 = 1;
      unsigned int v13 = v79;
      if (v76) {
        goto LABEL_73;
      }
      continue;
    }

    unsigned int v73 = 0LL;
    __int128 v74 = 0LL;
    unsigned int v75 = 0LL;
    double v28 = v77;
    double v29 = (v77 - (uint64_t)v76) >> 2;
    sub_7A5B8(&v73, v76, v77, v29);
    v70 = 0LL;
    v71 = 0LL;
    char v72 = 0LL;
    sub_7A5B8(&v70, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    unint64_t v30 = v73;
    unint64_t v31 = v70;
    if (v74 - v73 != v71 - v70)
    {
      int v32 = 0;
      if (!v70) {
        goto LABEL_59;
      }
LABEL_58:
      v71 = v31;
      operator delete(v31);
      goto LABEL_59;
    }

    int v32 = memcmp(v73, v70, v74 - v73) == 0;
    if (v31) {
      goto LABEL_58;
    }
LABEL_59:
    if (v30)
    {
      __int128 v74 = v30;
      operator delete(v30);
    }

    if (v32)
    {
      double v27 = 12;
      if (v26) {
        goto LABEL_73;
      }
      continue;
    }

    if (v25 > 0)
    {
      v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      int v34 = sub_138E8(13);
      if ((*(_BYTE *)(v34 + 8) & 1) != 0)
      {
        uint64_t v35 = *(os_log_s **)v34;
        if (*(void *)v34)
        {
          if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            id v105 = 1024;
            v106 = 257;
            v107 = 2080;
            *(void *)v108 = "with timeout";
            *(_WORD *)&v108[8] = 1024;
            *(_DWORD *)&v108[10] = v59;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v115;
      __lk.__owns_ = 1;
      std::mutex::lock(&v115);
      v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v83)
      {
LABEL_70:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_7D790((uint64_t)&buf);
        double v27 = 0;
        v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
        if (v26) {
          goto LABEL_73;
        }
        continue;
      }

      int v43 = v36.__d_.__rep_ + 1000000 * v25;
      while (1)
      {
        if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_70;
        }
        v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v44.__d_.__rep_ >= 1) {
          break;
        }
LABEL_98:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v83) {
          goto LABEL_70;
        }
      }

      std::chrono::steady_clock::now();
      v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v45.__d_.__rep_)
      {
        if (v45.__d_.__rep_ < 1)
        {
          if ((unint64_t)v45.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            uint64_t v46 = 0x8000000000000000LL;
            goto LABEL_96;
          }
        }

        else if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_94;
        }

        uint64_t v46 = 1000 * v45.__d_.__rep_;
      }

      else
      {
        uint64_t v46 = 0LL;
      }

  unint64_t v36 = *(void *)(a2 + 16);
  if (!v24 && (v26 & 1) == 0 && v36)
  {
    unint64_t v45 = (os_log_t *)sub_138E8(13);
    uint64_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      sub_2D9BB0(&v54, a2, 1);
      uint64_t v47 = (v54.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v54 : (std::string *)v54.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "Device_BluetoothUnified_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 570;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v47;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported Bluetooth profile for %s",  (uint8_t *)buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported Bluetooth profile for %s");
  }

  size_t v37 = 0;
  if (!v36)
  {
    int64x2_t v40 = 1919183219;
    goto LABEL_80;
  }

  if ((v26 & 1) == 0) {
    goto LABEL_71;
  }
LABEL_55:
  strcpy((char *)buf, "pshsbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v38 = sub_5C2F8(a1);
  int64x2_t v40 = a3;
  if (a3 <= 1919708274)
  {
    if (a3 == 1919115628 || a3 == 1919183219) {
      goto LABEL_80;
    }
LABEL_71:
    int64x2_t v40 = 1918989668;
    goto LABEL_80;
  }

  if (a3 == 1919708275 || a3 == 1920364387) {
    goto LABEL_80;
  }
  if (a3 != 1936090482) {
    goto LABEL_71;
  }
  *((void *)&v41 + 1) = v39;
  *(void *)&unsigned int v41 = v38;
  unsigned int v42 = (v41 >> 32) & 0xFF00000000LL;
  if (HIDWORD(v38) != 1 || v42 == 0) {
    int64x2_t v40 = 1919115628;
  }
  else {
    int64x2_t v40 = 1936090482;
  }
LABEL_80:
  v54.__r_.__value_.__s.__data_[0] = v24;
  v54.__r_.__value_.__s.__data_[1] = v26;
  v54.__r_.__value_.__s.__data_[2] = v37;
  HIDWORD(v54.__r_.__value_.__r.__words[0]) = v40;
  v54.__r_.__value_.__l.__size_ = a1;
  if (dispatch_get_specific("ProfileChangeQueueKey") == "ProfileChangeQueueKey")
  {
    sub_2E57F8((uint64_t)&v54);
  }

  else
  {
    uint64_t v44 = *(dispatch_queue_s **)(a1 + 848);
    __p[0] = &v54;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[2] = 0x40000000LL;
    *(void *)&uint8_t buf[4] = sub_2E5A00;
    *(void *)&buf[6] = &unk_47C3F8;
    *(void *)&buf[8] = __p;
    dispatch_sync(v44, buf);
  }

LABEL_67:
    uint64_t v44 = *(void *)(a1 + 104);
    strcpy(v70, "rrapbolg");
    v70[9] = 0;
    *(_WORD *)&v70[10] = 0;
    unint64_t v45 = sub_5C2F8(v44);
    *((void *)&v48 + 1) = v46;
    *(void *)&__int128 v48 = v45;
    uint64_t v47 = v48 >> 32;
    if ((v47 & 0xFF00000000LL) == 0
      || !(_DWORD)v47
      || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0)
    {
      v33 >>= 4;
      v42 >>= 4;
    }

    goto LABEL_71;
  }

  if (v14 > 1885762591)
  {
    if (v14 != 1885762592)
    {
      if (v14 == 1885762657)
      {
        *(void *)buf = a1 + 440;
        buf[8] = 1;
        sub_92F80(a1 + 440);
        memcpy(a6, *(const void **)(a1 + 232), v13);
        *a5 = v13;
        p_p = (void **)buf;
LABEL_52:
        sub_93128((uint64_t)p_p);
        return;
      }

    sub_1269B4(v16 + 16, v32, (void *)(v16 + 16));
    sub_126C6C(v16);
    goto LABEL_68;
  }

      uint64_t v47 = std::__shared_weak_count::lock(v33);
      if (v47) {
        __int128 v48 = v34;
      }
      else {
        __int128 v48 = 0LL;
      }
      if (!v41)
      {
LABEL_79:
        unsigned int v51 = v48 == 0;
        goto LABEL_80;
      }

    if (a1 == v7) {
      return result;
    }
    return 0LL;
  }

  if (a1 > 1885631343)
  {
    if (a1 > 1886152040)
    {
      if (a1 <= 1886154612)
      {
        if (a1 == 1886152041) {
          return result;
        }
        unsigned int v12 = 25967;
      }

      else
      {
        if (a1 == 1886154613 || a1 == 1886155113) {
          return result;
        }
        unsigned int v12 = 29039;
      }

      uint64_t v7 = v12 | 0x706C0000;
    }

    else
    {
      if (a1 <= 1885891432)
      {
        if (a1 == 1885631344 || a1 == 1885888867) {
          return result;
        }
        int v8 = 25709;
      }

      else
      {
        int v8 = 27497;
      }

      uint64_t v7 = v8 | 0x70680000;
    }

    goto LABEL_67;
  }

  if (a1 <= 1885433952)
  {
    if (a1 <= 1885432181)
    {
      if (a1 == 1751409257) {
        return result;
      }
      int v11 = 25460;
    }

    else
    {
      if (a1 == 1885432182 || a1 == 1885433443) {
        return result;
      }
      int v11 = 28704;
    }

    uint64_t v7 = v11 | 0x70610000;
    goto LABEL_67;
  }

  if (a1 > 1885434466)
  {
    if (a1 == 1885434467 || a1 == 1885496941) {
      return result;
    }
    uint64_t v7 = 1885629550;
    goto LABEL_67;
  }

  int v6 = a1 - 1885433953;
  if (v6 > 0x16) {
    return 0LL;
  }
  uint64_t v4 = 1 << v6;
  BOOL v5 = 4458497;
LABEL_12:
  if ((v4 & v5) == 0) {
    return 0LL;
  }
  return result;
}

    if ((byte_48E780 & 1) == 0)
    {
      byte_48E780 = 1;
      *(void *)buf = 0LL;
      uint64_t v46 = sub_14BC34(@"CodecInputGain", (void **)buf);
      uint64_t v47 = *(double *)buf;
      if (!v46) {
        uint64_t v47 = 0.0;
      }
      LOBYTE(qword_48E778) = v46;
      *((float *)&qword_48E778 + 1) = v47;
      if (v46)
      {
        __int128 v48 = (os_log_t *)sub_138E8(13);
        int v49 = *v48;
        if (*v48)
        {
          if (os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            unsigned __int8 v142 = 1024;
            CFTypeRef v143 = 720;
            char v144 = 2080;
            char v145 = COERCE_DOUBLE("CodecInputGain");
            v146 = 2048;
            *(double *)v147 = *((float *)&qword_48E778 + 1);
            _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %f dB",  buf,  0x26u);
          }
        }
      }
    }

    if (!(_BYTE)qword_48E778) {
      goto LABEL_80;
    }
    size_t v37 = HIDWORD(qword_48E778);
    __int128 v50 = *((float *)&qword_48E778 + 1);
    unsigned int v51 = sub_138E8(20);
    std::string::size_type v52 = sub_138E8(38);
    v53 = 0;
    __int128 v54 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v55 = *(void *)(v51 + 8);
    while (1)
    {
      __int128 v56 = *(int *)&buf[4 * v54];
      v57 = v53;
      if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
        break;
      }
      v53 = 1;
      __int128 v54 = 1LL;
      if ((v57 & 1) != 0)
      {
        if ((v55 & 1) == 0) {
          goto LABEL_111;
        }
        goto LABEL_101;
      }
    }

    if ((v55 & v56) == 0) {
      unsigned int v51 = v52;
    }
    if ((*(void *)(v51 + 8) & 1) == 0) {
      goto LABEL_111;
    }
LABEL_101:
    v71 = *(os_log_s **)v51;
    if (v71 && os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      unsigned __int8 v142 = 1024;
      CFTypeRef v143 = 706;
      char v144 = 2048;
      char v145 = v50;
      char v72 = "%25s:%-5d Caller requested a check for default volume override, and we found %f.";
LABEL_110:
      _os_log_impl(&dword_0, v71, OS_LOG_TYPE_DEBUG, v72, buf, 0x1Cu);
    }

    unsigned int v42 = (os_log_t *)sub_138E8(13);
    int v43 = *v42;
    if (*v42)
    {
      if (os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 745;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() ret urned true, but I do not know about it.",  buf,  0x12u);
      }
    }

    return;
  }

  uint64_t v47 = *(void *)(a1 + 320);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)a6;
  if (v47 | *(void *)(a1 + 320))
  {
    __int128 v48 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 268));
    int v49 = *(_DWORD *)(a1 + 264);
    unsigned int v51 = *(void *)(a1 + 280);
    __int128 v50 = *(std::__shared_weak_count **)(a1 + 288);
    if (v50)
    {
      p_shared_weak_owners = (unint64_t *)&v50->__shared_weak_owners_;
      do
        v53 = __ldxr(p_shared_weak_owners);
      while (__stxr(v53 + 1, p_shared_weak_owners));
      uint64_t v104 = v48;
      *(_DWORD *)&buf[16] = v49;
      *(void *)&v114[4] = v51;
      *(void *)&v114[12] = v50;
      do
        __int128 v54 = __ldxr(p_shared_weak_owners);
      while (__stxr(v54 + 1, p_shared_weak_owners));
      std::__shared_weak_count::__release_weak(v50);
      __int128 v48 = v104;
    }

    else
    {
      *(_DWORD *)&buf[16] = *(_DWORD *)(a1 + 264);
      *(_OWORD *)&v114[4] = v51;
    }

    *(float64x2_t *)buf = v48;
    memset(v107, 0, sizeof(v107));
    sub_A9784( v107,  *(const void **)(a1 + 360),  *(void *)(a1 + 368),  (uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 4);
    sub_1C44F4(a1, (double **)v107, *(unsigned int *)(a1 + 204) | 0x100000000LL, (uint64_t)buf);
    if (v107[0]) {
      operator delete(v107[0]);
    }
    if (*(void *)&v114[12]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v114[12]);
    }
  }

  if (*(_BYTE *)(a1 + 312) && (*(void *)(a1 + 320) || v47 && *(_DWORD *)(a1 + 264))) {
    sub_1C5544(a1, 2);
  }
}

  std::string::size_type v58 = (unint64_t *)&v52->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }

LABEL_40:
      sub_27D9BC((uint64_t *)buf, (uint64_t *)(a1 + 80), "", 646);
      (*(void (**)(void, int *, uint64_t, uint64_t, unsigned int *, unsigned int *))(**(void **)buf + 40LL))( *(void *)buf,  a2,  a3,  a4,  a5,  a6);
      int v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v35 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }

      return;
    }

    if (a5 != 8)
    {
      uint64_t v46 = (os_log_t *)sub_138E8(13);
      uint64_t v47 = *v46;
      if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 340;
        _os_log_impl(&dword_0, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      __int128 v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v48, "Precondition failure.");
    }

    unint64_t v30 = (const __CFDictionary *)CFRetain(*(CFTypeRef *)a6);
    __int128 v56 = &off_486378;
    theDict = v30;
    if ((sub_782DC(v30, @"ducking type") & 1) != 0)
    {
      if ((sub_782DC(theDict, @"ducking enable") & 1) != 0)
      {
        if ((sub_782DC(theDict, @"ducking gain") & 1) != 0)
        {
          if ((sub_782DC(theDict, @"ducking time") & 1) != 0)
          {
            sub_78300((uint64_t)buf, theDict, @"ducking type");
            unint64_t v31 = sub_3A030(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict, @"ducking enable");
            int v32 = sub_3A030(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict, @"ducking time");
            unsigned int v33 = sub_783E0(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            sub_78300((uint64_t)buf, theDict, @"ducking gain");
            int v34 = sub_783E0(*(const __CFNumber **)&buf[8]);
            sub_39FD8(buf);
            (*(void (**)(double, const __CFNumber *, const __CFNumber *, float, float))(**(void **)&v15
                                                                                                 + 64LL))( COERCE_DOUBLE(*(void *)&v15),  v31,  v32,  v34,  v33);
            sub_39FD8(&v56);
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              unint64_t v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (v36) {
              return;
            }
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            double v27 = v14;
LABEL_50:
            std::__shared_weak_count::__release_weak(v27);
            return;
          }

          __int128 v54 = (os_log_t *)sub_138E8(13);
          __int128 v50 = *v54;
          if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 347;
            unsigned int v51 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVir"
                  "tualAudioPlugInDuckingTimeKey is required";
            goto LABEL_83;
          }

    if (!v4 && v2 != v5) {
      return 0LL;
    }
    return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
  }

  if (v2 <= 1752462194)
  {
    uint64_t v4 = v2 == 1684826732 || v2 == 1685021040;
    BOOL v5 = 1752327777;
    goto LABEL_40;
  }

  if (v2 > 1819503986)
  {
    if (v2 == 1819503987) {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
    }
    int v3 = 1819505773;
  }

  else
  {
    if (v2 == 1752462195) {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
    }
    int v3 = 1767989616;
  }

  if (v2 != v3) {
    return 0LL;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24LL))(*(void *)(a1 + 192));
}

        if (__p.__r_.__value_.__s.__data_[16]) {
          sub_39FD8(&__p);
        }
        if (v25) {
          goto LABEL_49;
        }
LABEL_43:
        if (++v7 == v4) {
          goto LABEL_52;
        }
      }

      int v25 = 0;
      if ((buf[23] & 0x80) == 0) {
        goto LABEL_40;
      }
LABEL_36:
      uint64_t v26 = *(void **)buf;
LABEL_38:
      operator delete(v26);
      goto LABEL_40;
    }

    if (a15) {
      sub_308B68((uint64_t)v72, 0x6F72656E64737067LL, 1u);
    }
    else {
      std::string __p = *(std::string *)a4;
    }
    uint64_t v68 = 1;
    else {
      __dst = v74;
    }
    CFIndex v66 = 1;
    std::string::size_type v78 = 0LL;
    memset(buf, 0, sizeof(buf));
    unsigned int v79 = *(_OWORD *)&qword_402EFC;
    __int128 v80 = 2LL;
    sub_83660((uint64_t)buf, (int *)&v79, 3LL);
    sub_302600(a1, (char *)a4, v24, &v75, &__p, &__dst, (uint64_t)a6, (int **)&v69, 0.0, (uint64_t)v72, 1, (uint64_t)buf);
    sub_83284((uint64_t)buf);
    int64x2_t v40 = qword_49D7C0;
    unsigned int v41 = (std::__shared_weak_count *)qword_49D7C8;
    if (qword_49D7C8)
    {
      unsigned int v42 = (unint64_t *)(qword_49D7C8 + 8);
      do
        int v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }

    sub_145A88(a1, v40, (uint64_t)v41, 0);
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }

    uint64_t v46 = qword_49D7A8;
    uint64_t v47 = (std::__shared_weak_count *)qword_49D7B0;
    if (qword_49D7B0)
    {
      __int128 v48 = (unint64_t *)(qword_49D7B0 + 8);
      do
        int v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }

    sub_143208(a1, v46, (uint64_t)v47);
    if (v47)
    {
      __int128 v50 = (unint64_t *)&v47->__shared_owners_;
      do
        unsigned int v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (a12 == 2)
    {
      std::string::size_type v58 = qword_49D790;
      v53 = *(std::__shared_weak_count **)algn_49D798;
      if (*(void *)algn_49D798)
      {
        v59 = (unint64_t *)(*(void *)algn_49D798 + 8LL);
        do
          __int128 v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }

      sub_143208(a1, v58, (uint64_t)v53);
      if (!v53) {
        goto LABEL_87;
      }
      char v61 = (unint64_t *)&v53->__shared_owners_;
      do
        v57 = __ldaxr(v61);
      while (__stlxr(v57 - 1, v61));
    }

    else
    {
      if (a12 != 1) {
        goto LABEL_87;
      }
      std::string::size_type v52 = qword_49D520;
      v53 = *(std::__shared_weak_count **)algn_49D528;
      if (*(void *)algn_49D528)
      {
        __int128 v54 = (unint64_t *)(*(void *)algn_49D528 + 8LL);
        do
          uint64_t v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }

      sub_143208(a1, v52, (uint64_t)v53);
      if (!v53) {
        goto LABEL_87;
      }
      __int128 v56 = (unint64_t *)&v53->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
    }

    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }

LABEL_17:
    int v17 = sub_6ABD4(a1, (uint64_t)a6, v14);
    int v18 = v17;
    if (*(_BYTE *)(a1 + 400))
    {
      if (v17)
      {
        unint64_t v19 = (os_log_t *)sub_138E8(13);
        uint64_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 572;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: error getting current stream format",  buf,  0x12u);
        }

        char v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v21 = &off_4865A0;
        v21[2] = v18;
      }
    }

    else if (v17)
    {
      v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)v59 = &off_4865A0;
      v59[2] = v18;
    }

    *a5 = v13;
    return;
  }

  if (v14 != 1685025633)
  {
    if (v14 == 1718641517)
    {
      unsigned int v15 = *(unsigned __int8 *)(a1 + 728);
LABEL_11:
      *a6 = v15;
      return;
    }

    goto LABEL_40;
  }

  uint64_t v22 = *(void *)(a1 + 136);
  if (*(_BYTE *)(v22 + 796)) {
    int v23 = *(unsigned __int8 *)(v22 + 797);
  }
  else {
    int v23 = 0;
  }
  sub_5CABC(v23, a5, a6);
}

    if (v4 || v3 == v5) {
      return 1LL;
    }
    return v2;
  }

  if (v3 != 1986098020)
  {
    uint64_t v4 = v3 == 1986225518;
    BOOL v5 = 1986229104;
    goto LABEL_17;
  }

  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 184);
  if (!v9) {
    return 0LL;
  }
  unint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    return 0LL;
  }
  int v11 = v10;
  unsigned int v12 = *(void *)(a1 + 176);
  if (v12) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 72LL))(v12);
  }
  else {
    uint64_t v2 = 0LL;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    int v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  return v2;
}

    if (v4 != v7)
    {
LABEL_23:
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      BOOL v5 = *v9;
      if (!*v9) {
        return v5;
      }
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v19 = 136315394;
        *(void *)&v19[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&v19[12] = 1024;
        *(_DWORD *)&v19[14] = 160;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about it.",  v19,  0x12u);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (v4 > 1986290210)
  {
    if (v4 > 1987013740)
    {
      if (v4 == 1987013741) {
        return v5;
      }
      int v6 = 2021027692;
      goto LABEL_22;
    }

    if (v4 != 1986290211)
    {
      int v6 = 1986817377;
LABEL_22:
      if (v4 == v6) {
        return v5;
      }
      goto LABEL_23;
    }

    return 0LL;
  }

  if (v4 != 1986098020)
  {
    if (v4 == 1986225518) {
      return 0LL;
    }
    uint64_t v7 = 1986229104;
    goto LABEL_17;
  }

  unint64_t v10 = (std::__shared_weak_count *)a1[23];
  if (!v10) {
    return 0LL;
  }
  int v11 = std::__shared_weak_count::lock(v10);
  *(void *)&v19[8] = v11;
  if (!v11) {
    return 0LL;
  }
  unsigned int v12 = v11;
  unsigned int v13 = a1[22];
  *(void *)unint64_t v19 = v13;
  if (v13) {
    BOOL v5 = (os_log_s *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 72LL))(v13);
  }
  else {
    BOOL v5 = 0LL;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    unsigned int v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  return v5;
}

  if (v6 == a3) {
    sub_B7478((uint64_t)v22, &v23);
  }
  else {
    (*(void (**)(void *__return_ptr, double))(**(void **)(a2 + 1008) + 192LL))(v22, a3);
  }
  if (v6 == a3) {
    goto LABEL_43;
  }
  if (v24[1] != (void *)v22[2])
  {
    int v17 = 1;
    goto LABEL_45;
  }

  int v14 = (double *)v23;
  if ((void **)v23 == v24)
  {
LABEL_43:
    int v17 = 0;
  }

  else
  {
    unsigned int v15 = (double *)v22[0];
    while (1)
    {
      unint64_t v16 = v14[5] == v15[5] && *((void *)v14 + 4) == *((void *)v15 + 4);
      int v17 = !v16;
      if (!v16) {
        break;
      }
      int v18 = (double *)*((void *)v14 + 1);
      unint64_t v19 = v14;
      if (v18)
      {
        do
        {
          int v14 = v18;
          int v18 = *(double **)v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          int v14 = (double *)*((void *)v19 + 2);
          unint64_t v16 = *(void *)v14 == (void)v19;
          unint64_t v19 = v14;
        }

        while (!v16);
      }

      uint64_t v20 = (double *)*((void *)v15 + 1);
      if (v20)
      {
        do
        {
          char v21 = v20;
          uint64_t v20 = *(double **)v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          char v21 = (double *)*((void *)v15 + 2);
          unint64_t v16 = *(void *)v21 == (void)v15;
          unsigned int v15 = v21;
        }

        while (!v16);
      }

      unsigned int v15 = v21;
    }
  }

    if (v12)
    {
      uint64_t v22 = (os_log_t *)sub_138E8(13);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v31, 1936748595LL);
        int v24 = v32;
        int v25 = (void **)v31[0];
        sub_2CA1C(__p, a3);
        uint64_t v26 = v31;
        if (v24 < 0) {
          uint64_t v26 = v25;
        }
        if (v30 >= 0) {
          double v27 = __p;
        }
        else {
          double v27 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        int v34 = 1024;
        uint64_t v35 = 3377;
        unint64_t v36 = 2080;
        *(void *)size_t v37 = v26;
        *(_WORD *)&v37[8] = 2080;
        uint64_t v38 = v27;
        __int128 v39 = 1024;
        int64x2_t v40 = v12;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: chain->GetDSPProperty failed for AU (%s) property % s with error %d.",  buf,  0x2Cu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31[0]);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v12;
    }

    return 0LL;
  }

  return v5;
}

      int v17 = *(id *)sub_138E8(24);
      int v18 = v17;
      if (v17)
      {
        unint64_t v19 = (os_log_s *)v17;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(__p, a3);
          uint64_t v20 = v104 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 493;
          v106 = 2080;
          v107 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unknown DSP chain type '%s'. Creating default chain.",  buf,  0x1Cu);
          if (v104 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      unint64_t v16 = operator new(0x470uLL);
      sub_196EFC((uint64_t)v16, (__int128 *)a2);
LABEL_26:
      sub_1974A4((uint64_t)a1, (uint64_t)v16);
      return;
    }

    double v29 = sub_14D9C8();
    unint64_t v30 = (os_log_s *)*(id *)sub_138E8(24);
    unint64_t v31 = v30;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      int v32 = "speaker protection";
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_DWORD *)buf = 136315650;
      if (v29) {
        int v32 = "default";
      }
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 460;
      v106 = 2080;
      v107 = (void *)v32;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating %s DSP chain.", buf, 0x1Cu);
    }

    if ((v29 & 1) != 0) {
      goto LABEL_10;
    }
    unsigned int v33 = (std::__shared_weak_count_vtbl *)operator new(0x478uLL);
    sub_196EFC((uint64_t)v33, (__int128 *)a2);
    v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_480E28;
    __asm { FMOV            V0.2S, #1.0 }

    v33[28].__on_zero_shared = _D0;
    __int128 v39 = (std::__shared_weak_count *)operator new(0x20uLL);
    v39->__shared_owners_ = 0LL;
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_473C40;
    v39->__shared_weak_owners_ = 0LL;
    v39[1].__vftable = v33;
    *(void *)&unsigned int v41 = v33;
    *((void *)&v41 + 1) = v39;
    on_zero_shared = (std::__shared_weak_count *)v33->__on_zero_shared;
    if (on_zero_shared)
    {
      if (on_zero_shared->__shared_owners_ != -1)
      {
LABEL_58:
        __int128 v50 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v41;
        if (!v50) {
          return;
        }
        unsigned int v51 = (unint64_t *)&v50->__shared_owners_;
        do
          std::string::size_type v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        goto LABEL_116;
      }

      do
        int v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
      v97 = v41;
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        unint64_t v45 = __ldxr(p_shared_weak_owners);
      while (__stxr(v45 + 1, p_shared_weak_owners));
      v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
      v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v39;
      std::__shared_weak_count::__release_weak(on_zero_shared);
      unsigned int v41 = v97;
    }

    else
    {
      do
        uint64_t v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
      uint64_t v47 = (unint64_t *)&v39->__shared_weak_owners_;
      do
        __int128 v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
      v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v39;
    }

    do
      int v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      CFIndex v98 = v41;
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      unsigned int v41 = v98;
    }

    goto LABEL_58;
  }

  if ((_DWORD)a3 != 1668049011)
  {
    if ((_DWORD)a3 == 1668051824)
    {
      uint64_t v7 = sub_14D9C8();
      int v8 = (os_log_s *)*(id *)sub_138E8(24);
      uint64_t v9 = v8;
      if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v10 = "closed loop speaker protection";
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_DWORD *)buf = 136315650;
        if (v7) {
          unint64_t v10 = "default";
        }
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 474;
        v106 = 2080;
        v107 = (void *)v10;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating %s DSP chain.", buf, 0x1Cu);
      }

      int v11 = (void *)sub_EAD14();
      *(void *)buf = CFStringCreateWithCString(0LL, "Speaker", 0x600u);
      buf[8] = 1;
      unsigned int v12 = sub_EAE28(v11, (CFStringRef *)buf);
      sub_19DFC((uint64_t)buf);
      if ((v7 & 1) != 0)
      {
LABEL_10:
        unsigned int v13 = operator new(0x470uLL);
        sub_196EFC((uint64_t)v13, (__int128 *)a2);
        sub_1974A4((uint64_t)a1, (uint64_t)v13);
        return;
      }

      v53 = operator new(0x4B8uLL);
      sub_196EFC((uint64_t)v53, (__int128 *)a2);
      os_log_t *v53 = off_481DB0;
      *(_DWORD *)buf = 1886613611;
      sub_7A22C((uint64_t)(v53 + 142), (unsigned int *)buf, 1LL);
      LODWORD(__p[0]) = 0;
      sub_15FFCC(v53 + 145, (int *)__p, 1LL);
      v53[148] = sub_336C00;
      v53[149] = v53;
      v53[150] = v12;
      __int128 v54 = sub_32918();
      sub_395880(v54, (uint64_t)(v53 + 142));
      uint64_t v55 = (std::__shared_weak_count *)operator new(0x20uLL);
      v55->__shared_owners_ = 0LL;
      __int128 v56 = (unint64_t *)&v55->__shared_owners_;
      v55->__vftable = (std::__shared_weak_count_vtbl *)&off_473C78;
      v55->__shared_weak_owners_ = 0LL;
      v55[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
      *(void *)&v57 = v53;
      *((void *)&v57 + 1) = v55;
      std::string::size_type v58 = (std::__shared_weak_count *)v53[2];
      if (v58)
      {
        if (v58->__shared_owners_ != -1)
        {
LABEL_75:
          __int128 v50 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v57;
          if (!v50) {
            return;
          }
          CFIndex v66 = (unint64_t *)&v50->__shared_owners_;
          do
            std::string::size_type v52 = __ldaxr(v66);
          while (__stlxr(v52 - 1, v66));
          goto LABEL_116;
        }

        do
          v59 = __ldxr(v56);
        while (__stxr(v59 + 1, v56));
        int v99 = v57;
        __int128 v60 = (unint64_t *)&v55->__shared_weak_owners_;
        do
          char v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        v53[1] = v53;
        v53[2] = v55;
        std::__shared_weak_count::__release_weak(v58);
        v57 = v99;
      }

      else
      {
        do
          char v62 = __ldxr(v56);
        while (__stxr(v62 + 1, v56));
        v63 = (unint64_t *)&v55->__shared_weak_owners_;
        do
          int v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
        v53[1] = v53;
        v53[2] = v55;
      }

      do
        unsigned int v65 = __ldaxr(v56);
      while (__stlxr(v65 - 1, v56));
      if (!v65)
      {
        CFTypeRef v100 = v57;
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        v57 = v100;
      }

      goto LABEL_75;
    }

    goto LABEL_17;
  }

  uint64_t v22 = operator new(0x480uLL);
  sub_196EFC((uint64_t)v22, (__int128 *)a2);
  *(void *)uint64_t v22 = off_47C030;
  *((_OWORD *)v22 + 71) = 0u;
  if (a4[1] - *a4 < 9uLL || **(void **)(*a4 + 8LL) == *(void *)(*(void *)(*a4 + 8LL) + 8LL))
  {
    __int128 v92 = (os_log_t *)sub_138E8(13);
    v93 = *v92;
    if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 96;
      _os_log_impl(&dword_0, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
LABEL_127:
  }

  int v23 = (os_log_t *)sub_138E8(24);
  int v24 = *v23;
  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v25 = *(void **)a2;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 98;
    v106 = 2080;
    v107 = v25;
    _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating DSPChain_HAL_ClosedLoopSpeakerProtection - %s",  buf,  0x1Cu);
  }

  uint64_t v26 = *(void ***)(*a4 + 8LL);
  if (qword_49CDF8)
  {
    double v27 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_49CDF8);
    double v28 = v27;
    if (v27 && qword_49CDF0)
    {
      *(void *)buf = qword_49CDF0;
      *(void *)&buf[8] = v27;
      goto LABEL_89;
    }
  }

  else
  {
    double v28 = 0LL;
  }

  uint64_t v67 = operator new(0xD0uLL);
  v67[1] = 0LL;
  v67[2] = 0LL;
  std::runtime_error *v67 = off_47C108;
  sub_2C2C38((uint64_t)(v67 + 3), v26, 1668049011);
  *(void *)buf = v67 + 3;
  *(void *)&buf[8] = v67;
  sub_AFDAC((uint64_t)buf, *(void **)buf, *(uint64_t *)buf);
  uint64_t v68 = v67 + 2;
  do
    uint64_t v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
  qword_49CDF0 = (uint64_t)(v67 + 3);
  v70 = (std::__shared_weak_count *)qword_49CDF8;
  qword_49CDF8 = (uint64_t)v67;
  if (v70) {
    std::__shared_weak_count::__release_weak(v70);
  }
  if (v28)
  {
    v71 = (unint64_t *)&v28->__shared_owners_;
    do
      char v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

    uint64_t v7 = 0LL;
    return v7 | v5 & 0x100000000LL;
  }

  if (v7 != 1) {
    goto LABEL_17;
  }
  uint64_t v7 = 0LL;
  if (a2 <= 1987077986)
  {
    if (a2 == 1768057203) {
      return v7 | v5 & 0x100000000LL;
    }
    uint64_t v9 = 1919776355;
  }

  else
  {
    if (a2 == 1987077987 || a2 == 1987081833) {
      return v7 | v5 & 0x100000000LL;
    }
    uint64_t v9 = 1987081839;
  }

  if (a2 != v9) {
    uint64_t v7 = 1LL;
  }
  return v7 | v5 & 0x100000000LL;
}

  int v18 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      uint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

      sub_232A4(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
      return result;
    }

    char v21 = *a5;
    if (v21 != (*(unsigned int (**)(uint64_t, int *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      unint64_t v36 = (os_log_t *)sub_138E8(13);
      size_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(void *)ioDataSize = *(void *)a2;
        uint64_t v47 = a2[2];
        sub_613AC((uint64_t)&inAddress, ioDataSize);
        uint64_t v38 = v49;
        __int128 v39 = *(AudioObjectPropertyAddress **)&inAddress.mSelector;
        int64x2_t v40 = *a5;
        unsigned int v41 = (*(uint64_t (**)(uint64_t, int *, uint64_t, const void *))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
        p_inAddress = &inAddress;
        *(_DWORD *)outData = 136316162;
        *(void *)&outData[4] = "Device_USB_Aspen.cpp";
        if (v38 < 0) {
          p_inAddress = v39;
        }
        unsigned int v51 = 1024;
        std::string::size_type v52 = 405;
        v53 = 2080;
        __int128 v54 = (const char *)p_inAddress;
        uint64_t v55 = 1024;
        LODWORD(v56[0]) = v40;
        WORD2(v56[0]) = 1024;
        *(_DWORD *)((char *)v56 + 6) = v41;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          outData,
          0x28u);
        if (v49 < 0) {
          operator delete(*(void **)&inAddress.mSelector);
        }
      }

      int v43 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v43 = &off_4865A0;
      v43[2] = 561211770;
    }

    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    inAddress.mSelector = 1986290211;
    *(void *)&inAddress.mScope = *(void *)(a2 + 1);
    if (AudioObjectHasProperty(v22, &inAddress))
    {
      ioDataSize[0] = sub_37408(v22, &inAddress, 0, 0LL);
      if (ioDataSize[0])
      {
        PropertyData = AudioObjectGetPropertyData(v22, &inAddress, 0, 0LL, ioDataSize, outData);
        if (!PropertyData)
        {
          uint64_t result = *(double *)outData;
          *a6 = result;
          return result;
        }
      }

      else
      {
        PropertyData = 2003329396;
      }
    }

    else
    {
      PropertyData = 2003332927;
    }

    unint64_t v45 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v45 = &off_4865A0;
    v45[2] = PropertyData;
  }

  unint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  sub_1EFA4C((CFTypeRef *)outData, v19, COERCE_DOUBLE(1735159650LL));
  uint64_t v20 = *(const void **)outData;
  if (!*(void *)outData)
  {
    uint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
  }

  *(_DWORD *)a6 = sub_8D7E0(*(const __CFNumber **)outData);
  CFRelease(v20);
  return result;
}

  int v17 = (uint64_t *)operator new(0x320uLL);
  v110 = v17;
  if (!a3[2])
  {
    v102 = (os_log_t *)sub_138E8(13);
    v103 = *v102;
    if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Broadcast.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1;
      _os_log_impl( &dword_0,  v103,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AggregateDevice_Broadcast_SpeakerProtection has fewer than %u output devices",  buf,  0x18u);
    }

    uint64_t v104 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v104, "AggregateDevice_Broadcast_SpeakerProtection has fewer than %u output devices");
  }

  v118 = &v118;
  v119 = (uint64_t *)&v118;
  uint64_t v120 = 0LL;
  v135[0] = (uint64_t *)v135;
  v135[1] = (uint64_t *)v135;
  std::string v136 = 0LL;
  for (m = (void *)a3[1]; m != a3; m = (void *)m[1])
  {
    sub_85EA4(buf, m + 2);
    unint64_t v19 = *(void *)buf;
    uint64_t v20 = (uint64_t *)operator new(0x18uLL);
    v20[1] = (uint64_t)v135;
    v20[2] = v19;
    char v21 = v135[0];
    *uint64_t v20 = (uint64_t)v135[0];
    v21[1] = (uint64_t)v20;
    v135[0] = v20;
    ++v136;
    sub_85D64(v134);
    sub_85D64(v133);
    uint64_t v125 = (uint8_t *)&v129 + 8;
    sub_85DA4((void ***)&v125);
    uint64_t v125 = &buf[8];
    sub_85DA4((void ***)&v125);
  }

  uint64_t v22 = sub_AB4CC((uint64_t)v135);
  id v105 = a4;
  int v23 = (uint64_t)v118;
  uint64_t *v22 = v118;
  v22[1] = &v118;
  *(void *)(v23 + 8) = v22;
  v118 = v22;
  ++v120;
  int v24 = (os_log_t *)sub_138E8(16);
  int v25 = *v24;
  if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Broadcast.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 63;
    _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Built topology for broadcast aggregate device:",  buf,  0x12u);
  }

  uint64_t v26 = v119 + 2;
  double v27 = v119[3];
  if ((uint64_t *)v27 != v119 + 2)
  {
    do
    {
      double v28 = (os_log_t *)sub_138E8(16);
      double v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v30 = (*(uint64_t (**)(void))(**(void **)(v27 + 16) + 120LL))(*(void *)(v27 + 16));
        (*(void (**)(uint8_t **__return_ptr))(**(void **)(v27 + 16) + 128LL))(&v125);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Broadcast.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 70;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v30;
        LOWORD(v129) = 2112;
        *(void *)((char *)&v129 + 2) = v125;
        _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d - PhysicalDevice ID %u (uid: %@).", buf, 0x22u);
        sub_19DFC((uint64_t)&v125);
        int v17 = v110;
      }

      double v27 = *(void *)(v27 + 8);
    }

    while ((uint64_t *)v27 != v26);
  }

  sub_68314(v135);
  sub_22A9D0((uint64_t)v17, (uint64_t)&v118, (uint64_t)a3, (uint64_t)v112, v108, v114, v107, v105);
  sub_AB45C((uint64_t *)&v118);
  sub_2315F8(v17);
  uint64_t v125 = (uint8_t *)&v125;
  std::string v126 = &v125;
  v127 = 0LL;
  for (n = (void *)a3[1]; n != a3; n = (void *)n[1])
  {
    int v32 = n[7] - n[6];
    if (v32)
    {
      unsigned int v33 = 0LL;
      int v34 = v32 / 24;
      if (v34 <= 1) {
        uint64_t v35 = 1LL;
      }
      else {
        uint64_t v35 = v34;
      }
      do
      {
        unint64_t v36 = n[6] + v33;
        if (*(void *)(v36 + 16)) {
          sub_134D88(&v125, (uint64_t *)&v125, *(void **)(v36 + 8), (void *)v36);
        }
        v33 += 24LL;
        --v35;
      }

      while (v35);
    }
  }

  v124 = 0LL;
  size_t v37 = v109[34];
  *(void *)buf = &buf[8];
  *(void *)&buf[8] = 0LL;
  *((void *)&v129 + 1) = 0LL;
  CFStringRef v130 = 0LL;
  *(void *)&buf[16] = 0LL;
  *(void *)&unsigned __int8 v129 = (char *)&v129 + 8;
  v132 = 0LL;
  v133 = 0LL;
  v131 = &v132;
  uint64_t v38 = *((void *)v112 + 5);
  v135[0] = *(uint64_t **)(v109 + 31);
  sub_1F7320((uint64_t *)v116, v37, v111, &v125, (uint64_t)buf, v38, (unsigned int *)v135, (uint64_t *)&v124);
  sub_32C8C(v132);
  sub_F2A9C(*((void **)&v129 + 1));
  sub_F2A9C(*(void **)&buf[8]);
  __int128 v39 = (std::__shared_weak_count *)v17[99];
  v123[0] = (std::__shared_weak_count *)v17[98];
  v123[1] = v39;
  if (v39)
  {
    int64x2_t v40 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      unsigned int v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }

  *(_OWORD *)CFTypeRef v122 = v116[0];
  v116[0] = 0uLL;
  unsigned int v42 = v124;
  *(void *)buf = &buf[8];
  *(void *)&buf[8] = 0LL;
  *((void *)&v129 + 1) = 0LL;
  CFStringRef v130 = 0LL;
  *(void *)&buf[16] = 0LL;
  *(void *)&unsigned __int8 v129 = (char *)&v129 + 8;
  v132 = 0LL;
  v133 = 0LL;
  v131 = &v132;
  sub_280F54((uint64_t)v135, (uint64_t)buf, *((void *)v112 + 5), *v112, 1768776806LL);
  int v43 = (std::__shared_weak_count_vtbl *)sub_22B748( (uint64_t)v17,  (uint64_t *)v123,  &v125,  v122,  (uint64_t)v42,  (uint64_t)v135);
  sub_32C8C(v132);
  sub_F2A9C(*((void **)&v129 + 1));
  sub_F2A9C(*(void **)&buf[8]);
  uint64_t v44 = v122[1];
  if (v122[1])
  {
    unint64_t v45 = &v122[1]->__shared_owners_;
    do
      uint64_t v46 = __ldaxr((unint64_t *)v45);
    while (__stlxr(v46 - 1, (unint64_t *)v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  if (v123[1]) {
    std::__shared_weak_count::__release_weak(v123[1]);
  }
  memset(buf, 0, sizeof(buf));
  *(void *)&std::string v121 = v43;
  if (v43)
  {
    uint64_t v47 = (std::__shared_weak_count *)operator new(0x20uLL);
    v47->__vftable = (std::__shared_weak_count_vtbl *)&off_47C9A8;
    v47->__shared_owners_ = 0LL;
    v47->__shared_weak_owners_ = 0LL;
    v47[1].__vftable = v43;
  }

  else
  {
    uint64_t v47 = 0LL;
  }

  *((void *)&v121 + 1) = v47;
  sub_85AF8(v135, &v121);
  sub_2318DC((unint64_t *)v17, (uint64_t **)buf, v135);
  v115[0] = (void **)v135;
  sub_7A668(v115);
  if (v47)
  {
    CFIndex v66 = (unint64_t *)&v47->__shared_owners_;
    do
      uint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  v135[0] = (uint64_t *)buf;
  sub_7A668((void ***)v135);
  (*(void (**)(uint64_t *))(*v17 + 600))(v17);
  uint64_t v68 = (std::__shared_weak_count *)*((void *)&v116[0] + 1);
  if (*((void *)&v116[0] + 1))
  {
    uint64_t v69 = (unint64_t *)(*((void *)&v116[0] + 1) + 8LL);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  sub_85B80((uint64_t *)&v125);
LABEL_134:
  *a5 = v17;
  *(void *)buf = v114;
  sub_7A668((void ***)buf);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

  if ((_DWORD)v6)
  {
    int v14 = (os_log_t *)sub_138E8(22);
    unsigned int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v319, v6);
      unint64_t v16 = v319[23];
      int v17 = *(_BYTE **)v319;
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      int v18 = v319;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (__p[23] >= 0) {
        unint64_t v19 = __p;
      }
      else {
        unint64_t v19 = *(_BYTE **)__p;
      }
      uint64_t v20 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1153;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v18;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v19;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v20;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error '%s' getting physical stream formats from actual stream for virtual stream '%s' of aggregate device %p.",  buf,  0x30u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v319[23] & 0x80000000) != 0)
      {
        char v21 = *(void **)v319;
LABEL_500:
        operator delete(v21);
        goto LABEL_501;
      }
    }

    goto LABEL_501;
  }

  if (sub_27DB40((uint64_t *)a1) && (_os_feature_enabled_impl("VirtualAudio", "ac3_format_in_parrot") & 1) != 0)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(22);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1168;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "%25s:%-5d Skipping format cullings on this device. Culling happens internally",  buf,  0x12u);
    }

    goto LABEL_308;
  }

  int v24 = *(void *)(a1 + 96);
  strcpy(buf, "3cadbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v25 = sub_5C2F8(v24);
  *((void *)&v28 + 1) = v26;
  *(void *)&double v28 = v25;
  double v27 = v28 >> 32;
  double v29 = (v27 & 0xFF00000000LL) == 0 || (_DWORD)v27 == 0;
  unint64_t v30 = !v29;
  unint64_t v31 = *(void *)(a1 + 104);
  if (!v31) {
    goto LABEL_59;
  }
  strcpy(buf, "+btmbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v32 = sub_5C2F8(v31);
  *((void *)&v35 + 1) = v33;
  *(void *)&uint64_t v35 = v32;
  int v34 = v35 >> 32;
  unint64_t v36 = *(void *)(a1 + 104);
  if (v36)
  {
    strcpy(buf, "+ctmbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    size_t v37 = sub_5C2F8(v36);
    *((void *)&v40 + 1) = v38;
    *(void *)&int64x2_t v40 = v37;
    __int128 v39 = v40 >> 32;
    unsigned int v42 = (v34 & 0xFF00000000LL) != 0 && (_DWORD)v34 != 0;
    if ((v39 & 0xFF00000000LL) != 0)
    {
      if ((_DWORD)v39) {
        int v43 = 1;
      }
      else {
        int v43 = v42;
      }
      if ((v43 & 1) == 0) {
        goto LABEL_59;
      }
    }

    else if (!v42)
    {
LABEL_59:
      uint64_t v44 = 0;
      goto LABEL_60;
    }

        char v21 = *((_DWORD *)a1 + 4);
        unint64_t v16 = *(void *)(v5 + 72);
        if (!v16) {
          sub_82CEC();
        }
        (*(void (**)(uint64_t, int *))(*(void *)v16 + 48LL))(v16, &v21);
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        int v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

  return sub_ADC0C(&v20);
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*((void *)a2 + 7))
  {
    unsigned int v15 = (os_log_t *)sub_138E8(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v20 = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v20[8] = 1024;
      *(_DWORD *)&v20[10] = 766;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_17;
  }

  return a1;
}

  __p.__r_.__value_.__s.__data_[0] = 0;
  v138 = 0;
  if (__s)
  {
    sub_7D084(&__dst, __s);
    if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex size = __dst.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex size = __dst.__r_.__value_.__l.__size_;
    }
    sub_D0924((uint64_t)buf, size + 10);
    if (buf[23] >= 0) {
      int v23 = buf;
    }
    else {
      int v23 = *(_BYTE **)buf;
    }
    if (size)
    {
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v24 = &__dst;
      }
      else {
        int v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      memmove(v23, v24, size);
    }

    strcpy(&v23[size], ".propstrip");
    std::string __p = *(std::string *)buf;
    v138 = 1;
    int v25 = (os_log_t *)sub_138E8(20);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      double v27 = &__dst;
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        double v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1457;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v27;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d headset propstrip name is %s", buf, 0x1Cu);
    }
  }

  v133 = (__CFString *)CFStringCreateWithCString(0LL, "Generic", 0x600u);
  LOBYTE(v134) = 1;
  sub_300D48(&__dst, (CFStringRef *)&v133);
  double v28 = strlen(a3);
  double v29 = std::string::append(&__dst, a3, v28);
  *(std::string *)buf = *v29;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  sub_19DFC((uint64_t)&v133);
  unint64_t v30 = buf[23];
  if (buf[23] >= 0) {
    unint64_t v31 = buf[23];
  }
  else {
    unint64_t v31 = *(void *)&buf[8];
  }
  sub_D0924((uint64_t)&v136, v31 + 5);
  if ((v136.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v32 = &v136;
  }
  else {
    int v32 = (std::string *)v136.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    if (v30 >= 0) {
      unsigned int v33 = buf;
    }
    else {
      unsigned int v33 = *(_BYTE **)buf;
    }
    memmove(v32, v33, v31);
  }

  strcpy((char *)v32 + v31, ".dspg");
  if (v30 < 0) {
    operator delete(*(void **)buf);
  }
  int v34 = (os_log_t *)sub_138E8(20);
  uint64_t v35 = *v34;
  if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v36 = &v136;
    if ((v136.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v36 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1465;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v36;
    _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d headset graph name is %s", buf, 0x1Cu);
  }

  if ((a6 - 1647718502) < 2 || (_DWORD)a6 == 1214394677 || (_DWORD)a6 == 1214329654)
  {
    LODWORD(v128.__r_.__value_.__l.__data_) = 1652122993;
    LODWORD(bytes.__r_.__value_.__l.__data_) = 0;
    sub_307810((uint64_t)&__dst, (int *)&v128);
    size_t v37 = CFDataCreate(0LL, (const UInt8 *)&bytes, 4LL);
    if (!v37)
    {
      CFStringRef v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v113, "Could not construct");
    }

    sub_14591C(cf, v37);
    sub_1459C8((uint64_t)&__dst.__r_.__value_.__l.__cap_, "data", cf);
    v133 = (__CFString *)&__dst;
    std::string v134 = (CFStringRef *)(&dword_0 + 2);
    uint64_t v38 = sub_5A950((uint64_t)&v133);
    __int128 v39 = 0LL;
    v131[0] = v38;
    do
    {
      int64x2_t v40 = *(const void **)((char *)&__dst + v39 + 24);
      if (v40) {
        CFRelease(v40);
      }
      unsigned int v41 = *(const void **)((char *)&__dst.__r_.__value_.__l.__cap_ + v39);
      if (v41) {
        CFRelease(v41);
      }
      v39 -= 16LL;
    }

    while (v39 != -32);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    sub_2DC034((uint64_t)&v133, v38);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
    sub_2DC450((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t)&v133);
    sub_149710((uint64_t)buf, (int *)&__dst, 1LL);
    sub_2DBF5C((uint64_t)&__dst.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v133);
    CFRelease(v38);
    sub_3078E0((uint64_t)&v139, (uint64_t)buf);
    sub_D0C4C(*(void **)&buf[16]);
    unsigned int v42 = *(void **)buf;
    *(void *)buf = 0LL;
    if (v42) {
      operator delete(v42);
    }
  }

  int v43 = sub_AADB0(a10, 2);
  uint64_t v44 = (char *)sub_7D084(buf, a3);
  unint64_t v45 = sub_307B60(v44);
  uint64_t v46 = v45;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v46) {
      goto LABEL_72;
    }
LABEL_86:
    if (!v43)
    {
      v133 = (__CFString *)&v133;
      std::string v134 = (CFStringRef *)&v133;
      CFStringRef v135 = 0LL;
      goto LABEL_97;
    }

    v53 = atomic_load((unsigned __int8 *)&qword_49D908);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_49D908))
    {
      *(_DWORD *)buf = 7;
      *(void *)&buf[8] = 1885892706LL;
      *(_DWORD *)&buf[16] = 7;
      *(void *)&buf[24] = 1885892674LL;
      sub_149910(qword_49D8F0, (uint64_t)buf, 2LL);
      for (uint64_t i = 16LL; i != -16; i -= 16LL)
        sub_2DBF5C((uint64_t)&buf[i]);
      __cxa_guard_release(&qword_49D908);
    }

    __int128 v54 = atomic_load((unsigned __int8 *)&qword_49D920);
    if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_49D920))
    {
      sub_2DC204((uint64_t)&unk_49D910, (uint64_t)qword_49D8F0);
      __cxa_guard_release(&qword_49D920);
    }

    uint64_t v55 = atomic_load((unsigned __int8 *)&qword_49D948);
    if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_49D948))
    {
      *(_DWORD *)buf = 7;
      *(void *)&buf[8] = 1936749413LL;
      sub_2FF674((uint64_t)&unk_49D928, (uint64_t)&unk_49D910, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D948);
    }

    sub_2DC274((uint64_t)buf, (uint64_t)&unk_49D928);
    sub_149910((uint64_t *)&v133, (uint64_t)buf, 1LL);
    goto LABEL_96;
  }

  if (!v45) {
    goto LABEL_86;
  }
LABEL_72:
  uint64_t v47 = atomic_load((unsigned __int8 *)&qword_49D808);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_49D808))
  {
    *(_DWORD *)buf = 7;
    *(void *)&buf[8] = 1885892727LL;
    *(_DWORD *)&buf[16] = 7;
    *(void *)&buf[24] = 1885892706LL;
    *(_DWORD *)&_BYTE buf[32] = 7;
    *(void *)&v143[4] = 1885892674LL;
    sub_149910(qword_49D7F0, (uint64_t)buf, 3LL);
    for (j = 32LL; j != -16; j -= 16LL)
      sub_2DBF5C((uint64_t)&buf[j]);
    __cxa_guard_release(&qword_49D808);
  }

  __int128 v48 = atomic_load((unsigned __int8 *)&qword_49D820);
  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_49D820))
  {
    sub_2DC204((uint64_t)&unk_49D810, (uint64_t)qword_49D7F0);
    __cxa_guard_release(&qword_49D820);
  }

  int v49 = atomic_load((unsigned __int8 *)&qword_49D848);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_49D848))
  {
    *(_DWORD *)buf = 7;
    *(void *)&buf[8] = 1936749413LL;
    sub_2FF674((uint64_t)&unk_49D828, (uint64_t)&unk_49D810, (uint64_t)buf);
    sub_2DBF5C((uint64_t)buf);
    __cxa_guard_release(&qword_49D848);
  }

  __int128 v50 = atomic_load((unsigned __int8 *)&qword_49D870);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_49D870))
  {
    *(_DWORD *)buf = 7;
    *(void *)&buf[8] = 1668641398LL;
    sub_2FF674((uint64_t)&unk_49D850, (uint64_t)&unk_49D810, (uint64_t)buf);
    sub_2DBF5C((uint64_t)buf);
    __cxa_guard_release(&qword_49D870);
  }

  unsigned int v51 = atomic_load((unsigned __int8 *)&qword_49D898);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_49D898))
  {
    *(_DWORD *)buf = 7;
    *(void *)&buf[8] = 1936746611LL;
    sub_2FF674((uint64_t)&unk_49D878, (uint64_t)&unk_49D810, (uint64_t)buf);
    sub_2DBF5C((uint64_t)buf);
    __cxa_guard_release(&qword_49D898);
  }

  sub_2DC274((uint64_t)buf, (uint64_t)&unk_49D828);
  sub_2DC274((uint64_t)&buf[16], (uint64_t)&unk_49D850);
  sub_2DC274((uint64_t)&buf[32], (uint64_t)&unk_49D878);
  sub_149910((uint64_t *)&v133, (uint64_t)buf, 3LL);
  for (k = 32LL; k != -16; k -= 16LL)
    sub_2DBF5C((uint64_t)&buf[k]);
  if (sub_307BF0((char *)&v136))
  {
    if ((int)a6 > 1647718501)
    {
    }

    else if ((_DWORD)a6 != 1633759844 && (_DWORD)a6 != 1634231920 && (_DWORD)a6 != 1635085420)
    {
      goto LABEL_97;
    }

    __int128 v56 = atomic_load((unsigned __int8 *)&qword_49D8C0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_49D8C0))
    {
      *(_DWORD *)buf = 7;
      *(void *)&buf[8] = 1751937133LL;
      sub_2FF674((uint64_t)&unk_49D8A0, (uint64_t)&unk_49D810, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D8C0);
    }

    v57 = atomic_load((unsigned __int8 *)&qword_49D8E8);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_49D8E8))
    {
      *(_DWORD *)buf = 7;
      *(void *)&buf[8] = 1751935092LL;
      sub_2FF674((uint64_t)&unk_49D8C8, (uint64_t)&unk_49D810, (uint64_t)buf);
      sub_2DBF5C((uint64_t)buf);
      __cxa_guard_release(&qword_49D8E8);
    }

    sub_2DC274((uint64_t)buf, (uint64_t)&unk_49D8A0);
    std::string::size_type v58 = (__CFString *)sub_149ED8((uint64_t)buf);
    v59 = v133;
    v58->isa = v133;
    v58->info = (uint64_t)&v133;
    v59->info = (uint64_t)v58;
    v133 = v58;
    ++v135;
    __int128 v60 = sub_2DBF5C((uint64_t)buf);
    sub_2DC274(v60, (uint64_t)&unk_49D8C8);
    char v61 = (__CFString *)sub_149ED8((uint64_t)buf);
    char v62 = v133;
    v61->isa = v133;
    v61->info = (uint64_t)&v133;
    v62->info = (uint64_t)v61;
    v133 = v61;
    ++v135;
LABEL_96:
    sub_2DBF5C((uint64_t)buf);
  }

    CFRelease(v5);
    return Value != 0;
  }

  Value = 0;
  return Value != 0;
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_DWORD *)(*(void *)a2 + 4LL) || **(_DWORD **)a2 != 1986291046)
  {
    unint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      double v28 = "RoutingHandler_SplitterBroadcast_GenericConfig1.cpp";
      double v29 = 1024;
      unint64_t v30 = 64;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_17;
  }

  sub_B8F68(&v24, (uint64_t *)(v26[0] + 32LL), "", 66);
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v24 + 272LL))(buf);
  unint64_t v10 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      unsigned int v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unsigned int v13 = (uint64_t *)operator new(0x20uLL);
  *unsigned int v13 = (uint64_t)off_482E68;
  sub_EE1E8(v13 + 1, buf);
  int v14 = operator new(0x18uLL);
  unsigned int v15 = *(void **)(a3 + 8);
  *int v14 = a3;
  v14[1] = v15;
  v14[2] = v13;
  CFTypeRef *v15 = v14;
  unint64_t v16 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v16;
  (*(void (**)(uint64_t *))(*v13 + 16))(v13);
  int v17 = sub_20D52C(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, a2, a4, a3);
  sub_85B80((uint64_t *)buf);
  sub_FF3B8((void *)v26[1]);
  return v17;
}

void sub_5A70C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_5A738(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_5A798(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v2 = *(uint64_t **)(a1 + 544);
  uint64_t v3 = *(uint64_t **)(a1 + 552);
  if (v2 != v3)
  {
    BOOL v5 = 0LL;
    unint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    do
    {
      if (*v2 && !sub_273BC(*v2, (uint64_t)&v19))
      {
        if ((unint64_t)v7 >= v6)
        {
          unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - v5) >> 3) + 1;
          if (v10 > 0x666666666666666LL) {
            sub_7A87C();
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unint64_t v11 = (unint64_t)sub_F2BEC(v11);
          }
          else {
            uint64_t v12 = 0LL;
          }
          unint64_t v13 = v11 + 8 * (((char *)v7 - v5) >> 3);
          __int128 v14 = v20;
          *(_OWORD *)unint64_t v13 = v19;
          *(_OWORD *)(v13 + 16) = v14;
          *(void *)(v13 + 32) = v21;
          if (v7 == (_OWORD *)v5)
          {
            int v18 = (_BYTE *)(v11 + 8 * (((char *)v7 - v5) >> 3));
          }

          else
          {
            unint64_t v15 = v11 + 8 * (((char *)v7 - v5) >> 3);
            do
            {
              __int128 v16 = *(_OWORD *)((char *)v7 - 40);
              __int128 v17 = *(_OWORD *)((char *)v7 - 24);
              int v18 = (_BYTE *)(v15 - 40);
              *(void *)(v15 - 8) = *((void *)v7 - 1);
              *(_OWORD *)(v15 - memset(buf, 0, 24) = v17;
              *(_OWORD *)(v15 - 40) = v16;
              uint64_t v7 = (_OWORD *)((char *)v7 - 40);
              v15 -= 40LL;
            }

            while (v7 != (_OWORD *)v5);
          }

          unint64_t v6 = v11 + 40 * v12;
          uint64_t v7 = (_OWORD *)(v13 + 40);
          *a2 = v18;
          a2[1] = v13 + 40;
          a2[2] = v6;
          if (v5) {
            operator delete(v5);
          }
          BOOL v5 = v18;
        }

        else
        {
          __int128 v8 = v19;
          __int128 v9 = v20;
          *((void *)v7 + 4) = v21;
          *uint64_t v7 = v8;
          v7[1] = v9;
          uint64_t v7 = (_OWORD *)((char *)v7 + 40);
        }

        a2[1] = v7;
      }

      v2 += 2;
    }

    while (v2 != v3);
  }

void sub_5A930(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

CFDictionaryRef sub_5A950(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0LL;
  size_t v37 = 0LL;
  unint64_t v38 = 0LL;
  sub_5AC08((void **)&keys, v2);
  values = 0LL;
  int v34 = 0LL;
  unint64_t v35 = 0LL;
  sub_5AC08((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      unint64_t v6 = *v4;
      uint64_t v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        __int128 v9 = keys;
        uint64_t v10 = v37 - keys;
        unint64_t v11 = v10 + 1;
        uint64_t v12 = v38 - (void)keys;
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_7DC90(v13);
        }
        else {
          uint64_t v14 = 0LL;
        }
        unint64_t v15 = (void **)(v13 + 8 * v10);
        CFTypeRef *v15 = v6;
        __int128 v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            __int128 v16 = *--v7;
            *--unint64_t v15 = v16;
          }

          while (v7 != v9);
          uint64_t v7 = keys;
        }

        keys = v15;
        unint64_t v38 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }

      else
      {
        void *v37 = v6;
        __int128 v8 = v7 + 1;
      }

      size_t v37 = v8;
      __int128 v17 = v4[1];
      int v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        __int128 v20 = values;
        uint64_t v21 = v34 - values;
        unint64_t v22 = v21 + 1;
        uint64_t v23 = v35 - (void)values;
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)sub_7DC90(v24);
        }
        else {
          uint64_t v25 = 0LL;
        }
        uint64_t v26 = (void **)(v24 + 8 * v21);
        uint64_t *v26 = v17;
        __int128 v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            double v27 = *--v18;
            *--uint64_t v26 = v27;
          }

          while (v18 != v20);
          int v18 = values;
        }

        values = v26;
        unint64_t v35 = v24 + 8 * v25;
        if (v18) {
          operator delete(v18);
        }
      }

      else
      {
        *int v34 = v17;
        __int128 v19 = v18 + 1;
      }

      int v34 = v19;
      v4 += 2;
    }

    while (v4 != (void **)v5);
  }

  double v28 = keys;
  double v29 = values;
  CFDictionaryRef v30 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  v2,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  return v30;
}

void sub_5ABB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_5AC08(void **a1, unint64_t a2)
{
  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_7A87C();
    }
    int64_t v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v4 = (char *)sub_7DC90(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    uint64_t v7 = &v4[8 * v6];
    __int128 v9 = (char *)*a1;
    __int128 v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }

      while (v8 != v9);
      __int128 v8 = (char *)*a1;
    }

    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8) {
      operator delete(v8);
    }
  }

void sub_5AC9C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v8 = qword_48D6E8;
    do
    {
      uint64_t v9 = *v6;
      uint64_t v10 = *a1;
      if (v8 != -1) {
        dispatch_once(&qword_48D6E8, &stru_46F308);
      }
      if (off_48D740)
      {
        off_48D740(v9, v10, a4, 0LL);
        uint64_t v8 = qword_48D6E8;
      }

      else
      {
        uint64_t v8 = -1LL;
      }

      ++v6;
    }

    while (v6 != a3);
  }

uint64_t sub_5AD64(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v2 > 1684633186)
    {
      BOOL v3 = v2 == 1684633187 || v2 == 1685484390;
      int v5 = 1836478308;
    }

    else
    {
      BOOL v3 = v2 == 1064725619 || v2 == 1668443504;
      int v5 = 1668705648;
    }
  }

  else if (v2 <= 1986098019)
  {
    BOOL v3 = v2 == 1918987632 || v2 == 1919774835;
    int v5 = 1936878960;
  }

  else
  {
    if (v2 > 1986229103)
    {
      BOOL v3 = v2 == 1986817377;
      unsigned __int16 v4 = 29552;
    }

    else
    {
      BOOL v3 = v2 == 1986098020;
      unsigned __int16 v4 = 25966;
    }

    int v5 = v4 | 0x76630000;
  }

  if (!v3 && v2 != v5) {
    return sub_62864(a1, a2);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  int v9 = *a2;
  uint64_t v10 = 1735159650LL;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 16LL))(v7, &v9);
}

uint64_t sub_5AE8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(***(void ***)(a1 + 80) + 16LL))(**(void **)(a1 + 80), a2);
  uint64_t v6 = *(os_unfair_lock_s ***)(a1 + 80);
  int v5 = *(os_unfair_lock_s ***)(a1 + 88);
  while (v6 != v5)
  {
    if ((_DWORD)v4 != (*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&(*v6)->_os_unfair_lock_opaque
                                                                                     + 16LL))( *v6,  a2))
    {
      uint64_t v8 = a2;
      int v9 = (os_log_t *)sub_138E8(13);
      uint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *v8;
        int v19 = *((_DWORD *)v8 + 2);
        sub_613AC((uint64_t)v20, (unsigned int *)&v18);
        int v11 = v21;
        uint64_t v12 = (void **)v20[0];
        sub_23FE8((uint64_t)__p, *v6 + 2);
        unint64_t v13 = v20;
        if (v11 < 0) {
          unint64_t v13 = v12;
        }
        if (v17 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        uint64_t v23 = "ControlSet.h";
        __int16 v24 = 1024;
        int v25 = 87;
        __int16 v26 = 2080;
        double v27 = v13;
        __int16 v28 = 2080;
        double v29 = v14;
        __int16 v30 = 1024;
        int v31 = v4;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Internal state failure. Differing responses to HasProperty(%s) in the contained control list (control = %s, uint64_t result = %d)",  buf,  0x2Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( exception,  "Internal state failure. Differing responses to HasProperty(%s) in the contained control list (control = %s, uint64_t result = %d)");
    }

    v6 += 2;
  }

  return v4;
}

void sub_5B080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5B0B4(uint64_t result, uint64_t a2)
{
  if (result == a2)
  {
    int v2 = (os_log_t *)sub_138E8(13);
    BOOL v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "ControlSet.h";
        __int16 v7 = 1024;
        int v8 = 218;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  return result;
}

void sub_5B1A8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_5B1C4(uint64_t a1, int *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v3 > 1684633186)
    {
      BOOL v4 = v3 == 1684633187 || v3 == 1836414053;
      int v5 = 1983013986;
    }

    else
    {
      BOOL v4 = v3 == 1064725619 || v3 == 1668705648;
      int v5 = 1684157046;
    }

    goto LABEL_17;
  }

  if (v3 > 1986290210)
  {
    if (v3 > 1987013740)
    {
      BOOL v4 = v3 == 2021027692;
      int v5 = 1987013741;
    }

    else
    {
      BOOL v4 = v3 == 1986290211;
      int v5 = 1986817377;
    }

void sub_5B35C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_5B370(void *a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32LL))(a1) & 1) == 0)
  {
    __int128 v16 = (os_log_t *)sub_138E8(13);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v36);
      uint64_t v18 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 231;
      __int16 v44 = 2080;
      unint64_t v45 = (const char *)v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    __int128 v20 = (os_log_t *)sub_138E8(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v36);
      unint64_t v22 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 232;
      __int16 v44 = 2080;
      unint64_t v45 = (const char *)v22;
      __int16 v46 = 1024;
      LODWORD(v47[0]) = a3;
      WORD2(v47[0]) = 2048;
      *(void *)((char *)v47 + 6) = a4;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_4865A0;
    v23[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v36);
      __int16 v26 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 233;
      __int16 v44 = 2080;
      unint64_t v45 = "outData";
      __int16 v46 = 2080;
      v47[0] = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }

    double v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v27 = &off_4865A0;
    v27[2] = 561211770;
  }

  int v12 = *a2;
  if (*a2 > 1919774834)
  {
    if (v12 > 1986225517)
    {
      if (v12 == 1986225518 || v12 == 1986817377) {
        goto LABEL_20;
      }
      int v13 = 1986229104;
    }

    else
    {
      if (v12 == 1919774835 || v12 == 1936878960) {
        goto LABEL_20;
      }
      int v13 = 1986098020;
    }
  }

  else if (v12 > 1684633186)
  {
    if (v12 == 1684633187 || v12 == 1685484390) {
      goto LABEL_20;
    }
    int v13 = 1918987632;
  }

  else
  {
    if (v12 == 1064725619 || v12 == 1668443504) {
      goto LABEL_20;
    }
    int v13 = 1668705648;
  }

  if (v12 != v13)
  {
    sub_77BB4((uint64_t)a1, a2, a3, a4, a5, a6);
    return;
  }

void sub_5B9C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5B9E4(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32LL))(a1) & 1) == 0)
  {
    int v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)a2;
      int v22 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v15 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v27 = 1024;
      int v28 = 197;
      __int16 v29 = 2080;
      int v30 = v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    char v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)a2;
      int v22 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v21);
      if (v24 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      uint64_t v26 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v27 = 1024;
      int v28 = 198;
      __int16 v29 = 2080;
      int v30 = v19;
      __int16 v31 = 1024;
      int v32 = a3;
      __int16 v33 = 2048;
      uint64_t v34 = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v20 = &off_4865A0;
    v20[2] = 561211770;
  }

  int v8 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v8 > 1684633186)
    {
      if (v8 == 1684633187 || v8 == 1685484390) {
        goto LABEL_22;
      }
      int v10 = 1836478308;
    }

    else
    {
      if (v8 == 1064725619 || v8 == 1668443504) {
        goto LABEL_22;
      }
      int v10 = 1668705648;
    }
  }

  else
  {
    if (v8 > 1986098019)
    {
      if (v8 > 1986229103)
      {
        if (v8 != 1986817377)
        {
          unsigned __int16 v9 = 29552;
          goto LABEL_20;
        }
      }

      else if (v8 != 1986098020)
      {
        unsigned __int16 v9 = 25966;
LABEL_20:
        int v10 = v9 | 0x76630000;
        goto LABEL_21;
      }

uint64_t sub_5BDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(***(void ***)(a1 + 80) + 32LL))( **(void **)(a1 + 80),  a2,  a3,  a4);
  int v10 = *(void **)(a1 + 80);
  unsigned __int16 v9 = *(void **)(a1 + 88);
  while (v10 != v9)
  {
    if ((_DWORD)v8 != (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 32LL))( *v10,  a2,  a3,  a4))
    {
      int v12 = (os_log_t *)sub_138E8(13);
      int v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          int v15 = 136315394;
          __int128 v16 = "ControlSet.h";
          __int16 v17 = 1024;
          int v18 = 112;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Internal state failure. Differing responses to GetPropertyDataSi ze in the contained control list",  (uint8_t *)&v15,  0x12u);
        }
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( exception,  "Internal state failure. Differing responses to GetPropertyDataSize in the contained control list");
    }

    v10 += 2;
  }

  return v8;
}

void sub_5BF48(_Unwind_Exception *exception_object)
{
}

uint64_t sub_5BF64(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unsigned __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v13 = 1024;
      int v14 = 170;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v11,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *a2;
  uint64_t result = 4LL;
  if (*a2 <= 1986098019)
  {
    if (v3 > 1684633186)
    {
      if (v3 == 1684633187 || v3 == 1836414053) {
        return result;
      }
      int v5 = 1983013986;
    }

    else
    {
      if (v3 == 1064725619 || v3 == 1668705648) {
        return result;
      }
      int v5 = 1684157046;
    }

    goto LABEL_17;
  }

  if (v3 <= 1986290210)
  {
    if (v3 == 1986098020) {
      return 8LL;
    }
    if (v3 == 1986225518) {
      return result;
    }
    int v5 = 1986229104;
    goto LABEL_17;
  }

  if (v3 > 1987013740)
  {
    if (v3 == 1987013741) {
      return result;
    }
    if (v3 != 2021027692) {
      goto LABEL_18;
    }
    return 16LL;
  }

  if (v3 == 1986290211) {
    return 16LL;
  }
  int v5 = 1986817377;
LABEL_17:
  if (v3 == v5) {
    return result;
  }
LABEL_18:
  uint64_t v6 = (os_log_t *)sub_138E8(13);
  __int16 v7 = *v6;
  if (!*v6) {
    return 0LL;
  }
  uint64_t result = os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    int v11 = 136315394;
    int v12 = "SoftwareOnlyVolumeControl.cpp";
    __int16 v13 = 1024;
    int v14 = 204;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about it.",  (uint8_t *)&v11,  0x12u);
    return 0LL;
  }

  return result;
}

uint64_t sub_5C1F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result = sub_5B0B4(*(void *)(a1 + 80), *(void *)(a1 + 88));
  if (*a2 != 1986225518) {
    return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, _DWORD *, _DWORD *))(***(void ***)(a1 + 80)
  }
                                                                                             + 40LL))( **(void **)(a1 + 80),  a2,  a3,  a4,  a5,  a6);
  *a5 = 4;
  __int16 v13 = *(uint64_t **)(a1 + 80);
  int v14 = *(uint64_t **)(a1 + 88);
  while (1)
  {
    if (v13 == v14)
    {
      *a6 = 0;
      return result;
    }

    uint64_t result = sub_5C2F8(*v13);
    *((void *)&v17 + 1) = v15;
    *(void *)&__int128 v17 = result;
    uint64_t v16 = v17 >> 32;
    if ((v16 & 0xFF00000000LL) == 0) {
      LODWORD(v16) = 1;
    }
    if ((_DWORD)v16) {
      break;
    }
    v13 += 2;
  }

  *a6 = v16;
  return result;
}

unint64_t sub_5C2F8(uint64_t a1)
{
  if ((sub_5C3C4(a1) & 1) != 0)
  {
    unsigned int v2 = 2003329396;
    uint64_t v3 = 0LL;
    if (sub_5C41C(a1))
    {
      unsigned int v2 = sub_5C474(a1);
      if (v2) {
        uint64_t v3 = 0LL;
      }
      else {
        uint64_t v3 = v5;
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
    unsigned int v2 = 2003332927;
  }

  return v2 | (unint64_t)(v3 << 32);
}

uint64_t sub_5C3C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
}

void sub_5C3E8(void *a1)
{
}

uint64_t sub_5C41C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

void sub_5C440(void *a1)
{
}

uint64_t sub_5C474(uint64_t a1)
{
  return 0LL;
}

void sub_5C49C(void *a1)
{
}

double sub_5C4D0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int64x2_t v40 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v41 = 1024;
      int v42 = 214;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > *a5)
  {
    char v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int64x2_t v40 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v41 = 1024;
      int v42 = 215;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  buf,  0x12u);
    }

    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v26 = &off_4865A0;
    v26[2] = 561211770;
  }

  int v14 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v14 > 1684633186)
    {
      if (v14 == 1684633187) {
        goto LABEL_27;
      }
      if (v14 == 1836414053)
      {
        int v17 = *(unsigned __int8 *)(a1 + 201);
        goto LABEL_32;
      }

      if (v14 != 1983013986) {
        goto LABEL_33;
      }
      sub_64424(a1 + 120, *(float *)a6);
    }

    else
    {
      if (v14 == 1064725619 || v14 == 1668705648) {
        goto LABEL_16;
      }
      if (v14 != 1684157046)
      {
LABEL_33:
        int v19 = (os_log_t *)sub_138E8(13);
        __int128 v20 = *v19;
        if (*v19)
        {
          if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            int64x2_t v40 = "SoftwareOnlyVolumeControl.cpp";
            __int16 v41 = 1024;
            int v42 = 276;
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about it.",  buf,  0x12u);
          }
        }

        return result;
      }

      float v16 = sub_757A4(a1 + 120, *(float *)a6);
    }

void sub_5CA98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5CABC(int a1, _DWORD *a2, _DWORD *a3)
{
  if (!a3)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unsigned __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "StandardUtilities.h";
      __int16 v13 = 1024;
      int v14 = 157;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a2 <= 3u)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    __int16 v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        int v12 = "StandardUtilities.h";
        __int16 v13 = 1024;
        int v14 = 158;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) <= ioDataSize",  (uint8_t *)&v11,  0x12u);
      }
    }
  }

  *a2 = 4;
  *a3 = a1;
}

void sub_5CC44(_Unwind_Exception *exception_object)
{
}

uint64_t sub_5CC60(uint64_t a1, _DWORD *a2)
{
  for (uint64_t i = *(void *)(a1 + 56); i != *(void *)(a1 + 64); i += 24LL)
  {
    if (sub_5CCDC((int *)i, a2)
      && (*(unsigned int (**)(void, _DWORD *))(**(void **)(i + 16) + 16LL))(*(void *)(i + 16), a2))
    {
      uint64_t result = *(void *)(i + 16);
    }

    else
    {
      uint64_t result = 0LL;
    }

    if (result) {
      return result;
    }
  }

  return 0LL;
}

BOOL sub_5CCDC(int *a1, _DWORD *a2)
{
  int v2 = a1[1];
  int v3 = a2[1];
  if (v3 != 707406378 && v2 != 707406378 && v2 != v3) {
    return 0LL;
  }
  int v6 = *a1;
  BOOL v7 = *a2 == 707406378 || v6 == 707406378;
  if (!v7 && v6 != *a2) {
    return 0LL;
  }
  int v9 = a1[2];
  int v10 = a2[2];
  return v9 == -1 || v9 == v10 || v10 == -1;
}

BOOL sub_5CD38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680LL))(*(void *)(a1 + 8)) != 0;
}

uint64_t sub_5CD60(void *a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  int v13 = 0;
  (*(void (**)(void *, uint64_t, char *, uint64_t *, int *))(*a1 + 688LL))( a1,  a2,  (char *)&v14 + 4,  &v14,  &v13);
  for (uint64_t i = (void *)a1[68]; i != (void *)a1[69]; ++i)
  {
    uint64_t v4 = *i;
    int v5 = *(_DWORD *)(*i + 12LL);
    int v6 = (*(uint64_t (**)(void))(*(void *)*i + 128LL))(*i);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136LL))(v4);
    if (HIDWORD(v14) == 1668047723 && v13 == 0)
    {
      if (v5 == 1668047723 && v7 == 0) {
        return v4;
      }
    }

    else if (v5 == HIDWORD(v14) && v6 == (_DWORD)v14 && v7 == v13)
    {
      return v4;
    }
  }

  return 0LL;
}

void sub_5CE48(uint64_t a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v5 <= 1668705647)
    {
      BOOL v6 = v5 == 1064725619;
      int v7 = 1668443504;
    }

    else
    {
      BOOL v6 = v5 == 1668705648 || v5 == 1684633187;
      int v7 = 1836478308;
    }
  }

  else if (v5 > 1986098019)
  {
    BOOL v6 = v5 == 1986098020 || v5 == 1986817377;
    int v7 = 1986229104;
  }

  else
  {
    BOOL v6 = v5 == 1918987632 || v5 == 1919774835;
    int v7 = 1936878960;
  }

  if (v6 || v5 == v7)
  {
    *a3 = 1986817381;
    *a4 = a2[1];
    *a5 = a2[2];
  }

  else
  {
    sub_5CF28(a1, a2, a3, a4, a5);
  }

void sub_5CF28(uint64_t a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = a2[1];
  *a5 = a2[2];
  int v5 = *a2;
  if (*a2 > 1852601890)
  {
    if (v5 <= 1937125987)
    {
      if (v5 > 1936682094)
      {
        if (v5 <= 1936748066)
        {
          if (v5 == 1936682095) {
            goto LABEL_73;
          }
          if (v5 != 1936744814) {
            return;
          }
        }

        else if (v5 != 1936748067)
        {
          if (v5 == 1936941859 || v5 == 1936945763) {
            goto LABEL_26;
          }
          return;
        }

        int v5 = 1936744814;
        goto LABEL_73;
      }

      if (v5 <= 1935946357)
      {
        if (v5 == 1852601891)
        {
LABEL_53:
          int v5 = 1852601964;
          goto LABEL_73;
        }

        int v9 = 1852601964;
LABEL_52:
        if (v5 != v9) {
          return;
        }
        goto LABEL_53;
      }

      if (v5 != 1935946358)
      {
        if (v5 != 1936553332) {
          return;
        }
        int v5 = 1937072749;
        goto LABEL_73;
      }
    }

    else
    {
      if (v5 > 1953002100)
      {
        if (v5 <= 1986290210)
        {
          if (v5 == 1953002101)
          {
            *a4 = 1886679669;
            int v5 = 1836414053;
            goto LABEL_73;
          }

          int v8 = 1983013986;
        }

        else
        {
          if (v5 == 1986290211 || v5 == 1987013741)
          {
LABEL_67:
            int v5 = 1986817381;
            goto LABEL_73;
          }

          int v8 = 1987013732;
        }

uint64_t sub_5D344(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_5D34C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_5D354(void *a1, int *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  int v5 = v4;
  int v6 = *a2;
  uint64_t v7 = 1LL;
  if (*a2 > 1685484389)
  {
    if (v6 > 1934456179)
    {
      if (v6 > 1953002353)
      {
        if (v6 <= 1986225265)
        {
          if (v6 > 1969844081)
          {
            if (v6 <= 1983996970)
            {
              if (v6 != 1969844082)
              {
                int v8 = 1970303087;
                goto LABEL_164;
              }

              goto LABEL_158;
            }

            if (v6 != 1983996971)
            {
              int v9 = 1983997011;
              goto LABEL_157;
            }

LABEL_158:
            a1 = (void *)a1[126];
            uint64_t v19 = 3LL;
LABEL_159:
            uint64_t v20 = (*(uint64_t (**)(void *, int *))(*a1 + 8 * v19))(a1, a2);
            goto LABEL_160;
          }

          if (v6 == 1953002354) {
            goto LABEL_165;
          }
          if (v6 == 1953719148) {
            goto LABEL_158;
          }
          int v8 = 1969318244;
          goto LABEL_164;
        }

        if (v6 > 1986294895)
        {
          if (v6 <= 2020111982)
          {
            if (v6 == 1986294896) {
              goto LABEL_165;
            }
            int v9 = 1986361444;
            goto LABEL_157;
          }

          if (v6 == 2020111983) {
            goto LABEL_141;
          }
          int v18 = 2021027692;
LABEL_140:
          if (v6 != v18) {
            goto LABEL_170;
          }
LABEL_141:
          int v14 = a2[1];
          int v15 = 1869968496;
LABEL_142:
          BOOL v17 = v14 == v15;
          goto LABEL_143;
        }

        if (v6 != 1986225266 && v6 != 1986225268)
        {
          int v13 = 1986225518;
LABEL_109:
          if (v6 != v13) {
            goto LABEL_170;
          }
          goto LABEL_168;
        }

        goto LABEL_165;
      }

      if (v6 <= 1936878959)
      {
        if (v6 > 1936744802)
        {
          if (v6 == 1936744803) {
            goto LABEL_158;
          }
          if (v6 == 1936876403) {
            goto LABEL_165;
          }
          int v9 = 1936876644;
        }

        else
        {
          if (v6 == 1934456180 || v6 == 1935762281) {
            goto LABEL_158;
          }
          int v9 = 1935962992;
        }

        goto LABEL_157;
      }

      if (v6 > 1937138531)
      {
        if (v6 > 1952998001)
        {
          if (v6 == 1952998002) {
            goto LABEL_165;
          }
          unsigned __int16 v10 = 29293;
        }

        else
        {
          if (v6 == 1937138532) {
            goto LABEL_158;
          }
          unsigned __int16 v10 = 25188;
        }

        int v9 = v10 | 0x74680000;
        goto LABEL_157;
      }

      if (v6 != 1936878960)
      {
        if (v6 == 1936879204) {
          goto LABEL_158;
        }
        int v8 = 1936946787;
        goto LABEL_164;
      }

LABEL_168:
      a1 = (void *)a1[116];
      if (!a1)
      {
        int v22 = (os_log_t *)sub_138E8(13);
        uint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          int v25 = 136315394;
          uint64_t v26 = "VirtualAudio_Device.cpp";
          __int16 v27 = 1024;
          int v28 = 2053;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v25,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      uint64_t v19 = 5LL;
      goto LABEL_159;
    }

    if (v6 <= 1869575793)
    {
      if (v6 > 1752657011)
      {
        if (v6 <= 1852012898)
        {
          if (v6 != 1752657012 && v6 != 1769302372)
          {
            int v9 = 1818326127;
            goto LABEL_157;
          }

          goto LABEL_165;
        }

        if (v6 <= 1853059699)
        {
          if (v6 != 1852012899)
          {
            int v8 = 1853059619;
            goto LABEL_164;
          }

          goto LABEL_130;
        }

        if (v6 != 1853059700)
        {
          int v9 = 1869574756;
          goto LABEL_157;
        }

        BOOL v17 = a1[78] == 0LL;
LABEL_143:
        uint64_t v7 = v17;
        if (v4) {
          goto LABEL_166;
        }
        return v7;
      }

      if (v6 <= 1718641516)
      {
        if (v6 == 1685484390) {
          goto LABEL_168;
        }
        if (v6 == 1701733224) {
          goto LABEL_165;
        }
        int v11 = 1718383987;
LABEL_129:
        if (v6 != v11) {
          goto LABEL_170;
        }
        goto LABEL_130;
      }

      if (v6 != 1718641517)
      {
        if (v6 == 1719165555) {
          goto LABEL_165;
        }
        int v8 = 1735682404;
        goto LABEL_164;
      }

                if (v22 == (os_signpost_id_t *)v179)
                {
LABEL_178:
                  int v99 = sub_138E8(8);
                  if ((*(_BYTE *)(v99 + 8) & 1) != 0)
                  {
                    CFTypeRef v100 = *(os_log_s **)v99;
                    if (*(void *)v99)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v99, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315394;
                        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 2401;
                        _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Failed to find a valid input/output concrete route where both ports are connected an d in the routing database. Scanning for concrete routes where only one is in the database.",  buf,  0x12u);
                      }
                    }
                  }

                  uint64_t v101 = *(_DWORD *)(a4 + 32) == 1668510820;
                  *(_OWORD *)((char *)v203.__r_.__value_.__r.__words + 3) = *v174;
                  buf[16] = v101;
                  *(_OWORD *)&buf[17] = *(_OWORD *)&v203.__r_.__value_.__l.__data_;
                  *(_DWORD *)&_BYTE buf[32] = *(_DWORD *)((char *)&v203.__r_.__value_.__r.__words[1] + 7);
                  *(void *)buf = a4;
                  *(void *)&buf[8] = v185;
                  v209 = 0LL;
                  v210 = 0LL;
                  v103 = sub_11DDE4((uint64_t *)buf);
                  uint64_t v104 = *(void *)buf;
                  if (*(void *)buf == v103)
                  {
LABEL_223:
                    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
                    *(_OWORD *)&v190.__r_.__value_.__r.__words[1] = 1uLL;
                    v191 = 0;
                    v192 = 0;
                    goto LABEL_224;
                  }

                  id v105 = v102;
                  v106 = (uint64_t)(v102 + 1);
                  while (1)
                  {
                    sub_70C60((int64x2_t *)&v211, a2, v103 + 16, a4, a5);
                    v108 = v211.__r_.__value_.__l.__size_;
                    v107 = v211.__r_.__value_.__r.__words[0];
                    if (v211.__r_.__value_.__r.__words[0] != v211.__r_.__value_.__l.__size_)
                    {
                      v109 = v193;
                      while (1)
                      {
                        v110 = *(void *)v107 + 16LL;
                        CFStringRef v111 = *(void *)(*(void *)v107 + 24LL);
                        if (v110 != v111)
                        {
                          do
                          {
                            CFStringRef v112 = sub_1F6C84(v109, (void *)(v111 + 16));
                            if (v112) {
                              break;
                            }
                            CFStringRef v111 = *(void *)(v111 + 8);
                          }

                          while (v110 != v111);
                          if (v112) {
                            break;
                          }
                        }

                        v107 += 8LL;
                        if (v107 == v108)
                        {
                          if (!sub_12775C( a4,  *(void *)(v187 + 8),  *(void *)(v187 + 16),  v185,  (uint64_t *)&v211,  v109)) {
                            goto LABEL_211;
                          }
                          break;
                        }
                      }

                      a5 = v187;
                      if ((sub_14F834() & 1) == 0
                        && sub_EAA74("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_4938E0)
                      {
                        CFStringRef v114 = 0LL;
                      }

                      else
                      {
                        CFStringRef v113 = atomic_load((unsigned __int8 *)&qword_493908);
                        if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
                        {
                          qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                          __cxa_guard_release(&qword_493908);
                        }

                        CFStringRef v114 = os_signpost_id_generate((os_log_t)qword_493900);
                        v115 = atomic_load((unsigned __int8 *)&qword_493908);
                        if ((v115 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
                        {
                          qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                          __cxa_guard_release(&qword_493908);
                        }

                        if (v114 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                        {
                          v116 = (os_log_s *)qword_493900;
                          if (os_signpost_enabled((os_log_t)qword_493900))
                          {
                            sub_2DA6D0(&v203, (unsigned int ***)&v211);
                            v117 = (char)v203.__r_.__value_.__s.__size_;
                            v118 = v203.__r_.__value_.__r.__words[0];
                            sub_2DABA8(&__p, v103 + 16);
                            v119 = &v203;
                            if (v117 < 0) {
                              v119 = (std::string *)v118;
                            }
                            uint64_t v120 = &__p;
                            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                              uint64_t v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)v207 = 136315394;
                            *(void *)&v207[4] = v119;
                            *(_WORD *)&v207[12] = 2080;
                            *(void *)&v207[14] = v120;
                            _os_signpost_emit_with_name_impl( &dword_0,  v116,  OS_SIGNPOST_INTERVAL_BEGIN,  v114,  "VA_BuildAlternateRoutesAndActivateForLastInWins",  "ActivateForLastInWins, Primary route = %s, Abstract route =%s",  v207,  0x16u);
                          }
                        }
                      }

                      sub_1278E8(v212, v114);
                      sub_11DE5C( (uint64_t)&v190,  a2,  (std::string::size_type)&v211,  *(uint64_t **)(v103 + 104),  v187,  (uint64_t *)v199);
                      if (!LODWORD(v190.__r_.__value_.__r.__words[1]))
                      {
                        sub_1279C8((os_signpost_id_t *)v212);
                        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
                        sub_11E38C((void ***)&v203);
LABEL_224:
                        a3 = v178;
LABEL_225:
                        sub_725DC(a1, (uint64_t)&v190);
                        v190.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
                        v123 = (void *)v190.__r_.__value_.__l.__cap_;
                        if (v190.__r_.__value_.__l.__cap_)
                        {
                          sub_10AF78((uint64_t *)(v190.__r_.__value_.__l.__cap_ + 16));
                          operator delete(v123);
                        }

                        if (*(_DWORD *)(a1 + 8)) {
                          int v49 = 0;
                        }
                        else {
                          int v49 = 12;
                        }
                        int v48 = v194;
                        if (v194)
                        {
LABEL_231:
                          v124 = (unint64_t *)&v48->__shared_owners_;
                          do
                            uint64_t v125 = __ldaxr(v124);
                          while (__stlxr(v125 - 1, v124));
                          if (!v125)
                          {
                            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                            std::__shared_weak_count::__release_weak(v48);
                          }
                        }

                        if (v49 == 13 || !v49)
                        {
LABEL_237:
                          sub_127EE0(v195);
                          goto LABEL_15;
                        }

                        goto LABEL_305;
                      }

                      v190.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
                      std::string v121 = (void *)v190.__r_.__value_.__l.__cap_;
                      if (v190.__r_.__value_.__l.__cap_)
                      {
                        sub_10AF78((uint64_t *)(v190.__r_.__value_.__l.__cap_ + 16));
                        operator delete(v121);
                      }

                      sub_1279C8((os_signpost_id_t *)v212);
                    }

void sub_5DD90(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_5DDDC(uint64_t a1, int *a2)
{
  uint64_t result = 0LL;
  int v4 = *a2;
  if (*a2 > 1818455661)
  {
    if (v4 <= 1870030193)
    {
      if (v4 <= 1819173228)
      {
        BOOL v7 = v4 == 1818455662 || v4 == 1818850926;
        int v8 = 1819107691;
        goto LABEL_34;
      }

      if (v4 <= 1836411235)
      {
        if (v4 == 1819173229) {
          return result;
        }
        int v6 = 1819569763;
        goto LABEL_54;
      }

      if (v4 == 1836411236) {
        return result;
      }
      int v5 = 1869180523;
    }

    else
    {
      if (v4 <= 1937009954)
      {
        if (v4 > 1936092275)
        {
          if (v4 == 1936092276) {
            return result;
          }
          int v6 = 1936482681;
        }

        else
        {
          if (v4 == 1870030194) {
            return result;
          }
          int v6 = 1935763060;
        }

        goto LABEL_54;
      }

      if (v4 > 1953653101)
      {
        if (v4 == 1953653102) {
          return result;
        }
        int v6 = 1969841184;
LABEL_54:
        if (v4 == v6) {
          return result;
        }
        return sub_5E070(a1, a2);
      }

      if (v4 == 1937009955) {
        return result;
      }
      int v5 = 1937077093;
    }

LABEL_48:
    if (v4 == v5) {
      return 1LL;
    }
    return sub_5E070(a1, a2);
  }

  if (v4 <= 1718843938)
  {
    if (v4 > 1668049763)
    {
      if (v4 <= 1684629093)
      {
        if (v4 == 1668049764) {
          return result;
        }
        int v6 = 1684434036;
        goto LABEL_54;
      }

      if (v4 == 1684629094) {
        return result;
      }
      int v5 = 1718839674;
      goto LABEL_48;
    }

    BOOL v7 = v4 == 1634429294 || v4 == 1634955892;
    int v8 = 1667330160;
LABEL_34:
    if (v7 || v4 == v8) {
      return result;
    }
    return sub_5E070(a1, a2);
  }

  if (v4 > 1751737453)
  {
    if (v4 > 1818452845)
    {
      if (v4 == 1818452846) {
        return result;
      }
      int v6 = 1818454126;
    }

    else
    {
      if (v4 == 1751737454) {
        return result;
      }
      int v6 = 1768124270;
    }

    goto LABEL_54;
  }

  if (v4 > 1735356004)
  {
    if (v4 == 1735356005) {
      return result;
    }
    int v6 = 1751412337;
    goto LABEL_54;
  }

  if (v4 != 1718843939)
  {
    int v5 = 1735354734;
    goto LABEL_48;
  }

  return result;
}

  std::mutex::unlock(v4);
}

      char v24 = (std::string *)((char *)v24 + 1);
    }

    while (v24 != (std::string *)v23);
  }

  else
  {
    int v25 = (std::string *)((char *)v19 + v20);
  }

  int v29 = sub_138E8(16);
  if ((*(_BYTE *)(v29 + 8) & 1) != 0)
  {
    int v30 = *(os_log_s **)v29;
    if (*(void *)v29)
    {
      if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 302;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Before modifying our stream usage data structure:",  buf,  0x12u);
      }
    }
  }

  int v31 = sub_138E8(16);
  if ((*(_BYTE *)(v31 + 8) & 1) != 0)
  {
    int v32 = *(os_log_s **)v31;
    if (*(void *)v31)
    {
      if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
      {
        __int16 v33 = *((_DWORD *)v89 + 2);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 303;
        std::string v91 = 1024;
        LODWORD(v92) = v33;
        _os_log_impl(&dword_0, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mNumberStreams: %u.", buf, 0x18u);
      }
    }
  }

  if (*((_DWORD *)v89 + 2))
  {
    uint64_t v34 = sub_138E8(16);
    if ((*(_BYTE *)(v34 + 8) & 1) != 0)
    {
      uint64_t v35 = *(os_log_s **)v34;
      if (*(void *)v34)
      {
        if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
        {
          int v36 = *((_DWORD *)v89 + 3);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 304;
          std::string v91 = 1024;
          LODWORD(v92) = v36;
          _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[0]: %u", buf, 0x18u);
        }
      }
    }
  }

  if (*((_DWORD *)v89 + 2) >= 2u)
  {
    int v37 = sub_138E8(16);
    if ((*(_BYTE *)(v37 + 8) & 1) != 0)
    {
      char v38 = *(os_log_s **)v37;
      if (*(void *)v37)
      {
        if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
        {
          char v39 = *((_DWORD *)v89 + 4);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 305;
          std::string v91 = 1024;
          LODWORD(v92) = v39;
          _os_log_impl(&dword_0, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[1]: %u", buf, 0x18u);
        }
      }
    }
  }

  if (*((_DWORD *)v89 + 2) >= 3u)
  {
    int64x2_t v40 = sub_138E8(16);
    if ((*(_BYTE *)(v40 + 8) & 1) != 0)
    {
      __int16 v41 = *(os_log_s **)v40;
      if (*(void *)v40)
      {
        if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
        {
          int v42 = *((_DWORD *)v89 + 5);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 306;
          std::string v91 = 1024;
          LODWORD(v92) = v42;
          _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[2]: %u", buf, 0x18u);
        }
      }
    }
  }

  if (*((_DWORD *)v89 + 2))
  {
    __int16 v43 = a1[v20];
    __int16 v44 = v21[1] - v43;
    if (v44)
    {
      __int16 v45 = 0LL;
      int v46 = v89 + 12;
      do
      {
        __int16 v47 = *(unsigned __int8 *)(v43 + v45);
        if (v47 == 1) {
          int v48 = a4;
        }
        else {
          int v48 = 0;
        }
        if (v47 == 2) {
          int v49 = 1;
        }
        else {
          int v49 = v48;
        }
        *(_DWORD *)&v46[4 * v45++] = v49;
      }

      while (v44 > v45);
    }

    __int128 v50 = (os_log_t *)sub_138E8(16);
    unsigned int v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v86 = *(uint64_t *)((char *)a1 + 268);
      std::string::size_type v52 = &v87;
      sub_33464(&v87, (unsigned int *)&v86);
      if ((v87.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v52 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      sub_155E78(v84, (uint64_t)__p);
      v53 = v85;
      __int128 v54 = (void **)v84[0];
      if ((_DWORD)a2) {
        uint64_t v55 = "output";
      }
      else {
        uint64_t v55 = "input";
      }
      sub_7D084(v82, v55);
      __int128 v56 = v84;
      if (v53 < 0) {
        __int128 v56 = v54;
      }
      v57 = v82;
      if (v83 < 0) {
        v57 = (void **)v82[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 323;
      std::string v91 = 2080;
      __int128 v92 = v52;
      v93 = 2080;
      __int128 v94 = v56;
      int v95 = 2080;
      std::string::size_type v96 = v57;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VA Stream usage for %s is %s for direction %s",  buf,  0x30u);
      if (v83 < 0) {
        operator delete(v82[0]);
      }
      if (v85 < 0) {
        operator delete(v84[0]);
      }
    }

    if (*((_DWORD *)v89 + 2))
    {
      std::string::size_type v58 = sub_138E8(16);
      if ((*(_BYTE *)(v58 + 8) & 1) != 0)
      {
        v59 = *(os_log_s **)v58;
        if (*(void *)v58)
        {
          if (os_log_type_enabled(*(os_log_t *)v58, OS_LOG_TYPE_DEBUG))
          {
            __int128 v60 = *((_DWORD *)v89 + 3);
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 324;
            std::string v91 = 1024;
            LODWORD(v92) = v60;
            _os_log_impl(&dword_0, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[0]: %u", buf, 0x18u);
          }
        }
      }
    }

    if (*((_DWORD *)v89 + 2) >= 2u)
    {
      char v61 = sub_138E8(16);
      if ((*(_BYTE *)(v61 + 8) & 1) != 0)
      {
        char v62 = *(os_log_s **)v61;
        if (*(void *)v61)
        {
          if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
          {
            v63 = *((_DWORD *)v89 + 4);
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 325;
            std::string v91 = 1024;
            LODWORD(v92) = v63;
            _os_log_impl(&dword_0, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[1]: %u", buf, 0x18u);
          }
        }
      }
    }

    if (*((_DWORD *)v89 + 2) >= 3u)
    {
      int v64 = sub_138E8(16);
      if ((*(_BYTE *)(v64 + 8) & 1) != 0)
      {
        unsigned int v65 = *(os_log_s **)v64;
        if (*(void *)v64)
        {
          if (os_log_type_enabled(*(os_log_t *)v64, OS_LOG_TYPE_DEBUG))
          {
            CFIndex v66 = *((_DWORD *)v89 + 5);
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 326;
            std::string v91 = 1024;
            LODWORD(v92) = v66;
            _os_log_impl(&dword_0, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d streamUsage->mStreamIsOn[2]: %u", buf, 0x18u);
          }
        }
      }
    }

    sub_22FE94((uint64_t)a1, a2, a4, (_BYTE *)a1[v20], (_BYTE *)v21[1]);
    uint64_t v67 = sub_155D1C((uint64_t)__p);
    if (v67)
    {
      __int128 v74 = (os_log_t *)sub_138E8(13);
      unsigned int v75 = *v74;
      if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 331;
        _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: VAStreamUsage::Set() failed.",  buf,  0x12u);
      }

      __int128 v76 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int128 v76 = &off_4865A0;
      v76[2] = v67;
    }

    sub_2300A4((uint64_t)a1, a2, a4, (_BYTE *)a1[v20], (_BYTE *)v21[1]);
    if ((sub_7531C() & (a2 ^ 1)) == 1)
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 472))(buf, a1);
      sub_AB8E4(a1, (uint64_t)(a1 + 53), (uint64_t)__p, (uint64_t)buf);
      sub_32C8C(*(void **)&buf[8]);
    }
  }

  free(v89);
}

  if (!v5[2])
  {
    uint64_t v35 = (os_log_t *)sub_138E8(17);
    int v36 = *v35;
    if (*v35)
    {
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)v87 = "SubPortPolicy.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 263;
        *(_WORD *)&v87[14] = 1024;
        *(_DWORD *)&v87[16] = v4;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Device %u supports no data sources, and thus has no sub-ports.",  buf,  0x18u);
      }
    }
  }

uint64_t sub_5E070(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1818850145 || *a2 == 1818850162) {
    return 1LL;
  }
  uint64_t v5 = sub_5CC60(a1, a2);
  if (!v5)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    BOOL v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        unsigned __int16 v10 = "HP_Object.cpp";
        __int16 v11 = 1024;
        int v12 = 179;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property",  (uint8_t *)&v9,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v5 + 24LL))(v5, a2);
}

uint64_t sub_5E1C0(uint64_t a1, int *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680LL))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0LL;
    int v6 = *a2;
    if (*a2 <= 1818456941)
    {
      BOOL v7 = v6 == 1668506475;
      int v8 = 1818455660;
    }

    else
    {
      BOOL v7 = v6 == 1818456942 || v6 == 1819501422;
      int v8 = 1835295843;
    }

    if (!v7 && v6 != v8)
    {
      int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 696LL))(*(void *)(a1 + 8));
      uint64_t v11 = 1735159650LL;
      return (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 40LL))(v5, &v10);
    }
  }

  return result;
}

uint64_t sub_5E298(uint64_t a1, uint64_t a2)
{
  if ((int)a2 <= 1918987631)
  {
    if ((int)a2 <= 1668705647)
    {
      if ((_DWORD)a2 == 1064725619) {
        return a2;
      }
      int v2 = 1668443504;
    }

    else
    {
      if ((_DWORD)a2 == 1668705648 || (_DWORD)a2 == 1684633187) {
        return a2;
      }
      int v2 = 1836478308;
    }
  }

  else if ((int)a2 > 1986098019)
  {
    if ((_DWORD)a2 == 1986098020 || (_DWORD)a2 == 1986229104) {
      return a2;
    }
    int v2 = 1986817377;
  }

  else
  {
    if ((_DWORD)a2 == 1918987632 || (_DWORD)a2 == 1919774835) {
      return a2;
    }
    int v2 = 1936878960;
  }

  if ((_DWORD)a2 == v2) {
    return a2;
  }
  return sub_5E378(a1, a2);
}

uint64_t sub_5E378(uint64_t a1, int a2)
{
  if (a2 <= 1852601890)
  {
    if (a2 > 1835295842)
    {
      if (a2 <= 1836462691)
      {
        int v2 = 1836281890;
        if (a2 == 1836414053) {
          int v3 = 1650685548;
        }
        else {
          int v3 = 0;
        }
        if (a2 == 1836281966) {
          int v4 = 1936745334;
        }
        else {
          int v4 = v3;
        }
        if (a2 == 1836281891) {
          unsigned int v5 = 1936745315;
        }
        else {
          unsigned int v5 = v4;
        }
        if (a2 == 1835295859) {
          int v6 = 1935893353;
        }
        else {
          int v6 = 0;
        }
        if (a2 == 1835295843) {
          unsigned int v7 = 1935894894;
        }
        else {
          unsigned int v7 = v6;
        }
        goto LABEL_101;
      }

      int v2 = 1836475426;
      if (a2 == 1836479331) {
        int v22 = 1818456950;
      }
      else {
        int v22 = 0;
      }
      if (a2 == 1836475490) {
        int v23 = 1818453110;
      }
      else {
        int v23 = v22;
      }
      if (a2 == 1836475427) {
        unsigned int v5 = 1818453106;
      }
      else {
        unsigned int v5 = v23;
      }
      int v19 = 1836462692;
      int v20 = 1818456932;
      BOOL v21 = a2 == 1836462707;
      unsigned int v7 = 1818453107;
      goto LABEL_77;
    }

    if (a2 <= 1784767338)
    {
      int v2 = 1668510306;
      if (a2 == 1684157046) {
        int v26 = 1818453107;
      }
      else {
        int v26 = 0;
      }
      if (a2 == 1668510307) {
        unsigned int v5 = 1935893353;
      }
      else {
        unsigned int v5 = v26;
      }
      int v13 = 1668506403;
      int v14 = 1935892841;
      BOOL v15 = a2 == 1668506475;
      int v16 = 1668049771;
    }

    else
    {
      int v2 = 1818456941;
      if (a2 == 1835295779) {
        int v11 = 1935892841;
      }
      else {
        int v11 = 0;
      }
      if (a2 == 1819501422) {
        int v12 = 1935894894;
      }
      else {
        int v12 = v11;
      }
      if (a2 == 1818456942) {
        unsigned int v5 = 1935894894;
      }
      else {
        unsigned int v5 = v12;
      }
      int v13 = 1784767339;
      int v14 = 1650685548;
      BOOL v15 = a2 == 1818455660;
      int v16 = 1935894894;
    }

    goto LABEL_96;
  }

  if (a2 <= 1937125987)
  {
    if (a2 <= 1936682094)
    {
      int v2 = 1935946357;
      if (a2 == 1936553332) {
        int v27 = 1650685548;
      }
      else {
        int v27 = 0;
      }
      if (a2 == 1935946358) {
        unsigned int v5 = 1818453107;
      }
      else {
        unsigned int v5 = v27;
      }
      int v13 = 1852601891;
      int v14 = 1935892841;
      BOOL v15 = a2 == 1852601964;
      int v16 = 1935893353;
LABEL_96:
      if (!v15) {
        int v16 = 0;
      }
      if (a2 == v13) {
        unsigned int v7 = v14;
      }
      else {
        unsigned int v7 = v16;
      }
      goto LABEL_101;
    }

    int v2 = 1936748066;
    if (a2 == 1936945763) {
      int v17 = 1935893353;
    }
    else {
      int v17 = 0;
    }
    if (a2 == 1936941859) {
      int v18 = 1935892841;
    }
    else {
      int v18 = v17;
    }
    if (a2 == 1936748067) {
      unsigned int v5 = 1936745315;
    }
    else {
      unsigned int v5 = v18;
    }
    int v19 = 1936682095;
    int v20 = 1650685548;
    BOOL v21 = a2 == 1936744814;
    unsigned int v7 = 1936745334;
LABEL_77:
    if (!v21) {
      unsigned int v7 = 0;
    }
    if (a2 == v19) {
      unsigned int v7 = v20;
    }
    goto LABEL_101;
  }

  if (a2 > 1953002100)
  {
    int v2 = 1986290210;
    if (a2 == 1987013741) {
      int v24 = 1818456950;
    }
    else {
      int v24 = 0;
    }
    if (a2 == 1987013732) {
      int v25 = 1818453110;
    }
    else {
      int v25 = v24;
    }
    if (a2 == 1986290211) {
      unsigned int v5 = 1818453106;
    }
    else {
      unsigned int v5 = v25;
    }
    int v19 = 1953002101;
    int v20 = 1650685548;
    BOOL v21 = a2 == 1983013986;
    unsigned int v7 = 1818456932;
    goto LABEL_77;
  }

  int v2 = 1937140835;
  if (a2 == 1953002099) {
    int v8 = 1650685548;
  }
  else {
    int v8 = 0;
  }
  if (a2 == 1937140845) {
    int v9 = 1818456950;
  }
  else {
    int v9 = v8;
  }
  if (a2 == 1937140836) {
    unsigned int v5 = 1818453110;
  }
  else {
    unsigned int v5 = v9;
  }
  unsigned int v7 = 1818456932;
  if (a2 == 1937138723) {
    int v10 = 1818453106;
  }
  else {
    int v10 = 0;
  }
  if (a2 != 1937125988) {
    unsigned int v7 = v10;
  }
LABEL_101:
  if (a2 <= v2) {
    return v7;
  }
  else {
    return v5;
  }
}

uint64_t sub_5E784(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v2 > 1684633186)
    {
      BOOL v3 = v2 == 1684633187 || v2 == 1685484390;
      int v5 = 1836478308;
    }

    else
    {
      BOOL v3 = v2 == 1064725619 || v2 == 1668443504;
      int v5 = 1668705648;
    }
  }

  else if (v2 <= 1986098019)
  {
    BOOL v3 = v2 == 1918987632 || v2 == 1919774835;
    int v5 = 1936878960;
  }

  else
  {
    if (v2 > 1986229103)
    {
      BOOL v3 = v2 == 1986817377;
      unsigned __int16 v4 = 29552;
    }

    else
    {
      BOOL v3 = v2 == 1986098020;
      unsigned __int16 v4 = 25966;
    }

    int v5 = v4 | 0x76630000;
  }

  if (!v3 && v2 != v5) {
    return sub_5E8AC(a1, a2);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  int v9 = *a2;
  uint64_t v10 = 1735159650LL;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 24LL))(v7, &v9);
}

uint64_t sub_5E8AC(uint64_t a1, int *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *a2;
  if (*a2 <= 1818456931)
  {
    if ((v3 - 1818453106) >= 2)
    {
      unsigned __int16 v4 = 25718;
      goto LABEL_6;
    }

    return v2;
  }

  if (v3 == 1818456932) {
    return v2;
  }
  unsigned __int16 v4 = 29558;
LABEL_6:
  if (v3 == (v4 | 0x6C630000)) {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1) ^ 1;
  }
  return sub_87538(a1, a2);
}

uint64_t sub_5E92C()
{
  return 0LL;
}

void sub_5E934(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  int v216 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 32LL))(a1, a2) & 1) == 0)
  {
    char v145 = (os_log_t *)sub_138E8(13);
    int v59 = 2003332927;
    os_log_t v146 = *v145;
    if (!*v145 || !os_log_type_enabled(*v145, OS_LOG_TYPE_ERROR)) {
      goto LABEL_388;
    }
    std::string __p = *(void **)a2;
    int v218 = a2[2];
    sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
    if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v147 = &v222;
    }
    else {
      v147 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Device.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 2841;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v147;
    unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.";
LABEL_322:
    std::string v151 = v146;
    uint32_t v152 = 28;
    goto LABEL_323;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    std::string::size_type v148 = (os_log_t *)sub_138E8(13);
    int v59 = 561211770;
    os_log_t v149 = *v148;
    if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v218 = a2[2];
      sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
      if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v150 = &v222;
      }
      else {
        std::string v150 = (std::string *)v222.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2842;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v150;
      __int16 v224 = 1024;
      *(_DWORD *)v225 = a3;
      *(_WORD *)&v225[4] = 2048;
      *(void *)&v225[6] = a4;
      unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is N"
            "ULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
      std::string v151 = v149;
      uint32_t v152 = 44;
      goto LABEL_323;
    }

    goto LABEL_388;
  }

  if (!a6)
  {
    std::string v153 = (os_log_t *)sub_138E8(13);
    int v59 = 561211770;
    os_log_t v154 = *v153;
    if (*v153 && os_log_type_enabled(*v153, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v218 = a2[2];
      sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
      if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v155 = &v222;
      }
      else {
        std::string v155 = (std::string *)v222.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2843;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      __int16 v224 = 2080;
      *(void *)v225 = v155;
      unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
      std::string v151 = v154;
      uint32_t v152 = 38;
      goto LABEL_323;
    }

    goto LABEL_388;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40LL))(a1, a2) & 1) == 0)
  {
    std::string v156 = (os_log_t *)sub_138E8(13);
    int v59 = 1852797029;
    os_log_t v146 = *v156;
    if (!*v156 || !os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR)) {
      goto LABEL_388;
    }
    std::string __p = *(void **)a2;
    int v218 = a2[2];
    sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
    if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v157 = &v222;
    }
    else {
      std::string v157 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Device.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 2844;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v157;
    unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.";
    goto LABEL_322;
  }

  int v14 = *a2;
  if (*a2 == 1836414053)
  {
    uint64_t v15 = sub_138E8(1);
    uint64_t v16 = sub_138E8(38);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = (int)buf[v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_12;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_12:
    uint64_t v7 = *(os_log_s **)v15;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v220 = *(void **)a2;
      int v221 = a2[2];
      sub_613AC((uint64_t)&v222, (unsigned int *)&v220);
      int size = (char)v222.__r_.__value_.__s.__size_;
      std::string::size_type v23 = v222.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(&__p, a1);
      int v24 = &v222;
      if (size < 0) {
        int v24 = (std::string *)v23;
      }
      if (v219 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v26 = *a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2848;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v24;
      __int16 v224 = 2080;
      *(void *)v225 = p_p;
      *(_WORD *)&v225[8] = 1024;
      *(_DWORD *)&v225[10] = v26;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %u.", (uint8_t *)buf, 0x2Cu);
      if (v219 < 0) {
        operator delete(__p);
      }
    }

    int v14 = *a2;
  }

  if (v14 == 1987013741)
  {
    uint64_t v27 = sub_138E8(1);
    uint64_t v28 = sub_138E8(38);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = (int)buf[v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_31;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_31:
    uint64_t v7 = *(os_log_s **)v27;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v220 = *(void **)a2;
      int v221 = a2[2];
      sub_613AC((uint64_t)&v222, (unsigned int *)&v220);
      int v34 = (char)v222.__r_.__value_.__s.__size_;
      std::string::size_type v35 = v222.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(&__p, a1);
      int v36 = &v222;
      if (v34 < 0) {
        int v36 = (std::string *)v35;
      }
      if (v219 >= 0) {
        int v37 = &__p;
      }
      else {
        int v37 = __p;
      }
      double v38 = *(float *)a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2851;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v36;
      __int16 v224 = 2080;
      *(void *)v225 = v37;
      *(_WORD *)&v225[8] = 2048;
      *(double *)&v225[10] = v38;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %f.", (uint8_t *)buf, 0x30u);
      if (v219 < 0) {
        operator delete(__p);
      }
    }
  }

  int v39 = *a2;
  if (*a2 == 1836478308)
  {
    uint64_t v40 = sub_138E8(1);
    uint64_t v41 = sub_138E8(38);
    char v42 = 0;
    uint64_t v43 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v44 = *(void *)(v40 + 8);
    while (1)
    {
      uint64_t v45 = (int)buf[v43];
      char v46 = v42;
      if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
        break;
      }
      char v42 = 1;
      uint64_t v43 = 1LL;
      if ((v46 & 1) != 0) {
        goto LABEL_49;
      }
    }

    if ((v44 & v45) == 0) {
      uint64_t v40 = v41;
    }
LABEL_49:
    uint64_t v7 = *(os_log_s **)v40;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v220 = *(void **)a2;
      int v221 = a2[2];
      sub_613AC((uint64_t)&v222, (unsigned int *)&v220);
      int v47 = (char)v222.__r_.__value_.__s.__size_;
      std::string::size_type v48 = v222.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(&__p, a1);
      int v49 = &v222;
      if (v47 < 0) {
        int v49 = (std::string *)v48;
      }
      if (v219 >= 0) {
        __int128 v50 = &__p;
      }
      else {
        __int128 v50 = __p;
      }
      unsigned int v51 = *a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2854;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v49;
      __int16 v224 = 2080;
      *(void *)v225 = v50;
      *(_WORD *)&v225[8] = 1024;
      *(_DWORD *)&v225[10] = v51;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %u.", (uint8_t *)buf, 0x2Cu);
      if (v219 < 0) {
        operator delete(__p);
      }
    }

    int v39 = *a2;
  }

  if (v39 <= 1685287522)
  {
    if (v39 <= 1668247660)
    {
      if (v39 <= 1634755427)
      {
        if (v39 <= 1633970531)
        {
          if (v39 <= 1633906540)
          {
            if (v39 == 1633776747) {
              goto LABEL_156;
            }
            unsigned __int16 v52 = 26983;
            goto LABEL_154;
          }

          if (v39 != 1633906541)
          {
            unsigned __int16 v52 = 29554;
LABEL_154:
            int v66 = v52 | 0x61630000;
LABEL_155:
            if (v39 == v66)
            {
LABEL_156:
              if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
              {
                unsigned int v75 = (os_log_t *)sub_138E8(13);
                int v59 = 561211770;
                os_log_t v60 = *v75;
                if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
                {
                  std::string __p = *(void **)a2;
                  int v218 = a2[2];
                  sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
                  int v76 = (char)v222.__r_.__value_.__s.__size_;
                  std::string::size_type v77 = v222.__r_.__value_.__r.__words[0];
                  int v78 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
                  unsigned int v79 = &v222;
                  buf[0] = 136316162;
                  *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                  if (v76 < 0) {
                    unsigned int v79 = (std::string *)v77;
                  }
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 3094;
                  HIWORD(buf[4]) = 2080;
                  *(void *)&buf[5] = v79;
                  __int16 v224 = 1024;
                  *(_DWORD *)v225 = a5;
                  *(_WORD *)&v225[4] = 1024;
                  *(_DWORD *)&v225[6] = v78;
                  unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required si"
                        "ze (passed: %u; required: %u).";
LABEL_330:
                  std::string v151 = v60;
                  uint32_t v152 = 40;
LABEL_323:
                  _os_log_impl(&dword_0, v151, OS_LOG_TYPE_ERROR, v65, (uint8_t *)buf, v152);
                  goto LABEL_388;
                }

                goto LABEL_388;
              }

              goto LABEL_185;
            }

LABEL_249:
            sub_616FC(a1, a2, a3, a4, a5, a6, a7);
            goto LABEL_186;
          }

LABEL_184:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
          {
            std::string v158 = (os_log_t *)sub_138E8(13);
            int v59 = 561211770;
            os_log_t v60 = *v158;
            if (*v158 && os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v218 = a2[2];
              sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
              int v159 = (char)v222.__r_.__value_.__s.__size_;
              std::string::size_type v160 = v222.__r_.__value_.__r.__words[0];
              int v161 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))( a1,  a2,  a3,  a4);
              v162 = &v222;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v159 < 0) {
                v162 = (std::string *)v160;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3086;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v162;
              __int16 v224 = 1024;
              *(_DWORD *)v225 = a5;
              *(_WORD *)&v225[4] = 1024;
              *(_DWORD *)&v225[6] = v161;
              unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_330;
            }

    int v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v53, "Precondition failure.");
  }

  if (!*(void *)v76)
  {
    __int128 v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
  }

  if (!sub_D12E8(*(const __CFDictionary **)v76, (const UInt8 *)"presetPath"))
  {
    unsigned int v51 = (os_log_t *)sub_138E8(13);
    unsigned __int16 v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 466;
      _os_log_impl(&dword_0, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_184;
  }

  if (!*(void *)v76)
  {
    double v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
  }

  sub_392A00((uint64_t)buf, *(const __CFDictionary **)v76, (const UInt8 *)"tuningPath");
  if (SHIBYTE(v82) < 0) {
    operator delete(*(void **)&cf[24]);
  }
  *(_OWORD *)&cf[24] = *(_OWORD *)buf;
  int v82 = *(void **)&buf[16];
  if (!*(void *)v76)
  {
    double v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
  }

  sub_392A00((uint64_t)buf, *(const __CFDictionary **)v76, (const UInt8 *)"presetPath");
  int v5 = (unint64_t)&v83;
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  std::string::size_type v83 = *(_OWORD *)buf;
  int v84 = *(void *)&buf[16];
  if (!*(void *)v76)
  {
    __int128 v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
  }

  if (sub_D12E8(*(const __CFDictionary **)v76, (const UInt8 *)"tuningFilePrefix"))
  {
    if (!*(void *)v76)
    {
      std::string::size_type v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Could not construct");
    }

    sub_392A00((uint64_t)buf, *(const __CFDictionary **)v76, (const UInt8 *)"tuningFilePrefix");
    if ((cf[23] & 0x80000000) != 0) {
      operator delete(*(void **)cf);
    }
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)buf;
    *(void *)&cf[16] = *(void *)&buf[16];
  }

  if (SHIBYTE(v66) < 0) {
    operator delete(__dst[0]);
  }
  *(_OWORD *)__dst = *(_OWORD *)cf;
  int v66 = *(void *)&cf[16];
  cf[23] = 0;
  cf[0] = 0;
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  double v67 = *(_OWORD *)&cf[24];
  uint64_t v68 = v82;
  HIBYTE(v82) = 0;
  cf[24] = 0;
  if (SHIBYTE(v70) < 0)
  {
    operator delete((void *)v69);
    uint64_t v69 = v83;
    char v70 = v84;
    HIBYTE(v84) = 0;
    LOBYTE(v83) = 0;
    if (SHIBYTE(v82) < 0) {
      operator delete(*(void **)&cf[24]);
    }
  }

  else
  {
    uint64_t v69 = v83;
    char v70 = v84;
    HIBYTE(v84) = 0;
    LOBYTE(v83) = 0;
  }

  if ((cf[23] & 0x80000000) != 0) {
    operator delete(*(void **)cf);
  }
  if (!v64)
  {
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
  }

  os_log_t v60 = a1;
  *(void *)CFTypeRef cf = 0LL;
  sub_390F30(&theDict, (const __CFDictionary *)v64, (const UInt8 *)"Configurations", cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  int v6 = (const __CFDictionary *)theDict.__r_.__value_.__r.__words[0];
  sub_22BC0C((uint64_t)buf, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  while (1)
  {
    sub_22BC0C((uint64_t)cf, v6);
    uint64_t v7 = *(void **)&cf[16];
    *(void *)&cf[8] = (uint64_t)(*(void *)&cf[24] - *(void *)&cf[16]) >> 3;
    int v8 = !*(void *)buf
      || *(void *)&buf[8] == (v86 - *(void *)&buf[16]) >> 3
      || *(void *)buf == *(void *)cf
      && *(void *)&buf[8] == (uint64_t)(*(void *)&cf[24] - *(void *)&cf[16]) >> 3;
    if (v82)
    {
      *(void *)&std::string::size_type v83 = v82;
      operator delete(v82);
      uint64_t v7 = *(void **)&cf[16];
    }

    if (v7)
    {
      *(void *)&cf[24] = v7;
      operator delete(v7);
    }

    if (v8) {
      break;
    }
    sub_390F98((uint64_t)cf, buf);
    uint64_t v10 = cf[23];
    if ((cf[23] & 0x80000000) != 0) {
      sub_24054(&__p, *(void **)cf, *(unint64_t *)&cf[8]);
    }
    else {
      std::string __p = *(std::string *)cf;
    }
    if (*(void *)&cf[24]) {
      CFRelease(*(CFTypeRef *)&cf[24]);
    }
    if (v10 < 0) {
      operator delete(*(void **)cf);
    }
    sub_390F98((uint64_t)&v74, buf);
    sub_391050((uint64_t)cf, (const __CFDictionary **)&v75);
    if (v75) {
      CFRelease(v75);
    }
    int v11 = sub_7ED44((uint64_t)&__p);
    int v12 = v11;
    int v13 = (unint64_t)v61[1];
    if (v61[1])
    {
      int v14 = (uint8x8_t)vcnt_s8((int8x8_t)v61[1]);
      v14.i16[0] = vaddlv_u8(v14);
      uint64_t v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        int v5 = v11;
      }

      else
      {
        int v5 = ((unint64_t)v61[1] - 1) & v11;
      }

      uint64_t v16 = (unsigned __int8 **)*((void *)v61[0] + v5);
      if (v16)
      {
        for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int8 **)i)
        {
          uint64_t v18 = *((void *)i + 1);
          if (v18 == v12)
          {
            if (sub_7F194(i + 16, (unsigned __int8 *)&__p))
            {
              sub_84AEC((uint64_t)(i + 40), (uint64_t)cf);
              int size = __p.__r_.__value_.__s.__size_;
              goto LABEL_121;
            }
          }

          else
          {
            if (v15 > 1)
            {
              if (v18 >= v13) {
                v18 %= v13;
              }
            }

            else
            {
              v18 &= v13 - 1;
            }

            if (v18 != v5) {
              break;
            }
          }
        }
      }
    }

    uint64_t v19 = (char *)operator new(0x158uLL);
    uint64_t v20 = v19;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v74.__r_.__value_.__l.__size_ = (std::string::size_type)&v62;
    v74.__r_.__value_.__s.__data_[16] = 0;
    *(void *)uint64_t v19 = 0LL;
    *((void *)v19 + 1) = v12;
    int size = __p.__r_.__value_.__s.__size_;
    else {
      *(std::string *)(v19 + 16) = __p;
    }
    sub_83DD0(v20 + 40, (__int128 *)cf);
    v74.__r_.__value_.__s.__data_[16] = 1;
    char v21 = (float)(unint64_t)(*((void *)&v62 + 1) + 1LL);
    if (!v13 || (float)(v63 * (float)v13) < v21)
    {
      int v22 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3) {
        int v22 = 1LL;
      }
      std::string::size_type v23 = v22 | (2 * v13);
      int v24 = vcvtps_u32_f32(v21 / v63);
      if (v23 <= v24) {
        int v25 = v24;
      }
      else {
        int v25 = v23;
      }
      sub_52168((uint64_t)v61, v25);
      int v13 = (unint64_t)v61[1];
      if (((unint64_t)v61[1] & ((unint64_t)v61[1] - 1)) != 0)
      {
        else {
          int v5 = v12;
        }
      }

      else
      {
        int v5 = ((unint64_t)v61[1] - 1) & v12;
      }
    }

    unsigned int v26 = v61[0];
    uint64_t v27 = (char **)*((void *)v61[0] + v5);
    if (v27)
    {
      *(void *)uint64_t v20 = *v27;
LABEL_119:
      os_log_t *v27 = v20;
      goto LABEL_120;
    }

    *(void *)uint64_t v20 = v62;
    *(void *)&std::string::size_type v62 = v20;
    v26[v5] = &v62;
    if (*(void *)v20)
    {
      uint64_t v28 = *(void *)(*(void *)v20 + 8LL);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v28 >= v13) {
          v28 %= v13;
        }
      }

      else
      {
        v28 &= v13 - 1;
      }

      uint64_t v27 = (char **)((char *)v61[0] + 8 * v28);
      goto LABEL_119;
    }

LABEL_338:
        CFStringRef v167 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v167, "Precondition failure.");
      }

      if (v39 != 1852012899)
      {
        if (v39 != 1853059700) {
          goto LABEL_249;
        }
        kdebug_trace(553912329LL, *(void *)a6, 0LL, 0LL, 0LL);
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
        {
          v196 = (os_log_t *)sub_138E8(13);
          int v59 = 561211770;
          os_log_t v60 = *v196;
          if (*v196 && os_log_type_enabled(*v196, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            int v218 = a2[2];
            sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
            int v197 = (char)v222.__r_.__value_.__s.__size_;
            std::string::size_type v198 = v222.__r_.__value_.__r.__words[0];
            int v199 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
            v200 = &v222;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v197 < 0) {
              v200 = (std::string *)v198;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2871;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v200;
            __int16 v224 = 1024;
            *(_DWORD *)v225 = a5;
            *(_WORD *)&v225[4] = 1024;
            *(_DWORD *)&v225[6] = v199;
            unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_330;
          }

          goto LABEL_388;
        }

        double v67 = *(double *)a6;
        uint64_t v68 = sub_138E8(1);
        uint64_t v69 = sub_138E8(36);
        char v70 = 0;
        uint64_t v71 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v72 = *(void *)(v68 + 8);
        while (1)
        {
          uint64_t v73 = (int)buf[v71];
          char v74 = v70;
          if (((v72 & v73) != 0) != ((*(void *)(v69 + 8) & v73) != 0)) {
            break;
          }
          char v70 = 1;
          uint64_t v71 = 1LL;
          if ((v74 & 1) != 0) {
            goto LABEL_276;
          }
        }

        if ((v72 & v73) == 0) {
          uint64_t v68 = v69;
        }
LABEL_276:
        CFStringRef v140 = *(os_log_s **)v68;
        if (v140 && os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
        {
          std::string __p = *(void **)(a1 + 576);
          sub_33464(&v222, (unsigned int *)&__p);
          v141 = (v222.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v222
               : (std::string *)v222.__r_.__value_.__r.__words[0];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2875;
          HIWORD(buf[4]) = 2048;
          *(double *)&buf[5] = v67;
          __int16 v224 = 2080;
          *(void *)v225 = v141;
          _os_log_impl( &dword_0,  v140,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to set nominal sample rate to %f on VAD: '%s'.",  (uint8_t *)buf,  0x26u);
        }

        if (!sub_75908((void *)a1, a2[1], v67))
        {
          v207 = (os_log_t *)sub_138E8(1);
          v208 = *v207;
          if (*v207 && os_log_type_enabled(*v207, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2884;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v67;
            _os_log_impl( &dword_0,  v208,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to set unsupported value for kAudioDevicePropertyNominalSampleRate (%f). Poor form but n ot likely a serious issue. Quietly returning failure.",  (uint8_t *)buf,  0x1Cu);
          }

          v209 = __cxa_allocate_exception(0x10uLL);
          *(void *)v209 = &off_4865A0;
          v209[2] = 560226676;
        }

        sub_77164(a1, v67);
        kdebug_trace(553912330LL, *(void *)a6, 0LL, 0LL, 0LL);
        goto LABEL_186;
      }

      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
      {
        v181 = (os_log_t *)sub_138E8(13);
        int v59 = 561211770;
        os_log_t v60 = *v181;
        if (*v181 && os_log_type_enabled(*v181, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v218 = a2[2];
          sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
          int v182 = (char)v222.__r_.__value_.__s.__size_;
          std::string::size_type v183 = v222.__r_.__value_.__r.__words[0];
          int v184 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          v185 = &v222;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v182 < 0) {
            v185 = (std::string *)v183;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2864;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v185;
          __int16 v224 = 1024;
          *(_DWORD *)v225 = a5;
          *(_WORD *)&v225[4] = 1024;
          *(_DWORD *)&v225[6] = v184;
          unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_330;
        }

        goto LABEL_388;
      }

      a3 = 0LL;
      a4 = 0LL;
    }

    goto LABEL_185;
  }

  if (v39 <= 1953002092)
  {
    if (v39 > 1936878959)
    {
      if (v39 > 1937138531)
      {
        if (v39 == 1937138532) {
          goto LABEL_184;
        }
        int v53 = 1952997988;
        goto LABEL_183;
      }

      if (v39 == 1936878960)
      {
LABEL_164:
        uint64_t v80 = *(void *)(a1 + 928);
        if (v80)
        {
          (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, unsigned int *, void))(*(void *)v80 + 64LL))( v80,  a2,  a3,  a4,  a5,  a6,  0LL);
          goto LABEL_186;
        }

        uint64_t v163 = (os_log_t *)sub_138E8(13);
        v164 = *v163;
        if (*v163 && os_log_type_enabled(*v163, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2993;
          _os_log_impl( &dword_0,  v164,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        goto LABEL_338;
      }

      if (v39 != 1936879204) {
        goto LABEL_249;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) > a5)
      {
        std::string::size_type v58 = (os_log_t *)sub_138E8(13);
        int v59 = 561211770;
        os_log_t v60 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v218 = a2[2];
          sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
          int v61 = (char)v222.__r_.__value_.__s.__size_;
          std::string::size_type v62 = v222.__r_.__value_.__r.__words[0];
          int v63 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          int v64 = &v222;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v61 < 0) {
            int v64 = (std::string *)v62;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2899;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v64;
          __int16 v224 = 1024;
          *(_DWORD *)v225 = a5;
          *(_WORD *)&v225[4] = 1024;
          *(_DWORD *)&v225[6] = v63;
          unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_330;
        }

        goto LABEL_388;
      }
    }

    else
    {
      if (v39 <= 1935762280)
      {
        if (v39 != 1919774835)
        {
          int v53 = 1934456180;
          goto LABEL_183;
        }

        goto LABEL_164;
      }

      if (v39 == 1935762281) {
        goto LABEL_184;
      }
      if (v39 != 1936876644) {
        goto LABEL_249;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) > a5)
      {
        uint64_t v81 = (os_log_t *)sub_138E8(13);
        int v59 = 561211770;
        os_log_t v60 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v218 = a2[2];
          sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
          int v82 = (char)v222.__r_.__value_.__s.__size_;
          std::string::size_type v83 = v222.__r_.__value_.__r.__words[0];
          int v84 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          uint64_t v85 = &v222;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v82 < 0) {
            uint64_t v85 = (std::string *)v83;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2859;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v85;
          __int16 v224 = 1024;
          *(_DWORD *)v225 = a5;
          *(_WORD *)&v225[4] = 1024;
          *(_DWORD *)&v225[6] = v84;
          unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_330;
        }

        goto LABEL_388;
      }
    }

    if (*(_DWORD *)(v249 + 440LL * v251 + 56) == 1)
    {
      __int16 v224 = sub_138E8(8);
      v225 = v243;
      if ((*(_BYTE *)(v224 + 8) & 1) != 0)
      {
        v226 = *(os_log_s **)v224;
        if (*(void *)v224)
        {
          if (os_log_type_enabled(*(os_log_t *)v224, OS_LOG_TYPE_DEBUG))
          {
            v227 = *(unsigned int *)(v249 + 440LL * v251 + 4);
            else {
              v228 = off_47A698[v227];
            }
            sub_7D084(&v277, v228);
            if ((v277.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v231 = &v277;
            }
            else {
              v231 = (std::string *)v277.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4894;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v231;
            _os_log_impl( &dword_0,  v226,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Failed to build an alternate concrete route for an optional alternate VAD %s; skipping and attem"
              "pting to recurse...",
              buf,
              0x1Cu);
            v225 = v243;
          }
        }
      }

      sub_11E94C(a1, a2, a3, v225 + 1, a5, a6, a7);
      if (!*(_DWORD *)(a1 + 8))
      {
        v234 = sub_138E8(8);
        if ((*(_BYTE *)(v234 + 8) & 1) != 0)
        {
          v235 = *(os_log_s **)v234;
          if (*(void *)v234)
          {
            if (os_log_type_enabled(*(os_log_t *)v234, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4902;
              _os_log_impl(&dword_0, v235, OS_LOG_TYPE_DEBUG, "%25s:%-5d Recursion succeeded; returning.", buf, 0x12u);
            }
          }
        }

        return;
      }

      v232 = sub_138E8(8);
      if ((*(_BYTE *)(v232 + 8) & 1) != 0)
      {
        v233 = *(os_log_s **)v232;
        if (*(void *)v232)
        {
          if (os_log_type_enabled(*(os_log_t *)v232, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4898;
            _os_log_impl( &dword_0,  v233,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Recursion failed after skipping optional alternate VAD.",  buf,  0x12u);
          }
        }
      }

      sub_7058C((void *)a1);
    }

    *(void *)a1 = off_4709D0;
    *(void *)(a1 + 8) = 1LL;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    return;
  }

  if ((v12 & 1) != 0)
  {
    int v161 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4910;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a4;
        _os_log_impl( &dword_0,  v161,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to activate after reviewing and successfully building concrete route for %u alternate dev ice specifications...",  buf,  0x18u);
      }
    }
  }

  v162 = sub_138E8(8);
  if ((*(_BYTE *)(v162 + 8) & 1) != 0)
  {
    uint64_t v163 = *(os_log_s **)v162;
    if (*(void *)v162)
    {
      if (os_log_type_enabled(*(os_log_t *)v162, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA6D0(&v277, (unsigned int ***)a6);
        v164 = (v277.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v277 : (std::string *)v277.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4911;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v164;
        _os_log_impl(&dword_0, v163, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route(s): %s.", buf, 0x1Cu);
      }
    }
  }

  ((void (*)(void **, std::string::size_type))(*a5)[2])(a5, a6);
  if (!*(_DWORD *)(a1 + 8)) {
    goto LABEL_313;
  }
  v165 = *(unsigned int ***)a6;
  v271 = *(unsigned int ***)(a6 + 8);
  do
  {
    v166 = (uint64_t)(*v165 + 4);
    for (uint64_t i = (void *)*((void *)*v165 + 3); i != (void *)v166; uint64_t i = (void *)i[1])
    {
      v168 = (__int128 *)(i + 2);
      sub_B8CBC((uint64_t *)buf, i + 2, "", 115);
      v169 = (*(uint64_t (**)(void))(**(void **)buf + 160LL))(*(void *)buf);
      v170 = v169;
      v171 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_269;
      }
      int v172 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        std::string::size_type v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
        if ((v170 & 1) != 0) {
          goto LABEL_286;
        }
      }

      else
      {
LABEL_269:
        if ((v169 & 1) != 0) {
          goto LABEL_286;
        }
      }

      int v174 = (void *)a7[1];
      v175 = a7[2];
      if ((unint64_t)v174 >= v175)
      {
        v180 = ((uint64_t)v174 - *a7) >> 4;
        v181 = v180 + 1;
        int v182 = v175 - *a7;
        if (v182 >> 3 > v181) {
          v181 = v182 >> 3;
        }
        else {
          std::string::size_type v183 = v181;
        }
        *(void *)&_BYTE buf[32] = a7 + 2;
        int v184 = (char *)sub_7BE90(v183);
        v185 = &v184[16 * v180];
        *(void *)buf = v184;
        *(void *)&buf[8] = v185;
        *(void *)&buf[24] = &v184[16 * v186];
        int v187 = *v168;
        *(_OWORD *)v185 = *v168;
        if (*((void *)&v187 + 1))
        {
          std::string::size_type v188 = (unint64_t *)(*((void *)&v187 + 1) + 16LL);
          do
            int v189 = __ldxr(v188);
          while (__stxr(v189 + 1, v188));
        }

        *(void *)&buf[16] = v185 + 16;
        sub_1213D4(a7, buf);
        int v179 = (void *)a7[1];
        sub_121448((uint64_t)buf);
      }

      else
      {
        *int v174 = i[2];
        v176 = i[3];
        v174[1] = v176;
        if (v176)
        {
          int v177 = (unint64_t *)(v176 + 16);
          do
            std::string::size_type v178 = __ldxr(v177);
          while (__stxr(v178 + 1, v177));
        }

        int v179 = v174 + 2;
        a7[1] = (uint64_t)(v174 + 2);
      }

      a7[1] = (uint64_t)v179;
LABEL_286:
      v190 = (__int128 *)(i + 4);
      sub_B8CBC((uint64_t *)buf, i + 4, "", 119);
      v191 = (*(uint64_t (**)(void))(**(void **)buf + 160LL))(*(void *)buf);
      int v192 = v191;
      std::string::size_type v193 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_290;
      }
      int v194 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
        if ((v192 & 1) != 0) {
          continue;
        }
      }

      else
      {
LABEL_290:
        if ((v191 & 1) != 0) {
          continue;
        }
      }

      v196 = (void *)a7[1];
      int v197 = a7[2];
      if ((unint64_t)v196 >= v197)
      {
        int v202 = ((uint64_t)v196 - *a7) >> 4;
        std::string::size_type v203 = v202 + 1;
        if ((unint64_t)(v202 + 1) >> 60) {
LABEL_370:
        }
          sub_7A87C();
        int v204 = v197 - *a7;
        if (v204 >> 3 > v203) {
          std::string::size_type v203 = v204 >> 3;
        }
        else {
          v205 = v203;
        }
        *(void *)&_BYTE buf[32] = a7 + 2;
        v206 = (char *)sub_7BE90(v205);
        v207 = &v206[16 * v202];
        *(void *)buf = v206;
        *(void *)&buf[8] = v207;
        *(void *)&buf[24] = &v206[16 * v208];
        v209 = *v190;
        *(_OWORD *)v207 = *v190;
        if (*((void *)&v209 + 1))
        {
          v210 = (unint64_t *)(*((void *)&v209 + 1) + 16LL);
          do
            v211 = __ldxr(v210);
          while (__stxr(v211 + 1, v210));
        }

        *(void *)&buf[16] = v207 + 16;
        sub_1213D4(a7, buf);
        v201 = (void *)a7[1];
        sub_121448((uint64_t)buf);
      }

      else
      {
        os_log_t *v196 = i[4];
        std::string::size_type v198 = i[5];
        v196[1] = v198;
        if (v198)
        {
          int v199 = (unint64_t *)(v198 + 16);
          do
            v200 = __ldxr(v199);
          while (__stxr(v200 + 1, v199));
        }

        v201 = v196 + 2;
        a7[1] = (uint64_t)(v196 + 2);
      }

      a7[1] = (uint64_t)v201;
    }

    ++v165;
  }

  while (v165 != v271);
LABEL_313:
  v212 = sub_138E8(8);
  if ((*(_BYTE *)(v212 + 8) & 1) != 0)
  {
    v213 = *(os_log_s **)v212;
    if (*(void *)v212)
    {
      if (os_log_type_enabled(*(os_log_t *)v212, OS_LOG_TYPE_DEBUG))
      {
        v214 = "failed";
        v215 = *(_DWORD *)(a1 + 8);
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_DWORD *)buf = 136315650;
        if (!v215) {
          v214 = "succeeded";
        }
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4917;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v214;
        _os_log_impl(&dword_0, v213, OS_LOG_TYPE_DEBUG, "%25s:%-5d Activation %s...", buf, 0x1Cu);
      }
    }
  }

  if (*(_DWORD *)(a1 + 8))
  {
    int v216 = (os_log_t *)sub_138E8(8);
    v217 = *v216;
    if (*v216)
    {
      if (os_log_type_enabled(*v216, OS_LOG_TYPE_DEFAULT))
      {
        sub_2DA6D0(&v277, (unsigned int ***)a6);
        int v218 = (v277.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v277 : (std::string *)v277.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4919;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v218;
        _os_log_impl(&dword_0, v217, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activation failed for route %s", buf, 0x1Cu);
      }
    }
  }

LABEL_185:
    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, unsigned int *))(**(void **)(a1 + 1008) + 48LL))( *(void *)(a1 + 1008),  a2,  a3,  a4,  a5,  a6);
    goto LABEL_186;
  }

  if (v39 > 1983996970)
  {
    if (v39 <= 2020111982)
    {
      if (v39 == 1983996971) {
        goto LABEL_184;
      }
      int v53 = 1986361444;
      goto LABEL_183;
    }

    if (v39 == 2020111983)
    {
      uint64_t v127 = sub_138E8(1);
      uint64_t v128 = sub_138E8(38);
      char v129 = 0;
      uint64_t v130 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v131 = *(void *)(v127 + 8);
      while (1)
      {
        uint64_t v132 = (int)buf[v130];
        char v133 = v129;
        if (((v131 & v132) != 0) != ((*(void *)(v128 + 8) & v132) != 0)) {
          break;
        }
        char v129 = 1;
        uint64_t v130 = 1LL;
        if ((v133 & 1) != 0) {
          goto LABEL_252;
        }
      }

      if ((v131 & v132) == 0) {
        uint64_t v127 = v128;
      }
LABEL_252:
      std::string v134 = *(os_log_s **)v127;
      if (v134 && os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
      {
        double v135 = *(double *)a6;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 96LL))(&v222, a1);
        std::string v136 = (v222.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v222 : (std::string *)v222.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2958;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v135;
        __int16 v224 = 2080;
        *(void *)v225 = v136;
        _os_log_impl( &dword_0,  v134,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client registering external hardware volume handler %p on VAD '%s'.",  (uint8_t *)buf,  0x26u);
      }

      *(_OWORD *)sub_B5258() = *(_OWORD *)a6;
    }

    else
    {
      if (v39 != 2021027692) {
        goto LABEL_249;
      }
      if (a2[1] != 1869968496)
      {
        v168 = (os_log_t *)sub_138E8(13);
        int v59 = 1970171760;
        v169 = *v168;
        if (!*v168 || !os_log_type_enabled(*v168, OS_LOG_TYPE_ERROR)) {
          goto LABEL_388;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2940;
        v170 = "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): an external volume handler is only suppo"
               "rted for output";
        goto LABEL_387;
      }

      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
      {
        v201 = (os_log_t *)sub_138E8(13);
        int v59 = 561211770;
        os_log_t v60 = *v201;
        if (*v201 && os_log_type_enabled(*v201, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v218 = a2[2];
          sub_613AC((uint64_t)&v222, (unsigned int *)&__p);
          int v202 = (char)v222.__r_.__value_.__s.__size_;
          std::string::size_type v203 = v222.__r_.__value_.__r.__words[0];
          int v204 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
          v205 = &v222;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v202 < 0) {
            v205 = (std::string *)v203;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2941;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v205;
          __int16 v224 = 1024;
          *(_DWORD *)v225 = a5;
          *(_WORD *)&v225[4] = 1024;
          *(_DWORD *)&v225[6] = v204;
          unsigned int v65 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_330;
        }

        goto LABEL_388;
      }

      if (!*(void *)(a1 + 928))
      {
        v206 = (os_log_t *)sub_138E8(13);
        v169 = *v206;
        int v59 = 2003329396;
        if (!*v206 || !os_log_type_enabled(*v206, OS_LOG_TYPE_ERROR)) {
          goto LABEL_388;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2942;
        v170 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mOutputMasterVolumeControl is NULL]: attempt to r"
               "egister external volume handler when output master volume control is NULL";
        goto LABEL_387;
      }

      uint64_t v90 = sub_138E8(1);
      uint64_t v91 = sub_138E8(38);
      char v92 = 0;
      uint64_t v93 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v94 = *(void *)(v90 + 8);
      while (1)
      {
        uint64_t v95 = (int)buf[v93];
        char v96 = v92;
        if (((v94 & v95) != 0) != ((*(void *)(v91 + 8) & v95) != 0)) {
          break;
        }
        char v92 = 1;
        uint64_t v93 = 1LL;
        if ((v96 & 1) != 0) {
          goto LABEL_290;
        }
      }

      if ((v94 & v95) == 0) {
        uint64_t v90 = v91;
      }
LABEL_290:
      unsigned __int8 v142 = *(os_log_s **)v90;
      if (v142 && os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
      {
        double v143 = *(double *)a6;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 96LL))(&v222, a1);
        char v144 = (v222.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v222 : (std::string *)v222.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2947;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v143;
        __int16 v224 = 2080;
        *(void *)v225 = v144;
        _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client registering external volume handler %p on VAD '%s'.",  (uint8_t *)buf,  0x26u);
      }

      sub_B1070(*(void *)(a1 + 928), *(void *)a6, *((void *)a6 + 1));
    }
  }

  else
  {
    if (v39 <= 1969844081)
    {
      if (v39 == 1953002093) {
        goto LABEL_184;
      }
      int v53 = 1953719148;
      goto LABEL_183;
    }

    if (v39 == 1969844082) {
      goto LABEL_184;
    }
    if (v39 != 1970303087) {
      goto LABEL_249;
    }
  }

        uint64_t v45 = (v46 + 1);
        char v46 = v45;
        if (0xAAAAAAAAAAAAAAABLL * ((v41[2] - v41[1]) >> 3) <= v45) {
          goto LABEL_186;
        }
      }

      if (sub_1D5354(v53) && (*v185 & 0xFFFFFFFD) == 1 && !(_DWORD)v46)
      {
        sub_2B1FE0((uint64_t)buf, *v41, -2);
        sub_2A4D2C((void **)&v203, (uint64_t)buf);
        char v70 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          uint64_t v71 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            uint64_t v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }

        uint64_t v73 = sub_138E8(16);
        if ((*(_BYTE *)(v73 + 8) & 1) == 0) {
          goto LABEL_185;
        }
        char v74 = *(os_log_t *)v73;
        if (!*(void *)v73 || !os_log_type_enabled(*(os_log_t *)v73, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_185;
        }
        sub_2B2B1C(&v217, *((void *)&v203 + 1) - 32LL);
        unsigned int v75 = &v217;
        if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unsigned int v75 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 139;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v75;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 0;
        int v61 = v74;
        std::string::size_type v62 = "%25s:%-5d Created hidden input stream: %s, stream index: %d";
      }

      else if (sub_1D5354(*v41) {
             && ((int v76 = (*(uint64_t (**)(uint64_t))(*(void *)*v41 + 312LL))(*v41), (v76 & 0xFF00000000LL) == 0)
      }
               ? (std::string::size_type v77 = -1)
               : (std::string::size_type v77 = v76),
                 (_DWORD)v46 == v77))
      {
        sub_2B1EAC((uint64_t)buf, *v41);
        sub_2A4D2C((void **)&v203, (uint64_t)buf);
        int v78 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          unsigned int v79 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            uint64_t v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }

        uint64_t v81 = sub_138E8(16);
        if ((*(_BYTE *)(v81 + 8) & 1) == 0) {
          goto LABEL_185;
        }
        int v82 = *(os_log_t *)v81;
        if (!*(void *)v81 || !os_log_type_enabled(*(os_log_t *)v81, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_185;
        }
        sub_2B2B1C(&v217, *((void *)&v203 + 1) - 32LL);
        std::string::size_type v83 = &v217;
        if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v83 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 145;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v83;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v46;
        int v61 = v82;
        std::string::size_type v62 = "%25s:%-5d Created Disabled Input Stream: %s, stream index: %d";
      }

      else
      {
        sub_2B1EAC((uint64_t)buf, *v41);
        sub_2A4D2C((void **)&v203, (uint64_t)buf);
        std::string::size_type v99 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          int v100 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            uint64_t v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }

        v102 = sub_138E8(16);
        if ((*(_BYTE *)(v102 + 8) & 1) == 0) {
          goto LABEL_185;
        }
        int v103 = *(os_log_t *)v102;
        if (!*(void *)v102 || !os_log_type_enabled(*(os_log_t *)v102, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_185;
        }
        sub_2B2B1C(&v217, *((void *)&v203 + 1) - 32LL);
        std::string::size_type v104 = &v217;
        if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v104 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 150;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v104;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v46;
        int v61 = v103;
        std::string::size_type v62 = "%25s:%-5d Created Disabled Input Stream: %s, stream index: %d";
      }

      int v63 = 34;
      goto LABEL_160;
    }

LABEL_186:
  if (*a2 == 1987013741)
  {
    if (a2[2])
    {
      __int128 v86 = (os_log_t *)sub_138E8(1);
      v87 = *v86;
      if (*v86)
      {
        if (os_log_type_enabled(*v86, OS_LOG_TYPE_DEBUG))
        {
          double v88 = *(float *)a6;
          int v89 = a2[2];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3103;
          HIWORD(buf[4]) = 2048;
          *(double *)&buf[5] = v88;
          __int16 v224 = 1024;
          *(_DWORD *)v225 = v89;
          _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Applying Individual volume %f to %u",  (uint8_t *)buf,  0x22u);
        }
      }
    }
  }

  if (v216) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

                                  uint64_t v91 = operator new(0x20uLL);
                                  v91[7] = v71;
                                  *(void *)uint64_t v91 = 0LL;
                                  *((void *)v91 + 1) = 0LL;
                                  *((void *)v91 + 2) = i;
                                  std::string *v83 = (uint64_t *)v91;
                                  if (*v172)
                                  {
                                    int v172 = (uint64_t **)*v172;
                                    uint64_t v91 = *v83;
                                  }

                                  sub_7A420(v173, (uint64_t *)v91);
                                  ++v174;
                                  char v70 = *((unsigned __int8 *)v5 + 136);
LABEL_189:
                                  if (!v70)
                                  {
                                    v147 = sub_138E8(13);
                                    std::string::size_type v148 = sub_8C7D4(1, *(void **)v147, *(void *)(v147 + 8));
                                    os_log_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue(v148);
                                    os_log_t v146 = v149;
                                    if (v149)
                                    {
                                      std::string v150 = v149;
                                      if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
                                      {
                                        *(_DWORD *)__s1 = 136315394;
                                        *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                        *(_WORD *)&__s1[12] = 1024;
                                        *(_DWORD *)&__s1[14] = 480;
                                        _os_log_impl( &dword_0,  v150,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __s1,  0x12u);
                                      }
                                    }

                                    goto LABEL_333;
                                  }
                                }

                                uint64_t v90 = 0;
LABEL_191:
                                char v92 = *(void *)((char *)v5 + 132);
                                if ((v92 & 0xFF00000000LL) == 0) {
                                  sub_8DEEC();
                                }
                                uint64_t v93 = *(id *)sub_138E8(2);
                                uint64_t v94 = v93;
                                if (v93)
                                {
                                  uint64_t v95 = (os_log_s *)v93;
                                  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                                  {
                                    sub_8E0F4(&cf, (uint64_t)(v5 + 5));
                                    char v96 = &cf;
                                    if ((cf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                                      char v96 = (std::string *)cf.__r_.__value_.__r.__words[0];
                                    }
                                    *(_DWORD *)__s1 = 136315906;
                                    *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                    *(_WORD *)&__s1[12] = 1024;
                                    *(_DWORD *)&__s1[14] = 483;
                                    std::string::size_type v188 = 1024;
                                    int v189 = v92;
                                    v190 = 2080;
                                    v191 = v96;
                                    _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Requested VAD (context id %u) for %s",  __s1,  0x22u);
                                  }
                                }

                                if ((v90 & 1) != 0)
                                {
LABEL_276:
                                  char v129 = v194;
                                  if (v194 == v192)
                                  {
                                    char v129 = v192;
                                    uint64_t v130 = 4LL;
                                  }

                                  else
                                  {
                                    if (!v194) {
                                      goto LABEL_281;
                                    }
                                    uint64_t v130 = 5LL;
                                  }

                                  (*((void (**)(void))*v129 + v130))();
LABEL_281:
                                  uint64_t v131 = v196;
                                  if (v196 == v195)
                                  {
                                    uint64_t v131 = v195;
                                    uint64_t v132 = 4LL;
                                  }

                                  else
                                  {
                                    if (!v196) {
                                      goto LABEL_286;
                                    }
                                    uint64_t v132 = 5LL;
                                  }

                                  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_286:
                                  char v133 = v199;
                                  if (v199 == &v197)
                                  {
                                    char v133 = &v197;
                                    std::string v134 = 4LL;
                                  }

                                  else
                                  {
                                    if (!v199) {
                                      goto LABEL_291;
                                    }
                                    std::string v134 = 5LL;
                                  }

                                  (*((void (**)(void))&(*v133)->isa + v134))();
LABEL_291:
                                  double v135 = v202;
                                  if (v202 == v200)
                                  {
                                    double v135 = v200;
                                    std::string v136 = 4LL;
                                  }

                                  else
                                  {
                                    if (!v202) {
                                      goto LABEL_296;
                                    }
                                    std::string v136 = 5LL;
                                  }

                                  (*((void (**)(void))*v135 + v136))();
LABEL_296:
                                  CFStringRef v137 = v204;
                                  if (v204 == v203)
                                  {
                                    CFStringRef v137 = v203;
                                    v138 = 4LL;
                                  }

                                  else
                                  {
                                    if (!v204)
                                    {
LABEL_301:
                                      sub_32C8C((void *)v165[1]);
                                      sub_32C8C(v170);
                                      goto LABEL_302;
                                    }

                                    v138 = 5LL;
                                  }

                                  (*(void (**)(void))(*v137 + 8 * v138))();
                                  goto LABEL_301;
                                }

                                sub_8ED48(&cf, (const void *)v5[27], v5[28]);
                                uint64_t v163 = v9;
                                sub_8ED70(v164, (uint64_t)&v163, 1LL);
                                v97 = (uint64_t)v204;
                                if (v204)
                                {
                                  if (v204 == v203)
                                  {
                                    v186 = v185;
                                    (*(void (**)(void *, _BYTE *))(v203[0] + 24LL))(v203, v185);
LABEL_205:
                                    int v98 = (uint64_t)v202;
                                    if (v202)
                                    {
                                      if (v202 == v200)
                                      {
                                        int v184 = v183;
                                        (*((void (**)(void **, _BYTE *))v200[0] + 3))(v200, v183);
LABEL_210:
                                        std::string::size_type v99 = (uint64_t)v199;
                                        if (v199)
                                        {
                                          if (v199 == &v197)
                                          {
                                            int v182 = v181;
                                            ((void (*)(uint64_t, uint64_t))v197->length)( (uint64_t)&v197,  (uint64_t)v181);
LABEL_215:
                                            int v100 = (uint64_t)v196;
                                            if (v196)
                                            {
                                              if (v196 == v195)
                                              {
                                                v180 = v179;
                                                (*(void (**)(void *, _BYTE *))(v195[0] + 24LL))(v195, v179);
LABEL_220:
                                                uint64_t v101 = (uint64_t)v194;
                                                if (v194)
                                                {
                                                  if (v194 == v192)
                                                  {
                                                    std::string::size_type v178 = v177;
                                                    (*((void (**)(void **, _BYTE *))v192[0] + 3))(v192, v177);
LABEL_225:
                                                    sub_54070(v155, (const void ***)v5 + 36);
                                                    sub_8EE00( (uint64_t)__s1,  v92,  28,  (uint64_t)&cf,  (uint64_t)v165,  1,  1987011684,  v8,  (uint64_t)v164,  1,  (uint64_t)v185,  (uint64_t)v183,  (uint64_t)v181,  (uint64_t)v179,  (uint64_t)v177,  v155,  v5[34]);
                                                    v102 = a1[1];
                                                    int v103 = a1[2];
                                                    if (v102 < v103)
                                                    {
                                                      std::string::size_type v104 = sub_8F344(v102, (uint64_t)__s1) + 440;
                                                      a1[1] = v104;
                                                      goto LABEL_243;
                                                    }

                                                    int v105 = 0x6FB586FB586FB587LL * ((uint64_t)(v102 - *a1) >> 3);
                                                    v106 = v105 + 1;
                                                    v107 = 0x6FB586FB586FB587LL * ((uint64_t)(v103 - *a1) >> 3);
                                                    if (2 * v107 > v106) {
                                                      v106 = 2 * v107;
                                                    }
                                                    if (v107 >= 0x4A7904A7904A79LL) {
                                                      v108 = 0x94F2094F2094F2LL;
                                                    }
                                                    else {
                                                      v108 = v106;
                                                    }
                                                    if (v108)
                                                    {
                                                      unsigned int v110 = (char *)sub_8F5F8(v108);
                                                    }

                                                    else
                                                    {
                                                      unsigned int v110 = 0LL;
                                                      v109 = 0LL;
                                                    }

                                                    unint64_t v111 = &v110[440 * v109];
                                                    unint64_t v112 = sub_8F344((uint64_t)&v110[440 * v105], (uint64_t)__s1);
                                                    std::string::size_type v104 = v112 + 440;
                                                    uint64_t v114 = (char *)*a1;
                                                    uint64_t v113 = (char *)a1[1];
                                                    if (v113 == (char *)*a1)
                                                    {
                                                      *a1 = v112;
                                                      a1[1] = v104;
                                                      a1[2] = (uint64_t)v111;
                                                      if (v113) {
LABEL_242:
                                                      }
                                                        operator delete(v113);
                                                    }

                                                    else
                                                    {
                                                      do
                                                      {
                                                        v113 -= 440;
                                                        unint64_t v112 = sub_8F344(v112 - 440, (uint64_t)v113);
                                                      }

                                                      while (v113 != v114);
                                                      uint64_t v115 = (char *)*a1;
                                                      uint64_t v113 = (char *)a1[1];
                                                      *a1 = v112;
                                                      a1[1] = v104;
                                                      a1[2] = (uint64_t)v111;
                                                      if (v113 != v115)
                                                      {
                                                        do
                                                        {
                                                          v113 -= 440;
                                                          sub_8F164((uint64_t)v113);
                                                        }

                                                        while (v113 != v115);
                                                        uint64_t v113 = v115;
                                                      }

                                                      if (v113) {
                                                        goto LABEL_242;
                                                      }
                                                    }

  if (v217)
  {
    int v218 = (int8x16_t *)v217;
    operator delete(v217);
  }

  if (v220)
  {
    int v221 = (int8x16_t *)v220;
    operator delete(v220);
  }

    int v118 = v41[4];
    if (v41[5] != v118)
    {
      unsigned int v119 = 0LL;
      uint64_t v120 = 0LL;
      do
      {
        if (!*(void *)(v118 + 24 * v119 + 16))
        {
          sub_2B1EAC((uint64_t)buf, *v41);
          sub_2A4D2C((void **)&v204 + 1, (uint64_t)buf);
          uint64_t v125 = *(std::__shared_weak_count **)&buf[16];
          if (*(void *)&buf[16])
          {
            char v126 = (unint64_t *)(*(void *)&buf[16] + 8LL);
            do
              uint64_t v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }

          uint64_t v128 = sub_138E8(16);
          if ((*(_BYTE *)(v128 + 8) & 1) != 0)
          {
            char v129 = *(os_log_s **)v128;
            if (*(void *)v128)
            {
              if (os_log_type_enabled(*(os_log_t *)v128, OS_LOG_TYPE_DEBUG))
              {
                sub_2B2B1C(&v217, v205 - 32);
                uint64_t v130 = &v217;
                if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v130 = (std::string *)v217.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 176;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v130;
                _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created Disabled Output Stream: %s",  buf,  0x1Cu);
              }
            }
          }

          goto LABEL_260;
        }

        if (v192)
        {
          uint64_t v121 = (os_log_t *)sub_138E8(16);
          char v122 = *v121;
          if (*v121 && os_log_type_enabled(*v121, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&v217, v187);
            uint64_t v123 = &v217;
            if ((v217.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v123 = (std::string *)v217.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 159;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v123;
            _os_log_impl( &dword_0,  v122,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating output stream with optional downlink mode: %s",  buf,  0x1Cu);
          }

          uint64_t v124 = v187;
          if (*(_BYTE *)(a4 + 16))
          {
            uint64_t v124 = v187;
LABEL_216:
            std::string v134 = (__int128 *)a4;
            goto LABEL_219;
          }
        }

        else
        {
          uint64_t v124 = v189;
          if (!*(_BYTE *)(a4 + 16))
          {
            uint64_t v124 = v189;
LABEL_218:
            std::string v134 = a3;
            goto LABEL_219;
          }
        }

        uint64_t v131 = (os_log_t *)sub_138E8(13);
        uint64_t v132 = *v131;
        if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
        {
          char v133 = *(unsigned __int8 *)(a4 + 16);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 163;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v180;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v133;
          _os_log_impl( &dword_0,  v132,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Optional Output Mode has_value(%d) and OutputMode SystemAudioEffectsSettings has_value(%d) must match",  buf,  0x1Eu);
        }

        if (!v192) {
          goto LABEL_218;
        }
        std::string v134 = a3;
        if (*(_BYTE *)(a4 + 16)) {
          goto LABEL_216;
        }
LABEL_219:
        int v216 = *v134;
        double v135 = sub_28153C((uint64_t)v13, v124, &v216, 1LL, v120, v41, (unsigned int *)a2);
        sub_2A4CCC(&v214, v135);
        std::string v136 = *(void *)&v202[1];
        if (*(void *)&v202[1] >= *((void *)&v202[1] + 1))
        {
          v141 = (uint64_t)(*(void *)&v202[1] - *((void *)&v202[0] + 1)) >> 4;
          unsigned __int8 v142 = v141 + 1;
          double v143 = *((void *)&v202[1] + 1) - *((void *)&v202[0] + 1);
          else {
            char v144 = v142;
          }
          *(void *)&_BYTE buf[32] = (char *)&v202[1] + 8;
          char v145 = (char *)sub_7BE90(v144);
          v147 = &v145[16 * v141];
          std::string::size_type v148 = *((void *)&v214 + 1);
          *(_OWORD *)v147 = v214;
          if (v148)
          {
            os_log_t v149 = (unint64_t *)(v148 + 8);
            do
              std::string v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }

          uint32_t v152 = (void *)*((void *)&v202[0] + 1);
          std::string v151 = *(void **)&v202[1];
          if (*(void *)&v202[1] == *((void *)&v202[0] + 1))
          {
            std::string v155 = vdupq_n_s64(*(unint64_t *)&v202[1]);
            std::string v153 = &v145[16 * v141];
          }

          else
          {
            std::string v153 = &v145[16 * v141];
            do
            {
              os_log_t v154 = *((_OWORD *)v151 - 1);
              v151 -= 2;
              *((_OWORD *)v153 - 1) = v154;
              v153 -= 16;
              *std::string v151 = 0LL;
              v151[1] = 0LL;
            }

            while (v151 != v152);
            std::string v155 = *(int64x2_t *)((char *)v202 + 8);
          }

          CFStringRef v140 = v147 + 16;
          *((void *)&v202[0] + 1) = v153;
          *(void *)&v202[1] = v147 + 16;
          *(int64x2_t *)&buf[8] = v155;
          std::string v156 = *((void *)&v202[1] + 1);
          *((void *)&v202[1] + 1) = &v145[16 * v146];
          *(void *)&buf[24] = v156;
          *(void *)buf = v155.i64[0];
          sub_A0D64((uint64_t)buf);
        }

        else
        {
          **(void **)&v202[1] = v214;
          CFStringRef v137 = *((void *)&v214 + 1);
          *(void *)(v136 + 8) = *((void *)&v214 + 1);
          if (v137)
          {
            v138 = (unint64_t *)(v137 + 8);
            do
              unsigned __int8 v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }

          CFStringRef v140 = (_OWORD *)(v136 + 16);
        }

        *(void *)&v202[1] = v140;
        sub_2B1FE0((uint64_t)buf, *v41, (((unint64_t)v140 - *((void *)&v202[0] + 1)) >> 4) - 1);
        sub_2A4D2C((void **)&v204 + 1, (uint64_t)buf);
        std::string v157 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          std::string v158 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            int v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }

        std::string::size_type v160 = sub_138E8(16);
        if ((*(_BYTE *)(v160 + 8) & 1) != 0)
        {
          int v161 = *(os_log_s **)v160;
          if (*(void *)v160)
          {
            if (os_log_type_enabled(*(os_log_t *)v160, OS_LOG_TYPE_DEBUG))
            {
              sub_23FE8((uint64_t)&v217, (os_unfair_lock_t)(*(void *)(*(void *)&v202[1] - 16LL) + 8LL));
              v162 = (char)v217.__r_.__value_.__s.__size_;
              uint64_t v163 = v217.__r_.__value_.__r.__words[0];
              sub_2B2B1C(&v215, v205 - 32);
              v164 = &v217;
              if (v162 < 0) {
                v164 = (std::string *)v163;
              }
              v165 = &v215;
              if ((v215.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v165 = (std::string *)v215.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Simple2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 171;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v164;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v165;
              _os_log_impl( &dword_0,  v161,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created Client Output Stream: %s with Underlying Stream: %s",  buf,  0x26u);
              int v13 = v181;
            }
          }
        }

        v166 = (std::__shared_weak_count *)*((void *)&v214 + 1);
        if (*((void *)&v214 + 1))
        {
          CFStringRef v167 = (unint64_t *)(*((void *)&v214 + 1) + 8LL);
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }

void sub_61180( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, char a20, int a21, int a22, __int16 a23, char a24, char a25, uint64_t a26)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(exception_object);
}

void sub_613AC(uint64_t a1, unsigned int *a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  std::string::reserve((std::string *)a1, 0x18uLL);
  sub_2CA1C(&v25, *a2);
  unsigned __int16 v4 = std::string::insert(&v25, 0LL, "[", 1uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = std::string::append(&v26, "/", 1uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_2CA1C(__p, a2[1]);
  if ((v24 & 0x80u) == 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v9 = v24;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v27, (const std::string::value_type *)v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = std::string::append(&v28, "/", 1uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v22, a2[2]);
  if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v14 = &v22;
  }
  else {
    int v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v22.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v18 = std::string::append(&v30, "]", 1uLL);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
  v31[0] = v18->__r_.__value_.__l.__size_;
  *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v20 = v18->__r_.__value_.__s.__size_;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v21 = v31[0];
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 15) = *(void *)((char *)v31 + 7);
  *(_BYTE *)(a1 + 23) = v20;
}

void sub_6161C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_616FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  int v8 = a5;
  int v10 = *a2;
  if (*a2 > 1869180522)
  {
    if (v10 == 1869180523)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
      if ((_DWORD)result != v8)
      {
        std::string v28 = (os_log_t *)sub_138E8(13);
        std::string v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          int v34 = "HP_Device.cpp";
          __int16 v35 = 1024;
          int v36 = 1012;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyHogMode",  buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 561211770;
      }
    }

    else
    {
      if (v10 != 1937077093) {
        return sub_61C64(a1, a2, a3, a4, a5, (uint64_t)a6, a7);
      }
      int v13 = a2[1];
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) != (_DWORD)a5)
      {
        std::string v22 = (os_log_t *)sub_138E8(13);
        std::string::size_type v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          int v34 = "HP_Device.cpp";
          __int16 v35 = 1024;
          int v36 = 1024;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyIOProcStreamUsage",  buf,  0x12u);
        }

        unsigned __int8 v24 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned __int8 v24 = &off_4865A0;
        v24[2] = 561211770;
      }

      return (*(uint64_t (**)(uint64_t, void, BOOL, void, unsigned int *))(*(void *)a1 + 408LL))( a1,  *(void *)a6,  v13 == 1768845428,  a6[2],  a6 + 3);
    }
  }

  else
  {
    if (v10 != 1718839674)
    {
      if (v10 == 1735354734)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) != (_DWORD)a5)
        {
          std::string::size_type v19 = (os_log_t *)sub_138E8(13);
          unsigned __int8 v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            int v34 = "HP_Device.cpp";
            __int16 v35 = 1024;
            int v36 = 1000;
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyDeviceIsRunning",  buf,  0x12u);
          }

          uint64_t v21 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v21 = &off_4865A0;
          v21[2] = 561211770;
        }

        uint64_t v11 = *(void *)a1;
        if (*a6) {
          int v12 = *(uint64_t (**)(uint64_t, void))(v11 + 344);
        }
        else {
          int v12 = *(uint64_t (**)(uint64_t, void))(v11 + 376);
        }
        return v12(a1, 0LL);
      }

      return sub_61C64(a1, a2, a3, a4, a5, (uint64_t)a6, a7);
    }

    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) != (_DWORD)a5)
    {
      std::string v25 = (os_log_t *)sub_138E8(13);
      std::string v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v34 = "HP_Device.cpp";
        __int16 v35 = 1024;
        int v36 = 1017;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyBufferFrameSize",  buf,  0x12u);
      }

      std::string v27 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v27 = &off_4865A0;
      v27[2] = 561211770;
    }

    uint64_t v15 = (os_log_t *)sub_138E8(5);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *a6;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96LL))(__p, a1);
      uint64_t v18 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      int v34 = "HP_Device.cpp";
      __int16 v35 = 1024;
      int v36 = 1018;
      __int16 v37 = 1024;
      int v38 = v17;
      __int16 v39 = 2080;
      uint64_t v40 = v18;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client request to set buffer frame size to %u on VAD: '%s'.",  buf,  0x22u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }

    return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 488LL))(a1, *a6);
  }

  return result;
}

uint64_t sub_61C64(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1) & 1) == 0)
  {
    int v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v35 = "HP_Object.cpp";
      __int16 v36 = 1024;
      int v37 = 245;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): address isn't settable",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  if (*a2 == 1818850162)
  {
    if ((_DWORD)a5 != 12)
    {
      std::string::size_type v23 = (os_log_t *)sub_138E8(13);
      unsigned __int8 v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v35 = "HP_Object.cpp";
        __int16 v36 = 1024;
        int v37 = 254;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyListenerRemoved",  buf,  0x12u);
      }

      std::string v25 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v25 = &off_4865A0;
      v25[2] = 561211770;
    }

    int v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL);
    return v14(a1, a6);
  }

  if (*a2 == 1818850145)
  {
    if ((_DWORD)a5 != 12)
    {
      unsigned __int8 v20 = (os_log_t *)sub_138E8(13);
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v35 = "HP_Object.cpp";
          __int16 v36 = 1024;
          int v37 = 249;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyListenerAdded",  buf,  0x12u);
        }
      }

      std::string v22 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v22 = &off_4865A0;
      v22[2] = 561211770;
    }

    int v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL);
    return v14(a1, a6);
  }

  uint64_t v16 = sub_5CC60(a1, a2);
  if (!v16)
  {
    std::string v26 = (os_log_t *)sub_138E8(13);
    std::string v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)a2;
      int v31 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v30);
      std::string v28 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v35 = "HP_Object.cpp";
      __int16 v36 = 1024;
      int v37 = 267;
      __int16 v38 = 2080;
      __int16 v39 = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property %s.",  buf,  0x1Cu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }

    std::string v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v29 = &off_4865A0;
    v29[2] = 2003332927;
  }

  return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 48LL))( v16,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_62088(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680LL))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v15 = result;
    int v16 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 696LL))(*(void *)(a1 + 8), *a2);
    uint64_t v17 = 1735159650LL;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 64LL))( v15,  &v16,  a3,  a4,  a5,  a6,  a7);
  }

  return result;
}

uint64_t sub_62140( void **a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int32 *a6, uint64_t a7)
{
  if ((((uint64_t (*)(void **))(*a1)[4])(a1) & 1) == 0)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v40);
      std::string::size_type v19 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v45 = "VirtualAudio_Control.cpp";
      __int16 v46 = 1024;
      int v47 = 262;
      __int16 v48 = 2080;
      int v49 = (const char *)v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    std::string v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v40);
      std::string::size_type v23 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v45 = "VirtualAudio_Control.cpp";
      __int16 v46 = 1024;
      int v47 = 263;
      __int16 v48 = 2080;
      int v49 = (const char *)v23;
      __int16 v50 = 1024;
      LODWORD(v51[0]) = a3;
      WORD2(v51[0]) = 2048;
      *(void *)((char *)v51 + 6) = a4;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }

    unsigned __int8 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned __int8 v24 = &off_4865A0;
    v24[2] = 561211770;
  }

  if (!a6)
  {
    std::string v25 = (os_log_t *)sub_138E8(13);
    std::string v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v40);
      std::string v27 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v45 = "VirtualAudio_Control.cpp";
      __int16 v46 = 1024;
      int v47 = 264;
      __int16 v48 = 2080;
      int v49 = "inData";
      __int16 v50 = 2080;
      v51[0] = v27;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }

    std::string v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v28 = &off_4865A0;
    v28[2] = 561211770;
  }

  if ((((uint64_t (*)(void **, int *))(*a1)[5])(a1, a2) & 1) == 0)
  {
    std::string v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v40);
      int v31 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v45 = "VirtualAudio_Control.cpp";
      __int16 v46 = 1024;
      int v47 = 265;
      __int16 v48 = 2080;
      int v49 = (const char *)v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }

    char v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v32 = &off_4865A0;
    v32[2] = 1852797029;
  }

  int v14 = *a2;
  if (*a2 > 1919774834)
  {
    if (v14 > 1986098019)
    {
      if (v14 == 1986817377) {
        goto LABEL_17;
      }
      int v15 = 1986098020;
    }

    else
    {
      if (v14 == 1919774835) {
        goto LABEL_17;
      }
      int v15 = 1936878960;
    }
  }

  else if (v14 > 1836478307)
  {
    if (v14 == 1836478308) {
      goto LABEL_17;
    }
    int v15 = 1918987632;
  }

  else
  {
    if (v14 == 1668443504) {
      goto LABEL_17;
    }
    int v15 = 1668705648;
  }

  if (v14 != v15) {
    return sub_628B4((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  }
LABEL_17:
  if (((unsigned int (*)(void **, int *, uint64_t, uint64_t))(*a1)[6])(a1, a2, a3, a4) != (_DWORD)a5)
  {
    char v33 = (os_log_t *)sub_138E8(13);
    int v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)a2;
      int v41 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v40);
      int v35 = v43;
      __int16 v36 = (void **)__p[0];
      int v37 = ((uint64_t (*)(void **, int *, uint64_t, uint64_t))(*a1)[6])(a1, a2, a3, a4);
      __int16 v38 = __p;
      *(_DWORD *)buf = 136316162;
      uint64_t v45 = "VirtualAudio_Control.cpp";
      if (v35 < 0) {
        __int16 v38 = v36;
      }
      __int16 v46 = 1024;
      int v47 = 277;
      __int16 v48 = 2080;
      int v49 = (const char *)v38;
      __int16 v50 = 1024;
      LODWORD(v51[0]) = a5;
      WORD2(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 6) = v37;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v39 = &off_4865A0;
    v39[2] = 561211770;
  }

  return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t, uint64_t, unsigned __int32 *))(*a1[12] + 48LL))( a1[12],  a2,  a3,  a4,  a5,  a6);
}

void sub_62840( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_62864(uint64_t a1, int *a2)
{
  int v2 = *a2;
  else {
    return sub_87474(a1, a2);
  }
}

uint64_t sub_628B4( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int32 *a6, uint64_t a7)
{
  if (*a2 == 1818453110)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) == (_DWORD)a5)
    {
      v9.n128_u32[0] = *a6;
      int v10 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 232LL);
      return v10(a1, v9);
    }

    int v15 = (os_log_t *)sub_138E8(13);
    int v13 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "HP_Control.cpp";
      __int16 v19 = 1024;
      int v20 = 545;
      int v14 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyDecibelValue";
      goto LABEL_15;
    }

LABEL_16:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  if (*a2 == 1818456950)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) == (_DWORD)a5)
    {
      v9.n128_u32[0] = *a6;
      int v10 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 248LL);
      return v10(a1, v9);
    }

    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "HP_Control.cpp";
      __int16 v19 = 1024;
      int v20 = 540;
      int v14 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyScalarValue";
LABEL_15:
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v17, 0x12u);
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  return sub_61C64(a1, a2, a3, a4, a5, (uint64_t)a6, a7);
}

  int v12 = 0LL;
  if (v4) {
LABEL_17:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v12;
}

  if (*v6)
  {
    std::string::size_type v23 = (uint64_t *)v10;
    int v12 = v10 + 1;
    goto LABEL_30;
  }

  std::string::size_type v23 = v6;
  int v12 = (uint64_t **)v6;
LABEL_31:
  int v6 = (uint64_t *)operator new(0x30uLL);
  uint64_t v18 = a4[1];
  v6[4] = *a4;
  v6[5] = v18;
  if (v18)
  {
    __int16 v19 = (unint64_t *)(v18 + 16);
    do
      int v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  sub_32C38(a1, (uint64_t)v23, v12, v6);
  return v6;
}

  int v13 = *(void **)(a1 + 8);
  if (v13 != (void *)(a1 + 16))
  {
    do
    {
      int v14 = *(void *)((char *)v13 + 28);
      __int16 v39 = v14;
      for (uint64_t i = (uint64_t *)v2[58]; i != v3; uint64_t i = (uint64_t *)i[1])
      {
        if (i[2] == v14)
        {
          if (i != v3)
          {
            int v16 = *i;
            *(void *)(v16 + 8) = i[1];
            *(void *)i[1] = v16;
            --v2[59];
            sub_DDF54((uint64_t)(i + 2));
            int v17 = i;
LABEL_23:
            operator delete(v17);
            goto LABEL_37;
          }

          break;
        }
      }

      uint64_t v18 = sub_138E8(8);
      __int16 v19 = sub_138E8(34);
      int v20 = 0;
      uint64_t v21 = 0LL;
      *(void *)buf = 0x100000002LL;
      std::string v22 = *(void *)(v18 + 8);
      while (1)
      {
        std::string::size_type v23 = *(int *)&buf[4 * v21];
        unsigned __int8 v24 = v20;
        if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
          break;
        }
        int v20 = 1;
        uint64_t v21 = 1LL;
        if ((v24 & 1) != 0)
        {
          if ((v22 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_32;
        }
      }

      if ((v22 & v23) == 0) {
        uint64_t v18 = v19;
      }
      if ((*(void *)(v18 + 8) & 1) == 0) {
        goto LABEL_37;
      }
LABEL_32:
      std::string v25 = *(os_log_s **)v18;
      if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        sub_33464(&__p, (unsigned int *)&v39);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RouteCache.cpp";
        char v42 = 1024;
        char v43 = 524;
        uint64_t v44 = 2080;
        uint64_t v45 = p_p;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Unable to find device type %s within route cache",  buf,  0x1Cu);
        if ((char)__p.__r_.__value_.__s.__size_ < 0)
        {
          int v17 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
      }

  if (*(void *)(a1 + 40) != a2[5]) {
    return 0LL;
  }
  __n128 v9 = *(void **)(a1 + 24);
  int v10 = (void *)(a1 + 32);
  if (v9 == (void *)(a1 + 32)) {
    return 1LL;
  }
  uint64_t v11 = (void *)a2[3];
  while (1)
  {
    int v12 = v9[4];
    int v13 = v11[4];
    uint64_t result = v12 == v13;
    if (v12 != v13) {
      break;
    }
    int v15 = (void *)v9[1];
    int v16 = v9;
    if (v15)
    {
      do
      {
        __n128 v9 = v15;
        int v15 = (void *)*v15;
      }

      while (v15);
    }

    else
    {
      do
      {
        __n128 v9 = (void *)v16[2];
        int v6 = *v9 == (void)v16;
        int v16 = v9;
      }

      while (!v6);
    }

    int v17 = (void *)v11[1];
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        int v17 = (void *)*v17;
      }

      while (v17);
    }

    else
    {
      do
      {
        uint64_t v18 = (void *)v11[2];
        int v6 = *v18 == (void)v11;
        uint64_t v11 = v18;
      }

      while (!v6);
    }

    uint64_t v11 = v18;
    if (v9 == v10) {
      return 1LL;
    }
  }

  return result;
}

  if (*(void *)(a2 + 40) != *(void *)(a3 + 40)) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
  int v12 = (unsigned __int8 *)(a2 + 32);
  if (v11 == (unsigned __int8 *)(a2 + 32))
  {
LABEL_31:
    if (*(void *)(a2 + 64) == *(void *)(a3 + 64))
    {
      __int16 v19 = *(unsigned __int8 **)(a2 + 48);
      if (v19 == (unsigned __int8 *)(a2 + 56))
      {
LABEL_46:
        if (*(_BYTE *)(a2 + 73)) {
          std::string v25 = *(_BYTE *)(a3 + 73) == 0;
        }
        else {
          std::string v25 = 1;
        }
        if (v25) {
          return (*(_BYTE *)(a2 + 73) != 0) == (*(_BYTE *)(a3 + 73) != 0);
        }
        else {
          return *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)(a3 + 72);
        }
      }

      else
      {
        int v20 = *(unsigned __int8 **)(a3 + 48);
        while (1)
        {
          uint64_t result = sub_7F194(v19 + 32, v20 + 32);
          if (!result) {
            break;
          }
          uint64_t v21 = (unsigned __int8 *)*((void *)v19 + 1);
          std::string v22 = v19;
          if (v21)
          {
            do
            {
              __int16 v19 = v21;
              uint64_t v21 = *(unsigned __int8 **)v21;
            }

            while (v21);
          }

          else
          {
            do
            {
              __int16 v19 = (unsigned __int8 *)*((void *)v22 + 2);
              std::string v25 = *(void *)v19 == (void)v22;
              std::string v22 = v19;
            }

            while (!v25);
          }

          std::string::size_type v23 = (unsigned __int8 *)*((void *)v20 + 1);
          if (v23)
          {
            do
            {
              unsigned __int8 v24 = v23;
              std::string::size_type v23 = *(unsigned __int8 **)v23;
            }

            while (v23);
          }

          else
          {
            do
            {
              unsigned __int8 v24 = (unsigned __int8 *)*((void *)v20 + 2);
              std::string v25 = *(void *)v24 == (void)v20;
              int v20 = v24;
            }

            while (!v25);
          }

          int v20 = v24;
        }
      }

      return result;
    }

    return 0LL;
  }

  int v13 = *(unsigned __int8 **)(a3 + 24);
  while (1)
  {
    uint64_t result = sub_7F194(v11 + 32, v13 + 32);
    if (!result) {
      return result;
    }
    int v15 = (unsigned __int8 *)*((void *)v11 + 1);
    int v16 = v11;
    if (v15)
    {
      do
      {
        uint64_t v11 = v15;
        int v15 = *(unsigned __int8 **)v15;
      }

      while (v15);
    }

    else
    {
      do
      {
        uint64_t v11 = (unsigned __int8 *)*((void *)v16 + 2);
        std::string v25 = *(void *)v11 == (void)v16;
        int v16 = v11;
      }

      while (!v25);
    }

    int v17 = (unsigned __int8 *)*((void *)v13 + 1);
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        int v17 = *(unsigned __int8 **)v17;
      }

      while (v17);
    }

    else
    {
      do
      {
        uint64_t v18 = (unsigned __int8 *)*((void *)v13 + 2);
        std::string v25 = *(void *)v18 == (void)v13;
        int v13 = v18;
      }

      while (!v25);
    }

    int v13 = v18;
    if (v11 == v12) {
      goto LABEL_31;
    }
  }

        sub_232A4(a1, a2, a3, a4, a5, (float *)a6);
        return;
      }

      sub_1F5BDC((uint64_t)theArray);
      if (theArray[0] && (Count = CFArrayGetCount(theArray[0]), __int16 v19 = Count, (_DWORD)Count))
      {
        if (((16 * Count) & 0xFFFFFFFF0uLL) > *a5)
        {
          *a5 = 0;
          int v34 = (os_log_t *)sub_138E8(13);
          int v35 = *v34;
          if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            char v42 = "Device_USB_iAP_Aspen.cpp";
            char v43 = 1024;
            uint64_t v44 = 566;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): ioDataSize is insufficient (kAudioHardwareBadP ropertySizeError).",  buf,  0x12u);
          }

          __int16 v36 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v36 = &off_4865A0;
          v36[2] = 561211770;
        }

        int v20 = 0LL;
        *a5 = 16 * Count;
        do
        {
          *(_DWORD *)buf = 0;
          sub_1A0E0C(theArray, v20, buf);
          LODWORD(v21) = *(_DWORD *)buf;
          *(int64x2_t *)&a6[2 * v20++] = vdupq_lane_s64(COERCE__INT64((double)v21), 0);
        }

        while (v19 != v20);
      }

      else
      {
        *a5 = 0;
      }

      sub_13818((uint64_t)theArray);
      return;
    }

    int v15 = (unsigned __int8 *)sub_1F4000();
    int v16 = sub_1F5650(v15);
LABEL_15:
    *(_DWORD *)a6 = v16;
    return;
  }

  if (mSelector == 1986229104)
  {
    int v17 = sub_1F4000();
    int v16 = sub_1F4DF8(v17);
    goto LABEL_15;
  }

  if (mSelector != 1986290211)
  {
    if (mSelector == 1987013732)
    {
      int v14 = (float *)sub_1F4000();
      *(float *)a6 = (float)(sub_1F4F28(v14) * 100.0) + -100.0;
      return;
    }

    goto LABEL_16;
  }

  *(_OWORD *)a6 = xmmword_4031A0;
}

    uint64_t v11 = (char *)*a1;
    int v12 = (uint64_t)&v6[-*a1] >> 2;
    int v13 = v12 + 1;
    int v14 = v8 - v11;
    if (v14 >> 1 > v13) {
      int v13 = v14 >> 1;
    }
    int v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
    int v16 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v15) {
      int v16 = v13;
    }
    if (v16)
    {
      int v16 = (unint64_t)sub_7A890(v16);
      uint64_t v11 = (char *)*a1;
      int v6 = (char *)a1[1];
    }

    else
    {
      int v17 = 0LL;
    }

    uint64_t v18 = (_DWORD *)(v16 + 4 * v12);
    __int16 v19 = v16 + 4 * v17;
    *uint64_t v18 = 16;
    int v10 = v18 + 1;
    while (v6 != v11)
    {
      int v20 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *--uint64_t v18 = v20;
    }

    *a1 = v18;
    a1[1] = v10;
    a1[2] = v19;
    if (v11) {
      operator delete(v11);
    }
    goto LABEL_29;
  }

      int v3 = atomic_load((unsigned __int8 *)&qword_499D00);
      if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_499D00)) {
        return qword_499CE8;
      }
      __int16 v19 = 0x1400000013LL;
      *(_OWORD *)buf = xmmword_4022F8;
      *(_OWORD *)&buf[16] = unk_402308;
      uint64_t v18 = xmmword_402318;
      sub_F1194(qword_499CE8, buf, 0xEuLL);
      int v8 = qword_499CE8;
      __n128 v9 = &qword_499D00;
      goto LABEL_40;
    }

    if (a1 == 1668703084)
    {
LABEL_22:
      __int128 v5 = atomic_load((unsigned __int8 *)&qword_499D60);
      if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_499D60)) {
        return qword_499D48;
      }
      *(_OWORD *)buf = xmmword_40237C;
      *(_OWORD *)&buf[16] = unk_40238C;
      sub_F1194(qword_499D48, buf, 8uLL);
      int v8 = qword_499D48;
      __n128 v9 = &qword_499D60;
      goto LABEL_40;
    }

    if (a1 == 1668705639 || a1 == 1668705568) {
      goto LABEL_16;
    }
LABEL_41:
    int v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a1);
      if (v16 >= 0) {
        int v12 = __p;
      }
      else {
        int v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1240;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unhandled audio category %s",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unhandled audio category %s");
  }

  if (a1 <= 1668117867)
  {
    if (a1 == 1667657057 || a1 == 1667657072)
    {
      unsigned __int16 v4 = atomic_load((unsigned __int8 *)&qword_499D20);
      if ((v4 & 1) != 0 || !__cxa_guard_acquire(&qword_499D20)) {
        return qword_499D08;
      }
      LODWORD(v18) = 20;
      *(_OWORD *)buf = xmmword_402330;
      *(_OWORD *)&buf[16] = unk_402340;
      sub_F1194(qword_499D08, buf, 9uLL);
      int v8 = qword_499D08;
      __n128 v9 = &qword_499D20;
      goto LABEL_40;
    }

    goto LABEL_41;
  }

  if (a1 == 1668117868) {
    goto LABEL_11;
  }
  if (a1 != 1668309362)
  {
    if (a1 != 1668441443) {
      goto LABEL_41;
    }
LABEL_11:
    uint64_t v1 = atomic_load((unsigned __int8 *)&qword_499D40);
    if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_499D40)) {
      return qword_499D28;
    }
    *(void *)&uint64_t v18 = 0x1400000013LL;
    *(_OWORD *)buf = xmmword_402354;
    *(_OWORD *)&buf[16] = unk_402364;
    sub_F1194(qword_499D28, buf, 0xAuLL);
    int v8 = qword_499D28;
    __n128 v9 = &qword_499D40;
    goto LABEL_40;
  }

  __int128 v7 = atomic_load((unsigned __int8 *)&qword_499D80);
  if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_499D80)) {
    return qword_499D68;
  }
  __int16 v19 = 0x1400000013LL;
  *(_OWORD *)buf = xmmword_40239C;
  *(_OWORD *)&buf[16] = unk_4023AC;
  uint64_t v18 = xmmword_4023BC;
  sub_F1194(qword_499D68, buf, 0xEuLL);
  int v8 = qword_499D68;
  __n128 v9 = &qword_499D80;
LABEL_40:
  __cxa_guard_release(v9);
  return v8;
}

    sub_82CEC();
  }

  if (!v10) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48LL))(v10, a3, a2);
  if (!(_DWORD)result) {
    return result;
  }
  int v13 = *a2;
  *a2 = *a3;
  *a3 = v13;
  int v14 = *(void *)(a4 + 24);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v14 + 48LL))(v14, a2, a1);
  if ((_DWORD)result)
  {
    int v15 = *a1;
    *a1 = *a2;
    *a2 = v15;
  }

  return result;
}

  sub_2FD930((uint64_t)v25, (int *)&v24, a2, a3, a4, a5);
  sub_2FDCC0((uint64_t)v25, v24);
  if (v14)
  {
    std::string v22 = 7;
    std::string::size_type v23 = 2LL;
    int v31 = 64003;
    sub_2DC450((uint64_t)v32, (uint64_t)&v22);
    sub_149710((uint64_t)&__p, &v31, 1LL);
    sub_2FDDB8((uint64_t)v25, (uint64_t)&__p);
    sub_D0C4C(v30);
    int v16 = __p;
    std::string __p = 0LL;
    if (v16) {
      operator delete(v16);
    }
    sub_2DBF5C((uint64_t)v32);
    sub_2DBF5C((uint64_t)&v22);
  }

  sub_D1274((uint64_t)&__p, (uint64_t)v25);
  int v17 = sub_2FE168((uint64_t)&__p);
  sub_D0C4C(v30);
  uint64_t v18 = __p;
  std::string __p = 0LL;
  if (v18) {
    operator delete(v18);
  }
  sub_2FE1F0(a1, (uint64_t)v17);
  if (*((void *)&v26 + 1))
  {
    sub_D0C4C((void *)v26);
    *(void *)&std::string v26 = 0LL;
    __int16 v19 = (char *)v25[1];
    if (v25[1])
    {
      int v20 = 0LL;
      do
        *((void *)v25[0] + (void)v20++) = 0LL;
      while (v19 != v20);
    }

    *((void *)&v26 + 1) = 0LL;
  }

  sub_D0C4C((void *)v26);
  uint64_t v21 = v25[0];
  v25[0] = 0LL;
  if (v21) {
    operator delete(v21);
  }
}

  std::mutex::unlock((std::mutex *)(a1 + 320));
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  v55[0] = (uint64_t)*a2;
  v55[1] = (uint64_t)v11;
  if (v11)
  {
    int v12 = (unint64_t *)&v11->__shared_owners_;
    do
      int v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  int v14 = sub_370848(v55);
  int v15 = v14;
  if (!v11) {
    goto LABEL_23;
  }
  int v16 = (unint64_t *)&v11->__shared_owners_;
  do
    int v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((v15 & 1) == 0) {
      return;
    }
  }

  else
  {
LABEL_23:
    if ((v14 & 1) == 0) {
      return;
    }
  }

  if ((*a2)[24] != (void *)a1)
  {
    char v32 = a2;
    char v33 = sub_138E8(13);
    int v34 = sub_8C7D4(1, *(void **)v33, *(void *)(v33 + 8));
    int v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    __int16 v36 = v35;
    if (v35)
    {
      int v37 = v35;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        __int16 v38 = *v32;
        __int16 v39 = (const __CFString *)(*v32)[31];
        theString = v39;
        LODWORD(v38) = *((unsigned __int8 *)v38 + 256);
        unsigned __int16 v52 = (char)v38;
        if ((_DWORD)v38 && v39)
        {
          CFRetain(v39);
          __int16 v39 = theString;
        }

        uint64_t v40 = v53;
        sub_48E98(v53, v39);
        if (v54 < 0) {
          uint64_t v40 = (void **)v53[0];
        }
        int v41 = (*v32)[24];
        if (v41)
        {
          (*(void (**)(CFStringRef *__return_ptr, void *))(*(void *)v41 + 128LL))(v48, v41);
          char v42 = v49;
          sub_48E98(v49, v48[0]);
          if (v50 < 0) {
            char v42 = (void **)v49[0];
          }
        }

        else
        {
          char v42 = (void **)"NULL";
        }

        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v45, a1);
        sub_48E98(__p, v45[0]);
        if (v47 >= 0) {
          char v43 = __p;
        }
        else {
          char v43 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        std::string::size_type v58 = "Device_HAL_Common.mm";
        int v59 = 1024;
        os_log_t v60 = 614;
        int v61 = 2080;
        std::string::size_type v62 = v40;
        int v63 = 2080;
        int v64 = (uint64_t)v42;
        unsigned int v65 = 2080;
        int v66 = v43;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s)",  buf,  0x30u);
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)v45);
        if (v41)
        {
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          sub_19DFC((uint64_t)v48);
        }

        if (v54 < 0) {
          operator delete(v53[0]);
        }
        sub_19DFC((uint64_t)&theString);
      }
    }

    uint64_t v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v44, "Port (%s) is owned by an unexpected physical device (owner: %s, expected: %s)");
  }

  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v18 = operator new(0x20uLL);
  v18[1] = *(_OWORD *)a2;
  *a2 = 0LL;
  a2[1] = 0LL;
  __int16 v19 = *(void *)(a1 + 384);
  *(void *)uint64_t v18 = v19;
  *((void *)v18 + 1) = a1 + 384;
  *(void *)(v19 + 8) = v18;
  *(void *)(a1 + 384) = v18;
  ++*(void *)(a1 + 400);
  std::mutex::unlock((std::mutex *)(a1 + 320));
}

LABEL_18:
        __cxa_end_catch();
        JUMPOUT(0x3727D4LL);
      }
    }

    else
    {
      int v37 = *(id *)sub_138E8(13);
      if (v37)
      {
        std::string v28 = (os_log_s *)v37;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p) = 136315906;
          *(void *)((char *)&__p + 4) = "StandardUtilities.h";
          WORD6(__p) = 1024;
          *(_DWORD *)((char *)&__p + 14) = 431;
          WORD1(a19) = 2080;
          *(void *)((char *)&a19 + 4) = "";
          WORD6(a19) = 1024;
          *(_DWORD *)((char *)&a19 + 14) = 98;
          uint64_t v30 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          int v31 = v28;
          char v32 = 34;
          goto LABEL_15;
        }

        goto LABEL_16;
      }
    }
  }

  std::string v28 = 0LL;
  goto LABEL_18;
}

  int v13 = *v5;
  return sub_852D0(a3, &v13, 1LL);
}

uint64_t sub_62ABC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *a2;
  uint64_t result = 4LL;
  if (*a2 <= 1818453109)
  {
    if (v5 == 1818453106)
    {
      return 16LL;
    }

    else if (v5 != 1818453107)
    {
      return sub_8758C(a1, a2, a3, a4);
    }
  }

  else if (v5 != 1818453110 && v5 != 1818456932 && v5 != 1818456950)
  {
    return sub_8758C(a1, a2, a3, a4);
  }

  return result;
}

uint64_t sub_62B34(uint64_t a1, float a2)
{
  float v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F62766F6C6DLL;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v2 + 48LL))( v2,  &v4,  0LL,  0LL,  4LL,  &v6);
}

uint64_t sub_62B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_5B0B4(*(void *)(a1 + 80), *(void *)(a1 + 88));
  int v14 = *(uint64_t **)(a1 + 80);
  int v13 = *(uint64_t **)(a1 + 88);
  while (v14 != v13)
  {
    uint64_t v15 = *v14;
    v14 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48LL))( v15,  a2,  a3,  a4,  a5,  a6);
  }

  return result;
}

void sub_62C0C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v37 = (os_log_t *)sub_138E8(13);
    __int16 v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 284;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > a5)
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    int v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 285;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  buf,  0x12u);
    }

    char v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v42 = &off_4865A0;
    v42[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    char v43 = (os_log_t *)sub_138E8(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 286;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property is not settable.",  buf,  0x12u);
    }

    uint64_t v45 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v45 = &off_4865A0;
    v45[2] = 1970171760;
  }

  int v12 = *a2;
  if (*a2 <= 1986817376)
  {
    if (v12 == 1836414053)
    {
      *(_BYTE *)(a1 + 201) = sub_1C7038(a5, a6) == 1;
      sub_63BC4(a1);
      return;
    }

    if (v12 != 1986098020) {
      goto LABEL_19;
    }
    double v58 = 0.0;
    double v59 = 0.0;
    int v13 = *(std::__shared_weak_count **)(a1 + 184);
    if (v13)
    {
      *(double *)&int v14 = COERCE_DOUBLE(std::__shared_weak_count::lock(v13));
      double v59 = *(double *)&v14;
      if (*(double *)&v14 == 0.0)
      {
        double v15 = 0.0;
      }

      else
      {
        double v15 = *(double *)(a1 + 176);
        double v58 = v15;
        if (v15 != 0.0
          && ((*(uint64_t (**)(double))(**(void **)&v15 + 72LL))(COERCE_DOUBLE(*(void *)&v15)) & 1) != 0)
        {
          goto LABEL_40;
        }
      }
    }

    else
    {
      double v15 = 0.0;
      *(double *)&int v14 = 0.0;
    }

    std::string v28 = (os_log_t *)sub_138E8(13);
    std::string v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 338;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Ducking is not supported!",  buf,  0x12u);
    }

LABEL_83:
    _os_log_impl(&dword_0, v50, OS_LOG_TYPE_ERROR, v51, buf, 0x12u);
    goto LABEL_84;
  }

  if (v12 == 1986817377)
  {
LABEL_8:
    *(_DWORD *)buf = sub_63910(a5, (uint64_t)a6);
    LODWORD(v58) = 0;
    LODWORD(v56) = 1065353216;
    *(float *)(a1 + 192) = *sub_63A98((float *)&v58, (float *)buf, (float *)&v56);
    sub_63BC4(a1);
    return;
  }

  if (v12 != 2021027692)
  {
    if (v12 == 1987013741) {
      goto LABEL_8;
    }
LABEL_19:
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    __int16 v19 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 359;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() ret urned true, but I do not know about it.",  buf,  0x12u);
      }
    }

    return;
  }

  uint64_t v16 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a6;
  if (*(void *)(a1 + 144)) {
    double v17 = *(float *)(*(void *)(a1 + 128) + 36LL);
  }
  else {
    double v17 = 0.0;
  }
  double v58 = v17;
  double v59 = sub_6461C(a1 + 120);
  unsigned int v20 = *(_DWORD *)(a1 + 156);
  int v21 = *(_DWORD *)(a1 + 168);
  uint64_t v23 = *(void *)(a1 + 176);
  std::string v22 = *(std::__shared_weak_count **)(a1 + 184);
  if (v22)
  {
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      unint64_t v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    do
      unint64_t v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    std::__shared_weak_count::__release_weak(v22);
  }

  else
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
  }

  *(_DWORD *)&buf[16] = v21;
  uint64_t v61 = v23;
  std::string::size_type v62 = v22;
  sub_2C8BF8(a1, &v58, v20, (uint64_t)buf);
  if (*(_BYTE *)(a1 + 202) && (*(void *)(a1 + 208) || v16 && *(_DWORD *)(a1 + 168))) {
    sub_63BC4(a1);
  }
  if (v22)
  {
    std::string v27 = v22;
    goto LABEL_50;
  }

  std::string::size_type v77 = (double *)v220;
  if (v220 == v221)
  {
    int v192 = (os_log_t *)sub_138E8(13);
    std::string::size_type v193 = *v192;
    if (*v192 && os_log_type_enabled(*v192, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v234 = 136315394;
      *(void *)&v234[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&v234[12] = 1024;
      *(_DWORD *)&v234[14] = 271;
      _os_log_impl( &dword_0,  v193,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inMasterFormats is empty.",  v234,  0x12u);
    }

    int v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v177, "inMasterFormats is empty.");
LABEL_259:
  }

  int v78 = (__n128 *)v220;
  do
  {
    unsigned int v79 = v78[3].n128_u64[0];
    uint64_t v81 = v78[1];
    uint64_t v80 = v78[2];
    int v82 = *v78;
    *(__n128 *)&buf[16] = v81;
    *(__n128 *)&_BYTE buf[32] = v80;
    *(void *)v231 = v79;
    *(__n128 *)buf = v82;
    if (v82.n128_u32[2] == v224)
    {
      v80.n128_u64[0] = *(void *)&buf[40];
      v81.n128_u64[0] = *(void *)v231;
      if (*(double *)&buf[40] <= v35 && *(double *)v231 >= v35)
      {
        *(double *)buf = v35;
        if ((*(unsigned int (**)(uint64_t, _BYTE *, __n128, __n128))(*(void *)v39 + 144LL))( v39,  buf,  v80,  v81))
        {
          int v194 = (os_log_t *)sub_138E8(13);
          v195 = *v194;
          if (*v194 && os_log_type_enabled(*v194, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v229 = 136315394;
            *(void *)&v229[4] = "AggregateDevice_Duplex.h";
            *(_WORD *)&v229[12] = 1024;
            *(_DWORD *)&v229[14] = 184;
            _os_log_impl( &dword_0,  v195,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to set the new format on the aggregate device",  v229,  0x12u);
          }

          v196 = __cxa_allocate_exception(0x10uLL);
          *(void *)v196 = &off_4865A0;
          v196[2] = 2003329396;
        }

        v97 = sub_138E8(16);
        int v98 = sub_138E8(35);
        std::string::size_type v99 = 0;
        int v100 = 0LL;
        *(void *)v229 = 0x100000002LL;
        uint64_t v101 = *(void *)(v97 + 8);
        while (1)
        {
          v102 = *(int *)&v229[4 * v100];
          int v103 = v99;
          if (((v101 & v102) != 0) != ((*(void *)(v98 + 8) & v102) != 0)) {
            break;
          }
          std::string::size_type v99 = 1;
          int v100 = 1LL;
          if ((v103 & 1) != 0) {
            goto LABEL_135;
          }
        }

        if ((v101 & v102) == 0) {
          v97 = v98;
        }
LABEL_135:
        char v126 = sub_138E8(36);
        uint64_t v127 = 0;
        uint64_t v128 = 0LL;
        *(void *)v229 = 0x100000002LL;
        char v129 = *(void *)(v97 + 8);
        while (1)
        {
          uint64_t v130 = *(int *)&v229[4 * v128];
          uint64_t v131 = v127;
          if (((v129 & v130) != 0) != ((*(void *)(v126 + 8) & v130) != 0)) {
            break;
          }
          uint64_t v127 = 1;
          uint64_t v128 = 1LL;
          if ((v131 & 1) != 0) {
            goto LABEL_141;
          }
        }

        if ((v129 & v130) == 0) {
          v97 = v126;
        }
LABEL_141:
        uint64_t v132 = *(os_log_s **)v97;
        if (!*(void *)v97 || !os_log_type_enabled(*(os_log_t *)v97, OS_LOG_TYPE_INFO)) {
          goto LABEL_186;
        }
        sub_2CC00((std::string *)v234, (uint64_t)buf);
        if (v234[23] >= 0) {
          char v133 = v234;
        }
        else {
          char v133 = *(_BYTE **)v234;
        }
        *(_DWORD *)v229 = 136315650;
        *(void *)&v229[4] = "AggregateDevice_Duplex.h";
        *(_WORD *)&v229[12] = 1024;
        *(_DWORD *)&v229[14] = 186;
        *(_WORD *)&v229[18] = 2080;
        *(void *)&v229[20] = v133;
        std::string v134 = "%25s:%-5d Successfully set master format to match the slave device: %s";
        goto LABEL_184;
      }
    }

    int v78 = (__n128 *)((char *)v78 + 56);
  }

  while (v78 != (__n128 *)v221);
  if (v217 == v218)
  {
    int v197 = (os_log_t *)sub_138E8(13);
    std::string::size_type v198 = *v197;
    if (*v197 && os_log_type_enabled(*v197, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v234 = 136315394;
      *(void *)&v234[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&v234[12] = 1024;
      *(_DWORD *)&v234[14] = 272;
      _os_log_impl( &dword_0,  v198,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inSlaveFormats is empty.",  v234,  0x12u);
    }

    int v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v177, "inSlaveFormats is empty.");
    goto LABEL_259;
  }

  *(void *)v229 = 0LL;
  *(void *)buf = 0LL;
  int v84 = 0.0;
  uint64_t v85 = v221;
  while (v85 != v220)
  {
    __int128 v86 = (int8x16_t *)((char *)v85 - 56);
    v87 = v85[-3].i32[0];
    *(int8x16_t *)v234 = *(int8x16_t *)((char *)v85 - 44);
    *(int8x16_t *)&v234[12] = v85[-2];
    double v88 = v85[-1];
    int v89 = v218;
    while (1)
    {
      uint64_t v90 = v89[-3].i32[0];
      *(int8x16_t *)std::string __p = *(int8x16_t *)((char *)v89 - 44);
      *(int8x16_t *)&_BYTE __p[12] = v89[-2];
      *(void *)&v91.f64[0] = v88.i64[0];
      *(void *)&v91.f64[1] = v89[-1].i64[1];
      *(void *)&v92.f64[0] = v89[-1].i64[0];
      *(void *)&v92.f64[1] = v88.i64[1];
      uint64_t v93 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v92, v91), v89[-1], v88);
      int v89 = (int8x16_t *)((char *)v89 - 56);
      if (v89 == v217) {
        goto LABEL_104;
      }
    }

    int v84 = v93.f64[1];
    if (v93.f64[1] - v93.f64[0] < 0.0)
    {
      v175 = (os_log_t *)sub_138E8(13);
      v176 = *v175;
      if (*v175 && os_log_type_enabled(*v175, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v235 = 136315394;
        v236 = "AggregateDevice_Duplex.h";
        v237 = 1024;
        v238 = 250;
        _os_log_impl( &dword_0,  v176,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): lhs and rhs ranges do not intersect",  v235,  0x12u);
      }

      int v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v177, "lhs and rhs ranges do not intersect");
      goto LABEL_259;
    }

    *(_DWORD *)&v229[8] = v87;
    *(_OWORD *)&v229[12] = *(_OWORD *)__p;
    *(_OWORD *)&v229[24] = *(_OWORD *)&__p[12];
    *(_DWORD *)&buf[8] = v87;
    *(_OWORD *)&buf[12] = *(_OWORD *)v234;
    *(_OWORD *)&buf[24] = *(_OWORD *)&v234[12];
    *(float64_t *)v229 = v93.f64[1];
    *(float64_t *)buf = v93.f64[1];
LABEL_104:
    uint64_t v85 = v86;
    if (v84 != 0.0) {
      break;
    }
  }

  if (v84 == 0.0)
  {
    for (j = (double *)((char *)v220 + 56); j != (double *)v221; j += 7)
    {
      if (v77[6] < j[6]) {
        std::string::size_type v77 = j;
      }
    }

    unint64_t v112 = *((void *)v77 + 6);
    for (k = (double *)((char *)v217 + 56); k != (double *)v218; k += 7)
    {
      if (v70[6] < k[6]) {
        char v70 = k;
      }
    }

    uint64_t v114 = *((void *)v70 + 6);
    uint64_t v115 = *((void *)v70 + 4);
    v116 = *((_OWORD *)v70 + 1);
    *(_OWORD *)v229 = *(_OWORD *)v70;
    *(_OWORD *)&v229[16] = v116;
    *(void *)&v229[32] = v115;
    v117 = *((void *)v77 + 4);
    int v118 = *((_OWORD *)v77 + 1);
    *(double *)&buf[8] = v77[1];
    *(_OWORD *)&buf[16] = v118;
    *(void *)&_BYTE buf[32] = v117;
    *(void *)v229 = v114;
    *(void *)buf = v112;
  }

  if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v43 + 144LL))(v43, v229))
  {
    int v199 = (os_log_t *)sub_138E8(13);
    v200 = *v199;
    if (*v199 && os_log_type_enabled(*v199, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v234 = 136315394;
      *(void *)&v234[4] = "AggregateDevice_Duplex.h";
      *(_WORD *)&v234[12] = 1024;
      *(_DWORD *)&v234[14] = 203;
      v201 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): failed to set the new slave format on the aggregate device";
LABEL_266:
      _os_log_impl(&dword_0, v200, OS_LOG_TYPE_ERROR, v201, v234, 0x12u);
    }

void sub_63580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

os_log_s *sub_635F0(void *a1, int *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    double v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v19 = 136315394;
      *(void *)&v19[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 128;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  v19,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v4 = *a2;
  int v5 = (os_log_s *)(&dword_0 + 1);
  if (v4 <= 1986098019)
  {
    if (v4 > 1684633186)
    {
      if (v4 == 1684633187) {
        return 0LL;
      }
      if (v4 == 1836414053) {
        return v5;
      }
      int v7 = 1983013986;
    }

    else
    {
      if (v4 == 1064725619 || v4 == 1668705648) {
        return 0LL;
      }
      int v7 = 1684157046;
    }

void sub_638F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_63910(int a1, uint64_t a2)
{
  if (!a2)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 148;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a1 != 4)
  {
    int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "StandardUtilities.h";
        __int16 v11 = 1024;
        int v12 = 149;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) == inDataSize",  (uint8_t *)&v9,  0x12u);
      }
    }
  }

  return *(float *)a2;
}

void sub_63A7C(_Unwind_Exception *exception_object)
{
}

float *sub_63A98(float *result, float *a2, float *a3)
{
  if (*a3 < *result)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "StandardUtilities.h";
      __int16 v9 = 1024;
      int v10 = 258;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): clamp() requires that maxVal >= minVal.",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "clamp() requires that maxVal >= minVal.");
  }

  if (*a2 < *a3) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (*a2 > *result) {
    return v3;
  }
  return result;
}

void sub_63BA8(_Unwind_Exception *exception_object)
{
}

void sub_63BC4(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  sub_64424(a1 + 120, *(float *)(a1 + 192));
  float v4 = v3;
  if (*(void *)(a1 + 144))
  {
    if (vabds_f32(v3, *(float *)(*(void *)(a1 + 128) + 36LL)) <= 0.001)
    {
      float v5 = *(float *)(*(void *)(a1 + 128) + 36LL);
      goto LABEL_5;
    }
  }

  else
  {
    float v5 = 0.0;
    if (fabsf(v3) <= 0.001)
    {
LABEL_5:
      if (v5 != sub_6461C(v2)) {
        goto LABEL_7;
      }
    }
  }

  if (!*(_BYTE *)(a1 + 201))
  {
    int v6 = 0;
    goto LABEL_9;
  }

LABEL_103:
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        unint64_t v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    goto LABEL_64;
  }

  uint64_t v31 = sub_138E8(18);
  uint64_t v32 = sub_138E8(38);
  char v33 = 0;
  uint64_t v34 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v35 = *(void *)(v31 + 8);
  while (1)
  {
    uint64_t v36 = *(int *)&buf[4 * v34];
    char v37 = v33;
    if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
      break;
    }
    char v33 = 1;
    uint64_t v34 = 1LL;
    if ((v37 & 1) != 0) {
      goto LABEL_60;
    }
  }

  if ((v35 & v36) == 0) {
    uint64_t v31 = v32;
  }
LABEL_60:
  int v49 = *(os_log_s **)v31;
  if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v78 = 1024;
    int v79 = 511;
    __int16 v80 = 2048;
    double v81 = v4;
    _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting Volume = %f dB, External Volume Handler: Yes",  buf,  0x1Cu);
  }

  (*(void (**)(void, float))(a1 + 208))(*(void *)(a1 + 216), *(float *)(a1 + 192));
LABEL_64:
  uint64_t v50 = *(void *)(a1 + 232);
  unsigned int v51 = *(std::__shared_weak_count **)(a1 + 240);
  if (v51)
  {
    p_shared_weak_owners = (unint64_t *)&v51->__shared_weak_owners_;
    do
      unint64_t v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    uint64_t v54 = *(void *)(a1 + 92);
    do
      unint64_t v55 = __ldxr(p_shared_weak_owners);
    while (__stxr(v55 + 1, p_shared_weak_owners));
    __int128 v56 = v51;
  }

  else
  {
    __int128 v56 = 0LL;
    uint64_t v54 = *(void *)(a1 + 92);
  }

  *(_DWORD *)buf = 1986817377;
  *(void *)&uint8_t buf[4] = v54;
  sub_67368(v50, (uint64_t)v56, (uint64_t *)buf);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v6)
  {
    uint64_t v57 = sub_138E8(18);
    uint64_t v58 = sub_138E8(38);
    char v59 = 0;
    uint64_t v60 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v61 = *(void *)(v57 + 8);
    while (1)
    {
      uint64_t v62 = *(int *)&buf[4 * v60];
      char v63 = v59;
      if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
        break;
      }
      char v59 = 1;
      uint64_t v60 = 1LL;
      if ((v63 & 1) != 0) {
        goto LABEL_80;
      }
    }

    if ((v61 & v62) == 0) {
      uint64_t v57 = v58;
    }
LABEL_80:
    int v64 = *(os_log_s **)v57;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      int v65 = *(unsigned __int8 *)(a1 + 201);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v78 = 1024;
      int v79 = 595;
      __int16 v80 = 1024;
      LODWORD(v81) = v65;
      _os_log_impl(&dword_0, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Muting (explicitly muted: %u)", buf, 0x18u);
    }

    (*(void (**)(void))(**(void **)(a1 + 224) + 16LL))(*(void *)(a1 + 224));
  }

  *(_BYTE *)(a1 + 202) = 1;
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
}

    sub_1BB88((uint64_t *)buf);
    return v4;
  }

  if (mSelector <= 1633903464)
  {
    if (mSelector != 1165513555)
    {
      int v6 = 1633776747;
      goto LABEL_77;
    }

    goto LABEL_98;
  }

  if (mSelector != 1633903465)
  {
    int v6 = 1633904999;
    goto LABEL_77;
  }

  return v4;
}

  if (v70)
  {
    if (v71)
    {
      std::string::size_type v77 = (os_log_t *)sub_138E8(2);
      __int16 v78 = *v77;
      if (*v77)
      {
        if (os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 357;
          _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL",  buf,  0x12u);
        }
      }
    }

  *(void *)&buf[24] = 0LL;
  *(void *)&buf[16] = 0LL;
  if (v453)
  {
    uint64_t v90 = std::__shared_weak_count::lock(v453);
    if (v90)
    {
      uint64_t v91 = v90;
      char v92 = v452;
      uint64_t v93 = (unint64_t *)&v90->__shared_weak_owners_;
      do
        uint64_t v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      uint64_t v95 = *(std::__shared_weak_count **)&buf[24];
      *(void *)&buf[16] = v92;
      *(void *)&buf[24] = v91;
      if (v95) {
        std::__shared_weak_count::__release_weak(v95);
      }
      char v96 = (unint64_t *)&v91->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
LABEL_114:
        std::__shared_weak_count::__release_weak(v91);
      }
    }

    else
    {
      uint64_t v91 = *(std::__shared_weak_count **)&buf[24];
      *(void *)&buf[16] = 0LL;
      *(void *)&buf[24] = 0LL;
      if (v91) {
        goto LABEL_114;
      }
    }
  }

  sub_CAE54(v437, (uint64_t *)buf, 2LL);
  for (m = 24LL; m != -8; m -= 16LL)
  {
    std::string::size_type v99 = *(std::__shared_weak_count **)&buf[m];
    if (v99) {
      std::__shared_weak_count::__release_weak(v99);
    }
  }

  *(void *)&buf[8] = 0LL;
  *(void *)buf = 0LL;
  sub_21749C(v437, buf);
  int v100 = operator new(0x30uLL);
  uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 120LL))(a4);
  sub_85A90(&v434, v437);
  *(void *)int v100 = off_484140;
  v100[2] = v101;
  *((void *)v100 + 2) = v100 + 4;
  *((void *)v100 + 3) = v100 + 4;
  *((void *)v100 + 4) = 0LL;
  v102 = v436;
  if (v436)
  {
    std::string::size_type v104 = v434;
    int v103 = v435;
    int v105 = *v435;
    *(void *)(v105 + 8) = *(void *)(v434 + 8);
    **(void **)(v104 + 8) = v105;
    v106 = *((void *)v100 + 2);
    *(void *)(v106 + 8) = v103;
    const void *v103 = v106;
    *((void *)v100 + 2) = v104;
    *(void *)(v104 + 8) = v100 + 4;
    *((void *)v100 + 4) = v102;
    v436 = 0LL;
  }

  v100[10] = v70;
  *((_BYTE *)v100 + 44) = v38;
  v107 = operator new(0x18uLL);
  v108 = *(void **)(a11 + 8);
  os_log_t *v107 = a11;
  v107[1] = v108;
  v107[2] = v100;
  os_log_s *v108 = v107;
  v109 = *(void *)(a11 + 16) + 1LL;
  *(void *)(a11 + 8) = v107;
  *(void *)(a11 + 16) = v109;
  sub_CCAB4((uint64_t)v100);
  sub_85B80(&v434);
  unsigned int v110 = *(_DWORD *)(v458 + 144);
  *(_DWORD *)buf = *(_DWORD *)(v456 + 144);
  *(_DWORD *)&uint8_t buf[4] = v110;
  sub_7A22C((uint64_t)v433, (unsigned int *)buf, 2LL);
  if (v442) {
    sub_57ADC((uint64_t *)v433, v442[36]._os_unfair_lock_opaque, v442[36]._os_unfair_lock_opaque);
  }
  if (v453)
  {
    sub_B8CBC((uint64_t *)buf, &v452, "", 622);
    sub_57ADC((uint64_t *)v433, *(_DWORD *)(*(void *)buf + 144LL), *(_DWORD *)(*(void *)buf + 144LL));
    unint64_t v111 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unint64_t v112 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        uint64_t v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }

  uint64_t v114 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 88LL))(a3, 0LL);
  uint64_t v115 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 312LL))(a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a4 + 88LL))(a4, 1LL) != 1
    || v114 - ((v115 & 0xFF00000000LL) != 0) != 1)
  {
    if (v455)
    {
      v117 = std::__shared_weak_count::lock(v455);
      if (v117)
      {
        int v118 = v117;
        unsigned int v119 = v454;
        uint64_t v120 = (unint64_t *)&v117->__shared_weak_owners_;
        do
          uint64_t v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
        char v122 = (unint64_t *)&v117->__shared_owners_;
        do
          uint64_t v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v118);
        }

        uint64_t v124 = std::__shared_weak_count::lock(v118);
        if (v124)
        {
          uint64_t v125 = v124;
          char v126 = (unint64_t *)&v124->__shared_owners_;
          do
            uint64_t v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v125);
          }

          std::__shared_weak_count::__release_weak(v118);
          if (v119)
          {
            uint64_t v128 = (os_log_t *)sub_138E8(13);
            char v129 = *v128;
            if (*v128)
            {
              if (os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 797;
                _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }
            }

            uint64_t v130 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v130, "Precondition failure.");
          }
        }

        else
        {
          std::__shared_weak_count::__release_weak(v118);
        }
      }
    }

    v213 = sub_105B8C(*(uint64_t **)(a10 + 8), 9);
    if (v417 == 1885892727) {
      v214 = v213;
    }
    else {
      v214 = 0;
    }
    if (v214 != 1)
    {
      *(_OWORD *)&v467.__r_.__value_.__l.__data_ = 0uLL;
      goto LABEL_272;
    }

    v215 = (std::string::size_type *)sub_105C24(a10, 9);
    int v216 = v215[1];
    v467.__r_.__value_.__r.__words[0] = *v215;
    v467.__r_.__value_.__l.__size_ = v216;
    if (!v216) {
      goto LABEL_272;
    }
    v217 = (unint64_t *)(v216 + 16);
    do
      int v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
    sub_B8CBC((uint64_t *)buf, (uint64_t *)&v467, "", 807);
    if (*(_DWORD *)(*(void *)buf + 144LL) != 1885894516) {
      goto LABEL_384;
    }
    char v219 = *(_DWORD *)(a8 + 12);
    v220 = 1;
    if (v219 <= 1987077986)
    {
      if (v219 == 1768057203) {
        goto LABEL_385;
      }
      int v221 = 1919776355;
    }

    else
    {
      if (v219 == 1987077987 || v219 == 1987081833) {
        goto LABEL_385;
      }
      int v221 = 1987081839;
    }

    if (v219 != v221) {
LABEL_384:
    }
      v220 = 0;
LABEL_385:
    v285 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      v286 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }

    if (v220)
    {
      v288 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 312LL))(a4);
      if ((v288 & 0xFF00000000LL) != 0) {
        v289 = v288;
      }
      else {
        v289 = 0;
      }
      sub_1D3A30((uint64_t *)__dst, a3, v458);
      sub_B8CBC((uint64_t *)buf, (uint64_t *)&v467, "", 817);
      v290.n128_f64[0] = sub_1D48AC((uint64_t *)__p, a4, *(uint64_t *)buf, v289, v456, a7);
      v291 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        v292 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v291->__on_zero_shared)(v291, v290);
          std::__shared_weak_count::__release_weak(v291);
        }
      }

      sub_85EA4(buf, __dst);
      sub_85EA4(v482, __p);
      v469[1] = 0LL;
      v469[0] = 0LL;
      v470[0] = 0LL;
      theString[0] = (CFStringRef)v469;
      LOBYTE(theString[1]) = 0;
      v469[0] = operator new(0xD0uLL);
      v469[1] = v469[0];
      v470[0] = (char *)v469[0] + 208;
      v469[1] = (void *)sub_10A49C((uint64_t)buf, (uint64_t)__p, (uint64_t)v469[0]);
      v294 = *(void *)a8;
      sub_105E0C((char **)theString, *(_DWORD *)(a2 + 8), (_DWORD *)a8, a9);
      *(void *)&v427 = 0LL;
      v295 = sub_2B7D7C( (uint64_t **)v469,  v294,  (__int128 *)(a8 + 24),  a8 + 40,  (void **)theString,  v418,  &v427,  v433,  (__int128 *)v447);
      v296 = *a1;
      *a1 = v295;
      if (v296) {
        (*(void (**)(uint64_t *))(*v296 + 8))(v296);
      }
      *(void *)&v427 = theString;
      sub_7A668((void ***)&v427);
      theString[0] = (CFStringRef)v469;
      sub_10A52C((void ***)theString);
      for (n = 0LL; n != -26; n -= 13LL)
      {
        sub_85D64((void *)v482[n + 11]);
        sub_85D64((void *)v482[n + 8]);
        theString[0] = (CFStringRef)&v482[n + 4];
        sub_85DA4((void ***)theString);
        theString[0] = (CFStringRef)&v482[n + 1];
        sub_85DA4((void ***)theString);
      }

void sub_643BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_64424(uint64_t a1, float a2)
{
  float v3 = fmaxf(a2, 0.0);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    int v5 = *(_DWORD *)(*(void *)(a1 + 8) + 28LL);
  }
  else {
    int v5 = 0;
  }
  float v6 = fminf(v3, 1.0);
  int v7 = sub_64578(a1);
  if (sub_645C0(a1)) {
    float v6 = powf(v6, *(float *)(a1 + 44) / *(float *)(a1 + 40));
  }
  unsigned int v8 = llroundf(v6 * (float)(v7 - v5));
  BOOL v9 = __OFADD__(v5, v8);
  int v10 = v5 + v8;
  int v11 = ((int)(v5 | v8) >> 31) ^ 0x7FFFFFFF;
  if (v9) {
    int v12 = v11;
  }
  else {
    int v12 = v10;
  }
  if (v4) {
    LODWORD(v4) = *(_DWORD *)(*(void *)(a1 + 8) + 28LL);
  }
  uint64_t result = sub_64578(a1);
  else {
    int v14 = v4;
  }
  int v15 = v14 - v4;
  uint64_t v16 = *(float **)(a1 + 8);
  float v17 = v16[9];
  uint64_t v18 = (float *)(a1 + 16);
  BOOL v19 = v15 < 1 || v16 == v18;
  if (!v19)
  {
    do
    {
      int v20 = *((_DWORD *)v16 + 8) - *((_DWORD *)v16 + 7);
      if (v15 >= v20) {
        int v21 = *((_DWORD *)v16 + 8) - *((_DWORD *)v16 + 7);
      }
      else {
        int v21 = v15;
      }
      uint64_t v22 = (float *)*((void *)v16 + 1);
      uint64_t v23 = v16;
      if (v22)
      {
        do
        {
          char v24 = v22;
          uint64_t v22 = *(float **)v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          char v24 = (float *)*((void *)v23 + 2);
          BOOL v19 = *(void *)v24 == (void)v23;
          uint64_t v23 = v24;
        }

        while (!v19);
      }

      float v17 = v17 + (float)((float)v21 * (float)((float)(v16[10] - v16[9]) / (float)v20));
      v15 -= v21;
      if (v15 < 1) {
        break;
      }
      uint64_t v16 = v24;
    }

    while (v24 != v18);
  }

  return result;
}

uint64_t sub_64578(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0LL;
  }
  float v3 = *(void **)(a1 + 8);
  sub_8866C(&v3, (int)v1 - 1);
  return *((unsigned int *)v3 + 8);
}

BOOL sub_645C0(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    float v2 = *(float *)(*(void *)(a1 + 8) + 36LL);
  }
  else {
    float v2 = 0.0;
  }
  return (float)(sub_6461C(a1) - v2) > 30.0 && *(_BYTE *)(a1 + 32) != 0;
}

float sub_6461C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0.0;
  }
  float v3 = *(float **)(a1 + 8);
  sub_8866C((void **)&v3, (int)v1 - 1);
  return v3[10];
}

BOOL sub_64664(uint64_t a1)
{
  return sub_6466C(a1 - 80);
}

BOOL sub_6466C(uint64_t a1)
{
  float v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (v2)
  {
    float v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 176);
      if (v4)
      {
        BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 112LL))(v4) == 0;
LABEL_16:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }

        return v5;
      }
    }
  }

  else
  {
    float v3 = 0LL;
  }

  uint64_t v6 = sub_138E8(18);
  uint64_t v7 = sub_138E8(38);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_12;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_12:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v18 = 1024;
    int v19 = 425;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", buf, 0x12u);
  }

  BOOL v5 = 0LL;
  if (v3) {
    goto LABEL_16;
  }
  return v5;
}

void sub_6480C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_64824(uint64_t a1)
{
  if (*(void *)(a1 + 128) == *(void *)(a1 + 136))
  {
    uint64_t v34 = (os_log_t *)sub_138E8(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 520;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  float v2 = (os_log_t *)sub_138E8(18);
  float v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 522;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getting mute", buf, 0x12u);
  }

  uint64_t v4 = *(void **)(a1 + 128);
  BOOL v5 = *(void **)(a1 + 136);
  if (v4 == v5) {
    goto LABEL_72;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  char v8 = 0LL;
  do
  {
    int v9 = (*(uint64_t (**)(void))(*(void *)*v4 + 112LL))(*v4);
    int v10 = v9;
    if (v7 >= v8)
    {
      uint64_t v11 = (v7 - v6) >> 2;
      unint64_t v12 = v11 + 1;
      if ((v8 - v6) >> 1 > v12) {
        unint64_t v12 = (v8 - v6) >> 1;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 62) {
          sub_7A8C4();
        }
        int v14 = (char *)operator new(4 * v13);
      }

      else
      {
        int v14 = 0LL;
      }

      unint64_t v15 = &v14[4 * v11];
      *(_DWORD *)unint64_t v15 = v10;
      uint64_t v16 = v15 + 4;
      while (v7 != v6)
      {
        int v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }

      char v8 = &v14[4 * v13];
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v15;
      uint64_t v7 = v16;
    }

    else
    {
      *(_DWORD *)uint64_t v7 = v9;
      v7 += 4;
    }

    ++v4;
  }

  while (v4 != v5);
  if (v6 == v7)
  {
LABEL_72:
    char v37 = (os_log_t *)sub_138E8(13);
    __int16 v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      _os_log_impl(&dword_0, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    __int16 v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Precondition failure.");
  }

  uint64_t v18 = *(unsigned int *)v6;
  int v19 = v6;
  while (*(_DWORD *)v19 == (_DWORD)v18)
  {
    v19 += 4;
    if (v19 == v7) {
      goto LABEL_65;
    }
  }

  if ((_DWORD)v18) {
    int v20 = "Unmute";
  }
  else {
    int v20 = "Mute ";
  }
  sub_7D084(__p, v20);
  for (uint64_t i = v6 + 4; i != v7; i += 4)
  {
    unint64_t v45 = v41;
    *(_OWORD *)char v44 = *(_OWORD *)__p;
    __p[0] = 0LL;
    __p[1] = 0LL;
    unint64_t v41 = 0LL;
    int v22 = *(_DWORD *)i;
    int v23 = SHIBYTE(v45);
    if ((v45 & 0x8000000000000000LL) == 0LL) {
      char v24 = (char *)HIBYTE(v45);
    }
    else {
      char v24 = (char *)v44[1];
    }
    if (v22) {
      size_t v25 = 6LL;
    }
    else {
      size_t v25 = 5LL;
    }
    sub_D0924((uint64_t)buf, (unint64_t)&v24[v25]);
    if (buf[23] >= 0) {
      uint64_t v26 = buf;
    }
    else {
      uint64_t v26 = *(_BYTE **)buf;
    }
    if (v24)
    {
      if (v23 >= 0) {
        uint64_t v27 = v44;
      }
      else {
        uint64_t v27 = (void **)v44[0];
      }
      memmove(v26, v27, (size_t)v24);
    }

    if (v22) {
      char v28 = "Unmute";
    }
    else {
      char v28 = "Mute ";
    }
    std::string v29 = &v24[(void)v26];
    memcpy(v29, v28, v25);
    v29[v25] = 0;
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    unint64_t v41 = *(void *)&buf[16];
    buf[23] = 0;
    buf[0] = 0;
    if (v23 < 0) {
      operator delete(v44[0]);
    }
  }

  *(_OWORD *)uint64_t v42 = *(_OWORD *)__p;
  uint64_t v43 = v41;
  __p[1] = 0LL;
  unint64_t v41 = 0LL;
  __p[0] = 0LL;
  int v30 = (os_log_t *)sub_138E8(18);
  uint64_t v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = v42;
    if (v43 < 0) {
      uint64_t v32 = (void **)v42[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 534;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v32;
    _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Mute state is NOT the same on all the volume commands: %s",  buf,  0x1Cu);
  }

  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
  uint64_t v18 = *(unsigned int *)v6;
LABEL_65:
  operator delete(v6);
  return v18;
}

void sub_64D34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_64DBC(uint64_t a1)
{
  float v2 = 0.0;
  sub_64DF8(a1, 1685287015LL, *(unsigned int *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_64DF8(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  char v8 = sub_2BCF20(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v8)
  {
    uint64_t v54 = (os_log_t *)sub_138E8(13);
    unint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v67, a2);
      __int128 v56 = v68 >= 0 ? v67 : (void **)v67[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v70 = 1024;
      int v71 = 322;
      __int16 v72 = 2080;
      char v73 = v56;
      _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VolumeCommand: Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v68 < 0) {
        operator delete(v67[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }

  int v9 = v8;
  uint64_t v10 = sub_138E8(18);
  uint64_t v11 = sub_138E8(38);
  char v12 = 0;
  uint64_t v13 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1LL;
    if ((v16 & 1) != 0)
    {
      if ((v14 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_10;
    }
  }

  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
  if ((*(void *)(v10 + 8) & 1) != 0)
  {
LABEL_10:
    int v17 = *(os_log_s **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v67, a3);
      if (v68 >= 0) {
        uint64_t v18 = v67;
      }
      else {
        uint64_t v18 = (void **)v67[0];
      }
      uint64_t v58 = a4;
      float v19 = *a4;
      sub_2CA1C(v65, a2);
      int v20 = v66;
      int v21 = (void **)v65[0];
      int v22 = *((_DWORD *)v9 + 14);
      sub_665BC((uint64_t)__p, a1);
      int v23 = v65;
      if (v20 < 0) {
        int v23 = v21;
      }
      char v24 = (void **)__p[0];
      *(_DWORD *)buf = 136316674;
      if (v64 >= 0) {
        char v24 = __p;
      }
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v70 = 1024;
      int v71 = 326;
      __int16 v72 = 2080;
      char v73 = v18;
      __int16 v74 = 2048;
      double v75 = v19;
      __int16 v76 = 2080;
      std::string::size_type v77 = v23;
      __int16 v78 = 1024;
      int v79 = v22;
      __int16 v80 = 2080;
      double v81 = v24;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VolumeCommand: Getting parameter '%s' to %f on processor type '%s' index %u on chain '%s'.",  buf,  0x40u);
      if (v64 < 0) {
        operator delete(__p[0]);
      }
      a4 = v58;
      if (v66 < 0) {
        operator delete(v65[0]);
      }
      if (v68 < 0) {
        operator delete(v67[0]);
      }
    }
  }

LABEL_44:
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    unint64_t v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }

              operator delete(__p);
              if ((buf[23] & 0x80) == 0)
              {
LABEL_32:
                if (v17)
                {
LABEL_33:
                  float v19 = (os_log_t *)sub_138E8(17);
                  int v20 = *v19;
                  if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
                  {
                    sub_48E98(&__p, theString);
                    if ((v31 & 0x80u) == 0) {
                      int v21 = &__p;
                    }
                    else {
                      int v21 = __p;
                    }
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4243;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&_BYTE buf[20] = v3;
                    char v37 = 2080;
                    uint64_t v38 = v21;
                    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Request to select a custom property time for the NetworkUplinkClock but the dedicated cl ock device is ID: %d, UID %s",  buf,  0x22u);
                  }

  uint64_t v31 = *(uint64_t **)v77;
  **(void **)std::string::size_type v77 = 0LL;
  v31[1] = 0LL;
  void v31[2] = (uint64_t)v29;
  *uint64_t v18 = v31;
  uint64_t v32 = (uint64_t *)**v27;
  if (v32)
  {
    std::__shared_weak_count *v27 = v32;
    uint64_t v31 = *v18;
  }

  sub_7A420(*(uint64_t **)(a1 + 48), v31);
  ++*(void *)(a1 + 56);
  *(void *)std::string::size_type v77 = 0LL;
LABEL_47:
  sub_D74DC((uint64_t)v77);
  if (sub_1CCD00())
  {
    uint64_t v33 = (*(uint64_t (**)(void *))(*a2 + 112LL))(a2);
    if ((v33 & 0xFF00000000LL) != 0 && v33 == 1701867895LL)
    {
      char v34 = *(void *)(a1 + 32);
      uint64_t v35 = operator new(0x70uLL);
      sub_D5830((uint64_t)v35, v76, v34, &v74);
      uint64_t v36 = operator new(0x18uLL);
      char v37 = *(void *)(a1 + 8);
      v36[1] = a1 + 8;
      v36[2] = v35;
      *uint64_t v36 = v37;
      *(void *)(v37 + 8) = v36;
      *(void *)(a1 + 8) = v36;
      ++*(void *)(a1 + 24);
    }
  }

  sub_6DD4();
  sub_34AA0(v77, (uint64_t)&qword_48F828);
  uint64_t v38 = AudioObjectsPublishedAndDied( *(void *)(a1 + 32) + 80LL,  *(unsigned int *)(*(void *)(a1 + 32) + 8LL),  1LL,  &v76,  0LL,  0LL);
  if (v77[8]) {
    (*(void (**)(void))(**(void **)v77 + 16LL))(*(void *)v77);
  }
  if (v38)
  {
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string::size_type v77 = 136315394;
      *(void *)&v77[4] = "VirtualAudio_PortManager.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 311;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theResult): got an error telling the HAL to publish a port",  v77,  0x12u);
    }

    *(void *)std::string::size_type v77 = 0LL;
    *(void *)&v77[8] = 0LL;
    if (v75)
    {
      char v41 = std::__shared_weak_count::lock(v75);
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = v74;
        unint64_t v44 = (unint64_t *)&v41->__shared_weak_owners_;
        do
          unint64_t v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        *(void *)std::string::size_type v77 = v43;
        *(void *)&v77[8] = v41;
        uint64_t v46 = (unint64_t *)&v41->__shared_owners_;
        do
          float v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v42);
        }
      }

      else
      {
        *(void *)std::string::size_type v77 = 0LL;
        *(void *)&v77[8] = 0LL;
      }
    }

    unint64_t v55 = (uint64_t *)sub_D7220((uint64_t)v27, (unint64_t *)v77);
    __int128 v56 = *v55;
    *unint64_t v55 = 0LL;
    if (*(void *)&v77[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v77[8]);
    }
    *(void *)std::string::size_type v77 = 0LL;
    *(void *)&v77[8] = 0LL;
    if (v75)
    {
      uint64_t v57 = std::__shared_weak_count::lock(v75);
      if (v57)
      {
        uint64_t v58 = v57;
        char v59 = v74;
        char v60 = (unint64_t *)&v57->__shared_weak_owners_;
        do
          uint64_t v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        *(void *)std::string::size_type v77 = v59;
        *(void *)&v77[8] = v57;
        uint64_t v62 = (unint64_t *)&v57->__shared_owners_;
        do
          char v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v58);
        }
      }

      else
      {
        *(void *)std::string::size_type v77 = 0LL;
        *(void *)&v77[8] = 0LL;
      }
    }

    sub_D725C(v27, (unint64_t *)v77);
    if (*(void *)&v77[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v77[8]);
    }
    sub_6DD4();
    char v64 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    (*(void (**)(uint64_t))(*(void *)v56 + 104LL))(v56);
    if (v64) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    int v9 = 0LL;
  }

  else
  {
    *(void *)std::string::size_type v77 = 0LL;
    *(void *)&v77[8] = 0LL;
    if (v75)
    {
      char v48 = std::__shared_weak_count::lock(v75);
      if (v48)
      {
        int v49 = v48;
        int v50 = v74;
        unsigned int v51 = (unint64_t *)&v48->__shared_weak_owners_;
        do
          unsigned __int16 v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        *(void *)std::string::size_type v77 = v50;
        *(void *)&v77[8] = v48;
        unint64_t v53 = (unint64_t *)&v48->__shared_owners_;
        do
          uint64_t v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      else
      {
        *(void *)std::string::size_type v77 = 0LL;
        *(void *)&v77[8] = 0LL;
      }
    }

    int v65 = sub_D7220((uint64_t)v27, (unint64_t *)v77);
    if (*(void *)&v77[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v77[8]);
    }
    int v9 = (os_log_s *)v76;
    char v66 = (os_log_t *)sub_138E8(3);
    double v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(**(void **)v65 + 96LL))(__p);
      char v68 = v73 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string::size_type v77 = 136315650;
      *(void *)&v77[4] = "VirtualAudio_PortManager.cpp";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 326;
      __int16 v78 = 2080;
      int v79 = v68;
      _os_log_impl(&dword_0, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created and published port: %s.", v77, 0x1Cu);
      if (v73 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v84[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  return v9;
}

      size_t v25 = (os_log_t *)sub_138E8(13);
      uint64_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v38 = "Port.cpp";
        uint64_t v39 = 1024;
        uint64_t v40 = 533;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v27, "Precondition failure.");
    }

    int v9 = *v7;
    uint64_t v10 = (std::__shared_weak_count *)v7[1];
    uint64_t v31 = (unsigned int *)*v7;
    uint64_t v32 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        char v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }

    buf[0] = 0;
    LOBYTE(v38) = 0;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    if (v32)
    {
      uint64_t v13 = (unint64_t *)&v32->__shared_owners_;
      do
        uint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }

    v7 += 2;
  }

  if (!v31) {
    goto LABEL_44;
  }
  uint64_t v15 = *v31;
  if (v32)
  {
    char v16 = (unint64_t *)&v32->__shared_owners_;
    do
      int v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  return v15 | 0x100000000LL;
}

    uint64_t v31 = (unint64_t *)&v24->__shared_owners_;
    do
      uint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (v32) {
      goto LABEL_47;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v28) {
      goto LABEL_70;
    }
LABEL_48:
    uint64_t v33 = (unint64_t)v80[1];
    if ((v81 & 0x80u) == 0) {
      uint64_t v33 = v81;
    }
    if (v33)
    {
      if ((v77 & 0x80u) == 0) {
        char v34 = v77;
      }
      else {
        char v34 = __n;
      }
      if (v34 == v33)
      {
        if ((v81 & 0x80u) == 0) {
          uint64_t v35 = v80;
        }
        else {
          uint64_t v35 = (void **)v80[0];
        }
        if ((v77 & 0x80) != 0)
        {
          unint64_t v44 = memcmp(__s1, v35, __n) == 0;
          goto LABEL_79;
        }

        if (v77)
        {
          uint64_t v36 = v77 - 1LL;
          p_s1 = &__s1;
          do
          {
            uint64_t v39 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            uint64_t v38 = v39;
            char v41 = *(unsigned __int8 *)v35;
            uint64_t v35 = (void **)((char *)v35 + 1);
            uint64_t v40 = v41;
            uint64_t v43 = v36-- != 0;
            unint64_t v44 = v38 == v40;
          }

          while (v38 == v40 && v43);
LABEL_79:
          if (v18) {
LABEL_80:
          }
            std::__shared_weak_count::__release_weak(v18);
        }

        else
        {
          unint64_t v44 = 1;
          if (v18) {
            goto LABEL_80;
          }
        }
      }

      else
      {
        unint64_t v44 = 0;
        if (v18) {
          goto LABEL_80;
        }
      }

      if (data) {
        std::__shared_weak_count::__release_weak(data);
      }
      if (v44)
      {
        unint64_t v45 = i->__r_.__value_.__l.__cap_;
        uint64_t v46 = i[1].__r_.__value_.__l.__data_;
        if (v46)
        {
          float v47 = (unint64_t *)(v46 + 16);
          do
            char v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }

        int v49 = operator new(0x20uLL);
        v49[2] = v45;
        v49[3] = v46;
        int v50 = (uint64_t)v72;
        os_log_s *v49 = v72;
        v49[1] = &v72;
        *(void *)(v50 + 8) = v49;
        __int16 v72 = v49;
        ++v74;
      }

      goto LABEL_88;
    }

  if (!v21)
  {
    if (v23) {
      goto LABEL_48;
    }
LABEL_18:
    uint64_t v10 = sub_138E8(13);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      uint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          std::string __p = inAddress;
          sub_613AC((uint64_t)&v109, &__p.mSelector);
          char v12 = v109.__cv_.__opaque[15] >= 0 ? &v109 : (std::condition_variable *)v109.__cv_.__sig;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          int v100 = 1024;
          uint64_t v101 = 199;
          v102 = 2080;
          *(void *)int v103 = v12;
          *(_WORD *)&v103[8] = 1024;
          *(_DWORD *)&v103[10] = a1;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v109.__cv_.__opaque[15] < 0) {
            operator delete((void *)v109.__cv_.__sig);
          }
        }
      }
    }

    buf = inAddress;
    uint64_t v13 = sub_90738(a1, &buf, *a2, (int)a2[1]);
    if (!(_DWORD)v13)
    {
      LOBYTE(v16) = 1;
      goto LABEL_53;
    }

    uint64_t v14 = v13;
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    char v16 = *v15;
    if (!*v15) {
      goto LABEL_53;
    }
    if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v109, v14);
      int v17 = v109.__cv_.__opaque[15];
      sig = v109.__cv_.__sig;
      __int128 v86 = *(void **)&inAddress.mSelector;
      LODWORD(v87) = inAddress.mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v86);
      float v19 = &v109;
      if (v17 < 0) {
        float v19 = (std::condition_variable *)sig;
      }
      if (v78 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(AudioObjectPropertyAddress **)&__p.mSelector;
      }
      buf.mSelector = 136316418;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      int v100 = 1024;
      uint64_t v101 = 207;
      v102 = 1024;
      *(_DWORD *)int v103 = v14;
      *(_WORD *)&v103[4] = 2080;
      *(void *)&v103[6] = v19;
      *(_WORD *)&v103[14] = 2080;
      *(void *)&v103[16] = p_p;
      *(_WORD *)&v103[24] = 1024;
      *(_DWORD *)&v103[26] = a1;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v78 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
      if (v109.__cv_.__opaque[15] < 0) {
        operator delete((void *)v109.__cv_.__sig);
      }
    }

    goto LABEL_52;
  }

  uint64_t v93 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_18;
  }
LABEL_48:
  char v24 = sub_138E8(13);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    char v16 = *(os_log_s **)v24;
    if (!*(void *)v24) {
      goto LABEL_53;
    }
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      int v100 = 1024;
      uint64_t v101 = 191;
      v102 = 1024;
      *(_DWORD *)int v103 = a1;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
    }
  }

  LOBYTE(v16) = 0;
LABEL_45:
  if (v112.__m_.__sig) {
    operator delete((void *)v112.__m_.__sig);
  }
  if ((v16 & 1) != 0)
  {
    sub_1E6038((uint64_t)&v87, (uint64_t)&v96);
    if (v89)
    {
LABEL_49:
      memset(v112.__m_.__opaque, 0, sizeof(v112.__m_.__opaque));
      v112.__m_.__sig = 850045863LL;
      memset(v111.__cv_.__opaque, 0, sizeof(v111.__cv_.__opaque));
      v111.__cv_.__sig = 1018212795LL;
      __int16 v80 = 0;
      sub_7D684(&__p, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v80);
      size_t v25 = 2000LL;
      while (1)
      {
        sub_1E6038((uint64_t)&v73, (uint64_t)&v96);
        uint64_t v26 = v73;
        if (v76) {
          goto LABEL_51;
        }
        __int16 v70 = 0LL;
        int v71 = 0LL;
        __int16 v72 = 0LL;
        uint64_t v28 = v74;
        uint64_t v29 = (v74 - (uint64_t)v73) >> 2;
        sub_7A5B8(&v70, v73, v74, v29);
        double v67 = 0LL;
        char v68 = 0LL;
        uint64_t v69 = 0LL;
        sub_7A5B8(&v67, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        char v30 = v70;
        uint64_t v31 = v67;
        if (v71 - v70 != v68 - v67) {
          break;
        }
        uint64_t v32 = memcmp(v70, v67, v71 - v70) == 0;
        if (v31) {
          goto LABEL_57;
        }
LABEL_58:
        if (v30)
        {
          int v71 = v30;
          operator delete(v30);
        }

        if (!v32)
        {
          if (v25 <= 0)
          {
            char v37 = (os_log_t *)sub_138E8(13);
            uint64_t v38 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              char v63 = *(void *)a2;
              char v64 = *(_DWORD *)(a2 + 8);
              sub_613AC((uint64_t)&__lk, (unsigned int *)&v63);
              if (v66 >= 0) {
                p_lk = &__lk;
              }
              else {
                p_lk = __lk.__m_;
              }
              uint64_t v61 = 0LL;
              uint64_t v62 = 0LL;
              char v60 = 0LL;
              sub_7A5B8(&v60, v26, v28, v29);
              uint64_t v57 = 0LL;
              uint64_t v58 = 0LL;
              char v59 = 0LL;
              sub_7A5B8( &v57,  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
              uint64_t v40 = v60;
              char v41 = v57;
              uint64_t v42 = v61 - v60 == v58 - v57 && memcmp(v60, v57, v61 - v60) == 0;
              buf.mSelector = 136316930;
              *(void *)&buf.mScope = "HALPropertySynchronizer.h";
              v102 = 1024;
              int v103 = 248;
              std::string::size_type v104 = 2080;
              *(void *)int v105 = "set";
              *(_WORD *)&v105[8] = 2080;
              *(void *)&v105[10] = p_lk;
              *(_WORD *)&v105[18] = 2080;
              *(void *)&v105[20] = "set";
              *(_WORD *)&v105[28] = 1024;
              v106 = v42;
              v107 = 1024;
              v108 = 0;
              v109 = 1024;
              unsigned int v110 = a1;
              _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
              if (v41)
              {
                uint64_t v58 = v41;
                operator delete(v41);
              }

              if (v40)
              {
                uint64_t v61 = v40;
                operator delete(v40);
              }

              if (v66 < 0) {
                operator delete(__lk.__m_);
              }
            }

  sub_85B80(v28);
}

        sub_32C38((uint64_t **)(a1 + 40), (uint64_t)v39, v40, v34);
        char v41 = v19[1];
        if (v41)
        {
          do
          {
            uint64_t v42 = (uint64_t **)v41;
            char v41 = (uint64_t *)*v41;
          }

          while (v41);
        }

        else
        {
          do
          {
            uint64_t v42 = (uint64_t **)v19[2];
            uint64_t v33 = *v42 == (uint64_t *)v19;
            float v19 = v42;
          }

          while (!v33);
        }

        float v19 = v42;
      }

      while (v42 != v18);
    }
  }

  return a1;
}

  int v22 = operator new(0x58uLL);
  v24[0] = v22;
  v24[1] = v6;
  size_t v25 = 0;
  v22[8] = *(_DWORD *)a4;
  *((void *)v22 + 5) = 0LL;
  *((void *)v22 + 6) = 0LL;
  *((void *)v22 + 7) = 0LL;
  sub_7A5B8( (void *)v22 + 5,  *(const void **)(a4 + 8),  *(void *)(a4 + 16),  (uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 2);
  *((void *)v22 + 8) = 0LL;
  *((void *)v22 + 9) = 0LL;
  *((void *)v22 + 10) = 0LL;
  sub_7A5B8( (void *)v22 + 8,  *(const void **)(a4 + 32),  *(void *)(a4 + 40),  (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
  size_t v25 = 1;
  *(void *)int v22 = 0LL;
  *((void *)v22 + 1) = 0LL;
  *((void *)v22 + 2) = v13;
  *char v12 = (uint64_t *)v22;
  int v23 = **a1;
  if (v23)
  {
    *a1 = (uint64_t **)v23;
    int v22 = *v12;
  }

  sub_7A420((uint64_t *)a1[1], (uint64_t *)v22);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  v24[0] = 0LL;
  sub_2C82B4((uint64_t)v24);
}

    *a1 = v24;
    goto LABEL_48;
  }

void sub_65450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_7A768((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_654FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_491410);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_491410))
  {
    qword_4913E0 = 0LL;
    qword_4913D0 = (uint64_t)off_476728;
    qword_4913D8 = &qword_4913E0;
    qword_491400 = 0LL;
    qword_4913F8 = 0LL;
    qword_4913E8 = 0LL;
    unk_4913F0 = &qword_4913F8;
    dword_491408 = 1;
    uint64_t v43 = (void **)&v43;
    unint64_t v44 = (void **)&v43;
    uint64_t v45 = 0LL;
    uint64_t v1 = (void **)operator new(0x18uLL);
    *((_DWORD *)v1 + 4) = 1668051820;
    *uint64_t v1 = &v43;
    v1[1] = &v43;
    uint64_t v43 = v1;
    unint64_t v44 = v1;
    uint64_t v45 = 1LL;
    float v2 = operator new(0x18uLL);
    v2[4] = 1818521197;
    *(void *)float v2 = v1;
    *((void *)v2 + 1) = &v43;
    v1[1] = v2;
    uint64_t v43 = (void **)v2;
    uint64_t v45 = 2LL;
    float v3 = operator new(0x18uLL);
    v3[4] = 1851942257;
    *(void *)float v3 = v2;
    *((void *)v3 + 1) = &v43;
    *((void *)v2 + 1) = v3;
    uint64_t v43 = (void **)v3;
    uint64_t v45 = 3LL;
    uint64_t v4 = operator new(0x18uLL);
    v4[4] = 1936748595;
    *(void *)uint64_t v4 = v3;
    *((void *)v4 + 1) = &v43;
    *((void *)v3 + 1) = v4;
    uint64_t v43 = (void **)v4;
    uint64_t v45 = 4LL;
    BOOL v5 = operator new(0x18uLL);
    v5[4] = 1987013737;
    *(void *)BOOL v5 = v4;
    *((void *)v5 + 1) = &v43;
    *((void *)v4 + 1) = v5;
    uint64_t v43 = (void **)v5;
    uint64_t v45 = 5LL;
    uint64_t v6 = operator new(0x18uLL);
    v6[4] = 1936089964;
    *(void *)uint64_t v6 = v5;
    *((void *)v6 + 1) = &v43;
    *((void *)v5 + 1) = v6;
    uint64_t v43 = (void **)v6;
    uint64_t v45 = 6LL;
    uint64_t v7 = operator new(0x18uLL);
    v7[4] = 1650814258;
    *(void *)uint64_t v7 = v6;
    *((void *)v7 + 1) = &v43;
    *((void *)v6 + 1) = v7;
    uint64_t v43 = (void **)v7;
    uint64_t v45 = 7LL;
    char v8 = operator new(0x18uLL);
    v8[4] = 1835298866;
    *(void *)char v8 = v7;
    *((void *)v8 + 1) = &v43;
    *((void *)v7 + 1) = v8;
    uint64_t v43 = (void **)v8;
    uint64_t v45 = 8LL;
    int v9 = operator new(0x18uLL);
    v9[4] = 1634165554;
    *(void *)int v9 = v8;
    *((void *)v9 + 1) = &v43;
    *((void *)v8 + 1) = v9;
    uint64_t v43 = (void **)v9;
    uint64_t v45 = 9LL;
    uint64_t v10 = operator new(0x18uLL);
    v10[4] = 1987211570;
    *(void *)uint64_t v10 = v9;
    *((void *)v10 + 1) = &v43;
    *((void *)v9 + 1) = v10;
    uint64_t v43 = (void **)v10;
    uint64_t v45 = 10LL;
    uint64_t v11 = operator new(0x18uLL);
    v11[4] = 1718186598;
    *(void *)uint64_t v11 = v10;
    *((void *)v11 + 1) = &v43;
    *((void *)v10 + 1) = v11;
    uint64_t v43 = (void **)v11;
    uint64_t v45 = 11LL;
    char v12 = operator new(0x18uLL);
    v12[4] = 1868787315;
    *(void *)char v12 = v11;
    *((void *)v12 + 1) = &v43;
    *((void *)v11 + 1) = v12;
    uint64_t v43 = (void **)v12;
    uint64_t v45 = 12LL;
    uint64_t v13 = operator new(0x18uLL);
    v13[4] = 1919906664;
    *(void *)uint64_t v13 = v12;
    *((void *)v13 + 1) = &v43;
    *((void *)v12 + 1) = v13;
    uint64_t v43 = (void **)v13;
    uint64_t v45 = 13LL;
    uint64_t v14 = operator new(0x18uLL);
    v14[4] = 1836282987;
    *(void *)uint64_t v14 = v13;
    *((void *)v14 + 1) = &v43;
    *((void *)v13 + 1) = v14;
    uint64_t v43 = (void **)v14;
    uint64_t v45 = 14LL;
    uint64_t v15 = operator new(0x18uLL);
    v15[4] = 1835165041;
    *(void *)uint64_t v15 = v14;
    *((void *)v15 + 1) = &v43;
    *((void *)v14 + 1) = v15;
    uint64_t v43 = (void **)v15;
    uint64_t v45 = 15LL;
    char v16 = operator new(0x18uLL);
    v16[4] = 1836022387;
    *(void *)char v16 = v15;
    *((void *)v16 + 1) = &v43;
    *((void *)v15 + 1) = v16;
    uint64_t v43 = (void **)v16;
    uint64_t v45 = 16LL;
    int v17 = operator new(0x18uLL);
    v17[4] = 1667658347;
    *(void *)int v17 = v16;
    *((void *)v17 + 1) = &v43;
    *((void *)v16 + 1) = v17;
    uint64_t v43 = (void **)v17;
    uint64_t v45 = 17LL;
    uint64_t v18 = operator new(0x18uLL);
    v18[4] = 1886156135;
    *(void *)uint64_t v18 = v17;
    *((void *)v18 + 1) = &v43;
    *((void *)v17 + 1) = v18;
    uint64_t v43 = (void **)v18;
    uint64_t v45 = 18LL;
    float v19 = operator new(0x18uLL);
    v19[4] = 1684235106;
    *(void *)float v19 = v18;
    *((void *)v19 + 1) = &v43;
    *((void *)v18 + 1) = v19;
    uint64_t v43 = (void **)v19;
    uint64_t v45 = 19LL;
    int v20 = operator new(0x18uLL);
    v20[4] = 1667525753;
    *(void *)int v20 = v19;
    *((void *)v20 + 1) = &v43;
    *((void *)v19 + 1) = v20;
    uint64_t v43 = (void **)v20;
    uint64_t v45 = 20LL;
    int v21 = operator new(0x18uLL);
    v21[4] = 1719166830;
    *(void *)int v21 = v20;
    *((void *)v21 + 1) = &v43;
    *((void *)v20 + 1) = v21;
    uint64_t v43 = (void **)v21;
    uint64_t v45 = 21LL;
    int v22 = operator new(0x18uLL);
    v22[4] = 1986159982;
    *(void *)int v22 = v21;
    *((void *)v22 + 1) = &v43;
    *((void *)v21 + 1) = v22;
    uint64_t v43 = (void **)v22;
    uint64_t v45 = 22LL;
    int v23 = operator new(0x18uLL);
    v23[4] = 1685287015;
    *(void *)int v23 = v22;
    *((void *)v23 + 1) = &v43;
    *((void *)v22 + 1) = v23;
    uint64_t v43 = (void **)v23;
    uint64_t v45 = 23LL;
    char v24 = operator new(0x18uLL);
    v24[4] = 1953330036;
    *(void *)char v24 = v23;
    *((void *)v24 + 1) = &v43;
    *((void *)v23 + 1) = v24;
    uint64_t v43 = (void **)v24;
    uint64_t v45 = 24LL;
    size_t v25 = operator new(0x18uLL);
    v25[4] = 1651866219;
    *(void *)size_t v25 = v24;
    *((void *)v25 + 1) = &v43;
    *((void *)v24 + 1) = v25;
    uint64_t v43 = (void **)v25;
    uint64_t v45 = 25LL;
    uint64_t v26 = operator new(0x18uLL);
    v26[4] = 1635284067;
    *(void *)uint64_t v26 = v25;
    *((void *)v26 + 1) = &v43;
    *((void *)v25 + 1) = v26;
    uint64_t v43 = (void **)v26;
    uint64_t v45 = 26LL;
    uint64_t v27 = operator new(0x18uLL);
    v27[4] = 1936027251;
    *(void *)uint64_t v27 = v26;
    *((void *)v27 + 1) = &v43;
    *((void *)v26 + 1) = v27;
    uint64_t v43 = (void **)v27;
    uint64_t v45 = 27LL;
    uint64_t v28 = operator new(0x18uLL);
    v28[4] = 1751216240;
    *(void *)uint64_t v28 = v27;
    *((void *)v28 + 1) = &v43;
    *((void *)v27 + 1) = v28;
    uint64_t v43 = (void **)v28;
    uint64_t v45 = 28LL;
    uint64_t v29 = operator new(0x18uLL);
    v29[4] = 1668312369;
    *(void *)uint64_t v29 = v28;
    *((void *)v29 + 1) = &v43;
    *((void *)v28 + 1) = v29;
    uint64_t v43 = (void **)v29;
    uint64_t v45 = 29LL;
    char v30 = operator new(0x18uLL);
    v30[4] = 1936747629;
    *(void *)char v30 = v29;
    *((void *)v30 + 1) = &v43;
    *((void *)v29 + 1) = v30;
    uint64_t v43 = (void **)v30;
    uint64_t v45 = 30LL;
    do
    {
      uint64_t v31 = *((unsigned int *)v1 + 4);
      int v41 = v31;
      inDesc.componentType = 1635083896;
      inDesc.componentSubType = v31;
      *(void *)&inDesc.componentManufacturer = 1634758764LL;
      inDesc.componentFlagsMask = 0;
      Next = (uint64_t *)AudioComponentFindNext(0LL, &inDesc);
      if (Next)
      {
        uint64_t v33 = sub_138E8(24);
        if ((*(_BYTE *)(v33 + 8) & 1) != 0)
        {
          char v34 = *(os_log_s **)v33;
          if (*(void *)v33)
          {
            if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(__p, v31);
              uint64_t v35 = __p;
              if (v40 < 0) {
                uint64_t v35 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315650;
              float v47 = "DSPProcessorManager.cpp";
              __int16 v48 = 1024;
              int v49 = 115;
              __int16 v50 = 2080;
              unsigned int v51 = v35;
              _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found an AudioComponent of sub-type %s.",  buf,  0x1Cu);
              if (v40 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }

        sub_21D980(&qword_4913D8, v31, &v41)[5] = Next;
      }

      else
      {
        uint64_t v36 = (os_log_t *)sub_138E8(24);
        char v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(__p, v31);
          uint64_t v38 = __p;
          if (v40 < 0) {
            uint64_t v38 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          float v47 = "DSPProcessorManager.cpp";
          __int16 v48 = 1024;
          int v49 = 116;
          __int16 v50 = 2080;
          unsigned int v51 = v38;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Failed to find an AudioComponent of sub-type %s.",  buf,  0x1Cu);
          if (v40 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      uint64_t v1 = (void **)v1[1];
    }

    while (v1 != (void **)&v43);
    sub_68314(&v43);
    __cxa_guard_release(&qword_491410);
  }

void sub_65D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_65DEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v15 = a2;
  uint64_t v10 = sub_65F40((uint64_t **)(a1 + 32), a2, &v15)[5];
  if (!v10)
  {
    char v12 = (os_log_t *)sub_138E8(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 224;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 64))(v10, a3, a4, a5, a6);
}

void sub_65F24(_Unwind_Exception *a1)
{
}

uint64_t **sub_65F40(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0LL;
    v7[6] = 0LL;
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }

    sub_7A420(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void sub_6600C(void *a1)
{
  if (a1)
  {
    sub_6600C(*a1);
    sub_6600C(a1[1]);
    sub_7A768((uint64_t)(a1 + 5));
    operator delete(a1);
  }

uint64_t sub_6604C( uint64_t a1, AudioUnitParameterID a2, AudioUnitParameterValue *outValue, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    return AudioUnitGetParameter(*(AudioUnit *)(v5 + 16), a2, inScope, inElement, outValue);
  }
  else {
    return 4294967246LL;
  }
}

void sub_66074(uint64_t a1)
{
}

void sub_6607C(uint64_t a1)
{
  uint64_t v2 = sub_138E8(18);
  uint64_t v3 = sub_138E8(38);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  int v9 = *(os_log_s **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v24 = 1024;
    int v25 = 405;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling software mute", buf, 0x12u);
  }

  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 184);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 176);
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 104LL))(v12, 1LL);
LABEL_25:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }

        return;
      }
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t v13 = sub_138E8(18);
  uint64_t v14 = sub_138E8(38);
  char v15 = 0;
  uint64_t v16 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1LL;
    if ((v19 & 1) != 0) {
      goto LABEL_21;
    }
  }

  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_21:
  int v20 = *(os_log_s **)v13;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v24 = 1024;
    int v25 = 412;
    _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", buf, 0x12u);
  }

  if (v11) {
    goto LABEL_25;
  }
}

void sub_662E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_662F8(uint64_t a1, uint64_t a2)
{
  char v4 = (os_log_t *)sub_138E8(18);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "Unmute";
    uint64_t v11 = "VolumeControl.cpp";
    int v10 = 136315650;
    if (!(_DWORD)a2) {
      uint64_t v6 = "Mute";
    }
    __int16 v12 = 1024;
    int v13 = 513;
    __int16 v14 = 2080;
    char v15 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setting mute: %s", (uint8_t *)&v10, 0x1Cu);
  }

  char v8 = *(uint64_t **)(a1 + 128);
  uint64_t v7 = *(uint64_t **)(a1 + 136);
  while (v8 != v7)
  {
    uint64_t v9 = *v8++;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 104LL))(v9, a2);
  }

void sub_6640C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 132))
  {
    if (a2) {
      float v3 = 0.0;
    }
    else {
      float v3 = 1.0;
    }
    uint64_t v4 = sub_138E8(18);
    uint64_t v5 = sub_138E8(38);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_11;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_11:
    uint64_t v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_665BC((uint64_t)__p, a1);
      if (v14 >= 0) {
        __int16 v12 = __p;
      }
      else {
        __int16 v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      __int16 v16 = 1024;
      int v17 = 554;
      __int16 v18 = 2048;
      double v19 = v3;
      __int16 v20 = 2080;
      int v21 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting mute value: %.2f for chain '%s'.", buf, 0x26u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 132), v3);
  }

void sub_665BC(uint64_t a1, uint64_t a2)
{
  float v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_16;
  }
  char v6 = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }

  if (*(char *)(v7 + 735) < 0)
  {
    sub_24054((_BYTE *)a1, *(void **)(v7 + 712), *(void *)(v7 + 720));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(v7 + 712);
    *(void *)(a1 + 16) = *(void *)(v7 + 728);
    *(_OWORD *)a1 = v8;
  }

  uint64_t v11 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return;
    }
LABEL_16:
    sub_7D084((void *)a1, "unknown");
  }

void sub_666B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_666C4(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  __int128 v8 = sub_2BCF20(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v8)
  {
    char v66 = (os_log_t *)sub_138E8(13);
    double v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v79, a2);
      char v68 = v80 >= 0 ? v79 : (void **)v79[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v82 = 1024;
      int v83 = 255;
      __int16 v84 = 2080;
      uint64_t v85 = v68;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v80 < 0) {
        operator delete(v79[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Software volume processor of type '%s' does not exist");
  }

  uint64_t v9 = v8;
  uint64_t v10 = sub_138E8(18);
  uint64_t v11 = sub_138E8(38);
  char v12 = 0;
  uint64_t v13 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1LL;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_8:
  int v17 = *(os_log_s **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(v79, a3);
    unsigned int v70 = a3;
    if (v80 >= 0) {
      __int16 v18 = v79;
    }
    else {
      __int16 v18 = (void **)v79[0];
    }
    sub_2CA1C(v77, a2);
    int v19 = v78;
    __int16 v20 = (void **)v77[0];
    int v21 = *((_DWORD *)v9 + 14);
    sub_665BC((uint64_t)__p, a1);
    unint64_t v22 = v77;
    if (v19 < 0) {
      unint64_t v22 = v20;
    }
    int v23 = (void **)__p[0];
    *(_DWORD *)buf = 136316674;
    if (v76 >= 0) {
      int v23 = __p;
    }
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v82 = 1024;
    int v83 = 263;
    __int16 v84 = 2080;
    uint64_t v85 = v18;
    __int16 v86 = 2048;
    double v87 = a4;
    __int16 v88 = 2080;
    int v89 = v22;
    __int16 v90 = 1024;
    int v91 = v21;
    __int16 v92 = 2080;
    uint64_t v93 = v23;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VolumeCommand: Setting parameter '%s' to %f on processor type '%s' instance ID %u on chain '%s'.",  buf,  0x40u);
    if (v76 < 0) {
      operator delete(__p[0]);
    }
    a3 = v70;
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
  }

  uint64_t v73 = 0LL;
  __int16 v74 = 0LL;
  __int16 v24 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v24)
  {
    int v25 = 0LL;
    goto LABEL_33;
  }

  int v25 = std::__shared_weak_count::lock(v24);
  __int16 v74 = v25;
  if (!v25 || (uint64_t v73 = *(void *)(a1 + 24)) == 0)
  {
LABEL_33:
    uint64_t v35 = sub_138E8(18);
    uint64_t v36 = sub_138E8(38);
    char v37 = 0;
    uint64_t v38 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v39 = *(void *)(v35 + 8);
    while (1)
    {
      uint64_t v40 = *(int *)&buf[4 * v38];
      char v41 = v37;
      if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
        break;
      }
      char v37 = 1;
      uint64_t v38 = 1LL;
      if ((v41 & 1) != 0) {
        goto LABEL_39;
      }
    }

    if ((v39 & v40) == 0) {
      uint64_t v35 = v36;
    }
LABEL_39:
    uint64_t v42 = *(os_log_s **)v35;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v82 = 1024;
      int v83 = 295;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter",  buf,  0x12u);
    }

    goto LABEL_42;
  }

  sub_654FC();
  uint64_t v26 = (*(uint64_t (**)(float))(qword_4913D0 + 56))(a4);
  uint64_t v27 = v26;
  if ((_DWORD)v26)
  {
    if ((_DWORD)v26 == 1852204065)
    {
      uint64_t v28 = sub_138E8(18);
      uint64_t v29 = sub_138E8(38);
      char v30 = 0;
      uint64_t v31 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v32 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v33 = *(int *)&buf[4 * v31];
        char v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        char v30 = 1;
        uint64_t v31 = 1LL;
        if ((v34 & 1) != 0) {
          goto LABEL_54;
        }
      }

      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_54:
      unsigned __int16 v52 = *(os_log_s **)v28;
      if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        sub_2CA1C(v79, a3);
        if (v80 >= 0) {
          unint64_t v53 = v79;
        }
        else {
          unint64_t v53 = (void **)v79[0];
        }
        sub_2CA1C(v77, a3);
        int v54 = v78;
        unint64_t v55 = (void **)v77[0];
        sub_665BC((uint64_t)__p, a1);
        *(double *)&__int128 v56 = COERCE_DOUBLE(v77);
        if (v54 < 0) {
          __int128 v56 = v55;
        }
        if (v76 >= 0) {
          uint64_t v57 = __p;
        }
        else {
          uint64_t v57 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        __int16 v82 = 1024;
        int v83 = 278;
        __int16 v84 = 2080;
        uint64_t v85 = v53;
        __int16 v86 = 2080;
        double v87 = *(double *)&v56;
        __int16 v88 = 2080;
        int v89 = v57;
        _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_INFO,  "%25s:%-5d VolumeCommand: parameter '%s' on processor type '%s' not found on chain '%s'.",  buf,  0x30u);
LABEL_82:
        if (v76 < 0) {
          operator delete(__p[0]);
        }
        if (v78 < 0) {
          operator delete(v77[0]);
        }
        if (v80 < 0) {
          operator delete(v79[0]);
        }
      }
    }

    else
    {
      uint64_t v45 = sub_138E8(18);
      uint64_t v46 = sub_138E8(38);
      char v47 = 0;
      uint64_t v48 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v49 = *(void *)(v45 + 8);
      while (1)
      {
        uint64_t v50 = *(int *)&buf[4 * v48];
        char v51 = v47;
        if (((v49 & v50) != 0) != ((*(void *)(v46 + 8) & v50) != 0)) {
          break;
        }
        char v47 = 1;
        uint64_t v48 = 1LL;
        if ((v51 & 1) != 0) {
          goto LABEL_67;
        }
      }

      if ((v49 & v50) == 0) {
        uint64_t v45 = v46;
      }
LABEL_67:
      uint64_t v58 = *(os_log_s **)v45;
      if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v79, a3);
        if (v80 >= 0) {
          char v59 = v79;
        }
        else {
          char v59 = (void **)v79[0];
        }
        sub_2CA1C(v77, a2);
        if (v78 >= 0) {
          char v60 = v77;
        }
        else {
          char v60 = (void **)v77[0];
        }
        int v61 = *((_DWORD *)v9 + 14);
        sub_2CA1C(__p, v27);
        int v62 = v76;
        char v63 = (void **)__p[0];
        sub_665BC((uint64_t)v71, a1);
        char v64 = __p;
        if (v62 < 0) {
          char v64 = v63;
        }
        if (v72 >= 0) {
          int v65 = v71;
        }
        else {
          int v65 = (void **)v71[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        __int16 v82 = 1024;
        int v83 = 289;
        __int16 v84 = 2080;
        uint64_t v85 = v59;
        __int16 v86 = 2048;
        double v87 = a4;
        __int16 v88 = 2080;
        int v89 = v60;
        __int16 v90 = 1024;
        int v91 = v61;
        __int16 v92 = 2080;
        uint64_t v93 = v64;
        __int16 v94 = 2080;
        uint64_t v95 = v65;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VolumeCommand: Failed to set parameter '%s' to %f on processor type '%s' index %u, err: %s on chain '%s'.",  buf,  0x4Au);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        goto LABEL_82;
      }
    }

void sub_66E60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_7A768((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_66F28(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  unsigned int v15 = a2;
  uint64_t v10 = sub_65F40((uint64_t **)(a1 + 32), a2, &v15)[5];
  if (!v10)
  {
    char v12 = (os_log_t *)sub_138E8(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v17 = "DSPProcessorManager.cpp";
      __int16 v18 = 1024;
      int v19 = 214;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, float))(*v10 + 72))(v10, a3, a4, a5, a6);
}

void sub_67068(_Unwind_Exception *a1)
{
}

uint64_t sub_67084( void *a1, uint64_t a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5)
{
  uint64_t v10 = sub_138E8(24);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    uint64_t v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        int v12 = v21;
        uint64_t v13 = (void **)__p[0];
        uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 160LL))(a1);
        uint64_t v18 = v14;
        unsigned int v15 = __p;
        char v19 = 1;
        if (v12 < 0) {
          unsigned int v15 = v13;
        }
        *(_DWORD *)buf = 136316418;
        int v23 = "DSPProcessorManager.cpp";
        __int16 v24 = 1024;
        int v25 = 465;
        __int16 v26 = 2080;
        uint64_t v27 = v15;
        __int16 v28 = 1024;
        int v29 = a2;
        __int16 v30 = 2112;
        uint64_t v31 = v14;
        __int16 v32 = 2048;
        double v33 = a5;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting parameter '%s' (%u) on Audio Unit with name %@ to value %f",  buf,  0x36u);
        sub_19DFC((uint64_t)&v18);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v16 = a1[9];
  if (v16) {
    return AudioUnitSetParameter(*(AudioUnit *)(v16 + 16), a2, a3, a4, a5, 0);
  }
  else {
    return 4294967246LL;
  }
}

void sub_67228(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_67248(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1 == *(void *)(a1 + 136))
  {
    float v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "VolumeControl.cpp";
      __int16 v8 = 1024;
      int v9 = 596;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return (*(uint64_t (**)(void))(**(void **)v1 + 136LL))();
}

void sub_6734C(_Unwind_Exception *exception_object)
{
}

void **sub_67368(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    uint64_t v5 = (unint64_t *)(a2 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v10 = *a3;
  int v11 = *((_DWORD *)a3 + 2);
  uint64_t v7 = (dispatch_queue_s *)sub_869B4();
  __int16 v8 = operator new(0x20uLL);
  *__int16 v8 = a1;
  v8[1] = a2;
  v8[2] = v10;
  *((_DWORD *)v8 + 6) = v11;
  int v12 = 0LL;
  dispatch_async_f(v7, v8, (dispatch_function_t)sub_2BC6C8);
  return sub_ADC0C(&v12);
}

void sub_67408(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_67420(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  uint64_t v5 = a1 + 12;
  unint64_t v6 = (void *)a1[12];
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = a1 + 12;
  do
  {
    uint64_t v8 = a1[17];
    if (!v8) {
      goto LABEL_14;
    }
    int v9 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 48LL))(v8, v6 + 4, a2);
    uint64_t v10 = v6 + 1;
    if (!v9)
    {
      uint64_t v10 = v6;
      uint64_t v7 = v6;
    }

    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v5 == v7) {
    goto LABEL_10;
  }
  uint64_t v11 = a1[17];
  if (!v11) {
LABEL_14:
  }
    sub_82CEC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 48LL))(v11, a2, v7 + 4)) {
LABEL_10:
  }
    uint64_t v7 = a1 + 12;
  if (v4) {
    (*(void (**)(void *))(*a1 + 24LL))(a1);
  }
  return v5 != v7;
}

void sub_674F8(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_67530(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3 = a2[1];
  unsigned int v4 = a3[1];
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    BOOL v5 = *a2 >= *a3;
    if (*a2 == *a3) {
      BOOL v5 = a2[2] >= a3[2];
    }
  }

  return !v5;
}

void *sub_67564(void *a1, unsigned int *a2)
{
  int v66 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  double v67 = a1;
  char v68 = a2;
  if (&v76 == a1 + 11) {
    goto LABEL_74;
  }
  unsigned int v4 = (void *)a1[17];
  if (!v4)
  {
    *(void *)&buf[24] = 0LL;
    unint64_t v6 = v80;
    if (v80 != v79)
    {
      BOOL v5 = 0LL;
LABEL_10:
      *(void *)&buf[24] = v6;
      char v80 = v5;
      goto LABEL_15;
    }

LABEL_74:
  if (v66) {
    (*(void (**)(void *))(*v67 + 24LL))(v67);
  }
  uint64_t v49 = sub_138E8(13);
  if ((*(_BYTE *)(v49 + 8) & 1) != 0)
  {
    uint64_t v50 = *(os_log_s **)v49;
    if (*(void *)v49)
    {
      if (os_log_type_enabled(*(os_log_t *)v49, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v81, *a2);
        int v51 = v82;
        unsigned __int16 v52 = (void **)v81[0];
        sub_2CA1C(__p, a2[1]);
        unint64_t v53 = v81;
        if (v51 < 0) {
          unint64_t v53 = v52;
        }
        if (v70 >= 0) {
          int v54 = __p;
        }
        else {
          int v54 = (void **)__p[0];
        }
        unsigned int v55 = a2[1];
        unsigned int v56 = a2[2];
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "StandardUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v53;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&buf[30] = v54;
        __int16 v72 = 1024;
        unsigned int v73 = v55;
        __int16 v74 = 1024;
        unsigned int v75 = v56;
        _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to execute trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x32u);
        if (v70 < 0) {
          operator delete(__p[0]);
        }
        if (v82 < 0) {
          operator delete(v81[0]);
        }
      }
    }
  }

  uint64_t v57 = (uint64_t **)sub_67F40((uint64_t)&v76, (uint64_t)a2);
  if (&v77 == v57)
  {
    int v62 = (os_log_t *)sub_138E8(13);
    char v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v81, *v68);
      if (v82 >= 0) {
        char v64 = v81;
      }
      else {
        char v64 = (void **)v81[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StandardUtilities.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 918;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v64;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): The trigger address %s was never registered with the relay map.",  buf,  0x1Cu);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "The trigger address %s was never registered with the relay map.");
  }

  uint64_t v58 = (uint64_t *)(v57 + 6);
  sub_68040(v77);
  uint64_t result = v80;
  if (v80 == v79)
  {
    uint64_t v61 = 4LL;
    uint64_t result = v79;
  }

  else
  {
    if (!v80) {
      return result;
    }
    uint64_t v61 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v61))();
}

  sub_88C08(v91[0]);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v57 = theDict;
  if (theDict && CFDictionaryGetCount(theDict))
  {
    uint64_t v58 = (int64x2_t *)v93;
    char v59 = (std::recursive_mutex *)(v93 + 80);
    std::recursive_mutex::lock((std::recursive_mutex *)(v93 + 80));
    char v60 = v58[10].u64[0];
    uint64_t v61 = (void *)v58[9].i64[1];
    if ((unint64_t)v61 >= v60)
    {
      char v63 = v58[9].i64[0];
      char v64 = ((uint64_t)v61 - v63) >> 3;
      int v65 = v60 - v63;
      int v66 = v65 >> 2;
      else {
        double v67 = v66;
      }
      int v103 = v58 + 10;
      if (v67)
      {
        uint64_t v69 = (char *)sub_7DC90(v67);
      }

      else
      {
        uint64_t v69 = 0LL;
        char v68 = 0LL;
      }

      char v70 = &v69[8 * v64];
      int v71 = &v69[8 * v68];
      v102 = v71;
      __int16 v72 = sub_AD834(v70, v57);
      int v62 = v72 + 1;
      *(void *)&buf[16] = v72 + 1;
      __int16 v74 = (void *)v58[9].i64[0];
      unsigned int v73 = (void *)v58[9].i64[1];
      if (v73 == v74)
      {
        char v76 = vdupq_n_s64((unint64_t)v73);
      }

      else
      {
        do
        {
          unsigned int v75 = *--v73;
          *--__int16 v72 = v75;
          *unsigned int v73 = 0LL;
        }

        while (v73 != v74);
        char v76 = v58[9];
        int v62 = *(void **)&buf[16];
        int v71 = v102;
      }

      v58[9].i64[0] = (uint64_t)v72;
      v58[9].i64[1] = (uint64_t)v62;
      *(int64x2_t *)&buf[8] = v76;
      std::string::size_type v77 = (char *)v58[10].i64[0];
      v58[10].i64[0] = (uint64_t)v71;
      v102 = v77;
      *(void *)buf = v76.i64[0];
      sub_AD86C((uint64_t)buf);
    }

    else
    {
      int v62 = sub_AD834(v61, v57) + 1;
    }

    v58[9].i64[1] = (uint64_t)v62;
    std::recursive_mutex::unlock(v59);
  }

  uint64_t v78 = dispatch_time(0LL, 5000000000LL);
  int v79 = (dispatch_queue_s *)sub_869B4();
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120LL;
  block[2] = sub_AD3C0;
  block[3] = &unk_46E008;
  block[4] = v93;
  int v89 = v94;
  if (v94)
  {
    char v80 = (unint64_t *)&v94->__shared_owners_;
    do
      double v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }

  dispatch_after(v78, v79, block);
  char v82 = v89;
  if (v89)
  {
    int v83 = (unint64_t *)&v89->__shared_owners_;
    do
      __int16 v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  if (theDict) {
    CFRelease(theDict);
  }
LABEL_107:
  uint64_t v85 = v94;
  if (v94)
  {
    __int16 v86 = (unint64_t *)&v94->__shared_owners_;
    do
      double v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }

      uint64_t v49 = std::__shared_weak_count::lock(v41);
      if (!v49) {
        goto LABEL_79;
      }
      uint64_t v50 = v49;
      int v51 = v48 == v42;
      unsigned __int16 v52 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v50);
      }

  sub_32C8C(v34);
}

  __int16 v32 = 0;
  double v33 = 2.0;
  do
  {
    while (1)
    {
      BOOL v34 = v32;
      if (v70 != &v71) {
        break;
      }
      double v33 = 3.0;
      __int16 v32 = 1;
      if ((v34 & 1) != 0) {
        goto LABEL_121;
      }
    }

    uint64_t v31 = v33 * a2;
    uint64_t v35 = v70;
    while (*((double *)v35 + 4) > v31 || *((double *)v35 + 5) < v31)
    {
      int v37 = v35[1];
      if (v37)
      {
        do
        {
          uint64_t v38 = (uint64_t **)v37;
          int v37 = (uint64_t *)*v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          uint64_t v38 = (uint64_t **)v35[2];
          uint64_t v8 = *v38 == (uint64_t *)v35;
          uint64_t v35 = v38;
        }

        while (!v8);
      }

      uint64_t v35 = v38;
      if (v38 == &v71) {
        goto LABEL_92;
      }
    }

    if (v35 != &v71) {
      goto LABEL_162;
    }
LABEL_92:
    double v33 = 3.0;
    __int16 v32 = 1;
  }

  while ((v34 & 1) == 0);
  if (v70 == &v71)
  {
LABEL_121:
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    goto LABEL_122;
  }

  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  do
  {
    uint64_t v42 = v26 + 4;
    if ((unint64_t)v40 >= v41)
    {
      uint64_t v43 = ((char *)v40 - (char *)v39) >> 4;
      uint64_t v44 = v43 + 1;
      else {
        uint64_t v45 = v44;
      }
      if (v45) {
        uint64_t v45 = (unint64_t)sub_7BE90(v45);
      }
      else {
        uint64_t v46 = 0LL;
      }
      char v47 = (_OWORD *)(v45 + 16 * v43);
      void *v47 = *v42;
      if (v40 == v39)
      {
        uint64_t v49 = (double *)(v45 + 16 * v43);
      }

      else
      {
        uint64_t v48 = v45 + 16 * v43;
        do
        {
          uint64_t v49 = (double *)(v48 - 16);
          *(_OWORD *)(v48 - 16) = *((_OWORD *)v40 - 1);
          v40 -= 2;
          v48 -= 16LL;
        }

        while (v40 != v39);
      }

      uint64_t v41 = v45 + 16 * v46;
      uint64_t v40 = (double *)(v47 + 1);
      if (v39) {
        operator delete(v39);
      }
      uint64_t v39 = v49;
    }

    else
    {
      *(_OWORD *)uint64_t v40 = *v42;
      v40 += 2;
    }

    uint64_t v50 = v26[1];
    if (v50)
    {
      do
      {
        int v51 = (uint64_t **)v50;
        uint64_t v50 = (uint64_t *)*v50;
      }

      while (v50);
    }

    else
    {
      do
      {
        int v51 = (uint64_t **)v26[2];
        uint64_t v8 = *v51 == (uint64_t *)v26;
        uint64_t v26 = v51;
      }

      while (!v8);
    }

    uint64_t v26 = v51;
  }

  while (v51 != &v71);
LABEL_122:
  unsigned __int16 v52 = 126 - 2 * __clz(((char *)v40 - (char *)v39) >> 4);
  if (v40 == v39) {
    unint64_t v53 = 0LL;
  }
  else {
    unint64_t v53 = v52;
  }
  sub_38AF28((uint64_t)v39, v40, v53, 1);
  int v54 = v39;
  if (v40 != v39)
  {
    int v54 = v39;
    while (*v54 == 44100.0 || *v54 <= a2)
    {
      v54 += 2;
      if (v54 == v40) {
        goto LABEL_135;
      }
    }
  }

  if (v54 == v40)
  {
LABEL_135:
    unsigned int v56 = v70;
    uint64_t v31 = 44100.0;
    if (a2 >= 44100.0 || v70 == &v71) {
      goto LABEL_149;
    }
    while (*((double *)v56 + 4) > 44100.0 || *((double *)v56 + 5) < 44100.0)
    {
      uint64_t v58 = v56[1];
      if (v58)
      {
        do
        {
          char v59 = (uint64_t **)v58;
          uint64_t v58 = (uint64_t *)*v58;
        }

        while (v58);
      }

      else
      {
        do
        {
          char v59 = (uint64_t **)v56[2];
          uint64_t v8 = *v59 == (uint64_t *)v56;
          unsigned int v56 = v59;
        }

        while (!v8);
      }

      unsigned int v56 = v59;
      if (v59 == &v71) {
        goto LABEL_149;
      }
    }

    if (v56 == &v71)
    {
LABEL_149:
      sub_38B614(v39, v40, v53, 1);
      char v60 = v39;
      if (v40 != v39)
      {
        char v60 = v39;
        while (v60[1] >= a2)
        {
          v60 += 2;
          if (v60 == v40) {
            goto LABEL_153;
          }
        }
      }

      if (v60 == v40)
      {
LABEL_153:
        uint64_t v61 = (os_log_t *)sub_138E8(13);
        int v62 = *v61;
        if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 262;
          _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Did not find a valid matching sample rate",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Did not find a valid matching sample rate");
      }

      int v54 = v60 + 1;
      goto LABEL_159;
    }
  }

  else
  {
LABEL_159:
    uint64_t v31 = *v54;
  }

  if (v39) {
    operator delete(v39);
  }
LABEL_162:
  sub_32C8C(v71);
  return v31;
}

  sub_19DFC((uint64_t)&v134);
  unsigned int v55 = sub_138E8(17);
  unsigned int v56 = sub_138E8(28);
  uint64_t v57 = 0;
  uint64_t v58 = 0LL;
  *(void *)uint32_t v152 = 0x100000002LL;
  char v59 = *(void *)(v55 + 8);
  while (1)
  {
    char v60 = *(int *)&v152[4 * v58];
    uint64_t v61 = v57;
    if (((v59 & v60) != 0) != ((*(void *)(v56 + 8) & v60) != 0)) {
      break;
    }
    uint64_t v57 = 1;
    uint64_t v58 = 1LL;
    if ((v61 & 1) != 0) {
      goto LABEL_80;
    }
  }

  if ((v59 & v60) == 0) {
    unsigned int v55 = v56;
  }
LABEL_80:
  int v62 = *(os_log_s **)v55;
  if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    char v63 = v143;
    char v64 = v142;
    int v65 = v141[0];
    (*(void (**)(__CFString **__return_ptr))(**(void **)(a1 + 8) + 128LL))(&v149);
    if (v64) {
      int v66 = v64;
    }
    else {
      int v66 = v65;
    }
    if (v63) {
      int v66 = v63;
    }
    *(_DWORD *)uint32_t v152 = 136316162;
    *(void *)&v152[4] = "BluetoothProfiles_Aspen.cpp";
    double v67 = "routable";
    std::string v153 = 1024;
    os_log_t v154 = 574;
    *(void *)std::string v156 = v66;
    std::string v155 = 2112;
    if (!v13) {
      double v67 = "non-routable";
    }
    *(_WORD *)&v156[8] = 2112;
    *(void *)&v156[10] = v149;
    std::string v157 = 2080;
    std::string v158 = v67;
    _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a bluetooth headset output port with name %@ and UID %@, %s",  v152,  0x30u);
    sub_19DFC((uint64_t)&v149);
  }

  if (cap >= 0) {
    char v68 = v138;
  }
  else {
    char v68 = (void **)v138[0];
  }
  uint64_t v132 = CFStringCreateWithCString(0LL, (const char *)v68, 0x600u);
  char v133 = 1;
  uint64_t v69 = atomic_load((unsigned int *)(*(void *)(a1 + 8) + 492LL));
  char v70 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v70->__shared_owners_ = 0LL;
  int v71 = (unint64_t *)&v70->__shared_owners_;
  v70->__shared_weak_owners_ = 0LL;
  v70->__vftable = (std::__shared_weak_count_vtbl *)off_478AB0;
  __int16 v72 = *(void *)(a1 + 8);
  sub_14FF7C((uint64_t)v152, 1885892706LL, v69);
  unsigned int v73 = v70 + 1;
  os_log_t v149 = 0LL;
  std::string v150 = 0LL;
  std::string v151 = 0LL;
  sub_224CC0( (uint64_t)&v70[1],  (uint64_t *)v152,  v72,  (uint64_t)&v149,  (uint64_t)v141,  (uint64_t *)&v132,  theString[0],  v13 != 0);
  sub_32C8C(*(void **)&v156[4]);
  v70[1].__vftable = (std::__shared_weak_count_vtbl *)off_47CE08;
  __int16 v74 = sub_2F2338((uint64_t)&v70[1]);
  unsigned int v75 = sub_138E8(23);
  char v76 = sub_138E8(28);
  std::string::size_type v77 = 0;
  uint64_t v78 = 0LL;
  *(void *)uint32_t v152 = 0x100000002LL;
  int v79 = *(void *)(v75 + 8);
  while (1)
  {
    char v80 = *(int *)&v152[4 * v78];
    double v81 = v77;
    if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
      break;
    }
    std::string::size_type v77 = 1;
    uint64_t v78 = 1LL;
    if ((v81 & 1) != 0) {
      goto LABEL_99;
    }
  }

  if ((v79 & v80) == 0) {
    unsigned int v75 = v76;
  }
LABEL_99:
  char v82 = *(os_log_s **)v75;
  if (v82 && os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    int v83 = (const __CFString *)v70[11].__shared_owners_;
    v147 = v83;
    shared_weak_owners = v70[11].__shared_weak_owners_;
    if (shared_weak_owners && v83)
    {
      CFRetain(v83);
      int v83 = v147;
    }

    sub_48E98(&v149, v83);
    __int16 v84 = SHIBYTE(v151);
    uint64_t v85 = v149;
    sub_2CA1C(&__p, v74);
    __int16 v86 = &v149;
    if (v84 < 0) {
      __int16 v86 = (__CFString **)v85;
    }
    if (v146 >= 0) {
      double v87 = &__p;
    }
    else {
      double v87 = __p;
    }
    *(_DWORD *)uint32_t v152 = 136315906;
    *(void *)&v152[4] = "Port_BluetoothHFPOutput_Aspen.cpp";
    std::string v153 = 1024;
    os_log_t v154 = 75;
    std::string v155 = 2080;
    *(void *)std::string v156 = v86;
    *(_WORD *)&v156[8] = 2080;
    *(void *)&v156[10] = v87;
    _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting sub port type for Bluetooth port %s: %s",  v152,  0x26u);
    if (v146 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v151) < 0) {
      operator delete(v149);
    }
    sub_19DFC((uint64_t)&v147);
  }

  ((void (*)(std::__shared_weak_count *, uint64_t))v73->__vftable[2].__get_deleter)(v70 + 1, v74);
  std::string v134 = (CFStringRef)&v70[1];
  double v135 = v70;
  __int16 v88 = (std::__shared_weak_count *)v70[4].__shared_weak_owners_;
  if (v88)
  {
    if (v88->__shared_owners_ != -1) {
      goto LABEL_127;
    }
    do
      int v89 = __ldxr(v71);
    while (__stxr(v89 + 1, v71));
    __int16 v90 = (unint64_t *)&v70->__shared_weak_owners_;
    do
      int v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v70[4].__shared_owners_ = (uint64_t)v73;
    v70[4].__shared_weak_owners_ = (uint64_t)v70;
    std::__shared_weak_count::__release_weak(v88);
  }

  else
  {
    do
      __int16 v92 = __ldxr(v71);
    while (__stxr(v92 + 1, v71));
    uint64_t v93 = (unint64_t *)&v70->__shared_weak_owners_;
    do
      __int16 v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    v70[4].__shared_owners_ = (uint64_t)v73;
    v70[4].__shared_weak_owners_ = (uint64_t)v70;
  }

  do
    uint64_t v95 = __ldaxr(v71);
  while (__stlxr(v95 - 1, v71));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }

    std::string::operator=(&v64, (const std::string *)(a2 + 248));
    if (*(_DWORD *)(a2 + 240) == 1684108899) {
      uint64_t v41 = 1936024681;
    }
    else {
      uint64_t v41 = 1936679529;
    }
LABEL_90:
    std::string::size_type size = v64.__r_.__value_.__s.__size_;
    if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    if (v29 == v30) {
      char v47 = 1936286822;
    }
    else {
      char v47 = 1936290660;
    }
    if (size) {
      uint64_t v48 = v41;
    }
    else {
      uint64_t v48 = v47;
    }
    uint64_t v49 = *(id *)sub_138E8(2);
    uint64_t v50 = v49;
    if (v49)
    {
      int v51 = (os_log_s *)v49;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v61, v48);
        unsigned __int16 v52 = (v61.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v61 : (std::string *)v61.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7725;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v52;
        _os_log_impl(&dword_0, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", buf, 0x1Cu);
      }
    }

    *(_DWORD *)a1 = v48;
    unint64_t v53 = (std::string *)(a1 + 8);
    else {
      os_log_t *v53 = v64;
    }
    sub_32C8C(v63[0]);
LABEL_111:
    *(void *)buf = __p;
    sub_135F74((void ***)buf);
    if (!v4) {
      return;
    }
    goto LABEL_112;
  }

  BOOL v5 = **(void **)(a2 + 112);
  uint64_t v8 = *(void *)(v5 + 8);
  unint64_t v6 = v5 + 8;
  uint64_t v7 = v8;
  if (v8)
  {
    int v9 = v6;
    do
    {
      uint64_t v10 = *(_DWORD *)(v7 + 32);
      uint64_t v11 = v10 >= 0x63737072;
      if (v10 >= 0x63737072) {
        uint64_t v12 = (uint64_t *)v7;
      }
      else {
        uint64_t v12 = (uint64_t *)(v7 + 8);
      }
      if (v11) {
        int v9 = v7;
      }
      uint64_t v7 = *v12;
    }

    while (*v12);
    if (v9 != v6 && *(_DWORD *)(v9 + 32) <= 0x63737072u)
    {
      unsigned int v55 = sub_138E8(13);
      unsigned int v56 = sub_8C7D4(1, *(void **)v55, *(void *)(v55 + 8));
      uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      uint64_t v58 = v57;
      if (v57)
      {
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7576;
          _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }
      }

      char v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v59, "Precondition failure.");
    }
  }

  *(_DWORD *)a1 = 1936289391;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  if (v4) {
LABEL_112:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
}

          uint64_t v48 = 1000 * v47.__d_.__rep_;
LABEL_75:
          if (v48 > (v46.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v49.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_78:
            std::condition_variable::__do_timed_wait(&v97, &__lk, v49);
            std::chrono::steady_clock::now();
            goto LABEL_79;
          }
        }

        v49.__d_.__rep_ = v48 + v46.__d_.__rep_;
        goto LABEL_78;
      }

void sub_67DD8()
{
}

void sub_67DF4()
{
}

void sub_67E04()
{
}

void sub_67E40(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      unsigned int v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
    __cxa_rethrow();
  }

  JUMPOUT(0x67EF4LL);
}

void sub_67E6C()
{
}

void sub_67E84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t *a29)
{
  __int16 v30 = a29;
  if (a29 == &a26)
  {
    uint64_t v31 = 4LL;
    __int16 v30 = &a26;
  }

  else
  {
    if (!a29) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_67EFC(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x67EF4LL);
}

void *sub_67F0C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_485A70;
  return result;
}

void sub_67F30(uint64_t a1, void *a2)
{
  *a2 = &off_485A70;
}

void *sub_67F40(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a1 + 8);
  unsigned int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
      goto LABEL_12;
    }
    int v8 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 48LL))(v7, v3 + 4, a2);
    int v9 = v3 + 1;
    if (!v8)
    {
      int v9 = v3;
      unint64_t v6 = v3;
    }

    unsigned int v3 = (void *)*v9;
  }

  while (*v9);
  if (v2 == v6) {
    return v2;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (!v10) {
LABEL_12:
  }
    sub_82CEC();
  return v6;
}

uint64_t sub_67FE8(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2 == (void *)(a1 + 24))
  {
    uint64_t v3 = 4LL;
    int v2 = (void *)(a1 + 24);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_68040(void *a1)
{
  if (a1)
  {
    sub_68040(*a1);
    sub_68040(a1[1]);
    sub_68314(a1 + 6);
    operator delete(a1);
  }

void *sub_68080(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0LL;
      while (1)
      {
        unsigned int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unsigned int v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

void *sub_680D4(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
LABEL_9:
    }
      sub_82CEC();
    BOOL v5 = v4;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 48LL))(v7, a3, v5 + 4))
      {
        int v9 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_12;
        }
      }

      else
      {
        int v9 = (void *)v5[1];
        if (!v9)
        {
          uint64_t result = v5 + 1;
          goto LABEL_12;
        }
      }

      uint64_t v7 = *(void *)(a1 + 48);
      BOOL v5 = v9;
      if (!v7) {
        goto LABEL_9;
      }
    }
  }

  uint64_t result = (void *)(a1 + 8);
LABEL_12:
  *a2 = v5;
  return result;
}

void sub_68168(_DWORD *a1, float *a2, float a3)
{
  if (!a2)
  {
    int v8 = (os_log_t *)sub_138E8(13);
    int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "StandardUtilities.h";
      __int16 v13 = 1024;
      int v14 = 157;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a1 <= 3u)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "StandardUtilities.h";
        __int16 v13 = 1024;
        int v14 = 158;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) <= ioDataSize",  (uint8_t *)&v11,  0x12u);
      }
    }
  }

  *a1 = 4;
  *a2 = a3;
}

void sub_682F8(_Unwind_Exception *exception_object)
{
}

void *sub_68314(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        unsigned int v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

const void *sub_68374(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1936092514)
  {
    BOOL v3 = (v2 - 1935765619) < 2 || v2 == 1685025633;
    int v4 = 1718641517;
LABEL_8:
    if (!v3 && v2 != v4) {
      return sub_68418(a1, a2);
    }
    return &dword_0 + 1;
  }

  if (v2 <= 1936482675)
  {
    BOOL v3 = v2 == 1936092515;
    int v4 = 1936222577;
    goto LABEL_8;
  }

  if (v2 == 1936482676) {
    return &dword_0 + 1;
  }
  if (v2 == 1952542835) {
    return (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16LL))(*(void *)(a1 + 120));
  }
  return sub_68418(a1, a2);
}

const void *sub_68418(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = &dword_0 + 1;
  if (*a2 <= 1819107690)
  {
    if (v3 <= 1818455661)
    {
      if (v3 == 1818452846)
      {
        uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
      }

      else
      {
        if (v3 != 1818454126) {
          return (const void *)(sub_5CC60(a1, a2) != 0);
        }
        uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      }
    }

    else
    {
      if (v3 != 1818455662)
      {
        if (v3 == 1818850145) {
          return result;
        }
        int v5 = 1818850162;
LABEL_10:
        if (v3 == v5) {
          return result;
        }
        return (const void *)(sub_5CC60(a1, a2) != 0);
      }

      uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
    }

    if (!result) {
      return result;
    }
    goto LABEL_30;
  }

  if (v3 > 1935894637)
  {
    if (v3 == 1935894638 || v3 == 1935960434 || v3 == 1952805485) {
      return result;
    }
    return (const void *)(sub_5CC60(a1, a2) != 0);
  }

  if (v3 == 1819107691)
  {
    uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  }

  else
  {
    if (v3 != 1819173229)
    {
      int v5 = 1819569763;
      goto LABEL_10;
    }

    uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  }

  if (result)
  {
LABEL_30:
    CFRelease(result);
    return &dword_0 + 1;
  }

  return result;
}

uint64_t sub_6857C(uint64_t a1)
{
  return a1 + 336;
}

uint64_t sub_68584()
{
  return 1LL;
}

uint64_t sub_6858C(void **a1, int *a2, uint64_t a3, uint64_t a4)
{
  if ((((uint64_t (*)(void **))(*a1)[4])(a1) & 1) == 0)
  {
    int v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      __int16 v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v24 = "VirtualAudio_Stream.cpp";
      __int16 v25 = 1024;
      int v26 = 117;
      __int16 v27 = 2080;
      uint64_t v28 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0))
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        BOOL v17 = __p;
      }
      else {
        BOOL v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      uint64_t v24 = "VirtualAudio_Stream.cpp";
      __int16 v25 = 1024;
      int v26 = 118;
      __int16 v27 = 2080;
      uint64_t v28 = v17;
      __int16 v29 = 1024;
      int v30 = a3;
      __int16 v31 = 2048;
      uint64_t v32 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  int v8 = *a2;
  if (*a2 > 1936092514)
  {
    if (v8 > 1936482675)
    {
      if (v8 == 1952542835) {
        return (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1[15] + 32LL))(a1[15], a2, a3, a4);
      }
      int v9 = 1936482676;
      goto LABEL_12;
    }

    if (v8 != 1936092515)
    {
      int v9 = 1936222577;
      goto LABEL_12;
    }

    return 4LL;
  }

  if (v8 == 1685025633) {
    return 4LL;
  }
  int v9 = 1718641517;
LABEL_12:
  if (v8 == v9) {
    return 4LL;
  }
  return sub_6892C((uint64_t)a1, a2, a3, a4);
}

uint64_t sub_6892C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  uint64_t v5 = 8LL;
  if (*a2 <= 1819173228)
  {
    if (v4 > 1818455661)
    {
      BOOL v7 = v4 == 1818455662;
      int v8 = 1819107691;
    }

    else
    {
      BOOL v7 = v4 == 1818452846;
      int v8 = 1818454126;
    }

    if (v7 || v4 == v8) {
      return v5;
    }
  }

  else
  {
    if (v4 <= 1935894637)
    {
      if (v4 == 1819173229) {
        return v5;
      }
      int v6 = 1819569763;
    }

    else
    {
      if (v4 == 1935894638 || v4 == 1952805485) {
        return 4LL;
      }
      int v6 = 1935960434;
    }

    if (v4 == v6) {
      return 4LL;
    }
  }

  return sub_689F8(a1, a2, a3, a4);
}

uint64_t sub_689F8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 1818850145 || *a2 == 1818850162) {
    return 12LL;
  }
  uint64_t v9 = sub_5CC60(a1, a2);
  if (!v9)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)a2;
      int v15 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v14);
      if (v17 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v19 = "HP_Object.cpp";
      __int16 v20 = 1024;
      int v21 = 208;
      __int16 v22 = 2080;
      int v23 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property %s.",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v9 + 32LL))(v9, a2, a3, a4);
}

uint64_t sub_68BB8(void *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1885762656)
  {
    switch(v2)
    {
      case 1885762657:
        uint64_t v5 = a1[7];
        uint64_t v6 = a1[8];
        if (v5 != v6)
        {
          int v7 = 0;
          do
          {
            v7 += (*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 4;
            v5 += 64LL;
          }

          while (v5 != v6);
          return (56 * v7);
        }

        break;
      case 1936092513:
        uint64_t v8 = a1[10];
        uint64_t v9 = a1[11];
        if (v8 != v9)
        {
          int v7 = 0;
          do
          {
            v7 += (*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 4;
            v8 += 64LL;
          }

          while (v8 != v9);
          return (56 * v7);
        }

        break;
      case 1936092532:
        return 40LL;
      default:
        return 0LL;
    }

    return 0LL;
  }

  if (v2 == 1853059619) {
    return 16 * sub_765E4((uint64_t)a1);
  }
  if (v2 == 1885762592) {
    unsigned int v3 = 40;
  }
  else {
    unsigned int v3 = 0;
  }
  if (v2 == 1853059700) {
    return 8LL;
  }
  else {
    return v3;
  }
}

void sub_68CC8(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, int *a5, uint64_t *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0)
  {
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    int v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      double v81 = *(void **)a2;
      LODWORD(v82) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
      uint64_t v38 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 149;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v38;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      double v81 = *(void **)a2;
      LODWORD(v82) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
      uint64_t v42 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 150;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v42;
      *(_WORD *)&_BYTE buf[28] = 1024;
      *(_DWORD *)uint64_t v85 = a3;
      *(_WORD *)&v85[4] = 2048;
      *(void *)&v85[6] = a4;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
    }

    uint64_t v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v43 = &off_4865A0;
    v43[2] = 561211770;
  }

  if (!a6)
  {
    uint64_t v44 = (os_log_t *)sub_138E8(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      double v81 = *(void **)a2;
      LODWORD(v82) = a2[2];
      sub_613AC((uint64_t)&__p, (unsigned int *)&v81);
      uint64_t v46 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 151;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = "outData";
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)uint64_t v85 = v46;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
    }

    char v47 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v47 = &off_4865A0;
    v47[2] = 561211770;
  }

  int v12 = *a2;
  if (*a2 > 1936092514)
  {
    if (v12 > 1936482675)
    {
      if (v12 != 1936482676)
      {
        int v13 = 1952542835;
LABEL_21:
        if (v12 == v13) {
          goto LABEL_22;
        }
LABEL_49:
        sub_69AB8(a1, a2, a3, (uint64_t)a4, a5, a6);
        goto LABEL_24;
      }

LABEL_24:
  if (*a2 == 1936092532 || *a2 == 1885762592)
  {
    uint64_t v18 = sub_138E8(4);
    uint64_t v19 = sub_138E8(35);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_32;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_32:
    __int16 v25 = *(os_log_s **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if (*a2 == 1885762592) {
        int v26 = "physical";
      }
      else {
        int v26 = "virtual";
      }
      sub_2CC00(&__p, (uint64_t)a6);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v27 = &__p;
      }
      else {
        __int16 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v28 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 216;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v26;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)uint64_t v85 = v27;
      *(_WORD *)&v85[8] = 1024;
      *(_DWORD *)&v85[10] = v28;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "%25s:%-5d Client request to get %s format (%s) on virtual audio stream %u.",  buf,  0x2Cu);
    }
  }

  uint64_t v22 = sub_138E8(1);
  uint64_t v23 = sub_138E8(4);
  char v24 = 0;
  __int16 v25 = 0LL;
  *(void *)buf = 0x100000002LL;
  int v26 = *(void *)(v22 + 8);
  while (1)
  {
    __int16 v27 = *(int *)&buf[4 * v25];
    int v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    char v24 = 1;
    __int16 v25 = 1LL;
    if ((v28 & 1) != 0)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
  }

  if ((v26 & v27) == 0) {
    uint64_t v22 = v23;
  }
  if ((*(void *)(v22 + 8) & 1) != 0)
  {
LABEL_32:
    int v29 = *(os_log_s **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      CFTypeRef v30 = (*(uint64_t (**)(uint64_t, void))(*(void *)v144 + 88LL))(v144, 0LL);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      v147 = 1024;
      std::string::size_type v148 = 4362;
      os_log_t v149 = 1024;
      LODWORD(v150) = v30;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d New core device input stream count: %u", buf, 0x18u);
    }
  }

  std::mutex::unlock(v8);
  return v17;
}

          BOOL v16 = (void *)v6[1];
          if (v16)
          {
            do
            {
              int v17 = v16;
              BOOL v16 = (void *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              int v17 = (void *)v6[2];
              int v4 = *v17 == (void)v6;
              uint64_t v6 = v17;
            }

            while (!v4);
          }

          uint64_t v6 = v17;
        }

        while (v17 != v5 + 1);
      }
    }

    uint64_t v18 = sub_138E8(2);
    uint64_t v19 = sub_138E8(34);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_36;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_36:
    __int16 v25 = *(id *)v18;
    int v26 = v25;
    if (v25)
    {
      __int16 v27 = (os_log_s *)v25;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        sub_2DA7F4(&value, v5);
        int v28 = "deaggregation";
        if (a2) {
          int v28 = "aggregation";
        }
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)buf = 136315906;
        *(_WORD *)&_BYTE buf[12] = 1024;
        if ((value.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_value = &value;
        }
        else {
          p_value = (std::string *)value.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)&buf[14] = 4681;
        int v58 = 2080;
        std::string::size_type v59 = v28;
        int v60 = 2080;
        int v61 = p_value;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting %s for ports: %s.", buf, 0x26u);
      }
    }

    CFTypeRef v30 = (void *)*v5;
    if ((void *)*v5 != v5 + 1)
    {
      if (a2) {
        __int16 v31 = "Aggregation";
      }
      else {
        __int16 v31 = "Deaggregation";
      }
      do
      {
        sub_92EF8();
        uint64_t v32 = sub_28AFEC(*((_DWORD *)v30 + 7));
        if (theArray)
        {
          CFRetain(theArray);
          double v33 = theArray;
        }

        else
        {
          double v33 = 0LL;
        }

        *(void *)buf = &off_47D068;
        *(void *)&buf[8] = v33;
        value.__r_.__value_.__r.__words[0] = 0x676C6F6277736167LL;
        LODWORD(value.__r_.__value_.__r.__words[1]) = 0;
        unsigned int v56 = v33;
        unint64_t v34 = sub_2F4F68(v32, (uint64_t)&value, 0LL, 0LL, 8LL, (uint64_t)&v56);
        sub_39FD8(buf);
        if (v34)
        {
          std::string::size_type v35 = sub_138E8(2);
          uint64_t v36 = sub_138E8(34);
          int v37 = 0;
          uint64_t v38 = 0LL;
          *(void *)buf = 0x100000002LL;
          uint64_t v39 = *(void *)(v35 + 8);
          while (1)
          {
            uint64_t v40 = *(int *)&buf[4 * v38];
            uint64_t v41 = v37;
            if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
              break;
            }
            int v37 = 1;
            uint64_t v38 = 1LL;
            if ((v41 & 1) != 0) {
              goto LABEL_60;
            }
          }

          if ((v39 & v40) == 0) {
            std::string::size_type v35 = v36;
          }
LABEL_60:
          uint64_t v42 = *(id *)v35;
          uint64_t v43 = v42;
          if (v42)
          {
            uint64_t v44 = (os_log_s *)v42;
            if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            {
              sub_2DA7F4(&value, v5);
              uint64_t v45 = &value;
              if ((value.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v45 = (std::string *)value.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4688;
              int v58 = 2080;
              std::string::size_type v59 = v31;
              int v60 = 2080;
              int v61 = v45;
              _os_log_impl(&dword_0, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed for ports: %s.", buf, 0x26u);
            }
          }
        }

        uint64_t v46 = (void *)v30[1];
        if (v46)
        {
          do
          {
            char v47 = v46;
            uint64_t v46 = (void *)*v46;
          }

          while (v46);
        }

        else
        {
          do
          {
            char v47 = (void *)v30[2];
            int v4 = *v47 == (void)v30;
            CFTypeRef v30 = v47;
          }

          while (!v4);
        }

        CFTypeRef v30 = v47;
      }

      while (v47 != v5 + 1);
    }

    return sub_13818((uint64_t)&theArray);
  }

  return result;
}

  *(void *)buf = 0LL;
  *(_DWORD *)&buf[8] = 0;
LABEL_25:
  sub_2DB30(a1 + 896, (unsigned int **)buf);
LABEL_26:
  sub_2DBF4((unsigned int **)buf);
  int v14 = *(void *)(a1 + 856);
  if (v14 != a1 + 848)
  {
    int v68 = a1 + 144;
    while (1)
    {
      double v81 = 0LL;
      int v79 = 0u;
      char v80 = 0u;
      int v15 = sub_28BEC(*(void *)(v14 + 16), (uint64_t)&v79);
      if (v15)
      {
        int v62 = (os_log_t *)sub_138E8(13);
        char v63 = *v62;
        if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 430;
          _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: VirtualStream::GetCurrentHALIOProcFormat() returned an error.",  buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v15;
      }

      if (!DWORD2(v80))
      {
        int v65 = (os_log_t *)sub_138E8(13);
        int v66 = *v65;
        if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 431;
          _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.",  buf,  0x12u);
        }

        std::string::size_type v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v67,  "VirtualStream::GetCurrentHALIOProcFormat() returned mBytesPerFrame of 0.");
      }

      BOOL v16 = *(void *)(*(void *)(v14 + 16) + 136LL);
      if (DWORD2(v82) != 1819304813 || DWORD2(v79) != 1819304813) {
        goto LABEL_34;
      }
      uint64_t v19 = sub_28E6C(a1, 1, *(void *)(*(void *)(v14 + 16) + 136LL), (uint64_t)&v79, (uint64_t)&v82);
      if (v19)
      {
        char v20 = (os_log_t *)sub_138E8(16);
        uint64_t v21 = *v20;
        if (*v20)
        {
          if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 444;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = v19;
            _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d setting the DSP chain format",  buf,  0x18u);
          }
        }
      }

      if (!*(_BYTE *)(v16 + 448) && !*(void *)(v16 + 584) && !*(void *)(v16 + 672)) {
        break;
      }
      uint64_t v18 = 1;
LABEL_43:
      uint64_t v22 = (os_log_t *)sub_138E8(16);
      uint64_t v23 = *v22;
      if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_48;
      }
      sub_2BE2C(__p, v16);
      char v24 = __p;
      if (__p[23] < 0) {
        char v24 = *(_BYTE **)__p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 449;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v24;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Chain Description: %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v18)
        {
LABEL_61:
          int v77 = 0LL;
          uint64_t v78 = 0;
          std::string::size_type v75 = 0LL;
          int v76 = 0;
          goto LABEL_62;
        }
      }

      else
      {
LABEL_48:
        if (!v18) {
          goto LABEL_61;
        }
      }

      if (*(void *)(v16 + 984) == *(void *)(v16 + 976)) {
        __int16 v25 = (_DWORD **)(v16 + 944);
      }
      else {
        __int16 v25 = *(_DWORD ***)(v16 + 976);
      }
      sub_2D9D4((uint64_t)&v77, *v25, 0);
      int v26 = *(void *)(v16 + 984);
      if (v26 == *(void *)(v16 + 976)) {
        __int16 v27 = (_DWORD **)(v16 + 944);
      }
      else {
        __int16 v27 = (_DWORD **)(v26 - 16);
      }
      sub_2D9D4((uint64_t)&v75, *v27, 0);
      if (!v77 || !*v77 || !v75 || !*v75)
      {
        std::string::size_type v59 = (os_log_t *)sub_138E8(13);
        int v60 = *v59;
        if (*v59)
        {
          if (os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 455;
            _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): DSP chain ABL should not be invalid if DSP processing is enabled",  buf,  0x12u);
          }
        }

        int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, "DSP chain ABL should not be invalid if DSP processing is enabled");
      }

void sub_69A0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_69AB8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  int v9 = *a2;
  if (*a2 <= 1819173228)
  {
    if (v9 > 1818455661)
    {
      if (v9 == 1818455662)
      {
        int v19 = *a5;
        if (v19 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          CFTypeRef v30 = (os_log_t *)sub_138E8(13);
          uint64_t v22 = *v30;
          if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
          {
            int v33 = 136315394;
            unint64_t v34 = "HP_Stream.cpp";
            __int16 v35 = 1024;
            int v36 = 330;
            uint64_t v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyEl"
                  "ementNumberName";
            goto LABEL_64;
          }

          goto LABEL_65;
        }

        uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 136LL))(a1, a2);
        goto LABEL_31;
      }

      if (v9 == 1819107691)
      {
        int v14 = *a5;
        if (v14 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v26 = (os_log_t *)sub_138E8(13);
          uint64_t v22 = *v26;
          if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
          {
            int v33 = 136315394;
            unint64_t v34 = "HP_Stream.cpp";
            __int16 v35 = 1024;
            int v36 = 315;
            uint64_t v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyName";
            goto LABEL_64;
          }

          goto LABEL_65;
        }

        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
        goto LABEL_31;
      }
    }

    else
    {
      if (v9 == 1818452846)
      {
        int v17 = *a5;
        if (v17 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          int v28 = (os_log_t *)sub_138E8(13);
          uint64_t v22 = *v28;
          if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
          {
            int v33 = 136315394;
            unint64_t v34 = "HP_Stream.cpp";
            __int16 v35 = 1024;
            int v36 = 325;
            uint64_t v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyEl"
                  "ementCategoryName";
            goto LABEL_64;
          }

          goto LABEL_65;
        }

        uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 128LL))(a1, a2);
        goto LABEL_31;
      }

      if (v9 == 1818454126)
      {
        int v12 = *a5;
        if (v12 != (*(unsigned int (**)(uint64_t, int *))(*(void *)a1 + 48LL))(a1, a2))
        {
          char v24 = (os_log_t *)sub_138E8(13);
          uint64_t v22 = *v24;
          if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
          {
            int v33 = 136315394;
            unint64_t v34 = "HP_Stream.cpp";
            __int16 v35 = 1024;
            int v36 = 320;
            uint64_t v23 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyElementName";
            goto LABEL_64;
          }

uint64_t sub_6A140(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  if (*a2 == 1818850162 || *a2 == 1818850145)
  {
    if (*a5 != 12)
    {
      int v13 = (os_log_t *)sub_138E8(13);
      int v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v25 = "HP_Object.cpp";
        __int16 v26 = 1024;
        int v27 = 223;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyListenerAd ded/kAudioObjectPropertyListenerRemoved",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    *(_DWORD *)(a6 + 8) = 0;
    *(void *)a6 = 0LL;
  }

  else
  {
    uint64_t v12 = sub_5CC60(result, a2);
    if (!v12)
    {
      int v16 = (os_log_t *)sub_138E8(13);
      int v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)a2;
        int v21 = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)&v20);
        if (v23 >= 0) {
          int v18 = __p;
        }
        else {
          int v18 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        __int16 v25 = "HP_Object.cpp";
        __int16 v26 = 1024;
        int v27 = 236;
        __int16 v28 = 2080;
        int v29 = v18;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): unknown property %s.",  buf,  0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }

      int v19 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v19 = &off_4865A0;
      v19[2] = 2003332927;
    }

    return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)v12 + 40LL))( v12,  a2,  a3,  a4,  a5,  a6);
  }

  return result;
}

void sub_6A3D0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  int v9 = *a2;
  if (*a2 <= 1885762656)
  {
    if (v9 != 1853059619)
    {
      if (v9 == 1853059700)
      {
        if (*a5 != 8)
        {
          uint64_t v39 = (os_log_t *)sub_138E8(13);
          int v11 = *v39;
          if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
          {
            int v41 = 136315394;
            uint64_t v42 = "HP_FormatList.cpp";
            __int16 v43 = 1024;
            int v44 = 684;
            uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyNo"
                  "minalSampleRate";
            goto LABEL_60;
          }

          goto LABEL_61;
        }

        *(void *)a6 = *(void *)(a1 + 16);
      }

      else if (v9 == 1885762592)
      {
        if (*a5 != 40)
        {
          int v10 = (os_log_t *)sub_138E8(13);
          int v11 = *v10;
          if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            int v41 = 136315394;
            uint64_t v42 = "HP_FormatList.cpp";
            __int16 v43 = 1024;
            int v44 = 715;
            uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyPhysicalFormat";
LABEL_60:
            _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v41, 0x12u);
            goto LABEL_61;
          }

          goto LABEL_61;
        }

LABEL_51:
      unsigned int v34 = 56 * v35;
      goto LABEL_52;
    case 1936092532:
      if (*a5 != 40)
      {
        uint64_t v38 = (os_log_t *)sub_138E8(13);
        int v11 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          uint64_t v42 = "HP_FormatList.cpp";
          __int16 v43 = 1024;
          int v44 = 701;
          uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyVirtualFormat";
          goto LABEL_60;
        }

    __n128 v18 = 0LL;
    unint64_t v19 = 0LL;
    goto LABEL_52;
  }

  LODWORD(__p[0]) = *(_DWORD *)(a1 + 8);
  strcpy(buf, "lvdabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  __int128 v13 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
  unsigned int v15 = v13;
  if (!(_DWORD)v13)
  {
    unint64_t v19 = 0LL;
    if (v14) {
      uint64_t v25 = HIDWORD(v13) == 0;
    }
    else {
      uint64_t v25 = 1;
    }
    __n128 v18 = !v25;
    if (v25 || v4 == 0x7261772000000000LL) {
      goto LABEL_52;
    }
    if (!sub_C4704(*(void *)(a1 + 1008), 2)
      || !_os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl"))
    {
      goto LABEL_39;
    }

    unsigned int v26 = atomic_load((unsigned __int8 *)&qword_48FE68);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_48FE68))
    {
      byte_48FE60 = sub_753A8() != 125;
      __cxa_guard_release(&qword_48FE68);
    }

    if (!byte_48FE60) {
      goto LABEL_39;
    }
    unsigned int v27 = atomic_load((unsigned __int8 *)&qword_48E9A0);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_48E9A0))
    {
      buf[0] = 0;
      AppBooleanValue = CFPreferencesGetAppBooleanValue( @"BypassAutoDRC",  @"com.apple.audio.virtualaudio",  buf);
      char v80 = AppBooleanValue != 0;
      if (buf[0])
      {
        double v81 = (os_log_t *)sub_138E8(13);
        char v82 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2147;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&_BYTE buf[20] = "BypassAutoDRC";
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&_BYTE buf[30] = AppBooleanValue != 0;
          _os_log_impl(&dword_0, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", buf, 0x22u);
        }
      }

      else
      {
        char v80 = 0;
      }

      byte_48E998 = v80;
      __cxa_guard_release(&qword_48E9A0);
    }

    if (byte_48E998) {
      goto LABEL_39;
    }
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 8);
    strcpy(buf, "rdvpbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v60 = sub_36EF4((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
    int v62 = v60;
    if ((_DWORD)v60 == 2003332927)
    {
      char v64 = (os_log_t *)sub_138E8(41);
      unint64_t v19 = *v64;
      if (!*v64) {
        goto LABEL_40;
      }
      if (!os_log_type_enabled(*v64, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_39;
      }
      sub_2CA1C(__p, 1886807154LL);
      int v65 = v88;
      int v66 = (void **)__p[0];
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 1008) + 128LL))(v85);
      std::string::size_type v67 = __p;
      if (v65 < 0) {
        std::string::size_type v67 = v66;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1281;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v67;
      *(_WORD *)&_BYTE buf[28] = 2112;
      *(void **)&_BYTE buf[30] = v85[0];
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VirtualAudio_Device::IsAutoDRCEnabled() - property %s not supported on device %@.",  buf,  0x26u);
      sub_19DFC((uint64_t)v85);
    }

    else
    {
      if (!(_DWORD)v60)
      {
        if (v61) {
          char v63 = HIDWORD(v60) == 0;
        }
        else {
          char v63 = 1;
        }
        unint64_t v19 = (os_log_s *)!v63;
        goto LABEL_40;
      }

      int v68 = (os_log_t *)sub_138E8(41);
      unint64_t v19 = *v68;
      if (!*v68)
      {
LABEL_40:
        __n128 v18 = 1LL;
        goto LABEL_52;
      }

      if (!os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
LABEL_39:
        unint64_t v19 = 0LL;
        goto LABEL_40;
      }

      int v69 = __p;
      sub_2CA1C(__p, v62);
      if (v88 < 0) {
        int v69 = (void **)__p[0];
      }
      sub_2CA1C(v85, 1886807154LL);
      char v70 = v86;
      int v71 = (void **)v85[0];
      (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1008) + 128LL))(cf);
      __int16 v72 = v85;
      if (v70 < 0) {
        __int16 v72 = v71;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1287;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v69;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v72;
      *(_WORD *)&_BYTE buf[38] = 2112;
      uint64_t v93 = (void **)cf[0];
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VirtualAudio_Device::IsAutoDRCEnabled() - error %s retrieving property %s on device %@.",  buf,  0x30u);
      sub_19DFC((uint64_t)cf);
      if (v86 < 0) {
        operator delete(v85[0]);
      }
    }

    if (v88 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_39;
  }

  if ((_DWORD)v13 != 2003332927)
  {
    uint64_t v28 = (os_log_t *)sub_138E8(41);
    unint64_t v19 = *v28;
    if (!*v28)
    {
      __n128 v18 = 0LL;
      goto LABEL_52;
    }

    if (!os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    uint64_t v29 = __p;
    sub_2CA1C(__p, v15);
    if (v88 < 0) {
      uint64_t v29 = (void **)__p[0];
    }
    sub_2CA1C(v85, 1633973868LL);
    unsigned int v30 = v86;
    __int16 v31 = (void **)v85[0];
    (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1008) + 128LL))(cf);
    unint64_t v32 = v85;
    if (v30 < 0) {
      unint64_t v32 = v31;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1252;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v29;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&_BYTE buf[30] = v32;
    *(_WORD *)&_BYTE buf[38] = 2112;
    uint64_t v93 = (void **)cf[0];
    _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - error %s retrieving property %s on device %@.",  buf,  0x30u);
    sub_19DFC((uint64_t)cf);
    if (v86 < 0) {
      operator delete(v85[0]);
    }
    goto LABEL_49;
  }

  unsigned int v16 = (os_log_t *)sub_138E8(41);
  unsigned int v17 = *v16;
  if (!*v16) {
    goto LABEL_51;
  }
  __n128 v18 = 0LL;
  unint64_t v19 = 0LL;
  if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, 1633973868LL);
    uint64_t v20 = v88;
    int v21 = (void **)__p[0];
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 1008) + 128LL))(v85);
    unint64_t v22 = __p;
    if (v20 < 0) {
      unint64_t v22 = v21;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1245;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v22;
    *(_WORD *)&_BYTE buf[28] = 2112;
    *(void **)&_BYTE buf[30] = v85[0];
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - property %s not supported on device %@.",  buf,  0x26u);
    sub_19DFC((uint64_t)v85);
LABEL_49:
    if (v88 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_51;
  }

  if (!(*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  0LL)) {
    return 1LL;
  }
  unsigned int v27 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 440LL))( a1,  0LL);
  uint64_t v28 = sub_374D30(a1, v27);
  if (!v28)
  {
    uint64_t v29 = (os_log_t *)sub_138E8(17);
    unsigned int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v65,  a1);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Thunderbolt_Aspen.cpp";
      int v69 = 1024;
      *(_DWORD *)char v70 = 171;
      *(_WORD *)&v70[4] = 2112;
      *(void *)&v70[6] = *(void *)v65;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating a NULL input volume control for %@",  buf,  0x1Cu);
      sub_19DFC((uint64_t)v65);
    }

    uint64_t v28 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v28, 0);
    sub_1D5AE0(a1, (uint64_t)v28);
  }

  sub_1D580C((uint64_t)a1, 0, 1886675561LL, (uint64_t)v28);
  sub_F9584((uint64_t)buf, qword_48D1C8, a1[67]._os_unfair_lock_opaque);
  __int16 v31 = (os_log_t *)sub_138E8(17);
  unint64_t v32 = *v31;
  if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_INFO))
  {
    uint64_t v33 = v71[0];
    unsigned int v34 = *(void *)&v70[2];
    uint64_t v35 = *(void *)buf;
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &inAddress,  a1);
    if (v34) {
      int v36 = v34;
    }
    else {
      int v36 = v35;
    }
    if (v33) {
      int v36 = v33;
    }
    *(_DWORD *)int v65 = 136315906;
    *(void *)&v65[4] = "Device_Thunderbolt_Aspen.cpp";
    *(_WORD *)&v65[12] = 1024;
    *(_DWORD *)&v65[14] = 181;
    *(_WORD *)&v65[18] = 2112;
    *(void *)&v65[20] = v36;
    int v66 = 2112;
    std::string::size_type v67 = inAddress;
    _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating a thunderbolt input port with name %@ and UID %@",  v65,  0x26u);
    sub_19DFC((uint64_t)&inAddress);
  }

  int v37 = (char *)operator new(0xCuLL);
  inAddress_8 = (uint64_t)(v37 + 12);
  char v63 = v37 + 12;
  qmemcpy(v37, "gcrvmorvtshv", 12);
  inAddress = (uint64_t)v37;
  if (sub_14BFC8())
  {
    int v54 = 0LL;
    unsigned int v55 = 0LL;
    unsigned int v56 = 0LL;
    (*(void (**)(void *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v53,  a1);
    sub_373464((char **)&v51, (std::mutex *)a1, 1768845428LL);
    uint64_t v38 = (std::__shared_weak_count *)operator new(0x228uLL);
    v38->__shared_owners_ = 0LL;
    v38->__shared_weak_owners_ = 0LL;
    v38->__vftable = (std::__shared_weak_count_vtbl *)off_485B80;
    sub_7D084(v65, "");
    sub_F9638( (uint64_t)&v38[1],  &qword_48D1C8,  (uint64_t)a1,  (uint64_t)&v54,  (uint64_t)buf,  (uint64_t)v53,  (char **)&v51,  (__int128 *)v65);
    v38[1].__vftable = (std::__shared_weak_count_vtbl *)&off_46FD40;
    LOWORD(v38[22].__shared_weak_owners_) = 0;
    if ((v65[23] & 0x80000000) != 0) {
      operator delete(*(void **)v65);
    }
    uint64_t v57 = (void **)&v38[1].__vftable;
    int v58 = v38;
    sub_AFDAC((uint64_t)&v57, &v38[4].__shared_owners_, (uint64_t)&v38[1]);
    *(void *)int v65 = &v51;
    sub_7A668((void ***)v65);
    sub_19DFC((uint64_t)v53);
    int v54 = (void **)&v38[1].__vftable;
    unsigned int v55 = v38;
  }

  else
  {
    (*(void (**)(void ***__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v54,  a1);
    sub_373464((char **)v65, (std::mutex *)a1, 1768845428LL);
    sub_CE368(&v57, &qword_48D1C8, (uint64_t)a1, (uint64_t)&inAddress, (uint64_t)buf, (uint64_t)&v54, (char **)v65);
    std::string::size_type v51 = (uint64_t)v65;
    sub_7A668((void ***)&v51);
    sub_19DFC((uint64_t)&v54);
    uint64_t v38 = v58;
    int v54 = v57;
    unsigned int v55 = v58;
    if (!v58) {
      goto LABEL_72;
    }
  }

  uint64_t v39 = (unint64_t *)&v38->__shared_owners_;
  do
    uint64_t v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
LABEL_72:
  sub_3711D4((uint64_t)a1, &v54);
  int v41 = v55;
  if (v55)
  {
    uint64_t v42 = (unint64_t *)&v55->__shared_owners_;
    do
      __int16 v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  strcpy(v65, "#csstpni");
  v65[9] = 0;
  *(_WORD *)&v65[10] = 0;
  sub_1BB60((std::mutex *)a1);
  if (AudioObjectHasProperty(a1[67]._os_unfair_lock_opaque, (const AudioObjectPropertyAddress *)v65))
  {
    std::string::size_type v51 = 0x696E707473737263LL;
    LODWORD(v52) = 0;
    LODWORD(v53[0]) = 4;
    char v64 = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, void *, __int32 *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                               + 40LL))( a1,  &v51,  0LL,  0LL,  v53,  &v64);
    uint64_t v50 = v64;
    sub_852D0(v65, &v50, 1LL);
    int v44 = v58;
    std::string::size_type v51 = (uint64_t)v57;
    int v52 = v58;
    if (v58)
    {
      uint64_t v45 = (unint64_t *)&v58->__shared_weak_owners_;
      do
        uint64_t v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }

    sub_1BB524((unsigned int **)v65, &v51, a1);
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
    if (*(void *)v65)
    {
      *(void *)&v65[8] = *(void *)v65;
      operator delete(*(void **)v65);
    }

    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }

  int v44 = v58;
  if (v58)
  {
LABEL_88:
    char v47 = (unint64_t *)&v44->__shared_owners_;
    do
      uint64_t v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

            unsigned int v27 = 1;
            if (!v26) {
              goto LABEL_63;
            }
LABEL_62:
            operator delete(v26);
            goto LABEL_63;
          }

          v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          unsigned int v34 = sub_138E8(13);
          if ((*(_BYTE *)(v34 + 8) & 1) != 0)
          {
            uint64_t v35 = *(os_log_s **)v34;
            if (*(void *)v34)
            {
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                buf.mSelector = 136315906;
                *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                v102 = 1024;
                int v103 = 257;
                std::string::size_type v104 = 2080;
                *(void *)int v105 = "with timeout";
                *(_WORD *)&v105[8] = 1024;
                *(_DWORD *)&v105[10] = a1;
                _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
              }
            }
          }

          sub_6DD4();
          *(void *)&buf.mSelector = &qword_48F828;
          LOBYTE(buf.mElement) = 0;
          LOBYTE(buf.mElement) = sub_1A30E4();
          __lk.__m_ = &v112;
          __lk.__owns_ = 1;
          std::mutex::lock(&v112);
          v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v80)
          {
LABEL_71:
            if (__lk.__owns_) {
              std::mutex::unlock(__lk.__m_);
            }
            sub_7D790((uint64_t)&buf);
            unsigned int v27 = 0;
            v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
            if (!v26) {
              goto LABEL_63;
            }
            goto LABEL_62;
          }

          __int16 v43 = v36.__d_.__rep_ + 1000000 * v25;
          while (2)
          {
            if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_71;
            }
            v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v44.__d_.__rep_ >= 1)
            {
              std::chrono::steady_clock::now();
              v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!v45.__d_.__rep_)
              {
                uint64_t v46 = 0LL;
                goto LABEL_93;
              }

              if (v45.__d_.__rep_ < 1)
              {
                uint64_t v46 = 0x8000000000000000LL;
              }

              else
              {
                if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7LL)
                {
                  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_93;
                }

        ++v16;
      }

      while (v16 != Count);
    }

    if (v51) {
      operator delete(v51);
    }
  }

  else
  {
    uint64_t v12 = (os_log_t *)sub_138E8(22);
    int v7 = 2003329396LL;
    __int128 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v56 = "Stream_USB_iAP_Aspen.cpp";
      uint64_t v57 = 1024;
      int v58 = 124;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d IAPDigitalAudioCopySupportSampleRates() returned a NULL CFArrayRef",  buf,  0x12u);
    }
  }

  sub_13818((uint64_t)theArray);
  return v7;
}

    if (v40 > (v38.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v41.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_54:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 576), &__lk, v41);
      std::chrono::steady_clock::now();
      goto LABEL_55;
    }

  uint64_t v57 = v72;
  if (v72)
  {
    int v58 = (unint64_t *)&v72->__shared_owners_;
    do
      std::string::size_type v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

          uint64_t v35 = 1000 * v34.__d_.__rep_;
LABEL_52:
          if (v35 > (v33.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v36.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_55:
            std::condition_variable::__do_timed_wait(&v78, &__lk, v36);
            std::chrono::steady_clock::now();
            goto LABEL_56;
          }
        }

        v36.__d_.__rep_ = v35 + v33.__d_.__rep_;
        goto LABEL_55;
      }

  sub_1BB88(&v39);
  return v5 & v7;
}

    return 0LL;
  }

  if ((v14 & 1) != 0)
  {
    unsigned int v17 = *(id *)v13;
    if (v17)
    {
      __n128 v18 = (os_log_s *)v17;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v76, (unsigned int *)&__p);
        unint64_t v19 = v76.__m_.__opaque[15] >= 0 ? &v76 : (std::mutex *)v76.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        int v66 = 1024;
        std::string::size_type v67 = 199;
        int v68 = 2080;
        *(void *)int v69 = v19;
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = a1;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v76.__m_.__opaque[15] < 0) {
          operator delete((void *)v76.__m_.__sig);
        }
      }
    }
  }

  buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v20 = AudioObjectSetPropertyData(a1, &buf, 0, 0LL, 4u, a3);
  if (!(_DWORD)v20)
  {
    uint64_t v28 = sub_36BCB4((uint64_t)&v60);
    if (!HIDWORD(v28) && *a3 == (_DWORD)v28)
    {
      uint64_t v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) == 0) {
        return 0LL;
      }
      unsigned int v30 = (os_log_s *)*(id *)v29;
      if (!v30) {
        return 0LL;
      }
      unsigned int v16 = v30;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        buf.mSelector = 136315650;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        int v66 = 1024;
        std::string::size_type v67 = 219;
        int v68 = 1024;
        *(_DWORD *)int v69 = a1;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      }

      goto LABEL_51;
    }

    memset(v76.__m_.__opaque, 0, sizeof(v76.__m_.__opaque));
    v76.__m_.__sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__sig = 1018212795LL;
    std::string::size_type v59 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v76, (uint64_t)&v59);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v35.__d_.__rep_) / -1000)
    {
      uint64_t v33 = sub_36BCB4((uint64_t)&v60);
      unsigned int v34 = v33;
      uint64_t v20 = HIDWORD(v33);
      if (HIDWORD(v33)) {
        goto LABEL_104;
      }
      if (*a3 == (_DWORD)v33) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v20 = 2003329396LL;
        uint64_t v50 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v49 = v50;
        if (v50)
        {
          char v47 = v50;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            int v53 = *(void *)a2;
            int v54 = *(_DWORD *)(a2 + 8);
            sub_613AC((uint64_t)&__lk, (unsigned int *)&v53);
            std::string::size_type v51 = v56 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            int v52 = *a3 == v34;
            buf.mSelector = 136316930;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            int v66 = 1024;
            std::string::size_type v67 = 248;
            int v68 = 2080;
            *(void *)int v69 = "set";
            *(_WORD *)&v69[8] = 2080;
            *(void *)&v69[10] = v51;
            *(_WORD *)&v69[18] = 2080;
            *(void *)&v69[20] = "set";
            *(_WORD *)&v69[28] = 1024;
            char v70 = v52;
            int v71 = 1024;
            __int16 v72 = 0;
            unsigned int v73 = 1024;
            int v74 = a1;
            _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
            if (v56 < 0) {
              operator delete(__lk.__m_);
            }
          }

          goto LABEL_101;
        }

        goto LABEL_102;
      }

      v35.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      int v36 = sub_138E8(13);
      if ((*(_BYTE *)(v36 + 8) & 1) != 0)
      {
        int v37 = (os_log_s *)*(id *)v36;
        if (v37)
        {
          uint64_t v38 = v37;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            int v66 = 1024;
            std::string::size_type v67 = 257;
            int v68 = 2080;
            *(void *)int v69 = "with timeout";
            *(_WORD *)&v69[8] = 1024;
            *(_DWORD *)&v69[10] = a1;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v76;
      __lk.__owns_ = 1;
      std::mutex::lock(&v76);
      v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v59)
      {
        uint64_t v40 = v39.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v40 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_64;
          }
          v41.__d_.__rep_ = v40 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v41.__d_.__rep_ >= 1) {
            break;
          }
LABEL_82:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v40 || v59) {
            goto LABEL_64;
          }
        }

        std::chrono::steady_clock::now();
        v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v42.__d_.__rep_)
        {
          __int16 v43 = 0LL;
          goto LABEL_78;
        }

        if (v42.__d_.__rep_ < 1)
        {
          __int16 v43 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            __int16 v43 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_78;
          }

LABEL_61:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 561211770;
      }

      goto LABEL_13;
  }

    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        int v2 = v10 % v11;
      }
      else {
        int v2 = v10;
      }
    }

    else
    {
      int v2 = (v11 - 1) & v10;
    }
  }

  unsigned int v34 = *v5;
  uint64_t v35 = (void *)*((void *)*v5 + v2);
  if (v35)
  {
    *unsigned int v16 = *v35;
LABEL_74:
    uint64_t *v35 = v16;
    goto LABEL_75;
  }

  *unsigned int v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v16;
  v34[v2] = a1 + 40;
  if (*v16)
  {
    int v36 = *(void *)(*v16 + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11) {
        v36 %= v11;
      }
    }

    else
    {
      v36 &= v11 - 1;
    }

    uint64_t v35 = (char *)*v5 + 8 * v36;
    goto LABEL_74;
  }

    int v36 = *v22;
    if (*v22)
    {
      int v37 = HIDWORD(v36);
      uint64_t v38 = *((float *)&v36 + 1);
      uint64_t v39 = sub_138E8(20);
      uint64_t v40 = sub_138E8(38);
      int v41 = 0;
      uint64_t v42 = 0LL;
      *(void *)buf = 0x100000002LL;
      __int16 v43 = *(void *)(v39 + 8);
      while (1)
      {
        int v44 = *(int *)&buf[4 * v42];
        uint64_t v45 = v41;
        if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
          break;
        }
        int v41 = 1;
        uint64_t v42 = 1LL;
        if ((v45 & 1) != 0)
        {
          if ((v43 & 1) == 0) {
            goto LABEL_111;
          }
          goto LABEL_107;
        }
      }

      if ((v43 & v44) == 0) {
        uint64_t v39 = v40;
      }
      if ((*(void *)(v39 + 8) & 1) == 0) {
        goto LABEL_111;
      }
LABEL_107:
      int v71 = *(os_log_s **)v39;
      if (v71 && os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        unsigned __int8 v142 = 1024;
        double v143 = 698;
        char v144 = 2048;
        char v145 = v38;
        __int16 v72 = "%25s:%-5d Caller requested a check for default volume override, and we found %f for call routes.";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    unint64_t v19 = 0;
    uint64_t v20 = 5;
    goto LABEL_73;
  }

  unint64_t v19 = 0;
  uint64_t v20 = 0;
LABEL_74:
  if (v3 <= v4 || a1[493])
  {
    int v41 = 0;
  }

  else
  {
    int v58 = (*(uint64_t (**)(_BYTE *, void))(*(void *)a1 + 440LL))(a1, 0LL);
    std::string::size_type v59 = sub_374D30(a1, v58);
    if (!v59)
    {
      std::string::size_type v59 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v59, 0);
      sub_1D5AE0(a1, (uint64_t)v59);
    }

    int v60 = sub_1ECC48(1768845428, (uint64_t)a1);
    if (v11) {
      int v61 = sub_1ECC48(1869968496, (uint64_t)v11);
    }
    else {
      int v61 = 2;
    }
    int v62 = (os_log_t *)sub_138E8(17);
    char v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_INFO))
    {
      char v64 = "Not Supported";
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_DWORD *)buf = 136315650;
      if (v60 == 1) {
        char v64 = "Supported";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1008;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v64;
      _os_log_impl(&dword_0, v63, OS_LOG_TYPE_INFO, "%25s:%-5d USB input device Telephony: %s", buf, 0x1Cu);
    }

    int v65 = 1886222185LL;
    if (v223 || sub_1ECFAC((uint64_t)a1))
    {
      int v41 = 3;
    }

    else
    {
      double v87 = sub_1EEB84(1LL, (uint64_t)a1);
      int v88 = sub_138E8(21);
      CFTypeRef v89 = sub_138E8(30);
      __int16 v90 = 0;
      int v91 = 0LL;
      *(void *)buf = 0x100000002LL;
      __int16 v92 = *(void *)(v88 + 8);
      while (1)
      {
        uint64_t v93 = *(int *)&buf[4 * v91];
        __int16 v94 = v90;
        if (((v92 & v93) != 0) != ((*(void *)(v89 + 8) & v93) != 0)) {
          break;
        }
        __int16 v90 = 1;
        int v91 = 1LL;
        if ((v94 & 1) != 0) {
          goto LABEL_183;
        }
      }

      if ((v92 & v93) == 0) {
        int v88 = v89;
      }
LABEL_183:
      uint64_t v95 = *(os_log_s **)v88;
      if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(v248, v87);
        char v96 = v248;
        if (v248[5] < 0) {
          char v96 = *(_DWORD **)v248;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1437;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v96;
        _os_log_impl(&dword_0, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Input using headset value: '%s'", buf, 0x1Cu);
        if (SHIBYTE(v248[5]) < 0) {
          operator delete(*(void **)v248);
        }
      }

      if (v60 == 1
        && ((_DWORD)v87 ? (v97 = (_DWORD)v87 == 1786082146) : (v97 = 1),
            v97 ? (int v98 = 0) : (int v98 = 1),
            ((v98 | sub_1CC860() ^ 1) & 1) != 0 || sub_1ECFAC((uint64_t)a1)))
      {
        std::string::size_type v99 = v20 == 5 || v61 == 1;
        if (v99) {
          int v65 = 1886222185LL;
        }
        else {
          int v65 = 1886745449LL;
        }
        if (v99) {
          int v41 = 3;
        }
        else {
          int v41 = 1;
        }
      }

      else
      {
        if (v20 == 5)
        {
          (*(void (**)(_BYTE *__return_ptr, _BYTE *, uint64_t, uint64_t))(*(void *)a1 + 248LL))( buf,  a1,  1LL,  1885892727LL);
          *(void *)v248 = 0LL;
          *(void *)&v248[2] = 0LL;
          if (!*(void *)&buf[8]) {
            goto LABEL_441;
          }
          *(void *)&v248[2] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
          if (*(void *)&v248[2]) {
            *(void *)v248 = *(void *)buf;
          }
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
          }
          if (!*(void *)v248)
          {
LABEL_441:
            int v216 = (os_log_t *)sub_138E8(13);
            v217 = *v216;
            if (*v216 && os_log_type_enabled(*v216, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1029;
              _os_log_impl( &dword_0,  v217,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid mute control",  buf,  0x12u);
            }

            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Invalid mute control");
          }

          (*(void (**)(_BYTE *__return_ptr, _BYTE *, uint64_t, uint64_t))(*(void *)a1 + 256LL))( buf,  a1,  1LL,  1885892727LL);
          std::string __p = 0uLL;
          if (!*(void *)&buf[8]) {
            goto LABEL_445;
          }
          *((void *)&__p + 1) = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
          if (*((void *)&__p + 1)) {
            *(void *)&std::string __p = *(void *)buf;
          }
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
          }
          if (!(void)__p)
          {
LABEL_445:
            char v219 = (os_log_t *)sub_138E8(13);
            v220 = *v219;
            if (*v219 && os_log_type_enabled(*v219, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1032;
              _os_log_impl( &dword_0,  v220,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid volume control",  buf,  0x12u);
            }

            int v221 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v221, "Invalid volume control");
          }

          sub_1D55D4((uint64_t *)a1, 1u, 1886745455LL, *(uint64_t *)v248);
          sub_1D580C((uint64_t)a1, 1u, 1886745455LL, __p);
          sub_7A768((uint64_t)&__p);
          sub_7A768((uint64_t)v248);
          uint64_t v20 = 2;
        }

        int v65 = 1886745449LL;
        int v41 = 1;
      }
    }

    sub_1D580C((uint64_t)a1, 0, v65, (uint64_t)v59);
    a1[493] = 1;
  }

  if (v19 != 2)
  {
    if (v19 != 3) {
      goto LABEL_248;
    }
    uint64_t v42 = operator new(4uLL);
    *uint64_t v42 = 1886745449;
    *(void *)buf = v42;
    *(void *)&buf[8] = v42 + 1;
    *(void *)&buf[16] = v42 + 1;
    strcpy(&buf[24], "cwdv");
    v241[2] = 0;
    v242[0] = 3;
    v244 = 0LL;
    v245 = 0LL;
    v243 = &v244;
    v246 = 44739242;
    v247 = 0LL;
    sub_3710DC((uint64_t *)&__p, (uint64_t)v11, (uint64_t)buf);
    sub_EDD50((uint64_t *)v248, &__p);
    sub_85B80((uint64_t *)&__p);
    if (v247) {
      CFRelease(v247);
    }
    sub_32C8C(v244);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    if (*(void *)&v248[4] != 1LL) {
      goto LABEL_247;
    }
    __int16 v43 = (os_log_t *)sub_138E8(17);
    int v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1064;
      _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_INFO,  "%25s:%-5d Updating Partner Port from USB input to Wired Input",  buf,  0x12u);
    }

    uint64_t v45 = *(void *)(*(void *)&v248[2] + 16LL);
    uint64_t v46 = *(std::__shared_weak_count **)(*(void *)&v248[2] + 24LL);
    *(void *)&std::string __p = v45;
    *((void *)&__p + 1) = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        uint64_t v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
      v227 = v46;
      do
        uint64_t v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }

    else
    {
      v227 = 0LL;
    }

    v226 = v45;
    sub_36D53C((uint64_t)v11, &v226);
    int v66 = v227;
    if (v227)
    {
      std::string::size_type v67 = (unint64_t *)&v227->__shared_owners_;
      do
        int v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }

    (*(void (**)(_BYTE *__return_ptr, std::mutex *, void, uint64_t))(v11->__m_.__sig + 256))( buf,  v11,  0LL,  1886745449LL);
    v232 = 0LL;
    v233 = 0LL;
    if (!*(void *)&buf[8]) {
      goto LABEL_427;
    }
    int v69 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
    v233 = v69;
    if (v69)
    {
      char v70 = *(void *)buf;
      v232 = *(CFTypeRef *)buf;
    }

    else
    {
      char v70 = 0LL;
    }

    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v70)
    {
LABEL_427:
      v205 = (os_log_t *)sub_138E8(13);
      v206 = *v205;
      if (*v205 && os_log_type_enabled(*v205, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1071;
        _os_log_impl( &dword_0,  v206,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid input volume control",  buf,  0x12u);
      }

      v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v207, "Invalid input volume control");
    }

    sub_1D580C((uint64_t)v11, 0, 1886222185LL, v70);
    sub_1ED070(v11);
    if (v69)
    {
      int v71 = (unint64_t *)&v69->__shared_owners_;
      do
        __int16 v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }

    unsigned int v73 = (std::__shared_weak_count *)*((void *)&__p + 1);
    if (!*((void *)&__p + 1)) {
      goto LABEL_247;
    }
    int v74 = (unint64_t *)(*((void *)&__p + 1) + 8LL);
    do
      std::string::size_type v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    goto LABEL_245;
  }

  if ((sub_14C1EC() & 1) != 0) {
    goto LABEL_248;
  }
  uint64_t v50 = (os_log_t *)sub_138E8(17);
  std::string::size_type v51 = *v50;
  if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1084;
    _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_INFO,  "%25s:%-5d Updating Partner Port from Wired output to USB output",  buf,  0x12u);
  }

  int v52 = operator new(4uLL);
  *int v52 = 1885892727;
  *(void *)buf = v52;
  *(void *)&buf[8] = v52 + 1;
  *(void *)&buf[16] = v52 + 1;
  strcpy(&buf[24], "cwdv");
  v241[2] = 0;
  v242[0] = 3;
  v244 = 0LL;
  v245 = 0LL;
  v243 = &v244;
  v246 = 44739242;
  v247 = 0LL;
  sub_3710DC((uint64_t *)&__p, (uint64_t)v11, (uint64_t)buf);
  sub_EDD50((uint64_t *)v248, &__p);
  sub_85B80((uint64_t *)&__p);
  if (v247) {
    CFRelease(v247);
  }
  sub_32C8C(v244);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (*(void *)&v248[4] == 1LL)
  {
    (*(void (**)(void, void, void, void))(**(void **)(*(void *)&v248[2] + 16LL) + 544LL))( *(void *)(*(void *)&v248[2] + 16LL),  0LL,  0LL,  0LL);
    int v53 = sub_546E0();
    int v54 = *(std::__shared_weak_count **)(*(void *)&v248[2] + 24LL);
    *(void *)buf = *(void *)(*(void *)&v248[2] + 16LL);
    *(void *)&buf[8] = v54;
    if (v54)
    {
      p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
      do
        unsigned int v56 = __ldxr(p_shared_weak_owners);
      while (__stxr(v56 + 1, p_shared_weak_owners));
    }

    sub_1013F4(v53, (uint64_t *)buf);
    if (v54) {
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  (*(void (**)(_BYTE *__return_ptr, std::mutex *, uint64_t, uint64_t))(v11->__m_.__sig + 256))( buf,  v11,  1LL,  1885892727LL);
  CFTypeRef cf = 0LL;
  v230 = 0LL;
  if (!*(void *)&buf[8]) {
    goto LABEL_431;
  }
  v230 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
  if (v230)
  {
    uint64_t v57 = *(void *)buf;
    CFTypeRef cf = *(CFTypeRef *)buf;
  }

  else
  {
    uint64_t v57 = 0LL;
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v57)
  {
LABEL_431:
    v208 = (os_log_t *)sub_138E8(13);
    v209 = *v208;
    if (*v208 && os_log_type_enabled(*v208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1096;
      _os_log_impl( &dword_0,  v209,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid output volume control for wired headphones port",  buf,  0x12u);
    }

    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "Invalid output volume control for wired headphones port");
  }

  (*(void (**)(_BYTE *__return_ptr, std::mutex *, uint64_t, uint64_t))(v11->__m_.__sig + 248))( buf,  v11,  1LL,  1885892727LL);
  v238 = 0LL;
  v239 = 0LL;
  if (!*(void *)&buf[8]) {
    goto LABEL_435;
  }
  v239 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
  if (v239)
  {
    int v76 = *(void *)buf;
    v238 = *(void ***)buf;
  }

  else
  {
    int v76 = 0LL;
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v76)
  {
LABEL_435:
    v211 = (os_log_t *)sub_138E8(13);
    v212 = *v211;
    if (*v211 && os_log_type_enabled(*v211, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1099;
      _os_log_impl( &dword_0,  v212,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid output mute control for wired headphones port",  buf,  0x12u);
    }

    v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v213, "Invalid output mute control for wired headphones port");
  }

  sub_1D55D4(&v11->__m_.__sig, 1u, 1886745455LL, v76);
  sub_1D580C((uint64_t)v11, 1u, 1886745455LL, v57);
  int v77 = operator new(4uLL);
  uint64_t *v77 = 1885894516;
  *(void *)buf = v77;
  *(void *)&buf[8] = v77 + 1;
  *(void *)&buf[16] = v77 + 1;
  strcpy(&buf[24], "cwdv");
  v241[2] = 0;
  v242[0] = 3;
  v244 = 0LL;
  v245 = 0LL;
  v243 = &v244;
  v246 = 44739242;
  v247 = 0LL;
  sub_3710DC((uint64_t *)&v232, (uint64_t)v11, (uint64_t)buf);
  sub_EDD50((uint64_t *)&__p, &v232);
  sub_85B80((uint64_t *)&v232);
  if (v247) {
    CFRelease(v247);
  }
  sub_32C8C(v244);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v237 == 1)
  {
    uint64_t v78 = *(std::__shared_weak_count **)(*((void *)&__p + 1) + 24LL);
    v225[0] = *(void *)(*((void *)&__p + 1) + 16LL);
    v225[1] = (unint64_t)v78;
    if (v78)
    {
      int v79 = (unint64_t *)&v78->__shared_owners_;
      do
        char v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }

    sub_36D53C((uint64_t)v11, v225);
    if (v78)
    {
      double v81 = (unint64_t *)&v78->__shared_owners_;
      do
        char v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }

  sub_1ED9E8((char **)buf, v11);
  if (v222)
  {
    sub_1EDE98(&v232, v11);
    if (v233)
    {
      int v83 = std::__shared_weak_count::lock(v233);
      v235[1] = v83;
      if (v83)
      {
        __int16 v84 = v83;
        uint64_t v85 = v232;
        v235[0] = v232;
        if (v232)
        {
          v228 = 0uLL;
          if (*(void *)&buf[8])
          {
            *((void *)&v228 + 1) = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
            if (*((void *)&v228 + 1))
            {
              __int16 v86 = *(void *)buf;
              *(void *)&v228 = *(void *)buf;
            }

            else
            {
              __int16 v86 = v228;
            }

            if (v86) {
              sub_204854(v86, (uint64_t)v85);
            }
          }

          sub_7A768((uint64_t)&v228);
        }

        int v100 = (unint64_t *)&v84->__shared_owners_;
        do
          uint64_t v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      if (v233) {
        std::__shared_weak_count::__release_weak(v233);
      }
    }
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1BB88((uint64_t *)&__p);
  v102 = v239;
  if (v239)
  {
    int v103 = (unint64_t *)&v239->__shared_owners_;
    do
      std::string::size_type v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }

  unsigned int v73 = v230;
  if (v230)
  {
    int v105 = (unint64_t *)&v230->__shared_owners_;
    do
      std::string::size_type v75 = __ldaxr(v105);
    while (__stlxr(v75 - 1, v105));
LABEL_245:
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  uint64_t v20 = 0LL;
LABEL_62:
  if (v2) {
LABEL_63:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v20;
}

    int v44 = a1[92];
    if (a1[93] != v44)
    {
      uint64_t v45 = 0LL;
      for (uint64_t i = 1; ; ++i)
      {
        char v47 = *(void *)(v44 + 8 * v45);
        if (!v47) {
          break;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v47 + 136LL))(v47) & 1) != 0
          || (*(unsigned int (**)(uint64_t))(*(void *)v47 + 144LL))(v47))
        {
          uint64_t v48 = (os_log_t *)sub_138E8(16);
          uint64_t v49 = *v48;
          if (!*v48 || !os_log_type_enabled(*v48, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_73;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          int v62 = 1024;
          char v63 = 1564;
          char v64 = 1024;
          LODWORD(v65[0]) = i - 1;
          uint64_t v50 = v49;
          std::string::size_type v51 = "%25s:%-5d Underlying output stream [%u] maintains no DSP chain (it is a pass through).";
          goto LABEL_72;
        }

        int v54 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 40LL))(v47);
        unsigned int v55 = (os_log_t *)sub_138E8(16);
        unsigned int v56 = *v55;
        if (v54)
        {
          if (v56 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 32LL))(v47);
            sub_2BE2C(__p, v57);
            int v58 = __p;
            if (v60 < 0) {
              int v58 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            int v62 = 1024;
            char v63 = 1568;
            char v64 = 1024;
            LODWORD(v65[0]) = i - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v58;
            _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Underlying output stream [%u] DSP Chain:\n%s",  buf,  0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }

          goto LABEL_73;
        }

        if (v56 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          int v62 = 1024;
          char v63 = 1572;
          char v64 = 1024;
          LODWORD(v65[0]) = i - 1;
          uint64_t v50 = v56;
          std::string::size_type v51 = "%25s:%-5d Underlying output stream [%u] DSP Chain: disabled.";
LABEL_72:
          _os_log_impl(&dword_0, v50, OS_LOG_TYPE_DEBUG, v51, buf, 0x18u);
        }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    int v52 = sub_138E8(13);
    if ((*(_BYTE *)(v52 + 8) & 1) != 0 && (int v53 = *(id *)v52) != 0LL)
    {
      int v54 = (os_log_s *)v53;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        int v79 = inAddress;
        sub_613AC((uint64_t)&__lk, &v79.mSelector);
        unsigned int v55 = v81 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        CFTypeRef v89 = 1024;
        __int16 v90 = 288;
        int v91 = 2080;
        *(void *)__int16 v92 = v55;
        *(_WORD *)&v92[8] = 1024;
        *(_DWORD *)&v92[10] = inObjectID;
        _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v81 < 0) {
          operator delete(__lk.__m_);
        }
      }

      uint64_t v24 = 0LL;
      unsigned int v56 = v54;
LABEL_105:

LABEL_106:
    }

    else
    {
      uint64_t v24 = 0LL;
    }

__int128 *sub_6A7CC(__int128 *result, __int128 *a2, unsigned int a3, uint64_t a4)
{
  if (result != a2)
  {
    unsigned int v4 = 0;
    while (1)
    {
      unsigned int v5 = v4 + ((*((void *)result + 6) - *((void *)result + 5)) >> 4);
      BOOL v6 = a3 >= v4;
      unint64_t v7 = a3 - v4;
      if (v6 && v5 > a3) {
        break;
      }
      result += 4;
      unsigned int v4 = v5;
      if (result == a2) {
        return result;
      }
    }

    __int128 v8 = *result;
    __int128 v9 = result[1];
    *(void *)(a4 + 32) = *((void *)result + 4);
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v9;
    uint64_t v10 = *((void *)result + 5);
    if (v7 >= (*((void *)result + 6) - v10) >> 4) {
      sub_120BD0();
    }
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v10 + 16 * v7);
    double v11 = *(double *)(a4 + 40);
  }

  return result;
}

uint64_t sub_6A85C(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t sub_6A864()
{
  return 0LL;
}

uint64_t sub_6A86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + 8) = 1;
  uint64_t v3 = *(void *)(a1 + 232);
  uint64_t v2 = a1 + 232;
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 - 32;
  }
  return sub_6A8C0(a2, v4);
}

void sub_6A8AC(_Unwind_Exception *a1)
{
}

uint64_t sub_6A8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  if (*(void *)a2 != *(void *)a1)
  {
    if (*(void *)a1) {
      BOOL v5 = *(_BYTE *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      uint64_t v3 = *(const void **)a2;
    }

    *(void *)a1 = v3;
    int v6 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v6;
    if (v6) {
      BOOL v7 = v3 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      CFRetain(v3);
    }
  }

  return a1;
}

uint64_t sub_6A92C(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  BOOL v5 = *(void **)(a1 + 40);
  int v6 = (void *)(a1 + 48);
  if (v5 != (void *)(a1 + 48))
  {
    while (1)
    {
      uint64_t v7 = v5[6];
      if (!v7)
      {
        __int128 v14 = (os_log_t *)sub_138E8(13);
        unsigned int v15 = *v14;
        if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          __n128 v18 = "VirtualAudio_PortManager.cpp";
          __int16 v19 = 1024;
          int v20 = 248;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      if (*(_DWORD *)(v7 + 8) == a2) {
        break;
      }
      __int128 v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          __int128 v9 = v8;
          __int128 v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          __int128 v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          BOOL v5 = v9;
        }

        while (!v10);
      }

      BOOL v5 = v9;
      if (v9 == v6) {
        goto LABEL_16;
      }
    }
  }

  if (v5 != v6)
  {
    uint64_t v11 = v5[5];
    if (v11)
    {
      if (*(void *)(v11 + 8) != -1LL)
      {
        uint64_t v12 = v5[6];
        if (!v4) {
          return v12;
        }
        goto LABEL_17;
      }
    }
  }

void sub_6AAEC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_6AB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + 8) = 1;
  uint64_t v2 = a1 + 232;
  if (!*(void *)(a1 + 232))
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v3 = a1 + 216;
    if (v4) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = v3 - 16;
    }
  }

  return sub_6A8C0(a2, v2);
}

void sub_6AB80(_Unwind_Exception *a1)
{
}

uint64_t sub_6AB94()
{
  return 0LL;
}

BOOL sub_6AB9C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

uint64_t sub_6ABD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 1885762592LL;
  uint64_t v20 = a1 + 440;
  char v21 = 1;
  sub_92F80(a1 + 440);
  if (a3 != 1885762592)
  {
    uint64_t v10 = sub_273BC(a1, a2);
    goto LABEL_18;
  }

  sub_27D9BC((uint64_t *)buf, (uint64_t *)(a1 + 80), "", 748);
  uint64_t v7 = *(void *)buf;
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 120LL))(v7, a2, v6);
  uint64_t v10 = v9;
  uint64_t v11 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_9;
  }
  uint64_t v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!(_DWORD)v10) {
      goto LABEL_18;
    }
  }

  else
  {
LABEL_9:
    if (!(_DWORD)v9) {
      goto LABEL_18;
    }
  }

  __int128 v14 = (os_log_t *)sub_138E8(22);
  unsigned int v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(__p, v10);
    if (v19 >= 0) {
      unsigned int v16 = __p;
    }
    else {
      unsigned int v16 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 751;
    __int16 v23 = 2080;
    uint64_t v24 = v16;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream format", buf, 0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_6ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_6ADEC(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88LL))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1;
}

void sub_6AE74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_6AE88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

BOOL sub_6AE90(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 80), a2) != 0;
}

uint64_t sub_6AEB0(_DWORD *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  AudioObjectID v4 = a1[20];
  UInt32 outDataSize = 0;
  if (a2->mSelector == 1936092513 || a2->mSelector == 1885762657)
  {
    memset(__p, 0, sizeof(__p));
    int v6 = (*(uint64_t (**)(_DWORD *, void **))(*(void *)a1 + 96LL))(a1, __p);
    if (v6)
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v19 = "Stream_HAL_Common.cpp";
        __int16 v20 = 1024;
        int v21 = 126;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: error obtaining stream formats.",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v6;
    }

    uint64_t v7 = (LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFF8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(v4, a2, a3, a4, &outDataSize);
    OSStatus v9 = PropertyDataSize;
    if (PropertyDataSize)
    {
      __int128 v14 = (os_log_t *)sub_138E8(13);
      unsigned int v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "Stream_HAL_Common.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 135;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to determine the property's data size.",  (uint8_t *)__p,  0x12u);
      }

      unsigned int v16 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned int v16 = &off_4865A0;
      v16[2] = v9;
    }

    return outDataSize;
  }

  return v7;
}

void sub_6B0B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_6B0E0( os_unfair_lock_s *a1, AudioObjectPropertyAddress *inAddress, UInt32 a3, const void *a4, UInt32 *ioDataSize, void *a6)
{
  AudioObjectPropertySelector mSelector = inAddress->mSelector;
  if ((int)inAddress->mSelector > 1936092512)
  {
    if (mSelector == 1936092513) {
      goto LABEL_13;
    }
    if (mSelector != 1936092532) {
      goto LABEL_75;
    }
  }

  else if (mSelector != 1885762592)
  {
    if (mSelector != 1885762657)
    {
LABEL_75:
      OSStatus PropertyData = AudioObjectGetPropertyData(a1[20]._os_unfair_lock_opaque, inAddress, a3, a4, ioDataSize, a6);
      if (PropertyData)
      {
        OSStatus v71 = PropertyData;
        __int16 v72 = (os_log_t *)sub_138E8(13);
        unsigned int v73 = *v72;
        if (*v72)
        {
          if (os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
            __int16 v84 = 1024;
            int v85 = 190;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to obtain property data.",  buf,  0x12u);
          }
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v71;
      }

      return;
    }

void sub_6B990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6BA08(uint64_t a1)
{
  int v10 = 4;
  unsigned int v11 = 0;
  if (*(void *)(a1 + 104))
  {
    else {
      int v2 = 1768845428;
    }
    v9[0] = 1819569763;
    v9[1] = v2;
    v9[2] = 0;
    if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(a1 + 104) + 16LL))(*(void *)(a1 + 104), v9))
    {
      (*(void (**)(void, _DWORD *, void, void, int *, unsigned int *))(**(void **)(a1 + 104) + 40LL))( *(void *)(a1 + 104),  v9,  0LL,  0LL,  &v10,  &v11);
    }

    else
    {
      AudioObjectID v4 = (os_log_t *)sub_138E8(22);
      BOOL v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
      {
        int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 120LL))(*(void *)(a1 + 104));
        (*(void (**)(void *__return_ptr))(**(void **)(a1 + 104) + 128LL))(v8);
        *(_DWORD *)buf = 136315906;
        uint64_t v13 = "VirtualStream.cpp";
        __int16 v14 = 1024;
        int v15 = 786;
        __int16 v16 = 1024;
        int v17 = v6;
        __int16 v18 = 2112;
        uint64_t v19 = v8[0];
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "%25s:%-5d PhysicalDevice ID %u (uid %@), does not support kAudioDevicePropertyLatency",  buf,  0x22u);
        sub_19DFC((uint64_t)v8);
      }
    }
  }

  else
  {
    else {
      unsigned int v3 = 1768845428;
    }
    *(_DWORD *)buf = 1752657012;
    uint64_t v13 = (const char *)v3;
    (*(void (**)(void, uint8_t *, void, void, int *, unsigned int *))(**(void **)(a1 + 96) + 40LL))( *(void *)(a1 + 96),  buf,  0LL,  0LL,  &v10,  &v11);
  }

  return v11;
}

uint64_t sub_6BBE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 448)) {
    return 0LL;
  }
  uint64_t v9 = a1 + 48;
  char v10 = 1;
  sub_92F80(a1 + 48);
  uint64_t v2 = 0LL;
  uint64_t v3 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v3)
  {
    unint64_t v4 = v3 / 24;
    if (v4 <= 1) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = 8LL;
    do
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if ((*(unsigned int (**)(void))(**(void **)(v7 + v6) + 184LL))(*(void *)(v7 + v6))) {
      v6 += 24LL;
      }
      --v5;
    }

    while (v5);
  }

  sub_93128((uint64_t)&v9);
  return v2;
}

void sub_6BCB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int sub_6BCC8(uint64_t a1)
{
  double v2 = sub_2BDDC(*(OpaqueAudioComponentInstance **)(a1 + 72));
  double outData = 0.0;
  UInt32 ioDataSize = 8;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    unint64_t v4 = *(OpaqueAudioComponentInstance **)(v3 + 16);
  }
  else {
    unint64_t v4 = 0LL;
  }
  if (!AudioUnitGetProperty(v4, 2u, 1u, 0, &outData, &ioDataSize)) {
    return vcvtpd_u64_f64(v2 * outData);
  }
  uint64_t v5 = (os_log_t *)sub_138E8(13);
  uint64_t v6 = *v5;
  if (*v5)
  {
    unsigned int result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    UInt32 ioDataSize = 136315394;
    char v10 = "DSPProcessorManager.cpp";
    __int16 v11 = 1024;
    int v12 = 748;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", (uint8_t *)&ioDataSize, 0x12u);
  }

  return 0;
}

uint64_t sub_6BDE8(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1853059619 || *a2 == 1853059700) {
    return 1LL;
  }
  int v4 = a2[1];
  if (v4 == 1869968496)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v6 = (void *)(v8 + 520);
    uint64_t v7 = (void *)(v8 + 528);
    return ((*v7 - *v6) & 0x7FFFFFFF8LL) != 0;
  }

  if (v4 == 1768845428)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (void *)(v5 + 496);
    uint64_t v7 = (void *)(v5 + 504);
    return ((*v7 - *v6) & 0x7FFFFFFF8LL) != 0;
  }

  return 0LL;
}

void sub_6BE70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5, double *a6)
{
  uint64_t v39 = *a2;
  uint64_t v13 = (uint64_t)a2 + 4;
  int v12 = *((_DWORD *)a2 + 1);
  unsigned int v40 = *(_DWORD *)(v13 + 4);
  __int16 v14 = *(void **)(a1 + 8);
  int v15 = (_DWORD *)sub_6C2A0(v14, v12, v40);
  if (*(_DWORD *)a2 == 1853059619)
  {
    if (v40)
    {
      if (!v15)
      {
        int v36 = (os_log_t *)sub_138E8(13);
        std::string::size_type v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1556;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 2003332927;
      }

      HIDWORD(v39) = 1735159650;
      unsigned int v40 = v40 - v15[23] + 1;
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, _DWORD *, double *))(*(void *)v15 + 56LL))( v15,  &v39,  a3,  a4,  a5,  a6);
    }

    else
    {
      memset(buf, 0, sizeof(buf));
      sub_1AFCB4(a1, (uint64_t)buf);
      unsigned int v18 = *a5 >> 4;
      uint64_t v19 = *(void **)buf;
      uint64_t v20 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
      else {
        unint64_t v21 = v18;
      }
      if ((_DWORD)v21)
      {
        unint64_t v22 = v21;
        unint64_t v23 = a6;
        __int128 v24 = *(__n128 **)buf;
        do
        {
          if (!v20) {
            sub_120BD0();
          }
          __n128 v25 = *v24++;
          __n128 v17 = v25;
          *(__n128 *)unint64_t v23 = v25;
          v23 += 2;
          --v20;
          --v22;
        }

        while (v22);
        unint64_t v26 = v21;
      }

      else
      {
        unint64_t v26 = 0LL;
      }

      uint64_t v27 = &a6[2 * v26];
      unint64_t v28 = 126 - 2 * __clz(v26);
      if ((_DWORD)v21) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0LL;
      }
      sub_1AE8F0((uint64_t)a6, v27, v29, 1, v17);
      *a5 = 16 * v21;
      if (v19) {
        operator delete(v19);
      }
    }
  }

  else if (*(_DWORD *)a2 == 1853059700)
  {
    if (*a5 != 8)
    {
      uint64_t v30 = (os_log_t *)sub_138E8(13);
      uint64_t v31 = *v30;
      if (*v30)
      {
        if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1529;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyNominalSampleRate",  buf,  0x12u);
        }
      }

      uint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v32 = &off_4865A0;
      v32[2] = 561211770;
    }

    *a6 = (*(double (**)(void *))(*v14 + 632LL))(v14);
  }

  else
  {
    if (!v15)
    {
      char v33 = (os_log_t *)sub_138E8(13);
      unsigned int v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1564;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  buf,  0x12u);
      }

      uint64_t v35 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v35 = &off_4865A0;
      v35[2] = 2003332927;
    }

    HIDWORD(v39) = 1735159650;
    unsigned int v16 = v40;
    if (v40) {
      unsigned int v16 = v40 - v15[23] + 1;
    }
    unsigned int v40 = v16;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, _DWORD *, double *))(*(void *)v15 + 56LL))( v15,  &v39,  a3,  a4,  a5,  a6);
  }

void sub_6C280( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
}

uint64_t sub_6C2A0(void *a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 1735159650:
      if (a1[66] == a1[65])
      {
        if (a1[63] == a1[62]) {
          return 0LL;
        }
LABEL_4:
        uint64_t v3 = (uint64_t **)(a1 + 62);
        goto LABEL_7;
      }

      break;
    case 1869968496:
      break;
    case 1768845428:
      goto LABEL_4;
    default:
      return 0LL;
  }

  uint64_t v3 = (uint64_t **)(a1 + 65);
LABEL_7:
  int v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5) {
    return 0LL;
  }
  do
  {
    uint64_t v6 = *v4;
    unsigned int v7 = *(_DWORD *)(*v4 + 96) + *(_DWORD *)(*v4 + 92) + *(_DWORD *)(*(void *)(*v4 + 104) + 44LL);
    v4 += v7 <= a3;
    if (v7 > a3) {
      uint64_t result = v6;
    }
    else {
      uint64_t result = 0LL;
    }
    if (result) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v4 == v5;
    }
  }

  while (!v9);
  return result;
}

uint64_t sub_6C344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      unsigned int v7 = "VirtualAudio_Device.cpp";
      __int16 v8 = 1024;
      int v9 = 3611;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: Attempt to get nominal sample rate wit hout an active device",  (uint8_t *)&v6,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 104LL))(v1);
}

BOOL sub_6C440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (((a2 - a1) & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = v2 >> 3;
    unint64_t v5 = ((unint64_t)v2 >> 3);
    BOOL v6 = 1;
    do
    {
      if (v4 > v3)
      {
        uint64_t v7 = *(void *)(a1 + 8 * v3);
        if (v7)
        {
          int v8 = *(_DWORD *)(*(void *)(v7 + 104) + 24LL);
          if (v8 > 1836343850)
          {
            if (v8 == 1836343851 || v8 == 1836344107) {
              return v6;
            }
          }

          else if (v8 == 1667443507 || v8 == 1667509043)
          {
            return v6;
          }
        }
      }

      BOOL v6 = ++v3 < v5;
    }

    while (v5 != v3);
  }

  return 0;
}

uint64_t sub_6C4E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    unint64_t v3 = (os_log_t *)sub_138E8(13);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 3449;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: mDevice is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v7 = 0x676C6F6266737A23LL;
  int v8 = 0;
  int v6 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, _BYTE *))(*(void *)v1 + 40LL))( v1,  &v7,  0LL,  0LL,  &v6,  buf);
  return *(double *)buf;
}

void sub_6C614( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, double *a6)
{
  if (a2->mSelector != 1718843939)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    unsigned int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3145;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  float64x2_t outData = 0uLL;
  uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, &outData);
  if ((_DWORD)PropertyData)
  {
    unsigned int v18 = (os_log_t *)sub_138E8(16);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v29, a2->mSelector);
      int v20 = v30;
      unint64_t v21 = (void **)v29[0];
      sub_2CA1C(__p, PropertyData);
      unint64_t v22 = v29;
      if (v20 < 0) {
        unint64_t v22 = v21;
      }
      if (v28 >= 0) {
        unint64_t v23 = __p;
      }
      else {
        unint64_t v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3149;
      __int16 v35 = 2080;
      int v36 = v22;
      __int16 v37 = 2080;
      uint64_t v38 = v23;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    __int128 v24 = (os_log_t *)sub_138E8(13);
    __n128 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3150;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to obtain property data.",  buf,  0x12u);
    }

    unint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v26 = &off_4865A0;
    v26[2] = PropertyData;
  }

  if (sub_6C978(a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v11 = sub_5C2F8(a1);
    *((void *)&v14 + 1) = v12;
    *(void *)&__int128 v14 = v11;
    uint64_t v13 = v14 >> 32;
    if ((v13 & 0xFF00000000LL) == 0
      || !(_DWORD)v13
      || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0)
    {
      float64x2_t outData = vmulq_f64(outData, (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL));
    }
  }

  sub_6CB44(a5, a6, outData.f64[0], outData.f64[1]);
}

void sub_6C948(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_6C978(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  if (v2)
  {
    unsigned int v3 = v2;
    uint64_t v4 = 0LL;
    BOOL v5 = 1;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, 1LL, v4);
      if (v6 && !(*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v6 + 112LL))(v6, v8))
      {
        if (v9 > 1836343850)
        {
          if (v9 == 1836343851 || v9 == 1836344107) {
            return v5;
          }
        }

        else if (v9 == 1667443507 || v9 == 1667509043)
        {
          return v5;
        }
      }

      uint64_t v4 = (v4 + 1);
      BOOL v5 = v4 < v3;
    }

    while (v3 != (_DWORD)v4);
  }

  return 0;
}

unint64_t sub_6CA80(uint64_t a1, int a2)
{
  uint64_t v4 = 528LL;
  if (a2) {
    uint64_t v4 = 552LL;
  }
  uint64_t v5 = 520LL;
  uint64_t v6 = *(void *)(a1 + v4);
  if (a2) {
    uint64_t v5 = 544LL;
  }
  return (unint64_t)(v6 - *(void *)(a1 + v5)) >> 4;
}

uint64_t sub_6CAD0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = a1 + 544;
  uint64_t v7 = 520LL;
  if (a2) {
    uint64_t v7 = 544LL;
  }
  else {
    uint64_t v6 = a1 + 520;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = *(void *)(a1 + v7);
  else {
    return *(void *)(v9 + 16LL * a3);
  }
}

void sub_6CB44(_DWORD *a1, double *a2, double a3, double a4)
{
  if (!a2)
  {
    __int16 v10 = (os_log_t *)sub_138E8(13);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int128 v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 157;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a1 <= 0xFu)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        __int128 v14 = "StandardUtilities.h";
        __int16 v15 = 1024;
        int v16 = 158;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) <= ioDataSize",  (uint8_t *)&v13,  0x12u);
      }
    }
  }

  *a1 = 16;
  *a2 = a3;
  a2[1] = a4;
}

void sub_6CCD8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_6CCF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    unsigned int v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)__int16 v10 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v10[8] = 1024;
      *(_DWORD *)&v10[10] = 3461;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: mDevice is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v7 = 0x676C6F6266737A23LL;
  int v8 = 0;
  int v6 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint8_t *))(*(void *)v1 + 40LL))( v1,  &v7,  0LL,  0LL,  &v6,  buf);
  else {
    return *(double *)&v10[4];
  }
}

uint64_t sub_6CE34(unsigned int *a1, CFDictionaryRef *a2)
{
  unsigned int v32 = 1852796517;
  int v4 = CFDictionaryContainsKey(*a2, @"initiation trigger");
  if (!(v4 | CFDictionaryContainsKey(*a2, @"activation trigger")))
  {
    uint64_t v9 = (os_log_t *)sub_138E8(2);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v34 = 1024;
      int v35 = 608;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route activation description does not contain a trigger value",  buf,  0x12u);
    }

    return 1852796517LL;
  }

  uint64_t v5 = v4 ? @"initiation trigger" : @"activation trigger";
  sub_51A88(*a2, v5, &v32);
  uint64_t v6 = v32;
  if (v32 == 1852796517) {
    return 1852796517LL;
  }
  unint64_t v7 = *(void *)a1;
  if ((int)*(void *)a1 > 1668313665)
  {
    if ((_DWORD)v7 == 1668313666) {
      goto LABEL_19;
    }
    unsigned __int16 v8 = 29299;
  }

  else
  {
    if ((_DWORD)v7 == 1668301427) {
      goto LABEL_19;
    }
    unsigned __int16 v8 = 24946;
  }

  if ((_DWORD)v7 != (v8 | 0x63700000))
  {
    unint64_t v12 = HIDWORD(v7);
    goto LABEL_33;
  }

LABEL_52:
      uint64_t v17 = sub_138E8(2);
      uint64_t v18 = sub_138E8(34);
      char v19 = 0;
      uint64_t v20 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = *(int *)&buf[4 * v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1LL;
        if ((v23 & 1) != 0) {
          goto LABEL_58;
        }
      }

      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
LABEL_58:
      __int128 v24 = *(os_log_s **)v17;
      if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v30, v32);
        int v25 = v31;
        unint64_t v26 = (void **)v30[0];
        sub_2DB6FC(&__p, a1);
        uint64_t v27 = v30;
        if (v25 < 0) {
          uint64_t v27 = v26;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v34 = 1024;
        int v35 = 622;
        __int16 v36 = 2080;
        __int16 v37 = v27;
        __int16 v38 = 2080;
        uint64_t v39 = p_p;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resetting the trigger (%s) to None because it is not valid for the specified category and mode: %s",  buf,  0x26u);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
      }

      return 1852796517LL;
    }
  }

  else if ((_DWORD)v7 != 1668301427)
  {
    unsigned __int16 v13 = 24946;
    goto LABEL_27;
  }

  if ((_DWORD)v3 == 1987277417 || (_DWORD)v3 == 1986291046)
  {
    __int16 v33 = (os_log_t *)sub_138E8(41);
    __int16 v34 = *v33;
    if (*v33)
    {
      if (os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v3);
        int v35 = "disabled";
        if ((_DWORD)v19) {
          __int16 v36 = "enabled";
        }
        else {
          __int16 v36 = "disabled";
        }
        if ((_DWORD)v18) {
          int v35 = "enabled";
        }
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1317;
        __int16 v37 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        *(_WORD *)&_BYTE buf[18] = 2080;
        if (v88 >= 0) {
          __int16 v37 = __p;
        }
        *(void *)&_BYTE buf[20] = v35;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v36;
        *(_WORD *)&_BYTE buf[38] = 2080;
        uint64_t v93 = v37;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Adaptive volume is %s auto-DRC is %s for device %s",  buf,  0x30u);
        if (v88 < 0)
        {
          operator delete(__p[0]);
          if ((_DWORD)v19) {
            goto LABEL_65;
          }
LABEL_92:
          sub_B98F8();
          sub_B9960(a1);
          goto LABEL_113;
        }
      }
    }
  }

  if (!(_DWORD)v19) {
    goto LABEL_92;
  }
LABEL_65:
  sub_B98F8();
  __int16 v38 = (os_log_t *)sub_138E8(41);
  uint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, unint64_t))(*(void *)a1 + 96LL))(__p, a1);
    unsigned int v40 = v88 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 170;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v40;
    _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::RegisterDevice() - registering device '%s' for updates.",  buf,  0x1Cu);
    if (v88 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!qword_48CFC8)
  {
    int v41 = (os_log_t *)sub_138E8(41);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 237;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::OpenDevice().", buf, 0x12u);
    }

    IONotificationPortSetDispatchQueue((IONotificationPortRef)qword_48CFB8, (dispatch_queue_t)qword_48CFB0);
    int v83 = v2;
    cf[0] = CFStringCreateWithBytes(0LL, (const UInt8 *)"IOHIDDevice", 11LL, 0x8000100u, 0);
    if (!cf[0])
    {
      int v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v76, "Could not construct");
    }

    sub_C47D4((uint64_t)buf, "IOProviderClass", cf);
    LODWORD(valuePtr) = 65333;
    __int16 v43 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    __int16 v90 = v43;
    if (!v43)
    {
      std::string v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v77, "Could not construct");
    }

    sub_C4814((uint64_t)&buf[16], "PrimaryUsagePage", (const void **)&v90);
    int v91 = 1;
    std::string::size_type v44 = CFNumberCreate(0LL, kCFNumberIntType, &v91);
    __int128 valuePtr = v44;
    if (!v44)
    {
      uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
    }

    sub_C4854((uint64_t)&buf[32], "PrimaryUsage", (const void **)&valuePtr);
    __p[0] = buf;
    __p[1] = &dword_0 + 3;
    uint64_t v45 = sub_5A950((uint64_t)__p);
    uint64_t v46 = 0LL;
    v85[0] = v45;
    do
    {
      char v47 = *(const void **)&buf[v46 + 40];
      if (v47) {
        CFRelease(v47);
      }
      uint64_t v48 = *(const void **)&buf[v46 + 32];
      if (v48) {
        CFRelease(v48);
      }
      v46 -= 16LL;
    }

    while (v46 != -48);
    CFRelease(v44);
    CFRelease(v43);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (dword_48CFC0)
    {
      IOObjectRelease(dword_48CFC0);
      dword_48CFC0 = 0;
    }

    v85[0] = 0LL;
    IOServiceAddMatchingNotification( (IONotificationPortRef)qword_48CFB8,  "IOServiceMatched",  v45,  (IOServiceMatchingCallback)sub_C48C4,  &qword_48CFB0,  (io_iterator_t *)&dword_48CFC0);
    cf[0] = &qword_48CFB0;
    unsigned int v2 = v83;
    if (dispatch_get_specific("AVHIDEventListenerQueueKey") == "AVHIDEventListenerQueueKey")
    {
      sub_C48C8((uint64_t)&qword_48CFB0, dword_48CFC0);
    }

    else
    {
      __p[0] = cf;
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = sub_C4DA0;
      *(void *)&uint8_t buf[24] = &unk_46E898;
      *(void *)&_BYTE buf[32] = __p;
      dispatch_sync((dispatch_queue_t)qword_48CFB0, buf);
    }

    dword_48D048 = 0;
  }

  std::mutex::lock((std::mutex *)&qword_48CFF0);
  uint64_t v49 = qword_48D038;
  if (qword_48D038)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v50 = (uint64_t *)v49;
        uint64_t v51 = *(void *)(v49 + 32);
        if (v51 <= a1) {
          break;
        }
        uint64_t v49 = *v50;
        uint64_t v52 = v50;
        if (!*v50) {
          goto LABEL_103;
        }
      }

      if (v51 >= a1) {
        break;
      }
      uint64_t v49 = v50[1];
      if (!v49)
      {
        uint64_t v52 = v50 + 1;
        goto LABEL_103;
      }
    }

    uint64_t v54 = qword_48D040;
  }

  else
  {
    uint64_t v52 = &qword_48D038;
    uint64_t v50 = &qword_48D038;
LABEL_103:
    char v53 = (uint64_t *)operator new(0x28uLL);
    v53[4] = a1;
    os_log_t *v53 = 0LL;
    v53[1] = 0LL;
    v53[2] = (uint64_t)v50;
    *uint64_t v52 = (uint64_t)v53;
    if (*(void *)qword_48D030)
    {
      qword_48D030 = *(void *)qword_48D030;
      char v53 = (uint64_t *)*v52;
    }

    sub_7A420((uint64_t *)qword_48D038, v53);
    uint64_t v54 = ++qword_48D040;
  }

  if (v54 == 1)
  {
    uint64_t v55 = (os_log_t *)sub_138E8(41);
    uint64_t v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 183;
      _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AVHIDEventListener::RegisterDevice() - registered first device.",  buf,  0x12u);
    }

    char v57 = (dispatch_queue_s *)qword_48CFB0;
    int v58 = operator new(8uLL);
    os_log_s *v58 = &qword_48CFB0;
    dispatch_async_f(v57, v58, (dispatch_function_t)sub_C4794);
  }

  std::mutex::unlock((std::mutex *)&qword_48CFF0);
LABEL_113:
  uint64_t result = (*(uint64_t (**)(void, uint64_t, os_log_s *))(**(void **)(a1 + 1008) + 432LL))( *(void *)(a1 + 1008),  v18,  v19);
  if (v2) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

      sub_61C64(a1, a2, a3, a4, a5, a6, a7);
      return *(double *)&v28;
    }

    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4) != (_DWORD)a5)
    {
      std::string::size_type v67 = (os_log_t *)sub_138E8(13);
      int v68 = *v67;
      if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
      {
        *(void *)std::string::size_type v99 = *(void *)a2;
        *(_DWORD *)&v99[8] = a2[2];
        sub_613AC((uint64_t)__p, (unsigned int *)v99);
        int v69 = SBYTE3(v110);
        char v70 = *(_BYTE **)__p;
        OSStatus v71 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, a2, a3, a4);
        __int16 v72 = __p;
        buf[0] = 136316162;
        *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
        if (v69 < 0) {
          __int16 v72 = v70;
        }
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 299;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v72;
        LOWORD(buf[7]) = 1024;
        *(_DWORD *)((char *)&buf[7] + 2) = a5;
        HIWORD(buf[8]) = 1024;
        buf[9] = v71;
        _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          (uint8_t *)buf,
          0x28u);
        if (SBYTE3(v110) < 0) {
          operator delete(*(void **)__p);
        }
      }

      unsigned int v73 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned int v73 = &off_4865A0;
      v73[2] = 561211770;
    }

    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 48LL))( *(void *)(a1 + 120),  a2,  a3,  a4,  a5,  a6);
  }

  return *(double *)&v28;
}

  std::mutex::unlock((std::mutex *)&unk_48EC30);
  uint64_t v21 = &buf[8];
  *(_OWORD *)&buf[8] = 0uLL;
  *(void *)buf = &buf[8];
  if (v35)
  {
LABEL_53:
    if (qword_48ECA0)
    {
      uint64_t v22 = sub_5954C();
      char v23 = operator new(0x30uLL);
      sub_161CCC((uint64_t)v32, &v33);
      __int128 v24 = operator new(0x28uLL);
      os_log_s *v24 = off_471A78;
      v24[1] = &qword_48EC28;
      sub_161CCC((uint64_t)(v24 + 2), v32);
      *(void *)&uint8_t buf[24] = v24;
      v23[2] = 1;
      *(void *)char v23 = &off_471A08;
      *((void *)v23 + 5) = (*(uint64_t (**)(void *))(*v24 + 16LL))(v24);
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v22 + 328LL))(v22, v23);
      int v25 = *(void **)&buf[24];
      if (*(_BYTE **)&buf[24] == buf)
      {
        unint64_t v26 = 4LL;
        int v25 = buf;
      }

      else
      {
        if (!*(void *)&buf[24])
        {
LABEL_73:
          sub_32C8C((void *)v32[1]);
          goto LABEL_74;
        }

        unint64_t v26 = 5LL;
      }

      (*(void (**)(void))(*v25 + 8 * v26))();
      goto LABEL_73;
    }
  }

  else
  {
    uint64_t v27 = (uint64_t)v33;
    while ((void **)v27 != &v34)
    {
      if (*(_DWORD *)(v27 + 28) != *((_DWORD *)v21 + 7)) {
        goto LABEL_53;
      }
      char v28 = *(void **)(v27 + 8);
      uint64_t v29 = v27;
      if (v28)
      {
        do
        {
          uint64_t v27 = (uint64_t)v28;
          char v28 = (void *)*v28;
        }

        while (v28);
      }

      else
      {
        do
        {
          uint64_t v27 = *(void *)(v29 + 16);
          unsigned int v3 = *(void *)v27 == v29;
          uint64_t v29 = v27;
        }

        while (!v3);
      }

      char v30 = (void *)*((void *)v21 + 1);
      if (v30)
      {
        do
        {
          char v31 = v30;
          char v30 = (void *)*v30;
        }

        while (v30);
      }

      else
      {
        do
        {
          char v31 = (void *)*((void *)v21 + 2);
          unsigned int v3 = *v31 == (void)v21;
          uint64_t v21 = v31;
        }

        while (!v3);
      }

      uint64_t v21 = v31;
    }
  }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    __int16 v36 = sub_138E8(13);
    if ((*(_BYTE *)(v36 + 8) & 1) != 0)
    {
      __int16 v37 = *(os_log_s **)v36;
      if (*(void *)v36)
      {
        if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v44 = *(void *)a2;
          uint64_t v45 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v44);
          __int16 v38 = v47 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          char v57 = 1024;
          int v58 = 288;
          std::string::size_type v59 = 2080;
          *(void *)int v60 = v38;
          *(_WORD *)&v60[8] = 1024;
          *(_DWORD *)&v60[10] = a1;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v47 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    unsigned __int16 v15 = 0LL;
    goto LABEL_89;
  }

  unsigned __int16 v16 = (os_log_t *)sub_138E8(13);
  uint64_t v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v67, v15);
    uint64_t v18 = v67.__m_.__opaque[15];
    sig = v67.__m_.__sig;
    inClientData = *(void *)a2;
    uint64_t v49 = *(_DWORD *)(a2 + 8);
    sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
    uint64_t v20 = &v67;
    if (v18 < 0) {
      uint64_t v20 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    char v57 = 1024;
    int v58 = 207;
    std::string::size_type v59 = 1024;
    *(_DWORD *)int v60 = v15;
    *(_WORD *)&v60[4] = 2080;
    *(void *)&v60[6] = v20;
    *(_WORD *)&v60[14] = 2080;
    *(void *)&v60[16] = p_p;
    *(_WORD *)&v60[24] = 1024;
    *(_DWORD *)&v60[26] = a1;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v67.__m_.__opaque[15] < 0) {
      operator delete((void *)v67.__m_.__sig);
    }
  }

  return v15;
}

        v16 += 56LL;
      }

      while (v16 != v15);
      unsigned __int16 v16 = *(void *)buf;
LABEL_54:
      if (v16)
      {
        *(void *)&buf[8] = v16;
        operator delete((void *)v16);
      }

      unsigned __int16 v13 = (v13 + 1);
    }

    while ((_DWORD)v13 != v12);
LABEL_57:
    __int16 v10 = 1;
    unint64_t v11 = 1LL;
  }

  while ((v65 & 1) == 0);
  unint64_t v26 = v70;
  if (v70 != &v71)
  {
    uint64_t v27 = v70;
    while (*((double *)v27 + 4) > a2 || *((double *)v27 + 5) < a2)
    {
      uint64_t v29 = v27[1];
      if (v29)
      {
        do
        {
          char v30 = (uint64_t **)v29;
          uint64_t v29 = (uint64_t *)*v29;
        }

        while (v29);
      }

      else
      {
        do
        {
          char v30 = (uint64_t **)v27[2];
          unsigned __int16 v8 = *v30 == (uint64_t *)v27;
          uint64_t v27 = v30;
        }

        while (!v8);
      }

      uint64_t v27 = v30;
      if (v30 == &v71) {
        goto LABEL_74;
      }
    }

    if (v27 != &v71)
    {
      char v31 = a2;
      goto LABEL_162;
    }
  }

  LOBYTE(v16) = 0;
LABEL_53:
  if (v110.__m_.__sig) {
    operator delete((void *)v110.__m_.__sig);
  }
  if ((v16 & 1) != 0)
  {
    sub_1DA2C4((uint64_t)&v86, (uint64_t)&v95);
    if (v88)
    {
LABEL_57:
      memset(v110.__m_.__opaque, 0, sizeof(v110.__m_.__opaque));
      v110.__m_.__sig = 850045863LL;
      memset(v109.__cv_.__opaque, 0, sizeof(v109.__cv_.__opaque));
      v109.__cv_.__sig = 1018212795LL;
      AudioObjectPropertyElement v79 = 0;
      sub_7D684(&__p, a1, &inAddress, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v79);
      int v25 = 2000LL;
      while (1)
      {
        sub_1DA2C4((uint64_t)&v73, (uint64_t)&v95);
        unint64_t v26 = v73;
        if (v76) {
          goto LABEL_59;
        }
        char v70 = 0LL;
        OSStatus v71 = 0LL;
        __int16 v72 = 0LL;
        char v28 = v74;
        uint64_t v29 = (v74 - (uint64_t)v73) >> 2;
        sub_7A5B8(&v70, v73, v74, v29);
        std::string::size_type v67 = 0LL;
        int v68 = 0LL;
        int v69 = 0LL;
        sub_7A5B8(&v67, *a2, (uint64_t)a2[1], a2[1] - *a2);
        char v30 = v70;
        char v31 = v67;
        if (v71 - v70 != v68 - v67) {
          break;
        }
        unsigned int v32 = memcmp(v70, v67, v71 - v70) == 0;
        if (v31) {
          goto LABEL_65;
        }
LABEL_66:
        if (v30)
        {
          OSStatus v71 = v30;
          operator delete(v30);
        }

        if (!v32)
        {
          if (v25 <= 0)
          {
            __int16 v37 = (os_log_t *)sub_138E8(13);
            __int16 v38 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              int v64 = inAddress;
              sub_613AC((uint64_t)&__lk, &v64.mSelector);
              if (v66 >= 0) {
                p_lk = &__lk;
              }
              else {
                p_lk = __lk.__m_;
              }
              int v62 = 0LL;
              char v63 = 0LL;
              int v61 = 0LL;
              sub_7A5B8(&v61, v26, v28, v29);
              int v58 = 0LL;
              std::string::size_type v59 = 0LL;
              int v60 = 0LL;
              sub_7A5B8(&v58, *a2, (uint64_t)a2[1], a2[1] - *a2);
              unsigned int v40 = v61;
              int v41 = v58;
              uint64_t v42 = v62 - v61 == v59 - v58 && memcmp(v61, v58, v62 - v61) == 0;
              buf.AudioObjectPropertySelector mSelector = 136316930;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              int v100 = 1024;
              uint64_t v101 = 248;
              v102 = 2080;
              *(void *)int v103 = "set";
              *(_WORD *)&v103[8] = 2080;
              *(void *)&v103[10] = p_lk;
              *(_WORD *)&v103[18] = 2080;
              *(void *)&v103[20] = "set";
              *(_WORD *)&v103[28] = 1024;
              std::string::size_type v104 = v42;
              int v105 = 1024;
              v106 = 0;
              v107 = 1024;
              v108 = a1;
              _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
              if (v41)
              {
                std::string::size_type v59 = v41;
                operator delete(v41);
              }

              if (v40)
              {
                int v62 = v40;
                operator delete(v40);
              }

              if (v66 < 0) {
                operator delete(__lk.__m_);
              }
            }

    char v31 = (os_log_t *)sub_138E8(16);
    uint64_t v29 = *v31;
    if (*v31)
    {
      if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
      {
        if ((a1[23] & 0x80u) == 0) {
          unsigned int v32 = a1;
        }
        else {
          unsigned int v32 = *(unsigned __int8 **)a1;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 195;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v32;
        _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No clock with UID %s found!", buf, 0x1Cu);
      }

      char v30 = 0LL;
      LOBYTE(v29) = 0;
    }

    else
    {
      char v30 = 0LL;
    }

    if (v3) {
LABEL_61:
    }
      operator delete(v3);
  }

  else
  {
    uint64_t v27 = (os_log_t *)sub_138E8(16);
    char v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 172;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No clock devices in the system ?", buf, 0x12u);
    }

    LOBYTE(v29) = 0;
    char v30 = 0LL;
  }

  return v29 | (((unint64_t)v1 & 0xFFFFFF) << 8) | (v30 << 32);
}

      if (v28 > (v26.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v29.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_55:
        std::condition_variable::__do_timed_wait(&v71, &__lk, v29);
        std::chrono::steady_clock::now();
        goto LABEL_56;
      }

    char v28 = sub_546E0();
    uint64_t v29 = (std::__shared_weak_count *)a1[1];
    *(void *)buf = *a1;
    *(void *)&buf[8] = v29;
    if (v29)
    {
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        char v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }

    sub_1013F4(v28, (uint64_t *)buf);
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  return sub_E9064(v37);
}

LABEL_28:
  if (HIDWORD(v7) != 1986884455 || (_DWORD)v6 != 1768764005 && (_DWORD)v6 != 1768780647) {
    goto LABEL_33;
  }
  return v6;
}

      BOOL v14 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 128), a2, a3, a4);
      if ((_DWORD)v14)
      {
        unsigned __int16 v15 = v14;
        unsigned __int16 v16 = (os_log_t *)sub_138E8(16);
        uint64_t v17 = *v16;
        if (*v16)
        {
          uint64_t result = os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_2CA1C(v32, v15);
          if (v33 >= 0) {
            uint64_t v18 = v32;
          }
          else {
            uint64_t v18 = (void **)v32[0];
          }
          char v19 = *(_DWORD *)(a1 + 128);
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v31, a1);
          uint64_t v20 = v31[0];
          sub_2CA1C(&__p, a2->mSelector);
          if (v30 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          AudioObjectPropertyScope mScope = a2->mScope;
          char v23 = a2->mElement;
          *(_DWORD *)buf = 136317186;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1946;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v15;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v18;
          int v35 = 1024;
          __int16 v36 = v19;
          __int16 v37 = 2112;
          __int16 v38 = v20;
          uint64_t v39 = 2080;
          unsigned int v40 = p_p;
          int v41 = 1024;
          uint64_t v42 = mScope;
          __int16 v43 = 1024;
          std::string::size_type v44 = v23;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mDeviceID %d (uid %@); selector %s; scope %u; element %u",
            buf,
            0x48u);
          if (v30 < 0) {
            operator delete(__p);
          }
          sub_19DFC((uint64_t)v31);
          if (v33 < 0) {
            operator delete(v32[0]);
          }
        }

        return 0LL;
      }

      return 1LL;
    }

    if (mSelector == 1953002354 || mSelector == 1986225268) {
      goto LABEL_19;
    }
    uint64_t v9 = 1986225266;
  }

  else if (mSelector > 1635153006)
  {
    if (mSelector == 1635153007 || mSelector == 1684103987) {
      goto LABEL_19;
    }
    uint64_t v9 = 1886807154;
  }

  else
  {
    if (mSelector == 1165513555 || mSelector == 1633973868) {
      goto LABEL_19;
    }
    uint64_t v9 = 1635152995;
  }

  if (mSelector != v9) {
    goto LABEL_28;
  }
LABEL_19:
  sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1923);
  unint64_t v11 = *(void *)&buf[8];
  if (*(_BYTE **)&buf[8] == buf)
  {
    LOBYTE(v12) = 1;
  }

  else
  {
    unint64_t v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, AudioObjectPropertyAddress *))(**(void **)(v11 + 16) + 16LL))( *(void *)(v11 + 16),  a2))
      {
        v12 &= (*(uint64_t (**)(void, AudioObjectPropertyAddress *, OSStatus (__cdecl *)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *))(**(void **)(v11 + 16) + 64LL))( *(void *)(v11 + 16),  a2,  a3,  a4);
      }

      unint64_t v11 = *(void *)(v11 + 8);
    }

    while ((_BYTE *)v11 != buf);
  }

  sub_1BB88((uint64_t *)buf);
  return v12 & 1;
}

            unint64_t v11 = (uint64_t *)v11[1];
            if (v11 == v2) {
              break;
            }
            std::string::append(&v22, ", ", 2uLL);
          }
        }

        std::string::append(&v22, " }", 2uLL);
        if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v20 = &v22;
        }
        else {
          uint64_t v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "ObjectDestructionManager.h";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 115;
        unint64_t v26 = 2080;
        uint64_t v27 = v20;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.",  __p,  0x1Cu);
      }
    }
  }

  sub_1BB88(v2);
  return a1;
}

  if ((_BYTE)v110)
  {
    char v19 = *((float *)&v109 + 1);
    *((double *)&v101 + 1) = *((float *)&v109 + 1);
    if (!v23) {
      goto LABEL_43;
    }
    __int128 v24 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
    if (v24 != v25) {
      char v19 = v24 + (v19 + 76.0) / 78.0 * (v25 - v24);
    }
    *((double *)&v101 + 1) = v19;
  }

  else if (!v23)
  {
    goto LABEL_43;
  }

  unint64_t v26 = sub_138E8(20);
  uint64_t v27 = sub_138E8(38);
  char v28 = 0;
  uint64_t v29 = 0LL;
  *(void *)buf = 0x100000002LL;
  char v30 = *(void *)(v26 + 8);
  while (1)
  {
    char v31 = *(int *)&buf[4 * v29];
    unsigned int v32 = v28;
    if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
      break;
    }
    char v28 = 1;
    uint64_t v29 = 1LL;
    if ((v32 & 1) != 0) {
      goto LABEL_40;
    }
  }

  if ((v30 & v31) == 0) {
    unint64_t v26 = v27;
  }
LABEL_40:
  __int16 v33 = *(os_log_s **)v26;
  if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 439;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(double *)v107 = v17;
    *(_WORD *)&v107[8] = 2048;
    *(double *)&v107[10] = v19;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Volume was rescaled to match hardware range. mMinimum: %f mMaximum: %f",  buf,  0x26u);
  }

  int v25 = a2[1];
  unint64_t v26 = v25 - 1;
  uint64_t v27 = *(v25 - 1);
  char v28 = *(double *)(a1 + 144);
  if (v27 >= v28 && (uint64_t v29 = **a2, v30 = *(double *)(a1 + 152), v29 <= v30))
  {
    if (v30 < v27) {
      unint64_t v26 = (double *)(a1 + 152);
    }
    if (v29 < v28) {
      uint64_t v29 = *(double *)(a1 + 144);
    }
  }

  else
  {
    unint64_t v26 = (double *)(a1 + 152);
    uint64_t v29 = *(double *)(a1 + 144);
  }

  char v31 = *(_DWORD *)(a1 + 264);
  if (v31 == 2)
  {
    unsigned int v32 = v27;
    __int16 v33 = **a2;
  }

  else if (v31 == 1)
  {
    unsigned int v32 = v27;
    __int16 v33 = **a2;
    if (*(_BYTE *)(a1 + 311))
    {
      *(_DWORD *)buf = 1835103844;
      *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
      __int16 v34 = v28;
      *(float *)&std::string __p = v34;
      if ((*(unsigned int (**)(void, _BYTE *))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96), buf))
      {
        LODWORD(theString[0]) = 4;
        (*(void (**)(void, _BYTE *, void, void, CFStringRef *, void **))(**(void **)(a1 + 96) + 40LL))( *(void *)(a1 + 96),  buf,  0LL,  0LL,  theString,  &__p);
      }

      int v35 = *(double *)a4;
      *(float *)(a1 + 268) = v35;
      __int16 v36 = *(double *)(a1 + 152);
      __int16 v37 = v36;
      *(float *)(a1 + 272) = v37;
      int v25 = a2[1];
    }

    else if (*(double *)a4 != 0.0 || *(double *)(a4 + 8) != 0.0)
    {
      uint64_t v131 = (os_log_t *)sub_138E8(13);
      uint64_t v132 = *v131;
      if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_ERROR))
      {
        char v133 = *(double *)a4;
        std::string v134 = *(void *)(a4 + 8);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 992;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(double *)&_BYTE buf[20] = v133;
        *(_WORD *)&_BYTE buf[28] = 2048;
        *(void *)&_BYTE buf[30] = v134;
        _os_log_impl( &dword_0,  v132,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Non-zero HW volume {%f, %f} configured but physical device does not support HW volume",  buf,  0x26u);
      }

      double v135 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1013D0(v135, "Non-zero HW volume {%f, %f} configured but physical device does not support HW volume");
    }
  }

  else
  {
    __int16 v33 = v29;
    unsigned int v32 = *v26;
    *(float *)(a1 + 268) = v33;
    *(float *)(a1 + 272) = v32;
  }

  if ((char *)v25 - (char *)*a2 == 16)
  {
    if (v11) {
      __int16 v38 = v7;
    }
    else {
      __int16 v38 = 0;
    }
    if (*(void *)(a1 + 192)) {
      uint64_t v39 = *(_DWORD *)(*(void *)(a1 + 176) + 28LL);
    }
    else {
      uint64_t v39 = 0;
    }
    std::string::size_type v44 = sub_64578(a1 + 168);
    *(_DWORD *)(a1 + 204) = v38;
    if (v38 > 0xF)
    {
      char v47 = 1.0;
      uint64_t v46 = 2.0;
      uint64_t v45 = 1;
    }

    else
    {
      uint64_t v45 = byte_4034F0[v38];
      uint64_t v46 = *(float *)&aKcajmlovdlovBd[4 * v38 + 152];
      char v47 = flt_4016F0[v38];
    }

    uint64_t v48 = *(void **)(a1 + 184);
    *(_BYTE *)(a1 + 200) = v45;
    *(float *)(a1 + 208) = v46;
    *(float *)(a1 + 212) = v47;
    sub_32C8C(v48);
    *(void *)(a1 + 176) = a1 + 184;
    *(void *)(a1 + 184) = 0LL;
    *(void *)(a1 + 192) = 0LL;
    *(float *)&uint64_t v49 = v33;
    sub_886F8(a1 + 168, v39, v44, v49, v32);
    uint64_t v50 = (os_log_t *)sub_138E8(18);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1020;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(double *)&_BYTE buf[20] = v33;
      *(_WORD *)&_BYTE buf[28] = 2048;
      *(double *)&_BYTE buf[30] = v32;
      *(_WORD *)&_BYTE buf[38] = 1024;
      *(_DWORD *)&buf[40] = v38;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Reconfiguring volume curve with dB range {%f, %f} and transfer function %u",  buf,  0x2Cu);
    }
  }

  else
  {
    sub_157B38((uint64_t)buf, a2);
    int v41 = a1 + 184;
    unsigned int v40 = *(void **)(a1 + 184);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)buf;
    sub_32C8C(v40);
    uint64_t v42 = *(void **)&buf[16];
    *(void *)(a1 + 176) = *(void *)&buf[8];
    *(void *)(a1 + 184) = v42;
    __int16 v43 = *(void *)&buf[24];
    *(void *)(a1 + 192) = *(void *)&buf[24];
    if (v43)
    {
      v42[2] = v41;
      *(void *)&buf[8] = &buf[16];
      *(void *)&buf[16] = 0LL;
      *(void *)&uint8_t buf[24] = 0LL;
      uint64_t v42 = 0LL;
    }

    else
    {
      *(void *)(a1 + 176) = v41;
    }

    *(_OWORD *)(a1 + 200) = *(_OWORD *)&buf[32];
    sub_32C8C(v42);
  }

  char v53 = v9 + 10;
  uint64_t v52 = (void *)v9[10];
  if (v52)
  {
    *(void *)(a1 + 368) = v52;
    operator delete(v52);
    os_log_t *v53 = 0LL;
    v9[11] = 0LL;
    v9[12] = 0LL;
  }

  *(_OWORD *)char v53 = *(_OWORD *)a2;
  *(void *)(a1 + 376) = a2[2];
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v54 = *(std::__shared_weak_count **)(a1 + 288);
  if (v54)
  {
    uint64_t v55 = std::__shared_weak_count::lock(v54);
    *(void *)&buf[8] = v55;
    if (v55)
    {
      uint64_t v56 = v55;
      char v57 = (uint64_t *)*v9;
      *(void *)buf = v57;
      if (v57) {
        (*(void (**)(uint64_t *))(*v57 + 208))(v57);
      }
      int v58 = (unint64_t *)&v56->__shared_owners_;
      do
        std::string::size_type v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }

  int v60 = *(void *)(a1 + 96);
  *(_DWORD *)buf = 1986225518;
  *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
  int v61 = sub_5C2F8(v60);
  *((void *)&v64 + 1) = v62;
  *(void *)&int v64 = v61;
  char v63 = v64 >> 32;
  if ((v63 & 0xFF00000000LL) == 0)
  {
    int v65 = *(_DWORD *)(a1 + 264);
    LODWORD(v63) = v65 != 2
                && (v65 != 1 || *(_BYTE *)(a1 + 311) || *(float *)(a1 + 268) != 0.0 || *(float *)(a1 + 272) != 0.0);
  }

  *(_DWORD *)(a1 + 384) = v63;
  int v66 = (os_log_t *)sub_138E8(18);
  std::string::size_type v67 = *v66;
  if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_DEFAULT))
  {
    int v68 = *(_DWORD *)(a1 + 384);
    (*(void (**)(CFStringRef *__return_ptr))(**(void **)(a1 + 96) + 128LL))(theString);
    sub_48E98(&__p, theString[0]);
    if (v139 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1054;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&_BYTE buf[20] = v68;
    *(_WORD *)&uint8_t buf[24] = 2080;
    *(void *)&buf[26] = p_p;
    _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeConfirmations : %u for physical device %s",  buf,  0x22u);
    if (v139 < 0) {
      operator delete(__p);
    }
    sub_19DFC((uint64_t)theString);
  }

  if (*(void *)(a1 + 320) && !*(_BYTE *)(a1 + 311))
  {
    int v85 = *(_DWORD *)(a1 + 88);
    __int16 v86 = -24.0;
    if (v85 > 1886152046)
    {
      if (v85 != 1886152047)
      {
        if (v85 == 1886545251) {
          goto LABEL_152;
        }
        if (v85 == 1886613611)
        {
          __int16 v86 = -30.0;
          goto LABEL_152;
        }

        goto LABEL_150;
      }
    }

    else
    {
      if (v85 == 1885888867) {
        goto LABEL_152;
      }
      if (v85 != 1885892706)
      {
LABEL_150:
        v97 = 0xC043000000000000LL;
        goto LABEL_151;
      }
    }

    v97 = 0xC040000000000000LL;
LABEL_151:
    __int16 v86 = *(double *)&v97;
LABEL_152:
    sub_157A88((uint64_t)buf, 0, v86, 0.0);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)buf;
    int v98 = a1 + 232;
    sub_32C8C(*(void **)(a1 + 232));
    std::string::size_type v99 = *(void **)&buf[16];
    *(void *)(a1 + 2memset(buf, 0, 24) = *(void *)&buf[8];
    *(void *)(a1 + 232) = v99;
    int v100 = *(void *)&buf[24];
    *(void *)(a1 + 240) = *(void *)&buf[24];
    if (v100)
    {
      v99[2] = v98;
      *(void *)&buf[8] = &buf[16];
      *(void *)&buf[16] = 0LL;
      *(void *)&uint8_t buf[24] = 0LL;
      std::string::size_type v99 = 0LL;
    }

    else
    {
      *(void *)(a1 + 2memset(buf, 0, 24) = v98;
    }

    *(_OWORD *)(a1 + 248) = *(_OWORD *)&buf[32];
    sub_32C8C(v99);
    uint64_t v101 = (os_log_t *)sub_138E8(18);
    v102 = *v101;
    if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a1 + 240)) {
        int v103 = *(float *)(*(void *)(a1 + 224) + 36LL);
      }
      else {
        int v103 = 0.0;
      }
      v109 = sub_6461C(a1 + 216);
      unsigned int v110 = *(_DWORD *)(a1 + 252);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1070;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(double *)&_BYTE buf[20] = v103;
      *(_WORD *)&_BYTE buf[28] = 2048;
      *(double *)&_BYTE buf[30] = v109;
      *(_WORD *)&_BYTE buf[38] = 1024;
      *(_DWORD *)&buf[40] = v110;
      _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d External volume handler set but device does not support volume curve property. Using fallback curve wi th dB range {%f, %f} and transfer function %u.",  buf,  0x2Cu);
    }

    return;
  }

  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  char v70 = *(void **)(a1 + 176);
  OSStatus v71 = (void *)(a1 + 184);
  if (*(void *)(a1 + 240))
  {
    unsigned int v73 = (uint64_t **)(a1 + 232);
    __int16 v72 = *(void *)(a1 + 232);
    int v74 = *(uint64_t **)(a1 + 224);
    *(void *)(a1 + 2memset(buf, 0, 24) = a1 + 232;
    *(void *)(v72 + 16) = 0LL;
    *(void *)(a1 + 232) = 0LL;
    *(void *)(a1 + 240) = 0LL;
    if (v74[1]) {
      std::string::size_type v75 = (uint64_t *)v74[1];
    }
    else {
      std::string::size_type v75 = v74;
    }
    if (v75)
    {
      int v76 = sub_68080((uint64_t)v75);
      if (v70 == v71)
      {
        char v70 = (void *)(a1 + 184);
      }

      else
      {
        std::string v77 = v75;
        uint64_t v78 = v70;
        do
        {
          std::string::size_type v75 = v76;
          AudioObjectPropertyElement v79 = *(void *)((char *)v78 + 28);
          *(uint64_t *)((char *)v77 + 28) = v79;
          *(uint64_t *)((char *)v77 + 36) = *(void *)((char *)v78 + 36);
          char v80 = *v73;
          double v81 = (uint64_t **)(a1 + 232);
          uint64_t v82 = (uint64_t **)(a1 + 232);
          if (*v73)
          {
            do
            {
              while (1)
              {
                double v81 = (uint64_t **)v80;
                char v80 = (uint64_t *)*v80;
                uint64_t v82 = v81;
                if (!*v81) {
                  goto LABEL_107;
                }
              }

              char v80 = (uint64_t *)v80[1];
            }

            while (v80);
            uint64_t v82 = v81 + 1;
          }

        if (v3 != v10)
        {
          BOOL v14 = *v10;
          if ((uint64_t *)*v10 == v3)
          {
            uint64_t v17 = 1LL;
          }

          else
          {
            unsigned __int16 v15 = -1LL;
            unsigned __int16 v16 = v3;
            do
            {
              unsigned __int16 v16 = (uint64_t *)v16[1];
              ++v15;
            }

            while (v16 != (uint64_t *)v14);
            uint64_t v17 = v15 + 2;
          }

          v7 -= v17;
          int v25 = v7;
          v4 += v17;
          __int16 v36 = v4;
          uint64_t v18 = *v3;
          *(void *)(v18 + 8) = *(void *)(v14 + 8);
          **(void **)(v14 + 8) = v18;
          char v19 = v35[0];
          *(void *)(v35[0] + 8) = v3;
          os_log_t *v3 = v19;
          v35[0] = v14;
          *(void *)(v14 + 8) = v35;
        }

        if ((v13 & 1) != 0) {
          goto LABEL_15;
        }
      }

      __int16 v10 = (uint64_t *)v10[1];
LABEL_15:
      unsigned int v3 = v10;
    }

    while (v10 != &v23);
  }

  sub_1BB88(v35);
  uint64_t v20 = v25;
  sub_1BB88(&v23);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v32[0]);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }

  return v20 != 0;
}

  if (v3 >= 3)
  {
    __int128 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "Device_Baseband_Voice_Aspen.cpp";
      char v30 = 1024;
      char v31 = 406;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unsupported telephony value change type",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported telephony value change type");
  }

  buf[0] = *(_DWORD *)&aTdcvrdcvrsht[4 * v3];
  *(void *)&buf[1] = 1735159650LL;
  uint64_t result = (void *)sub_67420((void *)(v4 + 496), (uint64_t)buf);
  if ((_DWORD)result) {
    return sub_67564((void *)(v4 + 496), buf);
  }
  return result;
}

            unsigned __int16 v13 = (uint64_t *)v13[1];
            if (v13 == v2) {
              break;
            }
            std::string::append(&v24, ", ", 2uLL);
          }
        }

        std::string::append(&v24, " }", 2uLL);
        if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v22 = &v24;
        }
        else {
          uint64_t v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "ObjectDestructionManager.h";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 115;
        char v28 = 2080;
        uint64_t v29 = v22;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.",  __p,  0x1Cu);
      }
    }
  }

  sub_1BB88(v2);
  return a1;
}

void sub_6D28C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6D2AC(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 1751414370)
  {
    if (a1 > 1651795059)
    {
      if (a1 > 1684108898)
      {
        if (a1 == 1684108899) {
          return result;
        }
        int v3 = 1684628340;
      }

      else
      {
        if (a1 == 1651795060) {
          return result;
        }
        int v3 = 1668314723;
      }
    }

    else if (a1 > 1635213688)
    {
      if (a1 == 1635213689) {
        return result;
      }
      int v3 = 1651794544;
    }

    else
    {
      if (a1 == 845504882) {
        return result;
      }
      int v3 = 1635087471;
    }

    goto LABEL_25;
  }

  if (a1 <= 1918986610)
  {
    if (a1 > 1752396913)
    {
      if (a1 == 1752396914) {
        return result;
      }
      int v3 = 1886352244;
    }

    else
    {
      if (a1 == 1751414371) {
        return result;
      }
      int v3 = 1752132965;
    }

    goto LABEL_25;
  }

  if (a1 <= 1986357345)
  {
    if (a1 == 1918986611) {
      return result;
    }
    int v3 = 1969840752;
    goto LABEL_25;
  }

  if (a1 != 1986357346 && a1 != 1987012963)
  {
    int v3 = 2003329648;
LABEL_25:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

void sub_6D424(std::string *a1, const __CFDictionary **a2, uint64_t a3)
{
  if (CFDictionaryContainsKey(*a2, @"initiation device uid"))
  {
    *(void *)buf = 0LL;
    sub_51EE8(*a2, @"initiation device uid", (const __CFDictionary **)buf);
    sub_48E98(&v108, *(CFStringRef *)buf);
  }

  else
  {
    sub_7D084(&v108, "");
  }

  if (CFDictionaryContainsKey(*a2, @"activation device uid"))
  {
    *(void *)buf = 0LL;
    sub_51EE8(*a2, @"activation device uid", (const __CFDictionary **)buf);
    sub_48E98(&v105, *(CFStringRef *)buf);
  }

  else
  {
    sub_7D084(&v105, "");
  }

  uint64_t v6 = v109;
  if ((v110 & 0x80u) == 0) {
    uint64_t v7 = v110;
  }
  else {
    uint64_t v7 = v109;
  }
  if (v7) {
    unsigned __int16 v8 = &v108;
  }
  else {
    unsigned __int16 v8 = &v105;
  }
  uint64_t v9 = *((unsigned __int8 *)v8 + 23);
  int v10 = (char)v9;
  if (!v7) {
    uint64_t v6 = v106;
  }
  if ((v9 & 0x80u) != 0LL) {
    uint64_t v9 = v6;
  }
  if (!v9) {
    goto LABEL_180;
  }
  if ((int)a3 > 1668047475)
  {
    if ((_DWORD)a3 == 1751414371) {
      goto LABEL_34;
    }
    if ((_DWORD)a3 != 1668047476)
    {
LABEL_30:
      int v12 = sub_E450C(a3) ^ 1;
      if ((_DWORD)a3 == 1684108899) {
        LOBYTE(v12) = 0;
      }
      if ((v12 & 1) == 0)
      {
        LOBYTE(v10) = *((_BYTE *)v8 + 23);
LABEL_34:
        if ((v10 & 0x80) != 0)
        {
          uint64_t v17 = (unint64_t *)&v106;
          if (v7) {
            uint64_t v17 = (unint64_t *)&v109;
          }
          sub_24054(a1, *v8, *v17);
        }

        else
        {
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
          a1->__r_.__value_.__l.__cap_ = (std::string::size_type)v8[2];
        }

        goto LABEL_181;
      }

      uint64_t v18 = sub_138E8(2);
      uint64_t v19 = sub_138E8(34);
      char v20 = 0;
      uint64_t v21 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v22 = *(void *)(v18 + 8);
      while (1)
      {
        uint64_t v23 = *(int *)&buf[4 * v21];
        char v24 = v20;
        if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
          break;
        }
        char v20 = 1;
        uint64_t v21 = 1LL;
        if ((v24 & 1) != 0) {
          goto LABEL_170;
        }
      }

      if ((v22 & v23) == 0) {
        uint64_t v18 = v19;
      }
LABEL_170:
      double v87 = *(os_log_s **)v18;
      if (v87 && os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(&v116, a3);
        __int16 v88 = (v118 & 0x80u) == 0 ? &v116 : (void **)v116;
        AudioObjectPropertyElement v89 = *((char *)v8 + 23) >= 0 ? v8 : (void **)*v8;
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 548;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v88;
        *(_WORD *)&_BYTE buf[28] = 2080;
        uint64_t v121 = (std::string *)v89;
        _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Trigger device ID specified with an unhandled trigger value '%s'. Device ID '%s' will be ignored.",  buf,  0x26u);
      }

LABEL_180:
      a1->__r_.__value_.__r.__words[0] = 0LL;
      a1->__r_.__value_.__l.__size_ = 0LL;
      a1->__r_.__value_.__l.__cap_ = 0LL;
      goto LABEL_181;
    }
  }

  else if ((_DWORD)a3 != 1651794544)
  {
    if ((_DWORD)a3 == 1651795060) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }

  if (v10 >= 0) {
    unint64_t v11 = (const char *)v8;
  }
  else {
    unint64_t v11 = (const char *)*v8;
  }
  if (sscanf(v11, "%02X:%02X:%02X:%02X:%02X:%02X", buf, &buf[4], &buf[8], &buf[12], &buf[16], &buf[20]) == 6)
  {
    if (*((char *)v8 + 23) < 0)
    {
      int v25 = (unint64_t *)&v106;
      if (v7) {
        int v25 = (unint64_t *)&v109;
      }
      sub_24054(a1, *v8, *v25);
    }

    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      a1->__r_.__value_.__l.__cap_ = (std::string::size_type)v8[2];
    }

    unint64_t v26 = (char *)&v116;
    sub_7D084(&v116, "-tsco");
    int64_t size = a1->__r_.__value_.__s.__size_;
    if ((size & 0x80u) == 0LL) {
      char v28 = a1;
    }
    else {
      char v28 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    unsigned __int8 v29 = v118;
    if ((v118 & 0x80u) == 0)
    {
      int64_t v30 = v118;
    }

    else
    {
      unint64_t v26 = (char *)v116;
      int64_t v30 = (int64_t)v117;
    }

    if (v30)
    {
      if ((size & 0x80u) != 0LL) {
        int64_t size = a1->__r_.__value_.__l.__size_;
      }
      if (size >= v30)
      {
        char v57 = (char *)v28 + size;
        int v58 = *v26;
        std::string::size_type v59 = v28;
        do
        {
          int64_t v60 = size - v30;
          if (v60 == -1) {
            break;
          }
          int v61 = (char *)memchr(v59, v58, v60 + 1);
          if (!v61) {
            break;
          }
          int v62 = v61;
          if (!memcmp(v61, v26, v30))
          {
            break;
          }

          std::string::size_type v59 = (std::string *)(v62 + 1);
          int64_t size = v57 - (v62 + 1);
        }

        while (size >= v30);
      }

      uint64_t v31 = sub_138E8(2);
      uint64_t v32 = sub_138E8(34);
      char v33 = 0;
      uint64_t v34 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v35 = *(void *)(v31 + 8);
      while (1)
      {
        uint64_t v36 = *(int *)&buf[4 * v34];
        char v37 = v33;
        if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
          break;
        }
        char v33 = 1;
        uint64_t v34 = 1LL;
        if ((v37 & 1) != 0) {
          goto LABEL_153;
        }
      }

      if ((v35 & v36) == 0) {
        uint64_t v31 = v32;
      }
      uint64_t v35 = *(void *)(v31 + 8);
LABEL_153:
      if ((v35 & 1) != 0)
      {
        int v83 = *(os_log_s **)v31;
        if (v83)
        {
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            __int16 v84 = &v116;
            if ((v118 & 0x80u) != 0) {
              __int16 v84 = v116;
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 48;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v84;
            _os_log_impl(&dword_0, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding %s to device UID", buf, 0x1Cu);
          }
        }
      }

      if ((v118 & 0x80u) == 0) {
        int v85 = (const std::string::value_type *)&v116;
      }
      else {
        int v85 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v86 = v118;
      }
      else {
        std::string::size_type v86 = (std::string::size_type)v117;
      }
      std::string::append(a1, v85, v86);
      unsigned __int8 v29 = v118;
    }

  sub_FF3B8(v90[1]);
}

LABEL_140:
        ++v78;
      }

      while (v78 != v77);
    }

    else
    {
      AudioObjectPropertyElement v79 = (unsigned __int8 *)v74 + v72;
    }

  outData[1] = 0LL;
  int v125 = 0LL;
  outData[0] = &outData[1];
  if (v52 == v53)
  {
    BOOL v90 = &outData[1];
  }

  else
  {
    AudioObjectPropertyElement v89 = v52;
    do
    {
      sub_76F9C((uint64_t **)outData, (uint64_t *)&outData[1], v89, *v89);
      v89 += 2;
    }

    while (v89 != v53);
    BOOL v90 = (void **)outData[0];
  }

  *(void *)&buf[8] = 0LL;
  *(void *)&buf[16] = 0LL;
  *(void *)buf = &buf[8];
  std::string::size_type v91 = *v120;
  if (*v120 != (uint64_t *)v11 && v90 != &outData[1])
  {
    uint64_t v93 = (uint64_t *)&buf[8];
    do
    {
      uint64_t v94 = *((double *)v91 + 4);
      char v95 = *((double *)v90 + 4);
      if (v94 >= v95)
      {
        if (v95 >= v94)
        {
          uint64_t v98 = sub_76F9C((uint64_t **)buf, v93, (_OWORD *)v91 + 2, v94);
          char v99 = (uint64_t *)v98[1];
          if (v99)
          {
            do
            {
              uint64_t v93 = v99;
              char v99 = (uint64_t *)*v99;
            }

            while (v99);
          }

          else
          {
            do
            {
              uint64_t v93 = (uint64_t *)v98[2];
              int v10 = *v93 == (void)v98;
              uint64_t v98 = v93;
            }

            while (!v10);
          }

          int v100 = (uint64_t *)v91[1];
          if (v100)
          {
            do
            {
              std::string::size_type v91 = v100;
              int v100 = (uint64_t *)*v100;
            }

            while (v100);
          }

          else
          {
            do
            {
              uint64_t v101 = v91;
              std::string::size_type v91 = (uint64_t *)v91[2];
            }

            while ((uint64_t *)*v91 != v101);
          }
        }

        v102 = (void **)v90[1];
        if (v102)
        {
          do
          {
            BOOL v90 = v102;
            v102 = (void **)*v102;
          }

          while (v102);
        }

        else
        {
          do
          {
            int v103 = v90;
            BOOL v90 = (void **)v90[2];
          }

          while (*v90 != v103);
        }
      }

      else
      {
        uint64_t v96 = (uint64_t *)v91[1];
        if (v96)
        {
          do
          {
            std::string::size_type v91 = v96;
            uint64_t v96 = (uint64_t *)*v96;
          }

          while (v96);
        }

        else
        {
          do
          {
            uint64_t v97 = v91;
            std::string::size_type v91 = (uint64_t *)v91[2];
          }

          while ((uint64_t *)*v91 != v97);
        }
      }
    }

    while (v91 != (uint64_t *)v11 && v90 != &outData[1]);
  }

  sub_32C8C(v120[1]);
  unint64_t v104 = *(uint64_t **)&buf[8];
  *uint64_t v120 = *(uint64_t **)buf;
  v120[1] = v104;
  int v105 = *(void *)&buf[16];
  v120[2] = *(uint64_t **)&buf[16];
  if (v105)
  {
    v104[2] = (uint64_t)v11;
    *(void *)buf = &buf[8];
    *(void *)&buf[8] = 0LL;
    *(void *)&buf[16] = 0LL;
    unint64_t v104 = 0LL;
  }

  else
  {
    *uint64_t v120 = (uint64_t *)v11;
  }

  sub_32C8C(v104);
  sub_32C8C((void *)outData[1]);
  if (v52) {
    operator delete(v52);
  }
LABEL_177:
  uint64_t v106 = *v120;
  if (*v120 != (uint64_t *)v11)
  {
    do
    {
      char v107 = v14;
      if (v14 == v15)
      {
LABEL_182:
        uint64_t v109 = (uint64_t *)v106[1];
        unsigned __int8 v110 = (uint64_t *)v118;
        if (v109)
        {
          do
          {
            uint64_t v111 = v109;
            uint64_t v109 = (uint64_t *)*v109;
          }

          while (v109);
        }

        else
        {
          do
          {
            uint64_t v111 = (uint64_t *)v106[2];
            int v10 = *v111 == (void)v106;
            uint64_t v106 = v111;
          }

          while (!v10);
        }
      }

      else
      {
        while (1)
        {
          v108 = *(void *)v107;
          if (!sub_76C6C(*(void *)(*(void *)v107 + 104LL), *((double *)v106 + 4))
            || !sub_76C6C(*(void *)(v108 + 104), *((double *)v106 + 5)))
          {
            break;
          }

          v107 += 8;
          if (v107 == v15) {
            goto LABEL_182;
          }
        }

        unint64_t v112 = (uint64_t *)v106[1];
        uint64_t v113 = v106;
        if (v112)
        {
          do
          {
            uint64_t v111 = v112;
            unint64_t v112 = (uint64_t *)*v112;
          }

          while (v112);
        }

        else
        {
          do
          {
            uint64_t v111 = (uint64_t *)v113[2];
            int v10 = *v111 == (void)v113;
            uint64_t v113 = v111;
          }

          while (!v10);
        }

        unsigned __int8 v110 = (uint64_t *)v118;
        if (*v120 == v106) {
          *uint64_t v120 = v111;
        }
        uint64_t v114 = v120[1];
        v120[2] = (uint64_t *)((char *)v120[2] - 1);
        sub_911E8(v114, v106);
        operator delete(v106);
      }

      uint64_t v106 = v111;
    }

    while (v111 != v110);
  }

  if (v14) {
    operator delete(v14);
  }
}

void sub_6DFA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, char a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a27);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_6E138(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 1668049006)
  {
    if (a1 > 1668051816)
    {
      if (a1 == 1668051817) {
        return result;
      }
      unsigned __int16 v3 = 29552;
    }

    else
    {
      if (a1 == 1668049007) {
        return result;
      }
      unsigned __int16 v3 = 28011;
    }

    goto LABEL_10;
  }

  if (a1 != 1668047476 && a1 != 1668047728)
  {
    unsigned __int16 v3 = 25702;
LABEL_10:
    if (a1 != (v3 | 0x636C0000)) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_6E1CC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, int a5)
{
  int v10 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    int v49 = (os_log_t *)sub_138E8(13);
    uint64_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string::size_type v72 = 136315394;
      *(void *)&v72[4] = "RoutingManager.cpp";
      *(_WORD *)&v72[12] = 1024;
      *(_DWORD *)&v72[14] = 2078;
      _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  v72,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(_DWORD *)a1 = 2;
  sub_53118((uint64_t)v72, a2, a3);
  sub_6EF6C(&v62, a4);
  uint64_t v11 = *(void *)(*a2 + 8);
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v12 = *a2 + 8;
  do
  {
    unsigned int v13 = *(_DWORD *)(v11 + 32);
    BOOL v14 = v13 >= *(_DWORD *)v72;
    if (v13 >= *(_DWORD *)v72) {
      unsigned __int16 v15 = (uint64_t *)v11;
    }
    else {
      unsigned __int16 v15 = (uint64_t *)(v11 + 8);
    }
    if (v14) {
      uint64_t v12 = v11;
    }
    uint64_t v11 = *v15;
  }

  while (*v15);
  if (v12 == *a2 + 8 || *(_DWORD *)v72 < *(_DWORD *)(v12 + 32))
  {
LABEL_13:
    int v16 = 2;
LABEL_14:
    uint64_t v17 = sub_138E8(8);
    uint64_t v18 = sub_138E8(34);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = (int)buf[v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_20;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_20:
    char v24 = *(os_log_s **)v17;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      sub_2DBA00(&__p, (uint64_t)v72);
      int v25 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2121;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v25;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = v16;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d For %s: failed with result %d", (uint8_t *)buf, 0x22u);
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        unint64_t v26 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_27:
        operator delete(v26);
        goto LABEL_100;
      }
    }

    goto LABEL_100;
  }

  memset(&v61, 0, sizeof(v61));
  memset(buf, 0, 24);
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(buf[8]) = 0;
  int data = 3;
  *((void *)&v68 + 1) = 0LL;
  uint64_t v69 = 0LL;
  *(void *)&__int128 v68 = (char *)&v68 + 8;
  int v70 = 44739242;
  CFTypeRef cf = 0LL;
  if (a5)
  {
    if (a5 == 1)
    {
      LODWORD(v60.__r_.__value_.__l.__data_) = 1885544823;
      LODWORD(__p.__r_.__value_.__l.__data_) = 3;
      sub_7A22C((uint64_t)&__p.__r_.__value_.__l.__size_, (unsigned int *)&v60, 1LL);
      int data = (int)__p.__r_.__value_.__l.__data_;
      sub_32C8C(*((void **)&v68 + 1));
      int64_t cap = (void *)__p.__r_.__value_.__l.__cap_;
      __int128 v68 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      uint64_t v69 = v65;
      if (v65)
      {
        *(void *)(__p.__r_.__value_.__l.__cap_ + 16) = (char *)&v68 + 8;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__l.__cap_;
        __p.__r_.__value_.__l.__cap_ = 0LL;
        uint64_t v65 = 0LL;
        int64_t cap = 0LL;
      }

      else
      {
        *(void *)&__int128 v68 = (char *)&v68 + 8;
      }

      sub_32C8C(cap);
    }

    else
    {
      if (a5 != 2)
      {
        unint64_t v55 = (os_log_t *)sub_138E8(13);
        uint64_t v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 985;
          WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(__p.__r_.__value_.__r.__words[2]) = a5;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Bad ActivePortsFilter passed to function: %u.",  (uint8_t *)&__p,  0x18u);
        }

        char v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v57, "Bad ActivePortsFilter passed to function: %u.");
      }

      int v70 = 44673706;
    }
  }

  char v28 = (char *)operator new(0x208uLL);
  *(void *)char v28 = off_4709F0;
  *(_OWORD *)(v28 + 8) = *(_OWORD *)v72;
  sub_86550((uint64_t *)v28 + 3, (uint64_t)&v75);
  sub_121604((uint64_t *)v28 + 6, (uint64_t)&v73);
  sub_128AF0((uint64_t)(v28 + 72), v74);
  sub_86550((uint64_t *)v28 + 12, (uint64_t)v76);
  *((_DWORD *)v28 + 30) = v76[8];
  sub_128B98((uint64_t)(v28 + 128), &v72[16]);
  *((_DWORD *)v28 + 38) = v76[10];
  if (SHIBYTE(v78) < 0)
  {
    sub_24054(v28 + 160, (void *)v77, *((unint64_t *)&v77 + 1));
  }

  else
  {
    *((_OWORD *)v28 + 10) = v77;
    *((void *)v28 + 22) = v78;
  }

  *((void *)v28 + 23) = v79;
  sub_54070((void *)v28 + 24, &v80);
  v28[360] = v81;
  *((void *)v28 + 47) = 0LL;
  *((void *)v28 + 48) = 0LL;
  *((void *)v28 + 46) = 0LL;
  sub_128C40((void *)v28 + 46, v62, v63, 0x6FB586FB586FB587LL * ((v63 - v62) >> 3));
  *((void *)v28 + 51) = 0LL;
  *((void *)v28 + 52) = 0LL;
  *((void *)v28 + 49) = a2;
  *((void *)v28 + 50) = v28 + 408;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v28 + 8);
  __p.__r_.__value_.__s.__data_[16] = 0;
  __p.__r_.__value_.__s.__data_[20] = 0;
  sub_71B98((uint64_t **)v28 + 50, (uint64_t)&__p);
  if (*((_DWORD *)v28 + 30) == 1684366192)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v28 + 8);
    __p.__r_.__value_.__s.__data_[16] = 0;
    __p.__r_.__value_.__s.__data_[20] = 0;
    sub_71C38((uint64_t **)v28 + 50, 1986291305LL, (uint64_t)&__p);
  }

  *(void *)char v28 = off_470A50;
  *((void *)v28 + 54) = 0LL;
  *((void *)v28 + 55) = 0LL;
  *((void *)v28 + 53) = 0LL;
  sub_7A5B8( (void *)v28 + 53,  *(const void **)buf,  *(uint64_t *)&buf[2],  (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 2);
  *((void *)v28 + 56) = *(void *)&buf[6];
  v28[456] = buf[8];
  *((_DWORD *)v28 + 116) = data;
  sub_86550((uint64_t *)v28 + 59, (uint64_t)&v68);
  *((_DWORD *)v28 + 1memset(buf, 0, 24) = v70;
  CFTypeRef v29 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *((void *)v28 + 63) = v29;
  *((void *)v28 + 64) = &v61;
  if (v61.__r_.__value_.__r.__words[0] != v61.__r_.__value_.__l.__size_)
  {
    BOOL v52 = (os_log_t *)sub_138E8(13);
    char v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 1731;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&__p,  0x12u);
    }

    uint64_t v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v54, "Precondition failure.");
  }

  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(*((void **)&v68 + 1));
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  sub_12FFA0((uint64_t)&__p, (std::__shared_weak_count *)a2, (uint64_t)v28, 0);
  int v30 = __p.__r_.__value_.__r.__words[1];
  if (LODWORD(__p.__r_.__value_.__r.__words[1]) == 3) {
    int v30 = 0;
  }
  *(_DWORD *)a1 = v30;
  if (!v30)
  {
    memset(buf, 0, 24);
    strcpy((char *)&buf[6], "cwdv");
    LOBYTE(buf[8]) = 0;
    int data = 3;
    *((void *)&v68 + 1) = 0LL;
    uint64_t v69 = 0LL;
    *(void *)&__int128 v68 = (char *)&v68 + 8;
    CFTypeRef cf = 0LL;
    int v70 = 44731050;
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
    uint64_t v32 = v61.__r_.__value_.__r.__words[0];
    if (v61.__r_.__value_.__r.__words[0] != v61.__r_.__value_.__l.__size_)
    {
      do
      {
        if (*(_DWORD *)(v32 + 8) == 1)
        {
          std::string::size_type v33 = *(void *)v32;
          sub_7267C((unint64_t *)&v59, v32, (uint64_t)buf);
          v60.__r_.__value_.__r.__words[0] = v33;
          sub_85A90((uint64_t *)&v60.__r_.__value_.__l.__size_, &v59);
          sub_135DF4((void **)(a1 + 8), (uint64_t *)&v60);
          sub_85B80((uint64_t *)&v60.__r_.__value_.__l.__size_);
          sub_85B80((uint64_t *)&v59);
        }

        v32 += 48LL;
      }

      while (v32 != size);
      if (cf) {
        CFRelease(cf);
      }
    }

    sub_32C8C(*((void **)&v68 + 1));
    if (*(void *)buf)
    {
      *(void *)&buf[2] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
  uint64_t v34 = (void *)__p.__r_.__value_.__l.__cap_;
  if (__p.__r_.__value_.__l.__cap_)
  {
    sub_10AF78((uint64_t *)(__p.__r_.__value_.__l.__cap_ + 16));
    operator delete(v34);
  }

  (*(void (**)(char *))(*(void *)v28 + 8LL))(v28);
  *(void *)buf = &v61;
  sub_116320((void ***)buf);
  int v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    goto LABEL_14;
  }
  uint64_t v35 = sub_138E8(8);
  if ((*(_BYTE *)(v35 + 8) & 1) != 0)
  {
    uint64_t v36 = *(os_log_s **)v35;
    if (*(void *)v35)
    {
      if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
      {
        sub_2DBA00(&v61, (uint64_t)v72);
        if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v37 = &v61;
        }
        else {
          char v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        int v58 = v37;
        memset(&v59, 0, sizeof(v59));
        std::string::append(&v59, "{ ", 2uLL);
        __int16 v38 = *(unsigned int **)(a1 + 8);
        for (uint64_t i = *(unsigned int **)(a1 + 16); v38 != i; v38 = (unsigned int *)(v42 + 24))
        {
          memset(&v60, 0, sizeof(v60));
          std::string::append(&v60, "[ ", 2uLL);
          sub_33464(&__p, v38);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v41 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v60, (const std::string::value_type *)p_p, v41);
          std::string::append(&v60, "'; PortList: ", 0xDuLL);
          uint64_t v42 = (uint64_t)(v38 + 2);
          sub_2D9BB0(&__p, v42, 1);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v43 = &__p;
          }
          else {
            __int16 v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v44 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v60, (const std::string::value_type *)v43, v44);
          std::string::append(&v60, "' ]", 3uLL);
          if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v45 = &v60;
          }
          else {
            uint64_t v45 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v46 = v60.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v46 = v60.__r_.__value_.__l.__size_;
          }
          std::string::append(&v59, (const std::string::value_type *)v45, v46);
        }

        std::string::append(&v59, " }", 2uLL);
        if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v47 = &v59;
        }
        else {
          int v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315906;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2119;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v58;
        LOWORD(buf[7]) = 2080;
        *(void *)((char *)&buf[7] + 2) = v47;
        _os_log_impl(&dword_0, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d For %s: %s", (uint8_t *)buf, 0x26u);
        if ((char)v61.__r_.__value_.__s.__size_ < 0)
        {
          unint64_t v26 = (void *)v61.__r_.__value_.__r.__words[0];
          goto LABEL_27;
        }
      }
    }
  }

LABEL_100:
  *(void *)buf = &v62;
  sub_8F2D4((void ***)buf);
  uint64_t result = sub_53068((uint64_t)v72);
  if (v10) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

          sub_1269B4((uint64_t)v37, v45, v37);
        }
      }

      if (++v15 == v61) {
        return;
      }
    }

    if (v28 == 1667329133)
    {
      sub_126C6C(v16);
      if (*(_DWORD *)(a6 + 12) != 1936683886)
      {
        std::string::size_type v33 = v16 + 16;
        uint64_t v34 = *(void **)(v16 + 24);
        uint64_t v35 = (void *)(v16 + 16);
        if (v34 != (void *)(v16 + 16))
        {
          while ((sub_126DF4((uint64_t)(v34 + 2)) & 1) == 0)
          {
            uint64_t v34 = (void *)v34[1];
            if (v34 == (void *)v33)
            {
              uint64_t v35 = (void *)(v16 + 16);
              goto LABEL_109;
            }
          }

          uint64_t v35 = (void *)(v16 + 16);
          if (v34 != (void *)v33)
          {
            unint64_t v55 = v34[1];
            uint64_t v35 = v34;
            while (v55 != v33)
            {
              if ((sub_126DF4(v55 + 16) & 1) == 0)
              {
                sub_126940((uint64_t)(v35 + 2), (__int128 *)(v55 + 16));
                uint64_t v35 = (void *)v35[1];
              }

              unint64_t v55 = *(void *)(v55 + 8);
            }
          }
        }

        char v53 = *(_DWORD *)a2;
        if (*(int *)a2 > 1668313665)
        {
          if (v53 != 1668313715)
          {
            uint64_t v54 = 29250;
LABEL_107:
            if (v53 == (v54 | 0x63700000)) {
              goto LABEL_108;
            }
LABEL_113:
            if ((sub_1CC900() & 1) == 0)
            {
              int v58 = (os_log_t *)sub_138E8(2);
              std::string v59 = *v58;
              if (*v58)
              {
                if (os_log_type_enabled(*v58, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                  uint64_t v75 = 1024;
                  int v76 = 1012;
                  _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Not a VP vX device, so using the original behavior",  buf,  0x12u);
                }
              }
            }

            std::string v60 = *(_DWORD *)a2;
            if (*(int *)a2 > 1668313665)
            {
              if (v60 == 1668313666) {
                goto LABEL_112;
              }
              std::string v61 = 29299;
            }

            else
            {
              if (v60 == 1668301427) {
                goto LABEL_112;
              }
              std::string v61 = 24946;
            }

            if (v60 != (v61 | 0x63700000))
            {
              uint64_t v62 = (os_log_t *)sub_138E8(2);
              uint64_t v63 = *v62;
              if (*v62)
              {
                if (os_log_type_enabled(*v62, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                  uint64_t v75 = 1024;
                  int v76 = 1014;
                  uint64_t v50 = "%25s:%-5d Not in a play & record category, so using the original behavior";
                  BOOL v51 = v63;
                  BOOL v52 = OS_LOG_TYPE_DEBUG;
                  goto LABEL_92;
                }
              }
            }

            goto LABEL_112;
          }
        }

        else if (v53 != 1668301427)
        {
          uint64_t v54 = 24946;
          goto LABEL_107;
        }

        unsigned __int16 v3 = (uint64_t *)v3[1];
        if (v3 == &v50) {
          goto LABEL_101;
        }
      }

      if (!sub_174514((const __CFString ***)a1, v3[2])) {
        goto LABEL_100;
      }
      uint64_t v6 = *(_WORD *)(v5 + 184);
      uint64_t v7 = *(_DWORD *)(v5 + 144);
      unsigned __int16 v8 = sub_203D48(v7);
      uint64_t v9 = *(const void **)(v5 + 248);
      uint64_t v56 = v9;
      LOBYTE(v57) = *(_BYTE *)(v5 + 256);
      if ((_BYTE)v57) {
        int v10 = v9 == 0LL;
      }
      else {
        int v10 = 1;
      }
      if (v10)
      {
        if (!v9)
        {
LABEL_34:
          sub_7F234(&v55, v9);
          sub_19DFC((uint64_t)&v56);
          char v23 = a1 + 48;
          if (v8) {
            char v23 = a1 + 128;
          }
          if ((v6 & 1) != 0) {
            char v24 = v23;
          }
          else {
            char v24 = a1 + 88;
          }
          int v25 = sub_17487C(v24, v7, (const __CFString **)&v55);
          if ((v6 & 1) != 0) {
            unint64_t v26 = 0;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26 != 1) {
            goto LABEL_71;
          }
          sub_2040F4(&v53, v5);
          uint64_t v56 = 0LL;
          uint64_t v27 = v54;
          if (!v54) {
            goto LABEL_71;
          }
          char v28 = std::__shared_weak_count::lock(v54);
          char v57 = v28;
          if (!v28)
          {
            unsigned int v40 = v27;
LABEL_70:
            std::__shared_weak_count::__release_weak(v40);
            goto LABEL_71;
          }

          CFTypeRef v29 = v28;
          int v30 = v53;
          uint64_t v56 = v53;
          std::__shared_weak_count::__release_weak(v27);
          if (!v30)
          {
LABEL_66:
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              uint64_t v42 = __ldaxr(p_shared_owners);
            while (__stlxr(v42 - 1, p_shared_owners));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              unsigned int v40 = v29;
              goto LABEL_70;
            }

    if ((v7 & 1) != 0
      || v9[1] != *(_DWORD *)(a4 + 128)
      || v11 != 1684633187 && v11 != 1987013732
      || *(_DWORD *)(a3 + 12 * v8 + 8) != *(_DWORD *)(a4 + 132))
    {
      std::string::size_type v91 = *(void **)(a4 + 344);
      *(void *)buf = *(void *)v9;
      *(_DWORD *)&buf[8] = v9[2];
      sub_67564(v91, (unsigned int *)buf);
    }

                std::string::size_type v46 = 1000 * v45.__d_.__rep_;
LABEL_101:
                if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                {
                  v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_104;
                }
              }

              v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
LABEL_104:
              std::condition_variable::__do_timed_wait(&v109, &__lk, v47);
              std::chrono::steady_clock::now();
            }

            if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v79) {
              goto LABEL_79;
            }
            continue;
          }
        }

        uint64_t v27 = 12;
        if (v26) {
          goto LABEL_70;
        }
LABEL_71:
        if (v27)
        {
          if (v27 == 12)
          {
            int v48 = sub_138E8(13);
            if ((*(_BYTE *)(v48 + 8) & 1) != 0)
            {
              int v49 = *(os_log_s **)v48;
              if (*(void *)v48)
              {
                if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
                {
                  __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                  *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                  sub_613AC((uint64_t)&v73, (unsigned int *)&__lk);
                  if (v75 >= 0) {
                    uint64_t v50 = &v73;
                  }
                  else {
                    uint64_t v50 = v73;
                  }
                  buf.AudioObjectPropertySelector mSelector = 136315906;
                  *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                  int v100 = 1024;
                  uint64_t v101 = 288;
                  v102 = 2080;
                  *(void *)int v103 = v50;
                  *(_WORD *)&v103[8] = 1024;
                  *(_DWORD *)&v103[10] = a1;
                  _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                  if (v75 < 0) {
                    operator delete(v73);
                  }
                }
              }
            }
          }

          sub_7D898((uint64_t)&__p);
          std::condition_variable::~condition_variable(&v109);
          std::mutex::~mutex(&v110);
          BOOL v51 = v86;
LABEL_125:
          if (v51) {
            operator delete(v51);
          }
          return;
        }
      }

      uint64_t v32 = 0;
      if (!v67) {
        goto LABEL_66;
      }
LABEL_65:
      __int128 v68 = v31;
      operator delete(v31);
      goto LABEL_66;
    }

    int v83 = 0LL;
    __int16 v84 = 0LL;
    int v85 = 0LL;
    BOOL v51 = v86;
    sub_7A5B8(&v83, v86, v87, (v87 - (uint64_t)v86) >> 2);
    uint64_t v80 = 0LL;
    char v81 = 0LL;
    int v82 = 0LL;
    sub_7A5B8(&v80, *a2, (uint64_t)a2[1], a2[1] - *a2);
    BOOL v52 = v83;
    char v53 = v80;
    if (v84 - v83 == v81 - v80)
    {
      uint64_t v54 = memcmp(v83, v80, v84 - v83) == 0;
      if (!v53)
      {
LABEL_133:
        if (v52)
        {
          __int16 v84 = v52;
          operator delete(v52);
          if (!v54) {
            goto LABEL_57;
          }
        }

        else if (!v54)
        {
          goto LABEL_57;
        }

        unint64_t v55 = sub_138E8(13);
        if ((*(_BYTE *)(v55 + 8) & 1) != 0)
        {
          uint64_t v56 = *(os_log_s **)v55;
          if (*(void *)v55)
          {
            if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
            {
              buf.AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              int v100 = 1024;
              uint64_t v101 = 219;
              v102 = 1024;
              *(_DWORD *)int v103 = a1;
              _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv e for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
            }
          }
        }

        goto LABEL_125;
      }
    }

    else
    {
      uint64_t v54 = 0;
      if (!v80) {
        goto LABEL_133;
      }
    }

    char v81 = v53;
    operator delete(v53);
    goto LABEL_133;
  }

  if (!v274)
  {
    uint64_t v69 = (os_log_t *)sub_138E8(19);
    int v70 = *v69;
    if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
    {
      int v71 = sub_753A8();
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingSettingsFactory_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 788;
      HIWORD(buf[4]) = 1024;
      buf[5] = v71;
      _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Product %u will load the unknown routing handlers",  (uint8_t *)buf,  0x18u);
    }

    *(void *)buf = buf;
    *(void *)&buf[2] = buf;
    *(void *)&uint8_t buf[4] = 0LL;
    std::string::size_type v72 = operator new(0x10uLL);
    *std::string::size_type v72 = &off_4745A8;
    v72[1] = 0LL;
    *((_DWORD *)v72 + 2) = 1953524833;
    uint64_t v73 = operator new(0x18uLL);
    v73[1] = buf;
    v73[2] = v72;
    *uint64_t v73 = buf;
    *(void *)buf = v73;
    *(void *)&buf[2] = v73;
    *(void *)&uint8_t buf[4] = 1LL;
    int v74 = operator new(0x10uLL);
    std::string *v74 = &off_46EA50;
    v74[1] = 0LL;
    *((_DWORD *)v74 + 2) = 1953654115;
    uint64_t v75 = operator new(0x18uLL);
    v75[1] = buf;
    v75[2] = v74;
    *uint64_t v75 = v73;
    v73[1] = v75;
    *(void *)buf = v75;
    *(void *)&uint8_t buf[4] = 2LL;
    int v76 = operator new(0x10uLL);
    *int v76 = &off_47D088;
    v76[1] = 0LL;
    *((_DWORD *)v76 + 2) = 1953524850;
    __int128 v77 = operator new(0x18uLL);
    v77[1] = buf;
    v77[2] = v76;
    unsigned __int8 *v77 = v75;
    v75[1] = v77;
    *(void *)buf = v77;
    *(void *)&uint8_t buf[4] = 3LL;
    sub_D62E0((uint64_t *)&__p);
    uint64_t v78 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      uint64_t v80 = *(void ***)buf;
      uint64_t v79 = *(void **)&buf[2];
      char v81 = **(void **)&buf[2];
      *(void *)(v81 + 8) = *(void *)(*(void *)buf + 8LL);
      *v80[1] = v81;
      int v82 = __p;
      *((void *)__p + 1) = v79;
      *uint64_t v79 = v82;
      v80[1] = &__p;
      std::string __p = v80;
      v274 = (_DWORD *)((char *)v274 + v78);
      *(void *)&uint8_t buf[4] = 0LL;
    }

    sub_D62E0((uint64_t *)buf);
  }

  int v83 = operator new(0x30uLL);
  *(void *)buf = buf;
  *(void *)&buf[2] = buf;
  *(void *)&uint8_t buf[4] = 0LL;
  __int16 v84 = v274;
  if (!v274)
  {
    os_log_s *v83 = v83;
    v83[1] = v83;
    v83[5] = 0LL;
    v83[4] = 0LL;
    v83[2] = 0LL;
    v83[3] = v83 + 4;
    v223 = (os_log_t *)sub_138E8(13);
    __int16 v224 = *v223;
    if (*v223 && os_log_type_enabled(*v223, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float64x2_t outData = 136315394;
      *(void *)&outData[4] = "RoutingHandlerDispatcher.cpp";
      *(_WORD *)&outData[12] = 1024;
      *(_DWORD *)&outData[14] = 29;
      _os_log_impl( &dword_0,  v224,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): routing handler list is empty",  outData,  0x12u);
    }

    v225 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v225, "routing handler list is empty");
  }

  int v85 = 1852793716;
  std::string::size_type v86 = v273;
  double v87 = (void **)__p;
  __int16 v88 = *(void *)v273;
  *(void *)(v88 + 8) = *((void *)__p + 1);
  *v87[1] = v88;
  AudioObjectPropertyElement v89 = *(void *)buf;
  *(void *)(*(void *)buf + 8LL) = v86;
  *(void *)std::string::size_type v86 = v89;
  *(void *)buf = v87;
  v87[1] = buf;
  v274 = 0LL;
  os_log_s *v83 = v83;
  v83[1] = v83;
  BOOL v90 = *(void **)&buf[2];
  std::string::size_type v91 = **(void **)&buf[2];
  *(void *)(v91 + 8) = v87[1];
  *v87[1] = v91;
  __int16 v92 = *v83;
  *(void *)(v92 + 8) = v90;
  *BOOL v90 = v92;
  os_log_s *v83 = v87;
  v87[1] = v83;
  *(void *)&uint8_t buf[4] = 0LL;
  v83[5] = 0LL;
  v83[4] = 0LL;
  v83[2] = v84;
  v83[3] = v83 + 4;
  *((void *)v52 + 1) = v83;
  sub_D62E0((uint64_t *)buf);
  sub_D62E0((uint64_t *)&__p);
  *((void *)v52 + 2) = v53;
  *((void *)v52 + 3) = v54;
  *((void *)v52 + 4) = 0x696D646600000000LL;
  v52[40] = 0;
  v52[44] = 0;
  *((void *)v52 + 7) = 0LL;
  *((void *)v52 + 6) = v52 + 56;
  *((void *)v52 + 10) = 0LL;
  *((void *)v52 + 8) = 0LL;
  *((void *)v52 + 9) = v52 + 80;
  *((void *)v52 + 13) = 0LL;
  *((void *)v52 + 11) = 0LL;
  *((void *)v52 + 12) = v52 + 104;
  *((void *)v52 + 17) = 0LL;
  *((void *)v52 + 16) = 0LL;
  *((void *)v52 + 14) = 0LL;
  *((void *)v52 + 15) = v52 + 128;
  *((void *)v52 + 21) = 0LL;
  *((void *)v52 + 20) = 0LL;
  *((void *)v52 + 19) = v52 + 160;
  *((_DWORD *)v52 + 44) = 1852796517;
  *((void *)v52 + 23) = 0LL;
  *((void *)v52 + memset(buf, 0, 24) = 0LL;
  *((void *)v52 + 25) = 0LL;
  *((void *)v52 + 26) = 0x756E64656175746FLL;
  *(_OWORD *)(v52 + 216) = 0u;
  *(_OWORD *)(v52 + 232) = 0u;
  *(_OWORD *)(v52 + 248) = 0u;
  *(_OWORD *)(v52 + sub_13818(v0 + 264) = 0u;
  *(_OWORD *)(v52 + 280) = 0u;
  *((_DWORD *)v52 + 74) = 1065353216;
  *((_OWORD *)v52 + 19) = 0u;
  *((_OWORD *)v52 + 20) = 0u;
  *((_DWORD *)v52 + 84) = 1065353216;
  *(_OWORD *)(v52 + sub_13850(v0 + 344) = 0u;
  *(_OWORD *)(v52 + 360) = 0u;
  *((_DWORD *)v52 + 94) = 1065353216;
  *((_WORD *)v52 + 192) = 0;
  v52[440] = 0;
  v52[448] = 0;
  v52[452] = 0;
  *((void *)v52 + 49) = 0LL;
  *((void *)v52 + 50) = 0LL;
  v52[416] = 0;
  *((void *)v52 + 51) = 0LL;
  *((void *)v52 + 57) = v52 + 456;
  *((void *)v52 + 58) = v52 + 456;
  *((void *)v52 + 61) = 0LL;
  *((void *)v52 + 62) = 0LL;
  *((void *)v52 + 59) = 0LL;
  *((void *)v52 + 60) = v52 + 488;
  *((void *)v52 + 63) = 0LL;
  *((void *)v52 + 64) = 0LL;
  *((void *)v52 + 65) = 0LL;
  *((void *)v52 + 68) = 0LL;
  *((void *)v52 + 67) = 0LL;
  *((void *)v52 + 66) = v52 + 536;
  *((_DWORD *)v52 + 138) = 0;
  *((void *)v52 + 71) = 0LL;
  *((void *)v52 + 72) = 0LL;
  *((void *)v52 + 70) = v52 + 568;
  sub_128FCC((uint64_t **)outData, *(void *)v52);
  memset(buf, 0, 24);
  strcpy((char *)&buf[6], "cwdv");
  LOBYTE(vsub_13818(v0 + 264) = 0;
  LODWORD(v265) = 3;
  v267 = 0LL;
  v268 = 0LL;
  v266 = &v267;
  CFTypeRef cf = 0LL;
  v269 = 44739104;
  uint64_t v93 = sub_546E0();
  std::string __p = &off_470B88;
  v275 = &__p;
  sub_FF3FC((uint64_t *)v282, v93, (unsigned int **)buf, (uint64_t)&__p);
  uint64_t v94 = v275;
  if (v275 == &__p)
  {
    char v95 = 4LL;
    uint64_t v94 = &__p;
  }

  else
  {
    if (!v275) {
      goto LABEL_113;
    }
    char v95 = 5LL;
  }

  (*((void (**)(void))*v94 + v95))();
LABEL_113:
  std::string __p = outData;
  sub_12920C(*(uint64_t *)&v282[8], (uint64_t *)v282, *(unint64_t *)&v282[16], (uint64_t *)&__p);
  std::string __p = &__p;
  v273 = (char *)&__p;
  v274 = 0LL;
  sub_6DD4();
  uint64_t v96 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    v226 = (os_log_t *)sub_138E8(13);
    v227 = *v226;
    if (*v226 && os_log_type_enabled(*v226, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v283 = 136315394;
      *(void *)&v283[4] = "RoutingManager.cpp";
      v284 = 1024;
      v285 = 1918;
      _os_log_impl( &dword_0,  v227,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  v283,  0x12u);
    }

    v228 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v228, "Unable to acquire routing mutex.");
  }

  sub_12964C((uint64_t *)v283, (uint64_t *)v52, v282, (uint64_t *)&__p);
  sub_85B80((uint64_t *)v283);
  if (v96) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  sub_85B80((uint64_t *)&__p);
  sub_85B80((uint64_t *)v282);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v97 = (uint64_t *)(v252 + 112);
  sub_32C8C(v267);
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  sub_32C8C(*(void **)&outData[8]);
  sub_254A10(v97, (uint64_t)v52);
  sub_13A998(*v97, 19);
  sub_13A998(*v97, 20);
  uint64_t v98 = *(id *)sub_138E8(2);
  char v99 = v98;
  if (v98)
  {
    int v100 = (os_log_s *)v98;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1758;
      _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d RoutingManager creation complete.",  (uint8_t *)buf,  0x12u);
    }
  }

  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (!byte_48CDAA && MGGetBoolAnswer(@"cBy4BcYs5YWtFHbBpt4C6A"))
  {
    uint64_t v101 = mach_absolute_time();
    v102 = __udivti3(125 * v101, (v101 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
    int v103 = sub_138E8(2);
    unint64_t v104 = sub_138E8(34);
    int v105 = 0;
    uint64_t v106 = 0LL;
    char v107 = v102 + 8000000000LL;
    *(void *)buf = 0x100000002LL;
    v108 = *(void *)(v103 + 8);
    while (1)
    {
      uint64_t v109 = (int)buf[v106];
      unsigned __int8 v110 = v105;
      if (((v108 & v109) != 0) != ((*(void *)(v104 + 8) & v109) != 0)) {
        break;
      }
      int v105 = 1;
      uint64_t v106 = 1LL;
      if ((v110 & 1) != 0) {
        goto LABEL_134;
      }
    }

    if ((v108 & v109) == 0) {
      int v103 = v104;
    }
LABEL_134:
    uint64_t v111 = *(id *)v103;
    unint64_t v112 = v111;
    if (v111)
    {
      uint64_t v113 = (os_log_s *)v111;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1766;
        _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Beginning loop to wait for actuator port",  (uint8_t *)buf,  0x12u);
      }
    }

    while (1)
    {
      uint64_t v114 = mach_absolute_time();
      uint64_t v115 = *(void *)(v252 + 128);
      v116 = (char *)operator new(4uLL);
      *(_DWORD *)v116 = 1885430644;
      std::string __p = v116;
      v273 = v116 + 4;
      v274 = v116 + 4;
      strcpy((char *)&v275, "cwdv");
      v276 = 0;
      v277 = 3;
      v279[0] = 0LL;
      v279[1] = 0LL;
      v278 = v279;
      v280 = 44739242;
      v281 = 0LL;
      v117 = sub_D831C(v115, (uint64_t)&__p);
      if (v281) {
        CFRelease(v281);
      }
      sub_32C8C(v279[0]);
      if (__p)
      {
        v273 = (char *)__p;
        operator delete(__p);
      }

      if (v117)
      {
        unsigned __int8 v118 = sub_138E8(2);
        unsigned int v119 = sub_138E8(34);
        uint64_t v120 = 0;
        uint64_t v121 = 0LL;
        *(void *)buf = 0x100000002LL;
        int v122 = *(void *)(v118 + 8);
        while (1)
        {
          uint64_t v123 = (int)buf[v121];
          uint64_t v124 = v120;
          if (((v122 & v123) != 0) != ((*(void *)(v119 + 8) & v123) != 0)) {
            break;
          }
          uint64_t v120 = 1;
          uint64_t v121 = 1LL;
          if ((v124 & 1) != 0) {
            goto LABEL_164;
          }
        }

        if ((v122 & v123) == 0) {
          unsigned __int8 v118 = v119;
        }
LABEL_164:
        v147 = *(id *)v118;
        std::string::size_type v148 = v147;
        if (v147)
        {
          os_log_t v149 = (os_log_s *)v147;
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1777;
            _os_log_impl(&dword_0, v149, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found actuator port!", (uint8_t *)buf, 0x12u);
          }
        }

        break;
      }

      usleep(0x186A0u);
    }

    std::string v150 = *(void *)(v252 + 128);
    std::string v151 = operator new(4uLL);
    *std::string v151 = 1885430644;
    *(void *)buf = v151;
    *(void *)&buf[2] = v151 + 1;
    *(void *)&uint8_t buf[4] = v151 + 1;
    strcpy((char *)&buf[6], "cwdv");
    LOBYTE(vsub_13818(v0 + 264) = 0;
    LODWORD(v265) = 3;
    v267 = 0LL;
    v268 = 0LL;
    v266 = &v267;
    v269 = 44739242;
    CFTypeRef cf = 0LL;
    uint32_t v152 = sub_D831C(v150, (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v267);
    if (*(void *)buf)
    {
      *(void *)&buf[2] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    if (!v152)
    {
      std::string v153 = sub_138E8(2);
      os_log_t v154 = sub_138E8(34);
      std::string v155 = 0;
      std::string v156 = 0LL;
      *(void *)buf = 0x100000002LL;
      std::string v157 = *(void *)(v153 + 8);
      while (1)
      {
        std::string v158 = (int)buf[v156];
        int v159 = v155;
        if (((v157 & v158) != 0) != ((*(void *)(v154 + 8) & v158) != 0)) {
          break;
        }
        std::string v155 = 1;
        std::string v156 = 1LL;
        if ((v159 & 1) != 0) {
          goto LABEL_180;
        }
      }

      if ((v157 & v158) == 0) {
        std::string v153 = v154;
      }
LABEL_180:
      std::string::size_type v160 = *(id *)v153;
      int v161 = v160;
      if (v160)
      {
        v162 = (os_log_s *)v160;
        if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1789;
          _os_log_impl( &dword_0,  v162,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not find actuator port after 8 seconds of waiting",  (uint8_t *)buf,  0x12u);
        }
      }
    }
  }

  sub_6DD4();
  (*(void (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v163 = sub_138E8(2);
  v164 = sub_138E8(34);
  v165 = 0;
  v166 = 0LL;
  *(void *)buf = 0x100000002LL;
  CFStringRef v167 = *(void *)(v163 + 8);
  while (1)
  {
    v168 = (int)buf[v166];
    v169 = v165;
    if (((v167 & v168) != 0) != ((*(void *)(v164 + 8) & v168) != 0)) {
      break;
    }
    v165 = 1;
    v166 = 1LL;
    if ((v169 & 1) != 0)
    {
      if ((v167 & 1) == 0) {
        goto LABEL_197;
      }
      goto LABEL_193;
    }
  }

  if ((v167 & v168) == 0) {
    uint64_t v163 = v164;
  }
  if ((*(void *)(v163 + 8) & 1) != 0)
  {
LABEL_193:
    v170 = *(id *)v163;
    if (v170)
    {
      v171 = (os_log_s *)v170;
      if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1801;
        _os_log_impl( &dword_0,  v171,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Establishing inital route configuration.",  (uint8_t *)buf,  0x12u);
      }
    }
  }

void sub_6ECCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char *a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  a44 = &a32;
  sub_8F2D4((void ***)&a44);
  sub_53068((uint64_t)&a56);
  sub_135F74((void ***)&a56);
  if (a12) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

void sub_6EF6C(uint64_t *a1, void *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (sub_7051C())
  {
    std::string::size_type v173 = 0LL;
    uint64_t v174 = 0LL;
    int v172 = &v173;
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      while ((sub_33CA6C((uint64_t)(v5 + 5)) & 1) == 0)
      {
LABEL_302:
        unsigned __int8 v139 = (void *)v5[1];
        if (v139)
        {
          do
          {
            CFStringRef v140 = v139;
            unsigned __int8 v139 = (void *)*v139;
          }

          while (v139);
        }

        else
        {
          do
          {
            CFStringRef v140 = (void *)v5[2];
            BOOL v80 = *v140 == (void)v5;
            uint64_t v5 = v140;
          }

          while (!v80);
        }

        uint64_t v5 = v140;
        if (v140 == v4)
        {
          v141 = v173;
          goto LABEL_320;
        }
      }

      sub_8DF68(__s1, (uint64_t)(v5 + 5));
      sub_8DFA8(__p, (uint64_t)(v5 + 5));
      v171[0] = sub_88CE4(__s1, (unsigned __int8 *)__p, *((_DWORD *)v5 + 68), *((_DWORD *)v5 + 69));
      v171[1] = v7;
      if ((v169[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v189) < 0) {
        operator delete(*(void **)__s1);
      }
      v166[0] = 0;
      char v167 = 0;
      sub_E570C((uint64_t)__p, (uint64_t)v171, (uint64_t)v166);
      if (v167) {
        sub_13850((uint64_t)v166);
      }
      int v8 = (int)__p[0];
      int v9 = HIDWORD(__p[0]);
      sub_86550(v165, (uint64_t)v169);
      sub_8DF68(__s1, (uint64_t)(v5 + 5));
      sub_8B1F8(@"VoiceOver", &v197);
      if (!v197)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      sub_48100((uint64_t)v200, v197);
      char v10 = HIBYTE(v189);
      if (v189 >= 0) {
        uint64_t v11 = (void *)HIBYTE(v189);
      }
      else {
        uint64_t v11 = *(void **)&__s1[8];
      }
      unint64_t v12 = v201;
      int v13 = (char)v201;
      if ((v201 & 0x80u) != 0) {
        unint64_t v12 = (unint64_t)v200[1];
      }
      if (v11 == (void *)v12)
      {
        if ((v201 & 0x80u) == 0) {
          BOOL v14 = v200;
        }
        else {
          BOOL v14 = (void **)v200[0];
        }
        if (v189 < 0)
        {
          BOOL v22 = memcmp(*(const void **)__s1, v14, *(size_t *)&__s1[8]) == 0;
          if ((v13 & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }

        else if (HIBYTE(v189))
        {
          uint64_t v15 = HIBYTE(v189) - 1LL;
          int v16 = __s1;
          do
          {
            int v18 = *v16++;
            int v17 = v18;
            int v20 = *(unsigned __int8 *)v14;
            BOOL v14 = (void **)((char *)v14 + 1);
            int v19 = v20;
            BOOL v75 = v15-- != 0;
            char v21 = v75;
            BOOL v22 = v17 == v19;
          }

          while (v17 == v19 && (v21 & 1) != 0);
          if (((char)v201 & 0x80000000) == 0)
          {
LABEL_29:
            if (v197) {
              CFRelease(v197);
            }
            if (v10 < 0) {
              operator delete(*(void **)__s1);
            }
            char v23 = (char *)&unk_47A068;
            if (v22) {
              char v23 = (char *)&unk_482648;
            }
            int v204 = v203;
            int v202 = v200;
            v203[0] = v23 + 16;
            char v24 = *((_BYTE *)v5 + 240);
            int v197 = (const __CFString *)&off_46DBF8;
            char v198 = v24;
            int v199 = &v197;
            v200[0] = &off_47A0C0;
            uint64_t v25 = v5[34];
            if ((v25 & 0xFF00000000LL) != 0)
            {
              sub_33E22C((uint64_t)v195, v25);
              goto LABEL_70;
            }

            sub_8DF68(__s1, (uint64_t)(v5 + 5));
            sub_8B1F8(@"VoiceOver", &cf);
            if (!cf.__r_.__value_.__r.__words[0])
            {
              uint32_t v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v152, "Could not construct");
            }

            sub_48100((uint64_t)v192, (const __CFString *)cf.__r_.__value_.__l.__data_);
            char v26 = HIBYTE(v189);
            if (v189 >= 0) {
              uint64_t v27 = (void *)HIBYTE(v189);
            }
            else {
              uint64_t v27 = *(void **)&__s1[8];
            }
            unint64_t v28 = v193;
            int v29 = (char)v193;
            if ((v193 & 0x80u) != 0) {
              unint64_t v28 = (unint64_t)v192[1];
            }
            if (v27 == (void *)v28)
            {
              if ((v193 & 0x80u) == 0) {
                int v30 = v192;
              }
              else {
                int v30 = (void **)v192[0];
              }
              if (v189 < 0)
              {
                BOOL v38 = memcmp(*(const void **)__s1, v30, *(size_t *)&__s1[8]) == 0;
                if ((v29 & 0x80000000) == 0) {
                  goto LABEL_58;
                }
              }

              else if (HIBYTE(v189))
              {
                uint64_t v31 = HIBYTE(v189) - 1LL;
                uint64_t v32 = __s1;
                do
                {
                  int v34 = *v32++;
                  int v33 = v34;
                  int v36 = *(unsigned __int8 *)v30;
                  int v30 = (void **)((char *)v30 + 1);
                  int v35 = v36;
                  BOOL v75 = v31-- != 0;
                  char v37 = v75;
                  BOOL v38 = v33 == v35;
                }

                while (v33 == v35 && (v37 & 1) != 0);
                if (((char)v193 & 0x80000000) == 0)
                {
LABEL_58:
                  if (cf.__r_.__value_.__r.__words[0]) {
                    CFRelease(cf.__r_.__value_.__l.__data_);
                  }
                  if (v26 < 0)
                  {
                    operator delete(*(void **)__s1);
                    if (v38) {
                      goto LABEL_62;
                    }
                  }

                  else if (v38)
                  {
LABEL_62:
                    uint64_t v39 = &off_4826A0;
LABEL_69:
                    v195[0] = v39;
                    v196 = v195;
LABEL_70:
                    uint64_t v40 = v5[34];
                    if ((v40 & 0xFF00000000LL) != 0)
                    {
                      sub_33E5E8((uint64_t (***)())v192, v40);
                      goto LABEL_136;
                    }

                    sub_8DF68(__s1, (uint64_t)(v5 + 5));
                    sub_8B1F8(@"VoiceOver", &v176);
                    if (!v176)
                    {
                      std::string v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v153, "Could not construct");
                    }

                    sub_48100((uint64_t)&cf, (const __CFString *)v176);
                    char v41 = HIBYTE(v189);
                    if (v189 >= 0) {
                      uint64_t v42 = HIBYTE(v189);
                    }
                    else {
                      uint64_t v42 = *(void *)&__s1[8];
                    }
                    std::string::size_type size = cf.__r_.__value_.__s.__size_;
                    int v44 = (char)cf.__r_.__value_.__s.__size_;
                    if ((cf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      std::string::size_type size = cf.__r_.__value_.__l.__size_;
                    }
                    if (v42 == size)
                    {
                      if ((cf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        p_std::string cf = &cf;
                      }
                      else {
                        p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
                      }
                      if (v189 < 0)
                      {
                        BOOL v53 = memcmp(*(const void **)__s1, p_cf, *(size_t *)&__s1[8]) == 0;
                        if ((v44 & 0x80000000) == 0) {
                          goto LABEL_91;
                        }
                      }

                      else if (HIBYTE(v189))
                      {
                        uint64_t v46 = HIBYTE(v189) - 1LL;
                        int v47 = __s1;
                        do
                        {
                          int v49 = *v47++;
                          int v48 = v49;
                          int v51 = p_cf->__r_.__value_.__s.__data_[0];
                          p_std::string cf = (std::string *)((char *)p_cf + 1);
                          int v50 = v51;
                          BOOL v75 = v46-- != 0;
                          char v52 = v75;
                          BOOL v53 = v48 == v50;
                        }

                        while (v48 == v50 && (v52 & 1) != 0);
                        if (((char)cf.__r_.__value_.__s.__size_ & 0x80000000) == 0)
                        {
LABEL_91:
                          if (v176) {
                            CFRelease(v176);
                          }
                          if (v41 < 0)
                          {
                            operator delete(*(void **)__s1);
                            if (v53)
                            {
LABEL_95:
                              unsigned __int8 v54 = atomic_load((unsigned __int8 *)&qword_4A1958);
                              if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_4A1958))
                              {
                                qmemcpy(__s1, "Bphpwphpkpsp", 12);
                                sub_1873F8(&qword_4A1940, __s1, 3uLL);
                                __cxa_guard_release(&qword_4A1958);
                              }

                              unsigned __int8 v55 = atomic_load((unsigned __int8 *)&qword_4A1978);
                              if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_4A1978))
                              {
                                *(void *)__s1 = 0x7073706B70687077LL;
                                sub_1873F8(&qword_4A1960, __s1, 2uLL);
                                __cxa_guard_release(&qword_4A1978);
                              }

                              uint64_t v56 = &off_482BF8;
                              goto LABEL_125;
                            }
                          }

                          else if (v53)
                          {
                            goto LABEL_95;
                          }

                          sub_8DFA8(__s1, (uint64_t)(v5 + 5));
                          CFRetain(@"SoundRecognition");
                          sub_7F234(&v176, @"SoundRecognition");
                          if (!v176)
                          {
                            os_log_t v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v154, "Could not construct");
                          }

                          sub_48100((uint64_t)&cf, (const __CFString *)v176);
                          char v57 = HIBYTE(v189);
                          if (v189 >= 0) {
                            uint64_t v58 = HIBYTE(v189);
                          }
                          else {
                            uint64_t v58 = *(void *)&__s1[8];
                          }
                          std::string::size_type v59 = cf.__r_.__value_.__s.__size_;
                          int v60 = (char)cf.__r_.__value_.__s.__size_;
                          if ((cf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                            std::string::size_type v59 = cf.__r_.__value_.__l.__size_;
                          }
                          if (v58 == v59)
                          {
                            if ((cf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                              std::string v61 = &cf;
                            }
                            else {
                              std::string v61 = (std::string *)cf.__r_.__value_.__r.__words[0];
                            }
                            if (v189 < 0)
                            {
                              BOOL v69 = memcmp(*(const void **)__s1, v61, *(size_t *)&__s1[8]) == 0;
                              if ((v60 & 0x80000000) == 0) {
                                goto LABEL_120;
                              }
                            }

                            else if (HIBYTE(v189))
                            {
                              uint64_t v62 = HIBYTE(v189) - 1LL;
                              uint64_t v63 = __s1;
                              do
                              {
                                int v65 = *v63++;
                                int v64 = v65;
                                int v67 = v61->__r_.__value_.__s.__data_[0];
                                std::string v61 = (std::string *)((char *)v61 + 1);
                                int v66 = v67;
                                BOOL v75 = v62-- != 0;
                                char v68 = v75;
                                BOOL v69 = v64 == v66;
                              }

                              while (v64 == v66 && (v68 & 1) != 0);
                              if (((char)cf.__r_.__value_.__s.__size_ & 0x80000000) == 0)
                              {
LABEL_120:
                                if (v176) {
                                  CFRelease(v176);
                                }
                                if (v57 < 0)
                                {
                                  operator delete(*(void **)__s1);
                                  if (v69) {
                                    goto LABEL_124;
                                  }
                                }

                                else if (v69)
                                {
LABEL_124:
                                  uint64_t v56 = &off_482C40;
LABEL_125:
                                  v192[0] = v56;
                                  int v194 = v192;
                                  goto LABEL_136;
                                }

                                int v194 = 0LL;
LABEL_136:
                                int v70 = *((unsigned __int8 *)v5 + 136);
                                uint64_t v71 = v5[34];
                                if (!*((_BYTE *)v5 + 136))
                                {
                                  if ((v71 & 0xFF00000000LL) != 0 && (_DWORD)v71)
                                  {
                                    sub_8DFE8();
                                    uint64_t v72 = qword_48CBB0;
                                    if (!qword_48CBB0) {
                                      goto LABEL_325;
                                    }
                                    uint64_t v73 = &qword_48CBB0;
                                    do
                                    {
                                      unsigned int v74 = *(_DWORD *)(v72 + 28);
                                      BOOL v75 = v74 >= v71;
                                      else {
                                        int v76 = (uint64_t *)(v72 + 8);
                                      }
                                      if (v75) {
                                        uint64_t v73 = (uint64_t *)v72;
                                      }
                                      uint64_t v72 = *v76;
                                    }

                                    while (*v76);
                                    if (v73 == &qword_48CBB0 || *((_DWORD *)v73 + 7) > v71)
                                    {
LABEL_325:
                                      uint64_t v143 = sub_138E8(13);
                                      id v144 = sub_8C7D4(1, *(void **)v143, *(void *)(v143 + 8));
                                      char v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
                                      os_log_t v146 = v145;
                                      if (v145 && os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                                      {
                                        *(_DWORD *)__s1 = 136315394;
                                        *(void *)&__s1[4] = "AudioSessionUtilities.mm";
                                        *(_WORD *)&__s1[12] = 1024;
                                        *(_DWORD *)&__s1[14] = 74;
                                        _os_log_impl( &dword_0,  v146,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __s1,  0x12u);
                                      }

LABEL_333:
                                      std::string v151 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                                      std::logic_error::logic_error(v151, "Precondition failure.");
                                    }

                                    sub_8DFE8();
                                    uint64_t v77 = qword_48CBB0;
                                    if (!qword_48CBB0) {
LABEL_322:
                                    }
                                      sub_8F9A4("map::at:  key not found");
                                    while (1)
                                    {
                                      while (1)
                                      {
                                        unsigned int v78 = *(_DWORD *)(v77 + 28);
                                        uint64_t v77 = *(void *)v77;
                                        if (!v77) {
                                          goto LABEL_322;
                                        }
                                      }

                                      uint64_t v77 = *(void *)(v77 + 8);
                                      if (!v77) {
                                        goto LABEL_322;
                                      }
                                    }

                                    int v79 = *(_DWORD *)(v77 + 32);
                                    uint64_t v71 = v5[34];
                                  }

                                  else
                                  {
                                    int v79 = ++dword_48CBC8;
                                  }

                                  *((_DWORD *)v5 + 33) = v79;
                                  int v70 = 1;
                                  *((_BYTE *)v5 + 136) = 1;
                                }

                                BOOL v80 = (v71 & 0xFF00000000LL) == 0 || (_DWORD)v71 == 0;
                                if (!v80)
                                {
                                  char v81 = v173;
                                  uint64_t i = &v173;
                                  int v83 = &v173;
                                  if (v173)
                                  {
                                    __int16 v84 = &v173;
                                    int v85 = v173;
                                    do
                                    {
                                      std::string::size_type v86 = v85;
                                      double v87 = v84;
                                      unsigned int v88 = *((_DWORD *)v85 + 7);
                                      else {
                                        ++v85;
                                      }
                                      int v85 = (uint64_t *)*v85;
                                    }

                                    while (v85);
                                    if (v84 != &v173)
                                    {
                                      if (*((_DWORD *)v86 + 7) <= v71)
                                      {
                                        char v90 = 1;
                                        goto LABEL_191;
                                      }
                                    }

                                    for (uint64_t i = &v173; ; v81 = *i)
                                    {
                                      int v83 = i;
                                      if (!v81) {
                                        break;
                                      }
                                      while (1)
                                      {
                                        uint64_t i = (uint64_t **)v81;
                                        unsigned int v89 = *((_DWORD *)v81 + 7);
                                        char v81 = i[1];
                                        if (!v81)
                                        {
                                          int v83 = i + 1;
                                          goto LABEL_186;
                                        }
                                      }
                                    }
                                  }

LABEL_243:
                                                    a1[1] = v104;
                                                    sub_8F164((uint64_t)__s1);
                                                    sub_51FD8(v162);
                                                    v116 = v161;
                                                    int v161 = 0LL;
                                                    if (v116) {
                                                      operator delete(v116);
                                                    }
                                                    sub_51FD8(v160);
                                                    v117 = v159;
                                                    int v159 = 0LL;
                                                    if (v117) {
                                                      operator delete(v117);
                                                    }
                                                    sub_51FD8(v158);
                                                    unsigned __int8 v118 = v157;
                                                    std::string v157 = 0LL;
                                                    if (v118) {
                                                      operator delete(v118);
                                                    }
                                                    CFTypeRef v176 = &v156;
                                                    sub_8C8F0((void ***)&v176);
                                                    CFTypeRef v176 = v155;
                                                    sub_8C8F0((void ***)&v176);
                                                    unsigned int v119 = v178;
                                                    if (v178 == v177)
                                                    {
                                                      unsigned int v119 = v177;
                                                      uint64_t v120 = 4LL;
                                                    }

                                                    else
                                                    {
                                                      if (!v178) {
                                                        goto LABEL_254;
                                                      }
                                                      uint64_t v120 = 5LL;
                                                    }

                                                    (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_254:
                                                    uint64_t v121 = v180;
                                                    if (v180 == v179)
                                                    {
                                                      uint64_t v121 = v179;
                                                      uint64_t v122 = 4LL;
                                                    }

                                                    else
                                                    {
                                                      if (!v180) {
                                                        goto LABEL_259;
                                                      }
                                                      uint64_t v122 = 5LL;
                                                    }

                                                    (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_259:
                                                    uint64_t v123 = v182;
                                                    if (v182 == v181)
                                                    {
                                                      uint64_t v123 = v181;
                                                      uint64_t v124 = 4LL;
                                                    }

                                                    else
                                                    {
                                                      if (!v182) {
                                                        goto LABEL_264;
                                                      }
                                                      uint64_t v124 = 5LL;
                                                    }

                                                    (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_264:
                                                    int v125 = v184;
                                                    if (v184 == v183)
                                                    {
                                                      int v125 = v183;
                                                      uint64_t v126 = 4LL;
                                                    }

                                                    else
                                                    {
                                                      if (!v184) {
                                                        goto LABEL_269;
                                                      }
                                                      uint64_t v126 = 5LL;
                                                    }

                                                    (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_269:
                                                    uint64_t v127 = v186;
                                                    if (v186 == v185)
                                                    {
                                                      uint64_t v127 = v185;
                                                      uint64_t v128 = 4LL;
                                                    }

                                                    else
                                                    {
                                                      if (!v186) {
                                                        goto LABEL_274;
                                                      }
                                                      uint64_t v128 = 5LL;
                                                    }

                                                    (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_274:
                                                    sub_68314(v164);
                                                    if (cf.__r_.__value_.__r.__words[0]) {
                                                      operator delete(cf.__r_.__value_.__l.__data_);
                                                    }
                                                    goto LABEL_276;
                                                  }

                                                  uint64_t v101 = (*((uint64_t (**)(void))*v194 + 2))();
                                                }

                                                std::string::size_type v178 = (_BYTE *)v101;
                                                goto LABEL_225;
                                              }

                                              uint64_t v100 = (*(uint64_t (**)(void))(*v196 + 16LL))();
                                            }

                                            v180 = (_BYTE *)v100;
                                            goto LABEL_220;
                                          }

                                          uint64_t v99 = ((uint64_t (*)(void))(*v199)->data)();
                                        }

                                        int v182 = (_BYTE *)v99;
                                        goto LABEL_215;
                                      }

                                      uint64_t v98 = (*((uint64_t (**)(void))*v202 + 2))();
                                    }

                                    int v184 = (_BYTE *)v98;
                                    goto LABEL_210;
                                  }

                                  uint64_t v97 = (*(uint64_t (**)(void))(*v204 + 16LL))();
                                }

                                v186 = (_BYTE *)v97;
                                goto LABEL_205;
                              }
                            }

                            else
                            {
                              BOOL v69 = 1;
                            }
                          }

                          else
                          {
                            BOOL v69 = 0;
                          }

                          operator delete(cf.__r_.__value_.__l.__data_);
                          goto LABEL_120;
                        }
                      }

                      else
                      {
                        BOOL v53 = 1;
                      }
                    }

                    else
                    {
                      BOOL v53 = 0;
                    }

                    operator delete(cf.__r_.__value_.__l.__data_);
                    goto LABEL_91;
                  }

                  uint64_t v39 = &off_47A150;
                  goto LABEL_69;
                }
              }

              else
              {
                BOOL v38 = 1;
              }
            }

            else
            {
              BOOL v38 = 0;
            }

            operator delete(v192[0]);
            goto LABEL_58;
          }
        }

        else
        {
          BOOL v22 = 1;
        }
      }

      else
      {
        BOOL v22 = 0;
      }

      operator delete(v200[0]);
      goto LABEL_29;
    }

    v141 = 0LL;
LABEL_320:
    sub_32C8C(v141);
  }

void sub_700FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  int v66 = *(void **)(v64 - 224);
  if (v66 == (void *)(v64 - 248))
  {
    uint64_t v67 = 4LL;
    int v66 = (void *)(v64 - 248);
  }

  else
  {
    if (!v66) {
      goto LABEL_6;
    }
    uint64_t v67 = 5LL;
  }

  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_6:
  char v68 = *(void **)(v64 - 192);
  if (v68 == (void *)(v64 - 216))
  {
    uint64_t v69 = 4LL;
    char v68 = (void *)(v64 - 216);
  }

  else
  {
    if (!v68) {
      goto LABEL_11;
    }
    uint64_t v69 = 5LL;
  }

  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_11:
  int v70 = *(void **)(v64 - 160);
  if (v70 == (void *)(v64 - 184))
  {
    uint64_t v71 = 4LL;
    int v70 = (void *)(v64 - 184);
  }

  else
  {
    if (!v70) {
      goto LABEL_16;
    }
    uint64_t v71 = 5LL;
  }

  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_16:
  uint64_t v72 = *(void **)(v64 - 128);
  if (v72 == (void *)(v64 - 152))
  {
    uint64_t v73 = 4LL;
    uint64_t v72 = (void *)(v64 - 152);
  }

  else
  {
    if (!v72) {
      goto LABEL_21;
    }
    uint64_t v73 = 5LL;
  }

  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_21:
  sub_32C8C(a50);
  sub_32C8C(a58);
  sub_32C8C(a63);
  STACK[0x280] = v63;
  sub_8F2D4((void ***)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t sub_7051C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FE48))
  {
    byte_48FE40 = sub_1CCB4C();
    __cxa_guard_release(&qword_48FE48);
  }

  return byte_48FE40;
}

void sub_70574(_Unwind_Exception *a1)
{
}

void *sub_7058C(void *a1)
{
  *a1 = off_4709D0;
  int v2 = (uint64_t *)a1[2];
  if (v2)
  {
    sub_10AF78(v2 + 2);
    operator delete(v2);
  }

  return a1;
}

void sub_705D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  if (*(_DWORD *)(a3 + 32) == 1668246894)
  {
    *(void *)uint64_t v40 = 0LL;
    *(void *)&v40[8] = 0LL;
    sub_11C6C8(a1, a2, a3, a4, (uint64_t)v40);
  }

  else
  {
    sub_6DD4();
    if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
    {
      char v26 = (os_log_t *)sub_138E8(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v40 = 136315394;
        *(void *)&v40[4] = "RoutingManager.cpp";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 2613;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v40, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    if (!*(void *)(a3 + 16))
    {
      int v29 = (os_log_t *)sub_138E8(13);
      int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v40 = 136315394;
        *(void *)&v40[4] = "RoutingManager.cpp";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 2614;
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v40, 0x12u);
      }

      uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v31, "Precondition failure.");
    }

    *(void *)uint64_t v7 = off_4709D0;
    *(void *)(v7 + 8) = 1LL;
    *(void *)(v7 + 16) = 0LL;
    *(_BYTE *)(v7 + memset(buf, 0, 24) = 0;
    *(_BYTE *)(v7 + 32) = 0;
    memset(v37, 0, sizeof(v37));
    BOOL v8 = *(_DWORD *)(a3 + 32) == 1668510820;
    *(_OWORD *)&v39[3] = *(_OWORD *)(a4 + 8);
    v40[16] = v8;
    *(_OWORD *)&v40[17] = *(_OWORD *)v39;
    *(_DWORD *)&v40[32] = *(_DWORD *)&v39[15];
    *(void *)uint64_t v40 = a3;
    *(void *)&v40[8] = a4 + 24;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v9 = sub_11DDE4((uint64_t *)v40);
    int v34 = v10;
    uint64_t v11 = v9;
    uint64_t v33 = *(void *)v40;
    if (*(void *)v40 != v9)
    {
      uint64_t v12 = (uint64_t)(v10 + 1);
      uint64_t v32 = v7;
      while (1)
      {
        sub_70C60(&v36, a2, v11 + 16, a3, a4);
        if (v36.i64[0] != v36.i64[1])
        {
          if ((sub_14F834() & 1) == 0
            && sub_EAA74("VA_BuildAlternateRoutesAndActivateForNormal", 0x2BuLL) == &qword_4938E0)
          {
            os_signpost_id_t v14 = 0LL;
          }

          else
          {
            unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            os_signpost_id_t v14 = os_signpost_id_generate((os_log_t)qword_493900);
            unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v16 = (os_log_s *)qword_493900;
              if (os_signpost_enabled((os_log_t)qword_493900))
              {
                sub_2DA6D0((std::string *)v39, (unsigned int ***)&v36);
                int v17 = v39[23];
                int v18 = *(_BYTE **)v39;
                sub_2DABA8(&__p, v11 + 16);
                int v19 = v39;
                if (v17 < 0) {
                  int v19 = v18;
                }
                p_p = &__p;
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136315394;
                int v44 = v19;
                __int16 v45 = 2080;
                uint64_t v46 = p_p;
                _os_signpost_emit_with_name_impl( &dword_0,  v16,  OS_SIGNPOST_INTERVAL_BEGIN,  v14,  "VA_BuildAlternateRoutesAndActivateForNormal",  "ActivateForNormal, Primary route = %s, Abstract route = %s",  buf,  0x16u);
                uint64_t v7 = v32;
                if ((v39[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v39);
                }
              }
            }
          }

          os_signpost_id_t v35 = v14;
          uint64_t v21 = sub_138E8(42);
          if ((*(_BYTE *)(v21 + 8) & 1) != 0)
          {
            BOOL v22 = *(os_log_s **)v21;
            if (*(void *)v21)
            {
              if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)uint64_t v39 = 136315650;
                *(void *)&v39[4] = "SignpostUtilities.h";
                *(_WORD *)&v39[12] = 1024;
                *(_DWORD *)&v39[14] = 70;
                *(_WORD *)&v39[18] = 2080;
                *(void *)&v39[20] = "kBuildAlternateRoutesAndActivateForNormal";
                _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  v39,  0x1Cu);
              }
            }
          }

          sub_11DE5C((uint64_t)v39, a2, (std::string::size_type)&v36, *(uint64_t **)(v11 + 104), a4, (uint64_t *)v37);
          sub_725DC(v7, (uint64_t)v39);
          *(void *)uint64_t v39 = off_4709D0;
          char v23 = *(void **)&v39[16];
          if (*(void *)&v39[16])
          {
            sub_10AF78((uint64_t *)(*(void *)&v39[16] + 16LL));
            operator delete(v23);
          }

          int v24 = *(_DWORD *)(v7 + 8);
          sub_11E1F4(&v35);
          if (!v24) {
            break;
          }
        }

        *(void *)uint64_t v39 = &v36;
        sub_11E38C((void ***)v39);
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v25 = *v34;
        if (v11 != *v34)
        {
          while (!sub_11E3FC(v12, v11 + 16))
          {
            uint64_t v11 = *(void *)(v11 + 8);
            if (v11 == v25)
            {
              uint64_t v11 = v25;
              break;
            }
          }
        }

        if (v11 == v33) {
          goto LABEL_41;
        }
      }

      *(void *)uint64_t v39 = &v36;
      sub_11E38C((void ***)v39);
    }

LABEL_41:
    sub_11E670(v37, (uint64_t)(a2 + 63));
    *(void *)uint64_t v40 = v37;
    sub_A0CF0((void ***)v40);
  }

      os_signpost_id_t v14 = (os_log_t *)sub_138E8(13);
      unsigned __int8 v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)BOOL v22 = 136315394;
        *(void *)&v22[4] = "RunTimeDefaults.cpp";
        char v23 = 1024;
        int v24 = 2218;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d va::SiriCarKitPreferredOutputRoute::HFP",  v22,  0x12u);
      }

      goto LABEL_45;
    }

    if (v2 != 4)
    {
      if (v2 == 13)
      {
        if ((v26 & 0x80) == 0)
        {
          if (v26)
          {
            unsigned __int16 v3 = buf;
            int v4 = "DeviceSpeaker";
            while (*v3 == *(unsigned __int8 *)v4)
            {
              ++v3;
              ++v4;
              if (!--v1) {
                goto LABEL_49;
              }
            }

            goto LABEL_45;
          }

  if (cfa) {
    CFRelease(cfa);
  }
}

    if ((_DWORD)a1 == v4) {
      return result;
    }
    goto LABEL_49;
  }

  if ((int)a1 <= 1987081838)
  {
    if ((int)a1 > 1987080812)
    {
      if ((_DWORD)a1 != 1987080813)
      {
        unsigned __int16 v3 = 30313;
        goto LABEL_34;
      }
    }

    else if ((_DWORD)a1 != 1986884455)
    {
      unsigned __int16 v3 = 26467;
LABEL_34:
      uint64_t v6 = v3 | 0x76700000;
      goto LABEL_46;
    }

    return 0LL;
  }

  if ((int)a1 > 1987211116)
  {
    if ((_DWORD)a1 == 1987212137) {
      return 0LL;
    }
    uint64_t v5 = 28525;
  }

  else
  {
    if ((_DWORD)a1 == 1987081839) {
      return 0LL;
    }
    uint64_t v5 = 25447;
  }

  uint64_t v6 = v5 | 0x76720000;
LABEL_46:
  if ((_DWORD)a1 == v6) {
    return 0LL;
  }
LABEL_49:
  uint64_t v7 = (os_log_t *)sub_138E8(13);
  BOOL v8 = *v7;
  if (!*v7) {
    return 0LL;
  }
  uint64_t result = os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_2CA1C(__p, a1);
    if (v11 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    unsigned __int8 v13 = "RoutingHandlerUtilities_Aspen.cpp";
    os_signpost_id_t v14 = 1024;
    unsigned __int8 v15 = 985;
    int v16 = 2080;
    int v17 = v9;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unhandled mode '%s' in switch statement",  buf,  0x1Cu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

    if (v24 == v25) {
      goto LABEL_42;
    }
LABEL_43:
    sub_72210((uint64_t)v32, 1920099684LL);
    if (v4) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    sub_725DC(a1, (uint64_t)v32);
    *(void *)uint64_t v32 = off_4709D0;
    unint64_t v28 = *(void **)((char *)v34 + 2);
    if (*(void *)((char *)v34 + 2))
    {
      sub_10AF78((uint64_t *)(*(void *)((char *)v34 + 2) + 16LL));
      operator delete(v28);
    }

    return;
  }

  uint64_t v12 = sub_138E8(9);
  unsigned __int8 v13 = sub_138E8(15);
  os_signpost_id_t v14 = 0;
  unsigned __int8 v15 = 0LL;
  *(void *)uint64_t v32 = 0x100000002LL;
  int v16 = *(void *)(v12 + 8);
  while (1)
  {
    int v17 = *(int *)&v32[4 * v15];
    int v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    os_signpost_id_t v14 = 1;
    unsigned __int8 v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_30;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_30:
  char v26 = *(os_log_s **)v12;
  if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v32 = 136315394;
    *(void *)&v32[4] = "SystemSettingsCommands_Aspen.cpp";
    uint64_t v33 = 1024;
    v34[0] = 58;
    _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  v32,  0x12u);
  }

  std::mutex::unlock(v6);
}

          unsigned __int8 v13 = (void *)v13[1];
          if (v13 == a2) {
            return sub_11C618((uint64_t)a2, v4, a2);
          }
        }

        int v19 = 1;
        goto LABEL_32;
      }

      int v4 = v3;
    }

    return sub_11C618((uint64_t)a2, v4, a2);
  }

  return result;
}

    sub_163184(a1[80], v20);
  }

  else if (a2->mSelector == 1953790309)
  {
    if (a5 != 4)
    {
      uint64_t v12 = (os_log_t *)sub_138E8(13);
      unsigned __int8 v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 348;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid data passed with kBasebandVoiceAudioDevicePropertyTTYEnabled property",  buf,  0x12u);
        }
      }
    }

    os_signpost_id_t v14 = *(_DWORD *)a6;
    if (*(_DWORD *)a6 || sub_163FD0(*a1[80]))
    {
      unsigned __int8 v15 = (os_log_t *)sub_138E8(17);
      int v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        int v17 = "disabled";
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        *(_DWORD *)buf = 136315650;
        if (v14) {
          int v17 = "enabled";
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 352;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v17;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting TTY %s on Device_Baseband_Voice_Aspen's Core Telephony Interface",  buf,  0x1Cu);
      }

      std::string __p = (void *)*a1[80];
      unsigned __int8 v54 = v14 != 0;
      LODWORD(v51) = 0;
      *(void *)buf = __p;
      *(void *)&buf[8] = &v51;
      *(void *)&buf[16] = &__p;
      sub_1620D4((uint64_t)buf);
    }
  }

  else
  {
    sub_3686A0((uint64_t)a1, a2, a3, a4, a5, a6);
  }
      }
    }

    v171 = 0;
    v169 = 0;
  }

  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    uint64_t v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

  return sub_ADC0C(&v27);
}

  sub_83A3C(&__p, a3);
  sub_83AA0(&v24, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  sub_24054(a1, v24.__pn_.__r_.__value_.__l.__data_, v24.__pn_.__r_.__value_.__l.__size_);
LABEL_46:
LABEL_48:
}

  uint64_t v27 = qword_48C078;
  if ((v9 & 0x10) != 0) {
    goto LABEL_54;
  }
  if ((int)v8 > 1885629549)
  {
    if ((int)v8 > 1886614639)
    {
      if ((_DWORD)v8 == 1886743662) {
        goto LABEL_54;
      }
      unint64_t v28 = 1886614640;
    }

    else
    {
      if ((_DWORD)v8 == 1885629550) {
        goto LABEL_54;
      }
      unint64_t v28 = 1885890164;
    }
  }

  else if ((int)v8 > 1885418099)
  {
    if ((_DWORD)v8 == 1885418100) {
      goto LABEL_54;
    }
    unint64_t v28 = 1885433443;
  }

  else
  {
    if ((_DWORD)v8 == 1751409257) {
      goto LABEL_54;
    }
    unint64_t v28 = 1819306350;
  }

  if ((_DWORD)v8 != v28)
  {
    unint64_t v63 = sub_138E8(40);
    if ((*(_BYTE *)(v63 + 8) & 1) != 0)
    {
      uint64_t v64 = *(os_log_s **)v63;
      if (*(void *)v63)
      {
        if (os_log_type_enabled(*(os_log_t *)v63, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v79 = 136315394;
          *(void *)&v79[4] = "AudioIOMonitor.cpp";
          *(_WORD *)&v79[12] = 1024;
          *(_DWORD *)&v79[14] = 331;
          _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ignoring stream that is not client visible",  v79,  0x12u);
        }
      }
    }

    goto LABEL_135;
  }

void sub_70BC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
}

void sub_70C60(int64x2_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)std::string __p = 0u;
  __int128 v16 = 0u;
  __int128 v10 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v11 = 1065353216LL;
  *(_OWORD *)uint64_t v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v14 = 1065353216LL;
  uint64_t v17 = 1065353216LL;
  sub_70D3C(a1, a2, a3, a4, (const void ***)v8, a5);
  sub_51FD8((char *)v16);
  uint64_t v5 = __p[0];
  __p[0] = 0LL;
  if (v5) {
    operator delete(v5);
  }
  sub_51FD8((char *)v13);
  uint64_t v6 = v12[0];
  v12[0] = 0LL;
  if (v6) {
    operator delete(v6);
  }
  sub_51FD8((char *)v10);
  uint64_t v7 = v9[0];
  v9[0] = 0LL;
  if (v7) {
    operator delete(v7);
  }
  int v18 = (void **)&v8[1] + 1;
  sub_8C8F0(&v18);
  int v18 = (void **)v8;
  sub_8C8F0(&v18);
}

void sub_70D28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_70D3C(int64x2_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, const void ***a5, uint64_t a6)
{
  unsigned int v10 = *(_DWORD *)(a6 + 120);
  int v11 = *(unsigned __int8 *)(a6 + 360);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a6 + 24LL))(&v63, a6);
  sub_120BE4(v71, a6 + 48, 0x76646566u);
  v78[0] = &off_470B88;
  int v79 = v78;
  memset(__p, 0, 24);
  sub_7A5B8(__p, v63, (uint64_t)v64, (v64 - (_BYTE *)v63) >> 2);
  __p[3] = v65;
  char v73 = v66;
  int v74 = v67;
  sub_86550(v75, (uint64_t)v68);
  int v76 = v69;
  CFTypeRef v12 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v77 = v12;
  uint64_t v62 = (unsigned int *)(a6 + 8);
  sub_120CFC( a1,  a3,  a4,  (_DWORD *)(a6 + 8),  a6 + 48,  (void **)(a6 + 24),  (uint64_t)v71,  a6 + 96,  v10,  v11 != 0,  0x76646566u,  0,  1,  0,  (uint64_t)v78,  (uint64_t)__p,  a5);
  if (v77) {
    CFRelease(v77);
  }
  sub_32C8C((void *)v75[1]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  __int128 v13 = v79;
  if (v79 == v78)
  {
    uint64_t v14 = 4LL;
    __int128 v13 = v78;
  }

  else
  {
    if (!v79) {
      goto LABEL_12;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_12:
  sub_FF3B8((void *)v71[1]);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v68[1]);
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }

  unsigned __int8 v15 = (uint64_t *)a1->i64[0];
  std::string v61 = (uint64_t *)a1->i64[1];
  if ((uint64_t *)a1->i64[0] != v61)
  {
    while (1)
    {
      uint64_t v16 = *v15;
      sub_6DD4();
      if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
      {
        uint64_t v56 = (os_log_t *)sub_138E8(13);
        char v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 136315394;
          *(void **)((char *)__p + 4) = "RoutingManager.cpp";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 4622;
          _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)__p,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      uint64_t v17 = (unsigned int (***)(void))sub_5954C();
      if ((**v17)(v17) == 1)
      {
        uint64_t v18 = *(void *)(*(void *)a2 + 8LL);
        if (!v18) {
          goto LABEL_30;
        }
        unsigned int v19 = *v62;
        uint64_t v20 = *(void *)a2 + 8LL;
        do
        {
          unsigned int v21 = *(_DWORD *)(v18 + 32);
          BOOL v22 = v21 >= v19;
          if (v21 >= v19) {
            char v23 = (uint64_t *)v18;
          }
          else {
            char v23 = (uint64_t *)(v18 + 8);
          }
          if (v22) {
            uint64_t v20 = v18;
          }
          uint64_t v18 = *v23;
        }

        while (*v23);
        if (v20 == *(void *)a2 + 8LL || v19 < *(_DWORD *)(v20 + 32)) {
LABEL_30:
        }
          uint64_t v20 = *(void *)a2 + 8LL;
        if (*(_BYTE *)(v20 + 76) && !a2[138])
        {
          uint64_t v24 = v16 + 16;
          uint64_t v25 = *(void **)(v16 + 24);
          char v26 = (void *)(v16 + 16);
          if (v25 != (void *)(v16 + 16))
          {
            while ((sub_126690(v25 + 2) & 1) == 0)
            {
              uint64_t v25 = (void *)v25[1];
              if (v25 == (void *)v24)
              {
                char v26 = (void *)(v16 + 16);
                goto LABEL_43;
              }
            }

            char v26 = (void *)(v16 + 16);
            if (v25 != (void *)v24)
            {
              uint64_t v27 = v25[1];
              char v26 = v25;
              while (v27 != v24)
              {
                if ((sub_126690((uint64_t *)(v27 + 16)) & 1) == 0)
                {
                  sub_126940((uint64_t)(v26 + 2), (__int128 *)(v27 + 16));
                  char v26 = (void *)v26[1];
                }

                uint64_t v27 = *(void *)(v27 + 8);
              }
            }
          }

void sub_714B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_715A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  sub_7A5B8( (void *)a2,  *(const void **)(a1 + 424),  *(void *)(a1 + 432),  (uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 2);
  *(void *)(a2 + memset(buf, 0, 24) = *(void *)(a1 + 448);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 456);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 464);
  uint64_t result = sub_86550((uint64_t *)(a2 + 48), a1 + 472);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 496);
  uint64_t v5 = *(const void **)(a1 + 504);
  if (v5) {
    uint64_t result = (void *)CFRetain(v5);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void sub_71624(_Unwind_Exception *exception_object)
{
  unsigned __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_71640(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_71648(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  sub_86550((uint64_t *)(a1 + 32), a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  sub_71894((void *)(a1 + 72), a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  sub_82AF0(a1 + 104, a2 + 104);
  sub_82AF0(a1 + 136, a2 + 136);
  sub_82AF0(a1 + 168, a2 + 168);
  sub_82AF0(a1 + 200, a2 + 200);
  sub_82AF0(a1 + 232, a2 + 232);
  sub_54070((void *)(a1 + 264), (const void ***)(a2 + 264));
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  return a1;
}

void sub_71750(_Unwind_Exception *a1)
{
  unsigned int v10 = *(void **)(v1 + 256);
  if (v10 == v8)
  {
    uint64_t v11 = 4LL;
  }

  else
  {
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
    BOOL v8 = *(void **)(v1 + 256);
  }

  (*(void (**)(void *))(*v8 + 8 * v11))(v8);
LABEL_6:
  CFTypeRef v12 = *(void **)(v1 + 224);
  if (v12 == v7)
  {
    uint64_t v13 = 4LL;
    CFTypeRef v12 = v7;
  }

  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  uint64_t v14 = *(void **)(v1 + 192);
  if (v14 == v6)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = v6;
  }

  else
  {
    if (!v14) {
      goto LABEL_16;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  uint64_t v16 = *(void **)(v1 + 160);
  if (v16 == v5)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v5;
  }

  else
  {
    if (!v16) {
      goto LABEL_21;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  uint64_t v18 = *(void **)(v1 + 128);
  if (v18 == v4)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = v4;
  }

  else
  {
    if (!v18) {
      goto LABEL_26;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  sub_68314(v3);
  sub_32C8C(*(void **)(v1 + 40));
  uint64_t v20 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_71884()
{
}

void sub_7188C()
{
}

void *sub_71894(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_71918(_Unwind_Exception *a1)
{
}

BOOL sub_7192C(int a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 == a3) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v4 = *a2;
    if (!*(_DWORD *)(*a2 + 4) && *(_DWORD *)v4 == 1986291046) {
      break;
    }
    if (++a2 == a3) {
      return 0LL;
    }
  }

  uint64_t v6 = v4 + 16;
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7 == v4 + 16) {
    return 0LL;
  }
  do
  {
    BOOL result = sub_1F5F2C(a1, (uint64_t *)(v7 + 16));
    if (result) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }

  while (v7 != v6);
  return result;
}

uint64_t sub_719C0()
{
  return 0LL;
}

__n128 **sub_719C8(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = 0LL;
  *a1 = (__n128 *)a1;
  a1[1] = (__n128 *)a1;
  uint64_t v5 = a2;
  while (1)
  {
    a1[2] = (__n128 *)v4;
    uint64_t v5 = (__n128 *)v5->n128_u64[1];
    if (v5 == a2) {
      break;
    }
    uint64_t v6 = (__n128 *)operator new(0x50uLL);
    v6->n128_u64[0] = 0LL;
    v6->n128_u64[1] = 0LL;
    sub_125374(v6 + 1, v5 + 1);
    unint64_t v7 = (unint64_t)*a1;
    v6->n128_u64[0] = (unint64_t)*a1;
    v6->n128_u64[1] = (unint64_t)a1;
    *(void *)(v7 + 8) = v6;
    *a1 = v6;
    uint64_t v4 = (uint64_t)a1[2]->n128_i64 + 1;
  }

  return a1;
}

void sub_71A48(_Unwind_Exception *a1)
{
}

uint64_t sub_71A5C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v9 = v7 == a2;
    BOOL v8 = v7 < a2;
    if (v9) {
      BOOL v8 = *(_DWORD *)(v4 + 32) < a3;
    }
    BOOL v9 = !v8;
    if (v8) {
      unsigned int v10 = (uint64_t *)(v4 + 8);
    }
    else {
      unsigned int v10 = (uint64_t *)v4;
    }
    if (v9) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v11 = *(_DWORD *)(v6 + 28);
  BOOL v9 = v11 == a2;
  BOOL v12 = v11 > a2;
  if (v9) {
    BOOL v12 = *(_DWORD *)(v6 + 32) > a3;
  }
  if (v12) {
    return v3;
  }
  return v6;
}

uint64_t *sub_71ACC(uint64_t **a1, uint64_t *a2)
{
  int v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      int v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_911E8(v6, a2);
}

uint64_t *sub_71B20(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  BOOL result = (uint64_t *)(a1 + 8);
  BOOL v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        unsigned int v9 = *((_DWORD *)v7 + 8);
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        BOOL v5 = (uint64_t *)*v7;
        BOOL result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }

      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      BOOL result = v7 + 1;
      BOOL v5 = (uint64_t *)v7[1];
    }

    while (v5);
  }

  else
  {
    unsigned int v7 = result;
  }

void sub_71B98(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)(v4 + 28) = 1986291046LL;
  *(_OWORD *)(v4 + 36) = *(_OWORD *)a2;
  *(void *)(v4 + 52) = *(void *)(a2 + 16);
  BOOL v5 = sub_71B20((uint64_t)a1, &v6, 0x76646566u, 0);
  if (*v5) {
    operator delete(v4);
  }
  else {
    sub_32C38(a1, v6, (uint64_t **)v5, (uint64_t *)v4);
  }
}

void sub_71C38(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)(v6 + 28) = a2;
  *(_OWORD *)(v6 + 36) = *(_OWORD *)a3;
  *(void *)(v6 + 52) = *(void *)(a3 + 16);
  unsigned int v7 = sub_71B20((uint64_t)a1, &v8, a2, HIDWORD(a2));
  if (*v7) {
    operator delete(v6);
  }
  else {
    sub_32C38(a1, v8, (uint64_t **)v7, (uint64_t *)v6);
  }
}

uint64_t sub_71CD0(void *a1, uint64_t a2)
{
  int v2 = (int *)a1[1];
  uint64_t v3 = (int *)a1[2];
  if (v2 == v3)
  {
    int v7 = 1;
  }

  else
  {
    do
    {
      if (*(void *)(a2 + 8) == a2)
      {
        int v7 = 0;
      }

      else
      {
        int v4 = *v2;
        uint64_t v5 = *(void *)(a2 + 8);
        do
        {
          BOOL v6 = *(_DWORD *)(v5 + 16) == v4 || *(_DWORD *)(v5 + 20) == v4;
          int v7 = v6;
          if (v6) {
            break;
          }
          uint64_t v5 = *(void *)(v5 + 8);
        }

        while (v5 != a2);
      }

      if ((v7 & 1) != 0) {
        break;
      }
      ++v2;
    }

    while (v2 != v3);
  }

  uint64_t v8 = (void *)a1[4];
  if (v8 == a1 + 5)
  {
LABEL_36:
    int v15 = 1;
  }

  else
  {
    while (1)
    {
      if (*(void *)(a2 + 8) != a2)
      {
        int v9 = *((_DWORD *)v8 + 7);
        uint64_t v10 = *(void *)(a2 + 8);
        do
        {
          BOOL v11 = *(_DWORD *)(v10 + 16) == v9 || *(_DWORD *)(v10 + 20) == v9;
          char v12 = v11;
          if (v11) {
            break;
          }
          uint64_t v10 = *(void *)(v10 + 8);
        }

        while (v10 != a2);
        if ((v12 & 1) != 0) {
          break;
        }
      }

      BOOL v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          BOOL v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          uint64_t v14 = (void *)v8[2];
          BOOL v6 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }

        while (!v6);
      }

      uint64_t v8 = v14;
      if (v14 == a1 + 5) {
        goto LABEL_36;
      }
    }

    int v15 = 0;
  }

  return v7 & v15;
}

double sub_71DC4@<D0>(uint64_t a1@<X0>, __n128 ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(a1 + 512);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  if (v6 != *v5)
  {
    do
    {
      uint64_t v8 = v6 - 48;
      sub_55F18((uint64_t *)(v6 - 32));
      uint64_t v6 = v8;
    }

    while (v8 != v7);
  }

  v5[1] = v7;
  int v9 = *a2;
  uint64_t v32 = a2[1];
  if (*a2 == v32) {
    goto LABEL_33;
  }
  uint64_t v10 = a1 + 400;
  do
  {
    BOOL v11 = *v9;
    unint64_t v12 = (*v9)->n128_u64[0];
    v36.n128_u32[2] = (*v9)->n128_u32[2];
    v36.n128_u64[0] = v12;
    sub_719C8((__n128 **)&v37, v11 + 1);
    unint64_t v39 = v11[2].n128_u64[1];
    uint64_t v13 = v10;
    if (a1 + 408 == sub_71A5C(v10, v36.n128_u32[0], v36.n128_u32[1]))
    {
      unsigned __int16 v29 = (os_log_t *)sub_138E8(13);
      uint64_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1749;
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v14 = (__n128 *)v37.n128_u64[1];
    while (&v37 != v14)
    {
      sub_B8CBC((uint64_t *)buf, (uint64_t *)&v14[1], "", 1758);
      sub_B8CBC(&v34, (uint64_t *)&v14[2], "", 1759);
      if (sub_54ADC(*(uint64_t *)buf, a1 + 424) && (sub_54ADC(v34, a1 + 424) & 1) != 0)
      {
        char v15 = 0;
      }

      else
      {
        if (v14[4].n128_u8[0])
        {
          unint64_t v16 = v14->n128_u64[0];
          uint64_t v17 = (__n128 *)v14->n128_u64[1];
          *(void *)(v16 + 8) = v17;
          *(void *)v14->n128_u64[1] = v16;
          --v38;
          sub_116394((__n128 *)v14[1].n128_u64);
          operator delete(v14);
          char v15 = 0;
          uint64_t v14 = v17;
          goto LABEL_15;
        }

        char v15 = 1;
      }

      uint64_t v14 = (__n128 *)v14->n128_u64[1];
LABEL_15:
      uint64_t v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      unsigned int v21 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_24;
      }
      BOOL v22 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if ((v15 & 1) != 0) {
          goto LABEL_34;
        }
      }

      else
      {
LABEL_24:
        if ((v15 & 1) != 0) {
          goto LABEL_34;
        }
      }
    }

    if (!v38)
    {
LABEL_34:
      sub_55F18((uint64_t *)&v37);
      *(void *)a3 = off_4709D0;
      *(void *)&double result = 3LL;
      *(void *)(a3 + 8) = 3LL;
      *(void *)(a3 + 16) = 0LL;
      *(_BYTE *)(a3 + memset(buf, 0, 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }

    uint64_t v24 = *(void *)(a1 + 512);
    unint64_t v25 = *(void *)(v24 + 8);
    if (v25 >= *(void *)(v24 + 16))
    {
      uint64_t v27 = sub_110A78(*(int64x2_t **)(a1 + 512), &v36);
    }

    else
    {
      unint64_t v26 = v36.n128_u64[0];
      *(_DWORD *)(v25 + 8) = v36.n128_u32[2];
      *(void *)unint64_t v25 = v26;
      sub_719C8((__n128 **)(v25 + 16), &v37);
      *(void *)(v25 + 40) = v39;
      uint64_t v27 = v25 + 48;
      *(void *)(v24 + 8) = v25 + 48;
    }

    *(void *)(v24 + 8) = v27;
    sub_55F18((uint64_t *)&v37);
    ++v9;
    uint64_t v10 = v13;
  }

  while (v9 != v32);
LABEL_33:
  sub_72210(a3, 1920099684LL);
  return result;
}

void sub_7215C(_Unwind_Exception *a1)
{
  *(void *)(v3 + 8) = v2;
  sub_55F18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_721C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_55F18((uint64_t *)(i - 32));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_72210(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  BOOL result = sub_72348(a2);
  if (!result)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "RoutingManager.cpp";
      __int16 v10 = 1024;
      int v11 = 1376;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(void *)a1 = off_4709D0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

void sub_7232C(_Unwind_Exception *exception_object)
{
}

BOOL sub_72348(uint64_t a1)
{
  if ((int)a1 > 1919186543)
  {
    BOOL result = 1LL;
    if ((int)a1 > 1919971426)
    {
      if ((int)a1 > 1920099683)
      {
        if ((_DWORD)a1 == 1920099684) {
          return result;
        }
        if ((_DWORD)a1 == 1920429155) {
          return 0LL;
        }
        int v2 = 1920168053;
        goto LABEL_29;
      }

      if ((_DWORD)a1 == 1919971427) {
        return 0LL;
      }
      unsigned __int16 v4 = 29045;
    }

    else
    {
      if ((int)a1 <= 1919904884)
      {
        if ((_DWORD)a1 == 1919186544) {
          return result;
        }
        int v2 = 1919842148;
        goto LABEL_29;
      }

      if ((_DWORD)a1 == 1919904885 || (_DWORD)a1 == 1919907442) {
        return 0LL;
      }
      unsigned __int16 v4 = 27747;
    }

    int v2 = v4 | 0x72700000;
    goto LABEL_29;
  }

  if ((int)a1 > 1919050850)
  {
    if ((int)a1 > 1919181935)
    {
      if ((_DWORD)a1 == 1919181936 || (_DWORD)a1 == 1919184754) {
        return 0LL;
      }
      int v2 = 1919185776;
      goto LABEL_29;
    }

    if ((_DWORD)a1 != 1919050851)
    {
      int v2 = 1919118966;
      goto LABEL_29;
    }

    return 0LL;
  }

  if ((int)a1 <= 1667327074)
  {
    if ((_DWORD)a1)
    {
      int v2 = 1651799408;
      goto LABEL_29;
    }

    return 0LL;
  }

  if ((_DWORD)a1 == 1667327075 || (_DWORD)a1 == 1918989155) {
    return 0LL;
  }
  int v2 = 1919050611;
LABEL_29:
  if ((_DWORD)a1 == v2) {
    return 0LL;
  }
  uint64_t v5 = (os_log_t *)sub_138E8(19);
  uint64_t v6 = *v5;
  if (!*v5) {
    return 0LL;
  }
  BOOL result = os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_2CA1C(__p, a1);
    if (v9 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    int v11 = "RoutingManager.cpp";
    __int16 v12 = 1024;
    int v13 = 1457;
    __int16 v14 = 2080;
    char v15 = v7;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unsupported VirtualAudioPlugInRouteChangeReason %s",  buf,  0x1Cu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_725DC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)operator new(0x30uLL);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
      sub_116648(v5 + 2, v4 + 16);
      *((_BYTE *)v5 + 40) = *(_BYTE *)(v4 + 40);
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    uint64_t v6 = *(uint64_t **)(a1 + 16);
    if (v6)
    {
      sub_10AF78(v6 + 2);
      operator delete(v6);
    }

    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
  }

  return a1;
}

void sub_72668(_Unwind_Exception *a1)
{
}

void sub_7267C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = (unint64_t)a1;
  a1[1] = (unint64_t)a1;
  a1[2] = 0LL;
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5 == (void *)(a2 + 16))
  {
    unint64_t v27 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)v5[3];
      if (v7)
      {
        int v8 = std::__shared_weak_count::lock(v7);
        uint64_t v32 = (uint64_t *)v8;
        if (v8)
        {
          char v9 = v8;
          uint64_t v10 = v5[2];
          uint64_t v31 = v10;
          if (v10 && sub_54ADC(v10, a3))
          {
            p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
            do
              unint64_t v12 = __ldxr(p_shared_weak_owners);
            while (__stxr(v12 + 1, p_shared_weak_owners));
            int v13 = operator new(0x20uLL);
            v13[2] = v10;
            v13[3] = v9;
            unint64_t v14 = *v3;
            *int v13 = *v3;
            v13[1] = v3;
            *(void *)(v14 + 8) = v13;
            unint64_t *v3 = (unint64_t)v13;
            ++v3[2];
          }

          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }

      uint64_t v17 = (std::__shared_weak_count *)v5[5];
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        uint64_t v32 = (uint64_t *)v18;
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = v5[4];
          uint64_t v31 = v20;
          if (v20 && sub_54ADC(v20, a3))
          {
            unsigned int v21 = (unint64_t *)&v19->__shared_weak_owners_;
            do
              unint64_t v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
            unint64_t v23 = operator new(0x20uLL);
            v23[2] = v20;
            v23[3] = v19;
            unint64_t v24 = *v3;
            void *v23 = *v3;
            v23[1] = v3;
            *(void *)(v24 + 8) = v23;
            unint64_t *v3 = (unint64_t)v23;
            ++v3[2];
          }

          unint64_t v25 = (unint64_t *)&v19->__shared_owners_;
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }

      uint64_t v5 = (void *)v5[1];
    }

    while (v5 != v4);
    a1 = (unint64_t *)v3[1];
    unint64_t v27 = v3[2];
  }

  sub_1174D0(a1, v3, v27);
  uint64_t v31 = (uint64_t)&v31;
  uint64_t v32 = &v31;
  uint64_t v33 = 0LL;
  unsigned int v28 = (unint64_t *)v3[1];
  if (v28 != v3)
  {
    do
    {
      unsigned __int16 v29 = (unint64_t *)v28[1];
      if (v29 == v3) {
        break;
      }
      while (sub_103644((uint64_t *)v28 + 2, v29 + 2))
      {
        unsigned __int16 v29 = (unint64_t *)v29[1];
        if (v29 == v3)
        {
          unsigned __int16 v29 = v3;
          break;
        }
      }

      uint64_t v30 = (unint64_t *)v28[1];
      if (v30 != v29) {
        sub_1176BC((uint64_t)&v31, &v31, (uint64_t)v3, v30, v29);
      }
      unsigned int v28 = v29;
    }

    while (v29 != v3);
  }

  sub_85B80(&v31);
}

void sub_728AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_728E0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_728F4(a1);
  operator delete(v1);
}

uint64_t sub_728F4(uint64_t a1)
{
  *(void *)a1 = off_470A50;
  int v2 = *(const void **)(a1 + 504);
  if (v2) {
    CFRelease(v2);
  }
  sub_32C8C(*(void **)(a1 + 480));
  uint64_t v3 = *(void **)(a1 + 424);
  if (v3)
  {
    *(void *)(a1 + 432) = v3;
    operator delete(v3);
  }

  return sub_72948(a1);
}

uint64_t sub_72948(uint64_t a1)
{
  *(void *)a1 = off_4709F0;
  sub_32C8C(*(void **)(a1 + 408));
  uint64_t v3 = (void **)(a1 + 368);
  sub_8F2D4(&v3);
  sub_51FA0(a1 + 320);
  sub_51FA0(a1 + 280);
  sub_51FA0(a1 + 240);
  uint64_t v3 = (void **)(a1 + 216);
  sub_8C8F0(&v3);
  uint64_t v3 = (void **)(a1 + 192);
  sub_8C8F0(&v3);
  sub_FF3B8(*(void **)(a1 + 136));
  sub_32C8C(*(void **)(a1 + 104));
  sub_11AD14(*(void **)(a1 + 80));
  sub_FF3B8(*(void **)(a1 + 56));
  sub_32C8C(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_72A04(int a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    while (1)
    {
      uint64_t v4 = *a3;
      if (*a3)
      {
        if (*(_DWORD *)(v4 + 580) == a2 && *(_DWORD *)(v4 + 576) == a1) {
          break;
        }
      }

      if (++a3 == a4) {
        return 0LL;
      }
    }
  }

  if (a3 == a4) {
    return 0LL;
  }
  else {
    return *a3;
  }
}

CFStringRef sub_72A50(CFStringRef *a1, int *a2)
{
  int v3 = *a2;
  if (*a2 > 1987011683)
  {
    if (v3 > 1987277416)
    {
      if (v3 > 1987279211)
      {
        switch(v3)
        {
          case 1987279212:
            CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_SystemLocal", 30LL, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987279218:
            CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_SystemRemote", 31LL, 0x8000100u, 0);
            *a1 = result;
            if (!result) {
              break;
            }
            return result;
          case 1987738234:
            CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_Actuator", 27LL, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          default:
LABEL_80:
            uint64_t v7 = (os_log_t *)sub_138E8(13);
            int v8 = *v7;
            if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              sub_2CA1C(__p, *a2);
              if (v13 >= 0) {
                char v9 = __p;
              }
              else {
                char v9 = (void **)__p[0];
              }
              int v10 = *a2;
              *(_DWORD *)buf = 136315906;
              char v15 = "StandardUtilities.cpp";
              __int16 v16 = 1024;
              int v17 = 1574;
              __int16 v18 = 2080;
              uint64_t v19 = v9;
              __int16 v20 = 1024;
              int v21 = v10;
              _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to get an UID from an unknown VirtualAudioDeviceType ([%s]/%u).",  buf,  0x22u);
              if (v13 < 0) {
                operator delete(__p[0]);
              }
            }

            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error( exception,  "Attempt to get an UID from an unknown VirtualAudioDeviceType ([%s]/%u).");
        }
      }

      else
      {
        switch(v3)
        {
          case 1987277417:
            CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_SiriOutput", 29LL, 0x8000100u, 0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987277665:
            CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_SecureSoundAnalysis",  38LL,  0x8000100u,  0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          case 1987277668:
            CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_SecureSpeechDetection",  40LL,  0x8000100u,  0);
            *a1 = result;
            if (result) {
              return result;
            }
            break;
          default:
            goto LABEL_80;
        }
      }
    }

    else if (v3 > 1987276896)
    {
      switch(v3)
      {
        case 1987276897:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_SpeakerAlert", 31LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276899:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_SpatialCapture", 33LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276900:
          CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_SpeechDetection",  34LL,  0x8000100u,  0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }

    else
    {
      switch(v3)
      {
        case 1987011684:
          return (CFStringRef)sub_8B1F8(@"%s_%u", a1, "kVirtualAudioDeviceUID_OnDemand", a2[1]);
        case 1987274852:
          CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_SecureSharedDSP",  34LL,  0x8000100u,  0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1987276148:
          CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_SecureMutedTalkerDetection",  45LL,  0x8000100u,  0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }

LABEL_79:
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Could not construct");
  }

  if (v3 > 1986293107)
  {
    if (v3 > 1986818403)
    {
      switch(v3)
      {
        case 1986818404:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_LDCM", 23LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986881902:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_LPMicInjector", 32LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986884979:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_Music", 24LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }

    else
    {
      switch(v3)
      {
        case 1986293108:
          CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_DedicatedMeasurement",  39LL,  0x8000100u,  0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986552183:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_Hawking", 26LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        case 1986817911:
          CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_LowLatency", 29LL, 0x8000100u, 0);
          *a1 = result;
          if (result) {
            return result;
          }
          break;
        default:
          goto LABEL_80;
      }
    }

    goto LABEL_79;
  }

  if (v3 > 1986290543)
  {
    switch(v3)
    {
      case 1986290544:
        CFStringRef result = CFStringCreateWithBytes( 0LL,  (const UInt8 *)"VirtualAudioDevice_DedicatedVideoRecording",  42LL,  0x8000100u,  0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      case 1986291046:
        CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_Default", 26LL, 0x8000100u, 0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      case 1986291305:
        CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_DecoupledInput", 33LL, 0x8000100u, 0);
        *a1 = result;
        if (result) {
          return result;
        }
        break;
      default:
        goto LABEL_80;
    }

    goto LABEL_79;
  }

  if (v3 == 1751409255)
  {
    CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_HapticDebug", 30LL, 0x8000100u, 0);
    *a1 = result;
    if (result) {
      return result;
    }
    goto LABEL_79;
  }

  if (v3 == 1986095474)
  {
    CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_PerAppAirPlay", 32LL, 0x8000100u, 0);
    *a1 = result;
    if (result) {
      return result;
    }
    goto LABEL_79;
  }

  if (v3 != 1986224492) {
    goto LABEL_80;
  }
  CFStringRef result = CFStringCreateWithBytes(0LL, (const UInt8 *)"VirtualAudioDevice_CallContinuity", 33LL, 0x8000100u, 0);
  *a1 = result;
  if (!result) {
    goto LABEL_79;
  }
  return result;
}

void sub_733DC(_Unwind_Exception *a1)
{
}

void sub_7344C()
{
}

void sub_73454(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_85B80(v3 + 3);
        operator delete(v3);
        int v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_734C4(void *a1)
{
  if (a1)
  {
    sub_734C4(*a1);
    sub_734C4(a1[1]);
    sub_8CC80((uint64_t)(a1 + 5));
    operator delete(a1);
  }

void sub_73504(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  sub_6DD4();
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  uint64_t v7 = *(void **)(a2 + 40);
  int v8 = (void *)(a2 + 48);
  if (v7 != (void *)(a2 + 48))
  {
    do
    {
      if (!v7[6])
      {
        unint64_t v22 = (os_log_t *)sub_138E8(13);
        unint64_t v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "VirtualAudio_PortManager.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 210;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      char v9 = (std::__shared_weak_count *)v7[5];
      if (v9)
      {
        int v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          int v11 = v10;
          uint64_t v12 = v7[4];
          if (v12)
          {
            sub_737E8((uint64_t)__p, a3);
            int v13 = sub_54ADC(v12, (uint64_t)__p);
            if (cf) {
              CFRelease(cf);
            }
            sub_32C8C(v26);
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }

            if (v13)
            {
              int v14 = *(_DWORD *)(v7[6] + 8LL);
              char v15 = operator new(0x18uLL);
              v15[4] = v14;
              uint64_t v16 = *a1;
              *(void *)char v15 = *a1;
              *((void *)v15 + 1) = a1;
              *(void *)(v16 + 8) = v15;
              *a1 = (uint64_t)v15;
              ++a1[2];
            }
          }

          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            unint64_t v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }

      uint64_t v19 = (void *)v7[1];
      if (v19)
      {
        do
        {
          __int16 v20 = v19;
          uint64_t v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          __int16 v20 = (void *)v7[2];
          BOOL v21 = *v20 == (void)v7;
          uint64_t v7 = v20;
        }

        while (!v21);
      }

      uint64_t v7 = v20;
    }

    while (v20 != v8);
  }

  if (v6) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_73768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_737E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_7A5B8((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + memset(buf, 0, 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  CFStringRef result = sub_86550((uint64_t *)(a1 + 48), a2 + 48);
  int v5 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 72) = v5;
  int v6 = *(const void **)(a2 + 80);
  if (v6)
  {
    CFStringRef result = (void *)CFRetain(v6);
    int v5 = *(_DWORD *)(a1 + 72);
  }

  *(void *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 72) = v5 & 0xFFFFFFFC;
  return result;
}

void sub_73874(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_73890(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_73898(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_738A0(void **a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[1] + 680LL))(a1[1]);
  if (result)
  {
    uint64_t v13 = result;
    int v48 = (*(uint64_t (**)(void *, void))(*a1[1] + 696LL))(a1[1], *a2);
    uint64_t v49 = 1735159650LL;
    int v14 = *a2;
    if ((int)*a2 > 1818456941)
    {
      switch(v14)
      {
        case 1818456942:
          int v21 = *a5;
          if (v21 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])( a1,  a2,  a3,  a4))
          {
            uint64_t v33 = (os_log_t *)sub_138E8(13);
            int v17 = *v33;
            if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1073;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDeviceProperty"
                    "ClockSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 8) != 4)
          {
            uint64_t v34 = (os_log_t *)sub_138E8(13);
            int v17 = *v34;
            if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1077;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong input data size for kAudioDevicePr"
                    "opertyClockSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)a6)
          {
            os_signpost_id_t v35 = (os_log_t *)sub_138E8(13);
            int v17 = *v35;
            if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1078;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: "
                    "wrong input data buffer for kAudioDevicePropertyClockSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 24) != 8)
          {
            __n128 v36 = (os_log_t *)sub_138E8(13);
            int v17 = *v36;
            if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1079;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong output data size for kAudioDeviceP"
                    "ropertyClockSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)(a6 + 16))
          {
            unint64_t v22 = (os_log_t *)sub_138E8(13);
            int v17 = *v22;
            if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1080;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "wrong output data buffer for kAudioDevicePropertyClockSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          break;
        case 1835295843:
          int v23 = *a5;
          if (v23 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])( a1,  a2,  a3,  a4))
          {
            __n128 v37 = (os_log_t *)sub_138E8(13);
            int v17 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1116;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDeviceProperty"
                    "PlayThruDestinationNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 8) != 4)
          {
            uint64_t v38 = (os_log_t *)sub_138E8(13);
            int v17 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1120;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong input data size for kAudioDevicePr"
                    "opertyPlayThruDestinationNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)a6)
          {
            unint64_t v39 = (os_log_t *)sub_138E8(13);
            int v17 = *v39;
            if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1121;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: "
                    "wrong input data buffer for kAudioDevicePropertyPlayThruDestinationNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 24) != 8)
          {
            uint64_t v40 = (os_log_t *)sub_138E8(13);
            int v17 = *v40;
            if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1122;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong output data size for kAudioDeviceP"
                    "ropertyPlayThruDestinationNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)(a6 + 16))
          {
            int v41 = (os_log_t *)sub_138E8(13);
            int v17 = *v41;
            if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1123;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "wrong output data buffer for kAudioDevicePropertyPlayThruDestinationNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          break;
        case 1819501422:
          int v15 = *a5;
          if (v15 != ((unsigned int (*)(void **, unsigned int *, uint64_t, uint64_t))(*a1)[4])( a1,  a2,  a3,  a4))
          {
            unint64_t v25 = (os_log_t *)sub_138E8(13);
            int v17 = *v25;
            if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1051;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDeviceProperty"
                    "DataSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 8) != 4)
          {
            unint64_t v26 = (os_log_t *)sub_138E8(13);
            int v17 = *v26;
            if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1055;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong input data size for kAudioDevicePr"
                    "opertyDataSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)a6)
          {
            unint64_t v27 = (os_log_t *)sub_138E8(13);
            int v17 = *v27;
            if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1056;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mInputData is NULL]: "
                    "wrong input data buffer for kAudioDevicePropertyDataSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (*(_DWORD *)(a6 + 24) != 8)
          {
            unsigned int v28 = (os_log_t *)sub_138E8(13);
            int v17 = *v28;
            if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1057;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong output data size for kAudioDeviceP"
                    "ropertyDataSourceNameForIDCFString";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          if (!*(void *)(a6 + 16))
          {
            uint64_t v16 = (os_log_t *)sub_138E8(13);
            int v17 = *v16;
            if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              int v51 = "HP_Control.cpp";
              __int16 v52 = 1024;
              int v53 = 1058;
              unint64_t v18 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError) [theTranslationData->mOutputData is NULL]: "
                    "wrong output data buffer for kAudioDevicePropertyDataSourceNameForIDCFString";
LABEL_112:
              _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
              goto LABEL_113;
            }

            goto LABEL_113;
          }

          break;
        default:
          return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v13 + 56LL))(v13, &v48, a3);
      }

uint64_t sub_744FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  if (*a2 != 1650685548) {
    return sub_875F0(a1, a2, a3, a4, a5, a6);
  }
  int v8 = *a5;
  if (v8 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
  {
    int v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        int v14 = "HP_Control.cpp";
        __int16 v15 = 1024;
        int v16 = 636;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioBooleanControlPropertyValue",  (uint8_t *)&v13,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
  *(_DWORD *)a6 = result;
  return result;
}

uint64_t sub_74670(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 1650685548) {
    return 4LL;
  }
  else {
    return sub_8758C(a1, a2, a3, a4);
  }
}

BOOL sub_74690(uint64_t a1)
{
  int v5 = 4;
  int v6 = 0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F626D757465LL;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)v1 + 40LL))( v1,  &v3,  0LL,  0LL,  &v5,  &v6);
  return v6 != 0;
}

uint64_t sub_746F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  while (v3 != v4)
  {
    if (*(void *)v3 == a2)
    {
      if (a2) {
        return 1LL;
      }
      break;
    }

    if (*(void *)(*(void *)v3 + 8LL) == a2) {
      return 1LL;
    }
    v3 += 8LL;
  }

  uint64_t v6 = *(void *)(a1 + 472);
  uint64_t v7 = *(uint64_t **)(v6 + 8);
  int v8 = *(uint64_t **)(v6 + 16);
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v9 = 0LL;
      return v9 != 0;
    }

    uint64_t v9 = *v7;
    if (*v7 == a2) {
      break;
    }
    if (*(void *)(v9 + 8) == a2) {
      return v9 != 0;
    }
    ++v7;
  }

  uint64_t v9 = a2;
  return v9 != 0;
}

void sub_74774(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 200) = 0LL;
  if (*(_DWORD *)(a1 + 40) == 2) {
    sub_B4700((_DWORD *)a2, 1);
  }
  sub_74954( *(void *)a2,  0,  *(unsigned int *)(a2 + 48),  *(void **)(a2 + 232),  (vm_address_t **)(a2 + 208),  *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 232) = 0LL;
  if (*(_DWORD *)(a1 + 44) == 2) {
    sub_B4700((_DWORD *)a2, 0);
  }
}

void sub_7480C(_DWORD **a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    sub_74954((uint64_t)*a1, 1, *((unsigned int *)a1 + 8), v2, (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36));
    a1[9] = 0LL;
  }

  if (*((_DWORD *)a1 + 10) <= 1u)
  {
    std::string __p = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_74A64((uint64_t *)a1, 1, (uint64_t)&__p);
    a1[9] = sub_74B80( *a1,  1,  &__p,  *((_DWORD *)a1 + 8),  (vm_address_t **)a1 + 6,  *((unsigned __int8 *)a1 + 36),  *((_DWORD *)a1 + 10) == 1);
    if (__p) {
      operator delete(__p);
    }
  }

  uint64_t v3 = a1[13];
  if (v3)
  {
    sub_74954((uint64_t)*a1, 0, *((unsigned int *)a1 + 8), v3, (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36));
    a1[13] = 0LL;
  }

  if (*((_DWORD *)a1 + 11) <= 1u)
  {
    std::string __p = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_74A64((uint64_t *)a1, 0, (uint64_t)&__p);
    a1[13] = sub_74B80( *a1,  0,  &__p,  *((_DWORD *)a1 + 8),  (vm_address_t **)a1 + 10,  *((unsigned __int8 *)a1 + 36),  *((_DWORD *)a1 + 11) == 1);
    if (__p) {
      operator delete(__p);
    }
  }

void sub_74930( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_74954(uint64_t a1, int a2, uint64_t a3, void *a4, vm_address_t **a5, int a6)
{
  if (a4) {
    free(a4);
  }
  uint64_t v12 = *a5;
  int v11 = a5[1];
  if (*a5 != v11)
  {
    unsigned int v13 = 0;
    if (a2) {
      uint64_t v14 = 496LL;
    }
    else {
      uint64_t v14 = 520LL;
    }
    if (a2) {
      uint64_t v15 = a1 + 496;
    }
    else {
      uint64_t v15 = a1 + 520;
    }
    do
    {
      vm_address_t v16 = *v12;
      if (*v12)
      {
        uint64_t v17 = *(void *)(a1 + v14);
        if (v13 < (unint64_t)((*(void *)(v15 + 8) - v17) >> 3))
        {
          uint64_t v18 = *(void *)(v17 + 8LL * v13);
          if (v18)
          {
            uint64_t v19 = *(unsigned int *)(v16 + 8);
            if (a6)
            {
              uint64_t v19 = (v19 + 16);
              uint64_t v20 = a3;
              vm_address_t v21 = *v12;
            }

            else
            {
              vm_address_t v21 = v16 + 16;
              uint64_t v20 = a3;
            }

            (*(void (**)(uint64_t, uint64_t, uint64_t, vm_address_t))(*(void *)v18 + 168LL))( v18,  v20,  v19,  v21);
          }
        }

        vm_deallocate(mach_task_self_, v16, *(unsigned int *)(v16 + 8) + 16LL);
        int v11 = a5[1];
      }

      ++v13;
      ++v12;
    }

    while (v12 != v11);
    uint64_t v12 = *a5;
  }

  a5[1] = v12;
}

void sub_74A64(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 528LL;
  if (a2) {
    uint64_t v4 = 504LL;
  }
  uint64_t v5 = 520LL;
  uint64_t v6 = *(void *)(v3 + v4);
  if (a2) {
    uint64_t v5 = 496LL;
  }
  unint64_t v7 = v6 - *(void *)(v3 + v5);
  *(void *)(a3 + 8) = 0LL;
  if ((v7 & 0x7FFFFFFF8LL) != 0)
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = (v7 >> 3);
    do
    {
      LOBYTE(v13) = 0;
      uint64_t v14 = (uint64_t *)a1[1];
      do
      {
        uint64_t v15 = *v14;
        if (*(_BYTE *)(*v14 + 54))
        {
          uint64_t v16 = v15 + 128;
          if (a2) {
            uint64_t v17 = 128LL;
          }
          else {
            uint64_t v17 = 152LL;
          }
          if (!a2) {
            uint64_t v16 = v15 + 152;
          }
          BOOL v13 = *(void *)(v16 + 8) <= v11
             || (*(void *)(*(void *)(v15 + v17) + 8 * (v11 >> 6)) & (1LL << v11)) != 0;
          BOOL v18 = v13;
        }

        else
        {
          BOOL v18 = 0;
        }

        ++v14;
      }

      while (!v18);
      BOOL v19 = v13;
      sub_74FB0(a3, &v19);
      ++v11;
    }

    while (v11 != v12);
  }

_DWORD *sub_74B80(_DWORD *a1, int a2, void *a3, unsigned int a4, vm_address_t **a5, int a6, int a7)
{
  a5[1] = *a5;
  int v11 = a1[122];
  int v62 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 480LL))(a1);
  uint64_t v12 = a1 + 130;
  BOOL v13 = (uint64_t *)(a1 + 132);
  uint64_t v14 = a1 + 124;
  if (a2) {
    BOOL v13 = (uint64_t *)(a1 + 126);
  }
  uint64_t v15 = *v13;
  if (a2) {
    uint64_t v16 = (uint64_t *)(a1 + 124);
  }
  else {
    uint64_t v16 = (uint64_t *)(a1 + 130);
  }
  uint64_t v17 = *v16;
  unint64_t v18 = v15 - v17;
  unint64_t v19 = (unint64_t)(v15 - v17) >> 3;
  uint64_t v20 = calloc(1uLL, (2 * (v15 - v17)) | 8LL);
  if (v20) {
    *uint64_t v20 = v19;
  }
  std::string::size_type v59 = v20;
  if ((_DWORD)v19)
  {
    unint64_t v21 = 0LL;
    uint64_t v61 = (v18 >> 3);
    if (!a2) {
      uint64_t v14 = v12;
    }
    do
    {
      else {
        unint64_t v22 = *(_DWORD ***)(*v14 + 8 * v21);
      }
      int v23 = sub_75130(v22[13], v11);
      int v24 = sub_75130(v22[13], v62);
      if (a3[1] <= v21)
      {
        if (!a7) {
          goto LABEL_25;
        }
      }

      else if (((*(void *)(*a3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0 || (a7 & 1) == 0)
      {
LABEL_25:
        uint64_t v30 = a5[1];
        unint64_t v29 = (unint64_t)a5[2];
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = v30 - *a5;
          uint64_t v33 = v29 - (void)*a5;
          uint64_t v34 = v33 >> 2;
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            unint64_t v35 = (unint64_t)sub_7DC90(v35);
          }
          else {
            uint64_t v36 = 0LL;
          }
          __int16 v45 = (vm_address_t *)(v35 + 8 * v32);
          vm_address_t *v45 = 0LL;
          uint64_t v31 = v45 + 1;
          int v47 = (char *)*a5;
          uint64_t v46 = (char *)a5[1];
          if (v46 != (char *)*a5)
          {
            do
            {
              vm_address_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *--__int16 v45 = v48;
            }

            while (v46 != v47);
            uint64_t v46 = (char *)*a5;
          }

          *a5 = v45;
          a5[1] = v31;
          a5[2] = (vm_address_t *)(v35 + 8 * v36);
          if (v46) {
            operator delete(v46);
          }
        }

        else
        {
          *uint64_t v30 = 0LL;
          uint64_t v31 = v30 + 1;
        }

        a5[1] = v31;
        uint64_t v49 = &v59[4 * v21];
        v49[2] = v22[13][11];
        v49[3] = v23;
        *((void *)v49 + 2) = 0LL;
        goto LABEL_60;
      }

      uint64_t v25 = (v24 + v23);
      vm_address_t address = 0LL;
      if (vm_allocate(mach_task_self_, &address, (v25 + 16), 1))
      {
        unint64_t v26 = (os_log_t *)sub_138E8(13);
        unint64_t v27 = *v26;
        if (*v26)
        {
          if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            int v65 = "HP_IOProcList.h";
            __int16 v66 = 1024;
            int v67 = 858;
            _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE (theKernelError): vm_allocate failed",  buf,  0x12u);
          }
        }
      }

      if (address)
      {
        bzero((void *)address, (v25 + 16));
        unsigned int v28 = (_DWORD *)address;
        *(_DWORD *)vm_address_t address = v23;
        v28[1] = v11;
        v28[2] = v25;
        v28[3] = v23;
        if (a6) {
          (*((void (**)(_DWORD **, void, void))*v22 + 20))(v22, a4, (v25 + 16));
        }
        else {
          (*((void (**)(_DWORD **, void, uint64_t, _DWORD *))*v22 + 20))(v22, a4, v25, v28 + 4);
        }
        uint64_t v38 = a5[1];
        unint64_t v37 = (unint64_t)a5[2];
        if ((unint64_t)v38 >= v37)
        {
          uint64_t v40 = v38 - *a5;
          uint64_t v41 = v37 - (void)*a5;
          uint64_t v42 = v41 >> 2;
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            unint64_t v43 = (unint64_t)sub_7DC90(v43);
          }
          else {
            uint64_t v44 = 0LL;
          }
          uint64_t v50 = (vm_address_t *)(v43 + 8 * v40);
          *uint64_t v50 = address;
          unint64_t v39 = v50 + 1;
          __int16 v52 = (char *)*a5;
          int v51 = (char *)a5[1];
          if (v51 != (char *)*a5)
          {
            do
            {
              vm_address_t v53 = *((void *)v51 - 1);
              v51 -= 8;
              *--uint64_t v50 = v53;
            }

            while (v51 != v52);
            int v51 = (char *)*a5;
          }

          *a5 = v50;
          a5[1] = v39;
          a5[2] = (vm_address_t *)(v43 + 8 * v44);
          if (v51) {
            operator delete(v51);
          }
        }

        else
        {
          *uint64_t v38 = address;
          unint64_t v39 = v38 + 1;
        }

        a5[1] = v39;
        unint64_t v54 = &v59[4 * v21];
        v54[2] = v22[13][11];
        vm_address_t v55 = address + 16;
        v54[3] = *(_DWORD *)address;
        *((void *)v54 + 2) = v55;
      }

LABEL_60:
      ++v21;
    }

    while (v21 != v61);
  }

  return v59;
}

  unsigned int v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    uint64_t v30 = v43;
    if (v5 <= v43) {
      uint64_t v30 = v43 % v5;
    }
  }

  else
  {
    uint64_t v30 = (v5 - 1) & v43;
  }

  uint64_t v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    uint64_t v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      uint64_t v33 = 0;
      do
      {
        uint64_t v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          uint64_t v36 = v35;
          if (v35 >= v5) {
            uint64_t v36 = v35 % v5;
          }
        }

        else
        {
          uint64_t v36 = v35 & (v5 - 1);
        }

        if (v36 != v30) {
          break;
        }
        unint64_t v37 = v35 == v43 && sub_7F194(v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0) {
          break;
        }
        v33 |= v37;
        uint64_t v32 = *(unsigned __int8 **)v34;
        uint64_t v31 = v34;
      }

      while (*(void *)v34);
    }
  }

  uint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }

  else
  {
    v38 &= v5 - 1;
  }

  if (!v31)
  {
    *uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8LL);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }

    else
    {
      v39 &= v5 - 1;
    }

      ++v20;
    }

    while (v20 != v60);
  }

  return v58;
}

        uint64_t v41 = v38 == 0;
        if (!v37) {
          goto LABEL_64;
        }
LABEL_61:
        uint64_t v44 = (unint64_t *)&v37->__shared_owners_;
        do
          __int16 v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          if (!v31) {
            goto LABEL_66;
          }
LABEL_65:
          std::__shared_weak_count::__release_weak(v31);
          goto LABEL_66;
        }

      int v47 = sub_138E8(20);
      vm_address_t v48 = sub_138E8(38);
      uint64_t v49 = 0;
      uint64_t v50 = 0LL;
      *(void *)unint64_t v103 = 0x100000002LL;
      int v51 = *(void *)(v47 + 8);
      while (1)
      {
        __int16 v52 = *(int *)&v103[4 * v50];
        vm_address_t v53 = v49;
        if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
          break;
        }
        uint64_t v49 = 1;
        uint64_t v50 = 1LL;
        if ((v53 & 1) != 0) {
          goto LABEL_66;
        }
      }

      if ((v51 & v52) == 0) {
        int v47 = v48;
      }
LABEL_66:
      unint64_t v54 = *(os_log_s **)v47;
      if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CEE1C(&__p, (unsigned int *)v37);
        vm_address_t v55 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)unint64_t v103 = 136315650;
        *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 455;
        uint64_t v104 = 2080;
        uint64_t v105 = v55;
        _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found extended volume description: %s", v103, 0x1Cu);
      }

      if (*(_BYTE *)(v37 + 4)) {
        uint64_t v56 = (unsigned int *)v37;
      }
      else {
        uint64_t v56 = (unsigned int *)&buf[16];
      }
      char v57 = *v56;
      *(_DWORD *)&buf[16] = v57;
      if (v57 >= 4)
      {
        uint64_t v58 = (os_log_t *)sub_138E8(13);
        std::string::size_type v59 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v103 = 136315394;
          *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v103[12] = 1024;
          *(_DWORD *)&v103[14] = 458;
          _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Logic error: a proper software volume mode was not specified in the routing database",  v103,  0x12u);
        }

        char v57 = *(_DWORD *)&buf[16];
      }

      if (v57)
      {
        if (a3[36] == 1885888867)
        {
          int v60 = (os_log_t *)sub_138E8(13);
          uint64_t v61 = *v60;
          if (*v60)
          {
            if (os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unint64_t v103 = 136315394;
              *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v103[12] = 1024;
              *(_DWORD *)&v103[14] = 466;
              _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Logic error: attempting to use software volume for hearing aid compliance",  v103,  0x12u);
            }
          }
        }

        (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a2 + 304LL))(v103, a2, a3);
        unint64_t v63 = *(void *)v103;
        int v62 = *(void *)&v103[8];
        *(void *)unint64_t v103 = 0LL;
        *(void *)&v103[8] = 0LL;
        uint64_t v64 = *(std::__shared_weak_count **)&v107[12];
        *(void *)&v107[4] = v63;
        *(void *)&v107[12] = v62;
        if (v64)
        {
          std::__shared_weak_count::__release_weak(v64);
          if (*(void *)&v103[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v103[8]);
          }
          int v62 = *(void *)&v107[12];
        }

        if (!v62 || *(void *)(v62 + 8) == -1LL)
        {
          int v65 = (os_log_t *)sub_138E8(19);
          __int16 v66 = *v65;
          if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v103 = 136315394;
            *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&v103[12] = 1024;
            *(_DWORD *)&v103[14] = 472;
            _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing database specified SW volume but no SW volume is associated with the aggregate device... falling back to HW-only volume",  v103,  0x12u);
          }

          *(_DWORD *)&buf[16] = 0;
        }

        else if (*(_DWORD *)&buf[16] == 1)
        {
          if (*(_BYTE *)(v37 + 12)) {
            *(double *)buf = *(float *)(v37 + 8);
          }
          if (*(_BYTE *)(v37 + 20)) {
            *(double *)&buf[8] = *(float *)(v37 + 16);
          }
          if (*(_BYTE *)(v37 + 40)) {
            uint64_t v101 = *(_OWORD *)(v37 + 24);
          }
        }
      }
    }
  }

  int v67 = (*(uint64_t (**)(unsigned int *))(*(void *)a3 + 288LL))(a3);
  if (*(_BYTE *)(a7 + 24))
  {
    char v68 = v101;
    char v95 = v67;
    if (*((double *)&v101 + 1) <= *(double *)&v101)
    {
      int v69 = *(float **)(a7 + 8);
    }

    else
    {
      int v70 = *(float **)a7;
      int v69 = *(float **)(a7 + 8);
      if (*(float **)a7 != v69)
      {
        while (1)
        {
          uint64_t v71 = *v70;
          if (++v70 == v69) {
            goto LABEL_128;
          }
        }
      }

      if (v70 != v69)
      {
        for (uint64_t i = v70 + 1; i != v69; ++i)
        {
          BOOL v75 = *i;
        }
      }

      if (v70 != v69)
      {
        int v69 = v70;
        *(void *)(a7 + 8) = v70;
      }
    }

    if ((_DWORD)v26) {
      goto LABEL_61;
    }
    goto LABEL_75;
  }

  sub_27D9BC((uint64_t *)buf, v6, "", 871);
  unint64_t v35 = *(void *)buf;
  uint64_t v36 = *(void *)(a1 + 136);
  else {
    unint64_t v37 = 1885762592LL;
  }
  unint64_t v26 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v35 + 136LL))(v35, v62, v37);
  uint64_t v38 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_60;
  }
  uint64_t v41 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    uint64_t v40 = __ldaxr(v41);
  while (__stlxr(v40 - 1, v41));
LABEL_59:
  if (v40) {
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if ((_DWORD)v26)
  {
LABEL_61:
    uint64_t v42 = (os_log_t *)sub_138E8(22);
    unint64_t v43 = *v42;
    if (!*v42 || !os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR)) {
      return v26;
    }
    sub_2CA1C(__p, v26);
    uint64_t v44 = SBYTE3(v68);
    __int16 v45 = *(_BYTE **)__p;
    sub_2CC00(&v61, (uint64_t)v62);
    uint64_t v46 = __p;
    if (v44 < 0) {
      uint64_t v46 = v45;
    }
    if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v47 = &v61;
    }
    else {
      int v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 875;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v46;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&_BYTE buf[30] = v47;
    uint64_t v33 = "%25s:%-5d Error '%s' setting physical stream format %s";
    uint64_t v34 = v43;
LABEL_69:
    _os_log_impl(&dword_0, v34, OS_LOG_TYPE_ERROR, v33, buf, 0x26u);
    if (SBYTE3(v68) < 0)
    {
      vm_address_t v48 = *(void **)__p;
LABEL_73:
      operator delete(v48);
      return v26;
    }

    return v26;
  }

uint64_t sub_74FA8()
{
  return 0LL;
}

void sub_74FB0(uint64_t a1, _BYTE *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5 != v4 << 6) {
    goto LABEL_29;
  }
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_29;
    }
    goto LABEL_10;
  }

  unint64_t v6 = v4 << 7;
  if (v6 <= (v5 & 0xFFFFFFFFFFFFFFC0LL) + 64) {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFC0LL) + 64;
  }
  if (v5 < v6)
  {
    if ((v6 & 0x8000000000000000LL) != 0) {
LABEL_8:
    }
      sub_7A87C();
LABEL_10:
    unint64_t v7 = ((v6 - 1) >> 6) + 1;
    int v8 = (uint64_t *)operator new(8 * v7);
    uint64_t v9 = *(void **)a1;
    *(void *)&__int128 v10 = v5;
    *((void *)&v10 + 1) = v7;
    unint64_t v11 = (v5 - 1) >> 6;
    if (v5 < 0x41) {
      unint64_t v11 = 0LL;
    }
    v8[v11] = 0LL;
    if (v5 > 0x3F || (v5 & 0x3F) != 0)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = &v9[v5 >> 6];
      uint64_t v15 = v8;
      do
      {
        uint64_t v16 = 1LL << v12;
        if (((*v9 >> v13) & 1) != 0) {
          uint64_t v17 = *v15 | v16;
        }
        else {
          uint64_t v17 = *v15 & ~v16;
        }
        uint64_t *v15 = v17;
        v9 += v13 == 63;
        if (v13 == 63) {
          int v13 = 0;
        }
        else {
          ++v13;
        }
        v15 += v12 == 63;
        if (v12 == 63) {
          int v12 = 0;
        }
        else {
          ++v12;
        }
      }

      while (v9 != v14 || v13 != (v5 & 0x3F));
      uint64_t v9 = *(void **)a1;
    }

    *(void *)a1 = v8;
    *(_OWORD *)(a1 + 8) = v10;
    if (v9)
    {
      operator delete(v9);
      unint64_t v5 = *(void *)(a1 + 8);
    }
  }

LABEL_29:
  *(void *)(a1 + 8) = v5 + 1;
  unint64_t v18 = *(void **)a1;
  unint64_t v19 = v5 >> 6;
  uint64_t v20 = 1LL << v5;
  if (*a2) {
    uint64_t v21 = v18[v19] | v20;
  }
  else {
    uint64_t v21 = v18[v19] & ~v20;
  }
  v18[v19] = v21;
}

  unint64_t v22 = std::__shared_weak_count::lock(v14);
  if (!v22) {
    goto LABEL_34;
  }
  int v23 = v22;
  int v24 = (unint64_t *)&v22->__shared_owners_;
  do
    uint64_t v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }

    AudioObjectAddPropertyListener(v14, &inAddress, (AudioObjectPropertyListenerProc)sub_91C54, (void *)v1);
    ++v13;
  }

  while (v13 != (AudioObjectID *)v7);
  int v23 = v2 - (void)v3;
  uint64_t v4 = (void *)&unk_3FF000;
LABEL_32:
  sub_7E6D4((char *)(v1 + 24), v3, v2, v23 >> 2);
  int v24 = sub_138E8(1);
  uint64_t v25 = sub_138E8(31);
  unint64_t v26 = 0;
  unint64_t v27 = 0LL;
  *(void *)buf = v4[411];
  unsigned int v28 = *(void *)(v24 + 8);
  while (1)
  {
    unint64_t v29 = *(int *)&buf[4 * v27];
    uint64_t v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    unint64_t v26 = 1;
    unint64_t v27 = 1LL;
    if ((v30 & 1) != 0) {
      goto LABEL_38;
    }
  }

  if ((v28 & v29) == 0) {
    int v24 = v25;
  }
LABEL_38:
  uint64_t v31 = *(os_log_s **)v24;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *(unsigned int **)(v1 + 24);
    uint64_t v32 = *(unsigned int **)(v1 + 32);
    sub_91FF0(&__p, v33, v32);
    uint64_t v34 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_IONotificationManager.cpp";
    uint64_t v44 = 1024;
    __int16 v45 = 97;
    uint64_t v46 = 2048;
    int v47 = v32 - v33;
    vm_address_t v48 = 2080;
    uint64_t v49 = v34;
    _os_log_impl(&dword_0, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Monitoring IO state for %lu VADs %s.", buf, 0x26u);
  }

  unint64_t v22 = std::__shared_weak_count::lock(v14);
  if (!v22) {
    goto LABEL_34;
  }
  int v23 = v22;
  int v24 = v21 == v15;
  uint64_t v25 = (unint64_t *)&v22->__shared_owners_;
  do
    unint64_t v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }

    unint64_t v5 = 0LL;
    goto LABEL_43;
  }

  if (v4 == 1885892674)
  {
    sub_B8F68(&v36, a1, "", 210);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 112LL))(v36);
    uint64_t v17 = v37;
    if (v37)
    {
      p_shared_owners = &v37->__shared_owners_;
      do
        unint64_t v19 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v19 - 1, (unint64_t *)p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v16 & 0xFF00000000LL) == 0 || v16 != 1701869160LL)
    {
      sub_1338A0(&v36, a1, 1885892706);
      if (v37)
      {
        sub_B8F68(&v32, &v36, "", 241);
        uint64_t v38 = 0x676C6F6273687370LL;
        unint64_t v39 = 0;
        uint64_t v20 = sub_5C2F8(v32);
        *((void *)&v23 + 1) = v21;
        *(void *)&int v23 = v20;
        unint64_t v22 = v23 >> 32;
        unint64_t v5 = 1LL;
        if ((v22 & 0xFF00000000LL) != 0 && (_DWORD)v22)
        {
          int v24 = *(void *)(a2 + 24);
          if (!v24) {
            sub_82CEC();
          }
          unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v24 + 48LL))(v24, &v36);
        }

        uint64_t v25 = v33;
        if (v33)
        {
          unint64_t v26 = (unint64_t *)&v33->__shared_owners_;
          do
            unint64_t v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

        goto LABEL_40;
      }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    uint64_t v14 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_15;
  }

  if (*(void *)(a4 + 88) != a1)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315394;
        uint64_t v25 = "HALJackStateHandler.cpp";
        unint64_t v26 = 1024;
        unint64_t v27 = 181;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The HAL passed inObject as different than mDevice.",  (uint8_t *)&v24,  0x12u);
      }
    }
  }

  uint64_t v9 = 0LL;
  while (1)
  {
    __int128 v10 = *v4;
    v4 += 3;
    if (v10 == 1784767339) {
      break;
    }
    if (a2 == ++v9) {
      goto LABEL_11;
    }
  }

  uint64_t v16 = (dispatch_queue_s *)sub_869B4();
  uint64_t v17 = operator new(8uLL);
  *uint64_t v17 = a4;
  dispatch_async_f(v16, v17, (dispatch_function_t)sub_158FA0);
  if ((_DWORD)v9 == a2)
  {
LABEL_11:
    unint64_t v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315394;
        uint64_t v25 = "HALJackStateHandler.cpp";
        unint64_t v26 = 1024;
        unint64_t v27 = 193;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate kAudioDevicePropertyJackIsConnected in inAddresses",  (uint8_t *)&v24,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( (std::runtime_error *)exception,  "Unable to locate kAudioDevicePropertyJackIsConnected in inAddresses");
    uint64_t v14 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_15:
    __cxa_throw(exception, v15, v14);
  }

  uint64_t v21 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v12;
  if (!v21) {
    goto LABEL_149;
  }
  unint64_t v22 = (unint64_t *)&v21->__shared_owners_;
  do
    int v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
LABEL_147:
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }

      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        unint64_t v6 = (char *)a1[2];
      }

      goto LABEL_41;
    }

    goto LABEL_5;
  }

  unint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unsigned int v28 = 1LL;
  }
  else {
    unsigned int v28 = v27;
  }
  unint64_t v29 = (char *)sub_7DC90(v28);
  uint64_t v31 = v30;
  uint64_t v32 = &v29[8 * v23];
  *(void *)&uint64_t v33 = v29;
  *((void *)&v33 + 1) = v32;
  char v95 = v33;
  uint64_t v34 = operator new(0x1000uLL);
  *(void *)&unint64_t v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&unint64_t v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&unint64_t v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }

    int v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1LL;
    }
    else {
      unint64_t v63 = v62;
    }
    uint64_t v64 = (char *)sub_7DC90(v63);
    uint64_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&unint64_t v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&unint64_t v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    uint64_t v92 = v35;
    char v95 = v37;
    operator delete(v29);
    unint64_t v35 = v92;
  }

  unint64_t v37 = v95;
LABEL_50:
  *(void *)uint64_t v32 = v34;
  *(void *)&unint64_t v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8LL)
  {
    int v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      int v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          int v74 = 1LL;
        }
        else {
          int v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        BOOL v75 = (char *)sub_7DC90(v74);
        char v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8LL];
        CFTypeRef v77 = v68;
        unsigned int v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          CFTypeRef v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8LL];
          int v79 = 8 * (v78 >> 3);
          BOOL v80 = v68;
          char v81 = v67;
          do
          {
            int v82 = *v81++;
            *(void *)BOOL v80 = v82;
            v80 += 8;
            v79 -= 8LL;
          }

          while (v79);
        }

        *(void *)&unint64_t v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&unint64_t v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          id v93 = v35;
          uint64_t v97 = v37;
          operator delete(v67);
          unint64_t v35 = v93;
          unint64_t v37 = v97;
        }
      }

      else
      {
        int v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        char v73 = v35 + 8 * (v71 >> 1);
        char v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          int v69 = (_BYTE *)*((void *)&v37 + 1);
        }

        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove( (void *)(v73 - (v35 - *((void *)&v37 + 1))),  *((const void **)&v37 + 1),  v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&unint64_t v37 = v96;
        }

        *((void *)&v37 + 1) = v68;
        *(void *)&unint64_t v35 = &v69[8 * v72];
      }
    }

    else
    {
      char v68 = (char *)*((void *)&v37 + 1);
    }

    int v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8LL;
  }

  __int16 v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84) {
    operator delete(v84);
  }
}

    if (*(_OWORD *)buf == __PAIR128__(__dst.__r_.__value_.__l.__size_, v16)) {
      break;
    }
    sub_148B9C(&cf, buf);
    sub_158360(v496, &v484);
    uint64_t v17 = *(const void **)v496;
    if (!*(void *)v496)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    unint64_t v18 = sub_8D7E0(*(const __CFNumber **)v496);
    CFRelease(v17);
    if ((int)v18 > 1919509352)
    {
      if ((_DWORD)v18 == 1919509353)
      {
        sub_D9B14(v480, &cf);
        if (!v480[0])
        {
          v451 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v451, "Could not construct");
        }

        sub_48100((uint64_t)v496, (const __CFString *)v480[0]);
        if (v499 < 2) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *(_DWORD *)(*(void *)(*(void *)&v497[8] + 8 * ((v498 + 1) / 0x66)) + 40 * ((v498 + 1) % 0x66) + 28);
        }
        std::to_string(&v487, v25);
        unint64_t v26 = std::string::append(&v487, "i", 1uLL);
        std::string __p = *v26;
        v26->__r_.__value_.__l.__size_ = 0LL;
        v26->__r_.__value_.__l.__cap_ = 0LL;
        v26->__r_.__value_.__r.__words[0] = 0LL;
        sub_1957A4(&v477, (void **)v496, (uint64_t)v496, (uint64_t)&__p);
        if ((v496[23] & 0x80000000) != 0) {
          operator delete(*(void **)v496);
        }
        if (v480[0]) {
          CFRelease(v480[0]);
        }
      }

      else
      {
        if ((_DWORD)v18 != 1936859168)
        {
LABEL_45:
          uint64_t v21 = *(id *)sub_138E8(24);
          unint64_t v22 = v21;
          if (v21)
          {
            int v23 = (os_log_s *)v21;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              sub_2CA1C(&__p, (uint64_t)v18);
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v496 = 136315650;
              *(void *)&v496[4] = "DSPChain.mm";
              *(_WORD *)&v496[12] = 1024;
              *(_DWORD *)&v496[14] = 3219;
              *(_WORD *)&v496[18] = 2080;
              *(void *)&v496[20] = p_p;
              _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not find macro command %s", v496, 0x1Cu);
            }
          }

          goto LABEL_73;
        }

        if (v499)
        {
          unint64_t v19 = (const __CFString *)cf;
          if (cf) {
            CFRetain(cf);
          }
          v474 = v19;
          sub_195700( &v477,  v19,  *(double *)(*(void *)(*(void *)&v497[8] + 8 * (v498 / 0x66)) + 40 * (v498 % 0x66)));
          if (v19) {
LABEL_63:
          }
            CFRelease(v19);
        }
      }
    }

    else if ((_DWORD)v18 == 1835623267)
    {
      if (v499)
      {
        unint64_t v19 = (const __CFString *)cf;
        if (cf) {
          CFRetain(cf);
        }
        v475 = v19;
        sub_195700( &v477,  v19,  *(_DWORD *)(*(void *)(*(void *)&v497[8] + 8 * (v498 / 0x66)) + 40 * (v498 % 0x66) + 28));
        if (v19) {
          goto LABEL_63;
        }
      }
    }

    else
    {
      if ((_DWORD)v18 != 1919509347) {
        goto LABEL_45;
      }
      unint64_t v19 = (const __CFString *)cf;
      if (cf) {
        CFRetain(cf);
      }
      v476 = v19;
      if (v499 < 2) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *(_DWORD *)(*(void *)(*(void *)&v497[8] + 8 * ((v498 + 1) / 0x66)) + 40 * ((v498 + 1) % 0x66) + 28);
      }
      sub_195700(&v477, v19, v20);
      if (v19) {
        goto LABEL_63;
      }
    }

  if ((_BYTE)v99
    && (*(unsigned int (**)(void, uint64_t *))(**(void **)(a3 + 192) + 16LL))(*(void *)(a3 + 192), &v90))
  {
    if (v104)
    {
      if (v103 != qword_4A8610 && !*(_BYTE *)(v103 + 40))
      {
        uint64_t v32 = *(float *)v98;
        if (*(double *)&v92 > *(float *)v98)
        {
          std::string::size_type v86 = (os_log_t *)sub_138E8(13);
          double v87 = *v86;
          if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 769;
            *(_WORD *)&_BYTE buf[18] = 2048;
            *(double *)uint64_t v97 = v32;
            *(_WORD *)&v97[8] = 2048;
            *(void *)&v97[10] = v92;
            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Routing database error: Routing database specified a minimum d ecibel volume (%f) below ioVolumeControl's minimum hardware range (%f).",  buf,  0x26u);
          }

          unsigned int v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error( v88,  "Routing database error: Routing database specified a minimum decibel volume (%f) below ioVolumeControl's min imum hardware range (%f).");
        }
      }
    }

    *(double *)&uint64_t v92 = *(float *)v98;
    uint64_t v33 = sub_138E8(19);
    uint64_t v34 = sub_138E8(38);
    unint64_t v35 = 0;
    uint64_t v36 = 0LL;
    *(void *)buf = 0x100000002LL;
    unint64_t v37 = *(void *)(v33 + 8);
    while (1)
    {
      uint64_t v38 = *(int *)&buf[4 * v36];
      unint64_t v39 = v35;
      if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
        break;
      }
      unint64_t v35 = 1;
      uint64_t v36 = 1LL;
      if ((v39 & 1) != 0) {
        goto LABEL_52;
      }
    }

    if ((v37 & v38) == 0) {
      uint64_t v33 = v34;
    }
LABEL_52:
    int v51 = *(os_log_s **)v33;
    if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 773;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)uint64_t v97 = v92;
      vm_address_t v48 = "%25s:%-5d Reconfigured input volume control's minimum decibel volume to %f.";
      uint64_t v49 = v51;
      uint64_t v50 = 28;
LABEL_55:
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_DEBUG, v48, buf, v50);
    }
  }

  else
  {
    uint64_t v40 = sub_138E8(19);
    uint64_t v41 = sub_138E8(38);
    uint64_t v42 = 0;
    unint64_t v43 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v44 = *(void *)(v40 + 8);
    while (1)
    {
      __int16 v45 = *(int *)&buf[4 * v43];
      uint64_t v46 = v42;
      if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
        break;
      }
      uint64_t v42 = 1;
      unint64_t v43 = 1LL;
      if ((v46 & 1) != 0)
      {
        if ((v44 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_47;
      }
    }

    if ((v44 & v45) == 0) {
      uint64_t v40 = v41;
    }
    if ((*(void *)(v40 + 8) & 1) == 0) {
      goto LABEL_56;
    }
LABEL_47:
    int v47 = *(os_log_s **)v40;
    if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 777;
      vm_address_t v48 = "%25s:%-5d Skipped setting device input min volume in decibels: the routing database did not request it or ha"
            "rdware does not support volume control.";
      uint64_t v49 = v47;
      uint64_t v50 = 18;
      goto LABEL_55;
    }
  }

    unint64_t v27 = (os_log_t *)sub_138E8(24);
    unsigned int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inComponent = 136315394;
      *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
      *(_WORD *)&inComponent[12] = 1024;
      *(_DWORD *)&inComponent[14] = 377;
      unint64_t v29 = "%25s:%-5d Error while constructing the DSP instance";
      uint64_t v30 = v28;
      uint64_t v31 = OS_LOG_TYPE_ERROR;
      uint64_t v32 = 18;
LABEL_32:
      _os_log_impl(&dword_0, v30, v31, v29, inComponent, v32);
      goto LABEL_33;
    }

    goto LABEL_33;
  }

  if (sub_329390(*((OpaqueAudioComponentInstance **)v11 + 12), *((_DWORD *)v11 + 40)))
  {
    unint64_t v26 = (os_log_t *)sub_138E8(13);
    unint64_t v22 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inComponent = 136315394;
      *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
      *(_WORD *)&inComponent[12] = 1024;
      *(_DWORD *)&inComponent[14] = 367;
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  sub_21DA4C(v14, 1u);
  sub_21DA4C(v14, 2u);
  uint64_t v40 = sub_138E8(24);
  if ((*(_BYTE *)(v40 + 8) & 1) != 0)
  {
    uint64_t v41 = *(os_log_s **)v40;
    if (*(void *)v40)
    {
      if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
        sub_2CA1C(&__p, v42);
        unint64_t v43 = (v57.componentFlags & 0x80000000) == 0 ? &__p : (void **)__p;
        uint64_t v44 = *((_DWORD *)v11 + 8);
        __int16 v45 = v11[164];
        *(_DWORD *)inComponent = 136316162;
        *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
        *(_WORD *)&inComponent[12] = 1024;
        *(_DWORD *)&inComponent[14] = 372;
        *(_WORD *)&inComponent[18] = 2080;
        *(void *)&inComponent[20] = v43;
        int v69 = 1024;
        *(_DWORD *)int v70 = v44;
        *(_WORD *)&v70[4] = 1024;
        *(_DWORD *)&v70[6] = v45;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Processor of type '%s' with ID %u is enhancement processor: %u",  inComponent,  0x28u);
        if (SHIBYTE(v57.componentFlags) < 0) {
          operator delete(__p);
        }
      }
    }
  }

  uint64_t v46 = sub_138E8(24);
  if ((*(_BYTE *)(v46 + 8) & 1) != 0)
  {
    int v47 = *(os_log_t *)v46;
    if (*(void *)v46)
    {
      if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
      {
        vm_address_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v11 + 15) - *((void *)v11 + 14)) >> 4);
        uint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v11 + 18) - *((void *)v11 + 17)) >> 4);
        *(_DWORD *)inComponent = 136315906;
        *(void *)&inComponent[4] = "DSPProcessorManager.cpp";
        *(_WORD *)&inComponent[12] = 1024;
        *(_DWORD *)&inComponent[14] = 373;
        *(_WORD *)&inComponent[18] = 2048;
        *(void *)&inComponent[20] = v48;
        int v69 = 2048;
        *(void *)int v70 = v49;
        unint64_t v29 = "%25s:%-5d # of InputFmts: %lu, # of OutputFmts: %lu";
        uint64_t v30 = v47;
        uint64_t v31 = OS_LOG_TYPE_DEBUG;
        uint64_t v32 = 38;
        goto LABEL_32;
      }
    }
  }

      uint64_t v25 = **a1;
      unint64_t v26 = *a3;
      *(void *)unsigned int v28 = 1LL;
      *(_DWORD *)&v28[8] = 2;
      v29[0] = v26;
      if (v25) {
        (*(void (**)(uint64_t, _BYTE *, _DWORD *, uint64_t *))(*(void *)v25 + 16LL))(v25, v28, buf, v27);
      }
    }
  }

  ++*a3;
  sub_85B80(v27);
}

  unsigned int v28 = v27;
  sub_3711D4((uint64_t)a1, (void ***)&v28);
  int v24 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    uint64_t v25 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  unint64_t v19 = sub_389C24(*(_DWORD *)(v20 + 36));
LABEL_30:
  *(_DWORD *)(a1 + 560) = v19;
  *(_BYTE *)(a1 + 564) = BYTE4(v19);
  if (*(int *)(v15 + 8) >= 2)
  {
    uint64_t v21 = (os_log_t *)sub_138E8(23);
    unint64_t v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
      {
        sub_3893A0(&v59, (unsigned int *)v15);
        int v23 = (v59.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v59 : (std::string *)v59.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 344;
        uint64_t v61 = 2080;
        int v62 = v23;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Client has set a preferred sub-port that does not have client scope: %s",  buf,  0x1Cu);
      }
    }
  }

  int v24 = sub_546E0();
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)buf = *(void *)(a1 + 80);
  *(void *)&buf[8] = v25;
  if (v25)
  {
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      unint64_t v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }

  sub_1014AC(v24, 0x70707570u, (uint64_t *)buf, a5);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  unsigned int v28 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      uint64_t v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

uint64_t sub_75130(_DWORD *a1, int a2)
{
  int v2 = a1[6];
  uint64_t v3 = a1[8];
  if (v2 <= 1836343850)
  {
    if (v2 == 1667326771) {
      return (4 * a2);
    }
    if (v2 != 1819304813) {
      goto LABEL_4;
    }
    return (a1[10] * a2);
  }

  if (v2 == 1836344107 || v2 == 1836343851) {
    return (a1[10] * a2);
  }
LABEL_4:
  if (a1[9] != a2)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    unint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        uint64_t v9 = "HP_FormatList.cpp";
        __int16 v10 = 1024;
        int v11 = 364;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: illegal buffer size",  (uint8_t *)&v8,  0x12u);
      }
    }
  }

  return v3;
}

void sub_75260(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    sub_33C9CC(&v11, a1, a2);
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v11 + 96LL))(v11, a4, a3, 0LL, a5);
    }
    int v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

void sub_75308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_7531C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD38))
  {
    int v2 = sub_753A8();
    int v3 = sub_1CBCC4(v2);
    if (v3) {
      LOBYTE(v3) = _os_feature_enabled_impl("VirtualAudio", "siri_ducking_for_speaker");
    }
    byte_48FD30 = v3;
    __cxa_guard_release(&qword_48FD38);
  }

  return byte_48FD30;
}

void sub_75390(_Unwind_Exception *a1)
{
}

uint64_t sub_753A8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FCE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FCE8))
  {
    dword_48FCE0 = sub_1C9F1C();
    __cxa_guard_release(&qword_48FCE8);
  }

  return dword_48FCE0;
}

void sub_75400(_Unwind_Exception *a1)
{
}

uint64_t sub_75418(_DWORD *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v6 = 257;
  sub_49A70(a1, a2, &Mutable, 0, 0);
  return sub_13850((uint64_t)&Mutable);
}

void sub_75488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_7549C()
{
  return 0LL;
}

uint64_t sub_754A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

void sub_754AC(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16LL))(a1, *(float *)(a1 + 144));
    int v3 = 1;
  }

  else
  {
    float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, 1684234860LL);
    float v5 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, 1935895666LL);
    sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 152), v4);
    sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 156), v5);
    int v3 = 0;
  }

  *(_DWORD *)(a1 + 148) = v3;
}

void sub_75560(uint64_t a1, float a2)
{
  float v2 = a2;
  *(float *)(a1 + 144) = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 136LL))(a1) == 1935895666)
  {
    sub_64424(a1 + 40, v2);
    float v2 = v4;
  }

  double v6 = *(double *)(a1 + 128);
  double v5 = *(double *)(a1 + 136);
  float v7 = v5 - v6;
  float v8 = v2 - v6;
  float v9 = fminf(fmaxf(v8 / v7, 0.0), 1.0);
  BOOL v10 = v6 <= v2;
  double v11 = 0.5;
  if (!v10) {
    double v11 = 0.0;
  }
  float v12 = v11;
  if (v5 >= v2) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  if (v7 == 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = v9;
  }
  uint64_t v15 = sub_138E8(18);
  uint64_t v16 = sub_138E8(38);
  char v17 = 0;
  uint64_t v18 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1LL;
    if ((v21 & 1) != 0) {
      goto LABEL_17;
    }
  }

  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_17:
  unint64_t v22 = *(os_log_s **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v25 >= 0) {
      int v23 = __p;
    }
    else {
      int v23 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v27 = 1024;
    int v28 = 1426;
    __int16 v29 = 2048;
    double v30 = v2;
    __int16 v31 = 2048;
    double v32 = v14;
    __int16 v33 = 2080;
    uint64_t v34 = v23;
    _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting Volume (VEQv2) with preGain %f dB, currentGain %f on chain '%s'.",  buf,  0x30u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 152), v2);
  sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 156), v14);
}

float sub_757A4(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    float v5 = *(float *)(*(void *)(a1 + 8) + 36LL);
  }
  else {
    float v5 = 0.0;
  }
  float v6 = sub_6461C(a1);
  if (v5 <= a2) {
    float v7 = a2;
  }
  else {
    float v7 = v5;
  }
  if (v7 <= v6) {
    float v6 = v7;
  }
  float v8 = *(void **)(a1 + 8);
  int v9 = *((_DWORD *)v8 + 7);
  int v10 = v9;
  if (v8 != (void *)(a1 + 16))
  {
    do
    {
      int v11 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      float v12 = *((float *)v8 + 10);
      if (v6 > v12)
      {
        v10 += v11;
      }

      else
      {
        unsigned int v13 = llroundf((float)(v6 - *((float *)v8 + 9)) / (float)((float)(v12 - *((float *)v8 + 9)) / (float)v11));
        BOOL v14 = __OFADD__(v10, v13);
        int v15 = v10 + v13;
        int v16 = ((int)(v10 | v13) >> 31) ^ 0x7FFFFFFF;
        if (v14) {
          int v10 = v16;
        }
        else {
          int v10 = v15;
        }
      }

      char v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          char v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          float v8 = v18;
        }

        while (!v19);
      }

      BOOL v19 = v6 <= v12 || v18 == (void *)(a1 + 16);
      float v8 = v18;
    }

    while (!v19);
  }

  if (v4) {
    int v20 = v9;
  }
  else {
    int v20 = 0;
  }
  int v21 = sub_64578(a1);
  if (v20 <= v10) {
    int v22 = v10;
  }
  else {
    int v22 = v20;
  }
  if (v22 >= v21) {
    int v22 = v21;
  }
  float v23 = (float)(v22 - v20) / (float)(v21 - v20);
  if (sub_645C0(a1)) {
    return powf(v23, *(float *)(a1 + 40) / *(float *)(a1 + 44));
  }
  else {
    return v23;
  }
}

BOOL sub_75908(void *a1, AudioObjectPropertyScope a2, double a3)
{
  uint64_t v4 = v11;
  if (v11 != (uint64_t *)v12)
  {
    while (*((double *)v4 + 4) > a3 || *((double *)v4 + 5) < a3)
    {
      float v6 = (uint64_t *)v4[1];
      if (v6)
      {
        do
        {
          float v7 = v6;
          float v6 = (uint64_t *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          float v7 = (uint64_t *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }

        while (!v8);
      }

      uint64_t v4 = v7;
      if (v7 == (uint64_t *)v12)
      {
        uint64_t v4 = (uint64_t *)v12;
        break;
      }
    }
  }

  BOOL v9 = v4 != (uint64_t *)v12;
  sub_32C8C(v12[0]);
  return v9;
}

void sub_759B8(uint64_t **a1, void *a2, AudioObjectPropertyScope a3)
{
  if (sub_6C440(a2[65], a2[66]))
  {
    uint64_t v6 = a2[126];
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    unint64_t v7 = sub_5C2F8(v6);
    *((void *)&v9 + 1) = v8;
    *(void *)&__int128 v9 = v7;
    BOOL v10 = ((v9 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v7) == 0LL;
    if (v10 || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0)
    {
      *(int64x2_t *)buf = vdupq_n_s64(0x40E7700000000000uLL);
      sub_B75F8((uint64_t)a1, (double *)buf, 1LL);
      return;
    }
  }

  if (a2[78])
  {
    *(void *)buf = (*(double (**)(void))(*(void *)a2[126] + 104LL))(a2[126]);
    *(void *)&buf[8] = *(void *)buf;
    sub_B75F8((uint64_t)a1, (double *)buf, 1LL);
    return;
  }

  a1[1] = 0LL;
  int v11 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  AudioObjectPropertyScope v116 = a3;
  if (a3 == 1869968496)
  {
    float v12 = operator new(1uLL);
    *float v12 = 1;
    unsigned int v13 = v12 + 1;
  }

  else
  {
    if (a3 != 1768845428)
    {
      float v12 = operator new(2uLL);
      *(_WORD *)float v12 = 256;
      v117 = v12 + 2;
      goto LABEL_16;
    }

    float v12 = operator new(1uLL);
    *float v12 = 0;
    unsigned int v13 = v12 + 1;
  }

  v117 = v13;
LABEL_16:
  uint64_t v120 = a1;
  BOOL v14 = 0LL;
  int v15 = 0LL;
  int v16 = 0LL;
  uint64_t v17 = a2[66];
  uint64_t v19 = a2[62];
  uint64_t v18 = a2[63];
  uint64_t v20 = a2[65];
  std::string __p = v12;
  unsigned __int8 v118 = a1 + 1;
  do
  {
    unsigned int v119 = v12;
    int v21 = *v12;
    if (*v12) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v18;
    }
    if (*v12) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (((v22 - v23) & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v24 = 0LL;
      if (*v12) {
        char v25 = a2 + 65;
      }
      else {
        char v25 = a2 + 62;
      }
      do
      {
        if (v24 < (uint64_t)(v25[1] - *v25) >> 3)
        {
          uint64_t v26 = *(void *)(*v25 + 8 * v24);
          if (v26)
          {
            if (v15 >= v16)
            {
              uint64_t v28 = (v15 - v14) >> 3;
              unint64_t v29 = v28 + 1;
              if ((v16 - v14) >> 2 > v29) {
                unint64_t v29 = (v16 - v14) >> 2;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30)
              {
                if (v30 >> 61) {
                  sub_7A8C4();
                }
                __int16 v31 = (char *)operator new(8 * v30);
              }

              else
              {
                __int16 v31 = 0LL;
              }

              double v32 = &v31[8 * v28];
              *(void *)double v32 = v26;
              __int16 v27 = v32 + 8;
              while (v15 != v14)
              {
                uint64_t v33 = *((void *)v15 - 1);
                v15 -= 8;
                *((void *)v32 - 1) = v33;
                v32 -= 8;
              }

              int v16 = &v31[8 * v30];
              if (v14) {
                operator delete(v14);
              }
              BOOL v14 = v32;
              int v11 = v118;
            }

            else
            {
              *(void *)int v15 = v26;
              __int16 v27 = v15 + 8;
            }

            uint64_t v17 = a2[66];
            uint64_t v19 = a2[62];
            uint64_t v18 = a2[63];
            int v15 = v27;
            uint64_t v20 = a2[65];
          }
        }

        ++v24;
        if (v21) {
          uint64_t v34 = v17;
        }
        else {
          uint64_t v34 = v18;
        }
        if (v21) {
          uint64_t v35 = v20;
        }
        else {
          uint64_t v35 = v19;
        }
      }

      while (v24 < ((unint64_t)(v34 - v35) >> 3));
    }

    float v12 = v119 + 1;
  }

  while (v119 + 1 != v117);
  operator delete(__p);
  if (v14 != v15)
  {
    uint64_t v36 = v14;
    do
    {
      unsigned int v37 = 0;
      uint64_t v38 = *(void *)v36;
      while (v37 < sub_765E4(*(void *)(v38 + 104)))
      {
        sub_76BF4(*(void *)(v38 + 104), v37, outData);
        unint64_t v39 = outData[0];
        if (!sub_76C6C(*(void *)(v38 + 104), *(double *)outData))
        {
          uint64_t v40 = (os_log_t *)sub_138E8(13);
          uint64_t v41 = *v40;
          if (*v40)
          {
            if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4186;
              _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Stream does not support its own sample rate minimum.",  buf,  0x12u);
            }
          }
        }

        if (!sub_76C6C(*(void *)(v38 + 104), *(double *)&outData[1]))
        {
          uint64_t v42 = (os_log_t *)sub_138E8(13);
          unint64_t v43 = *v42;
          if (*v42)
          {
            if (os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4187;
              _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Stream does not support its own sample rate maximum.",  buf,  0x12u);
            }
          }
        }

        uint64_t v44 = *v11;
        __int16 v45 = v11;
        uint64_t v46 = v11;
        if (*v11)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v46 = (uint64_t **)v44;
              double v47 = *((double *)v44 + 4);
              uint64_t v44 = (uint64_t *)*v44;
              __int16 v45 = v46;
              if (!*v46) {
                goto LABEL_75;
              }
            }

            uint64_t v44 = (uint64_t *)v44[1];
            if (!v44)
            {
              __int16 v45 = v46 + 1;
              goto LABEL_75;
            }
          }
        }

        else
        {
LABEL_75:
          vm_address_t v48 = (uint64_t *)operator new(0x30uLL);
          *((_OWORD *)v48 + 2) = *(_OWORD *)outData;
          sub_32C38(v120, (uint64_t)v46, v45, v48);
        }

        ++v37;
      }

      v36 += 8;
    }

    while (v36 != v15);
  }

  uint64_t v49 = a2[126];
  if (!v49) {
    goto LABEL_177;
  }
  *(_DWORD *)buf = 1853059619;
  *(_DWORD *)&uint8_t buf[4] = v116;
  *(_DWORD *)&buf[8] = 0;
  unsigned int v50 = (*(uint64_t (**)(uint64_t, _BYTE *, void, void))(*(void *)v49 + 32LL))(v49, buf, 0LL, 0LL);
  unsigned int v51 = v50;
  if (v50 >= 0x10)
  {
    unint64_t v55 = v50 >> 4;
    __int16 v52 = (double *)sub_7BE90(v55);
    unint64_t v54 = (char *)&v52[2 * v56];
    bzero(v52, 16 * v55);
    vm_address_t v53 = &v52[2 * v55];
  }

  else
  {
    __int16 v52 = 0LL;
    vm_address_t v53 = 0LL;
    unint64_t v54 = 0LL;
  }

  unsigned int v121 = v51 & 0xFFFFFFF0;
  uint64_t v57 = a2[126];
  *(_DWORD *)buf = 1853059619;
  *(_DWORD *)&uint8_t buf[4] = v116;
  *(_DWORD *)&buf[8] = 0;
  (*(void (**)(uint64_t, _BYTE *, void, void, unsigned int *, double *))(*(void *)v57 + 40LL))( v57,  buf,  0LL,  0LL,  &v121,  v52);
  uint64_t v58 = *(void *)(a2[126] + 312LL);
  if ((v58 & 0xFF00000000LL) != 0)
  {
    inAddress.AudioObjectPropertySelector mSelector = 1853059619;
    inAddress.AudioObjectPropertyScope mScope = v116;
    inAddress.AudioObjectPropertyElement mElement = 0;
    if (AudioObjectHasProperty(v58, &inAddress))
    {
      *(_DWORD *)buf = 2003329396;
      buf[8] = 0;
      unsigned __int8 v128 = 0;
      UInt32 v59 = sub_37408(v58, &inAddress, 0, 0LL);
      UInt32 ioDataSize = v59;
      if (v59)
      {
        sub_76F28(outData, v59 >> 4);
        *(_DWORD *)buf = AudioObjectGetPropertyData(v58, &inAddress, 0, 0LL, &ioDataSize, outData[0]);
        if (*(_DWORD *)buf)
        {
          int v60 = 0;
          LOBYTE(v122) = 0;
        }

        else
        {
          int v62 = sub_A9634((void **)&buf[8], (const void **)outData);
          LOBYTE(v122) = 0;
          if (v128)
          {
            __int128 v122 = *(_OWORD *)&buf[8];
            v62[1] = 0LL;
            v62[2] = 0LL;
            *int v62 = 0LL;
            int v60 = 1;
          }

          else
          {
            int v60 = 0;
          }
        }

        int v63 = v60;
        if (outData[0])
        {
          outData[1] = outData[0];
          operator delete(outData[0]);
          int v63 = v128;
        }

        if (v63 && *(void *)&buf[8])
        {
          *(void *)&buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }

        if (!v60) {
          goto LABEL_140;
        }
        uint64_t v61 = (char *)v122;
      }

      else
      {
        uint64_t v61 = 0LL;
        __int128 v122 = 0uLL;
      }

      uint64_t v64 = *((void *)&v122 + 1);
      int v65 = (os_log_t *)sub_138E8(17);
      __int16 v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4210;
        _os_log_impl(&dword_0, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d VAD uses an external clock device", buf, 0x12u);
      }

      if (v64 - (uint64_t)v61 >= 1)
      {
        uint64_t v67 = (v64 - (uint64_t)v61) >> 4;
        uint64_t v68 = (char *)v53 - (char *)v52;
        int v69 = (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0LL);
        if (v67 > (v54 - (char *)v53) >> 4)
        {
          uint64_t v70 = v68 >> 4;
          unint64_t v71 = (v68 >> 4) + v67;
          if (v71 >> 60) {
            sub_7A87C();
          }
          else {
            unint64_t v72 = v71;
          }
          if (v72) {
            unint64_t v72 = (unint64_t)sub_7BE90(v72);
          }
          char v73 = (_OWORD *)(v72 + 16 * v70);
          int v74 = (char *)&v73[v67];
          uint64_t v75 = 16 * v67;
          int v76 = v73;
          CFTypeRef v77 = (__int128 *)v61;
          do
          {
            __int128 v78 = *v77++;
            *v76++ = v78;
            v75 -= 16LL;
          }

          while (v75);
          if (v53 != v52)
          {
            uint64_t v79 = 2 * v70;
            do
            {
              *(_OWORD *)(v72 + v79 * 8 - 16) = *(_OWORD *)&v52[v79 - 2];
              v79 -= 2LL;
            }

            while (v79 * 8);
            char v73 = (_OWORD *)v72;
          }

          if (v53 != (double *)v69)
          {
            BOOL v80 = v74;
            memmove(v74, (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0LL), (char *)v53 - v69);
            int v74 = v80;
          }

          char v81 = (double *)&v74[(char *)v53 - v69];
          if (v52) {
            operator delete(v52);
          }
          __int16 v52 = (double *)v73;
          goto LABEL_137;
        }

        uint64_t v82 = ((char *)v53 - v69) >> 4;
        if (v82 >= v67)
        {
          int v83 = &v61[16 * v67];
          int v85 = (char *)v53;
        }

        else
        {
          int v83 = &v61[16 * v82];
          size_t v84 = v64 - (void)v83;
          if (v84) {
            memmove(v53, &v61[16 * v82], v84);
          }
          int v85 = (char *)v53 + v84;
          if ((char *)v53 - v69 < 1)
          {
            char v81 = (double *)((char *)v53 + v84);
            int v11 = v118;
            goto LABEL_137;
          }
        }

        int v11 = v118;
        std::string::size_type v86 = &v69[16 * v67];
        double v87 = &v85[-16 * v67];
        char v81 = (double *)v85;
        if (v87 < (char *)v53)
        {
          char v81 = (double *)v85;
          do
          {
            __int128 v88 = *(_OWORD *)v87;
            v87 += 16;
            *(_OWORD *)char v81 = v88;
            v81 += 2;
          }

          while (v87 < (char *)v53);
        }

        if (v85 != v86) {
          memmove( &v85[-16 * ((v85 - v86) >> 4)],  (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0LL),  v85 - v86);
        }
        if (v83 != v61) {
          memmove((char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0LL), v61, v83 - v61);
        }
        goto LABEL_137;
      }

      char v81 = v53;
LABEL_137:
      if (v61) {
        operator delete(v61);
      }
      vm_address_t v53 = v81;
      goto LABEL_140;
    }

    LOBYTE(v122) = 0;
  }

void sub_76508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  sub_32C8C(*a14);
  _Unwind_Resume(a1);
}

unint64_t sub_765E4(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_76644(a1, (uint64_t)&v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4) {
    operator delete(v4);
  }
  return (unint64_t)(v2 - (void)v1) >> 4;
}

void sub_7662C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_76644(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  int v11 = 0LL;
  float v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v2 != v3)
  {
    int v6 = 0;
    do
    {
      v6 += (*(void *)(v2 + 48) - *(void *)(v2 + 40)) >> 4;
      v2 += 64LL;
    }

    while (v2 != v3);
    if (v6)
    {
      unint64_t v7 = 0LL;
      for (unsigned int i = 0; i != v6; ++i)
      {
        sub_6A7CC(*(__int128 **)(a1 + 56), *(__int128 **)(a1 + 64), i, (uint64_t)&v9);
        float v12 = v7;
        sub_7674C(&v10, (double **)a2, &v11);
        unint64_t v7 = (char *)v11;
        sub_1AE7B8((void *)a2, (char *)v11, v12, (v12 - (char *)v11) >> 4);
      }

      if (v7) {
        operator delete(v7);
      }
    }
  }

void sub_76734( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7674C(double *a1, double **a2, double **a3)
{
  int v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v9 = a3[1];
LABEL_24:
    double v23 = *a1;
    uint64_t v22 = *((void *)a1 + 1);
    unint64_t v24 = (unint64_t)a3[2];
    if ((unint64_t)v9 < v24)
    {
      *uint64_t v9 = v23;
      *((void *)v9 + 1) = v22;
      char v25 = v9 + 2;
LABEL_72:
      a3[1] = v25;
      return;
    }

    uint64_t v30 = ((char *)v9 - (char *)*a3) >> 4;
    if (!((unint64_t)(v30 + 1) >> 60))
    {
      uint64_t v31 = v24 - (void)*a3;
      uint64_t v32 = v31 >> 3;
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)sub_7BE90(v33);
      }
      else {
        uint64_t v34 = 0LL;
      }
      __int16 v52 = (void *)(v33 + 16 * v30);
      unint64_t v53 = v33 + 16 * v34;
      *(double *)__int16 v52 = v23;
      v52[1] = v22;
      char v25 = (double *)(v52 + 2);
      unint64_t v55 = *a3;
      unint64_t v54 = a3[1];
      if (v54 != *a3)
      {
        do
        {
          *((_OWORD *)v52 - 1) = *((_OWORD *)v54 - 1);
          v52 -= 2;
          v54 -= 2;
        }

        while (v54 != v55);
        unint64_t v54 = *a3;
      }

      *a3 = (double *)v52;
      a3[1] = v25;
      a3[2] = (double *)v53;
      if (v54) {
        operator delete(v54);
      }
      goto LABEL_72;
    }

LABEL_105:
    sub_7A87C();
  }

  double v8 = *a1;
  if (v6[1] < *a1)
  {
    uint64_t v9 = a3[1];
    while (1)
    {
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v11 = ((char *)v9 - (char *)*a3) >> 4;
        uint64_t v12 = v10 - (void)*a3;
        uint64_t v13 = v12 >> 3;
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_7BE90(v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        int v16 = (double *)(v14 + 16 * v11);
        *(_OWORD *)int v16 = *(_OWORD *)v6;
        uint64_t v18 = *a3;
        uint64_t v17 = a3[1];
        uint64_t v19 = v16;
        if (v17 != *a3)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 2;
            v17 -= 2;
          }

          while (v17 != v18);
          uint64_t v17 = *a3;
        }

        uint64_t v9 = v16 + 2;
        *a3 = v19;
        a3[1] = v16 + 2;
        a3[2] = (double *)(v14 + 16 * v15);
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
        v9 += 2;
      }

      a3[1] = v9;
      uint64_t v20 = v6 + 2;
      uint64_t v5 = a2[1];
      if (v6 + 2 == v5) {
        goto LABEL_24;
      }
      double v21 = v6[3];
      double v8 = *a1;
      v6 += 2;
      if (v21 >= *a1) {
        goto LABEL_27;
      }
    }
  }

  uint64_t v20 = *a2;
LABEL_27:
  double v26 = a1[1];
  if (*v20 <= v26)
  {
    uint64_t v35 = v20 + 2;
    while (1)
    {
      uint64_t v36 = v35;
      if (v35 == v5) {
        break;
      }
      v35 += 2;
      if (*v36 > v26)
      {
        unsigned int v37 = v36 - 2;
        uint64_t v5 = v35 - 2;
        goto LABEL_43;
      }
    }

    unsigned int v37 = v35 - 2;
LABEL_43:
    if (v8 >= *v20) {
      uint64_t v38 = v20;
    }
    else {
      uint64_t v38 = a1;
    }
    uint64_t v39 = *(void *)v38;
    if (v37[1] >= v26) {
      double v26 = v37[1];
    }
    uint64_t v41 = a3[1];
    uint64_t v40 = a3[2];
    if (v41 >= v40)
    {
      uint64_t v47 = ((char *)v41 - (char *)*a3) >> 4;
      unint64_t v48 = v47 + 1;
      uint64_t v49 = (char *)v40 - (char *)*a3;
      if (v49 >> 3 > v48) {
        unint64_t v48 = v49 >> 3;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50) {
        unint64_t v50 = (unint64_t)sub_7BE90(v50);
      }
      else {
        uint64_t v51 = 0LL;
      }
      unint64_t v60 = v50 + 16 * v47;
      unint64_t v61 = v50 + 16 * v51;
      *(void *)unint64_t v60 = v39;
      *(double *)(v60 + 8) = v26;
      unint64_t v29 = (double *)(v60 + 16);
      int v63 = *a3;
      int v62 = a3[1];
      if (v62 != *a3)
      {
        do
        {
          *(_OWORD *)(v60 - 16) = *((_OWORD *)v62 - 1);
          v60 -= 16LL;
          v62 -= 2;
        }

        while (v62 != v63);
        int v62 = *a3;
      }

      *a3 = (double *)v60;
      a3[1] = v29;
      a3[2] = (double *)v61;
      if (v62) {
        operator delete(v62);
      }
    }

    else
    {
      *(void *)uint64_t v41 = v39;
      v41[1] = v26;
      unint64_t v29 = v41 + 2;
    }
  }

  else
  {
    uint64_t v28 = a3[1];
    unint64_t v27 = (unint64_t)a3[2];
    if ((unint64_t)v28 >= v27)
    {
      uint64_t v42 = ((char *)v28 - (char *)*a3) >> 4;
      unint64_t v43 = v42 + 1;
      uint64_t v44 = v27 - (void)*a3;
      if (v44 >> 3 > v43) {
        unint64_t v43 = v44 >> 3;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45) {
        unint64_t v45 = (unint64_t)sub_7BE90(v45);
      }
      else {
        uint64_t v46 = 0LL;
      }
      uint64_t v56 = (double *)(v45 + 16 * v42);
      unint64_t v57 = v45 + 16 * v46;
      double *v56 = v8;
      v56[1] = v26;
      unint64_t v29 = v56 + 2;
      UInt32 v59 = *a3;
      uint64_t v58 = a3[1];
      if (v58 != *a3)
      {
        do
        {
          *((_OWORD *)v56 - 1) = *((_OWORD *)v58 - 1);
          v56 -= 2;
          v58 -= 2;
        }

        while (v58 != v59);
        uint64_t v58 = *a3;
      }

      *a3 = v56;
      a3[1] = v29;
      a3[2] = (double *)v57;
      if (v58) {
        operator delete(v58);
      }
    }

    else
    {
      double *v28 = v8;
      v28[1] = v26;
      unint64_t v29 = v28 + 2;
    }

    uint64_t v5 = v20;
  }

  for (a3[1] = v29; v5 != a2[1]; v5 += 2)
  {
    unint64_t v64 = (unint64_t)a3[2];
    if ((unint64_t)v29 >= v64)
    {
      uint64_t v65 = ((char *)v29 - (char *)*a3) >> 4;
      uint64_t v66 = v64 - (void)*a3;
      uint64_t v67 = v66 >> 3;
      else {
        unint64_t v68 = v67;
      }
      if (v68) {
        unint64_t v68 = (unint64_t)sub_7BE90(v68);
      }
      else {
        uint64_t v69 = 0LL;
      }
      uint64_t v70 = (double *)(v68 + 16 * v65);
      *(_OWORD *)uint64_t v70 = *(_OWORD *)v5;
      unint64_t v72 = *a3;
      unint64_t v71 = a3[1];
      char v73 = v70;
      if (v71 != *a3)
      {
        do
        {
          *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
          v73 -= 2;
          v71 -= 2;
        }

        while (v71 != v72);
        unint64_t v71 = *a3;
      }

      unint64_t v29 = v70 + 2;
      *a3 = v73;
      a3[1] = v70 + 2;
      a3[2] = (double *)(v68 + 16 * v69);
      if (v71) {
        operator delete(v71);
      }
    }

    else
    {
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v5;
      v29 += 2;
    }

    a3[1] = v29;
  }

          uint64_t v44 = 1;
          unint64_t v45 = 1LL;
        }

        while ((v143 & 1) == 0);
        unint64_t v24 = v142 + 1;
      }

      while (v142 + 1 != v141);
    }

    uint64_t v69 = v140;
    uint64_t v70 = *(void *)(*(void *)(v140 + 112) + 8LL);
    if (v70)
    {
      char v73 = *(void *)(v70 + 32);
      unint64_t v71 = v70 + 32;
      unint64_t v72 = v73;
      if (!v73) {
        goto LABEL_121;
      }
      int v74 = v71;
      do
      {
        uint64_t v75 = *(_DWORD *)(v72 + 32);
        int v76 = v75 >= 0x76646566;
        if (v75 >= 0x76646566) {
          CFTypeRef v77 = (uint64_t *)v72;
        }
        else {
          CFTypeRef v77 = (uint64_t *)(v72 + 8);
        }
        if (v76) {
          int v74 = v72;
        }
        unint64_t v72 = *v77;
      }

      while (*v77);
      if (v74 == v71) {
        goto LABEL_121;
      }
      __int128 v78 = *(_DWORD *)(v74 + 32);
      unint64_t v27 = v78 == 1986291046;
      uint64_t v79 = v78 > 0x76646566;
      if (v27) {
        uint64_t v79 = *(_DWORD *)(v74 + 36) != 0;
      }
      if (v79)
      {
LABEL_121:
        sub_7D084(&v153, "");
      }

      else
      {
        sub_82600((uint64_t)buf);
        uint64_t v125 = v74 + 40;
        for (unsigned int i = *(void *)(v74 + 48); i != v125; unsigned int i = *(void *)(i + 8))
        {
          uint64_t v127 = *(void *)(i + 16);
          if (!v127)
          {
            uint64_t v132 = (os_log_t *)sub_138E8(13);
            char v133 = *v132;
            if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_log_t v154 = 136315394;
              *(void *)&v154[4] = "RoutingHandlerActionList.cpp";
              *(_WORD *)&v154[12] = 1024;
              *(_DWORD *)&v154[14] = 50;
              _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v154,  0x12u);
            }

            uint64_t v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v134, "Precondition failure.");
          }

          (*(void (**)(_BYTE *__return_ptr))(*(void *)v127 + 32LL))(v154);
          if (v154[24])
          {
            unsigned __int8 v128 = v154[23] >= 0 ? v154 : *(_BYTE **)v154;
            char v129 = v154[23] >= 0 ? v154[23] : *(void *)&v154[8];
            sub_826EC(buf, (uint64_t)v128, v129);
            if (v154[24])
            {
              if ((v154[23] & 0x80000000) != 0) {
                operator delete(*(void **)v154);
              }
            }
          }
        }

        sub_82924(&v153, (uint64_t)&buf[8]);
        *(void *)buf = v144;
        *(void *)&buf[*(void *)(v144 - 24)] = v145;
        if (v161 < 0) {
          operator delete(v159);
        }
        std::streambuf::~streambuf(&buf[8]);
        std::ios::~ios(v162);
      }

      BOOL v80 = std::string::insert(&v153, 0LL, "Routing manager: [ ", 0x13uLL);
      char v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0LL;
      v80->__r_.__value_.__l.__cap_ = 0LL;
      v80->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v82 = std::string::append(__p, " ]", 2uLL);
      int v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v82->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0LL;
      v82->__r_.__value_.__l.__cap_ = 0LL;
      v82->__r_.__value_.__r.__words[0] = 0LL;
    }

    else
    {
      sub_33464(&v148, (unsigned int *)"fedv");
    }

    int v85 = a1[1];
    size_t v84 = a1[2];
    if (v85 >= v84)
    {
      double v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - *a1) >> 3);
      __int128 v88 = v87 + 1;
      if (v87 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unsigned int v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - *a1) >> 3);
      if (2 * v89 > v88) {
        __int128 v88 = 2 * v89;
      }
      if (v89 >= 0x555555555555555LL) {
        char v90 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        char v90 = v88;
      }
      *(void *)&_BYTE buf[32] = a1 + 2;
      if (v90) {
        char v90 = (unint64_t)sub_8D44C(v90);
      }
      else {
        std::string::size_type v91 = 0LL;
      }
      uint64_t v92 = v90 + 24 * v87;
      *(void *)buf = v90;
      *(void *)&buf[8] = v92;
      *(void *)&_BYTE buf[24] = v90 + 24 * v91;
      id v93 = *(_OWORD *)&v148.__r_.__value_.__l.__data_;
      *(void *)(v92 + 16) = v148.__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v92 = v93;
      memset(&v148, 0, sizeof(v148));
      *(void *)&buf[16] = v92 + 24;
      sub_4802C(a1, buf);
      double v94 = a1[1];
      sub_480A0((uint64_t)buf);
      double v95 = (char)v148.__r_.__value_.__s.__size_;
      a1[1] = v94;
      if (v95 < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      std::string::size_type v86 = *(_OWORD *)&v148.__r_.__value_.__l.__data_;
      *(void *)(v85 + 16) = v148.__r_.__value_.__l.__cap_;
      *(_OWORD *)int v85 = v86;
      a1[1] = v85 + 24;
    }

    uint64_t v96 = *(void *)(v140 + 128);
    if (!v96)
    {
      double v135 = sub_138E8(13);
      uint64_t v136 = sub_8C7D4(1, *(void **)v135, *(void *)(v135 + 8));
      CFStringRef v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
      uint64_t v138 = v137;
      if (v137 && os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7247;
        _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      unsigned __int8 v139 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v139, "Precondition failure.");
    }

    memset(buf, 0, 24);
    strcpy((char *)&buf[24], "cwdv");
    _BYTE buf[32] = 0;
    uint64_t v156 = 3;
    v158[0] = 0LL;
    v158[1] = 0LL;
    std::string v157 = v158;
    LODWORD(v159) = 44739242;
    CFTypeRef cf = 0LL;
    sub_73504((uint64_t *)__p, v96, (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v158[0]);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    sub_82600((uint64_t)buf);
    sub_826EC(buf, (uint64_t)"VirtualAudio_Ports (", 20LL);
    std::ostream::operator<<(buf, __p[0].__r_.__value_.__l.__cap_);
    sub_826EC(buf, (uint64_t)"):", 2LL);
    sub_252E30(&v153, (uint64_t)&buf[8]);
    uint64_t v97 = a1[1];
    uint64_t v98 = a1[2];
    if (v97 >= v98)
    {
      uint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - *a1) >> 3);
      uint64_t v101 = v100 + 1;
      if (v100 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_7A87C();
      }
      unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *a1) >> 3);
      if (2 * v102 > v101) {
        uint64_t v101 = 2 * v102;
      }
      if (v102 >= 0x555555555555555LL) {
        unint64_t v103 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v103 = v101;
      }
      *(void *)&v154[32] = a1 + 2;
      if (v103) {
        unint64_t v103 = (unint64_t)sub_8D44C(v103);
      }
      else {
        uint64_t v104 = 0LL;
      }
      uint64_t v105 = v103 + 24 * v100;
      *(void *)os_log_t v154 = v103;
      *(void *)&v154[8] = v105;
      *(void *)&v154[24] = v103 + 24 * v104;
      unint64_t v106 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
      *(void *)(v105 + 16) = v153.__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v105 = v106;
      memset(&v153, 0, sizeof(v153));
      *(void *)&v154[16] = v105 + 24;
      sub_4802C(a1, v154);
      unint64_t v107 = a1[1];
      sub_480A0((uint64_t)v154);
      uint64_t v108 = (char)v153.__r_.__value_.__s.__size_;
      a1[1] = v107;
      if (v108 < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      uint64_t v99 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
      *(void *)(v97 + 16) = v153.__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v97 = v99;
      memset(&v153, 0, sizeof(v153));
      a1[1] = v97 + 24;
    }

    *(void *)buf = v144;
    *(void *)&buf[*(void *)(v144 - 24)] = v145;
    if (v161 < 0) {
      operator delete(v159);
    }
    std::streambuf::~streambuf(&buf[8]);
    std::ios::~ios(v162);
    for (uint64_t j = __p[0].__r_.__value_.__l.__size_; (std::string *)j != __p; uint64_t j = *(void *)(j + 8))
    {
      unsigned __int8 v110 = sub_6A92C(*(void *)(v69 + 128), *(_DWORD *)(j + 16));
      sub_82600((uint64_t)buf);
      sub_826EC(buf, (uint64_t)"- VirtualAudio_Port: ", 21LL);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v110 + 96LL))(&v148, v110);
      if ((v148.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v111 = &v148;
      }
      else {
        uint64_t v111 = (std::string *)v148.__r_.__value_.__r.__words[0];
      }
      if ((v148.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v112 = v148.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v112 = v148.__r_.__value_.__l.__size_;
      }
      sub_826EC(buf, (uint64_t)v111, v112);
      sub_252E30(&v153, (uint64_t)&buf[8]);
      uint64_t v113 = a1[1];
      uint64_t v114 = a1[2];
      if (v113 >= v114)
      {
        AudioObjectPropertyScope v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - *a1) >> 3);
        v117 = v116 + 1;
        if (v116 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        unsigned __int8 v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - *a1) >> 3);
        if (2 * v118 > v117) {
          v117 = 2 * v118;
        }
        if (v118 >= 0x555555555555555LL) {
          unsigned int v119 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unsigned int v119 = v117;
        }
        *(void *)&v154[32] = a1 + 2;
        if (v119) {
          unsigned int v119 = (unint64_t)sub_8D44C(v119);
        }
        else {
          uint64_t v120 = 0LL;
        }
        unsigned int v121 = v119 + 24 * v116;
        *(void *)os_log_t v154 = v119;
        *(void *)&v154[8] = v121;
        *(void *)&v154[24] = v119 + 24 * v120;
        __int128 v122 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
        *(void *)(v121 + 16) = v153.__r_.__value_.__l.__cap_;
        *(_OWORD *)unsigned int v121 = v122;
        memset(&v153, 0, sizeof(v153));
        *(void *)&v154[16] = v121 + 24;
        sub_4802C(a1, v154);
        uint64_t v123 = a1[1];
        sub_480A0((uint64_t)v154);
        uint64_t v124 = (char)v153.__r_.__value_.__s.__size_;
        a1[1] = v123;
        uint64_t v69 = v140;
        if (v124 < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
      }

      else
      {
        uint64_t v115 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
        *(void *)(v113 + 16) = v153.__r_.__value_.__l.__cap_;
        *(_OWORD *)uint64_t v113 = v115;
        memset(&v153, 0, sizeof(v153));
        a1[1] = v113 + 24;
      }

      *(void *)buf = v144;
      *(void *)&buf[*(void *)(v144 - 24)] = v145;
      if (v161 < 0) {
        operator delete(v159);
      }
      std::streambuf::~streambuf(&buf[8]);
      std::ios::~ios(v162);
    }

    sub_68314(__p);
    sub_254868(&v151);
  }

  else
  {
    int v6 = sub_138E8(2);
    unint64_t v7 = sub_138E8(13);
    double v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)buf = 0x100000002LL;
    unint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      uint64_t v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      double v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v10 & v11) == 0) {
      int v6 = v7;
    }
LABEL_10:
    uint64_t v13 = (os_log_s *)*(id *)v6;
    unint64_t v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7259;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unable to lock mutex, Exiting DumpDeviceAndPortState",  buf,  0x12u);
    }
  }

  unint64_t v107 = 0LL;
  uint64_t v108 = 0LL;
  unint64_t v106 = &v107;
  uint64_t v69 = (uint64_t **)v101[22];
  unint64_t v71 = a3 + 1;
  uint64_t v70 = (void *)*a3;
  *(void *)buf = &v106;
  *(void *)&buf[8] = &v107;
  if (v69 == v101 + 23 || v70 == v71) {
    goto LABEL_133;
  }
  do
  {
    unint64_t v72 = *((_DWORD *)v69 + 7);
    char v73 = *((_DWORD *)v69 + 8);
    int v74 = *((_DWORD *)v70 + 7);
    uint64_t v75 = *((_DWORD *)v70 + 8);
    int v76 = v73 < v75;
    if (v72 != v74) {
      int v76 = v72 < v74;
    }
    if (v76)
    {
      CFTypeRef v77 = v69[1];
      if (v77)
      {
        do
        {
          uint64_t v69 = (uint64_t **)v77;
          CFTypeRef v77 = (uint64_t *)*v77;
        }

        while (v77);
      }

      else
      {
        do
        {
          __int128 v78 = (uint64_t *)v69;
          uint64_t v69 = (uint64_t **)v69[2];
        }

        while (*v69 != v78);
      }
    }

    else
    {
      uint64_t v79 = v75 < v73;
      if (v72 == v74) {
        BOOL v80 = v79;
      }
      else {
        BOOL v80 = v74 < v72;
      }
      if (v80)
      {
        char v81 = v69;
      }

      else
      {
        sub_26AF10((uint64_t)buf, (unsigned int *)v69 + 7);
        uint64_t v82 = v69[1];
        if (v82)
        {
          do
          {
            char v81 = (uint64_t **)v82;
            uint64_t v82 = (uint64_t *)*v82;
          }

          while (v82);
        }

        else
        {
          do
          {
            char v81 = (uint64_t **)v69[2];
            int v16 = *v81 == (uint64_t *)v69;
            uint64_t v69 = v81;
          }

          while (!v16);
        }
      }

      int v83 = (void *)v70[1];
      if (v83)
      {
        do
        {
          uint64_t v70 = v83;
          int v83 = (void *)*v83;
        }

        while (v83);
      }

      else
      {
        do
        {
          size_t v84 = v70;
          uint64_t v70 = (void *)v70[2];
        }

        while ((void *)*v70 != v84);
      }

      uint64_t v69 = v81;
    }
  }

  while (v69 != v101 + 23 && v70 != v71);
  if (!v108)
  {
LABEL_133:
    int v85 = (void *)*a3;
    if ((void *)*a3 != v71)
    {
      do
      {
        std::string::size_type v86 = *(void *)((char *)v85 + 28);
        uint64_t v105 = v86;
        double v87 = sub_72A04(v86, SHIDWORD(v86), v101[18], v101[19]);
        if (v87)
        {
          __int128 v88 = v87;
          unsigned int v89 = sub_138E8(2);
          if ((*(_BYTE *)(v89 + 8) & 1) != 0)
          {
            char v90 = *(id *)v89;
            if (v90)
            {
              std::string::size_type v91 = (os_log_s *)v90;
              if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v92 = *(_DWORD *)(v88 + 8);
                sub_33464(&__p, (unsigned int *)&v105);
                p_p = &__p;
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4006;
                uint64_t v112 = 1024;
                uint64_t v113 = v92;
                uint64_t v114 = 2048;
                uint64_t v115 = (_DWORD *)v88;
                AudioObjectPropertyScope v116 = 2080;
                v117 = p_p;
                _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Notifying device %u (%p) %s to prepare for route change",  buf,  0x2Cu);
              }
            }
          }

          sub_BBFD0((unint64_t *)v88);
        }

        sub_1163D8(v101 + 22, v86, HIDWORD(v86), &v105);
        double v94 = (void *)v85[1];
        if (v94)
        {
          do
          {
            double v95 = v94;
            double v94 = (void *)*v94;
          }

          while (v94);
        }

        else
        {
          do
          {
            double v95 = (void *)v85[2];
            int v16 = *v95 == (void)v85;
            int v85 = v95;
          }

          while (!v16);
        }

        int v85 = v95;
      }

      while (v95 != v71);
    }
  }

  uint64_t v96 = *a2;
  uint64_t v97 = a2[1];
LABEL_151:
  if (v96 != v97)
  {
    uint64_t v98 = *v96 + 16;
    for (unsigned int i = *(void *)(*v96 + 24); ; unsigned int i = *(void *)(i + 8))
    {
      if (i == v98)
      {
        v96 += 27;
        goto LABEL_151;
      }
    }

    uint64_t v100 = v101[25];
    if (v100) {
      ((void (*)(uint64_t *))v100)(v101[26]);
    }
  }

  sub_32C8C(v107);
  if (v110) {
    sub_13850((uint64_t)theDict);
  }
}

                uint64_t v1 = 1LL;
                goto LABEL_106;
              }

void sub_76BF4(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  int v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_76644(a1, (uint64_t)&v6);
  uint64_t v5 = v6;
  if (a2 >= (unint64_t)((v7 - (uint64_t)v6) >> 4))
  {
    if (!v6) {
      return;
    }
  }

  else
  {
    *a3 = *((_OWORD *)v6 + a2);
  }

  operator delete(v5);
}

void sub_76C54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_76C6C(uint64_t a1, double a2)
{
  int v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_76644(a1, (uint64_t)&v6);
  if (v6 == v7)
  {
    BOOL v4 = 0LL;
    if (!v6) {
      return v4;
    }
    goto LABEL_9;
  }

  uint64_t v3 = v6;
  do
  {
    BOOL v4 = v3[1] >= a2 && *v3 <= a2;
    if (v4) {
      break;
    }
    v3 += 2 * (v4 ^ 1);
  }

  while (v3 != v7);
  if (v6) {
LABEL_9:
  }
    operator delete(v6);
  return v4;
}

void sub_76CF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_76D10(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  UInt32 outDataSize = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(a1, a2, a3, a4, &outDataSize);
  if ((_DWORD)PropertyDataSize)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(16);
    uint64_t v8 = a2;
    uint64_t v9 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v19, v8->mSelector);
      int v10 = v20;
      uint64_t v11 = (void **)v19[0];
      sub_2CA1C(__p, PropertyDataSize);
      uint64_t v12 = v19;
      if (v10 < 0) {
        uint64_t v12 = v11;
      }
      if (v18 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      double v23 = "AggregateDevice_CommonBase.cpp";
      __int16 v24 = 1024;
      int v25 = 3393;
      __int16 v26 = 2080;
      unint64_t v27 = v12;
      __int16 v28 = 2080;
      unint64_t v29 = v13;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyDataSize() for selector '%s' returned status '%s'.",  buf,  0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }

    unint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      double v23 = "AggregateDevice_CommonBase.cpp";
      __int16 v24 = 1024;
      int v25 = 3394;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to determine the property's data size.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = PropertyDataSize;
  }

  return outDataSize;
}

void sub_76F08(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_76F28(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_846C4(a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }

  return a1;
}

void sub_76F80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_76F9C(uint64_t **a1, uint64_t *a2, _OWORD *a3, double a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (double v8 = *((double *)a2 + 4), v8 > a4))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      uint64_t v11 = a2;
LABEL_16:
      if (v9) {
        unint64_t v14 = (uint64_t **)v11;
      }
      else {
        unint64_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        uint64_t v12 = (void **)(v11 + 1);
      }
      else {
        uint64_t v12 = (void **)a2;
      }
      goto LABEL_22;
    }

    if (v9)
    {
      int v10 = (uint64_t *)*a2;
      do
      {
        uint64_t v11 = v10;
        int v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      int v16 = a2;
      do
      {
        uint64_t v11 = (uint64_t *)v16[2];
        BOOL v17 = *v11 == (void)v16;
        int v16 = v11;
      }

      while (v17);
    }

    char v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v14 = (uint64_t **)v18;
          double v19 = *((double *)v18 + 4);
          if (v19 <= a4) {
            break;
          }
          char v18 = (uint64_t *)*v18;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v19 >= a4) {
          break;
        }
        uint64_t v7 = (uint64_t **)(v18 + 1);
        char v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_44;
        }
      }

void sub_77164(uint64_t a1, double a2)
{
  if (v6)
  {
    if (*(void *)(a1 + 624))
    {
      uint64_t v3 = (os_log_t *)sub_138E8(13);
      BOOL v4 = *v3;
      if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v9 = "VirtualAudio_Device.cpp";
        __int16 v10 = 1024;
        int v11 = 1371;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Sample rate changes are currently blocked by policy.",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

    sub_B6C4C(a1, (uint64_t)v7);
  }

  sub_32C8C(v7[1]);
}

void sub_772A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_772C4(BOOL *a1, uint64_t a2, double a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 1008) + 184LL))(&v23);
  double v6 = 0.0;
  if ((void **)v23 != v24)
  {
    uint64_t v7 = *(void **)(v23 + 8);
    if (v7)
    {
      do
      {
        double v8 = v7;
        uint64_t v7 = (void *)*v7;
      }

      while (v7);
    }

    else
    {
      uint64_t v9 = (void *)v23;
      do
      {
        double v8 = (void *)v9[2];
        BOOL v16 = *v8 == (void)v9;
        uint64_t v9 = v8;
      }

      while (!v16);
    }

    while (v8 != v24)
    {
      __int16 v10 = (void *)v8[1];
      int v11 = v8;
      if (v10)
      {
        do
        {
          uint64_t v12 = v10;
          __int16 v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v11[2];
          BOOL v16 = *v12 == (void)v11;
          int v11 = v12;
        }

        while (!v16);
      }

      double v13 = *((double *)v8 + 5);
      double v8 = v12;
    }

    double v6 = *(double *)(v23 + 40);
  }

LABEL_45:
  *a1 = v17;
  sub_B7478((uint64_t)(a1 + 8), v22);
  sub_32C8C((void *)v22[1]);
  sub_32C8C(v24[0]);
}

      int v11 = v6;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v7 >= a3) {
    return result;
  }
  int v11 = (uint64_t **)(a2 + 1);
  uint64_t v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      int v11 = (uint64_t **)v12;
      uint64_t v12 = (uint64_t *)*v12;
      double v13 = v11;
      unint64_t v14 = v11;
    }

    while (v12);
  }

  else
  {
    unint64_t v14 = (uint64_t **)a2;
    do
    {
      double v19 = (uint64_t *)v14;
      unint64_t v14 = (uint64_t **)v14[2];
    }

    while (*v14 != v19);
    double v13 = (uint64_t **)a2;
  }

  if (v14 != v6 && *((_DWORD *)v14 + 7) <= a3)
  {
    char v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          double v13 = (uint64_t **)v20;
          double v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          char v20 = *v13;
          double v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v21 >= a3) {
          goto LABEL_45;
        }
        double v6 = v13 + 1;
        char v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }

  uint64_t v35 = *(void *)(v1 + 16);
  if (*(_BYTE *)(v35 + 12)) {
    notify_post(*(const char **)v35);
  }
  if (v3) {
    operator delete(v3);
  }
  return sub_91C10(&v37);
}

              operator delete(*(void **)buf);
              if (v17) {
                goto LABEL_33;
              }
              goto LABEL_46;
            }

            double v22 = 1;
          }
        }

        else
        {
          double v22 = 0;
        }

        BOOL v17 = !v22;
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        goto LABEL_44;
      }
    }

    else
    {
      std::string __p = &off_483688;
      uint64_t v30 = 0LL;
    }

    sub_39FD8(&buf[8]);
    BOOL v4 = v30;
    goto LABEL_12;
  }

  uint64_t v5 = (os_log_t *)sub_138E8(17);
  double v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4232;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Request to select a custom property time for the NetworkUplinkClock but no dedicated clock was found.",  buf,  0x12u);
  }

    uint64_t v32 = a3[1];
    uint64_t v31 = (unint64_t)a3[2];
    if ((unint64_t)v32 >= v31)
    {
      uint64_t v34 = *a3;
      uint64_t v35 = v32 - *a3;
      uint64_t v36 = v35 + 1;
      unsigned int v37 = v31 - (void)v34;
      if (v37 >> 2 > v36) {
        uint64_t v36 = v37 >> 2;
      }
      else {
        uint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          sub_7A8C4();
        }
        uint64_t v39 = (char *)operator new(8 * v38);
      }

      else
      {
        uint64_t v39 = 0LL;
      }

      uint64_t v40 = (os_unfair_lock_s ***)&v39[8 * v35];
      double *v40 = v9;
      unint64_t v33 = v40 + 1;
      if (v32 == v34)
      {
        uint64_t v42 = vdupq_n_s64((unint64_t)v32);
      }

      else
      {
        do
        {
          uint64_t v41 = *--v32;
          *uint64_t v32 = 0LL;
          *--uint64_t v40 = v41;
        }

        while (v32 != v34);
        uint64_t v42 = *(int64x2_t *)a3;
      }

      *a3 = v40;
      a3[1] = v33;
      a3[2] = (os_unfair_lock_s ***)&v39[8 * v38];
      uint64_t v44 = (void *)v42.i64[1];
      unint64_t v43 = (void *)v42.i64[0];
      while (v44 != v43)
      {
        uint64_t v46 = *--v44;
        unint64_t v45 = v46;
        *uint64_t v44 = 0LL;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
        }
      }

      if (v43) {
        operator delete(v43);
      }
    }

    else
    {
      *uint64_t v32 = v9;
      unint64_t v33 = v32 + 1;
    }

    a3[1] = v33;
    if (v16) {
      double v13 = 0LL;
    }
    else {
      double v13 = (os_log_s *)v56;
    }
    uint64_t v47 = (os_log_t *)sub_138E8(3);
    unint64_t v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = v54;
      if (v55 < 0) {
        uint64_t v49 = (void **)v54[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
      unint64_t v60 = 1024;
      unint64_t v61 = 396;
      int v62 = 2080;
      int v63 = v49;
      _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Queued for deletion and unpublished port: %s.",  buf,  0x1Cu);
    }

    if (v55 < 0) {
      operator delete(v54[0]);
    }
  }

  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  return v13;
}

  *(_DWORD *)(*(void *)&v5[(v9 >> 7) & 0x1FFFFFFFFFFFFF8LL] + 4 * (v9 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

        uint64_t v31 = sub_5954C();
        uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 112LL))(v31);
        if (v32 != 2) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }

      if (v28 != 1668309362)
      {
        uint64_t v30 = 29250;
LABEL_49:
        if (v28 != (v30 | 0x63700000)) {
          goto LABEL_70;
        }
      }
    }

    if (v27 > 1919776354)
    {
      if (v27 > 1987081832)
      {
        if (v27 == 1987081839) {
          goto LABEL_66;
        }
        uint64_t v34 = 30313;
      }

      else
      {
        if (v27 == 1919776355) {
          goto LABEL_66;
        }
        uint64_t v34 = 26467;
      }

      unint64_t v33 = v34 | 0x76700000;
    }

    else if (v27 > 1768779618)
    {
      if (v27 == 1768779619) {
        goto LABEL_66;
      }
      unint64_t v33 = 1768781411;
    }

    else
    {
      if (v27 == 1735222132) {
        goto LABEL_66;
      }
      unint64_t v33 = 1768057203;
    }

    if (v27 == v33)
    {
LABEL_66:
      uint64_t v35 = sub_5954C();
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 104LL))(v35);
      if (v32 != 2) {
        goto LABEL_69;
      }
LABEL_67:
      if (sub_2031A0())
      {
        unint64_t v29 = 0LL;
        goto LABEL_70;
      }

      uint64_t v7 = 1LL;
      goto LABEL_46;
    }

    if ((v26 & 0x80) != 0)
    {
    }

    else if (v26)
    {
      double v8 = buf;
      uint64_t v9 = "A2DP";
      while (*v8 == *(unsigned __int8 *)v9)
      {
        ++v8;
        ++v9;
        if (!--v1) {
          goto LABEL_36;
        }
      }

      goto LABEL_45;
    }

      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_7D790((uint64_t)&buf);
    }

    uint64_t v39 = sub_138E8(13);
    if ((*(_BYTE *)(v39 + 8) & 1) != 0)
    {
      uint64_t v40 = *(os_log_s **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = *(void *)a2;
          unint64_t v48 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v47);
          uint64_t v41 = v50 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          unint64_t v60 = 1024;
          unint64_t v61 = 288;
          int v62 = 2080;
          *(void *)int v63 = v41;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = a1;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
          if (v50 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }

    unint64_t v14 = 0LL;
    goto LABEL_89;
  }

  uint64_t v15 = (os_log_t *)sub_138E8(13);
  BOOL v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(&v70, v14);
    BOOL v17 = v70.__m_.__opaque[15];
    sig = v70.__m_.__sig;
    inClientData = *(void *)a2;
    __int16 v52 = *(_DWORD *)(a2 + 8);
    sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
    double v19 = &v70;
    if (v17 < 0) {
      double v19 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    unint64_t v60 = 1024;
    unint64_t v61 = 207;
    int v62 = 1024;
    *(_DWORD *)int v63 = v14;
    *(_WORD *)&v63[4] = 2080;
    *(void *)&v63[6] = v19;
    *(_WORD *)&v63[14] = 2080;
    *(void *)&v63[16] = p_p;
    *(_WORD *)&v63[24] = 1024;
    *(_DWORD *)&v63[26] = a1;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v70.__m_.__opaque[15] < 0) {
      operator delete((void *)v70.__m_.__sig);
    }
  }

  return v14;
}

              uint64_t v42 = sub_138E8(18);
              unint64_t v43 = sub_138E8(38);
              uint64_t v44 = 0;
              unint64_t v45 = 0LL;
              *(void *)buf = 0x100000002LL;
              uint64_t v46 = *(void *)(v42 + 8);
              while (1)
              {
                uint64_t v47 = *(int *)&buf[4 * v45];
                unint64_t v48 = v44;
                if (((v46 & v47) != 0) != ((*(void *)(v43 + 8) & v47) != 0)) {
                  break;
                }
                uint64_t v44 = 1;
                unint64_t v45 = 1LL;
                if ((v48 & 1) != 0) {
                  goto LABEL_51;
                }
              }

              if ((v46 & v47) == 0) {
                uint64_t v42 = v43;
              }
LABEL_51:
              uint64_t v49 = *(os_log_s **)v42;
              if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v50 = *(float *)(a4 + 300);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int128 v122 = 1024;
                uint64_t v123 = 1650;
                uint64_t v124 = 2048;
                *(double *)uint64_t v125 = v50;
                _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device initiated volume change - Previous Hardware Volume: %f dB",  buf,  0x1Cu);
              }

              uint64_t v51 = v120;
              *(float *)(a4 + 300) = v120;
              __int16 v52 = sub_1C3E50(a4, v51);
              sub_1C4218(a4, SBYTE1(v52));
              unint64_t v53 = sub_138E8(18);
              unint64_t v54 = sub_138E8(38);
              unint64_t v55 = 0;
              uint64_t v56 = 0LL;
              *(void *)buf = 0x100000002LL;
              unint64_t v57 = *(void *)(v53 + 8);
              while (1)
              {
                uint64_t v58 = *(int *)&buf[4 * v56];
                UInt32 v59 = v55;
                if (((v57 & v58) != 0) != ((*(void *)(v54 + 8) & v58) != 0)) {
                  break;
                }
                unint64_t v55 = 1;
                uint64_t v56 = 1LL;
                if ((v59 & 1) != 0) {
                  goto LABEL_60;
                }
              }

              if ((v57 & v58) == 0) {
                unint64_t v53 = v54;
              }
LABEL_60:
              unint64_t v60 = *(os_log_s **)v53;
              if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v61 = *(float *)(a4 + 300);
                int v62 = *(float *)(a4 + 296);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int128 v122 = 1024;
                uint64_t v123 = 1655;
                uint64_t v124 = 2048;
                *(double *)uint64_t v125 = v61;
                *(_WORD *)&v125[8] = 2048;
                *(double *)&v125[10] = v62;
                _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device initiated volume change - Committed Hardware Volume: %f dB, Volume Scalar: %f",  buf,  0x26u);
              }

              int v63 = sub_138E8(18);
              unint64_t v64 = sub_138E8(38);
              uint64_t v65 = 0;
              uint64_t v66 = 0LL;
              *(void *)buf = 0x100000002LL;
              uint64_t v67 = *(void *)(v63 + 8);
              while (1)
              {
                unint64_t v68 = *(int *)&buf[4 * v66];
                uint64_t v69 = v65;
                if (((v67 & v68) != 0) != ((*(void *)(v64 + 8) & v68) != 0)) {
                  break;
                }
                uint64_t v65 = 1;
                uint64_t v66 = 1LL;
                if ((v69 & 1) != 0) {
                  goto LABEL_69;
                }
              }

              if ((v67 & v68) == 0) {
                int v63 = v64;
              }
LABEL_69:
              uint64_t v70 = *(os_log_s **)v63;
              if (v70 && os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                (*(void (**)(void **__return_ptr))(**(void **)(a4 + 96) + 128LL))(__p);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int128 v122 = 1024;
                uint64_t v123 = 1657;
                uint64_t v124 = 2112;
                *(void **)uint64_t v125 = __p[0];
                _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d     PhysicalDevice UID = %@",  buf,  0x1Cu);
                sub_19DFC((uint64_t)__p);
              }

              unint64_t v71 = sub_138E8(18);
              unint64_t v72 = sub_138E8(38);
              char v73 = 0;
              int v74 = 0LL;
              *(void *)buf = 0x100000002LL;
              uint64_t v75 = *(void *)(v71 + 8);
              while (1)
              {
                int v76 = *(int *)&buf[4 * v74];
                CFTypeRef v77 = v73;
                if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
                  break;
                }
                char v73 = 1;
                int v74 = 1LL;
                if ((v77 & 1) != 0) {
                  goto LABEL_78;
                }
              }

              if ((v75 & v76) == 0) {
                unint64_t v71 = v72;
              }
LABEL_78:
              __int128 v78 = *(os_log_s **)v71;
              if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v79 = *(_DWORD *)(a4 + 128);
                sub_2CA1C(__p, v79);
                BOOL v80 = __p;
                if (v118 < 0) {
                  BOOL v80 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int128 v122 = 1024;
                uint64_t v123 = 1658;
                uint64_t v124 = 1024;
                *(_DWORD *)uint64_t v125 = v79;
                *(_WORD *)&v125[4] = 2080;
                *(void *)&v125[6] = v80;
                _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Scope = %u (%s)", buf, 0x22u);
                if (v118 < 0) {
                  operator delete(__p[0]);
                }
              }

              char v81 = sub_138E8(18);
              uint64_t v82 = sub_138E8(38);
              int v83 = 0;
              size_t v84 = 0LL;
              *(void *)buf = 0x100000002LL;
              int v85 = *(void *)(v81 + 8);
              while (1)
              {
                std::string::size_type v86 = *(int *)&buf[4 * v84];
                double v87 = v83;
                if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
                  break;
                }
                int v83 = 1;
                size_t v84 = 1LL;
                if ((v87 & 1) != 0) {
                  goto LABEL_90;
                }
              }

              if ((v85 & v86) == 0) {
                char v81 = v82;
              }
LABEL_90:
              __int128 v88 = *(os_log_s **)v81;
              if (v88 && os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v89 = *(_DWORD *)(a4 + 132);
                sub_2CA1C(__p, v89);
                char v90 = __p;
                if (v118 < 0) {
                  char v90 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int128 v122 = 1024;
                uint64_t v123 = 1659;
                uint64_t v124 = 1024;
                *(_DWORD *)uint64_t v125 = v89;
                *(_WORD *)&v125[4] = 2080;
                *(void *)&v125[6] = v90;
                _os_log_impl(&dword_0, v88, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Element = %u (%s)", buf, 0x22u);
                if (v118 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (!*(_DWORD *)(a4 + 264))
              {
                uint64_t v92 = sub_138E8(18);
                id v93 = sub_138E8(38);
                double v94 = 0;
                double v95 = 0LL;
                *(void *)buf = 0x100000002LL;
                uint64_t v96 = *(void *)(v92 + 8);
                while (1)
                {
                  uint64_t v97 = *(int *)&buf[4 * v95];
                  uint64_t v98 = v94;
                  if (((v96 & v97) != 0) != ((*(void *)(v93 + 8) & v97) != 0)) {
                    break;
                  }
                  double v94 = 1;
                  double v95 = 1LL;
                  if ((v98 & 1) != 0) {
                    goto LABEL_114;
                  }
                }

                if ((v96 & v97) == 0) {
                  uint64_t v92 = v93;
                }
LABEL_114:
                uint64_t v99 = *(os_log_s **)v92;
                if (v99 && os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                  __int128 v122 = 1024;
                  uint64_t v123 = 1660;
                  _os_log_impl(&dword_0, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d     SW Volume: disabled", buf, 0x12u);
                }
              }

    uint64_t v12 = v42;
    if (!v42) {
      goto LABEL_47;
    }
  }

  operator delete(v12);
LABEL_47:
  if (v47)
  {
    if (__p)
    {
      uint64_t v46 = __p;
      operator delete(__p);
    }
  }

      int v11 = v6;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v7 >= a3) {
    return result;
  }
  int v11 = (uint64_t **)(a2 + 1);
  uint64_t v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      int v11 = (uint64_t **)v12;
      uint64_t v12 = (uint64_t *)*v12;
      double v13 = v11;
      unint64_t v14 = v11;
    }

    while (v12);
  }

  else
  {
    unint64_t v14 = (uint64_t **)a2;
    do
    {
      double v19 = (uint64_t *)v14;
      unint64_t v14 = (uint64_t **)v14[2];
    }

    while (*v14 != v19);
    double v13 = (uint64_t **)a2;
  }

  if (v14 != v6 && *((_DWORD *)v14 + 8) <= a3)
  {
    char v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          double v13 = (uint64_t **)v20;
          double v21 = *((_DWORD *)v20 + 8);
          if (v21 <= a3) {
            break;
          }
          char v20 = *v13;
          double v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v21 >= a3) {
          goto LABEL_45;
        }
        double v6 = v13 + 1;
        char v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }

      int v11 = v6;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v7 >= a3) {
    return result;
  }
  int v11 = (uint64_t **)(a2 + 1);
  uint64_t v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      int v11 = (uint64_t **)v12;
      uint64_t v12 = (uint64_t *)*v12;
      double v13 = v11;
      unint64_t v14 = v11;
    }

    while (v12);
  }

  else
  {
    unint64_t v14 = (uint64_t **)a2;
    do
    {
      double v19 = (uint64_t *)v14;
      unint64_t v14 = (uint64_t **)v14[2];
    }

    while (*v14 != v19);
    double v13 = (uint64_t **)a2;
  }

  if (v14 != v6 && *((_DWORD *)v14 + 8) <= a3)
  {
    char v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          double v13 = (uint64_t **)v20;
          double v21 = *((_DWORD *)v20 + 8);
          if (v21 <= a3) {
            break;
          }
          char v20 = *v13;
          double v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v21 >= a3) {
          goto LABEL_45;
        }
        double v6 = v13 + 1;
        char v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }

      sub_163184(a1[80], a2);
    }

    return 0LL;
  }

  uint64_t v12 = v11;
  double v13 = sub_138E8(17);
  unint64_t v14 = sub_138E8(12);
  uint64_t v15 = 0;
  BOOL v16 = 0LL;
  *(void *)uint64_t v46 = 0x100000002LL;
  BOOL v17 = *(void *)(v13 + 8);
  while (1)
  {
    char v18 = *(int *)&v46[4 * v16];
    double v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    uint64_t v15 = 1;
    BOOL v16 = 1LL;
    if ((v19 & 1) != 0) {
      goto LABEL_23;
    }
  }

  if ((v17 & v18) == 0) {
    double v13 = v14;
  }
LABEL_23:
  uint64_t v31 = sub_138E8(39);
  uint64_t v32 = 0;
  unint64_t v33 = 0LL;
  *(void *)uint64_t v46 = 0x100000002LL;
  uint64_t v34 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v35 = *(int *)&v46[4 * v33];
    uint64_t v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
      break;
    }
    uint64_t v32 = 1;
    unint64_t v33 = 1LL;
    if ((v36 & 1) != 0) {
      goto LABEL_29;
    }
  }

  if ((v34 & v35) == 0) {
    double v13 = v31;
  }
LABEL_29:
  unsigned int v37 = *(os_log_s **)v13;
  if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v46 = 136315650;
    *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
    uint64_t v47 = 1024;
    unint64_t v48 = 97;
    uint64_t v49 = 1024;
    LODWORD(v50) = v12;
    _os_log_impl(&dword_0, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Error from SetSampleRateSynchronously: %d", v46, 0x18u);
  }

  return v12;
}

      int v11 = v6;
      goto LABEL_22;
    }

    goto LABEL_43;
  }

  if (v7 >= a3) {
    return result;
  }
  int v11 = (uint64_t **)(a2 + 1);
  uint64_t v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      int v11 = (uint64_t **)v12;
      uint64_t v12 = (uint64_t *)*v12;
      double v13 = v11;
      unint64_t v14 = v11;
    }

    while (v12);
  }

  else
  {
    unint64_t v14 = (uint64_t **)a2;
    do
    {
      double v19 = v14;
      unint64_t v14 = (uint64_t **)v14[2];
    }

    while (*v14 != (uint64_t *)v19);
    double v13 = (uint64_t **)a2;
  }

  if (v14 != v6 && (unint64_t)v14[4] <= a3)
  {
    char v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          double v13 = (uint64_t **)v20;
          double v21 = v20[4];
          if (v21 <= a3) {
            break;
          }
          char v20 = *v13;
          double v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v21 >= a3) {
          goto LABEL_45;
        }
        double v6 = v13 + 1;
        char v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }

  LOBYTE(v15) = 0;
LABEL_46:
  if (v115.__m_.__sig) {
    operator delete((void *)v115.__m_.__sig);
  }
  sub_2C7218((uint64_t)&v90, (uint64_t)&v99);
  if (v92) {
    goto LABEL_50;
  }
  double v87 = 0LL;
  __int128 v88 = 0LL;
  unsigned int v89 = 0LL;
  uint64_t v51 = v90;
  sub_7A5B8(&v87, v90, v91, (v91 - (uint64_t)v90) >> 2);
  unint64_t v53 = a1;
  size_t v84 = 0LL;
  int v85 = 0LL;
  std::string::size_type v86 = 0LL;
  sub_7A5B8(&v84, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  unint64_t v54 = v87;
  unint64_t v55 = v84;
  if (v88 - v87 != v85 - v84)
  {
    uint64_t v56 = 0;
    if (!v84) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }

  uint64_t v56 = memcmp(v87, v84, v88 - v87) == 0;
  if (v55)
  {
LABEL_127:
    int v85 = v55;
    operator delete(v55);
  }

void sub_774BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_774E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  sub_9D988(&v7, (void *)(a1 + 184), "", 119);
  for (unsigned int i = v8; i != &v7; unsigned int i = (uint64_t *)i[1])
  {
    unint64_t v5 = i[2];
    double v6 = (*(double (**)(unint64_t))(*(void *)v5 + 104LL))(v5);
    sub_77608((uint64_t **)a2, v5, v6);
  }

  sub_1BB88(&v7);
}

void sub_7758C(_Unwind_Exception *a1)
{
}

double sub_775B0(uint64_t a1)
{
  double v5 = 0.0;
  int v4 = 8;
  uint64_t v2 = 0x676C6F626E737274LL;
  int v3 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, double *))(*(void *)a1 + 40LL))( a1,  &v2,  0LL,  0LL,  &v4,  &v5);
  return v5;
}

void sub_77608(uint64_t **a1, unint64_t a2, double a3)
{
  uint64_t v7 = a1 + 1;
  double v6 = a1[1];
  double v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v10 <= a2) {
          break;
        }
        double v6 = *v9;
        double v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }

      if (v10 >= a2) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        double v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    int v11 = (double *)operator new(0x30uLL);
    *((void *)v11 + 4) = a2;
    v11[5] = a3;
    sub_32C38(a1, (uint64_t)v9, v8, (uint64_t *)v11);
    if (*(double *)sub_77878(a1[1], a2) != a3)
    {
      uint64_t v12 = sub_138E8(16);
      uint64_t v13 = sub_138E8(36);
      char v14 = 0;
      uint64_t v15 = 0LL;
      *(void *)buf = 0x100000002LL;
      uint64_t v16 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v17 = *(int *)&buf[4 * v15];
        char v18 = v14;
        if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
          break;
        }
        char v14 = 1;
        uint64_t v15 = 1LL;
        if ((v18 & 1) != 0) {
          goto LABEL_15;
        }
      }

      if ((v16 & v17) == 0) {
        uint64_t v12 = v13;
      }
LABEL_15:
      double v19 = *(os_log_s **)v12;
      if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        char v20 = (double *)sub_77878(*v7, a2);
        std::to_string(&v26, *v20);
        int size = (char)v26.__r_.__value_.__s.__size_;
        std::string::size_type v22 = v26.__r_.__value_.__r.__words[0];
        std::to_string(&__p, a3);
        uint64_t v23 = &v26;
        if (size < 0) {
          uint64_t v23 = (std::string *)v22;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v28 = 1024;
        int v29 = 115;
        __int16 v30 = 2048;
        unint64_t v31 = a2;
        __int16 v32 = 2080;
        unint64_t v33 = v23;
        __int16 v34 = 2080;
        uint64_t v35 = p_p;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d A sample rate for the device at %p already exists in this description. Existing rate: %s, new rate: %s. Ignoring the new rate.",  buf,  0x30u);
      }
    }
  }

void sub_77854( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_77878(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }

    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }

uint64_t sub_778C0(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  if (a2 != 1650881394)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "AggregateDevice_CommonBase.cpp";
      __int16 v17 = 1024;
      int v18 = 3041;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v15,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t result = sub_77A54(a3);
  uint64_t v7 = a1 + 520;
  uint64_t v8 = 520LL;
  if ((_DWORD)result)
  {
    uint64_t v8 = 544LL;
    uint64_t v7 = a1 + 544;
  }

  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(v7 + 8);
  while (1)
  {
    if (v9 == v10)
    {
      int v11 = 0;
      goto LABEL_10;
    }

    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v9 + 136LL) + 120LL))( *(void *)(*(void *)v9 + 136LL),  1987013737LL);
    if ((_DWORD)result) {
      break;
    }
    v9 += 16LL;
  }

  int v11 = 1;
LABEL_10:
  *a4 = v11;
  return result;
}

void sub_77A38(_Unwind_Exception *exception_object)
{
}

uint64_t sub_77A54(unsigned int a1)
{
  if (a1 == 1768845428) {
    return 0LL;
  }
  if (a1 != 1869968496)
  {
    unint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a1);
      if (v8 >= 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v10 = "ParameterTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 30;
      __int16 v13 = 2080;
      char v14 = v4;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Scope %s is not an explicit input/output scope",  buf,  0x1Cu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1852797029;
  }

  return 1LL;
}

void sub_77BB4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  int v8 = *a2;
  if (*a2 <= 1818453109)
  {
    if (v8 == 1818453106)
    {
      int v16 = *a5;
      if (v16 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
      {
        *(double *)a6 = (*(float (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
        *(double *)(a6 + 8) = (*(float (**)(uint64_t))(*(void *)a1 + 216LL))(a1);
        return;
      }

      std::string::size_type v22 = (os_log_t *)sub_138E8(13);
      int v18 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        int v25 = 136315394;
        std::string v26 = "HP_Control.cpp";
        __int16 v27 = 1024;
        int v28 = 514;
        double v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyDecibelRange";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v8 == 1818453107)
    {
      int v11 = *a5;
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
      {
        v12.n128_u32[0] = *(_DWORD *)a6;
        float v10 = (*(float (**)(uint64_t, __n128))(*(void *)a1 + 264LL))(a1, v12);
        goto LABEL_16;
      }

      uint64_t v23 = (os_log_t *)sub_138E8(13);
      int v18 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        int v25 = 136315394;
        std::string v26 = "HP_Control.cpp";
        __int16 v27 = 1024;
        int v28 = 525;
        double v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlProperty"
              "ConvertDecibelsToScalar";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    goto LABEL_20;
  }

  if (v8 == 1818453110)
  {
    int v13 = *a5;
    if (v13 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
      goto LABEL_16;
    }

    char v20 = (os_log_t *)sub_138E8(13);
    int v18 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      std::string v26 = "HP_Control.cpp";
      __int16 v27 = 1024;
      int v28 = 509;
      double v19 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioLevelControlPropertyDecibelValue";
      goto LABEL_36;
    }

float sub_77FC0(uint64_t a1, float a2)
{
  float v7 = a2;
  int v6 = 4;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F6276326462LL;
  int v5 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v2 + 40LL))( v2,  &v4,  0LL,  0LL,  &v6,  &v7);
  return v7;
}

uint64_t sub_7801C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 80) + 24LL))(**(void **)(a1 + 80), a2);
  int v6 = *(void **)(a1 + 80);
  int v5 = *(void **)(a1 + 88);
  while (v6 != v5)
  {
    if ((_DWORD)v4 != (*(unsigned int (**)(void, uint64_t))(*(void *)*v6 + 24LL))(*v6, a2))
    {
      int v8 = (os_log_t *)sub_138E8(13);
      int v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          __n128 v12 = "ControlSet.h";
          __int16 v13 = 1024;
          int v14 = 100;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Internal state failure. Differing responses to IsPropertySettabl e in the contained control list",  (uint8_t *)&v11,  0x12u);
        }
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( exception,  "Internal state failure. Differing responses to IsPropertySettable in the contained control list");
    }

    v6 += 2;
  }

  return v4;
}

void sub_78174(_Unwind_Exception *exception_object)
{
}

uint64_t sub_78190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2)
  {
    int v6 = (os_log_t *)sub_138E8(13);
    float v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 551;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 72LL))(*(void *)(v3 - 8));
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8LL;
  }

  while (!v5);
  return result;
}

void sub_782B0(_Unwind_Exception *exception_object)
{
}

BOOL sub_782CC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) != 0;
}

CFDictionaryRef sub_782DC(const __CFDictionary *result, const void *a2)
{
  if (result) {
    return CFDictionaryContainsKey(result, a2 != 0);
  }
  return result;
}

uint64_t sub_78300(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)uint64_t result = &off_47D048;
  *(void *)(result + 8) = 0LL;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0LL;
    uint64_t result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0LL;
      uint64_t result = CFNumberGetTypeID();
      if (v4 == result)
      {
        BOOL v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }

        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0LL;
        }

        return sub_783AC(v6, v7);
      }
    }
  }

  return result;
}

uint64_t sub_783AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

float sub_783E0(const __CFNumber *a1)
{
  float valuePtr = 0.0;
  if (!a1) {
    return 0.0;
  }
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  return valuePtr;
}

uint64_t sub_7841C(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  BOOL v5 = *(void **)(a1 + 128);
  uint64_t v6 = *(void **)(a1 + 136);
  if (v5 == v6)
  {
    int v12 = (os_log_t *)sub_138E8(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "VolumeControl.cpp";
      __int16 v17 = 1024;
      int v18 = 542;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v15,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v5 + 72LL))(*v5);
    if ((_DWORD)result) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, float, float))(*(void *)*v5 + 64LL))( *v5,  a2,  a3,  a4,  a5);
    }
    ++v5;
  }

  while (v5 != v6);
  return result;
}

void sub_78574(_Unwind_Exception *exception_object)
{
}

void sub_78590(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  int v50 = a3;
  if (*(_DWORD *)(a1 + 160))
  {
    float v10 = (os_log_t *)sub_138E8(38);
    __int16 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        int v12 = "enabled";
      }
      else {
        int v12 = "disabled";
      }
      __int16 v13 = v48;
      sub_2CA1C(v48, *(unsigned int *)(a1 + 160));
      if (v49 < 0) {
        __int16 v13 = (void **)v48[0];
      }
      sub_2CA1C(v46, a2);
      int v14 = v47;
      int v15 = (void **)v46[0];
      sub_665BC((uint64_t)__p, a1);
      int v16 = v46;
      if (v14 < 0) {
        int v16 = v15;
      }
      *(_DWORD *)buf = 136316930;
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      if (v45 >= 0) {
        __int16 v17 = __p;
      }
      else {
        __int16 v17 = (void **)__p[0];
      }
      __int16 v52 = 1024;
      int v53 = 1461;
      __int16 v54 = 2080;
      unint64_t v55 = (void *)v12;
      __int16 v56 = 2080;
      *(void *)unint64_t v57 = v13;
      *(_WORD *)&v57[8] = 2080;
      uint64_t v58 = v16;
      __int16 v59 = 2048;
      double v60 = a4;
      __int16 v61 = 2048;
      double v62 = a5;
      __int16 v63 = 2080;
      unint64_t v64 = v17;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f on chain '%s'.",  buf,  0x4Eu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
    }

    if ((_DWORD)a2 != 1)
    {
      int v18 = (os_log_t *)sub_138E8(13);
      double v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v48, a2);
          char v20 = v49 >= 0 ? v48 : (void **)v48[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v52 = 1024;
          int v53 = 1463;
          __int16 v54 = 2080;
          unint64_t v55 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: duck type: '%s' not supported!",  buf,  0x1Cu);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
        }
      }
    }

    *(_DWORD *)buf = *(_DWORD *)(a1 + 164);
    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    v46[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    *(_DWORD *)buf = *(_DWORD *)(a1 + 168);
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
    }

    *(_DWORD *)buf = *(_DWORD *)(a1 + 172);
    CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    CFNumberRef v43 = v23;
    if (!v23)
    {
      uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }

    float v24 = a5 * 1000.0;
    int v25 = *(_DWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 180) != 1) {
      float v24 = a5;
    }
    float v42 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v41 = a4;
    sub_78C54(buf, v21, &v50);
    sub_78D30((int *)((char *)&v53 + 2), v22, (int *)&v41);
    sub_78D30(&v57[2], v23, (int *)&v42);
    v48[0] = buf;
    v48[1] = &dword_0 + 3;
    CFDictionaryRef v26 = sub_5A950((uint64_t)v48);
    for (uint64_t i = 0LL; i != -6; i -= 2LL)
    {
      int v28 = (&v58)[i];
      if (v28) {
        CFRelease(v28);
      }
      int v29 = *(const void **)&v57[i * 8 + 2];
      if (v29) {
        CFRelease(v29);
      }
    }

    *(void *)buf = v26;
    sub_78E0C(a1, 1685287015LL, *(unsigned int *)(a1 + 160));
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }

  if (sub_1CCDF8() && sub_2BD1C8((void *)a1, 1685287015LL))
  {
    uint64_t v30 = sub_5954C();
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 288LL))(v30);
    int v32 = v31;
    if (a3) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v31 == 0;
    }
    int v34 = v33;
    LODWORD(v48[0]) = v34;
    uint64_t v35 = (os_log_t *)sub_138E8(38);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      int v53 = 1507;
      unsigned int v37 = "enabled";
      __int16 v54 = 2080;
      *(_DWORD *)buf = 136316162;
      __int16 v52 = 1024;
      if (!a3) {
        unsigned int v37 = "disabled";
      }
      unint64_t v55 = (void *)v37;
      __int16 v56 = 1024;
      *(_DWORD *)unint64_t v57 = v32;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)&v57[6] = v34;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Duck %s, enhance dialog level %u, Set AUSI bypass %u",  buf,  0x28u);
    }

    sub_78E0C(a1, 1685287015LL, 1936289907LL);
  }

void sub_78B34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void *sub_78C54(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_78CF0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_78D30(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_78DCC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_78E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v6 = sub_2BCF20(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v6)
  {
    int v50 = (os_log_t *)sub_138E8(13);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(v63, a2);
      __int16 v52 = v64 >= 0 ? v63 : (void **)v63[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 349;
      __int16 v68 = 2080;
      uint64_t v69 = v52;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): VolumeCommand: Software volume processor of type '%s' does not exist",  buf,  0x1Cu);
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }

  uint64_t v7 = v6;
  uint64_t v8 = sub_138E8(18);
  uint64_t v9 = sub_138E8(38);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  int v15 = *(os_log_s **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(v63, a3);
    unsigned int v54 = a3;
    if (v64 >= 0) {
      int v16 = v63;
    }
    else {
      int v16 = (void **)v63[0];
    }
    sub_2CA1C(v61, a2);
    int v17 = v62;
    int v18 = (void **)v61[0];
    int v19 = *((_DWORD *)v7 + 14);
    sub_665BC((uint64_t)__p, a1);
    char v20 = v61;
    if (v17 < 0) {
      char v20 = v18;
    }
    if (v60 >= 0) {
      CFNumberRef v21 = __p;
    }
    else {
      CFNumberRef v21 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v66 = 1024;
    int v67 = 352;
    __int16 v68 = 2080;
    uint64_t v69 = v16;
    __int16 v70 = 2080;
    unint64_t v71 = v20;
    __int16 v72 = 1024;
    int v73 = v19;
    __int16 v74 = 2080;
    uint64_t v75 = v21;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VolumeCommand: Setting property '%s' on processor type '%s' index %u on chain '%s'.",  buf,  0x36u);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    a3 = v54;
    if (v62 < 0) {
      operator delete(v61[0]);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
  }

  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  CFNumberRef v22 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v22)
  {
    CFNumberRef v23 = 0LL;
    goto LABEL_33;
  }

  CFNumberRef v23 = std::__shared_weak_count::lock(v22);
  uint64_t v58 = v23;
  if (!v23 || (uint64_t v57 = *(void *)(a1 + 24)) == 0)
  {
LABEL_33:
    uint64_t v32 = sub_138E8(18);
    uint64_t v33 = sub_138E8(38);
    char v34 = 0;
    uint64_t v35 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v36 = *(void *)(v32 + 8);
    while (1)
    {
      uint64_t v37 = *(int *)&buf[4 * v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1LL;
      if ((v38 & 1) != 0) {
        goto LABEL_39;
      }
    }

    if ((v36 & v37) == 0) {
      uint64_t v32 = v33;
    }
LABEL_39:
    uint64_t v39 = *(os_log_s **)v32;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 367;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter",  buf,  0x12u);
    }

void sub_79438( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_7A768((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_794E4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v13 = a2;
  uint64_t v8 = sub_65F40((uint64_t **)(a1 + 32), a2, &v13)[5];
  if (!v8)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v15 = "DSPProcessorManager.cpp";
      __int16 v16 = 1024;
      int v17 = 234;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [instance is NULL]: Unable to find instance.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find instance.");
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void, void))(*v8 + 56))( v8,  a3,  a4,  a5,  0LL,  0LL);
}

void sub_7961C(_Unwind_Exception *a1)
{
}

uint64_t sub_79638( uint64_t a1, AudioUnitPropertyID a2, void *inData, UInt32 inDataSize, AudioUnitScope inScope, AudioUnitElement inElement)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    uint64_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0LL;
  }
  return AudioUnitSetProperty(v7, a2, inScope, inElement, inData, inDataSize);
}

uint64_t sub_79668()
{
  return 1LL;
}

uint64_t sub_79670(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = HIDWORD(a2);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v15 = v10;
  do
  {
    unsigned int v16 = *(_DWORD *)(v11 + 32);
    BOOL v17 = v16 >= a2;
    else {
      int v18 = (uint64_t *)(v11 + 8);
    }
    if (v17) {
      uint64_t v15 = v11;
    }
    uint64_t v11 = *v18;
  }

  while (*v18);
  if (v15 != v10
    && *(_DWORD *)(v15 + 32) <= a2
    && (uint64_t v19 = v15 + 40, sub_79914(a4, v15 + 40, *(_DWORD *)(v15 + 72), a2, a3, a5)))
  {
    LODWORD(v34[0]) = a4;
    sub_7A22C((uint64_t)buf, (unsigned int *)v34, 1LL);
    uint64_t v20 = sub_55914((uint64_t)buf, v19, v9, a6, a7);
    sub_32C8C(*(void **)&v37[4]);
  }

  else
  {
LABEL_14:
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = sub_138E8(8);
  if ((*(_BYTE *)(v21 + 8) & 1) != 0)
  {
    CFNumberRef v22 = *(os_log_s **)v21;
    if (*(void *)v21)
    {
      if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v34, a2);
        if (v35 >= 0) {
          CFNumberRef v23 = v34;
        }
        else {
          CFNumberRef v23 = (void **)v34[0];
        }
        sub_2CA1C(v32, v9);
        int v24 = v33;
        uint64_t v25 = (void **)v32[0];
        sub_2CA1C(__p, a4);
        uint64_t v26 = v32;
        *(void *)uint64_t v37 = "RoutingManager.cpp";
        if (v24 < 0) {
          uint64_t v26 = v25;
        }
        char v27 = "does not";
        if ((_DWORD)v20) {
          char v27 = "does";
        }
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)&v37[10] = 4240;
        uint64_t v28 = (void **)__p[0];
        *(_DWORD *)buf = 136316418;
        __int16 v38 = 2080;
        if (v31 >= 0) {
          uint64_t v28 = __p;
        }
        uint64_t v39 = v23;
        __int16 v40 = 2080;
        unint64_t v41 = v26;
        __int16 v42 = 2080;
        CFNumberRef v43 = v27;
        __int16 v44 = 2080;
        int v45 = v28;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Category %s and mode %s %s support port type %s",  buf,  0x3Au);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        if (v35 < 0) {
          operator delete(v34[0]);
        }
      }
    }
  }

  return v20;
}

void sub_798CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23)
{
}

uint64_t sub_79914(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v19 = a3 == 1668510820;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  v18[0] = a2;
  v18[1] = a6;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v7 = sub_11DDE4(v18);
  uint64_t v9 = v18[0];
  if (v18[0] == v7) {
    return 0LL;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = (uint64_t)(v8 + 1);
  while (1)
  {
    uint64_t v13 = *(void *)(v10 + 24);
    if (v13 != v10 + 16)
    {
      do
      {
        BOOL v14 = *(_DWORD *)(v13 + 16) == a1 || *(_DWORD *)(v13 + 20) == a1;
        char v15 = v14;
        if (v14) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }

      while (v13 != v10 + 16);
      if ((v15 & 1) != 0) {
        return 1LL;
      }
    }

    uint64_t v10 = *(void *)(v10 + 8);
    uint64_t v16 = *v11;
    if (v10 != *v11)
    {
      while (!sub_11E3FC(v12, v10 + 16))
      {
        uint64_t v10 = *(void *)(v10 + 8);
        if (v10 == v16)
        {
          uint64_t v10 = v16;
          break;
        }
      }
    }

    if (v10 == v9) {
      return 0LL;
    }
  }

uint64_t sub_79A04(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  uint64_t v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 104));
  if (pthread_equal(v2, v3))
  {
    unsigned __int8 v13 = 0;
    CFTypeID v4 = (os_log_s *)sub_4DDC(a1 + 176, (char *)&v13);
    int v5 = v13;
    if (v13 != (_DWORD)v4)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          char v15 = "IOMonitor.h";
          __int16 v16 = 1024;
          int v17 = 69;
          __int16 v18 = 1024;
          int v19 = (int)v4;
          __int16 v20 = 1024;
          int v21 = v5;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: By definition, the IO thread is singular and not reentrant. As a result, it i s a deep logic error if the IO thread already owns mIOThreadCallingNormalMutex. trySucceeded (%u) and outWas Locked (%u) imply this logic error.",  buf,  0x1Eu);
        }
      }
    }
  }

  else
  {
    uint64_t v8 = a1 + 88;
    if (!sub_5518(a1))
    {
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          char v15 = "IOMonitor.h";
          __int16 v16 = 1024;
          int v17 = 60;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not take io monitor core lock in the normal thread.",  buf,  0x12u);
        }
      }
    }

    if (sub_5518(v8))
    {
      return 1LL;
    }

    else
    {
      uint64_t v11 = (os_log_t *)sub_138E8(13);
      CFTypeID v4 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          char v15 = "IOMonitor.h";
          __int16 v16 = 1024;
          int v17 = 63;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Could not take io proc lock in the normal thread.",  buf,  0x12u);
        }

        return 0LL;
      }
    }
  }

  return (uint64_t)v4;
}

void sub_79C14(unint64_t *a1)
{
  uint64_t v2 = pthread_self();
  uint64_t v3 = a1 + 24;
  CFTypeID v4 = (_opaque_pthread_t *)atomic_load(a1 + 24);
  if (pthread_equal(v2, v4))
  {
    a1 += 22;
    int v5 = pthread_self();
    uint64_t v6 = (_opaque_pthread_t *)atomic_load(v3);
    if (!pthread_equal(v5, v6))
    {
      uint64_t v7 = (os_log_t *)sub_138E8(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          __int16 v18 = "IOMonitor.h";
          __int16 v19 = 1024;
          int v20 = 108;
          uint64_t v9 = "%25s:%-5d ASSERTION FAILURE: It is illegal to call Unlock_Normal from the io thread when it does not ow"
               "n mIOThreadCallingNormalMutex.";
LABEL_11:
          _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v17, 0x12u);
        }
      }
    }
  }

  else
  {
    uint64_t v10 = pthread_self();
    uint64_t v11 = (_opaque_pthread_t *)atomic_load(a1 + 13);
    if (!pthread_equal(v10, v11))
    {
      char v15 = (os_log_t *)sub_138E8(13);
      __int16 v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          __int16 v18 = "IOMonitor.h";
          __int16 v19 = 1024;
          int v20 = 100;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: It is illegal to call Unlock_Normal from a thread that does not own the mIOPr ocThreadMutex.",  (uint8_t *)&v17,  0x12u);
        }
      }
    }

    sub_563C((uint64_t)(a1 + 11));
    uint64_t v12 = pthread_self();
    unsigned __int8 v13 = (_opaque_pthread_t *)atomic_load(a1 + 2);
    if (!pthread_equal(v12, v13))
    {
      BOOL v14 = (os_log_t *)sub_138E8(13);
      uint64_t v8 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          __int16 v18 = "IOMonitor.h";
          __int16 v19 = 1024;
          int v20 = 103;
          uint64_t v9 = "%25s:%-5d ASSERTION FAILURE: It is illegal to call Unlock_Normal from a thread that does not own the IO Monitor.";
          goto LABEL_11;
        }
      }
    }
  }

  sub_563C((uint64_t)a1);
}

uint64_t sub_79E08(uint64_t a1, int a2)
{
  if (!a1)
  {
    CFTypeID v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 1333;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: mDevice is NULL",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  if (a2) {
    unsigned int v2 = 1768845428;
  }
  else {
    unsigned int v2 = 1869968496;
  }
  *(_DWORD *)buf = 1752657012;
  uint64_t v10 = (const char *)v2;
  int v7 = 4;
  unsigned int v8 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  &v7,  &v8);
  return v8;
}

void sub_79F4C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 796) && *(_BYTE *)(a1 + 797))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1935958625LL,  &v14,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1935958627LL,  &v13,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1936418419LL,  &v12,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1935963506LL,  &v10,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1937141612LL,  &v11,  0LL);
    uint64_t v4 = *(void *)(a1 + 736);
    float v6 = v13;
    float v5 = v14;
    float v8 = v11;
    float v7 = v12;
    float v9 = v10;
    if (qword_4919C8 != -1) {
      dispatch_once(&qword_4919C8, &stru_46D3C0);
    }
    if (off_491A20) {
      off_491A20(v4, 0LL, a2, v5, v6, v7, v8, v9);
    }
  }

void sub_7A0DC(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

void sub_7A0E8(void *a1)
{
}

uint64_t sub_7A0F8(_DWORD *a1, _DWORD *a2, BOOL *a3)
{
  uint64_t result = 0LL;
  *a2 = 0;
  if (a1[2] == 1819304813)
  {
    if (a1[5] != 1) {
      return 0LL;
    }
    unsigned int v5 = a1[6];
    if (v5 != a1[4]) {
      return 0LL;
    }
    unsigned int v6 = a1[8];
    if (v5 < v6 >> 3) {
      return 0LL;
    }
    unsigned int v7 = a1[7];
    if (!v7) {
      return 0LL;
    }
    unsigned int v8 = a1[3];
    if (a3) {
      *a3 = (v8 & 0x20) == 0;
    }
    if ((v8 & 0x20) == 0)
    {
      BOOL v9 = v5 == v5 / v7 * v7;
      v5 /= v7;
      if (!v9) {
        return 0LL;
      }
    }

    uint64_t result = 1LL;
    if ((v8 & 2) == 0 && 8 * v5 == v6)
    {
      if ((v8 & 1) != 0)
      {
        if ((v8 & 0x1F84) != 0) {
          return 0LL;
        }
        if (v5 != 4)
        {
          if (v5 != 8) {
            return result;
          }
          LODWORD(result) = 4;
        }

        goto LABEL_29;
      }

      if ((v8 & 4) == 0) {
        return result;
      }
      int v10 = (v8 >> 7) & 0x3F;
      if (v10 == 24 && v5 == 4)
      {
        LODWORD(result) = 3;
LABEL_29:
        *a2 = result;
        return 1LL;
      }

      if (!v10 && v5 == 4)
      {
        LODWORD(result) = 5;
        goto LABEL_29;
      }

      if (!v10 && v5 == 2)
      {
        LODWORD(result) = 2;
        goto LABEL_29;
      }
    }
  }

  return result;
}

void sub_7A20C(std::exception *a1)
{
}

const char *sub_7A220()
{
  return "CAException";
}

uint64_t sub_7A22C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_32A38((uint64_t **)a1, v4, *a2, a2);
      ++a2;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_7A290(_Unwind_Exception *a1)
{
}

uint64_t **sub_7A2A4(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    unsigned int v5 = a2;
    uint64_t v6 = 0LL;
    unsigned int v7 = (int *)&a2[6 * a3];
    unsigned int v8 = a1 + 1;
    while (1)
    {
      BOOL v9 = v4;
      int v10 = v6;
      float v11 = v4;
      if (v6)
      {
        do
        {
          BOOL v9 = v10;
          int v10 = (uint64_t *)v10[1];
        }

        while (v10);
      }

      else
      {
        do
        {
          BOOL v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          float v11 = v9;
        }

        while (v12);
      }

      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        float v14 = v6 ? v9 : v4;
        char v15 = v6 ? v9 + 1 : v4;
      }

      else
      {
        float v14 = v4;
        char v15 = v4;
        if (v6)
        {
          char v15 = v4;
          while (1)
          {
            while (1)
            {
              float v14 = v6;
              unsigned int v19 = *((_DWORD *)v6 + 8);
              if (v13 >= v19) {
                break;
              }
              uint64_t v6 = (uint64_t *)*v14;
              char v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }

            if (v19 >= v13) {
              break;
            }
            char v15 = v14 + 1;
            uint64_t v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }

      if (!*v15)
      {
LABEL_16:
        __int16 v16 = operator new(0x38uLL);
        __int128 v17 = *(_OWORD *)v5;
        v16[6] = *((void *)v5 + 2);
        *((_OWORD *)v16 + 2) = v17;
        *__int16 v16 = 0LL;
        v16[1] = 0LL;
        v16[2] = v14;
        uint64_t *v15 = (uint64_t)v16;
        __int16 v18 = (uint64_t *)**a1;
        if (v18)
        {
          *a1 = v18;
          __int16 v16 = (void *)*v15;
        }

        sub_7A420(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }

      v5 += 6;
      unsigned int v8 = (uint64_t **)*a1;
      uint64_t v6 = a1[1];
    }
  }

  return a1;
}

void sub_7A40C(_Unwind_Exception *a1)
{
}

uint64_t *sub_7A420(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + memset(buf, 0, 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unsigned int v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }

          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unsigned int v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + memset(buf, 0, 24) = 1;
          *((_BYTE *)v3 + memset(buf, 0, 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unsigned int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unsigned int v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + memset(buf, 0, 24) = 1;
        *((_BYTE *)v3 + memset(buf, 0, 24) = 0;
        unsigned int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *unsigned int v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + memset(buf, 0, 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + memset(buf, 0, 24) = v3 == result;
      *unsigned int v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void *sub_7A5B8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_7A840(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_7A614(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_7A630(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_7A668(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_7A768(v4 - 16);
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

const void **sub_7A6D8(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_7A708(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_7A738(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_7A768(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

void sub_7A7C0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      unsigned int v2 = (void *)*v1;
      sub_7A7FC((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

void sub_7A7FC(uint64_t a1)
{
}

char *sub_7A840(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_7A87C();
  }
  uint64_t result = (char *)sub_7A890(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_7A87C()
{
}

void *sub_7A890(unint64_t a1)
{
  if (a1 >> 62) {
    sub_7A8C4();
  }
  return operator new(4 * a1);
}

void sub_7A8C4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_7A8EC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_7A93C(exception, a1);
}

void sub_7A928(_Unwind_Exception *a1)
{
}

std::logic_error *sub_7A93C(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_7A960(uint64_t a1, uint64_t a2, const void **a3, const void **a4, const void **a5, uint64_t a6)
{
  if (!*a3)
  {
    uint64_t v28 = (os_log_t *)sub_138E8(13);
    uint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v31 = 136315394;
      *(void *)&v31[4] = "DSPHALInterface.cpp";
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = 54;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v31, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_7E45C(a1);
  if (a1 + 24 != a2) {
    sub_7E6D4((char *)(a1 + 24), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v12 = *(const void **)(a1 + 48);
  uint64_t v13 = *a3;
  *(void *)(a1 + 48) = *a3;
  if (v13) {
    CFRetain(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  float v14 = *(const void **)(a1 + 56);
  char v15 = *a4;
  *(void *)(a1 + 56) = *a4;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  __int16 v16 = *(const void **)(a1 + 64);
  __int128 v17 = *a5;
  *(void *)(a1 + 64) = *a5;
  if (v17) {
    CFRetain(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  __int16 v18 = (void *)(a1 + 104);
  if (a1 + 104 != a6)
  {
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a6 + 32);
    unsigned int v19 = *(uint64_t **)(a6 + 16);
    uint64_t v20 = *(void *)(a1 + 112);
    if (v20)
    {
      for (uint64_t i = 0LL; i != v20; ++i)
        *(void *)(*v18 + 8 * i) = 0LL;
      uint64_t v22 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = 0LL;
      *(void *)(a1 + 128) = 0LL;
      if (v22) {
        BOOL v23 = v19 == 0LL;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        int v24 = (void *)v22;
      }

      else
      {
        do
        {
          std::string::operator=((std::string *)(v22 + 16), (const std::string *)(v19 + 2));
          std::string::operator=((std::string *)(v22 + 40), (const std::string *)(v19 + 5));
          int v24 = *(void **)v22;
          sub_7E7D8(a1 + 104, v22);
          unsigned int v19 = (uint64_t *)*v19;
          if (!v24) {
            break;
          }
          uint64_t v22 = (uint64_t)v24;
        }

        while (v19);
      }

      sub_7A7C0(v24);
    }

    if (v19)
    {
      uint64_t v25 = a1 + 120;
      do
      {
        uint64_t v26 = operator new(0x40uLL);
        *(void *)char v31 = v26;
        *(void *)&v31[8] = v25;
        v31[16] = 0;
        *(void *)uint64_t v26 = 0LL;
        *((void *)v26 + 1) = 0LL;
        char v27 = sub_7ECB0((char *)v26 + 16, (__int128 *)v19 + 1);
        v31[16] = 1;
        *((void *)v26 + 1) = sub_7ED44((uint64_t)v27);
        sub_7E7D8((uint64_t)v18, (uint64_t)v26);
        *(void *)char v31 = 0LL;
        sub_7EC6C((uint64_t)v31);
        unsigned int v19 = (uint64_t *)*v19;
      }

      while (v19);
    }
  }

void sub_7ABF0(_Unwind_Exception *exception_object)
{
}

void sub_7ABF8(_Unwind_Exception *a1)
{
}

void sub_7AC20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_7A7C0(v2);
    __cxa_rethrow();
  }

  _Unwind_Resume(a1);
}

void sub_7AC44(_Unwind_Exception *a1)
{
}

void sub_7AC50(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_7AC60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_7AC78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 149)) {
    return;
  }
  unsigned int v2 = (os_log_t *)sub_138E8(24);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(unsigned int **)(a1 + 24);
    unsigned int v5 = *(unsigned int **)(a1 + 32);
    memset(&v158, 0, sizeof(v158));
    std::string::append(&v158, "{ ", 2uLL);
    if (v4 != v5)
    {
      while (1)
      {
        std::to_string((std::string *)valuePtr, *v4);
        if (valuePtr[23] >= 0) {
          int v6 = valuePtr;
        }
        else {
          int v6 = *(const std::string::value_type **)valuePtr;
        }
        if (valuePtr[23] >= 0) {
          std::string::size_type v7 = valuePtr[23];
        }
        else {
          std::string::size_type v7 = *(void *)&valuePtr[8];
        }
        std::string::append(&v158, v6, v7);
        if ((valuePtr[23] & 0x80000000) != 0) {
          operator delete(*(void **)valuePtr);
        }
        if (++v4 == v5) {
          break;
        }
        std::string::append(&v158, ", ", 2uLL);
      }
    }

    std::string::append(&v158, " }", 2uLL);
    if ((v158.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v8 = &v158;
    }
    else {
      size_t v8 = (std::string *)v158.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int valuePtr = 136315650;
    *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
    *(_WORD *)&valuePtr[12] = 1024;
    *(_DWORD *)&valuePtr[14] = 68;
    *(_WORD *)&valuePtr[18] = 2080;
    *(void *)&valuePtr[20] = v8;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Loading HAL DSP. Input Streams: %s", valuePtr, 0x1Cu);
  }

  memset(&v158, 0, sizeof(v158));
  sub_59370((CFStringRef *)cf, "dsp graph");
  BOOL v9 = *(const void **)(a1 + 48);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a1 + 48));
  }
  cf[1] = v9;
  std::string::size_type size = v158.__r_.__value_.__l.__size_;
  if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
  {
    uint64_t v11 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
    unint64_t v12 = v11 + 1;
    int64_t v13 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
    else {
      unint64_t v14 = v12;
    }
    p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
    char v15 = (char *)sub_7BE90(v14);
    __int16 v16 = (CFTypeRef *)&v15[16 * v11];
    *(void *)&valuePtr[24] = &v15[16 * v17];
    *__int16 v16 = cf[0];
    cf[0] = 0LL;
    v16[1] = cf[1];
    cf[1] = 0LL;
    std::string::size_type v18 = (std::string::size_type)(v16 + 2);
    *(void *)&valuePtr[16] = v16 + 2;
    unsigned int v19 = (void *)v158.__r_.__value_.__l.__size_;
    std::string::size_type v20 = v158.__r_.__value_.__r.__words[0];
    if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
    {
      int64x2_t v22 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
    }

    else
    {
      do
      {
        int v21 = (const void *)*(v19 - 2);
        v19 -= 2;
        *(v16 - 2) = v21;
        v16 -= 2;
        *unsigned int v19 = 0LL;
        v16[1] = (CFTypeRef)v19[1];
        v19[1] = 0LL;
      }

      while (v19 != (void *)v20);
      int64x2_t v22 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
      std::string::size_type v18 = *(void *)&valuePtr[16];
    }

    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v158.__r_.__value_.__l.__size_ = v18;
    *(int64x2_t *)&valuePtr[8] = v22;
    std::string::size_type cap = v158.__r_.__value_.__l.__cap_;
    v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
    *(void *)&valuePtr[24] = cap;
    *(void *)int valuePtr = v22.i64[0];
    sub_7BEC4((uint64_t)valuePtr);
    v158.__r_.__value_.__l.__size_ = v18;
    if (cf[1]) {
      CFRelease(cf[1]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }

  else
  {
    *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
    *(CFTypeRef *)(size + 8) = cf[1];
    v158.__r_.__value_.__l.__size_ = size + 16;
  }

  sub_7BF10((uint64_t)cf, (int *)(a1 + 144));
  std::string::size_type v24 = v158.__r_.__value_.__l.__size_;
  if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
  {
    uint64_t v25 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
    unint64_t v26 = v25 + 1;
    int64_t v27 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
    else {
      unint64_t v28 = v26;
    }
    p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
    uint64_t v29 = (char *)sub_7BE90(v28);
    uint64_t v30 = (CFTypeRef *)&v29[16 * v25];
    *(void *)&valuePtr[24] = &v29[16 * v31];
    *uint64_t v30 = cf[0];
    cf[0] = 0LL;
    v30[1] = cf[1];
    cf[1] = 0LL;
    std::string::size_type v32 = (std::string::size_type)(v30 + 2);
    *(void *)&valuePtr[16] = v30 + 2;
    char v33 = (void *)v158.__r_.__value_.__l.__size_;
    std::string::size_type v34 = v158.__r_.__value_.__r.__words[0];
    if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
    {
      int64x2_t v36 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
    }

    else
    {
      do
      {
        char v35 = (const void *)*(v33 - 2);
        v33 -= 2;
        *(v30 - 2) = v35;
        v30 -= 2;
        *char v33 = 0LL;
        v30[1] = (CFTypeRef)v33[1];
        v33[1] = 0LL;
      }

      while (v33 != (void *)v34);
      int64x2_t v36 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
      std::string::size_type v32 = *(void *)&valuePtr[16];
    }

    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v158.__r_.__value_.__l.__size_ = v32;
    *(int64x2_t *)&valuePtr[8] = v36;
    std::string::size_type v37 = v158.__r_.__value_.__l.__cap_;
    v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
    *(void *)&valuePtr[24] = v37;
    *(void *)int valuePtr = v36.i64[0];
    sub_7BEC4((uint64_t)valuePtr);
    v158.__r_.__value_.__l.__size_ = v32;
    if (cf[1]) {
      CFRelease(cf[1]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }

  else
  {
    *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
    *(CFTypeRef *)(v24 + 8) = cf[1];
    v158.__r_.__value_.__l.__size_ = v24 + 16;
  }

  if (*(void *)(a1 + 56))
  {
    sub_59370((CFStringRef *)cf, "au tuning strip");
    __int16 v38 = *(const void **)(a1 + 56);
    if (v38) {
      CFRetain(*(CFTypeRef *)(a1 + 56));
    }
    cf[1] = v38;
    std::string::size_type v39 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v40 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v41 = v40 + 1;
      int64_t v42 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v43 = v41;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      __int16 v44 = (char *)sub_7BE90(v43);
      int v45 = (CFTypeRef *)&v44[16 * v40];
      *(void *)&valuePtr[24] = &v44[16 * v46];
      CFTypeRef *v45 = cf[0];
      cf[0] = 0LL;
      v45[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v47 = (std::string::size_type)(v45 + 2);
      *(void *)&valuePtr[16] = v45 + 2;
      unint64_t v48 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v49 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v51 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          int v50 = (const void *)*(v48 - 2);
          v48 -= 2;
          *(v45 - 2) = v50;
          v45 -= 2;
          *unint64_t v48 = 0LL;
          v45[1] = (CFTypeRef)v48[1];
          v48[1] = 0LL;
        }

        while (v48 != (void *)v49);
        int64x2_t v51 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v47 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      v158.__r_.__value_.__l.__size_ = v47;
      *(int64x2_t *)&valuePtr[8] = v51;
      std::string::size_type v52 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v52;
      *(void *)int valuePtr = v51.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v47;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v39 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v39 + 16;
    }
  }

  if (*(void *)(a1 + 64))
  {
    sub_59370((CFStringRef *)cf, "property strip");
    int v53 = *(const void **)(a1 + 64);
    if (v53) {
      CFRetain(*(CFTypeRef *)(a1 + 64));
    }
    cf[1] = v53;
    std::string::size_type v54 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v55 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v56 = v55 + 1;
      int64_t v57 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v58 = v56;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      __int16 v59 = (char *)sub_7BE90(v58);
      char v60 = (CFTypeRef *)&v59[16 * v55];
      *(void *)&valuePtr[24] = &v59[16 * v61];
      CFTypeRef *v60 = cf[0];
      cf[0] = 0LL;
      v60[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v62 = (std::string::size_type)(v60 + 2);
      *(void *)&valuePtr[16] = v60 + 2;
      __int16 v63 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v64 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v66 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          uint64_t v65 = (const void *)*(v63 - 2);
          v63 -= 2;
          *(v60 - 2) = v65;
          v60 -= 2;
          *__int16 v63 = 0LL;
          v60[1] = (CFTypeRef)v63[1];
          v63[1] = 0LL;
        }

        while (v63 != (void *)v64);
        int64x2_t v66 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v62 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      v158.__r_.__value_.__l.__size_ = v62;
      *(int64x2_t *)&valuePtr[8] = v66;
      std::string::size_type v67 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v67;
      *(void *)int valuePtr = v66.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v62;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v54 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v54 + 16;
    }
  }

  if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    CFArrayRef v68 = sub_7C020((int **)(a1 + 24));
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = v68;
    sub_59370((CFStringRef *)cf, "input stream busses");
    if (v68) {
      CFRetain(v68);
    }
    cf[1] = v68;
    std::string::size_type v69 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v70 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v71 = v70 + 1;
      int64_t v72 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v73 = v71;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      __int16 v74 = (char *)sub_7BE90(v73);
      uint64_t v75 = (CFTypeRef *)&v74[16 * v70];
      *(void *)&valuePtr[24] = &v74[16 * v76];
      *uint64_t v75 = cf[0];
      cf[0] = 0LL;
      v75[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v77 = (std::string::size_type)(v75 + 2);
      *(void *)&valuePtr[16] = v75 + 2;
      __int128 v78 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v79 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v81 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          BOOL v80 = (const void *)*(v78 - 2);
          v78 -= 2;
          *(v75 - 2) = v80;
          v75 -= 2;
          *__int128 v78 = 0LL;
          v75[1] = (CFTypeRef)v78[1];
          v78[1] = 0LL;
        }

        while (v78 != (void *)v79);
        int64x2_t v81 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v77 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      v158.__r_.__value_.__l.__size_ = v77;
      *(int64x2_t *)&valuePtr[8] = v81;
      std::string::size_type v82 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v82;
      *(void *)int valuePtr = v81.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v77;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v69 + 8) = cf[1];
      cf[0] = 0LL;
      cf[1] = 0LL;
      v158.__r_.__value_.__l.__size_ = v69 + 16;
    }

    if (v68) {
      CFRelease(v68);
    }
  }

  if (*(void *)(a1 + 72))
  {
    sub_59370((CFStringRef *)cf, "initialization properties");
    int v83 = *(const void **)(a1 + 72);
    if (v83) {
      CFRetain(*(CFTypeRef *)(a1 + 72));
    }
    cf[1] = v83;
    std::string::size_type v84 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v85 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v86 = v85 + 1;
      int64_t v87 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v88 = v86;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      unsigned int v89 = (char *)sub_7BE90(v88);
      char v90 = (CFTypeRef *)&v89[16 * v85];
      *(void *)&valuePtr[24] = &v89[16 * v91];
      *char v90 = cf[0];
      cf[0] = 0LL;
      v90[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v92 = (std::string::size_type)(v90 + 2);
      *(void *)&valuePtr[16] = v90 + 2;
      id v93 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v94 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v96 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          double v95 = (const void *)*(v93 - 2);
          v93 -= 2;
          *(v90 - 2) = v95;
          v90 -= 2;
          void *v93 = 0LL;
          v90[1] = (CFTypeRef)v93[1];
          v93[1] = 0LL;
        }

        while (v93 != (void *)v94);
        int64x2_t v96 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v92 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
      v158.__r_.__value_.__l.__size_ = v92;
      *(int64x2_t *)&valuePtr[8] = v96;
      std::string::size_type v97 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v97;
      *(void *)int valuePtr = v96.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v92;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v84 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v84 + 16;
    }
  }

  unint64_t v98 = *(void *)(a1 + 128);
  if (v98)
  {
    memset(valuePtr, 0, 24);
    sub_7DCF4(valuePtr, v98);
    for (uint64_t i = (const UInt8 *)(a1 + 120); ; sub_7DD74(valuePtr, i + 16, (uint64_t)(i + 40)))
    {
      uint64_t i = *(const UInt8 **)i;
      if (!i) {
        break;
      }
    }

    CFDictionaryRef v100 = sub_7C1F4((void ***)valuePtr);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = valuePtr;
    sub_7CFCC((void ***)&inAddress);
    CFDictionaryRef outData = v100;
    sub_59370((CFStringRef *)cf, "dsp graph string substitutions");
    if (v100) {
      CFRetain(v100);
    }
    cf[1] = v100;
    std::string::size_type v101 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v102 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v103 = v102 + 1;
      int64_t v104 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v105 = v103;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      unint64_t v106 = (char *)sub_7BE90(v105);
      unint64_t v107 = (CFTypeRef *)&v106[16 * v102];
      *(void *)&valuePtr[24] = &v106[16 * v108];
      CFTypeRef *v107 = cf[0];
      cf[0] = 0LL;
      v107[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v109 = (std::string::size_type)(v107 + 2);
      *(void *)&valuePtr[16] = v107 + 2;
      unsigned __int8 v110 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v111 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v113 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          uint64_t v112 = (const void *)*(v110 - 2);
          v110 -= 2;
          *(v107 - 2) = v112;
          v107 -= 2;
          void *v110 = 0LL;
          v107[1] = (CFTypeRef)v110[1];
          v110[1] = 0LL;
        }

        while (v110 != (void *)v111);
        int64x2_t v113 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v109 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
      v158.__r_.__value_.__l.__size_ = v109;
      *(int64x2_t *)&valuePtr[8] = v113;
      std::string::size_type v114 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v114;
      *(void *)int valuePtr = v113.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v109;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v101 + 8) = cf[1];
      cf[0] = 0LL;
      cf[1] = 0LL;
      v158.__r_.__value_.__l.__size_ = v101 + 16;
    }

    if (v100) {
      CFRelease(v100);
    }
  }

  if (*(_BYTE *)(a1 + 156))
  {
    sub_59370((CFStringRef *)cf, "client channel count");
    *(_DWORD *)int valuePtr = *(_DWORD *)(a1 + 152);
    cf[1] = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
    if (!cf[1])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    std::string::size_type v115 = v158.__r_.__value_.__l.__size_;
    if (v158.__r_.__value_.__l.__size_ >= v158.__r_.__value_.__l.__cap_)
    {
      uint64_t v116 = (uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v117 = v116 + 1;
      int64_t v118 = v158.__r_.__value_.__l.__cap_ - v158.__r_.__value_.__r.__words[0];
      else {
        unint64_t v119 = v117;
      }
      p_std::string::size_type cap = &v158.__r_.__value_.__l.__cap_;
      uint64_t v120 = (char *)sub_7BE90(v119);
      unsigned int v121 = (CFTypeRef *)&v120[16 * v116];
      *(void *)&valuePtr[24] = &v120[16 * v122];
      *unsigned int v121 = cf[0];
      cf[0] = 0LL;
      v121[1] = cf[1];
      cf[1] = 0LL;
      std::string::size_type v123 = (std::string::size_type)(v121 + 2);
      *(void *)&valuePtr[16] = v121 + 2;
      uint64_t v124 = (void *)v158.__r_.__value_.__l.__size_;
      std::string::size_type v125 = v158.__r_.__value_.__r.__words[0];
      if (v158.__r_.__value_.__l.__size_ == v158.__r_.__value_.__r.__words[0])
      {
        int64x2_t v127 = vdupq_n_s64(v158.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          uint64_t v126 = (const void *)*(v124 - 2);
          v124 -= 2;
          *(v121 - 2) = v126;
          v121 -= 2;
          void *v124 = 0LL;
          v121[1] = (CFTypeRef)v124[1];
          v124[1] = 0LL;
        }

        while (v124 != (void *)v125);
        int64x2_t v127 = *(int64x2_t *)&v158.__r_.__value_.__l.__data_;
        std::string::size_type v123 = *(void *)&valuePtr[16];
      }

      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
      v158.__r_.__value_.__l.__size_ = v123;
      *(int64x2_t *)&valuePtr[8] = v127;
      std::string::size_type v128 = v158.__r_.__value_.__l.__cap_;
      v158.__r_.__value_.__l.__cap_ = *(void *)&valuePtr[24];
      *(void *)&valuePtr[24] = v128;
      *(void *)int valuePtr = v127.i64[0];
      sub_7BEC4((uint64_t)valuePtr);
      v158.__r_.__value_.__l.__size_ = v123;
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }

    else
    {
      *(void *)v158.__r_.__value_.__l.__size_ = cf[0];
      *(CFTypeRef *)(v115 + 8) = cf[1];
      v158.__r_.__value_.__l.__size_ = v115 + 16;
    }
  }

  CFDictionaryRef v129 = sub_7C1F4((void ***)&v158);
  CFDictionaryRef v159 = v129;
  sub_7C4F8(*(void *)(a1 + 16), (unint64_t *)&v159);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747068647370LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  CFDictionaryRef outData = 0LL;
  UInt32 ioDataSize = 8;
  AudioObjectID v130 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  if (AudioObjectGetPropertyData(v130, &inAddress, 0, 0LL, &ioDataSize, &outData))
  {
    uint64_t v147 = (os_log_t *)sub_138E8(13);
    id v148 = *v147;
    if (*v147 && os_log_type_enabled(*v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 211;
      _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  valuePtr,  0x12u);
    }

    os_log_t v149 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v149, "Precondition failure.");
  }

  sub_3617C(&v160, outData);
  if (!v160)
  {
    std::string v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v150, "Could not construct");
  }

  uint64_t v131 = (const __CFString *)sub_7D1E8((const __CFDictionary *)v160, "dsp graph");
  if (!v131)
  {
    valuePtr[0] = 0;
    valuePtr[24] = 0;
    goto LABEL_181;
  }

  sub_7D2D4((CFTypeID)valuePtr, v131);
  if (!valuePtr[24])
  {
LABEL_181:
    sub_7D084(cf, "");
    char v132 = valuePtr[23];
    goto LABEL_182;
  }

  char v132 = valuePtr[23];
  if ((valuePtr[23] & 0x80000000) == 0)
  {
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)valuePtr;
    uint64_t v157 = *(void *)&valuePtr[16];
    goto LABEL_185;
  }

  sub_24054(cf, *(void **)valuePtr, *(unint64_t *)&valuePtr[8]);
LABEL_182:
  if (valuePtr[24] && v132 < 0) {
    operator delete(*(void **)valuePtr);
  }
LABEL_185:
  if (v160) {
    CFRelease(v160);
  }
  char v133 = *(const __CFString **)(a1 + 48);
  if (!v133)
  {
    std::string v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v151, "Could not construct");
  }

  sub_48100((uint64_t)valuePtr, v133);
  if (v157 >= 0) {
    CFTypeRef v134 = (CFTypeRef)HIBYTE(v157);
  }
  else {
    CFTypeRef v134 = cf[1];
  }
  CFTypeRef v135 = (CFTypeRef)valuePtr[23];
  int v136 = valuePtr[23];
  if (valuePtr[23] < 0) {
    CFTypeRef v135 = *(CFTypeRef *)&valuePtr[8];
  }
  if (v134 == v135)
  {
    if (valuePtr[23] >= 0) {
      CFStringRef v137 = valuePtr;
    }
    else {
      CFStringRef v137 = *(unsigned __int8 **)valuePtr;
    }
    if (v157 < 0)
    {
      BOOL v146 = memcmp(cf[0], v137, (size_t)cf[1]) == 0;
      goto LABEL_209;
    }

    if (HIBYTE(v157))
    {
      uint64_t v138 = HIBYTE(v157) - 1LL;
      unsigned __int8 v139 = cf;
      do
      {
        int v141 = *(unsigned __int8 *)v139;
        unsigned __int8 v139 = (CFTypeRef *)((char *)v139 + 1);
        int v140 = v141;
        int v143 = *v137++;
        int v142 = v143;
        BOOL v145 = v138-- != 0;
        BOOL v146 = v140 == v142;
      }

      while (v140 == v142 && v145);
LABEL_209:
      if ((v136 & 0x80000000) == 0) {
        goto LABEL_210;
      }
      goto LABEL_207;
    }

    BOOL v146 = 1;
    if ((valuePtr[23] & 0x80000000) == 0) {
      goto LABEL_210;
    }
LABEL_207:
    operator delete(*(void **)valuePtr);
    goto LABEL_210;
  }

  BOOL v146 = 0;
  if ((valuePtr[23] & 0x80000000) != 0) {
    goto LABEL_207;
  }
LABEL_210:
  if (!v146)
  {
    uint32_t v152 = (os_log_t *)sub_138E8(13);
    std::string v153 = *v152;
    if (*v152 && os_log_type_enabled(*v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "DSPHALInterface.cpp";
      *(_WORD *)&valuePtr[12] = 1024;
      *(_DWORD *)&valuePtr[14] = 98;
      _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  valuePtr,  0x12u);
    }

    os_log_t v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v154, "Postcondition failure.");
  }

  *(_BYTE *)(a1 + 149) = 1;
  if (SHIBYTE(v157) < 0) {
    operator delete((void *)cf[0]);
  }
  CFRelease(v129);
  *(void *)int valuePtr = &v158;
  sub_7CFCC((void ***)valuePtr);
}

void sub_7BC7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, CFTypeRef cf, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, char a26, uint64_t a27)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7BE90(unint64_t a1)
{
  if (a1 >> 60) {
    sub_7A8C4();
  }
  return operator new(16 * a1);
}

uint64_t sub_7BEC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_7D03C(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_7BF10(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_7BFA4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7BFE0(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

CFArrayRef sub_7C020(int **a1)
{
  unint64_t v2 = a1[1] - *a1;
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0LL;
  sub_7E058(&v19, v2);
  uint64_t v3 = *a1;
  CFNumberRef v4 = a1[1];
  if (*a1 != v4)
  {
    unsigned int v5 = (CFNumberRef *)v19.i64[1];
    do
    {
      int v6 = *v3;
      if ((unint64_t)v5 >= v20)
      {
        uint64_t v7 = ((uint64_t)v5 - v19.i64[0]) >> 3;
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8LL) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        std::string::size_type v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_7DC90(v9);
        }
        else {
          uint64_t v10 = 0LL;
        }
        int v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_7E1A8((CFNumberRef *)v22.i64[0], v6);
        uint64_t v11 = v22.i64[0];
        unsigned int v5 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8LL;
        unint64_t v12 = (void *)v19.i64[1];
        int64_t v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8LL;
            *unint64_t v12 = 0LL;
          }

          while (v12 != v13);
          int64x2_t v15 = v19;
          unsigned int v5 = (CFNumberRef *)v22.i64[1];
        }

        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v5;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        int v21 = (int64x2_t *)v15.i64[0];
        sub_7E2DC((uint64_t)&v21);
      }

      else
      {
        sub_7E1A8(v5++, *v3);
      }

      v19.i64[1] = (uint64_t)v5;
      ++v3;
    }

    while (v3 != v4);
  }

  CFArrayRef v17 = sub_7E114((uint64_t **)&v19);
  int v21 = &v19;
  sub_7E254((void ***)&v21);
  return v17;
}

void sub_7C1B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_7E254(&a13);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_7C1F4(void ***a1)
{
  uint64_t v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0LL;
  std::string::size_type v37 = 0LL;
  unint64_t v38 = 0LL;
  sub_5AC08((void **)&keys, v2);
  values = 0LL;
  std::string::size_type v34 = 0LL;
  unint64_t v35 = 0LL;
  sub_5AC08((void **)&values, v2);
  uint64_t v3 = *a1;
  CFNumberRef v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      unsigned int v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      int v6 = v37;
      if ((unint64_t)v37 >= v38)
      {
        unint64_t v8 = keys;
        uint64_t v9 = v37 - keys;
        unint64_t v10 = v9 + 1;
        uint64_t v11 = v38 - (void)keys;
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)sub_7DC90(v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = (void **)(v12 + 8 * v9);
        *uint64_t v14 = v5;
        uint64_t v7 = v14 + 1;
        if (v6 != v8)
        {
          do
          {
            int64x2_t v15 = *--v6;
            *--uint64_t v14 = v15;
          }

          while (v6 != v8);
          int v6 = keys;
        }

        keys = v14;
        unint64_t v38 = v12 + 8 * v13;
        if (v6) {
          operator delete(v6);
        }
      }

      else
      {
        const char *v37 = v5;
        uint64_t v7 = v6 + 1;
      }

      std::string::size_type v37 = v7;
      unint64_t v16 = v3[1];
      CFArrayRef v17 = v34;
      if ((unint64_t)v34 >= v35)
      {
        int64x2_t v19 = values;
        uint64_t v20 = v34 - values;
        unint64_t v21 = v20 + 1;
        uint64_t v22 = v35 - (void)values;
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)sub_7DC90(v23);
        }
        else {
          uint64_t v24 = 0LL;
        }
        uint64_t v25 = (void **)(v23 + 8 * v20);
        double *v25 = v16;
        std::string::size_type v18 = v25 + 1;
        if (v17 != v19)
        {
          do
          {
            unint64_t v26 = *--v17;
            *--uint64_t v25 = v26;
          }

          while (v17 != v19);
          CFArrayRef v17 = values;
        }

        values = v25;
        unint64_t v35 = v23 + 8 * v24;
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *std::string::size_type v34 = v16;
        std::string::size_type v18 = v17 + 1;
      }

      std::string::size_type v34 = v18;
      v3 += 2;
    }

    while (v3 != v4);
  }

  int64_t v27 = keys;
  unint64_t v28 = values;
  CFDictionaryRef v29 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  v2,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!v29)
  {
    std::string::size_type v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }

  if (v28) {
    operator delete(v28);
  }
  if (v27) {
    operator delete(v27);
  }
  return v29;
}

void sub_7C4A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_7C4F8(uint64_t a1, unint64_t *a2)
{
  AudioObjectID inObjectID = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747068647370LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  unint64_t inData = *a2;
  uint64_t v3 = sub_138E8(13);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    CFNumberRef v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        v68.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v68.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v69, (unsigned int *)&v68);
        unsigned int v5 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 166;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = v5;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v54 = inObjectID;
  AudioObjectPropertyAddress v55 = inAddress;
  int v56 = 0;
  uint64_t v57 = 0LL;
  int v6 = sub_7D434((uint64_t)&v54);
  if (!v7)
  {
    if (v6 && inData)
    {
      if (!CFEqual(v6, (CFTypeRef)inData)) {
        goto LABEL_10;
      }
    }

    else if (v6 || inData)
    {
      goto LABEL_10;
    }

    uint64_t v30 = sub_138E8(13);
    if ((*(_BYTE *)(v30 + 8) & 1) == 0) {
      return;
    }
    uint64_t v31 = *(os_log_s **)v30;
    if (!*(void *)v30 || !os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 191;
    __int16 v61 = 1024;
    *(_DWORD *)std::string::size_type v62 = inObjectID;
LABEL_85:
    _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a no tification on id %u.",  (uint8_t *)&buf,  0x18u);
    return;
  }

LABEL_107:
      sub_7D898((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v68);
      std::mutex::~mutex(&v69);
LABEL_108:
      unint64_t v43 = (os_log_t *)sub_138E8(13);
      __int16 v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPHALInterface.cpp";
        __int16 v59 = 1024;
        int v60 = 235;
        _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
    }

    v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v19 = sub_138E8(13);
    if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    {
      uint64_t v20 = *(os_log_s **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v59 = 1024;
          int v60 = 257;
          __int16 v61 = 2080;
          *(void *)std::string::size_type v62 = "with timeout";
          *(_WORD *)&v62[8] = 1024;
          *(_DWORD *)&v62[10] = inObjectID;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
        }
      }
    }

    sub_6DD4();
    *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
    LOBYTE(buf.mElement) = 0;
    LOBYTE(buf.mElement) = sub_1A30E4();
    __lk.__m_ = &v69;
    __lk.__owns_ = 1;
    std::mutex::lock(&v69);
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (!v53)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = v21.__d_.__rep_ + 1000000 * i;
      while (1)
      {
        if (v22 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_34;
        }
        v23.__d_.__rep_ = v22 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v23.__d_.__rep_ >= 1) {
          break;
        }
LABEL_52:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v22 || v53) {
          goto LABEL_34;
        }
      }

      std::chrono::steady_clock::now();
      v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v24.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0LL;
        goto LABEL_48;
      }

      if (v24.__d_.__rep_ < 1)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x8000000000000000LL;
      }

      else
      {
        if ((unint64_t)v24.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_48;
        }

          sub_32C38((uint64_t **)(a1 + 224), (uint64_t)v81, v82, v77);
          if (v76) {
            uint64_t v76 = sub_68080((uint64_t)v76);
          }
          else {
            uint64_t v76 = 0LL;
          }
          int v83 = (void *)v78[1];
          if (v83)
          {
            do
            {
              uint64_t v70 = v83;
              int v83 = (void *)*v83;
            }

            while (v83);
          }

          else
          {
            do
            {
              uint64_t v70 = (void *)v78[2];
              std::string::size_type v84 = *v70 == (void)v78;
              __int128 v78 = v70;
            }

            while (!v84);
          }

          if (!v75) {
            break;
          }
          std::string::size_type v77 = v75;
          __int128 v78 = v70;
        }

        while (v70 != v71);
      }

      sub_32C8C(v75);
      if (!v76) {
        goto LABEL_133;
      }
      int64_t v87 = v76;
    }

    else
    {
      int64_t v87 = 0LL;
    }

    sub_32C8C(v87);
  }

        uint64_t v40 = (std::__shared_weak_count *)operator new(0x60uLL);
        unint64_t v10 = v40;
        v40->__shared_owners_ = 0LL;
        unint64_t v41 = (unint64_t *)&v40->__shared_owners_;
        v40->__shared_weak_owners_ = 0LL;
        v40->__vftable = (std::__shared_weak_count_vtbl *)off_4771F0;
        v40[1].__vftable = (std::__shared_weak_count_vtbl *)&off_477228;
        unint64_t v12 = v40 + 1;
        v40[1].__shared_owners_ = 0LL;
        v40[1].__shared_weak_owners_ = 0LL;
        uint64_t v42 = *(void *)a2;
        v40[2].__vftable = a1;
        v40[2].__shared_owners_ = v42;
        LODWORD(v40[2].__shared_weak_owners_) = a2[2];
        BYTE4(v40[2].__shared_weak_owners_) = a3 & 1;
        BYTE5(v40[2].__shared_weak_owners_) = (a3 & 2) != 0;
        BYTE6(v40[2].__shared_weak_owners_) = (a3 & 4) != 0;
        HIBYTE(v40[2].__shared_weak_owners_) = (a3 & 8) != 0;
        LOBYTE(v40[3].__vftable) = 0;
        v40[3].__shared_owners_ = 0LL;
        v40[3].__shared_weak_owners_ = 0LL;
        do
          unint64_t v43 = __ldxr(v41);
        while (__stxr(v43 + 1, v41));
        __int16 v44 = (unint64_t *)&v40->__shared_weak_owners_;
        do
          int v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v40[1].__shared_owners_ = (uint64_t)v12;
        v40[1].__shared_weak_owners_ = (uint64_t)v40;
        do
          unint64_t v17 = __ldaxr(v41);
        while (__stlxr(v17 - 1, v41));
        goto LABEL_120;
      }

      if (v6 == 1735354734 || v6 == 1752657012) {
        goto LABEL_97;
      }
      uint64_t v30 = 1819569763;
LABEL_79:
      if (v6 != v30) {
        goto LABEL_125;
      }
      goto LABEL_97;
    }

    if ((v6 - 1685278561) <= 0x11 && ((1 << (v6 - 97)) & 0x20003) != 0
      || v6 == 1684103987
      || v6 == 1684633187)
    {
      goto LABEL_97;
    }

      if (++v17 == v109)
      {
        unint64_t v17 = v111;
        break;
      }
    }
  }

  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  unint64_t v71 = *(uint64_t ***)(v1 + 544);
  int64_t v72 = (uint64_t **)(v1 + 552);
  if (v71 != (uint64_t **)(v1 + 552))
  {
    unint64_t v73 = v112;
    do
    {
      if (v17 == v73)
      {
LABEL_115:
        uint64_t v75 = sub_138E8(17);
        uint64_t v76 = sub_138E8(28);
        std::string::size_type v77 = 0;
        __int128 v78 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        std::string::size_type v79 = *(void *)(v75 + 8);
        while (1)
        {
          BOOL v80 = *(int *)&buf[4 * v78];
          int64x2_t v81 = v77;
          if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
            break;
          }
          std::string::size_type v77 = 1;
          __int128 v78 = 1LL;
          if ((v81 & 1) != 0) {
            goto LABEL_121;
          }
        }

        if ((v79 & v80) == 0) {
          uint64_t v75 = v76;
        }
LABEL_121:
        std::string::size_type v82 = *(os_log_s **)v75;
        if (v82 && os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(&outData, *((unsigned int *)v71 + 8));
          int v83 = &outData;
          if (v119 < 0) {
            int v83 = (void ***)outData;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 732;
          std::string::size_type v123 = 2080;
          uint64_t v124 = v83;
          _os_log_impl(&dword_0, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile removed: %s", buf, 0x1Cu);
          if (v119 < 0) {
            operator delete(outData);
          }
        }

        sub_57ADC((uint64_t *)&__p, *((_DWORD *)v71 + 8), *((_DWORD *)v71 + 8));
      }

      else
      {
        __int16 v74 = v17;
        while (*((_DWORD *)v71 + 8) != *v74)
        {
          if (++v74 == v73) {
            goto LABEL_115;
          }
        }
      }

      std::string::size_type v84 = v71[1];
      if (v84)
      {
        do
        {
          uint64_t v85 = (uint64_t **)v84;
          std::string::size_type v84 = (uint64_t *)*v84;
        }

        while (v84);
      }

      else
      {
        do
        {
          uint64_t v85 = (uint64_t **)v71[2];
          uint64_t v42 = *v85 == (uint64_t *)v71;
          unint64_t v71 = v85;
        }

        while (!v42);
      }

      unint64_t v71 = v85;
    }

    while (v85 != v72);
    unint64_t v86 = __p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
    {
      do
      {
        int64_t v87 = *(unsigned int *)(v86 + 28);
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 848));
        sub_2E573C(&inAddress, v1, v87);
        unint64_t v88 = inAddress;
        if (inAddress)
        {
          buf[0] = 0;
          *(void *)&buf[8] = 0LL;
          unsigned int v89 = (_DWORD *)sub_546E0();
          sub_1008E4(v89);
          (*(void (**)(uint64_t))(*(void *)v88 + 24LL))(v88);
          sub_E9064(buf);
          std::mutex::lock((std::mutex *)(v1 + 568));
          char v90 = *v72;
          if (*v72)
          {
            uint64_t v91 = v1 + 552;
            std::string::size_type v92 = *v72;
            do
            {
              id v93 = *((_DWORD *)v92 + 8);
              std::string::size_type v94 = v93 >= v87;
              else {
                double v95 = (uint64_t **)(v92 + 1);
              }
              if (v94) {
                uint64_t v91 = (uint64_t)v92;
              }
              std::string::size_type v92 = *v95;
            }

            while (*v95);
            if ((uint64_t **)v91 != v72 && v87 >= *(_DWORD *)(v91 + 32))
            {
              int64x2_t v96 = *(void **)(v91 + 8);
              std::string::size_type v97 = (void *)v91;
              if (v96)
              {
                do
                {
                  unint64_t v98 = v96;
                  int64x2_t v96 = (void *)*v96;
                }

                while (v96);
              }

              else
              {
                do
                {
                  unint64_t v98 = (void *)v97[2];
                  uint64_t v42 = *v98 == (void)v97;
                  std::string::size_type v97 = v98;
                }

                while (!v42);
              }

              if (*(void *)(v1 + 544) == v91) {
                *(void *)(v1 + sub_13818(v0 + 544) = v98;
              }
              --*(void *)(v1 + 560);
              sub_911E8(v90, (uint64_t *)v91);
              sub_7A768(v91 + 40);
              operator delete((void *)v91);
            }
          }

          std::mutex::unlock((std::mutex *)(v1 + 568));
        }

        else
        {
          int64_t v104 = (os_log_t *)sub_138E8(17);
          unint64_t v105 = *v104;
          if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&outData, v87);
            unint64_t v106 = v119 >= 0 ? (void **)&outData : outData;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "Device_BluetoothUnified_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 799;
            std::string::size_type v123 = 2080;
            uint64_t v124 = v106;
            _os_log_impl(&dword_0, v105, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Profile %s not found", buf, 0x1Cu);
            if (v119 < 0) {
              operator delete(outData);
            }
          }
        }

        uint64_t v99 = inAddress_8;
        if (inAddress_8)
        {
          CFDictionaryRef v100 = (unint64_t *)&inAddress_8->__shared_owners_;
          do
            std::string::size_type v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }

        uint64_t v102 = *(std::string **)(v86 + 8);
        if (v102)
        {
          do
          {
            unint64_t v103 = v102;
            uint64_t v102 = (std::string *)v102->__r_.__value_.__r.__words[0];
          }

          while (v102);
        }

        else
        {
          do
          {
            unint64_t v103 = *(std::string **)(v86 + 16);
            uint64_t v42 = v103->__r_.__value_.__r.__words[0] == v86;
            unint64_t v86 = (std::string::size_type)v103;
          }

          while (!v42);
        }

        unint64_t v86 = (std::string::size_type)v103;
      }

      while (v103 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
      unint64_t v17 = v111;
    }
  }

  sub_32C8C((void *)__p.__r_.__value_.__l.__size_);
  if (v17)
  {
    uint64_t v112 = v17;
    operator delete(v17);
  }

  operator delete(a1);
}

  *(_DWORD *)(a1 + 556) = *(_DWORD *)v80;
  return a1;
}

LABEL_47:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 1000 * v24.__d_.__rep_;
LABEL_48:
        if (v25 > (v23.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v26.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_51:
          std::condition_variable::__do_timed_wait(&v68, &__lk, v26);
          std::chrono::steady_clock::now();
          goto LABEL_52;
        }
      }

      v26.__d_.__rep_ = v25 + v23.__d_.__rep_;
      goto LABEL_51;
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  unsigned int v5 = (_OWORD *)(a1 + 64);
  CFNumberRef v4 = sub_273BC(v3, a1 + 64);
  if (v4)
  {
    unint64_t v43 = (os_log_t *)sub_138E8(13);
    unint64_t v41 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 532;
      uint64_t v42 = "%25s:%-5d EXCEPTION (result) [error result is an error]: Stream::GetCurrentFormat() returned an error.";
      goto LABEL_46;
    }

    goto LABEL_47;
  }

  if (*(_DWORD *)(a1 + 72) == 1819304813 && *(_DWORD *)(a1 + 112) == 1819304813)
  {
    *(void *)std::string __p = 0LL;
    *(void *)&__p[8] = 0LL;
    int v6 = *(std::__shared_weak_count **)(a1 + 48);
    if (v6)
    {
      int v6 = std::__shared_weak_count::lock(v6);
      int v7 = v6;
      *(void *)&__p[8] = v6;
      if (v6)
      {
        int v6 = *(std::__shared_weak_count **)(a1 + 40);
        *(void *)std::string __p = v6;
      }
    }

    else
    {
      int v7 = 0LL;
    }

    uint64_t v8 = sub_6BA08((uint64_t)v6);
    uint64_t v9 = *(double *)(a1 + 104);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        uint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    unint64_t v12 = sub_6ADEC(v45);
    int v13 = (double)v8 / v9;
    uint64_t v14 = *(void *)(a1 + 56);
    if ((v12 & 1) != 0)
    {
      int64x2_t v15 = operator new(0x28uLL);
      *(void *)&__p[8] = (char *)v15 + 40;
      *(void *)&__p[16] = (char *)v15 + 40;
      int v16 = *(_OWORD *)(a1 + 80);
      void *v15 = *v5;
      v15[1] = v16;
      *((void *)v15 + 4) = *(void *)(a1 + 96);
      *(void *)std::string __p = v15;
      unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, double))(*(void *)v14 + 136LL))( v14,  a1 + 64,  __p,  a1 + 104,  v13);
    }

    else
    {
      std::chrono::system_clock::time_point v18 = operator new(0x28uLL);
      *(void *)&__p[8] = (char *)v18 + 40;
      *(void *)&__p[16] = (char *)v18 + 40;
      uint64_t v19 = *(_OWORD *)(a1 + 80);
      *std::chrono::system_clock::time_point v18 = *v5;
      v18[1] = v19;
      *((void *)v18 + 4) = *(void *)(a1 + 96);
      *(void *)std::string __p = v18;
      unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, double))(*(void *)v14 + 136LL))( v14,  a1 + 104,  __p,  a1 + 64,  v13);
    }

    uint64_t v20 = v17;
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }

    if (v20)
    {
      std::chrono::steady_clock::time_point v21 = (os_log_t *)sub_138E8(16);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 546;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v20;
          _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", __p, 0x18u);
        }
      }
    }

    std::chrono::steady_clock::time_point v23 = *(void *)(a1 + 56);
    if (*(_BYTE *)(v23 + 448) || *(void *)(v23 + 584) || *(void *)(v23 + 672))
    {
      sub_197D18(v23);
      sub_3057C(*(void *)(a1 + 56));
      std::chrono::system_clock::time_point v24 = *(void *)(a1 + 56);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = *(_DWORD ***)(v24 + 984);
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v26 = *(_DWORD ***)(v24 + 976);
      uint64_t v27 = (_DWORD **)(v24 + 944);
      if (v25 != v26) {
        uint64_t v27 = v26;
      }
      sub_2D9D4((uint64_t)__p, *v27, 0);
      sub_2DB30(a1 + 144, (unsigned int **)__p);
      sub_2DBF4((unsigned int **)__p);
      unint64_t v28 = *(void *)(a1 + 56);
      CFDictionaryRef v29 = *(void *)(v28 + 984);
      uint64_t v30 = *(void *)(v28 + 976);
      uint64_t v31 = (_DWORD **)(v28 + 944);
      if (v29 != v30) {
        uint64_t v31 = (_DWORD **)(v29 - 16);
      }
      sub_2D9D4((uint64_t)__p, *v31, 0);
      sub_2DB30(a1 + 160, (unsigned int **)__p);
      sub_2DBF4((unsigned int **)__p);
      uint64_t v32 = sub_2B8B8(*(void *)(a1 + 56));
      char v33 = *(_OWORD *)v32;
      std::string::size_type v34 = *(_OWORD *)(v32 + 16);
      *(void *)(a1 + 208) = *(void *)(v32 + 32);
      *(_OWORD *)(a1 + 176) = v33;
      *(_OWORD *)(a1 + 192) = v34;
      unint64_t v35 = sub_2B940(*(void *)(a1 + 56));
      BOOL v36 = *(_OWORD *)v35;
      std::string::size_type v37 = *(_OWORD *)(v35 + 16);
      *(void *)(a1 + 248) = *(void *)(v35 + 32);
      *(_OWORD *)(a1 + 232) = v37;
      *(_OWORD *)(a1 + 216) = v36;
    }
  }

                      sub_32C38((uint64_t **)(v14 + 88), (uint64_t)v40, v41, (uint64_t *)v33);
                      if (v34) {
                        std::string::size_type v34 = sub_68080((uint64_t)v34);
                      }
                      else {
                        std::string::size_type v34 = 0LL;
                      }
                      uint64_t v42 = (void *)v35[1];
                      if (v42)
                      {
                        do
                        {
                          unint64_t v28 = v42;
                          uint64_t v42 = (void *)*v42;
                        }

                        while (v42);
                      }

                      else
                      {
                        do
                        {
                          unint64_t v28 = (void *)v35[2];
                          uint64_t v57 = *v28 == (void)v35;
                          unint64_t v35 = v28;
                        }

                        while (!v57);
                      }

                      if (!v36) {
                        break;
                      }
                      char v33 = (uint64_t)v36;
                      unint64_t v35 = v28;
                    }

                    while (v28 != v29);
                  }

                  sub_32C8C(v36);
                  if (v34)
                  {
                    unint64_t v43 = (void *)v34[2];
                    for (uint64_t i = v75; v43; v43 = (void *)v43[2])
                      std::string::size_type v34 = v43;
                    sub_32C8C(v34);
                  }

                  else
                  {
                    uint64_t i = v75;
                  }

                  uint64_t v9 = v76;
                  goto LABEL_67;
                }

                sub_32C8C(0LL);
              }

              uint64_t i = v75;
LABEL_67:
              if (v28 != v29)
              {
                __int16 v44 = (uint64_t **)(v14 + 96);
                do
                {
                  int v45 = operator new(0x38uLL);
                  uint64_t v46 = *((_OWORD *)v28 + 2);
                  v45[6] = v28[6];
                  *((_OWORD *)v45 + 2) = v46;
                  std::string::size_type v47 = *v44;
                  unint64_t v48 = v44;
                  AudioObjectPropertyAddress v49 = v44;
                  if (*v44)
                  {
                    do
                    {
                      while (1)
                      {
                        unint64_t v48 = (uint64_t **)v47;
                        if (*((_DWORD *)v45 + 8) >= *((_DWORD *)v47 + 8)) {
                          break;
                        }
                        std::string::size_type v47 = (uint64_t *)*v47;
                        AudioObjectPropertyAddress v49 = v48;
                        if (!*v48) {
                          goto LABEL_75;
                        }
                      }

                      std::string::size_type v47 = (uint64_t *)v47[1];
                    }

                    while (v47);
                    AudioObjectPropertyAddress v49 = v48 + 1;
                  }

  std::string::size_type v34 = (os_log_s *)*(id *)sub_138E8(17);
  unint64_t v35 = v34;
  if (v34)
  {
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_HAL_Common.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1153;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d No controls created", buf, 0x12u);
    }
  }

  (*(void (**)(void *))(*v4 + 8LL))(v4);
  return 0LL;
}

LABEL_34:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    sub_7D790((uint64_t)&buf);
  }

  if (v15 || inData) {
    goto LABEL_28;
  }
LABEL_55:
  uint64_t v27 = sub_138E8(13);
  if ((*(_BYTE *)(v27 + 8) & 1) != 0)
  {
    unint64_t v28 = *(os_log_s **)v27;
    if (*(void *)v27)
    {
      if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress v49 = inAddress;
        sub_613AC((uint64_t)&__lk, &v49.mSelector);
        if (v51 >= 0) {
          m = &__lk;
        }
        else {
          m = __lk.__m_;
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 288;
        __int16 v61 = 2080;
        *(void *)std::string::size_type v62 = m;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = inObjectID;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v51 < 0) {
          operator delete(__lk.__m_);
        }
      }
    }
  }

  sub_7D898((uint64_t)inClientData);
  std::condition_variable::~condition_variable(&v68);
  std::mutex::~mutex(&v69);
}

      uint64_t v30 = sub_5954C();
      uint64_t v31 = operator new(0x38uLL);
      *((_DWORD *)v31 + 2) = 0;
      *(void *)uint64_t v31 = off_470470;
      *((_OWORD *)v31 + 1) = v32;
      sub_EE1E8((uint64_t *)v31 + 4, a4);
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v30 + 328LL))(v30, v31);
    }

    if (v18) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    }
  }

  return result;
}

      uint64_t v32 = v6[2];
      char v33 = (std::__shared_weak_count *)v6[3];
      if (v33)
      {
        std::string::size_type v34 = (unint64_t *)&v33->__shared_weak_owners_;
        do
          unint64_t v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }

      if (v26)
      {
        BOOL v36 = std::__shared_weak_count::lock(v26);
        if (!v36) {
          uint64_t v27 = 0LL;
        }
        if (!v33)
        {
LABEL_48:
          int v39 = v27 == 0;
          goto LABEL_49;
        }
      }

      else
      {
        uint64_t v27 = 0LL;
        BOOL v36 = 0LL;
        if (!v33) {
          goto LABEL_48;
        }
      }

      std::string::size_type v37 = std::__shared_weak_count::lock(v33);
      if (!v37) {
        goto LABEL_48;
      }
      unint64_t v38 = v37;
      int v39 = v27 == v32;
      uint64_t v40 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v38);
      }

      unint64_t v35 = (os_log_t *)sub_138E8(13);
      BOOL v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        __int16 v44 = 136315394;
        int v45 = "HP_FormatList.cpp";
        uint64_t v46 = 1024;
        std::string::size_type v47 = 1618;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): no stream supports the given sample rate",  (uint8_t *)&v44,  0x12u);
      }

      std::string::size_type v37 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string::size_type v37 = &off_4865A0;
      v37[2] = 560226676;
    }
  }

  uint64_t v9 = (os_log_t *)sub_138E8(13);
  unint64_t v10 = *v9;
  if (!*v9) {
    return 0LL;
  }
  uint64_t result = os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    uint64_t v14 = 136315394;
    int64x2_t v15 = "OutputVolumeControl_HAL_Common.cpp";
    int v16 = 1024;
    unint64_t v17 = 407;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: HasProperty() returned true, but I do not know about it.",  (uint8_t *)&v14,  0x12u);
    return 0LL;
  }

  return result;
}

  std::chrono::steady_clock::time_point v23 = (unint64_t *)&v4->__shared_owners_;
  do
    std::chrono::system_clock::time_point v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

  uint64_t v14 = byte_48E738;
  int64x2_t v15 = sub_138E8(2);
  if (v14)
  {
    int v16 = (os_log_s *)*(id *)v15;
    unint64_t v17 = v16;
    if (v16)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5049;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using Virtual Audio Plug-In: NO", buf, 0x12u);
      }
    }
  }

  else
  {
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      std::chrono::system_clock::time_point v18 = (os_log_s *)*(id *)v15;
      if (v18)
      {
        uint64_t v19 = v18;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5054;
          _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using Virtual Audio Plug-In: YES", buf, 0x12u);
        }
      }
    }

    __p.__r_.__value_.__r.__words[0] = 0x676C6F62696E6F74LL;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    uint64_t v20 = AudioObjectAddPropertyListener( 1u,  (const AudioObjectPropertyAddress *)&__p,  (AudioObjectPropertyListenerProc)sub_24CE98,  a1);
    if (v20)
    {
      std::chrono::steady_clock::time_point v21 = sub_138E8(13);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = sub_8C7D4(1, *(void **)v21, *(void *)(v21 + 8));
      std::chrono::steady_clock::time_point v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      std::chrono::system_clock::time_point v24 = v23;
      if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5063;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theError) [error theError is an error]: error registering a kAudioHardwarePropertyIsIni tingOrExiting property listener with the HAL system",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v20;
    }
  }

  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    uint64_t v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

  if (v46)
  {
    unint64_t v38 = (unint64_t *)&v46->__shared_owners_;
    do
      int v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

    if (v3 || v1 == v4) {
      goto LABEL_39;
    }
    goto LABEL_99;
  }

  if (v1 > 1634231919)
  {
    if (v1 <= 1647393079)
    {
      uint64_t v3 = v1 == 1634231920;
      CFNumberRef v4 = 1635085420;
    }

    else
    {
      uint64_t v3 = v1 == 1647393080 || v1 == 1647521842;
      CFNumberRef v4 = 1647522096;
    }

    goto LABEL_34;
  }

  if (v1 > 1214394676)
  {
    uint64_t v3 = v1 == 1214394677 || v1 == 1214539380;
    CFNumberRef v4 = 1633759844;
    goto LABEL_34;
  }

  if (!v1 || v1 == 1214329654) {
    goto LABEL_39;
  }
LABEL_99:
  if (v1 != 1919443299 || *result != 1)
  {
    unint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        unint64_t v17 = "RoutingTypes.cpp";
        std::chrono::system_clock::time_point v18 = 1024;
        uint64_t v19 = 161;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d INVARIANT FAILURE (std::logic_error).",  (uint8_t *)&v16,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

    std::chrono::system_clock::time_point v18 = 0;
    goto LABEL_43;
  }

        int v16 = 1;
        goto LABEL_35;
      }

      if (!memcmp(v72, v8, v73)) {
        goto LABEL_34;
      }
    }

void sub_7CF24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  if (v35 < 0) {
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_7CFCC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16LL;
        sub_7D03C(v4);
      }

      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_7D03C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

std::runtime_error *sub_7D078(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

void *sub_7D084(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_7D1D4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *sub_7D130(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_7D1D4();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_7D1D4()
{
}

const void *sub_7D1E8(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_7D290(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFTypeID sub_7D2D4(CFTypeID result, const __CFString *a2)
{
  CFTypeID v2 = result;
  if (a2 && (TypeID = CFStringGetTypeID(), uint64_t result = CFGetTypeID(a2), TypeID == result))
  {
    uint64_t result = (CFTypeID)sub_7D354((uint64_t)&v5, a2);
    *(_OWORD *)CFTypeID v2 = v5;
    *(void *)(v2 + 16) = v6;
    *(_BYTE *)(v2 + memset(buf, 0, 24) = 1;
  }

  else
  {
    *(_BYTE *)CFTypeID v2 = 0;
    *(_BYTE *)(v2 + memset(buf, 0, 24) = 0;
  }

  return result;
}

void *sub_7D354(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr) {
    return sub_7D084((void *)a1, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex maxBufLen = 0LL;
  v9.location = 0LL;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0LL, 0LL, &maxBufLen);
  sub_7D130((void *)a1, maxBufLen, 0);
  else {
    size_t v7 = *(UInt8 **)a1;
  }
  v10.location = 0LL;
  v10.length = Length;
  return (void *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void *sub_7D434(uint64_t a1)
{
  CFTypeID v2 = (uint64_t *)(a1 + 4);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  inAddress.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  size_t v4 = *(const void **)(a1 + 24);
  if (AudioObjectHasProperty(*(_DWORD *)a1, &inAddress))
  {
    ioDataSize[0] = sub_37408(*(_DWORD *)a1, &inAddress, v3, v4);
    if (ioDataSize[0])
    {
      uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)a1, &inAddress, v3, v4, ioDataSize, outData);
      uint64_t v6 = PropertyData;
      BOOL v7 = PropertyData == 0;
      if ((_DWORD)PropertyData) {
        size_t v8 = 0LL;
      }
      else {
        size_t v8 = outData[0];
      }
      if (!(_DWORD)PropertyData) {
        goto LABEL_21;
      }
    }

    else
    {
      size_t v8 = 0LL;
      BOOL v7 = 0;
      uint64_t v6 = 2003329396LL;
    }
  }

  else
  {
    size_t v8 = 0LL;
    BOOL v7 = 0;
    uint64_t v6 = 2003332927LL;
  }

  CFRange v9 = (os_log_t *)sub_138E8(13);
  CFRange v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
  {
    sub_2CA1C(outData, v6);
    int v11 = v22;
    unint64_t v12 = (void **)outData[0];
    uint64_t v17 = *v2;
    int v18 = *((_DWORD *)v2 + 2);
    sub_613AC((uint64_t)ioDataSize, (unsigned int *)&v17);
    int v13 = outData;
    if (v11 < 0) {
      int v13 = v12;
    }
    if (v20 >= 0) {
      uint64_t v14 = ioDataSize;
    }
    else {
      uint64_t v14 = *(UInt32 **)ioDataSize;
    }
    AudioObjectID v15 = *(_DWORD *)a1;
    inAddress.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&inAddress.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v24 = 1024;
    int v25 = 176;
    __int16 v26 = 1024;
    int v27 = v6;
    __int16 v28 = 2080;
    CFDictionaryRef v29 = v13;
    __int16 v30 = 2080;
    uint64_t v31 = v14;
    __int16 v32 = 1024;
    AudioObjectID v33 = v15;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&inAddress,  0x32u);
    if (v20 < 0) {
      operator delete(*(void **)ioDataSize);
    }
    if (v22 < 0) {
      operator delete(outData[0]);
    }
  }

void sub_7D650(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7D684( void *inClientData, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)inClientData = inObjectID;
  inClientData[1] = inAddress;
  inClientData[2] = a4;
  AudioObjectPropertyAddress inClientData[3] = a5;
  inClientData[4] = a6;
  OSStatus v7 = AudioObjectAddPropertyListener(inObjectID, inAddress, (AudioObjectPropertyListenerProc)sub_7D940, inClientData);
  if (v7)
  {
    OSStatus v8 = v7;
    CFRange v9 = (os_log_t *)sub_138E8(13);
    CFRange v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v11 = *(_DWORD *)inClientData;
        int v13 = 136315906;
        uint64_t v14 = "HALPropertySynchronizer.h";
        __int16 v15 = 1024;
        int v16 = 70;
        __int16 v17 = 1024;
        OSStatus v18 = v8;
        __int16 v19 = 1024;
        int v20 = v11;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d registering property listener on id %u.",  (uint8_t *)&v13,  0x1Eu);
      }
    }
  }

  return inClientData;
}

uint64_t sub_7D790(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    sub_5518(*(void *)a1);
    int v3 = *(_DWORD *)(v2 + 136);
    if (v3) {
      goto LABEL_7;
    }
    size_t v4 = (os_log_t *)sub_138E8(13);
    __int128 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      OSStatus v8 = "RoutingMutex.cpp";
      __int16 v9 = 1024;
      int v10 = 140;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: no one was blocking on the HAL run loop",  (uint8_t *)&v7,  0x12u);
    }

    int v3 = *(_DWORD *)(v2 + 136);
    if (v3) {
LABEL_7:
    }
      *(_DWORD *)(v2 + 136) = v3 - 1;
    sub_3780BC(v2);
  }

  return a1;
}

void sub_7D88C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_7D898(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(qword_48F828 + 48))())
  {
    uint64_t v2 = operator new(0x10uLL);
    sub_6DD4();
    sub_B20B8(v2, (uint64_t)&qword_48F828);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  AudioObjectRemovePropertyListener( *(_DWORD *)a1,  *(const AudioObjectPropertyAddress **)(a1 + 8),  (AudioObjectPropertyListenerProc)sub_7D940,  (void *)a1);
  if (v2)
  {
    if (v2[8]) {
      (*(void (**)(void))(**(void **)v2 + 16LL))(*(void *)v2);
    }
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_7D940(int a1, unsigned int a2, const void *a3, int *a4)
{
  if (a4)
  {
    uint64_t v8 = sub_138E8(13);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      __int16 v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v29 = 1024;
          int v30 = 110;
          __int16 v31 = 1024;
          LODWORD(v32) = a1;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d A property changed listener routine has been called for one or more properties on id %u",  buf,  0x18u);
        }
      }
    }

    std::chrono::steady_clock::time_point v21 = 0LL;
    char v22 = 0LL;
    uint64_t v23 = 0LL;
    sub_7DBCC(&v21, a3, (uint64_t)a3 + 12 * a2, a2);
    int v10 = v21;
    if (*a4 == a1)
    {
      int v11 = v22;
      if (v21 != v22)
      {
        unint64_t v12 = (_DWORD *)*((void *)a4 + 1);
        int v13 = v21;
        while (1)
        {
          int v14 = v13[2];
          *(void *)AudioObjectPropertyAddress buf = *(void *)v13;
          *(_DWORD *)&buf[8] = v14;
          v13 += 3;
          if (v13 == v11) {
            goto LABEL_22;
          }
        }

        if (v13 != v11)
        {
          uint64_t v15 = sub_138E8(13);
          if ((*(_BYTE *)(v15 + 8) & 1) != 0)
          {
            int v16 = *(os_log_s **)v15;
            if (*(void *)v15)
            {
              if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v24 = *(void *)v13;
                int v25 = v13[2];
                sub_613AC((uint64_t)__p, (unsigned int *)&v24);
                __int16 v17 = v27 >= 0 ? __p : (void **)__p[0];
                int v18 = *a4;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
                __int16 v29 = 1024;
                int v30 = 130;
                __int16 v31 = 2080;
                __int16 v32 = v17;
                __int16 v33 = 1024;
                int v34 = v18;
                _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d In property changed listener routine, about to unlock sync primitive for property %s on id %u.",  buf,  0x22u);
                if (v27 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          __int16 v19 = (std::mutex *)*((void *)a4 + 3);
          std::mutex::lock(v19);
          **((_BYTE **)a4 + 4) = 1;
          std::mutex::unlock(v19);
          std::condition_variable::notify_all(*((std::condition_variable **)a4 + 2));
        }
      }
    }

void sub_7DBAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7DBCC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_7DC44(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_7DC28(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_7DC44(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556LL) {
    sub_7A87C();
  }
  uint64_t v3 = 3 * a2;
  uint64_t result = (char *)operator new(12 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v3];
  return result;
}

void *sub_7DC90(unint64_t a1)
{
  if (a1 >> 61) {
    sub_7A8C4();
  }
  return operator new(8 * a1);
}

const void **sub_7DCC4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_7DCF4(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      sub_7A87C();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_7BE90(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_7DFF0(v2, v5);
    return (void *)sub_7BEC4((uint64_t)v5);
  }

  return result;
}

uint64_t sub_7DD74(void *a1, const UInt8 *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    else {
      unint64_t v14 = v13;
    }
    int v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_7BE90(v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    unint64_t v16 = v14;
    __int16 v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_7DE90(v17, a2, a3);
    int v18 = v17 + 2;
    sub_7DFF0(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_7BEC4((uint64_t)&v16);
  }

  else
  {
    uint64_t result = (uint64_t)sub_7DE90((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }

  a1[1] = v10;
  return result;
}

void sub_7DE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFStringRef *sub_7DE90(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    __int16 v9 = (const UInt8 *)a3;
  }
  else {
    __int16 v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0LL, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    unint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  return a1;
}

void sub_7DF8C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_7DFF0(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 2);
    v2 -= 2;
    *(void *)(v4 - 16) = v5;
    v4 -= 16LL;
    *uint64_t v2 = 0LL;
    *(void *)(v4 + 8) = v2[1];
    v2[1] = 0LL;
  }

  a2[1] = v4;
  CFIndex v6 = (void *)*result;
  char *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_7E058(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_7A87C();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    uint64_t v4 = (char *)sub_7DC90(a2);
    uint64_t v7 = *v2;
    CFIndex v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    }

    else
    {
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)CFIndex v6 = 0LL;
      }

      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }

    *uint64_t v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8LL];
    int64x2_t v13 = v10;
    CFStringRef v11 = v2[2];
    v2[2] = &v4[8 * v5];
    unint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_7E2DC((uint64_t)&v12);
  }

  return result;
}

CFArrayRef sub_7E114(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v4 = __p;
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }

    while (v2 != v3);
  }

  CFArrayRef v6 = sub_7E39C((const void **)__p, (uint64_t)v9);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }

  return v6;
}

void sub_7E18C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef *sub_7E1A8(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_7E228(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7E254(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFArrayRef v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_7E2C0(v6);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_7E2C0(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t sub_7E2DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_7E2C0(v4);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_7E328(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_7E420(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_7E380(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

CFArrayRef sub_7E39C(const void **values, uint64_t a2)
{
  CFArrayRef result = CFArrayCreate(0LL, values, (a2 - (uint64_t)values) >> 3, &kCFTypeArrayCallBacks);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return result;
}

void sub_7E400(_Unwind_Exception *a1)
{
}

std::runtime_error *sub_7E414(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

char *sub_7E420(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_7A87C();
  }
  CFArrayRef result = (char *)sub_7DC90(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_7E45C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 149))
  {
    CFStringRef v2 = CFStringCreateWithBytes(0LL, (const UInt8 *)"", 0LL, 0x8000100u, 0);
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_7F234(&cf, v2);
    sub_59370((CFStringRef *)buf, "dsp graph");
    CFTypeRef v3 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)&v15[4] = v3;
    sub_7BF10((uint64_t)&v15[12], (int *)(a1 + 144));
    v12[0] = buf;
    v12[1] = 2LL;
    CFDictionaryRef v4 = sub_5A950((uint64_t)v12);
    uint64_t v5 = 0LL;
    CFDictionaryRef v13 = v4;
    do
    {
      CFArrayRef v6 = *(const void **)&v15[v5 + 20];
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = *(const void **)&v15[v5 + 12];
      if (v7) {
        CFRelease(v7);
      }
      v5 -= 16LL;
    }

    while (v5 != -32);
    if (cf) {
      CFRelease(cf);
    }
    sub_7C4F8(*(void *)(a1 + 16), (unint64_t *)&v13);
    *(_BYTE *)(a1 + 149) = 0;
    uint64_t v8 = (os_log_t *)sub_138E8(24);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)uint64_t v15 = "DSPHALInterface.cpp";
        *(_WORD *)&v15[8] = 1024;
        *(_DWORD *)&v15[10] = 199;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unloading HAL DSP", buf, 0x12u);
      }
    }

    CFRelease(v4);
  }

void sub_7E634( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
}

char *sub_7E6D4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 62) {
      sub_7A87C();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    CFArrayRef result = sub_7A840(v7, v11);
    CFDictionaryRef v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    CFArrayRef result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    CFArrayRef result = (char *)memmove(v18, v19, v17);
  }

void sub_7E7D8(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = (void *)a2;
  CFDictionaryRef v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = sub_7ED44(a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1LL;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }

    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }

    else
    {
      uint64_t v21 = 1LL << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }

    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }

    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        sub_7A8C4();
      }
      uint64_t v12 = operator new(8LL * *(void *)&prime);
      CFDictionaryRef v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      unint64_t v41 = v4;
      uint64_t v14 = 0LL;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0LL;
      while (*(void *)&prime != v14);
      unint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        uint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }

        else
        {
          v16 &= *(void *)&prime - 1LL;
        }

        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }

            else
            {
              v23 &= *(void *)&prime - 1LL;
            }

            if (v23 == v16)
            {
              unint64_t v15 = (uint64_t *)v22;
            }

            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              uint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                int v25 = (void *)v22;
                while (1)
                {
                  __int16 v26 = v24;
                  uint64_t v24 = (void *)*v26;
                  int v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }

                uint64_t v24 = v26;
                __int16 v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }

              else
              {
                __int16 v26 = (void *)v22;
              }

              uint64_t *v15 = (uint64_t)v24;
              void *v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }

            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              unint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }

            uint64_t v22 = *v15;
          }

          while (*v15);
        }

        unint64_t v5 = (unint64_t)prime;
        CFStringRef v2 = v40;
        CFDictionaryRef v4 = v41;
      }

      else
      {
        unint64_t v5 = (unint64_t)prime;
        CFDictionaryRef v4 = v41;
      }
    }

    else
    {
      char v27 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0LL;
      *(void *)(a1 + 8) = 0LL;
    }
  }

LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }

  *CFStringRef v2 = *(void *)v31;
  *(void *)__int16 v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8LL);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }

    else
    {
      v39 &= v5 - 1;
    }

    if (v39 != v38) {
      goto LABEL_94;
    }
  }

      __int128 v78 = (std::__shared_weak_count *)v60[5];
      if (v78)
      {
        std::string::size_type v79 = std::__shared_weak_count::lock(v78);
        *(void *)&buf[8] = v79;
        if (v79)
        {
          BOOL v80 = v79;
          int64x2_t v81 = v60[4];
          *(void *)AudioObjectPropertyAddress buf = v81;
          if (!v81) {
            goto LABEL_99;
          }
          std::string::size_type v82 = *(_DWORD *)(v81 + 144);
          if ((unint64_t)v69 >= v61)
          {
            int v83 = v69 - v63;
            std::string::size_type v84 = v83 + 1;
            else {
              uint64_t v85 = v84;
            }
            if (v85) {
              uint64_t v85 = (unint64_t)sub_7A890(v85);
            }
            else {
              unint64_t v86 = 0LL;
            }
            int64_t v87 = (unsigned int *)(v85 + 4 * v83);
            char *v87 = v82;
            std::string::size_type v62 = v87 + 1;
            while (v69 != v63)
            {
              unint64_t v88 = *--v69;
              *--int64_t v87 = v88;
            }

            __int16 v61 = v85 + 4 * v86;
            if (v63) {
              operator delete(v63);
            }
            BOOL v63 = v87;
          }

          else
          {
            *v69++ = v82;
LABEL_99:
            std::string::size_type v62 = v69;
          }

          unsigned int v89 = (unint64_t *)&v80->__shared_owners_;
          do
            char v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }

          goto LABEL_120;
        }
      }

      std::string::size_type v62 = v69;
LABEL_120:
      int v60 = (void *)v60[1];
      if (v60 == (void *)v59) {
        goto LABEL_123;
      }
    }
  }

  std::string::size_type v62 = 0LL;
  BOOL v63 = 0LL;
LABEL_123:
  uint64_t v91 = (os_log_t *)sub_138E8(16);
  std::string::size_type v92 = *v91;
  unint64_t v5 = v359;
  if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_DEFAULT))
  {
    sub_8F640(&__dst, v63, v62);
    id v93 = (__dst.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__dst : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 55;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v93;
    _os_log_impl(&dword_0, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Connection relevant ports ? : %s", buf, 0x1Cu);
  }

  if (v63 == v62)
  {
    unint64_t v98 = 0;
    if (!v62) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }

  std::string::size_type v94 = v63 + 1;
  do
  {
    double v95 = sub_54F20((uint64_t)&dword_48FC50, *(v94 - 1));
    if (v95) {
      int64x2_t v96 = v94 == v62;
    }
    else {
      int64x2_t v96 = 1;
    }
    ++v94;
  }

  while (!v96);
  if (!v95)
  {
    unint64_t v98 = 0;
    std::string::size_type v62 = v63;
    if (!v63) {
      goto LABEL_146;
    }
LABEL_145:
    operator delete(v62);
    goto LABEL_146;
  }

  std::string::size_type v97 = v63 + 1;
  do
  {
    unint64_t v98 = sub_54F20((uint64_t)&dword_48FC70, *(v97 - 1));
    if ((v98 & 1) != 0) {
      break;
    }
    int64x2_t v96 = v97++ == v62;
  }

  while (!v96);
  std::string::size_type v62 = v63;
  unint64_t v5 = v359;
  if (v63) {
    goto LABEL_145;
  }
LABEL_146:
  if ((v98 & 1) == 0)
  {
    unint64_t v103 = (os_log_t *)sub_138E8(26);
    int64_t v104 = *v103;
    if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_DEBUG))
    {
      sub_1250C8(&__dst, *((void *)v356 + 3), v59);
      unint64_t v105 = (__dst.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__dst : (std::string *)__dst.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 74;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v105;
      _os_log_impl( &dword_0,  v104,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No relevant connections for haptic debug: %s",  buf,  0x1Cu);
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    CFDictionaryRef v100 = (uint64_t *)a1;
    goto LABEL_180;
  }

  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v99 = *(std::__shared_weak_count **)(v358 + 24);
  CFDictionaryRef v100 = (uint64_t *)a1;
  if (!v99)
  {
    std::string::size_type size = 0LL;
    goto LABEL_162;
  }

  std::string::size_type size = std::__shared_weak_count::lock(v99);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (!size || (uint64_t v102 = *(void *)(v358 + 16), (__dst.__r_.__value_.__r.__words[0] = v102) == 0))
  {
LABEL_162:
    unint64_t v106 = (os_log_t *)sub_138E8(26);
    unint64_t v107 = *v106;
    if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 82;
      _os_log_impl(&dword_0, v107, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Haptic Debug IO Delegate", buf, 0x12u);
    }

    uint64_t v108 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v108 + 8) = 0u;
    *(void *)uint64_t v108 = off_481A58;
    *((void *)v108 + 4) = 0LL;
    *((void *)v108 + 3) = off_481A90;
    *((_DWORD *)v108 + 10) = 0;
    *((_OWORD *)v108 + 3) = 0u;
    *(void *)&std::string::size_type v109 = v108 + 24;
    *((void *)&v109 + 1) = v108;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v109;
    if (size)
    {
      unsigned __int8 v110 = (unint64_t *)&size->__shared_owners_;
      do
        std::string::size_type v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }

    std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    uint64_t v102 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_)
    {
      uint64_t v112 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 16);
      do
        int64x2_t v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }

    std::string::size_type v114 = *(std::__shared_weak_count **)(v358 + 24);
    *(void *)(v358 + 16) = v102;
    *(void *)(v358 + memset(buf, 0, 24) = size;
    if (v114) {
      std::__shared_weak_count::__release_weak(v114);
    }
    if (!v102) {
      goto LABEL_179;
    }
  }

  if (!*(void *)(v102 + 32))
  {
    sub_32E438((uint64_t **)&v361, v358);
    int v142 = v361;
    if ((void)v361)
    {
      int v143 = *(_DWORD *)v361;
      id v144 = operator new(0x58uLL);
      *(void *)&v361 = 0LL;
      *id v144 = &off_475100;
      sub_289538( &v366,  v143,  (OSStatus (__cdecl *)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))sub_1D92F4,  v144);
      v144[1] = v366;
      *((_DWORD *)v144 + 4) = 0;
      v144[3] = v142;
      *(void *)&v366 = 0LL;
      *id v144 = &off_475100;
      *((_BYTE *)v144 + 32) = 0;
      sub_90418(v144 + 5, v358 + 32);
      *((_BYTE *)v144 + 64) = 0;
      *((_DWORD *)v144 + 17) = 0;
      v144[9] = 0LL;
      CFDictionaryRef v100 = (uint64_t *)a1;
      BOOL v145 = operator new(0x20uLL);
      *BOOL v145 = 0u;
      v145[1] = 0u;
      *(void *)BOOL v145 = off_475160;
      v144[10] = v145;
      BOOL v146 = (os_log_t *)sub_138E8(16);
      uint64_t v147 = *v146;
      if (*v146 && os_log_type_enabled(*v146, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 50;
        _os_log_impl(&dword_0, v147, OS_LOG_TYPE_INFO, "%25s:%-5d Creating haptic debug delegate", buf, 0x12u);
      }

      if (!v144[7])
      {
        v348 = (os_log_t *)sub_138E8(13);
        v349 = *v348;
        if (*v348 && os_log_type_enabled(*v348, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 52;
          _os_log_impl( &dword_0,  v349,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      if (*(void *)(v102 + 32))
      {
        v351 = (os_log_t *)sub_138E8(13);
        v352 = *v351;
        if (*v351 && os_log_type_enabled(*v351, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 75;
          _os_log_impl( &dword_0,  v352,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        v353 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v353, "Precondition failure.");
      }

      id v148 = (os_log_t *)sub_138E8(16);
      unint64_t v5 = v359;
      os_log_t v149 = *v148;
      if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 76;
        _os_log_impl(&dword_0, v149, OS_LOG_TYPE_INFO, "%25s:%-5d Setting HapticDebugDelegate on Adapter", buf, 0x12u);
      }

      std::string v150 = *(void **)(v102 + 32);
      *(void *)(v102 + 32) = v144;
      if (v150)
      {
        std::string v151 = sub_1D9034(v150);
        operator delete(v151);
      }
    }
  }

  if (*(_DWORD *)v358 == 1)
  {
    sub_1DA4F4(v102);
    sub_1DAAD0(v102, 1u);
  }

      if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_97:
        std::condition_variable::__do_timed_wait(&v114, &__lk, v47);
        std::chrono::steady_clock::now();
        goto LABEL_98;
      }

      memset(&v87, 0, sizeof(v87));
      std::mutex v69 = 0LL;
      uint64_t v70 = 0;
      sub_2DCD0((uint64_t)__p, (uint64_t *)&v87, (uint64_t *)&v71, (unsigned int **)&v69, (unsigned int **)&v85);
      std::string::size_type v47 = (char *)operator new(0x60uLL);
      unint64_t v48 = *(void *)&__p[40];
      *((void *)v47 + 4) = *(void *)&__p[16];
      *(void *)std::string::size_type v47 = 0LL;
      *((void *)v47 + 1) = 0LL;
      *((_OWORD *)v47 + 1) = *(_OWORD *)__p;
      memset(__p, 0, 24);
      *(_OWORD *)(v47 + 40) = *(_OWORD *)&__p[24];
      *((void *)v47 + 7) = v48;
      memset(&__p[24], 0, 24);
      *((void *)v47 + 8) = 0LL;
      *((_DWORD *)v47 + 18) = 0;
      sub_2DB30((uint64_t)(v47 + 64), (unsigned int **)&v91);
      *((void *)v47 + 10) = 0LL;
      *((_DWORD *)v47 + 22) = 0;
      sub_2DB30((uint64_t)(v47 + 80), (unsigned int **)v92);
      unint64_t v5 = (v5 + 1);
      AudioObjectPropertyAddress v49 = *(void *)(a1 + 872);
      *(void *)std::string::size_type v47 = v49;
      *((void *)v47 + 1) = a1 + 872;
      *(void *)(v49 + 8) = v47;
      *(void *)(a1 + 872) = v47;
      ++*(void *)(a1 + 888);
      sub_2DBF4((unsigned int **)v92);
      sub_2DBF4((unsigned int **)&v91);
      unsigned int v89 = (void **)&__p[24];
      sub_867A4(&v89);
      unsigned int v89 = (void **)__p;
      sub_867A4(&v89);
      sub_2DBF4((unsigned int **)&v69);
      std::mutex v69 = &v87;
      sub_867A4((void ***)&v69);
      sub_2DBF4((unsigned int **)&v85);
      *(void *)std::string __p = &v71;
      sub_867A4((void ***)__p);
      sub_85B80((uint64_t *)&v74);
      sub_2DBF4(v108);
      sub_2DBF4(v107);
      sub_2DBF4(&v75);
      sub_2DBF4(&v77);
      uint64_t v14 = *(void *)(v14 + 8);
      if (v14 == a1 + 848) {
        return;
      }
    }

    int v50 = sub_138E8(16);
    char v51 = sub_138E8(24);
    std::string::size_type v52 = 0;
    char v53 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    AudioObjectID v54 = *(void *)(v50 + 8);
    while (1)
    {
      AudioObjectPropertyAddress v55 = *(int *)&buf[4 * v53];
      int v56 = v52;
      if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
        break;
      }
      std::string::size_type v52 = 1;
      char v53 = 1LL;
      if ((v56 & 1) != 0) {
        goto LABEL_103;
      }
    }

    if ((v54 & v55) == 0) {
      int v50 = v51;
    }
LABEL_103:
    uint64_t v57 = *(os_log_s **)v50;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      sub_2BE2C(__p, v16);
      unint64_t v58 = __p;
      if (__p[23] < 0) {
        unint64_t v58 = *(_BYTE **)__p;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 446;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v58;
      _os_log_impl(&dword_0, v57, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled:\n%s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

LABEL_95:
  ++*(void *)(a1 + 24);
}

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v73);
        return v21;
      }

      v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      unint64_t v35 = sub_138E8(13);
      if ((*(_BYTE *)(v35 + 8) & 1) != 0)
      {
        unint64_t v36 = *(os_log_s **)v35;
        if (*(void *)v35)
        {
          if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            BOOL v63 = 1024;
            __int16 v64 = 257;
            int v65 = 2080;
            *(void *)__int16 v66 = "with timeout";
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)&v66[10] = a1;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v73;
      __lk.__owns_ = 1;
      std::mutex::lock(&v73);
      v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v56)
      {
        unint64_t v38 = v37.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v38 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v39.__d_.__rep_ = v38 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v39.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v38 || v56) {
            goto LABEL_58;
          }
        }

        std::chrono::steady_clock::now();
        v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v40.__d_.__rep_)
        {
          unint64_t v41 = 0LL;
          goto LABEL_72;
        }

        if (v40.__d_.__rep_ < 1)
        {
          unint64_t v41 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v40.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            unint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v69);
        return v17;
      }

      v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      __int16 v31 = sub_138E8(13);
      if ((*(_BYTE *)(v31 + 8) & 1) != 0)
      {
        __int16 v32 = *(os_log_s **)v31;
        if (*(void *)v31)
        {
          if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v59 = 1024;
            int v60 = 257;
            __int16 v61 = 2080;
            *(void *)std::string::size_type v62 = "with timeout";
            *(_WORD *)&v62[8] = 1024;
            *(_DWORD *)&v62[10] = a1;
            _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v69;
      __lk.__owns_ = 1;
      std::mutex::lock(&v69);
      v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v52)
      {
        int v34 = v33.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v34 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v35.__d_.__rep_ = v34 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v35.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v34 || v52) {
            goto LABEL_58;
          }
        }

        std::chrono::steady_clock::now();
        v36.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v36.__d_.__rep_)
        {
          BOOL v37 = 0LL;
          goto LABEL_72;
        }

        if (v36.__d_.__rep_ < 1)
        {
          BOOL v37 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v36.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            BOOL v37 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }

    char v53 = (os_log_t *)sub_138E8(13);
    AudioObjectID v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      int64_t v118 = 1024;
      unint64_t v119 = 616;
      _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about it.",  buf,  0x12u);
    }

    return;
  }

  if (v13 <= 1684633186)
  {
    if (v13 <= 1668705647)
    {
      if (v13 != 1064725619)
      {
        if (v13 == 1668443504) {
          goto LABEL_53;
        }
        goto LABEL_95;
      }

      *(_DWORD *)AudioObjectPropertyAddress buf = 1064725619;
      __int16 v44 = *(void *)(a1 + 96);
      *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
      int v45 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v44 + 16LL))(v44, buf);
      uint64_t v46 = *(void *)(a1 + 96);
      if (v45)
      {
LABEL_74:
        (*(void (**)(uint64_t, _BYTE *, uint64_t, double *, int *, float *))(*(void *)v46 + 40LL))( v46,  buf,  a3,  a4,  a5,  a6);
        return;
      }

  if (!a1[31]) {
    goto LABEL_102;
  }
  sub_B8CBC((uint64_t *)buf, a1 + 30, "", 169);
  AudioObjectPropertyAddress v55 = v80 ^ (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
  int v56 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_100;
  }
  uint64_t v57 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_100:
    if (!v55) {
      goto LABEL_102;
    }
    goto LABEL_101;
  }

  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if (v55) {
LABEL_101:
  }
    sub_85C34(&v88, a1[30], a1[31]);
LABEL_102:
  if (!a1[29])
  {
    uint64_t v85 = (uint64_t)&v85;
    unint64_t v86 = &v85;
    int64_t v87 = 0LL;
    goto LABEL_131;
  }

  sub_B8CBC((uint64_t *)buf, a1 + 28, "", 174);
  __int16 v59 = v82 ^ (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
  int v60 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v61 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      std::string::size_type v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if (!v59) {
        goto LABEL_109;
      }
      goto LABEL_108;
    }
  }

  if (v59) {
LABEL_108:
  }
    sub_85C34(&v88, a1[28], a1[29]);
LABEL_109:
  BOOL v63 = a1[29];
  uint64_t v85 = (uint64_t)&v85;
  unint64_t v86 = &v85;
  int64_t v87 = 0LL;
  if (v63)
  {
    __int16 v64 = v82;
    if (!a1[31]) {
      __int16 v64 = 0;
    }
    if (v64 == 1)
    {
      sub_B8CBC((uint64_t *)buf, a1 + 28, "", 184);
      if ((*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf))
      {
        sub_B8CBC((uint64_t *)&__p, a1 + 30, "", 185);
        int v65 = v80 ^ (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 152LL))(__p.__r_.__value_.__r.__words[0]);
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          AudioObjectID v67 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            std::condition_variable v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }

      else
      {
        int v65 = 0;
      }

      std::mutex v69 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v70 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          if (!v65) {
            goto LABEL_131;
          }
          goto LABEL_130;
        }
      }

      if (v65) {
LABEL_130:
      }
        sub_85C34(&v85, a1[28], a1[29]);
    }
  }

  __int16 v66 = std::__shared_weak_count::lock(v26);
  if (!v66) {
    goto LABEL_100;
  }
  AudioObjectID v67 = v66;
  std::condition_variable v68 = v55 == v27;
  std::mutex v69 = (unint64_t *)&v66->__shared_owners_;
  do
    uint64_t v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v67);
  }

        sub_7D898((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v73);
        return v21;
      }

      v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      unint64_t v35 = sub_138E8(13);
      if ((*(_BYTE *)(v35 + 8) & 1) != 0)
      {
        unint64_t v36 = *(os_log_s **)v35;
        if (*(void *)v35)
        {
          if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            BOOL v63 = 1024;
            __int16 v64 = 257;
            int v65 = 2080;
            *(void *)__int16 v66 = "with timeout";
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)&v66[10] = a1;
            _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v73;
      __lk.__owns_ = 1;
      std::mutex::lock(&v73);
      v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v56)
      {
        unint64_t v38 = v37.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v38 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v39.__d_.__rep_ = v38 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v39.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v38 || v56) {
            goto LABEL_58;
          }
        }

        std::chrono::steady_clock::now();
        v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v40.__d_.__rep_)
        {
          unint64_t v41 = 0LL;
          goto LABEL_72;
        }

        if (v40.__d_.__rep_ < 1)
        {
          unint64_t v41 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v40.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            unint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }

void sub_7EC6C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_7A7FC((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }

char *sub_7ECB0(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_24054(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }

  return __dst;
}

void sub_7ED28(_Unwind_Exception *exception_object)
{
}

unint64_t sub_7ED44(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    __int128 v4 = (uint64_t *)a1;
  }
  else {
    __int128 v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69LL;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69LL
          * (v45 ^ ((0x9DDFEA08EB382D69LL * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69LL * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297LL * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      __int16 v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273LL * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273LL * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64LL;
      }

      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69LL
          * (v59 ^ ((0x9DDFEA08EB382D69LL * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v60 ^ ((0x9DDFEA08EB382D69LL * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69LL * (v60 ^ ((0x9DDFEA08EB382D69LL * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69LL
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297LL * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69LL * (v80 ^ (v81 >> 47) ^ v81);
    }

    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9LL * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9LL
          * ((0xC3A5C85C97CB3127LL * (v32 + v30) - 0x651E95C4D06FBFB1LL * v33) ^ ((0xC3A5C85C97CB3127LL * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1LL * v33) >> 47));
    }

    return (v35 ^ (v35 >> 47)) * v34;
  }

  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273LL * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557LL, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69LL * (v40 ^ (v39 - 0x3C5A37A36834CED9LL * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v42) ^ ((0x9DDFEA08EB382D69LL * v42) >> 47));
    }

    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69LL
            * ((0x9DDFEA08EB382D69LL
              * (v7 ^ ((0x9DDFEA08EB382D69LL * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69LL * (v7 ^ ((0x9DDFEA08EB382D69LL * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v7 ^ v5)))) >> 47))) ^ v6;
    }

    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69LL * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v42) ^ ((0x9DDFEA08EB382D69LL * v42) >> 47));
    }

    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557LL * (v2 + 4LL * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }

  return result;
}

BOOL sub_7F194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0LL) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0LL;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1LL;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }

  while (v13 && v12);
  return v14;
}

void *sub_7F234(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  return a1;
}

void sub_7F2B0(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void *sub_7F2E0(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      sub_7A87C();
    }
    uint64_t v6 = result;
    unint64_t result = sub_7BE90(a4);
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      char *result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        int v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      result += 2;
    }

    v6[1] = result;
  }

  return result;
}

void sub_7F384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_7F398(uint64_t a1, char a2, int a3, UInt32 a4, const void *a5)
{
  v10.AudioObjectPropertyElement mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v7 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  v10.AudioObjectPropertySelector mSelector = 1684500594;
  v10.AudioObjectPropertyScope mScope = v7;
  AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  return AudioObjectSetPropertyData(v8, &v10, 4u, &inQualifierData, a4, a5);
}

uint64_t sub_7F40C(uint64_t a1, char a2, int a3, UInt32 *a4, void *a5)
{
  v10.AudioObjectPropertyElement mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v7 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  v10.AudioObjectPropertySelector mSelector = 1684500594;
  v10.AudioObjectPropertyScope mScope = v7;
  AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  return AudioObjectGetPropertyData(v8, &v10, 4u, &inQualifierData, a4, a5);
}

BOOL sub_7F480(uint64_t a1, char a2, int a3, UInt32 *a4, _BYTE *a5)
{
  v9.AudioObjectPropertyElement mElement = 0;
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v6 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v6 = 1869968496;
  }
  v9.AudioObjectPropertySelector mSelector = 1684500594;
  v9.AudioObjectPropertyScope mScope = v6;
  *a5 = 1;
  AudioObjectID v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  return AudioObjectGetPropertyDataSize(v7, &v9, 4u, &inQualifierData, a4) == 0;
}

uint64_t sub_7F4FC(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  if (*(_BYTE *)(a1 + 148)) {
    unsigned int v4 = 1768845428;
  }
  else {
    unsigned int v4 = 1869968496;
  }
  LODWORD(__p[0]) = v3;
  buf.AudioObjectPropertySelector mSelector = 1684498544;
  *(void *)&buf.AudioObjectPropertyScope mScope = v4;
  unint64_t v5 = sub_36EF4((AudioObjectID *)__p, &buf, 4u, &v17);
  *((void *)&v8 + 1) = v6;
  *(void *)&__int128 v8 = v5;
  uint64_t v7 = v8 >> 32;
  BOOL v9 = (v7 & 0xFF00000000LL) == 0 || (_DWORD)v7 == 0;
  uint64_t v10 = !v9;
  if (v9)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(24);
    BOOL v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v17);
        if (v16 >= 0) {
          BOOL v13 = __p;
        }
        else {
          BOOL v13 = (void **)__p[0];
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPHALInterface.cpp";
        __int16 v19 = 1024;
        int v20 = 148;
        __int16 v21 = 2080;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d DSPHALInterface::HasDSPProperty(%s) = %u",  (uint8_t *)&buf,  0x22u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v10;
}

uint64_t sub_7F678(uint64_t a1, unsigned int a2)
{
  unsigned int v17 = a2;
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  if (*(_BYTE *)(a1 + 148)) {
    unsigned int v4 = 1768845428;
  }
  else {
    unsigned int v4 = 1869968496;
  }
  LODWORD(__p[0]) = v3;
  buf.AudioObjectPropertySelector mSelector = 1684498541;
  *(void *)&buf.AudioObjectPropertyScope mScope = v4;
  unint64_t v5 = sub_36EF4((AudioObjectID *)__p, &buf, 4u, &v17);
  *((void *)&v8 + 1) = v6;
  *(void *)&__int128 v8 = v5;
  uint64_t v7 = v8 >> 32;
  BOOL v9 = (v7 & 0xFF00000000LL) == 0 || (_DWORD)v7 == 0;
  uint64_t v10 = !v9;
  if (v9)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(24);
    BOOL v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v17);
        if (v16 >= 0) {
          BOOL v13 = __p;
        }
        else {
          BOOL v13 = (void **)__p[0];
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPHALInterface.cpp";
        __int16 v19 = 1024;
        int v20 = 166;
        __int16 v21 = 2080;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d DSPHALInterface::HasDSPParameter(%s) = %u",  (uint8_t *)&buf,  0x22u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v10;
}

uint64_t sub_7F7F4(uint64_t a1, char a2, int a3, void *a4)
{
  int inQualifierData = a3;
  if (a2) {
    AudioObjectPropertyScope v5 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v5 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1684500589;
  inAddress.AudioObjectPropertyScope mScope = v5;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 0;
  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  return AudioObjectGetPropertyData(v6, &inAddress, 4u, &inQualifierData, &ioDataSize, a4);
}

uint64_t sub_7F86C(uint64_t a1, char a2, int a3, float a4)
{
  int inQualifierData = a3;
  float inData = a4;
  if (a2) {
    AudioObjectPropertyScope v4 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v4 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1684500589;
  inAddress.AudioObjectPropertyScope mScope = v4;
  inAddress.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  return AudioObjectSetPropertyData(v5, &inAddress, 4u, &inQualifierData, 4u, &inData);
}

void sub_7F8DC(unint64_t a1)
{
  int v1 = (void *)sub_81770(a1);
  operator delete(v1);
}

uint64_t sub_7F8F0(void *a1, uint64_t *a2)
{
  *(void *)AudioObjectPropertyAddress buf = a1 + 6;
  buf[8] = 1;
  sub_92F80((uint64_t)(a1 + 6));
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
  sub_93128((uint64_t)buf);
  if (v4 >= 2)
  {
    BOOL v13 = (os_log_t *)sub_138E8(13);
    BOOL v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
      __int16 v18 = 1024;
      int v19 = 113;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Only one DSPProcessorInstance allowed in graph-based chain",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one DSPProcessorInstance allowed in graph-based chain");
  }

  uint64_t v5 = *a2;
  AudioObjectID v6 = (std::__shared_weak_count *)a2[1];
  v16[0] = v5;
  v16[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  uint64_t v9 = sub_18E524(a1, v16);
  if (v6)
  {
    uint64_t v10 = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return v9;
}

void sub_7FA90(_Unwind_Exception *exception_object)
{
}

uint64_t sub_7FABC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  *(void *)AudioObjectPropertyAddress buf = a1 + 48;
  buf[8] = 1;
  sub_92F80(a1 + 48);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  sub_93128((uint64_t)buf);
  if (v6 >= 2)
  {
    BOOL v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
      __int16 v19 = 1024;
      int v20 = 119;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Only one DSPProcessorInstance allowed in graph-based chain",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one DSPProcessorInstance allowed in graph-based chain");
  }

  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  v17[0] = v7;
  v17[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_18E610(a1, v17, a3);
  if (v8)
  {
    unint64_t v11 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 0LL;
}

void sub_7FC60(_Unwind_Exception *exception_object)
{
}

void sub_7FC8C()
{
  unsigned __int8 v0 = (os_log_t *)sub_138E8(24);
  int v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    unint64_t v6 = "DSPGraphChain.cpp";
    __int16 v7 = 1024;
    int v8 = 125;
    _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d unsupported DestroyDSPProcessorInstance",  (uint8_t *)&v5,  0x12u);
  }

  uint64_t v2 = (os_log_t *)sub_138E8(13);
  int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      unint64_t v6 = "DSPGraphChain.cpp";
      __int16 v7 = 1024;
      int v8 = 126;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): unsupported method DestroyDSPProcessorInstance",  (uint8_t *)&v5,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "unsupported method DestroyDSPProcessorInstance");
}

void sub_7FDB8(_Unwind_Exception *a1)
{
}

void sub_7FDD4()
{
  unsigned __int8 v0 = (os_log_t *)sub_138E8(13);
  int v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      unint64_t v4 = "DSPGraphChain.cpp";
      __int16 v5 = 1024;
      int v6 = 131;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): unsupported method GetDSPProcessorInstanceIDAtChainIndex",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "unsupported method GetDSPProcessorInstanceIDAtChainIndex");
}

void sub_7FE94(_Unwind_Exception *exception_object)
{
}

BOOL sub_7FEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_D1820(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v16 = v8;
    uint64_t v17 = sub_1903A4(a1, 1685287015, v8, a4);
    BOOL v15 = v17 != 0;
    __int16 v18 = (os_log_t *)sub_138E8(24);
    __int16 v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
    {
      int v20 = v30;
      sub_2CA1C(v30, a3);
      if (v31 < 0) {
        int v20 = (void **)v30[0];
      }
      sub_2CA1C(__p, a2);
      int v21 = v29;
      uint64_t v22 = (void **)__p[0];
      sub_2CA1C(v26, v16);
      __int16 v23 = __p;
      if (v21 < 0) {
        __int16 v23 = v22;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      uint64_t v33 = "DSPGraphChain.cpp";
      if (v27 >= 0) {
        int v24 = v26;
      }
      else {
        int v24 = (void **)v26[0];
      }
      __int16 v34 = 1024;
      int v35 = 196;
      __int16 v36 = 2080;
      unint64_t v37 = v20;
      __int16 v38 = 2080;
      uint64_t v39 = v23;
      __int16 v40 = 2080;
      unint64_t v41 = v24;
      __int16 v42 = 1024;
      BOOL v43 = v17 != 0;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Checking for presence of DSPParameter %s for AU subtype %s as graph parameter %s, found: %d",  buf,  0x36u);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }

  else
  {
    uint64_t v9 = (os_log_t *)sub_138E8(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v30, a3);
      int v11 = v31;
      unint64_t v12 = (void **)v30[0];
      sub_2CA1C(__p, a2);
      BOOL v13 = v30;
      if (v11 < 0) {
        BOOL v13 = v12;
      }
      if (v29 >= 0) {
        BOOL v14 = __p;
      }
      else {
        BOOL v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v33 = "DSPGraphChain.cpp";
      __int16 v34 = 1024;
      int v35 = 201;
      __int16 v36 = 2080;
      unint64_t v37 = v13;
      __int16 v38 = 2080;
      uint64_t v39 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Checking for presence of DSPProperty %s for AU subtype %s",  buf,  0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }

    return sub_1903A4(a1, a2, a3, a4) != 0;
  }

  return v15;
}

void sub_8018C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  int v23 = v21;
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_801D8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_D1820(a2, a3);
  if (HIDWORD(v10))
  {
    uint64_t v13 = v10;
    uint64_t v11 = a1;
    int v12 = 1685287015;
  }

  else
  {
    uint64_t v11 = a1;
    int v12 = a2;
    uint64_t v13 = a3;
  }

  return sub_18F2F4(v11, v12, v13, a4, a5);
}

uint64_t sub_80250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_D1820(a2, a3);
  uint64_t v11 = (os_log_t *)sub_138E8(24);
  int v12 = *v11;
  if (HIDWORD(v10))
  {
    if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = v29;
      sub_2CA1C(v29, a3);
      if (v30 < 0) {
        __int16 v19 = (void **)v29[0];
      }
      sub_2CA1C(__p, a2);
      int v20 = v28;
      int v21 = (void **)__p[0];
      sub_2CA1C(v25, v10);
      uint64_t v22 = __p;
      if (v20 < 0) {
        uint64_t v22 = v21;
      }
      if (v26 >= 0) {
        int v23 = v25;
      }
      else {
        int v23 = (void **)v25[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 223;
      __int16 v35 = 2080;
      __int16 v36 = v19;
      __int16 v37 = 2080;
      __int16 v38 = v22;
      __int16 v39 = 2080;
      double v40 = *(double *)&v23;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Translatating DSPParameter <%s, %s> as graph parameter %s",  buf,  0x30u);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    uint64_t v24 = sub_1903A4(a1, 1685287015, v10, a4);
    if (v24) {
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, float))(*(void *)v24 + 72LL))( v24,  v10,  a4,  0LL,  a5);
    }
  }

  else
  {
    if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v29, a3);
      int v13 = v30;
      BOOL v14 = (void **)v29[0];
      sub_2CA1C(__p, a2);
      BOOL v15 = v29;
      if (v13 < 0) {
        BOOL v15 = v14;
      }
      if (v28 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 228;
      __int16 v35 = 2080;
      __int16 v36 = v15;
      __int16 v37 = 2080;
      __int16 v38 = v16;
      __int16 v39 = 2048;
      double v40 = a5;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting DSPParameter %s for AU subtype %s: %f",  buf,  0x30u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    uint64_t v17 = sub_1903A4(a1, a2, a3, a4);
    if (v17) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v17 + 72LL))( v17,  a3,  a4,  0LL,  a5);
    }
  }

  return 4294967246LL;
}

void sub_8055C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_805A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_34A20(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v10 = v8;
    uint64_t v11 = (os_log_t *)sub_138E8(24);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v23, a3);
      if (v24 >= 0) {
        int v13 = v23;
      }
      else {
        int v13 = (void **)v23[0];
      }
      sub_2CA1C(v21, a2);
      int v14 = v22;
      BOOL v15 = (void **)v21[0];
      sub_2CA1C(__p, v10);
      uint64_t v16 = v21;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      if (v20 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v26 = "DSPGraphChain.cpp";
      __int16 v27 = 1024;
      int v28 = 138;
      __int16 v29 = 2080;
      char v30 = v13;
      __int16 v31 = 2080;
      uint64_t v32 = v16;
      __int16 v33 = 2080;
      int v34 = v17;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s",  buf,  0x30u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }

    uint64_t v9 = sub_35A88(a1, 1685287015, v10, a4);
  }

  else
  {
    uint64_t v9 = sub_35A88(a1, a2, a3, a4);
  }

  return v9 != 0;
}

void sub_80780( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_807B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  int v13 = (os_log_t *)sub_138E8(24);
  int v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v29, a3);
      if (v30 >= 0) {
        char v20 = v29;
      }
      else {
        char v20 = (void **)v29[0];
      }
      sub_2CA1C(__p, a2);
      int v21 = v28;
      int v22 = (void **)__p[0];
      sub_2CA1C(v25, v12);
      int v23 = __p;
      if (v21 < 0) {
        int v23 = v22;
      }
      if (v26 >= 0) {
        char v24 = v25;
      }
      else {
        char v24 = (void **)v25[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 150;
      __int16 v35 = 2080;
      __int16 v36 = v20;
      __int16 v37 = 2080;
      __int16 v38 = v23;
      __int16 v39 = 2080;
      double v40 = v24;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s",  buf,  0x30u);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    return sub_18F3D4(a1, 1685287015, v12, a4, a5, a6);
  }

  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v29, a3);
      int v15 = v30;
      uint64_t v16 = (void **)v29[0];
      sub_2CA1C(__p, a2);
      uint64_t v17 = v29;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v28 >= 0) {
        __int16 v18 = __p;
      }
      else {
        __int16 v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v32 = "DSPGraphChain.cpp";
      __int16 v33 = 1024;
      int v34 = 155;
      __int16 v35 = 2080;
      __int16 v36 = v17;
      __int16 v37 = 2080;
      __int16 v38 = v18;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Getting DSPPropertyInfo %s for AU subtype %s",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }

    return sub_18F3D4(a1, a2, a3, a4, a5, a6);
  }

void sub_80A80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_80AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_34A20(a2, a3);
  int v13 = (os_log_t *)sub_138E8(24);
  int v14 = *v13;
  if (HIDWORD(v12))
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      int v21 = v31;
      sub_2CA1C(v31, a3);
      if (v32 < 0) {
        int v21 = (void **)v31[0];
      }
      sub_2CA1C(__p, a2);
      int v22 = v30;
      int v23 = (void **)__p[0];
      sub_2CA1C(v27, v12);
      char v24 = __p;
      if (v22 < 0) {
        char v24 = v23;
      }
      if (v28 >= 0) {
        uint64_t v25 = v27;
      }
      else {
        uint64_t v25 = (void **)v27[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v34 = "DSPGraphChain.cpp";
      __int16 v35 = 1024;
      int v36 = 178;
      __int16 v37 = 2080;
      __int16 v38 = v21;
      __int16 v39 = 2080;
      double v40 = v24;
      __int16 v41 = 2080;
      __int16 v42 = v25;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Translating DSPProperty %s for AU subtype %s to graph property %s",  buf,  0x30u);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }

    uint64_t v26 = sub_35A88(a1, 1685287015, v12, a6);
    if (v26) {
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v26 + 56LL))( v26,  v12,  a4,  a5,  a6,  0LL);
    }
  }

  else
  {
    if (v14 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v31, a3);
      int v15 = v32;
      uint64_t v16 = (void **)v31[0];
      sub_2CA1C(__p, a2);
      uint64_t v17 = v31;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v30 >= 0) {
        __int16 v18 = __p;
      }
      else {
        __int16 v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v34 = "DSPGraphChain.cpp";
      __int16 v35 = 1024;
      int v36 = 183;
      __int16 v37 = 2080;
      __int16 v38 = v17;
      __int16 v39 = 2080;
      double v40 = v18;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting DSPProperty %s for AU subtype %s", buf, 0x26u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }

    uint64_t v19 = sub_35A88(a1, a2, a3, a6);
    if (v19) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v19 + 56LL))( v19,  a3,  a4,  a5,  a6,  0LL);
    }
  }

  return 4294967246LL;
}

void sub_80DD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_80E1C()
{
  return 0LL;
}

void *sub_80E24(void *a1)
{
  __int16 v29 = &v29;
  char v30 = &v29;
  uint64_t v31 = 0LL;
  CFTypeRef v36 = 0LL;
  int v35 = 8;
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, CFTypeRef *, int *, void, void))(*a1 + 104LL))( a1,  1685287015LL,  1734504312LL,  &v36,  &v35,  0LL,  0LL))
  {
    sub_35F84(&cf, v36);
    uint64_t v8 = sub_138E8(24);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      uint64_t v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = CFCopyDescription(cf);
          sub_48188((uint64_t)__p, v10);
          if (v10) {
            CFRelease(v10);
          }
          uint64_t v11 = __p;
          if (v33 < 0) {
            uint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
          __int16 v38 = 1024;
          int v39 = 76;
          __int16 v40 = 2080;
          __int16 v41 = v11;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d boxes: %s", buf, 0x1Cu);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    unint64_t v12 = (const __CFArray *)cf;
    if (cf)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      CFIndex v14 = Count;
      int v15 = (const __CFArray *)cf;
      if (cf)
      {
        CFIndex v16 = CFArrayGetCount((CFArrayRef)cf);
        if (!v14)
        {
LABEL_31:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_2;
        }
      }

      else
      {
        CFIndex v16 = 0LL;
        if (!Count) {
          goto LABEL_31;
        }
      }

      unint64_t v17 = 0LL;
      do
      {
        if (v12 == v15 && v16 == v17) {
          break;
        }
        sub_36030(__p, v12, v17);
        __int16 v18 = __p[0];
        if (__p[0])
        {
          CFTypeID v19 = CFGetTypeID(__p[0]);
          if (v19 == CFDictionaryGetTypeID()) {
            continue;
          }
        }

        uint64_t v26 = (os_log_t *)sub_138E8(13);
        __int16 v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
          __int16 v38 = 1024;
          int v39 = 82;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Dictionary expected as value",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Dictionary expected as value");
        sub_360D4(buf, (CFTypeRef *)__p);
        char v20 = (const __CFDictionary *)sub_36228(*(const __CFDictionary **)buf, "audioComponentDescription");
        if (v20)
        {
          int v21 = (const __CFNumber *)sub_81298(v20, "componentSubType");
          if (v21)
          {
            int v22 = sub_36328(v21);
            if ((unint64_t)v22 >> 32)
            {
              int v23 = (int)v22;
              char v24 = operator new(0x18uLL);
              v24[4] = v23;
              uint64_t v25 = v29;
              *(void *)char v24 = v29;
              *((void *)v24 + 1) = &v29;
              *((void *)v25 + 1) = v24;
              __int16 v29 = v24;
              ++v31;
            }
          }
        }

        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        CFRelease(v18);
        ++v17;
      }

      while (v14 != v17);
      goto LABEL_31;
    }
  }

LABEL_2:
  sub_68314(a1 + 142);
  uint64_t v2 = v31;
  if (v31)
  {
    unint64_t v4 = v29;
    int v3 = v30;
    uint64_t v5 = *v30;
    *(void *)(v5 + 8) = *((void *)v29 + 1);
    **((void **)v4 + 1) = v5;
    uint64_t v6 = a1[142];
    *(void *)(v6 + 8) = v3;
    void *v3 = v6;
    a1[142] = v4;
    *((void *)v4 + 1) = a1 + 142;
    a1[144] += v2;
    uint64_t v31 = 0LL;
  }

  return sub_68314(&v29);
}

  sub_151FB8(&v83, (uint64_t)a2);
  uint64_t v5 = *((char *)a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)a3;
  }
  if (v5 >= 0) {
    __int16 v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    __int16 v7 = *((void *)a3 + 1);
  }
  uint64_t v8 = std::string::insert(&v83, 0LL, v6, v7);
  uint64_t v9 = v8->__r_.__value_.__r.__words[0];
  *(void *)unint64_t v84 = v8->__r_.__value_.__l.__size_;
  *(void *)&v84[7] = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  std::string::size_type size = v8->__r_.__value_.__s.__size_;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v11 = operator new(0x28uLL);
  unint64_t v12 = *(void *)v84;
  v11[2] = v9;
  v11[3] = v12;
  *(void *)((char *)v11 + 31) = *(void *)&v84[7];
  *((_BYTE *)v11 + 39) = size;
  int v13 = *a1;
  *uint64_t v11 = *a1;
  v11[1] = a1;
  *(void *)(v13 + 8) = v11;
  *a1 = v11;
  ++a1[2];
  if ((char)v83.__r_.__value_.__s.__size_ < 0)
  {
    CFIndex v14 = (void *)v83.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v14);
  }

        dword_492698 = 1;
        *(_OWORD *)&qword_4926A0 = 0u;
        unk_4926B0 = 0u;
        *(__int128 *)((char *)&xmmword_4926B8 + 8) = 0u;
        unk_4926D0 = 0u;
        qword_4926E0 = 0LL;
        strcpy((char *)&dword_4926E8, "tlfd");
        byte_4926F0 = 0;
        byte_492738 = 0;
        xmmword_492748 = 0u;
        unk_492758 = 0u;
        xmmword_492768 = 0u;
        unk_492778 = 0u;
        qword_492788 = 0LL;
      }

      return result;
  }

void sub_811C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, CFTypeRef a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

const void *sub_81298(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_81340(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

std::runtime_error *sub_81384(std::runtime_error *a1)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

uint64_t sub_81390(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51LL;
    goto LABEL_7;
  }

  if (v5 == 2)
  {
    uint64_t v6 = 102LL;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }

  if (v2 != v3)
  {
    do
    {
      __int16 v7 = *v2++;
      operator delete(v7);
    }

    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_81454(id a1)
{
  int v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    unint64_t v4 = dlerror();
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

  int v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_4919D0 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_4919D8 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_4919E0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_4919E8 = dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_4919F0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_4919F8 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_491A00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_491A08 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_491A10 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_491A18 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_491A20 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_491A28 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_491A30 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_491A38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_491A40 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_491A48 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    qword_491A50 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    qword_491A58 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_491A60 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_491A68 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_491A70 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    unint64_t v4 = v2;
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

unint64_t sub_81770(unint64_t a1)
{
  *(void *)a1 = off_46D2F8;
  uint64_t v2 = (os_log_t *)sub_138E8(24);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }

    unint64_t v4 = __p;
    if (v7 < 0) {
      unint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v9 = "DSPGraphChain.cpp";
    __int16 v10 = 1024;
    int v11 = 108;
    __int16 v12 = 2080;
    int v13 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPGraph chain %s", buf, 0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_68314((void *)(a1 + 1136));
  sub_1958B8(a1);
  return a1;
}

void sub_818AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_818B8(uint64_t a1, __int128 *a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_4739B0;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_93AF4(a1 + 48);
  *(void *)(a1 + 336) = 0LL;
  *(void *)(a1 + sub_13850(v0 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  sub_1976F4((void *)(a1 + 360));
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(_BYTE *)(a1 + sub_13818(v0 + 392) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_WORD *)(a1 + 448) = 256;
  __int128 v4 = xmmword_493168;
  __int128 v5 = unk_493178;
  *(_OWORD *)(a1 + sub_13850(v0 + 456) = xmmword_493168;
  *(_OWORD *)(a1 + sub_13818(v0 + 472) = v5;
  uint64_t v6 = qword_493188;
  *(void *)(a1 + 488) = qword_493188;
  *(_DWORD *)(a1 + 496) = 4096;
  *(void *)(a1 + 536) = v6;
  *(_OWORD *)(a1 + 504) = v4;
  *(_OWORD *)(a1 + 520) = v5;
  __int128 v7 = unk_493178;
  *(_OWORD *)(a1 + sub_13818(v0 + 544) = xmmword_493168;
  *(_OWORD *)(a1 + 560) = v7;
  *(void *)(a1 + 576) = qword_493188;
  *(void *)(a1 + 584) = 0LL;
  sub_2FC98(a1 + 504, (AudioStreamBasicDescription *)(a1 + 504), (AudioStreamBasicDescription *)(a1 + 544));
  __int128 v8 = xmmword_493168;
  __int128 v9 = unk_493178;
  *(_OWORD *)(a1 + 592) = xmmword_493168;
  *(_OWORD *)(a1 + 608) = v9;
  uint64_t v10 = qword_493188;
  *(void *)(a1 + 6memset(buf, 0, 24) = qword_493188;
  *(_OWORD *)(a1 + 632) = v8;
  *(_OWORD *)(a1 + 648) = v9;
  *(void *)(a1 + 664) = v10;
  *(void *)(a1 + 672) = 0LL;
  sub_2FC98(a1 + 592, (AudioStreamBasicDescription *)(a1 + 592), (AudioStreamBasicDescription *)(a1 + 632));
  *(_WORD *)(a1 + 682) = 1;
  *(_WORD *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = 0LL;
  *(void *)(a1 + 696) = 0LL;
  *(void *)(a1 + 688) = a1 + 696;
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054((_BYTE *)(a1 + 712), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v11 = *a2;
    *(void *)(a1 + 728) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 712) = v11;
  }

  *(void *)(a1 + 760) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + sub_265A90(v0 + 768) = a1 + 768;
  *(void *)(a1 + 776) = a1 + 768;
  *(void *)(a1 + 784) = 0LL;
  *(void *)(a1 + 790) = 0LL;
  *(_BYTE *)(a1 + 798) = 1;
  *(_DWORD *)(a1 + 800) = 1701868910;
  *(void *)(a1 + 856) = 0LL;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 840) = 0LL;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8memset(buf, 0, 24) = 0u;
  *(void *)(a1 + sub_265D00(v0 + 848) = a1 + 856;
  *(void *)(a1 + 880) = 850045863LL;
  *(void *)(a1 + 960) = 0LL;
  *(_DWORD *)(a1 + 968) = 0;
  *(void *)(a1 + 992) = 0LL;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)&qword_402EFC;
  *(void *)&buf[16] = 2LL;
  sub_83660(a1 + 1000, (int *)buf, 3LL);
  *(void *)(a1 + 1120) = 0LL;
  *(void *)(a1 + 1112) = 0LL;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = a1 + 1112;
  *(void *)(a1 + 1128) = 0LL;
  __int16 v12 = (os_log_s *)*(id *)sub_138E8(24);
  int v13 = v12;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    else {
      CFIndex v14 = *(void **)a2;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 559;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v14;
    __int16 v20 = 1024;
    int v21 = 0;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating DSP chain %s, AU Processing Block ? %d",  buf,  0x22u);
  }

  *(void *)a1 = off_46D2F8;
  *(void *)(a1 + 1136) = a1 + 1136;
  *(void *)(a1 + 1144) = a1 + 1136;
  *(void *)(a1 + 1152) = 0LL;
  int v15 = (os_log_t *)sub_138E8(24);
  CFIndex v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unint64_t v17 = *(void **)a2;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPGraphChain.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 103;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v17;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating DSPGraph chain %s", buf, 0x1Cu);
  }

  return a1;
}

void sub_81C90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, void **a17, void **a18)
{
  a18 = (void **)(v18 + 424);
  sub_1960C4(&a18);
  a18 = (void **)(v18 + 400);
  sub_1960C4(&a18);
  sub_7A768(v18 + 376);
  sub_7A768(a15);
  a18 = (void **)(v18 + 336);
  sub_7A668(&a18);
  sub_196138(a16);
  a18 = a17;
  sub_1960C4(&a18);
  int v22 = *(std::__shared_weak_count **)(v18 + 16);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(a1);
}

void sub_81E4C()
{
}

void sub_81E54()
{
}

void sub_81E60(std::__shared_weak_count *a1)
{
}

uint64_t sub_81E74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_81E94(std::__shared_weak_count *a1)
{
}

uint64_t sub_81EA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_81EC8(std::__shared_weak_count *a1)
{
}

uint64_t sub_81EDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t *sub_81EF8(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  __int128 v4 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_82DF4(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_81F5C(_Unwind_Exception *a1)
{
}

uint64_t sub_81F70(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  *(_BYTE *)(a1 + 8) = a4;
  *(void *)a1 = off_483158;
  sub_82AF0(a1 + 16, a2);
  uint64_t v6 = (_BYTE *)(a1 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    sub_24054(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }

  return a1;
}

void sub_81FE0(_Unwind_Exception *exception_object)
{
  __int128 v4 = *(void **)(v2 + 40);
  if (v4 == v1)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    int v1 = *(void **)(v2 + 40);
  }

  (*(void (**)(void *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

char *sub_8201C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = (char *)operator new(0x10uLL);
  __int128 v7 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 16;
  size_t v8 = a3 - (void)a2;
  if (v8) {
    uint64_t result = (char *)memcpy(result, a2, v8);
  }
  a1[1] = &v7[v8];
  return result;
}

void sub_82080(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_8209C(uint64_t a1)
{
  return (***(unsigned int (****)(void))(a1 + 8))(*(void *)(a1 + 8)) ^ 1;
}

void sub_820C8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 24LL))(__p);
  if ((v8 & 0x80u) == 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_82170( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_821AC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D648;
  return result;
}

void sub_821D0(uint64_t a1, void *a2)
{
  *a2 = &off_46D648;
}

BOOL sub_821E8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void *sub_82208()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D600;
  return result;
}

void sub_8222C(uint64_t a1, void *a2)
{
  *a2 = &off_46D600;
}

BOOL sub_82244(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void *sub_82264()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D5B8;
  return result;
}

void sub_82288(uint64_t a1, void *a2)
{
  *a2 = &off_46D5B8;
}

uint64_t sub_822A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0LL;
  }
  if ((sub_1CA280() & 1) != 0) {
    return 1LL;
  }
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

void *sub_82300()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D570;
  return result;
}

void sub_82324(uint64_t a1, void *a2)
{
  *a2 = &off_46D570;
}

uint64_t sub_8233C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

void *sub_82354()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D528;
  return result;
}

void sub_82378(uint64_t a1, void *a2)
{
  *a2 = &off_46D528;
}

uint64_t sub_82390(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504LL))(a2);
}

uint64_t sub_823A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 == v4) {
    return 1LL;
  }
  uint64_t v7 = v3 + 8;
  do
  {
    uint64_t result = (***(uint64_t (****)(void, uint64_t, uint64_t))(v7 - 8))(*(void *)(v7 - 8), a2, a3);
    if ((_DWORD)result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 8LL;
  }

  while (!v9);
  return result;
}

void *sub_82408(void *a1)
{
  *a1 = off_483190;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_82444(void *__p)
{
  *std::string __p = off_483190;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_82480@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v4 != i; v4 += 8LL)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v4 + 24LL))(v13);
    if ((v14 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = v14;
    }
    else {
      uint64_t v7 = (uint64_t)v13[1];
    }
    sub_826EC(&v9, (uint64_t)v6, v7);
    sub_826EC(&v9, (uint64_t)"; ", 2LL);
  }

  sub_826EC(&v9, (uint64_t)"]", 1LL);
  sub_82924(a2, (uint64_t)v10);
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf(v10);
  return std::ios::~ios(&v12);
}

void sub_825D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_82600(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v4;
  std::string::size_type v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_826C4(_Unwind_Exception *a1)
{
}

void *sub_826EC(void *a1, uint64_t a2, uint64_t a3)
{
  if (v20[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      uint64_t v10 = std::locale::use_facet(&__b, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }

    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0LL : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96LL))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }

    if (v16 >= 1)
    {
      sub_7D130(&__b, v16, (char)v9);
      unint64_t v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96LL))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }

    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96LL))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0LL;
    }

    else
    {
LABEL_23:
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v20);
  return a1;
}

void sub_828B0( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
  __cxa_end_catch();
  JUMPOUT(0x8288CLL);
}

void sub_82910(_Unwind_Exception *a1)
{
}

uint64_t sub_82924(void *a1, uint64_t a2)
{
  uint64_t result = sub_82A44(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_7D1D4();
  }
  std::string::size_type v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a1[1] = v6;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v9;
    a1 = v9;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }

  uint64_t result = (uint64_t)memmove(a1, v5, v6);
LABEL_9:
  *((_BYTE *)a1 + v6) = 0;
  return result;
}

uint64_t sub_829C0(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

uint64_t sub_82A44(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v3;
    }
    return *(void *)(a1 + 40);
  }

  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }

  else
  {
    return 0LL;
  }

void *sub_82A98()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D4E0;
  return result;
}

void sub_82ABC(uint64_t a1, void *a2)
{
  *a2 = &off_46D4E0;
}

BOOL sub_82AD4(uint64_t a1, uint64_t a2)
{
  return !sub_202EE8(a2);
}

uint64_t sub_82AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + memset(buf, 0, 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + memset(buf, 0, 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  }

  return a1;
}

uint64_t sub_82B54(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[8]) {
    a2 = a3;
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 32LL))(a1, a2);
}

void sub_82B70(uint64_t a1)
{
  int v1 = (void *)sub_82D34(a1);
  operator delete(v1);
}

uint64_t sub_82B84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 8)) {
    unint64_t v4 = "src";
  }
  else {
    unint64_t v4 = "dst";
  }
  sub_826EC(&v12, (uint64_t)v4, 3LL);
  sub_826EC(&v12, (uint64_t)": ", 2LL);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = a1 + 48;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  sub_826EC(&v12, v9, v10);
  sub_826EC(&v12, (uint64_t)"]", 1LL);
  sub_82924(a2, (uint64_t)v13);
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_82CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_82CC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void sub_82CEC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_485B00;
}

void sub_82D20(std::exception *a1)
{
}

uint64_t sub_82D34(uint64_t a1)
{
  *(void *)a1 = off_483158;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == (void *)(a1 + 16))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 16);
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void *sub_82DA8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_46D498;
  return result;
}

void sub_82DCC(uint64_t a1, void *a2)
{
  *a2 = &off_46D498;
}

uint64_t sub_82DE4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
}

uint64_t *sub_82DF4(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = a2;
LABEL_16:
      if (v8) {
        uint64_t v13 = (uint64_t **)v10;
      }
      else {
        uint64_t v13 = (uint64_t **)a2;
      }
      if (v8) {
        uint64_t v11 = (uint64_t **)(v10 + 1);
      }
      else {
        uint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }

    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }

      while (v16);
    }

    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    unint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v17;
          int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          unint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }

        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        unint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }

uint64_t sub_82FAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_82FFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248)) {
    sub_830A4(a1 + 208);
  }
  sub_830DC(a1 + 128);
  if (*(_BYTE *)(a1 + 120)) {
    sub_830A4(a1 + 80);
  }
  return sub_830DC(a1);
}

uint64_t sub_830A4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_830DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
  }

  return a1;
}

void sub_83134(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_83170((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

void sub_83170(uint64_t a1)
{
}

uint64_t sub_831AC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 296);
  if (v2) {
    CFRelease(v2);
  }
  sub_83284(a1 + 248);
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }

  sub_832CC(*(void **)(a1 + 192));
  unint64_t v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(void *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(const void **)(a1 + 152);
  if (v5) {
    CFRelease(v5);
  }
  int v7 = (void **)(a1 + 128);
  sub_8330C(&v7);
  return a1;
}

uint64_t sub_83284(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_832CC(void *a1)
{
  if (a1)
  {
    sub_832CC(*a1);
    sub_832CC(a1[1]);
    sub_7A7FC((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_8330C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    unint64_t v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        sub_83380(*(v4 - 1));
        unint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_83380(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t sub_8339C(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = (const __CFBoolean *)MGCopyAnswerWithError(a1, 0LL, &v7);
  uint64_t v2 = v1;
  if (v7)
  {
    int v3 = 0;
    unsigned __int8 v4 = 0;
    if (!v1) {
      return v4 | (v3 << 8);
    }
  }

  else
  {
    if (!v1)
    {
      int v3 = 0;
      unsigned __int8 v4 = 0;
      return v4 | (v3 << 8);
    }

    __int16 v5 = sub_476EC(v1);
    unsigned __int8 v4 = v5;
    int v3 = HIBYTE(v5);
  }

  CFRelease(v2);
  return v4 | (v3 << 8);
}

uint64_t sub_83428(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      uint64_t v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      __int16 v5 = a1;
      CFNumberType v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      int v7 = a1;
      CFNumberType v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      uint64_t v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      uint64_t v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      uint64_t v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      uint64_t v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      __int16 v5 = a1;
      CFNumberType v6 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v5, v6, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      int v7 = a1;
      CFNumberType v8 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LODWORD(valuePtr);
LABEL_15:
      BOOL v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      uint64_t v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      uint64_t v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      uint64_t v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_21:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      BOOL v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      uint64_t v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      uint64_t v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      uint64_t v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_25:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value) {
        BOOL v18 = *(void *)&valuePtr == 0LL;
      }
      else {
        BOOL v18 = 1;
      }
      goto LABEL_33;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      uint64_t v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_29:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      BOOL v19 = valuePtr == 0.0;
LABEL_30:
      BOOL v18 = v19 || Value == 0;
LABEL_33:
      int v4 = !v18;
      if (!Value) {
        goto LABEL_38;
      }
      int v20 = 256;
      break;
    default:
      int v4 = 0;
LABEL_38:
      int v20 = 0;
      break;
  }

  return v20 | v4;
}

uint64_t sub_83624(uint64_t a1, int a2, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = cf;
  return a1;
}

uint64_t sub_83660(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_842F0(a1, *a2, a2);
      a2 += 2;
      v5 -= 8LL;
    }

    while (v5);
  }

  return a1;
}

void sub_836C0(_Unwind_Exception *a1)
{
}

char *sub_836D4(char *__dst, __int128 *a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v11 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v11;
  }

  *(_OWORD *)(__dst + memset(buf, 0, 24) = 0u;
  CFNumberType v12 = (void **)(__dst + 24);
  uint64_t v13 = (void **)(__dst + 48);
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  sub_83A3C(&v18, a4);
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v14 = *(void *)(a3 + 8);
    if (v14)
    {
      sub_24054(&v16, *(void **)a3, v14);
      goto LABEL_10;
    }
  }

  else if (*(_BYTE *)(a3 + 23))
  {
    std::string v16 = *(std::string *)a3;
    goto LABEL_10;
  }

  sub_1CAFFC(&v16);
LABEL_10:
  sub_83A3C(&__p, &v16);
  sub_83AA0(&__dsta, (uint64_t)&v18, (std::__fs::filesystem::path *)&__p);
  sub_83A3C(&__p, a6);
  sub_83AA0((std::__fs::filesystem::path *)&v18, (uint64_t)&__dsta, (std::__fs::filesystem::path *)&__p);
  if (__dst[47] < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)CFNumberType v12 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *((void *)__dst + 5) = v18.__r_.__value_.__l.__cap_;
  v18.__r_.__value_.__s.__size_ = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_83A3C(&__p, a5);
  sub_83AA0((std::__fs::filesystem::path *)&v18, (uint64_t)&__dsta, (std::__fs::filesystem::path *)&__p);
  if (__dst[71] < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *((void *)__dst + std::ostream::~ostream(v2, v3 + 8) = v18.__r_.__value_.__l.__cap_;
  v18.__r_.__value_.__s.__size_ = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  return __dst;
}

void sub_838B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8396C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_8399C(uint64_t a1)
{
  return a1;
}

uint64_t sub_839EC(uint64_t a1)
{
  return sub_830A4(a1);
}

std::string *sub_83A3C(std::string *a1, std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  LODWORD(v3) = (char)a2->__r_.__value_.__s.__size_;
  BOOL v4 = (v3 & 0x80000000) != 0LL;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0LL) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  sub_83B5C(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_83A84(_Unwind_Exception *exception_object)
{
}

std::string *sub_83AA0(std::__fs::filesystem::path *__dst, uint64_t a2, std::__fs::filesystem::path *this)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)&__dst->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __dst->__pn_.__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  }

  if (std::__fs::filesystem::path::__root_directory(this).__size) {
    return std::string::operator=(&__dst->__pn_, &this->__pn_);
  }
  if (std::__fs::filesystem::path::__filename(__dst).__size) {
    std::string::push_back(&__dst->__pn_, 47);
  }
  int size = (char)this->__pn_.__r_.__value_.__s.__size_;
  if (size >= 0) {
    int v7 = this;
  }
  else {
    int v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    std::string::size_type v8 = this->__pn_.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v8 = this->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(&__dst->__pn_, (const std::string::value_type *)v7, v8);
}

void sub_83B40(_Unwind_Exception *exception_object)
{
}

std::string *sub_83B5C(std::string *this, std::string *a2, std::string *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    CFNumberType v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    CFNumberType v10 = this;
  }

  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    uint64_t v13 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v14 = (char *)v13 + size;
    do
    {
      std::string::value_type v15 = v4->__r_.__value_.__s.__data_[0];
      BOOL v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }

    while (v4 != a3);
    *unint64_t v14 = 0;
    std::string::size_type v16 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v16 & 0x7F;
    }
  }

  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_7D1D4();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      std::string::size_type v24 = v7;
      int64_t v25 = v18 | 0x8000000000000000LL;
      std::string __p = p_p;
    }

    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }

    do
    {
      std::string::value_type v19 = v4->__r_.__value_.__s.__data_[0];
      BOOL v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }

    while (v4 != a3);
    std::string::value_type *p_p = 0;
    if (v25 >= 0) {
      int v20 = (const std::string::value_type *)&__p;
    }
    else {
      int v20 = (const std::string::value_type *)__p;
    }
    if (v25 >= 0) {
      std::string::size_type v21 = HIBYTE(v25);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }

  return this;
}

void sub_83CFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_83D18(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_83170((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }

_BYTE *sub_83D5C(_BYTE *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_83DD0(__dst + 24, (__int128 *)((char *)a2 + 24));
  return __dst;
}

void sub_83DB4(_Unwind_Exception *exception_object)
{
}

char *sub_83DD0(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_24054(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + memset(buf, 0, 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_24054(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  if (*((char *)a2 + 95) < 0)
  {
    sub_24054(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }

  if (*((char *)a2 + 119) < 0)
  {
    sub_24054(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }

  else
  {
    __int128 v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }

  int v9 = *((_DWORD *)a2 + 30);
  *((void *)__dst + 16) = 0LL;
  *((_DWORD *)__dst + 30) = v9;
  *((void *)__dst + 17) = 0LL;
  *((void *)__dst + 1std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v10 = *((void *)a2 + 16);
  uint64_t v11 = *((void *)a2 + 17);
  __int16 v27 = (uint64_t *)(__dst + 128);
  char v28 = 0;
  if (v11 != v10)
  {
    sub_846C4((void *)__dst + 16, (v11 - v10) >> 4);
    uint64_t v12 = *((void *)__dst + 17);
    do
    {
      uint64_t v12 = sub_83624(v12, *(_DWORD *)v10, *(CFTypeRef *)(v10 + 8)) + 16;
      v10 += 16LL;
    }

    while (v10 != v11);
    *((void *)__dst + 17) = v12;
  }

  uint64_t v13 = *((void *)a2 + 19);
  if (v13) {
    CFRetain(*((CFTypeRef *)a2 + 19));
  }
  *((void *)__dst + 20) = 0LL;
  *((void *)__dst + 19) = v13;
  *((void *)__dst + 21) = 0LL;
  *((void *)__dst + 22) = 0LL;
  sub_7A5B8( (void *)__dst + 20,  *((const void **)a2 + 20),  *((void *)a2 + 21),  (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 2);
  *((void *)__dst + memset(buf, 0, 24) = 0LL;
  unint64_t v14 = (char **)(__dst + 192);
  *((void *)__dst + 23) = __dst + 192;
  *((void *)__dst + 25) = 0LL;
  std::string::value_type v15 = (__int128 *)*((void *)a2 + 23);
  if (v15 != a2 + 12)
  {
    do
    {
      std::string::size_type v16 = *v14;
      uint64_t v17 = __dst + 192;
      uint64_t v18 = *v14;
      std::string::value_type v19 = __dst + 192;
      if (v16)
      {
        do
        {
          uint64_t v17 = v18;
          uint64_t v18 = (char *)*((void *)v18 + 1);
        }

        while (v18);
      }

      else
      {
        do
        {
          uint64_t v17 = (char *)*((void *)v19 + 2);
          BOOL v20 = *(void *)v17 == (void)v19;
          std::string::value_type v19 = v17;
        }

        while (v20);
      }

      if ((sub_845A0((void *)v17 + 4, (void **)v15 + 4) & 0x80) != 0)
      {
LABEL_30:
        if (!v16)
        {
          __int16 v29 = __dst + 192;
          std::string::size_type v21 = (uint64_t **)(__dst + 192);
LABEL_35:
          sub_844F8((uint64_t)&v27, (uint64_t)(__dst + 184), v15 + 2);
          sub_32C38((uint64_t **)__dst + 23, (uint64_t)v29, v21, v27);
          __int16 v27 = 0LL;
          sub_8455C((uint64_t)&v27);
          goto LABEL_36;
        }

        __int16 v29 = v17;
        std::string::size_type v21 = (uint64_t **)(v17 + 8);
      }

      else
      {
        std::string::size_type v21 = (uint64_t **)sub_845D8((uint64_t)(__dst + 184), &v29, (void **)v15 + 4);
      }

      if (!*v21) {
        goto LABEL_35;
      }
LABEL_36:
      char v22 = (__int128 *)*((void *)v15 + 1);
      if (v22)
      {
        do
        {
          int v23 = v22;
          char v22 = *(__int128 **)v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          int v23 = (__int128 *)*((void *)v15 + 2);
          BOOL v20 = *(void *)v23 == (void)v15;
          std::string::value_type v15 = v23;
        }

        while (!v20);
      }

      std::string::value_type v15 = v23;
    }

    while (v23 != a2 + 12);
  }

  *((void *)__dst + 26) = 0LL;
  *((void *)__dst + 27) = 0LL;
  *((void *)__dst + 2std::ostream::~ostream(v2, v3 + 8) = 0LL;
  sub_8420C( __dst + 208,  *((uint64_t **)a2 + 26),  *((uint64_t **)a2 + 27),  (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
  uint64_t v24 = *((void *)a2 + 29);
  *((_DWORD *)__dst + 60) = *((_DWORD *)a2 + 60);
  *((void *)__dst + 29) = v24;
  sub_8427C((uint64_t)(__dst + 248), (uint64_t)a2 + 248);
  __dst[288] = *((_BYTE *)a2 + 288);
  uint64_t v25 = *((void *)a2 + 37);
  if (v25) {
    CFRetain(*((CFTypeRef *)a2 + 37));
  }
  *((void *)__dst + 37) = v25;
  return __dst;
}

void sub_84118( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
}

char *sub_8420C(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    uint64_t result = sub_7E420(result, a4);
    __int128 v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_84260(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_8427C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_52168(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_842D8(_Unwind_Exception *a1)
{
}

void sub_842F0(uint64_t a1, int a2, void *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }

    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0LL;
  v12[1] = v6;
  void v12[2] = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_52168(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *BOOL v20 = v12;
    goto LABEL_39;
  }

  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_844E4(_Unwind_Exception *a1)
{
}

char *sub_844F8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5 = a2 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  uint64_t result = sub_7ECB0(v6 + 32, a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_84548(_Unwind_Exception *a1)
{
}

void sub_8455C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_7A7FC((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

uint64_t sub_845A0(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_84668(a1, v2, v5, v6);
}

void *sub_845D8(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint8x8_t v8 = v4 + 4;
        int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if ((sub_845A0(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }

LABEL_9:
  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

    operator delete(__p);
    return;
  }

  if (__p) {
    goto LABEL_9;
  }
}

  *a2 = v7;
  return v5;
}

  sub_1BB60((std::mutex *)a1);
  uint64_t v5 = AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) == 0;
  return !v5;
}

uint64_t sub_84668(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

char *sub_846C4(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_7A87C();
  }
  uint64_t result = (char *)sub_7BE90(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_84700(void *a1, uint64_t *a2)
{
  size_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    uint64_t v6 = a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v6) {
      BOOL v7 = a2 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      int v8 = (void *)v6;
    }

    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        sub_84AEC(v6 + 40, (uint64_t)(v2 + 5));
        int v8 = *(void **)v6;
        sub_7E7D8((uint64_t)a1, v6);
        size_t v2 = (uint64_t *)*v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = (uint64_t)v8;
      }

      while (v2);
    }

    sub_83134(v8);
  }

  for (; v2; size_t v2 = (uint64_t *)*v2)
  {
    int v9 = operator new(0x158uLL);
    v11[0] = (uint64_t)v9;
    v11[1] = (uint64_t)(a1 + 2);
    char v12 = 0;
    *int v9 = 0LL;
    v9[1] = 0LL;
    uint64_t v10 = sub_83D5C((_BYTE *)v9 + 16, (__int128 *)v2 + 1);
    char v12 = 1;
    v9[1] = sub_7ED44((uint64_t)v10);
    sub_7E7D8((uint64_t)a1, v11[0]);
    v11[0] = 0LL;
    sub_83D18((uint64_t)v11);
  }

void sub_84814(void *a1)
{
}

void sub_8482C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_84854(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_52168(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v6 = sub_7ED44((uint64_t)(i + 16));
    unint64_t v7 = v6;
    unint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = v6;
        if (v6 >= v8) {
          unint64_t v2 = v6 % v8;
        }
      }

      else
      {
        unint64_t v2 = (v8 - 1) & v6;
      }

      unint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
      if (v11)
      {
        for (uint64_t j = *v11; j; uint64_t j = *(unsigned __int8 **)j)
        {
          unint64_t v13 = *((void *)j + 1);
          if (v13 == v7)
          {
            if (sub_7F194(j + 16, i + 16)) {
              goto LABEL_40;
            }
          }

          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }

            else
            {
              v13 &= v8 - 1;
            }

            if (v13 != v2) {
              break;
            }
          }
        }
      }
    }

    float v14 = operator new(0x158uLL);
    v25[0] = v14;
    v25[1] = a1 + 16;
    char v26 = 0;
    *float v14 = 0LL;
    v14[1] = v7;
    sub_83D5C((_BYTE *)v14 + 16, (__int128 *)i + 1);
    char v26 = 1;
    float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
    float v16 = *(float *)(a1 + 32);
    if (!v8 || (float)(v16 * (float)v8) < v15)
    {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v17 = 1LL;
      }
      unint64_t v18 = v17 | (2 * v8);
      unint64_t v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v18;
      }
      sub_52168(a1, v20);
      unint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          unint64_t v2 = v7 % v8;
        }
        else {
          unint64_t v2 = v7;
        }
      }

      else
      {
        unint64_t v2 = (v8 - 1) & v7;
      }
    }

    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
    uint64_t v22 = v25[0];
    if (v21)
    {
      *(void *)v25[0] = *v21;
    }

    else
    {
      *(void *)v25[0] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v22;
      *(void *)(*(void *)a1 + 8 * v2) = a1 + 16;
      if (!*(void *)v22) {
        goto LABEL_39;
      }
      unint64_t v23 = *(void *)(*(void *)v22 + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }

      else
      {
        v23 &= v8 - 1;
      }

      unint64_t v21 = (void *)(*(void *)a1 + 8 * v23);
    }

    *unint64_t v21 = v22;
LABEL_39:
    v25[0] = 0LL;
    ++*(void *)(a1 + 24);
    sub_83D18((uint64_t)v25);
LABEL_40:
    ;
  }

  return a1;
}

void sub_84AC0(_Unwind_Exception *a1)
{
}

uint64_t sub_84AEC(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  if (a1 != a2)
  {
    uint64_t v5 = (void **)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    uint64_t v7 = *(void *)(a2 + 128);
    uint64_t v6 = *(void *)(a2 + 136);
    unint64_t v8 = (v6 - v7) >> 4;
    uint64_t v9 = *(void *)(a1 + 144);
    if (v8 <= (v9 - v4) >> 4)
    {
      uint64_t v16 = *(void *)(a1 + 136);
      unint64_t v17 = (v16 - v4) >> 4;
      if (v17 >= v8)
      {
        if (v7 != v6)
        {
          do
          {
            sub_85284(v4, *(_DWORD *)v7, *(CFTypeRef *)(v7 + 8));
            v4 += 16LL;
            v7 += 16LL;
          }

          while (v7 != v6);
          uint64_t v16 = *(void *)(a1 + 136);
        }

        if (v16 != v4)
        {
          do
          {
            uint64_t v20 = v16 - 16;
            sub_83380(*(const void **)(v16 - 8));
            uint64_t v16 = v20;
          }

          while (v20 != v4);
        }

        *(void *)(a1 + 136) = v4;
      }

      else
      {
        uint64_t v18 = v7 + 16 * v17;
        if (v16 != v4)
        {
          do
          {
            sub_85284(v4, *(_DWORD *)v7, *(CFTypeRef *)(v7 + 8));
            v4 += 16LL;
            v7 += 16LL;
          }

          while (v7 != v18);
          uint64_t v4 = *(void *)(a1 + 136);
        }

        uint64_t v19 = v4;
        if (v18 != v6)
        {
          uint64_t v19 = v4;
          do
          {
            uint64_t v19 = sub_83624(v19, *(_DWORD *)v18, *(CFTypeRef *)(v18 + 8)) + 16;
            v18 += 16LL;
          }

          while (v18 != v6);
        }

        *(void *)(a1 + 136) = v19;
      }
    }

    else
    {
      if (v4)
      {
        uint64_t v10 = *(void *)(a1 + 136);
        unint64_t v11 = *(void **)(a1 + 128);
        if (v10 != v4)
        {
          do
          {
            uint64_t v12 = v10 - 16;
            sub_83380(*(const void **)(v10 - 8));
            uint64_t v10 = v12;
          }

          while (v12 != v4);
          unint64_t v11 = *v5;
        }

        *(void *)(a1 + 136) = v4;
        operator delete(v11);
        uint64_t v9 = 0LL;
        *uint64_t v5 = 0LL;
        *(void *)(a1 + 136) = 0LL;
        *(void *)(a1 + 144) = 0LL;
      }

      if (v6 - v7 < 0) {
        sub_7A87C();
      }
      uint64_t v13 = v9 >> 3;
      if (v9 >> 3 <= v8) {
        uint64_t v13 = (v6 - v7) >> 4;
      }
      else {
        unint64_t v14 = v13;
      }
      sub_846C4((void *)(a1 + 128), v14);
      uint64_t v15 = *(void *)(a1 + 136);
      while (v7 != v6)
      {
        uint64_t v15 = sub_83624(v15, *(_DWORD *)v7, *(CFTypeRef *)(v7 + 8)) + 16;
        v7 += 16LL;
      }

      *(void *)(a1 + 136) = v15;
    }
  }

  unint64_t v21 = *(const void **)(a1 + 152);
  uint64_t v22 = *(const void **)(a2 + 152);
  *(void *)(a1 + 152) = v22;
  if (v22) {
    CFRetain(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (a1 != a2)
  {
    sub_7E6D4( (char *)(a1 + 160),  *(char **)(a2 + 160),  *(void *)(a2 + 168),  (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2);
    unint64_t v23 = *(void **)(a2 + 184);
    uint64_t v24 = (void *)(a2 + 192);
    if (*(void *)(a1 + 200))
    {
      uint64_t v25 = *(void *)(a1 + 192);
      char v26 = *(void **)(a1 + 184);
      *(void *)(a1 + 184) = a1 + 192;
      *(void *)(v25 + 16) = 0LL;
      *(void *)(a1 + 192) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      if (v26[1]) {
        __int16 v27 = (void *)v26[1];
      }
      else {
        __int16 v27 = v26;
      }
      __int16 v61 = (uint64_t *)(a1 + 184);
      uint64_t v62 = v27;
      unint64_t v63 = v27;
      if (!v27 || (uint64_t v62 = sub_68080((uint64_t)v27), v23 == v24))
      {
        uint64_t v31 = v23;
      }

      else
      {
        do
        {
          std::string::operator=((std::string *)(v27 + 4), (const std::string *)(v23 + 4));
          std::string::operator=((std::string *)(v27 + 7), (const std::string *)(v23 + 7));
          char v28 = v63;
          __int16 v29 = (uint64_t **)sub_851C4(a1 + 184, &v60, v63 + 4);
          sub_32C38((uint64_t **)(a1 + 184), v60, v29, v28);
          __int16 v27 = v62;
          unint64_t v63 = v62;
          if (v62) {
            uint64_t v62 = sub_68080((uint64_t)v62);
          }
          char v30 = (void *)v23[1];
          if (v30)
          {
            do
            {
              uint64_t v31 = v30;
              char v30 = (void *)*v30;
            }

            while (v30);
          }

          else
          {
            do
            {
              uint64_t v31 = (void *)v23[2];
              BOOL v32 = *v31 == (void)v23;
              unint64_t v23 = v31;
            }

            while (!v32);
          }

          if (!v27) {
            break;
          }
          unint64_t v23 = v31;
        }

        while (v31 != v24);
      }

      sub_85238((uint64_t)&v61);
      unint64_t v23 = v31;
    }

    if (v23 != v24)
    {
      do
      {
        sub_844F8((uint64_t)&v61, a1 + 184, (__int128 *)v23 + 2);
        char v33 = v61;
        int v34 = (uint64_t **)sub_851C4(a1 + 184, &v60, v61 + 4);
        sub_32C38((uint64_t **)(a1 + 184), v60, v34, v33);
        __int16 v61 = 0LL;
        sub_8455C((uint64_t)&v61);
        int v35 = (void *)v23[1];
        if (v35)
        {
          do
          {
            CFTypeRef v36 = v35;
            int v35 = (void *)*v35;
          }

          while (v35);
        }

        else
        {
          do
          {
            CFTypeRef v36 = (void *)v23[2];
            BOOL v32 = *v36 == (void)v23;
            unint64_t v23 = v36;
          }

          while (!v32);
        }

        unint64_t v23 = v36;
      }

      while (v36 != v24);
    }

    __int16 v37 = *(char **)(a1 + 208);
    int v39 = *(char **)(a2 + 208);
    __int16 v38 = *(char **)(a2 + 216);
    unint64_t v40 = (v38 - v39) >> 3;
    uint64_t v41 = *(void *)(a1 + 224);
    if (v40 <= (v41 - (uint64_t)v37) >> 3)
    {
      uint64_t v44 = (void *)(a1 + 216);
      uint64_t v45 = *(char **)(a1 + 216);
      unint64_t v49 = (v45 - v37) >> 3;
      if (v49 >= v40)
      {
        unint64_t v55 = *(char **)(a1 + 208);
        while (v39 != v38)
        {
          uint64_t v56 = *(void *)v39;
          v39 += 8;
          *(void *)unint64_t v55 = v56;
          v55 += 8;
        }

        uint64_t v48 = (char *)(v55 - v37);
        uint64_t v45 = v37;
      }

      else
      {
        unint64_t v50 = &v39[8 * v49];
        if (v45 != v37)
        {
          uint64_t v51 = 8 * v49;
          do
          {
            uint64_t v52 = *(void *)v39;
            v39 += 8;
            *(void *)__int16 v37 = v52;
            v37 += 8;
            v51 -= 8LL;
          }

          while (v51);
        }

        unint64_t v53 = v45;
        while (v50 != v38)
        {
          uint64_t v54 = *(void *)v50;
          v50 += 8;
          *(void *)unint64_t v53 = v54;
          v53 += 8;
        }

        uint64_t v48 = (char *)(v53 - v45);
      }
    }

    else
    {
      if (v37)
      {
        *(void *)(a1 + 216) = v37;
        operator delete(v37);
        uint64_t v41 = 0LL;
        *(void *)(a1 + 20std::ostream::~ostream(v2, v3 + 8) = 0LL;
        *(void *)(a1 + 216) = 0LL;
        *(void *)(a1 + 2memset(buf, 0, 24) = 0LL;
      }

      if (v38 - v39 < 0) {
        sub_7A87C();
      }
      uint64_t v42 = v41 >> 2;
      if (v41 >> 2 <= v40) {
        uint64_t v42 = (v38 - v39) >> 3;
      }
      else {
        unint64_t v43 = v42;
      }
      sub_7E420((void *)(a1 + 208), v43);
      uint64_t v44 = (void *)(a1 + 216);
      uint64_t v45 = *(char **)(a1 + 216);
      uint64_t v46 = v45;
      if (v39 != v38)
      {
        uint64_t v46 = *(char **)(a1 + 216);
        do
        {
          uint64_t v47 = *(void *)v39;
          v39 += 8;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
        }

        while (v39 != v38);
      }

      uint64_t v48 = (char *)(v46 - v45);
    }

    *uint64_t v44 = &v48[(void)v45];
  }

  if (*(unsigned __int8 *)(a1 + 240) == *(unsigned __int8 *)(a2 + 240))
  {
    if (*(_BYTE *)(a1 + 240)) {
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
    }
  }

  else if (*(_BYTE *)(a1 + 240))
  {
    *(_BYTE *)(a1 + 240) = 0;
  }

  else
  {
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = 1;
  }

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    sub_85088((void *)(a1 + 248), *(uint64_t **)(a2 + 264));
  }

  *(_BYTE *)(a1 + 28std::ostream::~ostream(v2, v3 + 8) = *(_BYTE *)(a2 + 288);
  uint64_t v57 = *(const void **)(a1 + 296);
  uint64_t v58 = *(const void **)(a2 + 296);
  *(void *)(a1 + sub_13818(v0 + 296) = v58;
  if (v58) {
    CFRetain(v58);
  }
  if (v57) {
    CFRelease(v57);
  }
  return a1;
}

void sub_85074(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_85088(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v4; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  uint64_t v6 = (uint64_t *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v6)
  {
    while (a2)
    {
      unint64_t v7 = *((int *)a2 + 4);
      *((_DWORD *)v6 + 4) = v7;
      *((_BYTE *)v6 + 20) = *((_BYTE *)a2 + 20);
      unint64_t v8 = (uint64_t *)*v6;
      v6[1] = v7;
      uint64_t v9 = sub_524E4((uint64_t)a1, v7, (_DWORD *)v6 + 4);
      sub_52830(a1, v6, v9);
      a2 = (uint64_t *)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }

    do
    {
      uint64_t v13 = (uint64_t *)*v6;
      operator delete(v6);
      uint64_t v6 = v13;
    }

    while (v13);
  }

  else
  {
LABEL_9:
    while (a2)
    {
      uint64_t v10 = operator new(0x18uLL);
      *uint64_t v10 = 0LL;
      uint64_t v11 = a2[2];
      v10[2] = v11;
      v10[1] = (int)v11;
      uint64_t v12 = sub_524E4((uint64_t)a1, (int)v11, (_DWORD *)v10 + 4);
      sub_52830(a1, v10, v12);
      a2 = (uint64_t *)*a2;
    }
  }

void sub_85180(void *a1)
{
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_851A0(_Unwind_Exception *a1)
{
}

void *sub_851C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = v5[1];
    }

    while (v4);
    uint64_t result = v5 + 1;
  }

  else
  {
    uint64_t result = (void *)(a1 + 8);
  }

LABEL_8:
  *a2 = v5;
  return result;
}

  *a2 = v5;
  return result;
}

  unint64_t v8 = *(void *)(a2 + 8);
  if (v8 == a2)
  {
LABEL_16:
    uint64_t v13 = 0;
  }

  else
  {
    while (1)
    {
      sub_B8F68(&v18, (uint64_t *)(v8 + 16), "", 1008);
      uint64_t v9 = v19;
      uint64_t v10 = *(_DWORD *)(v18 + 144);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          uint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      if (v10 == 1885565807) {
        break;
      }
      unint64_t v8 = *(void *)(v8 + 8);
      if (v8 == a2) {
        goto LABEL_16;
      }
    }

    sub_B8F68(&v18, a3, "", 1010);
    uint64_t v15 = v19;
    uint64_t v13 = *(_DWORD *)(v18 + 144) == 1886613611;
    if (v19)
    {
      uint64_t v16 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  return v5 | v13;
}

  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  int Value = CFBooleanGetValue(a1);
  return Value != 0;
}

  if (v3 == a2)
  {
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = 136315394;
      uint64_t v10 = "AggregateDevice_Common.cpp";
      uint64_t v11 = 1024;
      uint64_t v12 = 843;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): No speaker input stream found",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No speaker input stream found");
  }

  return ((_DWORD)v3 - (_DWORD)a1);
}

  else {
    return 0LL;
  }
}

  if (a5) {
    sub_3125B4(a1, a3, (uint64_t)v12, a6);
  }
  else {
    sub_2FF254(a1, a3, 0, (uint64_t)v12, 0LL);
  }
  sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v12, 0x61676332u);
  sub_2FE0C4(a1, a3, 0, 0, (uint64_t)v12, 0x7366636Cu);
}

    AudioObjectPropertyScope mScope = a2->mScope;
    v5[0] = 1634689389;
    v5[1] = mScope;
    v5[2] = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 24LL))(a1, v5);
  }

  if (mSelector != 1651664739)
  {
    if (mSelector != 1684365924) {
      return sub_36854C(a1, a2);
    }
    goto LABEL_8;
  }

  return 1LL;
}

uint64_t sub_85238(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    size_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        size_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v2;
    }

    sub_832CC(v2);
  }

  return a1;
}

uint64_t sub_85284(uint64_t a1, int a2, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  uint64_t v4 = *(const void **)(a1 + 8);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void *sub_852D0(void *a1, __int32 *a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      __int32 v7 = *a2;
      sub_8598C((uint64_t)a1, &v7);
      ++a2;
      v5 -= 4LL;
    }

    while (v5);
  }

  return a1;
}

void sub_85334(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_85350(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)a3,  *(void *)(a3 + 8),  (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_7A5B8( (void *)(a1 + 40),  *(const void **)a6,  *(void *)(a6 + 8),  (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  return a1;
}

void sub_853D0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_853EC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_7A5B8( (void *)(a1 + 40),  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_85468(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void *sub_85484(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_857F4(a1, a3);
    a1[1] = sub_85654(a2, a2 + (a3 << 6), a1[1]);
  }

  return a1;
}

void sub_854F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v2, v3 + 8) = v10;
  sub_855A4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_85514(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a5;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  sub_85774((void *)(a1 + 32), *a6, a6[1], (a6[1] - *a6) >> 6);
  sub_8FCF4(a1, *a6, a6[1]);
  return a1;
}

void sub_8558C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_855A4(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_85948(v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_85614(void *a1)
{
  unint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  size_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_85654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      sub_85864(a3 + v6, a1 + v6);
      v6 += 64LL;
    }

    while (a1 + v6 != a2);
    a3 += v6;
  }

  return a3;
}

uint64_t sub_856E4(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + memset(buf, 0, 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  sub_85774((void *)(a1 + 32), *a5, a5[1], (a5[1] - *a5) >> 6);
  sub_8FCF4(a1, *a5, a5[1]);
  return a1;
}

void sub_8575C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_85774(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_857F4(result, a4);
    uint64_t result = (void *)sub_85654(a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_857D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v2, v3 + 8) = v10;
  sub_855A4(&a9);
  _Unwind_Resume(a1);
}

char *sub_857F4(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_7A87C();
  }
  uint64_t result = (char *)sub_85830(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_85830(unint64_t a1)
{
  if (a1 >> 58) {
    sub_7A8C4();
  }
  return operator new(a1 << 6);
}

uint64_t sub_85864(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_7A5B8( (void *)(a1 + 40),  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  return a1;
}

void sub_858E0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_858FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_85948((void *)(i - 64));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_85948(void *a1)
{
  unint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

void sub_8598C(uint64_t a1, __int32 *a2)
{
  uint64_t v4 = *(__int32 **)(a1 + 8);
  uint64_t v5 = wmemchr(*(const __int32 **)a1, *a2, ((uint64_t)v4 - *(void *)a1) >> 2);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  __int32 v7 = *(__int32 **)(a1 + 8);
  if (v6 == v7)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v8)
    {
      uint64_t v10 = *(__int32 **)a1;
      uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 2;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v15 = v12;
      }
      if (v15)
      {
        unint64_t v15 = (unint64_t)sub_7A890(v15);
        uint64_t v10 = *(__int32 **)a1;
        uint64_t v6 = *(__int32 **)(a1 + 8);
      }

      else
      {
        uint64_t v16 = 0LL;
      }

      unint64_t v17 = (__int32 *)(v15 + 4 * v11);
      unint64_t v18 = v15 + 4 * v16;
      *unint64_t v17 = *a2;
      uint64_t v9 = v17 + 1;
      while (v6 != v10)
      {
        __int32 v19 = *--v6;
        *--unint64_t v17 = v19;
      }

      *(void *)a1 = v17;
      *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v9;
      *(void *)(a1 + 16) = v18;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *uint64_t v6 = *a2;
      uint64_t v9 = v6 + 1;
    }

    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v9;
  }

uint64_t *sub_85A90(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = a2; ; sub_85C34(a1, i[2], i[3]))
  {
    uint64_t i = (void *)i[1];
    if (i == a2) {
      break;
    }
  }

  return a1;
}

void sub_85AE4(_Unwind_Exception *a1)
{
}

void *sub_85AF8(void *a1, void *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v4 = operator new(0x10uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 2;
  uint64_t v5 = a2[1];
  void *v4 = *a2;
  v4[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  a1[1] = v4 + 2;
  return a1;
}

void sub_85B6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_85B80(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + std::ostream::~ostream(v2, v3 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_85BF8(std::__shared_weak_count *a1)
{
}

void sub_85C0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_28020C(v1);
    operator delete(v2);
  }

void *sub_85C34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    unint64_t v7 = (unint64_t *)(a3 + 16);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = *a1;
  void *result = *a1;
  result[1] = a1;
  *(void *)(v9 + std::ostream::~ostream(v2, v3 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void sub_85CA0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + std::ostream::~ostream(v2, v3 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_85D10((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_85D10(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_85DA4(&v2);
  uint64_t v2 = (void **)(a1 + 8);
  sub_85DA4(&v2);
}

void sub_85D64(void *a1)
{
  if (a1)
  {
    sub_85D64(*a1);
    sub_85D64(a1[1]);
    sub_85E14(a1 + 4);
    operator delete(a1);
  }

void sub_85DA4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_85B80(v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_85E14(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_85E54(void *a1)
{
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  sub_85EA4(v2 + 2, a1);
  return v2;
}

void sub_85E90(_Unwind_Exception *a1)
{
}

void *sub_85EA4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  sub_85F90(a1 + 1, a2[1], a2[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - a2[1]) >> 3));
  a1[4] = 0LL;
  a1[5] = 0LL;
  a1[6] = 0LL;
  sub_85F90(a1 + 4, a2[4], a2[5], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[5] - a2[4]) >> 3));
  sub_86054((uint64_t)(a1 + 7), a2 + 7);
  sub_86054((uint64_t)(a1 + 10), a2 + 10);
  return a1;
}

void sub_85F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_85F90(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_864C8(result, a4);
    uint64_t v7 = v6[1];
    if (a2 != a3)
    {
      uint64_t v8 = 0LL;
      do
      {
        uint64_t result = sub_85A90((uint64_t *)(v7 + v8), (void *)(a2 + v8));
        v8 += 24LL;
      }

      while (a2 + v8 != a3);
      v7 += v8;
    }

    v6[1] = v7;
  }

  return result;
}

void sub_86018( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_86054(uint64_t a1, void *a2)
{
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v7[2];
          BOOL v9 = *v8 == (void)v7;
          uint64_t v7 = v8;
        }

        while (v9);
      }

      BOOL v10 = sub_862E4((unint64_t *)v8 + 4, v5 + 4);
      uint64_t v6 = (uint64_t *)*v3;
      if (v10) {
        goto LABEL_17;
      }
      uint64_t v11 = (uint64_t **)v3;
      unint64_t v12 = (uint64_t **)v3;
      if (!v6) {
        goto LABEL_20;
      }
      unint64_t v12 = (uint64_t **)v3;
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v6;
          uint64_t v13 = (unint64_t *)(v6 + 4);
          uint64_t v6 = *v11;
          unint64_t v12 = v11;
          if (!*v11) {
            goto LABEL_20;
          }
        }

        if (!sub_862E4(v13, v5 + 4)) {
          break;
        }
        unint64_t v12 = v11 + 1;
        uint64_t v6 = v11[1];
        if (!v6) {
          goto LABEL_20;
        }
      }

void sub_861E4(_Unwind_Exception *a1)
{
}

void *sub_861FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  uint64_t v7 = *(void *)(a3 + 8);
  v6[4] = *(void *)a3;
  v6[5] = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  v6[6] = 0LL;
  v6[7] = 0LL;
  v6[8] = 0LL;
  uint64_t result = sub_7A5B8( v6 + 6,  *(const void **)(a3 + 16),  *(void *)(a3 + 24),  (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_86280(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_862A0(v1);
  _Unwind_Resume(a1);
}

void sub_862A0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_85E14(v1 + 4);
    }
    operator delete(v1);
  }

BOOL sub_862E4(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = *a1;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    else
    {
      unint64_t v7 = 0LL;
    }
  }

  else
  {
    unint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  unint64_t v12 = (std::__shared_weak_count *)a2[1];
  if (!v12)
  {
    unint64_t v15 = 0LL;
    BOOL v14 = 0LL;
    goto LABEL_21;
  }

  uint64_t v13 = std::__shared_weak_count::lock(v12);
  BOOL v14 = v13;
  if (!v13)
  {
    unint64_t v15 = 0LL;
    if (!v6) {
      goto LABEL_28;
    }
LABEL_22:
    uint64_t v20 = std::__shared_weak_count::lock(v6);
    if (v20) {
      unint64_t v21 = v7;
    }
    else {
      unint64_t v21 = 0LL;
    }
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  unint64_t v15 = *a2;
  uint64_t v16 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    unint64_t v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  unint64_t v18 = (unint64_t *)&v13->__shared_owners_;
  do
    unint64_t v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_21:
    if (!v6) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }

  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v14);
  if (v6) {
    goto LABEL_22;
  }
LABEL_28:
  unint64_t v21 = 0LL;
  uint64_t v20 = 0LL;
  if (!v14)
  {
LABEL_34:
    unint64_t v15 = 0LL;
    goto LABEL_35;
  }

char *sub_864C8(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_7A87C();
  }
  uint64_t v3 = 3 * a2;
  uint64_t result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void sub_86518(uint64_t a1)
{
  uint64_t v1 = (void *)sub_86630(a1);
  operator delete(v1);
}

uint64_t sub_86530(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 300);
}

uint64_t sub_86538(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 636);
}

uint64_t sub_86540()
{
  return 0LL;
}

uint64_t sub_86548(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 768);
}

uint64_t *sub_86550(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_865A0(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_8658C(_Unwind_Exception *a1)
{
}

uint64_t *sub_865A0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_32A38(v5, v6, *((_DWORD *)v4 + 7), (_DWORD *)v4 + 7);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_86630(uint64_t a1)
{
  *(void *)a1 = off_47C6D8;
  sub_2DBF4((unsigned int **)(a1 + 896));
  sub_86704((char *)(a1 + 872));
  if (*(void *)(a1 + 864))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 856);
    uint64_t v3 = *(void *)(a1 + 848);
    uint64_t v4 = *v2;
    *(void *)(v4 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + std::ostream::~ostream(v2, v3 + 8) = v4;
    *(void *)(a1 + 864) = 0LL;
    if (v2 != (uint64_t *)(a1 + 848))
    {
      do
      {
        uint64_t v6 = (uint64_t *)v2[1];
        uint64_t v5 = v2[2];
        v2[2] = 0LL;
        if (v5)
        {
          unint64_t v7 = (void *)sub_28020C(v5);
          operator delete(v7);
        }

        operator delete(v2);
        uint64_t v2 = v6;
      }

      while (v6 != (uint64_t *)(a1 + 848));
    }
  }

  uint64_t v8 = *(void **)(a1 + 824);
  if (v8)
  {
    *(void *)(a1 + 832) = v8;
    operator delete(v8);
  }

  BOOL v9 = *(void **)(a1 + 800);
  if (v9)
  {
    *(void *)(a1 + 80std::ostream::~ostream(v2, v3 + 8) = v9;
    operator delete(v9);
  }

  *(void *)a1 = off_4772D0;
  sub_7A768(a1 + 784);
  return sub_231850(a1);
}

void sub_86704(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(*(void *)a1 + 8LL);
    **(void **)(v2 + std::ostream::~ostream(v2, v3 + 8) = v4;
    *((void *)a1 + 2) = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        sub_2DBF4((unsigned int **)v3 + 10);
        sub_2DBF4((unsigned int **)v3 + 8);
        uint64_t v6 = (void **)(v3 + 40);
        sub_867A4(&v6);
        uint64_t v6 = (void **)(v3 + 16);
        sub_867A4(&v6);
        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_867A4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_867E4((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

void sub_867E4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 208LL)
  {
    sub_2DBF4((unsigned int **)(i - 32));
    sub_2DBF4((unsigned int **)(i - 48));
  }

  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a2;
}

void *sub_8683C(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_7A840(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }

  return a1;
}

void sub_86894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_868B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48CA58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48CA58))
    {
      uint64_t v1 = 0x3F2666663EB33333LL;
      sub_86910((uint64_t)&v1);
      __cxa_guard_release(&qword_48CA58);
    }
  }

float sub_86910(uint64_t a1)
{
  xmmword_48CA18 = 0u;
  *(_OWORD *)&qword_48CA28 = 0u;
  dword_48CA38 = 1065353216;
  qword_48CA40 = 0LL;
  dword_48CA48 = 0;
  float v2 = *(float *)(a1 + 4);
  dword_48CA4C = *(_DWORD *)a1;
  unk_48CA50 = LODWORD(v2);
  float result = v2 - *(float *)&dword_48CA4C;
  *(float *)&dword_48CA54 = v2 - *(float *)&dword_48CA4C;
  return result;
}

void sub_8696C(char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_869B4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4A9DA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_4A9DA8))
  {
    qword_4A9DA0 = 0LL;
    __cxa_guard_release(&qword_4A9DA8);
  }

  uint64_t result = qword_4A9DA0;
  if (!qword_4A9DA0)
  {
    float v2 = (os_log_t *)sub_138E8(6);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      unint64_t v7 = "VirtualAudioQueue.h";
      __int16 v8 = 1024;
      int v9 = 78;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create VirtualAudio queue.",  (uint8_t *)&v6,  0x12u);
    }

    uint64_t v4 = dispatch_queue_create("VirtualAudio Queue", 0LL);
    uint64_t v5 = (dispatch_object_s *)qword_4A9DA0;
    qword_4A9DA0 = (uint64_t)v4;
    if (v5)
    {
      dispatch_release(v5);
      uint64_t v4 = (dispatch_queue_s *)qword_4A9DA0;
    }

    dispatch_queue_set_specific(v4, "VirtualAudioQueueKey", "VirtualAudioQueueKey", 0LL);
    return qword_4A9DA0;
  }

  return result;
}

void sub_86AEC(uint64_t a1)
{
  if (dispatch_get_specific("VirtualAudioQueueKey") != "VirtualAudioQueueKey")
  {
    float v2 = (os_log_t *)sub_138E8(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 111;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Must be called on the VirtualAudio queue!",  buf,  0x12u);
      }
    }
  }

  float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
  if (*(float *)(a1 + 120) <= v4)
  {
    atomic_store(0, (unsigned int *)(a1 + 112));
  }

  else
  {
    float v5 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
    float v6 = 1.0;
    float v7 = 1.0;
    if (*(float *)(a1 + 116) < v5)
    {
      float v8 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 104)));
      float v7 = 1.0 - (float)((float)(v8 - *(float *)(a1 + 116)) / *(float *)(a1 + 124));
    }

    float v9 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 108)));
    float v10 = v7 + v9;
    if (v10 <= 1.0) {
      float v6 = v10;
    }
    if (v10 < 0.0) {
      float v6 = 0.0;
    }
    atomic_store(LODWORD(v6), (unsigned int *)(a1 + 112));
  }

  int64x2_t v44 = 0uLL;
  uint64_t v45 = 0LL;
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  for (uint64_t i = *(void **)(a1 + 80); i; uint64_t i = (void *)*i)
  {
    unint64_t v12 = (std::__shared_weak_count *)i[4];
    if (v12)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v12);
      *(void *)&buf[8] = v13;
      if (v13)
      {
        BOOL v14 = v13;
        uint64_t v15 = i[3];
        *(void *)AudioObjectPropertyAddress buf = v15;
        if (v15)
        {
          uint64_t v16 = (void *)v44.i64[1];
          if (v44.i64[1] >= (unint64_t)v45)
          {
            uint64_t v20 = (void *)v44.i64[0];
            uint64_t v21 = (v44.i64[1] - v44.i64[0]) >> 4;
            unint64_t v22 = v21 + 1;
            uint64_t v23 = (uint64_t)&v45[-v44.i64[0]];
            else {
              unint64_t v24 = v22;
            }
            if (v24 >> 60) {
              sub_7A8C4();
            }
            unint64_t v25 = (char *)operator new(16 * v24);
            char v26 = &v25[16 * v21];
            *(void *)char v26 = v15;
            *((void *)v26 + 1) = v14;
            *(void *)AudioObjectPropertyAddress buf = 0LL;
            *(void *)&buf[8] = 0LL;
            if (v16 == v20)
            {
              int64x2_t v29 = vdupq_n_s64((unint64_t)v16);
              unint64_t v27 = &v25[16 * v21];
            }

            else
            {
              unint64_t v27 = &v25[16 * v21];
              do
              {
                __int128 v28 = *((_OWORD *)v16 - 1);
                v16 -= 2;
                *((_OWORD *)v27 - 1) = v28;
                v27 -= 16;
                *uint64_t v16 = 0LL;
                v16[1] = 0LL;
              }

              while (v16 != v20);
              int64x2_t v29 = v44;
            }

            unint64_t v17 = v26 + 16;
            v44.i64[0] = (uint64_t)v27;
            v44.i64[1] = (uint64_t)(v26 + 16);
            uint64_t v45 = &v25[16 * v24];
            uint64_t v30 = v29.i64[1];
            uint64_t v31 = (void *)v29.i64[0];
            if (v31) {
              operator delete(v31);
            }
          }

          else
          {
            *(void *)v44.i64[1] = v15;
            v16[1] = v13;
            unint64_t v17 = v16 + 2;
          }

          v44.i64[1] = (uint64_t)v17;
        }

        else
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
    }
  }

  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  uint64_t v33 = v44.i64[1];
  for (uint64_t j = v44.i64[0]; j != v33; j += 16LL)
  {
    int v34 = (os_log_t *)sub_138E8(24);
    int v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
    {
      float v36 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 112)));
      uint64_t v37 = *(void *)j;
      if (*(char *)(*(void *)j + 735LL) < 0)
      {
        sub_24054(__p, *(void **)(v37 + 712), *(void *)(v37 + 720));
      }

      else
      {
        uint64_t v38 = v37 + 712;
        *(_OWORD *)std::string __p = *(_OWORD *)v38;
        uint64_t v43 = *(void *)(v38 + 16);
      }

      int v39 = __p;
      if (v43 < 0) {
        int v39 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 152;
      __int16 v47 = 2048;
      double v48 = v36;
      __int16 v49 = 2080;
      unint64_t v50 = v39;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ControlEffortValueManager - Setting control effort value of %f on registered DSP chain %s",  buf,  0x26u);
      if (SHIBYTE(v43) < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v40 = *(void *)j;
    float v41 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 112)));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v40 + 72LL))( v40,  1685287015LL,  1668572518LL,  0LL,  v41);
  }

  *(void *)AudioObjectPropertyAddress buf = &v44;
  sub_7A668((void ***)buf);
}

void sub_86F2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_7A668(&a19);
  _Unwind_Resume(a1);
}

void sub_86F74(void *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (os_log_t *)sub_138E8(24);
  float v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *((float *)a1 + 2);
    int v6 = 136315650;
    float v7 = "ControlEffortValueManager.cpp";
    __int16 v8 = 1024;
    int v9 = 103;
    __int16 v10 = 2048;
    double v11 = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d ControlEffortValueManager - Got an updated thermal budget of %f watts",  (uint8_t *)&v6,  0x1Cu);
  }

  atomic_store(*((_DWORD *)a1 + 2), (unsigned int *)(v2 + 104));
  sub_86AEC(v2);
  operator delete(a1);
}

void sub_8706C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      unint64_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        unint64_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        unint64_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x87034LL);
}

uint64_t sub_872B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16LL))(*(void *)(a1 + 80));
}

uint64_t sub_872C4(_DWORD *a1, uint8x8_t a2)
{
  a2.i32[0] = a1[3];
  int16x8_t v3 = (int16x8_t)vmovl_u8(a2);
  *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
  unsigned __int32 v16 = vmovn_s16(v3).u32[0];
  char v17 = 0;
  uint64_t v14 = 0x676C6F626C6E616DLL;
  int v15 = 0;
  CFStringRef theString = 0LL;
  int v12 = 8;
  (*(void (**)(_DWORD *, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56LL))( a1,  &v14,  0LL,  0LL,  &v12,  &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0LL;
    v19.length = CFStringGetLength(theString);
    v19.location = 0LL;
    CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, buffer, 255LL, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }

  int v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128LL))(a1);
  double v5 = "Global";
  if (v4 == 1869968496) {
    double v5 = "Output";
  }
  if (v4 == 1886679669) {
    int v6 = "Play Through";
  }
  else {
    int v6 = v5;
  }
  if (v4 == 1768845428) {
    float v7 = "Input";
  }
  else {
    float v7 = v6;
  }
  int v8 = a1[2];
  int v9 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136LL))(a1);
  return printf( "AudioObjectID:\t\t0x%X\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n\tScope:\t\t\t%s\n\tChannel:\t\t%u\n",  v8,  (const char *)&v16,  (const char *)buffer,  v7,  v9);
}

void sub_8745C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x87340LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_87474(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1LL;
  if (*a2 > 1818850161)
  {
    if (v2 != 1818850162)
    {
      if (v2 == 1819107691)
      {
        int v6 = *(uint64_t (**)(void))(*(void *)a1 + 120LL);
      }

      else
      {
        if (v2 != 1819173229) {
          return sub_5CC60(a1, a2) != 0;
        }
        int v6 = *(uint64_t (**)(void))(*(void *)a1 + 112LL);
      }

      float v7 = (const void *)v6();
      if (v7)
      {
        CFRelease(v7);
        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  else if (v2 != 1667591277 && v2 != 1668506480 && v2 != 1818850145)
  {
    return sub_5CC60(a1, a2) != 0;
  }

  return v3;
}

uint64_t sub_87538(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1819107690)
  {
    BOOL v3 = v2 == 1819107691;
    int v4 = 1819173229;
  }

  else
  {
    BOOL v3 = v2 == 1667591277;
    int v4 = 1668506480;
  }

  if (v3 || v2 == v4) {
    return 0LL;
  }
  else {
    return sub_5E070(a1, a2);
  }
}

uint64_t sub_8758C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  if (*a2 > 1819107690)
  {
    if (v4 == 1819107691 || v4 == 1819173229) {
      return 8LL;
    }
  }

  else if (v4 == 1667591277 || v4 == 1668506480)
  {
    return 4LL;
  }

  return sub_689F8(a1, a2, a3, a4);
}

uint64_t sub_875F0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  int v8 = *a2;
  if (*a2 > 1819107690)
  {
    if (v8 == 1819107691)
    {
      int v13 = *a5;
      if (v13 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
      {
        CFRange v19 = (os_log_t *)sub_138E8(13);
        int v15 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315394;
          unint64_t v22 = "HP_Control.cpp";
          __int16 v23 = 1024;
          int v24 = 236;
          unsigned __int32 v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyManufacturer";
          goto LABEL_32;
        }

        goto LABEL_33;
      }

      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    }

    else
    {
      if (v8 != 1819173229) {
        return sub_6A140(a1, a2, a3, a4, a5, (uint64_t)a6);
      }
      int v11 = *a5;
      if (v11 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1))
      {
        char v17 = (os_log_t *)sub_138E8(13);
        int v15 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315394;
          unint64_t v22 = "HP_Control.cpp";
          __int16 v23 = 1024;
          int v24 = 231;
          unsigned __int32 v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioObjectPropertyName";
          goto LABEL_32;
        }

uint64_t sub_87944()
{
  return 0LL;
}

uint64_t sub_8794C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 128LL))(*(void *)(a1 + 80));
}

uint64_t sub_8795C()
{
  return 0LL;
}

uint64_t sub_87964(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void sub_8796C(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  __int128 v3 = 0u;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 184LL))(a1, __p);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 200LL))(a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_879CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_879E8(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  __int128 v3 = 0u;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 192LL))(a1, __p);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 200LL))(a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_87A48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_87A64(void **a1, unint64_t *a2)
{
  a2[1] = *a2;
  int v4 = (*(uint64_t (**)(void *, void **))(*a1[10] + 704LL))(a1[10], a1);
  int v5 = (*(uint64_t (**)(void *, void **))(*a1[10] + 736LL))(a1[10], a1);
  int v6 = ((uint64_t (*)(void **))(*a1)[17])(a1);
  int v10 = v4;
  int v11 = v5;
  int v12 = v6;
  if (v4) {
    sub_87EB4(a2, &v10);
  }
  int v7 = (*(uint64_t (**)(void *, void **))(*a1[10] + 712LL))(a1[10], a1);
  int v10 = v7;
  int v11 = (*(uint64_t (**)(void *, void **))(*a1[10] + 744LL))(a1[10], a1);
  if (v7) {
    sub_87EB4(a2, &v10);
  }
  int v8 = (*(uint64_t (**)(void *, void **))(*a1[10] + 720LL))(a1[10], a1);
  int v10 = v8;
  int v11 = (*(uint64_t (**)(void *, void **))(*a1[10] + 752LL))(a1[10], a1);
  if (v8) {
    sub_87EB4(a2, &v10);
  }
  int v9 = (*(uint64_t (**)(void *, void **))(*a1[10] + 728LL))(a1[10], a1);
  int v10 = v9;
  int v11 = (*(uint64_t (**)(void *, void **))(*a1[10] + 760LL))(a1[10], a1);
  if (v9) {
    sub_87EB4(a2, &v10);
  }
}

void sub_87BC0(void **a1, unint64_t *a2)
{
  a2[1] = *a2;
  int v4 = (*(uint64_t (**)(void *, void **))(*a1[10] + 768LL))(a1[10], a1);
  int v5 = (*(uint64_t (**)(void *, void **))(*a1[10] + 784LL))(a1[10], a1);
  int v6 = ((uint64_t (*)(void **))(*a1)[17])(a1);
  int v8 = v4;
  int v9 = v5;
  int v10 = v6;
  if (v4) {
    sub_87EB4(a2, &v8);
  }
  int v7 = (*(uint64_t (**)(void *, void **))(*a1[10] + 776LL))(a1[10], a1);
  int v8 = v7;
  int v9 = (*(uint64_t (**)(void *, void **))(*a1[10] + 792LL))(a1[10], a1);
  if (v7) {
    sub_87EB4(a2, &v8);
  }
}

void sub_87C94(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = ((char *)a2[1] - (char *)*a2) >> 2;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * v2;
  if (-1431655765 * (_DWORD)v2)
  {
    (*(void (**)(void, unint64_t))(**(void **)(a1 + 80) + 72LL))(*(void *)(a1 + 80), v3);
    memset(v10, 0, 24);
    sub_87DA8((char *)v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    int v6 = (char *)v10[0];
    int v7 = (_DWORD *)sub_6C2A0(*(void **)(a1 + 80), *(_DWORD *)(v10[0] + 4LL), *(_DWORD *)(v10[0] + 8LL));
    if (v7)
    {
      uint64_t v8 = 0LL;
      do
      {
        *(_DWORD *)&v6[v8 + 4] = 1735159650;
        int v9 = *(_DWORD *)&v6[v8 + 8];
        if (v9) {
          int v9 = v9 - v7[23] + 1;
        }
        *(_DWORD *)&v6[v8 + 8] = v9;
        v8 += 12LL;
      }

      while (12LL * v3 != v8);
      (*(void (**)(_DWORD *, unint64_t, char *, uint64_t))(*(void *)v7 + 72LL))(v7, v3, v6, 1LL);
    }

    operator delete(v6);
  }

void sub_87D94(_Unwind_Exception *a1)
{
}

char *sub_87DA8(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_87E24(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + std::ostream::~ostream(v2, v3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12LL;
      a2 = (uint64_t *)((char *)a2 + 12);
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_87E08(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_87E24(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556LL) {
    sub_7A87C();
  }
  uint64_t result = (char *)sub_87E70(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *sub_87E70(unint64_t a1)
{
  if (a1 >= 0x1555555555555556LL) {
    sub_7A8C4();
  }
  return operator new(12 * a1);
}

void sub_87EB4(unint64_t *a1, int *a2)
{
  uint64_t v4 = (_DWORD *)*a1;
  int v5 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 == v5)
  {
    int v5 = (_DWORD *)*a1;
LABEL_8:
    uint64_t v20 = *(void *)a2;
    int v21 = a2[2];
    unint64_t v7 = a1[2];
    if ((unint64_t)v5 >= v7)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4) + 1;
      if (v10 > 0x1555555555555555LL) {
        sub_7A87C();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v4) >> 2);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v12 = 0x1555555555555555LL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)sub_87E70(v12);
      }
      else {
        uint64_t v13 = 0LL;
      }
      unint64_t v14 = v12 + 4 * (v5 - v4);
      unint64_t v15 = v12 + 12 * v13;
      *(void *)unint64_t v14 = v20;
      *(_DWORD *)(v14 + std::ostream::~ostream(v2, v3 + 8) = v21;
      int v9 = (_DWORD *)(v14 + 12);
      char v17 = (_DWORD *)*a1;
      unsigned __int32 v16 = (_DWORD *)a1[1];
      if (v16 != (_DWORD *)*a1)
      {
        do
        {
          uint64_t v18 = *(void *)(v16 - 3);
          v16 -= 3;
          int v19 = v16[2];
          *(void *)(v14 - 12) = v18;
          v14 -= 12LL;
          *(_DWORD *)(v14 + std::ostream::~ostream(v2, v3 + 8) = v19;
        }

        while (v16 != v17);
        unsigned __int32 v16 = (_DWORD *)*a1;
      }

      *a1 = v14;
      a1[1] = (unint64_t)v9;
      a1[2] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      uint64_t v8 = *(void *)a2;
      v5[2] = a2[2];
      *(void *)int v5 = v8;
      int v9 = v5 + 3;
    }

    a1[1] = (unint64_t)v9;
    return;
  }

  int v6 = (_DWORD *)*a1;
  while (!sub_5CCDC(a2, v6))
  {
    v6 += 3;
    if (v6 == v5) {
      goto LABEL_8;
    }
  }

  if (v6 == v5) {
    goto LABEL_8;
  }
}

uint64_t sub_88020()
{
  return 1818588780LL;
}

uint64_t sub_8802C(uint64_t a1, int *a2)
{
  if (*a2 == 1650685548) {
    return 1LL;
  }
  else {
    return sub_87474(a1, a2);
  }
}

uint64_t sub_8804C(uint64_t a1, int *a2)
{
  if (*a2 == 1650685548) {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1) ^ 1;
  }
  else {
    return sub_87538(a1, a2);
  }
}

uint64_t sub_88088(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  if (*a2 != 1650685548) {
    return sub_61C64(a1, a2, a3, a4, a5, (uint64_t)a6, a7);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48LL))(a1) != (_DWORD)a5)
  {
    unint64_t v10 = (os_log_t *)sub_138E8(13);
    unint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        unint64_t v14 = "HP_Control.cpp";
        __int16 v15 = 1024;
        int v16 = 651;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioBooleanControlPropertyValue",  (uint8_t *)&v13,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 561211770;
  }

  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 216LL))(a1, *a6 != 0);
}

uint64_t sub_88204()
{
  return 1953458028LL;
}

uint64_t sub_88210(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 680LL))(*(void *)(a1 + 8));
  if (result)
  {
    uint64_t v9 = result;
    int v10 = *a2;
    uint64_t result = 32LL;
    if (*a2 <= 1818456941)
    {
      BOOL v11 = v10 == 1668506475;
      int v12 = 1818455660;
    }

    else
    {
      BOOL v11 = v10 == 1818456942 || v10 == 1819501422;
      int v12 = 1835295843;
    }

    if (!v11 && v10 != v12)
    {
      int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 696LL))(*(void *)(a1 + 8));
      uint64_t v15 = 1735159650LL;
      return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)v9 + 48LL))(v9, &v14, a3, a4);
    }
  }

  return result;
}

void sub_88304(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_88318()
{
  return 1886613355LL;
}

uint64_t sub_88324(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_13818(v0 + 264) = a2;
  return result;
}

uint64_t sub_8832C()
{
  return 0LL;
}

uint64_t sub_88334()
{
  return 0LL;
}

uint64_t sub_8833C()
{
  return 0LL;
}

uint64_t sub_88344()
{
  return 1LL;
}

BOOL sub_8834C(uint64_t a1)
{
  return (*(_WORD *)(a1 + 184) & 0x11) == 16;
}

uint64_t sub_88364()
{
  return 0LL;
}

uint64_t sub_8836C()
{
  return 0LL;
}

uint64_t sub_88374()
{
  return 0LL;
}

uint64_t sub_8837C()
{
  return 0LL;
}

CFMutableDictionaryRef sub_88384@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 257;
  return result;
}

uint64_t sub_883C8()
{
  return 0LL;
}

CFMutableDictionaryRef sub_883D0@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 257;
  return result;
}

uint64_t sub_88414(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 528);
  uint64_t v3 = 0x676C6F6241434461LL;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 16LL))(v1, &v3);
}

CFAllocatorRef sub_88450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 528);
  uint64_t v8 = 0x676C6F6241434461LL;
  int v9 = 0;
  CFAllocatorRef allocator = 0LL;
  int v6 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFAllocatorRef *))(*(void *)v3 + 40LL))( v3,  &v8,  0LL,  0LL,  &v6,  &allocator);
  CFAllocatorRef result = allocator;
  if (allocator)
  {
    char v5 = 0;
  }

  else
  {
    CFAllocatorRef result = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    char v5 = 1;
  }

  *(void *)a2 = result;
  *(_BYTE *)(a2 + std::ostream::~ostream(v2, v3 + 8) = 1;
  *(_BYTE *)(a2 + 9) = v5;
  return result;
}

uint64_t sub_884F0()
{
  return 0LL;
}

uint64_t sub_884F8()
{
  return 0LL;
}

void sub_88500(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

uint64_t sub_88510()
{
  return 0LL;
}

uint64_t sub_88518()
{
  return 0LL;
}

uint64_t sub_88520()
{
  return 0LL;
}

uint64_t sub_88528(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 521);
}

uint64_t sub_88530(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_88538(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_88540(uint64_t a1)
{
  return sub_19DFC(a1);
}

uint64_t sub_88570(uint64_t a1)
{
  return a1;
}

void sub_8859C(int *a1)
{
}

uint64_t sub_885C8(uint64_t a1)
{
  return notify_post("com.apple.odeon.lla");
}

uint64_t sub_885F0(uint64_t a1)
{
  return notify_post("com.apple.odeon.lla");
}

void sub_8861C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_46DB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_8862C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_46DB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_8864C(uint64_t a1)
{
  return notify_cancel(*(_DWORD *)(a1 + 32));
}

void **sub_8866C(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    unint64_t v7 = *result;
    do
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          int v4 = v8;
          uint64_t v8 = (void *)v8[1];
        }

        while (v8);
      }

      else
      {
        do
        {
          int v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          unint64_t v7 = v4;
        }

        while (v5);
      }

      unint64_t v7 = v4;
    }

    while (!__CFADD__(a2++, 1LL));
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          int v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }

        while (!v5);
      }

      uint64_t v2 = v4;
    }

    while (a2-- > 1);
  }

  char *result = v4;
  return result;
}

void sub_886F8(uint64_t a1, signed int a2, signed int a3, double a4, float a5)
{
  int v6 = (uint64_t **)(a1 + 8);
  BOOL v5 = *(uint64_t ***)(a1 + 8);
  unint64_t v7 = (uint64_t **)(a1 + 16);
  do
  {
    int v8 = *((_DWORD *)v5 + 7);
    BOOL v9 = *((_DWORD *)v5 + 8) > a2 && v8 < a3;
    char v10 = v9;
    if (v9 || v8 <= a2)
    {
      int v12 = v5;
    }

    else
    {
      BOOL v11 = v5[1];
      if (v11)
      {
        do
        {
          int v12 = (uint64_t **)v11;
          BOOL v11 = (uint64_t *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          int v12 = (uint64_t **)v5[2];
          BOOL v13 = *v12 == (uint64_t *)v5;
          BOOL v5 = v12;
        }

        while (!v13);
      }
    }

    if (v12 == v7) {
      char v14 = 1;
    }
    else {
      char v14 = v10;
    }
    if ((v14 & 1) != 0) {
      break;
    }
    BOOL v5 = v12;
  }

  while (v8 > a2);
  if ((v10 & 1) == 0)
  {
LABEL_26:
    uint64_t v15 = *v7;
    int v16 = (uint64_t **)(a1 + 16);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          int v16 = (uint64_t **)v15;
          int v17 = *((_DWORD *)v15 + 7);
          if (v17 <= a2) {
            break;
          }
          uint64_t v15 = *v16;
          unint64_t v7 = v16;
          if (!*v16) {
            goto LABEL_33;
          }
        }

        if (v17 >= a2) {
          break;
        }
        uint64_t v15 = v16[1];
        if (!v15)
        {
          unint64_t v7 = v16 + 1;
          goto LABEL_33;
        }
      }
    }

    else
    {
LABEL_33:
      *((float *)&a4 + 1) = a5;
      double v19 = a4;
      unint64_t v20 = __PAIR64__(a3, a2);
      uint64_t v18 = (uint64_t *)operator new(0x30uLL);
      *(uint64_t *)((char *)v18 + 2std::ostream::~ostream(v2, v3 + 8) = v20;
      *(double *)((char *)v18 + 36) = v19;
      sub_32C38(v6, (uint64_t)v16, v7, v18);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    unint64_t v22 = "CAVolumeCurve.cpp";
    __int16 v23 = 1024;
    int v24 = 214;
    _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d  CAVolumeCurve::AddRange: new point overlaps",  buf,  0x12u);
  }

void *sub_888D0(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return result;
}

void sub_88918(_Unwind_Exception *a1)
{
}

void *sub_8892C(void *a1, void **a2, uint64_t a3)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t)(a1 + 1);
  a1[2] = 0LL;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_88A20((uint64_t)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_88990(_Unwind_Exception *a1)
{
}

void **sub_889A4(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  BOOL v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_845A0(v3 + 4, a2);
    if (v6 >= 0) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      BOOL v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || (sub_845A0(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_88A20(uint64_t result, uint64_t a2, void **a3, uint64_t a4)
{
  unint64_t v7 = (uint64_t **)result;
  int v8 = (void **)(result + 8);
  if (result + 8 != a2)
  {
    CFAllocatorRef result = sub_845A0(a3, (void **)(a2 + 32));
    if ((result & 0x80) == 0)
    {
      CFAllocatorRef result = sub_845A0((void *)(a2 + 32), a3);
      if ((result & 0x80) == 0)
      {
        uint64_t v20 = a2;
        int v21 = (void *)a2;
        BOOL v9 = (void **)&v20;
        if (a2) {
          return result;
        }
        goto LABEL_25;
      }

      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        char v14 = *(void ***)(a2 + 8);
        do
        {
          BOOL v9 = v14;
          char v14 = (void **)*v14;
        }

        while (v14);
      }

      else
      {
        double v19 = (void **)a2;
        do
        {
          BOOL v9 = (void **)v19[2];
          BOOL v16 = *v9 == v19;
          double v19 = v9;
        }

        while (!v16);
      }

      if (v9 == v8 || (CFAllocatorRef result = sub_845A0(a3, v9 + 4), (result & 0x80) != 0))
      {
        if (v13)
        {
          int v21 = v9;
        }

        else
        {
          int v21 = (void *)a2;
          BOOL v9 = (void **)(a2 + 8);
        }

void sub_88BF0(_Unwind_Exception *a1)
{
}

void sub_88C08(char *a1)
{
  if (a1)
  {
    sub_88C08(*(void *)a1);
    sub_88C08(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }

void sub_88C50(char a1, void **__p)
{
  if (a1)
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_88C9C(void *result, CFTypeRef cf)
{
  uint64_t v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return sub_7F234(v2, cf);
  }

  else
  {
    char *result = 0LL;
  }

  return result;
}

uint64_t sub_88CE4(unsigned __int8 *a1, unsigned __int8 *a2, int a3, char a4)
{
  uint64_t v4 = 1668510307LL;
  uint64_t v5 = 1987208039LL;
  if (a4) {
    int v6 = a3;
  }
  else {
    int v6 = 0;
  }
  if (v6 > 1935962991)
  {
    if (v6 != 1935962992 && v6 != 1936290409) {
      goto LABEL_11;
    }
    return v4 | (v5 << 32);
  }

  if (!v6)
  {
    sub_8B1F8(@"VoiceOver", &cf);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)__p, (const __CFString *)cf);
    uint64_t v10 = a1[23];
    if ((v10 & 0x80u) == 0LL) {
      uint64_t v11 = a1[23];
    }
    else {
      uint64_t v11 = *((void *)a1 + 1);
    }
    uint64_t v12 = __p[23];
    int v13 = __p[23];
    if (__p[23] < 0) {
      uint64_t v12 = *(void *)&__p[8];
    }
    if (v11 == v12)
    {
      if (__p[23] >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = *(unsigned __int8 **)__p;
      }
      if ((v10 & 0x80) != 0)
      {
        BOOL v23 = memcmp(*(const void **)a1, v14, *((void *)a1 + 1)) == 0;
        goto LABEL_35;
      }

      if (a1[23])
      {
        uint64_t v15 = v10 - 1;
        BOOL v16 = a1;
        do
        {
          int v18 = *v16++;
          int v17 = v18;
          int v20 = *v14++;
          int v19 = v20;
          BOOL v21 = v15-- != 0;
          char v22 = v21;
          BOOL v23 = v17 == v19;
        }

        while (v17 == v19 && (v22 & 1) != 0);
LABEL_35:
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }

      BOOL v23 = 1;
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }

    else
    {
      BOOL v23 = 0;
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_36:
        if (cf) {
          CFRelease(cf);
        }
        if (v23)
        {
          uint64_t v5 = 1986818931LL;
          uint64_t v4 = 1668505974LL;
        }

        else
        {
          unsigned __int8 v24 = atomic_load((unsigned __int8 *)&qword_48CB80);
          if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_48CB80))
          {
            sub_88C9C(v245, @"AmbientSound");
            uint64_t v45 = (const __CFString **)sub_888D0(v245);
            sub_48100((uint64_t)&cf, *v45);
            CFTypeRef v46 = cf;
            v237[0] = (void *)v227;
            *(void **)((char *)v237 + 7) = *(void **)((char *)&v227 + 7);
            char v47 = HIBYTE(v227);
            __int128 v227 = 0uLL;
            CFTypeRef cf = 0LL;
            *(void *)std::string __p = v46;
            *(void **)&__p[8] = v237[0];
            *(void **)&__p[15] = *(void **)((char *)v237 + 7);
            __p[23] = v47;
            v237[0] = 0LL;
            *(void **)((char *)v237 + 7) = 0LL;
            *(_DWORD *)&__p[24] = 1667394407;
            sub_88C9C(v244, @"SoloAmbientSound");
            double v48 = (const __CFString **)sub_888D0(v244);
            sub_48100((uint64_t)&v223, *v48);
            __int16 v49 = v223;
            v235[0] = (void *)v224;
            *(void **)((char *)v235 + 7) = *(void **)((char *)&v224 + 7);
            char v50 = HIBYTE(v224);
            __int128 v224 = 0uLL;
            v223 = 0LL;
            v258 = v49;
            *(void **)v259 = v235[0];
            *(void **)&v259[7] = *(void **)((char *)v235 + 7);
            char v260 = v50;
            v235[0] = 0LL;
            *(void **)((char *)v235 + 7) = 0LL;
            int v261 = 1667394407;
            sub_88C9C(v243, @"MediaPlayback");
            uint64_t v51 = (const __CFString **)sub_888D0(v243);
            sub_48100((uint64_t)&v220, *v51);
            uint64_t v52 = v220;
            v233[0] = (void *)v221;
            *(void **)((char *)v233 + 7) = *(void **)((char *)&v221 + 7);
            char v53 = HIBYTE(v221);
            __int128 v221 = 0uLL;
            v220 = 0LL;
            v262 = v52;
            *(void **)v263 = v233[0];
            *(void **)&v263[7] = *(void **)((char *)v233 + 7);
            char v264 = v53;
            v233[0] = 0LL;
            *(void **)((char *)v233 + 7) = 0LL;
            int v265 = 1668505974;
            sub_88C9C(v242, @"Record");
            uint64_t v54 = (const __CFString **)sub_888D0(v242);
            sub_48100((uint64_t)&v217, *v54);
            unint64_t v55 = v217;
            v231[0] = (void *)v218;
            *(void **)((char *)v231 + 7) = *(void **)((char *)&v218 + 7);
            char v56 = HIBYTE(v218);
            __int128 v218 = 0uLL;
            v217 = 0LL;
            v266 = v55;
            *(void **)v267 = v231[0];
            *(void **)&v267[7] = *(void **)((char *)v231 + 7);
            char v268 = v56;
            v231[0] = 0LL;
            *(void **)((char *)v231 + 7) = 0LL;
            int v269 = 1668441443;
            sub_88C9C(v241, @"PlayAndRecord");
            uint64_t v57 = (const __CFString **)sub_888D0(v241);
            sub_48100((uint64_t)&v214, *v57);
            uint64_t v58 = v214;
            v229[0] = (void *)v215;
            *(void **)((char *)v229 + 7) = *(void **)((char *)&v215 + 7);
            char v59 = HIBYTE(v215);
            __int128 v215 = 0uLL;
            v214 = 0LL;
            v270 = v58;
            *(void **)v271 = v229[0];
            *(void **)&v271[7] = *(void **)((char *)v229 + 7);
            char v272 = v59;
            v229[0] = 0LL;
            *(void **)((char *)v229 + 7) = 0LL;
            int v273 = 1668309362;
            sub_88C9C(v240, @"Ringtone");
            uint64_t v60 = (const __CFString **)sub_888D0(v240);
            sub_48100((uint64_t)&v211, *v60);
            __int16 v61 = v211;
            v228[0] = (void *)v212;
            *(void **)((char *)v228 + 7) = *(void **)((char *)&v212 + 7);
            char v62 = HIBYTE(v212);
            __int128 v212 = 0uLL;
            v211 = 0LL;
            v274 = v61;
            *(void **)v275 = v228[0];
            *(void **)&v275[7] = *(void **)((char *)v228 + 7);
            char v276 = v62;
            v228[0] = 0LL;
            *(void **)((char *)v228 + 7) = 0LL;
            int v277 = 1668443751;
            sub_88C9C(v239, @"Voicemail");
            unint64_t v63 = (const __CFString **)sub_888D0(v239);
            sub_48100((uint64_t)&v208, *v63);
            uint64_t v64 = v208;
            v256[0] = v209;
            *(void *)((char *)v256 + 7) = *(void *)((char *)&v209 + 7);
            char v65 = HIBYTE(v209);
            __int128 v209 = 0uLL;
            v208 = 0LL;
            v278 = v64;
            *(void *)v279 = v256[0];
            *(void *)&v279[7] = *(void *)((char *)v256 + 7);
            char v280 = v65;
            v256[0] = 0LL;
            *(void *)((char *)v256 + 7) = 0LL;
            int v281 = 1668705568;
            sub_88C9C(v238, @"VoicemailGreeting");
            uint64_t v66 = (const __CFString **)sub_888D0(v238);
            sub_48100((uint64_t)&v205, *v66);
            uint64_t v67 = v205;
            v255[0] = v206;
            *(void *)((char *)v255 + 7) = *(void *)((char *)&v206 + 7);
            char v68 = HIBYTE(v206);
            __int128 v206 = 0uLL;
            v205 = 0LL;
            v282 = v67;
            *(void *)v283 = v255[0];
            *(void *)&v283[7] = *(void *)((char *)v255 + 7);
            char v284 = v68;
            v255[0] = 0LL;
            *(void *)((char *)v255 + 7) = 0LL;
            int v285 = 1668705639;
            sub_88C9C(v236, @"PhoneCall");
            uint64_t v69 = (const __CFString **)sub_888D0(v236);
            sub_48100((uint64_t)&v202, *v69);
            uint64_t v70 = v202;
            v254[0] = v203;
            HIBYTE(v254[0]) = BYTE7(v203);
            *(void *)&v287[7] = *(void *)((char *)&v203 + 7);
            char v71 = HIBYTE(v203);
            __int128 v203 = 0uLL;
            int v202 = 0LL;
            v286 = v70;
            *(void *)v287 = v254[0];
            char v288 = v71;
            v254[0] = 0LL;
            *(void *)((char *)v254 + 7) = 0LL;
            int v289 = 1668703084;
            sub_88C9C(v234, @"TTYCall");
            uint64_t v72 = (const __CFString **)sub_888D0(v234);
            sub_48100((uint64_t)&v199, *v72);
            uint64_t v73 = v199;
            v253[0] = v200;
            HIBYTE(v253[0]) = BYTE7(v200);
            *(void *)&v291[7] = *(void *)((char *)&v200 + 7);
            char v74 = HIBYTE(v200);
            __int128 v200 = 0uLL;
            int v199 = 0LL;
            v290 = v73;
            *(void *)v291 = v253[0];
            char v292 = v74;
            v253[0] = 0LL;
            *(void *)((char *)v253 + 7) = 0LL;
            int v293 = 1668576377;
            sub_88C9C(v232, @"Alarm");
            uint64_t v75 = (const __CFString **)sub_888D0(v232);
            sub_48100((uint64_t)&v196, *v75);
            uint64_t v76 = v196;
            v252[0] = v197;
            HIBYTE(v252[0]) = BYTE7(v197);
            *(void *)&v295[7] = *(void *)((char *)&v197 + 7);
            char v77 = HIBYTE(v197);
            __int128 v197 = 0uLL;
            v196 = 0LL;
            v294 = v76;
            *(void *)v295 = v252[0];
            char v296 = v77;
            v252[0] = 0LL;
            *(void *)((char *)v252 + 7) = 0LL;
            int v297 = 1667329133;
            sub_88C9C(v230, @"MediaPlaybackNoSpeaker");
            unint64_t v78 = (const __CFString **)sub_888D0(v230);
            sub_48100((uint64_t)&v193, *v78);
            unint64_t v79 = v193;
            v251[0] = v194;
            HIBYTE(v251[0]) = BYTE7(v194);
            *(void *)&v299[7] = *(void *)((char *)&v194 + 7);
            char v80 = HIBYTE(v194);
            __int128 v194 = 0uLL;
            unsigned __int8 v193 = 0LL;
            v298 = v79;
            *(void *)v299 = v251[0];
            char v300 = v80;
            v251[0] = 0LL;
            *(void *)((char *)v251 + 7) = 0LL;
            int v301 = 1668182896;
            sub_88C9C(&v225, @"Alert");
            unint64_t v81 = (const __CFString **)sub_888D0(&v225);
            sub_48100((uint64_t)&v190, *v81);
            int v82 = v190;
            v250[0] = v191;
            HIBYTE(v250[0]) = BYTE7(v191);
            *(void *)&v303[7] = *(void *)((char *)&v191 + 7);
            char v83 = HIBYTE(v191);
            __int128 v191 = 0uLL;
            __int16 v190 = 0LL;
            v302 = v82;
            *(void *)v303 = v250[0];
            char v304 = v83;
            v250[0] = 0LL;
            *(void *)((char *)v250 + 7) = 0LL;
            int v305 = 1667591521;
            sub_88C9C(&v222, @"EmergencyAlert");
            unint64_t v84 = (const __CFString **)sub_888D0(&v222);
            sub_48100((uint64_t)&v187, *v84);
            unint64_t v85 = v187;
            v249[0] = v188;
            HIBYTE(v249[0]) = BYTE7(v188);
            *(void *)&v307[7] = *(void *)((char *)&v188 + 7);
            char v86 = HIBYTE(v188);
            __int128 v188 = 0uLL;
            int v187 = 0LL;
            v306 = v85;
            *(void *)v307 = v249[0];
            char v308 = v86;
            v249[0] = 0LL;
            *(void *)((char *)v249 + 7) = 0LL;
            int v309 = 1667591521;
            sub_88C9C(&v219, @"EmergencyAlert_Muteable");
            int64_t v87 = (const __CFString **)sub_888D0(&v219);
            sub_48100((uint64_t)&v184, *v87);
            unint64_t v88 = v184;
            v248[0] = v185;
            HIBYTE(v248[0]) = BYTE7(v185);
            *(void *)&v311[7] = *(void *)((char *)&v185 + 7);
            char v89 = HIBYTE(v185);
            __int128 v185 = 0uLL;
            int v184 = 0LL;
            v310 = v88;
            *(void *)v311 = v248[0];
            char v312 = v89;
            v248[0] = 0LL;
            *(void *)((char *)v248 + 7) = 0LL;
            int v313 = 1667591533;
            sub_88C9C(&v216, @"FindMyPhone");
            char v90 = (const __CFString **)sub_888D0(&v216);
            sub_48100((uint64_t)&v181, *v90);
            uint64_t v91 = v181;
            v247[0] = v182;
            HIBYTE(v247[0]) = BYTE7(v182);
            *(void *)&v315[7] = *(void *)((char *)&v182 + 7);
            char v92 = HIBYTE(v182);
            __int128 v182 = 0uLL;
            v181 = 0LL;
            v314 = v91;
            *(void *)v315 = v247[0];
            char v316 = v92;
            v247[0] = 0LL;
            *(void *)((char *)v247 + 7) = 0LL;
            int v317 = 1667657072;
            sub_88C9C(&v213, @"FindMyAudioDevice");
            id v93 = (const __CFString **)sub_888D0(&v213);
            sub_48100((uint64_t)&v178, *v93);
            std::string::size_type v94 = v178;
            v246[0] = v179;
            *(void *)((char *)v246 + 7) = *(void *)((char *)&v179 + 7);
            char v95 = HIBYTE(v179);
            __int128 v179 = 0uLL;
            std::string::size_type v178 = 0LL;
            v318 = v94;
            *(void *)&v319[7] = *(void *)((char *)v246 + 7);
            *(void *)v319 = v246[0];
            char v320 = v95;
            v246[0] = 0LL;
            *(void *)((char *)v246 + 7) = 0LL;
            int v321 = 1667657057;
            sub_88C9C(&v210, @"InputInjection");
            int64x2_t v96 = (const __CFString **)sub_888D0(&v210);
            sub_48100((uint64_t)&v175, *v96);
            *(void *)&v323[7] = *(void *)((char *)&v176 + 7);
            std::string::size_type v97 = v175;
            *(void *)v323 = v176;
            char v98 = HIBYTE(v176);
            __int128 v176 = 0uLL;
            v175 = 0LL;
            v322 = v97;
            char v324 = v98;
            int v325 = 1667853930;
            sub_8892C(qword_48CB68, (void **)__p, 18LL);
            uint64_t v99 = 72LL;
            do
            {
              if (SHIBYTE(v256[v99]) < 0) {
                operator delete((void *)v255[v99]);
              }
              v99 -= 4LL;
            }

            while (v99 * 8);
            if (SHIBYTE(v176) < 0) {
              operator delete(v175);
            }
            sub_7A738(&v210);
            if (SHIBYTE(v179) < 0) {
              operator delete(v178);
            }
            sub_7A738(&v213);
            if (SHIBYTE(v182) < 0) {
              operator delete(v181);
            }
            sub_7A738(&v216);
            if (SHIBYTE(v185) < 0) {
              operator delete(v184);
            }
            sub_7A738(&v219);
            if (SHIBYTE(v188) < 0) {
              operator delete(v187);
            }
            sub_7A738(&v222);
            if (SHIBYTE(v191) < 0) {
              operator delete(v190);
            }
            sub_7A738(&v225);
            if (SHIBYTE(v194) < 0) {
              operator delete(v193);
            }
            sub_7A738(v230);
            if (SHIBYTE(v197) < 0) {
              operator delete(v196);
            }
            sub_7A738(v232);
            if (SHIBYTE(v200) < 0) {
              operator delete(v199);
            }
            sub_7A738(v234);
            if (SHIBYTE(v203) < 0) {
              operator delete(v202);
            }
            sub_7A738(v236);
            if (SHIBYTE(v206) < 0) {
              operator delete(v205);
            }
            sub_7A738(v238);
            if (SHIBYTE(v209) < 0) {
              operator delete(v208);
            }
            sub_7A738(v239);
            if (SHIBYTE(v212) < 0) {
              operator delete(v211);
            }
            sub_7A738(v240);
            if (SHIBYTE(v215) < 0) {
              operator delete(v214);
            }
            sub_7A738(v241);
            if (SHIBYTE(v218) < 0) {
              operator delete(v217);
            }
            sub_7A738(v242);
            if (SHIBYTE(v221) < 0) {
              operator delete(v220);
            }
            sub_7A738(v243);
            if (SHIBYTE(v224) < 0) {
              operator delete(v223);
            }
            sub_7A738(v244);
            if (SHIBYTE(v227) < 0) {
              operator delete((void *)cf);
            }
            sub_7A738(v245);
            __cxa_guard_release(&qword_48CB80);
          }

          os_log_t v25 = sub_889A4((uint64_t)qword_48CB68, (void **)a1);
          if (v25 == &qword_48CB68[1]) {
            unsigned int v26 = 0;
          }
          else {
            unsigned int v26 = *((_DWORD *)v25 + 14);
          }
          unsigned __int8 v27 = atomic_load((unsigned __int8 *)&qword_48CBA0);
          if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_48CBA0))
          {
            sub_88C9C(&v225, @"Default");
            CFDictionaryRef v100 = (const __CFString **)sub_888D0(&v225);
            sub_48100((uint64_t)&cf, *v100);
            CFTypeRef v101 = cf;
            v256[0] = v227;
            *(void *)((char *)v256 + 7) = *(void *)((char *)&v227 + 7);
            char v102 = HIBYTE(v227);
            __int128 v227 = 0uLL;
            CFTypeRef cf = 0LL;
            *(void *)std::string __p = v101;
            *(void *)&__p[8] = v256[0];
            *(void *)&__p[15] = *(void *)((char *)v256 + 7);
            __p[23] = v102;
            v256[0] = 0LL;
            *(void *)((char *)v256 + 7) = 0LL;
            *(_DWORD *)&__p[24] = 1768776806;
            sub_88C9C(&v222, @"VoiceChat");
            unint64_t v103 = (const __CFString **)sub_888D0(&v222);
            sub_48100((uint64_t)&v223, *v103);
            int64_t v104 = v223;
            v255[0] = v224;
            *(void *)((char *)v255 + 7) = *(void *)((char *)&v224 + 7);
            char v105 = HIBYTE(v224);
            __int128 v224 = 0uLL;
            v223 = 0LL;
            v258 = v104;
            *(void *)v259 = v255[0];
            *(void *)&v259[7] = *(void *)((char *)v255 + 7);
            char v260 = v105;
            v255[0] = 0LL;
            *(void *)((char *)v255 + 7) = 0LL;
            int v261 = 1768779619;
            sub_88C9C(&v219, @"RemoteVoiceChat");
            unint64_t v106 = (const __CFString **)sub_888D0(&v219);
            sub_48100((uint64_t)&v220, *v106);
            unint64_t v107 = v220;
            v254[0] = v221;
            *(void *)((char *)v254 + 7) = *(void *)((char *)&v221 + 7);
            char v108 = HIBYTE(v221);
            __int128 v221 = 0uLL;
            v220 = 0LL;
            v262 = v107;
            *(void *)v263 = v254[0];
            *(void *)&v263[7] = *(void *)((char *)v254 + 7);
            char v264 = v108;
            v254[0] = 0LL;
            *(void *)((char *)v254 + 7) = 0LL;
            int v265 = 1919776355;
            sub_88C9C(&v216, @"GameChat");
            std::string::size_type v109 = (const __CFString **)sub_888D0(&v216);
            sub_48100((uint64_t)&v217, *v109);
            unsigned __int8 v110 = v217;
            v253[0] = v218;
            *(void *)((char *)v253 + 7) = *(void *)((char *)&v218 + 7);
            char v111 = HIBYTE(v218);
            __int128 v218 = 0uLL;
            v217 = 0LL;
            v266 = v110;
            *(void *)v267 = v253[0];
            *(void *)&v267[7] = *(void *)((char *)v253 + 7);
            char v268 = v111;
            v253[0] = 0LL;
            *(void *)((char *)v253 + 7) = 0LL;
            int v269 = 1735222132;
            sub_88C9C(&v213, @"VideoRecording");
            uint64_t v112 = (const __CFString **)sub_888D0(&v213);
            sub_48100((uint64_t)&v214, *v112);
            int64x2_t v113 = v214;
            v252[0] = v215;
            *(void *)((char *)v252 + 7) = *(void *)((char *)&v215 + 7);
            char v114 = HIBYTE(v215);
            __int128 v215 = 0uLL;
            v214 = 0LL;
            v270 = v113;
            *(void *)v271 = v252[0];
            *(void *)&v271[7] = *(void *)((char *)v252 + 7);
            char v272 = v114;
            v252[0] = 0LL;
            *(void *)((char *)v252 + 7) = 0LL;
            int v273 = 1768781426;
            sub_88C9C(&v210, @"Measurement");
            std::string::size_type v115 = (const __CFString **)sub_888D0(&v210);
            sub_48100((uint64_t)&v211, *v115);
            uint64_t v116 = v211;
            v251[0] = v212;
            *(void *)((char *)v251 + 7) = *(void *)((char *)&v212 + 7);
            char v117 = HIBYTE(v212);
            __int128 v212 = 0uLL;
            v211 = 0LL;
            v274 = v116;
            *(void *)v275 = v251[0];
            *(void *)&v275[7] = *(void *)((char *)v251 + 7);
            char v276 = v117;
            v251[0] = 0LL;
            *(void *)((char *)v251 + 7) = 0LL;
            int v277 = 1836281204;
            sub_88C9C(&v207, @"MoviePlayback");
            int64_t v118 = (const __CFString **)sub_888D0(&v207);
            sub_48100((uint64_t)&v208, *v118);
            unint64_t v119 = v208;
            v250[0] = v209;
            *(void *)((char *)v250 + 7) = *(void *)((char *)&v209 + 7);
            char v120 = HIBYTE(v209);
            __int128 v209 = 0uLL;
            v208 = 0LL;
            v278 = v119;
            *(void *)v279 = v250[0];
            *(void *)&v279[7] = *(void *)((char *)v250 + 7);
            char v280 = v120;
            v250[0] = 0LL;
            *(void *)((char *)v250 + 7) = 0LL;
            int v281 = 1836021360;
            sub_88C9C(&v204, @"SpokenAudio");
            unsigned int v121 = (const __CFString **)sub_888D0(&v204);
            sub_48100((uint64_t)&v205, *v121);
            uint64_t v122 = v205;
            v249[0] = v206;
            *(void *)((char *)v249 + 7) = *(void *)((char *)&v206 + 7);
            char v123 = HIBYTE(v206);
            __int128 v206 = 0uLL;
            v205 = 0LL;
            v282 = v122;
            *(void *)v283 = v249[0];
            *(void *)&v283[7] = *(void *)((char *)v249 + 7);
            char v284 = v123;
            v249[0] = 0LL;
            *(void *)((char *)v249 + 7) = 0LL;
            int v285 = 1936747374;
            sub_88C9C(&v201, @"VideoChat");
            uint64_t v124 = (const __CFString **)sub_888D0(&v201);
            sub_48100((uint64_t)&v202, *v124);
            std::string::size_type v125 = v202;
            v248[0] = v203;
            HIBYTE(v248[0]) = BYTE7(v203);
            *(void *)&v287[7] = *(void *)((char *)&v203 + 7);
            char v126 = HIBYTE(v203);
            __int128 v203 = 0uLL;
            int v202 = 0LL;
            v286 = v125;
            *(void *)v287 = v248[0];
            char v288 = v126;
            v248[0] = 0LL;
            *(void *)((char *)v248 + 7) = 0LL;
            int v289 = 1768781411;
            sub_88C9C(&v198, @"SpeechRecognition");
            int64x2_t v127 = (const __CFString **)sub_888D0(&v198);
            sub_48100((uint64_t)&v199, *v127);
            std::string::size_type v128 = v199;
            v247[0] = v200;
            HIBYTE(v247[0]) = BYTE7(v200);
            *(void *)&v291[7] = *(void *)((char *)&v200 + 7);
            char v129 = HIBYTE(v200);
            __int128 v200 = 0uLL;
            int v199 = 0LL;
            v290 = v128;
            *(void *)v291 = v247[0];
            char v292 = v129;
            v247[0] = 0LL;
            *(void *)((char *)v247 + 7) = 0LL;
            int v293 = 1987208039;
            sub_88C9C(&v195, @"VoicePrompt");
            AudioObjectID v130 = (const __CFString **)sub_888D0(&v195);
            sub_48100((uint64_t)&v196, *v130);
            uint64_t v131 = v196;
            v246[0] = v197;
            HIBYTE(v246[0]) = BYTE7(v197);
            *(void *)&v295[7] = *(void *)((char *)&v197 + 7);
            char v132 = HIBYTE(v197);
            __int128 v197 = 0uLL;
            v196 = 0LL;
            v294 = v131;
            *(void *)v295 = v246[0];
            char v296 = v132;
            v246[0] = 0LL;
            *(void *)((char *)v246 + 7) = 0LL;
            int v297 = 1987080813;
            sub_88C9C(&v192, @"Raw");
            char v133 = (const __CFString **)sub_888D0(&v192);
            sub_48100((uint64_t)&v193, *v133);
            CFTypeRef v134 = v193;
            v245[0] = (const void *)v194;
            HIBYTE(v245[0]) = BYTE7(v194);
            *(void *)&v299[7] = *(void *)((char *)&v194 + 7);
            char v135 = HIBYTE(v194);
            __int128 v194 = 0uLL;
            unsigned __int8 v193 = 0LL;
            v298 = v134;
            *(const void **)v299 = v245[0];
            char v300 = v135;
            memset(v245, 0, 15);
            int v301 = 1918990112;
            sub_88C9C(&v189, @"VoiceMessages");
            int v136 = (const __CFString **)sub_888D0(&v189);
            sub_48100((uint64_t)&v190, *v136);
            CFStringRef v137 = v190;
            v244[0] = (const void *)v191;
            HIBYTE(v244[0]) = BYTE7(v191);
            *(void *)&v303[7] = *(void *)((char *)&v191 + 7);
            char v138 = HIBYTE(v191);
            __int128 v191 = 0uLL;
            __int16 v190 = 0LL;
            v302 = v137;
            *(const void **)v303 = v244[0];
            char v304 = v138;
            memset(v244, 0, 15);
            int v305 = 1986884455;
            sub_88C9C(&v186, @"FindMyPhone");
            unsigned __int8 v139 = (const __CFString **)sub_888D0(&v186);
            sub_48100((uint64_t)&v187, *v139);
            int v140 = v187;
            v243[0] = (const void *)v188;
            HIBYTE(v243[0]) = BYTE7(v188);
            *(void *)&v307[7] = *(void *)((char *)&v188 + 7);
            char v141 = HIBYTE(v188);
            __int128 v188 = 0uLL;
            int v187 = 0LL;
            v306 = v140;
            *(const void **)v307 = v243[0];
            char v308 = v141;
            memset(v243, 0, 15);
            int v309 = 1768776806;
            sub_88C9C(&v183, @"HearingAccessibility");
            int v142 = (const __CFString **)sub_888D0(&v183);
            sub_48100((uint64_t)&v184, *v142);
            int v143 = v184;
            v242[0] = (const void *)v185;
            HIBYTE(v242[0]) = BYTE7(v185);
            *(void *)&v311[7] = *(void *)((char *)&v185 + 7);
            char v144 = HIBYTE(v185);
            __int128 v185 = 0uLL;
            int v184 = 0LL;
            v310 = v143;
            *(const void **)v311 = v242[0];
            char v312 = v144;
            memset(v242, 0, 15);
            int v313 = 1751212899;
            sub_88C9C(&v180, @"LivePhoto");
            BOOL v145 = (const __CFString **)sub_888D0(&v180);
            sub_48100((uint64_t)&v181, *v145);
            BOOL v146 = v181;
            v241[0] = (const void *)v182;
            HIBYTE(v241[0]) = BYTE7(v182);
            *(void *)&v315[7] = *(void *)((char *)&v182 + 7);
            char v147 = HIBYTE(v182);
            __int128 v182 = 0uLL;
            v181 = 0LL;
            v314 = v146;
            *(const void **)v315 = v241[0];
            char v316 = v147;
            memset(v241, 0, 15);
            int v317 = 1768778864;
            sub_88C9C(&v177, @"SOSNotification");
            id v148 = (const __CFString **)sub_888D0(&v177);
            sub_48100((uint64_t)&v178, *v148);
            os_log_t v149 = v178;
            v240[0] = (const void *)v179;
            *(const void **)((char *)v240 + 7) = *(const void **)((char *)&v179 + 7);
            char v150 = HIBYTE(v179);
            __int128 v179 = 0uLL;
            std::string::size_type v178 = 0LL;
            v318 = v149;
            *(const void **)&v319[7] = *(const void **)((char *)v240 + 7);
            *(const void **)v319 = v240[0];
            char v320 = v150;
            memset(v240, 0, 15);
            int v321 = 1936683886;
            sub_88C9C(&v174, @"SpatialRecording");
            std::string v151 = (const __CFString **)sub_888D0(&v174);
            sub_48100((uint64_t)&v175, *v151);
            uint32_t v152 = v175;
            v239[0] = (const void *)v176;
            *(const void **)((char *)v239 + 7) = *(const void **)((char *)&v176 + 7);
            char v153 = HIBYTE(v176);
            __int128 v176 = 0uLL;
            v175 = 0LL;
            v322 = v152;
            *(const void **)&v323[7] = *(const void **)((char *)v239 + 7);
            *(const void **)v323 = v239[0];
            char v324 = v153;
            memset(v239, 0, 15);
            int v325 = 1936749157;
            sub_88C9C(&v173, @"SoundRecognition");
            os_log_t v154 = (const __CFString **)sub_888D0(&v173);
            sub_48100((uint64_t)v237, *v154);
            std::string v155 = v237[0];
            v238[0] = v237[1];
            *(const void **)((char *)v238 + 7) = *(const void **)((char *)&v237[1] + 7);
            char v156 = HIBYTE(v237[2]);
            memset(v237, 0, sizeof(v237));
            v326 = v155;
            *(const void **)&v327[7] = *(const void **)((char *)v238 + 7);
            *(const void **)v327 = v238[0];
            char v328 = v156;
            memset(v238, 0, 15);
            int v329 = 1768776806;
            sub_88C9C(&v172, @"VideoChatForMedia");
            uint64_t v157 = (const __CFString **)sub_888D0(&v172);
            sub_48100((uint64_t)v235, *v157);
            std::string v158 = v235[0];
            v236[0] = v235[1];
            *(const void **)((char *)v236 + 7) = *(const void **)((char *)&v235[1] + 7);
            char v159 = HIBYTE(v235[2]);
            memset(v235, 0, sizeof(v235));
            v330 = v158;
            *(const void **)&v331[7] = *(const void **)((char *)v236 + 7);
            *(const void **)v331 = v236[0];
            char v332 = v159;
            memset(v236, 0, 15);
            int v333 = 1768781411;
            sub_48E98(v233, @"EchoCancellationVoice");
            CFTypeRef v160 = v233[0];
            v234[0] = v233[1];
            *(const void **)((char *)v234 + 7) = *(const void **)((char *)&v233[1] + 7);
            char v161 = HIBYTE(v233[2]);
            memset(v233, 0, sizeof(v233));
            v334 = v160;
            *(const void **)&v335[7] = *(const void **)((char *)v234 + 7);
            *(const void **)v335 = v234[0];
            char v336 = v161;
            memset(v234, 0, 15);
            int v337 = 1701017120;
            sub_48E98(v231, @"VoiceAssistant");
            v162 = v231[0];
            v232[0] = v231[1];
            *(const void **)((char *)v232 + 7) = *(const void **)((char *)&v231[1] + 7);
            char v163 = HIBYTE(v231[2]);
            memset(v231, 0, sizeof(v231));
            v338 = v162;
            *(const void **)&v339[7] = *(const void **)((char *)v232 + 7);
            *(const void **)v339 = v232[0];
            char v340 = v163;
            memset(v232, 0, 15);
            int v341 = 1986098036;
            sub_48E98(v229, @"EchoCancellationInput");
            v164 = v229[0];
            v230[0] = v229[1];
            *(const void **)((char *)v230 + 7) = *(const void **)((char *)&v229[1] + 7);
            char v165 = HIBYTE(v229[2]);
            memset(v229, 0, sizeof(v229));
            v342 = v164;
            *(const void **)&v343[7] = *(const void **)((char *)v230 + 7);
            *(const void **)v343 = v230[0];
            char v344 = v165;
            memset(v230, 0, 15);
            int v345 = 1701013792;
            sub_88C9C(&v171, @"LowLatency");
            v166 = (const __CFString **)sub_888D0(&v171);
            sub_48100((uint64_t)v228, *v166);
            *(void **)&v347[7] = *(void **)((char *)&v228[1] + 7);
            char v167 = v228[0];
            *(void **)v347 = v228[1];
            char v168 = HIBYTE(v228[2]);
            memset(v228, 0, sizeof(v228));
            v346 = v167;
            char v348 = v168;
            int v349 = 1768776806;
            sub_8892C(qword_48CB88, (void **)__p, 24LL);
            uint64_t v169 = 96LL;
            do
            {
              if (SHIBYTE(v256[v169]) < 0) {
                operator delete((void *)v255[v169]);
              }
              v169 -= 4LL;
            }

            while (v169 * 8);
            if (SHIBYTE(v228[2]) < 0) {
              operator delete(v228[0]);
            }
            sub_7A738(&v171);
            if (SHIBYTE(v229[2]) < 0) {
              operator delete(v229[0]);
            }
            if (SHIBYTE(v231[2]) < 0) {
              operator delete(v231[0]);
            }
            if (SHIBYTE(v233[2]) < 0) {
              operator delete(v233[0]);
            }
            if (SHIBYTE(v235[2]) < 0) {
              operator delete(v235[0]);
            }
            sub_7A738(&v172);
            if (SHIBYTE(v237[2]) < 0) {
              operator delete(v237[0]);
            }
            sub_7A738(&v173);
            if (SHIBYTE(v176) < 0) {
              operator delete(v175);
            }
            sub_7A738(&v174);
            if (SHIBYTE(v179) < 0) {
              operator delete(v178);
            }
            sub_7A738(&v177);
            if (SHIBYTE(v182) < 0) {
              operator delete(v181);
            }
            sub_7A738(&v180);
            if (SHIBYTE(v185) < 0) {
              operator delete(v184);
            }
            sub_7A738(&v183);
            if (SHIBYTE(v188) < 0) {
              operator delete(v187);
            }
            sub_7A738(&v186);
            if (SHIBYTE(v191) < 0) {
              operator delete(v190);
            }
            sub_7A738(&v189);
            if (SHIBYTE(v194) < 0) {
              operator delete(v193);
            }
            sub_7A738(&v192);
            if (SHIBYTE(v197) < 0) {
              operator delete(v196);
            }
            sub_7A738(&v195);
            if (SHIBYTE(v200) < 0) {
              operator delete(v199);
            }
            sub_7A738(&v198);
            if (SHIBYTE(v203) < 0) {
              operator delete(v202);
            }
            sub_7A738(&v201);
            if (SHIBYTE(v206) < 0) {
              operator delete(v205);
            }
            sub_7A738(&v204);
            if (SHIBYTE(v209) < 0) {
              operator delete(v208);
            }
            sub_7A738(&v207);
            if (SHIBYTE(v212) < 0) {
              operator delete(v211);
            }
            sub_7A738(&v210);
            if (SHIBYTE(v215) < 0) {
              operator delete(v214);
            }
            sub_7A738(&v213);
            if (SHIBYTE(v218) < 0) {
              operator delete(v217);
            }
            sub_7A738(&v216);
            if (SHIBYTE(v221) < 0) {
              operator delete(v220);
            }
            sub_7A738(&v219);
            if (SHIBYTE(v224) < 0) {
              operator delete(v223);
            }
            sub_7A738(&v222);
            if (SHIBYTE(v227) < 0) {
              operator delete((void *)cf);
            }
            sub_7A738(&v225);
            __cxa_guard_release(&qword_48CBA0);
          }

          os_log_t v28 = sub_889A4((uint64_t)qword_48CB88, (void **)a2);
          if (v28 == &qword_48CB88[1])
          {
            int64x2_t v29 = (os_log_s *)*(id *)sub_138E8(20);
            uint64_t v30 = v29;
            if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              if ((a2[23] & 0x80u) == 0) {
                uint64_t v31 = a2;
              }
              else {
                uint64_t v31 = *(void **)a2;
              }
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "AudioSessionUtilities.mm";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 336;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v31;
              _os_log_impl(&dword_0, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX mode %s not recognized", __p, 0x1Cu);
            }

            uint64_t v5 = 1768776806LL;
          }

          else
          {
            uint64_t v5 = *((unsigned int *)v28 + 14);
          }

          if (v26 != 1668309362) {
            goto LABEL_85;
          }
          CFRetain(@"SoundRecognition");
          sub_7F234(&cf, @"SoundRecognition");
          if (!cf)
          {
            v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v170, "Could not construct");
          }

          sub_48100((uint64_t)__p, (const __CFString *)cf);
          uint64_t v32 = a2[23];
          if ((v32 & 0x80u) == 0LL) {
            uint64_t v33 = a2[23];
          }
          else {
            uint64_t v33 = *((void *)a2 + 1);
          }
          uint64_t v34 = __p[23];
          int v35 = __p[23];
          if (__p[23] < 0) {
            uint64_t v34 = *(void *)&__p[8];
          }
          if (v33 == v34)
          {
            float v36 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            if ((v32 & 0x80) != 0)
            {
              BOOL v43 = memcmp(*(const void **)a2, v36, *((void *)a2 + 1)) == 0;
            }

            else if (a2[23])
            {
              uint64_t v37 = v32 - 1;
              do
              {
                int v39 = *a2++;
                int v38 = v39;
                int v41 = *v36++;
                int v40 = v41;
                BOOL v21 = v37-- != 0;
                char v42 = v21;
                BOOL v43 = v38 == v40;
              }

              while (v38 == v40 && (v42 & 1) != 0);
            }

            else
            {
              BOOL v43 = 1;
            }
          }

          else
          {
            BOOL v43 = 0;
          }

          if (v35 < 0) {
            operator delete(*(void **)__p);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v43) {
            uint64_t v4 = 1668441443LL;
          }
          else {
LABEL_85:
          }
            uint64_t v4 = v26;
        }

        return v4 | (v5 << 32);
      }
    }

void sub_8A930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, const void *a11, const void *a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, const void *a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, const void *a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, const void *a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, const void *a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,const void *a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,const void *a62,void *a63)
{
  uint64_t v92 = 768LL;
  while (1)
  {
    v92 -= 32LL;
    if (!v92)
    {
      if (SLOBYTE(STACK[0x277]) < 0) {
        operator delete((void *)STACK[0x260]);
      }
      sub_7A738(&a10);
      if (SLOBYTE(STACK[0x28F]) < 0) {
        operator delete((void *)STACK[0x278]);
      }
      if (SLOBYTE(STACK[0x2B7]) < 0) {
        operator delete((void *)STACK[0x2A0]);
      }
      if (SLOBYTE(STACK[0x2DF]) < 0) {
        operator delete((void *)STACK[0x2C8]);
      }
      if (SLOBYTE(STACK[0x307]) < 0) {
        operator delete((void *)STACK[0x2F0]);
      }
      sub_7A738(&a11);
      if (SLOBYTE(STACK[0x32F]) < 0) {
        operator delete((void *)STACK[0x318]);
      }
      sub_7A738(&a12);
      if (a19 < 0) {
        operator delete(a14);
      }
      sub_7A738(&a13);
      if (a26 < 0) {
        operator delete(a21);
      }
      sub_7A738(&a20);
      if (a33 < 0) {
        operator delete(a28);
      }
      sub_7A738(&a27);
      if (a40 < 0) {
        operator delete(a35);
      }
      sub_7A738(&a34);
      if (a47 < 0) {
        operator delete(a42);
      }
      sub_7A738(&a41);
      if (a54 < 0) {
        operator delete(a49);
      }
      sub_7A738(&a48);
      if (a61 < 0) {
        operator delete(a56);
      }
      sub_7A738(&a55);
      if (a68 < 0) {
        operator delete(a63);
      }
      sub_7A738(&a62);
      if (a72 < 0) {
        operator delete(a70);
      }
      sub_7A738(&a69);
      if (a75 < 0) {
        operator delete(a74);
      }
      sub_7A738(&a73);
      if (a78 < 0) {
        operator delete(a77);
      }
      sub_7A738(&a76);
      if (a81 < 0) {
        operator delete(a80);
      }
      sub_7A738(&a79);
      if (a84 < 0) {
        operator delete(a83);
      }
      sub_7A738(&a82);
      if (a87 < 0) {
        operator delete(a86);
      }
      sub_7A738(&a85);
      if (a90 < 0) {
        operator delete(a89);
      }
      sub_7A738(&a88);
      if (SLOBYTE(STACK[0x21F]) < 0) {
        operator delete((void *)STACK[0x208]);
      }
      sub_7A738((const void **)&STACK[0x200]);
      if (SLOBYTE(STACK[0x23F]) < 0) {
        operator delete((void *)STACK[0x228]);
      }
      sub_7A738((const void **)&STACK[0x220]);
      if (SLOBYTE(STACK[0x25F]) < 0) {
        operator delete((void *)STACK[0x248]);
      }
      sub_7A738((const void **)&STACK[0x240]);
      __cxa_guard_abort(&qword_48CBA0);
      _Unwind_Resume(a1);
    }
  }

void *sub_8B1F8@<X0>(CFStringRef format@<X0>, void *a2@<X8>, ...)
{
  CFStringRef v3 = CFStringCreateWithFormatAndArguments(0LL, 0LL, format, va);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return sub_7F234(a2, v3);
}

void sub_8B270(_Unwind_Exception *a1)
{
}

void sub_8B284(uint64_t a1, CFTypeRef cf)
{
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (cf) {
    CFRetain(cf);
  }
  sub_3617C(&v119, cf);
  if (!v119)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (!sub_8C7A8((const __CFDictionary *)v119, @"session routing information"))
  {
    uint64_t v95 = sub_138E8(13);
    id v96 = sub_8C7D4(1, *(void **)v95, *(void *)(v95 + 8));
    std::string::size_type v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
    char v98 = v97;
    if (v97 && os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioSessionUtilities.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 377;
      _os_log_impl(&dword_0, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v99 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v99, "Precondition failure.");
  }

  CFStringRef v3 = (const __CFDictionary *)v119;
  if (!v119)
  {
    CFDictionaryRef v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v100, "Could not construct");
  }

  CFStringRef v4 = CFStringCreateWithBytes(0LL, (const UInt8 *)"session routing information", 27LL, 0x8000100u, 0);
  *(void *)unsigned int v121 = v4;
  if (!v4)
  {
    CFTypeRef v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Could not construct");
  }

  int Value = CFDictionaryGetValue(v3, v4);
  CFRelease(v4);
  if (!Value) {
    goto LABEL_143;
  }
  CFRetain(Value);
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(Value);
LABEL_143:
    buf[0] = 0;
    buf[8] = 0;
    int64_t v118 = 0LL;
    sub_8D840((uint64_t)buf);
    goto LABEL_144;
  }

  *(void *)AudioObjectPropertyAddress buf = Value;
  buf[8] = 1;
  CFRetain(Value);
  int64_t v118 = Value;
  sub_8D840((uint64_t)buf);
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  CFIndex v105 = CFArrayGetCount((CFArrayRef)Value);
  if (!Count) {
    goto LABEL_141;
  }
  unint64_t v7 = 0LL;
  int64_t v104 = Value;
  do
  {
    if (v7 == v105) {
      break;
    }
    sub_36030(&cfa, (CFArrayRef)Value, v7);
    if (!cfa || (CFTypeID v8 = CFGetTypeID(cfa), v8 != CFDictionaryGetTypeID()))
    {
      uint64_t v79 = sub_138E8(13);
      id v80 = sub_8C7D4(1, *(void **)v79, *(void *)(v79 + 8));
      unint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      int v82 = v81;
      if (v81 && os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioSessionUtilities.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 385;
        _os_log_impl(&dword_0, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      char v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v83, "Precondition failure.");
    }

    sub_360D4(theDict, &cfa);
    for (uint64_t i = 0LL; i != 5; ++i)
    {
      if (!theDict[0])
      {
        char v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
      }

      uint64_t v10 = off_46DBC0[i];
      if (!v10 || !CFDictionaryContainsKey(theDict[0], off_46DBC0[i]))
      {
        uint64_t v72 = sub_138E8(13);
        id v73 = sub_8C7D4(1, *(void **)v72, *(void *)(v72 + 8));
        char v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
        uint64_t v75 = v74;
        if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v121 = 136315650;
          *(void *)&v121[4] = "VirtualAudio_AudioSessionInfo.h";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 133;
          *(_WORD *)&v121[18] = 2112;
          *(void *)&v121[20] = v10;
          _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioPlugInSessionDescriptionKey - %@ is required",  v121,  0x1Cu);
        }

        uint64_t v76 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v76 = &off_4865A0;
        v76[2] = 1852797029;
      }
    }

    buf[0] = 0;
    memset(&buf[8], 0, 32);
    memset(v136, 0, sizeof(v136));
    char v138 = 0;
    char v139 = 0;
    __int128 v140 = 0u;
    memset(v141, 0, sizeof(v141));
    __int128 v142 = 0u;
    memset(v143, 0, sizeof(v143));
    char v144 = 1;
    char v148 = 0;
    BOOL v149 = 0;
    CFTypeRef v146 = 0LL;
    LOBYTE(v147) = 0;
    __int128 v145 = 0uLL;
    int v157 = 0;
    *(_OWORD *)&v154[8] = 0u;
    uint64_t v152 = 1065353216LL;
    memset(v151, 0, sizeof(v151));
    memset(v150, 0, sizeof(v150));
    __int128 v153 = 0u;
    *(_OWORD *)os_log_t v154 = 0u;
    *(_DWORD *)&v154[16] = 1065353216;
    memset(v155, 0, sizeof(v155));
    int v156 = 1065353216;
    sub_46DB4((uint64_t)v121, theDict);
    *(void *)&buf[8] = *(void *)v121;
    sub_48288((uint64_t *)&buf[16]);
    *(_OWORD *)&buf[16] = *(_OWORD *)&v121[8];
    *(void *)&_BYTE buf[32] = *(void *)&v121[24];
    memset(&v121[8], 0, 24);
    sub_48288((uint64_t *)v136);
    v136[0] = v122;
    *(void *)&v136[1] = v123;
    char v123 = 0LL;
    __int128 v122 = 0uLL;
    if (*((void *)&v136[1] + 1))
    {
      *(void *)&v136[2] = *((void *)&v136[1] + 1);
      operator delete(*((void **)&v136[1] + 1));
    }

    *(_OWORD *)((char *)&v136[1] + std::ostream::~ostream(v2, v3 + 8) = v124;
    *((void *)&v136[2] + 1) = v125;
    uint64_t v125 = 0LL;
    __int128 v124 = 0uLL;
    v120[0] = &v122;
    sub_8CD60((void ***)v120);
    v120[0] = &v121[8];
    sub_8CD60((void ***)v120);
    if (!theDict[0])
    {
      unint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
      goto LABEL_163;
    }

    uint64_t v11 = (const __CFNumber *)sub_8D878(theDict[0], "session id");
    if (!v11)
    {
      unint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not find item");
LABEL_163:
    }

    unsigned int v137 = sub_8D7E0(v11);
    if (!theDict[0])
    {
      unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
      goto LABEL_165;
    }

    uint64_t v12 = (const __CFString *)sub_7D1E8(theDict[0], "bundle id");
    if (!v12)
    {
      unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not find item");
LABEL_165:
    }

    sub_48100((uint64_t)v121, v12);
    if (SHIBYTE(v141[0]) < 0) {
      operator delete((void *)v140);
    }
    __int128 v140 = *(_OWORD *)v121;
    v141[0] = *(void *)&v121[16];
    int v13 = theDict[0];
    if (!theDict[0])
    {
      char v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      goto LABEL_184;
    }

    CFStringRef v14 = CFStringCreateWithBytes(0LL, (const UInt8 *)"category", 8LL, 0x8000100u, 0);
    v120[0] = v14;
    if (!v14)
    {
      int64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v87, "Could not construct");
    }

    uint64_t v15 = (const __CFString *)CFDictionaryGetValue(v13, v14);
    CFRelease(v14);
    if (!v15)
    {
      char v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not find item");
LABEL_184:
    }

    sub_48100((uint64_t)v121, v15);
    if (SHIBYTE(v141[3]) < 0) {
      operator delete((void *)v141[1]);
    }
    *(_OWORD *)&v141[1] = *(_OWORD *)v121;
    v141[3] = *(void *)&v121[16];
    BOOL v16 = theDict[0];
    if (!theDict[0])
    {
      unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not construct");
      goto LABEL_182;
    }

    CFStringRef v17 = CFStringCreateWithBytes(0LL, (const UInt8 *)"mode", 4LL, 0x8000100u, 0);
    v120[0] = v17;
    if (!v17)
    {
      uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not construct");
    }

    int v18 = (const __CFString *)CFDictionaryGetValue(v16, v17);
    CFRelease(v17);
    if (!v18)
    {
      unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not find item");
LABEL_182:
    }

    sub_48100((uint64_t)v121, v18);
    if (SHIBYTE(v143[0]) < 0) {
      operator delete((void *)v142);
    }
    __int128 v142 = *(_OWORD *)v121;
    v143[0] = *(void *)&v121[16];
    if (!theDict[0])
    {
      char v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v89, "Could not construct");
    }

    int v19 = (const __CFNumber *)sub_475EC(theDict[0], "isolated use case ID");
    if (v19)
    {
      int v20 = sub_36328(v19);
      if ((unint64_t)v20 >> 32)
      {
        if ((_DWORD)v20)
        {
          int v147 = (int)v20;
          char v148 = 1;
        }
      }
    }

    if (!theDict[0])
    {
      uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
    }

    BOOL v21 = sub_475EC(theDict[0], "requested port types");
    if (!v21) {
      goto LABEL_71;
    }
    CFTypeRef v22 = v21;
    CFRetain(v21);
    CFTypeID v23 = CFGetTypeID(v22);
    if (v23 != CFArrayGetTypeID())
    {
      CFRelease(v22);
LABEL_71:
      v121[0] = 0;
      v121[8] = 0;
      v120[0] = 0LL;
      sub_8D840((uint64_t)v121);
      unsigned __int8 v24 = 0LL;
      __int128 v111 = 0u;
      goto LABEL_74;
    }

    *(void *)unsigned int v121 = v22;
    v121[8] = 1;
    CFRetain(v22);
    v120[0] = v22;
    sub_8D840((uint64_t)v121);
    CFIndex v110 = CFArrayGetCount((CFArrayRef)v22);
    CFIndex v109 = CFArrayGetCount((CFArrayRef)v22);
    if (!v110)
    {
      unsigned __int8 v24 = 0LL;
      __int128 v111 = 0u;
LABEL_73:
      CFRelease(v22);
      goto LABEL_74;
    }

    unsigned __int8 v24 = 0LL;
    unint64_t v25 = 0LL;
    __int128 v111 = 0u;
    unint64_t v108 = v7;
    while (v25 != v109)
    {
      sub_36030(v121, (CFArrayRef)v22, v25);
      unsigned int v26 = *(const void **)v121;
      if (!*(void *)v121)
      {
        unint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v78, "Could not construct");
      }

      unsigned int v27 = sub_8D7E0(*(const __CFNumber **)v121);
      unsigned int v28 = v27;
      uint64_t v29 = *((void *)&v111 + 1);
      *(void *)&__int128 v30 = v111;
      if (*((void *)&v111 + 1) >= (unint64_t)v24)
      {
        uint64_t v31 = (uint64_t)(*((void *)&v111 + 1) - v111) >> 2;
        unint64_t v32 = v31 + 1;
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_7A890(v33);
          uint64_t v36 = v35;
        }

        else
        {
          uint64_t v34 = 0LL;
          uint64_t v36 = 0LL;
        }

        uint64_t v37 = (unsigned int *)&v34[4 * v31];
        unsigned int *v37 = v28;
        int v38 = v37 + 1;
        while (v29 != (void)v111)
        {
          unsigned int v39 = *(_DWORD *)(v29 - 4);
          v29 -= 4LL;
          *--uint64_t v37 = v39;
        }

        if ((void)v111)
        {
          operator delete((void *)v111);
          unsigned int v26 = *(const void **)v121;
        }

        unsigned __int8 v24 = &v34[4 * v36];
        *(void *)&__int128 v40 = v37;
        *((void *)&v40 + 1) = v38;
        __int128 v111 = v40;
        unint64_t v7 = v108;
        if (!v26) {
          goto LABEL_67;
        }
      }

      else
      {
        **((_DWORD **)&v111 + 1) = v27;
        *((void *)&v30 + 1) = *((void *)&v111 + 1) + 4LL;
        __int128 v111 = v30;
      }

      CFRelease(v26);
LABEL_67:
      if (++v25 == v110) {
        break;
      }
    }

    CFTypeRef v22 = v120[0];
    if (v120[0]) {
      goto LABEL_73;
    }
LABEL_74:
    if (v143[1])
    {
      v143[2] = v143[1];
      operator delete((void *)v143[1]);
    }

    *(_OWORD *)&v143[1] = v111;
    v143[3] = v24;
    if (!theDict[0])
    {
      uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
    }

    int v41 = (const __CFArray *)sub_8D6E0(theDict[0], "reporter IDs");
    int Value = v104;
    if (v41)
    {
      sub_47860((uint64_t)v121, v41);
      memset(v120, 0, 24);
      if (v121[24])
      {
        char v42 = *(void **)v121;
        sub_8D668( v120,  *(const void **)v121,  *(uint64_t *)&v121[8],  (uint64_t)(*(void *)&v121[8] - *(void *)v121) >> 3);
        if (v42) {
          operator delete(v42);
        }
      }
    }

    else
    {
      v121[0] = 0;
      v121[24] = 0;
      memset(v120, 0, 24);
    }

    if ((void)v145)
    {
      *((void *)&v145 + 1) = v145;
      operator delete((void *)v145);
    }

    __int128 v145 = *(_OWORD *)v120;
    CFTypeRef v146 = v120[2];
    if (!theDict[0])
    {
      id v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "Could not construct");
    }

    BOOL v43 = (const __CFBoolean *)sub_8D568(theDict[0], "prefer independent route");
    if (v43)
    {
      __int16 v44 = sub_476EC(v43);
      int v45 = v44;
      int v46 = HIBYTE(v44);
    }

    else
    {
      int v46 = 0;
      int v45 = 0;
    }

    unsigned int v47 = v45 | (v46 << 8);
    if (v47 <= 0x100) {
      LOBYTE(v47) = 0;
    }
    BOOL v149 = v47 != 0;
    buf[0] = 1;
    if (theDict[0]) {
      CFRelease(theDict[0]);
    }
    unsigned int v48 = v137;
    unsigned int v116 = v137;
    sub_8C7FC(theDict, (uint64_t)buf);
    CFDictionaryRef v49 = (CFDictionaryRef)v115;
    int v50 = (char)v115;
    if ((v115 & 0x80u) != 0) {
      CFDictionaryRef v49 = theDict[1];
    }
    if (v49 == (CFDictionaryRef)((char *)&dword_14 + 1))
    {
      uint64_t v51 = (CFDictionaryRef *)theDict[0];
      if ((v115 & 0x80u) == 0) {
        uint64_t v51 = theDict;
      }
      CFDictionaryRef v52 = *v51;
      CFDictionaryRef v53 = v51[1];
      uint64_t v54 = *(uint64_t *)((char *)v51 + 13);
      BOOL v55 = v52 == (CFDictionaryRef)0x6C7070612E6D6F63LL && v53 == (CFDictionaryRef)0x656C69626F6D2E65LL;
      if (v55 && v54 == 0x6369676F6C656C69LL)
      {
        if (!v119)
        {
          char v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v102, "Could not construct");
        }

        if (sub_8C7A8((const __CFDictionary *)v119, @"persistent route"))
        {
          if (!v119)
          {
            unint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v103, "Could not construct");
          }

          *(void *)unsigned int v121 = 0LL;
          sub_8C83C(&v113, (const __CFDictionary *)v119, "persistent route", v121);
          if (*(void *)v121) {
            CFRelease(*(CFTypeRef *)v121);
          }
          sub_E6650((uint64_t)v121, (const __CFDictionary **)&v113);
          if (v125 || v129 || v133)
          {
            uint64_t v57 = sub_138E8(2);
            uint64_t v58 = sub_138E8(34);
            char v59 = 0;
            uint64_t v60 = 0LL;
            v120[0] = (CFTypeRef)0x100000002LL;
            uint64_t v61 = *(void *)(v57 + 8);
            while (1)
            {
              uint64_t v62 = *((int *)v120 + v60);
              char v63 = v59;
              if (((v61 & v62) != 0) != ((*(void *)(v58 + 8) & v62) != 0)) {
                break;
              }
              char v59 = 1;
              uint64_t v60 = 1LL;
              if ((v63 & 1) != 0) {
                goto LABEL_119;
              }
            }

            if ((v61 & v62) == 0) {
              uint64_t v57 = v58;
            }
LABEL_119:
            id v64 = *(id *)v57;
            char v65 = v64;
            if (v64)
            {
              uint64_t v66 = (os_log_s *)v64;
              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                sub_173AF4(&v112, v121);
                uint64_t v67 = &v112;
                if ((v112.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v67 = (std::string *)v112.__r_.__value_.__r.__words[0];
                }
                LODWORD(v120[0]) = 136315650;
                *(CFTypeRef *)((char *)v120 + 4) = "AudioSessionUtilities.mm";
                WORD2(v120[1]) = 1024;
                *(_DWORD *)((char *)&v120[1] + 6) = 398;
                WORD1(v120[2]) = 2080;
                *(CFTypeRef *)((char *)&v120[2] + 4) = v67;
                _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d - Persistent route info: %s.",  (uint8_t *)v120,  0x1Cu);
              }
            }
          }

          sub_8D094( (uint64_t)v150,  *(const void ***)v121,  *(const void ***)&v121[8],  (uint64_t)(*(void *)&v121[8] - *(void *)v121) >> 3);
          sub_8D094( (uint64_t)&v150[1] + 8,  *(const void ***)&v121[24],  (const void **)v122,  (uint64_t)(v122 - *(void *)&v121[24]) >> 3);
          LODWORD(v152) = v126;
          sub_52360(v151, *((char **)&v124 + 1));
          *(_DWORD *)&v154[16] = v130;
          sub_52360(&v153, v128);
          int v156 = v134;
          sub_52360(v155, v132);
          sub_51FD8(v132);
          char v68 = v131;
          uint64_t v131 = 0LL;
          if (v68) {
            operator delete(v68);
          }
          sub_51FD8(v128);
          uint64_t v69 = v127;
          int64x2_t v127 = 0LL;
          if (v69) {
            operator delete(v69);
          }
          sub_51FD8(*((char **)&v124 + 1));
          uint64_t v70 = v123;
          char v123 = 0LL;
          if (v70) {
            operator delete(v70);
          }
          v120[0] = &v121[24];
          sub_8C8F0((void ***)v120);
          v120[0] = v121;
          sub_8C8F0((void ***)v120);
          if (v113) {
            CFRelease(v113);
          }
        }
      }
    }

    char v71 = sub_8C9B8((uint64_t **)a1, v48, &v116);
    sub_8CB08((uint64_t)(v71 + 5), (uint64_t)buf);
    if (v50 < 0) {
      operator delete(theDict[0]);
    }
    sub_8CC80((uint64_t)buf);
    if (cfa) {
      CFRelease(cfa);
    }
    ++v7;
  }

  while (v7 != Count);
  int Value = v118;
  if (v118) {
LABEL_141:
  }
    CFRelease(Value);
LABEL_144:
  if (v119) {
    CFRelease(v119);
  }
}

void sub_8C6B4()
{
}

void sub_8C6C0()
{
}

void sub_8C6D0()
{
}

void sub_8C6DC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, const void *a49, uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
}

void sub_8C70C()
{
}

void sub_8C748()
{
}

void sub_8C758(_Unwind_Exception *a1)
{
}

void sub_8C760(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8C7A8(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

id sub_8C7D4(int a1, void *a2, char a3)
{
  if (a1 < 6 || (a3 & 1) != 0) {
    id v3 = a2;
  }
  else {
    id v3 = 0LL;
  }
  return v3;
}

void *sub_8C7FC(void *result, uint64_t a2)
{
  *(_OWORD *)CFAllocatorRef result = *(_OWORD *)(a2 + 104);
  result[2] = *(void *)(a2 + 120);
  return result;
}

uint64_t sub_8C83C(void *a1, const __CFDictionary *a2, char *__s, void *a4)
{
  CFTypeID v6 = sub_81298(a2, __s);
  if (!v6) {
    goto LABEL_5;
  }
  unint64_t v7 = v6;
  CFRetain(v6);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    char v11 = 0;
    *a1 = *a4;
    *a4 = 0LL;
    return sub_8D530((uint64_t)&v10);
  }

  uint64_t v10 = v7;
  char v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return sub_8D530((uint64_t)&v10);
}

void sub_8C8F0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFTypeID v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_8D328(v6);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void **sub_8C95C(void **a1)
{
  id v3 = a1 + 3;
  sub_8C8F0(&v3);
  id v3 = a1;
  sub_8C8F0(&v3);
  return a1;
}

uint64_t **sub_8C9B8(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  CFTypeID v6 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  CFTypeID v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFTypeID v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }

  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x1C8uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + std::ostream::~ostream(v2, v3 + 8) = *a3;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 16std::ostream::~ostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    *(_OWORD *)(v10 + 232) = 0u;
    *(_OWORD *)(v10 + 24std::ostream::~ostream(v2, v3 + 8) = 0u;
    *((void *)v10 + 35) = 0LL;
    *(_OWORD *)(v10 + sub_13818(v0 + 264) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    v10[240] = 1;
    *((void *)v10 + 33) = 0LL;
    *((void *)v10 + 31) = 0LL;
    *((void *)v10 + 32) = 0LL;
    v10[272] = 0;
    *((_OWORD *)v10 + memset(buf, 0, 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 1std::ostream::~ostream(v2, v3 + 8) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((void *)v10 + 56) = 0LL;
    *((_DWORD *)v10 + 92) = 1065353216;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + sub_13818(v0 + 392) = 0u;
    *((_DWORD *)v10 + 102) = 1065353216;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_DWORD *)v10 + 112) = 1065353216;
    char v13 = 1;
    sub_32C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0LL;
    sub_8D4EC((uint64_t)v12);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t sub_8CB08(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    sub_8CDEC( a1 + 16,  *(std::string **)(a2 + 16),  *(__int128 **)(a2 + 24),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
    sub_8CDEC( a1 + 40,  *(std::string **)(a2 + 40),  *(__int128 **)(a2 + 48),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
    sub_8CF90( (char *)(a1 + 64),  *(char **)(a2 + 64),  *(void *)(a2 + 72),  (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  }

  *(_DWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a2 + 88);
  int v4 = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v4;
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  if (a1 != a2)
  {
    sub_7E6D4( (char *)(a1 + 176),  *(char **)(a2 + 176),  *(void *)(a2 + 184),  (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    sub_8CF90( (char *)(a1 + 208),  *(char **)(a2 + 208),  *(void *)(a2 + 216),  (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
    uint64_t v5 = *(void *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(void *)(a1 + 232) = v5;
    sub_8D094( a1 + 248,  *(const void ***)(a2 + 248),  *(const void ***)(a2 + 256),  (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3);
    sub_8D094( a1 + 272,  *(const void ***)(a2 + 272),  *(const void ***)(a2 + 280),  (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
    *(_DWORD *)(a1 + 32std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a2 + 328);
    sub_52360((void *)(a1 + 296), *(char **)(a2 + 312));
    *(_DWORD *)(a1 + 36std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a2 + 368);
    sub_52360((void *)(a1 + 336), *(char **)(a2 + 352));
    *(_DWORD *)(a1 + sub_13818(v0 + 408) = *(_DWORD *)(a2 + 408);
    sub_52360((void *)(a1 + 376), *(char **)(a2 + 392));
  }

  return a1;
}

uint64_t sub_8CC80(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 248);
  sub_51FA0(a1 + 376);
  sub_51FA0(a1 + 336);
  sub_51FA0(a1 + 296);
  unint64_t v7 = (void **)(a1 + 272);
  sub_8C8F0(&v7);
  unint64_t v7 = v2;
  sub_8C8F0(&v7);
  id v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }

  int v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(void *)(a1 + 184) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  unint64_t v7 = (void **)(a1 + 40);
  sub_8CD60(&v7);
  unint64_t v7 = (void **)(a1 + 16);
  sub_8CD60(&v7);
  return a1;
}

void sub_8CD60(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_8CDA0((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_8CDA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

void sub_8CDEC(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  CFTypeID v6 = (__int128 *)__str;
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_48288((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_7A87C();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_8D400((void *)a1, v11);
    uint64_t v12 = sub_8D344(v8, v6, a3, *(char **)(a1 + 8));
LABEL_15:
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v12;
    return;
  }

  char v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v9) >> 3) < a4)
  {
    CFStringRef v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)v13 - (char *)v9) >> 3));
    if (v13 != v9)
    {
      uint64_t v15 = 8 * (((char *)v13 - (char *)v9) >> 3);
      do
      {
        std::string::operator=(v9, (const std::string *)v6);
        CFTypeID v6 = (__int128 *)((char *)v6 + 24);
        ++v9;
        v15 -= 24LL;
      }

      while (v15);
      unsigned int v9 = *(std::string **)(a1 + 8);
    }

    uint64_t v12 = sub_8D344(v8, v14, a3, (char *)v9);
    goto LABEL_15;
  }

  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v9, (const std::string *)v6);
      CFTypeID v6 = (__int128 *)((char *)v6 + 24);
      ++v9;
    }

    while (v6 != a3);
    char v13 = *(std::string **)(a1 + 8);
  }

  while (v13 != v9)
  {
    --v13;
  }

  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v9;
}

void sub_8CF84(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_8CF90(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *unint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 61) {
      sub_7A87C();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    CFAllocatorRef result = sub_7E420(v7, v11);
    char v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  CFStringRef v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    CFAllocatorRef result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned int v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    int v19 = v16;
LABEL_18:
    CFAllocatorRef result = (char *)memmove(v18, v19, v17);
  }

void sub_8D094(uint64_t a1, const void **a2, const void **a3, unint64_t a4)
{
  CFTypeID v6 = a2;
  uint64_t v8 = *(const void ***)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    sub_51F40((void **)a1);
    if (a4 >> 61) {
      sub_7A87C();
    }
    uint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_7E420((void *)a1, v11);
    uint64_t v12 = *(void **)(a1 + 8);
    while (v6 != a3)
    {
      char v13 = *v6++;
      uint64_t v12 = sub_8D280(v12, v13) + 1;
    }

    goto LABEL_15;
  }

  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[v14];
    sub_8D2B8(a2, v15, v8);
    uint64_t v12 = *(void **)(a1 + 8);
    while (v15 != a3)
    {
      BOOL v16 = *v15++;
      uint64_t v12 = sub_8D280(v12, v16) + 1;
    }

void sub_8D1B0(char a1, void **__p)
{
  if (a1)
  {
    id v3 = __p + 3;
    sub_8C8F0(&v3);
  }

  if (__p) {
    operator delete(__p);
  }
}

void *sub_8D204(void *result, const void **a2, const void **a3, unint64_t a4)
{
  if (a4)
  {
    CFTypeID v6 = result;
    sub_7E420(result, a4);
    CFAllocatorRef result = (void *)v6[1];
    while (a2 != a3)
    {
      unint64_t v7 = *a2++;
      CFAllocatorRef result = sub_8D280(result, v7) + 1;
    }

    v6[1] = result;
  }

  return result;
}

void sub_8D26C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_8D280(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

const void **sub_8D2B8(const void **a1, const void **a2, const void **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      CFTypeID v6 = *a3;
      unint64_t v7 = *v5;
      *a3 = *v5;
      if (v7) {
        CFRetain(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      ++v5;
      ++a3;
    }

    while (v5 != a2);
  }

  return a3;
}

void sub_8D328(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

char *sub_8D344(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  int v4 = __dst;
  unint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    CFTypeID v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_24054(v4, *(void **)v6, *((void *)v6 + 1));
        int v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)int v4 = v7;
      }

      CFTypeID v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_8D490((uint64_t)v9);
  return v4;
}

void sub_8D3EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_8D400(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_7A87C();
  }
  CFAllocatorRef result = (char *)sub_8D44C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_8D44C(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_7A8C4();
  }
  return operator new(24 * a1);
}

uint64_t sub_8D490(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 24LL;
    }
  }

  return a1;
}

void sub_8D4EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_8CC80((uint64_t)v1 + 40);
    }
    operator delete(v1);
  }

uint64_t sub_8D530(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

const void *sub_8D568(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_8D628(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_8D668(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFStringRef v6 = result;
    CFAllocatorRef result = sub_7E420(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFAllocatorRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_8D6C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

const void *sub_8D6E0(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_8D7A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFNumberRef sub_8D7E0(const __CFNumber *a1)
{
  CFAllocatorRef result = sub_36328(a1);
  if (!((unint64_t)result >> 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  return result;
}

void sub_8D82C(_Unwind_Exception *a1)
{
}

uint64_t sub_8D840(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

const void *sub_8D878(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_8D920(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_8D964(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  size_t v4 = (void **)(a1 + 32);
  sub_8CD60(&v4);
  size_t v4 = (void **)(a1 + 8);
  sub_8CD60(&v4);
  return a1;
}

uint64_t sub_8D9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24LL)
  {
    __int128 v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - std::ostream::~ostream(v2, v3 + 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - memset(buf, 0, 24) = v8;
    result -= 24LL;
    *(void *)(a3 - 16) = 0LL;
    *(void *)(a3 - std::ostream::~ostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 - memset(buf, 0, 24) = 0LL;
  }

  return result;
}

uint64_t sub_8D9F8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_8DC78( (char *)(a1 + 16),  *(__int128 **)(a2 + 16),  *(__int128 **)(a2 + 24),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_8DC78( (char *)(a1 + 40),  *(__int128 **)(a2 + 40),  *(__int128 **)(a2 + 48),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_8D668( (void *)(a1 + 64),  *(const void **)(a2 + 64),  *(void *)(a2 + 72),  (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  uint64_t v4 = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v4;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_24054((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v5;
  }

  if (*(char *)(a2 + 151) < 0)
  {
    sub_24054((_BYTE *)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = v6;
  }

  if (*(char *)(a2 + 175) < 0)
  {
    sub_24054((_BYTE *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v7;
  }

  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  sub_7A5B8( (void *)(a1 + 176),  *(const void **)(a2 + 176),  *(void *)(a2 + 184),  (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  char v8 = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 20std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(_BYTE *)(a1 + 200) = v8;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 2memset(buf, 0, 24) = 0LL;
  sub_8D668( (void *)(a1 + 208),  *(const void **)(a2 + 208),  *(void *)(a2 + 216),  (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  uint64_t v9 = *(void *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(void *)(a1 + 232) = v9;
  sub_54070((void *)(a1 + 248), (const void ***)(a2 + 248));
  return a1;
}

void sub_8DBC4(_Unwind_Exception *a1)
{
}

char *sub_8DC78(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_8D400(result, a4);
    uint64_t result = sub_8D344((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_8DCDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v2, v3 + 8) = v10;
  sub_8CD60(&a9);
  _Unwind_Resume(a1);
}

void sub_8DCFC(uint64_t a1, void *a2)
{
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v2 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (*((_BYTE *)v4 + 136))
      {
        uint64_t v6 = *(void *)((char *)v4 + 132);
        if ((v6 & 0xFF00000000LL) == 0) {
          sub_8DEEC();
        }
        __int128 v7 = *v2;
        char v8 = v2;
        uint64_t v9 = v2;
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v9 = (uint64_t **)v7;
              unsigned int v10 = *((_DWORD *)v7 + 8);
              __int128 v7 = *v9;
              char v8 = v9;
              if (!*v9) {
                goto LABEL_11;
              }
            }

            __int128 v7 = v9[1];
            if (!v7)
            {
              char v8 = v9 + 1;
              goto LABEL_11;
            }
          }
        }

        else
        {
LABEL_11:
          unint64_t v11 = operator new(0x40uLL);
          v11[8] = v6;
          *((void *)v11 + 6) = 0LL;
          *((void *)v11 + 7) = 0LL;
          *((void *)v11 + 5) = 0LL;
          sub_32C38((uint64_t **)a1, (uint64_t)v9, v8, (uint64_t *)v11);
          uint64_t v9 = (uint64_t **)v11;
        }

        int v12 = *((_DWORD *)v4 + 32);
        unint64_t v14 = (char *)v9[6];
        unint64_t v13 = (unint64_t)v9[7];
        if ((unint64_t)v14 >= v13)
        {
          BOOL v16 = (char *)v9[5];
          uint64_t v17 = (v14 - v16) >> 2;
          unint64_t v18 = v17 + 1;
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            unint64_t v20 = (unint64_t)sub_7A890(v20);
            BOOL v16 = (char *)v9[5];
            unint64_t v14 = (char *)v9[6];
          }

          else
          {
            uint64_t v21 = 0LL;
          }

          CFTypeRef v22 = (uint64_t *)(v20 + 4 * v17);
          *(_DWORD *)CFTypeRef v22 = v12;
          unint64_t v15 = (uint64_t *)((char *)v22 + 4);
          while (v14 != v16)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            CFTypeRef v22 = (uint64_t *)((char *)v22 - 4);
          }

          v9[5] = v22;
          v9[6] = v15;
          v9[7] = (uint64_t *)(v20 + 4 * v21);
          if (v16) {
            operator delete(v16);
          }
        }

        else
        {
          *(_DWORD *)unint64_t v14 = v12;
          unint64_t v15 = (uint64_t *)(v14 + 4);
        }

        v9[6] = v15;
      }

      unsigned __int8 v24 = (void *)v4[1];
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          unsigned __int8 v24 = (void *)*v24;
        }

        while (v24);
      }

      else
      {
        do
        {
          unint64_t v25 = (void *)v4[2];
          BOOL v26 = *v25 == (void)v4;
          uint64_t v4 = v25;
        }

        while (!v26);
      }

      uint64_t v4 = v25;
    }

    while (v25 != v3);
  }

void sub_8DECC(_Unwind_Exception *a1)
{
}

void sub_8DEEC()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_8DF20(void *a1)
{
  if (a1)
  {
    sub_8DF20(*a1);
    sub_8DF20(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }

    operator delete(a1);
  }

void *sub_8DF68(void *result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 128);
  result[2] = *(void *)(a2 + 144);
  return result;
}

void *sub_8DFA8(void *result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 152);
  result[2] = *(void *)(a2 + 168);
  return result;
}

void sub_8DFE8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48CBC0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48CBC0))
    {
      LODWORD(sub_88C50(0, v1) = 1936290409;
      HIDWORD(sub_88C50(0, v1) = dword_48CBC8 + 1;
      int v2 = 1836346212;
      int v3 = dword_48CBC8 + 2;
      int v4 = 1936614497;
      int v5 = dword_48CBC8 + 3;
      int v6 = 1819309171;
      int v7 = dword_48CBC8 + 4;
      int v8 = 1752200307;
      int v9 = dword_48CBC8 + 5;
      dword_48CBC8 += 6;
      int v10 = 1885696611;
      int v11 = dword_48CBC8;
      sub_8FA18(&v1, 6LL);
      __cxa_guard_release(&qword_48CBC0);
    }
  }

void sub_8E0DC(_Unwind_Exception *a1)
{
}

void sub_8E0F4(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  sub_8ED48(&v103, *(const void **)(a2 + 176), *(void *)(a2 + 184));
  std::string::append(a1, "[ ", 2uLL);
  sub_8C7FC(&v101, a2);
  int v5 = std::string::insert(&v101, 0LL, "process: ", 9uLL);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  int v7 = std::string::append(&v102, "; ", 2uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v9 = &v105;
  }
  else {
    int v9 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v9, size);
  std::to_string(&v101, *(_DWORD *)(a2 + 88));
  int v11 = std::string::insert(&v101, 0LL, "session: ", 9uLL);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v13 = std::string::append(&v102, "; ", 2uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v15 = &v105;
  }
  else {
    unint64_t v15 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v16 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v16 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  sub_8DF68(&v101, a2);
  uint64_t v17 = std::string::insert(&v101, 0LL, "category: ", 0xAuLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v19 = std::string::append(&v102, "; ", 2uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if (*(_BYTE *)(a2 + 96))
  {
    uint64_t v21 = *(void *)(a2 + 92);
    if ((v21 & 0xFF00000000LL) == 0) {
      sub_8DEEC();
    }
    sub_2CA1C(&v98, v21);
  }

  else
  {
    sub_7D084(&v98, "<empty>");
  }

  CFTypeRef v22 = std::string::insert(&v98, 0LL, "VAD context ID: ", 0x10uLL);
  __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  int v24 = (char)a1->__r_.__value_.__s.__size_;
  if (v24 >= 0) {
    unint64_t v25 = (const std::string::value_type *)a1;
  }
  else {
    unint64_t v25 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
  }
  if (v24 >= 0) {
    std::string::size_type v26 = a1->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v26 = a1->__r_.__value_.__l.__size_;
  }
  unsigned int v27 = std::string::append(&v99, v25, v26);
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v29 = &v105;
  }
  else {
    uint64_t v29 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v30 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v30 = v105.__r_.__value_.__l.__size_;
  }
  uint64_t v31 = std::string::append(&v100, (const std::string::value_type *)v29, v30);
  int v32 = (char)v31->__r_.__value_.__s.__size_;
  if (v32 >= 0) {
    unint64_t v33 = (const std::string::value_type *)v31;
  }
  else {
    unint64_t v33 = (const std::string::value_type *)v31->__r_.__value_.__r.__words[0];
  }
  if (v32 >= 0) {
    std::string::size_type v34 = v31->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v34 = v31->__r_.__value_.__l.__size_;
  }
  std::string::append(a1, v33, v34);
  sub_8DFA8(&v101, a2);
  uint64_t v35 = std::string::insert(&v101, 0LL, "mode: ", 6uLL);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v37 = std::string::append(&v102, "; ", 2uLL);
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v39 = &v105;
  }
  else {
    unsigned int v39 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v40 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v40 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v39, v40);
  uint64_t v41 = *(void *)(a2 + 232);
  if ((v41 & 0xFF00000000LL) != 0)
  {
    sub_2CA1C(&v101, v41);
    char v42 = std::string::insert(&v101, 0LL, "isolatedUseCaseID: ", 0x13uLL);
    __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0LL;
    v42->__r_.__value_.__l.__cap_ = 0LL;
    v42->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v44 = std::string::append(&v102, "; ", 2uLL);
    __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0LL;
    v44->__r_.__value_.__l.__cap_ = 0LL;
    v44->__r_.__value_.__r.__words[0] = 0LL;
    if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v46 = &v105;
    }
    else {
      int v46 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v47 = v105.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v47 = v105.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v46, v47);
  }

  unsigned int v48 = v103;
  if (v104 == v103) {
    sub_7D084(&v101, "automatic");
  }
  else {
    sub_8F640(&v101, v103, v104);
  }
  CFDictionaryRef v49 = std::string::insert(&v101, 0LL, "port types selection: ", 0x16uLL);
  __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0LL;
  v49->__r_.__value_.__l.__cap_ = 0LL;
  v49->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v51 = std::string::append(&v102, "; ", 2uLL);
  __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v51->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0LL;
  v51->__r_.__value_.__l.__cap_ = 0LL;
  v51->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    CFDictionaryRef v53 = &v105;
  }
  else {
    CFDictionaryRef v53 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v54 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v54 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v53, v54);
  if (*(_BYTE *)(a2 + 200)) {
    BOOL v55 = "yes";
  }
  else {
    BOOL v55 = "no";
  }
  sub_7D084(&v101, v55);
  char v56 = std::string::insert(&v101, 0LL, "active: ", 8uLL);
  __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0LL;
  v56->__r_.__value_.__l.__cap_ = 0LL;
  v56->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v58 = std::string::append(&v102, "; ", 2uLL);
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v60 = &v105;
  }
  else {
    uint64_t v60 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v61 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v61 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v60, v61);
  else {
    uint64_t v62 = "no";
  }
  sub_7D084(&v101, v62);
  char v63 = std::string::insert(&v101, 0LL, "persistent: ", 0xCuLL);
  __int128 v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v63->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0LL;
  v63->__r_.__value_.__l.__cap_ = 0LL;
  v63->__r_.__value_.__r.__words[0] = 0LL;
  char v65 = std::string::append(&v102, "; ", 2uLL);
  __int128 v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v65->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0LL;
  v65->__r_.__value_.__l.__cap_ = 0LL;
  v65->__r_.__value_.__r.__words[0] = 0LL;
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v67 = &v105;
  }
  else {
    uint64_t v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
  }
  if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v68 = v105.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v67, v68);
  if (*(_BYTE *)(a2 + 240)) {
    uint64_t v69 = "yes";
  }
  else {
    uint64_t v69 = "no";
  }
  sub_7D084(&v100, v69);
  uint64_t v70 = std::string::insert(&v100, 0LL, "prefer independent route: ", 0x1AuLL);
  __int128 v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__l.__cap_ = v70->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0LL;
  v70->__r_.__value_.__l.__cap_ = 0LL;
  v70->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v72 = std::string::append(&v101, "; ", 2uLL);
  __int128 v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__l.__cap_ = v72->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0LL;
  v72->__r_.__value_.__l.__cap_ = 0LL;
  v72->__r_.__value_.__r.__words[0] = 0LL;
  sub_8F968(&v95, *(const void **)(a2 + 208), *(void *)(a2 + 216));
  char v74 = v95;
  uint64_t v75 = v96;
  if (v96 == v95)
  {
    sub_7D084(&v97, "none");
  }

  else
  {
    sub_8F968(&v94, *(const void **)(a2 + 208), *(void *)(a2 + 216));
    int v2 = v94;
    sub_8F968(__p, *(const void **)(a2 + 208), *(void *)(a2 + 216));
    uint64_t v76 = (uint64_t *)__p[1];
    memset(&v97, 0, sizeof(v97));
    std::string::append(&v97, "{ ", 2uLL);
    if (v2 != v76)
    {
      char v77 = v2;
      while (1)
      {
        std::to_string(&v105, *v77);
        if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v78 = &v105;
        }
        else {
          unint64_t v78 = (std::string *)v105.__r_.__value_.__r.__words[0];
        }
        if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v79 = v105.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v79 = v105.__r_.__value_.__l.__size_;
        }
        std::string::append(&v97, (const std::string::value_type *)v78, v79);
        if (++v77 == v76) {
          break;
        }
        std::string::append(&v97, ", ", 2uLL);
      }
    }

    std::string::append(&v97, " }", 2uLL);
  }

  id v80 = std::string::insert(&v97, 0LL, "reporter IDs: ", 0xEuLL);
  __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0LL;
  v80->__r_.__value_.__l.__cap_ = 0LL;
  v80->__r_.__value_.__r.__words[0] = 0LL;
  int v82 = (char)a1->__r_.__value_.__s.__size_;
  if (v82 >= 0) {
    char v83 = (const std::string::value_type *)a1;
  }
  else {
    char v83 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
  }
  if (v82 >= 0) {
    std::string::size_type v84 = a1->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v84 = a1->__r_.__value_.__l.__size_;
  }
  unint64_t v85 = std::string::append(&v98, v83, v84);
  __int128 v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0LL;
  v85->__r_.__value_.__l.__cap_ = 0LL;
  v85->__r_.__value_.__r.__words[0] = 0LL;
  if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int64_t v87 = &v102;
  }
  else {
    int64_t v87 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v88 = v102.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v88 = v102.__r_.__value_.__l.__size_;
  }
  char v89 = std::string::append(&v99, (const std::string::value_type *)v87, v88);
  int v90 = (char)v89->__r_.__value_.__s.__size_;
  if (v90 >= 0) {
    uint64_t v91 = (const std::string::value_type *)v89;
  }
  else {
    uint64_t v91 = (const std::string::value_type *)v89->__r_.__value_.__r.__words[0];
  }
  if (v90 >= 0) {
    std::string::size_type v92 = v89->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v92 = v89->__r_.__value_.__l.__size_;
  }
  std::string::append(a1, v91, v92);
  if (v75 != v74)
  {
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v2) {
      operator delete(v2);
    }
  }

  if (v74) {
    operator delete(v74);
  }
  std::string::append(a1, " } ]", 4uLL);
  if (v48) {
    operator delete(v48);
  }
}

void sub_8EB3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (v51) {
    operator delete(v51);
  }
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  std::string::size_type v54 = *(void **)(v52 - 136);
  if (v54) {
    operator delete(v54);
  }
  _Unwind_Resume(exception_object);
}

void *sub_8ED48(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return sub_7A5B8(a1, a2, a3, (a3 - (uint64_t)a2) >> 2);
}

void *sub_8ED70(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 4 * a3;
    int v7 = a1;
    do
    {
      __int128 v8 = operator new(0x18uLL);
      v8[4] = *(_DWORD *)(a2 + 4 * v5);
      *(void *)__int128 v8 = v7;
      *((void *)v8 + 1) = a1;
      *((void *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = ++v5;
      int v7 = v8;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_8EDEC(_Unwind_Exception *a1)
{
}

uint64_t sub_8EE00( uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void ***a16, uint64_t a17)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  sub_7A5B8( (void *)(a1 + 8),  *(const void **)a4,  *(void *)(a4 + 8),  (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  sub_86550((uint64_t *)(a1 + 32), a5);
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a7;
  *(_DWORD *)(a1 + 64) = a8;
  sub_71894((void *)(a1 + 72), a9);
  *(_BYTE *)(a1 + 96) = a10;
  sub_82AF0(a1 + 104, a11);
  sub_82AF0(a1 + 136, a12);
  sub_82AF0(a1 + 168, a13);
  sub_82AF0(a1 + 200, a14);
  sub_82AF0(a1 + 232, a15);
  sub_54070((void *)(a1 + 264), a16);
  *(void *)(a1 + 432) = a17;
  if (!*(void *)(a1 + 88))
  {
    uint64_t v23 = sub_138E8(13);
    id v24 = sub_8C7D4(1, *(void **)v23, *(void *)(v23 + 8));
    unint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    std::string::size_type v26 = v25;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v29 = "AlternateVAD.h";
      __int16 v30 = 1024;
      int v31 = 178;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return a1;
}

void sub_8EFF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v19 = *(void **)(v10 + 256);
  if (v19 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = v17;
  }

  else
  {
    if (!v19) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = *(void **)(v10 + 224);
  if (v21 == v16)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = v16;
  }

  else
  {
    if (!v21) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  uint64_t v23 = *(void **)(v10 + 192);
  if (v23 == v15)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v15;
  }

  else
  {
    if (!v23) {
      goto LABEL_16;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  unint64_t v25 = *(void **)(v10 + 160);
  if (v25 == v14)
  {
    uint64_t v26 = 4LL;
    unint64_t v25 = v14;
  }

  else
  {
    if (!v25) {
      goto LABEL_21;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_21:
  unsigned int v27 = *(void **)(v10 + 128);
  if (v27 == v13)
  {
    uint64_t v28 = 4LL;
    unsigned int v27 = v13;
  }

  else
  {
    if (!v27) {
      goto LABEL_26;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_26:
  sub_68314(v12);
  sub_32C8C(*(void **)(v10 + 40));
  uint64_t v29 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 16) = v29;
    operator delete(v29);
  }

  _Unwind_Resume(a1);
}

void sub_8F14C()
{
}

void sub_8F154()
{
}

void sub_8F15C()
{
}

uint64_t sub_8F164(uint64_t a1)
{
  int v2 = (void **)(a1 + 264);
  sub_51FA0(a1 + 392);
  sub_51FA0(a1 + 352);
  sub_51FA0(a1 + 312);
  unint64_t v15 = (void **)(a1 + 288);
  sub_8C8F0(&v15);
  unint64_t v15 = v2;
  sub_8C8F0(&v15);
  int v3 = *(void **)(a1 + 256);
  if (v3 == (void *)(a1 + 232))
  {
    uint64_t v4 = 4LL;
    int v3 = (void *)(a1 + 232);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *(void **)(a1 + 224);
  if (v5 == (void *)(a1 + 200))
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = (void *)(a1 + 200);
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  int v7 = *(void **)(a1 + 192);
  if (v7 == (void *)(a1 + 168))
  {
    uint64_t v8 = 4LL;
    int v7 = (void *)(a1 + 168);
  }

  else
  {
    if (!v7) {
      goto LABEL_16;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  int v9 = *(void **)(a1 + 160);
  if (v9 == (void *)(a1 + 136))
  {
    uint64_t v10 = 4LL;
    int v9 = (void *)(a1 + 136);
  }

  else
  {
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  int v11 = *(void **)(a1 + 128);
  if (v11 == (void *)(a1 + 104))
  {
    uint64_t v12 = 4LL;
    int v11 = (void *)(a1 + 104);
  }

  else
  {
    if (!v11) {
      goto LABEL_26;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  sub_68314((void *)(a1 + 72));
  sub_32C8C(*(void **)(a1 + 40));
  unint64_t v13 = *(void **)(a1 + 8);
  if (v13)
  {
    *(void *)(a1 + 16) = v13;
    operator delete(v13);
  }

  return a1;
}

void sub_8F2D4(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_8F164(v4 - 440);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_8F344(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(buf, 0, 24) = 0LL;
  *(_OWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + memset(buf, 0, 24) = *(void *)(a2 + 24);
  *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + memset(buf, 0, 24) = 0LL;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = (void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 32) = v4;
    void *v4 = 0LL;
    *(void *)(a2 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(void *)(a1 + 32) = v6;
  }

  uint64_t v8 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = a1 + 72;
  *(void *)(a1 + 80) = a1 + 72;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v9 = *(void *)(a2 + 88);
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 72);
    uint64_t v10 = *(uint64_t **)(a2 + 80);
    uint64_t v12 = *v10;
    *(void *)(v12 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + std::ostream::~ostream(v2, v3 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + 72);
    *(void *)(v13 + std::ostream::~ostream(v2, v3 + 8) = v10;
    *uint64_t v10 = v13;
    *(void *)(a1 + 72) = v11;
    *(void *)(v11 + std::ostream::~ostream(v2, v3 + 8) = a1 + 72;
    *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v9;
    *(void *)(a2 + 8std::ostream::~ostream(v2, v3 + 8) = 0LL;
  }

  __int128 v14 = (void *)(a2 + 128);
  uint64_t v15 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (!v15)
  {
    __int128 v14 = (void *)(a1 + 128);
    goto LABEL_10;
  }

  if (v15 != a2 + 104)
  {
    *(void *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = v15;
LABEL_10:
    *__int128 v14 = 0LL;
    goto LABEL_12;
  }

  *(void *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = a1 + 104;
  (*(void (**)(void))(*(void *)*v14 + 24LL))(*v14);
LABEL_12:
  std::string::size_type v16 = (void *)(a2 + 160);
  uint64_t v17 = *(void *)(a2 + 160);
  if (!v17)
  {
    std::string::size_type v16 = (void *)(a1 + 160);
    goto LABEL_16;
  }

  if (v17 != a2 + 136)
  {
    *(void *)(a1 + 160) = v17;
LABEL_16:
    *std::string::size_type v16 = 0LL;
    goto LABEL_18;
  }

  *(void *)(a1 + 160) = a1 + 136;
  (*(void (**)(void))(*(void *)*v16 + 24LL))(*v16);
LABEL_18:
  __int128 v18 = (void *)(a2 + 192);
  uint64_t v19 = *(void *)(a2 + 192);
  if (!v19)
  {
    __int128 v18 = (void *)(a1 + 192);
    goto LABEL_22;
  }

  if (v19 != a2 + 168)
  {
    *(void *)(a1 + 192) = v19;
LABEL_22:
    *__int128 v18 = 0LL;
    goto LABEL_24;
  }

  *(void *)(a1 + 192) = a1 + 168;
  (*(void (**)(void))(*(void *)*v18 + 24LL))(*v18);
LABEL_24:
  uint64_t v20 = (void *)(a2 + 224);
  uint64_t v21 = *(void *)(a2 + 224);
  if (!v21)
  {
    uint64_t v20 = (void *)(a1 + 224);
    goto LABEL_28;
  }

  if (v21 != a2 + 200)
  {
    *(void *)(a1 + 2memset(buf, 0, 24) = v21;
LABEL_28:
    *uint64_t v20 = 0LL;
    goto LABEL_30;
  }

  *(void *)(a1 + 2memset(buf, 0, 24) = a1 + 200;
  (*(void (**)(void))(*(void *)*v20 + 24LL))(*v20);
LABEL_30:
  uint64_t v22 = *(void *)(a2 + 256);
  if (v22)
  {
    uint64_t v23 = (void *)(a2 + 256);
    if (v22 == a2 + 232)
    {
      *(void *)(a1 + 256) = a1 + 232;
      (*(void (**)(void))(*(void *)*v23 + 24LL))(*v23);
      goto LABEL_36;
    }

    *(void *)(a1 + 256) = v22;
  }

  else
  {
    uint64_t v23 = (void *)(a1 + 256);
  }

  void *v23 = 0LL;
LABEL_36:
  *(void *)(a1 + sub_13818(v0 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  uint64_t v24 = *(void *)(a2 + 272);
  *(void *)(a1 + sub_13818(v0 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v24;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + sub_13818(v0 + 264) = 0LL;
  *(void *)(a2 + 272) = 0LL;
  *(void *)(a2 + 280) = 0LL;
  *(void *)(a1 + 28std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + sub_13818(v0 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(_OWORD *)(a1 + 28std::ostream::~ostream(v2, v3 + 8) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 28std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + sub_13818(v0 + 296) = 0LL;
  *(void *)(a2 + 304) = 0LL;
  sub_520F8(a1 + 312, (uint64_t *)(a2 + 312));
  sub_520F8(a1 + 352, (uint64_t *)(a2 + 352));
  sub_520F8(a1 + 392, (uint64_t *)(a2 + 392));
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  return a1;
}

void *sub_8F5F8(unint64_t a1)
{
  if (a1 >= 0x94F2094F2094F3LL) {
    sub_7A8C4();
  }
  return operator new(440 * a1);
}

std::string *sub_8F640(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2CA1C(&v13, *a2);
      uint64_t v6 = std::string::insert(&v13, 0LL, "'", 1uLL);
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v8 = std::string::append(&v14, "'", 1uLL);
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t cap = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v11 = HIBYTE(cap);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_8F794( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

uint64_t sub_8F800(uint64_t a1)
{
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_48100((uint64_t)__p, (const __CFString *)cf);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 151);
  if ((v2 & 0x80u) == 0LL) {
    int v3 = (void *)*(unsigned __int8 *)(a1 + 151);
  }
  else {
    int v3 = *(void **)(a1 + 136);
  }
  unint64_t v4 = v21;
  int v5 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != (void *)v4)
  {
    BOOL v15 = 0;
    goto LABEL_24;
  }

  uint64_t v6 = (const void **)(a1 + 128);
  if ((v21 & 0x80u) == 0) {
    __int128 v7 = __p;
  }
  else {
    __int128 v7 = (void **)__p[0];
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v15 = memcmp(*v6, v7, *(void *)(a1 + 136)) == 0;
    goto LABEL_23;
  }

  if (*(_BYTE *)(a1 + 151))
  {
    uint64_t v8 = v2 - 1;
    do
    {
      int v10 = *(unsigned __int8 *)v6;
      uint64_t v6 = (const void **)((char *)v6 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v7;
      __int128 v7 = (void **)((char *)v7 + 1);
      int v11 = v12;
      BOOL v14 = v8-- != 0;
      BOOL v15 = v9 == v11;
    }

    while (v9 == v11 && v14);
LABEL_23:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  BOOL v15 = 1;
  if ((char)v21 < 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (!v15) {
    return 0LL;
  }
  uint64_t v16 = sub_5954C();
  return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 224LL))(v16);
}

void sub_8F948(void *a1)
{
}

void *sub_8F968(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return sub_8D668(a1, a2, a3, (a3 - (uint64_t)a2) >> 3);
}

void sub_8F990()
{
}

void sub_8F9A4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_8F9F4(exception, a1);
}

void sub_8F9E0(_Unwind_Exception *a1)
{
}

std::logic_error *sub_8F9F4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t *sub_8FA18(uint64_t *result, uint64_t a2)
{
  qword_48CBB8 = 0LL;
  qword_48CBB0 = 0LL;
  qword_48CBA8 = (uint64_t)&qword_48CBB0;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0LL;
    unint64_t v4 = &result[a2];
    int v5 = &qword_48CBB0;
    while (1)
    {
      if (v5 == &qword_48CBB0)
      {
        __int128 v7 = &qword_48CBB0;
      }

      else
      {
        uint64_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            __int128 v7 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }

          while (v6);
        }

        else
        {
          uint64_t v8 = &qword_48CBB0;
          do
          {
            __int128 v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            uint64_t v8 = v7;
          }

          while (v9);
        }

        unsigned int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 7) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            int v12 = &qword_48CBB0;
            while (1)
            {
              while (1)
              {
                int v11 = (uint64_t *)v3;
                unsigned int v14 = *(_DWORD *)(v3 + 28);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                int v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }

              if (v14 >= v10) {
                break;
              }
              int v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }

          else
          {
            int v11 = &qword_48CBB0;
            int v12 = &qword_48CBB0;
          }

          goto LABEL_17;
        }
      }

      if (v3) {
        int v11 = v7;
      }
      else {
        int v11 = &qword_48CBB0;
      }
      if (v3) {
        int v12 = v7 + 1;
      }
      else {
        int v12 = &qword_48CBB0;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        std::string v13 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v13 + 2std::ostream::~ostream(v2, v3 + 8) = *v2;
        *std::string v13 = 0LL;
        v13[1] = 0LL;
        v13[2] = (uint64_t)v11;
        *int v12 = (uint64_t)v13;
        if (*(void *)qword_48CBA8)
        {
          qword_48CBA8 = *(void *)qword_48CBA8;
          std::string v13 = (uint64_t *)*v12;
        }

        uint64_t result = sub_7A420((uint64_t *)qword_48CBB0, v13);
        ++qword_48CBB8;
      }

      if (++v2 == v4) {
        return result;
      }
      int v5 = (uint64_t *)qword_48CBA8;
      uint64_t v3 = qword_48CBB0;
    }
  }

  return result;
}

void sub_8FB90(_Unwind_Exception *a1)
{
}

void *sub_8FBB0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_47A150;
  return result;
}

void sub_8FBD4(uint64_t a1, void *a2)
{
  *a2 = &off_47A150;
}

uint64_t sub_8FBEC()
{
  return 1LL;
}

_BYTE *sub_8FBFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &off_46DBF8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_8FC34(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_46DBF8;
  *(_BYTE *)(a2 + std::ostream::~ostream(v2, v3 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_8FC54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void *sub_8FC64()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_47A0C0;
  return result;
}

void sub_8FC88(uint64_t a1, void *a2)
{
  *a2 = &off_47A0C0;
}

uint64_t sub_8FCA0()
{
  return 1LL;
}

void *sub_8FCB0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_47A078;
  return result;
}

void sub_8FCD4(uint64_t a1, void *a2)
{
  *a2 = &off_47A078;
}

uint64_t sub_8FCEC()
{
  return 1LL;
}

void sub_8FCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == a2)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    BOOL v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "DeviceSettingsFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 204;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((unint64_t)(a3 - a2) >= 0x41)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
      unint64_t v4 = (os_log_t *)sub_138E8(20);
      int v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          int v12 = "DeviceSettingsFactory.cpp";
          __int16 v13 = 1024;
          int v14 = 209;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d No valid region, but multiple pattern configs specified.",  (uint8_t *)&v11,  0x12u);
        }
      }
    }

    if (!*(_BYTE *)(a1 + 24))
    {
      uint64_t v6 = (os_log_t *)sub_138E8(20);
      __int128 v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          int v12 = "DeviceSettingsFactory.cpp";
          __int16 v13 = 1024;
          int v14 = 210;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d No valid orientation, but multiple pattern configs specified.",  (uint8_t *)&v11,  0x12u);
        }
      }
    }
  }

void sub_8FEE4(_Unwind_Exception *a1)
{
}

uint64_t sub_8FF00(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_7A5B8( (void *)(a1 + 88),  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 176) = 0LL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = 0u;
  return a1;
}

void sub_8FF5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    *(void *)(v1 + 72) = v3;
    operator delete(v3);
  }

  unint64_t v4 = *(void **)(v1 + 32);
  if (v4)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(exception_object);
}

void *sub_8FFA0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_46DC40;
  result[1] = v3;
  return result;
}

uint64_t sub_8FFD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_46DC40;
  a2[1] = v2;
  return result;
}

BOOL sub_8FFF0(uint64_t a1, __int32 *a2, __int32 *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(__int32 **)(v4 + 96);
  uint64_t v6 = wmemchr(*(const __int32 **)(v4 + 88), *a2, ((uint64_t)v5 - *(void *)(v4 + 88)) >> 2);
  if (v6) {
    int v5 = v6;
  }
  __int128 v7 = *(const __int32 **)(v4 + 88);
  uint64_t v8 = *(__int32 **)(v4 + 96);
  BOOL v9 = wmemchr(v7, *a3, v8 - v7);
  if (v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = v8;
  }
  return (char *)v10 - (char *)v5 > 0;
}

void sub_9005C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48CC68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48CC68))
  {
    dword_48CC60 = sub_753A8();
    __cxa_guard_release(&qword_48CC68);
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_48CC78);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48CC78))
    {
      char v2 = sub_90128(dword_48CC60);
      byte_48CC70 = 0;
      byte_48CC71 = v2;
      __cxa_guard_release(&qword_48CC78);
    }
  }

void sub_90100(_Unwind_Exception *a1)
{
}

uint64_t sub_90128(int a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0:
    case 48:
    case 68:
    case 79:
    case 82:
    case 197:
      uint64_t v3 = (os_log_t *)sub_138E8(13);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          int v5 = 136315650;
          uint64_t v6 = "DeviceSettingsFactory.cpp";
          __int16 v7 = 1024;
          int v8 = 77;
          __int16 v9 = 1024;
          int v10 = a1;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Product: %u does not support built in mics",  (uint8_t *)&v5,  0x18u);
        }
      }

      return 1LL;
    case 1:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 76:
    case 89:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 136:
    case 137:
    case 142:
    case 143:
    case 144:
    case 145:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 178:
    case 180:
    case 183:
    case 184:
    case 186:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
      return result;
    case 2:
    case 3:
    case 4:
    case 5:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 134:
    case 135:
    case 138:
    case 139:
    case 140:
    case 141:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 177:
    case 179:
    case 181:
    case 182:
    case 185:
    case 187:
    case 194:
    case 195:
    case 196:
      return 1LL;
    default:
      return 1LL;
  }

uint64_t sub_90238(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a7)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    BOOL v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "AlwaysOnHapticDebug.cpp";
      __int16 v21 = 1024;
      int v22 = 99;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v7 = *(void *)(a7 + 40);
  if (v7)
  {
    uint64_t v8 = sub_3977D0(v7, a3);
    if ((_DWORD)v8)
    {
      uint64_t v9 = v8;
      int v10 = (os_log_t *)sub_138E8(16);
      int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v9);
          if (v18 >= 0) {
            int v12 = __p;
          }
          else {
            int v12 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v20 = "AlwaysOnHapticDebug.cpp";
          __int16 v21 = 1024;
          int v22 = 118;
          __int16 v23 = 1024;
          int v24 = v9;
          __int16 v25 = 2080;
          uint64_t v26 = v12;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error writing buffer to file: %d %s", buf, 0x22u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_903FC(_Unwind_Exception *a1)
{
}

void *sub_90418(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_9049C(_Unwind_Exception *a1)
{
}

void sub_904B0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (void *)sub_2898AC(v2);
    operator delete(v3);
  }

void sub_904DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (void *)sub_31B2AC(v2);
    operator delete(v3);
  }

void sub_90508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        int v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        int v11 = v19;
        if (v9 < 0) {
          int v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        unsigned int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + memset(buf, 0, 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + memset(buf, 0, 24) = v6;
  }

void sub_906FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_90738(AudioObjectID a1, const AudioObjectPropertyAddress *a2, void *inData, int a4)
{
  return AudioObjectSetPropertyData(a1, a2, 0, 0LL, (a4 - (_DWORD)inData) & 0xFFFFFFFC, inData);
}

void sub_90764( uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  if (AudioObjectHasProperty(*a2, inAddress))
  {
    int v17 = 2003329396;
    LOBYTE(__p[0]) = 0;
    unsigned __int8 v20 = 0;
    UInt32 v10 = sub_37408(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = v10;
    if (v10)
    {
      sub_8683C(outData, v10 >> 2);
      OSStatus PropertyData = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, outData[0]);
      int v17 = PropertyData;
      if (PropertyData)
      {
        int v12 = 0;
        *(_DWORD *)a1 = PropertyData;
        *(_BYTE *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0;
        *(_BYTE *)(a1 + 32) = 0;
      }

      else
      {
        AudioObjectID v13 = (void *)sub_908DC((uint64_t)__p, (uint64_t)outData);
        int v14 = v20;
        *(_DWORD *)a1 = v17;
        *(_BYTE *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0;
        *(_BYTE *)(a1 + 32) = 0;
        if (v14)
        {
          *(_OWORD *)(a1 + std::ostream::~ostream(v2, v3 + 8) = *(_OWORD *)__p;
          *(void *)(a1 + memset(buf, 0, 24) = v19;
          v13[1] = 0LL;
          v13[2] = 0LL;
          *AudioObjectID v13 = 0LL;
          int v12 = 1;
          *(_BYTE *)(a1 + 32) = 1;
        }

        else
        {
          int v12 = 0;
        }
      }

      if (outData[0])
      {
        outData[1] = outData[0];
        operator delete(outData[0]);
        int v12 = v20;
      }

      if (v12)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      *(_DWORD *)a1 = 0;
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + memset(buf, 0, 24) = 0LL;
      *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }

uint64_t sub_908DC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2) {
      sub_7E6D4((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_7A5B8( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(_BYTE *)(a1 + memset(buf, 0, 24) = 1;
  }

  return a1;
}

unint64_t sub_90950(AudioObjectID a1, double a2)
{
  AudioObjectID v8 = a1;
  v7.AudioObjectPropertySelector mSelector = 1718839674;
  *(double *)&v7.AudioObjectPropertyScope mScope = a2;
  unint64_t v2 = sub_36EF4(&v8, &v7, 0, 0LL);
  if ((_DWORD)v2 || !v3)
  {
    int v5 = v2;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v5;
  }

  return HIDWORD(v2);
}

char *sub_909D8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  AudioObjectPropertyAddress v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *AudioObjectPropertyAddress v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_7A840(v7, v11);
    AudioObjectID v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  int v12 = (void **)(result + 8);
  int v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    uint64_t v19 = v16;
LABEL_17:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

std::string *sub_90AD0(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_90B04(a1, __s, v4);
}

std::string *sub_90B04(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = (char)__dst->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = __dst->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    AudioObjectPropertyAddress v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }

  else
  {
    AudioObjectPropertyAddress v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = __dst->__r_.__value_.__s.__size_;
      std::string::size_type v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0LL, size, __len, __src);
      return __dst;
    }
  }

  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = __dst->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    __dst->__r_.__value_.__s.__size_ = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

void sub_90BC0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48CD60);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48CD60))
    {
      qword_48CD58 = (uint64_t)off_46DC88;
      __cxa_guard_release(&qword_48CD60);
    }
  }

uint64_t sub_90C10()
{
  return 0LL;
}

uint64_t sub_90C18()
{
  return 0LL;
}

uint64_t sub_90C20()
{
  return 0LL;
}

void sub_90C28(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_90C30()
{
  return 256LL;
}

void sub_90C4C(uint64_t a1, int *a2)
{
  uint64_t v4 = qword_493000;
  if (!qword_493000) {
    goto LABEL_28;
  }
  int v5 = &qword_493000;
  do
  {
    char v6 = sub_90E94((int *)(v4 + 32), a2);
    if (v6 >= 0) {
      AudioObjectPropertyAddress v7 = (uint64_t *)v4;
    }
    else {
      AudioObjectPropertyAddress v7 = (uint64_t *)(v4 + 8);
    }
    if (v6 >= 0) {
      int v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v7;
  }

  while (*v7);
  if (v5 == &qword_493000 || (sub_90E94(a2, (int *)v5 + 8) & 0x80) != 0)
  {
LABEL_28:
    char v20 = 0;
    *(_BYTE *)a1 = 0;
  }

  else
  {
    uint64_t v8 = (os_log_t *)sub_138E8(24);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *((void *)a2 + 1);
      unint64_t v11 = (void *)(v10 + 24);
      sub_2CA1C(v23, *(unsigned int *)(v10 + 48));
      int v12 = v24;
      AudioObjectID v13 = (void **)v23[0];
      sub_2CA1C(__p, *a2);
      int v14 = v23;
      if (v12 < 0) {
        int v14 = v13;
      }
      if (v22 >= 0) {
        unint64_t v15 = __p;
      }
      else {
        unint64_t v15 = (void **)__p[0];
      }
      unsigned int v16 = a2[1];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      __int16 v26 = "DSPChainCache.cpp";
      __int16 v27 = 1024;
      int v28 = 26;
      __int16 v29 = 2080;
      __int16 v30 = v11;
      __int16 v31 = 2080;
      int v32 = v14;
      __int16 v33 = 2080;
      std::string::size_type v34 = v15;
      __int16 v35 = 1024;
      unsigned int v36 = v16;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "%25s:%-5d Retrieving cached DSPChain [%s/%s] for VADContext [%s/%u].",  buf,  0x36u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }

    uint64_t v17 = v5[7];
    *(void *)a1 = v5[6];
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v17;
    if (v17)
    {
      char v18 = (unint64_t *)(v17 + 8);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    char v20 = 1;
  }

  *(_BYTE *)(a1 + 16) = v20;
  std::mutex::unlock((std::mutex *)&unk_493010);
}

void sub_90E64(_Unwind_Exception *a1)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  std::mutex::unlock((std::mutex *)&unk_493010);
  _Unwind_Resume(a1);
}

uint64_t sub_90E94(int *a1, int *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (*a1 == *a2)
  {
    unsigned int v2 = a1[1];
    unsigned int v3 = a2[1];
    if (v2 < v3) {
      return 255LL;
    }
  }

  else if (v2 < v3)
  {
    return 255LL;
  }

  if (v3 < v2) {
    return 1LL;
  }
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *((void *)a2 + 1);
  BOOL v7 = v5 == v6;
  if (v5 < v6) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v7) {
    return 0LL;
  }
  else {
    return v8;
  }
}

void sub_90EEC(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(24);
  unint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *((void *)a1 + 1);
    BOOL v7 = (void *)(v6 + 24);
    sub_2CA1C(v21, *(unsigned int *)(v6 + 48));
    int v8 = v22;
    std::string::size_type v9 = (void **)v21[0];
    sub_2CA1C(__p, *a1);
    uint64_t v10 = v21;
    if (v8 < 0) {
      uint64_t v10 = v9;
    }
    if (v20 >= 0) {
      unint64_t v11 = __p;
    }
    else {
      unint64_t v11 = (void **)__p[0];
    }
    unsigned int v12 = a1[1];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    char v24 = "DSPChainCache.cpp";
    __int16 v25 = 1024;
    int v26 = 38;
    __int16 v27 = 2080;
    int v28 = v7;
    __int16 v29 = 2080;
    __int16 v30 = v10;
    __int16 v31 = 2080;
    int v32 = v11;
    __int16 v33 = 1024;
    unsigned int v34 = v12;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "%25s:%-5d Caching DSPChain [%s/%s] for VADContext [%s/%u].",  buf,  0x36u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
  }

  uint64_t v13 = qword_493000;
  if (qword_493000)
  {
    while (1)
    {
      while (1)
      {
        int v14 = (uint64_t *)v13;
        unint64_t v15 = (int *)(v13 + 32);
        uint64_t v13 = *v14;
        unsigned int v16 = v14;
        if (!*v14) {
          goto LABEL_22;
        }
      }

      unsigned int v16 = v14 + 1;
      uint64_t v13 = v14[1];
      if (!v13) {
        goto LABEL_22;
      }
    }

    uint64_t v17 = v14;
  }

  else
  {
    int v14 = &qword_493000;
    unsigned int v16 = &qword_493000;
LABEL_22:
    uint64_t v17 = operator new(0x40uLL);
    void v17[2] = *(_OWORD *)a1;
    *((void *)v17 + 6) = 0LL;
    *((void *)v17 + 7) = 0LL;
    *(void *)uint64_t v17 = 0LL;
    *((void *)v17 + 1) = 0LL;
    *((void *)v17 + 2) = v14;
    *unsigned int v16 = (uint64_t)v17;
    char v18 = (uint64_t *)v17;
    if (*(void *)qword_492FF8)
    {
      qword_492FF8 = *(void *)qword_492FF8;
      char v18 = (uint64_t *)*v16;
    }

    sub_7A420((uint64_t *)qword_493000, v18);
    ++qword_493008;
  }

  sub_91174((void *)v17 + 6, *a2, a2[1]);
  std::mutex::unlock((std::mutex *)&unk_493010);
}

void sub_91140(_Unwind_Exception *a1)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  std::mutex::unlock((std::mutex *)&unk_493010);
  _Unwind_Resume(a1);
}

void *sub_91174(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (unint64_t *)(a3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

uint64_t *sub_911E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }

    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      BOOL v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + memset(buf, 0, 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + memset(buf, 0, 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + memset(buf, 0, 24) = 1;
      *(_BYTE *)(v12 + memset(buf, 0, 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      BOOL v7 = *(uint64_t **)v12;
    }

    unint64_t v19 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24)) {
      goto LABEL_68;
    }
    char v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        char v20 = v7;
      }

      else
      {
        *((_BYTE *)v20 + memset(buf, 0, 24) = 1;
        *((_BYTE *)v7 + memset(buf, 0, 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
        *char v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        unint64_t v19 = v7;
      }

      uint64_t v23 = v20[2];
      *((_BYTE *)v20 + memset(buf, 0, 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + memset(buf, 0, 24) = 1;
      *((_BYTE *)v19 + memset(buf, 0, 24) = 1;
      char v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }

    *((_BYTE *)v7 + memset(buf, 0, 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + memset(buf, 0, 24) = 1;
    *(_BYTE *)(v12 + memset(buf, 0, 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + std::ostream::~ostream(v2, v3 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    BOOL v7 = *(uint64_t **)(*v7 + 8);
  }

  unint64_t v15 = (void *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    unsigned int v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_59;
    }
    *((_BYTE *)v7 + memset(buf, 0, 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((_BYTE *)v17 + memset(buf, 0, 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  unsigned int v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    unint64_t v15 = v7;
  }

  else
  {
    *((_BYTE *)v15 + memset(buf, 0, 24) = 1;
    *((_BYTE *)v7 + memset(buf, 0, 24) = 0;
    uint64_t v22 = v15[1];
    *BOOL v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    unsigned int v16 = v7;
  }

  uint64_t v23 = v15[2];
  *((_BYTE *)v15 + memset(buf, 0, 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + memset(buf, 0, 24) = 1;
  *((_BYTE *)v16 + memset(buf, 0, 24) = 1;
  char v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + std::ostream::~ostream(v2, v3 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_9156C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(v1 + 12)) {
      notify_cancel(*(_DWORD *)(v1 + 8));
    }
    operator delete((void *)v1);
  }

void **sub_915B4(uint64_t *a1)
{
  uint64_t v37 = a1;
  __int128 v38 = 0LL;
  unsigned int v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v1 = *a1;
  sub_7A5B8(&v38, (const void *)a1[1], a1[2], (a1[2] - a1[1]) >> 2);
  unsigned int v3 = v38;
  uint64_t v2 = (uint64_t)v39;
  uint64_t v4 = &unk_3FF000;
  if (v38 == v39)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    goto LABEL_31;
  }

  int v5 = *(_DWORD **)(v1 + 24);
  uint64_t v6 = *(_DWORD **)(v1 + 32);
  BOOL v7 = v39;
  int v8 = v38;
  while (1)
  {
    int v9 = *(_DWORD *)v8;
    uint64_t v10 = v5;
    if (v5 != v6) {
      break;
    }
LABEL_6:
    v8 += 4;
LABEL_12:
    if (v8 == v7) {
      goto LABEL_16;
    }
  }

  while (*v10 != v9)
  {
    if (++v10 == v6) {
      goto LABEL_6;
    }
  }

  while (1)
  {
    v7 -= 4;
    if (v8 == v7) {
      break;
    }
    int v11 = *(_DWORD *)v7;
    uint64_t v12 = v5;
    while (*v12 != v11)
    {
      if (++v12 == v6)
      {
        *(_DWORD *)int v8 = v11;
        v8 += 4;
        *(_DWORD *)BOOL v7 = v9;
        goto LABEL_12;
      }
    }
  }

  BOOL v7 = v8;
LABEL_16:
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (v3 == v7)
  {
LABEL_31:
    uint64_t v23 = v2 - (void)v3;
    if (v2 - (void)v3 == *(void *)(v1 + 32) - *(void *)(v1 + 24)) {
      goto LABEL_45;
    }
    goto LABEL_32;
  }

  uint64_t v13 = (AudioObjectID *)v3;
  do
  {
    AudioObjectID v14 = *v13;
    uint64_t v15 = sub_138E8(1);
    uint64_t v16 = sub_138E8(31);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_26;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if ((*(void *)(v15 + 8) & 1) != 0)
    {
LABEL_26:
      uint64_t v22 = *(os_log_s **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_IONotificationManager.cpp";
        __int16 v44 = 1024;
        int v45 = 83;
        __int16 v46 = 1024;
        LODWORD(v47) = v14;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding IsRunning listener for VAD %u.", buf, 0x18u);
      }
    }

void sub_91998( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, __int128 buf, __int128 a22, __int16 a23, __int16 a24, int a25, int a26)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    uint64_t v28 = (os_log_t *)sub_138E8(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a22) = 1024;
      DWORD1(a22) = v30;
      WORD4(a22) = 2080;
      *(void *)((char *)&a22 + 10) = "";
      a24 = 1024;
      a25 = 98;
      __int16 v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v32 = v29;
      uint32_t v33 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }

  else
  {
    unsigned int v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      unsigned int v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16LL))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = v38;
        WORD6(a22) = 2080;
        *(void *)((char *)&a22 + 14) = "";
        HIWORD(a25) = 1024;
        a26 = 98;
        __int16 v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unsigned int v39 = (os_log_t *)sub_138E8(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = "";
        WORD6(a22) = 1024;
        *(_DWORD *)((char *)&a22 + 14) = 98;
        __int16 v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x91950LL);
}

void **sub_91C10(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    unsigned int v3 = (void *)v2[1];
    if (v3)
    {
      v2[2] = v3;
      operator delete(v3);
    }

    operator delete(v2);
  }

  return a1;
}

uint64_t sub_91C54(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    char v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 57;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inNumberAddresses is 0.",  v25,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }

  if (!a4)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 58;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: inClientData is NULL.",  v25,  0x12u);
    }

    char v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "inClientData is NULL.");
  }

  if (!a3)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 59;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: inAddresses is NULL.",  v25,  0x12u);
    }

    uint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "inAddresses is NULL.");
  }

  uint64_t v6 = sub_138E8(1);
  uint64_t v7 = sub_138E8(31);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)uint64_t v25 = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&v25[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
  if ((*(void *)(v6 + 8) & 1) != 0)
  {
LABEL_12:
    uint64_t v13 = *(os_log_s **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v25 = 136315650;
      *(void *)&v25[4] = "VirtualAudio_IONotificationManager.cpp";
      __int16 v26 = 1024;
      int v27 = 63;
      __int16 v28 = 1024;
      int v29 = a1;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d IO State for VAD %u changed.", v25, 0x18u);
    }
  }

void sub_91FCC(_Unwind_Exception *a1)
{
}

std::string *sub_91FF0(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v9.__r_.__value_.__s.__size_ : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_920C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_92104()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_4A9D98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_4A9D98))
  {
    uint64_t v1 = (dispatch_object_s *)sub_869B4();
    uint64_t v2 = v1;
    if (v1) {
      dispatch_retain(v1);
    }
    dispatch_object_t object = v2;
    caulk::concurrent::messenger::messenger(&unk_4A9D88, &object);
    if (object) {
      dispatch_release(object);
    }
    __cxa_guard_release(&qword_4A9D98);
  }

void sub_92188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  __cxa_guard_abort(&qword_4A9D98);
  _Unwind_Resume(a1);
}

void sub_921B8(caulk::concurrent::message *a1)
{
}

caulk::concurrent::message **sub_921CC(caulk::concurrent::message *a1)
{
  uint64_t v41 = a1;
  uint64_t v38 = *((void *)a1 + 3);
  uint64_t v1 = *(unsigned int **)(v38 + 24);
  unsigned int v39 = *(unsigned int **)(v38 + 32);
  if (v1 != v39)
  {
    uint64_t v2 = 0LL;
    uint64_t v40 = 0LL;
    while (1)
    {
      unsigned int v3 = *v1;
      sub_92EF8();
      uint64_t inAddress = (uint64_t)&unk_49D240;
      LOBYTE(inAddress_std::ostream::~ostream(v2, v3 + 8) = 1;
      sub_92F80((uint64_t)&unk_49D240);
      uint64_t v4 = sub_93068(v3);
      if (!v4)
      {
        __int16 v31 = (os_log_t *)sub_138E8(13);
        int v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "HP_ObjectManager.h";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 51;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): ExecuteSynchronized: no object with given ID",  (uint8_t *)buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 560947818;
      }

      uint64_t v5 = v4[3];
      sub_93128((uint64_t)&inAddress);
      uint64_t v42 = v5 + 8;
      char v43 = 1;
      sub_92F80(v5 + 8);
      LODWORD(inAddress) = v3;
      strcpy((char *)buf, "niogbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      unint64_t v6 = sub_36EF4((AudioObjectID *)&inAddress, buf, 0, 0LL);
      int v8 = v6;
      if ((_DWORD)v6 || !v7)
      {
        unsigned int v34 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v34 = &off_4865A0;
        v34[2] = v8;
      }

      v40 += HIDWORD(v6);
      if (HIDWORD(v6)) {
        break;
      }
LABEL_60:
      sub_93128((uint64_t)&v42);
      if (++v1 == v39) {
        goto LABEL_70;
      }
    }

    AudioObjectID v48 = v3;
    uint64_t inAddress = 0x676C6F6264616370LL;
    LODWORD(inAddress_std::ostream::~ostream(v2, v3 + 8) = 0;
    sub_39EFC((uint64_t)buf, &v48, (AudioObjectPropertyAddress *)&inAddress);
    if (buf[0].mSelector || !(_BYTE)v50)
    {
      uint64_t v35 = __cxa_allocate_exception(0x10uLL);
      AudioObjectPropertySelector mSelector = buf[0].mSelector;
      *(void *)uint64_t v35 = &off_4865A0;
      v35[2] = mSelector;
    }

    __int16 v46 = off_485B28;
    std::string v9 = *(const __CFArray **)&buf[1].mScope;
    if (*(void *)&buf[1].mScope)
    {
      CFRetain(*(CFTypeRef *)&buf[1].mScope);
      __int16 v46 = (uint64_t (**)())&off_47D068;
      CFArrayRef theArray = v9;
      if (!(_BYTE)v50) {
        goto LABEL_14;
      }
    }

    else
    {
      __int16 v46 = (uint64_t (**)())&off_47D068;
      CFArrayRef theArray = 0LL;
    }

    sub_39FD8(&buf[0].mElement);
LABEL_14:
    for (unsigned int i = 0; ; unsigned int i = v11 + 1)
    {
      if ((unint64_t)sub_3A014(theArray) <= i)
      {
        sub_39FD8(&v46);
        goto LABEL_60;
      }

      unsigned int v11 = i;
      uint64_t inAddress = (uint64_t)off_485B28;
      CFTypeRef inAddress_8 = 0LL;
      if (!theArray)
      {
LABEL_25:
        CFTypeRef v13 = 0LL;
        goto LABEL_26;
      }

      if (CFArrayGetCount(theArray) > i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFTypeRef v13 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFTypeRef v14 = inAddress_8;
          CFTypeRef inAddress_8 = v13;
          if (!v14) {
            goto LABEL_24;
          }
        }

        else
        {
          CFTypeRef v14 = inAddress_8;
          CFTypeRef inAddress_8 = 0LL;
          if (!v14) {
            goto LABEL_25;
          }
        }

        CFRelease(v14);
      }

      CFTypeRef v13 = inAddress_8;
      if (inAddress_8) {
LABEL_24:
      }
        CFTypeRef v13 = (CFTypeRef)CFGetTypeID(v13);
LABEL_26:
      if (v13 == (CFTypeRef)CFNumberGetTypeID())
      {
        uint64_t v15 = (const __CFNumber *)inAddress_8;
        if (inAddress_8) {
          CFRetain(inAddress_8);
        }
      }

      else
      {
        uint64_t v15 = 0LL;
      }

      *(void *)&buf[0].AudioObjectPropertySelector mSelector = &off_47D048;
      *(void *)&buf[0].AudioObjectPropertyElement mElement = v15;
      AudioObjectPropertyElement v16 = sub_3A030(v15);
      sub_39FD8(buf);
      sub_39FD8(&inAddress);
      LODWORD(inAddress) = v16;
      strcpy((char *)buf, "pytpbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      unint64_t v18 = sub_36EF4((AudioObjectID *)&inAddress, buf, 0, 0LL);
      if ((_DWORD)v18 || !v17)
      {
        int v30 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v30 = &off_4865A0;
        v30[2] = v18;
      }

      uint64_t v19 = sub_138E8(1);
      uint64_t v20 = sub_138E8(31);
      char v21 = 0;
      uint64_t v22 = 0LL;
      unint64_t v23 = HIDWORD(v18);
      *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v24 = *(void *)(v19 + 8);
      while (1)
      {
        uint64_t v25 = *((int *)&buf[0].mSelector + v22);
        char v26 = v21;
        if (((v24 & v25) != 0) != ((*(void *)(v20 + 8) & v25) != 0)) {
          break;
        }
        char v21 = 1;
        uint64_t v22 = 1LL;
        if ((v26 & 1) != 0)
        {
          if ((v24 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_40;
        }
      }

      if ((v24 & v25) == 0) {
        uint64_t v19 = v20;
      }
      if ((*(void *)(v19 + 8) & 1) != 0)
      {
LABEL_40:
        int v27 = *(os_log_s **)v19;
        if (*(void *)v19 && os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
        {
          buf[0].AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "VirtualAudio_IONotificationManager.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 138;
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = v16;
          __int16 v50 = 1024;
          LODWORD(v51) = v23;
          _os_log_impl(&dword_0, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Active port %u, type %u", (uint8_t *)buf, 0x1Eu);
        }
      }

void sub_92E2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

caulk::concurrent::message **sub_92EA4(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24LL))( caulk::alloc::realtime_safe_resource,  v2,  40LL,  8LL);
  return a1;
}

void sub_92EF8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_49D388);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_49D388))
    {
      sub_93AF4((uint64_t)&unk_49D240);
      xmmword_49D360 = 0u;
      *(_OWORD *)&qword_49D370 = 0u;
      dword_49D380 = 1065353216;
      __cxa_guard_release(&qword_49D388);
    }
  }

void sub_92F68(_Unwind_Exception *a1)
{
}

void sub_92F80(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  pthread_t v5 = v2;
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  unsigned int v3 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v3 && v2 == v3) {
      goto LABEL_4;
    }
  }

  else if (!v3)
  {
LABEL_4:
    uint64_t v4 = (void *)(a1 + 240);
    goto LABEL_8;
  }

  if (!sub_93344(a1))
  {
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
    sub_93574((float *)(a1 + 248), (unint64_t)v2, &v5)[3] = 1LL;
    goto LABEL_10;
  }

  uint64_t v4 = sub_93574((float *)(a1 + 248), (unint64_t)v2, &v5) + 3;
LABEL_8:
  ++*v4;
LABEL_10:
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
}

void sub_9304C(_Unwind_Exception *a1)
{
}

uint64_t *sub_93068(unsigned int a1)
{
  if (!*((void *)&xmmword_49D360 + 1)) {
    return 0LL;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_49D360 + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
  }

  else
  {
    unint64_t v2 = (DWORD2(xmmword_49D360) - 1) & a1;
  }

  unsigned int i = *(uint64_t **)(xmmword_49D360 + 8 * v2);
  if (i)
  {
    for (unsigned int i = (uint64_t *)*i; i; unsigned int i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }

      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((void *)&xmmword_49D360 + 1)) {
            v4 %= *((void *)&xmmword_49D360 + 1);
          }
        }

        else
        {
          v4 &= *((void *)&xmmword_49D360 + 1) - 1LL;
        }

        if (v4 != v2) {
          return 0LL;
        }
      }
    }
  }

  return i;
}

uint64_t sub_93128(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    pthread_t v3 = pthread_self();
    pthread_t v9 = v3;
    std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 168));
    unint64_t v4 = *(_opaque_pthread_t **)(v2 + 232);
    if (v3)
    {
      if (v4) {
        BOOL v5 = v3 == v4;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5) {
        goto LABEL_10;
      }
    }

    else if (v4)
    {
LABEL_10:
      if (!sub_93344(v2))
      {
LABEL_15:
        std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 168));
        return a1;
      }

      char v7 = sub_9347C((void *)(v2 + 248), (unint64_t)v3);
      if (!v7) {
        sub_8F9A4("unordered_map::at: key not found");
      }
      if (v7[3] < 2uLL)
      {
        sub_939A0((void *)(v2 + 248), (unint64_t)v3);
        std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 168));
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v2);
        return a1;
      }

      unint64_t v6 = sub_93574((float *)(v2 + 248), (unint64_t)v3, &v9) + 3;
LABEL_14:
      --*v6;
      goto LABEL_15;
    }

    unint64_t v6 = (void *)(v2 + 240);
    goto LABEL_14;
  }

  return a1;
}

void sub_93228(void *a1)
{
}

BOOL sub_93248(AudioObjectID a1)
{
  v13.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v14 = a1;
  *(void *)&v13.AudioObjectPropertySelector mSelector = 0x676C6F6269616170LL;
  unint64_t v2 = sub_36EF4(&v14, &v13, 0, 0LL);
  v13.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v14 = a1;
  *((void *)&v4 + 1) = v3;
  *(void *)&__int128 v4 = v2;
  uint64_t v5 = HIDWORD(v2);
  *(void *)&v13.AudioObjectPropertySelector mSelector = 0x676C6F6270657074LL;
  unint64_t v7 = sub_36EF4(&v14, &v13, 0, 0LL);
  BOOL result = 0LL;
  if (((v4 >> 32) & 0xFF00000000LL) == 0 || v5 == 0)
  {
    *((void *)&v11 + 1) = v6;
    *(void *)&__int128 v11 = v7;
    uint64_t v10 = v11 >> 32;
    if ((v10 & 0xFF00000000LL) == 0) {
      LODWORD(v10) = 1701868910;
    }
    return (_DWORD)v10 == 1701868400 || (_DWORD)v10 == 1701869160;
  }

  return result;
}

void sub_93300(void *a1)
{
  uint8x8_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

void sub_93318(void *a1)
{
  uint8x8_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

void sub_93330(void *a1)
{
  uint8x8_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

BOOL sub_93344(uint64_t a1)
{
  unint64_t v2 = (std::recursive_mutex *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  pthread_t v3 = pthread_self();
  int8x8_t v4 = *(int8x8_t *)(a1 + 256);
  if (v4)
  {
    unint64_t v5 = 0x9DDFEA08EB382D69LL * (((8 * (_DWORD)v3) + 8LL) ^ ((unint64_t)v3 >> 32));
    unint64_t v6 = 0x9DDFEA08EB382D69LL * (((unint64_t)v3 >> 32) ^ (v5 >> 47) ^ v5);
    unint64_t v7 = 0x9DDFEA08EB382D69LL * (v6 ^ (v6 >> 47));
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v7;
      if (v7 >= *(void *)&v4) {
        unint64_t v9 = v7 % *(void *)&v4;
      }
    }

    else
    {
      unint64_t v9 = v7 & (*(void *)&v4 - 1LL);
    }

    unsigned int i = *(void **)(*(void *)(a1 + 248) + 8 * v9);
    if (i)
    {
      for (unsigned int i = (void *)*i; i; unsigned int i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v7 == v11)
        {
          char v12 = (_opaque_pthread_t *)i[2];
          if (v12)
          {
            if (v3 && v12 == v3) {
              break;
            }
          }

          else if (!v3)
          {
            break;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *(void *)&v4) {
              v11 %= *(void *)&v4;
            }
          }

          else
          {
            v11 &= *(void *)&v4 - 1LL;
          }

          if (v11 != v9) {
            goto LABEL_22;
          }
        }
      }
    }
  }

  else
  {
LABEL_22:
    unsigned int i = 0LL;
  }

  BOOL v13 = i != 0LL;
  std::recursive_mutex::unlock(v2);
  return v13;
}

void *sub_9347C(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * (((8 * a2) + 8LL) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  uint8x8_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        uint64_t v11 = result[2];
        if (v11)
        {
          if (a2 && v11 == a2) {
            return result;
          }
        }

        else if (!a2)
        {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      BOOL result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *sub_93574(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (((8 * a2) + 8LL) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unsigned int i = *v11; i; unsigned int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          uint64_t v14 = i[2];
          if (v14)
          {
            if (a2 && v14 == a2) {
              return i;
            }
          }

          else if (!a2)
          {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  unsigned int i = operator new(0x20uLL);
  *unsigned int i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0LL;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1LL);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }

    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }

      else
      {
        uint64_t v29 = 1LL << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }

      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }

      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          char v21 = operator new(8LL * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0LL;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0LL;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }

            else
            {
              v25 &= *(void *)&prime - 1LL;
            }

            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }

                else
                {
                  v31 &= *(void *)&prime - 1LL;
                }

                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }

                  void *v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }

                unint64_t v31 = v25;
LABEL_59:
                uint64_t v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }

              while (v30);
            }
          }

          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }

        unsigned int v36 = *(void **)a1;
        *(void *)a1 = 0LL;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0LL;
        *((void *)a1 + 1) = 0LL;
      }
    }

LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  int v32 = *(void **)a1;
  uint32_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unsigned int i = *v33;
LABEL_76:
    *uint32_t v33 = i;
    goto LABEL_77;
  }

  *unsigned int i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }

    else
    {
      v34 &= v9 - 1;
    }

    uint32_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_76;
  }

            int v30 = v75 != 3;
            unint64_t v31 = v77 == v22;
            if (v21 < 0) {
              operator delete(*(void **)buf);
            }
            if (v30 != v31)
            {
              int v32 = (os_log_t *)sub_138E8(7);
              uint32_t v33 = *v32;
              if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_INFO))
              {
                unint64_t v34 = *((_DWORD *)v5 + 7);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "DeviceListener_Aspen.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 195;
                int64_t v87 = 2112;
                std::string::size_type v88 = cf[0];
                char v89 = 1024;
                int v90 = v34;
                _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_INFO,  "%25s:%-5d Newly connected device located. UID: %@, AudioObjectID: %u",  buf,  0x22u);
              }

              uint64_t v35 = *((void *)&v62 + 1);
              unsigned int v36 = v63;
              os_log_t v37 = 32 * (v63 - *((void *)&v62 + 1)) - 1;
              if ((void)v63 == *((void *)&v62 + 1)) {
                os_log_t v37 = 0LL;
              }
              if (v37 == *((void *)&v64 + 1) + (void)v64)
              {
                sub_16DE54(&v62);
                uint64_t v35 = *((void *)&v62 + 1);
                unsigned int v36 = v63;
              }

              if (v36 == v35) {
                uint64_t v38 = 0LL;
              }
              else {
                uint64_t v38 = *(void *)(v35 + (((*((void *)&v64 + 1) + (void)v64) >> 5) & 0x7FFFFFFFFFFFFF8LL))
              }
                    + 16LL * (BYTE8(v64) + v64);
              unsigned int v39 = *((_DWORD *)v5 + 7);
              uint64_t v40 = cf[0];
              if (cf[0])
              {
                CFRetain(cf[0]);
                *(_DWORD *)uint64_t v38 = v39;
                CFRetain(v40);
                *(void *)(v38 + std::ostream::~ostream(v2, v3 + 8) = v40;
                CFRelease(v40);
              }

              else
              {
                *(_DWORD *)uint64_t v38 = v39;
                *(void *)(v38 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
              }

              ++*((void *)&v64 + 1);
            }

            else
            {
              sub_13B6B0(&v73, *((_DWORD *)v5 + 7));
            }
          }
        }

        else if (v17)
        {
          goto LABEL_36;
        }
      }

      else
      {
        unint64_t v18 = (os_log_t *)sub_138E8(7);
        unint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = *((_DWORD *)v5 + 7);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DeviceListener_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 186;
          int64_t v87 = 1024;
          LODWORD(v8std::ostream::~ostream(v2, v3 + 8) = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d UID is NULL for newly connected device with AudioObjectID %u ... ignoring device",  buf,  0x18u);
        }
      }

      if (cf[0]) {
        CFRelease(cf[0]);
      }
      uint64_t v41 = v5[1];
      if (v41)
      {
        do
        {
          uint64_t v42 = (void **)v41;
          uint64_t v41 = (void *)*v41;
        }

        while (v41);
      }

      else
      {
        do
        {
          uint64_t v42 = (void **)v5[2];
          uint64_t v14 = *v42 == v5;
          unint64_t v5 = v42;
        }

        while (!v14);
      }

      unint64_t v5 = v42;
    }

    while (v42 != v72);
  }

  char v43 = *(void (**)(__int128 *, void, void))(a1 + 120);
  if (v43) {
    v43(&v62, 0LL, *(void *)(a1 + 128));
  }
  uint64_t v60 = 0u;
  std::string::size_type v61 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  sub_82600((uint64_t)buf);
  __int16 v44 = v69;
  if (v69 != v70)
  {
    do
    {
      int v45 = (char *)cf[1];
      if ((CFTypeRef)v60 == cf[1]) {
        __int16 v46 = 0LL;
      }
      else {
        __int16 v46 = 32 * (v60 - (unint64_t)cf[1]) - 1;
      }
      uint64_t v47 = *((void *)&v61 + 1);
      AudioObjectID v48 = *((void *)&v61 + 1) + v61;
      if (v46 == *((void *)&v61 + 1) + (void)v61)
      {
        sub_16DE54(cf);
        uint64_t v47 = *((void *)&v61 + 1);
        int v45 = (char *)cf[1];
        AudioObjectID v48 = v61 + *((void *)&v61 + 1);
      }

      CFDictionaryRef v49 = *(void *)&v45[(v48 >> 5) & 0x7FFFFFFFFFFFFF8LL] + 16LL * v48;
      *(_DWORD *)CFDictionaryRef v49 = *((_DWORD *)v44 + 7);
      *(void *)(v49 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
      *((void *)&v61 + 1) = v47 + 1;
      __int16 v50 = (os_log_t *)sub_138E8(7);
      uint64_t v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
      {
        uint64_t v52 = *((_DWORD *)v44 + 7);
        *(_DWORD *)__int128 v81 = 136315650;
        *(void *)&v81[4] = "DeviceListener_Aspen.cpp";
        int v82 = 1024;
        char v83 = 225;
        std::string::size_type v84 = 1024;
        unint64_t v85 = v52;
        _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_INFO,  "%25s:%-5d Newly disconnected device located. AudioObjectID: %u",  v81,  0x18u);
      }

      CFDictionaryRef v53 = v44[1];
      if (v53)
      {
        do
        {
          std::string::size_type v54 = (void **)v53;
          CFDictionaryRef v53 = (void *)*v53;
        }

        while (v53);
      }

      else
      {
        do
        {
          std::string::size_type v54 = (void **)v44[2];
          uint64_t v14 = *v54 == v44;
          __int16 v44 = v54;
        }

        while (!v14);
      }

      __int16 v44 = v54;
    }

    while (v54 != v70);
  }

  BOOL v55 = *(void (**)(CFTypeRef *, uint64_t, void))(a1 + 120);
  if (v55) {
    v55(cf, 1LL, *(void *)(a1 + 128));
  }
  char v56 = sub_5518(v2);
  if (v58 != &v73) {
    sub_52A24((uint64_t)v58, v73, v74);
  }
  if (v56) {
    sub_563C(v2);
  }
  if (v92 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(&buf[8]);
  std::ios::~ios(&v93);
  sub_16DCBC((uint64_t)cf);
  sub_16DCBC((uint64_t)&v62);
  sub_32C8C((void *)v68[1]);
  sub_32C8C((void *)v67[1]);
  sub_32C8C((void *)v66[1]);
  sub_32C8C((void *)v65.n128_u64[1]);
  sub_32C8C(v70[0]);
  sub_32C8C(v72[0]);
  sub_32C8C(v74[0]);
  sub_88C08(v77[0]);
  sub_32C8C(v79[0]);
}

LABEL_77:
  ++*((void *)a1 + 3);
  return i;
}

  uint64_t v38 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      uint64_t v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

LABEL_79:
        return 1LL;
      }
    }

    uint64_t v42 = 0LL;
    goto LABEL_79;
  }

  unint64_t v7 = (os_log_s *)*(id *)sub_138E8(24);
  unint64_t v8 = v7;
  if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = *(_DWORD *)(a1 + 24);
    uint8x8_t v10 = *(void *)(a1 + 32);
    outData[0] = 4.8153e-34;
    *(void *)&outData[1] = "DSPChain.mm";
    uint64_t v70 = 1024;
    __int128 v71 = 2351;
    uint64_t v72 = 1024;
    *(_DWORD *)__int128 v73 = v9;
    *(_WORD *)&v73[4] = 2048;
    *(void *)&v73[6] = v10;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL device? deviceID: %u client: %p",  (uint8_t *)outData,  0x22u);
  }

  return 0LL;
}

      uint64_t v51 = (char *)operator new(0x498uLL);
      sub_818B8((uint64_t)v51, (__int128 *)&v599);
      *(void *)uint64_t v51 = off_47B020;
      *(void *)&v583 = v51 + 1160;
      *(_OWORD *)(v51 + 1160) = 0u;
      if ((unint64_t)((char *)a2[1] - (char *)*a2) < 9 || (v582 = (void **)(*a2)[1], *v582 == v582[1]))
      {
        v538 = (os_log_t *)sub_138E8(13);
        v539 = *v538;
        if (*v538 && os_log_type_enabled(*v538, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v637 = 136315394;
          *(void *)&v637[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          *(_WORD *)&v637[12] = 1024;
          *(_DWORD *)&v637[14] = 38;
          _os_log_impl( &dword_0,  v539,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v637,  0x12u);
        }

        v540 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v540, "Precondition failure.");
      }

      uint64_t v52 = (os_log_t *)sub_138E8(24);
      CFDictionaryRef v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v54 = &v599;
        if ((v599.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v54 = (std::string *)v599.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v637 = 136315650;
        *(void *)&v637[4] = "DSPGraphChain_HAL_SpeakerProtection.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 40;
        *(_WORD *)&v637[18] = 2080;
        *(void *)&v637[20] = v54;
        _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating DSPGraphChain_HAL_SpeakerProtection - %s",  v637,  0x1Cu);
      }

      if (qword_49C910)
      {
        BOOL v55 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_49C910);
        char v56 = v55;
        if (v55 && qword_49C908)
        {
          *(void *)v637 = qword_49C908;
          *(void *)&v637[8] = v55;
          goto LABEL_106;
        }
      }

      else
      {
        char v56 = 0LL;
      }

      uint64_t v60 = operator new(0xD0uLL);
      v60[1] = 0LL;
      v60[2] = 0LL;
      std::string *v60 = off_47C108;
      sub_2C2C38((uint64_t)(v60 + 3), v582, v585);
      *(void *)v637 = v60 + 3;
      *(void *)&v637[8] = v60;
      sub_AFDAC((uint64_t)v637, *(void **)v637, *(uint64_t *)v637);
      std::string::size_type v61 = v60 + 2;
      do
        uint64_t v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      qword_49C908 = (uint64_t)(v60 + 3);
      char v63 = (std::__shared_weak_count *)qword_49C910;
      qword_49C910 = (uint64_t)v60;
      if (v63) {
        std::__shared_weak_count::__release_weak(v63);
      }
      if (v56)
      {
        __int128 v64 = (unint64_t *)&v56->__shared_owners_;
        do
          char v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }

    __s[23] = 7;
    *(_DWORD *)__s = 1852534357;
    unint64_t v7 = 7LL;
    unint64_t v8 = 1853321070;
    goto LABEL_78;
  }

      v322 = 0uLL;
      v323[0] = 0LL;
      char v308 = 0uLL;
      int v309 = 0LL;
      v306 = 0uLL;
      std::string::size_type v84 = sub_1BB104((uint64_t)a2, a5, 0LL);
      __int128 v86 = (v84 & 0xFF00000000LL) != 0 && (_DWORD)v84 == 2;
      int64_t v87 = sub_1BB104((uint64_t)a2, a5, 1LL);
      if (v86)
      {
        std::string::size_type v88 = operator new(0x110uLL);
        v88[1] = 0LL;
        v88[2] = 0LL;
        *std::string::size_type v88 = off_4823F0;
        *(void *)&v306 = sub_2C8FE4((uint64_t)(v88 + 3));
        *((void *)&v306 + 1) = v88;
        char v89 = v9[9];
        LOBYTE(__p[0]) = 0;
        v303 = 0;
        sub_1B1E64(v306, (uint64_t)v65, v320, v89, (uint64_t)a2, 0LL, (uint64_t)__p);
        if (v303 && __p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        goto LABEL_223;
      }

      if ((v87 & 0xFF00000000LL) != 0)
      {
        if (sub_1F6EF0((uint64_t)v320))
        {
          sub_1B2A3C(&v324, (uint64_t)a2, (uint64_t)v65, (uint64_t)v320, v9[9], a3);
          if (!v324.__r_.__value_.__r.__words[0])
          {
            uint64_t v169 = (os_log_t *)sub_138E8(13);
            v170 = *v169;
            if (*v169)
            {
              if (os_log_type_enabled(*v169, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 244;
                _os_log_impl( &dword_0,  v170,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Valid Per VAD SW volume control needs to be present here",  buf,  0x12u);
              }
            }
          }

          int v90 = v322.i64[1];
          if (v322.i64[1] >= v323[0])
          {
            char v139 = (v322.i64[1] - v322.i64[0]) >> 4;
            __int128 v140 = v139 + 1;
            char v141 = v323[0] - v322.i64[0];
            if ((v323[0] - v322.i64[0]) >> 3 > v140) {
              __int128 v140 = v141 >> 3;
            }
            else {
              __int128 v142 = v140;
            }
            *(void *)&_BYTE buf[32] = v323;
            int v143 = (char *)sub_7BE90(v142);
            __int128 v145 = &v143[16 * v139];
            CFTypeRef v146 = v324.__r_.__value_.__l.__size_;
            *(_OWORD *)__int128 v145 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
            if (v146)
            {
              int v147 = (unint64_t *)(v146 + 8);
              do
                char v148 = __ldxr(v147);
              while (__stxr(v148 + 1, v147));
            }

            BOOL v149 = (void *)v322.i64[1];
            char v150 = (void *)v322.i64[0];
            if (v322.i64[1] == v322.i64[0])
            {
              __int128 v153 = vdupq_n_s64(v322.u64[1]);
              std::string v151 = &v143[16 * v139];
            }

            else
            {
              std::string v151 = &v143[16 * v139];
              do
              {
                uint64_t v152 = *((_OWORD *)v149 - 1);
                v149 -= 2;
                *((_OWORD *)v151 - 1) = v152;
                v151 -= 16;
                *BOOL v149 = 0LL;
                v149[1] = 0LL;
              }

              while (v149 != v150);
              __int128 v153 = v322;
            }

            std::string::size_type v94 = v145 + 16;
            v322.i64[0] = (uint64_t)v151;
            v322.i64[1] = (uint64_t)(v145 + 16);
            *(int64x2_t *)&buf[8] = v153;
            int v189 = v323[0];
            v323[0] = &v143[16 * v144];
            *(void *)&_BYTE buf[24] = v189;
            *(void *)AudioObjectPropertyAddress buf = v153.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            *(void *)v322.i64[1] = v324.__r_.__value_.__r.__words[0];
            uint64_t v91 = v324.__r_.__value_.__l.__size_;
            *(void *)(v90 + std::ostream::~ostream(v2, v3 + 8) = v324.__r_.__value_.__l.__size_;
            if (v91)
            {
              std::string::size_type v92 = (unint64_t *)(v91 + 8);
              do
                id v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }

            std::string::size_type v94 = (_OWORD *)(v90 + 16);
          }

          v322.i64[1] = (uint64_t)v94;
          __int16 v190 = v324.__r_.__value_.__l.__size_;
          if (!v324.__r_.__value_.__l.__size_) {
            goto LABEL_223;
          }
          __int128 v191 = (unint64_t *)(v324.__r_.__value_.__l.__size_ + 8);
          do
            int v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
        }

        else
        {
          std::string v105 = sub_1BB104((uint64_t)a2, a5, 0LL);
          if ((v105 & 0xFF00000000LL) == 0 || v105 != 3LL)
          {
            char v280 = (os_log_t *)sub_138E8(13);
            int v281 = *v280;
            if (*v280 && os_log_type_enabled(*v280, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 250;
              _os_log_impl( &dword_0,  v281,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            v282 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v282, "Precondition failure.");
          }

          unint64_t v106 = v320;
          v291 = v9[9];
          unint64_t v107 = (os_log_t *)sub_138E8(19);
          unint64_t v108 = *v107;
          if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_DEFAULT))
          {
            sub_2DB6FC(&v324, (unsigned int *)a2 + 2);
            CFIndex v109 = (v324.__r_.__value_.__s.__size_ & 0x80u) == 0
                 ? &v324
                 : (std::string *)v324.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 611;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v109;
            _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating PerVAD Hardware Volume Control for %s",  buf,  0x1Cu);
          }

          CFIndex v110 = *((void *)v106 + 24);
          if (!v110)
          {
            v283 = (os_log_t *)sub_138E8(13);
            char v284 = *v283;
            if (*v283 && os_log_type_enabled(*v283, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 614;
              _os_log_impl( &dword_0,  v284,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
            }

            int v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v285, "Precondition failure.");
          }

          __int128 v111 = (os_log_t *)sub_138E8(18);
          std::string v112 = *v111;
          if (*v111 && os_log_type_enabled(*v111, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(&v324, v106[36]);
            CFTypeRef v113 = (char)v324.__r_.__value_.__s.__size_;
            char v114 = v324.__r_.__value_.__r.__words[0];
            unsigned __int8 v115 = sub_203C24(*((void *)v106 + 24));
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            if (v113 >= 0) {
              unsigned int v116 = &v324;
            }
            else {
              unsigned int v116 = (std::string *)v114;
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 617;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v116;
            *(_WORD *)&_BYTE buf[28] = 1024;
            *(_DWORD *)&_BYTE buf[30] = v115;
            _os_log_impl( &dword_0,  v112,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Software volumemode supported by headset (%s) ? %d",  buf,  0x22u);
            __int128 v86 = 0;
          }

          sub_1B31E4((uint64_t *)buf, v110, 1869968496LL, 0, 0, 74);
          char v304 = *(_OWORD *)buf;
          char v117 = *(void *)buf;
          buf[0] = 0;
          _BYTE buf[24] = 0;
          sub_1B1E64(v117, (uint64_t)v65, v106, v291, (uint64_t)a2, 0LL, (uint64_t)buf);
          if (buf[24] && *(void *)buf) {
            operator delete(*(void **)buf);
          }
          int64_t v118 = v106[66];
          if ((v118 == 1635085420 || v118 == 1633759844) && sub_203C24(*((void *)v106 + 24)))
          {
            CFTypeRef v119 = operator new(0x28uLL);
            void *v119 = &off_4745E0;
            v119[1] = v110;
            *((_DWORD *)v119 + 4) = 1937204590;
            *((_BYTE *)v119 + 32) = 0;
            *(void *)((char *)v119 + 20) = 0LL;
            *((_BYTE *)v119 + 2std::ostream::~ostream(v2, v3 + 8) = 0;
            char v120 = operator new(0x18uLL);
            unsigned int v121 = *(void **)(a3 + 8);
            *char v120 = a3;
            v120[1] = v121;
            v120[2] = v119;
            *unsigned int v121 = v120;
            __int128 v122 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + std::ostream::~ostream(v2, v3 + 8) = v120;
            *(void *)(a3 + 16) = v122;
            sub_174CC0((uint64_t)v119);
          }

          if (!(void)v304)
          {
            v171 = (os_log_t *)sub_138E8(13);
            int v172 = *v171;
            if (*v171)
            {
              if (os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 257;
                _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Valid Per VAD HW Volume control needs to be present here",  buf,  0x12u);
              }
            }
          }

          char v123 = v322.i64[1];
          if (v322.i64[1] >= v323[0])
          {
            os_log_t v154 = (v322.i64[1] - v322.i64[0]) >> 4;
            std::string v155 = v154 + 1;
            int v156 = v323[0] - v322.i64[0];
            if ((v323[0] - v322.i64[0]) >> 3 > v155) {
              std::string v155 = v156 >> 3;
            }
            else {
              int v157 = v155;
            }
            *(void *)&_BYTE buf[32] = v323;
            std::string v158 = (char *)sub_7BE90(v157);
            CFTypeRef v160 = &v158[16 * v154];
            char v161 = *((void *)&v304 + 1);
            *(_OWORD *)CFTypeRef v160 = v304;
            if (v161)
            {
              v162 = (unint64_t *)(v161 + 8);
              do
                char v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }

            v164 = (void *)v322.i64[1];
            char v165 = (void *)v322.i64[0];
            if (v322.i64[1] == v322.i64[0])
            {
              char v168 = vdupq_n_s64(v322.u64[1]);
              v166 = &v158[16 * v154];
            }

            else
            {
              v166 = &v158[16 * v154];
              do
              {
                char v167 = *((_OWORD *)v164 - 1);
                v164 -= 2;
                *((_OWORD *)v166 - 1) = v167;
                v166 -= 16;
                void *v164 = 0LL;
                v164[1] = 0LL;
              }

              while (v164 != v165);
              char v168 = v322;
            }

            int64x2_t v127 = v160 + 16;
            v322.i64[0] = (uint64_t)v166;
            v322.i64[1] = (uint64_t)(v160 + 16);
            *(int64x2_t *)&buf[8] = v168;
            unsigned __int8 v193 = v323[0];
            v323[0] = &v158[16 * v159];
            *(void *)&_BYTE buf[24] = v193;
            *(void *)AudioObjectPropertyAddress buf = v168.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            *(void *)v322.i64[1] = v304;
            __int128 v124 = *((void *)&v304 + 1);
            *(void *)(v123 + std::ostream::~ostream(v2, v3 + 8) = *((void *)&v304 + 1);
            if (v124)
            {
              uint64_t v125 = (unint64_t *)(v124 + 8);
              do
                int v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
            }

            int64x2_t v127 = (_OWORD *)(v123 + 16);
          }

          v322.i64[1] = (uint64_t)v127;
          __int16 v190 = *((void *)&v304 + 1);
          if (!*((void *)&v304 + 1)) {
            goto LABEL_223;
          }
          __int128 v194 = (unint64_t *)(*((void *)&v304 + 1) + 8LL);
          do
            int v192 = __ldaxr(v194);
          while (__stlxr(v192 - 1, v194));
        }

        if (v192)
        {
LABEL_223:
          if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
          {
            v195 = sub_105C24(a5, 3);
            (*(void (**)(std::string *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v10->_os_unfair_lock_opaque + 256LL))( &v324,  v10,  1LL,  1885888867LL);
            char v304 = 0uLL;
            if (!v324.__r_.__value_.__l.__size_
              || (*((void *)&v304 + 1) = std::__shared_weak_count::lock((std::__shared_weak_count *)v324.__r_.__value_.__l.__size_)) == 0LL
              || (v196 = v324.__r_.__value_.__r.__words[0], (*(void *)&char v304 = v324.__r_.__value_.__r.__words[0]) == 0LL))
            {
              v255 = (os_log_t *)sub_138E8(13);
              v256 = *v255;
              if (*v255 && os_log_type_enabled(*v255, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 289;
                _os_log_impl( &dword_0,  v256,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate HAC volume control",  buf,  0x12u);
              }

              v257 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v257, "Unable to locate HAC volume control");
            }

            __int128 v197 = (uint64_t)v310;
            sub_B8CBC((uint64_t *)buf, (uint64_t *)(v195 + 16), "", 292);
            char v198 = *(void *)(v195 + 56);
            LOBYTE(v299[0]) = 0;
            char v300 = 0;
            sub_1B1E64(v196, v197, *(unsigned int **)buf, v198, (uint64_t)a2, 0LL, (uint64_t)v299);
            if (v300 && v299[0])
            {
              v299[1] = v299[0];
              operator delete(v299[0]);
            }

            int v199 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              __int128 v200 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unsigned __int8 v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }

            int v202 = (std::__shared_weak_count *)*((void *)&v304 + 1);
            if (*((void *)&v304 + 1))
            {
              __int128 v203 = (unint64_t *)(*((void *)&v304 + 1) + 8LL);
              do
                int v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }

            sub_CB19C( &v304,  (uint64_t)v324.__r_.__value_.__l.__data_,  (std::__shared_weak_count *)v324.__r_.__value_.__l.__size_);
            v205 = v322.i64[1];
            if (v322.i64[1] >= v323[0])
            {
              v207 = (v322.i64[1] - v322.i64[0]) >> 4;
              v208 = (v323[0] - v322.i64[0]) >> 3;
              if (v208 <= v207 + 1) {
                v208 = v207 + 1;
              }
              if (v323[0] - v322.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
                __int128 v209 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                __int128 v209 = v208;
              }
              *(void *)&_BYTE buf[32] = v323;
              v210 = (char *)sub_7BE90(v209);
              __int128 v212 = &v210[16 * v207];
              *(_OWORD *)__int128 v212 = v304;
              char v304 = 0uLL;
              v213 = (void *)v322.i64[1];
              v214 = (void *)v322.i64[0];
              if (v322.i64[1] == v322.i64[0])
              {
                v217 = vdupq_n_s64(v322.u64[1]);
                __int128 v215 = &v210[16 * v207];
              }

              else
              {
                __int128 v215 = &v210[16 * v207];
                do
                {
                  int v216 = *((_OWORD *)v213 - 1);
                  v213 -= 2;
                  *((_OWORD *)v215 - 1) = v216;
                  v215 -= 16;
                  const void *v213 = 0LL;
                  v213[1] = 0LL;
                }

                while (v213 != v214);
                v217 = v322;
              }

              __int128 v206 = v212 + 16;
              v322.i64[0] = (uint64_t)v215;
              v322.i64[1] = (uint64_t)(v212 + 16);
              *(int64x2_t *)&buf[8] = v217;
              __int128 v218 = v323[0];
              v323[0] = &v210[16 * v211];
              *(void *)&_BYTE buf[24] = v218;
              *(void *)AudioObjectPropertyAddress buf = v217.i64[0];
              sub_A0D64((uint64_t)buf);
            }

            else
            {
              *(_OWORD *)v322.i64[1] = v304;
              __int128 v206 = (_OWORD *)(v205 + 16);
            }

            v322.i64[1] = (uint64_t)v206;
            if (v324.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v324.__r_.__value_.__l.__size_);
            }
          }

          char v219 = (uint64_t)v310;
          sub_1BCF60((uint64_t)v310, a3, a5, v289);
          sub_32CC4(v219);
          sub_1BDB94(v219);
          v310 = 0LL;
          a4[2] = v219;
          a4[3] = 0LL;
          if (v86)
          {
            v220 = operator new(0x68uLL);
            __int128 v221 = v220;
            std::string v222 = (std::__shared_weak_count *)*((void *)&v306 + 1);
            v298 = v306;
            if (*((void *)&v306 + 1))
            {
              v223 = (unint64_t *)(*((void *)&v306 + 1) + 8LL);
              do
                __int128 v224 = __ldxr(v223);
              while (__stxr(v224 + 1, v223));
            }

            sub_CAF18((uint64_t)v220, &v298);
            a4[4] = v221;
            if (v222)
            {
              v225 = (unint64_t *)&v222->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                std::__shared_weak_count::__release_weak(v222);
              }
            }

            __int128 v227 = operator new(0x68uLL);
            v228 = v227;
            v229 = (std::__shared_weak_count *)*((void *)&v306 + 1);
            int v297 = v306;
            if (*((void *)&v306 + 1))
            {
              v230 = (unint64_t *)(*((void *)&v306 + 1) + 8LL);
              do
                v231 = __ldxr(v230);
              while (__stxr(v231 + 1, v230));
            }

            sub_CAF18((uint64_t)v227, &v297);
            a4[5] = v228;
            if (v229)
            {
              v232 = (unint64_t *)&v229->__shared_owners_;
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
              }
            }
          }

          else
          {
            v234 = operator new(0x68uLL);
            sub_20D0B4((uint64_t)v234, (char **)&v322);
            a4[4] = v234;
            v235 = operator new(0x68uLL);
            sub_1662B4((uint64_t)v235, (char **)&v308);
            a4[5] = v235;
          }

          v236 = operator new(0x68uLL);
          sub_CAEBC((uint64_t *)buf);
          char v292 = *(std::__shared_weak_count **)&buf[8];
          char v296 = *(_OWORD *)buf;
          *(void *)AudioObjectPropertyAddress buf = 0LL;
          *(void *)&buf[8] = 0LL;
          sub_CAF18((uint64_t)v236, &v296);
          a4[6] = v236;
          if (v292)
          {
            v237 = (unint64_t *)&v292->__shared_owners_;
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
              std::__shared_weak_count::__release_weak(v292);
            }
          }

          v239 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            v240 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }

          v242 = operator new(0x68uLL);
          sub_CB144((uint64_t *)buf);
          int v293 = *(std::__shared_weak_count **)&buf[8];
          v295 = *(_OWORD *)buf;
          *(void *)AudioObjectPropertyAddress buf = 0LL;
          *(void *)&buf[8] = 0LL;
          sub_CAF18((uint64_t)v242, &v295);
          a4[7] = v242;
          if (v293)
          {
            v243 = (unint64_t *)&v293->__shared_owners_;
            do
              v244 = __ldaxr(v243);
            while (__stlxr(v244 - 1, v243));
            if (!v244)
            {
              ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
              std::__shared_weak_count::__release_weak(v293);
            }
          }

          v245 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            v246 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              v247 = __ldaxr(v246);
            while (__stlxr(v247 - 1, v246));
            if (!v247)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
          }

          v248 = (std::__shared_weak_count *)*((void *)&v306 + 1);
          if (*((void *)&v306 + 1))
          {
            v249 = (unint64_t *)(*((void *)&v306 + 1) + 8LL);
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }

          *(void *)AudioObjectPropertyAddress buf = &v308;
          sub_7A668((void ***)buf);
          *(void *)AudioObjectPropertyAddress buf = &v322;
          sub_7A668((void ***)buf);
          std::string v98 = 0LL;
          char v65 = v310;
          goto LABEL_300;
        }

        (*(void (**)(std::string::size_type))(*(void *)v190 + 16LL))(v190);
        __int128 v188 = (std::__shared_weak_count *)v190;
LABEL_222:
        std::__shared_weak_count::__release_weak(v188);
        goto LABEL_223;
      }

      std::string v99 = (os_log_t *)sub_138E8(19);
      std::string v100 = *v99;
      if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_DEFAULT))
      {
        sub_2DB6FC(&v324, (unsigned int *)a2 + 2);
        std::string v101 = (v324.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v324 : (std::string *)v324.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 263;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v101;
        _os_log_impl(&dword_0, v100, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating global volume control for %s", buf, 0x1Cu);
      }

      if (v320[66] == 1633759844 && sub_1F6EF0((uint64_t)v320))
      {
        v286 = (os_log_t *)sub_138E8(13);
        v287 = *v286;
        if (*v286 && os_log_type_enabled(*v286, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 267;
          _os_log_impl( &dword_0,  v287,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        char v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v288, "Precondition failure.");
      }

      (*(void (**)(std::string *__return_ptr, os_unfair_lock_s *, uint64_t, void))(*(void *)&v10->_os_unfair_lock_opaque
                                                                                             + 248LL))( &v324,  v10,  1LL,  v290);
      sub_1B37C4((uint64_t *)&v304, (uint64_t)a2, (uint64_t)v65, (uint64_t)v320, v9[9], a3, 0);
      if (!v324.__r_.__value_.__l.__size_ || *(void *)(v324.__r_.__value_.__l.__size_ + 8) == -1LL)
      {
        v275 = (os_log_t *)sub_138E8(13);
        char v276 = *v275;
        if (*v275 && os_log_type_enabled(*v275, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 275;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v290;
          _os_log_impl( &dword_0,  v276,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control for portType %u.",  buf,  0x18u);
        }

        int v277 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v277, "Unable to locate mute control for portType %u.");
      }

      else
      {
        std::string v102 = (std::__shared_weak_count *)*((void *)&v304 + 1);
        if (*((void *)&v304 + 1) && *(void *)(*((void *)&v304 + 1) + 8LL) != -1LL)
        {
          sub_150BF4( &v301,  (uint64_t)v324.__r_.__value_.__l.__data_,  (std::__shared_weak_count *)v324.__r_.__value_.__l.__size_);
          unint64_t v103 = *((void *)&v308 + 1);
          if (*((void *)&v308 + 1) >= (unint64_t)v309)
          {
            std::string::size_type v128 = (uint64_t)(*((void *)&v308 + 1) - v308) >> 4;
            uint64_t v129 = (uint64_t)&v309[-v308] >> 3;
            if (v129 <= v128 + 1) {
              uint64_t v129 = v128 + 1;
            }
            else {
              int v130 = v129;
            }
            *(void *)&_BYTE buf[32] = &v309;
            uint64_t v131 = (char *)sub_7BE90(v130);
            uint64_t v133 = &v131[16 * v128];
            *(_OWORD *)uint64_t v133 = v301;
            int v301 = 0uLL;
            int v134 = (void *)*((void *)&v308 + 1);
            char v135 = (void *)v308;
            if (*((void *)&v308 + 1) == (void)v308)
            {
              char v138 = vdupq_n_s64(*((unint64_t *)&v308 + 1));
              int v136 = &v131[16 * v128];
            }

            else
            {
              int v136 = &v131[16 * v128];
              do
              {
                unsigned int v137 = *((_OWORD *)v134 - 1);
                v134 -= 2;
                *((_OWORD *)v136 - 1) = v137;
                v136 -= 16;
                *int v134 = 0LL;
                v134[1] = 0LL;
              }

              while (v134 != v135);
              char v138 = (int64x2_t)v308;
            }

            int64_t v104 = v133 + 16;
            *(void *)&char v308 = v136;
            *((void *)&v308 + 1) = v133 + 16;
            *(int64x2_t *)&buf[8] = v138;
            std::string::size_type v173 = v309;
            int v309 = &v131[16 * v132];
            *(void *)&_BYTE buf[24] = v173;
            *(void *)AudioObjectPropertyAddress buf = v138.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            **((_OWORD **)&v308 + 1) = v301;
            int64_t v104 = (_OWORD *)(v103 + 16);
          }

          *((void *)&v308 + 1) = v104;
          sub_CB19C(&v301, v304, v102);
          uint64_t v174 = v322.i64[1];
          if (v322.i64[1] >= v323[0])
          {
            __int128 v176 = (v322.i64[1] - v322.i64[0]) >> 4;
            int v177 = (v323[0] - v322.i64[0]) >> 3;
            if (v177 <= v176 + 1) {
              int v177 = v176 + 1;
            }
            if (v323[0] - v322.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
              std::string::size_type v178 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              std::string::size_type v178 = v177;
            }
            *(void *)&_BYTE buf[32] = v323;
            __int128 v179 = (char *)sub_7BE90(v178);
            v181 = &v179[16 * v176];
            *(_OWORD *)v181 = v301;
            int v301 = 0uLL;
            __int128 v182 = (void *)v322.i64[1];
            std::string::size_type v183 = (void *)v322.i64[0];
            if (v322.i64[1] == v322.i64[0])
            {
              v186 = vdupq_n_s64(v322.u64[1]);
              int v184 = &v179[16 * v176];
            }

            else
            {
              int v184 = &v179[16 * v176];
              do
              {
                __int128 v185 = *((_OWORD *)v182 - 1);
                v182 -= 2;
                *((_OWORD *)v184 - 1) = v185;
                v184 -= 16;
                *__int128 v182 = 0LL;
                v182[1] = 0LL;
              }

              while (v182 != v183);
              v186 = v322;
            }

            v175 = v181 + 16;
            v322.i64[0] = (uint64_t)v184;
            v322.i64[1] = (uint64_t)(v181 + 16);
            *(int64x2_t *)&buf[8] = v186;
            int v187 = v323[0];
            v323[0] = &v179[16 * v180];
            *(void *)&_BYTE buf[24] = v187;
            *(void *)AudioObjectPropertyAddress buf = v186.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            *(_OWORD *)v322.i64[1] = v301;
            v175 = (_OWORD *)(v174 + 16);
          }

          v322.i64[1] = (uint64_t)v175;
          std::__shared_weak_count::__release_weak(v102);
          __int128 v188 = (std::__shared_weak_count *)v324.__r_.__value_.__l.__size_;
          if (!v324.__r_.__value_.__l.__size_) {
            goto LABEL_223;
          }
          goto LABEL_222;
        }

        v278 = (os_log_t *)sub_138E8(13);
        v279 = *v278;
        if (*v278 && os_log_type_enabled(*v278, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 277;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v290;
          _os_log_impl( &dword_0,  v279,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control for portType %u.",  buf,  0x18u);
        }

        int v277 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v277, "Unable to locate volume control for portType %u.");
      }
    }
  }

  else
  {
    LODWORD(v324.__r_.__value_.__l.__data_) = v290;
    char v83 = (void *)sub_7A22C((uint64_t)buf, (unsigned int *)&v324, 1LL);
    id v80 = sub_1BDD40(v83, (uint64_t *)&v310);
    sub_32C8C(*(void **)&buf[8]);
    if (v79) {
      goto LABEL_71;
    }
  }

  if ((v80 & 1) != 0) {
    goto LABEL_77;
  }
  uint64_t v95 = (os_log_t *)sub_138E8(19);
  id v96 = *v95;
  if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_DEFAULT))
  {
    sub_1ACDE4(&v324, (uint64_t)a2);
    std::string v97 = (v324.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v324 : (std::string *)v324.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 221;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v97;
    _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HAL Speaker Protection is missing. Failing route %s",  buf,  0x1Cu);
  }

  std::string v98 = 1LL;
LABEL_300:
  v310 = 0LL;
  if (v65) {
    (*(void (**)(uint64_t *))(*v65 + 8))(v65);
  }
  sub_32C8C((void *)v311[1]);
  sub_85B80(v315);
  if (v317[0])
  {
    v317[1] = v317[0];
    operator delete(v317[0]);
  }

  v251 = v321;
  if (v321)
  {
    v252 = (unint64_t *)&v321->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }

  return v98;
}

        uint64_t v24 = 1LL;
        goto LABEL_254;
      }

      unint64_t v8 = 25204;
    }

    else if (v211 <= 1668050282)
    {
      if (v211 == 1668047728) {
        goto LABEL_51;
      }
      if (v211 == 1668047974) {
        goto LABEL_56;
      }
      unint64_t v8 = 26735;
    }

    else
    {
      if (v211 > 1668051823)
      {
        if (v211 == 1668051824) {
          goto LABEL_51;
        }
        unint64_t v7 = 1668314723;
        goto LABEL_50;
      }

      if (v211 == 1668050283) {
        goto LABEL_51;
      }
      unint64_t v8 = 29545;
    }

    unint64_t v7 = v8 | 0x636C0000;
    goto LABEL_50;
  }

  if (v211 > 1852796516)
  {
    if (v211 > 1969840751)
    {
      if (v211 > 1987012962)
      {
        if (v211 == 1987012963) {
          goto LABEL_56;
        }
        unint64_t v7 = 2003329648;
      }

      else
      {
        if (v211 == 1969840752) {
          goto LABEL_56;
        }
        unint64_t v7 = 1986357346;
      }

      goto LABEL_50;
    }

    if (v211 == 1852796517 || v211 == 1886352244) {
      goto LABEL_56;
    }
    unint64_t v9 = 1918986611;
LABEL_46:
    if (v211 != v9) {
      goto LABEL_319;
    }
    goto LABEL_56;
  }

  if (v211 <= 1752132964)
  {
    if (v211 == 1684108899) {
      goto LABEL_51;
    }
    if (v211 == 1684628340) {
      goto LABEL_56;
    }
    unint64_t v7 = 1751414371;
LABEL_50:
    if (v211 == v7) {
      goto LABEL_51;
    }
LABEL_319:
    std::string::size_type v178 = (os_log_t *)sub_138E8(13);
    __int128 v179 = *v178;
    if (*v178 && os_log_type_enabled(*v178, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, v6);
      v180 = SHIBYTE(v195) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4198;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v180;
      _os_log_impl( &dword_0,  v179,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported trigger %s.",  buf,  0x1Cu);
      if (SHIBYTE(v195) < 0) {
        operator delete(__p);
      }
    }

    v181 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v181, "Unsupported trigger %s.");
  }

  if (v211 > 1768764004)
  {
    if (v211 == 1768764005) {
      goto LABEL_56;
    }
    unint64_t v9 = 1768780647;
    goto LABEL_46;
  }

  if (v211 != 1752132965)
  {
    unint64_t v7 = 1752396914;
    goto LABEL_50;
  }

  if (*(_BYTE *)(v2 + 497))
  {
    LODWORD(v2std::ostream::~ostream(v2, v3 + 8) = 0;
    if (*(_DWORD *)(v2 + 844) == 1919183219 && v103 && v92)
    {
      unsigned int v36 = *v6;
      os_log_t v37 = v6[1];
      if (*v6 == v37)
      {
        LODWORD(v2std::ostream::~ostream(v2, v3 + 8) = 1;
      }

      else
      {
        do
        {
          for (unsigned int i = *(void **)(v36 + 16); i != (void *)(v36 + 8); unsigned int i = (void *)i[1])
          {
            unsigned int v39 = (std::__shared_weak_count *)i[3];
            if (!v39) {
              goto LABEL_97;
            }
            uint64_t v40 = std::__shared_weak_count::lock(v39);
            uint8x8_t v28 = v40;
            if (!v40) {
              goto LABEL_98;
            }
            uint64_t v41 = i[2];
            if (v41) {
              uint64_t v42 = (*(unsigned __int16 *)(v41 + 184) >> 5) & 1;
            }
            else {
              uint64_t v42 = 0;
            }
            p_shared_owners = (unint64_t *)&v40->__shared_owners_;
            do
              __int16 v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v28);
            }

            if (!v42) {
              goto LABEL_97;
            }
          }

          v36 += 32LL;
          LODWORD(v2std::ostream::~ostream(v2, v3 + 8) = 1;
        }

        while (v36 != v37);
      }
    }
  }

  else
  {
LABEL_97:
    LODWORD(v2std::ostream::~ostream(v2, v3 + 8) = 0;
  }

          char v43 = 1000 * v42.__d_.__rep_;
LABEL_78:
          if (v43 > (v41.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v44.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_81:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v44);
            std::chrono::steady_clock::now();
            goto LABEL_82;
          }
        }

        v44.__d_.__rep_ = v43 + v41.__d_.__rep_;
        goto LABEL_81;
      }

void sub_9398C(_Unwind_Exception *a1)
{
}

void sub_939A0(void *a1, unint64_t a2)
{
  unint64_t v3 = sub_9347C(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }

    else
    {
      v5 &= *(void *)&v4 - 1LL;
    }

    unint64_t v7 = *(void **)(*a1 + 8 * v5);
    do
    {
      unint64_t v8 = v7;
      unint64_t v7 = (void *)*v7;
    }

    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }

    else
    {
      v9 &= *(void *)&v4 - 1LL;
    }

    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8LL);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }

      else
      {
        v10 &= *(void *)&v4 - 1LL;
      }

      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0LL;
    }

    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }

      else
      {
        v12 &= *(void *)&v4 - 1LL;
      }

      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }

    *unint64_t v8 = v11;
    void *v3 = 0LL;
    --a1[3];
    operator delete(v3);
  }

uint64_t sub_93AF4(uint64_t a1)
{
  int8x8_t v2 = std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)a1);
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)&v2[1]);
  *(_OWORD *)(a1 + 24std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + sub_13818(v0 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  return a1;
}

void sub_93B3C(_Unwind_Exception *a1)
{
}

void sub_93B50(uint64_t a1)
{
}

uint64_t sub_93B80()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48CDA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48CDA0))
  {
    BOOL v2 = (MGGetBoolAnswer(@"VGDDUFPWHbX/Ie9RSI0yDQ") & 1) != 0
      || sub_56120() == 173
      || sub_56120() == 188;
    byte_48CD98 = v2;
    __cxa_guard_release(&qword_48CDA0);
  }

  return byte_48CD98;
}

void sub_93C04(_Unwind_Exception *a1)
{
}

void sub_93C1C(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer(@"InternalBuild", 0LL);
  uint64_t v11 = v1;
  char v12 = 1;
  if (v1) {
    BOOL v2 = CFEqual(v1, kCFBooleanTrue) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  byte_48CDA8 = v2;
  unint64_t v3 = (const __CFString *)MGCopyAnswer(@"ReleaseType", 0LL);
  unint64_t v9 = v3;
  char v10 = 1;
  if (v3) {
    BOOL v4 = CFStringCompare(@"Carrier", v3, 0LL) == kCFCompareEqualTo;
  }
  else {
    BOOL v4 = 0;
  }
  byte_48CDA9 = v4;
  unint64_t v5 = (const void *)MGCopyAnswer(@"IsUIBuild", 0LL);
  unint64_t v7 = v5;
  char v8 = 1;
  if (v5) {
    BOOL v6 = CFEqual(v5, kCFBooleanTrue) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  byte_48CDAA = v6;
  sub_13568((uint64_t)&v7);
  sub_19DFC((uint64_t)&v9);
  sub_13568((uint64_t)&v11);
}

void sub_93D28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_93D64()
{
  uint64_t result = MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A");
  if ((_DWORD)result) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  return result;
}

uint64_t sub_93D94(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  BOOL v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_93E98(_Unwind_Exception *a1)
{
}

uint64_t sub_93EC0(uint64_t a1)
{
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 16) = v3;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

uint64_t sub_93F50(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  uint64_t v4 = 0LL;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1718383986)
  {
    if (mSelector <= 1935962991)
    {
      if (mSelector <= 1885434481)
      {
        if (mSelector <= 1818326126)
        {
          if (mSelector == 1718383987) {
            goto LABEL_98;
          }
          if (mSelector == 1735682404) {
            return v4;
          }
          int v7 = 1752657012;
          goto LABEL_87;
        }

        if (mSelector <= 1869574755)
        {
          if (mSelector != 1818326127)
          {
            int v7 = 1819569763;
            goto LABEL_87;
          }

          goto LABEL_98;
        }

        if (mSelector == 1869574756)
        {
          if (a2->mScope != 1768845428) {
            return 0LL;
          }
        }

        else
        {
          if (mSelector != 1869575794) {
            goto LABEL_121;
          }
          if (a2->mScope != 1768845428) {
            return 0LL;
          }
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = 0;
        LOBYTE(v32) = 0;
        unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *, void **, void, void))(*(void *)a1 + 392LL))( a1,  1685287015LL,  1818980210LL,  buf,  &v32,  0LL,  0LL);
        if ((_BYTE)v32) {
          return v19;
        }
        else {
          return 0LL;
        }
      }

      if (mSelector > 1886807153)
      {
        if (mSelector <= 1934456179)
        {
          if (mSelector != 1886807154)
          {
            int v6 = 1919773028;
            goto LABEL_77;
          }

          goto LABEL_98;
        }

        if (mSelector == 1934456180) {
          goto LABEL_98;
        }
        int v8 = 1935762281;
        goto LABEL_97;
      }

      if (mSelector <= 1886413411)
      {
        if (mSelector == 1885434482) {
          return v4;
        }
        int v8 = 1885631346;
        goto LABEL_97;
      }

      if (mSelector != 1886413412)
      {
        int v7 = 1886413426;
        goto LABEL_87;
      }

      AudioObjectPropertyScope mScope = a2->mScope;
      p_AudioObjectPropertyScope mScope = (int *)&a2->mScope;
      if (mScope == 1869968496)
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 1347437175;
        return sub_38C50C((int *)buf, p_mScope, (void *)(a1 + 184));
      }
    }

    else if (mSelector > 1953002092)
    {
      if (mSelector > 1986225265)
      {
        if (mSelector > 1986361443)
        {
          if (mSelector == 1986361444) {
            return 1LL;
          }
          int v8 = 2004053366;
        }

        else
        {
          if (mSelector == 1986225266) {
            goto LABEL_98;
          }
          int v8 = 1986225268;
        }

        goto LABEL_97;
      }

      if (mSelector <= 1953719147)
      {
        if (mSelector == 1953002093) {
          goto LABEL_98;
        }
        int v8 = 1953002354;
        goto LABEL_97;
      }

      if (mSelector != 1953719148)
      {
        int v6 = 1969844082;
        goto LABEL_77;
      }

      if (a2->mScope == 1869968496)
      {
        sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1045);
        LODWORD(__p[0]) = 0;
        Boolean outIsSettable = 0;
        int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, Boolean *, void, uint64_t))(*(void *)a1 + 392LL))( a1,  1987013737LL,  64001LL,  __p,  &outIsSettable,  0LL,  1LL);
        int v15 = outIsSettable;
        uint64_t v16 = *(void *)&v37[4];
        if (*(uint8_t **)&v37[4] == buf)
        {
          unsigned int v18 = 0;
        }

        else
        {
          do
          {
            uint64_t v17 = *(void *)(v16 + 16);
            int v32 = (void *)0x6F75747054547323LL;
            int v33 = 0;
            unsigned int v18 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v17 + 24LL))(v17, &v32);
            if ((v18 & 1) != 0) {
              break;
            }
            uint64_t v16 = *(void *)(v16 + 8);
          }

          while ((uint8_t *)v16 != buf);
        }

        if (v15) {
          int v29 = v14;
        }
        else {
          int v29 = 0;
        }
        uint64_t v4 = v29 | v18;
        goto LABEL_103;
      }
    }

    else
    {
      if (mSelector <= 1937138531)
      {
        if (mSelector > 1936876643)
        {
          if (mSelector == 1936876644 || mSelector == 1936879204) {
            return sub_AA93C(a1, a2);
          }
          goto LABEL_121;
        }

        if (mSelector == 1935962992) {
          return v4;
        }
        int v7 = 1936744803;
        goto LABEL_87;
      }

      if (mSelector <= 1952997987)
      {
        if (mSelector == 1937138532) {
          goto LABEL_98;
        }
        int v8 = 1937204590;
        goto LABEL_97;
      }

      if (mSelector != 1952997988)
      {
        int v7 = 1952998002;
        goto LABEL_87;
      }

      AudioObjectPropertyScope v21 = a2->mScope;
      uint64_t v20 = (int *)&a2->mScope;
      if (v21 == 1869968496)
      {
        if ((sub_1CB4A0() & 1) != 0) {
          return 1LL;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 1416118903;
        return sub_38C50C((int *)buf, v20, (void *)(a1 + 184));
      }
    }

    return 0LL;
  }

  if (mSelector > 1651664738)
  {
    if (mSelector <= 1684498540)
    {
      if (mSelector > 1684103986)
      {
        if (mSelector > 1684365923)
        {
          if (mSelector == 1684365924) {
            goto LABEL_98;
          }
          int v8 = 1684370276;
        }

        else
        {
          if (mSelector == 1684103987) {
            goto LABEL_98;
          }
          int v8 = 1684304756;
        }
      }

      else
      {
        if (mSelector <= 1668047202)
        {
          if (mSelector != 1651664739)
          {
            int v7 = 1651798898;
            goto LABEL_87;
          }

          goto LABEL_98;
        }

        if (mSelector == 1668047203) {
          return v4;
        }
        int v8 = 1668576114;
      }

void sub_948A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_948E0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    int v187 = (os_log_t *)sub_138E8(13);
    __int128 v188 = *v187;
    if (*v187 && os_log_type_enabled(*v187, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v339 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
      int v189 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1653;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v189;
      _os_log_impl( &dword_0,  v188,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)buf,  0x1Cu);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    __int128 v191 = (os_log_t *)sub_138E8(13);
    int v192 = *v191;
    if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v339 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
      unsigned __int8 v193 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136316162;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1654;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v193;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl( &dword_0,  v192,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
    }

    __int128 v194 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v194 = &off_4865A0;
    v194[2] = 561211770;
  }

  if (!a6)
  {
    v195 = (os_log_t *)sub_138E8(13);
    v196 = *v195;
    if (*v195 && os_log_type_enabled(*v195, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v339 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
      __int128 v197 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315906;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1655;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v197;
      _os_log_impl( &dword_0,  v196,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)buf,  0x26u);
    }

    char v198 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v198 = &off_4865A0;
    v198[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    int v199 = (os_log_t *)sub_138E8(13);
    __int128 v200 = *v199;
    if (*v199 && os_log_type_enabled(*v199, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v339 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
      unsigned __int8 v201 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1656;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v201;
      _os_log_impl( &dword_0,  v200,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  (uint8_t *)buf,  0x1Cu);
    }

    int v202 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v202 = &off_4865A0;
    v202[2] = 1852797029;
  }

  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 > 1718839673)
  {
    if (v13 <= 1934456179)
    {
      if (v13 <= 1885434481)
      {
        if (v13 > 1853059699)
        {
          switch(v13)
          {
            case 1853059700:
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
              {
                v251 = (os_log_t *)sub_138E8(13);
                v252 = *v251;
                if (*v251 && os_log_type_enabled(*v251, OS_LOG_TYPE_ERROR))
                {
                  CFTypeRef v339 = *(CFTypeRef *)a2;
                  LODWORD(cf) = *(_DWORD *)(a2 + 8);
                  sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
                  int size = (char)__p.__r_.__value_.__s.__size_;
                  std::string::size_type v254 = __p.__r_.__value_.__r.__words[0];
                  int v255 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
                  p_p = &__p;
                  buf[0] = 136316162;
                  *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                  if (size < 0) {
                    p_p = (std::string *)v254;
                  }
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 1664;
                  HIWORD(buf[4]) = 2080;
                  *(void *)&buf[5] = p_p;
                  LOWORD(buf[7]) = 1024;
                  *(_DWORD *)((char *)&buf[7] + 2) = a5;
                  HIWORD(buf[8]) = 1024;
                  buf[9] = v255;
                  _os_log_impl( &dword_0,  v252,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size(passed: %u; required: %u).",
                    (uint8_t *)buf,
                    0x28u);
                }

                v257 = __cxa_allocate_exception(0x10uLL);
                *(void *)v257 = &off_4865A0;
                v257[2] = 561211770;
              }

              int v99 = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 112LL))(a1, *(double *)a6);
              if (v99)
              {
                int v100 = v99;
                std::string v101 = (os_log_t *)sub_138E8(13);
                std::string v102 = *v101;
                if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
                {
                  buf[0] = 136315394;
                  *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 1666;
                  _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Failed to set sample rate.",  (uint8_t *)buf,  0x12u);
                }

                unint64_t v103 = __cxa_allocate_exception(0x10uLL);
                *(void *)unint64_t v103 = &off_4865A0;
                v103[2] = v100;
              }

              return;
            case 1869574756:
              if (*(_DWORD *)(a2 + 4) == 1768845428)
              {
                uint64_t v87 = *(void *)(a1 + 520);
                for (uint64_t i = *(void *)(a1 + 528); v87 != i; v87 += 16LL)
                {
                  uint64_t v89 = *(void *)(*(void *)v87 + 136LL);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v89 + 88LL))( v89,  1685287015LL,  1818980210LL,  0LL))
                  {
                    unsigned int v90 = *a6;
                    if (*a6 - 1 >= 5)
                    {
                      v213 = (os_log_t *)sub_138E8(13);
                      v214 = *v213;
                      if (*v213 && os_log_type_enabled(*v213, OS_LOG_TYPE_ERROR))
                      {
                        buf[0] = 136315394;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2635;
                        _os_log_impl( &dword_0,  v214,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
                      }

                      __int128 v215 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v215, "Precondition failure.");
                    }

                    if (v90 == 5) {
                      uint64_t v91 = 1970040690LL;
                    }
                    else {
                      uint64_t v91 = 1818980210LL;
                    }
                    std::string::size_type v92 = (os_log_t *)sub_138E8(16);
                    id v93 = *v92;
                    if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_INFO))
                    {
                      sub_2CA1C(&__p, v91);
                      std::string::size_type v94 = &__p;
                      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        std::string::size_type v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2638;
                      HIWORD(buf[4]) = 2080;
                      *(void *)&buf[5] = v94;
                      LOWORD(buf[7]) = 1024;
                      *(_DWORD *)((char *)&buf[7] + 2) = v90;
                      _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting orientation override {%s, %d}",  (uint8_t *)buf,  0x22u);
                    }

                    int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, void))(*(void *)v89 + 112LL))( v89,  1685287015LL,  v91,  a6,  a5,  0LL);
                    if (v95)
                    {
                      char v219 = (os_log_t *)sub_138E8(13);
                      v220 = *v219;
                      if (*v219 && os_log_type_enabled(*v219, OS_LOG_TYPE_ERROR))
                      {
                        sub_2CA1C(&__p, v91);
                        __int128 v221 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                             ? &__p
                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                        buf[0] = 136315906;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2641;
                        HIWORD(buf[4]) = 1024;
                        buf[5] = v95;
                        LOWORD(buf[6]) = 2080;
                        *(void *)((char *)&buf[6] + 2) = v221;
                        _os_log_impl( &dword_0,  v220,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property %s",  (uint8_t *)buf,  0x22u);
                      }

                      std::string v222 = __cxa_allocate_exception(0x10uLL);
                      *(void *)std::string v222 = &off_4865A0;
                      v222[2] = v95;
                    }

                    LODWORD(v339) = 8;
                    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v89 + 88LL))( v89,  1685287015LL,  1869768052LL,  0LL) & 1) == 0)
                    {
                      v210 = (os_log_t *)sub_138E8(13);
                      v211 = *v210;
                      if (*v210 && os_log_type_enabled(*v210, OS_LOG_TYPE_ERROR))
                      {
                        buf[0] = 136315394;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2647;
                        _os_log_impl( &dword_0,  v211,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): LockOrientation Property is present, but Orientati onEffectiveTime is missing",  (uint8_t *)buf,  0x12u);
                      }

                      __int128 v212 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error( v212,  "LockOrientation Property is present, but OrientationEffectiveTime is missing");
                    }

                    int v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, CFTypeRef *, void, void))(*(void *)v89 + 104LL))( v89,  1685287015LL,  1869768052LL,  &__p,  &v339,  0LL,  0LL);
                    if (v96)
                    {
                      int v216 = (os_log_t *)sub_138E8(13);
                      v217 = *v216;
                      if (*v216 && os_log_type_enabled(*v216, OS_LOG_TYPE_ERROR))
                      {
                        buf[0] = 136315650;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2650;
                        HIWORD(buf[4]) = 1024;
                        buf[5] = v96;
                        _os_log_impl( &dword_0,  v217,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) obtaining DSP Property f or orientation effective time",  (uint8_t *)buf,  0x18u);
                      }

                      __int128 v218 = __cxa_allocate_exception(0x10uLL);
                      *(void *)__int128 v218 = &off_4865A0;
                      v218[2] = v96;
                    }

                    std::string v97 = (os_log_t *)sub_138E8(16);
                    std::string v98 = *v97;
                    if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_DEFAULT))
                    {
                      buf[0] = 136315650;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2651;
                      HIWORD(buf[4]) = 2048;
                      *(void *)&buf[5] = __p.__r_.__value_.__r.__words[0];
                      _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d orientation effective time: %llu",  (uint8_t *)buf,  0x1Cu);
                    }

                    *((void *)a6 + 1) = __p.__r_.__value_.__r.__words[0];
                  }
                }
              }

              return;
            case 1869575794:
              if (*(_DWORD *)(a2 + 4) == 1768845428)
              {
                uint64_t v44 = *(void *)(a1 + 520);
                for (uint64_t j = *(void *)(a1 + 528); v44 != j; v44 += 16LL)
                {
                  uint64_t v46 = *(void *)(*(void *)v44 + 136LL);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v46 + 88LL))( v46,  1685287015LL,  1818980210LL,  0LL))
                  {
                    unsigned int v47 = *a6;
                    if (*a6 - 1 >= 5)
                    {
                      __int128 v203 = (os_log_t *)sub_138E8(13);
                      int v204 = *v203;
                      if (*v203 && os_log_type_enabled(*v203, OS_LOG_TYPE_ERROR))
                      {
                        buf[0] = 136315394;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2693;
                        _os_log_impl( &dword_0,  v204,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
                      }

                      v205 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v205, "Precondition failure.");
                    }

                    if (v47 == 5) {
                      uint64_t v48 = 1970040690LL;
                    }
                    else {
                      uint64_t v48 = 1818980210LL;
                    }
                    CFDictionaryRef v49 = (os_log_t *)sub_138E8(16);
                    __int16 v50 = *v49;
                    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_INFO))
                    {
                      sub_2CA1C(&__p, v48);
                      uint64_t v51 = &__p;
                      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        uint64_t v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2696;
                      HIWORD(buf[4]) = 2080;
                      *(void *)&buf[5] = v51;
                      LOWORD(buf[7]) = 1024;
                      *(_DWORD *)((char *)&buf[7] + 2) = v47;
                      _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting orientation override {%s, %d}",  (uint8_t *)buf,  0x22u);
                    }

                    int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, void))(*(void *)v46 + 112LL))( v46,  1685287015LL,  v48,  a6,  a5,  0LL);
                    if (v52)
                    {
                      __int128 v206 = (os_log_t *)sub_138E8(13);
                      v207 = *v206;
                      if (*v206 && os_log_type_enabled(*v206, OS_LOG_TYPE_ERROR))
                      {
                        sub_2CA1C(&__p, v48);
                        v208 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                             ? &__p
                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                        buf[0] = 136315906;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2699;
                        HIWORD(buf[4]) = 1024;
                        buf[5] = v52;
                        LOWORD(buf[6]) = 2080;
                        *(void *)((char *)&buf[6] + 2) = v208;
                        _os_log_impl( &dword_0,  v207,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property %s",  (uint8_t *)buf,  0x22u);
                      }

                      __int128 v209 = __cxa_allocate_exception(0x10uLL);
                      *(void *)__int128 v209 = &off_4865A0;
                      v209[2] = v52;
                    }
                  }
                }
              }

              return;
          }

          goto LABEL_263;
        }

        if (v13 != 1718839674)
        {
          int v18 = 1818326127;
          goto LABEL_154;
        }
      }

      else
      {
        if (v13 <= 1886807153)
        {
          if (v13 != 1885434482 && v13 != 1885631346)
          {
            if (v13 != 1886413412) {
              goto LABEL_263;
            }
            if (*(_DWORD *)(a2 + 4) != 1869968496) {
              return;
            }
            sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 2805);
            uint64_t v19 = *(void *)&buf[2];
            if (*(_DWORD **)&buf[2] != buf)
            {
              while (1)
              {
                uint64_t v20 = *(void *)(v19 + 16);
                __p.__r_.__value_.__r.__words[0] = 0x6F75747050504277LL;
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
                uint64_t v19 = *(void *)(v19 + 8);
                if ((_DWORD *)v19 == buf) {
                  goto LABEL_159;
                }
              }

              if ((_DWORD *)v19 != buf)
              {
                uint64_t v136 = sub_138E8(16);
                if ((*(_BYTE *)(v136 + 8) & 1) != 0)
                {
                  unsigned int v137 = *(os_log_s **)v136;
                  if (*(void *)v136)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v136, OS_LOG_TYPE_DEBUG))
                    {
                      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_CommonBase.cpp";
                      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 2812;
                      _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Legacy: Setting PeakPowerBudget (AEA property supported)",  (uint8_t *)&__p,  0x12u);
                    }
                  }
                }

                char v138 = *(const __CFDictionary **)a6;
                if (!v138)
                {
                  v171 = (os_log_t *)sub_138E8(13);
                  int v172 = *v171;
                  if (*v171)
                  {
                    if (os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_CommonBase.cpp";
                      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 2814;
                      _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Dictionary is null!",  (uint8_t *)&__p,  0x12u);
                    }
                  }
                }

                uint64_t v139 = sub_A1240(v138, @"device peak power budget");
                (*(void (**)(void, uint64_t))(**(void **)(v19 + 16) + 216LL))(*(void *)(v19 + 16), v139);
              }
            }

            goto LABEL_159;
          }

          goto LABEL_155;
        }

        if (v13 == 1886807154) {
          goto LABEL_155;
        }
        if (v13 != 1902539642)
        {
          if (v13 != 1919773028) {
            goto LABEL_263;
          }
          __int128 v57 = (std::mutex *)(a1 + 568);
          std::mutex::lock((std::mutex *)(a1 + 568));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
          {
            int v265 = (os_log_t *)sub_138E8(13);
            v266 = *v265;
            if (*v265 && os_log_type_enabled(*v265, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef v339 = *(CFTypeRef *)a2;
              LODWORD(cf) = *(_DWORD *)(a2 + 8);
              sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
              int v267 = (char)__p.__r_.__value_.__s.__size_;
              std::string::size_type v268 = __p.__r_.__value_.__r.__words[0];
              int v269 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
              v270 = &__p;
              buf[0] = 136316162;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              if (v267 < 0) {
                v270 = (std::string *)v268;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1806;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v270;
              LOWORD(buf[7]) = 1024;
              *(_DWORD *)((char *)&buf[7] + 2) = a5;
              HIWORD(buf[8]) = 1024;
              buf[9] = v269;
              _os_log_impl( &dword_0,  v266,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                (uint8_t *)buf,
                0x28u);
            }

            v271 = __cxa_allocate_exception(0x10uLL);
            *(void *)v271 = &off_4865A0;
            v271[2] = 561211770;
          }

          memset(buf, 0, 24);
          sub_8D668( buf,  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
          __int128 v59 = *(void **)buf;
          uint64_t v58 = *(void **)&buf[2];
          if (*(void *)buf != *(void *)&buf[2])
          {
            while (*v59 != *(void *)a6)
            {
              if (++v59 == *(void **)&buf[2])
              {
                __int128 v59 = *(void **)&buf[2];
                break;
              }
            }
          }

          if (v59 != *(void **)&buf[2])
          {
            for (k = v59 + 1; k != v58; ++k)
            {
              if (*k != *(void *)a6) {
                *v59++ = *k;
              }
            }
          }

          if (v58 != v59) {
            *(void *)&AudioObjectPropertyAddress buf[2] = v59;
          }
          goto LABEL_285;
        }
      }

      sub_9F790((AudioObjectID *)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
      return;
    }

    if (v13 <= 1952997987)
    {
      if (v13 > 1936879203)
      {
        if (v13 != 1936879204)
        {
          if (v13 != 1937138532)
          {
            int v18 = 1937204590;
            goto LABEL_154;
          }

          goto LABEL_155;
        }
      }

      else
      {
        if (v13 == 1934456180 || v13 == 1935762281) {
          goto LABEL_155;
        }
        if (v13 != 1936876644) {
          goto LABEL_263;
        }
      }

      sub_9F434(a1, (_DWORD *)a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
      return;
    }

    if (v13 > 1953719147)
    {
      if (v13 == 1953719148)
      {
        if (*(_DWORD *)(a2 + 4) == 1869968496)
        {
          sub_9D988((uint64_t *)&__p, (void *)(a1 + 184), "", 2252);
          unint64_t v85 = (std::string *)__p.__r_.__value_.__l.__size_;
          if ((std::string *)__p.__r_.__value_.__l.__size_ != &__p)
          {
            while (1)
            {
              std::string::size_type cap = v85->__r_.__value_.__l.__cap_;
              strcpy((char *)buf, "#sTTptuo");
              BYTE1(buf[2]) = 0;
              HIWORD(buf[2]) = 0;
              unint64_t v85 = (std::string *)v85->__r_.__value_.__l.__size_;
              if (v85 == &__p) {
                goto LABEL_306;
              }
            }

            if (v85 != &__p)
            {
              std::string::size_type v119 = v85->__r_.__value_.__l.__cap_;
              strcpy((char *)buf, "#sTTptuo");
              BYTE1(buf[2]) = 0;
              HIWORD(buf[2]) = 0;
              (*(void (**)(std::string::size_type, _DWORD *, uint64_t, const __CFString *, uint64_t, unsigned int *))(*(void *)v119 + 48LL))( v119,  buf,  a3,  a4,  a5,  a6);
              goto LABEL_405;
            }
          }

LABEL_306:
          uint64_t v120 = *(void *)(a1 + 544);
          for (uint64_t m = *(void *)(a1 + 552); v120 != m; v120 += 16LL)
          {
            if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)v120 + 136LL)
                                                                                  + 88LL))( *(void *)(*(void *)v120 + 136LL),  1987013737LL,  64001LL,  0LL))
            {
              __int128 v122 = *(std::__shared_weak_count **)(*(void *)v120 + 176LL);
              if (v122)
              {
                char v123 = *(const void **)(*(void *)v120 + 168LL);
                p_shared_weak_owners = (unint64_t *)&v122->__shared_weak_owners_;
                do
                  unint64_t v125 = __ldxr(p_shared_weak_owners);
                while (__stxr(v125 + 1, p_shared_weak_owners));
                int v126 = std::__shared_weak_count::lock(v122);
                CFTypeRef cf = v126;
                if (v126)
                {
                  int64x2_t v127 = v126;
                  CFTypeRef v339 = v123;
                  if (v123)
                  {
                    int v128 = (*(uint64_t (**)(const void *))(*(void *)v123 + 136LL))(v123);
                    uint64_t v129 = (os_log_t *)sub_138E8(16);
                    uint64_t v131 = *v129;
                    if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_INFO))
                    {
                      float v132 = *(float *)a6;
                      int v133 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2278;
                      HIWORD(buf[4]) = 2048;
                      *(double *)&buf[5] = v132;
                      LOWORD(buf[7]) = 1024;
                      *(_DWORD *)((char *)&buf[7] + 2) = v133;
                      _os_log_impl( &dword_0,  v131,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting thermal gain %f on aggregate device %u.",  (uint8_t *)buf,  0x22u);
                    }

                    v130.n128_u32[0] = *a6;
                    if (v128 != 1935895666) {
                      sub_64424((uint64_t)&unk_48CE10, v130.n128_f32[0]);
                    }
                    (*(void (**)(const void *, __n128))(*(void *)v123 + 16LL))(v123, v130);
                  }

                  p_shared_owners = (unint64_t *)&v127->__shared_owners_;
                  do
                    unint64_t v135 = __ldaxr(p_shared_owners);
                  while (__stlxr(v135 - 1, p_shared_owners));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }

                std::__shared_weak_count::__release_weak(v122);
              }
            }
          }

          goto LABEL_405;
        }

        return;
      }

      if (v13 == 1969844082)
      {
        if (*(_DWORD *)(a2 + 4) == 1768845428)
        {
          uint64_t v64 = *(void *)(a1 + 520);
          for (uint64_t n = *(void *)(a1 + 528); v64 != n; v64 += 16LL)
          {
            uint64_t v66 = *(void *)(*(void *)v64 + 136LL);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 384LL))( a1,  1685287015LL,  1818980210LL,  0LL))
            {
              (*(void (**)(_DWORD *__return_ptr, uint64_t))(*(void *)v66 + 168LL))(buf, v66);
              uint64_t v67 = *(void *)buf;
              uint64_t v68 = *(void *)&buf[2];
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
              sub_7A668((void ***)&__p);
              if (v67 == v68)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v66 + 56LL))( v66,  1685287015LL,  1969844082LL,  0LL))
                {
                  unsigned int v69 = *a6;
                  LODWORD(v336) = 0;
                  if (v69 >= 5)
                  {
                    v279 = (os_log_t *)sub_138E8(13);
                    char v280 = *v279;
                    if (*v279 && os_log_type_enabled(*v279, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315394;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2749;
                      _os_log_impl( &dword_0,  v280,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
                    }

                    int v281 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v281, "Precondition failure.");
                  }

                  (*(void (**)(uint64_t, uint64_t, uint64_t, const void **, void))(*(void *)v66 + 64LL))( v66,  1685287015LL,  1969844082LL,  &v336,  0LL);
                  BOOL v70 = v69 == *(float *)&v336;
                  __int128 v71 = (os_log_t *)sub_138E8(16);
                  uint64_t v72 = *v71;
                  if (v70)
                  {
                    if (v72 && os_log_type_enabled(*v71, OS_LOG_TYPE_INFO))
                    {
                      sub_2CA1C(&__p, 1969844082LL);
                      int v73 = (char)__p.__r_.__value_.__s.__size_;
                      std::string::size_type v74 = __p.__r_.__value_.__r.__words[0];
                      sub_2CA1C(&v339, 1969844082LL);
                      uint64_t v75 = &__p;
                      if (v73 < 0) {
                        uint64_t v75 = (std::string *)v74;
                      }
                      uint64_t v76 = &v339;
                      if (v341 < 0) {
                        uint64_t v76 = (void *)v339;
                      }
                      buf[0] = 136316418;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2766;
                      HIWORD(buf[4]) = 2080;
                      *(void *)&buf[5] = v75;
                      LOWORD(buf[7]) = 1024;
                      *(_DWORD *)((char *)&buf[7] + 2) = v69;
                      HIWORD(buf[8]) = 2080;
                      *(void *)&buf[9] = v76;
                      __int16 v344 = 1024;
                      int v345 = v69;
                      _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_INFO,  "%25s:%-5d Got UI orientation param {%s, %u}, skipping redundant orientation update {%s, %u}",  (uint8_t *)buf,  0x32u);
                      if (v341 < 0) {
                        operator delete((void *)v339);
                      }
                    }
                  }

                  else
                  {
                    if (v72 && os_log_type_enabled(*v71, OS_LOG_TYPE_INFO))
                    {
                      sub_2CA1C(&__p, 1969844082LL);
                      char v77 = &__p;
                      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        char v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2756;
                      HIWORD(buf[4]) = 2080;
                      *(void *)&buf[5] = v77;
                      LOWORD(buf[7]) = 1024;
                      *(_DWORD *)((char *)&buf[7] + 2) = v69;
                      _os_log_impl( &dword_0,  v72,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting UI orientation param {%s, %u}",  (uint8_t *)buf,  0x22u);
                    }

                    int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v66 + 72LL))( v66,  1685287015LL,  1969844082LL,  0LL,  (float)v69);
                    if (v78)
                    {
                      int v305 = (os_log_t *)sub_138E8(13);
                      v306 = *v305;
                      if (*v305 && os_log_type_enabled(*v305, OS_LOG_TYPE_ERROR))
                      {
                        sub_2CA1C(&__p, 1969844082LL);
                        v307 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                             ? &__p
                             : (std::string *)__p.__r_.__value_.__r.__words[0];
                        buf[0] = 136315906;
                        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                        LOWORD(buf[3]) = 1024;
                        *(_DWORD *)((char *)&buf[3] + 2) = 2759;
                        HIWORD(buf[4]) = 1024;
                        buf[5] = v78;
                        LOWORD(buf[6]) = 2080;
                        *(void *)((char *)&buf[6] + 2) = v307;
                        _os_log_impl( &dword_0,  v306,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property %s",  (uint8_t *)buf,  0x22u);
                      }

                      char v308 = __cxa_allocate_exception(0x10uLL);
                      *(void *)char v308 = &off_4865A0;
                      v308[2] = v78;
                    }

                    if (byte_48CE57 >= 0) {
                      std::string::size_type v79 = (const UInt8 *)&qword_48CE40;
                    }
                    else {
                      std::string::size_type v79 = (const UInt8 *)qword_48CE40;
                    }
                    if (byte_48CE57 >= 0) {
                      CFIndex v80 = byte_48CE57;
                    }
                    else {
                      CFIndex v80 = unk_48CE48;
                    }
                    CFTypeRef v339 = CFStringCreateWithBytes(0LL, v79, v80, 0x8000100u, 0);
                    if (!v339)
                    {
                      v310 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v310, "Could not construct");
                    }

                    buf[0] = v69;
                    CFTypeRef cf = CFNumberCreate(0LL, kCFNumberIntType, buf);
                    if (!cf)
                    {
                      int v309 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v309, "Could not construct");
                    }

                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v339;
                    __p.__r_.__value_.__l.__size_ = 1LL;
                    CFDictionaryRef v81 = sub_5A950((uint64_t)&__p);
                    CFDictionaryRef v337 = v81;
                    memset(buf, 0, 24);
                    sub_8D668( buf,  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
                    int v82 = *(void **)buf;
                    sub_5AC9C((uint64_t *)&v337, *(uint64_t **)buf, *(uint64_t **)&buf[2], 1LL);
                    if (v82) {
                      operator delete(v82);
                    }
                    if (v81) {
                      CFRelease(v81);
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
                    if (v339) {
                      CFRelease(v339);
                    }
                  }
                }
              }
            }
          }
        }

        return;
      }

      if (v13 != 1986361444) {
        goto LABEL_263;
      }
      CFDictionaryRef v53 = *(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)a1 + 368LL);
      v12.n128_f32[0] = (float)*a6;
      uint64_t v54 = a1;
      uint64_t v55 = 1818521197LL;
      uint64_t isa_low = 40LL;
      goto LABEL_148;
    }

    if (v13 != 1952997988)
    {
      if (v13 != 1953002093)
      {
        int v18 = 1953002354;
        goto LABEL_154;
      }

      goto LABEL_155;
    }

    if (*(_DWORD *)(a2 + 4) != 1869968496) {
      return;
    }
    sub_9D988((uint64_t *)&__p, (void *)(a1 + 184), "", 2361);
    int v83 = sub_1CB4A0();
    std::string::size_type v84 = (std::string *)__p.__r_.__value_.__l.__size_;
    if (!v83)
    {
      if ((std::string *)__p.__r_.__value_.__l.__size_ == &__p) {
        goto LABEL_405;
      }
      while (1)
      {
        std::string::size_type v113 = v84->__r_.__value_.__l.__cap_;
        strcpy((char *)buf, "wBhTptuo");
        BYTE1(buf[2]) = 0;
        HIWORD(buf[2]) = 0;
        std::string::size_type v84 = (std::string *)v84->__r_.__value_.__l.__size_;
        if (v84 == &__p) {
          goto LABEL_405;
        }
      }

      if (v84 != &__p)
      {
        uint64_t v143 = sub_138E8(16);
        if ((*(_BYTE *)(v143 + 8) & 1) != 0)
        {
          char v144 = *(os_log_s **)v143;
          if (*(void *)v143)
          {
            if (os_log_type_enabled(*(os_log_t *)v143, OS_LOG_TYPE_DEBUG))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2487;
              _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Legacy: Setting ThermalBudget (AEA property supported)",  (uint8_t *)buf,  0x12u);
            }
          }
        }

        __int128 v145 = *(const __CFDictionary **)a6;
        if (!v145)
        {
          __int128 v179 = (os_log_t *)sub_138E8(13);
          v180 = *v179;
          if (*v179)
          {
            if (os_log_type_enabled(*v179, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2489;
              _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Dictionary is null!",  (uint8_t *)buf,  0x12u);
            }
          }
        }

        uint64_t v146 = sub_A1240(v145, @"HapticTargetPower");
        (*(void (**)(std::string::size_type, uint64_t))(*(void *)v84->__r_.__value_.__l.__cap_ + 224LL))( v84->__r_.__value_.__l.__cap_,  v146);
      }

      v136 += 7;
      int v147 = (double *)v307[1];
LABEL_307:
      if (v147 == v136) {
        goto LABEL_308;
      }
    }

    if (*((_DWORD *)v136 + 8) > 0x17u) {
      goto LABEL_306;
    }
LABEL_265:
    if (*((_DWORD *)v136 + 2) != 1819304813 || (*((_DWORD *)v136 + 3) & 1) != 0) {
      goto LABEL_306;
    }
    char v138 = 0;
    uint64_t v139 = (double *)v307[0];
    while (1)
    {
      if (v139 == v307[1]) {
        goto LABEL_306;
      }
      if (v114 == 1) {
        break;
      }
      if (*((_DWORD *)v139 + 8) >= 0x18u && *((_DWORD *)v139 + 2) == 1819304813 && (*((_DWORD *)v139 + 3) & 1) == 0) {
        goto LABEL_283;
      }
LABEL_292:
      v139 += 7;
      if (v138)
      {
        uint64_t v143 = sub_138E8(22);
        if ((*(_BYTE *)(v143 + 8) & 1) != 0)
        {
          char v144 = *(os_log_s **)v143;
          if (*(void *)v143)
          {
            if (os_log_type_enabled(*(os_log_t *)v143, OS_LOG_TYPE_DEBUG))
            {
              sub_1548E8((std::string *)v319, (uint64_t)v136);
              __int128 v145 = v319;
              if (v319[23] < 0) {
                __int128 v145 = *(_BYTE **)v319;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 212;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&_BYTE buf[20] = v145;
              _os_log_impl(&dword_0, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
              if ((v319[23] & 0x80000000) != 0) {
                operator delete(*(void **)v319);
              }
            }
          }
        }

        uint64_t v146 = (char *)((char *)v307[1] - (char *)(v136 + 7));
        if (v307[1] != v136 + 7) {
          memmove(v136, v136 + 7, (char *)v307[1] - (char *)(v136 + 7));
        }
        int v147 = (double *)&v146[(void)v136];
        v307[1] = &v146[(void)v136];
        goto LABEL_307;
      }
    }

    if (*((_DWORD *)v139 + 8) >= 0x11u) {
      goto LABEL_292;
    }
    if (*((_DWORD *)v139 + 2) != 1819304813 || (*((_DWORD *)v139 + 3) & 1) != 0) {
      goto LABEL_292;
    }
LABEL_283:
    char v141 = v136[5] < v139[5] || v136[6] > v139[6];
    char v138 = !v141 && *v136 == *v139 && *((_DWORD *)v136 + 7) == *((_DWORD *)v139 + 7);
    goto LABEL_292;
  }

LABEL_405:
      char v63 = &__p;
      goto LABEL_160;
    }

    while (v84 != &__p)
    {
      if (sub_CFDD4(v84->__r_.__value_.__l.__cap_))
      {
        __int128 v140 = (os_log_t *)sub_138E8(16);
        char v141 = *v140;
        if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2368;
          _os_log_impl( &dword_0,  v141,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS: Setting Actuator ThermalBudget",  (uint8_t *)buf,  0x12u);
        }

        for (iuint64_t i = (std::string *)__p.__r_.__value_.__l.__size_;
              ii != &__p;
              iuint64_t i = (std::string *)ii->__r_.__value_.__l.__size_)
        {
          if (sub_CFDD4(ii->__r_.__value_.__l.__cap_))
          {
            if (ii != &__p)
            {
              uint64_t v174 = ii->__r_.__value_.__l.__cap_;
              int data = (std::__shared_weak_count *)ii[1].__r_.__value_.__l.__data_;
              *(void *)AudioObjectPropertyAddress buf = v174;
              *(void *)&AudioObjectPropertyAddress buf[2] = data;
              if (data)
              {
                v175 = (unint64_t *)&data->__shared_owners_;
                do
                  unint64_t v176 = __ldxr(v175);
                while (__stxr(v176 + 1, v175));
              }

              if (sub_1CBB74() && sub_38A970(v174))
              {
                uint64_t v177 = sub_9EB48();
                unint64_t v178 = sub_1A001C(v177, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, unint64_t))(*(void *)ii->__r_.__value_.__l.__cap_
                                                                                 + 224LL))( ii->__r_.__value_.__l.__cap_,  v178);
                (*(void (**)(std::string::size_type, unint64_t))(*(void *)ii->__r_.__value_.__l.__cap_
                                                                                 + 216LL))( ii->__r_.__value_.__l.__cap_,  HIDWORD(v178));
              }

              else if (sub_1CBB74())
              {
                uint64_t v181 = sub_9EB48();
                uint64_t v182 = sub_19F01C(v181, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, uint64_t))(*(void *)ii->__r_.__value_.__l.__cap_ + 224LL))( ii->__r_.__value_.__l.__cap_,  v182);
              }

              else if (sub_1CBBF8())
              {
                uint64_t v183 = sub_9EB48();
                uint64_t v184 = sub_19F01C(v183, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, uint64_t))(*(void *)ii->__r_.__value_.__l.__cap_ + 216LL))( ii->__r_.__value_.__l.__cap_,  v184);
              }

              if (data)
              {
                __int128 v185 = (unint64_t *)&data->__shared_owners_;
                do
                  unint64_t v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
                  std::__shared_weak_count::__release_weak(data);
                }
              }
            }

            goto LABEL_405;
          }
        }

        goto LABEL_405;
      }

      std::string::size_type v84 = (std::string *)v84->__r_.__value_.__l.__size_;
    }

    if (!a4 || (sub_9EB48(), (int v114 = sub_19DDF0((int)a4->isa)) == 0))
    {
      unsigned __int8 v115 = (os_log_t *)sub_138E8(16);
      unsigned int v116 = *v115;
      if (*v115 && os_log_type_enabled(*v115, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2417;
        _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS: Setting Speaker ThermalBudget",  (uint8_t *)buf,  0x12u);
      }

      uint64_t v117 = sub_9EB48();
      int64_t v118 = *(const __CFDictionary **)a6;
      if (v118)
      {
        CFRetain(v118);
        sub_3617C(buf, v118);
      }

      else
      {
        *(void *)AudioObjectPropertyAddress buf = 0LL;
      }

      sub_19E55C(v117, (CFDictionaryRef *)buf);
      int v147 = (_DWORD *)(v117 + 24);
      if (*(_DWORD *)(v117 + 24)) {
        sub_19E884(v117, (CFDictionaryRef *)buf, a5, (uint64_t **)v117, v147);
      }
      else {
        sub_19DFF4(v117, (const void **)buf, a5, v117, v147);
      }
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
      char v148 = (void *)(sub_9EB48() + 408);
      int v114 = 0;
    }

    int v149 = sub_77A54(*(_DWORD *)(a2 + 4));
    uint64_t v150 = a1 + 520;
    uint64_t v151 = 520LL;
    if (v149)
    {
      uint64_t v151 = 544LL;
      uint64_t v150 = a1 + 544;
    }

    uint64_t v152 = *(void *)(a1 + v151);
    uint64_t v153 = *(void *)(v150 + 8);
    if (v152 == v153) {
      goto LABEL_405;
    }
    while (1)
    {
      uint64_t v154 = *(void *)(*(void *)v152 + 136LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v154 + 88LL))( v154,  1936748595LL,  64008LL,  0LL))
      {
        break;
      }

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v154 + 88LL))( v154,  1668312369LL,  64100LL,  0LL))
      {
        CFDictionaryRef v337 = 0LL;
        int v338 = 0;
        if (v114
          || (uint64_t v157 = sub_9EB48(),
              sub_1A06BC((uint64_t)buf, v157, 0),
              std::string v158 = *(const void **)buf,
              CFDictionaryRef v337 = *(CFDictionaryRef *)buf,
              uint64_t v159 = buf[2],
              int v338 = buf[2],
              !*(void *)buf))
        {
          v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v234, "Could not construct");
        }

        if (!CFDictionaryGetCount(*(CFDictionaryRef *)buf))
        {
          v286 = (os_log_t *)sub_138E8(13);
          v287 = *v286;
          if (*v286 && os_log_type_enabled(*v286, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2469;
            _os_log_impl( &dword_0,  v287,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CPMS: ThermalBudget is empty",  (uint8_t *)buf,  0x12u);
          }

          char v288 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v288, "CPMS: ThermalBudget is empty");
        }

        char v336 = v158;
        int v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t, void))(*(void *)v154 + 112LL))( v154,  1668312369LL,  64100LL,  &v336,  v159,  0LL);
        if (v160)
        {
          v282 = (os_log_t *)sub_138E8(13);
          v283 = *v282;
          if (*v282 && os_log_type_enabled(*v282, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(&v339, 64100LL);
            char v284 = v341 >= 0 ? &v339 : (CFTypeRef *)v339;
            buf[0] = 136315906;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2473;
            HIWORD(buf[4]) = 1024;
            buf[5] = v160;
            LOWORD(buf[6]) = 2080;
            *(void *)((char *)&buf[6] + 2) = v284;
            _os_log_impl( &dword_0,  v283,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property %s",  (uint8_t *)buf,  0x22u);
            if (v341 < 0) {
              operator delete((void *)v339);
            }
          }

          int v285 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v285 = &off_4865A0;
          v285[2] = v160;
        }

LABEL_370:
        CFRelease(v158);
      }

LABEL_371:
      uint64_t v161 = sub_9EB48();
      sub_1A06BC((uint64_t)buf, v161, 0);
      v162 = *(const void **)buf;
      if (!*(void *)buf)
      {
        v223 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v223, "Could not construct");
      }

      char v163 = sub_A15A4(*(const __CFDictionary **)buf, (const void *)qword_48F6D0);
      if (v163)
      {
        unint64_t v164 = sub_A15C8((uint64_t)v163);
        if (HIDWORD(v164)) {
          float v165 = *(float *)&v164;
        }
        else {
          float v165 = 0.0;
        }
      }

      else
      {
        float v165 = 0.0;
      }

      CFRelease(v162);
      sub_868B0();
      v166 = (dispatch_queue_s *)sub_869B4();
      char v167 = (float *)operator new(0x10uLL);
      *(void *)char v167 = &stru_48C9D8;
      v167[2] = v165 / 1000.0;
      dispatch_async_f(v166, v167, (dispatch_function_t)sub_86F74);
      v152 += 16LL;
      if (v152 == v153) {
        goto LABEL_405;
      }
    }

    CFTypeRef v339 = 0LL;
    LODWORD(cf) = 0;
    if (v114 || *(_DWORD *)(a1 + 280) == 1650811758)
    {
      std::string v155 = (os_log_t *)sub_138E8(16);
      int v156 = *v155;
      if (*v155 && os_log_type_enabled(*v155, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2446;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = "Speaker";
        _os_log_impl( &dword_0,  v156,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS sent asynchronously for %s",  (uint8_t *)buf,  0x1Cu);
      }

      goto LABEL_371;
    }

    uint64_t v168 = sub_9EB48();
    sub_1A06BC((uint64_t)buf, v168, 0);
    std::string v158 = *(const void **)buf;
    CFTypeRef v339 = *(CFTypeRef *)buf;
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    uint64_t v169 = buf[2];
    LODWORD(cf) = buf[2];
    if (!v339)
    {
      CFDictionaryRef v337 = 0LL;
      goto LABEL_371;
    }

    CFRetain(v158);
    CFDictionaryRef v337 = (CFDictionaryRef)v158;
    int v338 = v169;
    CFRelease(v158);
    char v336 = v158;
    int v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t, void))(*(void *)v154 + 112LL))( v154,  1936748595LL,  64008LL,  &v336,  v169,  0LL);
    if (v170)
    {
      v326 = (os_log_t *)sub_138E8(13);
      v327 = *v326;
      if (*v326 && os_log_type_enabled(*v326, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v339, 64008LL);
        char v328 = v341 >= 0 ? &v339 : (CFTypeRef *)v339;
        buf[0] = 136315906;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2457;
        HIWORD(buf[4]) = 1024;
        buf[5] = v170;
        LOWORD(buf[6]) = 2080;
        *(void *)((char *)&buf[6] + 2) = v328;
        _os_log_impl( &dword_0,  v327,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property %s",  (uint8_t *)buf,  0x22u);
        if (v341 < 0) {
          operator delete((void *)v339);
        }
      }

      int v329 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v329 = &off_4865A0;
      v329[2] = v170;
    }

    goto LABEL_370;
  }

  if (v13 > 1651664738)
  {
    if (v13 <= 1684500593)
    {
      if (v13 <= 1684365923)
      {
        if (v13 != 1651664739 && v13 != 1668576114)
        {
          int v18 = 1684304756;
          goto LABEL_154;
        }

        goto LABEL_155;
      }

      if (v13 == 1684365924 || v13 == 1684370276) {
        goto LABEL_155;
      }
      if (v13 != 1684500589 || *(_BYTE *)(a1 + 296)) {
        goto LABEL_263;
      }
      if ((_DWORD)a3 != 4 || !a4)
      {
        v311 = (os_log_t *)sub_138E8(13);
        char v312 = *v311;
        if (*v311 && os_log_type_enabled(*v311, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef v339 = *(CFTypeRef *)a2;
          LODWORD(cf) = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
          int v313 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136316674;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3357;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v313;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = 4;
          HIWORD(buf[8]) = 2080;
          *(void *)&buf[9] = "non-";
          __int16 v344 = 1024;
          int v345 = a3;
          __int16 v346 = 2048;
          v347 = a4;
          _os_log_impl( &dword_0,  v312,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data i s %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
            (uint8_t *)buf,
            0x3Cu);
        }

        v314 = __cxa_allocate_exception(0x10uLL);
        *(void *)v314 = &off_4865A0;
        v314[2] = 561211770;
      }

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4) != (_DWORD)a5)
      {
        v319 = (os_log_t *)sub_138E8(13);
        char v320 = *v319;
        if (*v319 && os_log_type_enabled(*v319, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef v339 = *(CFTypeRef *)a2;
          LODWORD(cf) = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
          int v321 = (char)__p.__r_.__value_.__s.__size_;
          std::string::size_type v322 = __p.__r_.__value_.__r.__words[0];
          int v323 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFString *))(*(void *)a1 + 32LL))( a1,  a2,  4LL,  a4);
          char v324 = &__p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          if (v321 < 0) {
            char v324 = (std::string *)v322;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3358;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v324;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v323;
          _os_log_impl( &dword_0,  v320,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
        }

        int v325 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v325 = &off_4865A0;
        v325[2] = 561211770;
      }

      int v61 = *(_DWORD *)(a2 + 4);
      if (v61 != 1768845428 && v61 != 1869968496)
      {
        int v333 = (os_log_t *)sub_138E8(13);
        v334 = *v333;
        if (*v333 && os_log_type_enabled(*v333, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3359;
          _os_log_impl( &dword_0,  v334,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        v335 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v335, "Precondition failure.");
      }

      v12.n128_u32[0] = *a6;
      uint64_t isa_low = LODWORD(a4->isa);
      CFDictionaryRef v53 = *(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)a1 + 368LL);
      uint64_t v54 = a1;
      uint64_t v55 = 1685287015LL;
LABEL_148:
      v53(v54, v55, isa_low, 0LL, v12);
      return;
    }

    if (v13 <= 1685287522)
    {
      if (v13 == 1684500594)
      {
        if (!*(_BYTE *)(a1 + 296))
        {
          if ((_DWORD)a3 != 4 || !a4)
          {
            v315 = (os_log_t *)sub_138E8(13);
            char v316 = *v315;
            if (*v315 && os_log_type_enabled(*v315, OS_LOG_TYPE_ERROR))
            {
              CFTypeRef v339 = *(CFTypeRef *)a2;
              LODWORD(cf) = *(_DWORD *)(a2 + 8);
              sub_613AC((uint64_t)&__p, (unsigned int *)&v339);
              int v317 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &__p
                   : (std::string *)__p.__r_.__value_.__r.__words[0];
              buf[0] = 136316674;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3230;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v317;
              LOWORD(buf[7]) = 1024;
              *(_DWORD *)((char *)&buf[7] + 2) = 4;
              HIWORD(buf[8]) = 2080;
              *(void *)&buf[9] = "non-";
              __int16 v344 = 1024;
              int v345 = a3;
              __int16 v346 = 2048;
              v347 = a4;
              _os_log_impl( &dword_0,  v316,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier da ta is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
                (uint8_t *)buf,
                0x3Cu);
            }

            v318 = __cxa_allocate_exception(0x10uLL);
            *(void *)v318 = &off_4865A0;
            v318[2] = 561211770;
          }

          int v112 = *(_DWORD *)(a2 + 4);
          if (v112 != 1768845428 && v112 != 1869968496)
          {
            v330 = (os_log_t *)sub_138E8(13);
            v331 = *v330;
            if (*v330 && os_log_type_enabled(*v330, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3231;
              _os_log_impl( &dword_0,  v331,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
            }

            char v332 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v332, "Precondition failure.");
          }

          (*(void (**)(uint64_t, uint64_t, void, unsigned int *, uint64_t, BOOL, void))(*(void *)a1 + 400LL))( a1,  1685287015LL,  LODWORD(a4->isa),  a6,  a5,  v112 != 1768845428,  *(unsigned int *)(a2 + 8));
          return;
        }

        goto LABEL_263;
      }

      if (v13 != 1685087596)
      {
        if (v13 == 1685287011)
        {
          if (*(_DWORD *)(a2 + 4) == 1869968496)
          {
            uint64_t v23 = *(void *)(a1 + 544);
            for (juint64_t j = *(void *)(a1 + 552); v23 != jj; v23 += 16LL)
            {
              uint64_t v25 = *(void *)(*(void *)v23 + 136LL);
              uint8x8_t v26 = (os_log_t *)sub_138E8(26);
              unint64_t v27 = *v26;
              if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
              {
                sub_48E98(&__p, a4);
                uint8x8_t v28 = &__p;
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint8x8_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                buf[0] = 136315650;
                *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3033;
                HIWORD(buf[4]) = 2080;
                *(void *)&buf[5] = v28;
                _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set DSPConfig Qualifier String: %s",  (uint8_t *)buf,  0x1Cu);
              }

              if (CFStringCompare(a4, @"haptics protection mode", 0LL))
              {
                if (CFStringCompare(a4, @"loudness normalizer reset", 0LL) == kCFCompareEqualTo
                  && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 88LL))( v25,  1818521197LL,  1920165236LL,  0LL))
                {
                  unsigned int v29 = *a6;
                  LODWORD(__p.__r_.__value_.__l.__data_) = v29;
                  if (v29 != 2)
                  {
                    uint64_t v235 = sub_138E8(13);
                    id v236 = sub_8C7D4(1, *(void **)v235, *(void *)(v235 + 8));
                    v237 = (os_log_s *)objc_claimAutoreleasedReturnValue(v236);
                    v238 = v237;
                    if (v237 && os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315650;
                      *(void *)&buf[1] = "DSPChain.mm";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2900;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v29;
                      _os_log_impl( &dword_0,  v238,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid reset value for AULN - Expected 2 and got: %u",  (uint8_t *)buf,  0x18u);
                    }

                    v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v239, "Invalid reset value for AULN - Expected 2 and got: %u");
                  }

                  uint64_t v30 = sub_138E8(24);
                  uint64_t v31 = sub_138E8(31);
                  char v32 = 0;
                  uint64_t v33 = 0LL;
                  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
                  uint64_t v34 = *(void *)(v30 + 8);
                  while (1)
                  {
                    uint64_t v35 = (int)buf[v33];
                    char v36 = v32;
                    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
                      break;
                    }
                    char v32 = 1;
                    uint64_t v33 = 1LL;
                    if ((v36 & 1) != 0) {
                      goto LABEL_88;
                    }
                  }

                  if ((v34 & v35) == 0) {
                    uint64_t v30 = v31;
                  }
LABEL_88:
                  uint64_t v41 = (os_log_s *)*(id *)v30;
                  uint64_t v42 = v41;
                  if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "DSPChain.mm";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2904;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = 2;
                    _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Resetting AULoudnessNormalizer: %u",  (uint8_t *)buf,  0x18u);
                  }

                  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)v25 + 112LL))( v25,  1818521197LL,  1920165236LL,  &__p,  4LL,  0LL);
                  if (v43)
                  {
                    uint64_t v240 = sub_138E8(13);
                    id v241 = sub_8C7D4(1, *(void **)v240, *(void *)(v240 + 8));
                    v242 = (os_log_s *)objc_claimAutoreleasedReturnValue(v241);
                    v243 = v242;
                    if (v242 && os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315650;
                      *(void *)&buf[1] = "DSPChain.mm";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2907;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v43;
                      _os_log_impl( &dword_0,  v243,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) resetting AULoudnessNormalizer",  (uint8_t *)buf,  0x18u);
                    }

                    v244 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v244 = &off_4865A0;
                    v244[2] = v43;
                  }
                }
              }

              else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 88LL))( v25,  1751216240LL,  88000LL,  0LL))
              {
                unsigned int v37 = *a6;
                LODWORD(__p.__r_.__value_.__l.__data_) = v37;
                if (v37 >= 3)
                {
                  uint64_t v224 = sub_138E8(13);
                  id v225 = sub_8C7D4(1, *(void **)v224, *(void *)(v224 + 8));
                  v226 = (os_log_s *)objc_claimAutoreleasedReturnValue(v225);
                  __int128 v227 = v226;
                  if (v226 && os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315394;
                    *(void *)&buf[1] = "DSPChain.mm";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2887;
                    _os_log_impl( &dword_0,  v227,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
                  }

                  v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v228, "Precondition failure.");
                }

                __int16 v38 = (os_log_s *)*(id *)sub_138E8(26);
                unsigned int v39 = v38;
                if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  buf[0] = 136315650;
                  *(void *)&buf[1] = "DSPChain.mm";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 2889;
                  HIWORD(buf[4]) = 1024;
                  buf[5] = v37;
                  _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting Haptics Protection Mode: %u",  (uint8_t *)buf,  0x18u);
                }

                int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)v25 + 112LL))( v25,  1751216240LL,  88000LL,  &__p,  4LL,  0LL);
                if (v40)
                {
                  uint64_t v229 = sub_138E8(13);
                  id v230 = sub_8C7D4(1, *(void **)v229, *(void *)(v229 + 8));
                  v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(v230);
                  v232 = v231;
                  if (v231 && os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "DSPChain.mm";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2892;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v40;
                    _os_log_impl( &dword_0,  v232,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Error (%d) setting DSP Property for Hap tics Protection",  (uint8_t *)buf,  0x18u);
                  }

                  v233 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v233 = &off_4865A0;
                  v233[2] = v40;
                }
              }
            }
          }

          return;
        }

        goto LABEL_263;
      }

      goto LABEL_155;
    }

    if (v13 == 1685287523 || v13 == 1685483630) {
      goto LABEL_155;
    }
    int v18 = 1718383987;
LABEL_154:
    if (v13 != v18) {
      goto LABEL_263;
    }
    goto LABEL_155;
  }

  if (v13 > 1634755427)
  {
    if (v13 == 1634755428)
    {
      unint64_t v108 = *(const __CFDictionary **)a6;
      if (v108)
      {
        CFRetain(v108);
        sub_7F234(&v339, v108);
        if (v339)
        {
          sub_48100((uint64_t)&__p, (const __CFString *)v339);
          CFIndex v109 = (os_log_t *)sub_138E8(16);
          CFIndex v110 = *v109;
          if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v111 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int128 v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            buf[0] = 136315650;
            *(void *)&buf[1] = "AggregateDevice.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 956;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v111;
            _os_log_impl(&dword_0, v110, OS_LOG_TYPE_DEFAULT, "%25s:%-5d media clock is %s", (uint8_t *)buf, 0x1Cu);
          }

          std::string::operator=((std::string *)(a1 + 392), &__p);
          LOBYTE(buf[0]) = 0;
          LOBYTE(buf[10]) = 0;
          sub_1D6C38(a1, (uint64_t)buf);
          if (v339) {
            CFRelease(v339);
          }
          return;
        }
      }

      else
      {
        CFTypeRef v339 = 0LL;
      }

      char v264 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v264, "Could not construct");
    }

    if (v13 != 1634890859) {
      goto LABEL_263;
    }
    if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
    {
      v248 = (os_log_t *)sub_138E8(13);
      v249 = *v248;
      if (*v248 && os_log_type_enabled(*v248, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1844;
        _os_log_impl( &dword_0,  v249,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      v250 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v250, "Precondition failure.");
    }

    sub_9D478(&__p, a1);
    AudioObjectPropertyScope v21 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0])
    {
LABEL_55:
      int v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        return;
      }
      uint64_t v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v17 = __ldaxr(v22);
      while (__stlxr(v17 - 1, v22));
      goto LABEL_260;
    }

    if ((sub_9D704((unsigned __int8 *)__p.__r_.__value_.__l.__data_) & 1) != 0)
    {
      sub_9FF5C((uint64_t)v21, *a6);
      if (!sub_9D704(v21))
      {
        sub_9FF14();
        goto LABEL_55;
      }

      v303 = (os_log_t *)sub_138E8(13);
      int v293 = *v303;
      if (*v303 && os_log_type_enabled(*v303, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1852;
        v294 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Failed to relinquish control of device.";
        goto LABEL_565;
      }
    }

    else
    {
      char v292 = (os_log_t *)sub_138E8(13);
      int v293 = *v292;
      if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1848;
        v294 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Device is not controlled.";
LABEL_565:
        _os_log_impl(&dword_0, v293, OS_LOG_TYPE_ERROR, v294, (uint8_t *)buf, 0x12u);
      }
    }

    char v304 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v304 = &off_4865A0;
    v304[2] = 1852797029;
  }

  if (v13 > 1633970531)
  {
    if (v13 != 1633970532)
    {
      if (v13 != 1633973868)
      {
        int v18 = 1634692199;
        goto LABEL_154;
      }

    int v281 = (void *)v281[1];
    if (v281 == v280)
    {
      char v288 = 0LL;
      int v289 = 0LL;
      goto LABEL_373;
    }
  }

  char v284 = v283;
  int v285 = v281[2];
  *(void *)AudioObjectPropertyAddress buf = v285;
  if (!v285
    || !(*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v285 + 16LL))( v285,  inAddress))
  {
    p_shared_owners = (unint64_t *)&v284->__shared_owners_;
    do
      v287 = __ldaxr(p_shared_owners);
    while (__stlxr(v287 - 1, p_shared_owners));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }

    goto LABEL_371;
  }

  char v308 = (*(uint64_t (**)(uint64_t))(*(void *)v285 + 120LL))(v285);
  int v309 = (unint64_t *)&v284->__shared_owners_;
  do
    v310 = __ldaxr(v309);
  while (__stlxr(v310 - 1, v309));
  if (!v310)
  {
    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
    std::__shared_weak_count::__release_weak(v284);
  }

  int v289 = v308;
  char v288 = 0x100000000LL;
LABEL_373:
  v278 = v369;
LABEL_375:
  v290 = v289 | v288;
  if (v290 <= 0x100000000LL) {
    LODWORD(v290) = 0;
  }
  atomic_store(v290, (unsigned int *)(v278 + 1088));
  v291 = atomic_load((unsigned int *)(v278 + 1088));
  char v292 = (os_log_t *)sub_138E8(1);
  int v293 = *v292;
  if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 871;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&_BYTE buf[20] = v291;
    _os_log_impl(&dword_0, v293, OS_LOG_TYPE_INFO, "%25s:%-5d Set timestamp object ID to %u", buf, 0x18u);
  }

  if (v291)
  {
    uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v291, inAddress, 0, 0LL, (UInt32 *)(v369 + 1092));
    if (PropertyDataSize)
    {
      v350 = (os_log_t *)sub_138E8(13);
      v351 = *v350;
      if (*v350 && os_log_type_enabled(*v350, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 877;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&_BYTE buf[20] = PropertyDataSize;
        _os_log_impl( &dword_0,  v351,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error %u Get timestamp object ID Property data size",  buf,  0x18u);
      }

      v352 = __cxa_allocate_exception(0x10uLL);
      *(void *)v352 = &off_4865A0;
      v352[2] = PropertyDataSize;
    }
  }

  v295 = (os_log_t *)sub_138E8(1);
  char v296 = *v295;
  if (*v295 && os_log_type_enabled(*v295, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v369 + 96LL))(&v388);
    int v297 = (v388.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v388 : (std::string *)v388.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 880;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v297;
    _os_log_impl(&dword_0, v296, OS_LOG_TYPE_DEBUG, "%25s:%-5d Reconfigured VirtualAudio_Device: %s.", buf, 0x1Cu);
  }

  sub_32C8C(v375[0]);
  sub_32C8C(v377[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

LABEL_155:
      sub_9D988((uint64_t *)buf, (void *)(a1 + 184), "", 1696);
      for (uint64_t kk = *(void *)&buf[2]; (_DWORD *)kk != buf; uint64_t kk = *(void *)(kk + 8))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(kk + 16) + 16LL))(*(void *)(kk + 16), a2)) {
          (*(void (**)(void, uint64_t, uint64_t, const __CFString *, uint64_t, unsigned int *))(**(void **)(kk + 16) + 48LL))( *(void *)(kk + 16),  a2,  a3,  a4,  a5,  a6);
        }
      }

  __int128 v111 = inData;
  float inData = 0uLL;
  int v112 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v111;
  if (v112)
  {
    std::string::size_type v113 = (unint64_t *)&v112->__shared_owners_;
    do
      int v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  unsigned __int8 v115 = (std::__shared_weak_count *)*((void *)&inData + 1);
  if (!*((void *)&inData + 1)) {
    goto LABEL_164;
  }
  unsigned int v116 = (unint64_t *)(*((void *)&inData + 1) + 8LL);
  do
    uint64_t v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (!v117)
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
    if (v107) {
      goto LABEL_178;
    }
  }

  else
  {
LABEL_164:
    if (v107) {
      goto LABEL_178;
    }
  }

  if (v200) {
    CFRelease(v200);
  }
LABEL_178:
  if (!*a1)
  {
    char v123 = (os_log_t *)sub_138E8(7);
    __int128 v124 = *v123;
    if (*v123)
    {
      if (os_log_type_enabled(*v123, OS_LOG_TYPE_INFO))
      {
        unint64_t v125 = *a3;
        *(_DWORD *)uint64_t inAddress = 136315906;
        *(void *)&inAddress[4] = "DeviceFactory_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 306;
        *(_WORD *)&inAddress[18] = 2112;
        *(void *)&inAddress[20] = v125;
        *(_WORD *)&inAddress[28] = 1024;
        *(_DWORD *)&inAddress[30] = a2;
        _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_INFO,  "%25s:%-5d Could not create PhysicalDevice from UID: %@, AudioObjectID: %u",  inAddress,  0x22u);
      }
    }
  }

LABEL_263:
    sub_A0810(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }

  if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
  {
    v258 = (os_log_t *)sub_138E8(13);
    v259 = *v258;
    if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1877;
      _os_log_impl( &dword_0,  v259,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    char v260 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v260, "Precondition failure.");
  }

  sub_9D478(&__p, a1);
  if (__p.__r_.__value_.__r.__words[0])
  {
    if ((sub_A00A8((uint64_t)__p.__r_.__value_.__l.__data_, (int)a4->isa) & 1) == 0)
    {
      v295 = (os_log_t *)sub_138E8(13);
      char v296 = *v295;
      if (*v295 && os_log_type_enabled(*v295, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1883;
        _os_log_impl( &dword_0,  v296,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): Do not have control of device.",  (uint8_t *)buf,  0x12u);
      }

      int v297 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v297 = &off_4865A0;
      v297[2] = 1852797029;
    }

    sub_A01E0(a1, *(_DWORD *)(a2 + 8), *(float *)a6);
  }

  int v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    int64_t v104 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v17 = __ldaxr(v104);
    while (__stlxr(v17 - 1, v104));
    goto LABEL_260;
  }

void sub_989D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, CFTypeRef cf, CFTypeRef a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

BOOL sub_98D1C( uint64_t a1, AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16LL))(a1, a2) & 1) == 0)
  {
    uint64_t v24 = (os_log_t *)sub_138E8(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)&a2->mSelector;
      unsigned int mElement = a2->mElement;
      sub_613AC((uint64_t)v32, (unsigned int *)&__p);
      uint8x8_t v26 = v33 >= 0 ? v32 : (void **)v32[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1906;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_4865A0;
    exception[2] = 2003332927;
  }

  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1935762280)
  {
    if (mSelector <= 1953002353)
    {
      if (mSelector == 1935762281 || mSelector == 1937204590) {
        goto LABEL_19;
      }
      if (mSelector == 1952997988)
      {
        uint64_t v10 = sub_9EB48();
        *(void *)AudioObjectPropertyAddress buf = qword_48F6A8;
        *(_DWORD *)&buf[8] = dword_48F6B0;
        *(void *)&buf[16] = a3;
        *(void *)&_BYTE buf[24] = a4;
        sub_1885D4((void *)(v10 + 408), (unsigned int *)&qword_48F6A8, (unsigned int *)buf);
        return 1LL;
      }

void sub_991A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_991E4( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1935762280)
  {
    if (mSelector <= 1953002353)
    {
      if (mSelector == 1935762281 || mSelector == 1937204590) {
        goto LABEL_20;
      }
      if (mSelector == 1952997988)
      {
        uint64_t v10 = (uint64_t **)(sub_9EB48() + 408);
        if (sub_67420(v10, (uint64_t)&qword_48F6A8))
        {
          *(void *)AudioObjectPropertyAddress buf = qword_48F6A8;
          *(_DWORD *)&buf[8] = dword_48F6B0;
          *(void *)&buf[16] = a3;
          *(void *)&_BYTE buf[24] = a4;
          sub_18803C(v10, (unsigned int *)&qword_48F6A8, (unsigned int *)buf);
        }

        return 1LL;
      }

      goto LABEL_28;
    }

    if (mSelector == 1953002354 || mSelector == 1986225268) {
      goto LABEL_20;
    }
    int v9 = 1986225266;
  }

  else if (mSelector > 1635153006)
  {
    if (mSelector == 1635153007 || mSelector == 1684103987) {
      goto LABEL_20;
    }
    int v9 = 1886807154;
  }

  else
  {
    if (mSelector == 1165513555 || mSelector == 1633973868) {
      goto LABEL_20;
    }
    int v9 = 1635152995;
  }

  if (mSelector != v9)
  {
LABEL_28:
    uint64_t v14 = AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 128), a2, a3, a4);
    if ((_DWORD)v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = (os_log_t *)sub_138E8(16);
      unint64_t v17 = *v16;
      if (*v16)
      {
        uint64_t v13 = 1LL;
        if (!os_log_type_enabled(*v16, OS_LOG_TYPE_INFO)) {
          return v13;
        }
        uint64_t v25 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)v27, (unsigned int *)&v25);
        int v18 = v28;
        int v19 = (void **)v27[0];
        sub_2CA1C(__p, v15);
        uint64_t v20 = v27;
        if (v18 < 0) {
          uint64_t v20 = v19;
        }
        if (v24 >= 0) {
          AudioObjectPropertyScope v21 = __p;
        }
        else {
          AudioObjectPropertyScope v21 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2007;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v20;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v21;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "%25s:%-5d AudioObjectRemovePropertyListener(%s) returned status %s.",  buf,  0x26u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v28 < 0) {
          operator delete(v27[0]);
        }
      }
    }

    return 1LL;
  }

void sub_99544( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_99578(os_unfair_lock_s *a1, double a2)
{
  uint64_t v4 = sub_138E8(16);
  uint64_t v5 = sub_138E8(36);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)&__p, a1 + 2);
    int v12 = v29 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 631;
    __int16 v31 = 2048;
    double v32 = a2;
    __int16 v33 = 2080;
    uint64_t v34 = v12;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Synchronously setting sample rate to %f Hz on aggregate device %s.",  buf,  0x26u);
    if (v29 < 0) {
      operator delete(__p);
    }
  }

  sub_9D478(&__p, (uint64_t)a1);
  uint64_t v13 = __p;
  if (__p && sub_9D704((unsigned __int8 *)__p))
  {
    double v14 = (*(double (**)(void *))(*(void *)v13 + 104LL))(v13);
    double v15 = fabs(a2);
    double v16 = fabs(v14);
    if (v15 < v16) {
      double v15 = v16;
    }
    if (v15 >= 1.0) {
      double v17 = v15 * 2.22044605e-16;
    }
    else {
      double v17 = 2.22044605e-16;
    }
    if (vabdd_f64(a2, v14) > v17)
    {
      char v24 = (os_log_t *)sub_138E8(13);
      uint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 641;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Accessory device controlled. Other sample rates not supported.",  buf,  0x12u);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Accessory device controlled. Other sample rates not supported.");
    }

    char v18 = 0;
  }

  else
  {
    char v18 = 1;
  }

  int v19 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v18 & 1) != 0) {
        goto LABEL_30;
      }
      return 0LL;
    }
  }

  if ((v18 & 1) == 0) {
    return 0LL;
  }
LABEL_30:
  (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *, double))(*(void *)&a1->_os_unfair_lock_opaque
                                                                          + 192LL))( buf,  a1,  a2);
  uint64_t v22 = (*(uint64_t (**)(os_unfair_lock_s *, _BYTE *))(*(void *)&a1->_os_unfair_lock_opaque + 200LL))( a1,  buf);
  sub_32C8C(*(void **)&buf[8]);
  return v22;
}

void sub_998A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_998E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t outData = 0LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.int mSelector = 0x676C6F6275696420LL;
  uint64_t PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), &inAddress, 0, 0LL, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(16);
    char v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, PropertyData);
        if (v9 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        double v14 = "AggregateDevice_CommonBase.cpp";
        __int16 v15 = 1024;
        int v16 = 671;
        __int16 v17 = 2080;
        char v18 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDeviceUID) returned status %s.",  buf,  0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  *(void *)a2 = outData;
  *(_BYTE *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 1;
}

uint64_t sub_99A38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (!result) {
    return *(void *)(*(void *)(*(void *)(a1 + 432) + 24LL) + 16LL);
  }
  return result;
}

void sub_99A58(void *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(void *))(*a1 + 120LL))(a1);
  sub_155918((uint64_t)v17, 0, v2, a1[52]);
  uint64_t v3 = v18;
  uint64_t v4 = *((unsigned int *)v18 + 2);
  if ((_DWORD)v4)
  {
    bzero((char *)v18 + 12, 4 * v4);
    sub_155D1C((uint64_t)v17);
    uint64_t v3 = v18;
  }

  free(v3);
  AudioObjectID v5 = (*(uint64_t (**)(void *))(*a1 + 120LL))(a1);
  sub_155918((uint64_t)v17, 1, v5, a1[52]);
  char v6 = v18;
  uint64_t v7 = *((unsigned int *)v18 + 2);
  if ((_DWORD)v7)
  {
    bzero((char *)v18 + 12, 4 * v7);
    sub_155D1C((uint64_t)v17);
    char v6 = v18;
  }

  free(v6);
  uint64_t v8 = (uint64_t *)a1[65];
  char v9 = (uint64_t *)a1[66];
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    v8 += 2;
    sub_280834(v10);
  }

  uint64_t v11 = (uint64_t *)a1[68];
  int v12 = (uint64_t *)a1[69];
  while (v11 != v12)
  {
    uint64_t v13 = *v11;
    v11 += 2;
    sub_280834(v13);
  }

  __int16 v15 = (uint64_t *)a1[30];
  double v14 = (uint64_t *)a1[31];
  while (v15 != v14)
  {
    uint64_t v16 = *v15;
    v15 += 2;
    (*(void (**)(uint64_t))(*(void *)v16 + 56LL))(v16);
  }

void sub_99B70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_99B88(uint64_t a1, int a2)
{
  char v4 = 0;
  uint64_t v5 = 0LL;
  __int16 v21 = 256;
  char v6 = "untrustworthy";
  if (a2) {
    char v6 = "trustworthy";
  }
  char v18 = v6;
  do
  {
    char v7 = v4;
    int v8 = buf[v5 - 2];
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, buf[v5 - 2]);
    if (v9)
    {
      uint64_t v10 = 0LL;
      if (v8) {
        uint64_t v11 = "output";
      }
      else {
        uint64_t v11 = "input";
      }
      do
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96LL))(a1, v8 != 0, v10);
        if (v12)
        {
          sub_27FBD4(v12, a2);
          uint64_t v13 = sub_138E8(16);
          if ((*(_BYTE *)(v13 + 8) & 1) != 0)
          {
            double v14 = *(os_log_s **)v13;
            if (*(void *)v13)
            {
              if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
              {
                sub_7D084(__p, v11);
                __int16 v15 = __p;
                if (v20 < 0) {
                  __int16 v15 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                unsigned int v23 = "AggregateDevice_CommonBase.cpp";
                __int16 v24 = 1024;
                int v25 = 482;
                __int16 v26 = 2080;
                unint64_t v27 = v15;
                __int16 v28 = 1024;
                int v29 = v10;
                __int16 v30 = 2080;
                __int16 v31 = v18;
                _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %s stream index %u is now flagged as %s",  buf,  0x2Cu);
                if (v20 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }

        else
        {
          uint64_t v16 = (os_log_t *)sub_138E8(16);
          __int16 v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            unsigned int v23 = "AggregateDevice_CommonBase.cpp";
            __int16 v24 = 1024;
            int v25 = 478;
            __int16 v26 = 1024;
            LODWORD(v27) = v10;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Stream index %u was not resolvable to a va::VirtualStream",  buf,  0x18u);
          }
        }

        uint64_t v10 = (v10 + 1);
      }

      while (v9 != (_DWORD)v10);
    }

    char v4 = 1;
    uint64_t v5 = 1LL;
  }

  while ((v7 & 1) == 0);
}

void sub_99DF8(uint64_t a1, int a2)
{
  char v4 = 0;
  uint64_t v5 = 0LL;
  __int16 v20 = 256;
  char v6 = "un";
  if (a2) {
    char v6 = "";
  }
  int v19 = v6;
  do
  {
    char v7 = v4;
    int v8 = *((unsigned __int8 *)&v20 + v5);
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, *((unsigned __int8 *)&v20 + v5));
    if (v9)
    {
      uint64_t v10 = 0LL;
      do
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96LL))(a1, v8 != 0, v10);
        uint64_t v12 = v11;
        if (v11)
        {
          if (*(unsigned __int8 *)(v11 + 400) != a2)
          {
            uint64_t v13 = (os_log_t *)sub_138E8(22);
            double v14 = *v13;
            if (*v13)
            {
              if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
              {
                sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(v12 + 8));
                __int16 v15 = __p;
                if (v22 < 0) {
                  __int16 v15 = (void **)__p[0];
                }
                uint64_t v16 = "un";
                if (*(_BYTE *)(v12 + 400)) {
                  uint64_t v16 = "";
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                __int16 v24 = "VirtualStream.cpp";
                __int16 v25 = 1024;
                int v26 = 951;
                __int16 v27 = 2080;
                __int16 v28 = v15;
                __int16 v29 = 2080;
                __int16 v30 = v16;
                __int16 v31 = 2080;
                double v32 = v19;
                _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Stream %s is currently flagged as %strustworthy, but it should be flagged as %strustworthy.",  buf,  0x30u);
                if (v22 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }

        else
        {
          __int16 v17 = (os_log_t *)sub_138E8(16);
          char v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v24 = "AggregateDevice_CommonBase.cpp";
            __int16 v25 = 1024;
            int v26 = 498;
            __int16 v27 = 1024;
            LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = v10;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Stream index %u was not resolvable to a va::VirtualStream",  buf,  0x18u);
          }
        }

        uint64_t v10 = (v10 + 1);
      }

      while (v9 != (_DWORD)v10);
    }

    char v4 = 1;
    uint64_t v5 = 1LL;
  }

  while ((v7 & 1) == 0);
}

void sub_9A06C(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  if (!v6)
  {
    char v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)__int16 v25 = "StandardUtilities.h";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 279;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v8 = *(void *)(v6 + 80);
  char v7 = *(std::__shared_weak_count **)(v6 + 88);
  if (!v7 || (int v9 = std::__shared_weak_count::lock(v7)) == 0LL) {
    sub_9D954();
  }
  if (!v8)
  {
    __int16 v21 = (os_log_t *)sub_138E8(13);
    char v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)__int16 v25 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 137;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [masterDevice is NULL]: Got NULL for the aggregate's master physical device",  buf,  0x12u);
    }

    unsigned int v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Got NULL for the aggregate's master physical device");
  }

  uint64_t v10 = v9;
  double v11 = (*(double (**)(unint64_t, double))(*(void *)v8 + 296LL))(v8, a3);
  *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  sub_9D988((uint64_t *)buf, a1 + 23, "", 143);
  for (uint64_t i = *(void *)&v25[4]; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
  {
    unint64_t v13 = v8;
    double v14 = v11;
    if (*(void *)(i + 16) != v8)
    {
      else {
        v15.n128_f64[0] = v11;
      }
      (*(void (**)(void, __n128))(**(void **)(i + 16) + 296LL))(*(void *)(i + 16), v15);
      unint64_t v13 = *(void *)(i + 16);
    }

    sub_77608((uint64_t **)a2, v13, v14);
  }

  sub_1BB88((uint64_t *)buf);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    unint64_t v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

void sub_9A344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9A3A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) != *(void *)(a1 + 200))
  {
    __int128 v59 = (os_log_t *)sub_138E8(13);
    uint64_t v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      std::to_string(&__p, *(void *)(a1 + 200));
      int size = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v62 = __p.__r_.__value_.__r.__words[0];
      std::to_string(&v68, *(void *)(a2 + 16));
      p_p = &__p;
      if (size < 0) {
        p_p = (std::string *)v62;
      }
      if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v64 = &v68;
      }
      else {
        uint64_t v64 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v72 = 1024;
      int v73 = 172;
      __int16 v74 = 2080;
      double v75 = *(double *)&p_p;
      __int16 v76 = 2080;
      char v77 = v64;
      _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Encountered malformed sample rate description. Expected %s entries, found %s",  buf,  0x26u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "Encountered malformed sample rate description. Expected %s entries, found %s");
  }

  char v4 = *(void **)(a1 + 192);
  uint64_t v5 = &unk_3FF000;
  if (v4 == (void *)(a1 + 184)) {
    goto LABEL_51;
  }
  uint64_t v6 = 0LL;
  do
  {
    uint64_t v67 = 0LL;
    char v7 = (std::__shared_weak_count *)v4[3];
    if (v7)
    {
      unint64_t v8 = std::__shared_weak_count::lock(v7);
      uint64_t v67 = v8;
      if (!v8) {
        goto LABEL_18;
      }
      int v9 = (os_unfair_lock_s *)v4[2];
      if (v9)
      {
        uint64_t v10 = v8;
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        if (!(_DWORD)v6)
        {
          double v16 = sub_1D7A2C(*(double **)(a2 + 8), (unint64_t)v9);
          uint64_t v17 = sub_138E8(16);
          uint64_t v18 = sub_138E8(36);
          char v19 = 0;
          uint64_t v20 = 0LL;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
          uint64_t v21 = *(void *)(v17 + 8);
          while (1)
          {
            uint64_t v22 = *(int *)&buf[4 * v20];
            char v23 = v19;
            if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
              break;
            }
            char v19 = 1;
            uint64_t v20 = 1LL;
            if ((v23 & 1) != 0) {
              goto LABEL_26;
            }
          }

          if ((v21 & v22) == 0) {
            uint64_t v17 = v18;
          }
LABEL_26:
          __int16 v24 = *(os_log_s **)v17;
          if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            sub_23FE8((uint64_t)&__p, v9 + 2);
            __int16 v25 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int16 v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
            __int16 v72 = 1024;
            int v73 = 182;
            __int16 v74 = 2048;
            double v75 = v16;
            __int16 v76 = 2080;
            char v77 = v25;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Synchronously setting sample rate to %f Hz on physical device %s.",  buf,  0x26u);
          }

          uint64_t v6 = (*(uint64_t (**)(os_unfair_lock_s *, double))(*(void *)&v9->_os_unfair_lock_opaque + 112LL))( v9,  v16);
          if ((_DWORD)v6)
          {
            uint64_t v26 = sub_138E8(16);
            uint64_t v27 = sub_138E8(36);
            char v28 = 0;
            uint64_t v29 = 0LL;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            uint64_t v30 = *(void *)(v26 + 8);
            while (1)
            {
              uint64_t v31 = *(int *)&buf[4 * v29];
              char v32 = v28;
              if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
                break;
              }
              char v28 = 1;
              uint64_t v29 = 1LL;
              if ((v32 & 1) != 0) {
                goto LABEL_39;
              }
            }

            if ((v30 & v31) == 0) {
              uint64_t v26 = v27;
            }
LABEL_39:
            __int16 v33 = *(os_log_s **)v26;
            if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
              uint64_t v66 = a2;
              sub_48E98(&__p, theString[0]);
              int v34 = (char)__p.__r_.__value_.__s.__size_;
              std::string::size_type v35 = __p.__r_.__value_.__r.__words[0];
              sub_2CA1C(&v68, v6);
              int v36 = &__p;
              if (v34 < 0) {
                int v36 = (std::string *)v35;
              }
              __int16 v37 = &v68;
              if ((v68.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                __int16 v37 = (std::string *)v68.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
              __int16 v72 = 1024;
              int v73 = 184;
              __int16 v74 = 2048;
              double v75 = v16;
              __int16 v76 = 2080;
              char v77 = v36;
              __int16 v78 = 2080;
              std::string::size_type v79 = v37;
              _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Attempt to set sample rate to %f Hz on physical device %s failed with result '%s'",  buf,  0x30u);
              uint64_t v5 = (void *)&unk_3FF000;
              a2 = v66;
              sub_19DFC((uint64_t)theString);
            }
          }
        }

        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }

    if (v67)
    {
      double v14 = (unint64_t *)&v67->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }

void sub_9AADC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9AB50(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*a1 + 272LL))(a1))
  {
    char v7 = (os_log_t *)sub_138E8(13);
    unint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "AggregateDevice_CommonBase.cpp";
      __int16 v15 = 1024;
      int v16 = 538;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a2 && a1[57])
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    double v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "AggregateDevice_CommonBase.cpp";
      __int16 v15 = 1024;
      int v16 = 539;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v13,  0x12u);
    }

    unint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }

  uint64_t result = sub_1B6F8((uint64_t)a1);
  a1[57] = a2;
  a1[58] = a3;
  return result;
}

void sub_9AD18(_Unwind_Exception *a1)
{
}

uint64_t sub_9AD38(AudioObjectID *a1, AudioTimeStamp *a2)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272LL))(a1) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "AggregateDevice_CommonBase.cpp";
      __int16 v14 = 1024;
      int v15 = 576;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v12,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B6F8((uint64_t)a1);
  uint64_t result = AudioDeviceGetCurrentTime(a1[32], a2);
  if ((_DWORD)result)
  {
    int v8 = result;
    int v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        int v13 = "AggregateDevice_CommonBase.cpp";
        __int16 v14 = 1024;
        int v15 = 581;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to get current time.",  (uint8_t *)&v12,  0x12u);
      }
    }

    double v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v11 = &off_4865A0;
    uint64_t v11[2] = v8;
  }

  return result;
}

void sub_9AEF4(_Unwind_Exception *a1)
{
}

uint64_t sub_9AF10(AudioObjectID *a1, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272LL))(a1) & 1) == 0)
  {
    char v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 587;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B6F8((uint64_t)a1);
  uint64_t result = AudioDeviceTranslateTime(a1[32], a2, a3);
  if ((_DWORD)result)
  {
    int v10 = result;
    double v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 592;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to translate time.",  (uint8_t *)&v14,  0x12u);
      }
    }

    int v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v13 = &off_4865A0;
    v13[2] = v10;
  }

  return result;
}

void sub_9B0DC(_Unwind_Exception *a1)
{
}

uint64_t sub_9B0F8(AudioObjectID *a1, AudioTimeStamp *a2, UInt32 a3)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272LL))(a1) & 1) == 0)
  {
    char v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 598;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B6F8((uint64_t)a1);
  uint64_t result = AudioDeviceGetNearestStartTime(a1[32], a2, a3);
  if ((_DWORD)result)
  {
    int v10 = result;
    double v11 = (os_log_t *)sub_138E8(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        int v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 603;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to get nearest start time.",  (uint8_t *)&v14,  0x12u);
      }
    }

    int v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v13 = &off_4865A0;
    v13[2] = v10;
  }

  return result;
}

void sub_9B2C4(_Unwind_Exception *a1)
{
}

void sub_9B2E0(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a1 + 130;
  uint64_t v7 = 130LL;
  if ((*(_WORD *)(a2 + 184) & 1) == 0)
  {
    uint64_t v7 = 136LL;
    uint64_t v6 = a1 + 136;
  }

  uint64_t v8 = *(void *)&a1[v7]._os_unfair_lock_opaque;
  uint64_t v9 = *(void *)&v6[2]._os_unfair_lock_opaque;
  if (v8 != v9)
  {
    int v10 = 0LL;
    do
    {
      sub_85A90((uint64_t *)v24, (void *)(*(void *)v8 + 112LL));
      sub_9DCB8((uint64_t *)buf, v24);
      sub_85B80((uint64_t *)v24);
      v24[0] = (void *)a2;
      if (buf == (uint8_t *)sub_9DE24(*(void **)&v27[4], buf, (uint64_t *)v24))
      {
        int v12 = v10;
      }

      else
      {
        uint64_t v11 = *(void *)(*(void *)v8 + 152LL);
        int v12 = *(std::__shared_weak_count **)(*(void *)v8 + 160LL);
        if (v12)
        {
          p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
          do
            unint64_t v14 = __ldxr(p_shared_weak_owners);
          while (__stxr(v14 + 1, p_shared_weak_owners));
        }

        *a3 = v11;
        a3[1] = v12;
        if (v10) {
          std::__shared_weak_count::__release_weak(v10);
        }
        if (v12 && v12->__shared_owners_ != -1)
        {
          sub_1BB88((uint64_t *)buf);
          break;
        }
      }

      sub_1BB88((uint64_t *)buf);
      v8 += 16LL;
      int v10 = v12;
    }

    while (v8 != v9);
  }

  uint64_t v15 = a3[1];
  if (!v15 || *(void *)(v15 + 8) == -1LL)
  {
    __int16 v16 = (os_log_t *)sub_138E8(16);
    int v17 = *v16;
    if (*v16)
    {
      if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
      {
        sub_23FE8((uint64_t)v24, a1 + 2);
        int v18 = v25;
        char v19 = (void **)v24[0];
        sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a2 + 8));
        uint64_t v20 = v24;
        if (v18 < 0) {
          uint64_t v20 = v19;
        }
        if (v23 >= 0) {
          uint64_t v21 = __p;
        }
        else {
          uint64_t v21 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)uint64_t v27 = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&v27[8] = 1024;
        *(_DWORD *)&v27[10] = 245;
        __int16 v28 = 2080;
        uint64_t v29 = v20;
        __int16 v30 = 2080;
        uint64_t v31 = v21;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d failed to fetch software volume command on AggregateDevice %s with port %s",  buf,  0x26u);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
      }
    }
  }

void sub_9B530( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v17 < 0) {
    operator delete(v15);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9B58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 520;
  uint64_t v5 = 520LL;
  if ((*(_WORD *)(a2 + 184) & 1) == 0)
  {
    uint64_t v5 = 544LL;
    uint64_t v4 = a1 + 544;
  }

  uint64_t v6 = *(uint64_t **)(a1 + v5);
  uint64_t v7 = *(uint64_t **)(v4 + 8);
  if (v6 == v7) {
    return 0LL;
  }
  while (1)
  {
    sub_85A90(v10, (void *)(*v6 + 112));
    sub_9DCB8(v11, v10);
    sub_85B80(v10);
    v10[0] = a2;
    if (v11 != sub_9DE24((void *)v11[1], v11, v10)) {
      break;
    }
    sub_1BB88(v11);
    v6 += 2;
    if (v6 == v7) {
      return 0LL;
    }
  }

  uint64_t v8 = *v6;
  sub_1BB88(v11);
  return v8;
}

void sub_9B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_9B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0LL;
  __int16 v18 = 256;
  uint64_t v10 = a1 + 520;
  uint64_t v11 = a1 + 544;
  while (2)
  {
    char v12 = v8;
    uint64_t v13 = 544LL;
    if (*((_BYTE *)&v18 + v9))
    {
      uint64_t v14 = v11;
    }

    else
    {
      uint64_t v13 = 520LL;
      uint64_t v14 = v10;
    }

    uint64_t v15 = *(void *)(a1 + v13);
    uint64_t v16 = *(void *)(v14 + 8);
    while (v15 != v16)
    {
      if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v15 + 136LL) + 56LL))( *(void *)(*(void *)v15 + 136LL),  a2,  a3,  a4) & 1) != 0) {
        return 1LL;
      }
      v15 += 16LL;
    }

    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) == 0) {
      continue;
    }
    break;
  }

  return 0LL;
}

float sub_9B768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 352LL))(a1) & 1) == 0)
  {
    uint64_t v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 292;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v8 = 0;
  uint64_t v9 = 0LL;
  __int16 v31 = 256;
LABEL_3:
  char v10 = v8;
  uint64_t v11 = 544LL;
  if (buf[v9 - 2])
  {
    uint64_t v12 = a1 + 544;
  }

  else
  {
    uint64_t v11 = 520LL;
    uint64_t v12 = a1 + 520;
  }

  uint64_t v13 = *(void *)(a1 + v11);
  uint64_t v14 = *(void *)(v12 + 8);
  while (1)
  {
    if (v13 == v14)
    {
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v10 & 1) != 0)
      {
        uint64_t v15 = (os_log_t *)sub_138E8(13);
        uint64_t v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v33 = 1024;
          int v34 = 309;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate a DSP chain with the given parameters, but HasD SPParameter returned true.",  buf,  0x12u);
        }

        int v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v17,  "Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.");
      }

      goto LABEL_3;
    }

    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, float *, uint64_t))(**(void **)(*(void *)v13 + 136LL)
                                                                                     + 64LL))( *(void *)(*(void *)v13 + 136LL),  a2,  a3,  &v30,  a4))
      break;
    v13 += 16LL;
  }

  uint64_t v18 = sub_138E8(16);
  uint64_t v19 = sub_138E8(24);
  char v20 = 0;
  uint64_t v21 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v22 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)&buf[4 * v21];
    char v24 = v20;
    if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
      break;
    }
    char v20 = 1;
    uint64_t v21 = 1LL;
    if ((v24 & 1) != 0)
    {
      if ((v22 & 1) == 0) {
        return v30;
      }
      goto LABEL_23;
    }
  }

  if ((v22 & v23) == 0) {
    uint64_t v18 = v19;
  }
  if ((*(void *)(v18 + 8) & 1) != 0)
  {
LABEL_23:
    char v25 = *(os_log_s **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 303;
      __int16 v35 = 2048;
      double v36 = v30;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetParameter: %f.", buf, 0x1Cu);
    }
  }

  return v30;
}

void sub_9BAAC(_Unwind_Exception *a1)
{
}

void sub_9BACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 352LL))(a1) & 1) == 0)
  {
    float v30 = (os_log_t *)sub_138E8(13);
    __int16 v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 315;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  char v10 = 0;
  uint64_t v11 = 0LL;
  __int16 v36 = 256;
LABEL_3:
  char v12 = v10;
  uint64_t v13 = 544LL;
  if (buf[v11 - 2])
  {
    uint64_t v14 = a1 + 544;
  }

  else
  {
    uint64_t v13 = 520LL;
    uint64_t v14 = a1 + 520;
  }

  uint64_t v15 = *(void *)(a1 + v13);
  uint64_t v16 = *(void *)(v14 + 8);
  while (1)
  {
    if (v15 == v16)
    {
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v12 & 1) != 0)
      {
        uint64_t v18 = (os_log_t *)sub_138E8(13);
        uint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v38 = 1024;
          int v39 = 332;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate a DSP chain with the given parameters, but HasD SPParameter returned true.",  buf,  0x12u);
        }

        char v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v20,  "Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.");
      }

      goto LABEL_3;
    }

    uint64_t v17 = *(void *)(*(void *)v15 + 136LL);
    v15 += 16LL;
  }

  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)v17 + 72LL))( v17,  a2,  a3,  a4,  a5);
  uint64_t v22 = sub_138E8(16);
  uint64_t v23 = sub_138E8(24);
  char v24 = 0;
  uint64_t v25 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    uint64_t v27 = *(int *)&buf[4 * v25];
    char v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    char v24 = 1;
    uint64_t v25 = 1LL;
    if ((v28 & 1) != 0)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
  }

  if ((v26 & v27) == 0) {
    uint64_t v22 = v23;
  }
  if ((*(void *)(v22 + 8) & 1) != 0)
  {
LABEL_23:
    uint64_t v29 = *(os_log_s **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 325;
      __int16 v40 = 2048;
      double v41 = a5;
      __int16 v42 = 1024;
      int v43 = v21;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->SetParameter(%f): %d.", buf, 0x22u);
    }
  }

void sub_9BEE0(_Unwind_Exception *a1)
{
}

BOOL sub_9BF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = a1 + 520;
  uint64_t v8 = 520LL;
  if (a5)
  {
    uint64_t v8 = 544LL;
    uint64_t v7 = a1 + 544;
  }

  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(v7 + 8);
  if (v9 == v10)
  {
LABEL_6:
    char v12 = (os_log_t *)sub_138E8(16);
    uint64_t v13 = *v12;
    if (*v12)
    {
      BOOL result = os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_2CA1C(v21, a3);
      int v15 = v22;
      uint64_t v16 = (void **)v21[0];
      sub_2CA1C(__p, a2);
      uint64_t v17 = v21;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v20 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v24 = "AggregateDevice_CommonBase.cpp";
      __int16 v25 = 1024;
      int v26 = 346;
      __int16 v27 = 2080;
      char v28 = v17;
      __int16 v29 = 2080;
      float v30 = v18;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }

    return 0LL;
  }

  else
  {
    while (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v9 + 136LL) + 88LL))( *(void *)(*(void *)v9 + 136LL),  a2,  a3,  a4) & 1) == 0)
    {
      v9 += 16LL;
      if (v9 == v10) {
        goto LABEL_6;
      }
    }

    return 1LL;
  }

void sub_9C0B0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_9C0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(_WORD *)AudioObjectPropertyAddress buf = 256;
  uint64_t v10 = a1 + 520;
  uint64_t v11 = a1 + 544;
  while (2)
  {
    char v12 = v8;
    uint64_t v13 = 544LL;
    if (buf[v9])
    {
      uint64_t v14 = v11;
    }

    else
    {
      uint64_t v13 = 520LL;
      uint64_t v14 = v10;
    }

    uint64_t v15 = *(void *)(a1 + v13);
    uint64_t v16 = *(void *)(v14 + 8);
    while (v15 != v16)
    {
      if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v15 + 136LL) + 88LL))( *(void *)(*(void *)v15 + 136LL),  a2,  a3,  a4) & 1) != 0) {
        return 1LL;
      }
      v15 += 16LL;
    }

    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) == 0) {
      continue;
    }
    break;
  }

  uint64_t v17 = (os_log_t *)sub_138E8(16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    BOOL result = os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_2CA1C(v26, a3);
    int v20 = v27;
    int v21 = (void **)v26[0];
    sub_2CA1C(__p, a2);
    char v22 = v26;
    if (v20 < 0) {
      char v22 = v21;
    }
    if (v25 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v29 = "AggregateDevice_CommonBase.cpp";
    __int16 v30 = 1024;
    int v31 = 364;
    __int16 v32 = 2080;
    __int16 v33 = v22;
    __int16 v34 = 2080;
    __int16 v35 = v23;
    _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }

  return 0LL;
}

void sub_9C2B8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9C2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = a1 + 520;
  uint64_t v10 = 520LL;
  if (a7)
  {
    uint64_t v10 = 544LL;
    uint64_t v9 = a1 + 544;
  }

  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(v9 + 8);
  if (v11 == v12)
  {
LABEL_6:
    uint64_t v17 = (os_log_t *)sub_138E8(16);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v26, a3);
      int v19 = v27;
      int v20 = (void **)v26[0];
      sub_2CA1C(__p, a2);
      int v21 = v26;
      if (v19 < 0) {
        int v21 = v20;
      }
      if (v25 >= 0) {
        char v22 = __p;
      }
      else {
        char v22 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v29 = "AggregateDevice_CommonBase.cpp";
      __int16 v30 = 1024;
      int v31 = 381;
      __int16 v32 = 2080;
      __int16 v33 = v21;
      __int16 v34 = 2080;
      __int16 v35 = v22;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }

    return 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)v11 + 136LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 88LL))(v16, a2, a3, a6)) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 96LL))( v16,  a2,  a3,  a4,  a5,  a6);
      }
      v11 += 16LL;
      if (v11 == v12) {
        goto LABEL_6;
      }
    }
  }

void sub_9C4E8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_9C508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, a6, a7);
  if (!v12)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v35, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 391;
      __int16 v40 = 2112;
      *(void **)double v41 = v35[0];
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [stream is NULL]: Encountered a NULL stream in %@",  buf,  0x1Cu);
      sub_19DFC((uint64_t)v35);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Encountered a NULL stream in %@");
  }

  uint64_t v13 = *(void *)(v12 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88LL))(v13, a2, a3, 0LL))
  {
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 112LL))( v13,  a2,  a3,  a4,  a5,  0LL);
    uint64_t v15 = sub_138E8(16);
    uint64_t v16 = sub_138E8(24);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if ((*(void *)(v15 + 8) & 1) != 0)
    {
LABEL_11:
      char v22 = *(os_log_s **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 397;
        __int16 v40 = 1024;
        *(_DWORD *)double v41 = a3;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v14;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->SetProperty(%d): %d.", buf, 0x1Eu);
      }
    }

void sub_9C8B0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_9C8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, a6, a7);
  if (!v12)
  {
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v35, a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 407;
      __int16 v40 = 2112;
      *(void **)double v41 = v35[0];
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [stream is NULL]: Encountered a NULL stream in %@",  buf,  0x1Cu);
      sub_19DFC((uint64_t)v35);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Encountered a NULL stream in %@");
  }

  uint64_t v13 = *(void *)(v12 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88LL))(v13, a2, a3, 0LL))
  {
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v13 + 104LL))( v13,  a2,  a3,  a4,  a5,  0LL,  0LL);
    uint64_t v15 = sub_138E8(16);
    uint64_t v16 = sub_138E8(24);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if ((*(void *)(v15 + 8) & 1) != 0)
    {
LABEL_11:
      char v22 = *(os_log_s **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 413;
        __int16 v40 = 1024;
        *(_DWORD *)double v41 = a3;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v14;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetDSPProperty(%u): %d.", buf, 0x1Eu);
      }
    }

void sub_9CC8C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9CCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
  if (!(_DWORD)result)
  {
LABEL_15:
    char v10 = 0;
    *a4 = 0;
    goto LABEL_16;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, a2, a3);
  if (!v9)
  {
    uint64_t result = sub_138E8(16);
    uint64_t v11 = *(os_log_s **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v17, a1);
        uint64_t v12 = v17[0];
        if ((_DWORD)a2) {
          uint64_t v13 = "output";
        }
        else {
          uint64_t v13 = "input";
        }
        sub_7D084(__p, v13);
        if (v16 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v19 = "AggregateDevice_CommonBase.cpp";
        __int16 v20 = 1024;
        int v21 = 432;
        __int16 v22 = 2112;
        uint64_t v23 = v12;
        __int16 v24 = 2080;
        char v25 = v14;
        __int16 v26 = 1024;
        int v27 = a3;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Encountered a null stream in AggregateDevice_CommonBase::GetDSPConfigurationUseCases() for device '% @'. Direction: %s, stream index: %u",  buf,  0x2Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = sub_19DFC((uint64_t)v17);
      }
    }

    goto LABEL_15;
  }

  uint64_t result = sub_8427C((uint64_t)a4, *(void *)(v9 + 136) + 1000LL);
  char v10 = 1;
LABEL_16:
  a4[40] = v10;
  return result;
}

void sub_9CE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_9CE84(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 != 1869968496)
  {
    if (a4 == 1768845428)
    {
LABEL_9:
      uint64_t v11 = (uint64_t *)a1[65];
      uint64_t v12 = (uint64_t *)a1[66];
      while (v11 != v12)
      {
        uint64_t v13 = *v11;
        v11 += 2;
        sub_190DD0(*(void *)(v13 + 136), *a2, a3);
      }

      return;
    }

    if (a4 != 1735159650) {
      return;
    }
  }

  char v8 = (uint64_t *)a1[68];
  uint64_t v9 = (uint64_t *)a1[69];
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    v8 += 2;
    sub_190DD0(*(void *)(v10 + 136), *a2, a3);
  }

  if (a4 == 1768845428 || a4 == 1735159650) {
    goto LABEL_9;
  }
}

uint64_t sub_9CF5C(void *a1, int a2, int a3)
{
  uint64_t v26 = 3LL;
  BYTE4(v2std::iostream::~basic_iostream(v2, v3 + 8) = a3;
  int v35 = 0;
  (*(void (**)(void *, uint64_t *, uint8_t *, uint64_t))(*a1 + 424LL))(a1, &v26, buf, 1869968496LL);
  uint64_t result = sub_9DBD0((uint64_t)&v28 + 4);
  uint64_t v7 = a1[68];
  uint64_t v8 = a1[69];
  if (v7 != v8)
  {
    uint64_t v9 = "disabled";
    if (a2) {
      uint64_t v10 = "enabled";
    }
    else {
      uint64_t v10 = "disabled";
    }
    if (a3) {
      float v11 = 1.0;
    }
    else {
      float v11 = 0.0;
    }
    if (a3) {
      uint64_t v9 = "enabled";
    }
    char v25 = v9;
    do
    {
      uint64_t v12 = *(void *)(*(void *)v7 + 136LL);
      if (!*(void *)(v12 + 376))
      {
        uint64_t v20 = sub_138E8(13);
        id v21 = sub_8C7D4(1, *(void **)v20, *(void *)(v20 + 8));
        __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = v22;
        if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v28 = "DSPChain.mm";
          __int16 v29 = 1024;
          int v30 = 3109;
          _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      uint64_t v13 = (os_log_s *)*(id *)sub_138E8(41);
      int v14 = v13;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = (void *)(v12 + 712);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        int v28 = "DSPChain.mm";
        __int16 v29 = 1024;
        int v30 = 3113;
        __int16 v31 = 2080;
        __int16 v32 = v10;
        __int16 v33 = 2080;
        char v34 = v15;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d DSPChain::SetAdaptiveVolumeActive() - setting adaptive volume %s on chain '%s'.",  buf,  0x26u);
      }

      uint64_t v16 = *(void *)(v12 + 376);
      atomic_store(a2, (unsigned __int8 *)(v16 + 64));
      atomic_store(a3, (unsigned __int8 *)(v16 + 65));
      uint64_t result = sub_AADB0((void *)(v12 + 1000), 2);
      if ((_DWORD)result)
      {
        uint64_t result = sub_AADB0((void *)(v12 + 1000), 0);
        if ((result & 1) == 0)
        {
          char v17 = (os_log_s *)*(id *)sub_138E8(41);
          uint64_t v18 = v17;
          if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = (void *)(v12 + 712);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v28 = "DSPChain.mm";
            __int16 v29 = 1024;
            int v30 = 3124;
            __int16 v31 = 2080;
            __int16 v32 = v25;
            __int16 v33 = 2080;
            char v34 = v19;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d DSPChain::SetAdaptiveVolumeActive() - setting AULoudnessNormalizer %s on chain '%s'.",  buf,  0x26u);
          }

          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v12 + 72LL))( v12,  1685287015LL,  1819174254LL,  0LL,  v11);
        }
      }

      v7 += 16LL;
    }

    while (v7 != v8);
  }

  return result;
}

void sub_9D2C0(_Unwind_Exception *a1)
{
}

uint64_t sub_9D2EC(uint64_t a1, int a2)
{
  for (uint64_t i = v7[1]; ; uint64_t i = *(void *)(i + 8))
  {
    if ((uint64_t *)i == v7)
    {
      uint64_t v5 = 0LL;
      goto LABEL_8;
    }

    if ((*(uint64_t (**)(void))(**(void **)(i + 16) + 200LL))(*(void *)(i + 16)))
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(i + 16) + 200LL))(*(void *)(i + 16));
    }
  }

  uint64_t v5 = 1LL;
LABEL_8:
  sub_1BB88(v7);
  return v5;
}

void sub_9D398(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_9D3AC(uint64_t a1)
{
  if (v9) {
    int v2 = sub_9D704(v9) ^ 1;
  }
  else {
    int v2 = 1;
  }
  uint64_t v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v2) {
        goto LABEL_10;
      }
LABEL_12:
      uint64_t v7 = 0x100000000LL;
      uint64_t v6 = 2LL;
      return v7 | v6;
    }
  }

  if (!v2) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  return v7 | v6;
}

void sub_9D464( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_9D478(void *a1, uint64_t a2)
{
  if ((_os_feature_enabled_impl("VirtualAudio", "ios_hw_capabilities") & 1) == 0)
  {
    float v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "AggregateDevice_CommonBase.cpp";
      __int16 v21 = 1024;
      int v22 = 3476;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136LL))(a2);
  sub_9D824(&v17, v4);
  uint64_t v5 = v17;
  if (!v17)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "AggregateDevice_CommonBase.cpp";
      __int16 v21 = 1024;
      int v22 = 3479;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [mainDevice is NULL]: Got NULL for the aggregate's main physical device",  buf,  0x12u);
    }

    uint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Got NULL for the aggregate's main physical device");
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 392LL))(v17))
  {
    uint64_t v6 = v18;
    *a1 = v5;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    uint64_t v6 = v18;
    if (!v18) {
      return;
    }
  }

  uint64_t v9 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

void sub_9D6C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9D704(unsigned __int8 *a1)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 392LL))(a1) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "PhysicalDevice.h";
      __int16 v8 = 1024;
      int v9 = 379;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return a1[264];
}

void sub_9D808(_Unwind_Exception *exception_object)
{
}

std::__shared_weak_count *sub_9D824(void *a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        int v9 = "StandardUtilities.h";
        __int16 v10 = 1024;
        int v11 = 279;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
      }
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 88);
  *a1 = *(void *)(a2 + 80);
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_10:
    sub_9D954();
  }

  uint64_t result = std::__shared_weak_count::lock(v3);
  a1[1] = result;
  if (!result) {
    goto LABEL_10;
  }
  return result;
}

void sub_9D938(_Unwind_Exception *exception_object)
{
}

void sub_9D954()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void sub_9D988(uint64_t *a1, void *a2, const char *a3, int a4)
{
  int v22 = &v22;
  uint64_t v23 = (uint64_t *)&v22;
  uint64_t v24 = 0LL;
  uint64_t v5 = (void *)a2[1];
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    int v9 = a1 + 2;
    goto LABEL_10;
  }

  int v9 = &v24;
  do
  {
    __int128 v25 = 0uLL;
    __int16 v10 = (std::__shared_weak_count *)v5[3];
    if (!v10
      || (*((void *)&v25 + 1) = std::__shared_weak_count::lock(v10)) == 0LL
      || (*(void *)&__int128 v25 = v5[2], !(void)v25))
    {
      uint64_t v17 = (os_log_t *)sub_138E8(13);
      uint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        if (a3)
        {
          uint64_t v20 = strrchr(a3, 47);
          if (v20) {
            uint64_t v19 = v20 + 1;
          }
          else {
            uint64_t v19 = a3;
          }
        }

        else
        {
          uint64_t v19 = 0LL;
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        int v27 = "StandardUtilities.h";
        __int16 v28 = 1024;
        int v29 = 267;
        __int16 v30 = 2080;
        __int16 v31 = v19;
        __int16 v32 = 1024;
        int v33 = a4;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  buf,  0x22u);
      }

      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
    }

    int v11 = operator new(0x20uLL);
    v11[1] = v25;
    uint64_t v12 = (uint64_t)v22;
    *(void *)int v11 = v22;
    *((void *)v11 + 1) = &v22;
    *(void *)(v12 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
    uint64_t v13 = v24 + 1;
    int v22 = v11;
    ++v24;
    uint64_t v5 = (void *)v5[1];
  }

  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (v13)
  {
    int v14 = v23;
    uint64_t v15 = *v23;
    *(void *)(v15 + std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)v11 + 1);
    **((void **)v11 + 1) = v15;
    uint64_t v16 = *a1;
    *(void *)(v16 + std::iostream::~basic_iostream(v2, v3 + 8) = v14;
    *int v14 = v16;
    *a1 = (uint64_t)v11;
    *((void *)v11 + 1) = a1;
    a1[2] = v13;
LABEL_10:
    *int v9 = 0LL;
  }

  sub_1BB88((uint64_t *)&v22);
}

void sub_9DB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_1BB88((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9DBD0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_473AB8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_9DC2C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
  {
  }

void sub_9DC80(uint64_t a1, uint64_t a2)
{
}

void sub_9DCB8(uint64_t *a1, void *a2)
{
  __int16 v21 = &v21;
  int v22 = (uint64_t *)&v21;
  uint64_t v23 = 0LL;
  uint64_t v3 = (void *)a2[1];
  if (v3 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    uint64_t v5 = a1 + 2;
    goto LABEL_17;
  }

  uint64_t v5 = &v23;
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)v3[3];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = v3[2];
        if (v9)
        {
          __int16 v10 = operator new(0x20uLL);
          v10[2] = v9;
          uint64_t v10[3] = v8;
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            unint64_t v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          uint64_t v13 = (uint64_t)v21;
          v21[1] = v10;
          *__int16 v10 = v13;
          v10[1] = &v21;
          __int16 v21 = v10;
          ++v23;
        }

        int v14 = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }

    uint64_t v3 = (void *)v3[1];
  }

  while (v3 != a2);
  uint64_t v16 = v23;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (v16)
  {
    uint64_t v18 = (uint64_t)v21;
    uint64_t v17 = v22;
    uint64_t v19 = *v22;
    *(void *)(v19 + std::iostream::~basic_iostream(v2, v3 + 8) = v21[1];
    **(void **)(v18 + std::iostream::~basic_iostream(v2, v3 + 8) = v19;
    uint64_t v20 = *a1;
    *(void *)(v20 + std::iostream::~basic_iostream(v2, v3 + 8) = v17;
    *uint64_t v17 = v20;
    *a1 = v18;
    *(void *)(v18 + std::iostream::~basic_iostream(v2, v3 + 8) = a1;
    a1[2] = v16;
LABEL_17:
    *uint64_t v5 = 0LL;
  }

  sub_1BB88((uint64_t *)&v21);
}

void sub_9DE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_1BB88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_9DE24(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[3];
      if (v6)
      {
        uint64_t v7 = v3[2];
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        uint64_t v10 = *a3;
        int v11 = std::__shared_weak_count::lock(v6);
        if (v11)
        {
          unint64_t v12 = v11;
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            unint64_t v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v12);
          }
        }

        else
        {
          uint64_t v7 = 0LL;
        }

        std::__shared_weak_count::__release_weak(v6);
        if (v7 == v10) {
          return v3;
        }
      }

      else if (!*a3)
      {
        return v3;
      }

      uint64_t v3 = (void *)v3[1];
    }

    while (v3 != a2);
    return a2;
  }

  return v3;
}

uint64_t sub_9DF04(int a1, AudioObjectID a2, uint64_t *a3, double *a4)
{
  uint64_t v8 = sub_138E8(13);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    unint64_t v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        v74.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v74.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_613AC((uint64_t)&v75, (unsigned int *)&v74);
        uint64_t v10 = v75.__m_.__opaque[15] >= 0 ? &v75 : (std::mutex *)v75.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
        __int16 v65 = 1024;
        int v66 = 166;
        __int16 v67 = 2080;
        *(void *)std::string v68 = v10;
        *(_WORD *)&v68[8] = 1024;
        *(_DWORD *)&v68[10] = a2;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v75.__m_.__opaque[15] < 0) {
          operator delete((void *)v75.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v59 = a2;
  uint64_t v60 = *a3;
  int v61 = *((_DWORD *)a3 + 2);
  int v62 = 0;
  uint64_t v63 = 0LL;
  if (a1) {
    goto LABEL_10;
  }
  double v27 = COERCE_DOUBLE(sub_9E8AC((uint64_t)&v59));
  if (!v28 && *a4 == v27)
  {
    uint64_t v49 = sub_138E8(13);
    if ((*(_BYTE *)(v49 + 8) & 1) == 0) {
      return 0LL;
    }
    __int16 v40 = *(os_log_s **)v49;
    if (!*(void *)v49 || !os_log_type_enabled(*(os_log_t *)v49, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.int mSelector = 136315650;
    *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
    __int16 v65 = 1024;
    int v66 = 191;
    __int16 v67 = 1024;
    *(_DWORD *)std::string v68 = a2;
    goto LABEL_91;
  }

  uint64_t v29 = sub_138E8(13);
  if ((*(_BYTE *)(v29 + 8) & 1) != 0)
  {
    __int16 v30 = *(os_log_s **)v29;
    if (*(void *)v29)
    {
      if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
      {
        v74.__cv_.__uint64_t sig = *a3;
        *(_DWORD *)v74.__cv_.__opaque = *((_DWORD *)a3 + 2);
        sub_613AC((uint64_t)&v75, (unsigned int *)&v74);
        __int16 v31 = v75.__m_.__opaque[15] >= 0 ? &v75 : (std::mutex *)v75.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
        __int16 v65 = 1024;
        int v66 = 199;
        __int16 v67 = 2080;
        *(void *)std::string v68 = v31;
        *(_WORD *)&v68[8] = 1024;
        *(_DWORD *)&v68[10] = a2;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v75.__m_.__opaque[15] < 0) {
          operator delete((void *)v75.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a3;
  uint64_t v16 = AudioObjectSetPropertyData(a2, &buf, 0, 0LL, 8u, a4);
  if (!(_DWORD)v16)
  {
LABEL_10:
    double v11 = COERCE_DOUBLE(sub_9E8AC((uint64_t)&v59));
    if (!v12 && *a4 == v11)
    {
      uint64_t v39 = sub_138E8(13);
      if ((*(_BYTE *)(v39 + 8) & 1) == 0) {
        return 0LL;
      }
      __int16 v40 = *(os_log_s **)v39;
      if (!*(void *)v39 || !os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
      __int16 v65 = 1024;
      int v66 = 219;
      __int16 v67 = 1024;
      *(_DWORD *)std::string v68 = a2;
LABEL_91:
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      return 0LL;
    }

    memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
    v75.__m_.__uint64_t sig = 850045863LL;
    memset(v74.__cv_.__opaque, 0, sizeof(v74.__cv_.__opaque));
    v74.__cv_.__uint64_t sig = 1018212795LL;
    char v58 = 0;
    AudioObjectID v51 = a2;
    sub_7D684(&inClientData, a2, (AudioObjectPropertyAddress *)a3, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v58);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v18.__d_.__rep_) / -1000)
    {
      double v14 = COERCE_DOUBLE(sub_9E8AC((uint64_t)&v59));
      uint64_t v16 = v15;
      if ((_DWORD)v15) {
        goto LABEL_85;
      }
      double v17 = v14;
      if (*a4 == v14) {
        break;
      }
      if (i <= 0)
      {
        int v44 = (os_log_t *)sub_138E8(13);
        uint64_t v16 = 2003329396LL;
        uint64_t v45 = *v44;
        if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
        {
          uint64_t v52 = *a3;
          int v53 = *((_DWORD *)a3 + 2);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v52);
          uint64_t v46 = "updated";
          if (!a1) {
            uint64_t v46 = "set";
          }
          if (v55 >= 0) {
            p_lk = &__lk;
          }
          else {
            p_lk = __lk.__m_;
          }
          buf.int mSelector = 136316930;
          BOOL v48 = *a4 == v17;
          *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
          __int16 v65 = 1024;
          int v66 = 248;
          __int16 v67 = 2080;
          *(void *)std::string v68 = v46;
          *(_WORD *)&v68[8] = 2080;
          *(void *)&v68[10] = p_lk;
          *(_WORD *)&v68[18] = 2080;
          *(void *)&v68[20] = v46;
          *(_WORD *)&v68[28] = 1024;
          BOOL v69 = v48;
          __int16 v70 = 1024;
          int v71 = 0;
          __int16 v72 = 1024;
          AudioObjectID v73 = v51;
          _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v55 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_9E82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, std::condition_variable *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
}

uint64_t sub_9E8AC(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  sub_9EA74((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  uint64_t v4 = v19;
  if (v19)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v17, v4);
        int v7 = v18;
        uint64_t v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v13);
        unint64_t v9 = v17;
        if (v7 < 0) {
          unint64_t v9 = v8;
        }
        if (v16 >= 0) {
          uint64_t v10 = __p;
        }
        else {
          uint64_t v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.unsigned int mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        int v28 = v9;
        __int16 v29 = 2080;
        __int16 v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }

  if (v21) {
    return v20;
  }
  else {
    return 0LL;
  }
}

void sub_9EA54(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9EA74( uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    uint64_t result = sub_37408(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if ((_DWORD)result)
    {
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, &v11);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v11;
        *(_BYTE *)(a1 + 16) = 1;
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }

  return result;
}

uint64_t sub_9EB48()
{
  unint64_t v0 = atomic_load(&qword_49D9C8);
  if (v0 != -1LL)
  {
    uint64_t v4 = &v2;
    UInt32 v3 = &v4;
    std::__call_once(&qword_49D9C8, &v3, (void (__cdecl *)(void *))sub_9EBA4);
  }

  return qword_49D9D0;
}

double sub_9EBA4()
{
  unint64_t v0 = (char *)operator new(0x228uLL);
  *((void *)v0 + 2) = 0LL;
  *((void *)v0 + 1) = 0LL;
  *(void *)unint64_t v0 = v0 + 8;
  *((void *)v0 + 5) = 0LL;
  *((void *)v0 + 6) = 0LL;
  *((void *)v0 + 4) = v0 + 40;
  *((void *)v0 + 10) = 0LL;
  *((void *)v0 + 9) = 0LL;
  *((void *)v0 + std::iostream::~basic_iostream(v2, v3 + 8) = v0 + 72;
  *((void *)v0 + 14) = 0LL;
  *((void *)v0 + 15) = 0LL;
  *((void *)v0 + 13) = 0LL;
  *((void *)v0 + 12) = v0 + 104;
  *((void *)v0 + 16) = 0LL;
  *((void *)v0 + 17) = 0LL;
  *((void *)v0 + 19) = 0LL;
  *((void *)v0 + 1std::iostream::~basic_iostream(v2, v3 + 8) = v0 + 152;
  uint64_t v1 = (uint64_t **)(v0 + 144);
  *((void *)v0 + 22) = 0LL;
  *((void *)v0 + 23) = 0LL;
  *((void *)v0 + 20) = 0LL;
  *((void *)v0 + 21) = v0 + 176;
  *((_OWORD *)v0 + 12) = 0u;
  *(_OWORD *)(v0 + 24std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  char v2 = (CFTypeRef **)(v0 + 248);
  UInt32 v3 = v0 + 216;
  __int16 v67 = (void **)(v0 + 296);
  std::string v68 = (void **)(v0 + 320);
  *((_OWORD *)v0 + 13) = 0u;
  *((_OWORD *)v0 + 14) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 32std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + sub_13818(v0 + 296) = 0u;
  *(_OWORD *)(v0 + sub_13818(v0 + 264) = 0u;
  *((void *)v0 + 43) = 850045863LL;
  *((void *)v0 + 50) = 0LL;
  *((_OWORD *)v0 + memset(buf, 0, 24) = 0u;
  *((_OWORD *)v0 + 22) = 0u;
  *((_OWORD *)v0 + 23) = 0u;
  BOOL v69 = (void **)(v0 + 272);
  sub_189C20((uint64_t)(v0 + 408));
  sub_7F234(&cf, (CFTypeRef)qword_48F6C8);
  uint64_t v4 = (CFTypeRef *)*((void *)v0 + 32);
  unint64_t v5 = *((void *)v0 + 33);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v6 = *v2;
    uint64_t v7 = v4 - *v2;
    unint64_t v8 = v7 + 1;
    uint64_t v9 = v5 - (void)v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    else {
      unint64_t v10 = v8;
    }
    __int16 v72 = v0 + 264;
    if (v10)
    {
      unint64_t v10 = (unint64_t)sub_7DC90(v10);
      uint64_t v6 = (CFTypeRef *)*((void *)v0 + 31);
      uint64_t v4 = (CFTypeRef *)*((void *)v0 + 32);
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    int v12 = (CFTypeRef *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    unint64_t v71 = v13;
    *int v12 = cf;
    int v14 = v12 + 1;
    CFTypeRef cf = 0LL;
    *(void *)&__p[16] = v12 + 1;
    if (v4 != v6)
    {
      do
      {
        uint64_t v15 = *--v4;
        *--int v12 = v15;
        CFTypeRef *v4 = 0LL;
      }

      while (v4 != v6);
      int v14 = *(void **)&__p[16];
      unint64_t v13 = v71;
    }

    __int128 v16 = *(_OWORD *)(v0 + 248);
    *((void *)v0 + 31) = v12;
    *((void *)v0 + 32) = v14;
    *(_OWORD *)&__p[8] = v16;
    unint64_t v17 = *((void *)v0 + 33);
    *((void *)v0 + 33) = v13;
    unint64_t v71 = v17;
    *(void *)std::string __p = v16;
    sub_E6DC4((uint64_t)__p);
    CFTypeRef v18 = cf;
    *((void *)v0 + 32) = v14;
    if (v18) {
      CFRelease(v18);
    }
  }

  else
  {
    CFTypeRef *v4 = cf;
    *((void *)v0 + 32) = v4 + 1;
  }

  sub_7F234(&cf, (CFTypeRef)qword_48F6C0);
  unsigned int v19 = (CFTypeRef *)*((void *)v0 + 32);
  unint64_t v20 = *((void *)v0 + 33);
  if ((unint64_t)v19 >= v20)
  {
    char v21 = *v2;
    uint64_t v22 = v19 - *v2;
    unint64_t v23 = v22 + 1;
    uint64_t v24 = v20 - (void)v21;
    if (v24 >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    else {
      unint64_t v25 = v23;
    }
    __int16 v72 = v0 + 264;
    if (v25)
    {
      unint64_t v25 = (unint64_t)sub_7DC90(v25);
      char v21 = (CFTypeRef *)*((void *)v0 + 31);
      unsigned int v19 = (CFTypeRef *)*((void *)v0 + 32);
    }

    else
    {
      uint64_t v26 = 0LL;
    }

    __int16 v27 = (CFTypeRef *)(v25 + 8 * v22);
    unint64_t v28 = v25 + 8 * v26;
    unint64_t v71 = v28;
    CFTypeRef *v27 = cf;
    __int16 v29 = v27 + 1;
    CFTypeRef cf = 0LL;
    *(void *)&__p[16] = v27 + 1;
    if (v19 != v21)
    {
      do
      {
        __int16 v30 = *--v19;
        *--__int16 v27 = v30;
        *unsigned int v19 = 0LL;
      }

      while (v19 != v21);
      __int16 v29 = *(void **)&__p[16];
      unint64_t v28 = v71;
    }

    __int128 v31 = *(_OWORD *)(v0 + 248);
    *((void *)v0 + 31) = v27;
    *((void *)v0 + 32) = v29;
    *(_OWORD *)&__p[8] = v31;
    unint64_t v32 = *((void *)v0 + 33);
    *((void *)v0 + 33) = v28;
    unint64_t v71 = v32;
    *(void *)std::string __p = v31;
    sub_E6DC4((uint64_t)__p);
    CFTypeRef v33 = cf;
    *((void *)v0 + 32) = v29;
    if (v33) {
      CFRelease(v33);
    }
  }

  else
  {
    *unsigned int v19 = cf;
    *((void *)v0 + 32) = v19 + 1;
  }

  sub_7F234(&cf, (CFTypeRef)qword_48F6B8);
  char v34 = (CFTypeRef *)*((void *)v0 + 32);
  unint64_t v35 = *((void *)v0 + 33);
  if ((unint64_t)v34 >= v35)
  {
    char v36 = *v2;
    uint64_t v37 = v34 - *v2;
    unint64_t v38 = v37 + 1;
    uint64_t v39 = v35 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    else {
      unint64_t v40 = v38;
    }
    __int16 v72 = v0 + 264;
    if (v40)
    {
      unint64_t v40 = (unint64_t)sub_7DC90(v40);
      char v36 = (CFTypeRef *)*((void *)v0 + 31);
      char v34 = (CFTypeRef *)*((void *)v0 + 32);
    }

    else
    {
      uint64_t v41 = 0LL;
    }

    __int16 v42 = (CFTypeRef *)(v40 + 8 * v37);
    unint64_t v43 = v40 + 8 * v41;
    unint64_t v71 = v43;
    *__int16 v42 = cf;
    int v44 = v42 + 1;
    CFTypeRef cf = 0LL;
    *(void *)&__p[16] = v42 + 1;
    if (v34 != v36)
    {
      do
      {
        uint64_t v45 = *--v34;
        *--__int16 v42 = v45;
        *char v34 = 0LL;
      }

      while (v34 != v36);
      int v44 = *(void **)&__p[16];
      unint64_t v43 = v71;
    }

    __int128 v46 = *(_OWORD *)(v0 + 248);
    *((void *)v0 + 31) = v42;
    *((void *)v0 + 32) = v44;
    *(_OWORD *)&__p[8] = v46;
    unint64_t v47 = *((void *)v0 + 33);
    *((void *)v0 + 33) = v43;
    unint64_t v71 = v47;
    *(void *)std::string __p = v46;
    sub_E6DC4((uint64_t)__p);
    CFTypeRef v48 = cf;
    *((void *)v0 + 32) = v44;
    if (v48) {
      CFRelease(v48);
    }
  }

  else
  {
    *char v34 = cf;
    *((void *)v0 + 32) = v34 + 1;
  }

  sub_7F234(&cf, (CFTypeRef)qword_48F6D0);
  uint64_t v49 = (CFTypeRef *)*((void *)v0 + 32);
  unint64_t v50 = *((void *)v0 + 33);
  if ((unint64_t)v49 >= v50)
  {
    AudioObjectID v51 = *v2;
    uint64_t v52 = v49 - *v2;
    unint64_t v53 = v52 + 1;
    uint64_t v54 = v50 - (void)v51;
    if (v54 >> 2 > v53) {
      unint64_t v53 = v54 >> 2;
    }
    else {
      unint64_t v55 = v53;
    }
    __int16 v72 = v0 + 264;
    if (v55)
    {
      unint64_t v55 = (unint64_t)sub_7DC90(v55);
      AudioObjectID v51 = (CFTypeRef *)*((void *)v0 + 31);
      uint64_t v49 = (CFTypeRef *)*((void *)v0 + 32);
    }

    else
    {
      uint64_t v56 = 0LL;
    }

    int v57 = (CFTypeRef *)(v55 + 8 * v52);
    unint64_t v58 = v55 + 8 * v56;
    unint64_t v71 = v58;
    CFTypeRef *v57 = cf;
    AudioObjectID v59 = v57 + 1;
    CFTypeRef cf = 0LL;
    *(void *)&__p[16] = v57 + 1;
    if (v49 == v51)
    {
      UInt32 v3 = v0 + 216;
    }

    else
    {
      UInt32 v3 = v0 + 216;
      do
      {
        uint64_t v60 = *--v49;
        *--int v57 = v60;
        CFTypeRef *v49 = 0LL;
      }

      while (v49 != v51);
      AudioObjectID v59 = *(void **)&__p[16];
      unint64_t v58 = v71;
    }

    __int128 v61 = *(_OWORD *)(v0 + 248);
    *((void *)v0 + 31) = v57;
    *((void *)v0 + 32) = v59;
    *(_OWORD *)&__p[8] = v61;
    unint64_t v62 = *((void *)v0 + 33);
    *((void *)v0 + 33) = v58;
    unint64_t v71 = v62;
    *(void *)std::string __p = v61;
    sub_E6DC4((uint64_t)__p);
    CFTypeRef v63 = cf;
    *((void *)v0 + 32) = v59;
    if (v63) {
      CFRelease(v63);
    }
  }

  else
  {
    CFTypeRef *v49 = cf;
    *((void *)v0 + 32) = v49 + 1;
  }

  *((_DWORD *)v0 + 6) = 0;
  *((_DWORD *)v0 + 14) = 0;
  *((_DWORD *)v0 + 22) = 0;
  *((void *)v0 + 30) = 0LL;
  if (v0[215] < 0)
  {
    *((void *)v0 + 25) = 11LL;
    uint64_t v64 = (char *)*((void *)v0 + 24);
  }

  else
  {
    v0[215] = 11;
    uint64_t v64 = v0 + 192;
  }

  strcpy(v64, "thermal_100");
  if (v0[239] < 0)
  {
    *((void *)v0 + 2std::iostream::~basic_iostream(v2, v3 + 8) = 11LL;
    __int16 v65 = (char *)*((void *)v0 + 27);
  }

  else
  {
    v0[239] = 11;
    __int16 v65 = v3;
  }

  strcpy(v65, "peakpower_i");
  if (v0[215] < 0)
  {
    sub_24054(__p, *((void **)v0 + 24), *((void *)v0 + 25));
  }

  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)v0 + 12);
    *(void *)&__p[16] = *((void *)v0 + 26);
  }

  LODWORD(v71) = 0;
  sub_19DF34(v1, (void **)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v0[239] < 0)
  {
    sub_24054(__p, *((void **)v0 + 27), *((void *)v0 + 28));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    *(void *)&__p[16] = *((void *)v3 + 2);
  }

  LODWORD(v71) = 0;
  sub_19DF34(v1, (void **)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_48100((uint64_t)__p, (const __CFString *)qword_48F6C0);
  if (v0[295] < 0) {
    operator delete(*v69);
  }
  *(_OWORD *)BOOL v69 = *(_OWORD *)__p;
  *((void *)v0 + 36) = *(void *)&__p[16];
  sub_48100((uint64_t)__p, (const __CFString *)qword_48F6C8);
  if (v0[319] < 0) {
    operator delete(*v67);
  }
  *(_OWORD *)__int16 v67 = *(_OWORD *)__p;
  *((void *)v0 + 39) = *(void *)&__p[16];
  sub_48100((uint64_t)__p, (const __CFString *)qword_48F6D0);
  if (v0[343] < 0) {
    operator delete(*v68);
  }
  double result = *(double *)__p;
  *(_OWORD *)std::string v68 = *(_OWORD *)__p;
  *((void *)v0 + 42) = *(void *)&__p[16];
  __dmb(0xBu);
  qword_49D9D0 = (uint64_t)v0;
  return result;
}